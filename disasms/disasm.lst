
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 23 09 01 00       	call   c0010943 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 08 0f 03 c0       	mov    eax,0xc0030f08
c0000025:	3d 08 0f 03 c0       	cmp    eax,0xc0030f08
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 08 0f 03 c0       	push   0xc0030f08
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 08 0f 03 c0       	mov    eax,0xc0030f08
c0000051:	2d 08 0f 03 c0       	sub    eax,0xc0030f08
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 08 0f 03 c0       	push   0xc0030f08
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 30 03 c0 00 	cmp    BYTE PTR ds:0xc00330c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb b8 a4 02 c0       	mov    ebx,0xc002a4b8
c0000097:	81 eb b4 a4 02 c0    	sub    ebx,0xc002a4b4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be b4 a4 02 c0       	mov    esi,0xc002a4b4
c00000a6:	a1 c4 30 03 c0       	mov    eax,ds:0xc00330c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 30 03 c0       	mov    ds:0xc00330c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 30 03 c0       	mov    eax,ds:0xc00330c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 08 0f 03 c0       	push   0xc0030f08
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 30 03 c0 01 	mov    BYTE PTR ds:0xc00330c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 30 03 c0       	push   0xc00330c8
c0000108:	68 08 0f 03 c0       	push   0xc0030f08
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 af 6a 01 00       	call   c0016d5c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 09 4f 01 00       	call   c00151ce <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 8d 6a 01 00       	call   c0016d5c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ee 6f 01 00       	call   c00172dc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 69 75 01 00       	call   c0017860 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 71 03 c0 	lgdtd  ds:0xc0037118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 e2 f9 00 00       	jmp    c000fd61 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 30 03 c0       	mov    ds:0xc00330e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 30 03 c0    	mov    DWORD PTR ds:0xc00330e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 30 03 c0    	mov    ebx,DWORD PTR ds:0xc00330e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 c0 a4 02 c0 02 	test   BYTE PTR [edx-0x3ffd5b40],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 c0 a4 02 c0 01 	test   BYTE PTR [edx-0x3ffd5b40],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 c0 a4 02 c0 08 	test   BYTE PTR [edx-0x3ffd5b40],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 c0 a4 02 c0 04 	test   BYTE PTR [ecx-0x3ffd5b40],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 c0 a4 02 c0 01 	test   BYTE PTR [edx-0x3ffd5b40],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 31 03 c0    	mov    ebx,DWORD PTR ds:0xc0033100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 31 03 c0    	mov    DWORD PTR ds:0xc0033100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 31 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccefc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 31 03 c0 	mov    DWORD PTR [eax*4-0x3ffccefc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 31 03 c0    	mov    DWORD PTR ds:0xc0033100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 31 03 c0    	cmp    DWORD PTR ds:0xc003312c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 31 03 c0    	mov    ecx,DWORD PTR ds:0xc003313c
c0000df7:	c7 42 0c 34 31 03 c0 	mov    DWORD PTR [edx+0xc],0xc0033134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 31 03 c0    	mov    DWORD PTR ds:0xc003313c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 31 03 c0    	mov    DWORD PTR ds:0xc003312c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 31 03 c0 02 	test   BYTE PTR ds:0xc0033100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 34 03 c0    	dec    DWORD PTR ds:0xc0033450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 34 03 c0    	sub    DWORD PTR ds:0xc0033464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 2d f7 00 00       	call   c001058d <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 3a f6 00 00       	call   c001052f <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 19 f5 00 00       	call   c00104f9 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 14 f5 00 00       	call   c001052f <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 c0 f3 00 00       	call   c00104f9 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 a6 f3 00 00       	call   c00104f9 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 7c f3 00 00       	call   c00104f9 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 31 03 c0    	mov    edi,DWORD PTR ds:0xc0033100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 31 03 c0       	mov    eax,0xc0033100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 31 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffccefc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 31 03 c0 	mov    DWORD PTR [edx*4-0x3ffccefc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 31 03 c0 	lea    edx,[eax*8-0x3ffccecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 31 03 c0       	mov    eax,0xc0033100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 31 03 c0    	mov    ebx,DWORD PTR ds:0xc0033140
c00012e5:	81 fb 34 31 03 c0    	cmp    ebx,0xc0033134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 31 03 c0       	cmp    eax,0xc0033134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 31 03 c0    	cmp    DWORD PTR ds:0xc0033130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 31 03 c0       	mov    ds:0xc003313c,eax
c0001321:	a3 40 31 03 c0       	mov    ds:0xc0033140,eax
c0001326:	a3 30 31 03 c0       	mov    ds:0xc0033130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 31 03 c0 	mov    DWORD PTR [eax+0x8],0xc0033134
c0001334:	c7 40 0c 34 31 03 c0 	mov    DWORD PTR [eax+0xc],0xc0033134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 31 03 c0       	mov    ds:0xc0033140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 31 03 c0 	mov    DWORD PTR [eax+0x8],0xc0033134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 30 03 c0 	lea    ebp,[edx*4-0x3ffccf08]
c0001385:	8b 14 95 00 31 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffccf00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 31 03 c0 	lea    ecx,[edx*4-0x3ffccf00]
c00013a0:	8b 14 95 00 31 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffccf00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 34 03 c0 	or     DWORD PTR [edi*4-0x3ffccbcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 31 03 c0 	lea    eax,[eax*8-0x3ffccecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 31 03 c0    	mov    DWORD PTR ds:0xc003313c,ecx
c000145a:	89 0d 40 31 03 c0    	mov    DWORD PTR ds:0xc0033140,ecx
c0001460:	c7 41 08 34 31 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0033134
c0001467:	c7 41 0c 34 31 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0033134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 31 03 c0 	lea    edx,[ecx*8-0x3ffcced4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 34 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffccbcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 34 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffccbcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 31 03 c0 	lea    edx,[eax*4-0x3ffcced4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 34 03 c0 	mov    DWORD PTR [ebx*4-0x3ffccbcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 31 03 c0    	mov    DWORD PTR ds:0xc003313c,edi
c000152d:	89 3d 40 31 03 c0    	mov    DWORD PTR ds:0xc0033140,edi
c0001533:	c7 47 08 34 31 03 c0 	mov    DWORD PTR [edi+0x8],0xc0033134
c000153a:	c7 47 0c 34 31 03 c0 	mov    DWORD PTR [edi+0xc],0xc0033134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 31 03 c0    	mov    DWORD PTR ds:0xc0033130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 31 03 c0       	mov    eax,ds:0xc003312c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 31 03 c0    	mov    DWORD PTR ds:0xc003312c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 31 03 c0       	mov    edx,0xc0033100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 31 03 c0 00 	cmp    DWORD PTR ds:0xc0033100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 31 03 c0       	mov    eax,0xc0033100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 34 03 c0    	mov    ebx,DWORD PTR ds:0xc0033454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 34 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 34 03 c0    	mov    DWORD PTR ds:0xc0033454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 31 03 c0    	cmp    DWORD PTR ds:0xc003312c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 31 03 c0    	mov    DWORD PTR ds:0xc003312c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 31 03 c0 00 	cmp    DWORD PTR ds:0xc0033100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 34 03 c0    	push   DWORD PTR ds:0xc003345c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 31 03 c0 00 	cmp    DWORD PTR ds:0xc0033100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 34 03 c0       	mov    eax,ds:0xc003345c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 31 03 c0 00 	cmp    DWORD PTR ds:0xc003312c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 31 03 c0       	mov    eax,ds:0xc003312c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 31 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffccefc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 31 03 c0       	mov    eax,0xc0033134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 34 03 c0       	cmp    eax,0xc003342c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 34 03 c0       	mov    eax,ds:0xc0033468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 34 03 c0    	mov    esi,DWORD PTR ds:0xc0033450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 34 03 c0    	mov    esi,DWORD PTR ds:0xc0033464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 34 03 c0    	mov    esi,DWORD PTR ds:0xc0033474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 31 03 c0       	mov    eax,0xc0033100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 c4 a5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5a3c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 31 03 c0       	mov    eax,ds:0xc0033100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 31 03 c0       	mov    ds:0xc0033100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 34 03 c0    	mov    DWORD PTR ds:0xc0033444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 34 03 c0    	mov    DWORD PTR ds:0xc0033448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 34 03 c0    	mov    DWORD PTR ds:0xc003344c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 34 03 c0    	mov    DWORD PTR ds:0xc0033454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 20 95 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc6ae0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 41 d5 01 00       	jmp    c001f4cc <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 20 95 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc6ae0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 6b d5 01 00       	jmp    c001f50c <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 20 95 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc6ae0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 8c d5 01 00       	jmp    c001f54c <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 20 a7 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd58e0]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 20 a7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd58e0]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 54 eb 02 c0       	mov    edx,0xc002eb54
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba dc a5 02 c0       	mov    edx,0xc002a5dc
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 34 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffccb60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 34 03 c0    	mov    ax,ds:0xc0033480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 34 03 c0    	mov    ds:0xc0033480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 e2 a5 02 c0       	mov    eax,0xc002a5e2
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf a0 a6 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd5960]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 eb a5 02 c0       	mov    eax,0xc002a5eb
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 20 a7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd58e0]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 34 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffccb60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 34 03 c0 	mov    DWORD PTR [edx*4-0x3ffccb60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 70 a6 02 c0       	mov    eax,0xc002a670
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 34 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffccb60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 60 a6 02 c0       	mov    ebx,0xc002a660
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 40 a6 02 c0       	mov    eax,0xc002a640
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 50 a6 02 c0       	mov    eax,0xc002a650
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba f2 a5 02 c0       	mov    edx,0xc002a5f2
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba fe a5 02 c0       	mov    edx,0xc002a5fe
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 12 a6 02 c0       	mov    edx,0xc002a612
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 f8 a7 00 00       	call   c001060f <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 f0 a7 00 00       	call   c001061f <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 40 aa 02 c0 	mov    DWORD PTR [esp+0xc],0xc002aa40
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 40 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aa40
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 40 a8 02 c0       	mov    eax,0xc002a840
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 80 a7 02 c0       	mov    eax,0xc002a780
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 40 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd58c0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 40 ab 02 c0       	push   0xc002ab40
c0006303:	e8 60 9b 01 00       	call   c001fe68 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 30 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffccfe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 30 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffccf80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 4e ab 02 c0       	push   0xc002ab4e
c000633b:	e8 28 9b 01 00       	call   c001fe68 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 35 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffcca30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 30 03 c0 	movsx  eax,BYTE PTR ds:0xc0033060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 91 9a 01 00       	call   c001fe0c <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 30 03 c0       	mov    eax,0xc0033080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 30 03 c0       	mov    eax,0xc0033020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 3e 03 c0 00 	cmp    DWORD PTR ds:0xc0033eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 30 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccf80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 3e 03 c0    	mov    ebp,DWORD PTR ds:0xc0033eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 5d ab 02 c0       	push   0xc002ab5d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 3e 03 c0       	mov    ecx,0xc0033e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 35 03 c0 00 	cmp    DWORD PTR [edi-0x3ffccac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 35 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffccac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 35 03 c0    	mov    DWORD PTR [edi-0x3ffccabc],esi
c0006746:	89 87 40 35 03 c0    	mov    DWORD PTR [edi-0x3ffccac0],eax
c000674c:	c7 87 48 35 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffccab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 35 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffcca30],0x0
c0006768:	89 87 4c 35 03 c0    	mov    DWORD PTR [edi-0x3ffccab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 35 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 35 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffccac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 35 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffcca30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 35 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffccab8]
c00067e1:	8b 8d 4c 35 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffccab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 35 03 c0    	add    eax,DWORD PTR [ebp-0x3ffccac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 30 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffccfe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 35 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffccab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 35 03 c0    	add    DWORD PTR [ebp-0x3ffccab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 35 03 c0    	lea    ecx,[ebp-0x3ffccac0]
c00068d9:	83 bd 40 35 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffccac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 35 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffccab4]
c0006917:	05 40 35 03 c0       	add    eax,0xc0033540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 35 03 c0    	mov    eax,DWORD PTR [edx-0x3ffccab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 35 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffccac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 35 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffcca30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 35 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffccab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 35 03 c0 00 	cmp    DWORD PTR [edx-0x3ffccac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 35 03 c0 00 	cmp    DWORD PTR [edx-0x3ffcca30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 35 03 c0    	mov    eax,DWORD PTR [edx-0x3ffccab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 35 03 c0    	lea    edi,[eax-0x3ffccac0]
c00069d6:	83 b8 40 35 03 c0 00 	cmp    DWORD PTR [eax-0x3ffccac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 60 ab 02 c0       	push   0xc002ab60
c00069fa:	e8 69 94 01 00       	call   c001fe68 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 7d 94 01 00       	call   c001fe84 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 65 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab65
c0006a14:	e8 4f 94 01 00       	call   c001fe68 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 35 03 c0    	push   DWORD PTR [ebx-0x3ffccac0]
c0006a20:	e8 5f 94 01 00       	call   c001fe84 <iso_kprintfd>
c0006a25:	c7 04 24 6b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab6b
c0006a2c:	e8 37 94 01 00       	call   c001fe68 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 35 03 c0    	push   DWORD PTR [ebx-0x3ffccabc]
c0006a38:	e8 47 94 01 00       	call   c001fe84 <iso_kprintfd>
c0006a3d:	c7 04 24 71 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab71
c0006a44:	e8 1f 94 01 00       	call   c001fe68 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 35 03 c0    	push   DWORD PTR [ebx-0x3ffcca30]
c0006a50:	e8 2f 94 01 00       	call   c001fe84 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 30 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffccf80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 35 03 c0    	mov    edi,DWORD PTR [edx-0x3ffccab8]
c0006ab6:	81 c2 40 35 03 c0    	add    edx,0xc0033540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 30 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffccf80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 35 03 c0    	lea    ebp,[eax-0x3ffccaa8]
c0006b12:	83 3d b4 3e 03 c0 00 	cmp    DWORD PTR ds:0xc0033eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 35 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffccaa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 5d ab 02 c0       	push   0xc002ab5d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 35 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffccaad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 35 03 c0    	mov    DWORD PTR [ebx-0x3ffccab0],eax
c0006bee:	89 93 54 35 03 c0    	mov    DWORD PTR [ebx-0x3ffccaac],edx
c0006bf4:	81 c3 40 35 03 c0    	add    ebx,0xc0033540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 35 03 c0       	add    eax,0xc0033550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 7a ab 02 c0       	push   0xc002ab7a
c0006c19:	e8 4a 92 01 00       	call   c001fe68 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 30 03 c0       	mov    ds:0xc0033060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 3e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033eb4,0x0
c0006c4e:	a1 ac 3e 03 c0       	mov    eax,ds:0xc0033eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 30 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccf80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 85 ab 02 c0       	push   0xc002ab85
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 30 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffccf80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 3e 03 c0       	mov    ds:0xc0033eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 3e 03 c0 00 	cmp    DWORD PTR ds:0xc0033eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 3e 03 c0       	mov    eax,ds:0xc0033eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 30 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffccf80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 8c ab 02 c0       	push   0xc002ab8c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 30 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffccf80]
c0006cec:	bf 80 3e 03 c0       	mov    edi,0xc0033e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 3e 03 c0       	mov    eax,0xc0033e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 3e 03 c0       	mov    ds:0xc0033ea8,eax
c0006d0f:	b8 8a 3e 03 c0       	mov    eax,0xc0033e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 3e 03 c0       	mov    ds:0xc0033ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 93 ab 02 c0       	push   0xc002ab93
c0006d30:	e8 33 91 01 00       	call   c001fe68 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 9e ab 02 c0       	push   0xc002ab9e
c0006d4b:	e8 18 91 01 00       	call   c001fe68 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 35 03 c0       	push   0xc0033540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 35 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0033540,0xffffffff
c0006d75:	e8 95 98 00 00       	call   c001060f <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 3e 03 c0       	mov    ds:0xc0033eb0,eax
c0006d86:	e8 84 98 00 00       	call   c001060f <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 35 03 c0       	mov    ds:0xc0033520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 6f 98 00 00       	call   c001060f <malloc>
c0006da0:	89 04 9d 80 30 03 c0 	mov    DWORD PTR [ebx*4-0x3ffccf80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 56 98 00 00       	call   c001060f <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 30 03 c0 	mov    DWORD PTR [ebx*4-0x3ffccfe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 30 03 c0 	push   DWORD PTR [ebx*4-0x3ffccf80]
c0006de6:	e8 34 98 00 00       	call   c001061f <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 30 03 c0 	push   DWORD PTR [ebx*4-0x3ffccfe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 26 98 00 00       	call   c001061f <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 3e 03 c0       	mov    eax,ds:0xc0033eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 0c 98 00 00       	call   c001061f <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 35 03 c0       	mov    eax,ds:0xc0033520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 f7 97 00 00       	call   c001061f <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 35 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033520,0x0
c0006e35:	c7 05 b0 3e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be b0 ab 02 c0       	mov    esi,0xc002abb0
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 af ab 02 c0       	mov    al,ds:0xc002abaf
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	53                   	push   ebx
c0006ee7:	83 ec 14             	sub    esp,0x14
c0006eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006eee:	6a 10                	push   0x10
c0006ef0:	e8 2b 71 00 00       	call   c000e020 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006ef5:	83 c4 10             	add    esp,0x10
c0006ef8:	84 c0                	test   al,al
c0006efa:	75 12                	jne    c0006f0e <Dbg::logc(char)+0x28>
c0006efc:	ba fd 03 00 00       	mov    edx,0x3fd
c0006f01:	ec                   	in     al,dx
c0006f02:	a8 20                	test   al,0x20
c0006f04:	74 fb                	je     c0006f01 <Dbg::logc(char)+0x1b>
c0006f06:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f0b:	88 d8                	mov    al,bl
c0006f0d:	ee                   	out    dx,al
c0006f0e:	83 c4 08             	add    esp,0x8
c0006f11:	5b                   	pop    ebx
c0006f12:	c3                   	ret    

c0006f13 <Dbg::logs(char*)>:
c0006f13:	53                   	push   ebx
c0006f14:	83 ec 08             	sub    esp,0x8
c0006f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	74 16                	je     c0006f38 <Dbg::logs(char*)+0x25>
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	83 c3 01             	add    ebx,0x1
c0006f28:	50                   	push   eax
c0006f29:	e8 b8 ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f2e:	83 c4 10             	add    esp,0x10
c0006f31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f34:	85 c0                	test   eax,eax
c0006f36:	75 ea                	jne    c0006f22 <Dbg::logs(char*)+0xf>
c0006f38:	83 c4 08             	add    esp,0x8
c0006f3b:	5b                   	pop    ebx
c0006f3c:	c3                   	ret    

c0006f3d <Dbg::logWriteInt(unsigned int)>:
c0006f3d:	83 ec 1c             	sub    esp,0x1c
c0006f40:	6a 0a                	push   0xa
c0006f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f46:	50                   	push   eax
c0006f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f4b:	50                   	push   eax
c0006f4c:	e8 f5 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f51:	50                   	push   eax
c0006f52:	e8 bc ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f57:	83 c4 2c             	add    esp,0x2c
c0006f5a:	c3                   	ret    

c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f5b:	83 ec 1c             	sub    esp,0x1c
c0006f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f62:	50                   	push   eax
c0006f63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f67:	50                   	push   eax
c0006f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f6c:	52                   	push   edx
c0006f6d:	e8 d4 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f72:	50                   	push   eax
c0006f73:	e8 9b ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f78:	83 c4 2c             	add    esp,0x2c
c0006f7b:	c3                   	ret    

c0006f7c <Dbg::kprintf(char const*, ...)>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 1c             	sub    esp,0x1c
c0006f83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f87:	85 db                	test   ebx,ebx
c0006f89:	0f 84 4c 01 00 00    	je     c00070db <Dbg::kprintf(char const*, ...)+0x15f>
c0006f8f:	83 ec 0c             	sub    esp,0xc
c0006f92:	6a 10                	push   0x10
c0006f94:	e8 87 70 00 00       	call   c000e020 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f99:	83 c4 10             	add    esp,0x10
c0006f9c:	84 c0                	test   al,al
c0006f9e:	74 08                	je     c0006fa8 <Dbg::kprintf(char const*, ...)+0x2c>
c0006fa0:	83 c4 1c             	add    esp,0x1c
c0006fa3:	5b                   	pop    ebx
c0006fa4:	5e                   	pop    esi
c0006fa5:	5f                   	pop    edi
c0006fa6:	5d                   	pop    ebp
c0006fa7:	c3                   	ret    
c0006fa8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006fac:	31 ff                	xor    edi,edi
c0006fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fb5:	85 c0                	test   eax,eax
c0006fb7:	74 e7                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0006fb9:	8d 77 01             	lea    esi,[edi+0x1]
c0006fbc:	83 f8 25             	cmp    eax,0x25
c0006fbf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fc2:	75 4c                	jne    c0007010 <Dbg::kprintf(char const*, ...)+0x94>
c0006fc4:	83 c7 02             	add    edi,0x2
c0006fc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fca:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fcd:	83 e8 25             	sub    eax,0x25
c0006fd0:	0f b6 c0             	movzx  eax,al
c0006fd3:	83 f8 53             	cmp    eax,0x53
c0006fd6:	0f 87 e1 00 00 00    	ja     c00070bd <Dbg::kprintf(char const*, ...)+0x141>
c0006fdc:	ff 24 85 f8 ab 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5408]
c0006fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fe7:	83 ec 0c             	sub    esp,0xc
c0006fea:	89 c8                	mov    eax,ecx
c0006fec:	83 c1 04             	add    ecx,0x4
c0006fef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ff5:	50                   	push   eax
c0006ff6:	e8 42 ff ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0006ffb:	83 c4 10             	add    esp,0x10
c0006ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007001:	85 c0                	test   eax,eax
c0007003:	74 9b                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0007005:	8d 77 01             	lea    esi,[edi+0x1]
c0007008:	83 f8 25             	cmp    eax,0x25
c000700b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000700e:	74 b4                	je     c0006fc4 <Dbg::kprintf(char const*, ...)+0x48>
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 f7                	mov    edi,esi
c0007015:	50                   	push   eax
c0007016:	89 ee                	mov    esi,ebp
c0007018:	e8 c9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	eb dc                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c0007022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007026:	83 ec 0c             	sub    esp,0xc
c0007029:	89 c8                	mov    eax,ecx
c000702b:	83 c1 04             	add    ecx,0x4
c000702e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007030:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007034:	55                   	push   ebp
c0007035:	e8 d9 fe ff ff       	call   c0006f13 <Dbg::logs(char*)>
c000703a:	83 c4 10             	add    esp,0x10
c000703d:	eb bf                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	89 d0                	mov    eax,edx
c0007048:	83 c2 04             	add    edx,0x4
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007051:	51                   	push   ecx
c0007052:	e8 e6 fe ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	eb a2                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000705c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007060:	83 ec 0c             	sub    esp,0xc
c0007063:	89 d0                	mov    eax,edx
c0007065:	83 c2 04             	add    edx,0x4
c0007068:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000706b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000706f:	50                   	push   eax
c0007070:	e8 71 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007075:	83 c4 10             	add    esp,0x10
c0007078:	eb 84                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000707a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707e:	89 c8                	mov    eax,ecx
c0007080:	83 c1 04             	add    ecx,0x4
c0007083:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	6a 10                	push   0x10
c000708c:	8b 10                	mov    edx,DWORD PTR [eax]
c000708e:	52                   	push   edx
c000708f:	e8 c7 fe ff ff       	call   c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	e9 62 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000709c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070a0:	89 d0                	mov    eax,edx
c00070a2:	83 c2 08             	add    edx,0x8
c00070a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a9:	eb dc                	jmp    c0007087 <Dbg::kprintf(char const*, ...)+0x10b>
c00070ab:	83 ec 0c             	sub    esp,0xc
c00070ae:	6a 25                	push   0x25
c00070b0:	e8 31 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b5:	83 c4 10             	add    esp,0x10
c00070b8:	e9 41 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 25                	push   0x25
c00070c2:	e8 1f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ce:	e8 13 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	e9 23 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070db:	83 ec 0c             	sub    esp,0xc
c00070de:	68 c0 ab 02 c0       	push   0xc002abc0
c00070e3:	e8 94 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00070e8:	83 c4 10             	add    esp,0x10
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	5b                   	pop    ebx
c00070ef:	5e                   	pop    esi
c00070f0:	5f                   	pop    edi
c00070f1:	5d                   	pop    ebp
c00070f2:	c3                   	ret    
c00070f3:	90                   	nop

c00070f4 <KiUbsanPrintDetails(char const*, void*)>:
c00070f4:	83 ec 1c             	sub    esp,0x1c
c00070f7:	83 ec 08             	sub    esp,0x8
c00070fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070fe:	68 48 ad 02 c0       	push   0xc002ad48
c0007103:	e8 74 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007108:	83 c4 10             	add    esp,0x10
c000710b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000710f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007117:	8b 00                	mov    eax,DWORD PTR [eax]
c0007119:	83 ec 08             	sub    esp,0x8
c000711c:	50                   	push   eax
c000711d:	68 5c ad 02 c0       	push   0xc002ad5c
c0007122:	e8 55 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007131:	83 ec 08             	sub    esp,0x8
c0007134:	50                   	push   eax
c0007135:	68 66 ad 02 c0       	push   0xc002ad66
c000713a:	e8 3d fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000713f:	83 c4 10             	add    esp,0x10
c0007142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007149:	83 ec 08             	sub    esp,0x8
c000714c:	50                   	push   eax
c000714d:	68 70 ad 02 c0       	push   0xc002ad70
c0007152:	e8 25 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007157:	83 c4 10             	add    esp,0x10
c000715a:	90                   	nop
c000715b:	83 c4 1c             	add    esp,0x1c
c000715e:	c3                   	ret    
c000715f:	90                   	nop

c0007160 <__ubsan_handle_type_mismatch_v1>:
c0007160:	83 ec 0c             	sub    esp,0xc
c0007163:	83 ec 08             	sub    esp,0x8
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	68 b4 ae 02 c0       	push   0xc002aeb4
c000716f:	e8 80 ff ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007174:	83 c4 10             	add    esp,0x10
c0007177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000717c:	75 16                	jne    c0007194 <__ubsan_handle_type_mismatch_v1+0x34>
c000717e:	83 ec 0c             	sub    esp,0xc
c0007181:	68 7a ad 02 c0       	push   0xc002ad7a
c0007186:	e8 f1 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000718b:	83 c4 10             	add    esp,0x10
c000718e:	e9 91 00 00 00       	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007193:	90                   	nop
c0007194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000719b:	85 c0                	test   eax,eax
c000719d:	74 29                	je     c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c000719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00071a6:	83 e8 01             	sub    eax,0x1
c00071a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00071ad:	75 19                	jne    c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00071af:	83 ec 08             	sub    esp,0x8
c00071b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071b6:	68 d4 ae 02 c0       	push   0xc002aed4
c00071bb:	e8 bc fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071c0:	83 c4 10             	add    esp,0x10
c00071c3:	eb 5f                	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071c5:	8d 76 00             	lea    esi,[esi+0x0]
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	68 8f ad 02 c0       	push   0xc002ad8f
c00071d0:	e8 a7 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071df:	0f b6 c0             	movzx  eax,al
c00071e2:	83 ec 08             	sub    esp,0x8
c00071e5:	50                   	push   eax
c00071e6:	68 a9 ad 02 c0       	push   0xc002ada9
c00071eb:	e8 8c fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007208:	0f b6 c0             	movzx  eax,al
c000720b:	8b 04 85 20 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfbe0]
c0007212:	51                   	push   ecx
c0007213:	52                   	push   edx
c0007214:	50                   	push   eax
c0007215:	68 fc ae 02 c0       	push   0xc002aefc
c000721a:	e8 5d fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	66 90                	xchg   ax,ax
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	68 b4 ae 02 c0       	push   0xc002aeb4
c000722c:	e8 33 98 00 00       	call   c0010a64 <KePanic(char const*)>
c0007231:	83 c4 10             	add    esp,0x10
c0007234:	90                   	nop
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	c3                   	ret    
c0007239:	8d 76 00             	lea    esi,[esi+0x0]

c000723c <__ubsan_handle_pointer_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 44 af 02 c0       	push   0xc002af44
c000724b:	e8 a4 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 44 af 02 c0       	push   0xc002af44
c000725b:	e8 04 98 00 00       	call   c0010a64 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_out_of_bounds>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 b4 ad 02 c0       	push   0xc002adb4
c0007277:	e8 78 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 b4 ad 02 c0       	push   0xc002adb4
c0007287:	e8 d8 97 00 00       	call   c0010a64 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_add_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 d1 ad 02 c0       	push   0xc002add1
c00072a3:	e8 4c fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 d1 ad 02 c0       	push   0xc002add1
c00072b3:	e8 ac 97 00 00       	call   c0010a64 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_load_invalid_value>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 64 af 02 c0       	push   0xc002af64
c00072cf:	e8 20 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 64 af 02 c0       	push   0xc002af64
c00072df:	e8 80 97 00 00       	call   c0010a64 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_divrem_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 88 af 02 c0       	push   0xc002af88
c00072fb:	e8 f4 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 88 af 02 c0       	push   0xc002af88
c000730b:	e8 54 97 00 00       	call   c0010a64 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_mul_overflow>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 ed ad 02 c0       	push   0xc002aded
c0007327:	e8 c8 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 ed ad 02 c0       	push   0xc002aded
c0007337:	e8 28 97 00 00       	call   c0010a64 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_sub_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 09 ae 02 c0       	push   0xc002ae09
c0007353:	e8 9c fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 09 ae 02 c0       	push   0xc002ae09
c0007363:	e8 fc 96 00 00       	call   c0010a64 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <__ubsan_handle_shift_out_of_bounds>:
c0007370:	83 ec 0c             	sub    esp,0xc
c0007373:	83 ec 08             	sub    esp,0x8
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	68 a8 af 02 c0       	push   0xc002afa8
c000737f:	e8 70 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007384:	83 c4 10             	add    esp,0x10
c0007387:	83 ec 0c             	sub    esp,0xc
c000738a:	68 a8 af 02 c0       	push   0xc002afa8
c000738f:	e8 d0 96 00 00       	call   c0010a64 <KePanic(char const*)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	90                   	nop
c0007398:	83 c4 0c             	add    esp,0xc
c000739b:	c3                   	ret    

c000739c <__ubsan_handle_negate_overflow>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	83 ec 08             	sub    esp,0x8
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	68 cc af 02 c0       	push   0xc002afcc
c00073ab:	e8 44 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00073b0:	83 c4 10             	add    esp,0x10
c00073b3:	83 ec 0c             	sub    esp,0xc
c00073b6:	68 cc af 02 c0       	push   0xc002afcc
c00073bb:	e8 a4 96 00 00       	call   c0010a64 <KePanic(char const*)>
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	90                   	nop
c00073c4:	83 c4 0c             	add    esp,0xc
c00073c7:	c3                   	ret    

c00073c8 <Hardware::getHumanReadableName()>:
c00073c8:	83 ec 18             	sub    esp,0x18
c00073cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00073d1:	50                   	push   eax
c00073d2:	ff 12                	call   DWORD PTR [edx]
c00073d4:	83 c4 10             	add    esp,0x10
c00073d7:	85 c0                	test   eax,eax
c00073d9:	74 0d                	je     c00073e8 <Hardware::getHumanReadableName()+0x20>
c00073db:	8b 10                	mov    edx,DWORD PTR [eax]
c00073dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00073e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00073e3:	83 c4 0c             	add    esp,0xc
c00073e6:	ff e0                	jmp    eax
c00073e8:	b8 eb af 02 c0       	mov    eax,0xc002afeb
c00073ed:	83 c4 0c             	add    esp,0xc
c00073f0:	c3                   	ret    
c00073f1:	8d 76 00             	lea    esi,[esi+0x0]

c00073f4 <KeGetRootDevice()>:
c00073f4:	a1 b8 3e 03 c0       	mov    eax,ds:0xc0033eb8
c00073f9:	c3                   	ret    
c00073fa:	66 90                	xchg   ax,ax

c00073fc <Hardware::registerIRQ(int)>:
c00073fc:	56                   	push   esi
c00073fd:	31 c9                	xor    ecx,ecx
c00073ff:	53                   	push   ebx
c0007400:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0007404:	0f b6 5e 3c          	movzx  ebx,BYTE PTR [esi+0x3c]
c0007408:	89 da                	mov    edx,ebx
c000740a:	66 90                	xchg   ax,ax
c000740c:	89 d8                	mov    eax,ebx
c000740e:	d3 f8                	sar    eax,cl
c0007410:	a8 01                	test   al,0x1
c0007412:	74 0c                	je     c0007420 <Hardware::registerIRQ(int)+0x24>
c0007414:	83 c1 01             	add    ecx,0x1
c0007417:	83 f9 04             	cmp    ecx,0x4
c000741a:	75 f0                	jne    c000740c <Hardware::registerIRQ(int)+0x10>
c000741c:	5b                   	pop    ebx
c000741d:	5e                   	pop    esi
c000741e:	c3                   	ret    
c000741f:	90                   	nop
c0007420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007424:	89 44 8e 2c          	mov    DWORD PTR [esi+ecx*4+0x2c],eax
c0007428:	b8 01 00 00 00       	mov    eax,0x1
c000742d:	d3 e0                	shl    eax,cl
c000742f:	09 c2                	or     edx,eax
c0007431:	88 56 3c             	mov    BYTE PTR [esi+0x3c],dl
c0007434:	5b                   	pop    ebx
c0007435:	5e                   	pop    esi
c0007436:	c3                   	ret    
c0007437:	90                   	nop

c0007438 <Hardware::deregisterIRQ(int)>:
c0007438:	57                   	push   edi
c0007439:	31 c9                	xor    ecx,ecx
c000743b:	56                   	push   esi
c000743c:	be 01 00 00 00       	mov    esi,0x1
c0007441:	53                   	push   ebx
c0007442:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007446:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000744a:	66 90                	xchg   ax,ax
c000744c:	39 5c 8a 2c          	cmp    DWORD PTR [edx+ecx*4+0x2c],ebx
c0007450:	75 12                	jne    c0007464 <Hardware::deregisterIRQ(int)+0x2c>
c0007452:	0f b6 7a 3c          	movzx  edi,BYTE PTR [edx+0x3c]
c0007456:	89 f0                	mov    eax,esi
c0007458:	d3 e0                	shl    eax,cl
c000745a:	f7 d0                	not    eax
c000745c:	21 f8                	and    eax,edi
c000745e:	88 42 3c             	mov    BYTE PTR [edx+0x3c],al
c0007461:	8d 76 00             	lea    esi,[esi+0x0]
c0007464:	83 c1 01             	add    ecx,0x1
c0007467:	83 f9 04             	cmp    ecx,0x4
c000746a:	75 e0                	jne    c000744c <Hardware::deregisterIRQ(int)+0x14>
c000746c:	5b                   	pop    ebx
c000746d:	5e                   	pop    esi
c000746e:	5f                   	pop    edi
c000746f:	c3                   	ret    

c0007470 <Hardware::~Hardware()>:
c0007470:	83 ec 0c             	sub    esp,0xc
c0007473:	ba 0c b2 02 c0       	mov    edx,0xc002b20c
c0007478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000747c:	89 10                	mov    DWORD PTR [eax],edx
c000747e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007482:	83 c0 74             	add    eax,0x74
c0007485:	83 ec 0c             	sub    esp,0xc
c0007488:	50                   	push   eax
c0007489:	e8 d6 12 02 00       	call   c0028764 <std::vector<Hardware*>::~vector()>
c000748e:	83 c4 10             	add    esp,0x10
c0007491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007495:	83 c0 18             	add    eax,0x18
c0007498:	83 ec 0c             	sub    esp,0xc
c000749b:	50                   	push   eax
c000749c:	e8 8f 12 02 00       	call   c0028730 <std::vector<DevicePortRange>::~vector()>
c00074a1:	83 c4 10             	add    esp,0x10
c00074a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074a8:	83 c0 04             	add    eax,0x4
c00074ab:	83 ec 0c             	sub    esp,0xc
c00074ae:	50                   	push   eax
c00074af:	e8 48 12 02 00       	call   c00286fc <std::vector<DeviceMemoryRange>::~vector()>
c00074b4:	83 c4 10             	add    esp,0x10
c00074b7:	90                   	nop
c00074b8:	83 c4 0c             	add    esp,0xc
c00074bb:	c3                   	ret    

c00074bc <Hardware::~Hardware()>:
c00074bc:	83 ec 0c             	sub    esp,0xc
c00074bf:	83 ec 0c             	sub    esp,0xc
c00074c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074c6:	e8 a5 ff ff ff       	call   c0007470 <Hardware::~Hardware()>
c00074cb:	83 c4 10             	add    esp,0x10
c00074ce:	83 ec 08             	sub    esp,0x8
c00074d1:	68 88 00 00 00       	push   0x88
c00074d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074da:	e8 39 6c 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c00074df:	83 c4 10             	add    esp,0x10
c00074e2:	83 c4 0c             	add    esp,0xc
c00074e5:	c3                   	ret    
c00074e6:	66 90                	xchg   ax,ax

c00074e8 <Hardware::Hardware()>:
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	ba 0c b2 02 c0       	mov    edx,0xc002b20c
c00074f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f4:	89 10                	mov    DWORD PTR [eax],edx
c00074f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074fa:	83 c0 04             	add    eax,0x4
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	50                   	push   eax
c0007501:	e8 e2 12 02 00       	call   c00287e8 <std::vector<DeviceMemoryRange>::vector()>
c0007506:	83 c4 10             	add    esp,0x10
c0007509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000750d:	83 c0 18             	add    eax,0x18
c0007510:	83 ec 0c             	sub    esp,0xc
c0007513:	50                   	push   eax
c0007514:	e8 4b 13 02 00       	call   c0028864 <std::vector<DevicePortRange>::vector()>
c0007519:	83 c4 10             	add    esp,0x10
c000751c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007520:	83 c0 74             	add    eax,0x74
c0007523:	83 ec 0c             	sub    esp,0xc
c0007526:	50                   	push   eax
c0007527:	e8 b4 13 02 00       	call   c00288e0 <std::vector<Hardware*>::vector()>
c000752c:	83 c4 10             	add    esp,0x10
c000752f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007533:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0007537:	90                   	nop
c0007538:	83 c4 0c             	add    esp,0xc
c000753b:	c3                   	ret    

c000753c <KeGetChildOfRootWithName(char const*)>:
c000753c:	55                   	push   ebp
c000753d:	57                   	push   edi
c000753e:	56                   	push   esi
c000753f:	53                   	push   ebx
c0007540:	83 ec 2c             	sub    esp,0x2c
c0007543:	e8 ac fe ff ff       	call   c00073f4 <KeGetRootDevice()>
c0007548:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000754c:	8d 68 74             	lea    ebp,[eax+0x74]
c000754f:	8d 5c 24 14          	lea    ebx,[esp+0x14]
c0007553:	83 ec 08             	sub    esp,0x8
c0007556:	55                   	push   ebp
c0007557:	53                   	push   ebx
c0007558:	e8 6f 14 02 00       	call   c00289cc <std::vector<Hardware*>::begin()>
c000755d:	8d 74 24 24          	lea    esi,[esp+0x24]
c0007561:	83 ec 0c             	sub    esp,0xc
c0007564:	55                   	push   ebp
c0007565:	56                   	push   esi
c0007566:	e8 85 14 02 00       	call   c00289f0 <std::vector<Hardware*>::end()>
c000756b:	83 c4 1c             	add    esp,0x1c
c000756e:	eb 3c                	jmp    c00075ac <KeGetChildOfRootWithName(char const*)+0x70>
c0007570:	83 ec 0c             	sub    esp,0xc
c0007573:	53                   	push   ebx
c0007574:	e8 5b 11 02 00       	call   c00286d4 <std::vector<Hardware*>::iterator::operator*() const>
c0007579:	89 c5                	mov    ebp,eax
c000757b:	8b 00                	mov    eax,DWORD PTR [eax]
c000757d:	8b 10                	mov    edx,DWORD PTR [eax]
c000757f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007582:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0007585:	5a                   	pop    edx
c0007586:	59                   	pop    ecx
c0007587:	57                   	push   edi
c0007588:	50                   	push   eax
c0007589:	e8 c2 91 ff ff       	call   c0000750 <strcmp>
c000758e:	83 c4 10             	add    esp,0x10
c0007591:	85 c0                	test   eax,eax
c0007593:	74 47                	je     c00075dc <KeGetChildOfRootWithName(char const*)+0xa0>
c0007595:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007599:	83 ec 08             	sub    esp,0x8
c000759c:	53                   	push   ebx
c000759d:	55                   	push   ebp
c000759e:	e8 71 14 02 00       	call   c0028a14 <std::vector<Hardware*>::iterator::operator++()>
c00075a3:	55                   	push   ebp
c00075a4:	e8 03 11 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c00075a9:	83 c4 10             	add    esp,0x10
c00075ac:	83 ec 08             	sub    esp,0x8
c00075af:	56                   	push   esi
c00075b0:	53                   	push   ebx
c00075b1:	e8 0a 11 02 00       	call   c00286c0 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00075b6:	83 c4 10             	add    esp,0x10
c00075b9:	84 c0                	test   al,al
c00075bb:	75 b3                	jne    c0007570 <KeGetChildOfRootWithName(char const*)+0x34>
c00075bd:	83 ec 0c             	sub    esp,0xc
c00075c0:	56                   	push   esi
c00075c1:	e8 e6 10 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c00075c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075c9:	e8 de 10 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c00075ce:	83 c4 10             	add    esp,0x10
c00075d1:	31 c0                	xor    eax,eax
c00075d3:	83 c4 2c             	add    esp,0x2c
c00075d6:	5b                   	pop    ebx
c00075d7:	5e                   	pop    esi
c00075d8:	5f                   	pop    edi
c00075d9:	5d                   	pop    ebp
c00075da:	c3                   	ret    
c00075db:	90                   	nop
c00075dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00075df:	83 ec 0c             	sub    esp,0xc
c00075e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075e6:	56                   	push   esi
c00075e7:	e8 c0 10 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c00075ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075ef:	e8 b8 10 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c00075f4:	83 c4 10             	add    esp,0x10
c00075f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075fb:	83 c4 2c             	add    esp,0x2c
c00075fe:	5b                   	pop    ebx
c00075ff:	5e                   	pop    esi
c0007600:	5f                   	pop    edi
c0007601:	5d                   	pop    ebp
c0007602:	c3                   	ret    
c0007603:	90                   	nop

c0007604 <KeGetPCIDevice()>:
c0007604:	83 ec 18             	sub    esp,0x18
c0007607:	68 fa af 02 c0       	push   0xc002affa
c000760c:	e8 2b ff ff ff       	call   c000753c <KeGetChildOfRootWithName(char const*)>
c0007611:	83 c4 1c             	add    esp,0x1c
c0007614:	c3                   	ret    
c0007615:	8d 76 00             	lea    esi,[esi+0x0]

c0007618 <KeGetACPIDevice()>:
c0007618:	83 ec 18             	sub    esp,0x18
c000761b:	68 02 b0 02 c0       	push   0xc002b002
c0007620:	e8 17 ff ff ff       	call   c000753c <KeGetChildOfRootWithName(char const*)>
c0007625:	83 c4 1c             	add    esp,0x1c
c0007628:	c3                   	ret    
c0007629:	8d 76 00             	lea    esi,[esi+0x0]

c000762c <KeGetISAPnPDevice()>:
c000762c:	83 ec 18             	sub    esp,0x18
c000762f:	68 07 b0 02 c0       	push   0xc002b007
c0007634:	e8 03 ff ff ff       	call   c000753c <KeGetChildOfRootWithName(char const*)>
c0007639:	83 c4 1c             	add    esp,0x1c
c000763c:	c3                   	ret    
c000763d:	8d 76 00             	lea    esi,[esi+0x0]

c0007640 <KeGetISADevice()>:
c0007640:	83 ec 18             	sub    esp,0x18
c0007643:	68 1d b0 02 c0       	push   0xc002b01d
c0007648:	e8 ef fe ff ff       	call   c000753c <KeGetChildOfRootWithName(char const*)>
c000764d:	83 c4 1c             	add    esp,0x1c
c0007650:	c3                   	ret    
c0007651:	90                   	nop
c0007652:	66 90                	xchg   ax,ax

c0007654 <Hardware::printRecursively(int)>:
c0007654:	55                   	push   ebp
c0007655:	57                   	push   edi
c0007656:	56                   	push   esi
c0007657:	53                   	push   ebx
c0007658:	83 ec 7c             	sub    esp,0x7c
c000765b:	8b 9c 24 94 00 00 00 	mov    ebx,DWORD PTR [esp+0x94]
c0007662:	8b ac 24 90 00 00 00 	mov    ebp,DWORD PTR [esp+0x90]
c0007669:	85 db                	test   ebx,ebx
c000766b:	7e 1b                	jle    c0007688 <Hardware::printRecursively(int)+0x34>
c000766d:	31 f6                	xor    esi,esi
c000766f:	90                   	nop
c0007670:	83 ec 0c             	sub    esp,0xc
c0007673:	83 c6 01             	add    esi,0x1
c0007676:	68 22 d6 02 c0       	push   0xc002d622
c000767b:	e8 fc f8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007680:	83 c4 10             	add    esp,0x10
c0007683:	39 f3                	cmp    ebx,esi
c0007685:	75 e9                	jne    c0007670 <Hardware::printRecursively(int)+0x1c>
c0007687:	90                   	nop
c0007688:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000768c:	be 60 b0 02 c0       	mov    esi,0xc002b060
c0007691:	b9 18 00 00 00       	mov    ecx,0x18
c0007696:	fc                   	cld    
c0007697:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0007699:	83 ec 0c             	sub    esp,0xc
c000769c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000769f:	55                   	push   ebp
c00076a0:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00076a3:	89 c6                	mov    esi,eax
c00076a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00076a8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00076ab:	83 c5 74             	add    ebp,0x74
c00076ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00076b1:	83 c4 0c             	add    esp,0xc
c00076b4:	8d 14 00             	lea    edx,[eax+eax*1]
c00076b7:	56                   	push   esi
c00076b8:	01 c2                	add    edx,eax
c00076ba:	8d 44 94 18          	lea    eax,[esp+edx*4+0x18]
c00076be:	50                   	push   eax
c00076bf:	68 25 b0 02 c0       	push   0xc002b025
c00076c4:	e8 b3 f8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00076c9:	8d 74 24 14          	lea    esi,[esp+0x14]
c00076cd:	59                   	pop    ecx
c00076ce:	5f                   	pop    edi
c00076cf:	55                   	push   ebp
c00076d0:	56                   	push   esi
c00076d1:	e8 f6 12 02 00       	call   c00289cc <std::vector<Hardware*>::begin()>
c00076d6:	8d 7c 24 14          	lea    edi,[esp+0x14]
c00076da:	83 ec 0c             	sub    esp,0xc
c00076dd:	55                   	push   ebp
c00076de:	57                   	push   edi
c00076df:	e8 0c 13 02 00       	call   c00289f0 <std::vector<Hardware*>::end()>
c00076e4:	83 c4 1c             	add    esp,0x1c
c00076e7:	90                   	nop
c00076e8:	83 ec 08             	sub    esp,0x8
c00076eb:	57                   	push   edi
c00076ec:	56                   	push   esi
c00076ed:	e8 ce 0f 02 00       	call   c00286c0 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00076f2:	83 c4 10             	add    esp,0x10
c00076f5:	84 c0                	test   al,al
c00076f7:	74 2f                	je     c0007728 <Hardware::printRecursively(int)+0xd4>
c00076f9:	83 ec 0c             	sub    esp,0xc
c00076fc:	56                   	push   esi
c00076fd:	e8 d2 0f 02 00       	call   c00286d4 <std::vector<Hardware*>::iterator::operator*() const>
c0007702:	5a                   	pop    edx
c0007703:	8d 53 01             	lea    edx,[ebx+0x1]
c0007706:	59                   	pop    ecx
c0007707:	52                   	push   edx
c0007708:	8b 28                	mov    ebp,DWORD PTR [eax]
c000770a:	55                   	push   ebp
c000770b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000770f:	e8 40 ff ff ff       	call   c0007654 <Hardware::printRecursively(int)>
c0007714:	58                   	pop    eax
c0007715:	5a                   	pop    edx
c0007716:	56                   	push   esi
c0007717:	55                   	push   ebp
c0007718:	e8 f7 12 02 00       	call   c0028a14 <std::vector<Hardware*>::iterator::operator++()>
c000771d:	55                   	push   ebp
c000771e:	e8 89 0f 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007723:	83 c4 10             	add    esp,0x10
c0007726:	eb c0                	jmp    c00076e8 <Hardware::printRecursively(int)+0x94>
c0007728:	83 ec 0c             	sub    esp,0xc
c000772b:	57                   	push   edi
c000772c:	e8 7b 0f 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007731:	89 34 24             	mov    DWORD PTR [esp],esi
c0007734:	e8 73 0f 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007739:	81 c4 8c 00 00 00    	add    esp,0x8c
c000773f:	5b                   	pop    ebx
c0007740:	5e                   	pop    esi
c0007741:	5f                   	pop    edi
c0007742:	5d                   	pop    ebp
c0007743:	c3                   	ret    

c0007744 <KePrintDeviceTree()>:
c0007744:	83 ec 18             	sub    esp,0x18
c0007747:	68 c0 b0 02 c0       	push   0xc002b0c0
c000774c:	e8 2b f8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007751:	58                   	pop    eax
c0007752:	8b 0d b8 3e 03 c0    	mov    ecx,DWORD PTR ds:0xc0033eb8
c0007758:	5a                   	pop    edx
c0007759:	6a 00                	push   0x0
c000775b:	51                   	push   ecx
c000775c:	e8 f3 fe ff ff       	call   c0007654 <Hardware::printRecursively(int)>
c0007761:	c7 04 24 fc b0 02 c0 	mov    DWORD PTR [esp],0xc002b0fc
c0007768:	e8 0f f8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000776d:	83 c4 1c             	add    esp,0x1c
c0007770:	c3                   	ret    
c0007771:	90                   	nop
c0007772:	66 90                	xchg   ax,ax

c0007774 <Hardware::detectRecursively()>:
c0007774:	57                   	push   edi
c0007775:	56                   	push   esi
c0007776:	53                   	push   ebx
c0007777:	83 ec 1c             	sub    esp,0x1c
c000777a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c000777e:	68 2c b0 02 c0       	push   0xc002b02c
c0007783:	e8 f4 f7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007788:	8b 06                	mov    eax,DWORD PTR [esi]
c000778a:	89 34 24             	mov    DWORD PTR [esp],esi
c000778d:	ff 10                	call   DWORD PTR [eax]
c000778f:	83 c4 10             	add    esp,0x10
c0007792:	85 c0                	test   eax,eax
c0007794:	74 0e                	je     c00077a4 <Hardware::detectRecursively()+0x30>
c0007796:	83 ec 0c             	sub    esp,0xc
c0007799:	8b 10                	mov    edx,DWORD PTR [eax]
c000779b:	50                   	push   eax
c000779c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000779f:	83 c4 10             	add    esp,0x10
c00077a2:	66 90                	xchg   ax,ax
c00077a4:	83 c6 74             	add    esi,0x74
c00077a7:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c00077ab:	83 ec 08             	sub    esp,0x8
c00077ae:	56                   	push   esi
c00077af:	53                   	push   ebx
c00077b0:	e8 17 12 02 00       	call   c00289cc <std::vector<Hardware*>::begin()>
c00077b5:	8d 7c 24 14          	lea    edi,[esp+0x14]
c00077b9:	83 ec 0c             	sub    esp,0xc
c00077bc:	56                   	push   esi
c00077bd:	57                   	push   edi
c00077be:	e8 2d 12 02 00       	call   c00289f0 <std::vector<Hardware*>::end()>
c00077c3:	83 c4 1c             	add    esp,0x1c
c00077c6:	66 90                	xchg   ax,ax
c00077c8:	83 ec 08             	sub    esp,0x8
c00077cb:	57                   	push   edi
c00077cc:	53                   	push   ebx
c00077cd:	e8 ee 0e 02 00       	call   c00286c0 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00077d2:	83 c4 10             	add    esp,0x10
c00077d5:	84 c0                	test   al,al
c00077d7:	74 2b                	je     c0007804 <Hardware::detectRecursively()+0x90>
c00077d9:	83 ec 0c             	sub    esp,0xc
c00077dc:	53                   	push   ebx
c00077dd:	e8 f2 0e 02 00       	call   c00286d4 <std::vector<Hardware*>::iterator::operator*() const>
c00077e2:	5a                   	pop    edx
c00077e3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00077e5:	51                   	push   ecx
c00077e6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00077ea:	e8 85 ff ff ff       	call   c0007774 <Hardware::detectRecursively()>
c00077ef:	58                   	pop    eax
c00077f0:	5a                   	pop    edx
c00077f1:	53                   	push   ebx
c00077f2:	56                   	push   esi
c00077f3:	e8 1c 12 02 00       	call   c0028a14 <std::vector<Hardware*>::iterator::operator++()>
c00077f8:	56                   	push   esi
c00077f9:	e8 ae 0e 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c00077fe:	83 c4 10             	add    esp,0x10
c0007801:	eb c5                	jmp    c00077c8 <Hardware::detectRecursively()+0x54>
c0007803:	90                   	nop
c0007804:	83 ec 0c             	sub    esp,0xc
c0007807:	57                   	push   edi
c0007808:	e8 9f 0e 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c000780d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007810:	e8 97 0e 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007815:	83 c4 20             	add    esp,0x20
c0007818:	5b                   	pop    ebx
c0007819:	5e                   	pop    esi
c000781a:	5f                   	pop    edi
c000781b:	c3                   	ret    

c000781c <KeSetupDeviceTree()>:
c000781c:	53                   	push   ebx
c000781d:	83 ec 14             	sub    esp,0x14
c0007820:	68 8c 00 00 00       	push   0x8c
c0007825:	e8 e5 8d 00 00       	call   c001060f <malloc>
c000782a:	89 04 24             	mov    DWORD PTR [esp],eax
c000782d:	89 c3                	mov    ebx,eax
c000782f:	e8 28 11 02 00       	call   c002895c <RootHardware::RootHardware()>
c0007834:	8b 83 88 00 00 00    	mov    eax,DWORD PTR [ebx+0x88]
c000783a:	89 1d b8 3e 03 c0    	mov    DWORD PTR ds:0xc0033eb8,ebx
c0007840:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0007843:	8b 83 88 00 00 00    	mov    eax,DWORD PTR [ebx+0x88]
c0007849:	8b 10                	mov    edx,DWORD PTR [eax]
c000784b:	89 04 24             	mov    DWORD PTR [esp],eax
c000784e:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0007851:	58                   	pop    eax
c0007852:	8b 15 b8 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033eb8
c0007858:	52                   	push   edx
c0007859:	e8 16 ff ff ff       	call   c0007774 <Hardware::detectRecursively()>
c000785e:	59                   	pop    ecx
c000785f:	8b 1d b8 3e 03 c0    	mov    ebx,DWORD PTR ds:0xc0033eb8
c0007865:	53                   	push   ebx
c0007866:	e8 09 ff ff ff       	call   c0007774 <Hardware::detectRecursively()>
c000786b:	58                   	pop    eax
c000786c:	a1 b8 3e 03 c0       	mov    eax,ds:0xc0033eb8
c0007871:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0007877:	50                   	push   eax
c0007878:	e8 f7 07 00 00       	call   c0008074 <RootDriver::detectLegacyISA()>
c000787d:	83 c4 18             	add    esp,0x18
c0007880:	5b                   	pop    ebx
c0007881:	c3                   	ret    
c0007882:	66 90                	xchg   ax,ax

c0007884 <Hardware::deinitialiseRecursively()>:
c0007884:	55                   	push   ebp
c0007885:	57                   	push   edi
c0007886:	56                   	push   esi
c0007887:	53                   	push   ebx
c0007888:	83 ec 1c             	sub    esp,0x1c
c000788b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000788f:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c0007893:	8d 75 74             	lea    esi,[ebp+0x74]
c0007896:	83 ec 08             	sub    esp,0x8
c0007899:	56                   	push   esi
c000789a:	53                   	push   ebx
c000789b:	e8 2c 11 02 00       	call   c00289cc <std::vector<Hardware*>::begin()>
c00078a0:	8d 7c 24 14          	lea    edi,[esp+0x14]
c00078a4:	83 ec 0c             	sub    esp,0xc
c00078a7:	56                   	push   esi
c00078a8:	57                   	push   edi
c00078a9:	e8 42 11 02 00       	call   c00289f0 <std::vector<Hardware*>::end()>
c00078ae:	83 c4 1c             	add    esp,0x1c
c00078b1:	8d 76 00             	lea    esi,[esi+0x0]
c00078b4:	83 ec 08             	sub    esp,0x8
c00078b7:	57                   	push   edi
c00078b8:	53                   	push   ebx
c00078b9:	e8 02 0e 02 00       	call   c00286c0 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00078be:	83 c4 10             	add    esp,0x10
c00078c1:	84 c0                	test   al,al
c00078c3:	74 2b                	je     c00078f0 <Hardware::deinitialiseRecursively()+0x6c>
c00078c5:	83 ec 0c             	sub    esp,0xc
c00078c8:	53                   	push   ebx
c00078c9:	e8 06 0e 02 00       	call   c00286d4 <std::vector<Hardware*>::iterator::operator*() const>
c00078ce:	5a                   	pop    edx
c00078cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00078d1:	51                   	push   ecx
c00078d2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00078d6:	e8 a9 ff ff ff       	call   c0007884 <Hardware::deinitialiseRecursively()>
c00078db:	58                   	pop    eax
c00078dc:	5a                   	pop    edx
c00078dd:	53                   	push   ebx
c00078de:	56                   	push   esi
c00078df:	e8 30 11 02 00       	call   c0028a14 <std::vector<Hardware*>::iterator::operator++()>
c00078e4:	56                   	push   esi
c00078e5:	e8 c2 0d 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c00078ea:	83 c4 10             	add    esp,0x10
c00078ed:	eb c5                	jmp    c00078b4 <Hardware::deinitialiseRecursively()+0x30>
c00078ef:	90                   	nop
c00078f0:	83 ec 0c             	sub    esp,0xc
c00078f3:	57                   	push   edi
c00078f4:	e8 b3 0d 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c00078f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078fc:	e8 ab 0d 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007901:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0007904:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0007907:	ff 10                	call   DWORD PTR [eax]
c0007909:	83 c4 10             	add    esp,0x10
c000790c:	85 c0                	test   eax,eax
c000790e:	74 0c                	je     c000791c <Hardware::deinitialiseRecursively()+0x98>
c0007910:	83 ec 0c             	sub    esp,0xc
c0007913:	8b 10                	mov    edx,DWORD PTR [eax]
c0007915:	50                   	push   eax
c0007916:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007919:	83 c4 10             	add    esp,0x10
c000791c:	83 c4 1c             	add    esp,0x1c
c000791f:	5b                   	pop    ebx
c0007920:	5e                   	pop    esi
c0007921:	5f                   	pop    edi
c0007922:	5d                   	pop    ebp
c0007923:	c3                   	ret    

c0007924 <Hardware::setPowerStateRecursively(DevicePowerState)>:
c0007924:	55                   	push   ebp
c0007925:	57                   	push   edi
c0007926:	56                   	push   esi
c0007927:	53                   	push   ebx
c0007928:	83 ec 1c             	sub    esp,0x1c
c000792b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000792f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007933:	8d 68 74             	lea    ebp,[eax+0x74]
c0007936:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c000793a:	83 ec 08             	sub    esp,0x8
c000793d:	55                   	push   ebp
c000793e:	53                   	push   ebx
c000793f:	e8 88 10 02 00       	call   c00289cc <std::vector<Hardware*>::begin()>
c0007944:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007948:	83 ec 0c             	sub    esp,0xc
c000794b:	55                   	push   ebp
c000794c:	56                   	push   esi
c000794d:	e8 9e 10 02 00       	call   c00289f0 <std::vector<Hardware*>::end()>
c0007952:	83 c4 1c             	add    esp,0x1c
c0007955:	8d 76 00             	lea    esi,[esi+0x0]
c0007958:	83 ec 08             	sub    esp,0x8
c000795b:	56                   	push   esi
c000795c:	53                   	push   ebx
c000795d:	e8 5e 0d 02 00       	call   c00286c0 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0007962:	83 c4 10             	add    esp,0x10
c0007965:	84 c0                	test   al,al
c0007967:	74 2f                	je     c0007998 <Hardware::setPowerStateRecursively(DevicePowerState)+0x74>
c0007969:	83 ec 0c             	sub    esp,0xc
c000796c:	53                   	push   ebx
c000796d:	e8 62 0d 02 00       	call   c00286d4 <std::vector<Hardware*>::iterator::operator*() const>
c0007972:	59                   	pop    ecx
c0007973:	5d                   	pop    ebp
c0007974:	57                   	push   edi
c0007975:	8b 00                	mov    eax,DWORD PTR [eax]
c0007977:	50                   	push   eax
c0007978:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000797c:	e8 a3 ff ff ff       	call   c0007924 <Hardware::setPowerStateRecursively(DevicePowerState)>
c0007981:	58                   	pop    eax
c0007982:	5a                   	pop    edx
c0007983:	53                   	push   ebx
c0007984:	55                   	push   ebp
c0007985:	e8 8a 10 02 00       	call   c0028a14 <std::vector<Hardware*>::iterator::operator++()>
c000798a:	55                   	push   ebp
c000798b:	e8 1c 0d 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007990:	83 c4 10             	add    esp,0x10
c0007993:	eb c3                	jmp    c0007958 <Hardware::setPowerStateRecursively(DevicePowerState)+0x34>
c0007995:	8d 76 00             	lea    esi,[esi+0x0]
c0007998:	83 ec 0c             	sub    esp,0xc
c000799b:	56                   	push   esi
c000799c:	e8 0b 0d 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c00079a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079a4:	e8 03 0d 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c00079a9:	58                   	pop    eax
c00079aa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00079ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00079b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00079b4:	52                   	push   edx
c00079b5:	ff 10                	call   DWORD PTR [eax]
c00079b7:	83 c4 10             	add    esp,0x10
c00079ba:	85 c0                	test   eax,eax
c00079bc:	74 0e                	je     c00079cc <Hardware::setPowerStateRecursively(DevicePowerState)+0xa8>
c00079be:	83 ec 08             	sub    esp,0x8
c00079c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00079c3:	57                   	push   edi
c00079c4:	50                   	push   eax
c00079c5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00079c8:	83 c4 10             	add    esp,0x10
c00079cb:	90                   	nop
c00079cc:	83 c4 1c             	add    esp,0x1c
c00079cf:	5b                   	pop    ebx
c00079d0:	5e                   	pop    esi
c00079d1:	5f                   	pop    edi
c00079d2:	5d                   	pop    ebp
c00079d3:	c3                   	ret    

c00079d4 <Hardware::portInUseRecursive(int, int)>:
c00079d4:	55                   	push   ebp
c00079d5:	57                   	push   edi
c00079d6:	56                   	push   esi
c00079d7:	53                   	push   ebx
c00079d8:	83 ec 2c             	sub    esp,0x2c
c00079db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00079df:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00079e3:	8d 68 18             	lea    ebp,[eax+0x18]
c00079e6:	8d 5c 24 14          	lea    ebx,[esp+0x14]
c00079ea:	83 ec 08             	sub    esp,0x8
c00079ed:	55                   	push   ebp
c00079ee:	53                   	push   ebx
c00079ef:	e8 60 10 02 00       	call   c0028a54 <std::vector<DevicePortRange>::begin()>
c00079f4:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00079f8:	83 ec 0c             	sub    esp,0xc
c00079fb:	55                   	push   ebp
c00079fc:	57                   	push   edi
c00079fd:	e8 76 10 02 00       	call   c0028a78 <std::vector<DevicePortRange>::end()>
c0007a02:	83 c4 1c             	add    esp,0x1c
c0007a05:	eb 41                	jmp    c0007a48 <Hardware::portInUseRecursive(int, int)+0x74>
c0007a07:	90                   	nop
c0007a08:	83 ec 0c             	sub    esp,0xc
c0007a0b:	53                   	push   ebx
c0007a0c:	e8 e3 0c 02 00       	call   c00286f4 <std::vector<DevicePortRange>::iterator::operator*() const>
c0007a11:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0007a15:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0007a18:	01 f1                	add    ecx,esi
c0007a1a:	83 c4 10             	add    esp,0x10
c0007a1d:	39 ca                	cmp    edx,ecx
c0007a1f:	7d 0f                	jge    c0007a30 <Hardware::portInUseRecursive(int, int)+0x5c>
c0007a21:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
c0007a25:	01 d0                	add    eax,edx
c0007a27:	39 f0                	cmp    eax,esi
c0007a29:	0f 8f dd 00 00 00    	jg     c0007b0c <Hardware::portInUseRecursive(int, int)+0x138>
c0007a2f:	90                   	nop
c0007a30:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	53                   	push   ebx
c0007a38:	55                   	push   ebp
c0007a39:	e8 5e 10 02 00       	call   c0028a9c <std::vector<DevicePortRange>::iterator::operator++()>
c0007a3e:	55                   	push   ebp
c0007a3f:	e8 98 0c 02 00       	call   c00286dc <std::vector<DevicePortRange>::iterator::~iterator()>
c0007a44:	83 c4 10             	add    esp,0x10
c0007a47:	90                   	nop
c0007a48:	83 ec 08             	sub    esp,0x8
c0007a4b:	57                   	push   edi
c0007a4c:	53                   	push   ebx
c0007a4d:	e8 8e 0c 02 00       	call   c00286e0 <std::vector<DevicePortRange>::iterator::operator!=(std::vector<DevicePortRange>::iterator const&) const>
c0007a52:	83 c4 10             	add    esp,0x10
c0007a55:	84 c0                	test   al,al
c0007a57:	75 af                	jne    c0007a08 <Hardware::portInUseRecursive(int, int)+0x34>
c0007a59:	83 ec 0c             	sub    esp,0xc
c0007a5c:	57                   	push   edi
c0007a5d:	e8 7a 0c 02 00       	call   c00286dc <std::vector<DevicePortRange>::iterator::~iterator()>
c0007a62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a65:	e8 72 0c 02 00       	call   c00286dc <std::vector<DevicePortRange>::iterator::~iterator()>
c0007a6a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007a6e:	5a                   	pop    edx
c0007a6f:	83 c0 74             	add    eax,0x74
c0007a72:	59                   	pop    ecx
c0007a73:	50                   	push   eax
c0007a74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a78:	53                   	push   ebx
c0007a79:	e8 4e 0f 02 00       	call   c00289cc <std::vector<Hardware*>::begin()>
c0007a7e:	83 ec 0c             	sub    esp,0xc
c0007a81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007a85:	50                   	push   eax
c0007a86:	57                   	push   edi
c0007a87:	e8 64 0f 02 00       	call   c00289f0 <std::vector<Hardware*>::end()>
c0007a8c:	83 c4 1c             	add    esp,0x1c
c0007a8f:	90                   	nop
c0007a90:	83 ec 08             	sub    esp,0x8
c0007a93:	57                   	push   edi
c0007a94:	53                   	push   ebx
c0007a95:	e8 26 0c 02 00       	call   c00286c0 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0007a9a:	83 c4 10             	add    esp,0x10
c0007a9d:	84 c0                	test   al,al
c0007a9f:	0f 84 87 00 00 00    	je     c0007b2c <Hardware::portInUseRecursive(int, int)+0x158>
c0007aa5:	83 ec 0c             	sub    esp,0xc
c0007aa8:	53                   	push   ebx
c0007aa9:	e8 26 0c 02 00       	call   c00286d4 <std::vector<Hardware*>::iterator::operator*() const>
c0007aae:	83 c4 10             	add    esp,0x10
c0007ab1:	8b 10                	mov    edx,DWORD PTR [eax]
c0007ab3:	3b 54 24 40          	cmp    edx,DWORD PTR [esp+0x40]
c0007ab7:	74 37                	je     c0007af0 <Hardware::portInUseRecursive(int, int)+0x11c>
c0007ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0007abc:	83 ec 04             	sub    esp,0x4
c0007abf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007ac3:	50                   	push   eax
c0007ac4:	56                   	push   esi
c0007ac5:	52                   	push   edx
c0007ac6:	e8 09 ff ff ff       	call   c00079d4 <Hardware::portInUseRecursive(int, int)>
c0007acb:	83 c4 10             	add    esp,0x10
c0007ace:	85 c0                	test   eax,eax
c0007ad0:	75 7a                	jne    c0007b4c <Hardware::portInUseRecursive(int, int)+0x178>
c0007ad2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0007ad6:	83 ec 08             	sub    esp,0x8
c0007ad9:	53                   	push   ebx
c0007ada:	50                   	push   eax
c0007adb:	e8 34 0f 02 00       	call   c0028a14 <std::vector<Hardware*>::iterator::operator++()>
c0007ae0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0007ae4:	50                   	push   eax
c0007ae5:	e8 c2 0b 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007aea:	83 c4 10             	add    esp,0x10
c0007aed:	eb a1                	jmp    c0007a90 <Hardware::portInUseRecursive(int, int)+0xbc>
c0007aef:	90                   	nop
c0007af0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007af4:	83 ec 0c             	sub    esp,0xc
c0007af7:	68 46 b0 02 c0       	push   0xc002b046
c0007afc:	e8 63 8f 00 00       	call   c0010a64 <KePanic(char const*)>
c0007b01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007b05:	83 c4 10             	add    esp,0x10
c0007b08:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b0a:	eb b0                	jmp    c0007abc <Hardware::portInUseRecursive(int, int)+0xe8>
c0007b0c:	83 ec 0c             	sub    esp,0xc
c0007b0f:	57                   	push   edi
c0007b10:	e8 c7 0b 02 00       	call   c00286dc <std::vector<DevicePortRange>::iterator::~iterator()>
c0007b15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b18:	e8 bf 0b 02 00       	call   c00286dc <std::vector<DevicePortRange>::iterator::~iterator()>
c0007b1d:	83 c4 10             	add    esp,0x10
c0007b20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b24:	83 c4 2c             	add    esp,0x2c
c0007b27:	5b                   	pop    ebx
c0007b28:	5e                   	pop    esi
c0007b29:	5f                   	pop    edi
c0007b2a:	5d                   	pop    ebp
c0007b2b:	c3                   	ret    
c0007b2c:	83 ec 0c             	sub    esp,0xc
c0007b2f:	57                   	push   edi
c0007b30:	e8 77 0b 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007b35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b38:	e8 6f 0b 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007b3d:	83 c4 10             	add    esp,0x10
c0007b40:	31 c0                	xor    eax,eax
c0007b42:	83 c4 2c             	add    esp,0x2c
c0007b45:	5b                   	pop    ebx
c0007b46:	5e                   	pop    esi
c0007b47:	5f                   	pop    edi
c0007b48:	5d                   	pop    ebp
c0007b49:	c3                   	ret    
c0007b4a:	66 90                	xchg   ax,ax
c0007b4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b50:	83 ec 0c             	sub    esp,0xc
c0007b53:	57                   	push   edi
c0007b54:	e8 53 0b 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007b59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b5c:	e8 4b 0b 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007b61:	83 c4 10             	add    esp,0x10
c0007b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b68:	83 c4 2c             	add    esp,0x2c
c0007b6b:	5b                   	pop    ebx
c0007b6c:	5e                   	pop    esi
c0007b6d:	5f                   	pop    edi
c0007b6e:	5d                   	pop    ebp
c0007b6f:	c3                   	ret    

c0007b70 <KeIsPortInUse(unsigned short, int)>:
c0007b70:	83 ec 10             	sub    esp,0x10
c0007b73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b77:	8b 15 b8 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033eb8
c0007b7d:	50                   	push   eax
c0007b7e:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007b83:	50                   	push   eax
c0007b84:	52                   	push   edx
c0007b85:	e8 4a fe ff ff       	call   c00079d4 <Hardware::portInUseRecursive(int, int)>
c0007b8a:	85 c0                	test   eax,eax
c0007b8c:	0f 95 c0             	setne  al
c0007b8f:	83 c4 1c             	add    esp,0x1c
c0007b92:	c3                   	ret    
c0007b93:	90                   	nop

c0007b94 <KeGetOwnerOfPort(unsigned short, int)>:
c0007b94:	83 ec 10             	sub    esp,0x10
c0007b97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b9b:	8b 15 b8 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033eb8
c0007ba1:	50                   	push   eax
c0007ba2:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007ba7:	50                   	push   eax
c0007ba8:	52                   	push   edx
c0007ba9:	e8 26 fe ff ff       	call   c00079d4 <Hardware::portInUseRecursive(int, int)>
c0007bae:	83 c4 1c             	add    esp,0x1c
c0007bb1:	c3                   	ret    
c0007bb2:	66 90                	xchg   ax,ax

c0007bb4 <KePrintIOPortUsage()>:
c0007bb4:	53                   	push   ebx
c0007bb5:	31 db                	xor    ebx,ebx
c0007bb7:	83 ec 14             	sub    esp,0x14
c0007bba:	68 2c b1 02 c0       	push   0xc002b12c
c0007bbf:	e8 b8 f3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007bc4:	83 c4 10             	add    esp,0x10
c0007bc7:	90                   	nop
c0007bc8:	83 ec 08             	sub    esp,0x8
c0007bcb:	6a 01                	push   0x1
c0007bcd:	53                   	push   ebx
c0007bce:	e8 c1 ff ff ff       	call   c0007b94 <KeGetOwnerOfPort(unsigned short, int)>
c0007bd3:	83 c4 10             	add    esp,0x10
c0007bd6:	85 c0                	test   eax,eax
c0007bd8:	74 22                	je     c0007bfc <KePrintIOPortUsage()+0x48>
c0007bda:	83 ec 0c             	sub    esp,0xc
c0007bdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0007bdf:	50                   	push   eax
c0007be0:	ff 12                	call   DWORD PTR [edx]
c0007be2:	8b 10                	mov    edx,DWORD PTR [eax]
c0007be4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be7:	ff 12                	call   DWORD PTR [edx]
c0007be9:	83 c4 0c             	add    esp,0xc
c0007bec:	50                   	push   eax
c0007bed:	53                   	push   ebx
c0007bee:	68 4c b0 02 c0       	push   0xc002b04c
c0007bf3:	e8 84 f3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007bf8:	83 c4 10             	add    esp,0x10
c0007bfb:	90                   	nop
c0007bfc:	83 c3 01             	add    ebx,0x1
c0007bff:	81 fb 00 00 01 00    	cmp    ebx,0x10000
c0007c05:	75 c1                	jne    c0007bc8 <KePrintIOPortUsage()+0x14>
c0007c07:	83 ec 0c             	sub    esp,0xc
c0007c0a:	68 fc b0 02 c0       	push   0xc002b0fc
c0007c0f:	e8 68 f3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007c14:	83 c4 18             	add    esp,0x18
c0007c17:	5b                   	pop    ebx
c0007c18:	c3                   	ret    
c0007c19:	90                   	nop
c0007c1a:	66 90                	xchg   ax,ax

c0007c1c <Hardware::addChild(Hardware*)>:
c0007c1c:	83 ec 14             	sub    esp,0x14
c0007c1f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0007c23:	50                   	push   eax
c0007c24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007c28:	83 c0 74             	add    eax,0x74
c0007c2b:	50                   	push   eax
c0007c2c:	e8 6b 12 02 00       	call   c0028e9c <std::vector<Hardware*>::push_back(Hardware* const&)>
c0007c31:	83 c4 1c             	add    esp,0x1c
c0007c34:	c3                   	ret    
c0007c35:	90                   	nop
c0007c36:	66 90                	xchg   ax,ax

c0007c38 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>:
c0007c38:	55                   	push   ebp
c0007c39:	57                   	push   edi
c0007c3a:	56                   	push   esi
c0007c3b:	53                   	push   ebx
c0007c3c:	83 ec 28             	sub    esp,0x28
c0007c3f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0007c43:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0007c4a:	55                   	push   ebp
c0007c4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007c4e:	83 c4 10             	add    esp,0x10
c0007c51:	39 f8                	cmp    eax,edi
c0007c53:	0f 84 87 00 00 00    	je     c0007ce0 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0xa8>
c0007c59:	8d 76 00             	lea    esi,[esi+0x0]
c0007c5c:	83 c5 74             	add    ebp,0x74
c0007c5f:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c0007c63:	83 ec 08             	sub    esp,0x8
c0007c66:	55                   	push   ebp
c0007c67:	53                   	push   ebx
c0007c68:	e8 5f 0d 02 00       	call   c00289cc <std::vector<Hardware*>::begin()>
c0007c6d:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	55                   	push   ebp
c0007c75:	56                   	push   esi
c0007c76:	e8 75 0d 02 00       	call   c00289f0 <std::vector<Hardware*>::end()>
c0007c7b:	83 c4 1c             	add    esp,0x1c
c0007c7e:	66 90                	xchg   ax,ax
c0007c80:	83 ec 08             	sub    esp,0x8
c0007c83:	56                   	push   esi
c0007c84:	53                   	push   ebx
c0007c85:	e8 36 0a 02 00       	call   c00286c0 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0007c8a:	83 c4 10             	add    esp,0x10
c0007c8d:	84 c0                	test   al,al
c0007c8f:	74 33                	je     c0007cc4 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x8c>
c0007c91:	83 ec 0c             	sub    esp,0xc
c0007c94:	53                   	push   ebx
c0007c95:	e8 3a 0a 02 00       	call   c00286d4 <std::vector<Hardware*>::iterator::operator*() const>
c0007c9a:	83 c4 0c             	add    esp,0xc
c0007c9d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007ca1:	52                   	push   edx
c0007ca2:	57                   	push   edi
c0007ca3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007ca5:	51                   	push   ecx
c0007ca6:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007caa:	e8 89 ff ff ff       	call   c0007c38 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>
c0007caf:	58                   	pop    eax
c0007cb0:	5a                   	pop    edx
c0007cb1:	53                   	push   ebx
c0007cb2:	55                   	push   ebp
c0007cb3:	e8 5c 0d 02 00       	call   c0028a14 <std::vector<Hardware*>::iterator::operator++()>
c0007cb8:	55                   	push   ebp
c0007cb9:	e8 ee 09 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007cbe:	83 c4 10             	add    esp,0x10
c0007cc1:	eb bd                	jmp    c0007c80 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x48>
c0007cc3:	90                   	nop
c0007cc4:	83 ec 0c             	sub    esp,0xc
c0007cc7:	56                   	push   esi
c0007cc8:	e8 df 09 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007ccd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007cd0:	e8 d7 09 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007cd5:	83 c4 2c             	add    esp,0x2c
c0007cd8:	5b                   	pop    ebx
c0007cd9:	5e                   	pop    esi
c0007cda:	5f                   	pop    edi
c0007cdb:	5d                   	pop    ebp
c0007cdc:	c3                   	ret    
c0007cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0007ce0:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0007ce4:	83 ec 08             	sub    esp,0x8
c0007ce7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007ceb:	50                   	push   eax
c0007cec:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0007cf0:	51                   	push   ecx
c0007cf1:	e8 a6 11 02 00       	call   c0028e9c <std::vector<Hardware*>::push_back(Hardware* const&)>
c0007cf6:	83 c4 10             	add    esp,0x10
c0007cf9:	e9 5e ff ff ff       	jmp    c0007c5c <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x24>
c0007cfe:	66 90                	xchg   ax,ax

c0007d00 <KeGetHardwareOfType(HardwareType)>:
c0007d00:	53                   	push   ebx
c0007d01:	83 ec 14             	sub    esp,0x14
c0007d04:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007d08:	53                   	push   ebx
c0007d09:	e8 d2 0b 02 00       	call   c00288e0 <std::vector<Hardware*>::vector()>
c0007d0e:	83 c4 0c             	add    esp,0xc
c0007d11:	8b 15 b8 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033eb8
c0007d17:	53                   	push   ebx
c0007d18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d1c:	50                   	push   eax
c0007d1d:	52                   	push   edx
c0007d1e:	e8 15 ff ff ff       	call   c0007c38 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>
c0007d23:	89 d8                	mov    eax,ebx
c0007d25:	83 c4 18             	add    esp,0x18
c0007d28:	5b                   	pop    ebx
c0007d29:	c2 04 00             	ret    0x4

c0007d2c <Hardware::removeChild(Hardware*)>:
c0007d2c:	55                   	push   ebp
c0007d2d:	57                   	push   edi
c0007d2e:	56                   	push   esi
c0007d2f:	53                   	push   ebx
c0007d30:	83 ec 2c             	sub    esp,0x2c
c0007d33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d37:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007d3b:	8d 58 74             	lea    ebx,[eax+0x74]
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	53                   	push   ebx
c0007d42:	56                   	push   esi
c0007d43:	e8 a8 0c 02 00       	call   c00289f0 <std::vector<Hardware*>::end()>
c0007d48:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007d4c:	83 ec 0c             	sub    esp,0xc
c0007d4f:	53                   	push   ebx
c0007d50:	57                   	push   edi
c0007d51:	e8 9a 0c 02 00       	call   c00289f0 <std::vector<Hardware*>::end()>
c0007d56:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0007d5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d5d:	55                   	push   ebp
c0007d5e:	e8 69 0c 02 00       	call   c00289cc <std::vector<Hardware*>::begin()>
c0007d63:	8d 44 24 30          	lea    eax,[esp+0x30]
c0007d67:	83 c4 1c             	add    esp,0x1c
c0007d6a:	8d 54 24 44          	lea    edx,[esp+0x44]
c0007d6e:	52                   	push   edx
c0007d6f:	57                   	push   edi
c0007d70:	55                   	push   ebp
c0007d71:	50                   	push   eax
c0007d72:	e8 3d 0e 02 00       	call   c0028bb4 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c0007d77:	8d 54 24 28          	lea    edx,[esp+0x28]
c0007d7b:	83 c4 0c             	add    esp,0xc
c0007d7e:	56                   	push   esi
c0007d7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007d83:	50                   	push   eax
c0007d84:	53                   	push   ebx
c0007d85:	52                   	push   edx
c0007d86:	e8 a1 11 02 00       	call   c0028f2c <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>
c0007d8b:	8d 54 24 28          	lea    edx,[esp+0x28]
c0007d8f:	52                   	push   edx
c0007d90:	e8 17 09 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007d95:	58                   	pop    eax
c0007d96:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007d9a:	50                   	push   eax
c0007d9b:	e8 0c 09 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007da0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0007da3:	e8 04 09 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007da8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007dab:	e8 fc 08 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007db0:	89 34 24             	mov    DWORD PTR [esp],esi
c0007db3:	e8 f4 08 02 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0007db8:	83 c4 3c             	add    esp,0x3c
c0007dbb:	5b                   	pop    ebx
c0007dbc:	5e                   	pop    esi
c0007dbd:	5f                   	pop    edi
c0007dbe:	5d                   	pop    ebp
c0007dbf:	c3                   	ret    

c0007dc0 <Hardware::registerMemoryRange(unsigned long, unsigned long)>:
c0007dc0:	83 ec 24             	sub    esp,0x24
c0007dc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007dcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007dcf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007dd3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0007dd7:	50                   	push   eax
c0007dd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007ddc:	83 c0 04             	add    eax,0x4
c0007ddf:	50                   	push   eax
c0007de0:	e8 f3 13 02 00       	call   c00291d8 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>
c0007de5:	83 c4 2c             	add    esp,0x2c
c0007de8:	c3                   	ret    
c0007de9:	90                   	nop
c0007dea:	66 90                	xchg   ax,ax

c0007dec <Hardware::registerPortRange(unsigned short, unsigned char, int)>:
c0007dec:	56                   	push   esi
c0007ded:	53                   	push   ebx
c0007dee:	83 ec 14             	sub    esp,0x14
c0007df1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007df5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007df9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dfd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e01:	83 f8 02             	cmp    eax,0x2
c0007e04:	74 62                	je     c0007e68 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x7c>
c0007e06:	7e 50                	jle    c0007e58 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x6c>
c0007e08:	83 f8 04             	cmp    eax,0x4
c0007e0b:	74 57                	je     c0007e64 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x78>
c0007e0d:	83 f8 08             	cmp    eax,0x8
c0007e10:	75 5a                	jne    c0007e6c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x80>
c0007e12:	b0 03                	mov    al,0x3
c0007e14:	88 54 24 0e          	mov    BYTE PTR [esp+0xe],dl
c0007e18:	66 89 74 24 0c       	mov    WORD PTR [esp+0xc],si
c0007e1d:	c1 e0 06             	shl    eax,0x6
c0007e20:	83 ec 0c             	sub    esp,0xc
c0007e23:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0007e27:	0f b7 f6             	movzx  esi,si
c0007e2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007e2c:	53                   	push   ebx
c0007e2d:	83 c3 18             	add    ebx,0x18
c0007e30:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0007e33:	83 c4 0c             	add    esp,0xc
c0007e36:	50                   	push   eax
c0007e37:	56                   	push   esi
c0007e38:	68 94 b1 02 c0       	push   0xc002b194
c0007e3d:	e8 3a f1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007e42:	58                   	pop    eax
c0007e43:	5a                   	pop    edx
c0007e44:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007e48:	50                   	push   eax
c0007e49:	53                   	push   ebx
c0007e4a:	e8 41 15 02 00       	call   c0029390 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	83 c4 14             	add    esp,0x14
c0007e55:	5b                   	pop    ebx
c0007e56:	5e                   	pop    esi
c0007e57:	c3                   	ret    
c0007e58:	83 f8 01             	cmp    eax,0x1
c0007e5b:	75 0f                	jne    c0007e6c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x80>
c0007e5d:	31 c0                	xor    eax,eax
c0007e5f:	eb b3                	jmp    c0007e14 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x28>
c0007e61:	8d 76 00             	lea    esi,[esi+0x0]
c0007e64:	b0 02                	mov    al,0x2
c0007e66:	eb ac                	jmp    c0007e14 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x28>
c0007e68:	b0 01                	mov    al,0x1
c0007e6a:	eb a8                	jmp    c0007e14 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x28>
c0007e6c:	83 ec 0c             	sub    esp,0xc
c0007e6f:	68 64 b1 02 c0       	push   0xc002b164
c0007e74:	e8 eb 8b 00 00       	call   c0010a64 <KePanic(char const*)>
c0007e79:	83 c4 10             	add    esp,0x10
c0007e7c:	83 c4 14             	add    esp,0x14
c0007e7f:	5b                   	pop    ebx
c0007e80:	5e                   	pop    esi
c0007e81:	c3                   	ret    
c0007e82:	66 90                	xchg   ax,ax

c0007e84 <RootDriver::detect()>:
c0007e84:	90                   	nop
c0007e85:	c3                   	ret    
c0007e86:	66 90                	xchg   ax,ax

c0007e88 <RootDriver::deinitialise()>:
c0007e88:	90                   	nop
c0007e89:	c3                   	ret    
c0007e8a:	66 90                	xchg   ax,ax

c0007e8c <RootDriver::setPowerState(DevicePowerState)>:
c0007e8c:	90                   	nop
c0007e8d:	c3                   	ret    
c0007e8e:	66 90                	xchg   ax,ax

c0007e90 <RootDriver::getHumanReadableName()>:
c0007e90:	b8 20 b2 02 c0       	mov    eax,0xc002b220
c0007e95:	c3                   	ret    
c0007e96:	66 90                	xchg   ax,ax

c0007e98 <RootDriver::hasACPI()>:
c0007e98:	b0 01                	mov    al,0x1
c0007e9a:	c3                   	ret    
c0007e9b:	90                   	nop

c0007e9c <RootDriver::hasISAPnP()>:
c0007e9c:	b0 01                	mov    al,0x1
c0007e9e:	c3                   	ret    
c0007e9f:	90                   	nop

c0007ea0 <RootDriver::hasPCI()>:
c0007ea0:	b0 01                	mov    al,0x1
c0007ea2:	c3                   	ret    
c0007ea3:	90                   	nop

c0007ea4 <RootDriver::initialise()>:
c0007ea4:	53                   	push   ebx
c0007ea5:	83 ec 38             	sub    esp,0x38
c0007ea8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007eac:	e8 e7 ff ff ff       	call   c0007e98 <RootDriver::hasACPI()>
c0007eb1:	83 c4 04             	add    esp,0x4
c0007eb4:	0f b6 c0             	movzx  eax,al
c0007eb7:	85 c0                	test   eax,eax
c0007eb9:	0f 84 85 00 00 00    	je     c0007f44 <RootDriver::initialise()+0xa0>
c0007ebf:	c7 44 24 1c 8c 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8c
c0007ec7:	83 ec 0c             	sub    esp,0xc
c0007eca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ece:	e8 3c 87 00 00       	call   c001060f <malloc>
c0007ed3:	83 c4 10             	add    esp,0x10
c0007ed6:	89 c3                	mov    ebx,eax
c0007ed8:	83 ec 0c             	sub    esp,0xc
c0007edb:	53                   	push   ebx
c0007edc:	e8 c7 15 02 00       	call   c00294a8 <BusHardware::BusHardware()>
c0007ee1:	83 c4 10             	add    esp,0x10
c0007ee4:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0007ee8:	c7 44 24 20 08 00 00 00 	mov    DWORD PTR [esp+0x20],0x8
c0007ef0:	83 ec 0c             	sub    esp,0xc
c0007ef3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007ef7:	e8 13 87 00 00       	call   c001060f <malloc>
c0007efc:	83 c4 10             	add    esp,0x10
c0007eff:	89 c3                	mov    ebx,eax
c0007f01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007f07:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007f0e:	83 ec 0c             	sub    esp,0xc
c0007f11:	53                   	push   ebx
c0007f12:	e8 59 16 02 00       	call   c0029570 <ACPIDriver::ACPIDriver()>
c0007f17:	83 c4 10             	add    esp,0x10
c0007f1a:	83 ec 08             	sub    esp,0x8
c0007f1d:	53                   	push   ebx
c0007f1e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0007f22:	e8 b5 15 02 00       	call   c00294dc <BusHardware::setDriver(BusDriver*)>
c0007f27:	83 c4 10             	add    esp,0x10
c0007f2a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007f2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007f31:	83 ec 08             	sub    esp,0x8
c0007f34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f38:	50                   	push   eax
c0007f39:	e8 de fc ff ff       	call   c0007c1c <Hardware::addChild(Hardware*)>
c0007f3e:	83 c4 10             	add    esp,0x10
c0007f41:	8d 76 00             	lea    esi,[esi+0x0]
c0007f44:	83 ec 0c             	sub    esp,0xc
c0007f47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007f4b:	e8 50 ff ff ff       	call   c0007ea0 <RootDriver::hasPCI()>
c0007f50:	83 c4 10             	add    esp,0x10
c0007f53:	0f b6 c0             	movzx  eax,al
c0007f56:	85 c0                	test   eax,eax
c0007f58:	0f 84 82 00 00 00    	je     c0007fe0 <RootDriver::initialise()+0x13c>
c0007f5e:	c7 44 24 14 8c 00 00 00 	mov    DWORD PTR [esp+0x14],0x8c
c0007f66:	83 ec 0c             	sub    esp,0xc
c0007f69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007f6d:	e8 9d 86 00 00       	call   c001060f <malloc>
c0007f72:	83 c4 10             	add    esp,0x10
c0007f75:	89 c3                	mov    ebx,eax
c0007f77:	83 ec 0c             	sub    esp,0xc
c0007f7a:	53                   	push   ebx
c0007f7b:	e8 28 15 02 00       	call   c00294a8 <BusHardware::BusHardware()>
c0007f80:	83 c4 10             	add    esp,0x10
c0007f83:	89 5c 24 28          	mov    DWORD PTR [esp+0x28],ebx
c0007f87:	c7 44 24 18 08 00 00 00 	mov    DWORD PTR [esp+0x18],0x8
c0007f8f:	83 ec 0c             	sub    esp,0xc
c0007f92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f96:	e8 74 86 00 00       	call   c001060f <malloc>
c0007f9b:	83 c4 10             	add    esp,0x10
c0007f9e:	89 c3                	mov    ebx,eax
c0007fa0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007fa6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007fad:	83 ec 0c             	sub    esp,0xc
c0007fb0:	53                   	push   ebx
c0007fb1:	e8 de 15 02 00       	call   c0029594 <PCIDriver::PCIDriver()>
c0007fb6:	83 c4 10             	add    esp,0x10
c0007fb9:	83 ec 08             	sub    esp,0x8
c0007fbc:	53                   	push   ebx
c0007fbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fc1:	e8 16 15 02 00       	call   c00294dc <BusHardware::setDriver(BusDriver*)>
c0007fc6:	83 c4 10             	add    esp,0x10
c0007fc9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fcd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007fd0:	83 ec 08             	sub    esp,0x8
c0007fd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007fd7:	50                   	push   eax
c0007fd8:	e8 3f fc ff ff       	call   c0007c1c <Hardware::addChild(Hardware*)>
c0007fdd:	83 c4 10             	add    esp,0x10
c0007fe0:	83 ec 0c             	sub    esp,0xc
c0007fe3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007fe7:	e8 b0 fe ff ff       	call   c0007e9c <RootDriver::hasISAPnP()>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	0f b6 c0             	movzx  eax,al
c0007ff2:	85 c0                	test   eax,eax
c0007ff4:	74 76                	je     c000806c <RootDriver::initialise()+0x1c8>
c0007ff6:	c7 44 24 0c 8c 00 00 00 	mov    DWORD PTR [esp+0xc],0x8c
c0007ffe:	83 ec 0c             	sub    esp,0xc
c0008001:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008005:	e8 05 86 00 00       	call   c001060f <malloc>
c000800a:	83 c4 10             	add    esp,0x10
c000800d:	89 c3                	mov    ebx,eax
c000800f:	83 ec 0c             	sub    esp,0xc
c0008012:	53                   	push   ebx
c0008013:	e8 90 14 02 00       	call   c00294a8 <BusHardware::BusHardware()>
c0008018:	83 c4 10             	add    esp,0x10
c000801b:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c000801f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0008027:	83 ec 0c             	sub    esp,0xc
c000802a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000802e:	e8 dc 85 00 00       	call   c001060f <malloc>
c0008033:	83 c4 10             	add    esp,0x10
c0008036:	89 c3                	mov    ebx,eax
c0008038:	83 ec 0c             	sub    esp,0xc
c000803b:	53                   	push   ebx
c000803c:	e8 eb 14 02 00       	call   c002952c <ISAPnPDriver::ISAPnPDriver()>
c0008041:	83 c4 10             	add    esp,0x10
c0008044:	83 ec 08             	sub    esp,0x8
c0008047:	53                   	push   ebx
c0008048:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000804c:	e8 8b 14 02 00       	call   c00294dc <BusHardware::setDriver(BusDriver*)>
c0008051:	83 c4 10             	add    esp,0x10
c0008054:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000805b:	83 ec 08             	sub    esp,0x8
c000805e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008062:	50                   	push   eax
c0008063:	e8 b4 fb ff ff       	call   c0007c1c <Hardware::addChild(Hardware*)>
c0008068:	83 c4 10             	add    esp,0x10
c000806b:	90                   	nop
c000806c:	90                   	nop
c000806d:	83 c4 38             	add    esp,0x38
c0008070:	5b                   	pop    ebx
c0008071:	c3                   	ret    
c0008072:	66 90                	xchg   ax,ax

c0008074 <RootDriver::detectLegacyISA()>:
c0008074:	53                   	push   ebx
c0008075:	83 ec 18             	sub    esp,0x18
c0008078:	c7 44 24 04 8c 00 00 00 	mov    DWORD PTR [esp+0x4],0x8c
c0008080:	83 ec 0c             	sub    esp,0xc
c0008083:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008087:	e8 83 85 00 00       	call   c001060f <malloc>
c000808c:	83 c4 10             	add    esp,0x10
c000808f:	89 c3                	mov    ebx,eax
c0008091:	83 ec 0c             	sub    esp,0xc
c0008094:	53                   	push   ebx
c0008095:	e8 0e 14 02 00       	call   c00294a8 <BusHardware::BusHardware()>
c000809a:	83 c4 10             	add    esp,0x10
c000809d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00080a1:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00080a9:	83 ec 0c             	sub    esp,0xc
c00080ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00080b0:	e8 5a 85 00 00       	call   c001060f <malloc>
c00080b5:	83 c4 10             	add    esp,0x10
c00080b8:	89 c3                	mov    ebx,eax
c00080ba:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00080c0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00080c7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00080ce:	83 ec 0c             	sub    esp,0xc
c00080d1:	53                   	push   ebx
c00080d2:	e8 e1 14 02 00       	call   c00295b8 <ISADriver::ISADriver()>
c00080d7:	83 c4 10             	add    esp,0x10
c00080da:	83 ec 08             	sub    esp,0x8
c00080dd:	53                   	push   ebx
c00080de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00080e2:	e8 f5 13 02 00       	call   c00294dc <BusHardware::setDriver(BusDriver*)>
c00080e7:	83 c4 10             	add    esp,0x10
c00080ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f1:	83 ec 08             	sub    esp,0x8
c00080f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00080f8:	50                   	push   eax
c00080f9:	e8 1e fb ff ff       	call   c0007c1c <Hardware::addChild(Hardware*)>
c00080fe:	83 c4 10             	add    esp,0x10
c0008101:	90                   	nop
c0008102:	83 c4 18             	add    esp,0x18
c0008105:	5b                   	pop    ebx
c0008106:	c3                   	ret    

c0008107 <KiIsHashInTable(unsigned short)>:
c0008107:	0f b7 d0             	movzx  edx,ax
c000810a:	83 e0 07             	and    eax,0x7
c000810d:	c1 fa 03             	sar    edx,0x3
c0008110:	88 c1                	mov    cl,al
c0008112:	0f b6 92 00 43 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffcbd00]
c0008119:	d3 fa                	sar    edx,cl
c000811b:	89 d0                	mov    eax,edx
c000811d:	83 e0 01             	and    eax,0x1
c0008120:	c3                   	ret    

c0008121 <KiSetHashInTable(unsigned short, bool)>:
c0008121:	56                   	push   esi
c0008122:	53                   	push   ebx
c0008123:	0f b7 d8             	movzx  ebx,ax
c0008126:	83 e0 07             	and    eax,0x7
c0008129:	c1 fb 03             	sar    ebx,0x3
c000812c:	89 c1                	mov    ecx,eax
c000812e:	0f b6 b3 00 43 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffcbd00]
c0008135:	b8 01 00 00 00       	mov    eax,0x1
c000813a:	d3 e0                	shl    eax,cl
c000813c:	84 d2                	test   dl,dl
c000813e:	74 04                	je     c0008144 <KiSetHashInTable(unsigned short, bool)+0x23>
c0008140:	09 f0                	or     eax,esi
c0008142:	eb 04                	jmp    c0008148 <KiSetHashInTable(unsigned short, bool)+0x27>
c0008144:	f7 d0                	not    eax
c0008146:	21 f0                	and    eax,esi
c0008148:	88 83 00 43 03 c0    	mov    BYTE PTR [ebx-0x3ffcbd00],al
c000814e:	5b                   	pop    ebx
c000814f:	5e                   	pop    esi
c0008150:	c3                   	ret    

c0008151 <KiFlushSymlinkChanges()>:
c0008151:	57                   	push   edi
c0008152:	56                   	push   esi
c0008153:	53                   	push   ebx
c0008154:	83 ec 1c             	sub    esp,0x1c
c0008157:	68 14 01 00 00       	push   0x114
c000815c:	e8 ae 84 00 00       	call   c001060f <malloc>
c0008161:	83 c4 0c             	add    esp,0xc
c0008164:	89 c3                	mov    ebx,eax
c0008166:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c000816c:	68 80 b2 02 c0       	push   0xc002b280
c0008171:	50                   	push   eax
c0008172:	e8 53 0d 00 00       	call   c0008eca <File::File(char const*, Process*)>
c0008177:	83 c4 10             	add    esp,0x10
c000817a:	85 db                	test   ebx,ebx
c000817c:	75 10                	jne    c000818e <KiFlushSymlinkChanges()+0x3d>
c000817e:	83 ec 0c             	sub    esp,0xc
c0008181:	68 9e b2 02 c0       	push   0xc002b29e
c0008186:	e8 d9 88 00 00       	call   c0010a64 <KePanic(char const*)>
c000818b:	83 c4 10             	add    esp,0x10
c000818e:	50                   	push   eax
c000818f:	50                   	push   eax
c0008190:	6a 06                	push   0x6
c0008192:	53                   	push   ebx
c0008193:	e8 50 0d 00 00       	call   c0008ee8 <File::open(FileOpenMode)>
c0008198:	83 c4 10             	add    esp,0x10
c000819b:	85 c0                	test   eax,eax
c000819d:	74 10                	je     c00081af <KiFlushSymlinkChanges()+0x5e>
c000819f:	83 ec 0c             	sub    esp,0xc
c00081a2:	68 b8 b2 02 c0       	push   0xc002b2b8
c00081a7:	e8 b8 88 00 00       	call   c0010a64 <KePanic(char const*)>
c00081ac:	83 c4 10             	add    esp,0x10
c00081af:	31 f6                	xor    esi,esi
c00081b1:	39 35 c0 3e 03 c0    	cmp    DWORD PTR ds:0xc0033ec0,esi
c00081b7:	7e 70                	jle    c0008229 <KiFlushSymlinkChanges()+0xd8>
c00081b9:	83 ec 0c             	sub    esp,0xc
c00081bc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00081be:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00081c2:	89 f0                	mov    eax,esi
c00081c4:	57                   	push   edi
c00081c5:	c1 e0 08             	shl    eax,0x8
c00081c8:	05 00 3f 03 c0       	add    eax,0xc0033f00
c00081cd:	50                   	push   eax
c00081ce:	6a 00                	push   0x0
c00081d0:	68 00 01 00 00       	push   0x100
c00081d5:	53                   	push   ebx
c00081d6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00081d9:	83 c4 20             	add    esp,0x20
c00081dc:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00081e4:	74 10                	je     c00081f6 <KiFlushSymlinkChanges()+0xa5>
c00081e6:	83 ec 0c             	sub    esp,0xc
c00081e9:	68 d2 b2 02 c0       	push   0xc002b2d2
c00081ee:	e8 71 88 00 00       	call   c0010a64 <KePanic(char const*)>
c00081f3:	83 c4 10             	add    esp,0x10
c00081f6:	83 ec 0c             	sub    esp,0xc
c00081f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00081fb:	8d 14 f5 e0 3e 03 c0 	lea    edx,[esi*8-0x3ffcc120]
c0008202:	57                   	push   edi
c0008203:	52                   	push   edx
c0008204:	6a 00                	push   0x0
c0008206:	6a 08                	push   0x8
c0008208:	53                   	push   ebx
c0008209:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000820c:	83 c4 20             	add    esp,0x20
c000820f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0008214:	74 10                	je     c0008226 <KiFlushSymlinkChanges()+0xd5>
c0008216:	83 ec 0c             	sub    esp,0xc
c0008219:	68 ec b2 02 c0       	push   0xc002b2ec
c000821e:	e8 41 88 00 00       	call   c0010a64 <KePanic(char const*)>
c0008223:	83 c4 10             	add    esp,0x10
c0008226:	46                   	inc    esi
c0008227:	eb 88                	jmp    c00081b1 <KiFlushSymlinkChanges()+0x60>
c0008229:	83 ec 0c             	sub    esp,0xc
c000822c:	53                   	push   ebx
c000822d:	e8 14 0d 00 00       	call   c0008f46 <File::close()>
c0008232:	83 c4 10             	add    esp,0x10
c0008235:	85 db                	test   ebx,ebx
c0008237:	74 0c                	je     c0008245 <KiFlushSymlinkChanges()+0xf4>
c0008239:	83 ec 0c             	sub    esp,0xc
c000823c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000823e:	53                   	push   ebx
c000823f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008242:	83 c4 10             	add    esp,0x10
c0008245:	c7 05 c0 3e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033ec0,0x0
c000824f:	83 c4 10             	add    esp,0x10
c0008252:	5b                   	pop    ebx
c0008253:	5e                   	pop    esi
c0008254:	5f                   	pop    edi
c0008255:	c3                   	ret    

c0008256 <KiDeinitialiseSymlinks(void*)>:
c0008256:	e9 f6 fe ff ff       	jmp    c0008151 <KiFlushSymlinkChanges()>

c000825b <KiGetSymlinkHash(char const*)>:
c000825b:	53                   	push   ebx
c000825c:	89 c3                	mov    ebx,eax
c000825e:	83 ec 14             	sub    esp,0x14
c0008261:	50                   	push   eax
c0008262:	e8 09 83 ff ff       	call   c0000570 <strlen>
c0008267:	5a                   	pop    edx
c0008268:	59                   	pop    ecx
c0008269:	50                   	push   eax
c000826a:	53                   	push   ebx
c000826b:	e8 70 6c 00 00       	call   c000eee0 <KeCalculateCRC32(unsigned char*, int)>
c0008270:	83 c4 18             	add    esp,0x18
c0008273:	89 c2                	mov    edx,eax
c0008275:	5b                   	pop    ebx
c0008276:	c1 ea 10             	shr    edx,0x10
c0008279:	31 d0                	xor    eax,edx
c000827b:	c3                   	ret    

c000827c <KiCreateSymlinkID()>:
c000827c:	55                   	push   ebp
c000827d:	57                   	push   edi
c000827e:	56                   	push   esi
c000827f:	53                   	push   ebx
c0008280:	31 db                	xor    ebx,ebx
c0008282:	83 ec 1c             	sub    esp,0x1c
c0008285:	e8 ba 91 00 00       	call   c0011444 <KeRand()>
c000828a:	43                   	inc    ebx
c000828b:	8b 2d 00 63 03 c0    	mov    ebp,DWORD PTR ds:0xc0036300
c0008291:	31 d2                	xor    edx,edx
c0008293:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0008296:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000829a:	89 0d 00 63 03 c0    	mov    DWORD PTR ds:0xc0036300,ecx
c00082a0:	c1 e0 1f             	shl    eax,0x1f
c00082a3:	89 d7                	mov    edi,edx
c00082a5:	89 c6                	mov    esi,eax
c00082a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00082ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00082b3:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c00082b9:	75 10                	jne    c00082cb <KiCreateSymlinkID()+0x4f>
c00082bb:	83 ec 0c             	sub    esp,0xc
c00082be:	68 06 b3 02 c0       	push   0xc002b306
c00082c3:	e8 9c 87 00 00       	call   c0010a64 <KePanic(char const*)>
c00082c8:	83 c4 10             	add    esp,0x10
c00082cb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00082cf:	75 04                	jne    c00082d5 <KiCreateSymlinkID()+0x59>
c00082d1:	39 f5                	cmp    ebp,esi
c00082d3:	74 b0                	je     c0008285 <KiCreateSymlinkID()+0x9>
c00082d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00082d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00082dd:	31 f0                	xor    eax,esi
c00082df:	83 c4 1c             	add    esp,0x1c
c00082e2:	31 fa                	xor    edx,edi
c00082e4:	5b                   	pop    ebx
c00082e5:	5e                   	pop    esi
c00082e6:	5f                   	pop    edi
c00082e7:	5d                   	pop    ebp
c00082e8:	c3                   	ret    

c00082e9 <KeRegisterSymlink(char const*, unsigned long long)>:
c00082e9:	53                   	push   ebx
c00082ea:	83 ec 0c             	sub    esp,0xc
c00082ed:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00082f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00082f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00082f9:	a1 c0 3e 03 c0       	mov    eax,ds:0xc0033ec0
c00082fe:	68 00 01 00 00       	push   0x100
c0008303:	89 0c c5 e4 3e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcc11c],ecx
c000830a:	6a 00                	push   0x0
c000830c:	89 14 c5 e0 3e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcc120],edx
c0008313:	c1 e0 08             	shl    eax,0x8
c0008316:	05 00 3f 03 c0       	add    eax,0xc0033f00
c000831b:	50                   	push   eax
c000831c:	e8 cf 81 ff ff       	call   c00004f0 <memset>
c0008321:	58                   	pop    eax
c0008322:	a1 c0 3e 03 c0       	mov    eax,ds:0xc0033ec0
c0008327:	5a                   	pop    edx
c0008328:	c1 e0 08             	shl    eax,0x8
c000832b:	53                   	push   ebx
c000832c:	05 00 3f 03 c0       	add    eax,0xc0033f00
c0008331:	50                   	push   eax
c0008332:	e8 09 83 ff ff       	call   c0000640 <strcpy>
c0008337:	89 d8                	mov    eax,ebx
c0008339:	e8 1d ff ff ff       	call   c000825b <KiGetSymlinkHash(char const*)>
c000833e:	ba 01 00 00 00       	mov    edx,0x1
c0008343:	0f b7 c0             	movzx  eax,ax
c0008346:	e8 d6 fd ff ff       	call   c0008121 <KiSetHashInTable(unsigned short, bool)>
c000834b:	a1 c0 3e 03 c0       	mov    eax,ds:0xc0033ec0
c0008350:	83 c4 10             	add    esp,0x10
c0008353:	40                   	inc    eax
c0008354:	a3 c0 3e 03 c0       	mov    ds:0xc0033ec0,eax
c0008359:	83 f8 03             	cmp    eax,0x3
c000835c:	7e 09                	jle    c0008367 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000835e:	83 c4 08             	add    esp,0x8
c0008361:	5b                   	pop    ebx
c0008362:	e9 ea fd ff ff       	jmp    c0008151 <KiFlushSymlinkChanges()>
c0008367:	83 c4 08             	add    esp,0x8
c000836a:	5b                   	pop    ebx
c000836b:	c3                   	ret    

c000836c <KeInitialiseSymlinks()>:
c000836c:	57                   	push   edi
c000836d:	56                   	push   esi
c000836e:	53                   	push   ebx
c000836f:	81 ec 14 01 00 00    	sub    esp,0x114
c0008375:	c7 05 00 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036300,0x0
c000837f:	68 00 20 00 00       	push   0x2000
c0008384:	c7 05 c0 3e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033ec0,0x0
c000838e:	6a 00                	push   0x0
c0008390:	68 00 43 03 c0       	push   0xc0034300
c0008395:	e8 56 81 ff ff       	call   c00004f0 <memset>
c000839a:	59                   	pop    ecx
c000839b:	5b                   	pop    ebx
c000839c:	6a 00                	push   0x0
c000839e:	68 56 82 00 c0       	push   0xc0008256
c00083a3:	e8 08 5c 00 00       	call   c000dfb0 <KeRegisterAtexit(void (*)(void*), void*)>
c00083a8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00083af:	e8 5b 82 00 00       	call   c001060f <malloc>
c00083b4:	83 c4 0c             	add    esp,0xc
c00083b7:	89 c3                	mov    ebx,eax
c00083b9:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c00083bf:	68 80 b2 02 c0       	push   0xc002b280
c00083c4:	50                   	push   eax
c00083c5:	e8 00 0b 00 00       	call   c0008eca <File::File(char const*, Process*)>
c00083ca:	83 c4 10             	add    esp,0x10
c00083cd:	85 db                	test   ebx,ebx
c00083cf:	75 10                	jne    c00083e1 <KeInitialiseSymlinks()+0x75>
c00083d1:	83 ec 0c             	sub    esp,0xc
c00083d4:	68 0f b3 02 c0       	push   0xc002b30f
c00083d9:	e8 86 86 00 00       	call   c0010a64 <KePanic(char const*)>
c00083de:	83 c4 10             	add    esp,0x10
c00083e1:	83 ec 0c             	sub    esp,0xc
c00083e4:	53                   	push   ebx
c00083e5:	e8 c2 0d 00 00       	call   c00091ac <File::exists()>
c00083ea:	83 c4 10             	add    esp,0x10
c00083ed:	84 c0                	test   al,al
c00083ef:	75 3a                	jne    c000842b <KeInitialiseSymlinks()+0xbf>
c00083f1:	52                   	push   edx
c00083f2:	52                   	push   edx
c00083f3:	6a 12                	push   0x12
c00083f5:	53                   	push   ebx
c00083f6:	e8 ed 0a 00 00       	call   c0008ee8 <File::open(FileOpenMode)>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	85 c0                	test   eax,eax
c0008400:	74 10                	je     c0008412 <KeInitialiseSymlinks()+0xa6>
c0008402:	83 ec 0c             	sub    esp,0xc
c0008405:	68 2c b3 02 c0       	push   0xc002b32c
c000840a:	e8 55 86 00 00       	call   c0010a64 <KePanic(char const*)>
c000840f:	83 c4 10             	add    esp,0x10
c0008412:	83 ec 0c             	sub    esp,0xc
c0008415:	53                   	push   ebx
c0008416:	e8 2b 0b 00 00       	call   c0008f46 <File::close()>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 db                	test   ebx,ebx
c0008420:	0f 84 9e 00 00 00    	je     c00084c4 <KeInitialiseSymlinks()+0x158>
c0008426:	e9 8d 00 00 00       	jmp    c00084b8 <KeInitialiseSymlinks()+0x14c>
c000842b:	50                   	push   eax
c000842c:	50                   	push   eax
c000842d:	6a 01                	push   0x1
c000842f:	53                   	push   ebx
c0008430:	e8 b3 0a 00 00       	call   c0008ee8 <File::open(FileOpenMode)>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	85 c0                	test   eax,eax
c000843a:	74 10                	je     c000844c <KeInitialiseSymlinks()+0xe0>
c000843c:	83 ec 0c             	sub    esp,0xc
c000843f:	68 49 b3 02 c0       	push   0xc002b349
c0008444:	e8 1b 86 00 00       	call   c0010a64 <KePanic(char const*)>
c0008449:	83 c4 10             	add    esp,0x10
c000844c:	83 ec 0c             	sub    esp,0xc
c000844f:	ff 05 00 63 03 c0    	inc    DWORD PTR ds:0xc0036300
c0008455:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0008459:	8b 03                	mov    eax,DWORD PTR [ebx]
c000845b:	57                   	push   edi
c000845c:	8d 74 24 20          	lea    esi,[esp+0x20]
c0008460:	56                   	push   esi
c0008461:	6a 00                	push   0x0
c0008463:	68 00 01 00 00       	push   0x100
c0008468:	53                   	push   ebx
c0008469:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000846c:	83 c4 20             	add    esp,0x20
c000846f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0008477:	75 33                	jne    c00084ac <KeInitialiseSymlinks()+0x140>
c0008479:	83 ec 0c             	sub    esp,0xc
c000847c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000847e:	57                   	push   edi
c000847f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0008483:	52                   	push   edx
c0008484:	6a 00                	push   0x0
c0008486:	6a 08                	push   0x8
c0008488:	53                   	push   ebx
c0008489:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000848c:	83 c4 20             	add    esp,0x20
c000848f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0008494:	75 16                	jne    c00084ac <KeInitialiseSymlinks()+0x140>
c0008496:	89 f0                	mov    eax,esi
c0008498:	e8 be fd ff ff       	call   c000825b <KiGetSymlinkHash(char const*)>
c000849d:	ba 01 00 00 00       	mov    edx,0x1
c00084a2:	0f b7 c0             	movzx  eax,ax
c00084a5:	e8 77 fc ff ff       	call   c0008121 <KiSetHashInTable(unsigned short, bool)>
c00084aa:	eb a0                	jmp    c000844c <KeInitialiseSymlinks()+0xe0>
c00084ac:	83 ec 0c             	sub    esp,0xc
c00084af:	53                   	push   ebx
c00084b0:	e8 91 0a 00 00       	call   c0008f46 <File::close()>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00084bd:	53                   	push   ebx
c00084be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00084c1:	83 c4 10             	add    esp,0x10
c00084c4:	81 c4 10 01 00 00    	add    esp,0x110
c00084ca:	5b                   	pop    ebx
c00084cb:	5e                   	pop    esi
c00084cc:	5f                   	pop    edi
c00084cd:	c3                   	ret    

c00084ce <KiIsSymlinkRegistered(char const*)>:
c00084ce:	55                   	push   ebp
c00084cf:	57                   	push   edi
c00084d0:	56                   	push   esi
c00084d1:	53                   	push   ebx
c00084d2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00084d8:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00084df:	89 f0                	mov    eax,esi
c00084e1:	e8 75 fd ff ff       	call   c000825b <KiGetSymlinkHash(char const*)>
c00084e6:	0f b7 c0             	movzx  eax,ax
c00084e9:	e8 19 fc ff ff       	call   c0008107 <KiIsHashInTable(unsigned short)>
c00084ee:	31 d2                	xor    edx,edx
c00084f0:	88 c1                	mov    cl,al
c00084f2:	31 c0                	xor    eax,eax
c00084f4:	84 c9                	test   cl,cl
c00084f6:	0f 84 31 01 00 00    	je     c000862d <KiIsSymlinkRegistered(char const*)+0x15f>
c00084fc:	31 db                	xor    ebx,ebx
c00084fe:	39 1d c0 3e 03 c0    	cmp    DWORD PTR ds:0xc0033ec0,ebx
c0008504:	7e 30                	jle    c0008536 <KiIsSymlinkRegistered(char const*)+0x68>
c0008506:	89 d8                	mov    eax,ebx
c0008508:	51                   	push   ecx
c0008509:	c1 e0 08             	shl    eax,0x8
c000850c:	51                   	push   ecx
c000850d:	05 00 3f 03 c0       	add    eax,0xc0033f00
c0008512:	50                   	push   eax
c0008513:	56                   	push   esi
c0008514:	e8 37 82 ff ff       	call   c0000750 <strcmp>
c0008519:	83 c4 10             	add    esp,0x10
c000851c:	85 c0                	test   eax,eax
c000851e:	75 13                	jne    c0008533 <KiIsSymlinkRegistered(char const*)+0x65>
c0008520:	8b 04 dd e0 3e 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffcc120]
c0008527:	8b 14 dd e4 3e 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffcc11c]
c000852e:	e9 fa 00 00 00       	jmp    c000862d <KiIsSymlinkRegistered(char const*)+0x15f>
c0008533:	43                   	inc    ebx
c0008534:	eb c8                	jmp    c00084fe <KiIsSymlinkRegistered(char const*)+0x30>
c0008536:	83 ec 0c             	sub    esp,0xc
c0008539:	68 14 01 00 00       	push   0x114
c000853e:	e8 cc 80 00 00       	call   c001060f <malloc>
c0008543:	83 c4 0c             	add    esp,0xc
c0008546:	89 c3                	mov    ebx,eax
c0008548:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c000854e:	68 80 b2 02 c0       	push   0xc002b280
c0008553:	50                   	push   eax
c0008554:	e8 71 09 00 00       	call   c0008eca <File::File(char const*, Process*)>
c0008559:	83 c4 10             	add    esp,0x10
c000855c:	85 db                	test   ebx,ebx
c000855e:	75 12                	jne    c0008572 <KiIsSymlinkRegistered(char const*)+0xa4>
c0008560:	83 ec 0c             	sub    esp,0xc
c0008563:	68 64 b3 02 c0       	push   0xc002b364
c0008568:	e8 f7 84 00 00       	call   c0010a64 <KePanic(char const*)>
c000856d:	83 c4 10             	add    esp,0x10
c0008570:	eb 10                	jmp    c0008582 <KiIsSymlinkRegistered(char const*)+0xb4>
c0008572:	83 ec 0c             	sub    esp,0xc
c0008575:	53                   	push   ebx
c0008576:	e8 31 0c 00 00       	call   c00091ac <File::exists()>
c000857b:	83 c4 10             	add    esp,0x10
c000857e:	84 c0                	test   al,al
c0008580:	74 de                	je     c0008560 <KiIsSymlinkRegistered(char const*)+0x92>
c0008582:	52                   	push   edx
c0008583:	52                   	push   edx
c0008584:	6a 01                	push   0x1
c0008586:	53                   	push   ebx
c0008587:	e8 5c 09 00 00       	call   c0008ee8 <File::open(FileOpenMode)>
c000858c:	83 c4 10             	add    esp,0x10
c000858f:	85 c0                	test   eax,eax
c0008591:	74 10                	je     c00085a3 <KiIsSymlinkRegistered(char const*)+0xd5>
c0008593:	83 ec 0c             	sub    esp,0xc
c0008596:	68 7f b3 02 c0       	push   0xc002b37f
c000859b:	e8 c4 84 00 00       	call   c0010a64 <KePanic(char const*)>
c00085a0:	83 c4 10             	add    esp,0x10
c00085a3:	83 ec 0c             	sub    esp,0xc
c00085a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085a8:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00085ac:	55                   	push   ebp
c00085ad:	8d 7c 24 20          	lea    edi,[esp+0x20]
c00085b1:	57                   	push   edi
c00085b2:	6a 00                	push   0x0
c00085b4:	68 00 01 00 00       	push   0x100
c00085b9:	53                   	push   ebx
c00085ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00085bd:	83 c4 20             	add    esp,0x20
c00085c0:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00085c8:	75 4b                	jne    c0008615 <KiIsSymlinkRegistered(char const*)+0x147>
c00085ca:	83 ec 0c             	sub    esp,0xc
c00085cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085cf:	55                   	push   ebp
c00085d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00085d4:	52                   	push   edx
c00085d5:	6a 00                	push   0x0
c00085d7:	6a 08                	push   0x8
c00085d9:	53                   	push   ebx
c00085da:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00085dd:	83 c4 20             	add    esp,0x20
c00085e0:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00085e5:	75 2e                	jne    c0008615 <KiIsSymlinkRegistered(char const*)+0x147>
c00085e7:	50                   	push   eax
c00085e8:	50                   	push   eax
c00085e9:	57                   	push   edi
c00085ea:	56                   	push   esi
c00085eb:	e8 60 81 ff ff       	call   c0000750 <strcmp>
c00085f0:	83 c4 10             	add    esp,0x10
c00085f3:	85 c0                	test   eax,eax
c00085f5:	75 ac                	jne    c00085a3 <KiIsSymlinkRegistered(char const*)+0xd5>
c00085f7:	83 ec 0c             	sub    esp,0xc
c00085fa:	53                   	push   ebx
c00085fb:	e8 46 09 00 00       	call   c0008f46 <File::close()>
c0008600:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008602:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008605:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008608:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000860c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008610:	83 c4 10             	add    esp,0x10
c0008613:	eb 18                	jmp    c000862d <KiIsSymlinkRegistered(char const*)+0x15f>
c0008615:	83 ec 0c             	sub    esp,0xc
c0008618:	53                   	push   ebx
c0008619:	e8 28 09 00 00       	call   c0008f46 <File::close()>
c000861e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008620:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008623:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008626:	83 c4 10             	add    esp,0x10
c0008629:	31 c0                	xor    eax,eax
c000862b:	31 d2                	xor    edx,edx
c000862d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0008633:	5b                   	pop    ebx
c0008634:	5e                   	pop    esi
c0008635:	5f                   	pop    edi
c0008636:	5d                   	pop    ebp
c0008637:	c3                   	ret    

c0008638 <KeDereferenceSymlink(char const*, char*)>:
c0008638:	55                   	push   ebp
c0008639:	57                   	push   edi
c000863a:	56                   	push   esi
c000863b:	53                   	push   ebx
c000863c:	83 ec 48             	sub    esp,0x48
c000863f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0008643:	56                   	push   esi
c0008644:	e8 85 fe ff ff       	call   c00084ce <KiIsSymlinkRegistered(char const*)>
c0008649:	83 c4 10             	add    esp,0x10
c000864c:	89 c7                	mov    edi,eax
c000864e:	89 d0                	mov    eax,edx
c0008650:	09 f8                	or     eax,edi
c0008652:	75 07                	jne    c000865b <KeDereferenceSymlink(char const*, char*)+0x23>
c0008654:	31 c0                	xor    eax,eax
c0008656:	e9 7c 01 00 00       	jmp    c00087d7 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000865b:	83 ec 0c             	sub    esp,0xc
c000865e:	89 d5                	mov    ebp,edx
c0008660:	68 14 01 00 00       	push   0x114
c0008665:	e8 a5 7f 00 00       	call   c001060f <malloc>
c000866a:	83 c4 0c             	add    esp,0xc
c000866d:	89 c3                	mov    ebx,eax
c000866f:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c0008675:	56                   	push   esi
c0008676:	50                   	push   eax
c0008677:	e8 4e 08 00 00       	call   c0008eca <File::File(char const*, Process*)>
c000867c:	83 c4 10             	add    esp,0x10
c000867f:	85 db                	test   ebx,ebx
c0008681:	0f 84 32 01 00 00    	je     c00087b9 <KeDereferenceSymlink(char const*, char*)+0x181>
c0008687:	56                   	push   esi
c0008688:	56                   	push   esi
c0008689:	6a 01                	push   0x1
c000868b:	53                   	push   ebx
c000868c:	e8 57 08 00 00       	call   c0008ee8 <File::open(FileOpenMode)>
c0008691:	83 c4 10             	add    esp,0x10
c0008694:	85 c0                	test   eax,eax
c0008696:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008698:	74 09                	je     c00086a3 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000869a:	83 ec 0c             	sub    esp,0xc
c000869d:	53                   	push   ebx
c000869e:	e9 10 01 00 00       	jmp    c00087b3 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00086a3:	83 ec 0c             	sub    esp,0xc
c00086a6:	8d 74 24 18          	lea    esi,[esp+0x18]
c00086aa:	56                   	push   esi
c00086ab:	8d 54 24 37          	lea    edx,[esp+0x37]
c00086af:	52                   	push   edx
c00086b0:	6a 00                	push   0x0
c00086b2:	6a 08                	push   0x8
c00086b4:	53                   	push   ebx
c00086b5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00086b8:	83 c4 20             	add    esp,0x20
c00086bb:	85 c0                	test   eax,eax
c00086bd:	0f 85 e2 00 00 00    	jne    c00087a5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00086c3:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00086c8:	0f 85 d7 00 00 00    	jne    c00087a5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00086ce:	83 ec 0c             	sub    esp,0xc
c00086d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00086d3:	56                   	push   esi
c00086d4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00086d8:	52                   	push   edx
c00086d9:	6a 00                	push   0x0
c00086db:	6a 08                	push   0x8
c00086dd:	53                   	push   ebx
c00086de:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00086e1:	83 c4 20             	add    esp,0x20
c00086e4:	85 c0                	test   eax,eax
c00086e6:	0f 85 b9 00 00 00    	jne    c00087a5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00086ec:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00086f1:	0f 85 ae 00 00 00    	jne    c00087a5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00086f7:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00086fb:	0f 85 53 ff ff ff    	jne    c0008654 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0008701:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0008705:	0f 85 49 ff ff ff    	jne    c0008654 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000870b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008713:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000871b:	51                   	push   ecx
c000871c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0008720:	50                   	push   eax
c0008721:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008725:	50                   	push   eax
c0008726:	53                   	push   ebx
c0008727:	e8 be 0a 00 00       	call   c00091ea <File::stat(unsigned long long*, bool*)>
c000872c:	83 c4 10             	add    esp,0x10
c000872f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008734:	75 6f                	jne    c00087a5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008736:	31 c9                	xor    ecx,ecx
c0008738:	bf 0f 00 00 00       	mov    edi,0xf
c000873d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008741:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008745:	39 c7                	cmp    edi,eax
c0008747:	89 cf                	mov    edi,ecx
c0008749:	19 d7                	sbb    edi,edx
c000874b:	73 58                	jae    c00087a5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000874d:	83 c0 f0             	add    eax,0xfffffff0
c0008750:	bf ff 00 00 00       	mov    edi,0xff
c0008755:	83 d2 ff             	adc    edx,0xffffffff
c0008758:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000875c:	39 c7                	cmp    edi,eax
c000875e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008762:	19 d1                	sbb    ecx,edx
c0008764:	72 53                	jb     c00087b9 <KeDereferenceSymlink(char const*, char*)+0x181>
c0008766:	40                   	inc    eax
c0008767:	52                   	push   edx
c0008768:	50                   	push   eax
c0008769:	6a 00                	push   0x0
c000876b:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000876f:	e8 7c 7d ff ff       	call   c00004f0 <memset>
c0008774:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008776:	89 34 24             	mov    DWORD PTR [esp],esi
c0008779:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000877d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008781:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008785:	53                   	push   ebx
c0008786:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008789:	83 c4 20             	add    esp,0x20
c000878c:	85 c0                	test   eax,eax
c000878e:	75 15                	jne    c00087a5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008794:	89 c7                	mov    edi,eax
c0008796:	c1 ff 1f             	sar    edi,0x1f
c0008799:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000879d:	75 06                	jne    c00087a5 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000879f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00087a3:	74 19                	je     c00087be <KeDereferenceSymlink(char const*, char*)+0x186>
c00087a5:	83 ec 0c             	sub    esp,0xc
c00087a8:	53                   	push   ebx
c00087a9:	e8 98 07 00 00       	call   c0008f46 <File::close()>
c00087ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00087b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00087b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00087b6:	83 c4 10             	add    esp,0x10
c00087b9:	83 c8 ff             	or     eax,0xffffffff
c00087bc:	eb 19                	jmp    c00087d7 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00087be:	83 ec 0c             	sub    esp,0xc
c00087c1:	53                   	push   ebx
c00087c2:	e8 7f 07 00 00       	call   c0008f46 <File::close()>
c00087c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00087c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00087cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00087cf:	83 c4 10             	add    esp,0x10
c00087d2:	b8 01 00 00 00       	mov    eax,0x1
c00087d7:	83 c4 3c             	add    esp,0x3c
c00087da:	5b                   	pop    ebx
c00087db:	5e                   	pop    esi
c00087dc:	5f                   	pop    edi
c00087dd:	5d                   	pop    ebp
c00087de:	c3                   	ret    

c00087df <KeCreateSymlink(char const*, char const*)>:
c00087df:	55                   	push   ebp
c00087e0:	57                   	push   edi
c00087e1:	56                   	push   esi
c00087e2:	53                   	push   ebx
c00087e3:	83 ec 38             	sub    esp,0x38
c00087e6:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00087ea:	68 14 01 00 00       	push   0x114
c00087ef:	e8 1b 7e 00 00       	call   c001060f <malloc>
c00087f4:	6a 00                	push   0x0
c00087f6:	89 c3                	mov    ebx,eax
c00087f8:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c00087fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0008802:	50                   	push   eax
c0008803:	e8 c4 05 00 00       	call   c0008dcc <File::File(char const*, Process*, bool)>
c0008808:	83 c4 20             	add    esp,0x20
c000880b:	b8 01 00 00 00       	mov    eax,0x1
c0008810:	85 db                	test   ebx,ebx
c0008812:	0f 84 fb 00 00 00    	je     c0008913 <KeCreateSymlink(char const*, char const*)+0x134>
c0008818:	52                   	push   edx
c0008819:	52                   	push   edx
c000881a:	6a 12                	push   0x12
c000881c:	53                   	push   ebx
c000881d:	e8 c6 06 00 00       	call   c0008ee8 <File::open(FileOpenMode)>
c0008822:	83 c4 10             	add    esp,0x10
c0008825:	85 c0                	test   eax,eax
c0008827:	74 0b                	je     c0008834 <KeCreateSymlink(char const*, char const*)+0x55>
c0008829:	83 ec 0c             	sub    esp,0xc
c000882c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000882e:	53                   	push   ebx
c000882f:	e9 d4 00 00 00       	jmp    c0008908 <KeCreateSymlink(char const*, char const*)+0x129>
c0008834:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0008838:	be 9a b3 02 c0       	mov    esi,0xc002b39a
c000883d:	b9 09 00 00 00       	mov    ecx,0x9
c0008842:	fc                   	cld    
c0008843:	83 ec 0c             	sub    esp,0xc
c0008846:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008848:	8d 74 24 10          	lea    esi,[esp+0x10]
c000884c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000884e:	56                   	push   esi
c000884f:	8d 54 24 27          	lea    edx,[esp+0x27]
c0008853:	52                   	push   edx
c0008854:	6a 00                	push   0x0
c0008856:	6a 08                	push   0x8
c0008858:	53                   	push   ebx
c0008859:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000885c:	83 c4 20             	add    esp,0x20
c000885f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0008864:	0f 85 90 00 00 00    	jne    c00088fa <KeCreateSymlink(char const*, char const*)+0x11b>
c000886a:	85 c0                	test   eax,eax
c000886c:	0f 85 88 00 00 00    	jne    c00088fa <KeCreateSymlink(char const*, char const*)+0x11b>
c0008872:	e8 05 fa ff ff       	call   c000827c <KiCreateSymlinkID()>
c0008877:	83 ec 0c             	sub    esp,0xc
c000887a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000887e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008882:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008884:	56                   	push   esi
c0008885:	8d 54 24 18          	lea    edx,[esp+0x18]
c0008889:	52                   	push   edx
c000888a:	6a 00                	push   0x0
c000888c:	6a 08                	push   0x8
c000888e:	53                   	push   ebx
c000888f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008892:	83 c4 20             	add    esp,0x20
c0008895:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000889a:	75 5e                	jne    c00088fa <KeCreateSymlink(char const*, char const*)+0x11b>
c000889c:	85 c0                	test   eax,eax
c000889e:	75 5a                	jne    c00088fa <KeCreateSymlink(char const*, char const*)+0x11b>
c00088a0:	83 ec 0c             	sub    esp,0xc
c00088a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00088a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00088a8:	55                   	push   ebp
c00088a9:	e8 c2 7c ff ff       	call   c0000570 <strlen>
c00088ae:	89 34 24             	mov    DWORD PTR [esp],esi
c00088b1:	31 d2                	xor    edx,edx
c00088b3:	55                   	push   ebp
c00088b4:	52                   	push   edx
c00088b5:	50                   	push   eax
c00088b6:	53                   	push   ebx
c00088b7:	ff d7                	call   edi
c00088b9:	83 c4 14             	add    esp,0x14
c00088bc:	89 c6                	mov    esi,eax
c00088be:	55                   	push   ebp
c00088bf:	e8 ac 7c ff ff       	call   c0000570 <strlen>
c00088c4:	83 c4 10             	add    esp,0x10
c00088c7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00088cb:	75 2d                	jne    c00088fa <KeCreateSymlink(char const*, char const*)+0x11b>
c00088cd:	85 f6                	test   esi,esi
c00088cf:	75 29                	jne    c00088fa <KeCreateSymlink(char const*, char const*)+0x11b>
c00088d1:	50                   	push   eax
c00088d2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00088d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00088da:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00088de:	e8 06 fa ff ff       	call   c00082e9 <KeRegisterSymlink(char const*, unsigned long long)>
c00088e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00088e6:	e8 5b 06 00 00       	call   c0008f46 <File::close()>
c00088eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00088ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00088f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00088f3:	83 c4 10             	add    esp,0x10
c00088f6:	31 c0                	xor    eax,eax
c00088f8:	eb 19                	jmp    c0008913 <KeCreateSymlink(char const*, char const*)+0x134>
c00088fa:	83 ec 0c             	sub    esp,0xc
c00088fd:	53                   	push   ebx
c00088fe:	e8 43 06 00 00       	call   c0008f46 <File::close()>
c0008903:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008905:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008908:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000890b:	83 c4 10             	add    esp,0x10
c000890e:	b8 01 00 00 00       	mov    eax,0x1
c0008913:	83 c4 2c             	add    esp,0x2c
c0008916:	5b                   	pop    ebx
c0008917:	5e                   	pop    esi
c0008918:	5f                   	pop    edi
c0008919:	5d                   	pop    ebp
c000891a:	c3                   	ret    
c000891b:	90                   	nop

c000891c <File::read(unsigned long long, void*, int*)>:
c000891c:	53                   	push   ebx
c000891d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008921:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008925:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000892c:	83 f8 19             	cmp    eax,0x19
c000892f:	77 35                	ja     c0008966 <File::read(unsigned long long, void*, int*)+0x4a>
c0008931:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0008938:	85 c0                	test   eax,eax
c000893a:	74 2a                	je     c0008966 <File::read(unsigned long long, void*, int*)+0x4a>
c000893c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008942:	85 c0                	test   eax,eax
c0008944:	74 20                	je     c0008966 <File::read(unsigned long long, void*, int*)+0x4a>
c0008946:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000894a:	74 21                	je     c000896d <File::read(unsigned long long, void*, int*)+0x51>
c000894c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000894e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008952:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0008958:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000895c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008960:	5b                   	pop    ebx
c0008961:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0008964:	ff e0                	jmp    eax
c0008966:	b8 0b 00 00 00       	mov    eax,0xb
c000896b:	eb 05                	jmp    c0008972 <File::read(unsigned long long, void*, int*)+0x56>
c000896d:	b8 05 00 00 00       	mov    eax,0x5
c0008972:	5b                   	pop    ebx
c0008973:	c3                   	ret    

c0008974 <File::write(unsigned long long, void*, int*)>:
c0008974:	53                   	push   ebx
c0008975:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008979:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000897d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0008984:	83 f8 19             	cmp    eax,0x19
c0008987:	77 35                	ja     c00089be <File::write(unsigned long long, void*, int*)+0x4a>
c0008989:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0008990:	85 c0                	test   eax,eax
c0008992:	74 2a                	je     c00089be <File::write(unsigned long long, void*, int*)+0x4a>
c0008994:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000899a:	85 c0                	test   eax,eax
c000899c:	74 20                	je     c00089be <File::write(unsigned long long, void*, int*)+0x4a>
c000899e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00089a2:	74 21                	je     c00089c5 <File::write(unsigned long long, void*, int*)+0x51>
c00089a4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00089a6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00089aa:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00089b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00089b8:	5b                   	pop    ebx
c00089b9:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00089bc:	ff e0                	jmp    eax
c00089be:	b8 0b 00 00 00       	mov    eax,0xb
c00089c3:	eb 05                	jmp    c00089ca <File::write(unsigned long long, void*, int*)+0x56>
c00089c5:	b8 05 00 00 00       	mov    eax,0x5
c00089ca:	5b                   	pop    ebx
c00089cb:	c3                   	ret    

c00089cc <Directory::read(unsigned long long, void*, int*)>:
c00089cc:	53                   	push   ebx
c00089cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00089d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00089d5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00089dc:	83 f8 19             	cmp    eax,0x19
c00089df:	77 35                	ja     c0008a16 <Directory::read(unsigned long long, void*, int*)+0x4a>
c00089e1:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c00089e8:	85 c0                	test   eax,eax
c00089ea:	74 2a                	je     c0008a16 <Directory::read(unsigned long long, void*, int*)+0x4a>
c00089ec:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00089f2:	85 c0                	test   eax,eax
c00089f4:	74 20                	je     c0008a16 <Directory::read(unsigned long long, void*, int*)+0x4a>
c00089f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00089fa:	74 21                	je     c0008a1d <Directory::read(unsigned long long, void*, int*)+0x51>
c00089fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00089fe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a02:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0008a08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008a10:	5b                   	pop    ebx
c0008a11:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0008a14:	ff e0                	jmp    eax
c0008a16:	b8 0b 00 00 00       	mov    eax,0xb
c0008a1b:	eb 05                	jmp    c0008a22 <Directory::read(unsigned long long, void*, int*)+0x56>
c0008a1d:	b8 05 00 00 00       	mov    eax,0x5
c0008a22:	5b                   	pop    ebx
c0008a23:	c3                   	ret    

c0008a24 <Directory::write(unsigned long long, void*, int*)>:
c0008a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008a28:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0008a2f:	b8 0b 00 00 00       	mov    eax,0xb
c0008a34:	83 fa 19             	cmp    edx,0x19
c0008a37:	77 18                	ja     c0008a51 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0008a39:	8b 14 95 e0 6a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9520]
c0008a40:	85 d2                	test   edx,edx
c0008a42:	74 0d                	je     c0008a51 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0008a44:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0008a4b:	19 c0                	sbb    eax,eax
c0008a4d:	83 e0 0a             	and    eax,0xa
c0008a50:	40                   	inc    eax
c0008a51:	c3                   	ret    

c0008a52 <File::isAtty()>:
c0008a52:	31 c0                	xor    eax,eax
c0008a54:	c3                   	ret    
c0008a55:	90                   	nop

c0008a56 <Directory::isAtty()>:
c0008a56:	31 c0                	xor    eax,eax
c0008a58:	c3                   	ret    
c0008a59:	90                   	nop

c0008a5a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0008a5a:	b8 0a 00 00 00       	mov    eax,0xa
c0008a5f:	c3                   	ret    

c0008a60 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0008a60:	b8 0a 00 00 00       	mov    eax,0xa
c0008a65:	c3                   	ret    

c0008a66 <Filesystem::allocateSwapfile(char const*, int)>:
c0008a66:	31 c0                	xor    eax,eax
c0008a68:	31 d2                	xor    edx,edx
c0008a6a:	c3                   	ret    
c0008a6b:	90                   	nop

c0008a6c <File::~File()>:
c0008a6c:	83 ec 0c             	sub    esp,0xc
c0008a6f:	ba 70 b4 02 c0       	mov    edx,0xc002b470
c0008a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a78:	89 10                	mov    DWORD PTR [eax],edx
c0008a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a7e:	83 ec 0c             	sub    esp,0xc
c0008a81:	50                   	push   eax
c0008a82:	e8 07 b3 00 00       	call   c0013d8e <UnixFile::~UnixFile()>
c0008a87:	83 c4 10             	add    esp,0x10
c0008a8a:	90                   	nop
c0008a8b:	83 c4 0c             	add    esp,0xc
c0008a8e:	c3                   	ret    
c0008a8f:	90                   	nop

c0008a90 <File::~File()>:
c0008a90:	83 ec 0c             	sub    esp,0xc
c0008a93:	83 ec 0c             	sub    esp,0xc
c0008a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a9a:	e8 cd ff ff ff       	call   c0008a6c <File::~File()>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	83 ec 08             	sub    esp,0x8
c0008aa5:	68 14 01 00 00       	push   0x114
c0008aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aae:	e8 65 56 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c0008ab3:	83 c4 10             	add    esp,0x10
c0008ab6:	83 c4 0c             	add    esp,0xc
c0008ab9:	c3                   	ret    

c0008aba <Directory::~Directory()>:
c0008aba:	83 ec 0c             	sub    esp,0xc
c0008abd:	ba 8c b4 02 c0       	mov    edx,0xc002b48c
c0008ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ac6:	89 10                	mov    DWORD PTR [eax],edx
c0008ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008acc:	83 ec 0c             	sub    esp,0xc
c0008acf:	50                   	push   eax
c0008ad0:	e8 b9 b2 00 00       	call   c0013d8e <UnixFile::~UnixFile()>
c0008ad5:	83 c4 10             	add    esp,0x10
c0008ad8:	90                   	nop
c0008ad9:	83 c4 0c             	add    esp,0xc
c0008adc:	c3                   	ret    
c0008add:	90                   	nop

c0008ade <Directory::~Directory()>:
c0008ade:	83 ec 0c             	sub    esp,0xc
c0008ae1:	83 ec 0c             	sub    esp,0xc
c0008ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ae8:	e8 cd ff ff ff       	call   c0008aba <Directory::~Directory()>
c0008aed:	83 c4 10             	add    esp,0x10
c0008af0:	83 ec 08             	sub    esp,0x8
c0008af3:	68 14 01 00 00       	push   0x114
c0008af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008afc:	e8 17 56 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	83 c4 0c             	add    esp,0xc
c0008b07:	c3                   	ret    

c0008b08 <Filesystem::Filesystem()>:
c0008b08:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c0008b0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b11:	89 10                	mov    DWORD PTR [eax],edx
c0008b13:	8b 15 04 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036304
c0008b19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b24:	a3 04 63 03 c0       	mov    ds:0xc0036304,eax
c0008b29:	90                   	nop
c0008b2a:	c3                   	ret    
c0008b2b:	90                   	nop

c0008b2c <Filesystem::~Filesystem()>:
c0008b2c:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c0008b31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b35:	89 10                	mov    DWORD PTR [eax],edx
c0008b37:	90                   	nop
c0008b38:	c3                   	ret    
c0008b39:	90                   	nop

c0008b3a <Filesystem::~Filesystem()>:
c0008b3a:	83 ec 0c             	sub    esp,0xc
c0008b3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008b41:	e8 e6 ff ff ff       	call   c0008b2c <Filesystem::~Filesystem()>
c0008b46:	83 c4 04             	add    esp,0x4
c0008b49:	83 ec 08             	sub    esp,0x8
c0008b4c:	6a 08                	push   0x8
c0008b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b52:	e8 c1 55 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c0008b57:	83 c4 10             	add    esp,0x10
c0008b5a:	83 c4 0c             	add    esp,0xc
c0008b5d:	c3                   	ret    

c0008b5e <Fs::getcwd(Process*, char*, int)>:
c0008b5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008b62:	31 c0                	xor    eax,eax
c0008b64:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0008b67:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0008b6b:	7d 15                	jge    c0008b82 <Fs::getcwd(Process*, char*, int)+0x24>
c0008b6d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0008b71:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0008b78:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0008b7b:	84 c9                	test   cl,cl
c0008b7d:	74 06                	je     c0008b85 <Fs::getcwd(Process*, char*, int)+0x27>
c0008b7f:	40                   	inc    eax
c0008b80:	eb e2                	jmp    c0008b64 <Fs::getcwd(Process*, char*, int)+0x6>
c0008b82:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0008b85:	31 c0                	xor    eax,eax
c0008b87:	c3                   	ret    

c0008b88 <Fs::initVFS()>:
c0008b88:	83 ec 18             	sub    esp,0x18
c0008b8b:	6a 08                	push   0x8
c0008b8d:	e8 7d 7a 00 00       	call   c001060f <malloc>
c0008b92:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b95:	e8 ce 6a 01 00       	call   c001f668 <FAT::FAT()>
c0008b9a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0008ba1:	e8 69 7a 00 00       	call   c001060f <malloc>
c0008ba6:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ba9:	e8 e6 79 01 00       	call   c0020594 <ISO9660::ISO9660()>
c0008bae:	83 c4 1c             	add    esp,0x1c
c0008bb1:	c3                   	ret    

c0008bb2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0008bb2:	55                   	push   ebp
c0008bb3:	57                   	push   edi
c0008bb4:	56                   	push   esi
c0008bb5:	53                   	push   ebx
c0008bb6:	81 ec 10 04 00 00    	sub    esp,0x410
c0008bbc:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0008bc3:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0008bca:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0008bd2:	68 00 04 00 00       	push   0x400
c0008bd7:	6a 00                	push   0x0
c0008bd9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0008bdd:	57                   	push   edi
c0008bde:	e8 0d 79 ff ff       	call   c00004f0 <memset>
c0008be3:	83 c4 10             	add    esp,0x10
c0008be6:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0008bea:	75 0b                	jne    c0008bf7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0008bec:	50                   	push   eax
c0008bed:	50                   	push   eax
c0008bee:	55                   	push   ebp
c0008bef:	57                   	push   edi
c0008bf0:	e8 4b 7a ff ff       	call   c0000640 <strcpy>
c0008bf5:	eb 51                	jmp    c0008c48 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0008bf7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0008bfb:	83 f8 5c             	cmp    eax,0x5c
c0008bfe:	74 05                	je     c0008c05 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0008c00:	83 f8 2f             	cmp    eax,0x2f
c0008c03:	75 1e                	jne    c0008c23 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0008c05:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0008c0c:	8a 00                	mov    al,BYTE PTR [eax]
c0008c0e:	3c 60                	cmp    al,0x60
c0008c10:	7e 03                	jle    c0008c15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0008c12:	83 e8 20             	sub    eax,0x20
c0008c15:	88 04 24             	mov    BYTE PTR [esp],al
c0008c18:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0008c1f:	50                   	push   eax
c0008c20:	50                   	push   eax
c0008c21:	eb 1e                	jmp    c0008c41 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0008c23:	50                   	push   eax
c0008c24:	50                   	push   eax
c0008c25:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0008c2c:	57                   	push   edi
c0008c2d:	e8 0e 7a ff ff       	call   c0000640 <strcpy>
c0008c32:	58                   	pop    eax
c0008c33:	5a                   	pop    edx
c0008c34:	68 86 cd 02 c0       	push   0xc002cd86
c0008c39:	57                   	push   edi
c0008c3a:	e8 01 7c ff ff       	call   c0000840 <strcat>
c0008c3f:	59                   	pop    ecx
c0008c40:	58                   	pop    eax
c0008c41:	55                   	push   ebp
c0008c42:	57                   	push   edi
c0008c43:	e8 f8 7b ff ff       	call   c0000840 <strcat>
c0008c48:	83 c4 10             	add    esp,0x10
c0008c4b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0008c4e:	3c 60                	cmp    al,0x60
c0008c50:	7e 03                	jle    c0008c55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0008c52:	83 e8 20             	sub    eax,0x20
c0008c55:	88 04 24             	mov    BYTE PTR [esp],al
c0008c58:	88 06                	mov    BYTE PTR [esi],al
c0008c5a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0008c61:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0008c67:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0008c6b:	bf 03 00 00 00       	mov    edi,0x3
c0008c70:	b8 03 00 00 00       	mov    eax,0x3
c0008c75:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0008c79:	89 e9                	mov    ecx,ebp
c0008c7b:	85 ed                	test   ebp,ebp
c0008c7d:	0f 84 97 00 00 00    	je     c0008d1a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0008c83:	8d 57 01             	lea    edx,[edi+0x1]
c0008c86:	83 fd 5c             	cmp    ebp,0x5c
c0008c89:	74 05                	je     c0008c90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0008c8b:	83 fd 2f             	cmp    ebp,0x2f
c0008c8e:	75 12                	jne    c0008ca2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008c90:	89 c5                	mov    ebp,eax
c0008c92:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0008c97:	74 09                	je     c0008ca2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008c99:	40                   	inc    eax
c0008c9a:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0008c9e:	89 d7                	mov    edi,edx
c0008ca0:	eb d3                	jmp    c0008c75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0008ca2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0008ca7:	0f be e9             	movsx  ebp,cl
c0008caa:	75 5e                	jne    c0008d0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0008cac:	83 fd 2e             	cmp    ebp,0x2e
c0008caf:	75 59                	jne    c0008d0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0008cb1:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0008cb5:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0008cba:	74 18                	je     c0008cd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0008cbc:	83 fd 2e             	cmp    ebp,0x2e
c0008cbf:	74 53                	je     c0008d14 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0008cc1:	89 fa                	mov    edx,edi
c0008cc3:	42                   	inc    edx
c0008cc4:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0008cc8:	83 f9 2f             	cmp    ecx,0x2f
c0008ccb:	74 f6                	je     c0008cc3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0008ccd:	83 f9 5c             	cmp    ecx,0x5c
c0008cd0:	74 f1                	je     c0008cc3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0008cd2:	eb ca                	jmp    c0008c9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0008cd4:	83 fd 2e             	cmp    ebp,0x2e
c0008cd7:	74 3b                	je     c0008d14 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0008cd9:	83 f8 03             	cmp    eax,0x3
c0008cdc:	74 c0                	je     c0008c9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0008cde:	42                   	inc    edx
c0008cdf:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0008ce3:	83 f9 5c             	cmp    ecx,0x5c
c0008ce6:	74 f6                	je     c0008cde <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0008ce8:	83 f9 2f             	cmp    ecx,0x2f
c0008ceb:	74 f1                	je     c0008cde <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0008ced:	48                   	dec    eax
c0008cee:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0008cf2:	75 06                	jne    c0008cfa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0008cf4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0008cf8:	eb f3                	jmp    c0008ced <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0008cfa:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0008cfe:	74 07                	je     c0008d07 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0008d00:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0008d04:	48                   	dec    eax
c0008d05:	eb f3                	jmp    c0008cfa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0008d07:	40                   	inc    eax
c0008d08:	eb 94                	jmp    c0008c9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0008d0a:	83 fd 5c             	cmp    ebp,0x5c
c0008d0d:	74 8f                	je     c0008c9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0008d0f:	83 fd 2f             	cmp    ebp,0x2f
c0008d12:	74 8a                	je     c0008c9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0008d14:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0008d17:	40                   	inc    eax
c0008d18:	eb 84                	jmp    c0008c9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0008d1a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0008d1e:	83 ec 0c             	sub    esp,0xc
c0008d21:	56                   	push   esi
c0008d22:	e8 49 78 ff ff       	call   c0000570 <strlen>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0008d2f:	74 17                	je     c0008d48 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008d31:	83 ec 0c             	sub    esp,0xc
c0008d34:	56                   	push   esi
c0008d35:	e8 36 78 ff ff       	call   c0000570 <strlen>
c0008d3a:	83 c4 10             	add    esp,0x10
c0008d3d:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0008d42:	74 04                	je     c0008d48 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008d44:	31 ff                	xor    edi,edi
c0008d46:	eb 5c                	jmp    c0008da4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008d48:	83 ec 0c             	sub    esp,0xc
c0008d4b:	56                   	push   esi
c0008d4c:	e8 1f 78 ff ff       	call   c0000570 <strlen>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0008d59:	74 e9                	je     c0008d44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0008d5b:	83 ec 0c             	sub    esp,0xc
c0008d5e:	56                   	push   esi
c0008d5f:	e8 0c 78 ff ff       	call   c0000570 <strlen>
c0008d64:	83 c4 10             	add    esp,0x10
c0008d67:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0008d6c:	eb b0                	jmp    c0008d1e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0008d6e:	52                   	push   edx
c0008d6f:	52                   	push   edx
c0008d70:	56                   	push   esi
c0008d71:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0008d75:	55                   	push   ebp
c0008d76:	e8 c5 78 ff ff       	call   c0000640 <strcpy>
c0008d7b:	59                   	pop    ecx
c0008d7c:	58                   	pop    eax
c0008d7d:	56                   	push   esi
c0008d7e:	55                   	push   ebp
c0008d7f:	e8 b4 f8 ff ff       	call   c0008638 <KeDereferenceSymlink(char const*, char*)>
c0008d84:	83 c4 10             	add    esp,0x10
c0008d87:	48                   	dec    eax
c0008d88:	75 37                	jne    c0008dc1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008d8a:	50                   	push   eax
c0008d8b:	56                   	push   esi
c0008d8c:	55                   	push   ebp
c0008d8d:	68 a3 b3 02 c0       	push   0xc002b3a3
c0008d92:	e8 e5 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008d97:	83 c4 10             	add    esp,0x10
c0008d9a:	8d 47 01             	lea    eax,[edi+0x1]
c0008d9d:	83 ff 14             	cmp    edi,0x14
c0008da0:	74 08                	je     c0008daa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c0008da2:	89 c7                	mov    edi,eax
c0008da4:	85 db                	test   ebx,ebx
c0008da6:	75 c6                	jne    c0008d6e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008da8:	eb 17                	jmp    c0008dc1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008daa:	83 ec 0c             	sub    esp,0xc
c0008dad:	bf 15 00 00 00       	mov    edi,0x15
c0008db2:	68 be b3 02 c0       	push   0xc002b3be
c0008db7:	e8 a8 7c 00 00       	call   c0010a64 <KePanic(char const*)>
c0008dbc:	83 c4 10             	add    esp,0x10
c0008dbf:	eb e3                	jmp    c0008da4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008dc1:	81 c4 0c 04 00 00    	add    esp,0x40c
c0008dc7:	5b                   	pop    ebx
c0008dc8:	5e                   	pop    esi
c0008dc9:	5f                   	pop    edi
c0008dca:	5d                   	pop    ebp
c0008dcb:	c3                   	ret    

c0008dcc <File::File(char const*, Process*, bool)>:
c0008dcc:	83 ec 1c             	sub    esp,0x1c
c0008dcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008dd3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	83 ec 08             	sub    esp,0x8
c0008dde:	6a 00                	push   0x0
c0008de0:	50                   	push   eax
c0008de1:	e8 c2 ad 00 00       	call   c0013ba8 <UnixFile::UnixFile(int)>
c0008de6:	83 c4 10             	add    esp,0x10
c0008de9:	ba 70 b4 02 c0       	mov    edx,0xc002b470
c0008dee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008df2:	89 10                	mov    DWORD PTR [eax],edx
c0008df4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008df9:	85 c0                	test   eax,eax
c0008dfb:	74 0f                	je     c0008e0c <File::File(char const*, Process*, bool)+0x40>
c0008dfd:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c0008e02:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008e06:	74 04                	je     c0008e0c <File::File(char const*, Process*, bool)+0x40>
c0008e08:	b0 01                	mov    al,0x1
c0008e0a:	eb 02                	jmp    c0008e0e <File::File(char const*, Process*, bool)+0x42>
c0008e0c:	b0 00                	mov    al,0x0
c0008e0e:	0f b6 c0             	movzx  eax,al
c0008e11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008e15:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008e1b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008e1f:	83 c2 0d             	add    edx,0xd
c0008e22:	50                   	push   eax
c0008e23:	51                   	push   ecx
c0008e24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008e28:	52                   	push   edx
c0008e29:	e8 84 fd ff ff       	call   c0008bb2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008e2e:	83 c4 10             	add    esp,0x10
c0008e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008e3c:	83 c2 0d             	add    edx,0xd
c0008e3f:	83 ec 04             	sub    esp,0x4
c0008e42:	50                   	push   eax
c0008e43:	52                   	push   edx
c0008e44:	68 e4 b3 02 c0       	push   0xc002b3e4
c0008e49:	e8 2e e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e4e:	83 c4 10             	add    esp,0x10
c0008e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e55:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008e58:	83 e8 41             	sub    eax,0x41
c0008e5b:	88 c2                	mov    dl,al
c0008e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e61:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008e67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e6b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008e6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e73:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008e79:	0f b6 c0             	movzx  eax,al
c0008e7c:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0008e83:	85 c0                	test   eax,eax
c0008e85:	74 3e                	je     c0008ec5 <File::File(char const*, Process*, bool)+0xf9>
c0008e87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e8b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008e91:	0f b6 c0             	movzx  eax,al
c0008e94:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0008e9b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008ea1:	85 c0                	test   eax,eax
c0008ea3:	75 20                	jne    c0008ec5 <File::File(char const*, Process*, bool)+0xf9>
c0008ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ea9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008eaf:	0f b6 c0             	movzx  eax,al
c0008eb2:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0008eb9:	83 ec 0c             	sub    esp,0xc
c0008ebc:	50                   	push   eax
c0008ebd:	e8 2e 28 00 00       	call   c000b6f0 <LogicalDisk::mount()>
c0008ec2:	83 c4 10             	add    esp,0x10
c0008ec5:	90                   	nop
c0008ec6:	83 c4 1c             	add    esp,0x1c
c0008ec9:	c3                   	ret    

c0008eca <File::File(char const*, Process*)>:
c0008eca:	83 ec 0c             	sub    esp,0xc
c0008ecd:	6a 01                	push   0x1
c0008ecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ed3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ed7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008edb:	e8 ec fe ff ff       	call   c0008dcc <File::File(char const*, Process*, bool)>
c0008ee0:	83 c4 10             	add    esp,0x10
c0008ee3:	90                   	nop
c0008ee4:	83 c4 0c             	add    esp,0xc
c0008ee7:	c3                   	ret    

c0008ee8 <File::open(FileOpenMode)>:
c0008ee8:	53                   	push   ebx
c0008ee9:	b8 0b 00 00 00       	mov    eax,0xb
c0008eee:	83 ec 08             	sub    esp,0x8
c0008ef1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ef5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008efc:	83 fa 19             	cmp    edx,0x19
c0008eff:	77 40                	ja     c0008f41 <File::open(FileOpenMode)+0x59>
c0008f01:	8b 14 95 e0 6a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9520]
c0008f08:	85 d2                	test   edx,edx
c0008f0a:	74 35                	je     c0008f41 <File::open(FileOpenMode)+0x59>
c0008f0c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008f12:	85 d2                	test   edx,edx
c0008f14:	74 2b                	je     c0008f41 <File::open(FileOpenMode)+0x59>
c0008f16:	b8 06 00 00 00       	mov    eax,0x6
c0008f1b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008f1f:	75 20                	jne    c0008f41 <File::open(FileOpenMode)+0x59>
c0008f21:	8b 02                	mov    eax,DWORD PTR [edx]
c0008f23:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008f29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2d:	51                   	push   ecx
c0008f2e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008f31:	51                   	push   ecx
c0008f32:	52                   	push   edx
c0008f33:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	85 c0                	test   eax,eax
c0008f3b:	75 04                	jne    c0008f41 <File::open(FileOpenMode)+0x59>
c0008f3d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008f41:	83 c4 08             	add    esp,0x8
c0008f44:	5b                   	pop    ebx
c0008f45:	c3                   	ret    

c0008f46 <File::close()>:
c0008f46:	53                   	push   ebx
c0008f47:	b8 0b 00 00 00       	mov    eax,0xb
c0008f4c:	83 ec 08             	sub    esp,0x8
c0008f4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f53:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008f5a:	83 f9 19             	cmp    ecx,0x19
c0008f5d:	77 41                	ja     c0008fa0 <File::close()+0x5a>
c0008f5f:	8b 1c 8d e0 6a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc9520]
c0008f66:	85 db                	test   ebx,ebx
c0008f68:	74 36                	je     c0008fa0 <File::close()+0x5a>
c0008f6a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008f71:	74 2d                	je     c0008fa0 <File::close()+0x5a>
c0008f73:	b8 05 00 00 00       	mov    eax,0x5
c0008f78:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008f7c:	74 22                	je     c0008fa0 <File::close()+0x5a>
c0008f7e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008f82:	8b 04 8d e0 6a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc9520]
c0008f89:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008f8f:	53                   	push   ebx
c0008f90:	53                   	push   ebx
c0008f91:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008f93:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008f99:	50                   	push   eax
c0008f9a:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	83 c4 08             	add    esp,0x8
c0008fa3:	5b                   	pop    ebx
c0008fa4:	c3                   	ret    
c0008fa5:	90                   	nop

c0008fa6 <File::seek(unsigned long long)>:
c0008fa6:	56                   	push   esi
c0008fa7:	53                   	push   ebx
c0008fa8:	b8 0b 00 00 00       	mov    eax,0xb
c0008fad:	51                   	push   ecx
c0008fae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008fb2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008fb6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008fbd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008fc1:	83 fa 19             	cmp    edx,0x19
c0008fc4:	77 31                	ja     c0008ff7 <File::seek(unsigned long long)+0x51>
c0008fc6:	8b 14 95 e0 6a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9520]
c0008fcd:	85 d2                	test   edx,edx
c0008fcf:	74 26                	je     c0008ff7 <File::seek(unsigned long long)+0x51>
c0008fd1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008fd7:	85 d2                	test   edx,edx
c0008fd9:	74 1c                	je     c0008ff7 <File::seek(unsigned long long)+0x51>
c0008fdb:	b8 05 00 00 00       	mov    eax,0x5
c0008fe0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008fe4:	74 11                	je     c0008ff7 <File::seek(unsigned long long)+0x51>
c0008fe6:	8b 02                	mov    eax,DWORD PTR [edx]
c0008fe8:	53                   	push   ebx
c0008fe9:	51                   	push   ecx
c0008fea:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008ff0:	52                   	push   edx
c0008ff1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008ff4:	83 c4 10             	add    esp,0x10
c0008ff7:	5a                   	pop    edx
c0008ff8:	5b                   	pop    ebx
c0008ff9:	5e                   	pop    esi
c0008ffa:	c3                   	ret    
c0008ffb:	90                   	nop

c0008ffc <File::truncate(unsigned long long)>:
c0008ffc:	56                   	push   esi
c0008ffd:	53                   	push   ebx
c0008ffe:	b8 0b 00 00 00       	mov    eax,0xb
c0009003:	51                   	push   ecx
c0009004:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009008:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000900c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0009013:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009017:	83 fa 19             	cmp    edx,0x19
c000901a:	77 31                	ja     c000904d <File::truncate(unsigned long long)+0x51>
c000901c:	8b 14 95 e0 6a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9520]
c0009023:	85 d2                	test   edx,edx
c0009025:	74 26                	je     c000904d <File::truncate(unsigned long long)+0x51>
c0009027:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000902d:	85 d2                	test   edx,edx
c000902f:	74 1c                	je     c000904d <File::truncate(unsigned long long)+0x51>
c0009031:	b8 05 00 00 00       	mov    eax,0x5
c0009036:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000903a:	74 11                	je     c000904d <File::truncate(unsigned long long)+0x51>
c000903c:	8b 02                	mov    eax,DWORD PTR [edx]
c000903e:	53                   	push   ebx
c000903f:	51                   	push   ecx
c0009040:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0009046:	52                   	push   edx
c0009047:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000904a:	83 c4 10             	add    esp,0x10
c000904d:	5a                   	pop    edx
c000904e:	5b                   	pop    ebx
c000904f:	5e                   	pop    esi
c0009050:	c3                   	ret    
c0009051:	90                   	nop

c0009052 <File::tell(unsigned long long*)>:
c0009052:	83 ec 0c             	sub    esp,0xc
c0009055:	b8 0b 00 00 00       	mov    eax,0xb
c000905a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000905e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0009065:	83 fa 19             	cmp    edx,0x19
c0009068:	77 34                	ja     c000909e <File::tell(unsigned long long*)+0x4c>
c000906a:	8b 14 95 e0 6a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9520]
c0009071:	85 d2                	test   edx,edx
c0009073:	74 29                	je     c000909e <File::tell(unsigned long long*)+0x4c>
c0009075:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000907b:	85 d2                	test   edx,edx
c000907d:	74 1f                	je     c000909e <File::tell(unsigned long long*)+0x4c>
c000907f:	b8 05 00 00 00       	mov    eax,0x5
c0009084:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0009088:	74 14                	je     c000909e <File::tell(unsigned long long*)+0x4c>
c000908a:	50                   	push   eax
c000908b:	8b 02                	mov    eax,DWORD PTR [edx]
c000908d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009091:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0009097:	52                   	push   edx
c0009098:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000909b:	83 c4 10             	add    esp,0x10
c000909e:	83 c4 0c             	add    esp,0xc
c00090a1:	c3                   	ret    

c00090a2 <File::rewind()>:
c00090a2:	83 ec 10             	sub    esp,0x10
c00090a5:	6a 00                	push   0x0
c00090a7:	6a 00                	push   0x0
c00090a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ad:	e8 f4 fe ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c00090b2:	83 c4 1c             	add    esp,0x1c
c00090b5:	c3                   	ret    

c00090b6 <File::unlink()>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	b8 0b 00 00 00       	mov    eax,0xb
c00090be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00090c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00090c9:	83 f9 19             	cmp    ecx,0x19
c00090cc:	77 2f                	ja     c00090fd <File::unlink()+0x47>
c00090ce:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c00090d5:	85 c9                	test   ecx,ecx
c00090d7:	74 24                	je     c00090fd <File::unlink()+0x47>
c00090d9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00090df:	85 c9                	test   ecx,ecx
c00090e1:	74 1a                	je     c00090fd <File::unlink()+0x47>
c00090e3:	b8 06 00 00 00       	mov    eax,0x6
c00090e8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00090ec:	75 0f                	jne    c00090fd <File::unlink()+0x47>
c00090ee:	83 c2 0d             	add    edx,0xd
c00090f1:	50                   	push   eax
c00090f2:	50                   	push   eax
c00090f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00090f5:	52                   	push   edx
c00090f6:	51                   	push   ecx
c00090f7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00090fa:	83 c4 10             	add    esp,0x10
c00090fd:	83 c4 0c             	add    esp,0xc
c0009100:	c3                   	ret    
c0009101:	90                   	nop

c0009102 <File::rename(char const*)>:
c0009102:	83 ec 0c             	sub    esp,0xc
c0009105:	b8 0b 00 00 00       	mov    eax,0xb
c000910a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000910e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009115:	83 f9 19             	cmp    ecx,0x19
c0009118:	77 32                	ja     c000914c <File::rename(char const*)+0x4a>
c000911a:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c0009121:	85 c9                	test   ecx,ecx
c0009123:	74 27                	je     c000914c <File::rename(char const*)+0x4a>
c0009125:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000912b:	85 c9                	test   ecx,ecx
c000912d:	74 1d                	je     c000914c <File::rename(char const*)+0x4a>
c000912f:	b8 06 00 00 00       	mov    eax,0x6
c0009134:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009138:	75 12                	jne    c000914c <File::rename(char const*)+0x4a>
c000913a:	83 c2 0d             	add    edx,0xd
c000913d:	50                   	push   eax
c000913e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009140:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009144:	52                   	push   edx
c0009145:	51                   	push   ecx
c0009146:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0009149:	83 c4 10             	add    esp,0x10
c000914c:	83 c4 0c             	add    esp,0xc
c000914f:	c3                   	ret    

c0009150 <File::chfatattr(unsigned char, unsigned char)>:
c0009150:	57                   	push   edi
c0009151:	b8 0b 00 00 00       	mov    eax,0xb
c0009156:	56                   	push   esi
c0009157:	53                   	push   ebx
c0009158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000915c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009160:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009167:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000916b:	83 f9 19             	cmp    ecx,0x19
c000916e:	77 37                	ja     c00091a7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0009170:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c0009177:	85 c9                	test   ecx,ecx
c0009179:	74 2c                	je     c00091a7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000917b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009181:	85 c9                	test   ecx,ecx
c0009183:	74 22                	je     c00091a7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0009185:	b8 06 00 00 00       	mov    eax,0x6
c000918a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000918e:	75 17                	jne    c00091a7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0009190:	8b 39                	mov    edi,DWORD PTR [ecx]
c0009192:	89 f0                	mov    eax,esi
c0009194:	83 c2 0d             	add    edx,0xd
c0009197:	0f b6 f0             	movzx  esi,al
c000919a:	0f b6 db             	movzx  ebx,bl
c000919d:	56                   	push   esi
c000919e:	53                   	push   ebx
c000919f:	52                   	push   edx
c00091a0:	51                   	push   ecx
c00091a1:	ff 57 38             	call   DWORD PTR [edi+0x38]
c00091a4:	83 c4 10             	add    esp,0x10
c00091a7:	5b                   	pop    ebx
c00091a8:	5e                   	pop    esi
c00091a9:	5f                   	pop    edi
c00091aa:	c3                   	ret    
c00091ab:	90                   	nop

c00091ac <File::exists()>:
c00091ac:	83 ec 0c             	sub    esp,0xc
c00091af:	31 c0                	xor    eax,eax
c00091b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00091b5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00091bc:	83 f9 19             	cmp    ecx,0x19
c00091bf:	77 24                	ja     c00091e5 <File::exists()+0x39>
c00091c1:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c00091c8:	85 c9                	test   ecx,ecx
c00091ca:	74 19                	je     c00091e5 <File::exists()+0x39>
c00091cc:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00091d2:	85 c9                	test   ecx,ecx
c00091d4:	74 0f                	je     c00091e5 <File::exists()+0x39>
c00091d6:	83 c2 0d             	add    edx,0xd
c00091d9:	50                   	push   eax
c00091da:	50                   	push   eax
c00091db:	8b 01                	mov    eax,DWORD PTR [ecx]
c00091dd:	52                   	push   edx
c00091de:	51                   	push   ecx
c00091df:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00091e2:	83 c4 10             	add    esp,0x10
c00091e5:	83 c4 0c             	add    esp,0xc
c00091e8:	c3                   	ret    
c00091e9:	90                   	nop

c00091ea <File::stat(unsigned long long*, bool*)>:
c00091ea:	56                   	push   esi
c00091eb:	53                   	push   ebx
c00091ec:	50                   	push   eax
c00091ed:	b8 0b 00 00 00       	mov    eax,0xb
c00091f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009201:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009205:	83 f9 19             	cmp    ecx,0x19
c0009208:	77 3d                	ja     c0009247 <File::stat(unsigned long long*, bool*)+0x5d>
c000920a:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c0009211:	85 c9                	test   ecx,ecx
c0009213:	74 32                	je     c0009247 <File::stat(unsigned long long*, bool*)+0x5d>
c0009215:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000921b:	85 c9                	test   ecx,ecx
c000921d:	74 28                	je     c0009247 <File::stat(unsigned long long*, bool*)+0x5d>
c000921f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009221:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009225:	74 13                	je     c000923a <File::stat(unsigned long long*, bool*)+0x50>
c0009227:	83 ec 04             	sub    esp,0x4
c000922a:	56                   	push   esi
c000922b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0009231:	51                   	push   ecx
c0009232:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0009235:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0009238:	eb 0a                	jmp    c0009244 <File::stat(unsigned long long*, bool*)+0x5a>
c000923a:	53                   	push   ebx
c000923b:	83 c2 0d             	add    edx,0xd
c000923e:	56                   	push   esi
c000923f:	52                   	push   edx
c0009240:	51                   	push   ecx
c0009241:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0009244:	83 c4 10             	add    esp,0x10
c0009247:	5a                   	pop    edx
c0009248:	5b                   	pop    ebx
c0009249:	5e                   	pop    esi
c000924a:	c3                   	ret    

c000924b <Fs::setcwd(Process*, char*)>:
c000924b:	55                   	push   ebp
c000924c:	57                   	push   edi
c000924d:	56                   	push   esi
c000924e:	53                   	push   ebx
c000924f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0009255:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000925c:	6a 00                	push   0x0
c000925e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0009264:	57                   	push   edi
c0009265:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000926c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0009270:	56                   	push   esi
c0009271:	e8 3c f9 ff ff       	call   c0008bb2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0009276:	89 34 24             	mov    DWORD PTR [esp],esi
c0009279:	e8 f2 72 ff ff       	call   c0000570 <strlen>
c000927e:	83 c4 10             	add    esp,0x10
c0009281:	83 f8 02             	cmp    eax,0x2
c0009284:	77 15                	ja     c000929b <Fs::setcwd(Process*, char*)+0x50>
c0009286:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000928b:	83 eb 41             	sub    ebx,0x41
c000928e:	8b 04 9d e0 6a 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc9520]
c0009295:	85 c0                	test   eax,eax
c0009297:	75 1c                	jne    c00092b5 <Fs::setcwd(Process*, char*)+0x6a>
c0009299:	eb 2f                	jmp    c00092ca <Fs::setcwd(Process*, char*)+0x7f>
c000929b:	83 ec 0c             	sub    esp,0xc
c000929e:	56                   	push   esi
c000929f:	e8 cc 72 ff ff       	call   c0000570 <strlen>
c00092a4:	83 c4 10             	add    esp,0x10
c00092a7:	83 f8 03             	cmp    eax,0x3
c00092aa:	75 57                	jne    c0009303 <Fs::setcwd(Process*, char*)+0xb8>
c00092ac:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00092b1:	75 50                	jne    c0009303 <Fs::setcwd(Process*, char*)+0xb8>
c00092b3:	eb d1                	jmp    c0009286 <Fs::setcwd(Process*, char*)+0x3b>
c00092b5:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c00092bc:	75 0c                	jne    c00092ca <Fs::setcwd(Process*, char*)+0x7f>
c00092be:	83 ec 0c             	sub    esp,0xc
c00092c1:	50                   	push   eax
c00092c2:	e8 29 24 00 00       	call   c000b6f0 <LogicalDisk::mount()>
c00092c7:	83 c4 10             	add    esp,0x10
c00092ca:	b8 03 00 00 00       	mov    eax,0x3
c00092cf:	83 fb 19             	cmp    ebx,0x19
c00092d2:	0f 87 c6 00 00 00    	ja     c000939e <Fs::setcwd(Process*, char*)+0x153>
c00092d8:	8b 14 9d e0 6a 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc9520]
c00092df:	b8 05 00 00 00       	mov    eax,0x5
c00092e4:	85 d2                	test   edx,edx
c00092e6:	0f 84 b2 00 00 00    	je     c000939e <Fs::setcwd(Process*, char*)+0x153>
c00092ec:	b8 06 00 00 00       	mov    eax,0x6
c00092f1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00092f8:	0f 85 92 00 00 00    	jne    c0009390 <Fs::setcwd(Process*, char*)+0x145>
c00092fe:	e9 9b 00 00 00       	jmp    c000939e <Fs::setcwd(Process*, char*)+0x153>
c0009303:	83 ec 0c             	sub    esp,0xc
c0009306:	68 14 01 00 00       	push   0x114
c000930b:	e8 ff 72 00 00       	call   c001060f <malloc>
c0009310:	83 c4 0c             	add    esp,0xc
c0009313:	89 c3                	mov    ebx,eax
c0009315:	55                   	push   ebp
c0009316:	56                   	push   esi
c0009317:	50                   	push   eax
c0009318:	e8 ad fb ff ff       	call   c0008eca <File::File(char const*, Process*)>
c000931d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0009322:	83 c4 0c             	add    esp,0xc
c0009325:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0009329:	50                   	push   eax
c000932a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000932e:	50                   	push   eax
c000932f:	53                   	push   ebx
c0009330:	e8 b5 fe ff ff       	call   c00091ea <File::stat(unsigned long long*, bool*)>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	83 f8 02             	cmp    eax,0x2
c000933b:	74 27                	je     c0009364 <Fs::setcwd(Process*, char*)+0x119>
c000933d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0009342:	75 1c                	jne    c0009360 <Fs::setcwd(Process*, char*)+0x115>
c0009344:	b8 02 00 00 00       	mov    eax,0x2
c0009349:	85 db                	test   ebx,ebx
c000934b:	74 51                	je     c000939e <Fs::setcwd(Process*, char*)+0x153>
c000934d:	83 ec 0c             	sub    esp,0xc
c0009350:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009352:	53                   	push   ebx
c0009353:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009356:	83 c4 10             	add    esp,0x10
c0009359:	b8 02 00 00 00       	mov    eax,0x2
c000935e:	eb 3e                	jmp    c000939e <Fs::setcwd(Process*, char*)+0x153>
c0009360:	85 c0                	test   eax,eax
c0009362:	74 1c                	je     c0009380 <Fs::setcwd(Process*, char*)+0x135>
c0009364:	b8 01 00 00 00       	mov    eax,0x1
c0009369:	85 db                	test   ebx,ebx
c000936b:	74 31                	je     c000939e <Fs::setcwd(Process*, char*)+0x153>
c000936d:	83 ec 0c             	sub    esp,0xc
c0009370:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009372:	53                   	push   ebx
c0009373:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009376:	83 c4 10             	add    esp,0x10
c0009379:	b8 01 00 00 00       	mov    eax,0x1
c000937e:	eb 1e                	jmp    c000939e <Fs::setcwd(Process*, char*)+0x153>
c0009380:	85 db                	test   ebx,ebx
c0009382:	74 0c                	je     c0009390 <Fs::setcwd(Process*, char*)+0x145>
c0009384:	83 ec 0c             	sub    esp,0xc
c0009387:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009389:	53                   	push   ebx
c000938a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000938d:	83 c4 10             	add    esp,0x10
c0009390:	50                   	push   eax
c0009391:	50                   	push   eax
c0009392:	56                   	push   esi
c0009393:	57                   	push   edi
c0009394:	e8 a7 72 ff ff       	call   c0000640 <strcpy>
c0009399:	83 c4 10             	add    esp,0x10
c000939c:	31 c0                	xor    eax,eax
c000939e:	81 c4 1c 02 00 00    	add    esp,0x21c
c00093a4:	5b                   	pop    ebx
c00093a5:	5e                   	pop    esi
c00093a6:	5f                   	pop    edi
c00093a7:	5d                   	pop    ebp
c00093a8:	c3                   	ret    
c00093a9:	90                   	nop

c00093aa <Directory::Directory(char const*, Process*)>:
c00093aa:	83 ec 0c             	sub    esp,0xc
c00093ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093b1:	83 ec 08             	sub    esp,0x8
c00093b4:	6a 00                	push   0x0
c00093b6:	50                   	push   eax
c00093b7:	e8 ec a7 00 00       	call   c0013ba8 <UnixFile::UnixFile(int)>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	ba 8c b4 02 c0       	mov    edx,0xc002b48c
c00093c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c8:	89 10                	mov    DWORD PTR [eax],edx
c00093ca:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c00093cf:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00093d3:	0f 95 c0             	setne  al
c00093d6:	0f b6 c0             	movzx  eax,al
c00093d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00093dd:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00093e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00093e7:	83 c2 0d             	add    edx,0xd
c00093ea:	50                   	push   eax
c00093eb:	51                   	push   ecx
c00093ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093f0:	52                   	push   edx
c00093f1:	e8 bc f7 ff ff       	call   c0008bb2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093fd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0009400:	83 e8 41             	sub    eax,0x41
c0009403:	88 c2                	mov    dl,al
c0009405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009409:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000940f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009413:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0009417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000941b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009421:	0f b6 c0             	movzx  eax,al
c0009424:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c000942b:	85 c0                	test   eax,eax
c000942d:	74 3e                	je     c000946d <Directory::Directory(char const*, Process*)+0xc3>
c000942f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009433:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009439:	0f b6 c0             	movzx  eax,al
c000943c:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0009443:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009449:	85 c0                	test   eax,eax
c000944b:	75 20                	jne    c000946d <Directory::Directory(char const*, Process*)+0xc3>
c000944d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009451:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009457:	0f b6 c0             	movzx  eax,al
c000945a:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0009461:	83 ec 0c             	sub    esp,0xc
c0009464:	50                   	push   eax
c0009465:	e8 86 22 00 00       	call   c000b6f0 <LogicalDisk::mount()>
c000946a:	83 c4 10             	add    esp,0x10
c000946d:	90                   	nop
c000946e:	83 c4 0c             	add    esp,0xc
c0009471:	c3                   	ret    

c0009472 <Directory::open()>:
c0009472:	53                   	push   ebx
c0009473:	b8 0b 00 00 00       	mov    eax,0xb
c0009478:	83 ec 08             	sub    esp,0x8
c000947b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000947f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0009486:	83 fa 19             	cmp    edx,0x19
c0009489:	77 3d                	ja     c00094c8 <Directory::open()+0x56>
c000948b:	8b 14 95 e0 6a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9520]
c0009492:	85 d2                	test   edx,edx
c0009494:	74 32                	je     c00094c8 <Directory::open()+0x56>
c0009496:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000949c:	85 d2                	test   edx,edx
c000949e:	74 28                	je     c00094c8 <Directory::open()+0x56>
c00094a0:	b8 06 00 00 00       	mov    eax,0x6
c00094a5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00094a9:	75 1d                	jne    c00094c8 <Directory::open()+0x56>
c00094ab:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00094b1:	50                   	push   eax
c00094b2:	8b 02                	mov    eax,DWORD PTR [edx]
c00094b4:	51                   	push   ecx
c00094b5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00094b8:	51                   	push   ecx
c00094b9:	52                   	push   edx
c00094ba:	ff 50 50             	call   DWORD PTR [eax+0x50]
c00094bd:	83 c4 10             	add    esp,0x10
c00094c0:	85 c0                	test   eax,eax
c00094c2:	75 04                	jne    c00094c8 <Directory::open()+0x56>
c00094c4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00094c8:	83 c4 08             	add    esp,0x8
c00094cb:	5b                   	pop    ebx
c00094cc:	c3                   	ret    
c00094cd:	90                   	nop

c00094ce <Directory::close()>:
c00094ce:	53                   	push   ebx
c00094cf:	b8 0b 00 00 00       	mov    eax,0xb
c00094d4:	83 ec 08             	sub    esp,0x8
c00094d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00094db:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00094e2:	83 f9 19             	cmp    ecx,0x19
c00094e5:	77 41                	ja     c0009528 <Directory::close()+0x5a>
c00094e7:	8b 1c 8d e0 6a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc9520]
c00094ee:	85 db                	test   ebx,ebx
c00094f0:	74 36                	je     c0009528 <Directory::close()+0x5a>
c00094f2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00094f9:	74 2d                	je     c0009528 <Directory::close()+0x5a>
c00094fb:	b8 05 00 00 00       	mov    eax,0x5
c0009500:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009504:	74 22                	je     c0009528 <Directory::close()+0x5a>
c0009506:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000950a:	8b 04 8d e0 6a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc9520]
c0009511:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009517:	53                   	push   ebx
c0009518:	53                   	push   ebx
c0009519:	8b 08                	mov    ecx,DWORD PTR [eax]
c000951b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0009521:	50                   	push   eax
c0009522:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0009525:	83 c4 10             	add    esp,0x10
c0009528:	83 c4 08             	add    esp,0x8
c000952b:	5b                   	pop    ebx
c000952c:	c3                   	ret    
c000952d:	90                   	nop

c000952e <Directory::unlink()>:
c000952e:	83 ec 0c             	sub    esp,0xc
c0009531:	b8 0b 00 00 00       	mov    eax,0xb
c0009536:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000953a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009541:	83 f9 19             	cmp    ecx,0x19
c0009544:	77 2f                	ja     c0009575 <Directory::unlink()+0x47>
c0009546:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c000954d:	85 c9                	test   ecx,ecx
c000954f:	74 24                	je     c0009575 <Directory::unlink()+0x47>
c0009551:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009557:	85 c9                	test   ecx,ecx
c0009559:	74 1a                	je     c0009575 <Directory::unlink()+0x47>
c000955b:	b8 06 00 00 00       	mov    eax,0x6
c0009560:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009564:	75 0f                	jne    c0009575 <Directory::unlink()+0x47>
c0009566:	83 c2 0d             	add    edx,0xd
c0009569:	50                   	push   eax
c000956a:	50                   	push   eax
c000956b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000956d:	52                   	push   edx
c000956e:	51                   	push   ecx
c000956f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	83 c4 0c             	add    esp,0xc
c0009578:	c3                   	ret    
c0009579:	90                   	nop

c000957a <Directory::rename(char const*)>:
c000957a:	83 ec 0c             	sub    esp,0xc
c000957d:	b8 0b 00 00 00       	mov    eax,0xb
c0009582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009586:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000958d:	83 f9 19             	cmp    ecx,0x19
c0009590:	77 32                	ja     c00095c4 <Directory::rename(char const*)+0x4a>
c0009592:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c0009599:	85 c9                	test   ecx,ecx
c000959b:	74 27                	je     c00095c4 <Directory::rename(char const*)+0x4a>
c000959d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00095a3:	85 c9                	test   ecx,ecx
c00095a5:	74 1d                	je     c00095c4 <Directory::rename(char const*)+0x4a>
c00095a7:	b8 06 00 00 00       	mov    eax,0x6
c00095ac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00095b0:	75 12                	jne    c00095c4 <Directory::rename(char const*)+0x4a>
c00095b2:	83 c2 0d             	add    edx,0xd
c00095b5:	50                   	push   eax
c00095b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00095b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00095bc:	52                   	push   edx
c00095bd:	51                   	push   ecx
c00095be:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00095c1:	83 c4 10             	add    esp,0x10
c00095c4:	83 c4 0c             	add    esp,0xc
c00095c7:	c3                   	ret    

c00095c8 <Directory::exists()>:
c00095c8:	83 ec 0c             	sub    esp,0xc
c00095cb:	31 c0                	xor    eax,eax
c00095cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095d1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00095d8:	83 f9 19             	cmp    ecx,0x19
c00095db:	77 24                	ja     c0009601 <Directory::exists()+0x39>
c00095dd:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c00095e4:	85 c9                	test   ecx,ecx
c00095e6:	74 19                	je     c0009601 <Directory::exists()+0x39>
c00095e8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00095ee:	85 c9                	test   ecx,ecx
c00095f0:	74 0f                	je     c0009601 <Directory::exists()+0x39>
c00095f2:	83 c2 0d             	add    edx,0xd
c00095f5:	50                   	push   eax
c00095f6:	50                   	push   eax
c00095f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00095f9:	52                   	push   edx
c00095fa:	51                   	push   ecx
c00095fb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00095fe:	83 c4 10             	add    esp,0x10
c0009601:	83 c4 0c             	add    esp,0xc
c0009604:	c3                   	ret    
c0009605:	90                   	nop

c0009606 <Directory::read(dirent*)>:
c0009606:	83 ec 1c             	sub    esp,0x1c
c0009609:	b8 0b 00 00 00       	mov    eax,0xb
c000960e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009612:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009619:	83 f9 19             	cmp    ecx,0x19
c000961c:	77 30                	ja     c000964e <Directory::read(dirent*)+0x48>
c000961e:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c0009625:	85 c9                	test   ecx,ecx
c0009627:	74 25                	je     c000964e <Directory::read(dirent*)+0x48>
c0009629:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0009630:	74 1c                	je     c000964e <Directory::read(dirent*)+0x48>
c0009632:	83 ec 0c             	sub    esp,0xc
c0009635:	8b 02                	mov    eax,DWORD PTR [edx]
c0009637:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000963b:	51                   	push   ecx
c000963c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009640:	6a 00                	push   0x0
c0009642:	68 10 01 00 00       	push   0x110
c0009647:	52                   	push   edx
c0009648:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000964b:	83 c4 20             	add    esp,0x20
c000964e:	83 c4 1c             	add    esp,0x1c
c0009651:	c3                   	ret    

c0009652 <Directory::create()>:
c0009652:	83 ec 0c             	sub    esp,0xc
c0009655:	b8 0b 00 00 00       	mov    eax,0xb
c000965a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000965e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009665:	83 f9 19             	cmp    ecx,0x19
c0009668:	77 2f                	ja     c0009699 <Directory::create()+0x47>
c000966a:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c0009671:	85 c9                	test   ecx,ecx
c0009673:	74 24                	je     c0009699 <Directory::create()+0x47>
c0009675:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000967b:	85 c9                	test   ecx,ecx
c000967d:	74 1a                	je     c0009699 <Directory::create()+0x47>
c000967f:	b8 06 00 00 00       	mov    eax,0x6
c0009684:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009688:	75 0f                	jne    c0009699 <Directory::create()+0x47>
c000968a:	83 c2 0d             	add    edx,0xd
c000968d:	50                   	push   eax
c000968e:	50                   	push   eax
c000968f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009691:	52                   	push   edx
c0009692:	51                   	push   ecx
c0009693:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0009696:	83 c4 10             	add    esp,0x10
c0009699:	83 c4 0c             	add    esp,0xc
c000969c:	c3                   	ret    
c000969d:	90                   	nop

c000969e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000969e:	b8 0a 00 00 00       	mov    eax,0xa
c00096a3:	c3                   	ret    

c00096a4 <Bus::Bus(char const*)>:
c00096a4:	83 ec 0c             	sub    esp,0xc
c00096a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096ab:	83 ec 08             	sub    esp,0x8
c00096ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00096b2:	50                   	push   eax
c00096b3:	e8 3e 12 00 00       	call   c000a8f6 <Device::Device(char const*)>
c00096b8:	83 c4 10             	add    esp,0x10
c00096bb:	ba a8 b4 02 c0       	mov    edx,0xc002b4a8
c00096c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096c4:	89 10                	mov    DWORD PTR [eax],edx
c00096c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096ca:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00096d4:	90                   	nop
c00096d5:	83 c4 0c             	add    esp,0xc
c00096d8:	c3                   	ret    
c00096d9:	90                   	nop
c00096da:	66 90                	xchg   ax,ax

c00096dc <Bus::~Bus()>:
c00096dc:	83 ec 0c             	sub    esp,0xc
c00096df:	ba a8 b4 02 c0       	mov    edx,0xc002b4a8
c00096e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096e8:	89 10                	mov    DWORD PTR [eax],edx
c00096ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096ee:	83 ec 0c             	sub    esp,0xc
c00096f1:	50                   	push   eax
c00096f2:	e8 9f 0f 00 00       	call   c000a696 <Device::~Device()>
c00096f7:	83 c4 10             	add    esp,0x10
c00096fa:	90                   	nop
c00096fb:	83 c4 0c             	add    esp,0xc
c00096fe:	c3                   	ret    
c00096ff:	90                   	nop

c0009700 <Bus::~Bus()>:
c0009700:	83 ec 0c             	sub    esp,0xc
c0009703:	83 ec 0c             	sub    esp,0xc
c0009706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000970a:	e8 cd ff ff ff       	call   c00096dc <Bus::~Bus()>
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	83 ec 08             	sub    esp,0x8
c0009715:	68 58 01 00 00       	push   0x158
c000971a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000971e:	e8 f5 49 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c0009723:	83 c4 10             	add    esp,0x10
c0009726:	83 c4 0c             	add    esp,0xc
c0009729:	c3                   	ret    

c000972a <KeBeepThread(void*)>:
c000972a:	83 ec 0c             	sub    esp,0xc
c000972d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009731:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0009738:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c000973f:	75 01                	jne    c0009742 <KeBeepThread(void*)+0x18>
c0009741:	fb                   	sti    
c0009742:	6b c0 0a             	imul   eax,eax,0xa
c0009745:	52                   	push   edx
c0009746:	52                   	push   edx
c0009747:	99                   	cdq    
c0009748:	52                   	push   edx
c0009749:	50                   	push   eax
c000974a:	e8 a1 e0 00 00       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c000974f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009756:	e8 98 21 01 00       	call   c001b8f3 <HalMakeBeep(int)>
c000975b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0009763:	83 c4 1c             	add    esp,0x1c
c0009766:	e9 51 df 00 00       	jmp    c00176bc <blockTask(TaskState)>

c000976b <KeBeep(int, int, bool)>:
c000976b:	56                   	push   esi
c000976c:	53                   	push   ebx
c000976d:	83 ec 10             	sub    esp,0x10
c0009770:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009774:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000977c:	e8 72 21 01 00       	call   c001b8f3 <HalMakeBeep(int)>
c0009781:	83 c4 10             	add    esp,0x10
c0009784:	89 f0                	mov    eax,esi
c0009786:	84 c0                	test   al,al
c0009788:	74 1f                	je     c00097a9 <KeBeep(int, int, bool)+0x3e>
c000978a:	50                   	push   eax
c000978b:	50                   	push   eax
c000978c:	6b c3 0a             	imul   eax,ebx,0xa
c000978f:	99                   	cdq    
c0009790:	52                   	push   edx
c0009791:	50                   	push   eax
c0009792:	e8 59 e0 00 00       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c0009797:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000979f:	83 c4 14             	add    esp,0x14
c00097a2:	5b                   	pop    ebx
c00097a3:	5e                   	pop    esi
c00097a4:	e9 4a 21 01 00       	jmp    c001b8f3 <HalMakeBeep(int)>
c00097a9:	68 e6 00 00 00       	push   0xe6
c00097ae:	53                   	push   ebx
c00097af:	68 2a 97 00 c0       	push   0xc000972a
c00097b4:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c00097ba:	e8 71 db 00 00       	call   c0017330 <Process::createThread(void (*)(void*), void*, int)>
c00097bf:	83 c4 14             	add    esp,0x14
c00097c2:	5b                   	pop    ebx
c00097c3:	5e                   	pop    esi
c00097c4:	c3                   	ret    
c00097c5:	90                   	nop

c00097c6 <KeLoadTimezoneStrings()>:
c00097c6:	55                   	push   ebp
c00097c7:	89 e5                	mov    ebp,esp
c00097c9:	53                   	push   ebx
c00097ca:	83 ec 44             	sub    esp,0x44
c00097cd:	c6 05 20 63 03 c0 01 	mov    BYTE PTR ds:0xc0036320,0x1
c00097d4:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c00097db:	83 ec 0c             	sub    esp,0xc
c00097de:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c00097e1:	e8 29 6e 00 00       	call   c001060f <malloc>
c00097e6:	83 c4 10             	add    esp,0x10
c00097e9:	89 c3                	mov    ebx,eax
c00097eb:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c00097f0:	83 ec 04             	sub    esp,0x4
c00097f3:	50                   	push   eax
c00097f4:	68 e0 b4 02 c0       	push   0xc002b4e0
c00097f9:	53                   	push   ebx
c00097fa:	e8 cb f6 ff ff       	call   c0008eca <File::File(char const*, Process*)>
c00097ff:	83 c4 10             	add    esp,0x10
c0009802:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0009805:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0009809:	75 10                	jne    c000981b <KeLoadTimezoneStrings()+0x55>
c000980b:	83 ec 0c             	sub    esp,0xc
c000980e:	68 ff b4 02 c0       	push   0xc002b4ff
c0009813:	e8 4c 72 00 00       	call   c0010a64 <KePanic(char const*)>
c0009818:	83 c4 10             	add    esp,0x10
c000981b:	83 ec 08             	sub    esp,0x8
c000981e:	6a 01                	push   0x1
c0009820:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009823:	e8 c0 f6 ff ff       	call   c0008ee8 <File::open(FileOpenMode)>
c0009828:	83 c4 10             	add    esp,0x10
c000982b:	83 ec 04             	sub    esp,0x4
c000982e:	8d 45 cf             	lea    eax,[ebp-0x31]
c0009831:	50                   	push   eax
c0009832:	8d 45 d0             	lea    eax,[ebp-0x30]
c0009835:	50                   	push   eax
c0009836:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009839:	e8 ac f9 ff ff       	call   c00091ea <File::stat(unsigned long long*, bool*)>
c000983e:	83 c4 10             	add    esp,0x10
c0009841:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0009844:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0009847:	83 ec 08             	sub    esp,0x8
c000984a:	50                   	push   eax
c000984b:	68 15 b5 02 c0       	push   0xc002b515
c0009850:	e8 27 d7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009855:	83 c4 10             	add    esp,0x10
c0009858:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000985b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000985e:	83 c0 01             	add    eax,0x1
c0009861:	83 ec 0c             	sub    esp,0xc
c0009864:	50                   	push   eax
c0009865:	e8 a5 6d 00 00       	call   c001060f <malloc>
c000986a:	83 c4 10             	add    esp,0x10
c000986d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009870:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0009873:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0009876:	83 ec 04             	sub    esp,0x4
c0009879:	50                   	push   eax
c000987a:	6a 00                	push   0x0
c000987c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000987f:	e8 6c 6c ff ff       	call   c00004f0 <memset>
c0009884:	83 c4 10             	add    esp,0x10
c0009887:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000988a:	8b 00                	mov    eax,DWORD PTR [eax]
c000988c:	83 c0 0c             	add    eax,0xc
c000988f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009891:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0009894:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0009897:	83 ec 0c             	sub    esp,0xc
c000989a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c000989d:	53                   	push   ebx
c000989e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00098a1:	52                   	push   edx
c00098a2:	50                   	push   eax
c00098a3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00098a6:	ff d1                	call   ecx
c00098a8:	83 c4 20             	add    esp,0x20
c00098ab:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00098ae:	83 ec 08             	sub    esp,0x8
c00098b1:	50                   	push   eax
c00098b2:	68 25 b5 02 c0       	push   0xc002b525
c00098b7:	e8 c0 d6 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00098bc:	83 c4 10             	add    esp,0x10
c00098bf:	83 ec 0c             	sub    esp,0xc
c00098c2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00098c5:	e8 7c f6 ff ff       	call   c0008f46 <File::close()>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00098d1:	74 15                	je     c00098e8 <KeLoadTimezoneStrings()+0x122>
c00098d3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00098d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00098d8:	83 c0 08             	add    eax,0x8
c00098db:	8b 00                	mov    eax,DWORD PTR [eax]
c00098dd:	83 ec 0c             	sub    esp,0xc
c00098e0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00098e3:	ff d0                	call   eax
c00098e5:	83 c4 10             	add    esp,0x10
c00098e8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00098ef:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00098f6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c00098fd:	7f 3a                	jg     c0009939 <KeLoadTimezoneStrings()+0x173>
c00098ff:	83 ec 0c             	sub    esp,0xc
c0009902:	6a 78                	push   0x78
c0009904:	e8 06 6d 00 00       	call   c001060f <malloc>
c0009909:	83 c4 10             	add    esp,0x10
c000990c:	89 c2                	mov    edx,eax
c000990e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009911:	89 14 85 40 63 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9cc0],edx
c0009918:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000991b:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009922:	83 ec 08             	sub    esp,0x8
c0009925:	68 2e b5 02 c0       	push   0xc002b52e
c000992a:	50                   	push   eax
c000992b:	e8 10 6d ff ff       	call   c0000640 <strcpy>
c0009930:	83 c4 10             	add    esp,0x10
c0009933:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0009937:	eb bd                	jmp    c00098f6 <KeLoadTimezoneStrings()+0x130>
c0009939:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009940:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009943:	8d 50 01             	lea    edx,[eax+0x1]
c0009946:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0009949:	89 c2                	mov    edx,eax
c000994b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000994e:	01 d0                	add    eax,edx
c0009950:	8a 00                	mov    al,BYTE PTR [eax]
c0009952:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0009955:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0009959:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c000995c:	0f be c0             	movsx  eax,al
c000995f:	83 f8 0d             	cmp    eax,0xd
c0009962:	0f 84 82 01 00 00    	je     c0009aea <KeLoadTimezoneStrings()+0x324>
c0009968:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c000996b:	0f be c0             	movsx  eax,al
c000996e:	83 f8 09             	cmp    eax,0x9
c0009971:	75 44                	jne    c00099b7 <KeLoadTimezoneStrings()+0x1f1>
c0009973:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009976:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c000997d:	83 ec 0c             	sub    esp,0xc
c0009980:	50                   	push   eax
c0009981:	e8 ea 6b ff ff       	call   c0000570 <strlen>
c0009986:	83 c4 10             	add    esp,0x10
c0009989:	83 f8 08             	cmp    eax,0x8
c000998c:	0f 96 c0             	setbe  al
c000998f:	0f b6 c0             	movzx  eax,al
c0009992:	85 c0                	test   eax,eax
c0009994:	0f 84 56 01 00 00    	je     c0009af0 <KeLoadTimezoneStrings()+0x32a>
c000999a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000999d:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c00099a4:	83 ec 08             	sub    esp,0x8
c00099a7:	68 2e b5 02 c0       	push   0xc002b52e
c00099ac:	50                   	push   eax
c00099ad:	e8 8e 6e ff ff       	call   c0000840 <strcat>
c00099b2:	83 c4 10             	add    esp,0x10
c00099b5:	eb bc                	jmp    c0009973 <KeLoadTimezoneStrings()+0x1ad>
c00099b7:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c00099ba:	0f be c0             	movsx  eax,al
c00099bd:	83 f8 0a             	cmp    eax,0xa
c00099c0:	0f 85 9b 00 00 00    	jne    c0009a61 <KeLoadTimezoneStrings()+0x29b>
c00099c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00099c9:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c00099d0:	83 ec 0c             	sub    esp,0xc
c00099d3:	50                   	push   eax
c00099d4:	e8 97 6b ff ff       	call   c0000570 <strlen>
c00099d9:	83 c4 10             	add    esp,0x10
c00099dc:	83 f8 35             	cmp    eax,0x35
c00099df:	0f 96 c0             	setbe  al
c00099e2:	0f b6 c0             	movzx  eax,al
c00099e5:	85 c0                	test   eax,eax
c00099e7:	74 1d                	je     c0009a06 <KeLoadTimezoneStrings()+0x240>
c00099e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00099ec:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c00099f3:	83 ec 08             	sub    esp,0x8
c00099f6:	68 2e b5 02 c0       	push   0xc002b52e
c00099fb:	50                   	push   eax
c00099fc:	e8 3f 6e ff ff       	call   c0000840 <strcat>
c0009a01:	83 c4 10             	add    esp,0x10
c0009a04:	eb c0                	jmp    c00099c6 <KeLoadTimezoneStrings()+0x200>
c0009a06:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009a0a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009a0d:	89 c2                	mov    edx,eax
c0009a0f:	c1 fa 1f             	sar    edx,0x1f
c0009a12:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0009a15:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0009a18:	39 c8                	cmp    eax,ecx
c0009a1a:	89 d0                	mov    eax,edx
c0009a1c:	19 d8                	sbb    eax,ebx
c0009a1e:	0f 82 d2 00 00 00    	jb     c0009af6 <KeLoadTimezoneStrings()+0x330>
c0009a24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009a27:	a3 24 63 03 c0       	mov    ds:0xc0036324,eax
c0009a2c:	83 ec 08             	sub    esp,0x8
c0009a2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009a32:	68 30 b5 02 c0       	push   0xc002b530
c0009a37:	e8 40 d5 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	a1 24 63 03 c0       	mov    eax,ds:0xc0036324
c0009a44:	83 ec 08             	sub    esp,0x8
c0009a47:	50                   	push   eax
c0009a48:	68 45 b5 02 c0       	push   0xc002b545
c0009a4d:	e8 2a d5 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009a52:	83 c4 10             	add    esp,0x10
c0009a55:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009a5c:	e9 9b 00 00 00       	jmp    c0009afc <KeLoadTimezoneStrings()+0x336>
c0009a61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009a64:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009a6b:	83 ec 0c             	sub    esp,0xc
c0009a6e:	50                   	push   eax
c0009a6f:	e8 fc 6a ff ff       	call   c0000570 <strlen>
c0009a74:	83 c4 10             	add    esp,0x10
c0009a77:	83 f8 31             	cmp    eax,0x31
c0009a7a:	0f 96 c0             	setbe  al
c0009a7d:	0f b6 c0             	movzx  eax,al
c0009a80:	85 c0                	test   eax,eax
c0009a82:	74 1f                	je     c0009aa3 <KeLoadTimezoneStrings()+0x2dd>
c0009a84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009a87:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009a8e:	83 ec 08             	sub    esp,0x8
c0009a91:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0009a94:	52                   	push   edx
c0009a95:	50                   	push   eax
c0009a96:	e8 a5 6d ff ff       	call   c0000840 <strcat>
c0009a9b:	83 c4 10             	add    esp,0x10
c0009a9e:	e9 9d fe ff ff       	jmp    c0009940 <KeLoadTimezoneStrings()+0x17a>
c0009aa3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009aa6:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009aad:	83 ec 0c             	sub    esp,0xc
c0009ab0:	50                   	push   eax
c0009ab1:	e8 ba 6a ff ff       	call   c0000570 <strlen>
c0009ab6:	83 c4 10             	add    esp,0x10
c0009ab9:	83 f8 32             	cmp    eax,0x32
c0009abc:	0f 94 c0             	sete   al
c0009abf:	0f b6 c0             	movzx  eax,al
c0009ac2:	85 c0                	test   eax,eax
c0009ac4:	0f 84 76 fe ff ff    	je     c0009940 <KeLoadTimezoneStrings()+0x17a>
c0009aca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009acd:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009ad4:	83 ec 08             	sub    esp,0x8
c0009ad7:	68 49 b5 02 c0       	push   0xc002b549
c0009adc:	50                   	push   eax
c0009add:	e8 5e 6d ff ff       	call   c0000840 <strcat>
c0009ae2:	83 c4 10             	add    esp,0x10
c0009ae5:	e9 56 fe ff ff       	jmp    c0009940 <KeLoadTimezoneStrings()+0x17a>
c0009aea:	90                   	nop
c0009aeb:	e9 50 fe ff ff       	jmp    c0009940 <KeLoadTimezoneStrings()+0x17a>
c0009af0:	90                   	nop
c0009af1:	e9 4a fe ff ff       	jmp    c0009940 <KeLoadTimezoneStrings()+0x17a>
c0009af6:	90                   	nop
c0009af7:	e9 44 fe ff ff       	jmp    c0009940 <KeLoadTimezoneStrings()+0x17a>
c0009afc:	a1 24 63 03 c0       	mov    eax,ds:0xc0036324
c0009b01:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0009b04:	7d 49                	jge    c0009b4f <KeLoadTimezoneStrings()+0x389>
c0009b06:	a1 24 63 03 c0       	mov    eax,ds:0xc0036324
c0009b0b:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0009b0e:	0f 9c c0             	setl   al
c0009b11:	0f b6 d0             	movzx  edx,al
c0009b14:	a1 24 63 03 c0       	mov    eax,ds:0xc0036324
c0009b19:	52                   	push   edx
c0009b1a:	50                   	push   eax
c0009b1b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0009b1e:	68 4e b5 02 c0       	push   0xc002b54e
c0009b23:	e8 54 d4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009b28:	83 c4 10             	add    esp,0x10
c0009b2b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009b2e:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009b35:	83 ec 04             	sub    esp,0x4
c0009b38:	50                   	push   eax
c0009b39:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0009b3c:	68 5c b5 02 c0       	push   0xc002b55c
c0009b41:	e8 36 d4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009b46:	83 c4 10             	add    esp,0x10
c0009b49:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0009b4d:	eb ad                	jmp    c0009afc <KeLoadTimezoneStrings()+0x336>
c0009b4f:	90                   	nop
c0009b50:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009b53:	c9                   	leave  
c0009b54:	c3                   	ret    

c0009b55 <KeGetTimezoneStringFromID(int)>:
c0009b55:	55                   	push   ebp
c0009b56:	89 e5                	mov    ebp,esp
c0009b58:	83 ec 08             	sub    esp,0x8
c0009b5b:	83 ec 08             	sub    esp,0x8
c0009b5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009b61:	68 65 b5 02 c0       	push   0xc002b565
c0009b66:	e8 11 d4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009b6b:	83 c4 10             	add    esp,0x10
c0009b6e:	a0 20 63 03 c0       	mov    al,ds:0xc0036320
c0009b73:	83 f0 01             	xor    eax,0x1
c0009b76:	0f b6 c0             	movzx  eax,al
c0009b79:	85 c0                	test   eax,eax
c0009b7b:	74 15                	je     c0009b92 <KeGetTimezoneStringFromID(int)+0x3d>
c0009b7d:	e8 44 fc ff ff       	call   c00097c6 <KeLoadTimezoneStrings()>
c0009b82:	83 ec 0c             	sub    esp,0xc
c0009b85:	68 83 b5 02 c0       	push   0xc002b583
c0009b8a:	e8 ed d3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009b8f:	83 c4 10             	add    esp,0x10
c0009b92:	a1 24 63 03 c0       	mov    eax,ds:0xc0036324
c0009b97:	83 ec 04             	sub    esp,0x4
c0009b9a:	50                   	push   eax
c0009b9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009b9e:	68 94 b5 02 c0       	push   0xc002b594
c0009ba3:	e8 d4 d3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009ba8:	83 c4 10             	add    esp,0x10
c0009bab:	a1 24 63 03 c0       	mov    eax,ds:0xc0036324
c0009bb0:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0009bb3:	7d 06                	jge    c0009bbb <KeGetTimezoneStringFromID(int)+0x66>
c0009bb5:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0009bb9:	79 07                	jns    c0009bc2 <KeGetTimezoneStringFromID(int)+0x6d>
c0009bbb:	b8 00 00 00 00       	mov    eax,0x0
c0009bc0:	eb 2e                	jmp    c0009bf0 <KeGetTimezoneStringFromID(int)+0x9b>
c0009bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bc5:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009bcc:	83 c0 01             	add    eax,0x1
c0009bcf:	83 ec 04             	sub    esp,0x4
c0009bd2:	50                   	push   eax
c0009bd3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009bd6:	68 a7 b5 02 c0       	push   0xc002b5a7
c0009bdb:	e8 9c d3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009be0:	83 c4 10             	add    esp,0x10
c0009be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009be6:	8b 04 85 40 63 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9cc0]
c0009bed:	83 c0 01             	add    eax,0x1
c0009bf0:	c9                   	leave  
c0009bf1:	c3                   	ret    

c0009bf2 <KeUpdateTimezone(char const*)>:
c0009bf2:	55                   	push   ebp
c0009bf3:	89 e5                	mov    ebp,esp
c0009bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bf8:	8a 00                	mov    al,BYTE PTR [eax]
c0009bfa:	0f be c0             	movsx  eax,al
c0009bfd:	83 f8 2b             	cmp    eax,0x2b
c0009c00:	74 11                	je     c0009c13 <KeUpdateTimezone(char const*)+0x21>
c0009c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c05:	8a 00                	mov    al,BYTE PTR [eax]
c0009c07:	0f be c0             	movsx  eax,al
c0009c0a:	83 f8 2d             	cmp    eax,0x2d
c0009c0d:	0f 85 be 00 00 00    	jne    c0009cd1 <KeUpdateTimezone(char const*)+0xdf>
c0009c13:	c6 05 60 66 03 c0 00 	mov    BYTE PTR ds:0xc0036660,0x0
c0009c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c1d:	83 c0 02             	add    eax,0x2
c0009c20:	8a 00                	mov    al,BYTE PTR [eax]
c0009c22:	0f be c0             	movsx  eax,al
c0009c25:	83 f8 2e             	cmp    eax,0x2e
c0009c28:	75 10                	jne    c0009c3a <KeUpdateTimezone(char const*)+0x48>
c0009c2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c2d:	83 c0 03             	add    eax,0x3
c0009c30:	8a 00                	mov    al,BYTE PTR [eax]
c0009c32:	0f be c0             	movsx  eax,al
c0009c35:	83 f8 35             	cmp    eax,0x35
c0009c38:	74 20                	je     c0009c5a <KeUpdateTimezone(char const*)+0x68>
c0009c3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c3d:	83 c0 03             	add    eax,0x3
c0009c40:	8a 00                	mov    al,BYTE PTR [eax]
c0009c42:	0f be c0             	movsx  eax,al
c0009c45:	83 f8 2e             	cmp    eax,0x2e
c0009c48:	75 14                	jne    c0009c5e <KeUpdateTimezone(char const*)+0x6c>
c0009c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c4d:	83 c0 04             	add    eax,0x4
c0009c50:	8a 00                	mov    al,BYTE PTR [eax]
c0009c52:	0f be c0             	movsx  eax,al
c0009c55:	83 f8 35             	cmp    eax,0x35
c0009c58:	75 04                	jne    c0009c5e <KeUpdateTimezone(char const*)+0x6c>
c0009c5a:	b0 01                	mov    al,0x1
c0009c5c:	eb 02                	jmp    c0009c60 <KeUpdateTimezone(char const*)+0x6e>
c0009c5e:	b0 00                	mov    al,0x0
c0009c60:	a2 61 66 03 c0       	mov    ds:0xc0036661,al
c0009c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c68:	83 c0 01             	add    eax,0x1
c0009c6b:	8a 00                	mov    al,BYTE PTR [eax]
c0009c6d:	0f be c0             	movsx  eax,al
c0009c70:	83 e8 30             	sub    eax,0x30
c0009c73:	a3 64 66 03 c0       	mov    ds:0xc0036664,eax
c0009c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c7b:	83 c0 03             	add    eax,0x3
c0009c7e:	8a 00                	mov    al,BYTE PTR [eax]
c0009c80:	0f be c0             	movsx  eax,al
c0009c83:	83 f8 2e             	cmp    eax,0x2e
c0009c86:	75 2e                	jne    c0009cb6 <KeUpdateTimezone(char const*)+0xc4>
c0009c88:	8b 15 64 66 03 c0    	mov    edx,DWORD PTR ds:0xc0036664
c0009c8e:	89 d0                	mov    eax,edx
c0009c90:	c1 e0 02             	shl    eax,0x2
c0009c93:	01 d0                	add    eax,edx
c0009c95:	01 c0                	add    eax,eax
c0009c97:	a3 64 66 03 c0       	mov    ds:0xc0036664,eax
c0009c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c9f:	83 c0 02             	add    eax,0x2
c0009ca2:	8a 00                	mov    al,BYTE PTR [eax]
c0009ca4:	0f be c0             	movsx  eax,al
c0009ca7:	8d 50 d0             	lea    edx,[eax-0x30]
c0009caa:	a1 64 66 03 c0       	mov    eax,ds:0xc0036664
c0009caf:	01 d0                	add    eax,edx
c0009cb1:	a3 64 66 03 c0       	mov    ds:0xc0036664,eax
c0009cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cb9:	8a 00                	mov    al,BYTE PTR [eax]
c0009cbb:	0f be c0             	movsx  eax,al
c0009cbe:	83 f8 2d             	cmp    eax,0x2d
c0009cc1:	75 26                	jne    c0009ce9 <KeUpdateTimezone(char const*)+0xf7>
c0009cc3:	a1 64 66 03 c0       	mov    eax,ds:0xc0036664
c0009cc8:	f7 d8                	neg    eax
c0009cca:	a3 64 66 03 c0       	mov    ds:0xc0036664,eax
c0009ccf:	eb 18                	jmp    c0009ce9 <KeUpdateTimezone(char const*)+0xf7>
c0009cd1:	c6 05 60 66 03 c0 00 	mov    BYTE PTR ds:0xc0036660,0x0
c0009cd8:	c6 05 61 66 03 c0 00 	mov    BYTE PTR ds:0xc0036661,0x0
c0009cdf:	c7 05 64 66 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036664,0x0
c0009ce9:	90                   	nop
c0009cea:	5d                   	pop    ebp
c0009ceb:	c3                   	ret    

c0009cec <KeSetTimezone(char const*)>:
c0009cec:	55                   	push   ebp
c0009ced:	89 e5                	mov    ebp,esp
c0009cef:	83 ec 18             	sub    esp,0x18
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	68 b4 b5 02 c0       	push   0xc002b5b4
c0009cfa:	e8 6d 44 00 00       	call   c000e16c <CmOpen(char const*)>
c0009cff:	83 c4 10             	add    esp,0x10
c0009d02:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009d05:	83 ec 08             	sub    esp,0x8
c0009d08:	68 d9 b5 02 c0       	push   0xc002b5d9
c0009d0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009d10:	e8 57 50 00 00       	call   c000ed6c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009d15:	83 c4 10             	add    esp,0x10
c0009d18:	83 ec 04             	sub    esp,0x4
c0009d1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009d1e:	50                   	push   eax
c0009d1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009d22:	e8 17 49 00 00       	call   c000e63e <CmSetString(Reghive_Tag*, int, char const*)>
c0009d27:	83 c4 10             	add    esp,0x10
c0009d2a:	83 ec 0c             	sub    esp,0xc
c0009d2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009d30:	e8 55 45 00 00       	call   c000e28a <CmClose(Reghive_Tag*)>
c0009d35:	83 c4 10             	add    esp,0x10
c0009d38:	83 ec 0c             	sub    esp,0xc
c0009d3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009d3e:	e8 af fe ff ff       	call   c0009bf2 <KeUpdateTimezone(char const*)>
c0009d43:	83 c4 10             	add    esp,0x10
c0009d46:	90                   	nop
c0009d47:	c9                   	leave  
c0009d48:	c3                   	ret    

c0009d49 <KeSetTimezone(int)>:
c0009d49:	55                   	push   ebp
c0009d4a:	89 e5                	mov    ebp,esp
c0009d4c:	83 ec 18             	sub    esp,0x18
c0009d4f:	83 ec 0c             	sub    esp,0xc
c0009d52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009d55:	e8 fb fd ff ff       	call   c0009b55 <KeGetTimezoneStringFromID(int)>
c0009d5a:	83 c4 10             	add    esp,0x10
c0009d5d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009d60:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009d64:	74 12                	je     c0009d78 <KeSetTimezone(int)+0x2f>
c0009d66:	83 ec 0c             	sub    esp,0xc
c0009d69:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009d6c:	e8 7b ff ff ff       	call   c0009cec <KeSetTimezone(char const*)>
c0009d71:	83 c4 10             	add    esp,0x10
c0009d74:	b0 01                	mov    al,0x1
c0009d76:	eb 02                	jmp    c0009d7a <KeSetTimezone(int)+0x31>
c0009d78:	b0 00                	mov    al,0x0
c0009d7a:	c9                   	leave  
c0009d7b:	c3                   	ret    

c0009d7c <KeLoadTimezone()>:
c0009d7c:	55                   	push   ebp
c0009d7d:	89 e5                	mov    ebp,esp
c0009d7f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009d85:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	68 b4 b5 02 c0       	push   0xc002b5b4
c0009d94:	e8 d3 43 00 00       	call   c000e16c <CmOpen(char const*)>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009d9f:	83 ec 08             	sub    esp,0x8
c0009da2:	68 d9 b5 02 c0       	push   0xc002b5d9
c0009da7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009daa:	e8 bd 4f 00 00       	call   c000ed6c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009daf:	83 c4 10             	add    esp,0x10
c0009db2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009db5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009db9:	7e 18                	jle    c0009dd3 <KeLoadTimezone()+0x57>
c0009dbb:	83 ec 04             	sub    esp,0x4
c0009dbe:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009dc4:	50                   	push   eax
c0009dc5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009dc8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009dcb:	e8 0c 45 00 00       	call   c000e2dc <CmGetString(Reghive_Tag*, int, char*)>
c0009dd0:	83 c4 10             	add    esp,0x10
c0009dd3:	83 ec 0c             	sub    esp,0xc
c0009dd6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009dd9:	e8 ac 44 00 00       	call   c000e28a <CmClose(Reghive_Tag*)>
c0009dde:	83 c4 10             	add    esp,0x10
c0009de1:	83 ec 0c             	sub    esp,0xc
c0009de4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009dea:	50                   	push   eax
c0009deb:	e8 02 fe ff ff       	call   c0009bf2 <KeUpdateTimezone(char const*)>
c0009df0:	83 c4 10             	add    esp,0x10
c0009df3:	90                   	nop
c0009df4:	c9                   	leave  
c0009df5:	c3                   	ret    

c0009df6 <Clock::Clock(char const*)>:
c0009df6:	83 ec 0c             	sub    esp,0xc
c0009df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dfd:	83 ec 08             	sub    esp,0x8
c0009e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e04:	50                   	push   eax
c0009e05:	e8 ec 0a 00 00       	call   c000a8f6 <Device::Device(char const*)>
c0009e0a:	83 c4 10             	add    esp,0x10
c0009e0d:	ba 38 b6 02 c0       	mov    edx,0xc002b638
c0009e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e16:	89 10                	mov    DWORD PTR [eax],edx
c0009e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e1c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0009e26:	90                   	nop
c0009e27:	83 c4 0c             	add    esp,0xc
c0009e2a:	c3                   	ret    
c0009e2b:	90                   	nop

c0009e2c <Clock::~Clock()>:
c0009e2c:	83 ec 0c             	sub    esp,0xc
c0009e2f:	ba 38 b6 02 c0       	mov    edx,0xc002b638
c0009e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e38:	89 10                	mov    DWORD PTR [eax],edx
c0009e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e3e:	83 ec 0c             	sub    esp,0xc
c0009e41:	50                   	push   eax
c0009e42:	e8 4f 08 00 00       	call   c000a696 <Device::~Device()>
c0009e47:	83 c4 10             	add    esp,0x10
c0009e4a:	90                   	nop
c0009e4b:	83 c4 0c             	add    esp,0xc
c0009e4e:	c3                   	ret    
c0009e4f:	90                   	nop

c0009e50 <Clock::~Clock()>:
c0009e50:	83 ec 0c             	sub    esp,0xc
c0009e53:	83 ec 0c             	sub    esp,0xc
c0009e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e5a:	e8 cd ff ff ff       	call   c0009e2c <Clock::~Clock()>
c0009e5f:	83 c4 10             	add    esp,0x10
c0009e62:	83 ec 08             	sub    esp,0x8
c0009e65:	68 58 01 00 00       	push   0x158
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	e8 a5 42 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c0009e73:	83 c4 10             	add    esp,0x10
c0009e76:	83 c4 0c             	add    esp,0xc
c0009e79:	c3                   	ret    

c0009e7a <Clock::timeInSecondsLocal()>:
c0009e7a:	55                   	push   ebp
c0009e7b:	89 e5                	mov    ebp,esp
c0009e7d:	53                   	push   ebx
c0009e7e:	83 ec 04             	sub    esp,0x4
c0009e81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009e84:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e86:	83 c0 24             	add    eax,0x24
c0009e89:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e8b:	83 ec 0c             	sub    esp,0xc
c0009e8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009e91:	ff d0                	call   eax
c0009e93:	83 c4 10             	add    esp,0x10
c0009e96:	89 c1                	mov    ecx,eax
c0009e98:	89 d3                	mov    ebx,edx
c0009e9a:	a0 60 66 03 c0       	mov    al,ds:0xc0036660
c0009e9f:	0f b6 d0             	movzx  edx,al
c0009ea2:	a1 64 66 03 c0       	mov    eax,ds:0xc0036664
c0009ea7:	01 c2                	add    edx,eax
c0009ea9:	89 d0                	mov    eax,edx
c0009eab:	01 c0                	add    eax,eax
c0009ead:	01 d0                	add    eax,edx
c0009eaf:	01 c0                	add    eax,eax
c0009eb1:	01 d0                	add    eax,edx
c0009eb3:	c1 e0 05             	shl    eax,0x5
c0009eb6:	01 d0                	add    eax,edx
c0009eb8:	c1 e0 04             	shl    eax,0x4
c0009ebb:	89 c2                	mov    edx,eax
c0009ebd:	c1 fa 1f             	sar    edx,0x1f
c0009ec0:	01 c1                	add    ecx,eax
c0009ec2:	11 d3                	adc    ebx,edx
c0009ec4:	a0 61 66 03 c0       	mov    al,ds:0xc0036661
c0009ec9:	0f b6 c0             	movzx  eax,al
c0009ecc:	85 c0                	test   eax,eax
c0009ece:	74 0c                	je     c0009edc <Clock::timeInSecondsLocal()+0x62>
c0009ed0:	b8 08 07 00 00       	mov    eax,0x708
c0009ed5:	ba 00 00 00 00       	mov    edx,0x0
c0009eda:	eb 0a                	jmp    c0009ee6 <Clock::timeInSecondsLocal()+0x6c>
c0009edc:	b8 00 00 00 00       	mov    eax,0x0
c0009ee1:	ba 00 00 00 00       	mov    edx,0x0
c0009ee6:	01 c8                	add    eax,ecx
c0009ee8:	11 da                	adc    edx,ebx
c0009eea:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009eed:	c9                   	leave  
c0009eee:	c3                   	ret    
c0009eef:	90                   	nop

c0009ef0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009ef0:	55                   	push   ebp
c0009ef1:	89 e5                	mov    ebp,esp
c0009ef3:	56                   	push   esi
c0009ef4:	53                   	push   ebx
c0009ef5:	83 ec 10             	sub    esp,0x10
c0009ef8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009efb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009efe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009f01:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009f04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f07:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f09:	83 c0 2c             	add    eax,0x2c
c0009f0c:	8b 30                	mov    esi,DWORD PTR [eax]
c0009f0e:	a0 60 66 03 c0       	mov    al,ds:0xc0036660
c0009f13:	0f b6 d0             	movzx  edx,al
c0009f16:	a1 64 66 03 c0       	mov    eax,ds:0xc0036664
c0009f1b:	01 c2                	add    edx,eax
c0009f1d:	89 d0                	mov    eax,edx
c0009f1f:	01 c0                	add    eax,eax
c0009f21:	01 d0                	add    eax,edx
c0009f23:	01 c0                	add    eax,eax
c0009f25:	01 d0                	add    eax,edx
c0009f27:	c1 e0 05             	shl    eax,0x5
c0009f2a:	01 d0                	add    eax,edx
c0009f2c:	c1 e0 04             	shl    eax,0x4
c0009f2f:	89 c2                	mov    edx,eax
c0009f31:	c1 fa 1f             	sar    edx,0x1f
c0009f34:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009f37:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c0009f3a:	29 c1                	sub    ecx,eax
c0009f3c:	19 d3                	sbb    ebx,edx
c0009f3e:	a0 61 66 03 c0       	mov    al,ds:0xc0036661
c0009f43:	0f b6 c0             	movzx  eax,al
c0009f46:	85 c0                	test   eax,eax
c0009f48:	74 0c                	je     c0009f56 <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c0009f4a:	b8 08 07 00 00       	mov    eax,0x708
c0009f4f:	ba 00 00 00 00       	mov    edx,0x0
c0009f54:	eb 0a                	jmp    c0009f60 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c0009f56:	b8 00 00 00 00       	mov    eax,0x0
c0009f5b:	ba 00 00 00 00       	mov    edx,0x0
c0009f60:	29 c1                	sub    ecx,eax
c0009f62:	19 d3                	sbb    ebx,edx
c0009f64:	89 c8                	mov    eax,ecx
c0009f66:	89 da                	mov    edx,ebx
c0009f68:	83 ec 04             	sub    esp,0x4
c0009f6b:	52                   	push   edx
c0009f6c:	50                   	push   eax
c0009f6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009f70:	ff d6                	call   esi
c0009f72:	83 c4 10             	add    esp,0x10
c0009f75:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009f78:	5b                   	pop    ebx
c0009f79:	5e                   	pop    esi
c0009f7a:	5d                   	pop    ebp
c0009f7b:	c3                   	ret    

c0009f7c <KeDatetimeToSeconds(datetime_t)>:
c0009f7c:	55                   	push   ebp
c0009f7d:	89 e5                	mov    ebp,esp
c0009f7f:	53                   	push   ebx
c0009f80:	83 ec 24             	sub    esp,0x24
c0009f83:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009f87:	2d 6c 07 00 00       	sub    eax,0x76c
c0009f8c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009f90:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009f93:	83 e8 01             	sub    eax,0x1
c0009f96:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009f99:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009fa0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009fa7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009fae:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009fb5:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009fb8:	0f b6 c8             	movzx  ecx,al
c0009fbb:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009fbe:	0f b6 d0             	movzx  edx,al
c0009fc1:	89 d0                	mov    eax,edx
c0009fc3:	01 c0                	add    eax,eax
c0009fc5:	01 d0                	add    eax,edx
c0009fc7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009fce:	01 d0                	add    eax,edx
c0009fd0:	c1 e0 02             	shl    eax,0x2
c0009fd3:	01 c1                	add    ecx,eax
c0009fd5:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009fd8:	0f b6 d0             	movzx  edx,al
c0009fdb:	89 d0                	mov    eax,edx
c0009fdd:	01 c0                	add    eax,eax
c0009fdf:	01 d0                	add    eax,edx
c0009fe1:	01 c0                	add    eax,eax
c0009fe3:	01 d0                	add    eax,edx
c0009fe5:	c1 e0 05             	shl    eax,0x5
c0009fe8:	01 d0                	add    eax,edx
c0009fea:	c1 e0 04             	shl    eax,0x4
c0009fed:	01 c8                	add    eax,ecx
c0009fef:	89 c2                	mov    edx,eax
c0009ff1:	c1 fa 1f             	sar    edx,0x1f
c0009ff4:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009ff7:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009ffa:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009ffd:	0f b6 c0             	movzx  eax,al
c000a000:	83 e8 01             	sub    eax,0x1
c000a003:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000a006:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000a009:	0f b6 c0             	movzx  eax,al
c000a00c:	8b 04 85 00 b6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4a00]
c000a013:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000a016:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000a019:	0f b6 c0             	movzx  eax,al
c000a01c:	83 f8 01             	cmp    eax,0x1
c000a01f:	76 7c                	jbe    c000a09d <KeDatetimeToSeconds(datetime_t)+0x121>
c000a021:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000a025:	0f b7 c0             	movzx  eax,ax
c000a028:	83 e0 03             	and    eax,0x3
c000a02b:	85 c0                	test   eax,eax
c000a02d:	75 6e                	jne    c000a09d <KeDatetimeToSeconds(datetime_t)+0x121>
c000a02f:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000a033:	0f b7 c8             	movzx  ecx,ax
c000a036:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c000a03b:	89 c8                	mov    eax,ecx
c000a03d:	f7 e2                	mul    edx
c000a03f:	c1 ea 05             	shr    edx,0x5
c000a042:	89 d0                	mov    eax,edx
c000a044:	c1 e0 02             	shl    eax,0x2
c000a047:	01 d0                	add    eax,edx
c000a049:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a050:	01 d0                	add    eax,edx
c000a052:	c1 e0 02             	shl    eax,0x2
c000a055:	29 c1                	sub    ecx,eax
c000a057:	89 c8                	mov    eax,ecx
c000a059:	0f b7 c0             	movzx  eax,ax
c000a05c:	85 c0                	test   eax,eax
c000a05e:	75 39                	jne    c000a099 <KeDatetimeToSeconds(datetime_t)+0x11d>
c000a060:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000a064:	0f b7 c0             	movzx  eax,ax
c000a067:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000a06d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a072:	f7 e9                	imul   ecx
c000a074:	c1 fa 07             	sar    edx,0x7
c000a077:	89 c8                	mov    eax,ecx
c000a079:	c1 f8 1f             	sar    eax,0x1f
c000a07c:	29 c2                	sub    edx,eax
c000a07e:	89 d0                	mov    eax,edx
c000a080:	c1 e0 02             	shl    eax,0x2
c000a083:	01 d0                	add    eax,edx
c000a085:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a08c:	01 d0                	add    eax,edx
c000a08e:	c1 e0 04             	shl    eax,0x4
c000a091:	29 c1                	sub    ecx,eax
c000a093:	89 ca                	mov    edx,ecx
c000a095:	85 d2                	test   edx,edx
c000a097:	75 04                	jne    c000a09d <KeDatetimeToSeconds(datetime_t)+0x121>
c000a099:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a09d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000a0a1:	0f b7 c0             	movzx  eax,ax
c000a0a4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000a0a7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a0aa:	83 f8 46             	cmp    eax,0x46
c000a0ad:	0f 9f c0             	setg   al
c000a0b0:	0f b6 c0             	movzx  eax,al
c000a0b3:	85 c0                	test   eax,eax
c000a0b5:	0f 84 a4 00 00 00    	je     c000a15f <KeDatetimeToSeconds(datetime_t)+0x1e3>
c000a0bb:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c000a0c2:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000a0c6:	0f b7 d0             	movzx  edx,ax
c000a0c9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a0cc:	39 c2                	cmp    edx,eax
c000a0ce:	0f 8e b8 01 00 00    	jle    c000a28c <KeDatetimeToSeconds(datetime_t)+0x310>
c000a0d4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a0d7:	83 e0 03             	and    eax,0x3
c000a0da:	85 c0                	test   eax,eax
c000a0dc:	75 6b                	jne    c000a149 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c000a0de:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000a0e1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a0e6:	f7 e9                	imul   ecx
c000a0e8:	c1 fa 05             	sar    edx,0x5
c000a0eb:	89 c8                	mov    eax,ecx
c000a0ed:	c1 f8 1f             	sar    eax,0x1f
c000a0f0:	29 c2                	sub    edx,eax
c000a0f2:	89 d0                	mov    eax,edx
c000a0f4:	c1 e0 02             	shl    eax,0x2
c000a0f7:	01 d0                	add    eax,edx
c000a0f9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a100:	01 d0                	add    eax,edx
c000a102:	c1 e0 02             	shl    eax,0x2
c000a105:	29 c1                	sub    ecx,eax
c000a107:	89 ca                	mov    edx,ecx
c000a109:	85 d2                	test   edx,edx
c000a10b:	75 35                	jne    c000a142 <KeDatetimeToSeconds(datetime_t)+0x1c6>
c000a10d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a110:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000a116:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a11b:	f7 e9                	imul   ecx
c000a11d:	c1 fa 07             	sar    edx,0x7
c000a120:	89 c8                	mov    eax,ecx
c000a122:	c1 f8 1f             	sar    eax,0x1f
c000a125:	29 c2                	sub    edx,eax
c000a127:	89 d0                	mov    eax,edx
c000a129:	c1 e0 02             	shl    eax,0x2
c000a12c:	01 d0                	add    eax,edx
c000a12e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a135:	01 d0                	add    eax,edx
c000a137:	c1 e0 04             	shl    eax,0x4
c000a13a:	29 c1                	sub    ecx,eax
c000a13c:	89 ca                	mov    edx,ecx
c000a13e:	85 d2                	test   edx,edx
c000a140:	75 07                	jne    c000a149 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c000a142:	b8 6e 01 00 00       	mov    eax,0x16e
c000a147:	eb 05                	jmp    c000a14e <KeDatetimeToSeconds(datetime_t)+0x1d2>
c000a149:	b8 6d 01 00 00       	mov    eax,0x16d
c000a14e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000a151:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a154:	83 c0 01             	add    eax,0x1
c000a157:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000a15a:	e9 63 ff ff ff       	jmp    c000a0c2 <KeDatetimeToSeconds(datetime_t)+0x146>
c000a15f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a162:	83 f8 45             	cmp    eax,0x45
c000a165:	0f 8f 21 01 00 00    	jg     c000a28c <KeDatetimeToSeconds(datetime_t)+0x310>
c000a16b:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c000a172:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000a176:	0f b7 d0             	movzx  edx,ax
c000a179:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a17c:	39 c2                	cmp    edx,eax
c000a17e:	0f 8d 8b 00 00 00    	jge    c000a20f <KeDatetimeToSeconds(datetime_t)+0x293>
c000a184:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a187:	83 e0 03             	and    eax,0x3
c000a18a:	85 c0                	test   eax,eax
c000a18c:	75 6b                	jne    c000a1f9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000a18e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000a191:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a196:	f7 e9                	imul   ecx
c000a198:	c1 fa 05             	sar    edx,0x5
c000a19b:	89 c8                	mov    eax,ecx
c000a19d:	c1 f8 1f             	sar    eax,0x1f
c000a1a0:	29 c2                	sub    edx,eax
c000a1a2:	89 d0                	mov    eax,edx
c000a1a4:	c1 e0 02             	shl    eax,0x2
c000a1a7:	01 d0                	add    eax,edx
c000a1a9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a1b0:	01 d0                	add    eax,edx
c000a1b2:	c1 e0 02             	shl    eax,0x2
c000a1b5:	29 c1                	sub    ecx,eax
c000a1b7:	89 ca                	mov    edx,ecx
c000a1b9:	85 d2                	test   edx,edx
c000a1bb:	75 35                	jne    c000a1f2 <KeDatetimeToSeconds(datetime_t)+0x276>
c000a1bd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a1c0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000a1c6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a1cb:	f7 e9                	imul   ecx
c000a1cd:	c1 fa 07             	sar    edx,0x7
c000a1d0:	89 c8                	mov    eax,ecx
c000a1d2:	c1 f8 1f             	sar    eax,0x1f
c000a1d5:	29 c2                	sub    edx,eax
c000a1d7:	89 d0                	mov    eax,edx
c000a1d9:	c1 e0 02             	shl    eax,0x2
c000a1dc:	01 d0                	add    eax,edx
c000a1de:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a1e5:	01 d0                	add    eax,edx
c000a1e7:	c1 e0 04             	shl    eax,0x4
c000a1ea:	29 c1                	sub    ecx,eax
c000a1ec:	89 ca                	mov    edx,ecx
c000a1ee:	85 d2                	test   edx,edx
c000a1f0:	75 07                	jne    c000a1f9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000a1f2:	b8 6e 01 00 00       	mov    eax,0x16e
c000a1f7:	eb 05                	jmp    c000a1fe <KeDatetimeToSeconds(datetime_t)+0x282>
c000a1f9:	b8 6d 01 00 00       	mov    eax,0x16d
c000a1fe:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000a201:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a204:	83 e8 01             	sub    eax,0x1
c000a207:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000a20a:	e9 63 ff ff ff       	jmp    c000a172 <KeDatetimeToSeconds(datetime_t)+0x1f6>
c000a20f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a212:	83 e0 03             	and    eax,0x3
c000a215:	85 c0                	test   eax,eax
c000a217:	75 6b                	jne    c000a284 <KeDatetimeToSeconds(datetime_t)+0x308>
c000a219:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000a21c:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a221:	f7 e9                	imul   ecx
c000a223:	c1 fa 05             	sar    edx,0x5
c000a226:	89 c8                	mov    eax,ecx
c000a228:	c1 f8 1f             	sar    eax,0x1f
c000a22b:	29 c2                	sub    edx,eax
c000a22d:	89 d0                	mov    eax,edx
c000a22f:	c1 e0 02             	shl    eax,0x2
c000a232:	01 d0                	add    eax,edx
c000a234:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a23b:	01 d0                	add    eax,edx
c000a23d:	c1 e0 02             	shl    eax,0x2
c000a240:	29 c1                	sub    ecx,eax
c000a242:	89 ca                	mov    edx,ecx
c000a244:	85 d2                	test   edx,edx
c000a246:	75 35                	jne    c000a27d <KeDatetimeToSeconds(datetime_t)+0x301>
c000a248:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a24b:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000a251:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000a256:	f7 e9                	imul   ecx
c000a258:	c1 fa 07             	sar    edx,0x7
c000a25b:	89 c8                	mov    eax,ecx
c000a25d:	c1 f8 1f             	sar    eax,0x1f
c000a260:	29 c2                	sub    edx,eax
c000a262:	89 d0                	mov    eax,edx
c000a264:	c1 e0 02             	shl    eax,0x2
c000a267:	01 d0                	add    eax,edx
c000a269:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a270:	01 d0                	add    eax,edx
c000a272:	c1 e0 04             	shl    eax,0x4
c000a275:	29 c1                	sub    ecx,eax
c000a277:	89 ca                	mov    edx,ecx
c000a279:	85 d2                	test   edx,edx
c000a27b:	75 07                	jne    c000a284 <KeDatetimeToSeconds(datetime_t)+0x308>
c000a27d:	b8 6e 01 00 00       	mov    eax,0x16e
c000a282:	eb 05                	jmp    c000a289 <KeDatetimeToSeconds(datetime_t)+0x30d>
c000a284:	b8 6d 01 00 00       	mov    eax,0x16d
c000a289:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000a28c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a28f:	89 c2                	mov    edx,eax
c000a291:	c1 fa 1f             	sar    edx,0x1f
c000a294:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000a29a:	6b c8 00             	imul   ecx,eax,0x0
c000a29d:	01 d9                	add    ecx,ebx
c000a29f:	bb 80 51 01 00       	mov    ebx,0x15180
c000a2a4:	f7 e3                	mul    ebx
c000a2a6:	01 d1                	add    ecx,edx
c000a2a8:	89 ca                	mov    edx,ecx
c000a2aa:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000a2ad:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c000a2b0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a2b3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000a2b6:	83 c4 24             	add    esp,0x24
c000a2b9:	5b                   	pop    ebx
c000a2ba:	5d                   	pop    ebp
c000a2bb:	c3                   	ret    

c000a2bc <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000a2bc:	55                   	push   ebp
c000a2bd:	89 e5                	mov    ebp,esp
c000a2bf:	56                   	push   esi
c000a2c0:	53                   	push   ebx
c000a2c1:	83 ec 20             	sub    esp,0x20
c000a2c4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c000a2c7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000a2ca:	e8 ad fc ff ff       	call   c0009f7c <KeDatetimeToSeconds(datetime_t)>
c000a2cf:	83 c4 08             	add    esp,0x8
c000a2d2:	89 c3                	mov    ebx,eax
c000a2d4:	89 d6                	mov    esi,edx
c000a2d6:	a0 60 66 03 c0       	mov    al,ds:0xc0036660
c000a2db:	0f b6 d0             	movzx  edx,al
c000a2de:	a1 64 66 03 c0       	mov    eax,ds:0xc0036664
c000a2e3:	01 c2                	add    edx,eax
c000a2e5:	89 d0                	mov    eax,edx
c000a2e7:	01 c0                	add    eax,eax
c000a2e9:	01 d0                	add    eax,edx
c000a2eb:	01 c0                	add    eax,eax
c000a2ed:	01 d0                	add    eax,edx
c000a2ef:	c1 e0 05             	shl    eax,0x5
c000a2f2:	01 d0                	add    eax,edx
c000a2f4:	c1 e0 04             	shl    eax,0x4
c000a2f7:	89 c2                	mov    edx,eax
c000a2f9:	c1 fa 1f             	sar    edx,0x1f
c000a2fc:	29 c3                	sub    ebx,eax
c000a2fe:	19 d6                	sbb    esi,edx
c000a300:	a0 61 66 03 c0       	mov    al,ds:0xc0036661
c000a305:	0f b6 c0             	movzx  eax,al
c000a308:	85 c0                	test   eax,eax
c000a30a:	74 0c                	je     c000a318 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c000a30c:	b8 08 07 00 00       	mov    eax,0x708
c000a311:	ba 00 00 00 00       	mov    edx,0x0
c000a316:	eb 0a                	jmp    c000a322 <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c000a318:	b8 00 00 00 00       	mov    eax,0x0
c000a31d:	ba 00 00 00 00       	mov    edx,0x0
c000a322:	29 c3                	sub    ebx,eax
c000a324:	19 d6                	sbb    esi,edx
c000a326:	89 d8                	mov    eax,ebx
c000a328:	89 f2                	mov    edx,esi
c000a32a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a32d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000a330:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a333:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000a336:	89 d0                	mov    eax,edx
c000a338:	31 d2                	xor    edx,edx
c000a33a:	89 c3                	mov    ebx,eax
c000a33c:	89 d6                	mov    esi,edx
c000a33e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a341:	80 e5 ff             	and    ch,0xff
c000a344:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c000a347:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000a34a:	83 e1 00             	and    ecx,0x0
c000a34d:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c000a350:	83 ec 0c             	sub    esp,0xc
c000a353:	56                   	push   esi
c000a354:	53                   	push   ebx
c000a355:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000a358:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000a35b:	68 ee b5 02 c0       	push   0xc002b5ee
c000a360:	e8 17 cc ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000a365:	83 c4 20             	add    esp,0x20
c000a368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a36b:	8b 00                	mov    eax,DWORD PTR [eax]
c000a36d:	83 c0 2c             	add    eax,0x2c
c000a370:	8b 00                	mov    eax,DWORD PTR [eax]
c000a372:	83 ec 04             	sub    esp,0x4
c000a375:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000a378:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a37b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000a37e:	ff d0                	call   eax
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	8d 65 f8             	lea    esp,[ebp-0x8]
c000a386:	5b                   	pop    ebx
c000a387:	5e                   	pop    esi
c000a388:	5d                   	pop    ebp
c000a389:	c3                   	ret    

c000a38a <KeSecondsToDatetime(unsigned long long)>:
c000a38a:	55                   	push   ebp
c000a38b:	89 e5                	mov    ebp,esp
c000a38d:	83 ec 48             	sub    esp,0x48
c000a390:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a393:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c000a396:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a399:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c000a39c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000a39f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000a3a2:	6a 00                	push   0x0
c000a3a4:	68 80 51 01 00       	push   0x15180
c000a3a9:	52                   	push   edx
c000a3aa:	50                   	push   eax
c000a3ab:	e8 a4 a7 01 00       	call   c0024b54 <__udivdi3>
c000a3b0:	83 c4 10             	add    esp,0x10
c000a3b3:	05 6c fa 0a 00       	add    eax,0xafa6c
c000a3b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a3bb:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000a3be:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000a3c1:	6a 00                	push   0x0
c000a3c3:	68 80 51 01 00       	push   0x15180
c000a3c8:	52                   	push   edx
c000a3c9:	50                   	push   eax
c000a3ca:	e8 85 a8 01 00       	call   c0024c54 <__umoddi3>
c000a3cf:	83 c4 10             	add    esp,0x10
c000a3d2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a3d5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000a3d9:	79 0b                	jns    c000a3e6 <KeSecondsToDatetime(unsigned long long)+0x5c>
c000a3db:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000a3e2:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c000a3e6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a3e9:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000a3ee:	89 c8                	mov    eax,ecx
c000a3f0:	f7 ea                	imul   edx
c000a3f2:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a3f5:	c1 f8 0b             	sar    eax,0xb
c000a3f8:	89 c2                	mov    edx,eax
c000a3fa:	89 c8                	mov    eax,ecx
c000a3fc:	c1 f8 1f             	sar    eax,0x1f
c000a3ff:	29 c2                	sub    edx,eax
c000a401:	89 d0                	mov    eax,edx
c000a403:	88 c2                	mov    dl,al
c000a405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a408:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000a40b:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a40e:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000a413:	89 c8                	mov    eax,ecx
c000a415:	f7 ea                	imul   edx
c000a417:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a41a:	c1 f8 0b             	sar    eax,0xb
c000a41d:	89 c2                	mov    edx,eax
c000a41f:	89 c8                	mov    eax,ecx
c000a421:	c1 f8 1f             	sar    eax,0x1f
c000a424:	29 c2                	sub    edx,eax
c000a426:	89 d0                	mov    eax,edx
c000a428:	01 c0                	add    eax,eax
c000a42a:	01 d0                	add    eax,edx
c000a42c:	01 c0                	add    eax,eax
c000a42e:	01 d0                	add    eax,edx
c000a430:	c1 e0 05             	shl    eax,0x5
c000a433:	01 d0                	add    eax,edx
c000a435:	c1 e0 04             	shl    eax,0x4
c000a438:	29 c1                	sub    ecx,eax
c000a43a:	89 c8                	mov    eax,ecx
c000a43c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a43f:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a442:	ba 89 88 88 88       	mov    edx,0x88888889
c000a447:	89 c8                	mov    eax,ecx
c000a449:	f7 ea                	imul   edx
c000a44b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a44e:	c1 f8 05             	sar    eax,0x5
c000a451:	89 c2                	mov    edx,eax
c000a453:	89 c8                	mov    eax,ecx
c000a455:	c1 f8 1f             	sar    eax,0x1f
c000a458:	29 c2                	sub    edx,eax
c000a45a:	89 d0                	mov    eax,edx
c000a45c:	88 c2                	mov    dl,al
c000a45e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a461:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000a464:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a467:	ba 89 88 88 88       	mov    edx,0x88888889
c000a46c:	89 c8                	mov    eax,ecx
c000a46e:	f7 ea                	imul   edx
c000a470:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a473:	c1 f8 05             	sar    eax,0x5
c000a476:	89 c2                	mov    edx,eax
c000a478:	89 c8                	mov    eax,ecx
c000a47a:	c1 f8 1f             	sar    eax,0x1f
c000a47d:	29 c2                	sub    edx,eax
c000a47f:	89 d0                	mov    eax,edx
c000a481:	01 c0                	add    eax,eax
c000a483:	01 d0                	add    eax,edx
c000a485:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a48c:	01 d0                	add    eax,edx
c000a48e:	c1 e0 02             	shl    eax,0x2
c000a491:	29 c1                	sub    ecx,eax
c000a493:	89 ca                	mov    edx,ecx
c000a495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a498:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c000a49b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a49f:	79 20                	jns    c000a4c1 <KeSecondsToDatetime(unsigned long long)+0x137>
c000a4a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a4a4:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c000a4aa:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000a4af:	89 c8                	mov    eax,ecx
c000a4b1:	f7 ea                	imul   edx
c000a4b3:	c1 fa 0f             	sar    edx,0xf
c000a4b6:	89 c8                	mov    eax,ecx
c000a4b8:	c1 f8 1f             	sar    eax,0x1f
c000a4bb:	29 c2                	sub    edx,eax
c000a4bd:	89 d0                	mov    eax,edx
c000a4bf:	eb 18                	jmp    c000a4d9 <KeSecondsToDatetime(unsigned long long)+0x14f>
c000a4c1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000a4c4:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000a4c9:	89 c8                	mov    eax,ecx
c000a4cb:	f7 ea                	imul   edx
c000a4cd:	c1 fa 0f             	sar    edx,0xf
c000a4d0:	89 c8                	mov    eax,ecx
c000a4d2:	c1 f8 1f             	sar    eax,0x1f
c000a4d5:	29 c2                	sub    edx,eax
c000a4d7:	89 d0                	mov    eax,edx
c000a4d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000a4dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000a4df:	89 d0                	mov    eax,edx
c000a4e1:	c1 e0 03             	shl    eax,0x3
c000a4e4:	01 d0                	add    eax,edx
c000a4e6:	c1 e0 04             	shl    eax,0x4
c000a4e9:	01 d0                	add    eax,edx
c000a4eb:	c1 e0 04             	shl    eax,0x4
c000a4ee:	29 d0                	sub    eax,edx
c000a4f0:	89 c2                	mov    edx,eax
c000a4f2:	c1 e2 06             	shl    edx,0x6
c000a4f5:	29 c2                	sub    edx,eax
c000a4f7:	89 d0                	mov    eax,edx
c000a4f9:	f7 d8                	neg    eax
c000a4fb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000a4fe:	01 d0                	add    eax,edx
c000a500:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000a503:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a506:	c1 e8 02             	shr    eax,0x2
c000a509:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c000a50e:	f7 e2                	mul    edx
c000a510:	c1 ea 07             	shr    edx,0x7
c000a513:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a516:	29 d0                	sub    eax,edx
c000a518:	89 c1                	mov    ecx,eax
c000a51a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a51d:	c1 e8 02             	shr    eax,0x2
c000a520:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c000a525:	f7 e2                	mul    edx
c000a527:	89 d0                	mov    eax,edx
c000a529:	c1 e8 0b             	shr    eax,0xb
c000a52c:	01 c1                	add    ecx,eax
c000a52e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a531:	c1 e8 04             	shr    eax,0x4
c000a534:	ba 41 d6 72 00       	mov    edx,0x72d641
c000a539:	f7 e2                	mul    edx
c000a53b:	89 d0                	mov    eax,edx
c000a53d:	c1 e8 04             	shr    eax,0x4
c000a540:	29 c1                	sub    ecx,eax
c000a542:	ba 61 f3 19 67       	mov    edx,0x6719f361
c000a547:	89 c8                	mov    eax,ecx
c000a549:	f7 e2                	mul    edx
c000a54b:	89 c8                	mov    eax,ecx
c000a54d:	29 d0                	sub    eax,edx
c000a54f:	d1 e8                	shr    eax,1
c000a551:	01 d0                	add    eax,edx
c000a553:	c1 e8 08             	shr    eax,0x8
c000a556:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000a559:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a55c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c000a561:	f7 e2                	mul    edx
c000a563:	89 d1                	mov    ecx,edx
c000a565:	c1 e9 05             	shr    ecx,0x5
c000a568:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000a56b:	89 d0                	mov    eax,edx
c000a56d:	c1 e0 03             	shl    eax,0x3
c000a570:	01 d0                	add    eax,edx
c000a572:	c1 e0 03             	shl    eax,0x3
c000a575:	01 d0                	add    eax,edx
c000a577:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a57e:	01 c2                	add    edx,eax
c000a580:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a583:	c1 e8 02             	shr    eax,0x2
c000a586:	01 d0                	add    eax,edx
c000a588:	29 c1                	sub    ecx,eax
c000a58a:	89 ca                	mov    edx,ecx
c000a58c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a58f:	01 d0                	add    eax,edx
c000a591:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000a594:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000a597:	89 d0                	mov    eax,edx
c000a599:	c1 e0 02             	shl    eax,0x2
c000a59c:	01 d0                	add    eax,edx
c000a59e:	83 c0 02             	add    eax,0x2
c000a5a1:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c000a5a6:	f7 e2                	mul    edx
c000a5a8:	89 d0                	mov    eax,edx
c000a5aa:	c1 e8 07             	shr    eax,0x7
c000a5ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000a5b0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000a5b3:	89 d0                	mov    eax,edx
c000a5b5:	c1 e0 03             	shl    eax,0x3
c000a5b8:	01 d0                	add    eax,edx
c000a5ba:	01 c0                	add    eax,eax
c000a5bc:	01 d0                	add    eax,edx
c000a5be:	c1 e0 03             	shl    eax,0x3
c000a5c1:	01 d0                	add    eax,edx
c000a5c3:	83 c0 02             	add    eax,0x2
c000a5c6:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000a5cb:	f7 e2                	mul    edx
c000a5cd:	c1 ea 02             	shr    edx,0x2
c000a5d0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a5d3:	29 d0                	sub    eax,edx
c000a5d5:	83 c0 01             	add    eax,0x1
c000a5d8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000a5db:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000a5df:	77 07                	ja     c000a5e8 <KeSecondsToDatetime(unsigned long long)+0x25e>
c000a5e1:	b8 02 00 00 00       	mov    eax,0x2
c000a5e6:	eb 05                	jmp    c000a5ed <KeSecondsToDatetime(unsigned long long)+0x263>
c000a5e8:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c000a5ed:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c000a5f0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000a5f3:	89 d0                	mov    eax,edx
c000a5f5:	c1 e0 02             	shl    eax,0x2
c000a5f8:	01 d0                	add    eax,edx
c000a5fa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a601:	01 d0                	add    eax,edx
c000a603:	c1 e0 04             	shl    eax,0x4
c000a606:	89 c2                	mov    edx,eax
c000a608:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a60b:	01 c2                	add    edx,eax
c000a60d:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c000a611:	0f 96 c0             	setbe  al
c000a614:	0f b6 c0             	movzx  eax,al
c000a617:	01 d0                	add    eax,edx
c000a619:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000a61c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000a61f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a622:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000a626:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000a629:	83 c0 01             	add    eax,0x1
c000a62c:	88 c2                	mov    dl,al
c000a62e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a631:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a634:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000a637:	88 c2                	mov    dl,al
c000a639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a63c:	88 10                	mov    BYTE PTR [eax],dl
c000a63e:	90                   	nop
c000a63f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a642:	c9                   	leave  
c000a643:	c2 04 00             	ret    0x4

c000a646 <Clock::timeInDatetimeLocal()>:
c000a646:	55                   	push   ebp
c000a647:	89 e5                	mov    ebp,esp
c000a649:	83 ec 08             	sub    esp,0x8
c000a64c:	83 ec 0c             	sub    esp,0xc
c000a64f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000a652:	e8 23 f8 ff ff       	call   c0009e7a <Clock::timeInSecondsLocal()>
c000a657:	83 c4 10             	add    esp,0x10
c000a65a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a65d:	83 ec 04             	sub    esp,0x4
c000a660:	52                   	push   edx
c000a661:	50                   	push   eax
c000a662:	51                   	push   ecx
c000a663:	e8 22 fd ff ff       	call   c000a38a <KeSecondsToDatetime(unsigned long long)>
c000a668:	83 c4 0c             	add    esp,0xc
c000a66b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a66e:	c9                   	leave  
c000a66f:	c2 04 00             	ret    0x4

c000a672 <Device::hibernate()>:
c000a672:	c3                   	ret    
c000a673:	90                   	nop

c000a674 <Device::wake()>:
c000a674:	c3                   	ret    
c000a675:	90                   	nop

c000a676 <Device::detect()>:
c000a676:	c3                   	ret    
c000a677:	90                   	nop

c000a678 <Device::disableLegacy()>:
c000a678:	c3                   	ret    
c000a679:	90                   	nop

c000a67a <Device::powerSaving(PowerSavingLevel)>:
c000a67a:	c3                   	ret    
c000a67b:	90                   	nop

c000a67c <DriverlessDevice::close(int, int, void*)>:
c000a67c:	31 c0                	xor    eax,eax
c000a67e:	c3                   	ret    
c000a67f:	90                   	nop

c000a680 <DriverlessDevice::detect()>:
c000a680:	c3                   	ret    
c000a681:	90                   	nop

c000a682 <DriverlessDevice::open(int, int, void*)>:
c000a682:	83 ec 18             	sub    esp,0x18
c000a685:	68 6c b6 02 c0       	push   0xc002b66c
c000a68a:	e8 d5 63 00 00       	call   c0010a64 <KePanic(char const*)>
c000a68f:	83 c8 ff             	or     eax,0xffffffff
c000a692:	83 c4 1c             	add    esp,0x1c
c000a695:	c3                   	ret    

c000a696 <Device::~Device()>:
c000a696:	ba 10 b7 02 c0       	mov    edx,0xc002b710
c000a69b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a69f:	89 10                	mov    DWORD PTR [eax],edx
c000a6a1:	90                   	nop
c000a6a2:	c3                   	ret    
c000a6a3:	90                   	nop

c000a6a4 <Device::~Device()>:
c000a6a4:	83 ec 0c             	sub    esp,0xc
c000a6a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a6ab:	e8 e6 ff ff ff       	call   c000a696 <Device::~Device()>
c000a6b0:	83 c4 04             	add    esp,0x4
c000a6b3:	83 ec 08             	sub    esp,0x8
c000a6b6:	68 58 01 00 00       	push   0x158
c000a6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6bf:	e8 54 3a 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c000a6c4:	83 c4 10             	add    esp,0x10
c000a6c7:	83 c4 0c             	add    esp,0xc
c000a6ca:	c3                   	ret    
c000a6cb:	90                   	nop

c000a6cc <Device::findAndLoadDriver()>:
c000a6cc:	c7 44 24 04 8a b6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b68a
c000a6d4:	e9 a3 c8 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000a6d9:	90                   	nop

c000a6da <Device::preOpenPCI(PCIDeviceInfo)>:
c000a6da:	57                   	push   edi
c000a6db:	b9 09 00 00 00       	mov    ecx,0x9
c000a6e0:	56                   	push   esi
c000a6e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a6e5:	8d 74 24 10          	lea    esi,[esp+0x10]
c000a6e9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000a6f3:	81 c7 18 01 00 00    	add    edi,0x118
c000a6f9:	fc                   	cld    
c000a6fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a6fc:	5e                   	pop    esi
c000a6fd:	5f                   	pop    edi
c000a6fe:	c3                   	ret    
c000a6ff:	90                   	nop

c000a700 <Device::preOpenACPI(void*, char*, char*)>:
c000a700:	57                   	push   edi
c000a701:	b9 1e 00 00 00       	mov    ecx,0x1e
c000a706:	56                   	push   esi
c000a707:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a70b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a70f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000a719:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000a71f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000a725:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a72b:	b9 0e 00 00 00       	mov    ecx,0xe
c000a730:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000a736:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a73a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a73c:	5e                   	pop    esi
c000a73d:	5f                   	pop    edi
c000a73e:	c3                   	ret    
c000a73f:	90                   	nop

c000a740 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000a740:	53                   	push   ebx
c000a741:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a745:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a749:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a74d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a751:	0f b6 c0             	movzx  eax,al
c000a754:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a758:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a75c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a760:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a764:	5b                   	pop    ebx
c000a765:	e9 3f 16 01 00       	jmp    c001bda9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000a76a <Device::getParent()>:
c000a76a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a76e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000a774:	c3                   	ret    
c000a775:	90                   	nop

c000a776 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000a776:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a77a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a77e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000a783:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a787:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a78b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a78f:	e9 77 17 01 00       	jmp    c001bf0b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000a794 <Device::addChild(Device*)>:
c000a794:	53                   	push   ebx
c000a795:	83 ec 08             	sub    esp,0x8
c000a798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a79c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a7a0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000a7a6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000a7ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a7ae:	85 d2                	test   edx,edx
c000a7b0:	74 04                	je     c000a7b6 <Device::addChild(Device*)+0x22>
c000a7b2:	89 d3                	mov    ebx,edx
c000a7b4:	eb f6                	jmp    c000a7ac <Device::addChild(Device*)+0x18>
c000a7b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a7b9:	83 ec 0c             	sub    esp,0xc
c000a7bc:	6a 08                	push   0x8
c000a7be:	e8 4c 5e 00 00       	call   c001060f <malloc>
c000a7c3:	89 03                	mov    DWORD PTR [ebx],eax
c000a7c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a7cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a7d2:	83 c4 18             	add    esp,0x18
c000a7d5:	5b                   	pop    ebx
c000a7d6:	c3                   	ret    
c000a7d7:	90                   	nop

c000a7d8 <Device::removeAllChildren()>:
c000a7d8:	56                   	push   esi
c000a7d9:	53                   	push   ebx
c000a7da:	52                   	push   edx
c000a7db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a7df:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000a7e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a7e8:	74 17                	je     c000a801 <Device::removeAllChildren()+0x29>
c000a7ea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a7ed:	85 c0                	test   eax,eax
c000a7ef:	74 0c                	je     c000a7fd <Device::removeAllChildren()+0x25>
c000a7f1:	83 ec 0c             	sub    esp,0xc
c000a7f4:	8b 10                	mov    edx,DWORD PTR [eax]
c000a7f6:	50                   	push   eax
c000a7f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000a7fa:	83 c4 10             	add    esp,0x10
c000a7fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a7ff:	eb e4                	jmp    c000a7e5 <Device::removeAllChildren()+0xd>
c000a801:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000a807:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a80d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000a813:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a81a:	58                   	pop    eax
c000a81b:	5b                   	pop    ebx
c000a81c:	5e                   	pop    esi
c000a81d:	c3                   	ret    

c000a81e <Device::hibernateAll()>:
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 14             	sub    esp,0x14
c000a822:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a826:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a828:	53                   	push   ebx
c000a829:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000a82c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a832:	83 c4 10             	add    esp,0x10
c000a835:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a838:	74 0f                	je     c000a849 <Device::hibernateAll()+0x2b>
c000a83a:	83 ec 0c             	sub    esp,0xc
c000a83d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a840:	e8 d9 ff ff ff       	call   c000a81e <Device::hibernateAll()>
c000a845:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a847:	eb e9                	jmp    c000a832 <Device::hibernateAll()+0x14>
c000a849:	83 c4 08             	add    esp,0x8
c000a84c:	5b                   	pop    ebx
c000a84d:	c3                   	ret    

c000a84e <Device::wakeAll()>:
c000a84e:	53                   	push   ebx
c000a84f:	83 ec 14             	sub    esp,0x14
c000a852:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a856:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a858:	53                   	push   ebx
c000a859:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000a85c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a862:	83 c4 10             	add    esp,0x10
c000a865:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a868:	74 0f                	je     c000a879 <Device::wakeAll()+0x2b>
c000a86a:	83 ec 0c             	sub    esp,0xc
c000a86d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a870:	e8 d9 ff ff ff       	call   c000a84e <Device::wakeAll()>
c000a875:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a877:	eb e9                	jmp    c000a862 <Device::wakeAll()+0x14>
c000a879:	83 c4 08             	add    esp,0x8
c000a87c:	5b                   	pop    ebx
c000a87d:	c3                   	ret    

c000a87e <Device::detectAll()>:
c000a87e:	53                   	push   ebx
c000a87f:	83 ec 14             	sub    esp,0x14
c000a882:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a886:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a888:	53                   	push   ebx
c000a889:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000a88c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a892:	83 c4 10             	add    esp,0x10
c000a895:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a898:	74 0f                	je     c000a8a9 <Device::detectAll()+0x2b>
c000a89a:	83 ec 0c             	sub    esp,0xc
c000a89d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a8a0:	e8 d9 ff ff ff       	call   c000a87e <Device::detectAll()>
c000a8a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a8a7:	eb e9                	jmp    c000a892 <Device::detectAll()+0x14>
c000a8a9:	83 c4 08             	add    esp,0x8
c000a8ac:	5b                   	pop    ebx
c000a8ad:	c3                   	ret    

c000a8ae <Device::disableLegacyAll()>:
c000a8ae:	c3                   	ret    
c000a8af:	90                   	nop

c000a8b0 <Device::loadDriversForAll()>:
c000a8b0:	c3                   	ret    
c000a8b1:	90                   	nop

c000a8b2 <Device::powerSavingAll(PowerSavingLevel)>:
c000a8b2:	56                   	push   esi
c000a8b3:	53                   	push   ebx
c000a8b4:	83 ec 0c             	sub    esp,0xc
c000a8b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a8bb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000a8bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a8c1:	56                   	push   esi
c000a8c2:	53                   	push   ebx
c000a8c3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000a8c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a8cc:	83 c4 10             	add    esp,0x10
c000a8cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a8d2:	74 0f                	je     c000a8e3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000a8d4:	52                   	push   edx
c000a8d5:	52                   	push   edx
c000a8d6:	56                   	push   esi
c000a8d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a8da:	e8 d3 ff ff ff       	call   c000a8b2 <Device::powerSavingAll(PowerSavingLevel)>
c000a8df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a8e1:	eb e9                	jmp    c000a8cc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000a8e3:	58                   	pop    eax
c000a8e4:	5b                   	pop    ebx
c000a8e5:	5e                   	pop    esi
c000a8e6:	c3                   	ret    
c000a8e7:	90                   	nop

c000a8e8 <Device::setName(char const*)>:
c000a8e8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000a8f0:	e9 4b 5d ff ff       	jmp    c0000640 <strcpy>
c000a8f5:	90                   	nop

c000a8f6 <Device::Device(char const*)>:
c000a8f6:	83 ec 1c             	sub    esp,0x1c
c000a8f9:	ba 10 b7 02 c0       	mov    edx,0xc002b710
c000a8fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a902:	89 10                	mov    DWORD PTR [eax],edx
c000a904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a908:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000a912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a916:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a924:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a92e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a932:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a93c:	83 ec 08             	sub    esp,0x8
c000a93f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a943:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a947:	e8 9c ff ff ff       	call   c000a8e8 <Device::setName(char const*)>
c000a94c:	83 c4 10             	add    esp,0x10
c000a94f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000a957:	83 ec 0c             	sub    esp,0xc
c000a95a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a95e:	e8 ac 5c 00 00       	call   c001060f <malloc>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a96c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a973:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000a977:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000a97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a981:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a987:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a98d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a991:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a997:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a99e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000a9a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ad:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000a9b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9b8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a9c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9c6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a9d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9d4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a9de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9e2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000a9ec:	90                   	nop
c000a9ed:	83 c4 1c             	add    esp,0x1c
c000a9f0:	c3                   	ret    
c000a9f1:	90                   	nop

c000a9f2 <Device::getName()>:
c000a9f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9f6:	05 d0 00 00 00       	add    eax,0xd0
c000a9fb:	c3                   	ret    

c000a9fc <Device::closeAll()>:
c000a9fc:	53                   	push   ebx
c000a9fd:	83 ec 08             	sub    esp,0x8
c000aa00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa04:	53                   	push   ebx
c000aa05:	e8 e8 ff ff ff       	call   c000a9f2 <Device::getName()>
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	68 c4 b6 02 c0       	push   0xc002b6c4
c000aa11:	e8 66 c5 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000aa16:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aa18:	6a 00                	push   0x0
c000aa1a:	6a 00                	push   0x0
c000aa1c:	6a 00                	push   0x0
c000aa1e:	53                   	push   ebx
c000aa1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000aa22:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000aa28:	83 c4 20             	add    esp,0x20
c000aa2b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aa2e:	74 12                	je     c000aa42 <Device::closeAll()+0x46>
c000aa30:	83 ec 0c             	sub    esp,0xc
c000aa33:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000aa36:	e8 c1 ff ff ff       	call   c000a9fc <Device::closeAll()>
c000aa3b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000aa3d:	83 c4 10             	add    esp,0x10
c000aa40:	eb e9                	jmp    c000aa2b <Device::closeAll()+0x2f>
c000aa42:	83 c4 08             	add    esp,0x8
c000aa45:	5b                   	pop    ebx
c000aa46:	c3                   	ret    
c000aa47:	90                   	nop

c000aa48 <DriverlessDevice::DriverlessDevice(char const*)>:
c000aa48:	83 ec 0c             	sub    esp,0xc
c000aa4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa4f:	83 ec 08             	sub    esp,0x8
c000aa52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa56:	50                   	push   eax
c000aa57:	e8 9a fe ff ff       	call   c000a8f6 <Device::Device(char const*)>
c000aa5c:	83 c4 10             	add    esp,0x10
c000aa5f:	ba 3c b7 02 c0       	mov    edx,0xc002b73c
c000aa64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa68:	89 10                	mov    DWORD PTR [eax],edx
c000aa6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa6e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000aa78:	90                   	nop
c000aa79:	83 c4 0c             	add    esp,0xc
c000aa7c:	c3                   	ret    
c000aa7d:	90                   	nop

c000aa7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000aa7e:	57                   	push   edi
c000aa7f:	56                   	push   esi
c000aa80:	53                   	push   ebx
c000aa81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa85:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000aa89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aa8d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000aa93:	75 0c                	jne    c000aaa1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000aa95:	52                   	push   edx
c000aa96:	52                   	push   edx
c000aa97:	53                   	push   ebx
c000aa98:	56                   	push   esi
c000aa99:	e8 8c eb 01 00       	call   c002962a <LinkedList<Device>::addElement(Device*)>
c000aa9e:	83 c4 10             	add    esp,0x10
c000aaa1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000aaa7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aaaa:	74 12                	je     c000aabe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000aaac:	50                   	push   eax
c000aaad:	57                   	push   edi
c000aaae:	56                   	push   esi
c000aaaf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000aab2:	e8 c7 ff ff ff       	call   c000aa7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000aab7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000aab9:	83 c4 10             	add    esp,0x10
c000aabc:	eb e9                	jmp    c000aaa7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000aabe:	5b                   	pop    ebx
c000aabf:	5e                   	pop    esi
c000aac0:	5f                   	pop    edi
c000aac1:	c3                   	ret    

c000aac2 <getDevicesOfType(DeviceType)>:
c000aac2:	53                   	push   ebx
c000aac3:	83 ec 14             	sub    esp,0x14
c000aac6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000aaca:	53                   	push   ebx
c000aacb:	e8 36 ec 01 00       	call   c0029706 <LinkedList<Device>::LinkedList()>
c000aad0:	83 c4 0c             	add    esp,0xc
c000aad3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aad7:	53                   	push   ebx
c000aad8:	ff 35 08 71 03 c0    	push   DWORD PTR ds:0xc0037108
c000aade:	e8 9b ff ff ff       	call   c000aa7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000aae3:	89 d8                	mov    eax,ebx
c000aae5:	83 c4 18             	add    esp,0x18
c000aae8:	5b                   	pop    ebx
c000aae9:	c2 04 00             	ret    0x4

c000aaec <HardDiskController::HardDiskController(char const*)>:
c000aaec:	83 ec 0c             	sub    esp,0xc
c000aaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf3:	83 ec 08             	sub    esp,0x8
c000aaf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aafa:	50                   	push   eax
c000aafb:	e8 f6 fd ff ff       	call   c000a8f6 <Device::Device(char const*)>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	ba 68 b7 02 c0       	mov    edx,0xc002b768
c000ab08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0c:	89 10                	mov    DWORD PTR [eax],edx
c000ab0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab12:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ab1c:	90                   	nop
c000ab1d:	83 c4 0c             	add    esp,0xc
c000ab20:	c3                   	ret    
c000ab21:	90                   	nop
c000ab22:	66 90                	xchg   ax,ax

c000ab24 <HardDiskController::~HardDiskController()>:
c000ab24:	83 ec 0c             	sub    esp,0xc
c000ab27:	ba 68 b7 02 c0       	mov    edx,0xc002b768
c000ab2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab30:	89 10                	mov    DWORD PTR [eax],edx
c000ab32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab36:	83 ec 0c             	sub    esp,0xc
c000ab39:	50                   	push   eax
c000ab3a:	e8 57 fb ff ff       	call   c000a696 <Device::~Device()>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	90                   	nop
c000ab43:	83 c4 0c             	add    esp,0xc
c000ab46:	c3                   	ret    
c000ab47:	90                   	nop

c000ab48 <HardDiskController::~HardDiskController()>:
c000ab48:	83 ec 0c             	sub    esp,0xc
c000ab4b:	83 ec 0c             	sub    esp,0xc
c000ab4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab52:	e8 cd ff ff ff       	call   c000ab24 <HardDiskController::~HardDiskController()>
c000ab57:	83 c4 10             	add    esp,0x10
c000ab5a:	83 ec 08             	sub    esp,0x8
c000ab5d:	68 58 01 00 00       	push   0x158
c000ab62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab66:	e8 ad 35 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	83 c4 0c             	add    esp,0xc
c000ab71:	c3                   	ret    

c000ab72 <PhysicalDisk::eject()>:
c000ab72:	83 c8 ff             	or     eax,0xffffffff
c000ab75:	c3                   	ret    

c000ab76 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ab76:	83 ec 0c             	sub    esp,0xc
c000ab79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7d:	83 ec 08             	sub    esp,0x8
c000ab80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab84:	50                   	push   eax
c000ab85:	e8 6c fd ff ff       	call   c000a8f6 <Device::Device(char const*)>
c000ab8a:	83 c4 10             	add    esp,0x10
c000ab8d:	ba 94 b7 02 c0       	mov    edx,0xc002b794
c000ab92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab96:	89 10                	mov    DWORD PTR [eax],edx
c000ab98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab9c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000aba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000abae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abb2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000abbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000abc4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000abca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000abd8:	90                   	nop
c000abd9:	83 c4 0c             	add    esp,0xc
c000abdc:	c3                   	ret    
c000abdd:	90                   	nop

c000abde <PhysicalDisk::startCache()>:
c000abde:	56                   	push   esi
c000abdf:	53                   	push   ebx
c000abe0:	83 ec 10             	sub    esp,0x10
c000abe3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000abe7:	6a 44                	push   0x44
c000abe9:	e8 21 5a 00 00       	call   c001060f <malloc>
c000abee:	89 c6                	mov    esi,eax
c000abf0:	58                   	pop    eax
c000abf1:	5a                   	pop    edx
c000abf2:	53                   	push   ebx
c000abf3:	56                   	push   esi
c000abf4:	e8 a7 13 00 00       	call   c000bfa0 <VCache::VCache(PhysicalDisk*)>
c000abf9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000abff:	83 c4 14             	add    esp,0x14
c000ac02:	5b                   	pop    ebx
c000ac03:	5e                   	pop    esi
c000ac04:	c3                   	ret    
c000ac05:	90                   	nop

c000ac06 <PhysicalDisk::~PhysicalDisk()>:
c000ac06:	83 ec 0c             	sub    esp,0xc
c000ac09:	ba 94 b7 02 c0       	mov    edx,0xc002b794
c000ac0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac12:	89 10                	mov    DWORD PTR [eax],edx
c000ac14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac18:	83 ec 0c             	sub    esp,0xc
c000ac1b:	50                   	push   eax
c000ac1c:	e8 75 fa ff ff       	call   c000a696 <Device::~Device()>
c000ac21:	83 c4 10             	add    esp,0x10
c000ac24:	90                   	nop
c000ac25:	83 c4 0c             	add    esp,0xc
c000ac28:	c3                   	ret    
c000ac29:	90                   	nop

c000ac2a <PhysicalDisk::~PhysicalDisk()>:
c000ac2a:	83 ec 0c             	sub    esp,0xc
c000ac2d:	83 ec 0c             	sub    esp,0xc
c000ac30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac34:	e8 cd ff ff ff       	call   c000ac06 <PhysicalDisk::~PhysicalDisk()>
c000ac39:	83 c4 10             	add    esp,0x10
c000ac3c:	83 ec 08             	sub    esp,0x8
c000ac3f:	68 6c 01 00 00       	push   0x16c
c000ac44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac48:	e8 cb 34 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c000ac4d:	83 c4 10             	add    esp,0x10
c000ac50:	83 c4 0c             	add    esp,0xc
c000ac53:	c3                   	ret    

c000ac54 <startGUI(void*)>:
c000ac54:	55                   	push   ebp
c000ac55:	89 e5                	mov    ebp,esp
c000ac57:	83 ec 08             	sub    esp,0x8
c000ac5a:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c000ac62:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000ac67:	85 c0                	test   eax,eax
c000ac69:	75 01                	jne    c000ac6c <startGUI(void*)+0x18>
c000ac6b:	fb                   	sti    
c000ac6c:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c000ac71:	83 ec 04             	sub    esp,0x4
c000ac74:	6a 00                	push   0x0
c000ac76:	50                   	push   eax
c000ac77:	68 c4 b7 02 c0       	push   0xc002b7c4
c000ac7c:	e8 df bf 00 00       	call   c0016c60 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c000ac89:	83 ec 04             	sub    esp,0x4
c000ac8c:	6a 00                	push   0x0
c000ac8e:	50                   	push   eax
c000ac8f:	68 de b7 02 c0       	push   0xc002b7de
c000ac94:	e8 c7 bf 00 00       	call   c0016c60 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000ac99:	83 c4 10             	add    esp,0x10
c000ac9c:	eb fe                	jmp    c000ac9c <startGUI(void*)+0x48>

c000ac9e <startGUIVESA(void*)>:
c000ac9e:	55                   	push   ebp
c000ac9f:	89 e5                	mov    ebp,esp
c000aca1:	83 ec 08             	sub    esp,0x8
c000aca4:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c000acac:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000acb1:	85 c0                	test   eax,eax
c000acb3:	75 01                	jne    c000acb6 <startGUIVESA(void*)+0x18>
c000acb5:	fb                   	sti    
c000acb6:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c000acbb:	83 ec 04             	sub    esp,0x4
c000acbe:	6a 00                	push   0x0
c000acc0:	50                   	push   eax
c000acc1:	68 fc b7 02 c0       	push   0xc002b7fc
c000acc6:	e8 95 bf 00 00       	call   c0016c60 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000accb:	83 c4 10             	add    esp,0x10
c000acce:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c000acd3:	83 ec 04             	sub    esp,0x4
c000acd6:	6a 00                	push   0x0
c000acd8:	50                   	push   eax
c000acd9:	68 de b7 02 c0       	push   0xc002b7de
c000acde:	e8 7d bf 00 00       	call   c0016c60 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000ace3:	83 c4 10             	add    esp,0x10
c000ace6:	eb fe                	jmp    c000ace6 <startGUIVESA(void*)+0x48>

c000ace8 <sendKeyToTerminal(unsigned char)>:
c000ace8:	55                   	push   ebp
c000ace9:	89 e5                	mov    ebp,esp
c000aceb:	83 ec 28             	sub    esp,0x28
c000acee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acf1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000acf4:	a1 f4 71 03 c0       	mov    eax,ds:0xc00371f4
c000acf9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000acfd:	83 ec 08             	sub    esp,0x8
c000ad00:	52                   	push   edx
c000ad01:	50                   	push   eax
c000ad02:	e8 15 8a 00 00       	call   c001371c <VgaText::receiveKey(unsigned char)>
c000ad07:	83 c4 10             	add    esp,0x10
c000ad0a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000ad0e:	83 f8 0a             	cmp    eax,0xa
c000ad11:	74 16                	je     c000ad29 <sendKeyToTerminal(unsigned char)+0x41>
c000ad13:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000ad17:	83 f8 03             	cmp    eax,0x3
c000ad1a:	74 0d                	je     c000ad29 <sendKeyToTerminal(unsigned char)+0x41>
c000ad1c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000ad20:	83 f8 1c             	cmp    eax,0x1c
c000ad23:	0f 85 92 00 00 00    	jne    c000adbb <sendKeyToTerminal(unsigned char)+0xd3>
c000ad29:	fa                   	cli    
c000ad2a:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000ad2f:	83 c0 01             	add    eax,0x1
c000ad32:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c000ad37:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c000ad3c:	83 c0 01             	add    eax,0x1
c000ad3f:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c000ad44:	a1 80 66 03 c0       	mov    eax,ds:0xc0036680
c000ad49:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ad4c:	c7 05 80 66 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036680,0x0
c000ad56:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000ad5a:	74 1f                	je     c000ad7b <sendKeyToTerminal(unsigned char)+0x93>
c000ad5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ad5f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000ad62:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ad65:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ad68:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ad6b:	83 ec 0c             	sub    esp,0xc
c000ad6e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ad71:	e8 e2 cb 00 00       	call   c0017958 <unblockTask(ThreadControlBlock*)>
c000ad76:	83 c4 10             	add    esp,0x10
c000ad79:	eb db                	jmp    c000ad56 <sendKeyToTerminal(unsigned char)+0x6e>
c000ad7b:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c000ad80:	83 e8 01             	sub    eax,0x1
c000ad83:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c000ad88:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c000ad8d:	85 c0                	test   eax,eax
c000ad8f:	75 18                	jne    c000ada9 <sendKeyToTerminal(unsigned char)+0xc1>
c000ad91:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c000ad96:	85 c0                	test   eax,eax
c000ad98:	74 0f                	je     c000ada9 <sendKeyToTerminal(unsigned char)+0xc1>
c000ad9a:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c000ada4:	e8 53 c8 00 00       	call   c00175fc <schedule()>
c000ada9:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c000adb1:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000adb6:	85 c0                	test   eax,eax
c000adb8:	75 01                	jne    c000adbb <sendKeyToTerminal(unsigned char)+0xd3>
c000adba:	fb                   	sti    
c000adbb:	90                   	nop
c000adbc:	c9                   	leave  
c000adbd:	c3                   	ret    

c000adbe <sendKeyboardToken(KeyboardToken)>:
c000adbe:	55                   	push   ebp
c000adbf:	89 e5                	mov    ebp,esp
c000adc1:	83 ec 18             	sub    esp,0x18
c000adc4:	e8 20 65 00 00       	call   c00112e9 <KeUserIOReceived()>
c000adc9:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000adcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adcf:	0f b7 c0             	movzx  eax,ax
c000add2:	83 f2 01             	xor    edx,0x1
c000add5:	88 90 a0 66 03 c0    	mov    BYTE PTR [eax-0x3ffc9960],dl
c000addb:	a1 88 66 03 c0       	mov    eax,ds:0xc0036688
c000ade0:	85 c0                	test   eax,eax
c000ade2:	74 24                	je     c000ae08 <sendKeyboardToken(KeyboardToken)+0x4a>
c000ade4:	8b 0d 88 66 03 c0    	mov    ecx,DWORD PTR ds:0xc0036688
c000adea:	83 ec 04             	sub    esp,0x4
c000aded:	68 a0 66 03 c0       	push   0xc00366a0
c000adf2:	83 ec 08             	sub    esp,0x8
c000adf5:	89 e2                	mov    edx,esp
c000adf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adfa:	89 02                	mov    DWORD PTR [edx],eax
c000adfc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000adff:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ae03:	ff d1                	call   ecx
c000ae05:	83 c4 10             	add    esp,0x10
c000ae08:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ae0c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ae0f:	0f b6 c0             	movzx  eax,al
c000ae12:	85 c0                	test   eax,eax
c000ae14:	0f 84 da 00 00 00    	je     c000aef4 <sendKeyboardToken(KeyboardToken)+0x136>
c000ae1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae1d:	0f b7 c0             	movzx  eax,ax
c000ae20:	3d 18 03 00 00       	cmp    eax,0x318
c000ae25:	75 06                	jne    c000ae2d <sendKeyboardToken(KeyboardToken)+0x6f>
c000ae27:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ae2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae30:	0f b7 c0             	movzx  eax,ax
c000ae33:	3d 19 03 00 00       	cmp    eax,0x319
c000ae38:	75 06                	jne    c000ae40 <sendKeyboardToken(KeyboardToken)+0x82>
c000ae3a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000ae40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae43:	0f b7 c0             	movzx  eax,ax
c000ae46:	3d 1a 03 00 00       	cmp    eax,0x31a
c000ae4b:	75 06                	jne    c000ae53 <sendKeyboardToken(KeyboardToken)+0x95>
c000ae4d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000ae53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae56:	0f b7 c0             	movzx  eax,ax
c000ae59:	3d 1b 03 00 00       	cmp    eax,0x31b
c000ae5e:	75 06                	jne    c000ae66 <sendKeyboardToken(KeyboardToken)+0xa8>
c000ae60:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000ae66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae69:	0f b7 c0             	movzx  eax,ax
c000ae6c:	3d 1c 03 00 00       	cmp    eax,0x31c
c000ae71:	75 06                	jne    c000ae79 <sendKeyboardToken(KeyboardToken)+0xbb>
c000ae73:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000ae79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae7c:	0f b7 c0             	movzx  eax,ax
c000ae7f:	3d 1d 03 00 00       	cmp    eax,0x31d
c000ae84:	75 06                	jne    c000ae8c <sendKeyboardToken(KeyboardToken)+0xce>
c000ae86:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ae8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae8f:	0f b7 c0             	movzx  eax,ax
c000ae92:	3d 1e 03 00 00       	cmp    eax,0x31e
c000ae97:	75 06                	jne    c000ae9f <sendKeyboardToken(KeyboardToken)+0xe1>
c000ae99:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000ae9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aea2:	0f b7 c0             	movzx  eax,ax
c000aea5:	3d 1f 03 00 00       	cmp    eax,0x31f
c000aeaa:	75 06                	jne    c000aeb2 <sendKeyboardToken(KeyboardToken)+0xf4>
c000aeac:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000aeb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aeb5:	0f b7 c0             	movzx  eax,ax
c000aeb8:	3d 20 03 00 00       	cmp    eax,0x320
c000aebd:	75 06                	jne    c000aec5 <sendKeyboardToken(KeyboardToken)+0x107>
c000aebf:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000aec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aec8:	0f b7 c0             	movzx  eax,ax
c000aecb:	3d 21 03 00 00       	cmp    eax,0x321
c000aed0:	75 06                	jne    c000aed8 <sendKeyboardToken(KeyboardToken)+0x11a>
c000aed2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000aed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aedb:	0f b7 c0             	movzx  eax,ax
c000aede:	3d 22 03 00 00       	cmp    eax,0x322
c000aee3:	0f 85 f1 00 00 00    	jne    c000afda <sendKeyboardToken(KeyboardToken)+0x21c>
c000aee9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000aeef:	e9 e6 00 00 00       	jmp    c000afda <sendKeyboardToken(KeyboardToken)+0x21c>
c000aef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aef7:	0f b7 c0             	movzx  eax,ax
c000aefa:	3d 18 03 00 00       	cmp    eax,0x318
c000aeff:	75 0a                	jne    c000af0b <sendKeyboardToken(KeyboardToken)+0x14d>
c000af01:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000af07:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af0e:	0f b7 c0             	movzx  eax,ax
c000af11:	3d 19 03 00 00       	cmp    eax,0x319
c000af16:	75 0a                	jne    c000af22 <sendKeyboardToken(KeyboardToken)+0x164>
c000af18:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000af1e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af25:	0f b7 c0             	movzx  eax,ax
c000af28:	3d 1a 03 00 00       	cmp    eax,0x31a
c000af2d:	75 0a                	jne    c000af39 <sendKeyboardToken(KeyboardToken)+0x17b>
c000af2f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000af35:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af3c:	0f b7 c0             	movzx  eax,ax
c000af3f:	3d 1b 03 00 00       	cmp    eax,0x31b
c000af44:	75 0a                	jne    c000af50 <sendKeyboardToken(KeyboardToken)+0x192>
c000af46:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000af4c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af53:	0f b7 c0             	movzx  eax,ax
c000af56:	3d 1c 03 00 00       	cmp    eax,0x31c
c000af5b:	75 0a                	jne    c000af67 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000af5d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000af63:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af6a:	0f b7 c0             	movzx  eax,ax
c000af6d:	3d 1d 03 00 00       	cmp    eax,0x31d
c000af72:	75 0a                	jne    c000af7e <sendKeyboardToken(KeyboardToken)+0x1c0>
c000af74:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000af7a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af81:	0f b7 c0             	movzx  eax,ax
c000af84:	3d 1e 03 00 00       	cmp    eax,0x31e
c000af89:	75 0a                	jne    c000af95 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000af8b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000af91:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000af95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af98:	0f b7 c0             	movzx  eax,ax
c000af9b:	3d 1f 03 00 00       	cmp    eax,0x31f
c000afa0:	75 0a                	jne    c000afac <sendKeyboardToken(KeyboardToken)+0x1ee>
c000afa2:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000afa8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000afac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afaf:	0f b7 c0             	movzx  eax,ax
c000afb2:	3d 20 03 00 00       	cmp    eax,0x320
c000afb7:	75 0a                	jne    c000afc3 <sendKeyboardToken(KeyboardToken)+0x205>
c000afb9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000afbf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000afc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afc6:	0f b7 c0             	movzx  eax,ax
c000afc9:	3d 21 03 00 00       	cmp    eax,0x321
c000afce:	75 0a                	jne    c000afda <sendKeyboardToken(KeyboardToken)+0x21c>
c000afd0:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000afd6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000afda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afdd:	0f b7 c0             	movzx  eax,ax
c000afe0:	3d 00 02 00 00       	cmp    eax,0x200
c000afe5:	75 2f                	jne    c000b016 <sendKeyboardToken(KeyboardToken)+0x258>
c000afe7:	a0 a0 6a 03 c0       	mov    al,ds:0xc0036aa0
c000afec:	83 f0 01             	xor    eax,0x1
c000afef:	0f b6 c0             	movzx  eax,al
c000aff2:	85 c0                	test   eax,eax
c000aff4:	74 20                	je     c000b016 <sendKeyboardToken(KeyboardToken)+0x258>
c000aff6:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c000affb:	6a 01                	push   0x1
c000affd:	6a 00                	push   0x0
c000afff:	68 54 ac 00 c0       	push   0xc000ac54
c000b004:	50                   	push   eax
c000b005:	e8 26 c3 00 00       	call   c0017330 <Process::createThread(void (*)(void*), void*, int)>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	c6 05 a0 6a 03 c0 01 	mov    BYTE PTR ds:0xc0036aa0,0x1
c000b014:	eb 3a                	jmp    c000b050 <sendKeyboardToken(KeyboardToken)+0x292>
c000b016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b019:	0f b7 c0             	movzx  eax,ax
c000b01c:	3d 01 02 00 00       	cmp    eax,0x201
c000b021:	75 2d                	jne    c000b050 <sendKeyboardToken(KeyboardToken)+0x292>
c000b023:	a0 a0 6a 03 c0       	mov    al,ds:0xc0036aa0
c000b028:	83 f0 01             	xor    eax,0x1
c000b02b:	0f b6 c0             	movzx  eax,al
c000b02e:	85 c0                	test   eax,eax
c000b030:	74 1e                	je     c000b050 <sendKeyboardToken(KeyboardToken)+0x292>
c000b032:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c000b037:	6a 01                	push   0x1
c000b039:	6a 00                	push   0x0
c000b03b:	68 9e ac 00 c0       	push   0xc000ac9e
c000b040:	50                   	push   eax
c000b041:	e8 ea c2 00 00       	call   c0017330 <Process::createThread(void (*)(void*), void*, int)>
c000b046:	83 c4 10             	add    esp,0x10
c000b049:	c6 05 a0 6a 03 c0 01 	mov    BYTE PTR ds:0xc0036aa0,0x1
c000b050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b053:	0f b7 c0             	movzx  eax,ax
c000b056:	3d 25 03 00 00       	cmp    eax,0x325
c000b05b:	75 06                	jne    c000b063 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000b05d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000b063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b066:	0f b7 c0             	movzx  eax,ax
c000b069:	3d 24 03 00 00       	cmp    eax,0x324
c000b06e:	75 06                	jne    c000b076 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000b070:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000b076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b079:	0f b7 c0             	movzx  eax,ax
c000b07c:	3d 23 03 00 00       	cmp    eax,0x323
c000b081:	75 06                	jne    c000b089 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000b083:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000b089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b08c:	0f b7 c0             	movzx  eax,ax
c000b08f:	3d 26 03 00 00       	cmp    eax,0x326
c000b094:	75 06                	jne    c000b09c <sendKeyboardToken(KeyboardToken)+0x2de>
c000b096:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000b09c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b09f:	0f b7 c0             	movzx  eax,ax
c000b0a2:	3d 27 03 00 00       	cmp    eax,0x327
c000b0a7:	75 06                	jne    c000b0af <sendKeyboardToken(KeyboardToken)+0x2f1>
c000b0a9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000b0af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0b2:	0f b7 c0             	movzx  eax,ax
c000b0b5:	3d 22 03 00 00       	cmp    eax,0x322
c000b0ba:	75 06                	jne    c000b0c2 <sendKeyboardToken(KeyboardToken)+0x304>
c000b0bc:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000b0c2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000b0c6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b0c9:	83 f0 01             	xor    eax,0x1
c000b0cc:	0f b6 c0             	movzx  eax,al
c000b0cf:	85 c0                	test   eax,eax
c000b0d1:	74 7c                	je     c000b14f <sendKeyboardToken(KeyboardToken)+0x391>
c000b0d3:	a0 a1 67 03 c0       	mov    al,ds:0xc00367a1
c000b0d8:	0f b6 c0             	movzx  eax,al
c000b0db:	85 c0                	test   eax,eax
c000b0dd:	74 43                	je     c000b122 <sendKeyboardToken(KeyboardToken)+0x364>
c000b0df:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b0e3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000b0e7:	85 c0                	test   eax,eax
c000b0e9:	74 2b                	je     c000b116 <sendKeyboardToken(KeyboardToken)+0x358>
c000b0eb:	8b 15 a4 6a 03 c0    	mov    edx,DWORD PTR ds:0xc0036aa4
c000b0f1:	89 d0                	mov    eax,edx
c000b0f3:	c1 e0 02             	shl    eax,0x2
c000b0f6:	01 d0                	add    eax,edx
c000b0f8:	01 c0                	add    eax,eax
c000b0fa:	a3 a4 6a 03 c0       	mov    ds:0xc0036aa4,eax
c000b0ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b102:	0f b7 c0             	movzx  eax,ax
c000b105:	8d 50 d0             	lea    edx,[eax-0x30]
c000b108:	a1 a4 6a 03 c0       	mov    eax,ds:0xc0036aa4
c000b10d:	01 d0                	add    eax,edx
c000b10f:	a3 a4 6a 03 c0       	mov    ds:0xc0036aa4,eax
c000b114:	eb 71                	jmp    c000b187 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000b116:	c7 05 a4 6a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036aa4,0x0
c000b120:	eb 65                	jmp    c000b187 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000b122:	a1 a4 6a 03 c0       	mov    eax,ds:0xc0036aa4
c000b127:	85 c0                	test   eax,eax
c000b129:	74 18                	je     c000b143 <sendKeyboardToken(KeyboardToken)+0x385>
c000b12b:	a1 a4 6a 03 c0       	mov    eax,ds:0xc0036aa4
c000b130:	0f b6 c0             	movzx  eax,al
c000b133:	83 ec 0c             	sub    esp,0xc
c000b136:	50                   	push   eax
c000b137:	e8 ac fb ff ff       	call   c000ace8 <sendKeyToTerminal(unsigned char)>
c000b13c:	83 c4 10             	add    esp,0x10
c000b13f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b143:	c7 05 a4 6a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036aa4,0x0
c000b14d:	eb 38                	jmp    c000b187 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000b14f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b152:	0f b7 c0             	movzx  eax,ax
c000b155:	3d 01 01 00 00       	cmp    eax,0x101
c000b15a:	75 2b                	jne    c000b187 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000b15c:	a1 a4 6a 03 c0       	mov    eax,ds:0xc0036aa4
c000b161:	85 c0                	test   eax,eax
c000b163:	74 18                	je     c000b17d <sendKeyboardToken(KeyboardToken)+0x3bf>
c000b165:	a1 a4 6a 03 c0       	mov    eax,ds:0xc0036aa4
c000b16a:	0f b6 c0             	movzx  eax,al
c000b16d:	83 ec 0c             	sub    esp,0xc
c000b170:	50                   	push   eax
c000b171:	e8 72 fb ff ff       	call   c000ace8 <sendKeyToTerminal(unsigned char)>
c000b176:	83 c4 10             	add    esp,0x10
c000b179:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b17d:	c7 05 a4 6a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036aa4,0x0
c000b187:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000b18a:	83 f0 01             	xor    eax,0x1
c000b18d:	0f b6 c0             	movzx  eax,al
c000b190:	85 c0                	test   eax,eax
c000b192:	74 5a                	je     c000b1ee <sendKeyboardToken(KeyboardToken)+0x430>
c000b194:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b197:	83 f0 01             	xor    eax,0x1
c000b19a:	0f b6 c0             	movzx  eax,al
c000b19d:	85 c0                	test   eax,eax
c000b19f:	74 4d                	je     c000b1ee <sendKeyboardToken(KeyboardToken)+0x430>
c000b1a1:	a0 a0 67 03 c0       	mov    al,ds:0xc00367a0
c000b1a6:	83 f0 01             	xor    eax,0x1
c000b1a9:	0f b6 c0             	movzx  eax,al
c000b1ac:	85 c0                	test   eax,eax
c000b1ae:	74 3e                	je     c000b1ee <sendKeyboardToken(KeyboardToken)+0x430>
c000b1b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1b3:	0f b7 c0             	movzx  eax,ax
c000b1b6:	83 f8 1f             	cmp    eax,0x1f
c000b1b9:	76 0b                	jbe    c000b1c6 <sendKeyboardToken(KeyboardToken)+0x408>
c000b1bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1be:	0f b7 c0             	movzx  eax,ax
c000b1c1:	83 f8 7e             	cmp    eax,0x7e
c000b1c4:	76 16                	jbe    c000b1dc <sendKeyboardToken(KeyboardToken)+0x41e>
c000b1c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1c9:	0f b7 c0             	movzx  eax,ax
c000b1cc:	83 f8 0a             	cmp    eax,0xa
c000b1cf:	74 0b                	je     c000b1dc <sendKeyboardToken(KeyboardToken)+0x41e>
c000b1d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1d4:	0f b7 c0             	movzx  eax,ax
c000b1d7:	83 f8 08             	cmp    eax,0x8
c000b1da:	75 12                	jne    c000b1ee <sendKeyboardToken(KeyboardToken)+0x430>
c000b1dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1df:	0f b6 c0             	movzx  eax,al
c000b1e2:	83 ec 0c             	sub    esp,0xc
c000b1e5:	50                   	push   eax
c000b1e6:	e8 fd fa ff ff       	call   c000ace8 <sendKeyToTerminal(unsigned char)>
c000b1eb:	83 c4 10             	add    esp,0x10
c000b1ee:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000b1f1:	83 f0 01             	xor    eax,0x1
c000b1f4:	0f b6 c0             	movzx  eax,al
c000b1f7:	85 c0                	test   eax,eax
c000b1f9:	74 5d                	je     c000b258 <sendKeyboardToken(KeyboardToken)+0x49a>
c000b1fb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b1fe:	83 f0 01             	xor    eax,0x1
c000b201:	0f b6 c0             	movzx  eax,al
c000b204:	85 c0                	test   eax,eax
c000b206:	74 50                	je     c000b258 <sendKeyboardToken(KeyboardToken)+0x49a>
c000b208:	a0 a0 67 03 c0       	mov    al,ds:0xc00367a0
c000b20d:	0f b6 c0             	movzx  eax,al
c000b210:	85 c0                	test   eax,eax
c000b212:	74 44                	je     c000b258 <sendKeyboardToken(KeyboardToken)+0x49a>
c000b214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b217:	0f b7 c0             	movzx  eax,ax
c000b21a:	83 f8 3f             	cmp    eax,0x3f
c000b21d:	76 39                	jbe    c000b258 <sendKeyboardToken(KeyboardToken)+0x49a>
c000b21f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b222:	0f b7 c0             	movzx  eax,ax
c000b225:	83 f8 7f             	cmp    eax,0x7f
c000b228:	77 2e                	ja     c000b258 <sendKeyboardToken(KeyboardToken)+0x49a>
c000b22a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b22d:	88 c2                	mov    dl,al
c000b22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b232:	0f b7 c0             	movzx  eax,ax
c000b235:	83 f8 5f             	cmp    eax,0x5f
c000b238:	76 04                	jbe    c000b23e <sendKeyboardToken(KeyboardToken)+0x480>
c000b23a:	b0 20                	mov    al,0x20
c000b23c:	eb 02                	jmp    c000b240 <sendKeyboardToken(KeyboardToken)+0x482>
c000b23e:	b0 00                	mov    al,0x0
c000b240:	89 d1                	mov    ecx,edx
c000b242:	29 c1                	sub    ecx,eax
c000b244:	89 c8                	mov    eax,ecx
c000b246:	83 e8 40             	sub    eax,0x40
c000b249:	0f b6 c0             	movzx  eax,al
c000b24c:	83 ec 0c             	sub    esp,0xc
c000b24f:	50                   	push   eax
c000b250:	e8 93 fa ff ff       	call   c000ace8 <sendKeyToTerminal(unsigned char)>
c000b255:	83 c4 10             	add    esp,0x10
c000b258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b25b:	0f b7 c0             	movzx  eax,ax
c000b25e:	3d 00 03 00 00       	cmp    eax,0x300
c000b263:	75 12                	jne    c000b277 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000b265:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b268:	83 f0 01             	xor    eax,0x1
c000b26b:	0f b6 c0             	movzx  eax,al
c000b26e:	85 c0                	test   eax,eax
c000b270:	74 05                	je     c000b277 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000b272:	e8 9a 7b 00 00       	call   c0012e11 <doTerminalCycle()>
c000b277:	90                   	nop
c000b278:	c9                   	leave  
c000b279:	c3                   	ret    

c000b27a <clearInternalKeybuffer(VgaText*)>:
c000b27a:	55                   	push   ebp
c000b27b:	89 e5                	mov    ebp,esp
c000b27d:	83 ec 08             	sub    esp,0x8
c000b280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b283:	05 02 01 00 00       	add    eax,0x102
c000b288:	83 ec 0c             	sub    esp,0xc
c000b28b:	50                   	push   eax
c000b28c:	e8 df 52 ff ff       	call   c0000570 <strlen>
c000b291:	83 c4 10             	add    esp,0x10
c000b294:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b297:	81 c2 02 01 00 00    	add    edx,0x102
c000b29d:	83 ec 04             	sub    esp,0x4
c000b2a0:	50                   	push   eax
c000b2a1:	6a 00                	push   0x0
c000b2a3:	52                   	push   edx
c000b2a4:	e8 47 52 ff ff       	call   c00004f0 <memset>
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	90                   	nop
c000b2ad:	c9                   	leave  
c000b2ae:	c3                   	ret    

c000b2af <readKeyboard(VgaText*, char*, unsigned long)>:
c000b2af:	55                   	push   ebp
c000b2b0:	89 e5                	mov    ebp,esp
c000b2b2:	83 ec 18             	sub    esp,0x18
c000b2b5:	a1 88 66 03 c0       	mov    eax,ds:0xc0036688
c000b2ba:	85 c0                	test   eax,eax
c000b2bc:	74 2a                	je     c000b2e8 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000b2be:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000b2c4:	8b 0d 88 66 03 c0    	mov    ecx,DWORD PTR ds:0xc0036688
c000b2ca:	83 ec 04             	sub    esp,0x4
c000b2cd:	68 a0 66 03 c0       	push   0xc00366a0
c000b2d2:	83 ec 08             	sub    esp,0x8
c000b2d5:	89 e2                	mov    edx,esp
c000b2d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000b2da:	89 02                	mov    DWORD PTR [edx],eax
c000b2dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000b2df:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000b2e3:	ff d1                	call   ecx
c000b2e5:	83 c4 10             	add    esp,0x10
c000b2e8:	fb                   	sti    
c000b2e9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000b2f0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b2f4:	0f 84 08 01 00 00    	je     c000b402 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000b2fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2fd:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000b303:	0f be c0             	movsx  eax,al
c000b306:	85 c0                	test   eax,eax
c000b308:	75 27                	jne    c000b331 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000b30a:	fa                   	cli    
c000b30b:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000b310:	83 c0 01             	add    eax,0x1
c000b313:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c000b318:	e8 df c2 00 00       	call   c00175fc <schedule()>
c000b31d:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c000b325:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000b32a:	85 c0                	test   eax,eax
c000b32c:	75 cc                	jne    c000b2fa <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000b32e:	fb                   	sti    
c000b32f:	eb c9                	jmp    c000b2fa <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000b331:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b334:	8d 50 01             	lea    edx,[eax+0x1]
c000b337:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000b33a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b33d:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000b343:	88 10                	mov    BYTE PTR [eax],dl
c000b345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b348:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000b34e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000b351:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b355:	83 f8 03             	cmp    eax,0x3
c000b358:	75 1e                	jne    c000b378 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000b35a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b35f:	8b 00                	mov    eax,DWORD PTR [eax]
c000b361:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b364:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000b36a:	83 ec 08             	sub    esp,0x8
c000b36d:	6a 02                	push   0x2
c000b36f:	50                   	push   eax
c000b370:	e8 0a 69 00 00       	call   c0011c7f <KeRaiseSignal(SigHandlerBlock*, int)>
c000b375:	83 c4 10             	add    esp,0x10
c000b378:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b37c:	83 f8 1c             	cmp    eax,0x1c
c000b37f:	75 1e                	jne    c000b39f <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000b381:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b386:	8b 00                	mov    eax,DWORD PTR [eax]
c000b388:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b38b:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000b391:	83 ec 08             	sub    esp,0x8
c000b394:	6a 09                	push   0x9
c000b396:	50                   	push   eax
c000b397:	e8 e3 68 00 00       	call   c0011c7f <KeRaiseSignal(SigHandlerBlock*, int)>
c000b39c:	83 c4 10             	add    esp,0x10
c000b39f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3a2:	05 02 01 00 00       	add    eax,0x102
c000b3a7:	83 ec 0c             	sub    esp,0xc
c000b3aa:	50                   	push   eax
c000b3ab:	e8 c0 51 ff ff       	call   c0000570 <strlen>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b3b6:	81 c2 02 01 00 00    	add    edx,0x102
c000b3bc:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b3bf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b3c2:	81 c2 02 01 00 00    	add    edx,0x102
c000b3c8:	83 ec 04             	sub    esp,0x4
c000b3cb:	50                   	push   eax
c000b3cc:	51                   	push   ecx
c000b3cd:	52                   	push   edx
c000b3ce:	e8 fd 4f ff ff       	call   c00003d0 <memmove>
c000b3d3:	83 c4 10             	add    esp,0x10
c000b3d6:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000b3da:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000b3de:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b3e2:	83 f8 0a             	cmp    eax,0xa
c000b3e5:	74 16                	je     c000b3fd <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000b3e7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b3eb:	83 f8 03             	cmp    eax,0x3
c000b3ee:	74 0d                	je     c000b3fd <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000b3f0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b3f4:	83 f8 1c             	cmp    eax,0x1c
c000b3f7:	0f 85 f3 fe ff ff    	jne    c000b2f0 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000b3fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b400:	eb 03                	jmp    c000b405 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000b402:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b405:	c9                   	leave  
c000b406:	c3                   	ret    
c000b407:	90                   	nop

c000b408 <Keyboard::Keyboard(char const*)>:
c000b408:	83 ec 0c             	sub    esp,0xc
c000b40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40f:	83 ec 08             	sub    esp,0x8
c000b412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b416:	50                   	push   eax
c000b417:	e8 da f4 ff ff       	call   c000a8f6 <Device::Device(char const*)>
c000b41c:	83 c4 10             	add    esp,0x10
c000b41f:	ba 20 b8 02 c0       	mov    edx,0xc002b820
c000b424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b428:	89 10                	mov    DWORD PTR [eax],edx
c000b42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000b438:	c6 05 84 66 03 c0 01 	mov    BYTE PTR ds:0xc0036684,0x1
c000b43f:	90                   	nop
c000b440:	83 c4 0c             	add    esp,0xc
c000b443:	c3                   	ret    

c000b444 <Keyboard::~Keyboard()>:
c000b444:	83 ec 0c             	sub    esp,0xc
c000b447:	ba 20 b8 02 c0       	mov    edx,0xc002b820
c000b44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b450:	89 10                	mov    DWORD PTR [eax],edx
c000b452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b456:	83 ec 0c             	sub    esp,0xc
c000b459:	50                   	push   eax
c000b45a:	e8 37 f2 ff ff       	call   c000a696 <Device::~Device()>
c000b45f:	83 c4 10             	add    esp,0x10
c000b462:	90                   	nop
c000b463:	83 c4 0c             	add    esp,0xc
c000b466:	c3                   	ret    
c000b467:	90                   	nop

c000b468 <Keyboard::~Keyboard()>:
c000b468:	83 ec 0c             	sub    esp,0xc
c000b46b:	83 ec 0c             	sub    esp,0xc
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	e8 cd ff ff ff       	call   c000b444 <Keyboard::~Keyboard()>
c000b477:	83 c4 10             	add    esp,0x10
c000b47a:	83 ec 08             	sub    esp,0x8
c000b47d:	68 5c 01 00 00       	push   0x15c
c000b482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b486:	e8 8d 2c 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c000b48b:	83 c4 10             	add    esp,0x10
c000b48e:	83 c4 0c             	add    esp,0xc
c000b491:	c3                   	ret    

c000b492 <LogicalDisk::close(int, int, void*)>:
c000b492:	83 c8 ff             	or     eax,0xffffffff
c000b495:	c3                   	ret    

c000b496 <LogicalDisk::~LogicalDisk()>:
c000b496:	83 ec 0c             	sub    esp,0xc
c000b499:	ba 98 b8 02 c0       	mov    edx,0xc002b898
c000b49e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a2:	89 10                	mov    DWORD PTR [eax],edx
c000b4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a8:	83 ec 0c             	sub    esp,0xc
c000b4ab:	50                   	push   eax
c000b4ac:	e8 e5 f1 ff ff       	call   c000a696 <Device::~Device()>
c000b4b1:	83 c4 10             	add    esp,0x10
c000b4b4:	90                   	nop
c000b4b5:	83 c4 0c             	add    esp,0xc
c000b4b8:	c3                   	ret    
c000b4b9:	90                   	nop

c000b4ba <LogicalDisk::~LogicalDisk()>:
c000b4ba:	83 ec 0c             	sub    esp,0xc
c000b4bd:	83 ec 0c             	sub    esp,0xc
c000b4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c4:	e8 cd ff ff ff       	call   c000b496 <LogicalDisk::~LogicalDisk()>
c000b4c9:	83 c4 10             	add    esp,0x10
c000b4cc:	83 ec 08             	sub    esp,0x8
c000b4cf:	68 78 01 00 00       	push   0x178
c000b4d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d8:	e8 3b 2c 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c000b4dd:	83 c4 10             	add    esp,0x10
c000b4e0:	83 c4 0c             	add    esp,0xc
c000b4e3:	c3                   	ret    

c000b4e4 <LogicalDisk::open(int, int, void*)>:
c000b4e4:	83 ec 18             	sub    esp,0x18
c000b4e7:	68 4c b8 02 c0       	push   0xc002b84c
c000b4ec:	e8 73 55 00 00       	call   c0010a64 <KePanic(char const*)>
c000b4f1:	83 c8 ff             	or     eax,0xffffffff
c000b4f4:	83 c4 1c             	add    esp,0x1c
c000b4f7:	c3                   	ret    

c000b4f8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000b4f8:	53                   	push   ebx
c000b4f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b4fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b501:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b505:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000b50b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000b511:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000b517:	77 10                	ja     c000b529 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000b519:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000b51f:	89 d3                	mov    ebx,edx
c000b521:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000b527:	72 05                	jb     c000b52e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000b529:	83 c8 ff             	or     eax,0xffffffff
c000b52c:	89 c2                	mov    edx,eax
c000b52e:	5b                   	pop    ebx
c000b52f:	c3                   	ret    

c000b530 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000b530:	56                   	push   esi
c000b531:	83 c8 ff             	or     eax,0xffffffff
c000b534:	53                   	push   ebx
c000b535:	89 c2                	mov    edx,eax
c000b537:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b53b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b53f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b543:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b549:	77 27                	ja     c000b572 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000b54b:	89 d8                	mov    eax,ebx
c000b54d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000b553:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000b559:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b55e:	89 c2                	mov    edx,eax
c000b560:	73 10                	jae    c000b572 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000b562:	89 c8                	mov    eax,ecx
c000b564:	89 da                	mov    edx,ebx
c000b566:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000b56c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000b572:	5b                   	pop    ebx
c000b573:	5e                   	pop    esi
c000b574:	c3                   	ret    
c000b575:	90                   	nop

c000b576 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b576:	83 ec 1c             	sub    esp,0x1c
c000b579:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b57d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b581:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b585:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b589:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b58d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b590:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b594:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b59c:	83 ec 08             	sub    esp,0x8
c000b59f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b5a3:	50                   	push   eax
c000b5a4:	e8 4d f3 ff ff       	call   c000a8f6 <Device::Device(char const*)>
c000b5a9:	83 c4 10             	add    esp,0x10
c000b5ac:	ba 98 b8 02 c0       	mov    edx,0xc002b898
c000b5b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b5b5:	89 10                	mov    DWORD PTR [eax],edx
c000b5b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b5bb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b5c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b5c6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000b5cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b5d1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b5d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b5dc:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000b5e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b5f2:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000b5f8:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000b5fe:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b602:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b605:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b609:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000b60f:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000b615:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b619:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b61d:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000b623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b627:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000b631:	90                   	nop
c000b632:	83 c4 1c             	add    esp,0x1c
c000b635:	c3                   	ret    

c000b636 <LogicalDisk::assignDriveLetter()>:
c000b636:	55                   	push   ebp
c000b637:	57                   	push   edi
c000b638:	56                   	push   esi
c000b639:	53                   	push   ebx
c000b63a:	83 ec 14             	sub    esp,0x14
c000b63d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b641:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000b647:	b0 41                	mov    al,0x41
c000b649:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000b64f:	84 d2                	test   dl,dl
c000b651:	75 02                	jne    c000b655 <LogicalDisk::assignDriveLetter()+0x1f>
c000b653:	b0 43                	mov    al,0x43
c000b655:	8b 3d c0 6a 03 c0    	mov    edi,DWORD PTR ds:0xc0036ac0
c000b65b:	0f b6 ca             	movzx  ecx,dl
c000b65e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000b662:	0f be e8             	movsx  ebp,al
c000b665:	8b 3d c4 6a 03 c0    	mov    edi,DWORD PTR ds:0xc0036ac4
c000b66b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b66f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000b673:	3c 43                	cmp    al,0x43
c000b675:	75 10                	jne    c000b687 <LogicalDisk::assignDriveLetter()+0x51>
c000b677:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000b67e:	75 5a                	jne    c000b6da <LogicalDisk::assignDriveLetter()+0xa4>
c000b680:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b685:	75 53                	jne    c000b6da <LogicalDisk::assignDriveLetter()+0xa4>
c000b687:	8d 75 bf             	lea    esi,[ebp-0x41]
c000b68a:	ba 01 00 00 00       	mov    edx,0x1
c000b68f:	89 34 24             	mov    DWORD PTR [esp],esi
c000b692:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000b695:	d3 e2                	shl    edx,cl
c000b697:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b69b:	89 d7                	mov    edi,edx
c000b69d:	89 d6                	mov    esi,edx
c000b69f:	c1 ff 1f             	sar    edi,0x1f
c000b6a2:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000b6a6:	21 f9                	and    ecx,edi
c000b6a8:	09 d1                	or     ecx,edx
c000b6aa:	75 2e                	jne    c000b6da <LogicalDisk::assignDriveLetter()+0xa4>
c000b6ac:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000b6b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b6b4:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000b6ba:	09 f2                	or     edx,esi
c000b6bc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000b6bf:	89 15 c0 6a 03 c0    	mov    DWORD PTR ds:0xc0036ac0,edx
c000b6c5:	89 1c b5 e0 6a 03 c0 	mov    DWORD PTR [esi*4-0x3ffc9520],ebx
c000b6cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6d0:	09 fa                	or     edx,edi
c000b6d2:	89 15 c4 6a 03 c0    	mov    DWORD PTR ds:0xc0036ac4,edx
c000b6d8:	eb 0d                	jmp    c000b6e7 <LogicalDisk::assignDriveLetter()+0xb1>
c000b6da:	8d 50 01             	lea    edx,[eax+0x1]
c000b6dd:	45                   	inc    ebp
c000b6de:	88 d0                	mov    al,dl
c000b6e0:	80 fa 5b             	cmp    dl,0x5b
c000b6e3:	75 8e                	jne    c000b673 <LogicalDisk::assignDriveLetter()+0x3d>
c000b6e5:	31 c0                	xor    eax,eax
c000b6e7:	83 c4 14             	add    esp,0x14
c000b6ea:	5b                   	pop    ebx
c000b6eb:	5e                   	pop    esi
c000b6ec:	5f                   	pop    edi
c000b6ed:	5d                   	pop    ebp
c000b6ee:	c3                   	ret    
c000b6ef:	90                   	nop

c000b6f0 <LogicalDisk::mount()>:
c000b6f0:	56                   	push   esi
c000b6f1:	53                   	push   ebx
c000b6f2:	53                   	push   ebx
c000b6f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b6f7:	8b 1d 04 63 03 c0    	mov    ebx,DWORD PTR ds:0xc0036304
c000b6fd:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000b707:	85 db                	test   ebx,ebx
c000b709:	74 27                	je     c000b732 <LogicalDisk::mount()+0x42>
c000b70b:	51                   	push   ecx
c000b70c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000b713:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b715:	83 e8 41             	sub    eax,0x41
c000b718:	50                   	push   eax
c000b719:	56                   	push   esi
c000b71a:	53                   	push   ebx
c000b71b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000b71e:	83 c4 10             	add    esp,0x10
c000b721:	84 c0                	test   al,al
c000b723:	74 08                	je     c000b72d <LogicalDisk::mount()+0x3d>
c000b725:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000b72b:	eb 07                	jmp    c000b734 <LogicalDisk::mount()+0x44>
c000b72d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000b730:	eb d5                	jmp    c000b707 <LogicalDisk::mount()+0x17>
c000b732:	31 c0                	xor    eax,eax
c000b734:	5a                   	pop    edx
c000b735:	5b                   	pop    ebx
c000b736:	5e                   	pop    esi
c000b737:	c3                   	ret    

c000b738 <LogicalDisk::unmount()>:
c000b738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b73c:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000b746:	c3                   	ret    
c000b747:	90                   	nop

c000b748 <LogicalDisk::eject()>:
c000b748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000b752:	8b 10                	mov    edx,DWORD PTR [eax]
c000b754:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b758:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000b75b:	90                   	nop

c000b75c <LogicalDisk::unassignDriveLetter()>:
c000b75c:	57                   	push   edi
c000b75d:	56                   	push   esi
c000b75e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b762:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000b769:	85 c9                	test   ecx,ecx
c000b76b:	75 0f                	jne    c000b77c <LogicalDisk::unassignDriveLetter()+0x20>
c000b76d:	c7 44 24 0c 70 b8 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b870
c000b775:	5e                   	pop    esi
c000b776:	5f                   	pop    edi
c000b777:	e9 e8 52 00 00       	jmp    c0010a64 <KePanic(char const*)>
c000b77c:	83 e9 41             	sub    ecx,0x41
c000b77f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000b786:	b8 01 00 00 00       	mov    eax,0x1
c000b78b:	c7 04 8d e0 6a 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc9520],0x0
c000b796:	d3 e0                	shl    eax,cl
c000b798:	89 c7                	mov    edi,eax
c000b79a:	f7 d0                	not    eax
c000b79c:	c1 ff 1f             	sar    edi,0x1f
c000b79f:	21 05 c0 6a 03 c0    	and    DWORD PTR ds:0xc0036ac0,eax
c000b7a5:	89 fe                	mov    esi,edi
c000b7a7:	f7 d6                	not    esi
c000b7a9:	21 35 c4 6a 03 c0    	and    DWORD PTR ds:0xc0036ac4,esi
c000b7af:	5e                   	pop    esi
c000b7b0:	5f                   	pop    edi
c000b7b1:	c3                   	ret    

c000b7b2 <LogicalDisk::read(unsigned long long, int, void*)>:
c000b7b2:	57                   	push   edi
c000b7b3:	56                   	push   esi
c000b7b4:	53                   	push   ebx
c000b7b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b7b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b7bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b7c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b7c5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b7cb:	77 41                	ja     c000b80e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000b7cd:	99                   	cdq    
c000b7ce:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000b7d4:	01 c8                	add    eax,ecx
c000b7d6:	11 da                	adc    edx,ebx
c000b7d8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000b7de:	19 d7                	sbb    edi,edx
c000b7e0:	72 33                	jb     c000b815 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000b7e2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000b7e8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000b7ee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b7f2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000b7f6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b7fc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b802:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b806:	5b                   	pop    ebx
c000b807:	5e                   	pop    esi
c000b808:	5f                   	pop    edi
c000b809:	e9 ac 0b 00 00       	jmp    c000c3ba <VCache::read(unsigned long long, int, void*)>
c000b80e:	b8 05 00 00 00       	mov    eax,0x5
c000b813:	eb 05                	jmp    c000b81a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000b815:	b8 07 00 00 00       	mov    eax,0x7
c000b81a:	5b                   	pop    ebx
c000b81b:	5e                   	pop    esi
c000b81c:	5f                   	pop    edi
c000b81d:	c3                   	ret    

c000b81e <LogicalDisk::write(unsigned long long, int, void*)>:
c000b81e:	57                   	push   edi
c000b81f:	56                   	push   esi
c000b820:	53                   	push   ebx
c000b821:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b825:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b829:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b82d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b831:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b837:	77 41                	ja     c000b87a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000b839:	99                   	cdq    
c000b83a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000b840:	01 c8                	add    eax,ecx
c000b842:	11 da                	adc    edx,ebx
c000b844:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000b84a:	19 d7                	sbb    edi,edx
c000b84c:	72 33                	jb     c000b881 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000b84e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000b854:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000b85a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b85e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000b862:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b868:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b86e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b872:	5b                   	pop    ebx
c000b873:	5e                   	pop    esi
c000b874:	5f                   	pop    edi
c000b875:	e9 72 09 00 00       	jmp    c000c1ec <VCache::write(unsigned long long, int, void*)>
c000b87a:	b8 05 00 00 00       	mov    eax,0x5
c000b87f:	eb 05                	jmp    c000b886 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000b881:	b8 07 00 00 00       	mov    eax,0x7
c000b886:	5b                   	pop    ebx
c000b887:	5e                   	pop    esi
c000b888:	5f                   	pop    edi
c000b889:	c3                   	ret    
c000b88a:	66 90                	xchg   ax,ax

c000b88c <Mouse::Mouse(char const*)>:
c000b88c:	83 ec 0c             	sub    esp,0xc
c000b88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b893:	83 ec 08             	sub    esp,0x8
c000b896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89a:	50                   	push   eax
c000b89b:	e8 56 f0 ff ff       	call   c000a8f6 <Device::Device(char const*)>
c000b8a0:	83 c4 10             	add    esp,0x10
c000b8a3:	ba c4 b8 02 c0       	mov    edx,0xc002b8c4
c000b8a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ac:	89 10                	mov    DWORD PTR [eax],edx
c000b8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8b2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000b8bc:	90                   	nop
c000b8bd:	83 c4 0c             	add    esp,0xc
c000b8c0:	c3                   	ret    
c000b8c1:	90                   	nop
c000b8c2:	66 90                	xchg   ax,ax

c000b8c4 <Mouse::~Mouse()>:
c000b8c4:	83 ec 0c             	sub    esp,0xc
c000b8c7:	ba c4 b8 02 c0       	mov    edx,0xc002b8c4
c000b8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d0:	89 10                	mov    DWORD PTR [eax],edx
c000b8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d6:	83 ec 0c             	sub    esp,0xc
c000b8d9:	50                   	push   eax
c000b8da:	e8 b7 ed ff ff       	call   c000a696 <Device::~Device()>
c000b8df:	83 c4 10             	add    esp,0x10
c000b8e2:	90                   	nop
c000b8e3:	83 c4 0c             	add    esp,0xc
c000b8e6:	c3                   	ret    
c000b8e7:	90                   	nop

c000b8e8 <Mouse::~Mouse()>:
c000b8e8:	83 ec 0c             	sub    esp,0xc
c000b8eb:	83 ec 0c             	sub    esp,0xc
c000b8ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8f2:	e8 cd ff ff ff       	call   c000b8c4 <Mouse::~Mouse()>
c000b8f7:	83 c4 10             	add    esp,0x10
c000b8fa:	83 ec 08             	sub    esp,0x8
c000b8fd:	68 58 01 00 00       	push   0x158
c000b902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b906:	e8 0d 28 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c000b90b:	83 c4 10             	add    esp,0x10
c000b90e:	83 c4 0c             	add    esp,0xc
c000b911:	c3                   	ret    

c000b912 <NIC::getMAC()>:
c000b912:	31 c0                	xor    eax,eax
c000b914:	31 d2                	xor    edx,edx
c000b916:	c3                   	ret    
c000b917:	90                   	nop

c000b918 <NIC::write(int, unsigned char*, int*)>:
c000b918:	b8 01 00 00 00       	mov    eax,0x1
c000b91d:	c3                   	ret    

c000b91e <NIC::NIC(char const*)>:
c000b91e:	83 ec 0c             	sub    esp,0xc
c000b921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b925:	83 ec 08             	sub    esp,0x8
c000b928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b92c:	50                   	push   eax
c000b92d:	e8 c4 ef ff ff       	call   c000a8f6 <Device::Device(char const*)>
c000b932:	83 c4 10             	add    esp,0x10
c000b935:	ba f0 b8 02 c0       	mov    edx,0xc002b8f0
c000b93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b93e:	89 10                	mov    DWORD PTR [eax],edx
c000b940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b944:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000b94e:	90                   	nop
c000b94f:	83 c4 0c             	add    esp,0xc
c000b952:	c3                   	ret    
c000b953:	90                   	nop

c000b954 <NIC::~NIC()>:
c000b954:	83 ec 0c             	sub    esp,0xc
c000b957:	ba f0 b8 02 c0       	mov    edx,0xc002b8f0
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	89 10                	mov    DWORD PTR [eax],edx
c000b962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b966:	83 ec 0c             	sub    esp,0xc
c000b969:	50                   	push   eax
c000b96a:	e8 27 ed ff ff       	call   c000a696 <Device::~Device()>
c000b96f:	83 c4 10             	add    esp,0x10
c000b972:	90                   	nop
c000b973:	83 c4 0c             	add    esp,0xc
c000b976:	c3                   	ret    
c000b977:	90                   	nop

c000b978 <NIC::~NIC()>:
c000b978:	83 ec 0c             	sub    esp,0xc
c000b97b:	83 ec 0c             	sub    esp,0xc
c000b97e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b982:	e8 cd ff ff ff       	call   c000b954 <NIC::~NIC()>
c000b987:	83 c4 10             	add    esp,0x10
c000b98a:	83 ec 08             	sub    esp,0x8
c000b98d:	68 58 01 00 00       	push   0x158
c000b992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b996:	e8 7d 27 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c000b99b:	83 c4 10             	add    esp,0x10
c000b99e:	83 c4 0c             	add    esp,0xc
c000b9a1:	c3                   	ret    

c000b9a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b9a2:	55                   	push   ebp
c000b9a3:	57                   	push   edi
c000b9a4:	56                   	push   esi
c000b9a5:	53                   	push   ebx
c000b9a6:	81 ec 28 01 00 00    	sub    esp,0x128
c000b9ac:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000b9b3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000b9ba:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000b9c1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000b9c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b9cc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9d0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b9d7:	e8 16 f0 ff ff       	call   c000a9f2 <Device::getName()>
c000b9dc:	5a                   	pop    edx
c000b9dd:	59                   	pop    ecx
c000b9de:	50                   	push   eax
c000b9df:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b9e3:	55                   	push   ebp
c000b9e4:	e8 57 4c ff ff       	call   c0000640 <strcpy>
c000b9e9:	5b                   	pop    ebx
c000b9ea:	58                   	pop    eax
c000b9eb:	68 1c b9 02 c0       	push   0xc002b91c
c000b9f0:	55                   	push   ebp
c000b9f1:	e8 4a 4e ff ff       	call   c0000840 <strcat>
c000b9f6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000b9fd:	e8 0d 4c 00 00       	call   c001060f <malloc>
c000ba02:	83 c4 0c             	add    esp,0xc
c000ba05:	89 c3                	mov    ebx,eax
c000ba07:	57                   	push   edi
c000ba08:	56                   	push   esi
c000ba09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba11:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ba18:	55                   	push   ebp
c000ba19:	50                   	push   eax
c000ba1a:	e8 57 fb ff ff       	call   c000b576 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ba1f:	83 c4 14             	add    esp,0x14
c000ba22:	53                   	push   ebx
c000ba23:	e8 0e fc ff ff       	call   c000b636 <LogicalDisk::assignDriveLetter()>
c000ba28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba2b:	e8 c0 fc ff ff       	call   c000b6f0 <LogicalDisk::mount()>
c000ba30:	58                   	pop    eax
c000ba31:	5a                   	pop    edx
c000ba32:	53                   	push   ebx
c000ba33:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ba3a:	e8 55 ed ff ff       	call   c000a794 <Device::addChild(Device*)>
c000ba3f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ba45:	5b                   	pop    ebx
c000ba46:	5e                   	pop    esi
c000ba47:	5f                   	pop    edi
c000ba48:	5d                   	pop    ebp
c000ba49:	c3                   	ret    

c000ba4a <createPartitionsForDisk(PhysicalDisk*)>:
c000ba4a:	55                   	push   ebp
c000ba4b:	57                   	push   edi
c000ba4c:	56                   	push   esi
c000ba4d:	53                   	push   ebx
c000ba4e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ba54:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ba5b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ba61:	3d 00 02 00 00       	cmp    eax,0x200
c000ba66:	74 27                	je     c000ba8f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ba68:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ba6e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ba74:	83 ec 10             	sub    esp,0x10
c000ba77:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ba7b:	99                   	cdq    
c000ba7c:	c1 e6 0a             	shl    esi,0xa
c000ba7f:	52                   	push   edx
c000ba80:	89 fd                	mov    ebp,edi
c000ba82:	50                   	push   eax
c000ba83:	55                   	push   ebp
c000ba84:	56                   	push   esi
c000ba85:	e8 ca 90 01 00       	call   c0024b54 <__udivdi3>
c000ba8a:	e9 b9 00 00 00       	jmp    c000bb48 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ba8f:	83 ec 0c             	sub    esp,0xc
c000ba92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba94:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ba98:	56                   	push   esi
c000ba99:	6a 01                	push   0x1
c000ba9b:	6a 00                	push   0x0
c000ba9d:	6a 00                	push   0x0
c000ba9f:	53                   	push   ebx
c000baa0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000baa3:	83 c4 20             	add    esp,0x20
c000baa6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000baae:	75 0a                	jne    c000baba <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000bab0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000bab8:	74 2c                	je     c000bae6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000baba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000bac0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000bac6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000bacc:	83 ec 10             	sub    esp,0x10
c000bacf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000bad3:	89 f7                	mov    edi,esi
c000bad5:	c1 e0 0a             	shl    eax,0xa
c000bad8:	c1 ff 1f             	sar    edi,0x1f
c000badb:	57                   	push   edi
c000badc:	56                   	push   esi
c000badd:	52                   	push   edx
c000bade:	50                   	push   eax
c000badf:	e8 70 90 01 00       	call   c0024b54 <__udivdi3>
c000bae4:	eb 62                	jmp    c000bb48 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000bae6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000baed:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000baf4:	89 cf                	mov    edi,ecx
c000baf6:	83 e2 7f             	and    edx,0x7f
c000baf9:	83 e7 7f             	and    edi,0x7f
c000bafc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000bb03:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000bb06:	83 e0 7f             	and    eax,0x7f
c000bb09:	8d 14 01             	lea    edx,[ecx+eax*1]
c000bb0c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000bb13:	83 e0 7f             	and    eax,0x7f
c000bb16:	01 d0                	add    eax,edx
c000bb18:	89 c5                	mov    ebp,eax
c000bb1a:	84 c0                	test   al,al
c000bb1c:	74 41                	je     c000bb5f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000bb1e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000bb24:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000bb2a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000bb30:	83 ec 10             	sub    esp,0x10
c000bb33:	0f a4 c2 0a          	shld   edx,eax,0xa
c000bb37:	89 f7                	mov    edi,esi
c000bb39:	c1 e0 0a             	shl    eax,0xa
c000bb3c:	c1 ff 1f             	sar    edi,0x1f
c000bb3f:	57                   	push   edi
c000bb40:	56                   	push   esi
c000bb41:	52                   	push   edx
c000bb42:	50                   	push   eax
c000bb43:	e8 0c 90 01 00       	call   c0024b54 <__udivdi3>
c000bb48:	83 c4 14             	add    esp,0x14
c000bb4b:	52                   	push   edx
c000bb4c:	50                   	push   eax
c000bb4d:	6a 00                	push   0x0
c000bb4f:	6a 00                	push   0x0
c000bb51:	53                   	push   ebx
c000bb52:	e8 4b fe ff ff       	call   c000b9a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000bb57:	83 c4 20             	add    esp,0x20
c000bb5a:	e9 73 01 00 00       	jmp    c000bcd2 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000bb5f:	89 f0                	mov    eax,esi
c000bb61:	31 c9                	xor    ecx,ecx
c000bb63:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000bb6a:	75 02                	jne    c000bb6e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000bb6c:	89 cd                	mov    ebp,ecx
c000bb6e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000bb75:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000bb7c:	c1 e2 08             	shl    edx,0x8
c000bb7f:	c1 e6 10             	shl    esi,0x10
c000bb82:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000bb8a:	09 f2                	or     edx,esi
c000bb8c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000bb94:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000bb9b:	83 c0 10             	add    eax,0x10
c000bb9e:	09 f2                	or     edx,esi
c000bba0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000bba7:	c1 e6 18             	shl    esi,0x18
c000bbaa:	09 f2                	or     edx,esi
c000bbac:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000bbb3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000bbb7:	c1 e6 10             	shl    esi,0x10
c000bbba:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000bbc1:	c1 e2 08             	shl    edx,0x8
c000bbc4:	09 f2                	or     edx,esi
c000bbc6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000bbcd:	09 f2                	or     edx,esi
c000bbcf:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000bbd6:	c1 e6 18             	shl    esi,0x18
c000bbd9:	09 f2                	or     edx,esi
c000bbdb:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000bbdf:	41                   	inc    ecx
c000bbe0:	83 f9 04             	cmp    ecx,0x4
c000bbe3:	0f 85 7a ff ff ff    	jne    c000bb63 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000bbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbed:	83 f0 01             	xor    eax,0x1
c000bbf0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bbf4:	75 4f                	jne    c000bc45 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000bbf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bbfa:	83 f0 01             	xor    eax,0x1
c000bbfd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bc01:	75 42                	jne    c000bc45 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000bc03:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bc0b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc13:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000bc19:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000bc1f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000bc25:	0f a4 c2 0a          	shld   edx,eax,0xa
c000bc29:	89 f7                	mov    edi,esi
c000bc2b:	c1 e0 0a             	shl    eax,0xa
c000bc2e:	c1 ff 1f             	sar    edi,0x1f
c000bc31:	57                   	push   edi
c000bc32:	56                   	push   esi
c000bc33:	52                   	push   edx
c000bc34:	50                   	push   eax
c000bc35:	e8 1a 8f 01 00       	call   c0024b54 <__udivdi3>
c000bc3a:	83 c4 10             	add    esp,0x10
c000bc3d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc41:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc45:	89 e8                	mov    eax,ebp
c000bc47:	0f b6 e8             	movzx  ebp,al
c000bc4a:	85 ed                	test   ebp,ebp
c000bc4c:	74 50                	je     c000bc9e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000bc4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc52:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bc56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc5a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000bc5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc66:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000bc6a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000bc6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc72:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc7a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000bc7e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000bc82:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000bc86:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000bc8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc8e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000bc92:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000bc96:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000bc9a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000bc9e:	31 ed                	xor    ebp,ebp
c000bca0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000bca4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000bca8:	89 f8                	mov    eax,edi
c000bcaa:	09 f0                	or     eax,esi
c000bcac:	74 1e                	je     c000bccc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000bcae:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000bcb2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000bcb6:	89 d1                	mov    ecx,edx
c000bcb8:	09 c1                	or     ecx,eax
c000bcba:	74 10                	je     c000bccc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000bcbc:	83 ec 0c             	sub    esp,0xc
c000bcbf:	57                   	push   edi
c000bcc0:	56                   	push   esi
c000bcc1:	52                   	push   edx
c000bcc2:	50                   	push   eax
c000bcc3:	53                   	push   ebx
c000bcc4:	e8 d9 fc ff ff       	call   c000b9a2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000bcc9:	83 c4 20             	add    esp,0x20
c000bccc:	45                   	inc    ebp
c000bccd:	83 fd 04             	cmp    ebp,0x4
c000bcd0:	75 ce                	jne    c000bca0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000bcd2:	81 c4 5c 02 00 00    	add    esp,0x25c
c000bcd8:	5b                   	pop    ebx
c000bcd9:	5e                   	pop    esi
c000bcda:	5f                   	pop    edi
c000bcdb:	5d                   	pop    ebp
c000bcdc:	c3                   	ret    
c000bcdd:	66 90                	xchg   ax,ax
c000bcdf:	90                   	nop

c000bce0 <Serial::Serial(char const*)>:
c000bce0:	83 ec 0c             	sub    esp,0xc
c000bce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce7:	83 ec 08             	sub    esp,0x8
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	50                   	push   eax
c000bcef:	e8 02 ec ff ff       	call   c000a8f6 <Device::Device(char const*)>
c000bcf4:	83 c4 10             	add    esp,0x10
c000bcf7:	ba 30 b9 02 c0       	mov    edx,0xc002b930
c000bcfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd00:	89 10                	mov    DWORD PTR [eax],edx
c000bd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd06:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000bd10:	90                   	nop
c000bd11:	83 c4 0c             	add    esp,0xc
c000bd14:	c3                   	ret    
c000bd15:	90                   	nop
c000bd16:	66 90                	xchg   ax,ax

c000bd18 <Serial::~Serial()>:
c000bd18:	83 ec 0c             	sub    esp,0xc
c000bd1b:	ba 30 b9 02 c0       	mov    edx,0xc002b930
c000bd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd24:	89 10                	mov    DWORD PTR [eax],edx
c000bd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd2a:	83 ec 0c             	sub    esp,0xc
c000bd2d:	50                   	push   eax
c000bd2e:	e8 63 e9 ff ff       	call   c000a696 <Device::~Device()>
c000bd33:	83 c4 10             	add    esp,0x10
c000bd36:	90                   	nop
c000bd37:	83 c4 0c             	add    esp,0xc
c000bd3a:	c3                   	ret    
c000bd3b:	90                   	nop

c000bd3c <Serial::~Serial()>:
c000bd3c:	83 ec 0c             	sub    esp,0xc
c000bd3f:	83 ec 0c             	sub    esp,0xc
c000bd42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd46:	e8 cd ff ff ff       	call   c000bd18 <Serial::~Serial()>
c000bd4b:	83 c4 10             	add    esp,0x10
c000bd4e:	83 ec 08             	sub    esp,0x8
c000bd51:	68 58 01 00 00       	push   0x158
c000bd56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd5a:	e8 b9 23 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c000bd5f:	83 c4 10             	add    esp,0x10
c000bd62:	83 c4 0c             	add    esp,0xc
c000bd65:	c3                   	ret    
c000bd66:	66 90                	xchg   ax,ax

c000bd68 <Timer::Timer(char const*)>:
c000bd68:	83 ec 0c             	sub    esp,0xc
c000bd6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd6f:	83 ec 08             	sub    esp,0x8
c000bd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd76:	50                   	push   eax
c000bd77:	e8 7a eb ff ff       	call   c000a8f6 <Device::Device(char const*)>
c000bd7c:	83 c4 10             	add    esp,0x10
c000bd7f:	ba f8 b9 02 c0       	mov    edx,0xc002b9f8
c000bd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd88:	89 10                	mov    DWORD PTR [eax],edx
c000bd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd8e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000bd98:	90                   	nop
c000bd99:	83 c4 0c             	add    esp,0xc
c000bd9c:	c3                   	ret    
c000bd9d:	90                   	nop
c000bd9e:	66 90                	xchg   ax,ax

c000bda0 <Timer::~Timer()>:
c000bda0:	83 ec 0c             	sub    esp,0xc
c000bda3:	ba f8 b9 02 c0       	mov    edx,0xc002b9f8
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	89 10                	mov    DWORD PTR [eax],edx
c000bdae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb2:	83 ec 0c             	sub    esp,0xc
c000bdb5:	50                   	push   eax
c000bdb6:	e8 db e8 ff ff       	call   c000a696 <Device::~Device()>
c000bdbb:	83 c4 10             	add    esp,0x10
c000bdbe:	90                   	nop
c000bdbf:	83 c4 0c             	add    esp,0xc
c000bdc2:	c3                   	ret    
c000bdc3:	90                   	nop

c000bdc4 <Timer::~Timer()>:
c000bdc4:	83 ec 0c             	sub    esp,0xc
c000bdc7:	83 ec 0c             	sub    esp,0xc
c000bdca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdce:	e8 cd ff ff ff       	call   c000bda0 <Timer::~Timer()>
c000bdd3:	83 c4 10             	add    esp,0x10
c000bdd6:	83 ec 08             	sub    esp,0x8
c000bdd9:	68 5c 01 00 00       	push   0x15c
c000bdde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bde2:	e8 31 23 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c000bde7:	83 c4 10             	add    esp,0x10
c000bdea:	83 c4 0c             	add    esp,0xc
c000bded:	c3                   	ret    

c000bdee <Timer::read()>:
c000bdee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bdf8:	c3                   	ret    

c000bdf9 <setupTimer(int)>:
c000bdf9:	53                   	push   ebx
c000bdfa:	83 ec 14             	sub    esp,0x14
c000bdfd:	68 5c 01 00 00       	push   0x15c
c000be02:	e8 08 48 00 00       	call   c001060f <malloc>
c000be07:	89 04 24             	mov    DWORD PTR [esp],eax
c000be0a:	89 c3                	mov    ebx,eax
c000be0c:	e8 f7 85 01 00       	call   c0024408 <PIT::PIT()>
c000be11:	58                   	pop    eax
c000be12:	5a                   	pop    edx
c000be13:	53                   	push   ebx
c000be14:	ff 35 08 71 03 c0    	push   DWORD PTR ds:0xc0037108
c000be1a:	e8 75 e9 ff ff       	call   c000a794 <Device::addChild(Device*)>
c000be1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be21:	6a 00                	push   0x0
c000be23:	6a 00                	push   0x0
c000be25:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000be29:	53                   	push   ebx
c000be2a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000be2d:	89 d8                	mov    eax,ebx
c000be2f:	83 c4 28             	add    esp,0x28
c000be32:	5b                   	pop    ebx
c000be33:	c3                   	ret    

c000be34 <timerHandler(unsigned int)>:
c000be34:	57                   	push   edi
c000be35:	31 d2                	xor    edx,edx
c000be37:	56                   	push   esi
c000be38:	53                   	push   ebx
c000be39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be3d:	01 1d 50 6b 03 c0    	add    DWORD PTR ds:0xc0036b50,ebx
c000be43:	11 15 54 6b 03 c0    	adc    DWORD PTR ds:0xc0036b54,edx
c000be49:	80 3d 0d 71 03 c0 00 	cmp    BYTE PTR ds:0xc003710d,0x0
c000be50:	0f 84 46 01 00 00    	je     c000bf9c <timerHandler(unsigned int)+0x168>
c000be56:	fa                   	cli    
c000be57:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c000be5d:	83 ec 0c             	sub    esp,0xc
c000be60:	68 40 73 03 c0       	push   0xc0037340
c000be65:	e8 de d8 01 00       	call   c0029748 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000be6a:	83 c4 10             	add    esp,0x10
c000be6d:	84 c0                	test   al,al
c000be6f:	0f 85 a7 00 00 00    	jne    c000bf1c <timerHandler(unsigned int)+0xe8>
c000be75:	83 ec 0c             	sub    esp,0xc
c000be78:	68 40 73 03 c0       	push   0xc0037340
c000be7d:	e8 e2 d8 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 c6                	mov    esi,eax
c000be87:	90                   	nop
c000be88:	83 ec 0c             	sub    esp,0xc
c000be8b:	68 40 73 03 c0       	push   0xc0037340
c000be90:	e8 cf d8 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000be95:	c7 04 24 40 73 03 c0 	mov    DWORD PTR [esp],0xc0037340
c000be9c:	89 c7                	mov    edi,eax
c000be9e:	e8 c9 d8 01 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000bea3:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000bea6:	83 c4 10             	add    esp,0x10
c000bea9:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000beac:	39 15 50 6b 03 c0    	cmp    DWORD PTR ds:0xc0036b50,edx
c000beb2:	a1 54 6b 03 c0       	mov    eax,ds:0xc0036b54
c000beb7:	19 c8                	sbb    eax,ecx
c000beb9:	72 21                	jb     c000bedc <timerHandler(unsigned int)+0xa8>
c000bebb:	83 ec 0c             	sub    esp,0xc
c000bebe:	57                   	push   edi
c000bebf:	e8 94 ba 00 00       	call   c0017958 <unblockTask(ThreadControlBlock*)>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	39 fe                	cmp    esi,edi
c000bec9:	75 25                	jne    c000bef0 <timerHandler(unsigned int)+0xbc>
c000becb:	83 ec 0c             	sub    esp,0xc
c000bece:	68 40 73 03 c0       	push   0xc0037340
c000bed3:	e8 8c d8 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000bed8:	89 c6                	mov    esi,eax
c000beda:	eb 10                	jmp    c000beec <timerHandler(unsigned int)+0xb8>
c000bedc:	51                   	push   ecx
c000bedd:	51                   	push   ecx
c000bede:	57                   	push   edi
c000bedf:	68 40 73 03 c0       	push   0xc0037340
c000bee4:	e8 3f d9 01 00       	call   c0029828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000bee9:	8d 76 00             	lea    esi,[esi+0x0]
c000beec:	83 c4 10             	add    esp,0x10
c000beef:	90                   	nop
c000bef0:	83 ec 0c             	sub    esp,0xc
c000bef3:	68 40 73 03 c0       	push   0xc0037340
c000bef8:	e8 4b d8 01 00       	call   c0029748 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	84 c0                	test   al,al
c000bf02:	75 18                	jne    c000bf1c <timerHandler(unsigned int)+0xe8>
c000bf04:	83 ec 0c             	sub    esp,0xc
c000bf07:	68 40 73 03 c0       	push   0xc0037340
c000bf0c:	e8 53 d8 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000bf11:	83 c4 10             	add    esp,0x10
c000bf14:	39 f0                	cmp    eax,esi
c000bf16:	0f 85 6c ff ff ff    	jne    c000be88 <timerHandler(unsigned int)+0x54>
c000bf1c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000bf22:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000bf25:	85 c0                	test   eax,eax
c000bf27:	74 5f                	je     c000bf88 <timerHandler(unsigned int)+0x154>
c000bf29:	80 3d 0c 71 03 c0 00 	cmp    BYTE PTR ds:0xc003710c,0x0
c000bf30:	74 56                	je     c000bf88 <timerHandler(unsigned int)+0x154>
c000bf32:	3d e8 03 00 00       	cmp    eax,0x3e8
c000bf37:	76 23                	jbe    c000bf5c <timerHandler(unsigned int)+0x128>
c000bf39:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c000bf3d:	75 11                	jne    c000bf50 <timerHandler(unsigned int)+0x11c>
c000bf3f:	52                   	push   edx
c000bf40:	52                   	push   edx
c000bf41:	50                   	push   eax
c000bf42:	68 bf b9 02 c0       	push   0xc002b9bf
c000bf47:	e8 30 b0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bf4c:	83 c4 10             	add    esp,0x10
c000bf4f:	90                   	nop
c000bf50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000bf55:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000bf5c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000bf62:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000bf65:	39 d8                	cmp    eax,ebx
c000bf67:	73 0b                	jae    c000bf74 <timerHandler(unsigned int)+0x140>
c000bf69:	c7 42 38 00 00 00 00 	mov    DWORD PTR [edx+0x38],0x0
c000bf70:	eb 0e                	jmp    c000bf80 <timerHandler(unsigned int)+0x14c>
c000bf72:	66 90                	xchg   ax,ax
c000bf74:	89 c1                	mov    ecx,eax
c000bf76:	29 d9                	sub    ecx,ebx
c000bf78:	39 d8                	cmp    eax,ebx
c000bf7a:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000bf7d:	75 09                	jne    c000bf88 <timerHandler(unsigned int)+0x154>
c000bf7f:	90                   	nop
c000bf80:	e8 77 b6 00 00       	call   c00175fc <schedule()>
c000bf85:	8d 76 00             	lea    esi,[esi+0x0]
c000bf88:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c000bf8f:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c000bf96:	75 04                	jne    c000bf9c <timerHandler(unsigned int)+0x168>
c000bf98:	fb                   	sti    
c000bf99:	8d 76 00             	lea    esi,[esi+0x0]
c000bf9c:	5b                   	pop    ebx
c000bf9d:	5e                   	pop    esi
c000bf9e:	5f                   	pop    edi
c000bf9f:	c3                   	ret    

c000bfa0 <VCache::VCache(PhysicalDisk*)>:
c000bfa0:	53                   	push   ebx
c000bfa1:	83 ec 18             	sub    esp,0x18
c000bfa4:	ba 68 ba 02 c0       	mov    edx,0xc002ba68
c000bfa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfad:	89 10                	mov    DWORD PTR [eax],edx
c000bfaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfb3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000bfba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfbe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000bfc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfc9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000bfd0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000bfd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfdb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000bfe2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000bfe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfed:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000bff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bff8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000bffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c000:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000c007:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000c00e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c012:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c01a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000c01e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c022:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c02a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c031:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000c039:	83 ec 0c             	sub    esp,0xc
c000c03c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c040:	e8 ca 45 00 00       	call   c001060f <malloc>
c000c045:	83 c4 10             	add    esp,0x10
c000c048:	89 c3                	mov    ebx,eax
c000c04a:	83 ec 0c             	sub    esp,0xc
c000c04d:	53                   	push   ebx
c000c04e:	e8 f1 49 00 00       	call   c0010a44 <Mutex::Mutex()>
c000c053:	83 c4 10             	add    esp,0x10
c000c056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c05a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000c05d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c061:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c065:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000c068:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c06c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000c073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c077:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c07d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c081:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c084:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c088:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000c08e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c094:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c098:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000c09b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000c09e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c0a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c0aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c0b0:	05 00 01 00 00       	add    eax,0x100
c000c0b5:	c1 e0 04             	shl    eax,0x4
c000c0b8:	83 ec 0c             	sub    esp,0xc
c000c0bb:	50                   	push   eax
c000c0bc:	e8 4e 45 00 00       	call   c001060f <malloc>
c000c0c1:	83 c4 10             	add    esp,0x10
c000c0c4:	89 c2                	mov    edx,eax
c000c0c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000c0cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0d1:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000c0d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0dc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c0e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c0e4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c0ea:	89 d0                	mov    eax,edx
c000c0ec:	c1 e0 02             	shl    eax,0x2
c000c0ef:	01 d0                	add    eax,edx
c000c0f1:	c1 e0 04             	shl    eax,0x4
c000c0f4:	83 ec 0c             	sub    esp,0xc
c000c0f7:	50                   	push   eax
c000c0f8:	e8 12 45 00 00       	call   c001060f <malloc>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 c2                	mov    edx,eax
c000c102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c106:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c109:	90                   	nop
c000c10a:	83 c4 18             	add    esp,0x18
c000c10d:	5b                   	pop    ebx
c000c10e:	c3                   	ret    
c000c10f:	90                   	nop

c000c110 <VCache::invalidateReadBuffer()>:
c000c110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c114:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000c11a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c11e:	c3                   	ret    
c000c11f:	90                   	nop

c000c120 <VCache::writeWriteBuffer()>:
c000c120:	53                   	push   ebx
c000c121:	83 ec 08             	sub    esp,0x8
c000c124:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c128:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c12c:	74 1e                	je     c000c14c <VCache::writeWriteBuffer()+0x2c>
c000c12e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c131:	83 ec 0c             	sub    esp,0xc
c000c134:	8b 10                	mov    edx,DWORD PTR [eax]
c000c136:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000c139:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000c13c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000c13f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c142:	50                   	push   eax
c000c143:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c146:	83 c4 20             	add    esp,0x20
c000c149:	8d 76 00             	lea    esi,[esi+0x0]
c000c14c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000c153:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000c15a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000c15e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000c165:	83 c4 08             	add    esp,0x8
c000c168:	5b                   	pop    ebx
c000c169:	c3                   	ret    
c000c16a:	66 90                	xchg   ax,ax

c000c16c <VCache::~VCache()>:
c000c16c:	83 ec 0c             	sub    esp,0xc
c000c16f:	ba 68 ba 02 c0       	mov    edx,0xc002ba68
c000c174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c178:	89 10                	mov    DWORD PTR [eax],edx
c000c17a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c17e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000c181:	0f b6 c0             	movzx  eax,al
c000c184:	85 c0                	test   eax,eax
c000c186:	74 10                	je     c000c198 <VCache::~VCache()+0x2c>
c000c188:	83 ec 0c             	sub    esp,0xc
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	e8 8c ff ff ff       	call   c000c120 <VCache::writeWriteBuffer()>
c000c194:	83 c4 10             	add    esp,0x10
c000c197:	90                   	nop
c000c198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c19c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c19f:	83 ec 0c             	sub    esp,0xc
c000c1a2:	50                   	push   eax
c000c1a3:	e8 77 44 00 00       	call   c001061f <free>
c000c1a8:	83 c4 10             	add    esp,0x10
c000c1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000c1b2:	83 ec 0c             	sub    esp,0xc
c000c1b5:	50                   	push   eax
c000c1b6:	e8 64 44 00 00       	call   c001061f <free>
c000c1bb:	83 c4 10             	add    esp,0x10
c000c1be:	90                   	nop
c000c1bf:	83 c4 0c             	add    esp,0xc
c000c1c2:	c3                   	ret    
c000c1c3:	90                   	nop

c000c1c4 <VCache::~VCache()>:
c000c1c4:	83 ec 0c             	sub    esp,0xc
c000c1c7:	83 ec 0c             	sub    esp,0xc
c000c1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1ce:	e8 99 ff ff ff       	call   c000c16c <VCache::~VCache()>
c000c1d3:	83 c4 10             	add    esp,0x10
c000c1d6:	83 ec 08             	sub    esp,0x8
c000c1d9:	6a 44                	push   0x44
c000c1db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1df:	e8 34 1f 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c000c1e4:	83 c4 10             	add    esp,0x10
c000c1e7:	83 c4 0c             	add    esp,0xc
c000c1ea:	c3                   	ret    
c000c1eb:	90                   	nop

c000c1ec <VCache::write(unsigned long long, int, void*)>:
c000c1ec:	55                   	push   ebp
c000c1ed:	57                   	push   edi
c000c1ee:	56                   	push   esi
c000c1ef:	53                   	push   ebx
c000c1f0:	83 ec 1c             	sub    esp,0x1c
c000c1f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c1f7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c1fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c1ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c203:	e8 e0 b0 00 00       	call   c00172e8 <KeDisablePreemption()>
c000c208:	b9 00 10 00 00       	mov    ecx,0x1000
c000c20d:	50                   	push   eax
c000c20e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c211:	0f af c3             	imul   eax,ebx
c000c214:	05 ff 0f 00 00       	add    eax,0xfff
c000c219:	99                   	cdq    
c000c21a:	f7 f9                	idiv   ecx
c000c21c:	50                   	push   eax
c000c21d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c221:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c227:	e8 24 8b 00 00       	call   c0014d50 <VAS::canLockPages(unsigned long, int)>
c000c22c:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c238:	74 2a                	je     c000c264 <VCache::write(unsigned long long, int, void*)+0x78>
c000c23a:	b9 00 10 00 00       	mov    ecx,0x1000
c000c23f:	50                   	push   eax
c000c240:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c243:	0f af c3             	imul   eax,ebx
c000c246:	05 ff 0f 00 00       	add    eax,0xfff
c000c24b:	99                   	cdq    
c000c24c:	f7 f9                	idiv   ecx
c000c24e:	50                   	push   eax
c000c24f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c253:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c259:	e8 56 8d 00 00       	call   c0014fb4 <VAS::lockPages(unsigned long, int)>
c000c25e:	83 c4 10             	add    esp,0x10
c000c261:	8d 76 00             	lea    esi,[esi+0x0]
c000c264:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000c268:	74 0e                	je     c000c278 <VCache::write(unsigned long long, int, void*)+0x8c>
c000c26a:	83 ec 0c             	sub    esp,0xc
c000c26d:	55                   	push   ebp
c000c26e:	e8 9d fe ff ff       	call   c000c110 <VCache::invalidateReadBuffer()>
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	66 90                	xchg   ax,ax
c000c278:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000c27c:	74 72                	je     c000c2f0 <VCache::write(unsigned long long, int, void*)+0x104>
c000c27e:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000c281:	89 c8                	mov    eax,ecx
c000c283:	99                   	cdq    
c000c284:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000c287:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000c28a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c28e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c292:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c296:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c29a:	31 f0                	xor    eax,esi
c000c29c:	31 fa                	xor    edx,edi
c000c29e:	09 d0                	or     eax,edx
c000c2a0:	75 42                	jne    c000c2e4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000c2a2:	83 fb 01             	cmp    ebx,0x1
c000c2a5:	75 3d                	jne    c000c2e4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000c2a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2aa:	89 cf                	mov    edi,ecx
c000c2ac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c2b2:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000c2b6:	0f af f8             	imul   edi,eax
c000c2b9:	89 c1                	mov    ecx,eax
c000c2bb:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000c2be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c2c0:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000c2c3:	40                   	inc    eax
c000c2c4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000c2c7:	83 f8 50             	cmp    eax,0x50
c000c2ca:	0f 85 a8 00 00 00    	jne    c000c378 <VCache::write(unsigned long long, int, void*)+0x18c>
c000c2d0:	83 ec 0c             	sub    esp,0xc
c000c2d3:	55                   	push   ebp
c000c2d4:	e8 47 fe ff ff       	call   c000c120 <VCache::writeWriteBuffer()>
c000c2d9:	83 c4 10             	add    esp,0x10
c000c2dc:	e9 97 00 00 00       	jmp    c000c378 <VCache::write(unsigned long long, int, void*)+0x18c>
c000c2e1:	8d 76 00             	lea    esi,[esi+0x0]
c000c2e4:	83 ec 0c             	sub    esp,0xc
c000c2e7:	55                   	push   ebp
c000c2e8:	e8 33 fe ff ff       	call   c000c120 <VCache::writeWriteBuffer()>
c000c2ed:	83 c4 10             	add    esp,0x10
c000c2f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2f3:	83 fb 4f             	cmp    ebx,0x4f
c000c2f6:	7f 20                	jg     c000c318 <VCache::write(unsigned long long, int, void*)+0x12c>
c000c2f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000c2fb:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000c2fe:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000c301:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000c305:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000c308:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c30e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000c312:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c314:	eb 62                	jmp    c000c378 <VCache::write(unsigned long long, int, void*)+0x18c>
c000c316:	66 90                	xchg   ax,ax
c000c318:	83 ec 0c             	sub    esp,0xc
c000c31b:	8b 10                	mov    edx,DWORD PTR [eax]
c000c31d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c321:	53                   	push   ebx
c000c322:	57                   	push   edi
c000c323:	56                   	push   esi
c000c324:	50                   	push   eax
c000c325:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c328:	83 c4 20             	add    esp,0x20
c000c32b:	89 c6                	mov    esi,eax
c000c32d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c332:	74 28                	je     c000c35c <VCache::write(unsigned long long, int, void*)+0x170>
c000c334:	b9 00 10 00 00       	mov    ecx,0x1000
c000c339:	52                   	push   edx
c000c33a:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000c33e:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000c344:	99                   	cdq    
c000c345:	f7 f9                	idiv   ecx
c000c347:	50                   	push   eax
c000c348:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c34c:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c352:	e8 35 8a 00 00       	call   c0014d8c <VAS::unlockPages(unsigned long, int)>
c000c357:	83 c4 10             	add    esp,0x10
c000c35a:	66 90                	xchg   ax,ax
c000c35c:	e8 af af 00 00       	call   c0017310 <KeRestorePreemption()>
c000c361:	85 f6                	test   esi,esi
c000c363:	74 4b                	je     c000c3b0 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000c365:	83 ec 0c             	sub    esp,0xc
c000c368:	68 20 ba 02 c0       	push   0xc002ba20
c000c36d:	e8 0a ac ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c372:	83 c4 10             	add    esp,0x10
c000c375:	eb 39                	jmp    c000c3b0 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000c377:	90                   	nop
c000c378:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c37d:	74 29                	je     c000c3a8 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000c37f:	b9 00 10 00 00       	mov    ecx,0x1000
c000c384:	50                   	push   eax
c000c385:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000c389:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000c38f:	99                   	cdq    
c000c390:	f7 f9                	idiv   ecx
c000c392:	50                   	push   eax
c000c393:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c397:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c39d:	e8 ea 89 00 00       	call   c0014d8c <VAS::unlockPages(unsigned long, int)>
c000c3a2:	83 c4 10             	add    esp,0x10
c000c3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000c3a8:	e8 63 af 00 00       	call   c0017310 <KeRestorePreemption()>
c000c3ad:	31 f6                	xor    esi,esi
c000c3af:	90                   	nop
c000c3b0:	83 c4 1c             	add    esp,0x1c
c000c3b3:	89 f0                	mov    eax,esi
c000c3b5:	5b                   	pop    ebx
c000c3b6:	5e                   	pop    esi
c000c3b7:	5f                   	pop    edi
c000c3b8:	5d                   	pop    ebp
c000c3b9:	c3                   	ret    

c000c3ba <VCache::read(unsigned long long, int, void*)>:
c000c3ba:	55                   	push   ebp
c000c3bb:	57                   	push   edi
c000c3bc:	bf 00 10 00 00       	mov    edi,0x1000
c000c3c1:	56                   	push   esi
c000c3c2:	53                   	push   ebx
c000c3c3:	83 ec 2c             	sub    esp,0x2c
c000c3c6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c3ca:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000c3ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c3d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3da:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000c3de:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c3e2:	e8 01 af 00 00       	call   c00172e8 <KeDisablePreemption()>
c000c3e7:	50                   	push   eax
c000c3e8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c3eb:	0f af c6             	imul   eax,esi
c000c3ee:	05 ff 0f 00 00       	add    eax,0xfff
c000c3f3:	99                   	cdq    
c000c3f4:	f7 ff                	idiv   edi
c000c3f6:	50                   	push   eax
c000c3f7:	55                   	push   ebp
c000c3f8:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c3fe:	e8 4d 89 00 00       	call   c0014d50 <VAS::canLockPages(unsigned long, int)>
c000c403:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000c407:	83 c4 10             	add    esp,0x10
c000c40a:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000c40f:	74 1f                	je     c000c430 <VCache::read(unsigned long long, int, void*)+0x76>
c000c411:	50                   	push   eax
c000c412:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c415:	0f af c6             	imul   eax,esi
c000c418:	05 ff 0f 00 00       	add    eax,0xfff
c000c41d:	99                   	cdq    
c000c41e:	f7 ff                	idiv   edi
c000c420:	50                   	push   eax
c000c421:	55                   	push   ebp
c000c422:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c428:	e8 87 8b 00 00       	call   c0014fb4 <VAS::lockPages(unsigned long, int)>
c000c42d:	83 c4 10             	add    esp,0x10
c000c430:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c434:	74 0e                	je     c000c444 <VCache::read(unsigned long long, int, void*)+0x8a>
c000c436:	83 ec 0c             	sub    esp,0xc
c000c439:	53                   	push   ebx
c000c43a:	e8 e1 fc ff ff       	call   c000c120 <VCache::writeWriteBuffer()>
c000c43f:	83 c4 10             	add    esp,0x10
c000c442:	66 90                	xchg   ax,ax
c000c444:	83 fe 01             	cmp    esi,0x1
c000c447:	0f 85 ef 00 00 00    	jne    c000c53c <VCache::read(unsigned long long, int, void*)+0x182>
c000c44d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000c450:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000c457:	0f 85 df 00 00 00    	jne    c000c53c <VCache::read(unsigned long long, int, void*)+0x182>
c000c45d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000c460:	89 fe                	mov    esi,edi
c000c462:	f7 de                	neg    esi
c000c464:	89 f0                	mov    eax,esi
c000c466:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000c46a:	c1 f8 1f             	sar    eax,0x1f
c000c46d:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000c471:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c475:	89 f0                	mov    eax,esi
c000c477:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c47b:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000c47f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000c483:	89 f2                	mov    edx,esi
c000c485:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000c48a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000c48e:	74 0c                	je     c000c49c <VCache::read(unsigned long long, int, void*)+0xe2>
c000c490:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000c493:	75 07                	jne    c000c49c <VCache::read(unsigned long long, int, void*)+0xe2>
c000c495:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000c498:	74 4e                	je     c000c4e8 <VCache::read(unsigned long long, int, void*)+0x12e>
c000c49a:	66 90                	xchg   ax,ax
c000c49c:	83 ec 0c             	sub    esp,0xc
c000c49f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000c4a3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000c4a6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c4a9:	8b 31                	mov    esi,DWORD PTR [ecx]
c000c4ab:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000c4ae:	57                   	push   edi
c000c4af:	52                   	push   edx
c000c4b0:	50                   	push   eax
c000c4b1:	51                   	push   ecx
c000c4b2:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000c4b5:	83 c4 20             	add    esp,0x20
c000c4b8:	89 c7                	mov    edi,eax
c000c4ba:	85 c0                	test   eax,eax
c000c4bc:	74 2a                	je     c000c4e8 <VCache::read(unsigned long long, int, void*)+0x12e>
c000c4be:	83 ec 0c             	sub    esp,0xc
c000c4c1:	68 38 ba 02 c0       	push   0xc002ba38
c000c4c6:	e8 b1 aa ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c4cb:	83 c4 10             	add    esp,0x10
c000c4ce:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000c4d3:	0f 84 b3 00 00 00    	je     c000c58c <VCache::read(unsigned long long, int, void*)+0x1d2>
c000c4d9:	51                   	push   ecx
c000c4da:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c4dd:	05 ff 0f 00 00       	add    eax,0xfff
c000c4e2:	e9 8d 00 00 00       	jmp    c000c574 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000c4e7:	90                   	nop
c000c4e8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c4eb:	89 ef                	mov    edi,ebp
c000c4ed:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c4f3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000c4f6:	8d 70 ff             	lea    esi,[eax-0x1]
c000c4f9:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000c4fd:	0f af f1             	imul   esi,ecx
c000c500:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000c503:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c505:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000c50a:	74 24                	je     c000c530 <VCache::read(unsigned long long, int, void*)+0x176>
c000c50c:	b9 00 10 00 00       	mov    ecx,0x1000
c000c511:	52                   	push   edx
c000c512:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c515:	05 ff 0f 00 00       	add    eax,0xfff
c000c51a:	99                   	cdq    
c000c51b:	f7 f9                	idiv   ecx
c000c51d:	50                   	push   eax
c000c51e:	55                   	push   ebp
c000c51f:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c525:	e8 62 88 00 00       	call   c0014d8c <VAS::unlockPages(unsigned long, int)>
c000c52a:	83 c4 10             	add    esp,0x10
c000c52d:	8d 76 00             	lea    esi,[esi+0x0]
c000c530:	e8 db ad 00 00       	call   c0017310 <KeRestorePreemption()>
c000c535:	31 ff                	xor    edi,edi
c000c537:	eb 5b                	jmp    c000c594 <VCache::read(unsigned long long, int, void*)+0x1da>
c000c539:	8d 76 00             	lea    esi,[esi+0x0]
c000c53c:	83 ec 0c             	sub    esp,0xc
c000c53f:	53                   	push   ebx
c000c540:	e8 cb fb ff ff       	call   c000c110 <VCache::invalidateReadBuffer()>
c000c545:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c548:	8b 10                	mov    edx,DWORD PTR [eax]
c000c54a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c54d:	56                   	push   esi
c000c54e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c552:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c556:	50                   	push   eax
c000c557:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c55a:	83 c4 20             	add    esp,0x20
c000c55d:	89 c7                	mov    edi,eax
c000c55f:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000c564:	74 26                	je     c000c58c <VCache::read(unsigned long long, int, void*)+0x1d2>
c000c566:	50                   	push   eax
c000c567:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000c56b:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000c571:	8d 76 00             	lea    esi,[esi+0x0]
c000c574:	b9 00 10 00 00       	mov    ecx,0x1000
c000c579:	99                   	cdq    
c000c57a:	f7 f9                	idiv   ecx
c000c57c:	50                   	push   eax
c000c57d:	55                   	push   ebp
c000c57e:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000c584:	e8 03 88 00 00       	call   c0014d8c <VAS::unlockPages(unsigned long, int)>
c000c589:	83 c4 10             	add    esp,0x10
c000c58c:	e8 7f ad 00 00       	call   c0017310 <KeRestorePreemption()>
c000c591:	8d 76 00             	lea    esi,[esi+0x0]
c000c594:	83 c4 2c             	add    esp,0x2c
c000c597:	89 f8                	mov    eax,edi
c000c599:	5b                   	pop    ebx
c000c59a:	5e                   	pop    esi
c000c59b:	5f                   	pop    edi
c000c59c:	5d                   	pop    ebp
c000c59d:	c3                   	ret    

c000c59e <Video::putrect(int, int, int, int, unsigned int)>:
c000c59e:	55                   	push   ebp
c000c59f:	57                   	push   edi
c000c5a0:	56                   	push   esi
c000c5a1:	53                   	push   ebx
c000c5a2:	83 ec 1c             	sub    esp,0x1c
c000c5a5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c5a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c5ad:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000c5b1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000c5b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c5b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c5bd:	01 df                	add    edi,ebx
c000c5bf:	39 fb                	cmp    ebx,edi
c000c5c1:	7d 1f                	jge    c000c5e2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000c5c3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c5c7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000c5cb:	7d 12                	jge    c000c5df <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000c5cd:	8b 16                	mov    edx,DWORD PTR [esi]
c000c5cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c5d3:	53                   	push   ebx
c000c5d4:	55                   	push   ebp
c000c5d5:	45                   	inc    ebp
c000c5d6:	56                   	push   esi
c000c5d7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c5da:	83 c4 10             	add    esp,0x10
c000c5dd:	eb e8                	jmp    c000c5c7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000c5df:	43                   	inc    ebx
c000c5e0:	eb dd                	jmp    c000c5bf <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000c5e2:	83 c4 1c             	add    esp,0x1c
c000c5e5:	5b                   	pop    ebx
c000c5e6:	5e                   	pop    esi
c000c5e7:	5f                   	pop    edi
c000c5e8:	5d                   	pop    ebp
c000c5e9:	c3                   	ret    

c000c5ea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000c5ea:	55                   	push   ebp
c000c5eb:	57                   	push   edi
c000c5ec:	31 ff                	xor    edi,edi
c000c5ee:	56                   	push   esi
c000c5ef:	53                   	push   ebx
c000c5f0:	83 ec 1c             	sub    esp,0x1c
c000c5f3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000c5f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c5fb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000c602:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000c607:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c60b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000c60f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c613:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000c616:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c61a:	01 f9                	add    ecx,edi
c000c61c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000c620:	7d 2f                	jge    c000c651 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000c622:	31 f6                	xor    esi,esi
c000c624:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c628:	01 f2                	add    edx,esi
c000c62a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000c62e:	7d 1a                	jge    c000c64a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000c630:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c633:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000c636:	46                   	inc    esi
c000c637:	51                   	push   ecx
c000c638:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c63c:	52                   	push   edx
c000c63d:	55                   	push   ebp
c000c63e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c641:	83 c4 10             	add    esp,0x10
c000c644:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c648:	eb da                	jmp    c000c624 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000c64a:	47                   	inc    edi
c000c64b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000c64f:	eb c5                	jmp    c000c616 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000c651:	83 c4 1c             	add    esp,0x1c
c000c654:	5b                   	pop    ebx
c000c655:	5e                   	pop    esi
c000c656:	5f                   	pop    edi
c000c657:	5d                   	pop    ebp
c000c658:	c3                   	ret    
c000c659:	90                   	nop

c000c65a <Video::blit(unsigned int*, int, int, int, int)>:
c000c65a:	55                   	push   ebp
c000c65b:	57                   	push   edi
c000c65c:	56                   	push   esi
c000c65d:	53                   	push   ebx
c000c65e:	83 ec 1c             	sub    esp,0x1c
c000c661:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c665:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c669:	85 c0                	test   eax,eax
c000c66b:	79 02                	jns    c000c66f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000c66d:	31 c0                	xor    eax,eax
c000c66f:	c1 e0 02             	shl    eax,0x2
c000c672:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c676:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c67a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c67e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000c682:	39 d8                	cmp    eax,ebx
c000c684:	7e 49                	jle    c000c6cf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000c686:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000c68c:	7c 41                	jl     c000c6cf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000c68e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c692:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c696:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c69a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000c69e:	39 f9                	cmp    ecx,edi
c000c6a0:	7e 22                	jle    c000c6c4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000c6a2:	83 c5 04             	add    ebp,0x4
c000c6a5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000c6ab:	7c 14                	jl     c000c6c1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000c6ad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000c6af:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000c6b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c6b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c6ba:	56                   	push   esi
c000c6bb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000c6be:	83 c4 10             	add    esp,0x10
c000c6c1:	47                   	inc    edi
c000c6c2:	eb d2                	jmp    c000c696 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000c6c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6c8:	43                   	inc    ebx
c000c6c9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c6cd:	eb ab                	jmp    c000c67a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000c6cf:	83 c4 1c             	add    esp,0x1c
c000c6d2:	5b                   	pop    ebx
c000c6d3:	5e                   	pop    esi
c000c6d4:	5f                   	pop    edi
c000c6d5:	5d                   	pop    ebp
c000c6d6:	c3                   	ret    
c000c6d7:	90                   	nop

c000c6d8 <Video::clearScreen(unsigned int)>:
c000c6d8:	83 ec 14             	sub    esp,0x14
c000c6db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c6df:	8b 10                	mov    edx,DWORD PTR [eax]
c000c6e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6e5:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000c6eb:	ff b0 58 01 00 00    	push   DWORD PTR [eax+0x158]
c000c6f1:	6a 00                	push   0x0
c000c6f3:	6a 00                	push   0x0
c000c6f5:	50                   	push   eax
c000c6f6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c6f9:	83 c4 2c             	add    esp,0x2c
c000c6fc:	c3                   	ret    
c000c6fd:	90                   	nop

c000c6fe <Video::putpixel(int, int, unsigned int)>:
c000c6fe:	c7 44 24 04 70 ba 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ba70
c000c706:	e9 59 43 00 00       	jmp    c0010a64 <KePanic(char const*)>
c000c70b:	90                   	nop

c000c70c <Video::readPixelApprox(int, int)>:
c000c70c:	83 ec 18             	sub    esp,0x18
c000c70f:	68 91 ba 02 c0       	push   0xc002ba91
c000c714:	e8 4b 43 00 00       	call   c0010a64 <KePanic(char const*)>
c000c719:	31 c0                	xor    eax,eax
c000c71b:	83 c4 1c             	add    esp,0x1c
c000c71e:	c3                   	ret    
c000c71f:	90                   	nop

c000c720 <Video::Video(char const*)>:
c000c720:	83 ec 0c             	sub    esp,0xc
c000c723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c727:	83 ec 08             	sub    esp,0x8
c000c72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c72e:	50                   	push   eax
c000c72f:	e8 c2 e1 ff ff       	call   c000a8f6 <Device::Device(char const*)>
c000c734:	83 c4 10             	add    esp,0x10
c000c737:	ba 34 bb 02 c0       	mov    edx,0xc002bb34
c000c73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c740:	89 10                	mov    DWORD PTR [eax],edx
c000c742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c746:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000c750:	90                   	nop
c000c751:	83 c4 0c             	add    esp,0xc
c000c754:	c3                   	ret    
c000c755:	90                   	nop

c000c756 <Video::~Video()>:
c000c756:	83 ec 0c             	sub    esp,0xc
c000c759:	ba 34 bb 02 c0       	mov    edx,0xc002bb34
c000c75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c762:	89 10                	mov    DWORD PTR [eax],edx
c000c764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c768:	83 ec 0c             	sub    esp,0xc
c000c76b:	50                   	push   eax
c000c76c:	e8 25 df ff ff       	call   c000a696 <Device::~Device()>
c000c771:	83 c4 10             	add    esp,0x10
c000c774:	90                   	nop
c000c775:	83 c4 0c             	add    esp,0xc
c000c778:	c3                   	ret    
c000c779:	90                   	nop

c000c77a <Video::~Video()>:
c000c77a:	83 ec 0c             	sub    esp,0xc
c000c77d:	83 ec 0c             	sub    esp,0xc
c000c780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c784:	e8 cd ff ff ff       	call   c000c756 <Video::~Video()>
c000c789:	83 c4 10             	add    esp,0x10
c000c78c:	83 ec 08             	sub    esp,0x8
c000c78f:	68 64 11 00 00       	push   0x1164
c000c794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c798:	e8 7b 19 00 00       	call   c000e118 <operator delete(void*, unsigned long)>
c000c79d:	83 c4 10             	add    esp,0x10
c000c7a0:	83 c4 0c             	add    esp,0xc
c000c7a3:	c3                   	ret    

c000c7a4 <Video::isMonochrome()>:
c000c7a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7a8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000c7ae:	c3                   	ret    
c000c7af:	90                   	nop

c000c7b0 <Video::getWidth()>:
c000c7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7b4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c7ba:	c3                   	ret    
c000c7bb:	90                   	nop

c000c7bc <Video::getHeight()>:
c000c7bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c7c6:	c3                   	ret    
c000c7c7:	90                   	nop

c000c7c8 <Video::savePixelsInSquare(int, int)>:
c000c7c8:	55                   	push   ebp
c000c7c9:	57                   	push   edi
c000c7ca:	56                   	push   esi
c000c7cb:	53                   	push   ebx
c000c7cc:	83 ec 1c             	sub    esp,0x1c
c000c7cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c7d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c7d7:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c000c7dd:	89 de                	mov    esi,ebx
c000c7df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7e3:	53                   	push   ebx
c000c7e4:	e8 d3 ff ff ff       	call   c000c7bc <Video::getHeight()>
c000c7e9:	59                   	pop    ecx
c000c7ea:	39 c7                	cmp    edi,eax
c000c7ec:	7d 36                	jge    c000c824 <Video::savePixelsInSquare(int, int)+0x5c>
c000c7ee:	31 ed                	xor    ebp,ebp
c000c7f0:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c7f4:	53                   	push   ebx
c000c7f5:	01 e9                	add    ecx,ebp
c000c7f7:	e8 b4 ff ff ff       	call   c000c7b0 <Video::getWidth()>
c000c7fc:	5a                   	pop    edx
c000c7fd:	39 c8                	cmp    eax,ecx
c000c7ff:	7e 19                	jle    c000c81a <Video::savePixelsInSquare(int, int)+0x52>
c000c801:	50                   	push   eax
c000c802:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c804:	57                   	push   edi
c000c805:	51                   	push   ecx
c000c806:	53                   	push   ebx
c000c807:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000c80a:	83 c4 10             	add    esp,0x10
c000c80d:	89 84 ae 64 01 00 00 	mov    DWORD PTR [esi+ebp*4+0x164],eax
c000c814:	45                   	inc    ebp
c000c815:	83 fd 20             	cmp    ebp,0x20
c000c818:	75 d6                	jne    c000c7f0 <Video::savePixelsInSquare(int, int)+0x28>
c000c81a:	47                   	inc    edi
c000c81b:	83 ee 80             	sub    esi,0xffffff80
c000c81e:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
c000c822:	75 bf                	jne    c000c7e3 <Video::savePixelsInSquare(int, int)+0x1b>
c000c824:	83 c4 1c             	add    esp,0x1c
c000c827:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c000c82d:	5b                   	pop    ebx
c000c82e:	5e                   	pop    esi
c000c82f:	5f                   	pop    edi
c000c830:	5d                   	pop    ebp
c000c831:	c3                   	ret    

c000c832 <Video::drawCursor(int, int, unsigned int*, int)>:
c000c832:	55                   	push   ebp
c000c833:	57                   	push   edi
c000c834:	56                   	push   esi
c000c835:	53                   	push   ebx
c000c836:	83 ec 2c             	sub    esp,0x2c
c000c839:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c83d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000c841:	83 f8 01             	cmp    eax,0x1
c000c844:	19 c9                	sbb    ecx,ecx
c000c846:	31 db                	xor    ebx,ebx
c000c848:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c84c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c850:	f7 54 24 14          	not    DWORD PTR [esp+0x14]
c000c854:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000c85c:	81 64 24 14 ff ff ff 00 	and    DWORD PTR [esp+0x14],0xffffff
c000c864:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000c868:	01 d8                	add    eax,ebx
c000c86a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c86e:	56                   	push   esi
c000c86f:	e8 48 ff ff ff       	call   c000c7bc <Video::getHeight()>
c000c874:	59                   	pop    ecx
c000c875:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c879:	0f 8e 81 00 00 00    	jle    c000c900 <Video::drawCursor(int, int, unsigned int*, int)+0xce>
c000c87f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c883:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000c886:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c88a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c88e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000c893:	8b ac 98 80 00 00 00 	mov    ebp,DWORD PTR [eax+ebx*4+0x80]
c000c89a:	75 04                	jne    c000c8a0 <Video::drawCursor(int, int, unsigned int*, int)+0x6e>
c000c89c:	85 ed                	test   ebp,ebp
c000c89e:	74 56                	je     c000c8f6 <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000c8a0:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c8a4:	89 f8                	mov    eax,edi
c000c8a6:	83 c0 20             	add    eax,0x20
c000c8a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c8ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8b1:	09 e8                	or     eax,ebp
c000c8b3:	74 41                	je     c000c8f6 <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000c8b5:	56                   	push   esi
c000c8b6:	e8 f5 fe ff ff       	call   c000c7b0 <Video::getWidth()>
c000c8bb:	5a                   	pop    edx
c000c8bc:	39 c7                	cmp    edi,eax
c000c8be:	7d 36                	jge    c000c8f6 <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000c8c0:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c8c6:	74 08                	je     c000c8d0 <Video::drawCursor(int, int, unsigned int*, int)+0x9e>
c000c8c8:	8b 06                	mov    eax,DWORD PTR [esi]
c000c8ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ce:	eb 0d                	jmp    c000c8dd <Video::drawCursor(int, int, unsigned int*, int)+0xab>
c000c8d0:	f6 44 24 0c 01       	test   BYTE PTR [esp+0xc],0x1
c000c8d5:	74 12                	je     c000c8e9 <Video::drawCursor(int, int, unsigned int*, int)+0xb7>
c000c8d7:	8b 06                	mov    eax,DWORD PTR [esi]
c000c8d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	57                   	push   edi
c000c8e2:	56                   	push   esi
c000c8e3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	d1 ed                	shr    ebp,1
c000c8eb:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c000c8ef:	47                   	inc    edi
c000c8f0:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000c8f4:	75 b7                	jne    c000c8ad <Video::drawCursor(int, int, unsigned int*, int)+0x7b>
c000c8f6:	43                   	inc    ebx
c000c8f7:	83 fb 20             	cmp    ebx,0x20
c000c8fa:	0f 85 64 ff ff ff    	jne    c000c864 <Video::drawCursor(int, int, unsigned int*, int)+0x32>
c000c900:	83 c4 2c             	add    esp,0x2c
c000c903:	5b                   	pop    ebx
c000c904:	5e                   	pop    esi
c000c905:	5f                   	pop    edi
c000c906:	5d                   	pop    ebp
c000c907:	c3                   	ret    

c000c908 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000c908:	55                   	push   ebp
c000c909:	57                   	push   edi
c000c90a:	56                   	push   esi
c000c90b:	53                   	push   ebx
c000c90c:	83 ec 48             	sub    esp,0x48
c000c90f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c913:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000c917:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000c91b:	c1 e0 08             	shl    eax,0x8
c000c91e:	01 d0                	add    eax,edx
c000c920:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000c924:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c928:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000c92c:	c1 e0 08             	shl    eax,0x8
c000c92f:	01 d0                	add    eax,edx
c000c931:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c935:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c939:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000c93e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c946:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000c94d:	50                   	push   eax
c000c94e:	e8 bc 3c 00 00       	call   c001060f <malloc>
c000c953:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c957:	83 c4 10             	add    esp,0x10
c000c95a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000c95f:	75 10                	jne    c000c971 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000c961:	83 ec 0c             	sub    esp,0xc
c000c964:	68 bc ba 02 c0       	push   0xc002babc
c000c969:	e8 f6 40 00 00       	call   c0010a64 <KePanic(char const*)>
c000c96e:	83 c4 10             	add    esp,0x10
c000c971:	51                   	push   ecx
c000c972:	51                   	push   ecx
c000c973:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c977:	50                   	push   eax
c000c978:	68 cc ba 02 c0       	push   0xc002bacc
c000c97d:	e8 fa a5 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c982:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000c985:	83 e0 20             	and    eax,0x20
c000c988:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c98c:	85 c0                	test   eax,eax
c000c98e:	5e                   	pop    esi
c000c98f:	0f 94 c0             	sete   al
c000c992:	5f                   	pop    edi
c000c993:	0f b6 c0             	movzx  eax,al
c000c996:	be 12 00 00 00       	mov    esi,0x12
c000c99b:	50                   	push   eax
c000c99c:	68 d6 ba 02 c0       	push   0xc002bad6
c000c9a1:	e8 d6 a5 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c9a6:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000c9aa:	83 c4 10             	add    esp,0x10
c000c9ad:	89 d0                	mov    eax,edx
c000c9af:	85 d2                	test   edx,edx
c000c9b1:	74 11                	je     c000c9c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000c9b3:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000c9b7:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000c9bb:	c1 fe 03             	sar    esi,0x3
c000c9be:	0f af f1             	imul   esi,ecx
c000c9c1:	83 c6 12             	add    esi,0x12
c000c9c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000c9c9:	74 07                	je     c000c9d2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000c9cb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000c9d0:	75 12                	jne    c000c9e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000c9d2:	83 ec 0c             	sub    esp,0xc
c000c9d5:	68 e4 ba 02 c0       	push   0xc002bae4
c000c9da:	e8 9d a5 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c9df:	e9 a0 02 00 00       	jmp    c000cc84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000c9e4:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000c9e8:	83 f9 02             	cmp    ecx,0x2
c000c9eb:	74 0e                	je     c000c9fb <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000c9ed:	83 f9 0a             	cmp    ecx,0xa
c000c9f0:	0f 84 c8 00 00 00    	je     c000cabe <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000c9f6:	e9 72 02 00 00       	jmp    c000cc6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000c9fb:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ca00:	75 0e                	jne    c000ca10 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000ca02:	84 c0                	test   al,al
c000ca04:	75 0a                	jne    c000ca10 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000ca06:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ca09:	83 e8 18             	sub    eax,0x18
c000ca0c:	a8 f7                	test   al,0xf7
c000ca0e:	74 0d                	je     c000ca1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000ca10:	83 ec 0c             	sub    esp,0xc
c000ca13:	68 f9 ba 02 c0       	push   0xc002baf9
c000ca18:	e9 58 02 00 00       	jmp    c000cc75 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000ca1d:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000ca22:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ca2a:	31 c0                	xor    eax,eax
c000ca2c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ca30:	89 c7                	mov    edi,eax
c000ca32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ca3a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca3f:	75 15                	jne    c000ca56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000ca41:	99                   	cdq    
c000ca42:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000ca46:	85 d2                	test   edx,edx
c000ca48:	75 0c                	jne    c000ca56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000ca4a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ca4e:	29 c7                	sub    edi,eax
c000ca50:	4f                   	dec    edi
c000ca51:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000ca56:	31 d2                	xor    edx,edx
c000ca58:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ca5c:	75 08                	jne    c000ca66 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ca5e:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000ca63:	c1 e2 18             	shl    edx,0x18
c000ca66:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000ca6b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ca6f:	c1 e1 10             	shl    ecx,0x10
c000ca72:	8d 47 01             	lea    eax,[edi+0x1]
c000ca75:	89 cd                	mov    ebp,ecx
c000ca77:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000ca7c:	c1 e1 08             	shl    ecx,0x8
c000ca7f:	09 e9                	or     ecx,ebp
c000ca81:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000ca85:	09 e9                	or     ecx,ebp
c000ca87:	09 d1                	or     ecx,edx
c000ca89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca8d:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000ca90:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000ca94:	c1 fa 03             	sar    edx,0x3
c000ca97:	01 d6                	add    esi,edx
c000ca99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca9d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000caa1:	7e 04                	jle    c000caa7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000caa3:	89 c7                	mov    edi,eax
c000caa5:	eb 93                	jmp    c000ca3a <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000caa7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000caab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000caaf:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cab3:	0f 8f 77 ff ff ff    	jg     c000ca30 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000cab9:	e9 d3 01 00 00       	jmp    c000cc91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000cabe:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000cac3:	75 0e                	jne    c000cad3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000cac5:	85 d2                	test   edx,edx
c000cac7:	75 0a                	jne    c000cad3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000cac9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000cacc:	83 e8 18             	sub    eax,0x18
c000cacf:	a8 f7                	test   al,0xf7
c000cad1:	74 0d                	je     c000cae0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000cad3:	83 ec 0c             	sub    esp,0xc
c000cad6:	68 07 bb 02 c0       	push   0xc002bb07
c000cadb:	e9 95 01 00 00       	jmp    c000cc75 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000cae0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cae8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000caf0:	31 c9                	xor    ecx,ecx
c000caf2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000caf6:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000cafa:	0f 8e 91 01 00 00    	jle    c000cc91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000cb00:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000cb04:	0f 8d 87 01 00 00    	jge    c000cc91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000cb0a:	8d 46 01             	lea    eax,[esi+0x1]
c000cb0d:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000cb11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb15:	83 fd 7f             	cmp    ebp,0x7f
c000cb18:	89 e8                	mov    eax,ebp
c000cb1a:	0f 8e 9d 00 00 00    	jle    c000cbbd <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000cb20:	83 e0 7f             	and    eax,0x7f
c000cb23:	31 d2                	xor    edx,edx
c000cb25:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cb29:	40                   	inc    eax
c000cb2a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000cb2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb32:	75 0a                	jne    c000cb3e <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000cb34:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000cb39:	89 ea                	mov    edx,ebp
c000cb3b:	c1 e2 18             	shl    edx,0x18
c000cb3e:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000cb43:	c1 e0 10             	shl    eax,0x10
c000cb46:	89 c7                	mov    edi,eax
c000cb48:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000cb4d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cb51:	c1 e0 08             	shl    eax,0x8
c000cb54:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000cb58:	09 f8                	or     eax,edi
c000cb5a:	31 f6                	xor    esi,esi
c000cb5c:	09 c5                	or     ebp,eax
c000cb5e:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000cb63:	09 d5                	or     ebp,edx
c000cb65:	85 ff                	test   edi,edi
c000cb67:	75 1d                	jne    c000cb86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000cb69:	89 c8                	mov    eax,ecx
c000cb6b:	99                   	cdq    
c000cb6c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000cb70:	85 d2                	test   edx,edx
c000cb72:	75 12                	jne    c000cb86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000cb74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cb78:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000cb7c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000cb80:	49                   	dec    ecx
c000cb81:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000cb86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb8a:	8d 51 01             	lea    edx,[ecx+0x1]
c000cb8d:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000cb90:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000cb94:	8d 46 01             	lea    eax,[esi+0x1]
c000cb97:	7e 06                	jle    c000cb9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000cb99:	89 c6                	mov    esi,eax
c000cb9b:	89 d1                	mov    ecx,edx
c000cb9d:	eb c6                	jmp    c000cb65 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000cb9f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000cba3:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000cba7:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000cbab:	c1 f8 03             	sar    eax,0x3
c000cbae:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000cbb2:	89 d1                	mov    ecx,edx
c000cbb4:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cbb8:	e9 35 ff ff ff       	jmp    c000caf2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000cbbd:	8d 45 01             	lea    eax,[ebp+0x1]
c000cbc0:	31 f6                	xor    esi,esi
c000cbc2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cbcb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cbcf:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000cbd4:	75 1d                	jne    c000cbf3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000cbd6:	89 c8                	mov    eax,ecx
c000cbd8:	99                   	cdq    
c000cbd9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000cbdd:	85 d2                	test   edx,edx
c000cbdf:	75 12                	jne    c000cbf3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000cbe1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cbe5:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000cbe9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000cbed:	49                   	dec    ecx
c000cbee:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000cbf3:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000cbfb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000cbff:	75 10                	jne    c000cc11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000cc01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc05:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000cc0a:	c1 e7 18             	shl    edi,0x18
c000cc0d:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000cc11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc15:	8d 51 01             	lea    edx,[ecx+0x1]
c000cc18:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000cc1d:	c1 e0 10             	shl    eax,0x10
c000cc20:	89 c7                	mov    edi,eax
c000cc22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc26:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000cc2b:	c1 e0 08             	shl    eax,0x8
c000cc2e:	09 f8                	or     eax,edi
c000cc30:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000cc34:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000cc38:	09 f8                	or     eax,edi
c000cc3a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc3e:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000cc42:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000cc45:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000cc49:	c1 f8 03             	sar    eax,0x3
c000cc4c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000cc50:	8d 46 01             	lea    eax,[esi+0x1]
c000cc53:	39 f5                	cmp    ebp,esi
c000cc55:	7e 09                	jle    c000cc60 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000cc57:	89 c6                	mov    esi,eax
c000cc59:	89 d1                	mov    ecx,edx
c000cc5b:	e9 6f ff ff ff       	jmp    c000cbcf <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000cc60:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000cc64:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000cc68:	e9 45 ff ff ff       	jmp    c000cbb2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000cc6d:	52                   	push   edx
c000cc6e:	52                   	push   edx
c000cc6f:	51                   	push   ecx
c000cc70:	68 16 bb 02 c0       	push   0xc002bb16
c000cc75:	e8 02 a3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000cc7a:	58                   	pop    eax
c000cc7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc7f:	e8 9b 39 00 00       	call   c001061f <free>
c000cc84:	83 c4 10             	add    esp,0x10
c000cc87:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000cc8f:	eb 14                	jmp    c000cca5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000cc91:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000cc95:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cc99:	89 18                	mov    DWORD PTR [eax],ebx
c000cc9b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000cc9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cca3:	89 18                	mov    DWORD PTR [eax],ebx
c000cca5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cca9:	83 c4 3c             	add    esp,0x3c
c000ccac:	5b                   	pop    ebx
c000ccad:	5e                   	pop    esi
c000ccae:	5f                   	pop    edi
c000ccaf:	5d                   	pop    ebp
c000ccb0:	c3                   	ret    
c000ccb1:	90                   	nop

c000ccb2 <Video::putTGA(int, int, unsigned char*, int)>:
c000ccb2:	55                   	push   ebp
c000ccb3:	57                   	push   edi
c000ccb4:	56                   	push   esi
c000ccb5:	53                   	push   ebx
c000ccb6:	83 ec 28             	sub    esp,0x28
c000ccb9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ccbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ccc1:	50                   	push   eax
c000ccc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ccc6:	50                   	push   eax
c000ccc7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cccb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cccf:	57                   	push   edi
c000ccd0:	e8 33 fc ff ff       	call   c000c908 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ccd5:	83 c4 20             	add    esp,0x20
c000ccd8:	85 c0                	test   eax,eax
c000ccda:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ccde:	74 3a                	je     c000cd1a <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000cce0:	89 c6                	mov    esi,eax
c000cce2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cce6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ccea:	39 d8                	cmp    eax,ebx
c000ccec:	7e 2c                	jle    c000cd1a <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000ccee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ccf2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ccf6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ccfa:	39 e8                	cmp    eax,ebp
c000ccfc:	7e 19                	jle    c000cd17 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000ccfe:	83 c6 04             	add    esi,0x4
c000cd01:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000cd04:	85 c0                	test   eax,eax
c000cd06:	79 0c                	jns    c000cd14 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000cd08:	8b 17                	mov    edx,DWORD PTR [edi]
c000cd0a:	50                   	push   eax
c000cd0b:	53                   	push   ebx
c000cd0c:	55                   	push   ebp
c000cd0d:	57                   	push   edi
c000cd0e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	45                   	inc    ebp
c000cd15:	eb db                	jmp    c000ccf2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000cd17:	43                   	inc    ebx
c000cd18:	eb c8                	jmp    c000cce2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000cd1a:	83 c4 1c             	add    esp,0x1c
c000cd1d:	5b                   	pop    ebx
c000cd1e:	5e                   	pop    esi
c000cd1f:	5f                   	pop    edi
c000cd20:	5d                   	pop    ebp
c000cd21:	c3                   	ret    
c000cd22:	66 90                	xchg   ax,ax

c000cd24 <ACPI::close(int, int, void*)>:
c000cd24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd29:	c3                   	ret    
c000cd2a:	66 90                	xchg   ax,ax

c000cd2c <loadACPITables(unsigned char*)>:
c000cd2c:	57                   	push   edi
c000cd2d:	56                   	push   esi
c000cd2e:	53                   	push   ebx
c000cd2f:	83 ec 60             	sub    esp,0x60
c000cd32:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000cd37:	0f 84 43 02 00 00    	je     c000cf80 <loadACPITables(unsigned char*)+0x254>
c000cd3d:	a0 80 6d 03 c0       	mov    al,ds:0xc0036d80
c000cd42:	0f b6 c0             	movzx  eax,al
c000cd45:	85 c0                	test   eax,eax
c000cd47:	74 7b                	je     c000cdc4 <loadACPITables(unsigned char*)+0x98>
c000cd49:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cd4d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cd51:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cd55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd58:	83 e8 24             	sub    eax,0x24
c000cd5b:	c1 e8 03             	shr    eax,0x3
c000cd5e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd62:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000cd6a:	66 90                	xchg   ax,ax
c000cd6c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000cd70:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000cd74:	0f 8d ba 00 00 00    	jge    c000ce34 <loadACPITables(unsigned char*)+0x108>
c000cd7a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cd7e:	83 c0 24             	add    eax,0x24
c000cd81:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cd85:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cd89:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000cd8d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000cd91:	c1 e0 03             	shl    eax,0x3
c000cd94:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000cd98:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cd9c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000cda1:	89 c1                	mov    ecx,eax
c000cda3:	a1 60 6b 03 c0       	mov    eax,ds:0xc0036b60
c000cda8:	8d 50 01             	lea    edx,[eax+0x1]
c000cdab:	89 15 60 6b 03 c0    	mov    DWORD PTR ds:0xc0036b60,edx
c000cdb1:	89 ca                	mov    edx,ecx
c000cdb3:	89 14 c5 84 6b 03 c0 	mov    DWORD PTR [eax*8-0x3ffc947c],edx
c000cdba:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000cdbf:	eb ab                	jmp    c000cd6c <loadACPITables(unsigned char*)+0x40>
c000cdc1:	8d 76 00             	lea    esi,[esi+0x0]
c000cdc4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cdc8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cdd3:	83 e8 24             	sub    eax,0x24
c000cdd6:	c1 e8 02             	shr    eax,0x2
c000cdd9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000cddd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000cde5:	8d 76 00             	lea    esi,[esi+0x0]
c000cde8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cdec:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000cdf0:	7d 42                	jge    c000ce34 <loadACPITables(unsigned char*)+0x108>
c000cdf2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cdf6:	83 c0 24             	add    eax,0x24
c000cdf9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cdfd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce01:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ce05:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ce09:	c1 e0 02             	shl    eax,0x2
c000ce0c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ce10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ce14:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce16:	a1 60 6b 03 c0       	mov    eax,ds:0xc0036b60
c000ce1b:	8d 50 01             	lea    edx,[eax+0x1]
c000ce1e:	89 15 60 6b 03 c0    	mov    DWORD PTR ds:0xc0036b60,edx
c000ce24:	89 ca                	mov    edx,ecx
c000ce26:	89 14 c5 84 6b 03 c0 	mov    DWORD PTR [eax*8-0x3ffc947c],edx
c000ce2d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ce32:	eb b4                	jmp    c000cde8 <loadACPITables(unsigned char*)+0xbc>
c000ce34:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ce3c:	a1 60 6b 03 c0       	mov    eax,ds:0xc0036b60
c000ce41:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ce45:	0f 8d 39 01 00 00    	jge    c000cf84 <loadACPITables(unsigned char*)+0x258>
c000ce4b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce4f:	8b 04 c5 84 6b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc947c]
c000ce56:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ce5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ce66:	25 ff 0f 00 00       	and    eax,0xfff
c000ce6b:	89 c6                	mov    esi,eax
c000ce6d:	8b 1d 90 72 03 c0    	mov    ebx,DWORD PTR ds:0xc0037290
c000ce73:	83 ec 0c             	sub    esp,0xc
c000ce76:	6a 01                	push   0x1
c000ce78:	e8 7e 71 00 00       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c000ce7d:	83 c4 10             	add    esp,0x10
c000ce80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ce84:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ce8a:	83 ec 0c             	sub    esp,0xc
c000ce8d:	6a 01                	push   0x1
c000ce8f:	6a 01                	push   0x1
c000ce91:	50                   	push   eax
c000ce92:	52                   	push   edx
c000ce93:	53                   	push   ebx
c000ce94:	e8 2f 7a 00 00       	call   c00148c8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce99:	83 c4 20             	add    esp,0x20
c000ce9c:	09 f0                	or     eax,esi
c000ce9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cea2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cea6:	c1 e0 03             	shl    eax,0x3
c000cea9:	05 80 6b 03 c0       	add    eax,0xc0036b80
c000ceae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ceb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ceb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ceba:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000cec2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cec6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cece:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ced2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ced6:	89 c6                	mov    esi,eax
c000ced8:	89 d7                	mov    edi,edx
c000ceda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cedc:	89 c8                	mov    eax,ecx
c000cede:	89 fa                	mov    edx,edi
c000cee0:	89 f3                	mov    ebx,esi
c000cee2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cee6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ceea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ceee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cef2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cef5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cefd:	05 00 10 00 00       	add    eax,0x1000
c000cf02:	c1 e8 0c             	shr    eax,0xc
c000cf05:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cf09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf15:	25 ff 0f 00 00       	and    eax,0xfff
c000cf1a:	89 c6                	mov    esi,eax
c000cf1c:	8b 1d 90 72 03 c0    	mov    ebx,DWORD PTR ds:0xc0037290
c000cf22:	83 ec 0c             	sub    esp,0xc
c000cf25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000cf29:	e8 cd 70 00 00       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c000cf2e:	83 c4 10             	add    esp,0x10
c000cf31:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cf35:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000cf3b:	83 ec 0c             	sub    esp,0xc
c000cf3e:	6a 01                	push   0x1
c000cf40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf44:	50                   	push   eax
c000cf45:	52                   	push   edx
c000cf46:	53                   	push   ebx
c000cf47:	e8 7c 79 00 00       	call   c00148c8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cf4c:	83 c4 20             	add    esp,0x20
c000cf4f:	09 f0                	or     eax,esi
c000cf51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf59:	83 ec 0c             	sub    esp,0xc
c000cf5c:	50                   	push   eax
c000cf5d:	e8 a1 73 00 00       	call   c0014303 <Virt::freeKernelVirtualPages(unsigned long)>
c000cf62:	83 c4 10             	add    esp,0x10
c000cf65:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cf69:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cf6d:	89 14 c5 84 6b 03 c0 	mov    DWORD PTR [eax*8-0x3ffc947c],edx
c000cf74:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000cf79:	e9 be fe ff ff       	jmp    c000ce3c <loadACPITables(unsigned char*)+0x110>
c000cf7e:	66 90                	xchg   ax,ax
c000cf80:	90                   	nop
c000cf81:	8d 76 00             	lea    esi,[esi+0x0]
c000cf84:	83 c4 60             	add    esp,0x60
c000cf87:	5b                   	pop    ebx
c000cf88:	5e                   	pop    esi
c000cf89:	5f                   	pop    edi
c000cf8a:	c3                   	ret    
c000cf8b:	90                   	nop

c000cf8c <findRSDT(unsigned char*)>:
c000cf8c:	57                   	push   edi
c000cf8d:	56                   	push   esi
c000cf8e:	53                   	push   ebx
c000cf8f:	83 ec 50             	sub    esp,0x50
c000cf92:	a1 88 6d 03 c0       	mov    eax,ds:0xc0036d88
c000cf97:	85 c0                	test   eax,eax
c000cf99:	75 0d                	jne    c000cfa8 <findRSDT(unsigned char*)+0x1c>
c000cf9b:	b8 00 00 00 00       	mov    eax,0x0
c000cfa0:	e9 2b 01 00 00       	jmp    c000d0d0 <findRSDT(unsigned char*)+0x144>
c000cfa5:	8d 76 00             	lea    esi,[esi+0x0]
c000cfa8:	89 e0                	mov    eax,esp
c000cfaa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000cfae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000cfb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfb6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000cfbe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cfc2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000cfce:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000cfd2:	89 c6                	mov    esi,eax
c000cfd4:	89 d7                	mov    edi,edx
c000cfd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cfd8:	89 c8                	mov    eax,ecx
c000cfda:	89 fa                	mov    edx,edi
c000cfdc:	89 f3                	mov    ebx,esi
c000cfde:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000cfe2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000cfe6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cfea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000cfee:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000cff2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000cffa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cffe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d002:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d00a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d00e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d012:	25 ff 0f 00 00       	and    eax,0xfff
c000d017:	89 c6                	mov    esi,eax
c000d019:	8b 1d 90 72 03 c0    	mov    ebx,DWORD PTR ds:0xc0037290
c000d01f:	83 ec 0c             	sub    esp,0xc
c000d022:	6a 02                	push   0x2
c000d024:	e8 d2 6f 00 00       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d030:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d036:	83 ec 0c             	sub    esp,0xc
c000d039:	6a 01                	push   0x1
c000d03b:	6a 02                	push   0x2
c000d03d:	50                   	push   eax
c000d03e:	52                   	push   edx
c000d03f:	53                   	push   ebx
c000d040:	e8 83 78 00 00       	call   c00148c8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d045:	83 c4 20             	add    esp,0x20
c000d048:	09 f0                	or     eax,esi
c000d04a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d04e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d052:	25 ff 0f 00 00       	and    eax,0xfff
c000d057:	89 c6                	mov    esi,eax
c000d059:	8b 1d 90 72 03 c0    	mov    ebx,DWORD PTR ds:0xc0037290
c000d05f:	83 ec 0c             	sub    esp,0xc
c000d062:	6a 02                	push   0x2
c000d064:	e8 92 6f 00 00       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c000d069:	83 c4 10             	add    esp,0x10
c000d06c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d070:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d076:	83 ec 0c             	sub    esp,0xc
c000d079:	6a 01                	push   0x1
c000d07b:	6a 02                	push   0x2
c000d07d:	50                   	push   eax
c000d07e:	52                   	push   edx
c000d07f:	53                   	push   ebx
c000d080:	e8 43 78 00 00       	call   c00148c8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d085:	83 c4 20             	add    esp,0x20
c000d088:	09 f0                	or     eax,esi
c000d08a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d08e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000d093:	85 c0                	test   eax,eax
c000d095:	75 11                	jne    c000d0a8 <findRSDT(unsigned char*)+0x11c>
c000d097:	c6 05 80 6d 03 c0 00 	mov    BYTE PTR ds:0xc0036d80,0x0
c000d09e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0a2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d0a6:	eb 24                	jmp    c000d0cc <findRSDT(unsigned char*)+0x140>
c000d0a8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000d0ad:	83 f8 02             	cmp    eax,0x2
c000d0b0:	75 12                	jne    c000d0c4 <findRSDT(unsigned char*)+0x138>
c000d0b2:	c6 05 80 6d 03 c0 01 	mov    BYTE PTR ds:0xc0036d80,0x1
c000d0b9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d0bd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d0c1:	eb 09                	jmp    c000d0cc <findRSDT(unsigned char*)+0x140>
c000d0c3:	90                   	nop
c000d0c4:	b8 00 00 00 00       	mov    eax,0x0
c000d0c9:	eb 05                	jmp    c000d0d0 <findRSDT(unsigned char*)+0x144>
c000d0cb:	90                   	nop
c000d0cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d0d0:	83 c4 50             	add    esp,0x50
c000d0d3:	5b                   	pop    ebx
c000d0d4:	5e                   	pop    esi
c000d0d5:	5f                   	pop    edi
c000d0d6:	c3                   	ret    
c000d0d7:	90                   	nop

c000d0d8 <findDataTable(unsigned char*, char*)>:
c000d0d8:	83 ec 1c             	sub    esp,0x1c
c000d0db:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000d0e0:	75 0a                	jne    c000d0ec <findDataTable(unsigned char*, char*)+0x14>
c000d0e2:	b8 00 00 00 00       	mov    eax,0x0
c000d0e7:	eb 5f                	jmp    c000d148 <findDataTable(unsigned char*, char*)+0x70>
c000d0e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d0ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d0f4:	a1 60 6b 03 c0       	mov    eax,ds:0xc0036b60
c000d0f9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000d0fd:	7d 41                	jge    c000d140 <findDataTable(unsigned char*, char*)+0x68>
c000d0ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d103:	c1 e0 03             	shl    eax,0x3
c000d106:	05 80 6b 03 c0       	add    eax,0xc0036b80
c000d10b:	83 ec 04             	sub    esp,0x4
c000d10e:	6a 04                	push   0x4
c000d110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d114:	50                   	push   eax
c000d115:	e8 66 32 ff ff       	call   c0000380 <memcmp>
c000d11a:	83 c4 10             	add    esp,0x10
c000d11d:	85 c0                	test   eax,eax
c000d11f:	0f 94 c0             	sete   al
c000d122:	0f b6 c0             	movzx  eax,al
c000d125:	85 c0                	test   eax,eax
c000d127:	74 0f                	je     c000d138 <findDataTable(unsigned char*, char*)+0x60>
c000d129:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d12d:	8b 04 c5 84 6b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc947c]
c000d134:	eb 12                	jmp    c000d148 <findDataTable(unsigned char*, char*)+0x70>
c000d136:	66 90                	xchg   ax,ax
c000d138:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000d13d:	eb b5                	jmp    c000d0f4 <findDataTable(unsigned char*, char*)+0x1c>
c000d13f:	90                   	nop
c000d140:	b8 00 00 00 00       	mov    eax,0x0
c000d145:	8d 76 00             	lea    esi,[esi+0x0]
c000d148:	83 c4 1c             	add    esp,0x1c
c000d14b:	c3                   	ret    

c000d14c <scanMADT()>:
c000d14c:	53                   	push   ebx
c000d14d:	83 ec 38             	sub    esp,0x38
c000d150:	c7 05 88 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d88,0x0
c000d15a:	c7 05 84 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d84,0x0
c000d164:	83 ec 0c             	sub    esp,0xc
c000d167:	68 7c bb 02 c0       	push   0xc002bb7c
c000d16c:	e8 0b 9e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d171:	83 c4 10             	add    esp,0x10
c000d174:	e8 35 dd 00 00       	call   c001aeae <HalFindRSDP()>
c000d179:	a3 88 6d 03 c0       	mov    ds:0xc0036d88,eax
c000d17e:	a1 88 6d 03 c0       	mov    eax,ds:0xc0036d88
c000d183:	85 c0                	test   eax,eax
c000d185:	0f 84 59 04 00 00    	je     c000d5e4 <scanMADT()+0x498>
c000d18b:	83 ec 0c             	sub    esp,0xc
c000d18e:	68 8a bb 02 c0       	push   0xc002bb8a
c000d193:	e8 e4 9d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d198:	83 c4 10             	add    esp,0x10
c000d19b:	a1 88 6d 03 c0       	mov    eax,ds:0xc0036d88
c000d1a0:	83 ec 0c             	sub    esp,0xc
c000d1a3:	50                   	push   eax
c000d1a4:	e8 e3 fd ff ff       	call   c000cf8c <findRSDT(unsigned char*)>
c000d1a9:	83 c4 10             	add    esp,0x10
c000d1ac:	a3 84 6d 03 c0       	mov    ds:0xc0036d84,eax
c000d1b1:	a1 84 6d 03 c0       	mov    eax,ds:0xc0036d84
c000d1b6:	85 c0                	test   eax,eax
c000d1b8:	0f 84 2a 04 00 00    	je     c000d5e8 <scanMADT()+0x49c>
c000d1be:	8b 15 84 6d 03 c0    	mov    edx,DWORD PTR ds:0xc0036d84
c000d1c4:	a1 88 6d 03 c0       	mov    eax,ds:0xc0036d88
c000d1c9:	83 ec 04             	sub    esp,0x4
c000d1cc:	52                   	push   edx
c000d1cd:	50                   	push   eax
c000d1ce:	68 30 bd 02 c0       	push   0xc002bd30
c000d1d3:	e8 a4 9d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d1d8:	83 c4 10             	add    esp,0x10
c000d1db:	a1 84 6d 03 c0       	mov    eax,ds:0xc0036d84
c000d1e0:	83 ec 0c             	sub    esp,0xc
c000d1e3:	50                   	push   eax
c000d1e4:	e8 43 fb ff ff       	call   c000cd2c <loadACPITables(unsigned char*)>
c000d1e9:	83 c4 10             	add    esp,0x10
c000d1ec:	a1 84 6d 03 c0       	mov    eax,ds:0xc0036d84
c000d1f1:	83 ec 08             	sub    esp,0x8
c000d1f4:	68 99 bb 02 c0       	push   0xc002bb99
c000d1f9:	50                   	push   eax
c000d1fa:	e8 d9 fe ff ff       	call   c000d0d8 <findDataTable(unsigned char*, char*)>
c000d1ff:	83 c4 10             	add    esp,0x10
c000d202:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d206:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d20b:	0f 84 db 03 00 00    	je     c000d5ec <scanMADT()+0x4a0>
c000d211:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000d219:	8d 76 00             	lea    esi,[esi+0x0]
c000d21c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d220:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d223:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000d227:	0f 87 c7 03 00 00    	ja     c000d5f4 <scanMADT()+0x4a8>
c000d22d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000d235:	0f 87 b9 03 00 00    	ja     c000d5f4 <scanMADT()+0x4a8>
c000d23b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d23f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d243:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d247:	8d 50 01             	lea    edx,[eax+0x1]
c000d24a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d24e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d252:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d256:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000d25a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d25e:	8d 50 01             	lea    edx,[eax+0x1]
c000d261:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d265:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d269:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d26d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000d271:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000d276:	83 f8 02             	cmp    eax,0x2
c000d279:	0f 86 71 03 00 00    	jbe    c000d5f0 <scanMADT()+0x4a4>
c000d27f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d284:	85 c0                	test   eax,eax
c000d286:	75 58                	jne    c000d2e0 <scanMADT()+0x194>
c000d288:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d28c:	8d 50 01             	lea    edx,[eax+0x1]
c000d28f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d293:	8a 15 80 6f 03 c0    	mov    dl,BYTE PTR ds:0xc0036f80
c000d299:	0f b6 d2             	movzx  edx,dl
c000d29c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d2a0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d2a4:	88 82 c0 6f 03 c0    	mov    BYTE PTR [edx-0x3ffc9040],al
c000d2aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2ae:	8d 50 01             	lea    edx,[eax+0x1]
c000d2b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2b5:	8a 15 80 6f 03 c0    	mov    dl,BYTE PTR ds:0xc0036f80
c000d2bb:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d2be:	88 0d 80 6f 03 c0    	mov    BYTE PTR ds:0xc0036f80,cl
c000d2c4:	0f b6 d2             	movzx  edx,dl
c000d2c7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d2cb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d2cf:	88 82 a0 6f 03 c0    	mov    BYTE PTR [edx-0x3ffc9060],al
c000d2d5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d2da:	e9 f1 02 00 00       	jmp    c000d5d0 <scanMADT()+0x484>
c000d2df:	90                   	nop
c000d2e0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d2e5:	83 f8 01             	cmp    eax,0x1
c000d2e8:	0f 85 32 01 00 00    	jne    c000d420 <scanMADT()+0x2d4>
c000d2ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2f2:	8d 50 01             	lea    edx,[eax+0x1]
c000d2f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2f9:	8a 15 40 6e 03 c0    	mov    dl,BYTE PTR ds:0xc0036e40
c000d2ff:	0f b6 d2             	movzx  edx,dl
c000d302:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d306:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d30a:	88 82 60 6e 03 c0    	mov    BYTE PTR [edx-0x3ffc91a0],al
c000d310:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000d315:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d319:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d31d:	01 d0                	add    eax,edx
c000d31f:	83 c0 2c             	add    eax,0x2c
c000d322:	8a 00                	mov    al,BYTE PTR [eax]
c000d324:	0f b6 d0             	movzx  edx,al
c000d327:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d32b:	8d 48 01             	lea    ecx,[eax+0x1]
c000d32e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d332:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d336:	0f b6 c0             	movzx  eax,al
c000d339:	c1 e0 08             	shl    eax,0x8
c000d33c:	89 d1                	mov    ecx,edx
c000d33e:	09 c1                	or     ecx,eax
c000d340:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d344:	8d 50 02             	lea    edx,[eax+0x2]
c000d347:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d34b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d34f:	0f b6 c0             	movzx  eax,al
c000d352:	c1 e0 10             	shl    eax,0x10
c000d355:	09 c1                	or     ecx,eax
c000d357:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d35b:	8d 50 03             	lea    edx,[eax+0x3]
c000d35e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d362:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d366:	0f b6 c0             	movzx  eax,al
c000d369:	c1 e0 18             	shl    eax,0x18
c000d36c:	09 c1                	or     ecx,eax
c000d36e:	89 ca                	mov    edx,ecx
c000d370:	a0 40 6e 03 c0       	mov    al,ds:0xc0036e40
c000d375:	0f b6 c0             	movzx  eax,al
c000d378:	89 14 85 80 6e 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9180],edx
c000d37f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d384:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d388:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d38c:	01 d0                	add    eax,edx
c000d38e:	83 c0 2c             	add    eax,0x2c
c000d391:	8a 00                	mov    al,BYTE PTR [eax]
c000d393:	0f b6 d0             	movzx  edx,al
c000d396:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d39a:	8d 48 01             	lea    ecx,[eax+0x1]
c000d39d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d3a1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d3a5:	0f b6 c0             	movzx  eax,al
c000d3a8:	c1 e0 08             	shl    eax,0x8
c000d3ab:	89 d1                	mov    ecx,edx
c000d3ad:	09 c1                	or     ecx,eax
c000d3af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d3b3:	8d 50 02             	lea    edx,[eax+0x2]
c000d3b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d3ba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d3be:	0f b6 c0             	movzx  eax,al
c000d3c1:	c1 e0 10             	shl    eax,0x10
c000d3c4:	09 c1                	or     ecx,eax
c000d3c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d3ca:	8d 50 03             	lea    edx,[eax+0x3]
c000d3cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d3d1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d3d5:	0f b6 c0             	movzx  eax,al
c000d3d8:	c1 e0 18             	shl    eax,0x18
c000d3db:	09 c1                	or     ecx,eax
c000d3dd:	89 ca                	mov    edx,ecx
c000d3df:	a0 40 6e 03 c0       	mov    al,ds:0xc0036e40
c000d3e4:	0f b6 c0             	movzx  eax,al
c000d3e7:	89 14 85 00 6f 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9100],edx
c000d3ee:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d3f3:	a0 40 6e 03 c0       	mov    al,ds:0xc0036e40
c000d3f8:	83 c0 01             	add    eax,0x1
c000d3fb:	a2 40 6e 03 c0       	mov    ds:0xc0036e40,al
c000d400:	a0 40 6e 03 c0       	mov    al,ds:0xc0036e40
c000d405:	0f b6 c0             	movzx  eax,al
c000d408:	83 ec 08             	sub    esp,0x8
c000d40b:	50                   	push   eax
c000d40c:	68 9e bb 02 c0       	push   0xc002bb9e
c000d411:	e8 66 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d416:	83 c4 10             	add    esp,0x10
c000d419:	e9 b2 01 00 00       	jmp    c000d5d0 <scanMADT()+0x484>
c000d41e:	66 90                	xchg   ax,ax
c000d420:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d425:	83 f8 02             	cmp    eax,0x2
c000d428:	0f 85 ea 00 00 00    	jne    c000d518 <scanMADT()+0x3cc>
c000d42e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d432:	8d 50 01             	lea    edx,[eax+0x1]
c000d435:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d439:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d43d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d441:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d445:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d449:	8d 50 01             	lea    edx,[eax+0x1]
c000d44c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d450:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d454:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d458:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d45c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d460:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d464:	01 d0                	add    eax,edx
c000d466:	83 c0 2c             	add    eax,0x2c
c000d469:	8a 00                	mov    al,BYTE PTR [eax]
c000d46b:	0f b6 d0             	movzx  edx,al
c000d46e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d472:	8d 48 01             	lea    ecx,[eax+0x1]
c000d475:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d479:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d47d:	0f b6 c0             	movzx  eax,al
c000d480:	c1 e0 08             	shl    eax,0x8
c000d483:	89 d1                	mov    ecx,edx
c000d485:	09 c1                	or     ecx,eax
c000d487:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d48b:	8d 50 02             	lea    edx,[eax+0x2]
c000d48e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d492:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d496:	0f b6 c0             	movzx  eax,al
c000d499:	c1 e0 10             	shl    eax,0x10
c000d49c:	09 c1                	or     ecx,eax
c000d49e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d4a2:	8d 50 03             	lea    edx,[eax+0x3]
c000d4a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d4a9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d4ad:	0f b6 c0             	movzx  eax,al
c000d4b0:	c1 e0 18             	shl    eax,0x18
c000d4b3:	09 c8                	or     eax,ecx
c000d4b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d4b9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d4be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d4c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d4c6:	01 d0                	add    eax,edx
c000d4c8:	83 c0 2c             	add    eax,0x2c
c000d4cb:	8a 00                	mov    al,BYTE PTR [eax]
c000d4cd:	0f b6 c0             	movzx  eax,al
c000d4d0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d4d4:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d4d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d4db:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000d4df:	0f b6 d2             	movzx  edx,dl
c000d4e2:	c1 e2 08             	shl    edx,0x8
c000d4e5:	09 d0                	or     eax,edx
c000d4e7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000d4ec:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d4f1:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000d4f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d4fa:	88 90 48 04 03 c0    	mov    BYTE PTR [eax-0x3ffcfbb8],dl
c000d500:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000d505:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000d50a:	66 89 84 12 20 6e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffc91e0],ax
c000d512:	e9 b9 00 00 00       	jmp    c000d5d0 <scanMADT()+0x484>
c000d517:	90                   	nop
c000d518:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d51d:	83 f8 04             	cmp    eax,0x4
c000d520:	0f 85 9a 00 00 00    	jne    c000d5c0 <scanMADT()+0x474>
c000d526:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d52a:	8d 50 01             	lea    edx,[eax+0x1]
c000d52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d531:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d535:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d539:	0f b6 c0             	movzx  eax,al
c000d53c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d540:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d544:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d548:	01 d0                	add    eax,edx
c000d54a:	83 c0 2c             	add    eax,0x2c
c000d54d:	8a 00                	mov    al,BYTE PTR [eax]
c000d54f:	0f b6 d0             	movzx  edx,al
c000d552:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d556:	8d 48 01             	lea    ecx,[eax+0x1]
c000d559:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d55d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d561:	0f b6 c0             	movzx  eax,al
c000d564:	c1 e0 08             	shl    eax,0x8
c000d567:	09 d0                	or     eax,edx
c000d569:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d56d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d572:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d576:	8d 50 01             	lea    edx,[eax+0x1]
c000d579:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d57d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d581:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d585:	0f b6 c0             	movzx  eax,al
c000d588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d590:	c1 e0 08             	shl    eax,0x8
c000d593:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d597:	89 c1                	mov    ecx,eax
c000d599:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d59d:	c1 e0 18             	shl    eax,0x18
c000d5a0:	89 c3                	mov    ebx,eax
c000d5a2:	a1 8c 6d 03 c0       	mov    eax,ds:0xc0036d8c
c000d5a7:	8d 50 01             	lea    edx,[eax+0x1]
c000d5aa:	89 15 8c 6d 03 c0    	mov    DWORD PTR ds:0xc0036d8c,edx
c000d5b0:	09 d9                	or     ecx,ebx
c000d5b2:	89 ca                	mov    edx,ecx
c000d5b4:	89 14 85 a0 6d 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9260],edx
c000d5bb:	eb 13                	jmp    c000d5d0 <scanMADT()+0x484>
c000d5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5c0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d5c5:	83 f8 05             	cmp    eax,0x5
c000d5c8:	75 06                	jne    c000d5d0 <scanMADT()+0x484>
c000d5ca:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000d5cf:	90                   	nop
c000d5d0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000d5d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5d9:	01 d0                	add    eax,edx
c000d5db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d5df:	e9 38 fc ff ff       	jmp    c000d21c <scanMADT()+0xd0>
c000d5e4:	90                   	nop
c000d5e5:	eb 0d                	jmp    c000d5f4 <scanMADT()+0x4a8>
c000d5e7:	90                   	nop
c000d5e8:	90                   	nop
c000d5e9:	eb 09                	jmp    c000d5f4 <scanMADT()+0x4a8>
c000d5eb:	90                   	nop
c000d5ec:	90                   	nop
c000d5ed:	eb 05                	jmp    c000d5f4 <scanMADT()+0x4a8>
c000d5ef:	90                   	nop
c000d5f0:	90                   	nop
c000d5f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5f4:	83 c4 38             	add    esp,0x38
c000d5f7:	5b                   	pop    ebx
c000d5f8:	c3                   	ret    
c000d5f9:	90                   	nop
c000d5fa:	66 90                	xchg   ax,ax

c000d5fc <ACPI::ACPI()>:
c000d5fc:	83 ec 0c             	sub    esp,0xc
c000d5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d603:	83 ec 08             	sub    esp,0x8
c000d606:	68 02 b0 02 c0       	push   0xc002b002
c000d60b:	50                   	push   eax
c000d60c:	e8 e5 d2 ff ff       	call   c000a8f6 <Device::Device(char const*)>
c000d611:	83 c4 10             	add    esp,0x10
c000d614:	ba d4 bd 02 c0       	mov    edx,0xc002bdd4
c000d619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d61d:	89 10                	mov    DWORD PTR [eax],edx
c000d61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d623:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000d62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d62e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000d638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d63c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000d646:	90                   	nop
c000d647:	83 c4 0c             	add    esp,0xc
c000d64a:	c3                   	ret    
c000d64b:	90                   	nop

c000d64c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000d64c:	83 ec 2c             	sub    esp,0x2c
c000d64f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d653:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d657:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d65b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000d65f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000d664:	88 d0                	mov    al,dl
c000d666:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d66a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d66f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d677:	90                   	nop
c000d678:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d67c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d682:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000d686:	0f 8d b0 00 00 00    	jge    c000d73c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000d68c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d690:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d694:	83 c2 2a             	add    edx,0x2a
c000d697:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000d69b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000d6a0:	0f b7 c0             	movzx  eax,ax
c000d6a3:	39 c2                	cmp    edx,eax
c000d6a5:	0f 85 85 00 00 00    	jne    c000d730 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000d6ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d6b3:	83 c2 2a             	add    edx,0x2a
c000d6b6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000d6ba:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000d6bf:	0f b6 c0             	movzx  eax,al
c000d6c2:	39 c2                	cmp    edx,eax
c000d6c4:	75 6a                	jne    c000d730 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000d6c6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d6cb:	85 c0                	test   eax,eax
c000d6cd:	74 3d                	je     c000d70c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000d6cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d6d7:	83 c2 2a             	add    edx,0x2a
c000d6da:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000d6de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d6e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6e5:	39 c2                	cmp    edx,eax
c000d6e7:	74 13                	je     c000d6fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000d6e9:	83 ec 0c             	sub    esp,0xc
c000d6ec:	68 54 bd 02 c0       	push   0xc002bd54
c000d6f1:	e8 6e 33 00 00       	call   c0010a64 <KePanic(char const*)>
c000d6f6:	83 c4 10             	add    esp,0x10
c000d6f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d6fc:	83 ec 0c             	sub    esp,0xc
c000d6ff:	68 ba bb 02 c0       	push   0xc002bbba
c000d704:	e8 5b 33 00 00       	call   c0010a64 <KePanic(char const*)>
c000d709:	83 c4 10             	add    esp,0x10
c000d70c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d710:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d714:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d718:	83 c2 2a             	add    edx,0x2a
c000d71b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000d71f:	8b 02                	mov    eax,DWORD PTR [edx]
c000d721:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000d724:	89 01                	mov    DWORD PTR [ecx],eax
c000d726:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d729:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d72e:	66 90                	xchg   ax,ax
c000d730:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000d735:	e9 3e ff ff ff       	jmp    c000d678 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000d73a:	66 90                	xchg   ax,ax
c000d73c:	90                   	nop
c000d73d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d741:	83 c4 2c             	add    esp,0x2c
c000d744:	c2 04 00             	ret    0x4
c000d747:	90                   	nop

c000d748 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000d748:	83 ec 1c             	sub    esp,0x1c
c000d74b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d74f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d753:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d757:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000d75c:	88 c8                	mov    al,cl
c000d75e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000d762:	88 d0                	mov    al,dl
c000d764:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d76c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d776:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d779:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000d77d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000d781:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d785:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d78b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d78f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000d792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d796:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000d79b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d7a5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000d7a9:	83 c0 01             	add    eax,0x1
c000d7ac:	88 c1                	mov    cl,al
c000d7ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7b2:	83 c2 2a             	add    edx,0x2a
c000d7b5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000d7b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7bd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d7c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d7ca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d7ce:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000d7d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d7dc:	8d 50 01             	lea    edx,[eax+0x1]
c000d7df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000d7e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d7f3:	3d 00 02 00 00       	cmp    eax,0x200
c000d7f8:	75 12                	jne    c000d80c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	68 c9 bb 02 c0       	push   0xc002bbc9
c000d802:	e8 5d 32 00 00       	call   c0010a64 <KePanic(char const*)>
c000d807:	83 c4 10             	add    esp,0x10
c000d80a:	66 90                	xchg   ax,ax
c000d80c:	90                   	nop
c000d80d:	83 c4 1c             	add    esp,0x1c
c000d810:	c3                   	ret    
c000d811:	90                   	nop
c000d812:	66 90                	xchg   ax,ax

c000d814 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000d814:	b8 00 00 00 00       	mov    eax,0x0
c000d819:	c3                   	ret    
c000d81a:	66 90                	xchg   ax,ax

c000d81c <ACPI::detectPCI()>:
c000d81c:	53                   	push   ebx
c000d81d:	83 ec 28             	sub    esp,0x28
c000d820:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d825:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000d82a:	a1 84 6d 03 c0       	mov    eax,ds:0xc0036d84
c000d82f:	83 ec 08             	sub    esp,0x8
c000d832:	68 e6 bb 02 c0       	push   0xc002bbe6
c000d837:	50                   	push   eax
c000d838:	e8 9b f8 ff ff       	call   c000d0d8 <findDataTable(unsigned char*, char*)>
c000d83d:	83 c4 10             	add    esp,0x10
c000d840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d844:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000d849:	74 0d                	je     c000d858 <ACPI::detectPCI()+0x3c>
c000d84b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d850:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d855:	8d 76 00             	lea    esi,[esi+0x0]
c000d858:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000d860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d864:	8a 00                	mov    al,BYTE PTR [eax]
c000d866:	0f b6 c0             	movzx  eax,al
c000d869:	83 f8 01             	cmp    eax,0x1
c000d86c:	75 0e                	jne    c000d87c <ACPI::detectPCI()+0x60>
c000d86e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d873:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d878:	eb 2e                	jmp    c000d8a8 <ACPI::detectPCI()+0x8c>
c000d87a:	66 90                	xchg   ax,ax
c000d87c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d880:	8a 00                	mov    al,BYTE PTR [eax]
c000d882:	0f b6 c0             	movzx  eax,al
c000d885:	83 f8 02             	cmp    eax,0x2
c000d888:	75 1e                	jne    c000d8a8 <ACPI::detectPCI()+0x8c>
c000d88a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d88f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d894:	85 c0                	test   eax,eax
c000d896:	74 10                	je     c000d8a8 <ACPI::detectPCI()+0x8c>
c000d898:	83 ec 0c             	sub    esp,0xc
c000d89b:	68 84 bd 02 c0       	push   0xc002bd84
c000d8a0:	e8 bf 31 00 00       	call   c0010a64 <KePanic(char const*)>
c000d8a5:	83 c4 10             	add    esp,0x10
c000d8a8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000d8ac:	83 f0 01             	xor    eax,0x1
c000d8af:	0f b6 c0             	movzx  eax,al
c000d8b2:	85 c0                	test   eax,eax
c000d8b4:	74 46                	je     c000d8fc <ACPI::detectPCI()+0xe0>
c000d8b6:	e8 75 28 ff ff       	call   c0000130 <manualPCIProbe>
c000d8bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8bf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000d8c4:	75 0e                	jne    c000d8d4 <ACPI::detectPCI()+0xb8>
c000d8c6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d8cb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d8d0:	eb 2a                	jmp    c000d8fc <ACPI::detectPCI()+0xe0>
c000d8d2:	66 90                	xchg   ax,ax
c000d8d4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000d8d9:	75 21                	jne    c000d8fc <ACPI::detectPCI()+0xe0>
c000d8db:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d8e0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d8e5:	85 c0                	test   eax,eax
c000d8e7:	74 13                	je     c000d8fc <ACPI::detectPCI()+0xe0>
c000d8e9:	83 ec 0c             	sub    esp,0xc
c000d8ec:	68 84 bd 02 c0       	push   0xc002bd84
c000d8f1:	e8 6e 31 00 00       	call   c0010a64 <KePanic(char const*)>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d8fc:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d901:	85 c0                	test   eax,eax
c000d903:	0f 84 87 00 00 00    	je     c000d990 <ACPI::detectPCI()+0x174>
c000d909:	83 ec 0c             	sub    esp,0xc
c000d90c:	68 eb bb 02 c0       	push   0xc002bbeb
c000d911:	e8 57 07 00 00       	call   c000e06d <KeSetBootMessage(char const*)>
c000d916:	83 c4 10             	add    esp,0x10
c000d919:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d921:	83 ec 0c             	sub    esp,0xc
c000d924:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d928:	e8 e2 2c 00 00       	call   c001060f <malloc>
c000d92d:	83 c4 10             	add    esp,0x10
c000d930:	89 c3                	mov    ebx,eax
c000d932:	83 ec 0c             	sub    esp,0xc
c000d935:	53                   	push   ebx
c000d936:	e8 35 33 01 00       	call   c0020c70 <PCI::PCI()>
c000d93b:	83 c4 10             	add    esp,0x10
c000d93e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d942:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d946:	83 ec 08             	sub    esp,0x8
c000d949:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d94d:	50                   	push   eax
c000d94e:	e8 41 ce ff ff       	call   c000a794 <Device::addChild(Device*)>
c000d953:	83 c4 10             	add    esp,0x10
c000d956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d95a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d95c:	83 c0 08             	add    eax,0x8
c000d95f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d961:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000d966:	85 d2                	test   edx,edx
c000d968:	74 0a                	je     c000d974 <ACPI::detectPCI()+0x158>
c000d96a:	ba 01 00 00 00       	mov    edx,0x1
c000d96f:	eb 0b                	jmp    c000d97c <ACPI::detectPCI()+0x160>
c000d971:	8d 76 00             	lea    esi,[esi+0x0]
c000d974:	ba 02 00 00 00       	mov    edx,0x2
c000d979:	8d 76 00             	lea    esi,[esi+0x0]
c000d97c:	6a 00                	push   0x0
c000d97e:	6a 00                	push   0x0
c000d980:	52                   	push   edx
c000d981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d985:	ff d0                	call   eax
c000d987:	83 c4 10             	add    esp,0x10
c000d98a:	e9 91 00 00 00       	jmp    c000da20 <ACPI::detectPCI()+0x204>
c000d98f:	90                   	nop
c000d990:	83 ec 0c             	sub    esp,0xc
c000d993:	68 03 bc 02 c0       	push   0xc002bc03
c000d998:	e8 d0 06 00 00       	call   c000e06d <KeSetBootMessage(char const*)>
c000d99d:	83 c4 10             	add    esp,0x10
c000d9a0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000d9a7:	83 ec 0c             	sub    esp,0xc
c000d9aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ae:	e8 5c 2c 00 00       	call   c001060f <malloc>
c000d9b3:	83 c4 10             	add    esp,0x10
c000d9b6:	89 c3                	mov    ebx,eax
c000d9b8:	83 ec 0c             	sub    esp,0xc
c000d9bb:	53                   	push   ebx
c000d9bc:	e8 b5 3e 01 00       	call   c0021876 <IDE::IDE()>
c000d9c1:	83 c4 10             	add    esp,0x10
c000d9c4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000d9c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9cc:	83 ec 08             	sub    esp,0x8
c000d9cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9d3:	50                   	push   eax
c000d9d4:	e8 bb cd ff ff       	call   c000a794 <Device::addChild(Device*)>
c000d9d9:	83 c4 10             	add    esp,0x10
c000d9dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9e0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000d9ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9ee:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000d9f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9fb:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000da04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da08:	8b 00                	mov    eax,DWORD PTR [eax]
c000da0a:	83 c0 08             	add    eax,0x8
c000da0d:	8b 00                	mov    eax,DWORD PTR [eax]
c000da0f:	6a 00                	push   0x0
c000da11:	6a 00                	push   0x0
c000da13:	6a 00                	push   0x0
c000da15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da19:	ff d0                	call   eax
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	66 90                	xchg   ax,ax
c000da20:	90                   	nop
c000da21:	83 c4 28             	add    esp,0x28
c000da24:	5b                   	pop    ebx
c000da25:	c3                   	ret    
c000da26:	66 90                	xchg   ax,ax

c000da28 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000da28:	83 ec 0c             	sub    esp,0xc
c000da2b:	83 ec 0c             	sub    esp,0xc
c000da2e:	68 18 bc 02 c0       	push   0xc002bc18
c000da33:	e8 2c 30 00 00       	call   c0010a64 <KePanic(char const*)>
c000da38:	83 c4 10             	add    esp,0x10
c000da3b:	90                   	nop
c000da3c:	83 c4 0c             	add    esp,0xc
c000da3f:	c3                   	ret    

c000da40 <ACPI::open(int, int, void*)>:
c000da40:	57                   	push   edi
c000da41:	56                   	push   esi
c000da42:	53                   	push   ebx
c000da43:	81 ec 70 01 00 00    	sub    esp,0x170
c000da49:	83 ec 0c             	sub    esp,0xc
c000da4c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000da53:	e8 c4 fd ff ff       	call   c000d81c <ACPI::detectPCI()>
c000da58:	83 c4 10             	add    esp,0x10
c000da5b:	83 ec 0c             	sub    esp,0xc
c000da5e:	68 ac bd 02 c0       	push   0xc002bdac
c000da63:	e8 05 06 00 00       	call   c000e06d <KeSetBootMessage(char const*)>
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	b8 4c 05 00 00       	mov    eax,0x54c
c000da70:	8a 00                	mov    al,BYTE PTR [eax]
c000da72:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000da79:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000da81:	83 f8 01             	cmp    eax,0x1
c000da84:	75 12                	jne    c000da98 <ACPI::open(int, int, void*)+0x58>
c000da86:	83 ec 0c             	sub    esp,0xc
c000da89:	68 29 bc 02 c0       	push   0xc002bc29
c000da8e:	e8 1a 8a 00 00       	call   c00164ad <Thr::loadKernelSymbolTable(char const*)>
c000da93:	83 c4 10             	add    esp,0x10
c000da96:	eb 34                	jmp    c000dacc <ACPI::open(int, int, void*)+0x8c>
c000da98:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000daa0:	3d bb 00 00 00       	cmp    eax,0xbb
c000daa5:	75 15                	jne    c000dabc <ACPI::open(int, int, void*)+0x7c>
c000daa7:	83 ec 0c             	sub    esp,0xc
c000daaa:	68 47 bc 02 c0       	push   0xc002bc47
c000daaf:	e8 f9 89 00 00       	call   c00164ad <Thr::loadKernelSymbolTable(char const*)>
c000dab4:	83 c4 10             	add    esp,0x10
c000dab7:	eb 13                	jmp    c000dacc <ACPI::open(int, int, void*)+0x8c>
c000dab9:	8d 76 00             	lea    esi,[esi+0x0]
c000dabc:	83 ec 0c             	sub    esp,0xc
c000dabf:	68 65 bc 02 c0       	push   0xc002bc65
c000dac4:	e8 9b 2f 00 00       	call   c0010a64 <KePanic(char const*)>
c000dac9:	83 c4 10             	add    esp,0x10
c000dacc:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000dad4:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000dadf:	83 ec 0c             	sub    esp,0xc
c000dae2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000dae9:	e8 21 2b 00 00       	call   c001060f <malloc>
c000daee:	83 c4 10             	add    esp,0x10
c000daf1:	89 c3                	mov    ebx,eax
c000daf3:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c000daf8:	83 ec 04             	sub    esp,0x4
c000dafb:	50                   	push   eax
c000dafc:	68 7f bc 02 c0       	push   0xc002bc7f
c000db01:	53                   	push   ebx
c000db02:	e8 c3 b3 ff ff       	call   c0008eca <File::File(char const*, Process*)>
c000db07:	83 c4 10             	add    esp,0x10
c000db0a:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000db11:	83 ec 08             	sub    esp,0x8
c000db14:	6a 01                	push   0x1
c000db16:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000db1d:	e8 c6 b3 ff ff       	call   c0008ee8 <File::open(FileOpenMode)>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000db2c:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000db34:	75 16                	jne    c000db4c <ACPI::open(int, int, void*)+0x10c>
c000db36:	83 ec 0c             	sub    esp,0xc
c000db39:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000db40:	e8 01 b4 ff ff       	call   c0008f46 <File::close()>
c000db45:	83 c4 10             	add    esp,0x10
c000db48:	eb 0a                	jmp    c000db54 <ACPI::open(int, int, void*)+0x114>
c000db4a:	66 90                	xchg   ax,ax
c000db4c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000db54:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000db5c:	74 1e                	je     c000db7c <ACPI::open(int, int, void*)+0x13c>
c000db5e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000db65:	8b 00                	mov    eax,DWORD PTR [eax]
c000db67:	83 c0 08             	add    eax,0x8
c000db6a:	8b 00                	mov    eax,DWORD PTR [eax]
c000db6c:	83 ec 0c             	sub    esp,0xc
c000db6f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000db76:	ff d0                	call   eax
c000db78:	83 c4 10             	add    esp,0x10
c000db7b:	90                   	nop
c000db7c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000db83:	83 f0 01             	xor    eax,0x1
c000db86:	0f b6 c0             	movzx  eax,al
c000db89:	85 c0                	test   eax,eax
c000db8b:	74 2f                	je     c000dbbc <ACPI::open(int, int, void*)+0x17c>
c000db8d:	83 ec 0c             	sub    esp,0xc
c000db90:	68 9d bc 02 c0       	push   0xc002bc9d
c000db95:	e8 d3 04 00 00       	call   c000e06d <KeSetBootMessage(char const*)>
c000db9a:	83 c4 10             	add    esp,0x10
c000db9d:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000dba8:	83 ec 0c             	sub    esp,0xc
c000dbab:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000dbb2:	e8 73 66 00 00       	call   c001422a <Virt::setupPageSwapping(int)>
c000dbb7:	83 c4 10             	add    esp,0x10
c000dbba:	66 90                	xchg   ax,ax
c000dbbc:	83 ec 0c             	sub    esp,0xc
c000dbbf:	68 b8 bc 02 c0       	push   0xc002bcb8
c000dbc4:	e8 a4 04 00 00       	call   c000e06d <KeSetBootMessage(char const*)>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000dbd3:	83 ec 08             	sub    esp,0x8
c000dbd6:	6a 13                	push   0x13
c000dbd8:	50                   	push   eax
c000dbd9:	e8 e4 ce ff ff       	call   c000aac2 <getDevicesOfType(DeviceType)>
c000dbde:	83 c4 0c             	add    esp,0xc
c000dbe1:	8d 76 00             	lea    esi,[esi+0x0]
c000dbe4:	83 ec 0c             	sub    esp,0xc
c000dbe7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000dbee:	50                   	push   eax
c000dbef:	e8 64 bd 01 00       	call   c0029958 <LinkedList<Device>::isEmpty()>
c000dbf4:	83 c4 10             	add    esp,0x10
c000dbf7:	83 f0 01             	xor    eax,0x1
c000dbfa:	0f b6 c0             	movzx  eax,al
c000dbfd:	85 c0                	test   eax,eax
c000dbff:	0f 84 3b 01 00 00    	je     c000dd40 <ACPI::open(int, int, void*)+0x300>
c000dc05:	83 ec 0c             	sub    esp,0xc
c000dc08:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000dc0f:	50                   	push   eax
c000dc10:	e8 5f bd 01 00       	call   c0029974 <LinkedList<Device>::getFirstElement()>
c000dc15:	83 c4 10             	add    esp,0x10
c000dc18:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000dc1f:	83 ec 0c             	sub    esp,0xc
c000dc22:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000dc29:	50                   	push   eax
c000dc2a:	e8 4d bd 01 00       	call   c002997c <LinkedList<Device>::removeFirst()>
c000dc2f:	83 c4 10             	add    esp,0x10
c000dc32:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000dc39:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000dc40:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000dc47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000dc4b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000dc51:	ba 09 00 00 00       	mov    edx,0x9
c000dc56:	fc                   	cld    
c000dc57:	89 c7                	mov    edi,eax
c000dc59:	89 de                	mov    esi,ebx
c000dc5b:	89 d1                	mov    ecx,edx
c000dc5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000dc5f:	83 ec 08             	sub    esp,0x8
c000dc62:	8d 44 24 38          	lea    eax,[esp+0x38]
c000dc66:	50                   	push   eax
c000dc67:	83 ec 24             	sub    esp,0x24
c000dc6a:	89 e0                	mov    eax,esp
c000dc6c:	89 c3                	mov    ebx,eax
c000dc6e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000dc72:	ba 09 00 00 00       	mov    edx,0x9
c000dc77:	89 df                	mov    edi,ebx
c000dc79:	89 c6                	mov    esi,eax
c000dc7b:	89 d1                	mov    ecx,edx
c000dc7d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000dc7f:	e8 d6 34 01 00       	call   c002115a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000dc84:	83 c4 30             	add    esp,0x30
c000dc87:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000dc8e:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000dc96:	0f 84 48 ff ff ff    	je     c000dbe4 <ACPI::open(int, int, void*)+0x1a4>
c000dc9c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000dca7:	83 ec 0c             	sub    esp,0xc
c000dcaa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000dcb1:	e8 59 29 00 00       	call   c001060f <malloc>
c000dcb6:	83 c4 10             	add    esp,0x10
c000dcb9:	89 c3                	mov    ebx,eax
c000dcbb:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c000dcc0:	83 ec 04             	sub    esp,0x4
c000dcc3:	50                   	push   eax
c000dcc4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000dccb:	53                   	push   ebx
c000dccc:	e8 f9 b1 ff ff       	call   c0008eca <File::File(char const*, Process*)>
c000dcd1:	83 c4 10             	add    esp,0x10
c000dcd4:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000dcdb:	83 ec 0c             	sub    esp,0xc
c000dcde:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000dce5:	e8 c2 b4 ff ff       	call   c00091ac <File::exists()>
c000dcea:	83 c4 10             	add    esp,0x10
c000dced:	0f b6 c0             	movzx  eax,al
c000dcf0:	85 c0                	test   eax,eax
c000dcf2:	74 1c                	je     c000dd10 <ACPI::open(int, int, void*)+0x2d0>
c000dcf4:	83 ec 04             	sub    esp,0x4
c000dcf7:	6a 00                	push   0x0
c000dcf9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000dd00:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000dd07:	e8 54 8f 00 00       	call   c0016c60 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000dd0c:	83 c4 10             	add    esp,0x10
c000dd0f:	90                   	nop
c000dd10:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000dd18:	0f 84 c6 fe ff ff    	je     c000dbe4 <ACPI::open(int, int, void*)+0x1a4>
c000dd1e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000dd25:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd27:	83 c0 08             	add    eax,0x8
c000dd2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd2c:	83 ec 0c             	sub    esp,0xc
c000dd2f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000dd36:	ff d0                	call   eax
c000dd38:	83 c4 10             	add    esp,0x10
c000dd3b:	e9 a4 fe ff ff       	jmp    c000dbe4 <ACPI::open(int, int, void*)+0x1a4>
c000dd40:	83 ec 0c             	sub    esp,0xc
c000dd43:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000dd4a:	50                   	push   eax
c000dd4b:	e8 04 bc 01 00       	call   c0029954 <LinkedList<Device>::~LinkedList()>
c000dd50:	83 c4 10             	add    esp,0x10
c000dd53:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c000dd58:	83 ec 04             	sub    esp,0x4
c000dd5b:	6a 00                	push   0x0
c000dd5d:	50                   	push   eax
c000dd5e:	68 d2 bc 02 c0       	push   0xc002bcd2
c000dd63:	e8 f8 8e 00 00       	call   c0016c60 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000dd68:	83 c4 10             	add    esp,0x10
c000dd6b:	a1 84 6d 03 c0       	mov    eax,ds:0xc0036d84
c000dd70:	85 c0                	test   eax,eax
c000dd72:	0f 84 1c 01 00 00    	je     c000de94 <ACPI::open(int, int, void*)+0x454>
c000dd78:	a1 88 6d 03 c0       	mov    eax,ds:0xc0036d88
c000dd7d:	85 c0                	test   eax,eax
c000dd7f:	0f 84 0f 01 00 00    	je     c000de94 <ACPI::open(int, int, void*)+0x454>
c000dd85:	83 ec 0c             	sub    esp,0xc
c000dd88:	68 ef bc 02 c0       	push   0xc002bcef
c000dd8d:	e8 db 02 00 00       	call   c000e06d <KeSetBootMessage(char const*)>
c000dd92:	83 c4 10             	add    esp,0x10
c000dd95:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000dda0:	83 ec 0c             	sub    esp,0xc
c000dda3:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ddaa:	e8 60 28 00 00       	call   c001060f <malloc>
c000ddaf:	83 c4 10             	add    esp,0x10
c000ddb2:	89 c3                	mov    ebx,eax
c000ddb4:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c000ddb9:	83 ec 04             	sub    esp,0x4
c000ddbc:	50                   	push   eax
c000ddbd:	68 0c bd 02 c0       	push   0xc002bd0c
c000ddc2:	53                   	push   ebx
c000ddc3:	e8 02 b1 ff ff       	call   c0008eca <File::File(char const*, Process*)>
c000ddc8:	83 c4 10             	add    esp,0x10
c000ddcb:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ddd2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ddda:	74 20                	je     c000ddfc <ACPI::open(int, int, void*)+0x3bc>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000dde6:	e8 c1 b3 ff ff       	call   c00091ac <File::exists()>
c000ddeb:	83 c4 10             	add    esp,0x10
c000ddee:	0f b6 c0             	movzx  eax,al
c000ddf1:	85 c0                	test   eax,eax
c000ddf3:	74 07                	je     c000ddfc <ACPI::open(int, int, void*)+0x3bc>
c000ddf5:	b0 01                	mov    al,0x1
c000ddf7:	eb 07                	jmp    c000de00 <ACPI::open(int, int, void*)+0x3c0>
c000ddf9:	8d 76 00             	lea    esi,[esi+0x0]
c000ddfc:	b0 00                	mov    al,0x0
c000ddfe:	66 90                	xchg   ax,ax
c000de00:	0f b6 c0             	movzx  eax,al
c000de03:	85 c0                	test   eax,eax
c000de05:	74 19                	je     c000de20 <ACPI::open(int, int, void*)+0x3e0>
c000de07:	83 ec 04             	sub    esp,0x4
c000de0a:	6a 00                	push   0x0
c000de0c:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000de13:	68 0c bd 02 c0       	push   0xc002bd0c
c000de18:	e8 43 8e 00 00       	call   c0016c60 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000de1d:	83 c4 10             	add    esp,0x10
c000de20:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000de28:	74 2a                	je     c000de54 <ACPI::open(int, int, void*)+0x414>
c000de2a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000de32:	74 20                	je     c000de54 <ACPI::open(int, int, void*)+0x414>
c000de34:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000de3b:	8b 00                	mov    eax,DWORD PTR [eax]
c000de3d:	83 c0 08             	add    eax,0x8
c000de40:	8b 00                	mov    eax,DWORD PTR [eax]
c000de42:	83 ec 0c             	sub    esp,0xc
c000de45:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000de4c:	ff d0                	call   eax
c000de4e:	83 c4 10             	add    esp,0x10
c000de51:	8d 76 00             	lea    esi,[esi+0x0]
c000de54:	a1 84 6d 03 c0       	mov    eax,ds:0xc0036d84
c000de59:	83 ec 08             	sub    esp,0x8
c000de5c:	68 29 bd 02 c0       	push   0xc002bd29
c000de61:	50                   	push   eax
c000de62:	e8 71 f2 ff ff       	call   c000d0d8 <findDataTable(unsigned char*, char*)>
c000de67:	83 c4 10             	add    esp,0x10
c000de6a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000de71:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000de79:	74 19                	je     c000de94 <ACPI::open(int, int, void*)+0x454>
c000de7b:	83 ec 08             	sub    esp,0x8
c000de7e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000de85:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000de8c:	e8 97 fb ff ff       	call   c000da28 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000de91:	83 c4 10             	add    esp,0x10
c000de94:	b8 00 00 00 00       	mov    eax,0x0
c000de99:	81 c4 70 01 00 00    	add    esp,0x170
c000de9f:	5b                   	pop    ebx
c000dea0:	5e                   	pop    esi
c000dea1:	5f                   	pop    edi
c000dea2:	c3                   	ret    
c000dea3:	90                   	nop

c000dea4 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000dea4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000deaa:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000deb1:	89 c2                	mov    edx,eax
c000deb3:	c1 fa 1f             	sar    edx,0x1f
c000deb6:	83 ec 04             	sub    esp,0x4
c000deb9:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000debd:	51                   	push   ecx
c000debe:	52                   	push   edx
c000debf:	50                   	push   eax
c000dec0:	e8 3f 25 00 00       	call   c0010404 <KeItoa(long long, char*)>
c000dec5:	83 c4 10             	add    esp,0x10
c000dec8:	83 ec 08             	sub    esp,0x8
c000decb:	68 f8 bd 02 c0       	push   0xc002bdf8
c000ded0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ded4:	50                   	push   eax
c000ded5:	e8 66 27 ff ff       	call   c0000640 <strcpy>
c000deda:	83 c4 10             	add    esp,0x10
c000dedd:	83 ec 08             	sub    esp,0x8
c000dee0:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000dee7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000deeb:	50                   	push   eax
c000deec:	e8 4f 29 ff ff       	call   c0000840 <strcat>
c000def1:	83 c4 10             	add    esp,0x10
c000def4:	83 ec 08             	sub    esp,0x8
c000def7:	68 06 be 02 c0       	push   0xc002be06
c000defc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000df00:	50                   	push   eax
c000df01:	e8 3a 29 ff ff       	call   c0000840 <strcat>
c000df06:	83 c4 10             	add    esp,0x10
c000df09:	83 ec 08             	sub    esp,0x8
c000df0c:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000df13:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000df17:	50                   	push   eax
c000df18:	e8 23 29 ff ff       	call   c0000840 <strcat>
c000df1d:	83 c4 10             	add    esp,0x10
c000df20:	83 ec 08             	sub    esp,0x8
c000df23:	68 09 be 02 c0       	push   0xc002be09
c000df28:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000df2c:	50                   	push   eax
c000df2d:	e8 0e 29 ff ff       	call   c0000840 <strcat>
c000df32:	83 c4 10             	add    esp,0x10
c000df35:	83 ec 08             	sub    esp,0x8
c000df38:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000df3f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000df43:	50                   	push   eax
c000df44:	e8 f7 28 ff ff       	call   c0000840 <strcat>
c000df49:	83 c4 10             	add    esp,0x10
c000df4c:	83 ec 08             	sub    esp,0x8
c000df4f:	68 09 be 02 c0       	push   0xc002be09
c000df54:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000df58:	50                   	push   eax
c000df59:	e8 e2 28 ff ff       	call   c0000840 <strcat>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	83 ec 08             	sub    esp,0x8
c000df64:	8d 44 24 08          	lea    eax,[esp+0x8]
c000df68:	50                   	push   eax
c000df69:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000df6d:	50                   	push   eax
c000df6e:	e8 cd 28 ff ff       	call   c0000840 <strcat>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	83 ec 0c             	sub    esp,0xc
c000df79:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000df7d:	50                   	push   eax
c000df7e:	e8 e1 2a 00 00       	call   c0010a64 <KePanic(char const*)>
c000df83:	83 c4 10             	add    esp,0x10
c000df86:	90                   	nop
c000df87:	81 c4 2c 02 00 00    	add    esp,0x22c
c000df8d:	c3                   	ret    

c000df8e <KeInitialiseAtexit()>:
c000df8e:	83 ec 10             	sub    esp,0x10
c000df91:	c7 05 e0 6f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036fe0,0x0
c000df9b:	68 80 00 00 00       	push   0x80
c000dfa0:	6a 00                	push   0x0
c000dfa2:	68 80 70 03 c0       	push   0xc0037080
c000dfa7:	e8 44 25 ff ff       	call   c00004f0 <memset>
c000dfac:	83 c4 1c             	add    esp,0x1c
c000dfaf:	c3                   	ret    

c000dfb0 <KeRegisterAtexit(void (*)(void*), void*)>:
c000dfb0:	a1 e0 6f 03 c0       	mov    eax,ds:0xc0036fe0
c000dfb5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dfb9:	89 14 85 80 70 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8f80],edx
c000dfc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dfc4:	89 14 85 00 70 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9000],edx
c000dfcb:	40                   	inc    eax
c000dfcc:	a3 e0 6f 03 c0       	mov    ds:0xc0036fe0,eax
c000dfd1:	83 f8 1f             	cmp    eax,0x1f
c000dfd4:	7e 0d                	jle    c000dfe3 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000dfd6:	c7 44 24 04 0b be 02 c0 	mov    DWORD PTR [esp+0x4],0xc002be0b
c000dfde:	e9 81 2a 00 00       	jmp    c0010a64 <KePanic(char const*)>
c000dfe3:	c3                   	ret    

c000dfe4 <KeExecuteAtexit()>:
c000dfe4:	53                   	push   ebx
c000dfe5:	31 db                	xor    ebx,ebx
c000dfe7:	83 ec 08             	sub    esp,0x8
c000dfea:	39 1d e0 6f 03 c0    	cmp    DWORD PTR ds:0xc0036fe0,ebx
c000dff0:	7e 28                	jle    c000e01a <KeExecuteAtexit()+0x36>
c000dff2:	8b 04 9d 80 70 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc8f80]
c000dff9:	85 c0                	test   eax,eax
c000dffb:	74 1a                	je     c000e017 <KeExecuteAtexit()+0x33>
c000dffd:	83 ec 0c             	sub    esp,0xc
c000e000:	ff 34 9d 00 70 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9000]
c000e007:	ff d0                	call   eax
c000e009:	c7 04 9d 80 70 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc8f80],0x0
c000e014:	83 c4 10             	add    esp,0x10
c000e017:	43                   	inc    ebx
c000e018:	eb d0                	jmp    c000dfea <KeExecuteAtexit()+0x6>
c000e01a:	83 c4 08             	add    esp,0x8
c000e01d:	5b                   	pop    ebx
c000e01e:	c3                   	ret    
c000e01f:	90                   	nop

c000e020 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000e020:	8b 15 00 71 03 c0    	mov    edx,DWORD PTR ds:0xc0037100
c000e026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e02a:	21 d0                	and    eax,edx
c000e02c:	0f 95 c0             	setne  al
c000e02f:	c3                   	ret    

c000e030 <KeInitialiseBootConfigurationFlags()>:
c000e030:	b8 00 05 00 00       	mov    eax,0x500
c000e035:	8b 00                	mov    eax,DWORD PTR [eax]
c000e037:	a3 00 71 03 c0       	mov    ds:0xc0037100,eax
c000e03c:	90                   	nop
c000e03d:	c3                   	ret    

c000e03e <KeDisplaySplashScreen()>:
c000e03e:	53                   	push   ebx
c000e03f:	bb 01 00 00 00       	mov    ebx,0x1
c000e044:	83 ec 08             	sub    esp,0x8
c000e047:	43                   	inc    ebx
c000e048:	0f be 83 22 be 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffd41de]
c000e04f:	85 c0                	test   eax,eax
c000e051:	74 15                	je     c000e068 <KeDisplaySplashScreen()+0x2a>
c000e053:	83 ec 0c             	sub    esp,0xc
c000e056:	6a 01                	push   0x1
c000e058:	53                   	push   ebx
c000e059:	6a 00                	push   0x0
c000e05b:	6a 0f                	push   0xf
c000e05d:	50                   	push   eax
c000e05e:	e8 f9 e8 00 00       	call   c001c95c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000e063:	83 c4 20             	add    esp,0x20
c000e066:	eb df                	jmp    c000e047 <KeDisplaySplashScreen()+0x9>
c000e068:	83 c4 08             	add    esp,0x8
c000e06b:	5b                   	pop    ebx
c000e06c:	c3                   	ret    

c000e06d <KeSetBootMessage(char const*)>:
c000e06d:	57                   	push   edi
c000e06e:	56                   	push   esi
c000e06f:	53                   	push   ebx
c000e070:	31 db                	xor    ebx,ebx
c000e072:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e076:	83 ec 0c             	sub    esp,0xc
c000e079:	6a 14                	push   0x14
c000e07b:	53                   	push   ebx
c000e07c:	43                   	inc    ebx
c000e07d:	6a 00                	push   0x0
c000e07f:	6a 00                	push   0x0
c000e081:	6a 20                	push   0x20
c000e083:	e8 d4 e8 00 00       	call   c001c95c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000e088:	83 c4 20             	add    esp,0x20
c000e08b:	83 fb 50             	cmp    ebx,0x50
c000e08e:	75 e6                	jne    c000e076 <KeSetBootMessage(char const*)+0x9>
c000e090:	83 ec 0c             	sub    esp,0xc
c000e093:	56                   	push   esi
c000e094:	e8 d7 24 ff ff       	call   c0000570 <strlen>
c000e099:	83 c4 10             	add    esp,0x10
c000e09c:	29 c3                	sub    ebx,eax
c000e09e:	d1 eb                	shr    ebx,1
c000e0a0:	89 df                	mov    edi,ebx
c000e0a2:	89 f0                	mov    eax,esi
c000e0a4:	29 d8                	sub    eax,ebx
c000e0a6:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000e0aa:	85 c0                	test   eax,eax
c000e0ac:	74 16                	je     c000e0c4 <KeSetBootMessage(char const*)+0x57>
c000e0ae:	83 ec 0c             	sub    esp,0xc
c000e0b1:	6a 14                	push   0x14
c000e0b3:	57                   	push   edi
c000e0b4:	47                   	inc    edi
c000e0b5:	6a 00                	push   0x0
c000e0b7:	6a 07                	push   0x7
c000e0b9:	50                   	push   eax
c000e0ba:	e8 9d e8 00 00       	call   c001c95c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000e0bf:	83 c4 20             	add    esp,0x20
c000e0c2:	eb de                	jmp    c000e0a2 <KeSetBootMessage(char const*)+0x35>
c000e0c4:	5b                   	pop    ebx
c000e0c5:	5e                   	pop    esi
c000e0c6:	5f                   	pop    edi
c000e0c7:	c3                   	ret    

c000e0c8 <__cxa_atexit>:
c000e0c8:	31 c0                	xor    eax,eax
c000e0ca:	c3                   	ret    

c000e0cb <__cxa_finalize>:
c000e0cb:	c3                   	ret    

c000e0cc <__stack_chk_fail>:
c000e0cc:	55                   	push   ebp
c000e0cd:	89 e5                	mov    ebp,esp
c000e0cf:	83 ec 10             	sub    esp,0x10
c000e0d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e0d5:	68 37 be 02 c0       	push   0xc002be37
c000e0da:	e8 9d 8e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e0df:	58                   	pop    eax
c000e0e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e0e3:	5a                   	pop    edx
c000e0e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000e0e7:	68 37 be 02 c0       	push   0xc002be37
c000e0ec:	e8 8b 8e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e0f1:	c7 04 24 3f be 02 c0 	mov    DWORD PTR [esp],0xc002be3f
c000e0f8:	e8 67 29 00 00       	call   c0010a64 <KePanic(char const*)>
c000e0fd:	83 c4 10             	add    esp,0x10
c000e100:	c9                   	leave  
c000e101:	c3                   	ret    

c000e102 <__cxa_pure_virtual>:
c000e102:	83 ec 18             	sub    esp,0x18
c000e105:	68 57 be 02 c0       	push   0xc002be57
c000e10a:	e8 55 29 00 00       	call   c0010a64 <KePanic(char const*)>
c000e10f:	83 c4 1c             	add    esp,0x1c
c000e112:	c3                   	ret    

c000e113 <operator new[](unsigned long)>:
c000e113:	e9 f7 24 00 00       	jmp    c001060f <malloc>

c000e118 <operator delete(void*, unsigned long)>:
c000e118:	e9 12 25 00 00       	jmp    c001062f <rfree>

c000e11d <operator delete[](void*)>:
c000e11d:	e9 0d 25 00 00       	jmp    c001062f <rfree>

c000e122 <operator delete[](void*, unsigned long)>:
c000e122:	e9 08 25 00 00       	jmp    c001062f <rfree>
c000e127:	90                   	nop

c000e128 <CUnlockScheduler>:
c000e128:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c000e130:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000e135:	85 c0                	test   eax,eax
c000e137:	75 03                	jne    c000e13c <CUnlockScheduler+0x14>
c000e139:	fb                   	sti    
c000e13a:	66 90                	xchg   ax,ax
c000e13c:	90                   	nop
c000e13d:	c3                   	ret    
c000e13e:	66 90                	xchg   ax,ax

c000e140 <CLockScheduler>:
c000e140:	fa                   	cli    
c000e141:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c000e146:	83 c0 01             	add    eax,0x1
c000e149:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c000e14e:	90                   	nop
c000e14f:	c3                   	ret    

c000e150 <CPrintf>:
c000e150:	83 ec 0c             	sub    esp,0xc
c000e153:	83 ec 08             	sub    esp,0x8
c000e156:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e15a:	68 6a be 02 c0       	push   0xc002be6a
c000e15f:	e8 18 8e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e164:	83 c4 10             	add    esp,0x10
c000e167:	90                   	nop
c000e168:	83 c4 0c             	add    esp,0xc
c000e16b:	c3                   	ret    

c000e16c <CmOpen(char const*)>:
c000e16c:	57                   	push   edi
c000e16d:	56                   	push   esi
c000e16e:	53                   	push   ebx
c000e16f:	83 ec 1c             	sub    esp,0x1c
c000e172:	6a 30                	push   0x30
c000e174:	e8 96 24 00 00       	call   c001060f <malloc>
c000e179:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000e180:	89 c3                	mov    ebx,eax
c000e182:	e8 88 24 00 00       	call   c001060f <malloc>
c000e187:	83 c4 0c             	add    esp,0xc
c000e18a:	89 c6                	mov    esi,eax
c000e18c:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c000e192:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e196:	50                   	push   eax
c000e197:	e8 2e ad ff ff       	call   c0008eca <File::File(char const*, Process*)>
c000e19c:	83 c4 0c             	add    esp,0xc
c000e19f:	89 33                	mov    DWORD PTR [ebx],esi
c000e1a1:	8d 44 24 07          	lea    eax,[esp+0x7]
c000e1a5:	50                   	push   eax
c000e1a6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000e1aa:	50                   	push   eax
c000e1ab:	56                   	push   esi
c000e1ac:	e8 39 b0 ff ff       	call   c00091ea <File::stat(unsigned long long*, bool*)>
c000e1b1:	5a                   	pop    edx
c000e1b2:	59                   	pop    ecx
c000e1b3:	6a 01                	push   0x1
c000e1b5:	ff 33                	push   DWORD PTR [ebx]
c000e1b7:	e8 2c ad ff ff       	call   c0008ee8 <File::open(FileOpenMode)>
c000e1bc:	5e                   	pop    esi
c000e1bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1c1:	e8 49 24 00 00       	call   c001060f <malloc>
c000e1c6:	5a                   	pop    edx
c000e1c7:	89 c7                	mov    edi,eax
c000e1c9:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e1cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1cf:	8b 10                	mov    edx,DWORD PTR [eax]
c000e1d1:	56                   	push   esi
c000e1d2:	57                   	push   edi
c000e1d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e1d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e1db:	50                   	push   eax
c000e1dc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000e1df:	83 c4 14             	add    esp,0x14
c000e1e2:	ff 33                	push   DWORD PTR [ebx]
c000e1e4:	e8 5d ad ff ff       	call   c0008f46 <File::close()>
c000e1e9:	59                   	pop    ecx
c000e1ea:	58                   	pop    eax
c000e1eb:	6a 13                	push   0x13
c000e1ed:	ff 33                	push   DWORD PTR [ebx]
c000e1ef:	e8 f4 ac ff ff       	call   c0008ee8 <File::open(FileOpenMode)>
c000e1f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1f6:	8b 10                	mov    edx,DWORD PTR [eax]
c000e1f8:	89 34 24             	mov    DWORD PTR [esp],esi
c000e1fb:	57                   	push   edi
c000e1fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e200:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e204:	50                   	push   eax
c000e205:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000e208:	83 c4 14             	add    esp,0x14
c000e20b:	57                   	push   edi
c000e20c:	e8 0e 24 00 00       	call   c001061f <free>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e217:	75 10                	jne    c000e229 <CmOpen(char const*)+0xbd>
c000e219:	83 ec 0c             	sub    esp,0xc
c000e21c:	68 6d be 02 c0       	push   0xc002be6d
c000e221:	e8 3e 28 00 00       	call   c0010a64 <KePanic(char const*)>
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	8d 7b 05             	lea    edi,[ebx+0x5]
c000e22c:	50                   	push   eax
c000e22d:	6a 00                	push   0x0
c000e22f:	6a 00                	push   0x0
c000e231:	ff 33                	push   DWORD PTR [ebx]
c000e233:	e8 6e ad ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c000e238:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e23a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e23c:	89 34 24             	mov    DWORD PTR [esp],esi
c000e23f:	57                   	push   edi
c000e240:	6a 00                	push   0x0
c000e242:	6a 2b                	push   0x2b
c000e244:	50                   	push   eax
c000e245:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000e248:	83 c4 1c             	add    esp,0x1c
c000e24b:	6a 00                	push   0x0
c000e24d:	6a 00                	push   0x0
c000e24f:	ff 33                	push   DWORD PTR [ebx]
c000e251:	e8 50 ad ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c000e256:	83 c4 0c             	add    esp,0xc
c000e259:	6a 08                	push   0x8
c000e25b:	68 8f be 02 c0       	push   0xc002be8f
c000e260:	57                   	push   edi
c000e261:	e8 1a 21 ff ff       	call   c0000380 <memcmp>
c000e266:	83 c4 10             	add    esp,0x10
c000e269:	85 c0                	test   eax,eax
c000e26b:	74 10                	je     c000e27d <CmOpen(char const*)+0x111>
c000e26d:	83 ec 0c             	sub    esp,0xc
c000e270:	68 98 be 02 c0       	push   0xc002be98
c000e275:	e8 ea 27 00 00       	call   c0010a64 <KePanic(char const*)>
c000e27a:	83 c4 10             	add    esp,0x10
c000e27d:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000e281:	89 d8                	mov    eax,ebx
c000e283:	83 c4 10             	add    esp,0x10
c000e286:	5b                   	pop    ebx
c000e287:	5e                   	pop    esi
c000e288:	5f                   	pop    edi
c000e289:	c3                   	ret    

c000e28a <CmClose(Reghive_Tag*)>:
c000e28a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e28e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000e292:	74 0b                	je     c000e29f <CmClose(Reghive_Tag*)+0x15>
c000e294:	8b 00                	mov    eax,DWORD PTR [eax]
c000e296:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e29a:	e9 a7 ac ff ff       	jmp    c0008f46 <File::close()>
c000e29f:	c3                   	ret    

c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000e2a0:	53                   	push   ebx
c000e2a1:	83 ec 18             	sub    esp,0x18
c000e2a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e2a8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000e2ac:	74 29                	je     c000e2d7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000e2ae:	50                   	push   eax
c000e2af:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000e2b4:	99                   	cdq    
c000e2b5:	52                   	push   edx
c000e2b6:	50                   	push   eax
c000e2b7:	ff 33                	push   DWORD PTR [ebx]
c000e2b9:	e8 e8 ac ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c000e2be:	5a                   	pop    edx
c000e2bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2c1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000e2c5:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2c7:	51                   	push   ecx
c000e2c8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e2cc:	6a 00                	push   0x0
c000e2ce:	6a 2b                	push   0x2b
c000e2d0:	50                   	push   eax
c000e2d1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000e2d4:	83 c4 20             	add    esp,0x20
c000e2d7:	83 c4 18             	add    esp,0x18
c000e2da:	5b                   	pop    ebx
c000e2db:	c3                   	ret    

c000e2dc <CmGetString(Reghive_Tag*, int, char*)>:
c000e2dc:	55                   	push   ebp
c000e2dd:	57                   	push   edi
c000e2de:	56                   	push   esi
c000e2df:	53                   	push   ebx
c000e2e0:	31 db                	xor    ebx,ebx
c000e2e2:	83 ec 70             	sub    esp,0x70
c000e2e5:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000e2ec:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000e2f0:	50                   	push   eax
c000e2f1:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000e2f8:	55                   	push   ebp
c000e2f9:	e8 a2 ff ff ff       	call   c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e2fe:	83 c4 10             	add    esp,0x10
c000e301:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000e306:	c1 e0 08             	shl    eax,0x8
c000e309:	89 c2                	mov    edx,eax
c000e30b:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000e310:	09 d0                	or     eax,edx
c000e312:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000e317:	c1 e0 08             	shl    eax,0x8
c000e31a:	09 d0                	or     eax,edx
c000e31c:	74 25                	je     c000e343 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000e31e:	6b fb 0d             	imul   edi,ebx,0xd
c000e321:	52                   	push   edx
c000e322:	8d 54 24 39          	lea    edx,[esp+0x39]
c000e326:	52                   	push   edx
c000e327:	50                   	push   eax
c000e328:	55                   	push   ebp
c000e329:	e8 72 ff ff ff       	call   c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e32e:	8d 74 24 49          	lea    esi,[esp+0x49]
c000e332:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000e339:	b9 27 00 00 00       	mov    ecx,0x27
c000e33e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e340:	83 c4 10             	add    esp,0x10
c000e343:	83 c3 03             	add    ebx,0x3
c000e346:	83 fb 15             	cmp    ebx,0x15
c000e349:	75 b6                	jne    c000e301 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000e34b:	83 c4 6c             	add    esp,0x6c
c000e34e:	5b                   	pop    ebx
c000e34f:	5e                   	pop    esi
c000e350:	5f                   	pop    edi
c000e351:	5d                   	pop    ebp
c000e352:	c3                   	ret    

c000e353 <CmEnterDirectory(Reghive_Tag*, int)>:
c000e353:	83 ec 40             	sub    esp,0x40
c000e356:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e35a:	50                   	push   eax
c000e35b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e35f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e363:	e8 38 ff ff ff       	call   c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e368:	83 c4 10             	add    esp,0x10
c000e36b:	83 c8 ff             	or     eax,0xffffffff
c000e36e:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000e373:	75 19                	jne    c000e38e <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000e375:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000e37a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000e37f:	c1 e0 08             	shl    eax,0x8
c000e382:	09 c2                	or     edx,eax
c000e384:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000e389:	c1 e0 10             	shl    eax,0x10
c000e38c:	09 d0                	or     eax,edx
c000e38e:	83 c4 3c             	add    esp,0x3c
c000e391:	c3                   	ret    

c000e392 <CmGetNext(Reghive_Tag*, int)>:
c000e392:	83 ec 40             	sub    esp,0x40
c000e395:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e399:	50                   	push   eax
c000e39a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e39e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e3a2:	e8 f9 fe ff ff       	call   c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e3a7:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000e3ac:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000e3b1:	c1 e0 08             	shl    eax,0x8
c000e3b4:	09 c2                	or     edx,eax
c000e3b6:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000e3bb:	83 c4 4c             	add    esp,0x4c
c000e3be:	c1 e0 10             	shl    eax,0x10
c000e3c1:	09 d0                	or     eax,edx
c000e3c3:	c3                   	ret    

c000e3c4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000e3c4:	53                   	push   ebx
c000e3c5:	83 ec 18             	sub    esp,0x18
c000e3c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3cc:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000e3d0:	74 29                	je     c000e3fb <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000e3d2:	50                   	push   eax
c000e3d3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000e3d8:	99                   	cdq    
c000e3d9:	52                   	push   edx
c000e3da:	50                   	push   eax
c000e3db:	ff 33                	push   DWORD PTR [ebx]
c000e3dd:	e8 c4 ab ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c000e3e2:	5a                   	pop    edx
c000e3e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3e5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000e3e9:	8b 10                	mov    edx,DWORD PTR [eax]
c000e3eb:	51                   	push   ecx
c000e3ec:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e3f0:	6a 00                	push   0x0
c000e3f2:	6a 2b                	push   0x2b
c000e3f4:	50                   	push   eax
c000e3f5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000e3f8:	83 c4 20             	add    esp,0x20
c000e3fb:	83 c4 18             	add    esp,0x18
c000e3fe:	5b                   	pop    ebx
c000e3ff:	c3                   	ret    

c000e400 <CmFreeExtent(Reghive_Tag*, int)>:
c000e400:	53                   	push   ebx
c000e401:	83 ec 3c             	sub    esp,0x3c
c000e404:	6a 2b                	push   0x2b
c000e406:	6a 00                	push   0x0
c000e408:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e40c:	53                   	push   ebx
c000e40d:	e8 de 20 ff ff       	call   c00004f0 <memset>
c000e412:	83 c4 0c             	add    esp,0xc
c000e415:	53                   	push   ebx
c000e416:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e41a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e41e:	e8 a1 ff ff ff       	call   c000e3c4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e423:	83 c4 48             	add    esp,0x48
c000e426:	5b                   	pop    ebx
c000e427:	c3                   	ret    

c000e428 <CmUpdateHeader(Reghive_Tag*)>:
c000e428:	83 ec 0c             	sub    esp,0xc
c000e42b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e42f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000e433:	74 10                	je     c000e445 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000e435:	52                   	push   edx
c000e436:	8d 50 05             	lea    edx,[eax+0x5]
c000e439:	52                   	push   edx
c000e43a:	6a 00                	push   0x0
c000e43c:	50                   	push   eax
c000e43d:	e8 82 ff ff ff       	call   c000e3c4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e442:	83 c4 10             	add    esp,0x10
c000e445:	83 c4 0c             	add    esp,0xc
c000e448:	c3                   	ret    

c000e449 <CmExpand(Reghive_Tag*, int)>:
c000e449:	57                   	push   edi
c000e44a:	56                   	push   esi
c000e44b:	83 ce ff             	or     esi,0xffffffff
c000e44e:	53                   	push   ebx
c000e44f:	83 ec 30             	sub    esp,0x30
c000e452:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e456:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000e45a:	74 5f                	je     c000e4bb <CmExpand(Reghive_Tag*, int)+0x72>
c000e45c:	31 d2                	xor    edx,edx
c000e45e:	31 f6                	xor    esi,esi
c000e460:	50                   	push   eax
c000e461:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000e465:	52                   	push   edx
c000e466:	50                   	push   eax
c000e467:	ff 33                	push   DWORD PTR [ebx]
c000e469:	e8 38 ab ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c000e46e:	83 c4 0c             	add    esp,0xc
c000e471:	6a 2b                	push   0x2b
c000e473:	6a 00                	push   0x0
c000e475:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000e479:	57                   	push   edi
c000e47a:	e8 71 20 ff ff       	call   c00004f0 <memset>
c000e47f:	83 c4 10             	add    esp,0x10
c000e482:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e486:	7d 1b                	jge    c000e4a3 <CmExpand(Reghive_Tag*, int)+0x5a>
c000e488:	83 ec 0c             	sub    esp,0xc
c000e48b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e48d:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000e491:	8b 10                	mov    edx,DWORD PTR [eax]
c000e493:	46                   	inc    esi
c000e494:	51                   	push   ecx
c000e495:	57                   	push   edi
c000e496:	6a 00                	push   0x0
c000e498:	6a 2b                	push   0x2b
c000e49a:	50                   	push   eax
c000e49b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000e49e:	83 c4 20             	add    esp,0x20
c000e4a1:	eb df                	jmp    c000e482 <CmExpand(Reghive_Tag*, int)+0x39>
c000e4a3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e4a7:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000e4aa:	83 ec 0c             	sub    esp,0xc
c000e4ad:	01 f2                	add    edx,esi
c000e4af:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000e4b2:	53                   	push   ebx
c000e4b3:	e8 70 ff ff ff       	call   c000e428 <CmUpdateHeader(Reghive_Tag*)>
c000e4b8:	83 c4 10             	add    esp,0x10
c000e4bb:	83 c4 30             	add    esp,0x30
c000e4be:	89 f0                	mov    eax,esi
c000e4c0:	5b                   	pop    ebx
c000e4c1:	5e                   	pop    esi
c000e4c2:	5f                   	pop    edi
c000e4c3:	c3                   	ret    

c000e4c4 <CmFindUnusedExtent(Reghive_Tag*)>:
c000e4c4:	55                   	push   ebp
c000e4c5:	57                   	push   edi
c000e4c6:	56                   	push   esi
c000e4c7:	53                   	push   ebx
c000e4c8:	83 cb ff             	or     ebx,0xffffffff
c000e4cb:	83 ec 1c             	sub    esp,0x1c
c000e4ce:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e4d2:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000e4d6:	74 68                	je     c000e540 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000e4d8:	be 2b 00 00 00       	mov    esi,0x2b
c000e4dd:	51                   	push   ecx
c000e4de:	31 ff                	xor    edi,edi
c000e4e0:	6a 00                	push   0x0
c000e4e2:	31 db                	xor    ebx,ebx
c000e4e4:	6a 00                	push   0x0
c000e4e6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000e4e9:	e8 b8 aa ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000e4f4:	76 3b                	jbe    c000e531 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000e4f6:	83 ec 0c             	sub    esp,0xc
c000e4f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e4fc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000e500:	8b 10                	mov    edx,DWORD PTR [eax]
c000e502:	51                   	push   ecx
c000e503:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000e507:	51                   	push   ecx
c000e508:	6a 00                	push   0x0
c000e50a:	6a 01                	push   0x1
c000e50c:	50                   	push   eax
c000e50d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000e510:	83 c4 20             	add    esp,0x20
c000e513:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e518:	74 26                	je     c000e540 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000e51a:	43                   	inc    ebx
c000e51b:	52                   	push   edx
c000e51c:	57                   	push   edi
c000e51d:	56                   	push   esi
c000e51e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000e521:	e8 80 aa ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c000e526:	83 c6 2b             	add    esi,0x2b
c000e529:	83 d7 00             	adc    edi,0x0
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	eb c0                	jmp    c000e4f1 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000e531:	50                   	push   eax
c000e532:	50                   	push   eax
c000e533:	6a 40                	push   0x40
c000e535:	55                   	push   ebp
c000e536:	e8 0e ff ff ff       	call   c000e449 <CmExpand(Reghive_Tag*, int)>
c000e53b:	83 c4 10             	add    esp,0x10
c000e53e:	89 c3                	mov    ebx,eax
c000e540:	83 c4 1c             	add    esp,0x1c
c000e543:	89 d8                	mov    eax,ebx
c000e545:	5b                   	pop    ebx
c000e546:	5e                   	pop    esi
c000e547:	5f                   	pop    edi
c000e548:	5d                   	pop    ebp
c000e549:	c3                   	ret    

c000e54a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000e54a:	55                   	push   ebp
c000e54b:	57                   	push   edi
c000e54c:	56                   	push   esi
c000e54d:	53                   	push   ebx
c000e54e:	81 ec 88 00 00 00    	sub    esp,0x88
c000e554:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000e55b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e562:	e8 5d ff ff ff       	call   c000e4c4 <CmFindUnusedExtent(Reghive_Tag*)>
c000e567:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e56b:	83 c4 0c             	add    esp,0xc
c000e56e:	6a 2b                	push   0x2b
c000e570:	6a 00                	push   0x0
c000e572:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000e576:	55                   	push   ebp
c000e577:	e8 74 1f ff ff       	call   c00004f0 <memset>
c000e57c:	83 c4 10             	add    esp,0x10
c000e57f:	85 db                	test   ebx,ebx
c000e581:	74 12                	je     c000e595 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000e583:	51                   	push   ecx
c000e584:	55                   	push   ebp
c000e585:	53                   	push   ebx
c000e586:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e58d:	e8 0e fd ff ff       	call   c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e592:	83 c4 10             	add    esp,0x10
c000e595:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000e599:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000e5a0:	b9 2b 00 00 00       	mov    ecx,0x2b
c000e5a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5a7:	85 db                	test   ebx,ebx
c000e5a9:	74 49                	je     c000e5f4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000e5ab:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000e5b0:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000e5b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5b9:	c1 e0 08             	shl    eax,0x8
c000e5bc:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000e5c2:	09 c8                	or     eax,ecx
c000e5c4:	74 11                	je     c000e5d7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000e5c6:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000e5ca:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000e5ce:	c1 e8 10             	shr    eax,0x10
c000e5d1:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000e5d5:	eb 0f                	jmp    c000e5e6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000e5d7:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000e5dc:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000e5e1:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000e5e6:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000e5ea:	c1 ea 08             	shr    edx,0x8
c000e5ed:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000e5f2:	eb 0f                	jmp    c000e603 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000e5f4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000e5f9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000e5fe:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000e603:	52                   	push   edx
c000e604:	8d 44 24 49          	lea    eax,[esp+0x49]
c000e608:	50                   	push   eax
c000e609:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e60d:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e614:	e8 ab fd ff ff       	call   c000e3c4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e619:	83 c4 10             	add    esp,0x10
c000e61c:	85 db                	test   ebx,ebx
c000e61e:	74 12                	je     c000e632 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000e620:	50                   	push   eax
c000e621:	55                   	push   ebp
c000e622:	53                   	push   ebx
c000e623:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e62a:	e8 95 fd ff ff       	call   c000e3c4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e62f:	83 c4 10             	add    esp,0x10
c000e632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e636:	83 c4 7c             	add    esp,0x7c
c000e639:	5b                   	pop    ebx
c000e63a:	5e                   	pop    esi
c000e63b:	5f                   	pop    edi
c000e63c:	5d                   	pop    ebp
c000e63d:	c3                   	ret    

c000e63e <CmSetString(Reghive_Tag*, int, char const*)>:
c000e63e:	55                   	push   ebp
c000e63f:	57                   	push   edi
c000e640:	56                   	push   esi
c000e641:	53                   	push   ebx
c000e642:	bb 27 00 00 00       	mov    ebx,0x27
c000e647:	81 ec 88 00 00 00    	sub    esp,0x88
c000e64d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000e654:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000e65b:	e8 10 1f ff ff       	call   c0000570 <strlen>
c000e660:	8d 48 26             	lea    ecx,[eax+0x26]
c000e663:	89 c8                	mov    eax,ecx
c000e665:	99                   	cdq    
c000e666:	f7 fb                	idiv   ebx
c000e668:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e66c:	83 c4 10             	add    esp,0x10
c000e66f:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000e675:	7e 10                	jle    c000e687 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000e677:	83 ec 0c             	sub    esp,0xc
c000e67a:	68 b3 be 02 c0       	push   0xc002beb3
c000e67f:	e8 e0 23 00 00       	call   c0010a64 <KePanic(char const*)>
c000e684:	83 c4 10             	add    esp,0x10
c000e687:	31 ff                	xor    edi,edi
c000e689:	50                   	push   eax
c000e68a:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000e68e:	53                   	push   ebx
c000e68f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e696:	56                   	push   esi
c000e697:	e8 04 fc ff ff       	call   c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e69c:	83 c4 10             	add    esp,0x10
c000e69f:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000e6a3:	89 d0                	mov    eax,edx
c000e6a5:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000e6a9:	c1 e0 08             	shl    eax,0x8
c000e6ac:	09 c2                	or     edx,eax
c000e6ae:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000e6b2:	c1 e2 08             	shl    edx,0x8
c000e6b5:	09 c2                	or     edx,eax
c000e6b7:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000e6bb:	7e 76                	jle    c000e733 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000e6bd:	85 d2                	test   edx,edx
c000e6bf:	75 25                	jne    c000e6e6 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000e6c1:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000e6c6:	8d 44 24 45          	lea    eax,[esp+0x45]
c000e6ca:	50                   	push   eax
c000e6cb:	6a 00                	push   0x0
c000e6cd:	6a 00                	push   0x0
c000e6cf:	56                   	push   esi
c000e6d0:	e8 75 fe ff ff       	call   c000e54a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e6d5:	83 c4 10             	add    esp,0x10
c000e6d8:	89 c2                	mov    edx,eax
c000e6da:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000e6dd:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000e6e0:	c1 f8 10             	sar    eax,0x10
c000e6e3:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000e6e6:	55                   	push   ebp
c000e6e7:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000e6eb:	55                   	push   ebp
c000e6ec:	52                   	push   edx
c000e6ed:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e6f1:	56                   	push   esi
c000e6f2:	e8 a9 fb ff ff       	call   c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e6f7:	83 c4 0c             	add    esp,0xc
c000e6fa:	6a 27                	push   0x27
c000e6fc:	6a 00                	push   0x0
c000e6fe:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000e702:	51                   	push   ecx
c000e703:	e8 e8 1d ff ff       	call   c00004f0 <memset>
c000e708:	83 c4 0c             	add    esp,0xc
c000e70b:	6b c7 27             	imul   eax,edi,0x27
c000e70e:	6a 27                	push   0x27
c000e710:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000e717:	50                   	push   eax
c000e718:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000e71c:	51                   	push   ecx
c000e71d:	e8 5e 1f ff ff       	call   c0000680 <strncpy>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	55                   	push   ebp
c000e726:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e72a:	52                   	push   edx
c000e72b:	56                   	push   esi
c000e72c:	e8 93 fc ff ff       	call   c000e3c4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e731:	eb 19                	jmp    c000e74c <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000e733:	85 d2                	test   edx,edx
c000e735:	74 18                	je     c000e74f <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000e737:	51                   	push   ecx
c000e738:	51                   	push   ecx
c000e739:	52                   	push   edx
c000e73a:	56                   	push   esi
c000e73b:	e8 c0 fc ff ff       	call   c000e400 <CmFreeExtent(Reghive_Tag*, int)>
c000e740:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000e744:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000e748:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000e74c:	83 c4 10             	add    esp,0x10
c000e74f:	47                   	inc    edi
c000e750:	83 c3 03             	add    ebx,0x3
c000e753:	83 ff 07             	cmp    edi,0x7
c000e756:	0f 85 43 ff ff ff    	jne    c000e69f <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000e75c:	50                   	push   eax
c000e75d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000e761:	50                   	push   eax
c000e762:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e769:	56                   	push   esi
c000e76a:	e8 55 fc ff ff       	call   c000e3c4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e76f:	81 c4 8c 00 00 00    	add    esp,0x8c
c000e775:	5b                   	pop    ebx
c000e776:	5e                   	pop    esi
c000e777:	5f                   	pop    edi
c000e778:	5d                   	pop    ebp
c000e779:	c3                   	ret    

c000e77a <CmGetMatch(char*, char*, bool, bool*)>:
c000e77a:	56                   	push   esi
c000e77b:	53                   	push   ebx
c000e77c:	50                   	push   eax
c000e77d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e781:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e786:	74 25                	je     c000e7ad <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000e788:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000e78b:	31 db                	xor    ebx,ebx
c000e78d:	50                   	push   eax
c000e78e:	50                   	push   eax
c000e78f:	8d 04 9d 60 04 03 c0 	lea    eax,[ebx*4-0x3ffcfba0]
c000e796:	50                   	push   eax
c000e797:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e79b:	e8 b0 1f ff ff       	call   c0000750 <strcmp>
c000e7a0:	83 c4 10             	add    esp,0x10
c000e7a3:	85 c0                	test   eax,eax
c000e7a5:	74 2e                	je     c000e7d5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000e7a7:	43                   	inc    ebx
c000e7a8:	83 fb 3f             	cmp    ebx,0x3f
c000e7ab:	75 e0                	jne    c000e78d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000e7ad:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000e7b0:	31 db                	xor    ebx,ebx
c000e7b2:	8d 04 9d 60 04 03 c0 	lea    eax,[ebx*4-0x3ffcfba0]
c000e7b9:	51                   	push   ecx
c000e7ba:	51                   	push   ecx
c000e7bb:	50                   	push   eax
c000e7bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e7c0:	e8 8b 1f ff ff       	call   c0000750 <strcmp>
c000e7c5:	83 c4 10             	add    esp,0x10
c000e7c8:	85 c0                	test   eax,eax
c000e7ca:	74 09                	je     c000e7d5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000e7cc:	43                   	inc    ebx
c000e7cd:	83 fb 3f             	cmp    ebx,0x3f
c000e7d0:	75 e0                	jne    c000e7b2 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000e7d2:	83 cb ff             	or     ebx,0xffffffff
c000e7d5:	89 d8                	mov    eax,ebx
c000e7d7:	5a                   	pop    edx
c000e7d8:	5b                   	pop    ebx
c000e7d9:	5e                   	pop    esi
c000e7da:	c3                   	ret    

c000e7db <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000e7db:	55                   	push   ebp
c000e7dc:	31 c0                	xor    eax,eax
c000e7de:	57                   	push   edi
c000e7df:	56                   	push   esi
c000e7e0:	53                   	push   ebx
c000e7e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e7e5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e7e9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000e7eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e7ef:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000e7f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e7f6:	83 fd 1f             	cmp    ebp,0x1f
c000e7f9:	7f 0b                	jg     c000e806 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000e7fb:	0f b6 c2             	movzx  eax,dl
c000e7fe:	d3 e0                	shl    eax,cl
c000e800:	09 07                	or     DWORD PTR [edi],eax
c000e802:	b0 01                	mov    al,0x1
c000e804:	01 33                	add    DWORD PTR [ebx],esi
c000e806:	5b                   	pop    ebx
c000e807:	5e                   	pop    esi
c000e808:	5f                   	pop    edi
c000e809:	5d                   	pop    ebp
c000e80a:	c3                   	ret    

c000e80b <CmGetShift(unsigned int*, int*, int, bool*)>:
c000e80b:	57                   	push   edi
c000e80c:	56                   	push   esi
c000e80d:	53                   	push   ebx
c000e80e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e812:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e816:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000e81a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e81e:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000e820:	7c 17                	jl     c000e839 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000e822:	8b 17                	mov    edx,DWORD PTR [edi]
c000e824:	b8 01 00 00 00       	mov    eax,0x1
c000e829:	d3 e0                	shl    eax,cl
c000e82b:	48                   	dec    eax
c000e82c:	21 d0                	and    eax,edx
c000e82e:	d3 ea                	shr    edx,cl
c000e830:	89 17                	mov    DWORD PTR [edi],edx
c000e832:	29 0b                	sub    DWORD PTR [ebx],ecx
c000e834:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000e837:	eb 05                	jmp    c000e83e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000e839:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000e83c:	31 c0                	xor    eax,eax
c000e83e:	5b                   	pop    ebx
c000e83f:	5e                   	pop    esi
c000e840:	5f                   	pop    edi
c000e841:	c3                   	ret    

c000e842 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000e842:	83 ec 40             	sub    esp,0x40
c000e845:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e849:	50                   	push   eax
c000e84a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e84e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e852:	e8 49 fa ff ff       	call   c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e857:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e85b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000e85f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000e863:	89 10                	mov    DWORD PTR [eax],edx
c000e865:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000e868:	83 c4 4c             	add    esp,0x4c
c000e86b:	c3                   	ret    

c000e86c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000e86c:	55                   	push   ebp
c000e86d:	57                   	push   edi
c000e86e:	56                   	push   esi
c000e86f:	53                   	push   ebx
c000e870:	83 ec 40             	sub    esp,0x40
c000e873:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000e877:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000e87b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000e87f:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000e883:	53                   	push   ebx
c000e884:	56                   	push   esi
c000e885:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e889:	e8 12 fa ff ff       	call   c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e88e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000e892:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000e896:	83 c4 0c             	add    esp,0xc
c000e899:	53                   	push   ebx
c000e89a:	56                   	push   esi
c000e89b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e89f:	e8 20 fb ff ff       	call   c000e3c4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e8a4:	83 c4 4c             	add    esp,0x4c
c000e8a7:	5b                   	pop    ebx
c000e8a8:	5e                   	pop    esi
c000e8a9:	5f                   	pop    edi
c000e8aa:	5d                   	pop    ebp
c000e8ab:	c3                   	ret    

c000e8ac <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000e8ac:	55                   	push   ebp
c000e8ad:	57                   	push   edi
c000e8ae:	56                   	push   esi
c000e8af:	31 f6                	xor    esi,esi
c000e8b1:	53                   	push   ebx
c000e8b2:	31 db                	xor    ebx,ebx
c000e8b4:	83 ec 40             	sub    esp,0x40
c000e8b7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e8bf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e8c7:	6a 12                	push   0x12
c000e8c9:	68 ee 00 00 00       	push   0xee
c000e8ce:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e8d2:	e8 19 1c ff ff       	call   c00004f0 <memset>
c000e8d7:	83 c4 10             	add    esp,0x10
c000e8da:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000e8de:	6a 08                	push   0x8
c000e8e0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e8e4:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000e8e8:	50                   	push   eax
c000e8e9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e8ed:	55                   	push   ebp
c000e8ee:	57                   	push   edi
c000e8ef:	e8 e7 fe ff ff       	call   c000e7db <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e8f4:	83 c4 10             	add    esp,0x10
c000e8f7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e8fb:	50                   	push   eax
c000e8fc:	6a 06                	push   0x6
c000e8fe:	55                   	push   ebp
c000e8ff:	57                   	push   edi
c000e900:	e8 06 ff ff ff       	call   c000e80b <CmGetShift(unsigned int*, int*, int, bool*)>
c000e905:	83 c4 10             	add    esp,0x10
c000e908:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e90d:	74 07                	je     c000e916 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000e90f:	46                   	inc    esi
c000e910:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000e914:	eb e1                	jmp    c000e8f7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000e916:	43                   	inc    ebx
c000e917:	83 fb 12             	cmp    ebx,0x12
c000e91a:	75 c2                	jne    c000e8de <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000e91c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e920:	31 db                	xor    ebx,ebx
c000e922:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000e925:	50                   	push   eax
c000e926:	50                   	push   eax
c000e927:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000e92c:	43                   	inc    ebx
c000e92d:	8d 04 85 60 04 03 c0 	lea    eax,[eax*4-0x3ffcfba0]
c000e934:	50                   	push   eax
c000e935:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e939:	e8 02 1f ff ff       	call   c0000840 <strcat>
c000e93e:	83 c4 10             	add    esp,0x10
c000e941:	83 fb 18             	cmp    ebx,0x18
c000e944:	75 df                	jne    c000e925 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000e946:	83 c4 3c             	add    esp,0x3c
c000e949:	31 c0                	xor    eax,eax
c000e94b:	5b                   	pop    ebx
c000e94c:	5e                   	pop    esi
c000e94d:	5f                   	pop    edi
c000e94e:	5d                   	pop    ebp
c000e94f:	c3                   	ret    

c000e950 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000e950:	83 ec 40             	sub    esp,0x40
c000e953:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e957:	50                   	push   eax
c000e958:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e95c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e960:	e8 3b f9 ff ff       	call   c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e965:	58                   	pop    eax
c000e966:	5a                   	pop    edx
c000e967:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000e96b:	8d 44 24 15          	lea    eax,[esp+0x15]
c000e96f:	50                   	push   eax
c000e970:	e8 37 ff ff ff       	call   c000e8ac <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000e975:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000e97a:	83 c4 4c             	add    esp,0x4c
c000e97d:	c3                   	ret    

c000e97e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000e97e:	55                   	push   ebp
c000e97f:	57                   	push   edi
c000e980:	56                   	push   esi
c000e981:	53                   	push   ebx
c000e982:	31 db                	xor    ebx,ebx
c000e984:	83 ec 70             	sub    esp,0x70
c000e987:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000e98e:	6a 30                	push   0x30
c000e990:	6a 00                	push   0x0
c000e992:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e996:	56                   	push   esi
c000e997:	e8 54 1b ff ff       	call   c00004f0 <memset>
c000e99c:	83 c4 10             	add    esp,0x10
c000e99f:	83 ec 0c             	sub    esp,0xc
c000e9a2:	57                   	push   edi
c000e9a3:	e8 c8 1b ff ff       	call   c0000570 <strlen>
c000e9a8:	83 c4 10             	add    esp,0x10
c000e9ab:	39 d8                	cmp    eax,ebx
c000e9ad:	76 16                	jbe    c000e9c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000e9af:	83 ec 0c             	sub    esp,0xc
c000e9b2:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000e9b6:	50                   	push   eax
c000e9b7:	e8 74 1f ff ff       	call   c0000930 <toupper>
c000e9bc:	83 c4 10             	add    esp,0x10
c000e9bf:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000e9c2:	43                   	inc    ebx
c000e9c3:	eb da                	jmp    c000e99f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000e9c5:	31 f6                	xor    esi,esi
c000e9c7:	52                   	push   edx
c000e9c8:	31 ff                	xor    edi,edi
c000e9ca:	6a 18                	push   0x18
c000e9cc:	6a 3f                	push   0x3f
c000e9ce:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e9d2:	50                   	push   eax
c000e9d3:	e8 18 1b ff ff       	call   c00004f0 <memset>
c000e9d8:	83 c4 10             	add    esp,0x10
c000e9db:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000e9df:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000e9e3:	84 c0                	test   al,al
c000e9e5:	0f 84 b0 00 00 00    	je     c000ea9b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000e9eb:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000e9ef:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000e9f4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000e9f8:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000e9fd:	8d 6e 01             	lea    ebp,[esi+0x1]
c000ea00:	83 ec 0c             	sub    esp,0xc
c000ea03:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000ea07:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000ea0b:	53                   	push   ebx
c000ea0c:	e8 5f 1b ff ff       	call   c0000570 <strlen>
c000ea11:	83 c4 10             	add    esp,0x10
c000ea14:	85 c0                	test   eax,eax
c000ea16:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000ea1a:	74 0b                	je     c000ea27 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000ea1c:	50                   	push   eax
c000ea1d:	6a 01                	push   0x1
c000ea1f:	53                   	push   ebx
c000ea20:	8d 44 24 20          	lea    eax,[esp+0x20]
c000ea24:	50                   	push   eax
c000ea25:	eb 0a                	jmp    c000ea31 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000ea27:	50                   	push   eax
c000ea28:	6a 00                	push   0x0
c000ea2a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000ea2e:	50                   	push   eax
c000ea2f:	6a 00                	push   0x0
c000ea31:	e8 44 fd ff ff       	call   c000e77a <CmGetMatch(char*, char*, bool, bool*)>
c000ea36:	83 c4 10             	add    esp,0x10
c000ea39:	83 f8 ff             	cmp    eax,0xffffffff
c000ea3c:	75 1a                	jne    c000ea58 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000ea3e:	83 ec 0c             	sub    esp,0xc
c000ea41:	68 c8 be 02 c0       	push   0xc002bec8
c000ea46:	e8 19 20 00 00       	call   c0010a64 <KePanic(char const*)>
c000ea4b:	83 c4 10             	add    esp,0x10
c000ea4e:	b8 02 00 00 00       	mov    eax,0x2
c000ea53:	e9 bc 00 00 00       	jmp    c000eb14 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000ea58:	83 ff 18             	cmp    edi,0x18
c000ea5b:	75 1a                	jne    c000ea77 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000ea5d:	83 ec 0c             	sub    esp,0xc
c000ea60:	68 dd be 02 c0       	push   0xc002bedd
c000ea65:	e8 fa 1f 00 00       	call   c0010a64 <KePanic(char const*)>
c000ea6a:	83 c4 10             	add    esp,0x10
c000ea6d:	b8 01 00 00 00       	mov    eax,0x1
c000ea72:	e9 9d 00 00 00       	jmp    c000eb14 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000ea77:	47                   	inc    edi
c000ea78:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ea7d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000ea81:	74 02                	je     c000ea85 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000ea83:	89 ee                	mov    esi,ebp
c000ea85:	83 ec 0c             	sub    esp,0xc
c000ea88:	53                   	push   ebx
c000ea89:	e8 e2 1a ff ff       	call   c0000570 <strlen>
c000ea8e:	83 c4 10             	add    esp,0x10
c000ea91:	85 c0                	test   eax,eax
c000ea93:	74 06                	je     c000ea9b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000ea95:	46                   	inc    esi
c000ea96:	e9 40 ff ff ff       	jmp    c000e9db <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000ea9b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000eaa3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000eaab:	31 f6                	xor    esi,esi
c000eaad:	50                   	push   eax
c000eaae:	31 ff                	xor    edi,edi
c000eab0:	6a 12                	push   0x12
c000eab2:	68 ee 00 00 00       	push   0xee
c000eab7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000eabe:	e8 2d 1a ff ff       	call   c00004f0 <memset>
c000eac3:	83 c4 10             	add    esp,0x10
c000eac6:	83 fe 17             	cmp    esi,0x17
c000eac9:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000eacd:	7e 26                	jle    c000eaf5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000eacf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000ead3:	50                   	push   eax
c000ead4:	6a 08                	push   0x8
c000ead6:	55                   	push   ebp
c000ead7:	53                   	push   ebx
c000ead8:	e8 2e fd ff ff       	call   c000e80b <CmGetShift(unsigned int*, int*, int, bool*)>
c000eadd:	83 c4 10             	add    esp,0x10
c000eae0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000eae5:	74 26                	je     c000eb0d <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000eae7:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000eaee:	4e                   	dec    esi
c000eaef:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000eaf2:	47                   	inc    edi
c000eaf3:	eb 1c                	jmp    c000eb11 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000eaf5:	6a 06                	push   0x6
c000eaf7:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000eafc:	50                   	push   eax
c000eafd:	55                   	push   ebp
c000eafe:	53                   	push   ebx
c000eaff:	e8 d7 fc ff ff       	call   c000e7db <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000eb04:	83 c4 10             	add    esp,0x10
c000eb07:	84 c0                	test   al,al
c000eb09:	75 06                	jne    c000eb11 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000eb0b:	eb c2                	jmp    c000eacf <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000eb0d:	31 c0                	xor    eax,eax
c000eb0f:	eb 03                	jmp    c000eb14 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000eb11:	46                   	inc    esi
c000eb12:	eb b2                	jmp    c000eac6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000eb14:	83 c4 6c             	add    esp,0x6c
c000eb17:	5b                   	pop    ebx
c000eb18:	5e                   	pop    esi
c000eb19:	5f                   	pop    edi
c000eb1a:	5d                   	pop    ebp
c000eb1b:	c3                   	ret    

c000eb1c <CmCreateString(Reghive_Tag*, int, char const*)>:
c000eb1c:	53                   	push   ebx
c000eb1d:	83 ec 3c             	sub    esp,0x3c
c000eb20:	6a 2b                	push   0x2b
c000eb22:	6a 00                	push   0x0
c000eb24:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000eb28:	53                   	push   ebx
c000eb29:	e8 c2 19 ff ff       	call   c00004f0 <memset>
c000eb2e:	58                   	pop    eax
c000eb2f:	5a                   	pop    edx
c000eb30:	8d 44 24 11          	lea    eax,[esp+0x11]
c000eb34:	50                   	push   eax
c000eb35:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eb39:	e8 40 fe ff ff       	call   c000e97e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000eb3e:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000eb43:	83 c4 0c             	add    esp,0xc
c000eb46:	6a 15                	push   0x15
c000eb48:	6a 00                	push   0x0
c000eb4a:	8d 44 24 27          	lea    eax,[esp+0x27]
c000eb4e:	50                   	push   eax
c000eb4f:	e8 9c 19 ff ff       	call   c00004f0 <memset>
c000eb54:	53                   	push   ebx
c000eb55:	6a 00                	push   0x0
c000eb57:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000eb5b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000eb5f:	e8 e6 f9 ff ff       	call   c000e54a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000eb64:	83 c4 58             	add    esp,0x58
c000eb67:	5b                   	pop    ebx
c000eb68:	c3                   	ret    

c000eb69 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000eb69:	56                   	push   esi
c000eb6a:	53                   	push   ebx
c000eb6b:	83 ec 48             	sub    esp,0x48
c000eb6e:	6a 12                	push   0x12
c000eb70:	68 ff 00 00 00       	push   0xff
c000eb75:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000eb79:	56                   	push   esi
c000eb7a:	e8 71 19 ff ff       	call   c00004f0 <memset>
c000eb7f:	5a                   	pop    edx
c000eb80:	59                   	pop    ecx
c000eb81:	56                   	push   esi
c000eb82:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000eb86:	e8 f3 fd ff ff       	call   c000e97e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000eb8b:	83 c4 10             	add    esp,0x10
c000eb8e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000eb92:	85 db                	test   ebx,ebx
c000eb94:	74 42                	je     c000ebd8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000eb96:	50                   	push   eax
c000eb97:	8d 44 24 19          	lea    eax,[esp+0x19]
c000eb9b:	50                   	push   eax
c000eb9c:	53                   	push   ebx
c000eb9d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000eba1:	e8 fa f6 ff ff       	call   c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000eba6:	83 c4 0c             	add    esp,0xc
c000eba9:	6a 12                	push   0x12
c000ebab:	8d 44 24 21          	lea    eax,[esp+0x21]
c000ebaf:	50                   	push   eax
c000ebb0:	56                   	push   esi
c000ebb1:	e8 ca 17 ff ff       	call   c0000380 <memcmp>
c000ebb6:	83 c4 10             	add    esp,0x10
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1e                	je     c000ebdb <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000ebbd:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000ebc2:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000ebc7:	c1 e3 08             	shl    ebx,0x8
c000ebca:	09 d8                	or     eax,ebx
c000ebcc:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000ebd1:	c1 e3 10             	shl    ebx,0x10
c000ebd4:	09 c3                	or     ebx,eax
c000ebd6:	eb ba                	jmp    c000eb92 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000ebd8:	83 cb ff             	or     ebx,0xffffffff
c000ebdb:	89 d8                	mov    eax,ebx
c000ebdd:	83 c4 44             	add    esp,0x44
c000ebe0:	5b                   	pop    ebx
c000ebe1:	5e                   	pop    esi
c000ebe2:	c3                   	ret    

c000ebe3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000ebe3:	57                   	push   edi
c000ebe4:	56                   	push   esi
c000ebe5:	53                   	push   ebx
c000ebe6:	83 ec 34             	sub    esp,0x34
c000ebe9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000ebed:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000ebf1:	6a 2b                	push   0x2b
c000ebf3:	6a 00                	push   0x0
c000ebf5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ebf9:	53                   	push   ebx
c000ebfa:	e8 f1 18 ff ff       	call   c00004f0 <memset>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ec05:	50                   	push   eax
c000ec06:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ec0a:	e8 6f fd ff ff       	call   c000e97e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ec0f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ec13:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000ec17:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000ec1b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000ec1f:	53                   	push   ebx
c000ec20:	6a 00                	push   0x0
c000ec22:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ec26:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ec2a:	e8 1b f9 ff ff       	call   c000e54a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ec2f:	83 c4 50             	add    esp,0x50
c000ec32:	5b                   	pop    ebx
c000ec33:	5e                   	pop    esi
c000ec34:	5f                   	pop    edi
c000ec35:	c3                   	ret    

c000ec36 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000ec36:	55                   	push   ebp
c000ec37:	57                   	push   edi
c000ec38:	56                   	push   esi
c000ec39:	53                   	push   ebx
c000ec3a:	83 ec 40             	sub    esp,0x40
c000ec3d:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000ec41:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000ec45:	6a 2b                	push   0x2b
c000ec47:	6a 00                	push   0x0
c000ec49:	8d 74 24 11          	lea    esi,[esp+0x11]
c000ec4d:	56                   	push   esi
c000ec4e:	e8 9d 18 ff ff       	call   c00004f0 <memset>
c000ec53:	5f                   	pop    edi
c000ec54:	89 ef                	mov    edi,ebp
c000ec56:	58                   	pop    eax
c000ec57:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ec5b:	50                   	push   eax
c000ec5c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ec60:	e8 19 fd ff ff       	call   c000e97e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ec65:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000ec6a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ec6f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000ec74:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000ec79:	83 c4 10             	add    esp,0x10
c000ec7c:	85 ed                	test   ebp,ebp
c000ec7e:	74 14                	je     c000ec94 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000ec80:	51                   	push   ecx
c000ec81:	51                   	push   ecx
c000ec82:	57                   	push   edi
c000ec83:	53                   	push   ebx
c000ec84:	e8 09 f7 ff ff       	call   c000e392 <CmGetNext(Reghive_Tag*, int)>
c000ec89:	83 c4 10             	add    esp,0x10
c000ec8c:	85 c0                	test   eax,eax
c000ec8e:	74 04                	je     c000ec94 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000ec90:	89 c7                	mov    edi,eax
c000ec92:	eb e8                	jmp    c000ec7c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000ec94:	56                   	push   esi
c000ec95:	6a 00                	push   0x0
c000ec97:	57                   	push   edi
c000ec98:	53                   	push   ebx
c000ec99:	e8 ac f8 ff ff       	call   c000e54a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ec9e:	83 c4 0c             	add    esp,0xc
c000eca1:	89 c7                	mov    edi,eax
c000eca3:	56                   	push   esi
c000eca4:	50                   	push   eax
c000eca5:	53                   	push   ebx
c000eca6:	e8 f5 f5 ff ff       	call   c000e2a0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ecab:	58                   	pop    eax
c000ecac:	5a                   	pop    edx
c000ecad:	6a 6c                	push   0x6c
c000ecaf:	6a 00                	push   0x0
c000ecb1:	6a 00                	push   0x0
c000ecb3:	68 ee be 02 c0       	push   0xc002beee
c000ecb8:	57                   	push   edi
c000ecb9:	53                   	push   ebx
c000ecba:	e8 24 ff ff ff       	call   c000ebe3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000ecbf:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000ecc3:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000ecc7:	c1 e8 10             	shr    eax,0x10
c000ecca:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000ecce:	83 c4 1c             	add    esp,0x1c
c000ecd1:	56                   	push   esi
c000ecd2:	57                   	push   edi
c000ecd3:	53                   	push   ebx
c000ecd4:	e8 eb f6 ff ff       	call   c000e3c4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ecd9:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000ecde:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000ece3:	c1 e0 08             	shl    eax,0x8
c000ece6:	09 c2                	or     edx,eax
c000ece8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000eced:	83 c4 4c             	add    esp,0x4c
c000ecf0:	c1 e0 10             	shl    eax,0x10
c000ecf3:	5b                   	pop    ebx
c000ecf4:	09 d0                	or     eax,edx
c000ecf6:	5e                   	pop    esi
c000ecf7:	5f                   	pop    edi
c000ecf8:	5d                   	pop    ebp
c000ecf9:	c3                   	ret    

c000ecfa <zStrtok(char*, char const*)>:
c000ecfa:	55                   	push   ebp
c000ecfb:	57                   	push   edi
c000ecfc:	56                   	push   esi
c000ecfd:	53                   	push   ebx
c000ecfe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ed02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ed06:	85 db                	test   ebx,ebx
c000ed08:	74 2f                	je     c000ed39 <zStrtok(char*, char const*)+0x3f>
c000ed0a:	85 c0                	test   eax,eax
c000ed0c:	75 09                	jne    c000ed17 <zStrtok(char*, char const*)+0x1d>
c000ed0e:	a1 04 71 03 c0       	mov    eax,ds:0xc0037104
c000ed13:	85 c0                	test   eax,eax
c000ed15:	74 50                	je     c000ed67 <zStrtok(char*, char const*)+0x6d>
c000ed17:	31 c9                	xor    ecx,ecx
c000ed19:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000ed1d:	74 03                	je     c000ed22 <zStrtok(char*, char const*)+0x28>
c000ed1f:	41                   	inc    ecx
c000ed20:	eb f7                	jmp    c000ed19 <zStrtok(char*, char const*)+0x1f>
c000ed22:	31 d2                	xor    edx,edx
c000ed24:	39 ca                	cmp    edx,ecx
c000ed26:	74 15                	je     c000ed3d <zStrtok(char*, char const*)+0x43>
c000ed28:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000ed2c:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000ed2f:	8d 3c 10             	lea    edi,[eax+edx*1]
c000ed32:	39 ee                	cmp    esi,ebp
c000ed34:	74 13                	je     c000ed49 <zStrtok(char*, char const*)+0x4f>
c000ed36:	42                   	inc    edx
c000ed37:	eb eb                	jmp    c000ed24 <zStrtok(char*, char const*)+0x2a>
c000ed39:	31 c0                	xor    eax,eax
c000ed3b:	eb 2a                	jmp    c000ed67 <zStrtok(char*, char const*)+0x6d>
c000ed3d:	c7 05 04 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037104,0x0
c000ed47:	eb 1e                	jmp    c000ed67 <zStrtok(char*, char const*)+0x6d>
c000ed49:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000ed4c:	39 ce                	cmp    esi,ecx
c000ed4e:	75 0a                	jne    c000ed5a <zStrtok(char*, char const*)+0x60>
c000ed50:	40                   	inc    eax
c000ed51:	a3 04 71 03 c0       	mov    ds:0xc0037104,eax
c000ed56:	89 d8                	mov    eax,ebx
c000ed58:	eb 0d                	jmp    c000ed67 <zStrtok(char*, char const*)+0x6d>
c000ed5a:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000ed5e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000ed61:	89 15 04 71 03 c0    	mov    DWORD PTR ds:0xc0037104,edx
c000ed67:	5b                   	pop    ebx
c000ed68:	5e                   	pop    esi
c000ed69:	5f                   	pop    edi
c000ed6a:	5d                   	pop    ebp
c000ed6b:	c3                   	ret    

c000ed6c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000ed6c:	57                   	push   edi
c000ed6d:	56                   	push   esi
c000ed6e:	53                   	push   ebx
c000ed6f:	81 ec 08 01 00 00    	sub    esp,0x108
c000ed75:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000ed7c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000ed83:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ed87:	53                   	push   ebx
c000ed88:	e8 b3 18 ff ff       	call   c0000640 <strcpy>
c000ed8d:	59                   	pop    ecx
c000ed8e:	5e                   	pop    esi
c000ed8f:	68 86 cd 02 c0       	push   0xc002cd86
c000ed94:	53                   	push   ebx
c000ed95:	bb 01 00 00 00       	mov    ebx,0x1
c000ed9a:	e8 5b ff ff ff       	call   c000ecfa <zStrtok(char*, char const*)>
c000ed9f:	83 c4 10             	add    esp,0x10
c000eda2:	85 c0                	test   eax,eax
c000eda4:	74 3b                	je     c000ede1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000eda6:	52                   	push   edx
c000eda7:	50                   	push   eax
c000eda8:	6a 01                	push   0x1
c000edaa:	57                   	push   edi
c000edab:	e8 b9 fd ff ff       	call   c000eb69 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000edb0:	59                   	pop    ecx
c000edb1:	89 c3                	mov    ebx,eax
c000edb3:	5e                   	pop    esi
c000edb4:	68 86 cd 02 c0       	push   0xc002cd86
c000edb9:	6a 00                	push   0x0
c000edbb:	e8 3a ff ff ff       	call   c000ecfa <zStrtok(char*, char const*)>
c000edc0:	83 c4 10             	add    esp,0x10
c000edc3:	89 c6                	mov    esi,eax
c000edc5:	85 c0                	test   eax,eax
c000edc7:	74 18                	je     c000ede1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000edc9:	52                   	push   edx
c000edca:	52                   	push   edx
c000edcb:	53                   	push   ebx
c000edcc:	57                   	push   edi
c000edcd:	e8 81 f5 ff ff       	call   c000e353 <CmEnterDirectory(Reghive_Tag*, int)>
c000edd2:	83 c4 10             	add    esp,0x10
c000edd5:	89 c3                	mov    ebx,eax
c000edd7:	83 f8 ff             	cmp    eax,0xffffffff
c000edda:	74 05                	je     c000ede1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000eddc:	50                   	push   eax
c000eddd:	56                   	push   esi
c000edde:	53                   	push   ebx
c000eddf:	eb c9                	jmp    c000edaa <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000ede1:	81 c4 00 01 00 00    	add    esp,0x100
c000ede7:	89 d8                	mov    eax,ebx
c000ede9:	5b                   	pop    ebx
c000edea:	5e                   	pop    esi
c000edeb:	5f                   	pop    edi
c000edec:	c3                   	ret    
c000eded:	90                   	nop

c000edee <Computer::close(int, int, void*)>:
c000edee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000edf3:	c3                   	ret    

c000edf4 <Computer::Computer()>:
c000edf4:	83 ec 0c             	sub    esp,0xc
c000edf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edfb:	83 ec 08             	sub    esp,0x8
c000edfe:	68 20 b2 02 c0       	push   0xc002b220
c000ee03:	50                   	push   eax
c000ee04:	e8 ed ba ff ff       	call   c000a8f6 <Device::Device(char const*)>
c000ee09:	83 c4 10             	add    esp,0x10
c000ee0c:	ba 40 bf 02 c0       	mov    edx,0xc002bf40
c000ee11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee15:	89 10                	mov    DWORD PTR [eax],edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ee25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee29:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ee33:	90                   	nop
c000ee34:	83 c4 0c             	add    esp,0xc
c000ee37:	c3                   	ret    

c000ee38 <Computer::open(int, int, void*)>:
c000ee38:	56                   	push   esi
c000ee39:	53                   	push   ebx
c000ee3a:	83 ec 04             	sub    esp,0x4
c000ee3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee41:	39 1d 08 71 03 c0    	cmp    DWORD PTR ds:0xc0037108,ebx
c000ee47:	74 10                	je     c000ee59 <Computer::open(int, int, void*)+0x21>
c000ee49:	83 ec 0c             	sub    esp,0xc
c000ee4c:	68 0c bf 02 c0       	push   0xc002bf0c
c000ee51:	e8 0e 1c 00 00       	call   c0010a64 <KePanic(char const*)>
c000ee56:	83 c4 10             	add    esp,0x10
c000ee59:	83 ec 0c             	sub    esp,0xc
c000ee5c:	68 78 11 00 00       	push   0x1178
c000ee61:	e8 a9 17 00 00       	call   c001060f <malloc>
c000ee66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee69:	89 c6                	mov    esi,eax
c000ee6b:	e8 ec ca 00 00       	call   c001b95c <CPU::CPU()>
c000ee70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee74:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000ee7a:	50                   	push   eax
c000ee7b:	6a 00                	push   0x0
c000ee7d:	6a 00                	push   0x0
c000ee7f:	56                   	push   esi
c000ee80:	e8 b9 cc 00 00       	call   c001bb3e <CPU::open(int, int, void*)>
c000ee85:	83 c4 14             	add    esp,0x14
c000ee88:	68 f4 be 02 c0       	push   0xc002bef4
c000ee8d:	e8 db f1 ff ff       	call   c000e06d <KeSetBootMessage(char const*)>
c000ee92:	e8 85 89 ff ff       	call   c000781c <KeSetupDeviceTree()>
c000ee97:	e8 a8 88 ff ff       	call   c0007744 <KePrintDeviceTree()>
c000ee9c:	e8 13 8d ff ff       	call   c0007bb4 <KePrintIOPortUsage()>
c000eea1:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000eea8:	e8 62 17 00 00       	call   c001060f <malloc>
c000eead:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeb0:	89 c6                	mov    esi,eax
c000eeb2:	e8 45 e7 ff ff       	call   c000d5fc <ACPI::ACPI()>
c000eeb7:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000eebd:	5a                   	pop    edx
c000eebe:	59                   	pop    ecx
c000eebf:	56                   	push   esi
c000eec0:	53                   	push   ebx
c000eec1:	e8 ce b8 ff ff       	call   c000a794 <Device::addChild(Device*)>
c000eec6:	5e                   	pop    esi
c000eec7:	58                   	pop    eax
c000eec8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000eece:	50                   	push   eax
c000eecf:	53                   	push   ebx
c000eed0:	e8 bf b8 ff ff       	call   c000a794 <Device::addChild(Device*)>
c000eed5:	83 c4 14             	add    esp,0x14
c000eed8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eedd:	5b                   	pop    ebx
c000eede:	5e                   	pop    esi
c000eedf:	c3                   	ret    

c000eee0 <KeCalculateCRC32(unsigned char*, int)>:
c000eee0:	53                   	push   ebx
c000eee1:	83 c8 ff             	or     eax,0xffffffff
c000eee4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000eee8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eeec:	01 cb                	add    ebx,ecx
c000eeee:	39 d9                	cmp    ecx,ebx
c000eef0:	74 15                	je     c000ef07 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000eef2:	41                   	inc    ecx
c000eef3:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000eef6:	31 c2                	xor    edx,eax
c000eef8:	c1 e8 08             	shr    eax,0x8
c000eefb:	0f b6 d2             	movzx  edx,dl
c000eefe:	33 04 95 60 05 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcfaa0]
c000ef05:	eb e7                	jmp    c000eeee <KeCalculateCRC32(unsigned char*, int)+0xe>
c000ef07:	f7 d0                	not    eax
c000ef09:	5b                   	pop    ebx
c000ef0a:	c3                   	ret    
c000ef0b:	90                   	nop

c000ef0c <EnvVarContainer::getEnv(char const*)>:
c000ef0c:	57                   	push   edi
c000ef0d:	56                   	push   esi
c000ef0e:	53                   	push   ebx
c000ef0f:	31 db                	xor    ebx,ebx
c000ef11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ef15:	39 1e                	cmp    DWORD PTR [esi],ebx
c000ef17:	7e 2b                	jle    c000ef44 <EnvVarContainer::getEnv(char const*)+0x38>
c000ef19:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000ef20:	50                   	push   eax
c000ef21:	50                   	push   eax
c000ef22:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ef25:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ef28:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef2c:	e8 1f 18 ff ff       	call   c0000750 <strcmp>
c000ef31:	83 c4 10             	add    esp,0x10
c000ef34:	85 c0                	test   eax,eax
c000ef36:	75 09                	jne    c000ef41 <EnvVarContainer::getEnv(char const*)+0x35>
c000ef38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ef3b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000ef3f:	eb 05                	jmp    c000ef46 <EnvVarContainer::getEnv(char const*)+0x3a>
c000ef41:	43                   	inc    ebx
c000ef42:	eb d1                	jmp    c000ef15 <EnvVarContainer::getEnv(char const*)+0x9>
c000ef44:	31 c0                	xor    eax,eax
c000ef46:	5b                   	pop    ebx
c000ef47:	5e                   	pop    esi
c000ef48:	5f                   	pop    edi
c000ef49:	c3                   	ret    

c000ef4a <EnvVarContainer::setEnv(char const*, char const*)>:
c000ef4a:	55                   	push   ebp
c000ef4b:	57                   	push   edi
c000ef4c:	56                   	push   esi
c000ef4d:	53                   	push   ebx
c000ef4e:	83 ec 28             	sub    esp,0x28
c000ef51:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ef55:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ef59:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ef5d:	56                   	push   esi
c000ef5e:	e8 0d 16 ff ff       	call   c0000570 <strlen>
c000ef63:	40                   	inc    eax
c000ef64:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef67:	e8 a3 16 00 00       	call   c001060f <malloc>
c000ef6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef73:	e8 f8 15 ff ff       	call   c0000570 <strlen>
c000ef78:	40                   	inc    eax
c000ef79:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef7c:	e8 8e 16 00 00       	call   c001060f <malloc>
c000ef81:	89 34 24             	mov    DWORD PTR [esp],esi
c000ef84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef88:	e8 e3 15 ff ff       	call   c0000570 <strlen>
c000ef8d:	83 c4 0c             	add    esp,0xc
c000ef90:	40                   	inc    eax
c000ef91:	50                   	push   eax
c000ef92:	6a 00                	push   0x0
c000ef94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef98:	e8 53 15 ff ff       	call   c00004f0 <memset>
c000ef9d:	89 34 24             	mov    DWORD PTR [esp],esi
c000efa0:	e8 cb 15 ff ff       	call   c0000570 <strlen>
c000efa5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000efa9:	8d 48 01             	lea    ecx,[eax+0x1]
c000efac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efb1:	89 de                	mov    esi,ebx
c000efb3:	e8 b8 15 ff ff       	call   c0000570 <strlen>
c000efb8:	83 c4 0c             	add    esp,0xc
c000efbb:	40                   	inc    eax
c000efbc:	50                   	push   eax
c000efbd:	6a 00                	push   0x0
c000efbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efc3:	e8 28 15 ff ff       	call   c00004f0 <memset>
c000efc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efcb:	e8 a0 15 ff ff       	call   c0000570 <strlen>
c000efd0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000efd4:	8d 48 01             	lea    ecx,[eax+0x1]
c000efd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efd9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efdc:	40                   	inc    eax
c000efdd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000efe0:	c1 e0 03             	shl    eax,0x3
c000efe3:	5a                   	pop    edx
c000efe4:	59                   	pop    ecx
c000efe5:	50                   	push   eax
c000efe6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efe9:	e8 0d 16 00 00       	call   c00105fb <realloc>
c000efee:	8d 74 24 18          	lea    esi,[esp+0x18]
c000eff2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000eff5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000eff8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000effc:	b9 08 00 00 00       	mov    ecx,0x8
c000f001:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f003:	83 c4 2c             	add    esp,0x2c
c000f006:	5b                   	pop    ebx
c000f007:	5e                   	pop    esi
c000f008:	5f                   	pop    edi
c000f009:	5d                   	pop    ebp
c000f00a:	c3                   	ret    
c000f00b:	90                   	nop

c000f00c <EnvVarContainer::deleteEnv(char const*)>:
c000f00c:	c3                   	ret    
c000f00d:	90                   	nop

c000f00e <EnvVarContainer::loadFrom(char const*, char const*)>:
c000f00e:	55                   	push   ebp
c000f00f:	57                   	push   edi
c000f010:	56                   	push   esi
c000f011:	53                   	push   ebx
c000f012:	81 ec 38 01 00 00    	sub    esp,0x138
c000f018:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000f01f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000f026:	68 14 01 00 00       	push   0x114
c000f02b:	e8 df 15 00 00       	call   c001060f <malloc>
c000f030:	83 c4 0c             	add    esp,0xc
c000f033:	89 c3                	mov    ebx,eax
c000f035:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f038:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f03f:	50                   	push   eax
c000f040:	e8 85 9e ff ff       	call   c0008eca <File::File(char const*, Process*)>
c000f045:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f048:	e8 5f a1 ff ff       	call   c00091ac <File::exists()>
c000f04d:	83 c4 10             	add    esp,0x10
c000f050:	84 c0                	test   al,al
c000f052:	75 31                	jne    c000f085 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000f054:	50                   	push   eax
c000f055:	50                   	push   eax
c000f056:	6a 12                	push   0x12
c000f058:	53                   	push   ebx
c000f059:	e8 8a 9e ff ff       	call   c0008ee8 <File::open(FileOpenMode)>
c000f05e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f060:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000f063:	89 34 24             	mov    DWORD PTR [esp],esi
c000f066:	e8 05 15 ff ff       	call   c0000570 <strlen>
c000f06b:	5a                   	pop    edx
c000f06c:	31 d2                	xor    edx,edx
c000f06e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f072:	51                   	push   ecx
c000f073:	56                   	push   esi
c000f074:	52                   	push   edx
c000f075:	50                   	push   eax
c000f076:	53                   	push   ebx
c000f077:	ff d7                	call   edi
c000f079:	83 c4 14             	add    esp,0x14
c000f07c:	53                   	push   ebx
c000f07d:	e8 c4 9e ff ff       	call   c0008f46 <File::close()>
c000f082:	83 c4 10             	add    esp,0x10
c000f085:	56                   	push   esi
c000f086:	31 f6                	xor    esi,esi
c000f088:	68 00 01 00 00       	push   0x100
c000f08d:	6a 00                	push   0x0
c000f08f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f093:	50                   	push   eax
c000f094:	e8 57 14 ff ff       	call   c00004f0 <memset>
c000f099:	5f                   	pop    edi
c000f09a:	58                   	pop    eax
c000f09b:	6a 01                	push   0x1
c000f09d:	53                   	push   ebx
c000f09e:	e8 45 9e ff ff       	call   c0008ee8 <File::open(FileOpenMode)>
c000f0a3:	83 c4 10             	add    esp,0x10
c000f0a6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f0ae:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f0b6:	83 ec 0c             	sub    esp,0xc
c000f0b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0bb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f0bf:	51                   	push   ecx
c000f0c0:	8d 54 24 23          	lea    edx,[esp+0x23]
c000f0c4:	52                   	push   edx
c000f0c5:	6a 00                	push   0x0
c000f0c7:	6a 01                	push   0x1
c000f0c9:	53                   	push   ebx
c000f0ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f0cd:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000f0d2:	83 c4 20             	add    esp,0x20
c000f0d5:	89 c2                	mov    edx,eax
c000f0d7:	85 c0                	test   eax,eax
c000f0d9:	0f 84 36 01 00 00    	je     c000f215 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000f0df:	83 f8 0d             	cmp    eax,0xd
c000f0e2:	0f 84 22 01 00 00    	je     c000f20a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000f0e8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f0ed:	0f 84 f0 00 00 00    	je     c000f1e3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000f0f3:	83 f8 0a             	cmp    eax,0xa
c000f0f6:	74 13                	je     c000f10b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000f0f8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f0fd:	74 0c                	je     c000f10b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000f0ff:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f105:	0f 8e f6 00 00 00    	jle    c000f201 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000f10b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f10f:	83 ec 0c             	sub    esp,0xc
c000f112:	8d 78 01             	lea    edi,[eax+0x1]
c000f115:	57                   	push   edi
c000f116:	e8 f4 14 00 00       	call   c001060f <malloc>
c000f11b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000f11f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f123:	8d 56 04             	lea    edx,[esi+0x4]
c000f126:	89 14 24             	mov    DWORD PTR [esp],edx
c000f129:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f12d:	e8 dd 14 00 00       	call   c001060f <malloc>
c000f132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f136:	83 c4 0c             	add    esp,0xc
c000f139:	57                   	push   edi
c000f13a:	6a 00                	push   0x0
c000f13c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f140:	e8 ab 13 ff ff       	call   c00004f0 <memset>
c000f145:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f149:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f14d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f151:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f153:	83 c4 0c             	add    esp,0xc
c000f156:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f15a:	52                   	push   edx
c000f15b:	6a 00                	push   0x0
c000f15d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f161:	e8 8a 13 ff ff       	call   c00004f0 <memset>
c000f166:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f16a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000f16e:	89 34 24             	mov    DWORD PTR [esp],esi
c000f171:	e8 fa 13 ff ff       	call   c0000570 <strlen>
c000f176:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000f17a:	89 c1                	mov    ecx,eax
c000f17c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f17e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f181:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000f184:	40                   	inc    eax
c000f185:	83 c4 10             	add    esp,0x10
c000f188:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f18b:	85 d2                	test   edx,edx
c000f18d:	75 0c                	jne    c000f19b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000f18f:	83 ec 0c             	sub    esp,0xc
c000f192:	6a 08                	push   0x8
c000f194:	e8 76 14 00 00       	call   c001060f <malloc>
c000f199:	eb 0c                	jmp    c000f1a7 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000f19b:	c1 e0 03             	shl    eax,0x3
c000f19e:	51                   	push   ecx
c000f19f:	51                   	push   ecx
c000f1a0:	50                   	push   eax
c000f1a1:	52                   	push   edx
c000f1a2:	e8 54 14 00 00       	call   c00105fb <realloc>
c000f1a7:	83 c4 10             	add    esp,0x10
c000f1aa:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f1ad:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f1b0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000f1b3:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f1b7:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f1bb:	b9 08 00 00 00       	mov    ecx,0x8
c000f1c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f1c2:	31 f6                	xor    esi,esi
c000f1c4:	50                   	push   eax
c000f1c5:	68 00 01 00 00       	push   0x100
c000f1ca:	6a 00                	push   0x0
c000f1cc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f1d0:	50                   	push   eax
c000f1d1:	e8 1a 13 ff ff       	call   c00004f0 <memset>
c000f1d6:	83 c4 10             	add    esp,0x10
c000f1d9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f1e1:	eb 27                	jmp    c000f20a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000f1e3:	83 f8 3d             	cmp    eax,0x3d
c000f1e6:	74 1e                	je     c000f206 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000f1e8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f1ee:	7f 07                	jg     c000f1f7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000f1f0:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000f1f4:	46                   	inc    esi
c000f1f5:	eb 13                	jmp    c000f20a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000f1f7:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000f1ff:	eb 09                	jmp    c000f20a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000f201:	83 f8 3d             	cmp    eax,0x3d
c000f204:	75 ea                	jne    c000f1f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000f206:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000f20a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f20f:	0f 85 99 fe ff ff    	jne    c000f0ae <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000f215:	83 ec 0c             	sub    esp,0xc
c000f218:	53                   	push   ebx
c000f219:	e8 28 9d ff ff       	call   c0008f46 <File::close()>
c000f21e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f220:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f223:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f226:	81 c4 3c 01 00 00    	add    esp,0x13c
c000f22c:	5b                   	pop    ebx
c000f22d:	5e                   	pop    esi
c000f22e:	5f                   	pop    edi
c000f22f:	5d                   	pop    ebp
c000f230:	c3                   	ret    
c000f231:	90                   	nop

c000f232 <EnvVarContainer::__loadSystem()>:
c000f232:	83 ec 10             	sub    esp,0x10
c000f235:	68 60 09 03 c0       	push   0xc0030960
c000f23a:	68 64 bf 02 c0       	push   0xc002bf64
c000f23f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f243:	e8 c6 fd ff ff       	call   c000f00e <EnvVarContainer::loadFrom(char const*, char const*)>
c000f248:	83 c4 1c             	add    esp,0x1c
c000f24b:	c3                   	ret    

c000f24c <EnvVarContainer::__loadUser()>:
c000f24c:	c3                   	ret    
c000f24d:	90                   	nop

c000f24e <EnvVarContainer::EnvVarContainer(Process*)>:
c000f24e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f252:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f25c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f260:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f263:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f267:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f26e:	90                   	nop
c000f26f:	c3                   	ret    

c000f270 <EnvVarContainer::~EnvVarContainer()>:
c000f270:	83 ec 0c             	sub    esp,0xc
c000f273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f277:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f27a:	85 c0                	test   eax,eax
c000f27c:	74 1d                	je     c000f29b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f282:	8b 00                	mov    eax,DWORD PTR [eax]
c000f284:	85 c0                	test   eax,eax
c000f286:	74 13                	je     c000f29b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f28c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f28f:	83 ec 0c             	sub    esp,0xc
c000f292:	50                   	push   eax
c000f293:	e8 87 13 00 00       	call   c001061f <free>
c000f298:	83 c4 10             	add    esp,0x10
c000f29b:	90                   	nop
c000f29c:	83 c4 0c             	add    esp,0xc
c000f29f:	c3                   	ret    

c000f2a0 <KeGetEnv(Process*, char const*)>:
c000f2a0:	53                   	push   ebx
c000f2a1:	83 ec 08             	sub    esp,0x8
c000f2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f2ac:	39 05 58 73 03 c0    	cmp    DWORD PTR ds:0xc0037358,eax
c000f2b2:	74 04                	je     c000f2b8 <KeGetEnv(Process*, char const*)+0x18>
c000f2b4:	85 c0                	test   eax,eax
c000f2b6:	75 0b                	jne    c000f2c3 <KeGetEnv(Process*, char const*)+0x23>
c000f2b8:	a1 10 71 03 c0       	mov    eax,ds:0xc0037110
c000f2bd:	85 c0                	test   eax,eax
c000f2bf:	75 19                	jne    c000f2da <KeGetEnv(Process*, char const*)+0x3a>
c000f2c1:	eb 27                	jmp    c000f2ea <KeGetEnv(Process*, char const*)+0x4a>
c000f2c3:	52                   	push   edx
c000f2c4:	52                   	push   edx
c000f2c5:	53                   	push   ebx
c000f2c6:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000f2cc:	e8 3b fc ff ff       	call   c000ef0c <EnvVarContainer::getEnv(char const*)>
c000f2d1:	83 c4 10             	add    esp,0x10
c000f2d4:	85 c0                	test   eax,eax
c000f2d6:	75 28                	jne    c000f300 <KeGetEnv(Process*, char const*)+0x60>
c000f2d8:	eb de                	jmp    c000f2b8 <KeGetEnv(Process*, char const*)+0x18>
c000f2da:	52                   	push   edx
c000f2db:	52                   	push   edx
c000f2dc:	53                   	push   ebx
c000f2dd:	50                   	push   eax
c000f2de:	e8 29 fc ff ff       	call   c000ef0c <EnvVarContainer::getEnv(char const*)>
c000f2e3:	83 c4 10             	add    esp,0x10
c000f2e6:	85 c0                	test   eax,eax
c000f2e8:	75 16                	jne    c000f300 <KeGetEnv(Process*, char const*)+0x60>
c000f2ea:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000f2ee:	a1 14 71 03 c0       	mov    eax,ds:0xc0037114
c000f2f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f2f7:	83 c4 08             	add    esp,0x8
c000f2fa:	5b                   	pop    ebx
c000f2fb:	e9 0c fc ff ff       	jmp    c000ef0c <EnvVarContainer::getEnv(char const*)>
c000f300:	83 c4 08             	add    esp,0x8
c000f303:	5b                   	pop    ebx
c000f304:	c3                   	ret    

c000f305 <KeSetEnvSystem(char const*, char const*)>:
c000f305:	83 ec 10             	sub    esp,0x10
c000f308:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f30c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f310:	ff 35 14 71 03 c0    	push   DWORD PTR ds:0xc0037114
c000f316:	e8 2f fc ff ff       	call   c000ef4a <EnvVarContainer::setEnv(char const*, char const*)>
c000f31b:	83 c4 1c             	add    esp,0x1c
c000f31e:	c3                   	ret    

c000f31f <KeSetEnvUser(char const*, char const*)>:
c000f31f:	a1 10 71 03 c0       	mov    eax,ds:0xc0037110
c000f324:	85 c0                	test   eax,eax
c000f326:	74 15                	je     c000f33d <KeSetEnvUser(char const*, char const*)+0x1e>
c000f328:	83 ec 10             	sub    esp,0x10
c000f32b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f32f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f333:	50                   	push   eax
c000f334:	e8 11 fc ff ff       	call   c000ef4a <EnvVarContainer::setEnv(char const*, char const*)>
c000f339:	83 c4 1c             	add    esp,0x1c
c000f33c:	c3                   	ret    
c000f33d:	c3                   	ret    

c000f33e <KeSetEnvProcess(Process*, char const*, char const*)>:
c000f33e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f342:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000f348:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f34c:	e9 f9 fb ff ff       	jmp    c000ef4a <EnvVarContainer::setEnv(char const*, char const*)>

c000f351 <KeDeleteEnvSystem(char const*)>:
c000f351:	c3                   	ret    

c000f352 <KeDeleteEnvUser(char const*)>:
c000f352:	c3                   	ret    

c000f353 <KeDeleteEnvProcess(Process*, char const*)>:
c000f353:	c3                   	ret    

c000f354 <KeNewProcessEnv(Process*)>:
c000f354:	83 ec 28             	sub    esp,0x28
c000f357:	6a 0c                	push   0xc
c000f359:	e8 b1 12 00 00       	call   c001060f <malloc>
c000f35e:	5a                   	pop    edx
c000f35f:	59                   	pop    ecx
c000f360:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f364:	50                   	push   eax
c000f365:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f369:	e8 e0 fe ff ff       	call   c000f24e <EnvVarContainer::EnvVarContainer(Process*)>
c000f36e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f372:	83 c4 2c             	add    esp,0x2c
c000f375:	c3                   	ret    

c000f376 <KeCopyProcessEnv(Process*, Process*)>:
c000f376:	57                   	push   edi
c000f377:	56                   	push   esi
c000f378:	53                   	push   ebx
c000f379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f37d:	83 ec 0c             	sub    esp,0xc
c000f380:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000f386:	6a 0c                	push   0xc
c000f388:	e8 82 12 00 00       	call   c001060f <malloc>
c000f38d:	89 c3                	mov    ebx,eax
c000f38f:	58                   	pop    eax
c000f390:	5a                   	pop    edx
c000f391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f395:	53                   	push   ebx
c000f396:	e8 b3 fe ff ff       	call   c000f24e <EnvVarContainer::EnvVarContainer(Process*)>
c000f39b:	8b 07                	mov    eax,DWORD PTR [edi]
c000f39d:	89 03                	mov    DWORD PTR [ebx],eax
c000f39f:	c1 e0 03             	shl    eax,0x3
c000f3a2:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3a5:	e8 65 12 00 00       	call   c001060f <malloc>
c000f3aa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f3ad:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f3af:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f3b2:	c1 e1 03             	shl    ecx,0x3
c000f3b5:	89 c7                	mov    edi,eax
c000f3b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3b9:	83 c4 10             	add    esp,0x10
c000f3bc:	89 d8                	mov    eax,ebx
c000f3be:	5b                   	pop    ebx
c000f3bf:	5e                   	pop    esi
c000f3c0:	5f                   	pop    edi
c000f3c1:	c3                   	ret    

c000f3c2 <KeLoadSystemEnv()>:
c000f3c2:	53                   	push   ebx
c000f3c3:	83 ec 14             	sub    esp,0x14
c000f3c6:	6a 0c                	push   0xc
c000f3c8:	e8 42 12 00 00       	call   c001060f <malloc>
c000f3cd:	89 c3                	mov    ebx,eax
c000f3cf:	58                   	pop    eax
c000f3d0:	5a                   	pop    edx
c000f3d1:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 71 fe ff ff       	call   c000f24e <EnvVarContainer::EnvVarContainer(Process*)>
c000f3dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3e0:	89 1d 14 71 03 c0    	mov    DWORD PTR ds:0xc0037114,ebx
c000f3e6:	e8 47 fe ff ff       	call   c000f232 <EnvVarContainer::__loadSystem()>
c000f3eb:	83 c4 18             	add    esp,0x18
c000f3ee:	5b                   	pop    ebx
c000f3ef:	c3                   	ret    

c000f3f0 <KeLoadUserEnv()>:
c000f3f0:	53                   	push   ebx
c000f3f1:	83 ec 14             	sub    esp,0x14
c000f3f4:	6a 0c                	push   0xc
c000f3f6:	e8 14 12 00 00       	call   c001060f <malloc>
c000f3fb:	89 c3                	mov    ebx,eax
c000f3fd:	58                   	pop    eax
c000f3fe:	5a                   	pop    edx
c000f3ff:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c000f405:	53                   	push   ebx
c000f406:	e8 43 fe ff ff       	call   c000f24e <EnvVarContainer::EnvVarContainer(Process*)>
c000f40b:	89 1d 10 71 03 c0    	mov    DWORD PTR ds:0xc0037110,ebx
c000f411:	83 c4 18             	add    esp,0x18
c000f414:	5b                   	pop    ebx
c000f415:	c3                   	ret    

c000f416 <KeFlushEnv()>:
c000f416:	c3                   	ret    

c000f417 <KeGetProcessTotalEnvCount(Process*)>:
c000f417:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f41b:	8b 15 10 71 03 c0    	mov    edx,DWORD PTR ds:0xc0037110
c000f421:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000f427:	a1 14 71 03 c0       	mov    eax,ds:0xc0037114
c000f42c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f42e:	03 01                	add    eax,DWORD PTR [ecx]
c000f430:	85 d2                	test   edx,edx
c000f432:	74 02                	je     c000f436 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000f434:	03 02                	add    eax,DWORD PTR [edx]
c000f436:	c3                   	ret    

c000f437 <KeGetProcessEnvPair(Process*, int)>:
c000f437:	57                   	push   edi
c000f438:	56                   	push   esi
c000f439:	8b 35 10 71 03 c0    	mov    esi,DWORD PTR ds:0xc0037110
c000f43f:	53                   	push   ebx
c000f440:	85 f6                	test   esi,esi
c000f442:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f446:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f44a:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000f450:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f454:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f456:	75 16                	jne    c000f46e <KeGetProcessEnvPair(Process*, int)+0x37>
c000f458:	39 c2                	cmp    edx,eax
c000f45a:	7c 16                	jl     c000f472 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000f45c:	8b 0d 14 71 03 c0    	mov    ecx,DWORD PTR ds:0xc0037114
c000f462:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f464:	01 c6                	add    esi,eax
c000f466:	39 d6                	cmp    esi,edx
c000f468:	7e 3c                	jle    c000f4a6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000f46a:	29 c2                	sub    edx,eax
c000f46c:	eb 04                	jmp    c000f472 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000f46e:	39 c2                	cmp    edx,eax
c000f470:	7d 05                	jge    c000f477 <KeGetProcessEnvPair(Process*, int)+0x40>
c000f472:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f475:	eb 20                	jmp    c000f497 <KeGetProcessEnvPair(Process*, int)+0x60>
c000f477:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f479:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f47c:	39 d1                	cmp    ecx,edx
c000f47e:	7e 04                	jle    c000f484 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000f480:	29 c2                	sub    edx,eax
c000f482:	eb 10                	jmp    c000f494 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000f484:	8b 35 14 71 03 c0    	mov    esi,DWORD PTR ds:0xc0037114
c000f48a:	03 0e                	add    ecx,DWORD PTR [esi]
c000f48c:	39 d1                	cmp    ecx,edx
c000f48e:	7e 16                	jle    c000f4a6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000f490:	29 c2                	sub    edx,eax
c000f492:	29 fa                	sub    edx,edi
c000f494:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f497:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f49a:	8b 02                	mov    eax,DWORD PTR [edx]
c000f49c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f49f:	89 03                	mov    DWORD PTR [ebx],eax
c000f4a1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f4a4:	eb 1d                	jmp    c000f4c3 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000f4a6:	83 ec 0c             	sub    esp,0xc
c000f4a9:	68 86 bf 02 c0       	push   0xc002bf86
c000f4ae:	e8 b1 15 00 00       	call   c0010a64 <KePanic(char const*)>
c000f4b3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f4b9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f4c0:	83 c4 10             	add    esp,0x10
c000f4c3:	89 d8                	mov    eax,ebx
c000f4c5:	5b                   	pop    ebx
c000f4c6:	5e                   	pop    esi
c000f4c7:	5f                   	pop    edi
c000f4c8:	c2 04 00             	ret    0x4
c000f4cb:	90                   	nop

c000f4cc <KeDisplayProgramFault(char const*)>:
c000f4cc:	83 ec 0c             	sub    esp,0xc
c000f4cf:	83 ec 0c             	sub    esp,0xc
c000f4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d6:	e8 a1 7a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000f4db:	83 c4 10             	add    esp,0x10
c000f4de:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000f4e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f4e8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000f4ee:	85 c0                	test   eax,eax
c000f4f0:	74 22                	je     c000f514 <KeDisplayProgramFault(char const*)+0x48>
c000f4f2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000f4f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f4fc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000f502:	6a 04                	push   0x4
c000f504:	6a 0f                	push   0xf
c000f506:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f50a:	50                   	push   eax
c000f50b:	e8 32 3f 00 00       	call   c0013442 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f510:	83 c4 10             	add    esp,0x10
c000f513:	90                   	nop
c000f514:	90                   	nop
c000f515:	83 c4 0c             	add    esp,0xc
c000f518:	c3                   	ret    
c000f519:	8d 76 00             	lea    esi,[esi+0x0]

c000f51c <KeGeneralProtectionFault(void*, void*)>:
c000f51c:	83 ec 0c             	sub    esp,0xc
c000f51f:	83 ec 08             	sub    esp,0x8
c000f522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f52a:	e8 54 b9 00 00       	call   c001ae83 <HalHandleGeneralProtectionFault(void*, void*)>
c000f52f:	83 c4 10             	add    esp,0x10
c000f532:	0f b6 c0             	movzx  eax,al
c000f535:	85 c0                	test   eax,eax
c000f537:	75 2f                	jne    c000f568 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000f539:	83 ec 0c             	sub    esp,0xc
c000f53c:	68 a0 bf 02 c0       	push   0xc002bfa0
c000f541:	e8 86 ff ff ff       	call   c000f4cc <KeDisplayProgramFault(char const*)>
c000f546:	83 c4 10             	add    esp,0x10
c000f549:	83 ec 0c             	sub    esp,0xc
c000f54c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f550:	e8 a7 ba 00 00       	call   c001affc <HalDisplayDebugInfo(void*)>
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	83 ec 0c             	sub    esp,0xc
c000f55b:	6a 7e                	push   0x7e
c000f55d:	e8 9a 88 00 00       	call   c0017dfc <KeTerminateCurrentThread(int)>
c000f562:	83 c4 10             	add    esp,0x10
c000f565:	eb 05                	jmp    c000f56c <KeGeneralProtectionFault(void*, void*)+0x50>
c000f567:	90                   	nop
c000f568:	90                   	nop
c000f569:	8d 76 00             	lea    esi,[esi+0x0]
c000f56c:	83 c4 0c             	add    esp,0xc
c000f56f:	c3                   	ret    

c000f570 <KePageFault(void*, void*)>:
c000f570:	83 ec 0c             	sub    esp,0xc
c000f573:	83 ec 08             	sub    esp,0x8
c000f576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f57e:	e8 08 ba 00 00       	call   c001af8b <HalHandlePageFault(void*, void*)>
c000f583:	83 c4 10             	add    esp,0x10
c000f586:	0f b6 c0             	movzx  eax,al
c000f589:	85 c0                	test   eax,eax
c000f58b:	75 2f                	jne    c000f5bc <KePageFault(void*, void*)+0x4c>
c000f58d:	83 ec 0c             	sub    esp,0xc
c000f590:	68 b9 bf 02 c0       	push   0xc002bfb9
c000f595:	e8 32 ff ff ff       	call   c000f4cc <KeDisplayProgramFault(char const*)>
c000f59a:	83 c4 10             	add    esp,0x10
c000f59d:	83 ec 0c             	sub    esp,0xc
c000f5a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a4:	e8 53 ba 00 00       	call   c001affc <HalDisplayDebugInfo(void*)>
c000f5a9:	83 c4 10             	add    esp,0x10
c000f5ac:	83 ec 0c             	sub    esp,0xc
c000f5af:	6a 7f                	push   0x7f
c000f5b1:	e8 46 88 00 00       	call   c0017dfc <KeTerminateCurrentThread(int)>
c000f5b6:	83 c4 10             	add    esp,0x10
c000f5b9:	eb 05                	jmp    c000f5c0 <KePageFault(void*, void*)+0x50>
c000f5bb:	90                   	nop
c000f5bc:	90                   	nop
c000f5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f5c0:	83 c4 0c             	add    esp,0xc
c000f5c3:	c3                   	ret    

c000f5c4 <KeOpcodeFault(void*, void*)>:
c000f5c4:	83 ec 0c             	sub    esp,0xc
c000f5c7:	83 ec 08             	sub    esp,0x8
c000f5ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5d2:	e8 e3 b9 00 00       	call   c001afba <HalHandleOpcodeFault(void*, void*)>
c000f5d7:	83 c4 10             	add    esp,0x10
c000f5da:	0f b6 c0             	movzx  eax,al
c000f5dd:	85 c0                	test   eax,eax
c000f5df:	75 2f                	jne    c000f610 <KeOpcodeFault(void*, void*)+0x4c>
c000f5e1:	83 ec 0c             	sub    esp,0xc
c000f5e4:	68 c4 bf 02 c0       	push   0xc002bfc4
c000f5e9:	e8 de fe ff ff       	call   c000f4cc <KeDisplayProgramFault(char const*)>
c000f5ee:	83 c4 10             	add    esp,0x10
c000f5f1:	83 ec 0c             	sub    esp,0xc
c000f5f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5f8:	e8 ff b9 00 00       	call   c001affc <HalDisplayDebugInfo(void*)>
c000f5fd:	83 c4 10             	add    esp,0x10
c000f600:	83 ec 0c             	sub    esp,0xc
c000f603:	6a 7c                	push   0x7c
c000f605:	e8 f2 87 00 00       	call   c0017dfc <KeTerminateCurrentThread(int)>
c000f60a:	83 c4 10             	add    esp,0x10
c000f60d:	eb 05                	jmp    c000f614 <KeOpcodeFault(void*, void*)+0x50>
c000f60f:	90                   	nop
c000f610:	90                   	nop
c000f611:	8d 76 00             	lea    esi,[esi+0x0]
c000f614:	83 c4 0c             	add    esp,0xc
c000f617:	c3                   	ret    

c000f618 <KeOtherFault(void*, void*)>:
c000f618:	83 ec 0c             	sub    esp,0xc
c000f61b:	83 ec 0c             	sub    esp,0xc
c000f61e:	68 e0 bf 02 c0       	push   0xc002bfe0
c000f623:	e8 a4 fe ff ff       	call   c000f4cc <KeDisplayProgramFault(char const*)>
c000f628:	83 c4 10             	add    esp,0x10
c000f62b:	83 ec 0c             	sub    esp,0xc
c000f62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f632:	e8 c5 b9 00 00       	call   c001affc <HalDisplayDebugInfo(void*)>
c000f637:	83 c4 10             	add    esp,0x10
c000f63a:	83 ec 0c             	sub    esp,0xc
c000f63d:	6a 7d                	push   0x7d
c000f63f:	e8 b8 87 00 00       	call   c0017dfc <KeTerminateCurrentThread(int)>
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	90                   	nop
c000f648:	83 c4 0c             	add    esp,0xc
c000f64b:	c3                   	ret    

c000f64c <KeNonMaskableInterrupt(void*, void*)>:
c000f64c:	83 ec 0c             	sub    esp,0xc
c000f64f:	e8 36 bd 00 00       	call   c001b38a <HalReceivedNMI()>
c000f654:	90                   	nop
c000f655:	83 c4 0c             	add    esp,0xc
c000f658:	c3                   	ret    
c000f659:	8d 76 00             	lea    esi,[esi+0x0]

c000f65c <KeDoubleFault(void*, void*)>:
c000f65c:	83 ec 0c             	sub    esp,0xc
c000f65f:	83 ec 0c             	sub    esp,0xc
c000f662:	68 d1 bf 02 c0       	push   0xc002bfd1
c000f667:	e8 f8 13 00 00       	call   c0010a64 <KePanic(char const*)>
c000f66c:	83 c4 10             	add    esp,0x10
c000f66f:	90                   	nop
c000f670:	83 c4 0c             	add    esp,0xc
c000f673:	c3                   	ret    

c000f674 <GDTEntry::setBase(unsigned int)>:
c000f674:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f678:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f67c:	89 c1                	mov    ecx,eax
c000f67e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f682:	c1 e9 10             	shr    ecx,0x10
c000f685:	c1 e8 18             	shr    eax,0x18
c000f688:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f68b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f68e:	c3                   	ret    
c000f68f:	90                   	nop

c000f690 <GDTEntry::setLimit(unsigned int)>:
c000f690:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f694:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f698:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f69b:	66 89 01             	mov    WORD PTR [ecx],ax
c000f69e:	83 e2 f0             	and    edx,0xfffffff0
c000f6a1:	c1 e8 10             	shr    eax,0x10
c000f6a4:	83 e0 0f             	and    eax,0xf
c000f6a7:	09 d0                	or     eax,edx
c000f6a9:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f6ac:	c3                   	ret    
c000f6ad:	90                   	nop

c000f6ae <GDT::GDT()>:
c000f6ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f6b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f6bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f6c2:	90                   	nop
c000f6c3:	c3                   	ret    

c000f6c4 <GDT::addEntry(GDTEntry)>:
c000f6c4:	53                   	push   ebx
c000f6c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f6c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f6cd:	8b 02                	mov    eax,DWORD PTR [edx]
c000f6cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6d3:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f6d7:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f6db:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6de:	c1 e0 03             	shl    eax,0x3
c000f6e1:	89 0a                	mov    DWORD PTR [edx],ecx
c000f6e3:	5b                   	pop    ebx
c000f6e4:	c3                   	ret    
c000f6e5:	90                   	nop

c000f6e6 <GDT::getNumberOfEntries()>:
c000f6e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f6ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6ec:	c3                   	ret    
c000f6ed:	90                   	nop

c000f6ee <GDT::flush()>:
c000f6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f6f2:	8b 10                	mov    edx,DWORD PTR [eax]
c000f6f4:	83 c0 04             	add    eax,0x4
c000f6f7:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f6fe:	a3 1a 71 03 c0       	mov    ds:0xc003711a,eax
c000f703:	66 89 15 18 71 03 c0 	mov    WORD PTR ds:0xc0037118,dx
c000f70a:	e9 4b 0c ff ff       	jmp    c000035a <loadGDT>
c000f70f:	90                   	nop

c000f710 <GDT::setup()>:
c000f710:	57                   	push   edi
c000f711:	56                   	push   esi
c000f712:	53                   	push   ebx
c000f713:	83 ec 30             	sub    esp,0x30
c000f716:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000f71a:	6a 00                	push   0x0
c000f71c:	8d 74 24 14          	lea    esi,[esp+0x14]
c000f720:	56                   	push   esi
c000f721:	e8 4e ff ff ff       	call   c000f674 <GDTEntry::setBase(unsigned int)>
c000f726:	6a 00                	push   0x0
c000f728:	56                   	push   esi
c000f729:	e8 62 ff ff ff       	call   c000f690 <GDTEntry::setLimit(unsigned int)>
c000f72e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000f736:	6a 00                	push   0x0
c000f738:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f73c:	56                   	push   esi
c000f73d:	e8 32 ff ff ff       	call   c000f674 <GDTEntry::setBase(unsigned int)>
c000f742:	68 ff ff ff 00       	push   0xffffff
c000f747:	56                   	push   esi
c000f748:	e8 43 ff ff ff       	call   c000f690 <GDTEntry::setLimit(unsigned int)>
c000f74d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f751:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f755:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f759:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000f75d:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f762:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f767:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f76b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f76f:	89 f8                	mov    eax,edi
c000f771:	89 fa                	mov    edx,edi
c000f773:	80 e4 f7             	and    ah,0xf7
c000f776:	80 ce 60             	or     dh,0x60
c000f779:	89 c7                	mov    edi,eax
c000f77b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000f77f:	80 cc 60             	or     ah,0x60
c000f782:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f786:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f78a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f78e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f792:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f796:	83 c4 20             	add    esp,0x20
c000f799:	6a 00                	push   0x0
c000f79b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f79f:	50                   	push   eax
c000f7a0:	e8 cf fe ff ff       	call   c000f674 <GDTEntry::setBase(unsigned int)>
c000f7a5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000f7a9:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000f7ad:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000f7b1:	83 e0 3f             	and    eax,0x3f
c000f7b4:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000f7b8:	6a 00                	push   0x0
c000f7ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c000f7be:	50                   	push   eax
c000f7bf:	e8 b0 fe ff ff       	call   c000f674 <GDTEntry::setBase(unsigned int)>
c000f7c4:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000f7c8:	83 e0 3f             	and    eax,0x3f
c000f7cb:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000f7cf:	83 c4 0c             	add    esp,0xc
c000f7d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7da:	53                   	push   ebx
c000f7db:	e8 e4 fe ff ff       	call   c000f6c4 <GDT::addEntry(GDTEntry)>
c000f7e0:	83 c4 0c             	add    esp,0xc
c000f7e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f7e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f7eb:	53                   	push   ebx
c000f7ec:	e8 d3 fe ff ff       	call   c000f6c4 <GDT::addEntry(GDTEntry)>
c000f7f1:	83 c4 0c             	add    esp,0xc
c000f7f4:	57                   	push   edi
c000f7f5:	56                   	push   esi
c000f7f6:	53                   	push   ebx
c000f7f7:	e8 c8 fe ff ff       	call   c000f6c4 <GDT::addEntry(GDTEntry)>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f803:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f807:	53                   	push   ebx
c000f808:	e8 b7 fe ff ff       	call   c000f6c4 <GDT::addEntry(GDTEntry)>
c000f80d:	83 c4 0c             	add    esp,0xc
c000f810:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f814:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f818:	53                   	push   ebx
c000f819:	e8 a6 fe ff ff       	call   c000f6c4 <GDT::addEntry(GDTEntry)>
c000f81e:	83 c4 0c             	add    esp,0xc
c000f821:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f825:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f829:	53                   	push   ebx
c000f82a:	e8 95 fe ff ff       	call   c000f6c4 <GDT::addEntry(GDTEntry)>
c000f82f:	83 c4 0c             	add    esp,0xc
c000f832:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f836:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f83a:	53                   	push   ebx
c000f83b:	e8 84 fe ff ff       	call   c000f6c4 <GDT::addEntry(GDTEntry)>
c000f840:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f843:	e8 a6 fe ff ff       	call   c000f6ee <GDT::flush()>
c000f848:	83 c4 40             	add    esp,0x40
c000f84b:	5b                   	pop    ebx
c000f84c:	5e                   	pop    esi
c000f84d:	5f                   	pop    edi
c000f84e:	c3                   	ret    

c000f84f <idleFunction(void*)>:
c000f84f:	83 ec 0c             	sub    esp,0xc
c000f852:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c000f859:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c000f860:	75 01                	jne    c000f863 <idleFunction(void*)+0x14>
c000f862:	fb                   	sti    
c000f863:	e8 bd bb 00 00       	call   c001b425 <HalSystemIdle()>
c000f868:	e8 15 a2 01 00       	call   c0029a82 <idleCommon()>
c000f86d:	eb f4                	jmp    c000f863 <idleFunction(void*)+0x14>
c000f86f:	90                   	nop

c000f870 <IDTEntry::IDTEntry(bool)>:
c000f870:	53                   	push   ebx
c000f871:	83 ec 04             	sub    esp,0x4
c000f874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f878:	88 04 24             	mov    BYTE PTR [esp],al
c000f87b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f87f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f889:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f88d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f891:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f894:	83 e2 f0             	and    edx,0xfffffff0
c000f897:	83 ca 0e             	or     edx,0xe
c000f89a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f89d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8a1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f8a4:	83 e2 ef             	and    edx,0xffffffef
c000f8a7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f8aa:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000f8ae:	85 c0                	test   eax,eax
c000f8b0:	74 06                	je     c000f8b8 <IDTEntry::IDTEntry(bool)+0x48>
c000f8b2:	b2 03                	mov    dl,0x3
c000f8b4:	eb 06                	jmp    c000f8bc <IDTEntry::IDTEntry(bool)+0x4c>
c000f8b6:	66 90                	xchg   ax,ax
c000f8b8:	b2 00                	mov    dl,0x0
c000f8ba:	66 90                	xchg   ax,ax
c000f8bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8c0:	83 e2 03             	and    edx,0x3
c000f8c3:	89 d3                	mov    ebx,edx
c000f8c5:	c1 e3 05             	shl    ebx,0x5
c000f8c8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f8cb:	83 e2 9f             	and    edx,0xffffff9f
c000f8ce:	88 d1                	mov    cl,dl
c000f8d0:	88 da                	mov    dl,bl
c000f8d2:	09 ca                	or     edx,ecx
c000f8d4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f8d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f8de:	83 ca 80             	or     edx,0xffffff80
c000f8e1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f8e4:	90                   	nop
c000f8e5:	83 c4 04             	add    esp,0x4
c000f8e8:	5b                   	pop    ebx
c000f8e9:	c3                   	ret    

c000f8ea <IDTEntry::setOffset(unsigned int)>:
c000f8ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f8ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f8f2:	66 89 02             	mov    WORD PTR [edx],ax
c000f8f5:	c1 e8 10             	shr    eax,0x10
c000f8f8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f8fc:	c3                   	ret    
c000f8fd:	90                   	nop
c000f8fe:	66 90                	xchg   ax,ax

c000f900 <IDT::IDT()>:
c000f900:	90                   	nop
c000f901:	c3                   	ret    

c000f902 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f906:	83 c0 30             	add    eax,0x30
c000f909:	c3                   	ret    

c000f90a <IDT::addEntry(IDTEntry, int)>:
c000f90a:	53                   	push   ebx
c000f90b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f90f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f913:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f917:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f91b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f91e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f922:	5b                   	pop    ebx
c000f923:	c3                   	ret    

c000f924 <IDT::addEntry(int, void (*)(), bool)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f92d:	50                   	push   eax
c000f92e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f932:	53                   	push   ebx
c000f933:	e8 38 ff ff ff       	call   c000f870 <IDTEntry::IDTEntry(bool)>
c000f938:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f93c:	53                   	push   ebx
c000f93d:	e8 a8 ff ff ff       	call   c000f8ea <IDTEntry::setOffset(unsigned int)>
c000f942:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f946:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f94a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f94e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f952:	e8 b3 ff ff ff       	call   c000f90a <IDT::addEntry(IDTEntry, int)>
c000f957:	83 c4 30             	add    esp,0x30
c000f95a:	5b                   	pop    ebx
c000f95b:	c3                   	ret    

c000f95c <IDT::flush()>:
c000f95c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f960:	66 c7 05 20 71 03 c0 ff 07 	mov    WORD PTR ds:0xc0037120,0x7ff
c000f969:	a3 22 71 03 c0       	mov    ds:0xc0037122,eax
c000f96e:	0f 01 1d 20 71 03 c0 	lidtd  ds:0xc0037120
c000f975:	c3                   	ret    

c000f976 <IDT::setup()>:
c000f976:	57                   	push   edi
c000f977:	56                   	push   esi
c000f978:	53                   	push   ebx
c000f979:	83 ec 10             	sub    esp,0x10
c000f97c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f980:	6a 00                	push   0x0
c000f982:	68 00 45 02 c0       	push   0xc0024500
c000f987:	6a 00                	push   0x0
c000f989:	53                   	push   ebx
c000f98a:	e8 95 ff ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000f98f:	6a 00                	push   0x0
c000f991:	68 10 45 02 c0       	push   0xc0024510
c000f996:	6a 01                	push   0x1
c000f998:	53                   	push   ebx
c000f999:	e8 86 ff ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000f99e:	83 c4 20             	add    esp,0x20
c000f9a1:	6a 00                	push   0x0
c000f9a3:	68 1a 45 02 c0       	push   0xc002451a
c000f9a8:	6a 02                	push   0x2
c000f9aa:	53                   	push   ebx
c000f9ab:	e8 74 ff ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000f9b0:	6a 00                	push   0x0
c000f9b2:	68 24 45 02 c0       	push   0xc0024524
c000f9b7:	6a 03                	push   0x3
c000f9b9:	53                   	push   ebx
c000f9ba:	e8 65 ff ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000f9bf:	83 c4 20             	add    esp,0x20
c000f9c2:	6a 00                	push   0x0
c000f9c4:	68 2e 45 02 c0       	push   0xc002452e
c000f9c9:	6a 04                	push   0x4
c000f9cb:	53                   	push   ebx
c000f9cc:	e8 53 ff ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000f9d1:	6a 00                	push   0x0
c000f9d3:	68 38 45 02 c0       	push   0xc0024538
c000f9d8:	6a 05                	push   0x5
c000f9da:	53                   	push   ebx
c000f9db:	e8 44 ff ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000f9e0:	83 c4 20             	add    esp,0x20
c000f9e3:	6a 00                	push   0x0
c000f9e5:	68 42 45 02 c0       	push   0xc0024542
c000f9ea:	6a 06                	push   0x6
c000f9ec:	53                   	push   ebx
c000f9ed:	e8 32 ff ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000f9f2:	6a 00                	push   0x0
c000f9f4:	68 4c 45 02 c0       	push   0xc002454c
c000f9f9:	6a 07                	push   0x7
c000f9fb:	53                   	push   ebx
c000f9fc:	e8 23 ff ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fa01:	83 c4 20             	add    esp,0x20
c000fa04:	6a 00                	push   0x0
c000fa06:	68 56 45 02 c0       	push   0xc0024556
c000fa0b:	6a 08                	push   0x8
c000fa0d:	53                   	push   ebx
c000fa0e:	e8 11 ff ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fa13:	6a 00                	push   0x0
c000fa15:	68 5e 45 02 c0       	push   0xc002455e
c000fa1a:	6a 09                	push   0x9
c000fa1c:	53                   	push   ebx
c000fa1d:	e8 02 ff ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fa22:	83 c4 20             	add    esp,0x20
c000fa25:	6a 00                	push   0x0
c000fa27:	68 68 45 02 c0       	push   0xc0024568
c000fa2c:	6a 0a                	push   0xa
c000fa2e:	53                   	push   ebx
c000fa2f:	e8 f0 fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fa34:	6a 00                	push   0x0
c000fa36:	68 70 45 02 c0       	push   0xc0024570
c000fa3b:	6a 0b                	push   0xb
c000fa3d:	53                   	push   ebx
c000fa3e:	e8 e1 fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fa43:	83 c4 20             	add    esp,0x20
c000fa46:	6a 00                	push   0x0
c000fa48:	68 78 45 02 c0       	push   0xc0024578
c000fa4d:	6a 0c                	push   0xc
c000fa4f:	53                   	push   ebx
c000fa50:	e8 cf fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fa55:	6a 00                	push   0x0
c000fa57:	68 80 45 02 c0       	push   0xc0024580
c000fa5c:	6a 0d                	push   0xd
c000fa5e:	53                   	push   ebx
c000fa5f:	e8 c0 fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fa64:	83 c4 20             	add    esp,0x20
c000fa67:	6a 00                	push   0x0
c000fa69:	68 9a 45 02 c0       	push   0xc002459a
c000fa6e:	6a 0e                	push   0xe
c000fa70:	53                   	push   ebx
c000fa71:	e8 ae fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fa76:	6a 00                	push   0x0
c000fa78:	68 a2 45 02 c0       	push   0xc00245a2
c000fa7d:	6a 0f                	push   0xf
c000fa7f:	53                   	push   ebx
c000fa80:	e8 9f fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fa85:	83 c4 20             	add    esp,0x20
c000fa88:	6a 00                	push   0x0
c000fa8a:	68 ac 45 02 c0       	push   0xc00245ac
c000fa8f:	6a 10                	push   0x10
c000fa91:	53                   	push   ebx
c000fa92:	e8 8d fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fa97:	6a 00                	push   0x0
c000fa99:	68 b6 45 02 c0       	push   0xc00245b6
c000fa9e:	6a 11                	push   0x11
c000faa0:	53                   	push   ebx
c000faa1:	e8 7e fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000faa6:	83 c4 20             	add    esp,0x20
c000faa9:	6a 00                	push   0x0
c000faab:	68 c0 45 02 c0       	push   0xc00245c0
c000fab0:	6a 12                	push   0x12
c000fab2:	53                   	push   ebx
c000fab3:	e8 6c fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fab8:	6a 01                	push   0x1
c000faba:	68 5a 46 02 c0       	push   0xc002465a
c000fabf:	6a 60                	push   0x60
c000fac1:	53                   	push   ebx
c000fac2:	e8 5d fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fac7:	83 c4 20             	add    esp,0x20
c000faca:	6a 00                	push   0x0
c000facc:	68 61 46 02 c0       	push   0xc0024661
c000fad1:	6a 20                	push   0x20
c000fad3:	53                   	push   ebx
c000fad4:	e8 4b fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fad9:	6a 00                	push   0x0
c000fadb:	68 4c 46 02 c0       	push   0xc002464c
c000fae0:	6a 21                	push   0x21
c000fae2:	53                   	push   ebx
c000fae3:	e8 3c fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fae8:	83 c4 20             	add    esp,0x20
c000faeb:	6a 00                	push   0x0
c000faed:	68 53 46 02 c0       	push   0xc0024653
c000faf2:	6a 22                	push   0x22
c000faf4:	53                   	push   ebx
c000faf5:	e8 2a fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fafa:	6a 00                	push   0x0
c000fafc:	68 ca 45 02 c0       	push   0xc00245ca
c000fb01:	6a 23                	push   0x23
c000fb03:	53                   	push   ebx
c000fb04:	e8 1b fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fb09:	83 c4 20             	add    esp,0x20
c000fb0c:	6a 00                	push   0x0
c000fb0e:	68 d4 45 02 c0       	push   0xc00245d4
c000fb13:	6a 24                	push   0x24
c000fb15:	53                   	push   ebx
c000fb16:	e8 09 fe ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fb1b:	6a 00                	push   0x0
c000fb1d:	68 de 45 02 c0       	push   0xc00245de
c000fb22:	6a 25                	push   0x25
c000fb24:	53                   	push   ebx
c000fb25:	e8 fa fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fb2a:	83 c4 20             	add    esp,0x20
c000fb2d:	6a 00                	push   0x0
c000fb2f:	68 e8 45 02 c0       	push   0xc00245e8
c000fb34:	6a 26                	push   0x26
c000fb36:	53                   	push   ebx
c000fb37:	e8 e8 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fb3c:	6a 00                	push   0x0
c000fb3e:	68 f2 45 02 c0       	push   0xc00245f2
c000fb43:	6a 27                	push   0x27
c000fb45:	53                   	push   ebx
c000fb46:	e8 d9 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fb4b:	83 c4 20             	add    esp,0x20
c000fb4e:	6a 00                	push   0x0
c000fb50:	68 fc 45 02 c0       	push   0xc00245fc
c000fb55:	6a 28                	push   0x28
c000fb57:	53                   	push   ebx
c000fb58:	e8 c7 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fb5d:	6a 00                	push   0x0
c000fb5f:	68 06 46 02 c0       	push   0xc0024606
c000fb64:	6a 29                	push   0x29
c000fb66:	53                   	push   ebx
c000fb67:	e8 b8 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fb6c:	83 c4 20             	add    esp,0x20
c000fb6f:	6a 00                	push   0x0
c000fb71:	68 10 46 02 c0       	push   0xc0024610
c000fb76:	6a 2a                	push   0x2a
c000fb78:	53                   	push   ebx
c000fb79:	e8 a6 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fb7e:	6a 00                	push   0x0
c000fb80:	68 1a 46 02 c0       	push   0xc002461a
c000fb85:	6a 2b                	push   0x2b
c000fb87:	53                   	push   ebx
c000fb88:	e8 97 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fb8d:	83 c4 20             	add    esp,0x20
c000fb90:	6a 00                	push   0x0
c000fb92:	68 24 46 02 c0       	push   0xc0024624
c000fb97:	6a 2c                	push   0x2c
c000fb99:	53                   	push   ebx
c000fb9a:	e8 85 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fb9f:	6a 00                	push   0x0
c000fba1:	68 2e 46 02 c0       	push   0xc002462e
c000fba6:	6a 2d                	push   0x2d
c000fba8:	53                   	push   ebx
c000fba9:	e8 76 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fbae:	83 c4 20             	add    esp,0x20
c000fbb1:	6a 00                	push   0x0
c000fbb3:	68 38 46 02 c0       	push   0xc0024638
c000fbb8:	6a 2e                	push   0x2e
c000fbba:	53                   	push   ebx
c000fbbb:	e8 64 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fbc0:	6a 00                	push   0x0
c000fbc2:	68 42 46 02 c0       	push   0xc0024642
c000fbc7:	6a 2f                	push   0x2f
c000fbc9:	53                   	push   ebx
c000fbca:	e8 55 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fbcf:	83 c4 20             	add    esp,0x20
c000fbd2:	6a 00                	push   0x0
c000fbd4:	68 68 47 02 c0       	push   0xc0024768
c000fbd9:	6a 30                	push   0x30
c000fbdb:	53                   	push   ebx
c000fbdc:	e8 43 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fbe1:	6a 00                	push   0x0
c000fbe3:	68 72 47 02 c0       	push   0xc0024772
c000fbe8:	6a 31                	push   0x31
c000fbea:	53                   	push   ebx
c000fbeb:	e8 34 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fbf0:	83 c4 20             	add    esp,0x20
c000fbf3:	6a 00                	push   0x0
c000fbf5:	68 7c 47 02 c0       	push   0xc002477c
c000fbfa:	6a 32                	push   0x32
c000fbfc:	53                   	push   ebx
c000fbfd:	e8 22 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fc02:	6a 00                	push   0x0
c000fc04:	68 86 47 02 c0       	push   0xc0024786
c000fc09:	6a 33                	push   0x33
c000fc0b:	53                   	push   ebx
c000fc0c:	e8 13 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fc11:	83 c4 20             	add    esp,0x20
c000fc14:	6a 00                	push   0x0
c000fc16:	68 90 47 02 c0       	push   0xc0024790
c000fc1b:	6a 34                	push   0x34
c000fc1d:	53                   	push   ebx
c000fc1e:	e8 01 fd ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fc23:	6a 00                	push   0x0
c000fc25:	68 9a 47 02 c0       	push   0xc002479a
c000fc2a:	6a 35                	push   0x35
c000fc2c:	53                   	push   ebx
c000fc2d:	e8 f2 fc ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fc32:	83 c4 20             	add    esp,0x20
c000fc35:	6a 00                	push   0x0
c000fc37:	68 a4 47 02 c0       	push   0xc00247a4
c000fc3c:	6a 36                	push   0x36
c000fc3e:	53                   	push   ebx
c000fc3f:	e8 e0 fc ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fc44:	6a 00                	push   0x0
c000fc46:	68 ae 47 02 c0       	push   0xc00247ae
c000fc4b:	6a 37                	push   0x37
c000fc4d:	53                   	push   ebx
c000fc4e:	e8 d1 fc ff ff       	call   c000f924 <IDT::addEntry(int, void (*)(), bool)>
c000fc53:	83 c4 1c             	add    esp,0x1c
c000fc56:	6a 03                	push   0x3
c000fc58:	6a 02                	push   0x2
c000fc5a:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c000fc60:	e8 7d 4b 00 00       	call   c00147e2 <VAS::allocatePages(int, int)>
c000fc65:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000fc6c:	89 c6                	mov    esi,eax
c000fc6e:	e8 9c 09 00 00       	call   c001060f <malloc>
c000fc73:	81 c6 00 20 00 00    	add    esi,0x2000
c000fc79:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc7c:	89 c7                	mov    edi,eax
c000fc7e:	e8 29 3c 00 00       	call   c00138ac <TSS::TSS()>
c000fc83:	83 c4 0c             	add    esp,0xc
c000fc86:	68 56 45 02 c0       	push   0xc0024556
c000fc8b:	56                   	push   esi
c000fc8c:	57                   	push   edi
c000fc8d:	e8 5e 3c 00 00       	call   c00138f0 <TSS::setup(unsigned long, unsigned long)>
c000fc92:	89 c6                	mov    esi,eax
c000fc94:	58                   	pop    eax
c000fc95:	5a                   	pop    edx
c000fc96:	6a 00                	push   0x0
c000fc98:	8d 44 24 14          	lea    eax,[esp+0x14]
c000fc9c:	50                   	push   eax
c000fc9d:	e8 ce fb ff ff       	call   c000f870 <IDTEntry::IDTEntry(bool)>
c000fca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fca6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000fcab:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000fcb2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000fcb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fcbc:	80 ce 05             	or     dh,0x5
c000fcbf:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000fcc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fcc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fcca:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000fccd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcd0:	e8 87 fc ff ff       	call   c000f95c <IDT::flush()>
c000fcd5:	83 c4 20             	add    esp,0x20
c000fcd8:	5b                   	pop    ebx
c000fcd9:	5e                   	pop    esi
c000fcda:	5f                   	pop    edi
c000fcdb:	c3                   	ret    

c000fcdc <CPU::current()>:
c000fcdc:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c000fce1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fce7:	c3                   	ret    

c000fce8 <operator new(unsigned long)>:
c000fce8:	e9 22 09 00 00       	jmp    c001060f <malloc>

c000fced <operator delete(void*)>:
c000fced:	e9 3d 09 00 00       	jmp    c001062f <rfree>

c000fcf2 <disableIRQs()>:
c000fcf2:	fa                   	cli    
c000fcf3:	c3                   	ret    

c000fcf4 <enableIRQs()>:
c000fcf4:	fb                   	sti    
c000fcf5:	c3                   	ret    

c000fcf6 <lockScheduler()>:
c000fcf6:	fa                   	cli    
c000fcf7:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c000fcfd:	c3                   	ret    

c000fcfe <unlockScheduler()>:
c000fcfe:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c000fd05:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c000fd0c:	75 01                	jne    c000fd0f <unlockScheduler()+0x11>
c000fd0e:	fb                   	sti    
c000fd0f:	c3                   	ret    

c000fd10 <lockStuff()>:
c000fd10:	fa                   	cli    
c000fd11:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c000fd17:	ff 05 2c 73 03 c0    	inc    DWORD PTR ds:0xc003732c
c000fd1d:	c3                   	ret    

c000fd1e <unlockStuff()>:
c000fd1e:	83 ec 0c             	sub    esp,0xc
c000fd21:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c000fd26:	48                   	dec    eax
c000fd27:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c000fd2c:	75 18                	jne    c000fd46 <unlockStuff()+0x28>
c000fd2e:	83 3d 28 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037328,0x0
c000fd35:	74 0f                	je     c000fd46 <unlockStuff()+0x28>
c000fd37:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c000fd41:	e8 b6 78 00 00       	call   c00175fc <schedule()>
c000fd46:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c000fd4d:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c000fd54:	75 01                	jne    c000fd57 <unlockStuff()+0x39>
c000fd56:	fb                   	sti    
c000fd57:	83 c4 0c             	add    esp,0xc
c000fd5a:	c3                   	ret    

c000fd5b <Virt::getAKernelVAS()>:
c000fd5b:	a1 90 72 03 c0       	mov    eax,ds:0xc0037290
c000fd60:	c3                   	ret    

c000fd61 <__not_memcpy>:
c000fd61:	57                   	push   edi
c000fd62:	56                   	push   esi
c000fd63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd6b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fd6f:	89 c7                	mov    edi,eax
c000fd71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd73:	5e                   	pop    esi
c000fd74:	5f                   	pop    edi
c000fd75:	c3                   	ret    

c000fd76 <KeFormatDate(char*, int, int, int, int, bool)>:
c000fd76:	55                   	push   ebp
c000fd77:	b9 0a 00 00 00       	mov    ecx,0xa
c000fd7c:	57                   	push   edi
c000fd7d:	56                   	push   esi
c000fd7e:	53                   	push   ebx
c000fd7f:	bb e8 03 00 00       	mov    ebx,0x3e8
c000fd84:	81 ec ac 00 00 00    	sub    esp,0xac
c000fd8a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000fd91:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000fd96:	99                   	cdq    
c000fd97:	f7 f9                	idiv   ecx
c000fd99:	89 d5                	mov    ebp,edx
c000fd9b:	99                   	cdq    
c000fd9c:	f7 f9                	idiv   ecx
c000fd9e:	8d 42 30             	lea    eax,[edx+0x30]
c000fda1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fda5:	8d 45 30             	lea    eax,[ebp+0x30]
c000fda8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000fdac:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000fdb3:	99                   	cdq    
c000fdb4:	f7 fb                	idiv   ebx
c000fdb6:	bb 64 00 00 00       	mov    ebx,0x64
c000fdbb:	99                   	cdq    
c000fdbc:	f7 f9                	idiv   ecx
c000fdbe:	8d 42 30             	lea    eax,[edx+0x30]
c000fdc1:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000fdc5:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000fdcc:	99                   	cdq    
c000fdcd:	f7 fb                	idiv   ebx
c000fdcf:	31 db                	xor    ebx,ebx
c000fdd1:	99                   	cdq    
c000fdd2:	f7 f9                	idiv   ecx
c000fdd4:	8d 42 30             	lea    eax,[edx+0x30]
c000fdd7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000fddb:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000fde3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fde7:	0f be 8b 44 71 03 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffc8ebc]
c000fdee:	83 f9 59             	cmp    ecx,0x59
c000fdf1:	74 1c                	je     c000fe0f <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000fdf3:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000fdfa:	83 f9 4d             	cmp    ecx,0x4d
c000fdfd:	0f 84 e3 00 00 00    	je     c000fee6 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000fe03:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000fe0a:	e9 d7 00 00 00       	jmp    c000fee6 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000fe0f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fe14:	74 27                	je     c000fe3d <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000fe16:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000fe1a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fe1f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000fe23:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000fe27:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000fe2b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fe2f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000fe33:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000fe37:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000fe3b:	eb 15                	jmp    c000fe52 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000fe3d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fe41:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000fe45:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000fe49:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000fe4d:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000fe52:	50                   	push   eax
c000fe53:	50                   	push   eax
c000fe54:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000fe58:	57                   	push   edi
c000fe59:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000fe5d:	56                   	push   esi
c000fe5e:	e8 dd 09 ff ff       	call   c0000840 <strcat>
c000fe63:	83 c4 10             	add    esp,0x10
c000fe66:	83 fb 02             	cmp    ebx,0x2
c000fe69:	74 1a                	je     c000fe85 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000fe6b:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000fe70:	a1 48 71 03 c0       	mov    eax,ds:0xc0037148
c000fe75:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000fe79:	55                   	push   ebp
c000fe7a:	55                   	push   ebp
c000fe7b:	57                   	push   edi
c000fe7c:	56                   	push   esi
c000fe7d:	e8 be 09 ff ff       	call   c0000840 <strcat>
c000fe82:	83 c4 10             	add    esp,0x10
c000fe85:	43                   	inc    ebx
c000fe86:	83 fb 03             	cmp    ebx,0x3
c000fe89:	0f 85 58 ff ff ff    	jne    c000fde7 <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000fe8f:	51                   	push   ecx
c000fe90:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000fe97:	6a 00                	push   0x0
c000fe99:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000fea0:	e8 4b 06 ff ff       	call   c00004f0 <memset>
c000fea5:	89 34 24             	mov    DWORD PTR [esp],esi
c000fea8:	e8 c3 06 ff ff       	call   c0000570 <strlen>
c000fead:	83 c4 10             	add    esp,0x10
c000feb0:	40                   	inc    eax
c000feb1:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000feb8:	72 17                	jb     c000fed1 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000feba:	52                   	push   edx
c000febb:	52                   	push   edx
c000febc:	56                   	push   esi
c000febd:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000fec4:	e8 77 07 ff ff       	call   c0000640 <strcpy>
c000fec9:	83 c4 10             	add    esp,0x10
c000fecc:	e9 8a 00 00 00       	jmp    c000ff5b <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000fed1:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000fed8:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000fedf:	8d 48 ff             	lea    ecx,[eax-0x1]
c000fee2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fee4:	eb 75                	jmp    c000ff5b <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000fee6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000feea:	89 ef                	mov    edi,ebp
c000feec:	50                   	push   eax
c000feed:	c1 ff 1f             	sar    edi,0x1f
c000fef0:	50                   	push   eax
c000fef1:	57                   	push   edi
c000fef2:	55                   	push   ebp
c000fef3:	e8 70 04 00 00       	call   c0010368 <KeGetDigitsInNumber(long long)>
c000fef8:	83 c4 10             	add    esp,0x10
c000fefb:	48                   	dec    eax
c000fefc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff00:	75 1c                	jne    c000ff1e <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000ff02:	83 f9 44             	cmp    ecx,0x44
c000ff05:	75 09                	jne    c000ff10 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000ff07:	80 3d 60 71 03 c0 00 	cmp    BYTE PTR ds:0xc0037160,0x0
c000ff0e:	eb 0c                	jmp    c000ff1c <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000ff10:	83 f9 4d             	cmp    ecx,0x4d
c000ff13:	75 2b                	jne    c000ff40 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000ff15:	80 3d 61 71 03 c0 00 	cmp    BYTE PTR ds:0xc0037161,0x0
c000ff1c:	74 22                	je     c000ff40 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000ff1e:	89 e8                	mov    eax,ebp
c000ff20:	b9 0a 00 00 00       	mov    ecx,0xa
c000ff25:	99                   	cdq    
c000ff26:	f7 f9                	idiv   ecx
c000ff28:	89 d5                	mov    ebp,edx
c000ff2a:	99                   	cdq    
c000ff2b:	f7 f9                	idiv   ecx
c000ff2d:	83 c2 30             	add    edx,0x30
c000ff30:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000ff34:	8d 55 30             	lea    edx,[ebp+0x30]
c000ff37:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000ff3b:	e9 0d ff ff ff       	jmp    c000fe4d <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000ff40:	89 e8                	mov    eax,ebp
c000ff42:	b9 0a 00 00 00       	mov    ecx,0xa
c000ff47:	99                   	cdq    
c000ff48:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000ff4d:	f7 f9                	idiv   ecx
c000ff4f:	83 c2 30             	add    edx,0x30
c000ff52:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000ff56:	e9 f7 fe ff ff       	jmp    c000fe52 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000ff5b:	81 c4 ac 00 00 00    	add    esp,0xac
c000ff61:	5b                   	pop    ebx
c000ff62:	5e                   	pop    esi
c000ff63:	5f                   	pop    edi
c000ff64:	5d                   	pop    ebp
c000ff65:	c3                   	ret    

c000ff66 <KeFormatShortDate(char*, int, int, int, int)>:
c000ff66:	83 ec 14             	sub    esp,0x14
c000ff69:	6a 00                	push   0x0
c000ff6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff7f:	e8 f2 fd ff ff       	call   c000fd76 <KeFormatDate(char*, int, int, int, int, bool)>
c000ff84:	83 c4 2c             	add    esp,0x2c
c000ff87:	c3                   	ret    

c000ff88 <KeFormatLongDate(char*, int, int, int, int)>:
c000ff88:	83 ec 14             	sub    esp,0x14
c000ff8b:	6a 01                	push   0x1
c000ff8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ffa1:	e8 d0 fd ff ff       	call   c000fd76 <KeFormatDate(char*, int, int, int, int, bool)>
c000ffa6:	83 c4 2c             	add    esp,0x2c
c000ffa9:	c3                   	ret    

c000ffaa <KeSetLocale(klocale_t)>:
c000ffaa:	57                   	push   edi
c000ffab:	b9 09 00 00 00       	mov    ecx,0x9
c000ffb0:	56                   	push   esi
c000ffb1:	bf 40 71 03 c0       	mov    edi,0xc0037140
c000ffb6:	fc                   	cld    
c000ffb7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ffbb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ffbd:	5e                   	pop    esi
c000ffbe:	5f                   	pop    edi
c000ffbf:	c3                   	ret    

c000ffc0 <KeInitialiseLocale()>:
c000ffc0:	57                   	push   edi
c000ffc1:	56                   	push   esi
c000ffc2:	83 ec 3c             	sub    esp,0x3c
c000ffc5:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000ffcd:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000ffd5:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000ffdd:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000ffe5:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000ffec:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000fff4:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000fffc:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c0010003:	68 08 c0 02 c0       	push   0xc002c008
c0010008:	8d 74 24 18          	lea    esi,[esp+0x18]
c001000c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010010:	50                   	push   eax
c0010011:	e8 2a 06 ff ff       	call   c0000640 <strcpy>
c0010016:	83 ec 20             	sub    esp,0x20
c0010019:	b9 09 00 00 00       	mov    ecx,0x9
c001001e:	fc                   	cld    
c001001f:	89 e7                	mov    edi,esp
c0010021:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010023:	e8 82 ff ff ff       	call   c000ffaa <KeSetLocale(klocale_t)>
c0010028:	83 c4 64             	add    esp,0x64
c001002b:	5e                   	pop    esi
c001002c:	5f                   	pop    edi
c001002d:	c3                   	ret    

c001002e <KeFormatCurrency(char*, int, long long, long long)>:
c001002e:	c3                   	ret    

c001002f <KeFormatCurrency(char*, int, double)>:
c001002f:	c3                   	ret    

c0010030 <KeFormatNumber(char*, long long, long long)>:
c0010030:	c3                   	ret    

c0010031 <KeFormatNumber(char*, double)>:
c0010031:	c3                   	ret    
c0010032:	66 90                	xchg   ax,ax

c0010034 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c0010034:	55                   	push   ebp
c0010035:	57                   	push   edi
c0010036:	56                   	push   esi
c0010037:	53                   	push   ebx
c0010038:	83 ec 5c             	sub    esp,0x5c
c001003b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001003f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010043:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0010047:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001004b:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c001004f:	bb af ab 02 c0       	mov    ebx,0xc002abaf
c0010054:	bd 11 00 00 00       	mov    ebp,0x11
c0010059:	89 d0                	mov    eax,edx
c001005b:	83 e0 01             	and    eax,0x1
c001005e:	74 10                	je     c0010070 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c0010060:	8a 03                	mov    al,BYTE PTR [ebx]
c0010062:	88 02                	mov    BYTE PTR [edx],al
c0010064:	8d 52 01             	lea    edx,[edx+0x1]
c0010067:	8d 5b 01             	lea    ebx,[ebx+0x1]
c001006a:	83 ed 01             	sub    ebp,0x1
c001006d:	8d 76 00             	lea    esi,[esi+0x0]
c0010070:	89 d0                	mov    eax,edx
c0010072:	83 e0 02             	and    eax,0x2
c0010075:	74 11                	je     c0010088 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c0010077:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001007a:	66 89 02             	mov    WORD PTR [edx],ax
c001007d:	8d 52 02             	lea    edx,[edx+0x2]
c0010080:	8d 5b 02             	lea    ebx,[ebx+0x2]
c0010083:	83 ed 02             	sub    ebp,0x2
c0010086:	66 90                	xchg   ax,ax
c0010088:	89 e8                	mov    eax,ebp
c001008a:	c1 e8 02             	shr    eax,0x2
c001008d:	fc                   	cld    
c001008e:	89 d7                	mov    edi,edx
c0010090:	89 de                	mov    esi,ebx
c0010092:	89 c1                	mov    ecx,eax
c0010094:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010096:	89 f3                	mov    ebx,esi
c0010098:	89 fa                	mov    edx,edi
c001009a:	b9 00 00 00 00       	mov    ecx,0x0
c001009f:	89 e8                	mov    eax,ebp
c00100a1:	83 e0 02             	and    eax,0x2
c00100a4:	74 0e                	je     c00100b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c00100a6:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c00100aa:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00100ae:	8d 41 02             	lea    eax,[ecx+0x2]
c00100b1:	89 c1                	mov    ecx,eax
c00100b3:	90                   	nop
c00100b4:	89 e8                	mov    eax,ebp
c00100b6:	83 e0 01             	and    eax,0x1
c00100b9:	74 09                	je     c00100c4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c00100bb:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c00100be:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00100c1:	8d 76 00             	lea    esi,[esi+0x0]
c00100c4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00100c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00100cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00100d4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00100d8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00100dc:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c00100e1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00100e5:	89 c2                	mov    edx,eax
c00100e7:	c1 fa 1f             	sar    edx,0x1f
c00100ea:	52                   	push   edx
c00100eb:	50                   	push   eax
c00100ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00100f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00100f4:	e8 5b 4a 01 00       	call   c0024b54 <__udivdi3>
c00100f9:	83 c4 10             	add    esp,0x10
c00100fc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010100:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0010104:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010108:	80 f4 00             	xor    ah,0x0
c001010b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001010f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010113:	80 f4 00             	xor    ah,0x0
c0010116:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001011a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001011e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010122:	89 f8                	mov    eax,edi
c0010124:	09 f0                	or     eax,esi
c0010126:	74 04                	je     c001012c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c0010128:	eb b2                	jmp    c00100dc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c001012a:	66 90                	xchg   ax,ax
c001012c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010130:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010133:	90                   	nop
c0010134:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0010138:	89 c1                	mov    ecx,eax
c001013a:	89 c3                	mov    ebx,eax
c001013c:	c1 fb 1f             	sar    ebx,0x1f
c001013f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010143:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010147:	53                   	push   ebx
c0010148:	51                   	push   ecx
c0010149:	52                   	push   edx
c001014a:	50                   	push   eax
c001014b:	e8 04 4b 01 00       	call   c0024c54 <__umoddi3>
c0010150:	83 c4 10             	add    esp,0x10
c0010153:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c0010158:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c001015c:	01 c8                	add    eax,ecx
c001015e:	8a 10                	mov    dl,BYTE PTR [eax]
c0010160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010164:	88 10                	mov    BYTE PTR [eax],dl
c0010166:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001016a:	89 c2                	mov    edx,eax
c001016c:	c1 fa 1f             	sar    edx,0x1f
c001016f:	52                   	push   edx
c0010170:	50                   	push   eax
c0010171:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010175:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010179:	e8 d6 49 01 00       	call   c0024b54 <__udivdi3>
c001017e:	83 c4 10             	add    esp,0x10
c0010181:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010185:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010189:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001018d:	80 f4 00             	xor    ah,0x0
c0010190:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010194:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010198:	80 f4 00             	xor    ah,0x0
c001019b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001019f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00101a7:	89 f8                	mov    eax,edi
c00101a9:	09 f0                	or     eax,esi
c00101ab:	74 03                	je     c00101b0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c00101ad:	eb 85                	jmp    c0010134 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c00101af:	90                   	nop
c00101b0:	90                   	nop
c00101b1:	83 c4 5c             	add    esp,0x5c
c00101b4:	5b                   	pop    ebx
c00101b5:	5e                   	pop    esi
c00101b6:	5f                   	pop    edi
c00101b7:	5d                   	pop    ebp
c00101b8:	c3                   	ret    
c00101b9:	8d 76 00             	lea    esi,[esi+0x0]

c00101bc <KeBasedSignedIntegerToString(long long, char*, int)>:
c00101bc:	55                   	push   ebp
c00101bd:	57                   	push   edi
c00101be:	56                   	push   esi
c00101bf:	53                   	push   ebx
c00101c0:	83 ec 5c             	sub    esp,0x5c
c00101c3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00101c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101cb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00101cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101d3:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c00101d7:	bb af ab 02 c0       	mov    ebx,0xc002abaf
c00101dc:	bd 11 00 00 00       	mov    ebp,0x11
c00101e1:	89 d0                	mov    eax,edx
c00101e3:	83 e0 01             	and    eax,0x1
c00101e6:	74 10                	je     c00101f8 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c00101e8:	8a 03                	mov    al,BYTE PTR [ebx]
c00101ea:	88 02                	mov    BYTE PTR [edx],al
c00101ec:	8d 52 01             	lea    edx,[edx+0x1]
c00101ef:	8d 5b 01             	lea    ebx,[ebx+0x1]
c00101f2:	83 ed 01             	sub    ebp,0x1
c00101f5:	8d 76 00             	lea    esi,[esi+0x0]
c00101f8:	89 d0                	mov    eax,edx
c00101fa:	83 e0 02             	and    eax,0x2
c00101fd:	74 11                	je     c0010210 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c00101ff:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0010202:	66 89 02             	mov    WORD PTR [edx],ax
c0010205:	8d 52 02             	lea    edx,[edx+0x2]
c0010208:	8d 5b 02             	lea    ebx,[ebx+0x2]
c001020b:	83 ed 02             	sub    ebp,0x2
c001020e:	66 90                	xchg   ax,ax
c0010210:	89 e8                	mov    eax,ebp
c0010212:	c1 e8 02             	shr    eax,0x2
c0010215:	fc                   	cld    
c0010216:	89 d7                	mov    edi,edx
c0010218:	89 de                	mov    esi,ebx
c001021a:	89 c1                	mov    ecx,eax
c001021c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001021e:	89 f3                	mov    ebx,esi
c0010220:	89 fa                	mov    edx,edi
c0010222:	b9 00 00 00 00       	mov    ecx,0x0
c0010227:	89 e8                	mov    eax,ebp
c0010229:	83 e0 02             	and    eax,0x2
c001022c:	74 0e                	je     c001023c <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c001022e:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c0010232:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0010236:	8d 41 02             	lea    eax,[ecx+0x2]
c0010239:	89 c1                	mov    ecx,eax
c001023b:	90                   	nop
c001023c:	89 e8                	mov    eax,ebp
c001023e:	83 e0 01             	and    eax,0x1
c0010241:	74 09                	je     c001024c <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c0010243:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c0010246:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0010249:	8d 76 00             	lea    esi,[esi+0x0]
c001024c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0010250:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010254:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010259:	79 1d                	jns    c0010278 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c001025b:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c001025f:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c0010264:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c0010268:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001026c:	8d 50 01             	lea    edx,[eax+0x1]
c001026f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0010273:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c0010276:	66 90                	xchg   ax,ax
c0010278:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001027c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010280:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010284:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0010288:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c001028d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0010291:	89 c2                	mov    edx,eax
c0010293:	c1 fa 1f             	sar    edx,0x1f
c0010296:	52                   	push   edx
c0010297:	50                   	push   eax
c0010298:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001029c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00102a0:	e8 af 48 01 00       	call   c0024b54 <__udivdi3>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00102ac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00102b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00102b4:	80 f4 00             	xor    ah,0x0
c00102b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102bb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00102bf:	80 f4 00             	xor    ah,0x0
c00102c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102c6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00102ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00102ce:	89 f8                	mov    eax,edi
c00102d0:	09 f0                	or     eax,esi
c00102d2:	74 04                	je     c00102d8 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c00102d4:	eb b2                	jmp    c0010288 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c00102d6:	66 90                	xchg   ax,ax
c00102d8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00102dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00102df:	90                   	nop
c00102e0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00102e4:	89 c1                	mov    ecx,eax
c00102e6:	89 c3                	mov    ebx,eax
c00102e8:	c1 fb 1f             	sar    ebx,0x1f
c00102eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00102ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00102f3:	53                   	push   ebx
c00102f4:	51                   	push   ecx
c00102f5:	52                   	push   edx
c00102f6:	50                   	push   eax
c00102f7:	e8 d8 46 01 00       	call   c00249d4 <__moddi3>
c00102fc:	83 c4 10             	add    esp,0x10
c00102ff:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c0010304:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c0010308:	01 c8                	add    eax,ecx
c001030a:	8a 10                	mov    dl,BYTE PTR [eax]
c001030c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010310:	88 10                	mov    BYTE PTR [eax],dl
c0010312:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0010316:	89 c2                	mov    edx,eax
c0010318:	c1 fa 1f             	sar    edx,0x1f
c001031b:	52                   	push   edx
c001031c:	50                   	push   eax
c001031d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010325:	e8 5e 45 01 00       	call   c0024888 <__divdi3>
c001032a:	83 c4 10             	add    esp,0x10
c001032d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010331:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010335:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010339:	80 f4 00             	xor    ah,0x0
c001033c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010344:	80 f4 00             	xor    ah,0x0
c0010347:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001034b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001034f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010353:	89 f8                	mov    eax,edi
c0010355:	09 f0                	or     eax,esi
c0010357:	74 03                	je     c001035c <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c0010359:	eb 85                	jmp    c00102e0 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c001035b:	90                   	nop
c001035c:	90                   	nop
c001035d:	83 c4 5c             	add    esp,0x5c
c0010360:	5b                   	pop    ebx
c0010361:	5e                   	pop    esi
c0010362:	5f                   	pop    edi
c0010363:	5d                   	pop    ebp
c0010364:	c3                   	ret    
c0010365:	8d 76 00             	lea    esi,[esi+0x0]

c0010368 <KeGetDigitsInNumber(long long)>:
c0010368:	56                   	push   esi
c0010369:	53                   	push   ebx
c001036a:	83 ec 24             	sub    esp,0x24
c001036d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010371:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010375:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010379:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001037d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010385:	8d 76 00             	lea    esi,[esi+0x0]
c0010388:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001038c:	80 f4 00             	xor    ah,0x0
c001038f:	89 c3                	mov    ebx,eax
c0010391:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010395:	80 f4 00             	xor    ah,0x0
c0010398:	89 c6                	mov    esi,eax
c001039a:	89 f0                	mov    eax,esi
c001039c:	09 d8                	or     eax,ebx
c001039e:	74 28                	je     c00103c8 <KeGetDigitsInNumber(long long)+0x60>
c00103a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00103a8:	6a 00                	push   0x0
c00103aa:	6a 0a                	push   0xa
c00103ac:	52                   	push   edx
c00103ad:	50                   	push   eax
c00103ae:	e8 d5 44 01 00       	call   c0024888 <__divdi3>
c00103b3:	83 c4 10             	add    esp,0x10
c00103b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103be:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00103c3:	eb c3                	jmp    c0010388 <KeGetDigitsInNumber(long long)+0x20>
c00103c5:	8d 76 00             	lea    esi,[esi+0x0]
c00103c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103cc:	83 c4 24             	add    esp,0x24
c00103cf:	5b                   	pop    ebx
c00103d0:	5e                   	pop    esi
c00103d1:	c3                   	ret    
c00103d2:	66 90                	xchg   ax,ax

c00103d4 <KeItoa(unsigned long long, char*)>:
c00103d4:	83 ec 1c             	sub    esp,0x1c
c00103d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103e7:	6a 0a                	push   0xa
c00103e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00103ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00103f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00103f5:	e8 3a fc ff ff       	call   c0010034 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c00103fa:	83 c4 10             	add    esp,0x10
c00103fd:	90                   	nop
c00103fe:	83 c4 1c             	add    esp,0x1c
c0010401:	c3                   	ret    
c0010402:	66 90                	xchg   ax,ax

c0010404 <KeItoa(long long, char*)>:
c0010404:	83 ec 1c             	sub    esp,0x1c
c0010407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001040b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001040f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010413:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010417:	6a 0a                	push   0xa
c0010419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001041d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010421:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010425:	e8 92 fd ff ff       	call   c00101bc <KeBasedSignedIntegerToString(long long, char*, int)>
c001042a:	83 c4 10             	add    esp,0x10
c001042d:	90                   	nop
c001042e:	83 c4 1c             	add    esp,0x1c
c0010431:	c3                   	ret    
c0010432:	66 90                	xchg   ax,ax

c0010434 <KeXtoa(unsigned long long, char*)>:
c0010434:	83 ec 1c             	sub    esp,0x1c
c0010437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001043b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001043f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010443:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010447:	6a 10                	push   0x10
c0010449:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001044d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010455:	e8 da fb ff ff       	call   c0010034 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c001045a:	83 c4 10             	add    esp,0x10
c001045d:	90                   	nop
c001045e:	83 c4 1c             	add    esp,0x1c
c0010461:	c3                   	ret    

c0010462 <sbrk>:
c0010462:	55                   	push   ebp
c0010463:	57                   	push   edi
c0010464:	56                   	push   esi
c0010465:	53                   	push   ebx
c0010466:	83 ec 1c             	sub    esp,0x1c
c0010469:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001046d:	85 c0                	test   eax,eax
c001046f:	74 61                	je     c00104d2 <sbrk+0x70>
c0010471:	78 66                	js     c00104d9 <sbrk+0x77>
c0010473:	8b 15 b0 09 03 c0    	mov    edx,DWORD PTR ds:0xc00309b0
c0010479:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001047d:	05 ff 0f 00 00       	add    eax,0xfff
c0010482:	89 c5                	mov    ebp,eax
c0010484:	78 6b                	js     c00104f1 <sbrk+0x8f>
c0010486:	c1 fd 0c             	sar    ebp,0xc
c0010489:	bb 00 00 00 00       	mov    ebx,0x0
c001048e:	8b 35 90 72 03 c0    	mov    esi,DWORD PTR ds:0xc0037290
c0010494:	8b 3d b0 09 03 c0    	mov    edi,DWORD PTR ds:0xc00309b0
c001049a:	e8 b9 07 00 00       	call   c0010c58 <Phys::allocatePage()>
c001049f:	68 01 04 00 00       	push   0x401
c00104a4:	57                   	push   edi
c00104a5:	50                   	push   eax
c00104a6:	56                   	push   esi
c00104a7:	e8 32 42 00 00       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c00104ac:	81 05 b0 09 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc00309b0,0x1000
c00104b6:	83 c3 01             	add    ebx,0x1
c00104b9:	83 c4 10             	add    esp,0x10
c00104bc:	39 dd                	cmp    ebp,ebx
c00104be:	75 ce                	jne    c001048e <sbrk+0x2c>
c00104c0:	0f 20 d8             	mov    eax,cr3
c00104c3:	0f 22 d8             	mov    cr3,eax
c00104c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104ca:	83 c4 1c             	add    esp,0x1c
c00104cd:	5b                   	pop    ebx
c00104ce:	5e                   	pop    esi
c00104cf:	5f                   	pop    edi
c00104d0:	5d                   	pop    ebp
c00104d1:	c3                   	ret    
c00104d2:	a1 b0 09 03 c0       	mov    eax,ds:0xc00309b0
c00104d7:	eb f1                	jmp    c00104ca <sbrk+0x68>
c00104d9:	83 ec 08             	sub    esp,0x8
c00104dc:	50                   	push   eax
c00104dd:	68 0c c0 02 c0       	push   0xc002c00c
c00104e2:	e8 95 6a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00104e7:	83 c4 10             	add    esp,0x10
c00104ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104ef:	eb d9                	jmp    c00104ca <sbrk+0x68>
c00104f1:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00104f7:	eb 8d                	jmp    c0010486 <sbrk+0x24>

c00104f9 <sbrk_thunk>:
c00104f9:	83 ec 0c             	sub    esp,0xc
c00104fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010500:	3d ff bf 00 00       	cmp    eax,0xbfff
c0010505:	7f 10                	jg     c0010517 <sbrk_thunk+0x1e>
c0010507:	83 ec 0c             	sub    esp,0xc
c001050a:	50                   	push   eax
c001050b:	e8 52 ff ff ff       	call   c0010462 <sbrk>
c0010510:	83 c4 10             	add    esp,0x10
c0010513:	83 c4 0c             	add    esp,0xc
c0010516:	c3                   	ret    
c0010517:	83 ec 08             	sub    esp,0x8
c001051a:	50                   	push   eax
c001051b:	68 3c c0 02 c0       	push   0xc002c03c
c0010520:	e8 57 6a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010525:	83 c4 10             	add    esp,0x10
c0010528:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001052d:	eb e4                	jmp    c0010513 <sbrk_thunk+0x1a>

c001052f <mmap>:
c001052f:	55                   	push   ebp
c0010530:	57                   	push   edi
c0010531:	56                   	push   esi
c0010532:	53                   	push   ebx
c0010533:	83 ec 18             	sub    esp,0x18
c0010536:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001053a:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0010540:	89 fb                	mov    ebx,edi
c0010542:	c1 eb 0c             	shr    ebx,0xc
c0010545:	53                   	push   ebx
c0010546:	e8 b0 3a 00 00       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c001054b:	89 c5                	mov    ebp,eax
c001054d:	83 c4 10             	add    esp,0x10
c0010550:	85 db                	test   ebx,ebx
c0010552:	7e 2f                	jle    c0010583 <mmap+0x54>
c0010554:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c001055a:	01 c7                	add    edi,eax
c001055c:	89 c3                	mov    ebx,eax
c001055e:	8b 35 90 72 03 c0    	mov    esi,DWORD PTR ds:0xc0037290
c0010564:	e8 ef 06 00 00       	call   c0010c58 <Phys::allocatePage()>
c0010569:	68 01 04 00 00       	push   0x401
c001056e:	53                   	push   ebx
c001056f:	50                   	push   eax
c0010570:	56                   	push   esi
c0010571:	e8 68 41 00 00       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c0010576:	81 c3 00 10 00 00    	add    ebx,0x1000
c001057c:	83 c4 10             	add    esp,0x10
c001057f:	39 fb                	cmp    ebx,edi
c0010581:	75 db                	jne    c001055e <mmap+0x2f>
c0010583:	89 e8                	mov    eax,ebp
c0010585:	83 c4 0c             	add    esp,0xc
c0010588:	5b                   	pop    ebx
c0010589:	5e                   	pop    esi
c001058a:	5f                   	pop    edi
c001058b:	5d                   	pop    ebp
c001058c:	c3                   	ret    

c001058d <munmap>:
c001058d:	83 ec 18             	sub    esp,0x18
c0010590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010594:	e8 6a 3d 00 00       	call   c0014303 <Virt::freeKernelVirtualPages(unsigned long)>
c0010599:	b8 00 00 00 00       	mov    eax,0x0
c001059e:	83 c4 1c             	add    esp,0x1c
c00105a1:	c3                   	ret    

c00105a2 <liballoc_lock()>:
c00105a2:	fa                   	cli    
c00105a3:	83 05 30 73 03 c0 01 	add    DWORD PTR ds:0xc0037330,0x1
c00105aa:	b8 00 00 00 00       	mov    eax,0x0
c00105af:	c3                   	ret    

c00105b0 <liballoc_unlock()>:
c00105b0:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00105b8:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c00105bf:	75 01                	jne    c00105c2 <liballoc_unlock()+0x12>
c00105c1:	fb                   	sti    
c00105c2:	b8 00 00 00 00       	mov    eax,0x0
c00105c7:	c3                   	ret    

c00105c8 <liballoc_alloc(int)>:
c00105c8:	83 ec 10             	sub    esp,0x10
c00105cb:	6a 01                	push   0x1
c00105cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105d1:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c00105d7:	e8 06 42 00 00       	call   c00147e2 <VAS::allocatePages(int, int)>
c00105dc:	83 c4 1c             	add    esp,0x1c
c00105df:	c3                   	ret    

c00105e0 <liballoc_free(void*, int)>:
c00105e0:	83 ec 14             	sub    esp,0x14
c00105e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105e7:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c00105ed:	e8 4e 3e 00 00       	call   c0014440 <VAS::freeAllocatedPages(unsigned long)>
c00105f2:	b8 00 00 00 00       	mov    eax,0x0
c00105f7:	83 c4 1c             	add    esp,0x1c
c00105fa:	c3                   	ret    

c00105fb <realloc>:
c00105fb:	83 ec 14             	sub    esp,0x14
c00105fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010606:	e8 4c 11 ff ff       	call   c0001757 <dlrealloc>
c001060b:	83 c4 1c             	add    esp,0x1c
c001060e:	c3                   	ret    

c001060f <malloc>:
c001060f:	83 ec 18             	sub    esp,0x18
c0010612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010616:	e8 ff 0b ff ff       	call   c000121a <dlmalloc>
c001061b:	83 c4 1c             	add    esp,0x1c
c001061e:	c3                   	ret    

c001061f <free>:
c001061f:	83 ec 18             	sub    esp,0x18
c0010622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010626:	e8 28 07 ff ff       	call   c0000d53 <dlfree>
c001062b:	83 c4 1c             	add    esp,0x1c
c001062e:	c3                   	ret    

c001062f <rfree>:
c001062f:	83 ec 18             	sub    esp,0x18
c0010632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010636:	e8 18 07 ff ff       	call   c0000d53 <dlfree>
c001063b:	83 c4 1c             	add    esp,0x1c
c001063e:	c3                   	ret    

c001063f <calloc>:
c001063f:	56                   	push   esi
c0010640:	53                   	push   ebx
c0010641:	83 ec 10             	sub    esp,0x10
c0010644:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010648:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c001064d:	53                   	push   ebx
c001064e:	e8 bc ff ff ff       	call   c001060f <malloc>
c0010653:	89 c6                	mov    esi,eax
c0010655:	83 c4 0c             	add    esp,0xc
c0010658:	53                   	push   ebx
c0010659:	6a 00                	push   0x0
c001065b:	50                   	push   eax
c001065c:	e8 8f fe fe ff       	call   c00004f0 <memset>
c0010661:	89 f0                	mov    eax,esi
c0010663:	83 c4 14             	add    esp,0x14
c0010666:	5b                   	pop    ebx
c0010667:	5e                   	pop    esi
c0010668:	c3                   	ret    
c0010669:	66 90                	xchg   ax,ax
c001066b:	90                   	nop

c001066c <KeMailboxTryPost(Mailbox*, void*)>:
c001066c:	83 ec 10             	sub    esp,0x10
c001066f:	fa                   	cli    
c0010670:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0010675:	83 c0 01             	add    eax,0x1
c0010678:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c001067d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0010682:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010686:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010689:	85 c0                	test   eax,eax
c001068b:	75 23                	jne    c00106b0 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c001068d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010691:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010695:	89 10                	mov    DWORD PTR [eax],edx
c0010697:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001069b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001069e:	8d 50 01             	lea    edx,[eax+0x1]
c00106a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00106a8:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00106ad:	8d 76 00             	lea    esi,[esi+0x0]
c00106b0:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00106b8:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00106bd:	85 c0                	test   eax,eax
c00106bf:	75 03                	jne    c00106c4 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c00106c1:	fb                   	sti    
c00106c2:	66 90                	xchg   ax,ax
c00106c4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00106c8:	83 c4 10             	add    esp,0x10
c00106cb:	c3                   	ret    

c00106cc <KeMailboxTryGet(Mailbox*, void**)>:
c00106cc:	83 ec 10             	sub    esp,0x10
c00106cf:	fa                   	cli    
c00106d0:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00106d5:	83 c0 01             	add    eax,0x1
c00106d8:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00106dd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00106e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00106e9:	83 f8 01             	cmp    eax,0x1
c00106ec:	75 22                	jne    c0010710 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c00106ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00106f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00106f8:	89 10                	mov    DWORD PTR [eax],edx
c00106fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010701:	8d 50 ff             	lea    edx,[eax-0x1]
c0010704:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010708:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001070b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0010710:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0010718:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c001071d:	85 c0                	test   eax,eax
c001071f:	75 03                	jne    c0010724 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c0010721:	fb                   	sti    
c0010722:	66 90                	xchg   ax,ax
c0010724:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010728:	83 c4 10             	add    esp,0x10
c001072b:	c3                   	ret    

c001072c <KeMailboxCreate()>:
c001072c:	83 ec 1c             	sub    esp,0x1c
c001072f:	83 ec 0c             	sub    esp,0xc
c0010732:	6a 08                	push   0x8
c0010734:	e8 d6 fe ff ff       	call   c001060f <malloc>
c0010739:	83 c4 10             	add    esp,0x10
c001073c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010740:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010744:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001074a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001074e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010759:	83 c4 1c             	add    esp,0x1c
c001075c:	c3                   	ret    
c001075d:	8d 76 00             	lea    esi,[esi+0x0]

c0010760 <KeMailboxPost(Mailbox*, void*)>:
c0010760:	83 ec 1c             	sub    esp,0x1c
c0010763:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0010768:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001076c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010770:	e8 f7 fe ff ff       	call   c001066c <KeMailboxTryPost(Mailbox*, void*)>
c0010775:	83 c4 08             	add    esp,0x8
c0010778:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001077c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010780:	83 f0 01             	xor    eax,0x1
c0010783:	0f b6 c0             	movzx  eax,al
c0010786:	85 c0                	test   eax,eax
c0010788:	74 26                	je     c00107b0 <KeMailboxPost(Mailbox*, void*)+0x50>
c001078a:	fa                   	cli    
c001078b:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0010790:	83 c0 01             	add    eax,0x1
c0010793:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0010798:	e8 5f 6e 00 00       	call   c00175fc <schedule()>
c001079d:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00107a5:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00107aa:	85 c0                	test   eax,eax
c00107ac:	75 02                	jne    c00107b0 <KeMailboxPost(Mailbox*, void*)+0x50>
c00107ae:	fb                   	sti    
c00107af:	90                   	nop
c00107b0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00107b5:	85 c0                	test   eax,eax
c00107b7:	75 03                	jne    c00107bc <KeMailboxPost(Mailbox*, void*)+0x5c>
c00107b9:	eb ad                	jmp    c0010768 <KeMailboxPost(Mailbox*, void*)+0x8>
c00107bb:	90                   	nop
c00107bc:	90                   	nop
c00107bd:	83 c4 1c             	add    esp,0x1c
c00107c0:	c3                   	ret    
c00107c1:	8d 76 00             	lea    esi,[esi+0x0]

c00107c4 <KeMailboxGet(Mailbox*, void**)>:
c00107c4:	83 ec 1c             	sub    esp,0x1c
c00107c7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00107cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00107d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00107d4:	e8 f3 fe ff ff       	call   c00106cc <KeMailboxTryGet(Mailbox*, void**)>
c00107d9:	83 c4 08             	add    esp,0x8
c00107dc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00107e0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00107e4:	83 f0 01             	xor    eax,0x1
c00107e7:	0f b6 c0             	movzx  eax,al
c00107ea:	85 c0                	test   eax,eax
c00107ec:	74 26                	je     c0010814 <KeMailboxGet(Mailbox*, void**)+0x50>
c00107ee:	fa                   	cli    
c00107ef:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00107f4:	83 c0 01             	add    eax,0x1
c00107f7:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00107fc:	e8 fb 6d 00 00       	call   c00175fc <schedule()>
c0010801:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0010809:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c001080e:	85 c0                	test   eax,eax
c0010810:	75 02                	jne    c0010814 <KeMailboxGet(Mailbox*, void**)+0x50>
c0010812:	fb                   	sti    
c0010813:	90                   	nop
c0010814:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0010819:	85 c0                	test   eax,eax
c001081b:	75 03                	jne    c0010820 <KeMailboxGet(Mailbox*, void**)+0x5c>
c001081d:	eb ad                	jmp    c00107cc <KeMailboxGet(Mailbox*, void**)+0x8>
c001081f:	90                   	nop
c0010820:	90                   	nop
c0010821:	83 c4 1c             	add    esp,0x1c
c0010824:	c3                   	ret    
c0010825:	8d 76 00             	lea    esi,[esi+0x0]

c0010828 <KeMailboxDestroy(Mailbox*)>:
c0010828:	83 ec 0c             	sub    esp,0xc
c001082b:	83 ec 0c             	sub    esp,0xc
c001082e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010832:	e8 e8 fd ff ff       	call   c001061f <free>
c0010837:	83 c4 10             	add    esp,0x10
c001083a:	90                   	nop
c001083b:	83 c4 0c             	add    esp,0xc
c001083e:	c3                   	ret    

c001083f <KeFirstTask()>:
c001083f:	53                   	push   ebx
c0010840:	83 ec 08             	sub    esp,0x8
c0010843:	fb                   	sti    
c0010844:	e8 7a a5 00 00       	call   c001adc3 <HalEnableNMI()>
c0010849:	83 ec 0c             	sub    esp,0xc
c001084c:	68 4b c0 02 c0       	push   0xc002c04b
c0010851:	e8 17 d8 ff ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0010856:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c001085d:	e8 ad fd ff ff       	call   c001060f <malloc>
c0010862:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0010869:	89 c3                	mov    ebx,eax
c001086b:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c0010870:	50                   	push   eax
c0010871:	68 64 c0 02 c0       	push   0xc002c064
c0010876:	6a 01                	push   0x1
c0010878:	53                   	push   ebx
c0010879:	e8 72 68 00 00       	call   c00170f0 <Process::Process(bool, char const*, Process*, char**)>
c001087e:	83 c4 20             	add    esp,0x20
c0010881:	68 ff 00 00 00       	push   0xff
c0010886:	6a 00                	push   0x0
c0010888:	68 4f f8 00 c0       	push   0xc000f84f
c001088d:	53                   	push   ebx
c001088e:	e8 9d 6a 00 00       	call   c0017330 <Process::createThread(void (*)(void*), void*, int)>
c0010893:	8b 15 58 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037358
c0010899:	6a 7a                	push   0x7a
c001089b:	6a 00                	push   0x0
c001089d:	68 e4 7c 01 c0       	push   0xc0017ce4
c00108a2:	52                   	push   edx
c00108a3:	e8 88 6a 00 00       	call   c0017330 <Process::createThread(void (*)(void*), void*, int)>
c00108a8:	83 c4 14             	add    esp,0x14
c00108ab:	a3 10 73 03 c0       	mov    ds:0xc0037310,eax
c00108b0:	68 ec c0 02 c0       	push   0xc002c0ec
c00108b5:	e8 b3 d7 ff ff       	call   c000e06d <KeSetBootMessage(char const*)>
c00108ba:	c6 05 0d 71 03 c0 01 	mov    BYTE PTR ds:0xc003710d,0x1
c00108c1:	e8 e9 0b 00 00       	call   c00114af <KeInitRand()>
c00108c6:	e8 9f 78 00 00       	call   c001816a <Vm::initialise8086()>
c00108cb:	e8 b8 82 ff ff       	call   c0008b88 <Fs::initVFS()>
c00108d0:	c7 04 24 b8 bc 02 c0 	mov    DWORD PTR [esp],0xc002bcb8
c00108d7:	e8 91 d7 ff ff       	call   c000e06d <KeSetBootMessage(char const*)>
c00108dc:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c00108e1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00108e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00108e9:	6a 00                	push   0x0
c00108eb:	6a 00                	push   0x0
c00108ed:	6a 00                	push   0x0
c00108ef:	50                   	push   eax
c00108f0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00108f3:	83 c4 14             	add    esp,0x14
c00108f6:	68 ec c0 02 c0       	push   0xc002c0ec
c00108fb:	e8 6d d7 ff ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0010900:	e8 67 7a ff ff       	call   c000836c <KeInitialiseSymlinks()>
c0010905:	e8 b8 ea ff ff       	call   c000f3c2 <KeLoadSystemEnv()>
c001090a:	e8 e5 09 00 00       	call   c00112f4 <KeSetupPowerManager()>
c001090f:	c7 04 24 71 c0 02 c0 	mov    DWORD PTR [esp],0xc002c071
c0010916:	e8 52 d7 ff ff       	call   c000e06d <KeSetBootMessage(char const*)>
c001091b:	83 c4 0c             	add    esp,0xc
c001091e:	8b 0d 08 71 03 c0    	mov    ecx,DWORD PTR ds:0xc0037108
c0010924:	6a 00                	push   0x0
c0010926:	51                   	push   ecx
c0010927:	68 82 c0 02 c0       	push   0xc002c082
c001092c:	e8 2f 63 00 00       	call   c0016c60 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0010931:	83 c4 10             	add    esp,0x10
c0010934:	83 ec 0c             	sub    esp,0xc
c0010937:	6a 02                	push   0x2
c0010939:	e8 7e 6d 00 00       	call   c00176bc <blockTask(TaskState)>
c001093e:	83 c4 10             	add    esp,0x10
c0010941:	eb f1                	jmp    c0010934 <KeFirstTask()+0xf5>

c0010943 <KeEntryPoint>:
c0010943:	57                   	push   edi
c0010944:	bf f9 03 00 00       	mov    edi,0x3f9
c0010949:	56                   	push   esi
c001094a:	31 f6                	xor    esi,esi
c001094c:	53                   	push   ebx
c001094d:	83 ec 20             	sub    esp,0x20
c0010950:	e8 db d6 ff ff       	call   c000e030 <KeInitialiseBootConfigurationFlags()>
c0010955:	89 f0                	mov    eax,esi
c0010957:	89 fa                	mov    edx,edi
c0010959:	ee                   	out    dx,al
c001095a:	bb fb 03 00 00       	mov    ebx,0x3fb
c001095f:	b0 80                	mov    al,0x80
c0010961:	89 da                	mov    edx,ebx
c0010963:	ee                   	out    dx,al
c0010964:	b1 03                	mov    cl,0x3
c0010966:	ba f8 03 00 00       	mov    edx,0x3f8
c001096b:	88 c8                	mov    al,cl
c001096d:	ee                   	out    dx,al
c001096e:	89 f0                	mov    eax,esi
c0010970:	89 fa                	mov    edx,edi
c0010972:	ee                   	out    dx,al
c0010973:	88 c8                	mov    al,cl
c0010975:	89 da                	mov    edx,ebx
c0010977:	ee                   	out    dx,al
c0010978:	b0 c7                	mov    al,0xc7
c001097a:	ba fa 03 00 00       	mov    edx,0x3fa
c001097f:	ee                   	out    dx,al
c0010980:	b0 0b                	mov    al,0xb
c0010982:	ba fc 03 00 00       	mov    edx,0x3fc
c0010987:	ee                   	out    dx,al
c0010988:	83 ec 0c             	sub    esp,0xc
c001098b:	68 9e c0 02 c0       	push   0xc002c09e
c0010990:	e8 e7 65 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010995:	e8 a4 d6 ff ff       	call   c000e03e <KeDisplaySplashScreen()>
c001099a:	a1 24 05 00 00       	mov    eax,ds:0x524
c001099f:	05 ff 0f 00 00       	add    eax,0xfff
c00109a4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00109a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00109ac:	e8 41 04 00 00       	call   c0010df2 <Phys::physicalMemorySetup(unsigned int)>
c00109b1:	e8 23 38 00 00       	call   c00141d9 <Virt::virtualMemorySetup()>
c00109b6:	e8 d3 d5 ff ff       	call   c000df8e <KeInitialiseAtexit()>
c00109bb:	58                   	pop    eax
c00109bc:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00109c0:	53                   	push   ebx
c00109c1:	e8 fa 3a 00 00       	call   c00144c0 <VAS::VAS()>
c00109c6:	89 1d 90 72 03 c0    	mov    DWORD PTR ds:0xc0037290,ebx
c00109cc:	e8 77 7c 01 00       	call   c0028648 <_init>
c00109d1:	c7 04 24 b5 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0b5
c00109d8:	e8 90 d6 ff ff       	call   c000e06d <KeSetBootMessage(char const*)>
c00109dd:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c00109e4:	e8 26 fc ff ff       	call   c001060f <malloc>
c00109e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00109ec:	89 c6                	mov    esi,eax
c00109ee:	e8 01 e4 ff ff       	call   c000edf4 <Computer::Computer()>
c00109f3:	8b 15 90 72 03 c0    	mov    edx,DWORD PTR ds:0xc0037290
c00109f9:	89 35 08 71 03 c0    	mov    DWORD PTR ds:0xc0037108,esi
c00109ff:	52                   	push   edx
c0010a00:	6a 00                	push   0x0
c0010a02:	6a 00                	push   0x0
c0010a04:	56                   	push   esi
c0010a05:	e8 2e e4 ff ff       	call   c000ee38 <Computer::open(int, int, void*)>
c0010a0a:	83 c4 14             	add    esp,0x14
c0010a0d:	68 10 c1 02 c0       	push   0xc002c110
c0010a12:	e8 56 d6 ff ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0010a17:	e8 2d ab 00 00       	call   c001b549 <HalInitialiseCoprocessor()>
c0010a1c:	c7 04 24 cf c0 02 c0 	mov    DWORD PTR [esp],0xc002c0cf
c0010a23:	e8 45 d6 ff ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0010a28:	c7 04 24 3f 08 01 c0 	mov    DWORD PTR [esp],0xc001083f
c0010a2f:	e8 80 6a 00 00       	call   c00174b4 <setupMultitasking(void (*)())>
c0010a34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a37:	e8 3a 3b 00 00       	call   c0014576 <VAS::~VAS()>
c0010a3c:	83 c4 30             	add    esp,0x30
c0010a3f:	5b                   	pop    ebx
c0010a40:	5e                   	pop    esi
c0010a41:	5f                   	pop    edi
c0010a42:	c3                   	ret    
c0010a43:	90                   	nop

c0010a44 <Mutex::Mutex()>:
c0010a44:	83 ec 0c             	sub    esp,0xc
c0010a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4b:	83 ec 08             	sub    esp,0x8
c0010a4e:	6a 01                	push   0x1
c0010a50:	50                   	push   eax
c0010a51:	e8 fa 0c 00 00       	call   c0011750 <Semaphore::Semaphore(int)>
c0010a56:	83 c4 10             	add    esp,0x10
c0010a59:	90                   	nop
c0010a5a:	83 c4 0c             	add    esp,0xc
c0010a5d:	c3                   	ret    

c0010a5e <KeIsKernelInPanic()>:
c0010a5e:	a0 64 71 03 c0       	mov    al,ds:0xc0037164
c0010a63:	c3                   	ret    

c0010a64 <KePanic(char const*)>:
c0010a64:	c6 05 64 71 03 c0 01 	mov    BYTE PTR ds:0xc0037164,0x1
c0010a6b:	e9 77 ab 00 00       	jmp    c001b5e7 <HalPanic(char const*)>

c0010a70 <Phys::allocateDMA(unsigned long)>:
c0010a70:	55                   	push   ebp
c0010a71:	31 ed                	xor    ebp,ebp
c0010a73:	57                   	push   edi
c0010a74:	56                   	push   esi
c0010a75:	53                   	push   ebx
c0010a76:	31 db                	xor    ebx,ebx
c0010a78:	83 ec 1c             	sub    esp,0x1c
c0010a7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a7f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010a87:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0010a8d:	31 c0                	xor    eax,eax
c0010a8f:	c1 ef 0c             	shr    edi,0xc
c0010a92:	eb 1b                	jmp    c0010aaf <Phys::allocateDMA(unsigned long)+0x3f>
c0010a94:	85 c0                	test   eax,eax
c0010a96:	75 06                	jne    c0010a9e <Phys::allocateDMA(unsigned long)+0x2e>
c0010a98:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010a9c:	89 dd                	mov    ebp,ebx
c0010a9e:	8d 70 01             	lea    esi,[eax+0x1]
c0010aa1:	39 f7                	cmp    edi,esi
c0010aa3:	74 37                	je     c0010adc <Phys::allocateDMA(unsigned long)+0x6c>
c0010aa5:	89 f0                	mov    eax,esi
c0010aa7:	83 c3 01             	add    ebx,0x1
c0010aaa:	83 fb 0f             	cmp    ebx,0xf
c0010aad:	7f 13                	jg     c0010ac2 <Phys::allocateDMA(unsigned long)+0x52>
c0010aaf:	80 bb 80 71 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc8e80],0x0
c0010ab6:	74 dc                	je     c0010a94 <Phys::allocateDMA(unsigned long)+0x24>
c0010ab8:	31 c0                	xor    eax,eax
c0010aba:	83 c3 01             	add    ebx,0x1
c0010abd:	83 fb 0f             	cmp    ebx,0xf
c0010ac0:	7e ed                	jle    c0010aaf <Phys::allocateDMA(unsigned long)+0x3f>
c0010ac2:	83 ec 0c             	sub    esp,0xc
c0010ac5:	68 34 c1 02 c0       	push   0xc002c134
c0010aca:	e8 95 ff ff ff       	call   c0010a64 <KePanic(char const*)>
c0010acf:	83 c4 10             	add    esp,0x10
c0010ad2:	31 c0                	xor    eax,eax
c0010ad4:	83 c4 1c             	add    esp,0x1c
c0010ad7:	5b                   	pop    ebx
c0010ad8:	5e                   	pop    esi
c0010ad9:	5f                   	pop    edi
c0010ada:	5d                   	pop    ebp
c0010adb:	c3                   	ret    
c0010adc:	89 e9                	mov    ecx,ebp
c0010ade:	c1 f9 04             	sar    ecx,0x4
c0010ae1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010ae5:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0010ae9:	89 ca                	mov    edx,ecx
c0010aeb:	83 ea 01             	sub    edx,0x1
c0010aee:	79 03                	jns    c0010af3 <Phys::allocateDMA(unsigned long)+0x83>
c0010af0:	8d 51 0e             	lea    edx,[ecx+0xe]
c0010af3:	c1 fa 04             	sar    edx,0x4
c0010af6:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0010afa:	74 08                	je     c0010b04 <Phys::allocateDMA(unsigned long)+0x94>
c0010afc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0010b00:	31 c0                	xor    eax,eax
c0010b02:	eb b6                	jmp    c0010aba <Phys::allocateDMA(unsigned long)+0x4a>
c0010b04:	85 f6                	test   esi,esi
c0010b06:	74 17                	je     c0010b1f <Phys::allocateDMA(unsigned long)+0xaf>
c0010b08:	8d 95 80 71 03 c0    	lea    edx,[ebp-0x3ffc8e80]
c0010b0e:	8d 84 05 81 71 03 c0 	lea    eax,[ebp+eax*1-0x3ffc8e7f]
c0010b15:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0010b18:	83 c2 01             	add    edx,0x1
c0010b1b:	39 d0                	cmp    eax,edx
c0010b1d:	75 f6                	jne    c0010b15 <Phys::allocateDMA(unsigned long)+0xa5>
c0010b1f:	a1 78 71 03 c0       	mov    eax,ds:0xc0037178
c0010b24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010b28:	01 f8                	add    eax,edi
c0010b2a:	85 d2                	test   edx,edx
c0010b2c:	a3 78 71 03 c0       	mov    ds:0xc0037178,eax
c0010b31:	74 17                	je     c0010b4a <Phys::allocateDMA(unsigned long)+0xda>
c0010b33:	83 ec 0c             	sub    esp,0xc
c0010b36:	68 34 c1 02 c0       	push   0xc002c134
c0010b3b:	e8 24 ff ff ff       	call   c0010a64 <KePanic(char const*)>
c0010b40:	83 c4 10             	add    esp,0x10
c0010b43:	89 f0                	mov    eax,esi
c0010b45:	e9 5d ff ff ff       	jmp    c0010aa7 <Phys::allocateDMA(unsigned long)+0x37>
c0010b4a:	c1 e5 0c             	shl    ebp,0xc
c0010b4d:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0010b53:	e9 7c ff ff ff       	jmp    c0010ad4 <Phys::allocateDMA(unsigned long)+0x64>

c0010b58 <Phys::freeDMA(unsigned long, unsigned long)>:
c0010b58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b5c:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0010b62:	a1 78 71 03 c0       	mov    eax,ds:0xc0037178
c0010b67:	c1 ea 0c             	shr    edx,0xc
c0010b6a:	29 d0                	sub    eax,edx
c0010b6c:	a3 78 71 03 c0       	mov    ds:0xc0037178,eax
c0010b71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b75:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0010b7a:	c1 e8 0c             	shr    eax,0xc
c0010b7d:	85 d2                	test   edx,edx
c0010b7f:	74 11                	je     c0010b92 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0010b81:	05 80 71 03 c0       	add    eax,0xc0037180
c0010b86:	01 c2                	add    edx,eax
c0010b88:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010b8b:	83 c0 01             	add    eax,0x1
c0010b8e:	39 d0                	cmp    eax,edx
c0010b90:	75 f6                	jne    c0010b88 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0010b92:	c3                   	ret    

c0010b93 <Phys::setPageState(unsigned long, bool)>:
c0010b93:	57                   	push   edi
c0010b94:	56                   	push   esi
c0010b95:	8b 35 18 0a 03 c0    	mov    esi,DWORD PTR ds:0xc0030a18
c0010b9b:	53                   	push   ebx
c0010b9c:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0010ba1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ba5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010ba9:	0f b6 c0             	movzx  eax,al
c0010bac:	89 ca                	mov    edx,ecx
c0010bae:	83 e1 07             	and    ecx,0x7
c0010bb1:	c1 ea 03             	shr    edx,0x3
c0010bb4:	d3 c3                	rol    ebx,cl
c0010bb6:	01 d6                	add    esi,edx
c0010bb8:	d3 e0                	shl    eax,cl
c0010bba:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0010bbd:	21 fb                	and    ebx,edi
c0010bbf:	88 1e                	mov    BYTE PTR [esi],bl
c0010bc1:	8b 1d 18 0a 03 c0    	mov    ebx,DWORD PTR ds:0xc0030a18
c0010bc7:	01 da                	add    edx,ebx
c0010bc9:	8a 0a                	mov    cl,BYTE PTR [edx]
c0010bcb:	09 c8                	or     eax,ecx
c0010bcd:	88 02                	mov    BYTE PTR [edx],al
c0010bcf:	5b                   	pop    ebx
c0010bd0:	5e                   	pop    esi
c0010bd1:	5f                   	pop    edi
c0010bd2:	c3                   	ret    

c0010bd3 <Phys::getPageState(unsigned long)>:
c0010bd3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010bd7:	8b 15 18 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030a18
c0010bdd:	89 c8                	mov    eax,ecx
c0010bdf:	83 e1 07             	and    ecx,0x7
c0010be2:	c1 e8 03             	shr    eax,0x3
c0010be5:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0010be9:	d3 f8                	sar    eax,cl
c0010beb:	83 e0 01             	and    eax,0x1
c0010bee:	c3                   	ret    

c0010bef <Phys::freePage(unsigned long)>:
c0010bef:	53                   	push   ebx
c0010bf0:	83 ec 08             	sub    esp,0x8
c0010bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf7:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0010bfd:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0010c03:	76 41                	jbe    c0010c46 <Phys::freePage(unsigned long)+0x57>
c0010c05:	c1 e8 0c             	shr    eax,0xc
c0010c08:	50                   	push   eax
c0010c09:	89 c3                	mov    ebx,eax
c0010c0b:	e8 c3 ff ff ff       	call   c0010bd3 <Phys::getPageState(unsigned long)>
c0010c10:	5a                   	pop    edx
c0010c11:	84 c0                	test   al,al
c0010c13:	74 20                	je     c0010c35 <Phys::freePage(unsigned long)+0x46>
c0010c15:	83 ec 08             	sub    esp,0x8
c0010c18:	a1 78 71 03 c0       	mov    eax,ds:0xc0037178
c0010c1d:	6a 00                	push   0x0
c0010c1f:	83 e8 01             	sub    eax,0x1
c0010c22:	53                   	push   ebx
c0010c23:	a3 78 71 03 c0       	mov    ds:0xc0037178,eax
c0010c28:	e8 66 ff ff ff       	call   c0010b93 <Phys::setPageState(unsigned long, bool)>
c0010c2d:	83 c4 10             	add    esp,0x10
c0010c30:	83 c4 08             	add    esp,0x8
c0010c33:	5b                   	pop    ebx
c0010c34:	c3                   	ret    
c0010c35:	c7 44 24 10 46 c1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002c146
c0010c3d:	83 c4 08             	add    esp,0x8
c0010c40:	5b                   	pop    ebx
c0010c41:	e9 1e fe ff ff       	jmp    c0010a64 <KePanic(char const*)>
c0010c46:	68 00 10 00 00       	push   0x1000
c0010c4b:	50                   	push   eax
c0010c4c:	e8 07 ff ff ff       	call   c0010b58 <Phys::freeDMA(unsigned long, unsigned long)>
c0010c51:	59                   	pop    ecx
c0010c52:	5b                   	pop    ebx
c0010c53:	83 c4 08             	add    esp,0x8
c0010c56:	5b                   	pop    ebx
c0010c57:	c3                   	ret    

c0010c58 <Phys::allocatePage()>:
c0010c58:	56                   	push   esi
c0010c59:	53                   	push   ebx
c0010c5a:	83 ec 14             	sub    esp,0x14
c0010c5d:	8b 35 6c 71 03 c0    	mov    esi,DWORD PTR ds:0xc003716c
c0010c63:	89 f3                	mov    ebx,esi
c0010c65:	eb 18                	jmp    c0010c7f <Phys::allocatePage()+0x27>
c0010c67:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010c6d:	75 0c                	jne    c0010c7b <Phys::allocatePage()+0x23>
c0010c6f:	c7 05 6c 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003716c,0x0
c0010c79:	31 db                	xor    ebx,ebx
c0010c7b:	39 de                	cmp    esi,ebx
c0010c7d:	74 5b                	je     c0010cda <Phys::allocatePage()+0x82>
c0010c7f:	53                   	push   ebx
c0010c80:	e8 4e ff ff ff       	call   c0010bd3 <Phys::getPageState(unsigned long)>
c0010c85:	59                   	pop    ecx
c0010c86:	84 c0                	test   al,al
c0010c88:	74 29                	je     c0010cb3 <Phys::allocatePage()+0x5b>
c0010c8a:	83 c3 01             	add    ebx,0x1
c0010c8d:	89 1d 6c 71 03 c0    	mov    DWORD PTR ds:0xc003716c,ebx
c0010c93:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010c99:	76 cc                	jbe    c0010c67 <Phys::allocatePage()+0xf>
c0010c9b:	83 ec 0c             	sub    esp,0xc
c0010c9e:	68 5c c1 02 c0       	push   0xc002c15c
c0010ca3:	e8 bc fd ff ff       	call   c0010a64 <KePanic(char const*)>
c0010ca8:	8b 1d 6c 71 03 c0    	mov    ebx,DWORD PTR ds:0xc003716c
c0010cae:	83 c4 10             	add    esp,0x10
c0010cb1:	eb b4                	jmp    c0010c67 <Phys::allocatePage()+0xf>
c0010cb3:	6a 01                	push   0x1
c0010cb5:	53                   	push   ebx
c0010cb6:	e8 d8 fe ff ff       	call   c0010b93 <Phys::setPageState(unsigned long, bool)>
c0010cbb:	8b 1d 78 71 03 c0    	mov    ebx,DWORD PTR ds:0xc0037178
c0010cc1:	a1 6c 71 03 c0       	mov    eax,ds:0xc003716c
c0010cc6:	83 c3 01             	add    ebx,0x1
c0010cc9:	5e                   	pop    esi
c0010cca:	89 1d 78 71 03 c0    	mov    DWORD PTR ds:0xc0037178,ebx
c0010cd0:	c1 e0 0c             	shl    eax,0xc
c0010cd3:	5a                   	pop    edx
c0010cd4:	83 c4 14             	add    esp,0x14
c0010cd7:	5b                   	pop    ebx
c0010cd8:	5e                   	pop    esi
c0010cd9:	c3                   	ret    
c0010cda:	83 ec 0c             	sub    esp,0xc
c0010cdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ce2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010ce5:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0010ceb:	51                   	push   ecx
c0010cec:	e8 9f 43 00 00       	call   c0015090 <VAS::scanForEviction()>
c0010cf1:	83 c4 10             	add    esp,0x10
c0010cf4:	85 c0                	test   eax,eax
c0010cf6:	75 1b                	jne    c0010d13 <Phys::allocatePage()+0xbb>
c0010cf8:	83 ec 0c             	sub    esp,0xc
c0010cfb:	68 a4 c1 02 c0       	push   0xc002c1a4
c0010d00:	e8 5f fd ff ff       	call   c0010a64 <KePanic(char const*)>
c0010d05:	8b 1d 6c 71 03 c0    	mov    ebx,DWORD PTR ds:0xc003716c
c0010d0b:	83 c4 10             	add    esp,0x10
c0010d0e:	e9 6c ff ff ff       	jmp    c0010c7f <Phys::allocatePage()+0x27>
c0010d13:	83 ec 08             	sub    esp,0x8
c0010d16:	8b 15 78 71 03 c0    	mov    edx,DWORD PTR ds:0xc0037178
c0010d1c:	6a 01                	push   0x1
c0010d1e:	83 c2 01             	add    edx,0x1
c0010d21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010d25:	89 15 78 71 03 c0    	mov    DWORD PTR ds:0xc0037178,edx
c0010d2b:	89 c2                	mov    edx,eax
c0010d2d:	c1 ea 0c             	shr    edx,0xc
c0010d30:	52                   	push   edx
c0010d31:	e8 5d fe ff ff       	call   c0010b93 <Phys::setPageState(unsigned long, bool)>
c0010d36:	83 c4 10             	add    esp,0x10
c0010d39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d3d:	eb 95                	jmp    c0010cd4 <Phys::allocatePage()+0x7c>

c0010d3f <Phys::allocateContiguousPages(int)>:
c0010d3f:	57                   	push   edi
c0010d40:	56                   	push   esi
c0010d41:	53                   	push   ebx
c0010d42:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010d46:	fa                   	cli    
c0010d47:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c0010d4d:	83 ec 0c             	sub    esp,0xc
c0010d50:	83 c2 01             	add    edx,0x1
c0010d53:	68 d4 c1 02 c0       	push   0xc002c1d4
c0010d58:	89 15 30 73 03 c0    	mov    DWORD PTR ds:0xc0037330,edx
c0010d5e:	31 db                	xor    ebx,ebx
c0010d60:	e8 17 62 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010d65:	83 c4 10             	add    esp,0x10
c0010d68:	85 db                	test   ebx,ebx
c0010d6a:	75 11                	jne    c0010d7d <Phys::allocateContiguousPages(int)+0x3e>
c0010d6c:	e8 e7 fe ff ff       	call   c0010c58 <Phys::allocatePage()>
c0010d71:	83 ff 01             	cmp    edi,0x1
c0010d74:	89 c6                	mov    esi,eax
c0010d76:	74 21                	je     c0010d99 <Phys::allocateContiguousPages(int)+0x5a>
c0010d78:	bb 01 00 00 00       	mov    ebx,0x1
c0010d7d:	e8 d6 fe ff ff       	call   c0010c58 <Phys::allocatePage()>
c0010d82:	89 da                	mov    edx,ebx
c0010d84:	c1 e2 0c             	shl    edx,0xc
c0010d87:	01 f2                	add    edx,esi
c0010d89:	39 c2                	cmp    edx,eax
c0010d8b:	74 24                	je     c0010db1 <Phys::allocateContiguousPages(int)+0x72>
c0010d8d:	bb 01 00 00 00       	mov    ebx,0x1
c0010d92:	89 c6                	mov    esi,eax
c0010d94:	83 ff 01             	cmp    edi,0x1
c0010d97:	75 e4                	jne    c0010d7d <Phys::allocateContiguousPages(int)+0x3e>
c0010d99:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0010da1:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0010da6:	85 c0                	test   eax,eax
c0010da8:	75 01                	jne    c0010dab <Phys::allocateContiguousPages(int)+0x6c>
c0010daa:	fb                   	sti    
c0010dab:	89 f0                	mov    eax,esi
c0010dad:	5b                   	pop    ebx
c0010dae:	5e                   	pop    esi
c0010daf:	5f                   	pop    edi
c0010db0:	c3                   	ret    
c0010db1:	83 c3 01             	add    ebx,0x1
c0010db4:	39 fb                	cmp    ebx,edi
c0010db6:	75 b0                	jne    c0010d68 <Phys::allocateContiguousPages(int)+0x29>
c0010db8:	eb df                	jmp    c0010d99 <Phys::allocateContiguousPages(int)+0x5a>

c0010dba <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010dba:	56                   	push   esi
c0010dbb:	53                   	push   ebx
c0010dbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010dc0:	39 1d 70 71 03 c0    	cmp    DWORD PTR ds:0xc0037170,ebx
c0010dc6:	73 06                	jae    c0010dce <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010dc8:	89 1d 70 71 03 c0    	mov    DWORD PTR ds:0xc0037170,ebx
c0010dce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010dd2:	c1 eb 0c             	shr    ebx,0xc
c0010dd5:	c1 e8 0c             	shr    eax,0xc
c0010dd8:	39 d8                	cmp    eax,ebx
c0010dda:	73 13                	jae    c0010def <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010ddc:	6a 00                	push   0x0
c0010dde:	8d 70 01             	lea    esi,[eax+0x1]
c0010de1:	50                   	push   eax
c0010de2:	e8 ac fd ff ff       	call   c0010b93 <Phys::setPageState(unsigned long, bool)>
c0010de7:	5a                   	pop    edx
c0010de8:	89 f0                	mov    eax,esi
c0010dea:	59                   	pop    ecx
c0010deb:	39 f3                	cmp    ebx,esi
c0010ded:	75 ed                	jne    c0010ddc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010def:	5b                   	pop    ebx
c0010df0:	5e                   	pop    esi
c0010df1:	c3                   	ret    

c0010df2 <Phys::physicalMemorySetup(unsigned int)>:
c0010df2:	55                   	push   ebp
c0010df3:	57                   	push   edi
c0010df4:	56                   	push   esi
c0010df5:	53                   	push   ebx
c0010df6:	83 ec 40             	sub    esp,0x40
c0010df9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0010dfd:	6a 10                	push   0x10
c0010dff:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0010e05:	6a 00                	push   0x0
c0010e07:	68 80 71 03 c0       	push   0xc0037180
c0010e0c:	e8 df f6 fe ff       	call   c00004f0 <memset>
c0010e11:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c0010e17:	31 db                	xor    ebx,ebx
c0010e19:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010e1d:	5a                   	pop    edx
c0010e1e:	59                   	pop    ecx
c0010e1f:	50                   	push   eax
c0010e20:	68 61 c1 02 c0       	push   0xc002c161
c0010e25:	e8 52 61 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010e2a:	83 c4 10             	add    esp,0x10
c0010e2d:	83 ec 08             	sub    esp,0x8
c0010e30:	6a 01                	push   0x1
c0010e32:	53                   	push   ebx
c0010e33:	83 c3 01             	add    ebx,0x1
c0010e36:	e8 58 fd ff ff       	call   c0010b93 <Phys::setPageState(unsigned long, bool)>
c0010e3b:	83 c4 10             	add    esp,0x10
c0010e3e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010e44:	75 e7                	jne    c0010e2d <Phys::physicalMemorySetup(unsigned int)+0x3b>
c0010e46:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0010e4d:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010e54:	c1 e0 08             	shl    eax,0x8
c0010e57:	09 c2                	or     edx,eax
c0010e59:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0010e5d:	0f 84 b5 01 00 00    	je     c0011018 <Phys::physicalMemorySetup(unsigned int)+0x226>
c0010e63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e67:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e6f:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010e74:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010e78:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010e80:	eb 1c                	jmp    c0010e9e <Phys::physicalMemorySetup(unsigned int)+0xac>
c0010e82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e86:	83 c3 18             	add    ebx,0x18
c0010e89:	83 c0 01             	add    eax,0x1
c0010e8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010e90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e94:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010e98:	0f 84 5d 01 00 00    	je     c0010ffb <Phys::physicalMemorySetup(unsigned int)+0x209>
c0010e9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010ea1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ea4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010ea7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010eab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010eaf:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010eb1:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010eb4:	01 f0                	add    eax,esi
c0010eb6:	55                   	push   ebp
c0010eb7:	11 fa                	adc    edx,edi
c0010eb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ebd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010ec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ec5:	50                   	push   eax
c0010ec6:	56                   	push   esi
c0010ec7:	68 34 c2 02 c0       	push   0xc002c234
c0010ecc:	e8 ab 60 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010ed1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ed5:	83 c4 10             	add    esp,0x10
c0010ed8:	09 f8                	or     eax,edi
c0010eda:	0f 85 1b 01 00 00    	jne    c0010ffb <Phys::physicalMemorySetup(unsigned int)+0x209>
c0010ee0:	83 fd 01             	cmp    ebp,0x1
c0010ee3:	75 9d                	jne    c0010e82 <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010ee5:	ba 00 00 08 00       	mov    edx,0x80000
c0010eea:	89 c1                	mov    ecx,eax
c0010eec:	39 f2                	cmp    edx,esi
c0010eee:	19 f9                	sbb    ecx,edi
c0010ef0:	0f 82 ab 00 00 00    	jb     c0010fa1 <Phys::physicalMemorySetup(unsigned int)+0x1af>
c0010ef6:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010efa:	89 c1                	mov    ecx,eax
c0010efc:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010f00:	0f 83 9b 00 00 00    	jae    c0010fa1 <Phys::physicalMemorySetup(unsigned int)+0x1af>
c0010f06:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010f0b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010f0f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010f13:	39 fa                	cmp    edx,edi
c0010f15:	19 e8                	sbb    eax,ebp
c0010f17:	0f 82 e6 00 00 00    	jb     c0011003 <Phys::physicalMemorySetup(unsigned int)+0x211>
c0010f1d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010f21:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010f25:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010f2b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010f30:	83 d5 ff             	adc    ebp,0xffffffff
c0010f33:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010f37:	31 c0                	xor    eax,eax
c0010f39:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010f3d:	39 fa                	cmp    edx,edi
c0010f3f:	89 c1                	mov    ecx,eax
c0010f41:	19 e9                	sbb    ecx,ebp
c0010f43:	0f 83 39 ff ff ff    	jae    c0010e82 <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010f49:	be 00 00 08 00       	mov    esi,0x80000
c0010f4e:	83 ec 04             	sub    esp,0x4
c0010f51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010f55:	57                   	push   edi
c0010f56:	56                   	push   esi
c0010f57:	68 58 c2 02 c0       	push   0xc002c258
c0010f5c:	e8 1b 60 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010f61:	5a                   	pop    edx
c0010f62:	59                   	pop    ecx
c0010f63:	57                   	push   edi
c0010f64:	56                   	push   esi
c0010f65:	e8 50 fe ff ff       	call   c0010dba <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010f6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010f6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010f72:	8b 35 7c 71 03 c0    	mov    esi,DWORD PTR ds:0xc003717c
c0010f78:	83 c4 0c             	add    esp,0xc
c0010f7b:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010f7f:	01 f0                	add    eax,esi
c0010f81:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010f88:	a3 7c 71 03 c0       	mov    ds:0xc003717c,eax
c0010f8d:	52                   	push   edx
c0010f8e:	50                   	push   eax
c0010f8f:	68 87 c1 02 c0       	push   0xc002c187
c0010f94:	e8 e3 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010f99:	83 c4 10             	add    esp,0x10
c0010f9c:	e9 e1 fe ff ff       	jmp    c0010e82 <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010fa1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010fa5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fa9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010fad:	39 ea                	cmp    edx,ebp
c0010faf:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010fb3:	0f 82 c9 fe ff ff    	jb     c0010e82 <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010fb9:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010fbe:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010fc2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010fc6:	0f 83 b6 fe ff ff    	jae    c0010e82 <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010fcc:	39 ee                	cmp    esi,ebp
c0010fce:	89 f8                	mov    eax,edi
c0010fd0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010fd4:	0f 83 74 ff ff ff    	jae    c0010f4e <Phys::physicalMemorySetup(unsigned int)+0x15c>
c0010fda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010fde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fe2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010fe6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010fea:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010fee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010ff2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010ff6:	e9 53 ff ff ff       	jmp    c0010f4e <Phys::physicalMemorySetup(unsigned int)+0x15c>
c0010ffb:	83 c4 3c             	add    esp,0x3c
c0010ffe:	5b                   	pop    ebx
c0010fff:	5e                   	pop    esi
c0011000:	5f                   	pop    edi
c0011001:	5d                   	pop    ebp
c0011002:	c3                   	ret    
c0011003:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001100b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011013:	e9 05 ff ff ff       	jmp    c0010f1d <Phys::physicalMemorySetup(unsigned int)+0x12b>
c0011018:	c7 44 24 50 79 c1 02 c0 	mov    DWORD PTR [esp+0x50],0xc002c179
c0011020:	83 c4 3c             	add    esp,0x3c
c0011023:	5b                   	pop    ebx
c0011024:	5e                   	pop    esi
c0011025:	5f                   	pop    edi
c0011026:	5d                   	pop    ebp
c0011027:	e9 38 fa ff ff       	jmp    c0010a64 <KePanic(char const*)>

c001102c <Pipe::isAtty()>:
c001102c:	31 c0                	xor    eax,eax
c001102e:	c3                   	ret    
c001102f:	90                   	nop

c0011030 <Pipe::~Pipe()>:
c0011030:	83 ec 0c             	sub    esp,0xc
c0011033:	ba c4 c2 02 c0       	mov    edx,0xc002c2c4
c0011038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001103c:	89 10                	mov    DWORD PTR [eax],edx
c001103e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011042:	83 ec 0c             	sub    esp,0xc
c0011045:	50                   	push   eax
c0011046:	e8 43 2d 00 00       	call   c0013d8e <UnixFile::~UnixFile()>
c001104b:	83 c4 10             	add    esp,0x10
c001104e:	90                   	nop
c001104f:	83 c4 0c             	add    esp,0xc
c0011052:	c3                   	ret    
c0011053:	90                   	nop

c0011054 <Pipe::~Pipe()>:
c0011054:	83 ec 0c             	sub    esp,0xc
c0011057:	83 ec 0c             	sub    esp,0xc
c001105a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105e:	e8 cd ff ff ff       	call   c0011030 <Pipe::~Pipe()>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	83 ec 08             	sub    esp,0x8
c0011069:	6a 20                	push   0x20
c001106b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001106f:	e8 a4 d0 ff ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0011074:	83 c4 10             	add    esp,0x10
c0011077:	83 c4 0c             	add    esp,0xc
c001107a:	c3                   	ret    
c001107b:	90                   	nop

c001107c <Pipe::write(unsigned long long, void*, int*)>:
c001107c:	55                   	push   ebp
c001107d:	57                   	push   edi
c001107e:	56                   	push   esi
c001107f:	53                   	push   ebx
c0011080:	83 ec 1c             	sub    esp,0x1c
c0011083:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011087:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001108b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001108e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011092:	89 04 24             	mov    DWORD PTR [esp],eax
c0011095:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011099:	89 d8                	mov    eax,ebx
c001109b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001109e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00110a2:	89 d6                	mov    esi,edx
c00110a4:	89 d7                	mov    edi,edx
c00110a6:	c1 ff 1f             	sar    edi,0x1f
c00110a9:	03 34 24             	add    esi,DWORD PTR [esp]
c00110ac:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00110b0:	c1 f8 1f             	sar    eax,0x1f
c00110b3:	39 f3                	cmp    ebx,esi
c00110b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110bd:	19 f8                	sbb    eax,edi
c00110bf:	b8 01 00 00 00       	mov    eax,0x1
c00110c4:	72 6e                	jb     c0011134 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00110c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00110c9:	01 d0                	add    eax,edx
c00110cb:	99                   	cdq    
c00110cc:	f7 fb                	idiv   ebx
c00110ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110d2:	29 d3                	sub    ebx,edx
c00110d4:	89 d7                	mov    edi,edx
c00110d6:	89 de                	mov    esi,ebx
c00110d8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00110db:	c1 fb 1f             	sar    ebx,0x1f
c00110de:	39 f2                	cmp    edx,esi
c00110e0:	19 d8                	sbb    eax,ebx
c00110e2:	b8 00 00 00 00       	mov    eax,0x0
c00110e7:	72 04                	jb     c00110ed <Pipe::write(unsigned long long, void*, int*)+0x71>
c00110e9:	89 d0                	mov    eax,edx
c00110eb:	29 f0                	sub    eax,esi
c00110ed:	89 d3                	mov    ebx,edx
c00110ef:	29 c3                	sub    ebx,eax
c00110f1:	74 0b                	je     c00110fe <Pipe::write(unsigned long long, void*, int*)+0x82>
c00110f3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00110f6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00110fa:	89 d9                	mov    ecx,ebx
c00110fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110fe:	85 c0                	test   eax,eax
c0011100:	74 0d                	je     c001110f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0011102:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0011106:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0011109:	89 de                	mov    esi,ebx
c001110b:	89 c1                	mov    ecx,eax
c001110d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001110f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0011112:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0011117:	75 10                	jne    c0011129 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0011119:	83 ec 0c             	sub    esp,0xc
c001111c:	68 81 c2 02 c0       	push   0xc002c281
c0011121:	e8 3e f9 ff ff       	call   c0010a64 <KePanic(char const*)>
c0011126:	83 c4 10             	add    esp,0x10
c0011129:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001112d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0011130:	89 08                	mov    DWORD PTR [eax],ecx
c0011132:	31 c0                	xor    eax,eax
c0011134:	83 c4 1c             	add    esp,0x1c
c0011137:	5b                   	pop    ebx
c0011138:	5e                   	pop    esi
c0011139:	5f                   	pop    edi
c001113a:	5d                   	pop    ebp
c001113b:	c3                   	ret    

c001113c <Pipe::read(unsigned long long, void*, int*)>:
c001113c:	55                   	push   ebp
c001113d:	57                   	push   edi
c001113e:	56                   	push   esi
c001113f:	53                   	push   ebx
c0011140:	83 ec 1c             	sub    esp,0x1c
c0011143:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011147:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001114b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001114f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0011152:	89 c8                	mov    eax,ecx
c0011154:	99                   	cdq    
c0011155:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0011159:	74 27                	je     c0011182 <Pipe::read(unsigned long long, void*, int*)+0x46>
c001115b:	39 f9                	cmp    ecx,edi
c001115d:	89 d1                	mov    ecx,edx
c001115f:	19 f1                	sbb    ecx,esi
c0011161:	73 1f                	jae    c0011182 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0011163:	fa                   	cli    
c0011164:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001116a:	e8 8d 64 00 00       	call   c00175fc <schedule()>
c001116f:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0011176:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001117d:	75 d0                	jne    c001114f <Pipe::read(unsigned long long, void*, int*)+0x13>
c001117f:	fb                   	sti    
c0011180:	eb cd                	jmp    c001114f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0011182:	39 f8                	cmp    eax,edi
c0011184:	89 d1                	mov    ecx,edx
c0011186:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011189:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001118d:	19 f1                	sbb    ecx,esi
c001118f:	73 07                	jae    c0011198 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c0011191:	89 04 24             	mov    DWORD PTR [esp],eax
c0011194:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011198:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c001119b:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c001119e:	29 f7                	sub    edi,esi
c00111a0:	89 f8                	mov    eax,edi
c00111a2:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00111a6:	99                   	cdq    
c00111a7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00111aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ae:	19 d0                	sbb    eax,edx
c00111b0:	73 07                	jae    c00111b9 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c00111b2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00111b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111b9:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00111bc:	89 ea                	mov    edx,ebp
c00111be:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00111c2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00111c7:	74 0d                	je     c00111d6 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c00111c9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00111cc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00111d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00111d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111d6:	85 d2                	test   edx,edx
c00111d8:	74 11                	je     c00111eb <Pipe::read(unsigned long long, void*, int*)+0xaf>
c00111da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111de:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00111e1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00111e5:	89 d1                	mov    ecx,edx
c00111e7:	89 c7                	mov    edi,eax
c00111e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111eb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00111ee:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00111f1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00111f4:	99                   	cdq    
c00111f5:	89 f7                	mov    edi,esi
c00111f7:	03 04 24             	add    eax,DWORD PTR [esp]
c00111fa:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00111fe:	c1 ff 1f             	sar    edi,0x1f
c0011201:	57                   	push   edi
c0011202:	56                   	push   esi
c0011203:	52                   	push   edx
c0011204:	50                   	push   eax
c0011205:	e8 4a 3a 01 00       	call   c0024c54 <__umoddi3>
c001120a:	83 c4 10             	add    esp,0x10
c001120d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0011210:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0011215:	75 10                	jne    c0011227 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0011217:	83 ec 0c             	sub    esp,0xc
c001121a:	68 9e c2 02 c0       	push   0xc002c29e
c001121f:	e8 40 f8 ff ff       	call   c0010a64 <KePanic(char const*)>
c0011224:	83 c4 10             	add    esp,0x10
c0011227:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001122b:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001122e:	89 10                	mov    DWORD PTR [eax],edx
c0011230:	83 c4 1c             	add    esp,0x1c
c0011233:	31 c0                	xor    eax,eax
c0011235:	5b                   	pop    ebx
c0011236:	5e                   	pop    esi
c0011237:	5f                   	pop    edi
c0011238:	5d                   	pop    ebp
c0011239:	c3                   	ret    

c001123a <Pipe::Pipe(int)>:
c001123a:	83 ec 0c             	sub    esp,0xc
c001123d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011241:	83 ec 08             	sub    esp,0x8
c0011244:	6a 00                	push   0x0
c0011246:	50                   	push   eax
c0011247:	e8 5c 29 00 00       	call   c0013ba8 <UnixFile::UnixFile(int)>
c001124c:	83 c4 10             	add    esp,0x10
c001124f:	ba c4 c2 02 c0       	mov    edx,0xc002c2c4
c0011254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011258:	89 10                	mov    DWORD PTR [eax],edx
c001125a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011262:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011269:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011274:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001127b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001127f:	83 ec 0c             	sub    esp,0xc
c0011282:	50                   	push   eax
c0011283:	e8 87 f3 ff ff       	call   c001060f <malloc>
c0011288:	83 c4 10             	add    esp,0x10
c001128b:	89 c2                	mov    edx,eax
c001128d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011291:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011298:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001129c:	90                   	nop
c001129d:	83 c4 0c             	add    esp,0xc
c00112a0:	c3                   	ret    

c00112a1 <KePowerThread(void*)>:
c00112a1:	83 ec 0c             	sub    esp,0xc
c00112a4:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c00112ab:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c00112b2:	75 01                	jne    c00112b5 <KePowerThread(void*)+0x14>
c00112b4:	fb                   	sti    
c00112b5:	c6 05 ac 71 03 c0 00 	mov    BYTE PTR ds:0xc00371ac,0x0
c00112bc:	50                   	push   eax
c00112bd:	50                   	push   eax
c00112be:	6a 00                	push   0x0
c00112c0:	6a 0a                	push   0xa
c00112c2:	e8 41 65 00 00       	call   c0017808 <sleep(unsigned long long)>
c00112c7:	83 05 e4 71 03 c0 0a 	add    DWORD PTR ds:0xc00371e4,0xa
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	eb e2                	jmp    c00112b5 <KePowerThread(void*)+0x14>

c00112d3 <KeChangePowerSettings(PowerSettings)>:
c00112d3:	57                   	push   edi
c00112d4:	b9 09 00 00 00       	mov    ecx,0x9
c00112d9:	56                   	push   esi
c00112da:	bf c0 71 03 c0       	mov    edi,0xc00371c0
c00112df:	fc                   	cld    
c00112e0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00112e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00112e6:	5e                   	pop    esi
c00112e7:	5f                   	pop    edi
c00112e8:	c3                   	ret    

c00112e9 <KeUserIOReceived()>:
c00112e9:	c7 05 e4 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371e4,0x0
c00112f3:	c3                   	ret    

c00112f4 <KeSetupPowerManager()>:
c00112f4:	83 ec 0c             	sub    esp,0xc
c00112f7:	c7 05 e4 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371e4,0x0
c0011301:	68 f0 00 00 00       	push   0xf0
c0011306:	c6 05 ac 71 03 c0 00 	mov    BYTE PTR ds:0xc00371ac,0x0
c001130d:	6a 00                	push   0x0
c001130f:	68 a1 12 01 c0       	push   0xc00112a1
c0011314:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c001131a:	e8 11 60 00 00       	call   c0017330 <Process::createThread(void (*)(void*), void*, int)>
c001131f:	c7 05 c0 71 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00371c0,0x2
c0011329:	c7 05 c4 71 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00371c4,0x1
c0011333:	c7 05 c8 71 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00371c8,0x3
c001133d:	c7 05 cc 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371cc,0x0
c0011347:	c7 05 d8 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371d8,0x0
c0011351:	c7 05 d0 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371d0,0x0
c001135b:	c7 05 dc 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371dc,0x0
c0011365:	c7 05 d4 71 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00371d4,0x3c
c001136f:	c7 05 e0 71 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00371e0,0x3c
c0011379:	83 c4 1c             	add    esp,0x1c
c001137c:	c3                   	ret    

c001137d <KePrepareShutdown()>:
c001137d:	83 ec 0c             	sub    esp,0xc
c0011380:	e8 5f cc ff ff       	call   c000dfe4 <KeExecuteAtexit()>
c0011385:	83 ec 0c             	sub    esp,0xc
c0011388:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001138d:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c0011393:	e8 64 96 ff ff       	call   c000a9fc <Device::closeAll()>
c0011398:	83 c4 1c             	add    esp,0x1c
c001139b:	c3                   	ret    

c001139c <KeRegisterShutdownHandler(void (*)())>:
c001139c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113a0:	a3 a8 71 03 c0       	mov    ds:0xc00371a8,eax
c00113a5:	c3                   	ret    

c00113a6 <KeRegisterRestartHandler(void (*)())>:
c00113a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113aa:	a3 a4 71 03 c0       	mov    ds:0xc00371a4,eax
c00113af:	c3                   	ret    

c00113b0 <KeRegisterSleepHandler(void (*)())>:
c00113b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113b4:	a3 a0 71 03 c0       	mov    ds:0xc00371a0,eax
c00113b9:	c3                   	ret    

c00113ba <KeShutdown()>:
c00113ba:	83 ec 0c             	sub    esp,0xc
c00113bd:	e8 bb ff ff ff       	call   c001137d <KePrepareShutdown()>
c00113c2:	a1 a8 71 03 c0       	mov    eax,ds:0xc00371a8
c00113c7:	85 c0                	test   eax,eax
c00113c9:	74 04                	je     c00113cf <KeShutdown()+0x15>
c00113cb:	ff d0                	call   eax
c00113cd:	eb 10                	jmp    c00113df <KeShutdown()+0x25>
c00113cf:	83 ec 0c             	sub    esp,0xc
c00113d2:	68 d8 c2 02 c0       	push   0xc002c2d8
c00113d7:	e8 88 f6 ff ff       	call   c0010a64 <KePanic(char const*)>
c00113dc:	83 c4 10             	add    esp,0x10
c00113df:	83 ec 0c             	sub    esp,0xc
c00113e2:	68 f9 c2 02 c0       	push   0xc002c2f9
c00113e7:	e8 78 f6 ff ff       	call   c0010a64 <KePanic(char const*)>
c00113ec:	83 c4 1c             	add    esp,0x1c
c00113ef:	c3                   	ret    

c00113f0 <KeSleep()>:
c00113f0:	a1 a0 71 03 c0       	mov    eax,ds:0xc00371a0
c00113f5:	85 c0                	test   eax,eax
c00113f7:	74 02                	je     c00113fb <KeSleep()+0xb>
c00113f9:	ff e0                	jmp    eax
c00113fb:	c3                   	ret    

c00113fc <KeHandlePowerButton()>:
c00113fc:	a1 c0 71 03 c0       	mov    eax,ds:0xc00371c0
c0011401:	83 f8 02             	cmp    eax,0x2
c0011404:	75 02                	jne    c0011408 <KeHandlePowerButton()+0xc>
c0011406:	eb b2                	jmp    c00113ba <KeShutdown()>
c0011408:	48                   	dec    eax
c0011409:	75 02                	jne    c001140d <KeHandlePowerButton()+0x11>
c001140b:	eb e3                	jmp    c00113f0 <KeSleep()>
c001140d:	c3                   	ret    

c001140e <KeHandleSleepButton()>:
c001140e:	a1 c4 71 03 c0       	mov    eax,ds:0xc00371c4
c0011413:	83 f8 02             	cmp    eax,0x2
c0011416:	75 02                	jne    c001141a <KeHandleSleepButton()+0xc>
c0011418:	eb a0                	jmp    c00113ba <KeShutdown()>
c001141a:	48                   	dec    eax
c001141b:	75 02                	jne    c001141f <KeHandleSleepButton()+0x11>
c001141d:	eb d1                	jmp    c00113f0 <KeSleep()>
c001141f:	c3                   	ret    

c0011420 <KeRestart()>:
c0011420:	83 ec 0c             	sub    esp,0xc
c0011423:	e8 55 ff ff ff       	call   c001137d <KePrepareShutdown()>
c0011428:	a1 a4 71 03 c0       	mov    eax,ds:0xc00371a4
c001142d:	85 c0                	test   eax,eax
c001142f:	74 02                	je     c0011433 <KeRestart()+0x13>
c0011431:	ff d0                	call   eax
c0011433:	83 ec 0c             	sub    esp,0xc
c0011436:	68 1d c3 02 c0       	push   0xc002c31d
c001143b:	e8 24 f6 ff ff       	call   c0010a64 <KePanic(char const*)>
c0011440:	83 c4 1c             	add    esp,0x1c
c0011443:	c3                   	ret    

c0011444 <KeRand()>:
c0011444:	69 05 e8 71 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00371e8,0x2875
c001144e:	69 0d ec 71 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00371ec,0xa2e7b175
c0011458:	53                   	push   ebx
c0011459:	01 c1                	add    ecx,eax
c001145b:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011460:	f7 25 e8 71 03 c0    	mul    DWORD PTR ds:0xc00371e8
c0011466:	01 ca                	add    edx,ecx
c0011468:	05 ef 04 b5 00       	add    eax,0xb504ef
c001146d:	83 d2 00             	adc    edx,0x0
c0011470:	a3 e8 71 03 c0       	mov    ds:0xc00371e8,eax
c0011475:	0f b7 da             	movzx  ebx,dx
c0011478:	89 da                	mov    edx,ebx
c001147a:	89 1d ec 71 03 c0    	mov    DWORD PTR ds:0xc00371ec,ebx
c0011480:	0f ac d0 0e          	shrd   eax,edx,0xe
c0011484:	5b                   	pop    ebx
c0011485:	c3                   	ret    

c0011486 <KeSeedRand(unsigned int)>:
c0011486:	53                   	push   ebx
c0011487:	83 ec 08             	sub    esp,0x8
c001148a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001148e:	e8 9a a4 00 00       	call   c001b92d <HalGetRand()>
c0011493:	c7 05 ec 71 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00371ec,0x0
c001149d:	31 d8                	xor    eax,ebx
c001149f:	a3 e8 71 03 c0       	mov    ds:0xc00371e8,eax
c00114a4:	e8 9b ff ff ff       	call   c0011444 <KeRand()>
c00114a9:	83 c4 08             	add    esp,0x8
c00114ac:	5b                   	pop    ebx
c00114ad:	eb 95                	jmp    c0011444 <KeRand()>

c00114af <KeInitRand()>:
c00114af:	83 ec 0c             	sub    esp,0xc
c00114b2:	e8 44 a2 00 00       	call   c001b6fb <HalQueryPerformanceCounter()>
c00114b7:	0f 20 da             	mov    edx,cr3
c00114ba:	0f 22 da             	mov    cr3,edx
c00114bd:	0f 20 da             	mov    edx,cr3
c00114c0:	0f 22 da             	mov    cr3,edx
c00114c3:	0f 20 da             	mov    edx,cr3
c00114c6:	0f 22 da             	mov    cr3,edx
c00114c9:	0f 20 da             	mov    edx,cr3
c00114cc:	0f 22 da             	mov    cr3,edx
c00114cf:	83 ec 0c             	sub    esp,0xc
c00114d2:	35 03 8a 95 38       	xor    eax,0x38958a03
c00114d7:	50                   	push   eax
c00114d8:	e8 a9 ff ff ff       	call   c0011486 <KeSeedRand(unsigned int)>
c00114dd:	83 c4 1c             	add    esp,0x1c
c00114e0:	c3                   	ret    
c00114e1:	66 90                	xchg   ax,ax
c00114e3:	90                   	nop

c00114e4 <KeResolveCompatibilitySymbol(char*)>:
c00114e4:	83 ec 0c             	sub    esp,0xc
c00114e7:	83 ec 08             	sub    esp,0x8
c00114ea:	68 2c c3 02 c0       	push   0xc002c32c
c00114ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f3:	e8 58 f2 fe ff       	call   c0000750 <strcmp>
c00114f8:	83 c4 10             	add    esp,0x10
c00114fb:	85 c0                	test   eax,eax
c00114fd:	0f 94 c0             	sete   al
c0011500:	0f b6 c0             	movzx  eax,al
c0011503:	85 c0                	test   eax,eax
c0011505:	74 0d                	je     c0011514 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011507:	b8 08 71 03 c0       	mov    eax,0xc0037108
c001150c:	e9 3b 02 00 00       	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c0011511:	8d 76 00             	lea    esi,[esi+0x0]
c0011514:	83 ec 08             	sub    esp,0x8
c0011517:	68 35 c3 02 c0       	push   0xc002c335
c001151c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011520:	e8 2b f2 fe ff       	call   c0000750 <strcmp>
c0011525:	83 c4 10             	add    esp,0x10
c0011528:	85 c0                	test   eax,eax
c001152a:	0f 94 c0             	sete   al
c001152d:	0f b6 c0             	movzx  eax,al
c0011530:	85 c0                	test   eax,eax
c0011532:	74 0c                	je     c0011540 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011534:	b8 54 4b 02 c0       	mov    eax,0xc0024b54
c0011539:	e9 0e 02 00 00       	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c001153e:	66 90                	xchg   ax,ax
c0011540:	83 ec 08             	sub    esp,0x8
c0011543:	68 3f c3 02 c0       	push   0xc002c33f
c0011548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001154c:	e8 ff f1 fe ff       	call   c0000750 <strcmp>
c0011551:	83 c4 10             	add    esp,0x10
c0011554:	85 c0                	test   eax,eax
c0011556:	0f 94 c0             	sete   al
c0011559:	0f b6 c0             	movzx  eax,al
c001155c:	85 c0                	test   eax,eax
c001155e:	74 0c                	je     c001156c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011560:	b8 08 71 03 c0       	mov    eax,0xc0037108
c0011565:	e9 e2 01 00 00       	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c001156a:	66 90                	xchg   ax,ax
c001156c:	83 ec 08             	sub    esp,0x8
c001156f:	68 52 c3 02 c0       	push   0xc002c352
c0011574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011578:	e8 d3 f1 fe ff       	call   c0000750 <strcmp>
c001157d:	83 c4 10             	add    esp,0x10
c0011580:	85 c0                	test   eax,eax
c0011582:	0f 94 c0             	sete   al
c0011585:	0f b6 c0             	movzx  eax,al
c0011588:	85 c0                	test   eax,eax
c001158a:	74 0c                	je     c0011598 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001158c:	b8 88 48 02 c0       	mov    eax,0xc0024888
c0011591:	e9 b6 01 00 00       	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c0011596:	66 90                	xchg   ax,ax
c0011598:	83 ec 08             	sub    esp,0x8
c001159b:	68 5b c3 02 c0       	push   0xc002c35b
c00115a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115a4:	e8 a7 f1 fe ff       	call   c0000750 <strcmp>
c00115a9:	83 c4 10             	add    esp,0x10
c00115ac:	85 c0                	test   eax,eax
c00115ae:	0f 94 c0             	sete   al
c00115b1:	0f b6 c0             	movzx  eax,al
c00115b4:	85 c0                	test   eax,eax
c00115b6:	74 0c                	je     c00115c4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00115b8:	b8 64 0a 01 c0       	mov    eax,0xc0010a64
c00115bd:	e9 8a 01 00 00       	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c00115c2:	66 90                	xchg   ax,ax
c00115c4:	83 ec 08             	sub    esp,0x8
c00115c7:	68 6e c3 02 c0       	push   0xc002c36e
c00115cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115d0:	e8 7b f1 fe ff       	call   c0000750 <strcmp>
c00115d5:	83 c4 10             	add    esp,0x10
c00115d8:	85 c0                	test   eax,eax
c00115da:	0f 94 c0             	sete   al
c00115dd:	0f b6 c0             	movzx  eax,al
c00115e0:	85 c0                	test   eax,eax
c00115e2:	74 0c                	je     c00115f0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00115e4:	b8 6d e0 00 c0       	mov    eax,0xc000e06d
c00115e9:	e9 5e 01 00 00       	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c00115ee:	66 90                	xchg   ax,ax
c00115f0:	83 ec 08             	sub    esp,0x8
c00115f3:	68 8b c3 02 c0       	push   0xc002c38b
c00115f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115fc:	e8 4f f1 fe ff       	call   c0000750 <strcmp>
c0011601:	83 c4 10             	add    esp,0x10
c0011604:	85 c0                	test   eax,eax
c0011606:	0f 94 c0             	sete   al
c0011609:	0f b6 c0             	movzx  eax,al
c001160c:	85 c0                	test   eax,eax
c001160e:	74 0c                	je     c001161c <KeResolveCompatibilitySymbol(char*)+0x138>
c0011610:	b8 54 4c 02 c0       	mov    eax,0xc0024c54
c0011615:	e9 32 01 00 00       	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c001161a:	66 90                	xchg   ax,ax
c001161c:	83 ec 08             	sub    esp,0x8
c001161f:	68 95 c3 02 c0       	push   0xc002c395
c0011624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011628:	e8 23 f1 fe ff       	call   c0000750 <strcmp>
c001162d:	83 c4 10             	add    esp,0x10
c0011630:	85 c0                	test   eax,eax
c0011632:	0f 94 c0             	sete   al
c0011635:	0f b6 c0             	movzx  eax,al
c0011638:	85 c0                	test   eax,eax
c001163a:	74 0c                	je     c0011648 <KeResolveCompatibilitySymbol(char*)+0x164>
c001163c:	b8 d4 49 02 c0       	mov    eax,0xc00249d4
c0011641:	e9 06 01 00 00       	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c0011646:	66 90                	xchg   ax,ax
c0011648:	83 ec 08             	sub    esp,0x8
c001164b:	68 9e c3 02 c0       	push   0xc002c39e
c0011650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011654:	e8 f7 f0 fe ff       	call   c0000750 <strcmp>
c0011659:	83 c4 10             	add    esp,0x10
c001165c:	85 c0                	test   eax,eax
c001165e:	0f 94 c0             	sete   al
c0011661:	0f b6 c0             	movzx  eax,al
c0011664:	85 c0                	test   eax,eax
c0011666:	74 0c                	je     c0011674 <KeResolveCompatibilitySymbol(char*)+0x190>
c0011668:	b8 0c 71 03 c0       	mov    eax,0xc003710c
c001166d:	e9 da 00 00 00       	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c0011672:	66 90                	xchg   ax,ax
c0011674:	83 ec 08             	sub    esp,0x8
c0011677:	68 b6 c3 02 c0       	push   0xc002c3b6
c001167c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011680:	e8 cb f0 fe ff       	call   c0000750 <strcmp>
c0011685:	83 c4 10             	add    esp,0x10
c0011688:	85 c0                	test   eax,eax
c001168a:	0f 94 c0             	sete   al
c001168d:	0f b6 c0             	movzx  eax,al
c0011690:	85 c0                	test   eax,eax
c0011692:	74 0c                	je     c00116a0 <KeResolveCompatibilitySymbol(char*)+0x1bc>
c0011694:	b8 0c 71 03 c0       	mov    eax,0xc003710c
c0011699:	e9 ae 00 00 00       	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c001169e:	66 90                	xchg   ax,ax
c00116a0:	83 ec 08             	sub    esp,0x8
c00116a3:	68 c3 c3 02 c0       	push   0xc002c3c3
c00116a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ac:	e8 9f f0 fe ff       	call   c0000750 <strcmp>
c00116b1:	83 c4 10             	add    esp,0x10
c00116b4:	85 c0                	test   eax,eax
c00116b6:	0f 94 c0             	sete   al
c00116b9:	0f b6 c0             	movzx  eax,al
c00116bc:	85 c0                	test   eax,eax
c00116be:	74 0c                	je     c00116cc <KeResolveCompatibilitySymbol(char*)+0x1e8>
c00116c0:	b8 0d 71 03 c0       	mov    eax,0xc003710d
c00116c5:	e9 82 00 00 00       	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c00116ca:	66 90                	xchg   ax,ax
c00116cc:	83 ec 08             	sub    esp,0x8
c00116cf:	68 d0 c3 02 c0       	push   0xc002c3d0
c00116d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116d8:	e8 73 f0 fe ff       	call   c0000750 <strcmp>
c00116dd:	83 c4 10             	add    esp,0x10
c00116e0:	85 c0                	test   eax,eax
c00116e2:	0f 94 c0             	sete   al
c00116e5:	0f b6 c0             	movzx  eax,al
c00116e8:	85 c0                	test   eax,eax
c00116ea:	74 08                	je     c00116f4 <KeResolveCompatibilitySymbol(char*)+0x210>
c00116ec:	b8 0c 71 03 c0       	mov    eax,0xc003710c
c00116f1:	eb 59                	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c00116f3:	90                   	nop
c00116f4:	83 ec 08             	sub    esp,0x8
c00116f7:	68 e1 c3 02 c0       	push   0xc002c3e1
c00116fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011700:	e8 4b f0 fe ff       	call   c0000750 <strcmp>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	85 c0                	test   eax,eax
c001170a:	0f 94 c0             	sete   al
c001170d:	0f b6 c0             	movzx  eax,al
c0011710:	85 c0                	test   eax,eax
c0011712:	74 08                	je     c001171c <KeResolveCompatibilitySymbol(char*)+0x238>
c0011714:	b8 0d 71 03 c0       	mov    eax,0xc003710d
c0011719:	eb 31                	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c001171b:	90                   	nop
c001171c:	83 ec 08             	sub    esp,0x8
c001171f:	68 f2 c3 02 c0       	push   0xc002c3f2
c0011724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011728:	e8 23 f0 fe ff       	call   c0000750 <strcmp>
c001172d:	83 c4 10             	add    esp,0x10
c0011730:	85 c0                	test   eax,eax
c0011732:	0f 94 c0             	sete   al
c0011735:	0f b6 c0             	movzx  eax,al
c0011738:	85 c0                	test   eax,eax
c001173a:	74 08                	je     c0011744 <KeResolveCompatibilitySymbol(char*)+0x260>
c001173c:	b8 fc 7d 01 c0       	mov    eax,0xc0017dfc
c0011741:	eb 09                	jmp    c001174c <KeResolveCompatibilitySymbol(char*)+0x268>
c0011743:	90                   	nop
c0011744:	b8 00 00 00 00       	mov    eax,0x0
c0011749:	8d 76 00             	lea    esi,[esi+0x0]
c001174c:	83 c4 0c             	add    esp,0xc
c001174f:	c3                   	ret    

c0011750 <Semaphore::Semaphore(int)>:
c0011750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011754:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011758:	89 10                	mov    DWORD PTR [eax],edx
c001175a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001175e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0011765:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011769:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011774:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001177b:	90                   	nop
c001177c:	c3                   	ret    
c001177d:	90                   	nop
c001177e:	66 90                	xchg   ax,ax

c0011780 <Semaphore::tryAcquire()>:
c0011780:	83 ec 0c             	sub    esp,0xc
c0011783:	fa                   	cli    
c0011784:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0011789:	83 c0 01             	add    eax,0x1
c001178c:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0011791:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011796:	83 c0 01             	add    eax,0x1
c0011799:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c001179e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00117ab:	39 c2                	cmp    edx,eax
c00117ad:	7d 59                	jge    c0011808 <Semaphore::tryAcquire()+0x88>
c00117af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117b6:	8d 50 01             	lea    edx,[eax+0x1]
c00117b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00117c0:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00117c5:	83 e8 01             	sub    eax,0x1
c00117c8:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c00117cd:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00117d2:	85 c0                	test   eax,eax
c00117d4:	75 1a                	jne    c00117f0 <Semaphore::tryAcquire()+0x70>
c00117d6:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c00117db:	85 c0                	test   eax,eax
c00117dd:	74 11                	je     c00117f0 <Semaphore::tryAcquire()+0x70>
c00117df:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c00117e9:	e8 0e 5e 00 00       	call   c00175fc <schedule()>
c00117ee:	66 90                	xchg   ax,ax
c00117f0:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00117f8:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00117fd:	85 c0                	test   eax,eax
c00117ff:	75 03                	jne    c0011804 <Semaphore::tryAcquire()+0x84>
c0011801:	fb                   	sti    
c0011802:	66 90                	xchg   ax,ax
c0011804:	b0 01                	mov    al,0x1
c0011806:	eb 48                	jmp    c0011850 <Semaphore::tryAcquire()+0xd0>
c0011808:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c001180d:	83 e8 01             	sub    eax,0x1
c0011810:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c0011815:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c001181a:	85 c0                	test   eax,eax
c001181c:	75 1a                	jne    c0011838 <Semaphore::tryAcquire()+0xb8>
c001181e:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c0011823:	85 c0                	test   eax,eax
c0011825:	74 11                	je     c0011838 <Semaphore::tryAcquire()+0xb8>
c0011827:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c0011831:	e8 c6 5d 00 00       	call   c00175fc <schedule()>
c0011836:	66 90                	xchg   ax,ax
c0011838:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0011840:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0011845:	85 c0                	test   eax,eax
c0011847:	75 03                	jne    c001184c <Semaphore::tryAcquire()+0xcc>
c0011849:	fb                   	sti    
c001184a:	66 90                	xchg   ax,ax
c001184c:	b0 00                	mov    al,0x0
c001184e:	66 90                	xchg   ax,ax
c0011850:	83 c4 0c             	add    esp,0xc
c0011853:	c3                   	ret    

c0011854 <Semaphore::assertLocked(char const*)>:
c0011854:	83 ec 0c             	sub    esp,0xc
c0011857:	fa                   	cli    
c0011858:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c001185d:	83 c0 01             	add    eax,0x1
c0011860:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0011865:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c001186a:	83 c0 01             	add    eax,0x1
c001186d:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c0011872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011876:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001187d:	8b 00                	mov    eax,DWORD PTR [eax]
c001187f:	39 c2                	cmp    edx,eax
c0011881:	7d 11                	jge    c0011894 <Semaphore::assertLocked(char const*)+0x40>
c0011883:	83 ec 0c             	sub    esp,0xc
c0011886:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001188a:	e8 d5 f1 ff ff       	call   c0010a64 <KePanic(char const*)>
c001188f:	83 c4 10             	add    esp,0x10
c0011892:	66 90                	xchg   ax,ax
c0011894:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011899:	83 e8 01             	sub    eax,0x1
c001189c:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c00118a1:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00118a6:	85 c0                	test   eax,eax
c00118a8:	75 1a                	jne    c00118c4 <Semaphore::assertLocked(char const*)+0x70>
c00118aa:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c00118af:	85 c0                	test   eax,eax
c00118b1:	74 11                	je     c00118c4 <Semaphore::assertLocked(char const*)+0x70>
c00118b3:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c00118bd:	e8 3a 5d 00 00       	call   c00175fc <schedule()>
c00118c2:	66 90                	xchg   ax,ax
c00118c4:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00118cc:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00118d1:	85 c0                	test   eax,eax
c00118d3:	75 03                	jne    c00118d8 <Semaphore::assertLocked(char const*)+0x84>
c00118d5:	fb                   	sti    
c00118d6:	66 90                	xchg   ax,ax
c00118d8:	90                   	nop
c00118d9:	83 c4 0c             	add    esp,0xc
c00118dc:	c3                   	ret    
c00118dd:	90                   	nop
c00118de:	66 90                	xchg   ax,ax

c00118e0 <Semaphore::acquire(int)>:
c00118e0:	83 ec 1c             	sub    esp,0x1c
c00118e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00118e8:	0f 84 ae 00 00 00    	je     c001199c <Semaphore::acquire(int)+0xbc>
c00118ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118f6:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00118fb:	90                   	nop
c00118fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0011901:	85 c0                	test   eax,eax
c0011903:	0f 84 87 00 00 00    	je     c0011990 <Semaphore::acquire(int)+0xb0>
c0011909:	83 ec 0c             	sub    esp,0xc
c001190c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011910:	e8 6b fe ff ff       	call   c0011780 <Semaphore::tryAcquire()>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	83 f0 01             	xor    eax,0x1
c001191b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001191f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011923:	83 f0 01             	xor    eax,0x1
c0011926:	0f b6 c0             	movzx  eax,al
c0011929:	85 c0                	test   eax,eax
c001192b:	75 5f                	jne    c001198c <Semaphore::acquire(int)+0xac>
c001192d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0011932:	7f 34                	jg     c0011968 <Semaphore::acquire(int)+0x88>
c0011934:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011938:	89 d0                	mov    eax,edx
c001193a:	c1 e0 02             	shl    eax,0x2
c001193d:	01 d0                	add    eax,edx
c001193f:	01 c0                	add    eax,eax
c0011941:	89 c2                	mov    edx,eax
c0011943:	c1 fa 1f             	sar    edx,0x1f
c0011946:	83 ec 08             	sub    esp,0x8
c0011949:	52                   	push   edx
c001194a:	50                   	push   eax
c001194b:	e8 a0 5e 00 00       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c0011950:	83 c4 10             	add    esp,0x10
c0011953:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011957:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001195b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0011963:	eb 97                	jmp    c00118fc <Semaphore::acquire(int)+0x1c>
c0011965:	8d 76 00             	lea    esi,[esi+0x0]
c0011968:	83 ec 08             	sub    esp,0x8
c001196b:	6a 00                	push   0x0
c001196d:	68 90 01 00 00       	push   0x190
c0011972:	e8 79 5e 00 00       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c0011977:	83 c4 10             	add    esp,0x10
c001197a:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c001197f:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0011984:	e9 73 ff ff ff       	jmp    c00118fc <Semaphore::acquire(int)+0x1c>
c0011989:	8d 76 00             	lea    esi,[esi+0x0]
c001198c:	90                   	nop
c001198d:	8d 76 00             	lea    esi,[esi+0x0]
c0011990:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011994:	e9 fb 00 00 00       	jmp    c0011a94 <Semaphore::acquire(int)+0x1b4>
c0011999:	8d 76 00             	lea    esi,[esi+0x0]
c001199c:	fa                   	cli    
c001199d:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00119a2:	83 c0 01             	add    eax,0x1
c00119a5:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00119aa:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00119af:	83 c0 01             	add    eax,0x1
c00119b2:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c00119b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119bb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00119be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00119c4:	39 c2                	cmp    edx,eax
c00119c6:	7d 14                	jge    c00119dc <Semaphore::acquire(int)+0xfc>
c00119c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119cf:	8d 50 01             	lea    edx,[eax+0x1]
c00119d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00119d9:	eb 6d                	jmp    c0011a48 <Semaphore::acquire(int)+0x168>
c00119db:	90                   	nop
c00119dc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00119e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00119e3:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00119ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119f1:	85 c0                	test   eax,eax
c00119f3:	75 13                	jne    c0011a08 <Semaphore::acquire(int)+0x128>
c00119f5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00119fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00119fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011a03:	eb 17                	jmp    c0011a1c <Semaphore::acquire(int)+0x13c>
c0011a05:	8d 76 00             	lea    esi,[esi+0x0]
c0011a08:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0011a0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011a14:	8b 12                	mov    edx,DWORD PTR [edx]
c0011a16:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011a19:	8d 76 00             	lea    esi,[esi+0x0]
c0011a1c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011a21:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a27:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011a2a:	83 ec 0c             	sub    esp,0xc
c0011a2d:	68 08 c4 02 c0       	push   0xc002c408
c0011a32:	e8 45 55 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	83 ec 0c             	sub    esp,0xc
c0011a3d:	6a 05                	push   0x5
c0011a3f:	e8 78 5c 00 00       	call   c00176bc <blockTask(TaskState)>
c0011a44:	83 c4 10             	add    esp,0x10
c0011a47:	90                   	nop
c0011a48:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011a4d:	83 e8 01             	sub    eax,0x1
c0011a50:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c0011a55:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011a5a:	85 c0                	test   eax,eax
c0011a5c:	75 1a                	jne    c0011a78 <Semaphore::acquire(int)+0x198>
c0011a5e:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c0011a63:	85 c0                	test   eax,eax
c0011a65:	74 11                	je     c0011a78 <Semaphore::acquire(int)+0x198>
c0011a67:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c0011a71:	e8 86 5b 00 00       	call   c00175fc <schedule()>
c0011a76:	66 90                	xchg   ax,ax
c0011a78:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0011a80:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0011a85:	85 c0                	test   eax,eax
c0011a87:	75 03                	jne    c0011a8c <Semaphore::acquire(int)+0x1ac>
c0011a89:	fb                   	sti    
c0011a8a:	66 90                	xchg   ax,ax
c0011a8c:	b8 00 00 00 00       	mov    eax,0x0
c0011a91:	8d 76 00             	lea    esi,[esi+0x0]
c0011a94:	83 c4 1c             	add    esp,0x1c
c0011a97:	c3                   	ret    

c0011a98 <Semaphore::acquire()>:
c0011a98:	83 ec 0c             	sub    esp,0xc
c0011a9b:	83 ec 08             	sub    esp,0x8
c0011a9e:	6a 00                	push   0x0
c0011aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011aa4:	e8 37 fe ff ff       	call   c00118e0 <Semaphore::acquire(int)>
c0011aa9:	83 c4 10             	add    esp,0x10
c0011aac:	90                   	nop
c0011aad:	83 c4 0c             	add    esp,0xc
c0011ab0:	c3                   	ret    
c0011ab1:	90                   	nop
c0011ab2:	66 90                	xchg   ax,ax

c0011ab4 <Semaphore::release()>:
c0011ab4:	83 ec 1c             	sub    esp,0x1c
c0011ab7:	fa                   	cli    
c0011ab8:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0011abd:	83 c0 01             	add    eax,0x1
c0011ac0:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0011ac5:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011aca:	83 c0 01             	add    eax,0x1
c0011acd:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c0011ad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ad6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ad9:	85 c0                	test   eax,eax
c0011adb:	74 2b                	je     c0011b08 <Semaphore::release()+0x54>
c0011add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ae1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ae4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ae8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011aec:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011af3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011af6:	83 ec 0c             	sub    esp,0xc
c0011af9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011afd:	e8 56 5e 00 00       	call   c0017958 <unblockTask(ThreadControlBlock*)>
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	eb 15                	jmp    c0011b1c <Semaphore::release()+0x68>
c0011b07:	90                   	nop
c0011b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011b0f:	8d 50 ff             	lea    edx,[eax-0x1]
c0011b12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b16:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011b19:	8d 76 00             	lea    esi,[esi+0x0]
c0011b1c:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011b21:	83 e8 01             	sub    eax,0x1
c0011b24:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c0011b29:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0011b2e:	85 c0                	test   eax,eax
c0011b30:	75 1a                	jne    c0011b4c <Semaphore::release()+0x98>
c0011b32:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c0011b37:	85 c0                	test   eax,eax
c0011b39:	74 11                	je     c0011b4c <Semaphore::release()+0x98>
c0011b3b:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c0011b45:	e8 b2 5a 00 00       	call   c00175fc <schedule()>
c0011b4a:	66 90                	xchg   ax,ax
c0011b4c:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0011b54:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0011b59:	85 c0                	test   eax,eax
c0011b5b:	75 03                	jne    c0011b60 <Semaphore::release()+0xac>
c0011b5d:	fb                   	sti    
c0011b5e:	66 90                	xchg   ax,ax
c0011b60:	90                   	nop
c0011b61:	83 c4 1c             	add    esp,0x1c
c0011b64:	c3                   	ret    

c0011b65 <KiSigKill(int)>:
c0011b65:	83 ec 0c             	sub    esp,0xc
c0011b68:	6a 00                	push   0x0
c0011b6a:	6a 00                	push   0x0
c0011b6c:	6a ff                	push   0xffffffff
c0011b6e:	6a 01                	push   0x1
c0011b70:	e8 dd 04 02 00       	call   c0032052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011b75:	83 c4 1c             	add    esp,0x1c
c0011b78:	c3                   	ret    

c0011b79 <KiDefaultSignalHandlerIgnore(int)>:
c0011b79:	c3                   	ret    

c0011b7a <KiDefaultSignalHandlerPause(int)>:
c0011b7a:	57                   	push   edi
c0011b7b:	b9 07 00 00 00       	mov    ecx,0x7
c0011b80:	56                   	push   esi
c0011b81:	be 63 c4 02 c0       	mov    esi,0xc002c463
c0011b86:	83 ec 24             	sub    esp,0x24
c0011b89:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011b8d:	fc                   	cld    
c0011b8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011b90:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011b94:	50                   	push   eax
c0011b95:	6a 00                	push   0x0
c0011b97:	6a 00                	push   0x0
c0011b99:	6a 27                	push   0x27
c0011b9b:	e8 b2 04 02 00       	call   c0032052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011ba0:	83 c4 34             	add    esp,0x34
c0011ba3:	5e                   	pop    esi
c0011ba4:	5f                   	pop    edi
c0011ba5:	c3                   	ret    

c0011ba6 <KiDefaultSignalHandlerResume(int)>:
c0011ba6:	57                   	push   edi
c0011ba7:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011bac:	56                   	push   esi
c0011bad:	be 7f c4 02 c0       	mov    esi,0xc002c47f
c0011bb2:	83 ec 24             	sub    esp,0x24
c0011bb5:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011bb9:	fc                   	cld    
c0011bba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011bbc:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011bc0:	50                   	push   eax
c0011bc1:	6a 00                	push   0x0
c0011bc3:	6a 00                	push   0x0
c0011bc5:	6a 27                	push   0x27
c0011bc7:	e8 86 04 02 00       	call   c0032052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011bcc:	83 c4 34             	add    esp,0x34
c0011bcf:	5e                   	pop    esi
c0011bd0:	5f                   	pop    edi
c0011bd1:	c3                   	ret    

c0011bd2 <KeDeinitSignals(SigHandlerBlock*)>:
c0011bd2:	e9 48 ea ff ff       	jmp    c001061f <free>

c0011bd7 <KeInitSignals()>:
c0011bd7:	53                   	push   ebx
c0011bd8:	83 ec 14             	sub    esp,0x14
c0011bdb:	68 c8 00 00 00       	push   0xc8
c0011be0:	e8 2a ea ff ff       	call   c001060f <malloc>
c0011be5:	83 c4 0c             	add    esp,0xc
c0011be8:	89 c3                	mov    ebx,eax
c0011bea:	6a 04                	push   0x4
c0011bec:	6a 00                	push   0x0
c0011bee:	50                   	push   eax
c0011bef:	e8 fc e8 fe ff       	call   c00004f0 <memset>
c0011bf4:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0011bfe:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0011c08:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011c0f:	83 c4 0c             	add    esp,0xc
c0011c12:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0011c18:	6a 20                	push   0x20
c0011c1a:	6a 00                	push   0x0
c0011c1c:	50                   	push   eax
c0011c1d:	e8 ce e8 fe ff       	call   c00004f0 <memset>
c0011c22:	83 c4 0c             	add    esp,0xc
c0011c25:	6a 44                	push   0x44
c0011c27:	6a 00                	push   0x0
c0011c29:	53                   	push   ebx
c0011c2a:	e8 c1 e8 fe ff       	call   c00004f0 <memset>
c0011c2f:	83 c4 0c             	add    esp,0xc
c0011c32:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0011c38:	6a 11                	push   0x11
c0011c3a:	6a 00                	push   0x0
c0011c3c:	50                   	push   eax
c0011c3d:	e8 ae e8 fe ff       	call   c00004f0 <memset>
c0011c42:	89 d8                	mov    eax,ebx
c0011c44:	83 c4 18             	add    esp,0x18
c0011c47:	5b                   	pop    ebx
c0011c48:	c3                   	ret    

c0011c49 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011c49:	53                   	push   ebx
c0011c4a:	b8 01 00 00 00       	mov    eax,0x1
c0011c4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011c53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c57:	83 f9 10             	cmp    ecx,0x10
c0011c5a:	7f 21                	jg     c0011c7d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011c5c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c63:	89 03                	mov    DWORD PTR [ebx],eax
c0011c65:	b8 01 00 00 00       	mov    eax,0x1
c0011c6a:	d3 e0                	shl    eax,cl
c0011c6c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011c70:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011c73:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011c7b:	31 c0                	xor    eax,eax
c0011c7d:	5b                   	pop    ebx
c0011c7e:	c3                   	ret    

c0011c7f <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011c7f:	55                   	push   ebp
c0011c80:	57                   	push   edi
c0011c81:	bf 08 00 00 00       	mov    edi,0x8
c0011c86:	56                   	push   esi
c0011c87:	53                   	push   ebx
c0011c88:	83 ec 14             	sub    esp,0x14
c0011c8b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011c8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011c93:	68 9c c4 02 c0       	push   0xc002c49c
c0011c98:	e8 df 52 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011c9d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011ca4:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011caa:	83 c4 10             	add    esp,0x10
c0011cad:	31 c9                	xor    ecx,ecx
c0011caf:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011cb3:	99                   	cdq    
c0011cb4:	f7 ff                	idiv   edi
c0011cb6:	8d 42 24             	lea    eax,[edx+0x24]
c0011cb9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011cbd:	85 f6                	test   esi,esi
c0011cbf:	75 1a                	jne    c0011cdb <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0011cc1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011cc5:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0011cc9:	50                   	push   eax
c0011cca:	50                   	push   eax
c0011ccb:	52                   	push   edx
c0011ccc:	68 b2 c4 02 c0       	push   0xc002c4b2
c0011cd1:	e8 a6 52 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011cd6:	83 c4 10             	add    esp,0x10
c0011cd9:	eb 1b                	jmp    c0011cf6 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0011cdb:	41                   	inc    ecx
c0011cdc:	83 f9 08             	cmp    ecx,0x8
c0011cdf:	75 ce                	jne    c0011caf <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0011ce1:	83 ec 0c             	sub    esp,0xc
c0011ce4:	be 01 00 00 00       	mov    esi,0x1
c0011ce9:	68 d3 c4 02 c0       	push   0xc002c4d3
c0011cee:	e8 89 52 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011cf3:	83 c4 10             	add    esp,0x10
c0011cf6:	83 c4 0c             	add    esp,0xc
c0011cf9:	89 f0                	mov    eax,esi
c0011cfb:	5b                   	pop    ebx
c0011cfc:	5e                   	pop    esi
c0011cfd:	5f                   	pop    edi
c0011cfe:	5d                   	pop    ebp
c0011cff:	c3                   	ret    

c0011d00 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011d00:	55                   	push   ebp
c0011d01:	57                   	push   edi
c0011d02:	56                   	push   esi
c0011d03:	53                   	push   ebx
c0011d04:	83 ec 1c             	sub    esp,0x1c
c0011d07:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011d0b:	85 db                	test   ebx,ebx
c0011d0d:	0f 84 e0 00 00 00    	je     c0011df3 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011d13:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011d1a:	0f 84 d3 00 00 00    	je     c0011df3 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011d20:	31 c9                	xor    ecx,ecx
c0011d22:	bf 08 00 00 00       	mov    edi,0x8
c0011d27:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011d2d:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011d30:	99                   	cdq    
c0011d31:	f7 ff                	idiv   edi
c0011d33:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011d3a:	85 ed                	test   ebp,ebp
c0011d3c:	0f 84 d2 00 00 00    	je     c0011e14 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0011d42:	89 e9                	mov    ecx,ebp
c0011d44:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011d4a:	bf 01 00 00 00       	mov    edi,0x1
c0011d4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d53:	d3 e7                	shl    edi,cl
c0011d55:	31 c9                	xor    ecx,ecx
c0011d57:	b8 01 00 00 00       	mov    eax,0x1
c0011d5c:	d3 e0                	shl    eax,cl
c0011d5e:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c0011d62:	74 0a                	je     c0011d6e <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0011d64:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011d68:	0f 85 85 00 00 00    	jne    c0011df3 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011d6e:	41                   	inc    ecx
c0011d6f:	83 f9 11             	cmp    ecx,0x11
c0011d72:	75 e3                	jne    c0011d57 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0011d74:	46                   	inc    esi
c0011d75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d79:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011d7f:	09 f8                	or     eax,edi
c0011d81:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011d8c:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011d92:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011d99:	31 c0                	xor    eax,eax
c0011d9b:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011da3:	74 09                	je     c0011dae <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0011da5:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011dac:	eb 06                	jmp    c0011db4 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c0011dae:	40                   	inc    eax
c0011daf:	83 f8 08             	cmp    eax,0x8
c0011db2:	75 e7                	jne    c0011d9b <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0011db4:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011db7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011dbb:	83 fd 09             	cmp    ebp,0x9
c0011dbe:	89 2a                	mov    DWORD PTR [edx],ebp
c0011dc0:	75 14                	jne    c0011dd6 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0011dc2:	83 ec 0c             	sub    esp,0xc
c0011dc5:	68 e4 c4 02 c0       	push   0xc002c4e4
c0011dca:	e8 ad 51 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011dcf:	b8 65 1b 01 c0       	mov    eax,0xc0011b65
c0011dd4:	eb 39                	jmp    c0011e0f <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011dd6:	83 f8 01             	cmp    eax,0x1
c0011dd9:	75 1c                	jne    c0011df7 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011ddb:	83 ec 0c             	sub    esp,0xc
c0011dde:	f7 d7                	not    edi
c0011de0:	68 ee c4 02 c0       	push   0xc002c4ee
c0011de5:	e8 92 51 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011dea:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011df0:	83 c4 10             	add    esp,0x10
c0011df3:	31 c0                	xor    eax,eax
c0011df5:	eb 30                	jmp    c0011e27 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011df7:	85 c0                	test   eax,eax
c0011df9:	75 2c                	jne    c0011e27 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011dfb:	83 ec 0c             	sub    esp,0xc
c0011dfe:	68 fb c4 02 c0       	push   0xc002c4fb
c0011e03:	e8 74 51 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011e08:	8b 04 ad 20 0a 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcf5e0]
c0011e0f:	83 c4 10             	add    esp,0x10
c0011e12:	eb 13                	jmp    c0011e27 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011e14:	46                   	inc    esi
c0011e15:	41                   	inc    ecx
c0011e16:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011e1c:	83 f9 08             	cmp    ecx,0x8
c0011e1f:	0f 85 02 ff ff ff    	jne    c0011d27 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011e25:	eb cc                	jmp    c0011df3 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011e27:	83 c4 1c             	add    esp,0x1c
c0011e2a:	5b                   	pop    ebx
c0011e2b:	5e                   	pop    esi
c0011e2c:	5f                   	pop    edi
c0011e2d:	5d                   	pop    ebp
c0011e2e:	c3                   	ret    

c0011e2f <KiCheckSignalZ>:
c0011e2f:	80 3d 0c 71 03 c0 00 	cmp    BYTE PTR ds:0xc003710c,0x0
c0011e36:	74 43                	je     c0011e7b <KiCheckSignalZ+0x4c>
c0011e38:	83 ec 24             	sub    esp,0x24
c0011e3b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0011e3f:	50                   	push   eax
c0011e40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e45:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e48:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011e4e:	e8 ad fe ff ff       	call   c0011d00 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011e53:	83 c4 10             	add    esp,0x10
c0011e56:	31 d2                	xor    edx,edx
c0011e58:	85 c0                	test   eax,eax
c0011e5a:	74 19                	je     c0011e75 <KiCheckSignalZ+0x46>
c0011e5c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011e62:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011e65:	89 02                	mov    DWORD PTR [edx],eax
c0011e67:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e72:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011e75:	89 d0                	mov    eax,edx
c0011e77:	83 c4 1c             	add    esp,0x1c
c0011e7a:	c3                   	ret    
c0011e7b:	31 d2                	xor    edx,edx
c0011e7d:	89 d0                	mov    eax,edx
c0011e7f:	c3                   	ret    

c0011e80 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011e80:	56                   	push   esi
c0011e81:	53                   	push   ebx
c0011e82:	bb 01 00 00 00       	mov    ebx,0x1
c0011e87:	52                   	push   edx
c0011e88:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011e8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011e90:	d3 e3                	shl    ebx,cl
c0011e92:	83 f9 10             	cmp    ecx,0x10
c0011e95:	7f 08                	jg     c0011e9f <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011e97:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011e9d:	75 10                	jne    c0011eaf <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011e9f:	83 ec 0c             	sub    esp,0xc
c0011ea2:	68 1e c5 02 c0       	push   0xc002c51e
c0011ea7:	e8 b8 eb ff ff       	call   c0010a64 <KePanic(char const*)>
c0011eac:	83 c4 10             	add    esp,0x10
c0011eaf:	f7 d3                	not    ebx
c0011eb1:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011eb7:	58                   	pop    eax
c0011eb8:	5b                   	pop    ebx
c0011eb9:	5e                   	pop    esi
c0011eba:	c3                   	ret    

c0011ebb <KiFinishSignalZ>:
c0011ebb:	53                   	push   ebx
c0011ebc:	83 ec 08             	sub    esp,0x8
c0011ebf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ec4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ec8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0011ecb:	83 fa 08             	cmp    edx,0x8
c0011ece:	75 0c                	jne    c0011edc <KiFinishSignalZ+0x21>
c0011ed0:	83 ec 0c             	sub    esp,0xc
c0011ed3:	50                   	push   eax
c0011ed4:	e8 7f 5a 00 00       	call   c0017958 <unblockTask(ThreadControlBlock*)>
c0011ed9:	83 c4 10             	add    esp,0x10
c0011edc:	50                   	push   eax
c0011edd:	50                   	push   eax
c0011ede:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011ee1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ee6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ee9:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011eef:	e8 8c ff ff ff       	call   c0011e80 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011ef4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011efa:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011f01:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011f08:	83 c4 18             	add    esp,0x18
c0011f0b:	5b                   	pop    ebx
c0011f0c:	c3                   	ret    

c0011f0d <SysSeekDir(regs*)>:
c0011f0d:	31 c0                	xor    eax,eax
c0011f0f:	31 d2                	xor    edx,edx
c0011f11:	c3                   	ret    

c0011f12 <SysTellDir(regs*)>:
c0011f12:	31 c0                	xor    eax,eax
c0011f14:	31 d2                	xor    edx,edx
c0011f16:	c3                   	ret    

c0011f17 <SysVerify(regs*)>:
c0011f17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f1b:	31 d2                	xor    edx,edx
c0011f1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f20:	c3                   	ret    

c0011f21 <SysGetArgc(regs*)>:
c0011f21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f29:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c0011f2f:	89 c2                	mov    edx,eax
c0011f31:	c1 fa 1f             	sar    edx,0x1f
c0011f34:	c3                   	ret    

c0011f35 <SysTTYName(regs*)>:
c0011f35:	b8 01 00 00 00       	mov    eax,0x1
c0011f3a:	31 d2                	xor    edx,edx
c0011f3c:	c3                   	ret    

c0011f3d <SysFormatDisk(regs*)>:
c0011f3d:	56                   	push   esi
c0011f3e:	53                   	push   ebx
c0011f3f:	83 ec 04             	sub    esp,0x4
c0011f42:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011f46:	8b 1d 04 63 03 c0    	mov    ebx,DWORD PTR ds:0xc0036304
c0011f4c:	eb 28                	jmp    c0011f76 <SysFormatDisk(regs*)+0x39>
c0011f4e:	83 ec 0c             	sub    esp,0xc
c0011f51:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011f54:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011f57:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011f59:	51                   	push   ecx
c0011f5a:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011f5d:	51                   	push   ecx
c0011f5e:	50                   	push   eax
c0011f5f:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c0011f66:	50                   	push   eax
c0011f67:	53                   	push   ebx
c0011f68:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011f6b:	83 c4 20             	add    esp,0x20
c0011f6e:	83 f8 08             	cmp    eax,0x8
c0011f71:	75 14                	jne    c0011f87 <SysFormatDisk(regs*)+0x4a>
c0011f73:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011f76:	85 db                	test   ebx,ebx
c0011f78:	75 d4                	jne    c0011f4e <SysFormatDisk(regs*)+0x11>
c0011f7a:	83 c4 04             	add    esp,0x4
c0011f7d:	b8 03 00 00 00       	mov    eax,0x3
c0011f82:	31 d2                	xor    edx,edx
c0011f84:	5b                   	pop    ebx
c0011f85:	5e                   	pop    esi
c0011f86:	c3                   	ret    
c0011f87:	85 c0                	test   eax,eax
c0011f89:	74 1f                	je     c0011faa <SysFormatDisk(regs*)+0x6d>
c0011f8b:	83 f8 09             	cmp    eax,0x9
c0011f8e:	74 0d                	je     c0011f9d <SysFormatDisk(regs*)+0x60>
c0011f90:	83 c4 04             	add    esp,0x4
c0011f93:	b8 02 00 00 00       	mov    eax,0x2
c0011f98:	31 d2                	xor    edx,edx
c0011f9a:	5b                   	pop    ebx
c0011f9b:	5e                   	pop    esi
c0011f9c:	c3                   	ret    
c0011f9d:	83 c4 04             	add    esp,0x4
c0011fa0:	b8 01 00 00 00       	mov    eax,0x1
c0011fa5:	31 d2                	xor    edx,edx
c0011fa7:	5b                   	pop    ebx
c0011fa8:	5e                   	pop    esi
c0011fa9:	c3                   	ret    
c0011faa:	83 c4 04             	add    esp,0x4
c0011fad:	31 c0                	xor    eax,eax
c0011faf:	31 d2                	xor    edx,edx
c0011fb1:	5b                   	pop    ebx
c0011fb2:	5e                   	pop    esi
c0011fb3:	c3                   	ret    

c0011fb4 <SysSetDiskVolumeLabel(regs*)>:
c0011fb4:	56                   	push   esi
c0011fb5:	53                   	push   ebx
c0011fb6:	83 ec 04             	sub    esp,0x4
c0011fb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011fbd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011fc0:	83 f8 19             	cmp    eax,0x19
c0011fc3:	77 33                	ja     c0011ff8 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011fc5:	8b 0c 85 e0 6a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9520]
c0011fcc:	85 c9                	test   ecx,ecx
c0011fce:	74 28                	je     c0011ff8 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011fd0:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011fd3:	85 db                	test   ebx,ebx
c0011fd5:	74 21                	je     c0011ff8 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011fd7:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011fdd:	85 d2                	test   edx,edx
c0011fdf:	74 17                	je     c0011ff8 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011fe1:	8b 32                	mov    esi,DWORD PTR [edx]
c0011fe3:	53                   	push   ebx
c0011fe4:	50                   	push   eax
c0011fe5:	51                   	push   ecx
c0011fe6:	52                   	push   edx
c0011fe7:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011fea:	83 c4 10             	add    esp,0x10
c0011fed:	89 c2                	mov    edx,eax
c0011fef:	83 c4 04             	add    esp,0x4
c0011ff2:	c1 fa 1f             	sar    edx,0x1f
c0011ff5:	5b                   	pop    ebx
c0011ff6:	5e                   	pop    esi
c0011ff7:	c3                   	ret    
c0011ff8:	83 c4 04             	add    esp,0x4
c0011ffb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012000:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012005:	5b                   	pop    ebx
c0012006:	5e                   	pop    esi
c0012007:	c3                   	ret    

c0012008 <SysGetDiskVolumeLabel(regs*)>:
c0012008:	57                   	push   edi
c0012009:	56                   	push   esi
c001200a:	53                   	push   ebx
c001200b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001200f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0012012:	83 fa 19             	cmp    edx,0x19
c0012015:	77 3c                	ja     c0012053 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0012017:	8b 0c 95 e0 6a 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc9520]
c001201e:	85 c9                	test   ecx,ecx
c0012020:	74 31                	je     c0012053 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0012022:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0012025:	85 db                	test   ebx,ebx
c0012027:	74 2a                	je     c0012053 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0012029:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001202c:	85 f6                	test   esi,esi
c001202e:	74 23                	je     c0012053 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0012030:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0012036:	85 c0                	test   eax,eax
c0012038:	74 19                	je     c0012053 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001203a:	83 ec 0c             	sub    esp,0xc
c001203d:	8b 38                	mov    edi,DWORD PTR [eax]
c001203f:	56                   	push   esi
c0012040:	53                   	push   ebx
c0012041:	52                   	push   edx
c0012042:	51                   	push   ecx
c0012043:	50                   	push   eax
c0012044:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0012047:	83 c4 20             	add    esp,0x20
c001204a:	89 c2                	mov    edx,eax
c001204c:	5b                   	pop    ebx
c001204d:	c1 fa 1f             	sar    edx,0x1f
c0012050:	5e                   	pop    esi
c0012051:	5f                   	pop    edi
c0012052:	c3                   	ret    
c0012053:	5b                   	pop    ebx
c0012054:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012059:	ba ff ff ff ff       	mov    edx,0xffffffff
c001205e:	5e                   	pop    esi
c001205f:	5f                   	pop    edi
c0012060:	c3                   	ret    

c0012061 <SysRealpath(regs*)>:
c0012061:	83 ec 0c             	sub    esp,0xc
c0012064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012068:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001206b:	85 d2                	test   edx,edx
c001206d:	74 07                	je     c0012076 <SysRealpath(regs*)+0x15>
c001206f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012072:	85 c0                	test   eax,eax
c0012074:	75 0b                	jne    c0012081 <SysRealpath(regs*)+0x20>
c0012076:	b8 01 00 00 00       	mov    eax,0x1
c001207b:	31 d2                	xor    edx,edx
c001207d:	83 c4 0c             	add    esp,0xc
c0012080:	c3                   	ret    
c0012081:	6a 00                	push   0x0
c0012083:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012089:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001208c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0012092:	51                   	push   ecx
c0012093:	52                   	push   edx
c0012094:	50                   	push   eax
c0012095:	e8 18 6b ff ff       	call   c0008bb2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001209a:	83 c4 10             	add    esp,0x10
c001209d:	31 c0                	xor    eax,eax
c001209f:	31 d2                	xor    edx,edx
c00120a1:	83 c4 0c             	add    esp,0xc
c00120a4:	c3                   	ret    

c00120a5 <SysReadDir(regs*)>:
c00120a5:	53                   	push   ebx
c00120a6:	83 ec 18             	sub    esp,0x18
c00120a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00120ad:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120b0:	83 f8 02             	cmp    eax,0x2
c00120b3:	76 61                	jbe    c0012116 <SysReadDir(regs*)+0x71>
c00120b5:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00120bc:	77 49                	ja     c0012107 <SysReadDir(regs*)+0x62>
c00120be:	83 ec 0c             	sub    esp,0xc
c00120c1:	50                   	push   eax
c00120c2:	e8 d6 1d 00 00       	call   c0013e9d <KeGetFileFromDescriptor(int)>
c00120c7:	83 c4 10             	add    esp,0x10
c00120ca:	85 c0                	test   eax,eax
c00120cc:	74 39                	je     c0012107 <SysReadDir(regs*)+0x62>
c00120ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00120d6:	83 ec 0c             	sub    esp,0xc
c00120d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00120db:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00120df:	51                   	push   ecx
c00120e0:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00120e3:	51                   	push   ecx
c00120e4:	6a 00                	push   0x0
c00120e6:	68 10 01 00 00       	push   0x110
c00120eb:	50                   	push   eax
c00120ec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00120ef:	83 c4 20             	add    esp,0x20
c00120f2:	85 c0                	test   eax,eax
c00120f4:	74 29                	je     c001211f <SysReadDir(regs*)+0x7a>
c00120f6:	83 f8 07             	cmp    eax,0x7
c00120f9:	74 1b                	je     c0012116 <SysReadDir(regs*)+0x71>
c00120fb:	b8 02 00 00 00       	mov    eax,0x2
c0012100:	31 d2                	xor    edx,edx
c0012102:	83 c4 18             	add    esp,0x18
c0012105:	5b                   	pop    ebx
c0012106:	c3                   	ret    
c0012107:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001210c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012111:	83 c4 18             	add    esp,0x18
c0012114:	5b                   	pop    ebx
c0012115:	c3                   	ret    
c0012116:	b8 01 00 00 00       	mov    eax,0x1
c001211b:	31 d2                	xor    edx,edx
c001211d:	eb e3                	jmp    c0012102 <SysReadDir(regs*)+0x5d>
c001211f:	31 c0                	xor    eax,eax
c0012121:	31 d2                	xor    edx,edx
c0012123:	eb dd                	jmp    c0012102 <SysReadDir(regs*)+0x5d>

c0012125 <SysIsATTY(regs*)>:
c0012125:	83 ec 0c             	sub    esp,0xc
c0012128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001212c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001212f:	83 f8 02             	cmp    eax,0x2
c0012132:	76 07                	jbe    c001213b <SysIsATTY(regs*)+0x16>
c0012134:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012139:	75 26                	jne    c0012161 <SysIsATTY(regs*)+0x3c>
c001213b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012140:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012143:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012149:	85 c0                	test   eax,eax
c001214b:	74 24                	je     c0012171 <SysIsATTY(regs*)+0x4c>
c001214d:	83 ec 0c             	sub    esp,0xc
c0012150:	8b 10                	mov    edx,DWORD PTR [eax]
c0012152:	50                   	push   eax
c0012153:	ff 12                	call   DWORD PTR [edx]
c0012155:	31 d2                	xor    edx,edx
c0012157:	0f b6 c0             	movzx  eax,al
c001215a:	83 c4 10             	add    esp,0x10
c001215d:	83 c4 0c             	add    esp,0xc
c0012160:	c3                   	ret    
c0012161:	83 ec 0c             	sub    esp,0xc
c0012164:	50                   	push   eax
c0012165:	e8 33 1d 00 00       	call   c0013e9d <KeGetFileFromDescriptor(int)>
c001216a:	83 c4 10             	add    esp,0x10
c001216d:	85 c0                	test   eax,eax
c001216f:	75 dc                	jne    c001214d <SysIsATTY(regs*)+0x28>
c0012171:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012176:	ba ff ff ff ff       	mov    edx,0xffffffff
c001217b:	83 c4 0c             	add    esp,0xc
c001217e:	c3                   	ret    

c001217f <SysSeek(regs*)>:
c001217f:	53                   	push   ebx
c0012180:	83 ec 08             	sub    esp,0x8
c0012183:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012187:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001218a:	8d 50 fd             	lea    edx,[eax-0x3]
c001218d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012193:	77 39                	ja     c00121ce <SysSeek(regs*)+0x4f>
c0012195:	83 ec 0c             	sub    esp,0xc
c0012198:	50                   	push   eax
c0012199:	e8 ff 1c 00 00       	call   c0013e9d <KeGetFileFromDescriptor(int)>
c001219e:	83 c4 10             	add    esp,0x10
c00121a1:	85 c0                	test   eax,eax
c00121a3:	74 29                	je     c00121ce <SysSeek(regs*)+0x4f>
c00121a5:	83 ec 04             	sub    esp,0x4
c00121a8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00121ab:	31 db                	xor    ebx,ebx
c00121ad:	53                   	push   ebx
c00121ae:	51                   	push   ecx
c00121af:	50                   	push   eax
c00121b0:	e8 f1 6d ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c00121b5:	83 c4 10             	add    esp,0x10
c00121b8:	85 c0                	test   eax,eax
c00121ba:	0f 95 c0             	setne  al
c00121bd:	31 d2                	xor    edx,edx
c00121bf:	0f b6 c0             	movzx  eax,al
c00121c2:	f7 d8                	neg    eax
c00121c4:	83 d2 00             	adc    edx,0x0
c00121c7:	83 c4 08             	add    esp,0x8
c00121ca:	f7 da                	neg    edx
c00121cc:	5b                   	pop    ebx
c00121cd:	c3                   	ret    
c00121ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121d8:	83 c4 08             	add    esp,0x8
c00121db:	5b                   	pop    ebx
c00121dc:	c3                   	ret    

c00121dd <SysTell(regs*)>:
c00121dd:	53                   	push   ebx
c00121de:	83 ec 08             	sub    esp,0x8
c00121e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00121e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121e8:	83 f8 02             	cmp    eax,0x2
c00121eb:	76 56                	jbe    c0012243 <SysTell(regs*)+0x66>
c00121ed:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00121f2:	76 19                	jbe    c001220d <SysTell(regs*)+0x30>
c00121f4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00121f7:	31 d2                	xor    edx,edx
c00121f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00121ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012206:	31 c0                	xor    eax,eax
c0012208:	83 c4 08             	add    esp,0x8
c001220b:	5b                   	pop    ebx
c001220c:	c3                   	ret    
c001220d:	83 ec 0c             	sub    esp,0xc
c0012210:	50                   	push   eax
c0012211:	e8 87 1c 00 00       	call   c0013e9d <KeGetFileFromDescriptor(int)>
c0012216:	83 c4 10             	add    esp,0x10
c0012219:	85 c0                	test   eax,eax
c001221b:	74 26                	je     c0012243 <SysTell(regs*)+0x66>
c001221d:	83 ec 08             	sub    esp,0x8
c0012220:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012223:	52                   	push   edx
c0012224:	50                   	push   eax
c0012225:	e8 28 6e ff ff       	call   c0009052 <File::tell(unsigned long long*)>
c001222a:	83 c4 10             	add    esp,0x10
c001222d:	85 c0                	test   eax,eax
c001222f:	0f 95 c0             	setne  al
c0012232:	31 d2                	xor    edx,edx
c0012234:	0f b6 c0             	movzx  eax,al
c0012237:	f7 d8                	neg    eax
c0012239:	83 d2 00             	adc    edx,0x0
c001223c:	83 c4 08             	add    esp,0x8
c001223f:	f7 da                	neg    edx
c0012241:	5b                   	pop    ebx
c0012242:	c3                   	ret    
c0012243:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012248:	ba ff ff ff ff       	mov    edx,0xffffffff
c001224d:	83 c4 08             	add    esp,0x8
c0012250:	5b                   	pop    ebx
c0012251:	c3                   	ret    

c0012252 <SysSize(regs*)>:
c0012252:	53                   	push   ebx
c0012253:	83 ec 18             	sub    esp,0x18
c0012256:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001225a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001225d:	83 f8 02             	cmp    eax,0x2
c0012260:	76 5b                	jbe    c00122bd <SysSize(regs*)+0x6b>
c0012262:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012267:	76 19                	jbe    c0012282 <SysSize(regs*)+0x30>
c0012269:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001226c:	31 d2                	xor    edx,edx
c001226e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012274:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001227b:	31 c0                	xor    eax,eax
c001227d:	83 c4 18             	add    esp,0x18
c0012280:	5b                   	pop    ebx
c0012281:	c3                   	ret    
c0012282:	83 ec 0c             	sub    esp,0xc
c0012285:	50                   	push   eax
c0012286:	e8 12 1c 00 00       	call   c0013e9d <KeGetFileFromDescriptor(int)>
c001228b:	83 c4 10             	add    esp,0x10
c001228e:	85 c0                	test   eax,eax
c0012290:	74 2b                	je     c00122bd <SysSize(regs*)+0x6b>
c0012292:	83 ec 04             	sub    esp,0x4
c0012295:	8d 54 24 13          	lea    edx,[esp+0x13]
c0012299:	52                   	push   edx
c001229a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001229d:	52                   	push   edx
c001229e:	50                   	push   eax
c001229f:	e8 46 6f ff ff       	call   c00091ea <File::stat(unsigned long long*, bool*)>
c00122a4:	83 c4 10             	add    esp,0x10
c00122a7:	85 c0                	test   eax,eax
c00122a9:	0f 95 c0             	setne  al
c00122ac:	31 d2                	xor    edx,edx
c00122ae:	0f b6 c0             	movzx  eax,al
c00122b1:	f7 d8                	neg    eax
c00122b3:	83 d2 00             	adc    edx,0x0
c00122b6:	83 c4 18             	add    esp,0x18
c00122b9:	f7 da                	neg    edx
c00122bb:	5b                   	pop    ebx
c00122bc:	c3                   	ret    
c00122bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122c7:	83 c4 18             	add    esp,0x18
c00122ca:	5b                   	pop    ebx
c00122cb:	c3                   	ret    

c00122cc <SysSizeFromFilename(regs*)>:
c00122cc:	55                   	push   ebp
c00122cd:	57                   	push   edi
c00122ce:	56                   	push   esi
c00122cf:	53                   	push   ebx
c00122d0:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00122d6:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00122dd:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00122e0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00122e3:	85 f6                	test   esi,esi
c00122e5:	74 34                	je     c001231b <SysSizeFromFilename(regs*)+0x4f>
c00122e7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122f0:	83 f8 02             	cmp    eax,0x2
c00122f3:	76 2d                	jbe    c0012322 <SysSizeFromFilename(regs*)+0x56>
c00122f5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122fa:	76 3b                	jbe    c0012337 <SysSizeFromFilename(regs*)+0x6b>
c00122fc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00122ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012305:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001230c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012312:	31 c0                	xor    eax,eax
c0012314:	5b                   	pop    ebx
c0012315:	31 d2                	xor    edx,edx
c0012317:	5e                   	pop    esi
c0012318:	5f                   	pop    edi
c0012319:	5d                   	pop    ebp
c001231a:	c3                   	ret    
c001231b:	89 f8                	mov    eax,edi
c001231d:	83 f8 02             	cmp    eax,0x2
c0012320:	77 d3                	ja     c00122f5 <SysSizeFromFilename(regs*)+0x29>
c0012322:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012328:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001232d:	5b                   	pop    ebx
c001232e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012333:	5e                   	pop    esi
c0012334:	5f                   	pop    edi
c0012335:	5d                   	pop    ebp
c0012336:	c3                   	ret    
c0012337:	83 ec 0c             	sub    esp,0xc
c001233a:	68 14 01 00 00       	push   0x114
c001233f:	e8 cb e2 ff ff       	call   c001060f <malloc>
c0012344:	6a 01                	push   0x1
c0012346:	89 c5                	mov    ebp,eax
c0012348:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001234d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012350:	50                   	push   eax
c0012351:	57                   	push   edi
c0012352:	55                   	push   ebp
c0012353:	e8 74 6a ff ff       	call   c0008dcc <File::File(char const*, Process*, bool)>
c0012358:	83 c4 20             	add    esp,0x20
c001235b:	85 ed                	test   ebp,ebp
c001235d:	74 c3                	je     c0012322 <SysSizeFromFilename(regs*)+0x56>
c001235f:	83 ec 04             	sub    esp,0x4
c0012362:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012366:	50                   	push   eax
c0012367:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001236a:	51                   	push   ecx
c001236b:	55                   	push   ebp
c001236c:	e8 79 6e ff ff       	call   c00091ea <File::stat(unsigned long long*, bool*)>
c0012371:	89 c3                	mov    ebx,eax
c0012373:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012376:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012379:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001237c:	83 c4 10             	add    esp,0x10
c001237f:	85 db                	test   ebx,ebx
c0012381:	75 9f                	jne    c0012322 <SysSizeFromFilename(regs*)+0x56>
c0012383:	6a 00                	push   0x0
c0012385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001238a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001238d:	05 0c 01 00 00       	add    eax,0x10c
c0012392:	50                   	push   eax
c0012393:	57                   	push   edi
c0012394:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001239b:	53                   	push   ebx
c001239c:	e8 11 68 ff ff       	call   c0008bb2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00123a1:	58                   	pop    eax
c00123a2:	5a                   	pop    edx
c00123a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00123a7:	50                   	push   eax
c00123a8:	53                   	push   ebx
c00123a9:	e8 8a 62 ff ff       	call   c0008638 <KeDereferenceSymlink(char const*, char*)>
c00123ae:	83 c4 10             	add    esp,0x10
c00123b1:	83 f8 01             	cmp    eax,0x1
c00123b4:	74 1a                	je     c00123d0 <SysSizeFromFilename(regs*)+0x104>
c00123b6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00123bb:	74 26                	je     c00123e3 <SysSizeFromFilename(regs*)+0x117>
c00123bd:	85 f6                	test   esi,esi
c00123bf:	0f 84 47 ff ff ff    	je     c001230c <SysSizeFromFilename(regs*)+0x40>
c00123c5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00123cb:	e9 3c ff ff ff       	jmp    c001230c <SysSizeFromFilename(regs*)+0x40>
c00123d0:	85 f6                	test   esi,esi
c00123d2:	0f 84 34 ff ff ff    	je     c001230c <SysSizeFromFilename(regs*)+0x40>
c00123d8:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00123de:	e9 29 ff ff ff       	jmp    c001230c <SysSizeFromFilename(regs*)+0x40>
c00123e3:	85 f6                	test   esi,esi
c00123e5:	0f 84 21 ff ff ff    	je     c001230c <SysSizeFromFilename(regs*)+0x40>
c00123eb:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00123f1:	e9 16 ff ff ff       	jmp    c001230c <SysSizeFromFilename(regs*)+0x40>

c00123f6 <SysSizeFromFilenameNoSymlink(regs*)>:
c00123f6:	55                   	push   ebp
c00123f7:	57                   	push   edi
c00123f8:	56                   	push   esi
c00123f9:	53                   	push   ebx
c00123fa:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0012400:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0012407:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001240a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001240d:	85 f6                	test   esi,esi
c001240f:	74 34                	je     c0012445 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0012411:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012417:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001241a:	83 f8 02             	cmp    eax,0x2
c001241d:	76 2d                	jbe    c001244c <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001241f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012424:	76 3b                	jbe    c0012461 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0012426:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012429:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001242f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012436:	81 c4 4c 02 00 00    	add    esp,0x24c
c001243c:	31 c0                	xor    eax,eax
c001243e:	5b                   	pop    ebx
c001243f:	31 d2                	xor    edx,edx
c0012441:	5e                   	pop    esi
c0012442:	5f                   	pop    edi
c0012443:	5d                   	pop    ebp
c0012444:	c3                   	ret    
c0012445:	89 f8                	mov    eax,edi
c0012447:	83 f8 02             	cmp    eax,0x2
c001244a:	77 d3                	ja     c001241f <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c001244c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012452:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012457:	5b                   	pop    ebx
c0012458:	ba ff ff ff ff       	mov    edx,0xffffffff
c001245d:	5e                   	pop    esi
c001245e:	5f                   	pop    edi
c001245f:	5d                   	pop    ebp
c0012460:	c3                   	ret    
c0012461:	83 ec 0c             	sub    esp,0xc
c0012464:	68 14 01 00 00       	push   0x114
c0012469:	e8 a1 e1 ff ff       	call   c001060f <malloc>
c001246e:	6a 00                	push   0x0
c0012470:	89 c5                	mov    ebp,eax
c0012472:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012477:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001247a:	50                   	push   eax
c001247b:	57                   	push   edi
c001247c:	55                   	push   ebp
c001247d:	e8 4a 69 ff ff       	call   c0008dcc <File::File(char const*, Process*, bool)>
c0012482:	83 c4 20             	add    esp,0x20
c0012485:	85 ed                	test   ebp,ebp
c0012487:	74 c3                	je     c001244c <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012489:	83 ec 04             	sub    esp,0x4
c001248c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012490:	50                   	push   eax
c0012491:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012494:	51                   	push   ecx
c0012495:	55                   	push   ebp
c0012496:	e8 4f 6d ff ff       	call   c00091ea <File::stat(unsigned long long*, bool*)>
c001249b:	89 c3                	mov    ebx,eax
c001249d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00124a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124a6:	83 c4 10             	add    esp,0x10
c00124a9:	85 db                	test   ebx,ebx
c00124ab:	75 9f                	jne    c001244c <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00124ad:	6a 00                	push   0x0
c00124af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00124b7:	05 0c 01 00 00       	add    eax,0x10c
c00124bc:	50                   	push   eax
c00124bd:	57                   	push   edi
c00124be:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00124c5:	53                   	push   ebx
c00124c6:	e8 e7 66 ff ff       	call   c0008bb2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00124cb:	58                   	pop    eax
c00124cc:	5a                   	pop    edx
c00124cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00124d1:	50                   	push   eax
c00124d2:	53                   	push   ebx
c00124d3:	e8 60 61 ff ff       	call   c0008638 <KeDereferenceSymlink(char const*, char*)>
c00124d8:	83 c4 10             	add    esp,0x10
c00124db:	83 f8 01             	cmp    eax,0x1
c00124de:	74 1a                	je     c00124fa <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c00124e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00124e5:	74 26                	je     c001250d <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c00124e7:	85 f6                	test   esi,esi
c00124e9:	0f 84 47 ff ff ff    	je     c0012436 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00124ef:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00124f5:	e9 3c ff ff ff       	jmp    c0012436 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00124fa:	85 f6                	test   esi,esi
c00124fc:	0f 84 34 ff ff ff    	je     c0012436 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012502:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012508:	e9 29 ff ff ff       	jmp    c0012436 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001250d:	85 f6                	test   esi,esi
c001250f:	0f 84 21 ff ff ff    	je     c0012436 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012515:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001251b:	e9 16 ff ff ff       	jmp    c0012436 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0012520 <SysClose(regs*)>:
c0012520:	53                   	push   ebx
c0012521:	83 ec 08             	sub    esp,0x8
c0012524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012528:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001252b:	83 f8 02             	cmp    eax,0x2
c001252e:	76 41                	jbe    c0012571 <SysClose(regs*)+0x51>
c0012530:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012536:	83 fa 01             	cmp    edx,0x1
c0012539:	76 2d                	jbe    c0012568 <SysClose(regs*)+0x48>
c001253b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012540:	77 2f                	ja     c0012571 <SysClose(regs*)+0x51>
c0012542:	83 ec 0c             	sub    esp,0xc
c0012545:	50                   	push   eax
c0012546:	e8 52 19 00 00       	call   c0013e9d <KeGetFileFromDescriptor(int)>
c001254b:	83 c4 10             	add    esp,0x10
c001254e:	89 c3                	mov    ebx,eax
c0012550:	85 c0                	test   eax,eax
c0012552:	74 1d                	je     c0012571 <SysClose(regs*)+0x51>
c0012554:	83 ec 0c             	sub    esp,0xc
c0012557:	50                   	push   eax
c0012558:	e8 e9 69 ff ff       	call   c0008f46 <File::close()>
c001255d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001255f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012562:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012565:	83 c4 10             	add    esp,0x10
c0012568:	31 c0                	xor    eax,eax
c001256a:	31 d2                	xor    edx,edx
c001256c:	83 c4 08             	add    esp,0x8
c001256f:	5b                   	pop    ebx
c0012570:	c3                   	ret    
c0012571:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012576:	ba ff ff ff ff       	mov    edx,0xffffffff
c001257b:	83 c4 08             	add    esp,0x8
c001257e:	5b                   	pop    ebx
c001257f:	c3                   	ret    

c0012580 <SysOpenDir(regs*)>:
c0012580:	56                   	push   esi
c0012581:	53                   	push   ebx
c0012582:	83 ec 04             	sub    esp,0x4
c0012585:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012589:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001258c:	85 c9                	test   ecx,ecx
c001258e:	74 5d                	je     c00125ed <SysOpenDir(regs*)+0x6d>
c0012590:	83 ec 0c             	sub    esp,0xc
c0012593:	68 14 01 00 00       	push   0x114
c0012598:	e8 72 e0 ff ff       	call   c001060f <malloc>
c001259d:	83 c4 0c             	add    esp,0xc
c00125a0:	89 c6                	mov    esi,eax
c00125a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00125aa:	50                   	push   eax
c00125ab:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00125ae:	52                   	push   edx
c00125af:	56                   	push   esi
c00125b0:	e8 f5 6d ff ff       	call   c00093aa <Directory::Directory(char const*, Process*)>
c00125b5:	83 c4 10             	add    esp,0x10
c00125b8:	85 f6                	test   esi,esi
c00125ba:	74 31                	je     c00125ed <SysOpenDir(regs*)+0x6d>
c00125bc:	83 ec 0c             	sub    esp,0xc
c00125bf:	56                   	push   esi
c00125c0:	e8 ad 6e ff ff       	call   c0009472 <Directory::open()>
c00125c5:	83 c4 10             	add    esp,0x10
c00125c8:	85 c0                	test   eax,eax
c00125ca:	75 21                	jne    c00125ed <SysOpenDir(regs*)+0x6d>
c00125cc:	83 ec 0c             	sub    esp,0xc
c00125cf:	56                   	push   esi
c00125d0:	e8 cb 15 00 00       	call   c0013ba0 <UnixFile::getFileDescriptor()>
c00125d5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00125d8:	83 c4 10             	add    esp,0x10
c00125db:	89 02                	mov    DWORD PTR [edx],eax
c00125dd:	c1 f8 1f             	sar    eax,0x1f
c00125e0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00125e3:	83 c4 04             	add    esp,0x4
c00125e6:	31 c0                	xor    eax,eax
c00125e8:	31 d2                	xor    edx,edx
c00125ea:	5b                   	pop    ebx
c00125eb:	5e                   	pop    esi
c00125ec:	c3                   	ret    
c00125ed:	83 c4 04             	add    esp,0x4
c00125f0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125f5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125fa:	5b                   	pop    ebx
c00125fb:	5e                   	pop    esi
c00125fc:	c3                   	ret    

c00125fd <SysMakeDir(regs*)>:
c00125fd:	56                   	push   esi
c00125fe:	53                   	push   ebx
c00125ff:	83 ec 10             	sub    esp,0x10
c0012602:	68 14 01 00 00       	push   0x114
c0012607:	e8 03 e0 ff ff       	call   c001060f <malloc>
c001260c:	83 c4 0c             	add    esp,0xc
c001260f:	89 c3                	mov    ebx,eax
c0012611:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012616:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012619:	50                   	push   eax
c001261a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001261e:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012621:	52                   	push   edx
c0012622:	53                   	push   ebx
c0012623:	e8 82 6d ff ff       	call   c00093aa <Directory::Directory(char const*, Process*)>
c0012628:	83 c4 10             	add    esp,0x10
c001262b:	85 db                	test   ebx,ebx
c001262d:	74 2c                	je     c001265b <SysMakeDir(regs*)+0x5e>
c001262f:	83 ec 0c             	sub    esp,0xc
c0012632:	53                   	push   ebx
c0012633:	e8 1a 70 ff ff       	call   c0009652 <Directory::create()>
c0012638:	89 c6                	mov    esi,eax
c001263a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001263c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001263f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012642:	83 c4 10             	add    esp,0x10
c0012645:	31 c0                	xor    eax,eax
c0012647:	85 f6                	test   esi,esi
c0012649:	0f 95 c0             	setne  al
c001264c:	31 d2                	xor    edx,edx
c001264e:	f7 d8                	neg    eax
c0012650:	83 d2 00             	adc    edx,0x0
c0012653:	83 c4 04             	add    esp,0x4
c0012656:	f7 da                	neg    edx
c0012658:	5b                   	pop    ebx
c0012659:	5e                   	pop    esi
c001265a:	c3                   	ret    
c001265b:	83 c4 04             	add    esp,0x4
c001265e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012663:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012668:	5b                   	pop    ebx
c0012669:	5e                   	pop    esi
c001266a:	c3                   	ret    

c001266b <SysCloseDir(regs*)>:
c001266b:	53                   	push   ebx
c001266c:	83 ec 08             	sub    esp,0x8
c001266f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012673:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012676:	8d 50 fd             	lea    edx,[eax-0x3]
c0012679:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001267f:	77 2f                	ja     c00126b0 <SysCloseDir(regs*)+0x45>
c0012681:	83 ec 0c             	sub    esp,0xc
c0012684:	50                   	push   eax
c0012685:	e8 13 18 00 00       	call   c0013e9d <KeGetFileFromDescriptor(int)>
c001268a:	83 c4 10             	add    esp,0x10
c001268d:	89 c3                	mov    ebx,eax
c001268f:	85 c0                	test   eax,eax
c0012691:	74 1d                	je     c00126b0 <SysCloseDir(regs*)+0x45>
c0012693:	83 ec 0c             	sub    esp,0xc
c0012696:	50                   	push   eax
c0012697:	e8 32 6e ff ff       	call   c00094ce <Directory::close()>
c001269c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001269e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126a4:	83 c4 10             	add    esp,0x10
c00126a7:	31 c0                	xor    eax,eax
c00126a9:	31 d2                	xor    edx,edx
c00126ab:	83 c4 08             	add    esp,0x8
c00126ae:	5b                   	pop    ebx
c00126af:	c3                   	ret    
c00126b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00126b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00126ba:	83 c4 08             	add    esp,0x8
c00126bd:	5b                   	pop    ebx
c00126be:	c3                   	ret    

c00126bf <SysWait(regs*)>:
c00126bf:	83 ec 10             	sub    esp,0x10
c00126c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126c6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00126c9:	52                   	push   edx
c00126ca:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00126cd:	51                   	push   ecx
c00126ce:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00126d1:	50                   	push   eax
c00126d2:	e8 21 50 00 00       	call   c00176f8 <waitTask(int, int*, int)>
c00126d7:	83 c4 1c             	add    esp,0x1c
c00126da:	89 c2                	mov    edx,eax
c00126dc:	c1 fa 1f             	sar    edx,0x1f
c00126df:	c3                   	ret    

c00126e0 <SysNotImpl(regs*)>:
c00126e0:	83 ec 18             	sub    esp,0x18
c00126e3:	68 2f c5 02 c0       	push   0xc002c52f
c00126e8:	e8 77 e3 ff ff       	call   c0010a64 <KePanic(char const*)>
c00126ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00126f2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00126f7:	83 c4 1c             	add    esp,0x1c
c00126fa:	c3                   	ret    

c00126fb <SysPanic(regs*)>:
c00126fb:	83 ec 18             	sub    esp,0x18
c00126fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012702:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012705:	50                   	push   eax
c0012706:	e8 59 e3 ff ff       	call   c0010a64 <KePanic(char const*)>
c001270b:	b8 01 00 00 00       	mov    eax,0x1
c0012710:	31 d2                	xor    edx,edx
c0012712:	83 c4 1c             	add    esp,0x1c
c0012715:	c3                   	ret    

c0012716 <SysRmdir(regs*)>:
c0012716:	56                   	push   esi
c0012717:	53                   	push   ebx
c0012718:	83 ec 20             	sub    esp,0x20
c001271b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001271f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012722:	68 14 01 00 00       	push   0x114
c0012727:	e8 e3 de ff ff       	call   c001060f <malloc>
c001272c:	6a 00                	push   0x0
c001272e:	89 c3                	mov    ebx,eax
c0012730:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012735:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012738:	50                   	push   eax
c0012739:	56                   	push   esi
c001273a:	53                   	push   ebx
c001273b:	e8 8c 66 ff ff       	call   c0008dcc <File::File(char const*, Process*, bool)>
c0012740:	83 c4 14             	add    esp,0x14
c0012743:	53                   	push   ebx
c0012744:	e8 6d 69 ff ff       	call   c00090b6 <File::unlink()>
c0012749:	83 c4 10             	add    esp,0x10
c001274c:	85 db                	test   ebx,ebx
c001274e:	74 14                	je     c0012764 <SysRmdir(regs*)+0x4e>
c0012750:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012754:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012756:	83 ec 0c             	sub    esp,0xc
c0012759:	53                   	push   ebx
c001275a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001275d:	83 c4 10             	add    esp,0x10
c0012760:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012764:	85 c0                	test   eax,eax
c0012766:	0f 95 c0             	setne  al
c0012769:	31 d2                	xor    edx,edx
c001276b:	0f b6 c0             	movzx  eax,al
c001276e:	f7 d8                	neg    eax
c0012770:	83 d2 00             	adc    edx,0x0
c0012773:	83 c4 14             	add    esp,0x14
c0012776:	f7 da                	neg    edx
c0012778:	5b                   	pop    ebx
c0012779:	5e                   	pop    esi
c001277a:	c3                   	ret    

c001277b <SysUnlink(regs*)>:
c001277b:	56                   	push   esi
c001277c:	53                   	push   ebx
c001277d:	83 ec 20             	sub    esp,0x20
c0012780:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012784:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012787:	68 14 01 00 00       	push   0x114
c001278c:	e8 7e de ff ff       	call   c001060f <malloc>
c0012791:	6a 00                	push   0x0
c0012793:	89 c3                	mov    ebx,eax
c0012795:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001279a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001279d:	50                   	push   eax
c001279e:	56                   	push   esi
c001279f:	53                   	push   ebx
c00127a0:	e8 27 66 ff ff       	call   c0008dcc <File::File(char const*, Process*, bool)>
c00127a5:	83 c4 14             	add    esp,0x14
c00127a8:	53                   	push   ebx
c00127a9:	e8 08 69 ff ff       	call   c00090b6 <File::unlink()>
c00127ae:	83 c4 10             	add    esp,0x10
c00127b1:	85 db                	test   ebx,ebx
c00127b3:	74 14                	je     c00127c9 <SysUnlink(regs*)+0x4e>
c00127b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127b9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127bb:	83 ec 0c             	sub    esp,0xc
c00127be:	53                   	push   ebx
c00127bf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00127c2:	83 c4 10             	add    esp,0x10
c00127c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127c9:	85 c0                	test   eax,eax
c00127cb:	0f 95 c0             	setne  al
c00127ce:	31 d2                	xor    edx,edx
c00127d0:	0f b6 c0             	movzx  eax,al
c00127d3:	f7 d8                	neg    eax
c00127d5:	83 d2 00             	adc    edx,0x0
c00127d8:	83 c4 14             	add    esp,0x14
c00127db:	f7 da                	neg    edx
c00127dd:	5b                   	pop    ebx
c00127de:	5e                   	pop    esi
c00127df:	c3                   	ret    

c00127e0 <SysGetArgv(regs*)>:
c00127e0:	83 ec 0c             	sub    esp,0xc
c00127e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00127e7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00127ea:	85 c0                	test   eax,eax
c00127ec:	78 2c                	js     c001281a <SysGetArgv(regs*)+0x3a>
c00127ee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00127f4:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00127f7:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c00127fd:	7d 1b                	jge    c001281a <SysGetArgv(regs*)+0x3a>
c00127ff:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0012806:	85 c0                	test   eax,eax
c0012808:	74 18                	je     c0012822 <SysGetArgv(regs*)+0x42>
c001280a:	83 ec 08             	sub    esp,0x8
c001280d:	50                   	push   eax
c001280e:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012811:	50                   	push   eax
c0012812:	e8 29 de fe ff       	call   c0000640 <strcpy>
c0012817:	83 c4 10             	add    esp,0x10
c001281a:	31 c0                	xor    eax,eax
c001281c:	31 d2                	xor    edx,edx
c001281e:	83 c4 0c             	add    esp,0xc
c0012821:	c3                   	ret    
c0012822:	b8 01 00 00 00       	mov    eax,0x1
c0012827:	31 d2                	xor    edx,edx
c0012829:	83 c4 0c             	add    esp,0xc
c001282c:	c3                   	ret    

c001282d <SysUSleep(regs*)>:
c001282d:	83 ec 1c             	sub    esp,0x1c
c0012830:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012834:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012837:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001283a:	6a 00                	push   0x0
c001283c:	6a 64                	push   0x64
c001283e:	52                   	push   edx
c001283f:	50                   	push   eax
c0012840:	e8 0f 23 01 00       	call   c0024b54 <__udivdi3>
c0012845:	83 c4 18             	add    esp,0x18
c0012848:	52                   	push   edx
c0012849:	50                   	push   eax
c001284a:	e8 a1 4f 00 00       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c001284f:	31 c0                	xor    eax,eax
c0012851:	31 d2                	xor    edx,edx
c0012853:	83 c4 1c             	add    esp,0x1c
c0012856:	c3                   	ret    

c0012857 <SysSpawn(regs*)>:
c0012857:	56                   	push   esi
c0012858:	53                   	push   ebx
c0012859:	83 ec 04             	sub    esp,0x4
c001285c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012860:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012863:	85 f6                	test   esi,esi
c0012865:	75 0a                	jne    c0012871 <SysSpawn(regs*)+0x1a>
c0012867:	83 c4 04             	add    esp,0x4
c001286a:	31 c0                	xor    eax,eax
c001286c:	31 d2                	xor    edx,edx
c001286e:	5b                   	pop    ebx
c001286f:	5e                   	pop    esi
c0012870:	c3                   	ret    
c0012871:	83 ec 0c             	sub    esp,0xc
c0012874:	68 c4 07 00 00       	push   0x7c4
c0012879:	e8 91 dd ff ff       	call   c001060f <malloc>
c001287e:	83 c4 10             	add    esp,0x10
c0012881:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012884:	89 c6                	mov    esi,eax
c0012886:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012889:	85 c9                	test   ecx,ecx
c001288b:	74 39                	je     c00128c6 <SysSpawn(regs*)+0x6f>
c001288d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012892:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012895:	52                   	push   edx
c0012896:	50                   	push   eax
c0012897:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001289a:	50                   	push   eax
c001289b:	56                   	push   esi
c001289c:	e8 17 46 00 00       	call   c0016eb8 <Process::Process(char const*, Process*, char**)>
c00128a1:	83 c4 10             	add    esp,0x10
c00128a4:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c00128ab:	75 ba                	jne    c0012867 <SysSpawn(regs*)+0x10>
c00128ad:	83 ec 0c             	sub    esp,0xc
c00128b0:	56                   	push   esi
c00128b1:	e8 de 4b 00 00       	call   c0017494 <Process::createUserThread()>
c00128b6:	8b 06                	mov    eax,DWORD PTR [esi]
c00128b8:	83 c4 10             	add    esp,0x10
c00128bb:	89 c2                	mov    edx,eax
c00128bd:	83 c4 04             	add    esp,0x4
c00128c0:	c1 fa 1f             	sar    edx,0x1f
c00128c3:	5b                   	pop    ebx
c00128c4:	5e                   	pop    esi
c00128c5:	c3                   	ret    
c00128c6:	31 c0                	xor    eax,eax
c00128c8:	eb cb                	jmp    c0012895 <SysSpawn(regs*)+0x3e>

c00128ca <SysGetEnv(regs*)>:
c00128ca:	57                   	push   edi
c00128cb:	56                   	push   esi
c00128cc:	53                   	push   ebx
c00128cd:	83 ec 1c             	sub    esp,0x1c
c00128d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00128d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00128d9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00128dc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00128df:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c00128e2:	51                   	push   ecx
c00128e3:	e8 2f cb ff ff       	call   c000f417 <KeGetProcessTotalEnvCount(Process*)>
c00128e8:	83 c4 10             	add    esp,0x10
c00128eb:	39 c7                	cmp    edi,eax
c00128ed:	7c 14                	jl     c0012903 <SysGetEnv(regs*)+0x39>
c00128ef:	85 f6                	test   esi,esi
c00128f1:	75 0b                	jne    c00128fe <SysGetEnv(regs*)+0x34>
c00128f3:	83 c4 10             	add    esp,0x10
c00128f6:	31 c0                	xor    eax,eax
c00128f8:	5b                   	pop    ebx
c00128f9:	31 d2                	xor    edx,edx
c00128fb:	5e                   	pop    esi
c00128fc:	5f                   	pop    edi
c00128fd:	c3                   	ret    
c00128fe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012901:	eb f0                	jmp    c00128f3 <SysGetEnv(regs*)+0x29>
c0012903:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012907:	83 ec 04             	sub    esp,0x4
c001290a:	57                   	push   edi
c001290b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012911:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0012914:	57                   	push   edi
c0012915:	50                   	push   eax
c0012916:	e8 1c cb ff ff       	call   c000f437 <KeGetProcessEnvPair(Process*, int)>
c001291b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001291e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012922:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012926:	83 c4 0c             	add    esp,0xc
c0012929:	85 d2                	test   edx,edx
c001292b:	75 23                	jne    c0012950 <SysGetEnv(regs*)+0x86>
c001292d:	83 ec 0c             	sub    esp,0xc
c0012930:	50                   	push   eax
c0012931:	e8 3a dc fe ff       	call   c0000570 <strlen>
c0012936:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012939:	89 c3                	mov    ebx,eax
c001293b:	e8 30 dc fe ff       	call   c0000570 <strlen>
c0012940:	83 c4 10             	add    esp,0x10
c0012943:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012947:	83 c4 10             	add    esp,0x10
c001294a:	31 d2                	xor    edx,edx
c001294c:	5b                   	pop    ebx
c001294d:	5e                   	pop    esi
c001294e:	5f                   	pop    edi
c001294f:	c3                   	ret    
c0012950:	83 ec 08             	sub    esp,0x8
c0012953:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012956:	50                   	push   eax
c0012957:	56                   	push   esi
c0012958:	e8 e3 dc fe ff       	call   c0000640 <strcpy>
c001295d:	58                   	pop    eax
c001295e:	5a                   	pop    edx
c001295f:	68 49 c5 02 c0       	push   0xc002c549
c0012964:	56                   	push   esi
c0012965:	e8 d6 de fe ff       	call   c0000840 <strcat>
c001296a:	59                   	pop    ecx
c001296b:	5b                   	pop    ebx
c001296c:	57                   	push   edi
c001296d:	56                   	push   esi
c001296e:	e8 cd de fe ff       	call   c0000840 <strcat>
c0012973:	83 c4 10             	add    esp,0x10
c0012976:	e9 78 ff ff ff       	jmp    c00128f3 <SysGetEnv(regs*)+0x29>

c001297b <SysSetFatAttrib(regs*)>:
c001297b:	57                   	push   edi
c001297c:	56                   	push   esi
c001297d:	53                   	push   ebx
c001297e:	83 ec 1c             	sub    esp,0x1c
c0012981:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012985:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012988:	68 14 01 00 00       	push   0x114
c001298d:	e8 7d dc ff ff       	call   c001060f <malloc>
c0012992:	83 c4 0c             	add    esp,0xc
c0012995:	89 c3                	mov    ebx,eax
c0012997:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001299c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001299f:	50                   	push   eax
c00129a0:	57                   	push   edi
c00129a1:	53                   	push   ebx
c00129a2:	e8 23 65 ff ff       	call   c0008eca <File::File(char const*, Process*)>
c00129a7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00129aa:	83 c4 0c             	add    esp,0xc
c00129ad:	0f b6 d4             	movzx  edx,ah
c00129b0:	0f b6 c0             	movzx  eax,al
c00129b3:	52                   	push   edx
c00129b4:	50                   	push   eax
c00129b5:	53                   	push   ebx
c00129b6:	e8 95 67 ff ff       	call   c0009150 <File::chfatattr(unsigned char, unsigned char)>
c00129bb:	83 c4 10             	add    esp,0x10
c00129be:	85 db                	test   ebx,ebx
c00129c0:	74 14                	je     c00129d6 <SysSetFatAttrib(regs*)+0x5b>
c00129c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129c6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00129c8:	83 ec 0c             	sub    esp,0xc
c00129cb:	53                   	push   ebx
c00129cc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00129cf:	83 c4 10             	add    esp,0x10
c00129d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00129d6:	85 c0                	test   eax,eax
c00129d8:	0f 95 c0             	setne  al
c00129db:	31 d2                	xor    edx,edx
c00129dd:	0f b6 c0             	movzx  eax,al
c00129e0:	f7 d8                	neg    eax
c00129e2:	83 d2 00             	adc    edx,0x0
c00129e5:	83 c4 10             	add    esp,0x10
c00129e8:	f7 da                	neg    edx
c00129ea:	5b                   	pop    ebx
c00129eb:	5e                   	pop    esi
c00129ec:	5f                   	pop    edi
c00129ed:	c3                   	ret    

c00129ee <SysShutdown(regs*)>:
c00129ee:	83 ec 1c             	sub    esp,0x1c
c00129f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129f5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00129f8:	85 c9                	test   ecx,ecx
c00129fa:	74 18                	je     c0012a14 <SysShutdown(regs*)+0x26>
c00129fc:	83 f9 01             	cmp    ecx,0x1
c00129ff:	74 26                	je     c0012a27 <SysShutdown(regs*)+0x39>
c0012a01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012a0b:	83 f9 02             	cmp    ecx,0x2
c0012a0e:	74 24                	je     c0012a34 <SysShutdown(regs*)+0x46>
c0012a10:	83 c4 1c             	add    esp,0x1c
c0012a13:	c3                   	ret    
c0012a14:	e8 a1 e9 ff ff       	call   c00113ba <KeShutdown()>
c0012a19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012a23:	83 c4 1c             	add    esp,0x1c
c0012a26:	c3                   	ret    
c0012a27:	e8 c4 e9 ff ff       	call   c00113f0 <KeSleep()>
c0012a2c:	31 c0                	xor    eax,eax
c0012a2e:	31 d2                	xor    edx,edx
c0012a30:	83 c4 1c             	add    esp,0x1c
c0012a33:	c3                   	ret    
c0012a34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a3c:	e8 df e9 ff ff       	call   c0011420 <KeRestart()>
c0012a41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a49:	eb c5                	jmp    c0012a10 <SysShutdown(regs*)+0x22>

c0012a4b <SysPipe(regs*)>:
c0012a4b:	57                   	push   edi
c0012a4c:	56                   	push   esi
c0012a4d:	53                   	push   ebx
c0012a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a52:	83 ec 0c             	sub    esp,0xc
c0012a55:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012a58:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012a5b:	6a 20                	push   0x20
c0012a5d:	e8 ad db ff ff       	call   c001060f <malloc>
c0012a62:	89 c3                	mov    ebx,eax
c0012a64:	58                   	pop    eax
c0012a65:	5a                   	pop    edx
c0012a66:	68 00 50 00 00       	push   0x5000
c0012a6b:	53                   	push   ebx
c0012a6c:	e8 c9 e7 ff ff       	call   c001123a <Pipe::Pipe(int)>
c0012a71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a74:	e8 27 11 00 00       	call   c0013ba0 <UnixFile::getFileDescriptor()>
c0012a79:	89 07                	mov    DWORD PTR [edi],eax
c0012a7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a7e:	e8 1d 11 00 00       	call   c0013ba0 <UnixFile::getFileDescriptor()>
c0012a83:	83 c4 10             	add    esp,0x10
c0012a86:	89 06                	mov    DWORD PTR [esi],eax
c0012a88:	31 d2                	xor    edx,edx
c0012a8a:	5b                   	pop    ebx
c0012a8b:	31 c0                	xor    eax,eax
c0012a8d:	5e                   	pop    esi
c0012a8e:	5f                   	pop    edi
c0012a8f:	c3                   	ret    

c0012a90 <SysGetUnixTime(regs*)>:
c0012a90:	57                   	push   edi
c0012a91:	56                   	push   esi
c0012a92:	53                   	push   ebx
c0012a93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a97:	83 ec 08             	sub    esp,0x8
c0012a9a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a9d:	52                   	push   edx
c0012a9e:	68 4b c5 02 c0       	push   0xc002c54b
c0012aa3:	e8 d4 44 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012aa8:	83 c4 10             	add    esp,0x10
c0012aab:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0012aaf:	74 3d                	je     c0012aee <SysGetUnixTime(regs*)+0x5e>
c0012ab1:	83 ec 0c             	sub    esp,0xc
c0012ab4:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0012ab9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012abf:	50                   	push   eax
c0012ac0:	e8 b5 73 ff ff       	call   c0009e7a <Clock::timeInSecondsLocal()>
c0012ac5:	83 c4 0c             	add    esp,0xc
c0012ac8:	52                   	push   edx
c0012ac9:	50                   	push   eax
c0012aca:	68 5f c5 02 c0       	push   0xc002c55f
c0012acf:	e8 a8 44 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012ad4:	83 c4 10             	add    esp,0x10
c0012ad7:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0012adc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012ae2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ae6:	5b                   	pop    ebx
c0012ae7:	5e                   	pop    esi
c0012ae8:	5f                   	pop    edi
c0012ae9:	e9 8c 73 ff ff       	jmp    c0009e7a <Clock::timeInSecondsLocal()>
c0012aee:	8b 35 50 6b 03 c0    	mov    esi,DWORD PTR ds:0xc0036b50
c0012af4:	8b 3d 54 6b 03 c0    	mov    edi,DWORD PTR ds:0xc0036b54
c0012afa:	89 f0                	mov    eax,esi
c0012afc:	89 fa                	mov    edx,edi
c0012afe:	01 f0                	add    eax,esi
c0012b00:	11 fa                	adc    edx,edi
c0012b02:	01 f0                	add    eax,esi
c0012b04:	11 fa                	adc    edx,edi
c0012b06:	89 c1                	mov    ecx,eax
c0012b08:	89 d3                	mov    ebx,edx
c0012b0a:	0f a4 cb 05          	shld   ebx,ecx,0x5
c0012b0e:	c1 e1 05             	shl    ecx,0x5
c0012b11:	01 c8                	add    eax,ecx
c0012b13:	11 da                	adc    edx,ebx
c0012b15:	01 f0                	add    eax,esi
c0012b17:	5b                   	pop    ebx
c0012b18:	11 fa                	adc    edx,edi
c0012b1a:	5e                   	pop    esi
c0012b1b:	5f                   	pop    edi
c0012b1c:	c3                   	ret    

c0012b1d <string_ends_with(char const*, char const*)>:
c0012b1d:	57                   	push   edi
c0012b1e:	56                   	push   esi
c0012b1f:	53                   	push   ebx
c0012b20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b24:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012b28:	83 ec 0c             	sub    esp,0xc
c0012b2b:	53                   	push   ebx
c0012b2c:	e8 3f da fe ff       	call   c0000570 <strlen>
c0012b31:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b34:	89 c6                	mov    esi,eax
c0012b36:	e8 35 da fe ff       	call   c0000570 <strlen>
c0012b3b:	83 c4 10             	add    esp,0x10
c0012b3e:	39 c6                	cmp    esi,eax
c0012b40:	7d 06                	jge    c0012b48 <string_ends_with(char const*, char const*)+0x2b>
c0012b42:	5b                   	pop    ebx
c0012b43:	31 c0                	xor    eax,eax
c0012b45:	5e                   	pop    esi
c0012b46:	5f                   	pop    edi
c0012b47:	c3                   	ret    
c0012b48:	83 ec 08             	sub    esp,0x8
c0012b4b:	29 c6                	sub    esi,eax
c0012b4d:	57                   	push   edi
c0012b4e:	01 f3                	add    ebx,esi
c0012b50:	53                   	push   ebx
c0012b51:	e8 fa db fe ff       	call   c0000750 <strcmp>
c0012b56:	83 c4 10             	add    esp,0x10
c0012b59:	85 c0                	test   eax,eax
c0012b5b:	5b                   	pop    ebx
c0012b5c:	0f 94 c0             	sete   al
c0012b5f:	5e                   	pop    esi
c0012b60:	0f b6 c0             	movzx  eax,al
c0012b63:	5f                   	pop    edi
c0012b64:	c3                   	ret    

c0012b65 <SysOpen(regs*)>:
c0012b65:	56                   	push   esi
c0012b66:	53                   	push   ebx
c0012b67:	81 ec 04 01 00 00    	sub    esp,0x104
c0012b6d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012b74:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b77:	85 c0                	test   eax,eax
c0012b79:	0f 84 bc 01 00 00    	je     c0012d3b <SysOpen(regs*)+0x1d6>
c0012b7f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012b82:	85 c0                	test   eax,eax
c0012b84:	0f 84 b1 01 00 00    	je     c0012d3b <SysOpen(regs*)+0x1d6>
c0012b8a:	6a 00                	push   0x0
c0012b8c:	68 66 c5 02 c0       	push   0xc002c566
c0012b91:	50                   	push   eax
c0012b92:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b96:	56                   	push   esi
c0012b97:	e8 16 60 ff ff       	call   c0008bb2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012b9c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b9f:	e8 cc d9 fe ff       	call   c0000570 <strlen>
c0012ba4:	83 c4 10             	add    esp,0x10
c0012ba7:	83 e8 01             	sub    eax,0x1
c0012baa:	74 21                	je     c0012bcd <SysOpen(regs*)+0x68>
c0012bac:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012bb0:	eb 12                	jmp    c0012bc4 <SysOpen(regs*)+0x5f>
c0012bb2:	83 fa 3a             	cmp    edx,0x3a
c0012bb5:	74 12                	je     c0012bc9 <SysOpen(regs*)+0x64>
c0012bb7:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012bbb:	83 e8 01             	sub    eax,0x1
c0012bbe:	74 0d                	je     c0012bcd <SysOpen(regs*)+0x68>
c0012bc0:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012bc4:	83 fa 2e             	cmp    edx,0x2e
c0012bc7:	75 e9                	jne    c0012bb2 <SysOpen(regs*)+0x4d>
c0012bc9:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012bcd:	83 ec 08             	sub    esp,0x8
c0012bd0:	68 6a c5 02 c0       	push   0xc002c56a
c0012bd5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012bd8:	50                   	push   eax
c0012bd9:	e8 3f ff ff ff       	call   c0012b1d <string_ends_with(char const*, char const*)>
c0012bde:	83 c4 10             	add    esp,0x10
c0012be1:	85 c0                	test   eax,eax
c0012be3:	74 1d                	je     c0012c02 <SysOpen(regs*)+0x9d>
c0012be5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012be8:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012bee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012bf5:	81 c4 04 01 00 00    	add    esp,0x104
c0012bfb:	31 c0                	xor    eax,eax
c0012bfd:	31 d2                	xor    edx,edx
c0012bff:	5b                   	pop    ebx
c0012c00:	5e                   	pop    esi
c0012c01:	c3                   	ret    
c0012c02:	83 ec 08             	sub    esp,0x8
c0012c05:	68 6f c5 02 c0       	push   0xc002c56f
c0012c0a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012c0d:	50                   	push   eax
c0012c0e:	e8 0a ff ff ff       	call   c0012b1d <string_ends_with(char const*, char const*)>
c0012c13:	83 c4 10             	add    esp,0x10
c0012c16:	85 c0                	test   eax,eax
c0012c18:	75 cb                	jne    c0012be5 <SysOpen(regs*)+0x80>
c0012c1a:	83 ec 08             	sub    esp,0x8
c0012c1d:	68 6b c5 02 c0       	push   0xc002c56b
c0012c22:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012c25:	50                   	push   eax
c0012c26:	e8 25 db fe ff       	call   c0000750 <strcmp>
c0012c2b:	83 c4 10             	add    esp,0x10
c0012c2e:	85 c0                	test   eax,eax
c0012c30:	74 b3                	je     c0012be5 <SysOpen(regs*)+0x80>
c0012c32:	83 ec 08             	sub    esp,0x8
c0012c35:	68 6a c5 02 c0       	push   0xc002c56a
c0012c3a:	56                   	push   esi
c0012c3b:	e8 dd fe ff ff       	call   c0012b1d <string_ends_with(char const*, char const*)>
c0012c40:	83 c4 10             	add    esp,0x10
c0012c43:	85 c0                	test   eax,eax
c0012c45:	75 9e                	jne    c0012be5 <SysOpen(regs*)+0x80>
c0012c47:	83 ec 08             	sub    esp,0x8
c0012c4a:	68 74 c5 02 c0       	push   0xc002c574
c0012c4f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012c52:	50                   	push   eax
c0012c53:	e8 c5 fe ff ff       	call   c0012b1d <string_ends_with(char const*, char const*)>
c0012c58:	83 c4 10             	add    esp,0x10
c0012c5b:	85 c0                	test   eax,eax
c0012c5d:	0f 85 eb 00 00 00    	jne    c0012d4e <SysOpen(regs*)+0x1e9>
c0012c63:	83 ec 08             	sub    esp,0x8
c0012c66:	68 79 c5 02 c0       	push   0xc002c579
c0012c6b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012c6e:	50                   	push   eax
c0012c6f:	e8 a9 fe ff ff       	call   c0012b1d <string_ends_with(char const*, char const*)>
c0012c74:	83 c4 10             	add    esp,0x10
c0012c77:	85 c0                	test   eax,eax
c0012c79:	0f 85 cf 00 00 00    	jne    c0012d4e <SysOpen(regs*)+0x1e9>
c0012c7f:	83 ec 08             	sub    esp,0x8
c0012c82:	68 75 c5 02 c0       	push   0xc002c575
c0012c87:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012c8a:	51                   	push   ecx
c0012c8b:	e8 c0 da fe ff       	call   c0000750 <strcmp>
c0012c90:	83 c4 10             	add    esp,0x10
c0012c93:	85 c0                	test   eax,eax
c0012c95:	0f 84 b3 00 00 00    	je     c0012d4e <SysOpen(regs*)+0x1e9>
c0012c9b:	83 ec 08             	sub    esp,0x8
c0012c9e:	68 74 c5 02 c0       	push   0xc002c574
c0012ca3:	56                   	push   esi
c0012ca4:	e8 74 fe ff ff       	call   c0012b1d <string_ends_with(char const*, char const*)>
c0012ca9:	83 c4 10             	add    esp,0x10
c0012cac:	85 c0                	test   eax,eax
c0012cae:	0f 85 9a 00 00 00    	jne    c0012d4e <SysOpen(regs*)+0x1e9>
c0012cb4:	83 ec 0c             	sub    esp,0xc
c0012cb7:	68 14 01 00 00       	push   0x114
c0012cbc:	e8 4e d9 ff ff       	call   c001060f <malloc>
c0012cc1:	83 c4 0c             	add    esp,0xc
c0012cc4:	89 c6                	mov    esi,eax
c0012cc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ccb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012cce:	50                   	push   eax
c0012ccf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012cd2:	52                   	push   edx
c0012cd3:	56                   	push   esi
c0012cd4:	e8 f1 61 ff ff       	call   c0008eca <File::File(char const*, Process*)>
c0012cd9:	83 c4 10             	add    esp,0x10
c0012cdc:	85 f6                	test   esi,esi
c0012cde:	74 5b                	je     c0012d3b <SysOpen(regs*)+0x1d6>
c0012ce0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012ce3:	0f b6 c2             	movzx  eax,dl
c0012ce6:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012ce9:	89 d0                	mov    eax,edx
c0012ceb:	83 e0 01             	and    eax,0x1
c0012cee:	f6 c2 02             	test   dl,0x2
c0012cf1:	74 03                	je     c0012cf6 <SysOpen(regs*)+0x191>
c0012cf3:	83 c8 02             	or     eax,0x2
c0012cf6:	f6 c2 04             	test   dl,0x4
c0012cf9:	74 03                	je     c0012cfe <SysOpen(regs*)+0x199>
c0012cfb:	83 c8 04             	or     eax,0x4
c0012cfe:	f6 c2 08             	test   dl,0x8
c0012d01:	74 03                	je     c0012d06 <SysOpen(regs*)+0x1a1>
c0012d03:	83 c8 0a             	or     eax,0xa
c0012d06:	80 e2 10             	and    dl,0x10
c0012d09:	74 03                	je     c0012d0e <SysOpen(regs*)+0x1a9>
c0012d0b:	83 c8 12             	or     eax,0x12
c0012d0e:	83 ec 08             	sub    esp,0x8
c0012d11:	50                   	push   eax
c0012d12:	56                   	push   esi
c0012d13:	e8 d0 61 ff ff       	call   c0008ee8 <File::open(FileOpenMode)>
c0012d18:	83 c4 10             	add    esp,0x10
c0012d1b:	85 c0                	test   eax,eax
c0012d1d:	75 1c                	jne    c0012d3b <SysOpen(regs*)+0x1d6>
c0012d1f:	83 ec 0c             	sub    esp,0xc
c0012d22:	56                   	push   esi
c0012d23:	e8 78 0e 00 00       	call   c0013ba0 <UnixFile::getFileDescriptor()>
c0012d28:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012d2b:	83 c4 10             	add    esp,0x10
c0012d2e:	89 02                	mov    DWORD PTR [edx],eax
c0012d30:	c1 f8 1f             	sar    eax,0x1f
c0012d33:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012d36:	e9 ba fe ff ff       	jmp    c0012bf5 <SysOpen(regs*)+0x90>
c0012d3b:	81 c4 04 01 00 00    	add    esp,0x104
c0012d41:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012d46:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012d4b:	5b                   	pop    ebx
c0012d4c:	5e                   	pop    esi
c0012d4d:	c3                   	ret    
c0012d4e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012d51:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012d57:	e9 92 fe ff ff       	jmp    c0012bee <SysOpen(regs*)+0x89>

c0012d5c <KeSystemCall(regs*, void*)>:
c0012d5c:	53                   	push   ebx
c0012d5d:	83 ec 08             	sub    esp,0x8
c0012d60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d64:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012d67:	83 f8 48             	cmp    eax,0x48
c0012d6a:	77 16                	ja     c0012d82 <KeSystemCall(regs*, void*)+0x26>
c0012d6c:	8b 14 85 80 0a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf580]
c0012d73:	85 d2                	test   edx,edx
c0012d75:	74 0b                	je     c0012d82 <KeSystemCall(regs*, void*)+0x26>
c0012d77:	83 ec 0c             	sub    esp,0xc
c0012d7a:	53                   	push   ebx
c0012d7b:	ff d2                	call   edx
c0012d7d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012d80:	eb 0d                	jmp    c0012d8f <KeSystemCall(regs*, void*)+0x33>
c0012d82:	52                   	push   edx
c0012d83:	52                   	push   edx
c0012d84:	50                   	push   eax
c0012d85:	68 7e c5 02 c0       	push   0xc002c57e
c0012d8a:	e8 ed 41 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012d8f:	83 c4 10             	add    esp,0x10
c0012d92:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012d97:	31 d2                	xor    edx,edx
c0012d99:	83 c4 08             	add    esp,0x8
c0012d9c:	5b                   	pop    ebx
c0012d9d:	c3                   	ret    

c0012d9e <VgaText::isAtty()>:
c0012d9e:	b0 01                	mov    al,0x1
c0012da0:	c3                   	ret    
c0012da1:	90                   	nop

c0012da2 <VgaText::~VgaText()>:
c0012da2:	83 ec 0c             	sub    esp,0xc
c0012da5:	ba e8 c5 02 c0       	mov    edx,0xc002c5e8
c0012daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dae:	89 10                	mov    DWORD PTR [eax],edx
c0012db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db4:	83 ec 0c             	sub    esp,0xc
c0012db7:	50                   	push   eax
c0012db8:	e8 d1 0f 00 00       	call   c0013d8e <UnixFile::~UnixFile()>
c0012dbd:	83 c4 10             	add    esp,0x10
c0012dc0:	90                   	nop
c0012dc1:	83 c4 0c             	add    esp,0xc
c0012dc4:	c3                   	ret    
c0012dc5:	90                   	nop

c0012dc6 <VgaText::~VgaText()>:
c0012dc6:	83 ec 0c             	sub    esp,0xc
c0012dc9:	83 ec 0c             	sub    esp,0xc
c0012dcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dd0:	e8 cd ff ff ff       	call   c0012da2 <VgaText::~VgaText()>
c0012dd5:	83 c4 10             	add    esp,0x10
c0012dd8:	83 ec 08             	sub    esp,0x8
c0012ddb:	68 84 01 00 00       	push   0x184
c0012de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012de4:	e8 2f b3 ff ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0012de9:	83 c4 10             	add    esp,0x10
c0012dec:	83 c4 0c             	add    esp,0xc
c0012def:	c3                   	ret    

c0012df0 <VgaText::read(unsigned long long, void*, int*)>:
c0012df0:	83 ec 10             	sub    esp,0x10
c0012df3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012df7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012dfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dff:	e8 ab 84 ff ff       	call   c000b2af <readKeyboard(VgaText*, char*, unsigned long)>
c0012e04:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012e08:	89 02                	mov    DWORD PTR [edx],eax
c0012e0a:	31 c0                	xor    eax,eax
c0012e0c:	83 c4 1c             	add    esp,0x1c
c0012e0f:	c3                   	ret    

c0012e10 <setTerminalScrollLock(bool)>:
c0012e10:	c3                   	ret    

c0012e11 <doTerminalCycle()>:
c0012e11:	c3                   	ret    

c0012e12 <addToTerminalCycle(VgaText*)>:
c0012e12:	c3                   	ret    

c0012e13 <scrollTerminalScrollLock(int)>:
c0012e13:	c3                   	ret    

c0012e14 <VgaText::updateTitle()>:
c0012e14:	c3                   	ret    
c0012e15:	90                   	nop

c0012e16 <VgaText::load()>:
c0012e16:	c3                   	ret    
c0012e17:	90                   	nop

c0012e18 <VgaText::updateCursor()>:
c0012e18:	83 ec 14             	sub    esp,0x14
c0012e1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e1f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012e22:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012e25:	e8 96 9b 00 00       	call   c001c9c0 <HalConsoleCursorUpdate(int, int)>
c0012e2a:	83 c4 1c             	add    esp,0x1c
c0012e2d:	c3                   	ret    

c0012e2e <VgaText::doANSI_SGR(int)>:
c0012e2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e36:	85 d2                	test   edx,edx
c0012e38:	75 0b                	jne    c0012e45 <VgaText::doANSI_SGR(int)+0x17>
c0012e3a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012e3d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012e40:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012e43:	eb 59                	jmp    c0012e9e <VgaText::doANSI_SGR(int)+0x70>
c0012e45:	83 fa 07             	cmp    edx,0x7
c0012e48:	75 0b                	jne    c0012e55 <VgaText::doANSI_SGR(int)+0x27>
c0012e4a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012e4d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0012e50:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0012e53:	eb 49                	jmp    c0012e9e <VgaText::doANSI_SGR(int)+0x70>
c0012e55:	83 fa 1b             	cmp    edx,0x1b
c0012e58:	74 e0                	je     c0012e3a <VgaText::doANSI_SGR(int)+0xc>
c0012e5a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012e5d:	83 f9 07             	cmp    ecx,0x7
c0012e60:	77 09                	ja     c0012e6b <VgaText::doANSI_SGR(int)+0x3d>
c0012e62:	8b 14 8d e0 0b 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcf420]
c0012e69:	eb 20                	jmp    c0012e8b <VgaText::doANSI_SGR(int)+0x5d>
c0012e6b:	8d 4a d8             	lea    ecx,[edx-0x28]
c0012e6e:	83 f9 07             	cmp    ecx,0x7
c0012e71:	77 09                	ja     c0012e7c <VgaText::doANSI_SGR(int)+0x4e>
c0012e73:	8b 14 8d e0 0b 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcf420]
c0012e7a:	eb 22                	jmp    c0012e9e <VgaText::doANSI_SGR(int)+0x70>
c0012e7c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0012e7f:	83 f9 07             	cmp    ecx,0x7
c0012e82:	77 0b                	ja     c0012e8f <VgaText::doANSI_SGR(int)+0x61>
c0012e84:	8b 14 95 98 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf568]
c0012e8b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012e8e:	c3                   	ret    
c0012e8f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0012e92:	83 f9 07             	cmp    ecx,0x7
c0012e95:	77 0a                	ja     c0012ea1 <VgaText::doANSI_SGR(int)+0x73>
c0012e97:	8b 14 95 70 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf590]
c0012e9e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012ea1:	c3                   	ret    

c0012ea2 <VgaText::setDefaultBgColour(VgaColour)>:
c0012ea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ea6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012eaa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012ead:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012eb0:	c3                   	ret    
c0012eb1:	90                   	nop

c0012eb2 <VgaText::setDefaultFgColour(VgaColour)>:
c0012eb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012eb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012eba:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012ebd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012ec0:	c3                   	ret    
c0012ec1:	90                   	nop

c0012ec2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0012ec2:	53                   	push   ebx
c0012ec3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012ec7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ecb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ecf:	51                   	push   ecx
c0012ed0:	e8 cd ff ff ff       	call   c0012ea2 <VgaText::setDefaultBgColour(VgaColour)>
c0012ed5:	58                   	pop    eax
c0012ed6:	5a                   	pop    edx
c0012ed7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012edb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012edf:	5b                   	pop    ebx
c0012ee0:	eb d0                	jmp    c0012eb2 <VgaText::setDefaultFgColour(VgaColour)>

c0012ee2 <VgaText::setTitleTextColour(VgaColour)>:
c0012ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ee6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012eea:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012eed:	c3                   	ret    

c0012eee <VgaText::setTitleColour(VgaColour)>:
c0012eee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ef2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ef6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012ef9:	c3                   	ret    

c0012efa <VgaText::setTitle(char*)>:
c0012efa:	c3                   	ret    
c0012efb:	90                   	nop

c0012efc <VgaText::combineColours(unsigned char, unsigned char)>:
c0012efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f00:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012f05:	83 e0 0f             	and    eax,0xf
c0012f08:	c1 e2 04             	shl    edx,0x4
c0012f0b:	09 d0                	or     eax,edx
c0012f0d:	c3                   	ret    

c0012f0e <VgaText::scrollScreen()>:
c0012f0e:	55                   	push   ebp
c0012f0f:	57                   	push   edi
c0012f10:	56                   	push   esi
c0012f11:	be 01 00 00 00       	mov    esi,0x1
c0012f16:	53                   	push   ebx
c0012f17:	83 ec 0c             	sub    esp,0xc
c0012f1a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f1e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012f21:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012f27:	31 ff                	xor    edi,edi
c0012f29:	01 e9                	add    ecx,ebp
c0012f2b:	8a 01                	mov    al,BYTE PTR [ecx]
c0012f2d:	83 fe 18             	cmp    esi,0x18
c0012f30:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012f36:	75 20                	jne    c0012f58 <VgaText::scrollScreen()+0x4a>
c0012f38:	f7 c7 01 00 00 00    	test   edi,0x1
c0012f3e:	74 15                	je     c0012f55 <VgaText::scrollScreen()+0x47>
c0012f40:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012f44:	50                   	push   eax
c0012f45:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012f49:	50                   	push   eax
c0012f4a:	e8 ad ff ff ff       	call   c0012efc <VgaText::combineColours(unsigned char, unsigned char)>
c0012f4f:	5a                   	pop    edx
c0012f50:	5a                   	pop    edx
c0012f51:	88 01                	mov    BYTE PTR [ecx],al
c0012f53:	eb 03                	jmp    c0012f58 <VgaText::scrollScreen()+0x4a>
c0012f55:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012f58:	47                   	inc    edi
c0012f59:	41                   	inc    ecx
c0012f5a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012f60:	75 c9                	jne    c0012f2b <VgaText::scrollScreen()+0x1d>
c0012f62:	46                   	inc    esi
c0012f63:	83 fe 19             	cmp    esi,0x19
c0012f66:	75 b9                	jne    c0012f21 <VgaText::scrollScreen()+0x13>
c0012f68:	39 1d f4 71 03 c0    	cmp    DWORD PTR ds:0xc00371f4,ebx
c0012f6e:	75 1f                	jne    c0012f8f <VgaText::scrollScreen()+0x81>
c0012f70:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0012f74:	74 05                	je     c0012f7b <VgaText::scrollScreen()+0x6d>
c0012f76:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0012f79:	eb 14                	jmp    c0012f8f <VgaText::scrollScreen()+0x81>
c0012f7b:	50                   	push   eax
c0012f7c:	50                   	push   eax
c0012f7d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012f81:	50                   	push   eax
c0012f82:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012f86:	50                   	push   eax
c0012f87:	e8 c8 98 00 00       	call   c001c854 <HalConsoleScroll(int, int)>
c0012f8c:	83 c4 10             	add    esp,0x10
c0012f8f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012f93:	83 c4 0c             	add    esp,0xc
c0012f96:	5b                   	pop    ebx
c0012f97:	5e                   	pop    esi
c0012f98:	5f                   	pop    edi
c0012f99:	5d                   	pop    ebp
c0012f9a:	e9 79 fe ff ff       	jmp    c0012e18 <VgaText::updateCursor()>
c0012f9f:	90                   	nop

c0012fa0 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012fa0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012fa5:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0012faa:	c1 e0 08             	shl    eax,0x8
c0012fad:	09 d0                	or     eax,edx
c0012faf:	c3                   	ret    

c0012fb0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012fb0:	55                   	push   ebp
c0012fb1:	57                   	push   edi
c0012fb2:	56                   	push   esi
c0012fb3:	53                   	push   ebx
c0012fb4:	83 ec 1c             	sub    esp,0x1c
c0012fb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012fbb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012fbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fc3:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012fc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012fca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012fce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012fd2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012fd6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012fda:	85 ed                	test   ebp,ebp
c0012fdc:	75 14                	jne    c0012ff2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012fde:	c7 44 24 30 92 c5 02 c0 	mov    DWORD PTR [esp+0x30],0xc002c592
c0012fe6:	83 c4 1c             	add    esp,0x1c
c0012fe9:	5b                   	pop    ebx
c0012fea:	5e                   	pop    esi
c0012feb:	5f                   	pop    edi
c0012fec:	5d                   	pop    ebp
c0012fed:	e9 72 da ff ff       	jmp    c0010a64 <KePanic(char const*)>
c0012ff2:	50                   	push   eax
c0012ff3:	50                   	push   eax
c0012ff4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012ff9:	50                   	push   eax
c0012ffa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012fff:	50                   	push   eax
c0013000:	e8 f7 fe ff ff       	call   c0012efc <VgaText::combineColours(unsigned char, unsigned char)>
c0013005:	5a                   	pop    edx
c0013006:	0f be c9             	movsx  ecx,cl
c0013009:	5a                   	pop    edx
c001300a:	0f b6 c0             	movzx  eax,al
c001300d:	50                   	push   eax
c001300e:	51                   	push   ecx
c001300f:	e8 8c ff ff ff       	call   c0012fa0 <VgaText::combineCharAndColour(char, unsigned char)>
c0013014:	6b d6 50             	imul   edx,esi,0x50
c0013017:	83 c4 10             	add    esp,0x10
c001301a:	01 da                	add    edx,ebx
c001301c:	0f b7 d2             	movzx  edx,dx
c001301f:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0013024:	39 3d f4 71 03 c0    	cmp    DWORD PTR ds:0xc00371f4,edi
c001302a:	75 28                	jne    c0013054 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c001302c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013030:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0013034:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0013038:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001303c:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0013040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013044:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013048:	83 c4 1c             	add    esp,0x1c
c001304b:	5b                   	pop    ebx
c001304c:	5e                   	pop    esi
c001304d:	5f                   	pop    edi
c001304e:	5d                   	pop    ebp
c001304f:	e9 08 99 00 00       	jmp    c001c95c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0013054:	83 c4 1c             	add    esp,0x1c
c0013057:	5b                   	pop    ebx
c0013058:	5e                   	pop    esi
c0013059:	5f                   	pop    edi
c001305a:	5d                   	pop    ebp
c001305b:	c3                   	ret    

c001305c <VgaText::getCursorX()>:
c001305c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013060:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013063:	c3                   	ret    

c0013064 <VgaText::getCursorY()>:
c0013064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013068:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001306b:	c3                   	ret    

c001306c <VgaText::setCursor(int, int)>:
c001306c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013074:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0013077:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001307b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001307e:	e9 95 fd ff ff       	jmp    c0012e18 <VgaText::updateCursor()>

c0013083 <setActiveTerminal(VgaText*)>:
c0013083:	53                   	push   ebx
c0013084:	83 ec 08             	sub    esp,0x8
c0013087:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001308b:	85 db                	test   ebx,ebx
c001308d:	75 11                	jne    c00130a0 <setActiveTerminal(VgaText*)+0x1d>
c001308f:	c7 44 24 10 a2 c5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002c5a2
c0013097:	83 c4 08             	add    esp,0x8
c001309a:	5b                   	pop    ebx
c001309b:	e9 c4 d9 ff ff       	jmp    c0010a64 <KePanic(char const*)>
c00130a0:	a1 f4 71 03 c0       	mov    eax,ds:0xc00371f4
c00130a5:	85 c0                	test   eax,eax
c00130a7:	74 0c                	je     c00130b5 <setActiveTerminal(VgaText*)+0x32>
c00130a9:	83 ec 0c             	sub    esp,0xc
c00130ac:	50                   	push   eax
c00130ad:	e8 66 fd ff ff       	call   c0012e18 <VgaText::updateCursor()>
c00130b2:	83 c4 10             	add    esp,0x10
c00130b5:	89 1d f4 71 03 c0    	mov    DWORD PTR ds:0xc00371f4,ebx
c00130bb:	50                   	push   eax
c00130bc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00130bf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00130c2:	53                   	push   ebx
c00130c3:	e8 a4 ff ff ff       	call   c001306c <VgaText::setCursor(int, int)>
c00130c8:	83 c4 18             	add    esp,0x18
c00130cb:	5b                   	pop    ebx
c00130cc:	c3                   	ret    
c00130cd:	90                   	nop

c00130ce <VgaText::clearScreen()>:
c00130ce:	57                   	push   edi
c00130cf:	56                   	push   esi
c00130d0:	31 f6                	xor    esi,esi
c00130d2:	53                   	push   ebx
c00130d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130d7:	52                   	push   edx
c00130d8:	6a 00                	push   0x0
c00130da:	6a 00                	push   0x0
c00130dc:	53                   	push   ebx
c00130dd:	e8 8a ff ff ff       	call   c001306c <VgaText::setCursor(int, int)>
c00130e2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00130e9:	83 c4 10             	add    esp,0x10
c00130ec:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00130ef:	7e 20                	jle    c0013111 <VgaText::clearScreen()+0x43>
c00130f1:	31 ff                	xor    edi,edi
c00130f3:	50                   	push   eax
c00130f4:	50                   	push   eax
c00130f5:	56                   	push   esi
c00130f6:	57                   	push   edi
c00130f7:	47                   	inc    edi
c00130f8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00130fb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00130fe:	6a 20                	push   0x20
c0013100:	53                   	push   ebx
c0013101:	e8 aa fe ff ff       	call   c0012fb0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0013106:	83 c4 20             	add    esp,0x20
c0013109:	83 ff 50             	cmp    edi,0x50
c001310c:	75 e5                	jne    c00130f3 <VgaText::clearScreen()+0x25>
c001310e:	46                   	inc    esi
c001310f:	eb db                	jmp    c00130ec <VgaText::clearScreen()+0x1e>
c0013111:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0013118:	5b                   	pop    ebx
c0013119:	5e                   	pop    esi
c001311a:	5f                   	pop    edi
c001311b:	c3                   	ret    

c001311c <VgaText::setCursorX(int)>:
c001311c:	83 ec 10             	sub    esp,0x10
c001311f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013123:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0013126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001312a:	50                   	push   eax
c001312b:	e8 3c ff ff ff       	call   c001306c <VgaText::setCursor(int, int)>
c0013130:	83 c4 1c             	add    esp,0x1c
c0013133:	c3                   	ret    

c0013134 <VgaText::setCursorY(int)>:
c0013134:	83 ec 10             	sub    esp,0x10
c0013137:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001313b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001313f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0013142:	50                   	push   eax
c0013143:	e8 24 ff ff ff       	call   c001306c <VgaText::setCursor(int, int)>
c0013148:	83 c4 1c             	add    esp,0x1c
c001314b:	c3                   	ret    

c001314c <VgaText::incrementCursor(bool)>:
c001314c:	56                   	push   esi
c001314d:	53                   	push   ebx
c001314e:	51                   	push   ecx
c001314f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013153:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013157:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001315a:	40                   	inc    eax
c001315b:	83 f8 50             	cmp    eax,0x50
c001315e:	74 05                	je     c0013165 <VgaText::incrementCursor(bool)+0x19>
c0013160:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0013163:	eb 24                	jmp    c0013189 <VgaText::incrementCursor(bool)+0x3d>
c0013165:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013168:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001316f:	8d 50 01             	lea    edx,[eax+0x1]
c0013172:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0013175:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0013178:	75 0f                	jne    c0013189 <VgaText::incrementCursor(bool)+0x3d>
c001317a:	83 ec 0c             	sub    esp,0xc
c001317d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0013180:	53                   	push   ebx
c0013181:	e8 88 fd ff ff       	call   c0012f0e <VgaText::scrollScreen()>
c0013186:	83 c4 10             	add    esp,0x10
c0013189:	89 f0                	mov    eax,esi
c001318b:	84 c0                	test   al,al
c001318d:	74 0c                	je     c001319b <VgaText::incrementCursor(bool)+0x4f>
c001318f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013193:	5a                   	pop    edx
c0013194:	5b                   	pop    ebx
c0013195:	5e                   	pop    esi
c0013196:	e9 7d fc ff ff       	jmp    c0012e18 <VgaText::updateCursor()>
c001319b:	58                   	pop    eax
c001319c:	5b                   	pop    ebx
c001319d:	5e                   	pop    esi
c001319e:	c3                   	ret    
c001319f:	90                   	nop

c00131a0 <VgaText::decrementCursor(bool)>:
c00131a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00131a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00131a8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00131ab:	85 c0                	test   eax,eax
c00131ad:	74 04                	je     c00131b3 <VgaText::decrementCursor(bool)+0x13>
c00131af:	48                   	dec    eax
c00131b0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00131b3:	84 c9                	test   cl,cl
c00131b5:	74 09                	je     c00131c0 <VgaText::decrementCursor(bool)+0x20>
c00131b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00131bb:	e9 58 fc ff ff       	jmp    c0012e18 <VgaText::updateCursor()>
c00131c0:	c3                   	ret    
c00131c1:	90                   	nop

c00131c2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00131c2:	53                   	push   ebx
c00131c3:	83 ec 08             	sub    esp,0x8
c00131c6:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00131cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00131d3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00131d7:	83 f8 07             	cmp    eax,0x7
c00131da:	75 21                	jne    c00131fd <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00131dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00131e4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00131ec:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00131f4:	83 c4 08             	add    esp,0x8
c00131f7:	5b                   	pop    ebx
c00131f8:	e9 6e 65 ff ff       	jmp    c000976b <KeBeep(int, int, bool)>
c00131fd:	83 f8 0d             	cmp    eax,0xd
c0013200:	75 09                	jne    c001320b <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0013202:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0013209:	eb 2d                	jmp    c0013238 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c001320b:	83 f8 0a             	cmp    eax,0xa
c001320e:	75 31                	jne    c0013241 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0013210:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013213:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001321a:	8d 50 01             	lea    edx,[eax+0x1]
c001321d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0013220:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0013223:	75 0f                	jne    c0013234 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0013225:	83 ec 0c             	sub    esp,0xc
c0013228:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001322b:	53                   	push   ebx
c001322c:	e8 dd fc ff ff       	call   c0012f0e <VgaText::scrollScreen()>
c0013231:	83 c4 10             	add    esp,0x10
c0013234:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013238:	83 c4 08             	add    esp,0x8
c001323b:	5b                   	pop    ebx
c001323c:	e9 d7 fb ff ff       	jmp    c0012e18 <VgaText::updateCursor()>
c0013241:	83 f8 08             	cmp    eax,0x8
c0013244:	75 25                	jne    c001326b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0013246:	50                   	push   eax
c0013247:	50                   	push   eax
c0013248:	6a 01                	push   0x1
c001324a:	53                   	push   ebx
c001324b:	e8 50 ff ff ff       	call   c00131a0 <VgaText::decrementCursor(bool)>
c0013250:	5a                   	pop    edx
c0013251:	59                   	pop    ecx
c0013252:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0013255:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0013258:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001325b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001325e:	6a 20                	push   0x20
c0013260:	53                   	push   ebx
c0013261:	e8 4a fd ff ff       	call   c0012fb0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0013266:	83 c4 28             	add    esp,0x28
c0013269:	5b                   	pop    ebx
c001326a:	c3                   	ret    
c001326b:	83 ec 08             	sub    esp,0x8
c001326e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0013271:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0013274:	51                   	push   ecx
c0013275:	52                   	push   edx
c0013276:	50                   	push   eax
c0013277:	53                   	push   ebx
c0013278:	e8 33 fd ff ff       	call   c0012fb0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001327d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0013281:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0013289:	83 c4 28             	add    esp,0x28
c001328c:	5b                   	pop    ebx
c001328d:	e9 ba fe ff ff       	jmp    c001314c <VgaText::incrementCursor(bool)>

c0013292 <VgaText::putchar(char)>:
c0013292:	57                   	push   edi
c0013293:	56                   	push   esi
c0013294:	53                   	push   ebx
c0013295:	83 ec 10             	sub    esp,0x10
c0013298:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001329c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00132a0:	89 f8                	mov    eax,edi
c00132a2:	0f be c0             	movsx  eax,al
c00132a5:	83 f8 5b             	cmp    eax,0x5b
c00132a8:	75 18                	jne    c00132c2 <VgaText::putchar(char)+0x30>
c00132aa:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00132ae:	74 20                	je     c00132d0 <VgaText::putchar(char)+0x3e>
c00132b0:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00132b6:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00132bd:	e9 c1 00 00 00       	jmp    c0013383 <VgaText::putchar(char)+0xf1>
c00132c2:	83 f8 1b             	cmp    eax,0x1b
c00132c5:	75 09                	jne    c00132d0 <VgaText::putchar(char)+0x3e>
c00132c7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00132cb:	e9 b3 00 00 00       	jmp    c0013383 <VgaText::putchar(char)+0xf1>
c00132d0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00132d3:	84 c9                	test   cl,cl
c00132d5:	0f 84 98 00 00 00    	je     c0013373 <VgaText::putchar(char)+0xe1>
c00132db:	8d 77 c0             	lea    esi,[edi-0x40]
c00132de:	89 f2                	mov    edx,esi
c00132e0:	80 fa 3e             	cmp    dl,0x3e
c00132e3:	77 78                	ja     c001335d <VgaText::putchar(char)+0xcb>
c00132e5:	83 f8 6d             	cmp    eax,0x6d
c00132e8:	75 47                	jne    c0013331 <VgaText::putchar(char)+0x9f>
c00132ea:	31 f6                	xor    esi,esi
c00132ec:	31 d2                	xor    edx,edx
c00132ee:	31 c0                	xor    eax,eax
c00132f0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00132f3:	7e 2d                	jle    c0013322 <VgaText::putchar(char)+0x90>
c00132f5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00132fa:	83 fa 3b             	cmp    edx,0x3b
c00132fd:	75 17                	jne    c0013316 <VgaText::putchar(char)+0x84>
c00132ff:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0013303:	50                   	push   eax
c0013304:	53                   	push   ebx
c0013305:	e8 24 fb ff ff       	call   c0012e2e <VgaText::doANSI_SGR(int)>
c001330a:	59                   	pop    ecx
c001330b:	31 d2                	xor    edx,edx
c001330d:	5f                   	pop    edi
c001330e:	31 c0                	xor    eax,eax
c0013310:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0013314:	eb 09                	jmp    c001331f <VgaText::putchar(char)+0x8d>
c0013316:	6b c0 0a             	imul   eax,eax,0xa
c0013319:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001331d:	88 ca                	mov    dl,cl
c001331f:	46                   	inc    esi
c0013320:	eb ce                	jmp    c00132f0 <VgaText::putchar(char)+0x5e>
c0013322:	84 d2                	test   dl,dl
c0013324:	74 2f                	je     c0013355 <VgaText::putchar(char)+0xc3>
c0013326:	50                   	push   eax
c0013327:	53                   	push   ebx
c0013328:	e8 01 fb ff ff       	call   c0012e2e <VgaText::doANSI_SGR(int)>
c001332d:	58                   	pop    eax
c001332e:	5a                   	pop    edx
c001332f:	eb 24                	jmp    c0013355 <VgaText::putchar(char)+0xc3>
c0013331:	83 f8 4a             	cmp    eax,0x4a
c0013334:	75 1f                	jne    c0013355 <VgaText::putchar(char)+0xc3>
c0013336:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001333a:	75 19                	jne    c0013355 <VgaText::putchar(char)+0xc3>
c001333c:	83 ec 0c             	sub    esp,0xc
c001333f:	53                   	push   ebx
c0013340:	e8 89 fd ff ff       	call   c00130ce <VgaText::clearScreen()>
c0013345:	83 c4 0c             	add    esp,0xc
c0013348:	6a 00                	push   0x0
c001334a:	6a 00                	push   0x0
c001334c:	53                   	push   ebx
c001334d:	e8 1a fd ff ff       	call   c001306c <VgaText::setCursor(int, int)>
c0013352:	83 c4 10             	add    esp,0x10
c0013355:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001335b:	eb 26                	jmp    c0013383 <VgaText::putchar(char)+0xf1>
c001335d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0013360:	83 f8 0e             	cmp    eax,0xe
c0013363:	7f 1e                	jg     c0013383 <VgaText::putchar(char)+0xf1>
c0013365:	8d 48 01             	lea    ecx,[eax+0x1]
c0013368:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001336b:	89 f9                	mov    ecx,edi
c001336d:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0013371:	eb 10                	jmp    c0013383 <VgaText::putchar(char)+0xf1>
c0013373:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0013376:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0013379:	50                   	push   eax
c001337a:	53                   	push   ebx
c001337b:	e8 42 fe ff ff       	call   c00131c2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0013380:	83 c4 10             	add    esp,0x10
c0013383:	83 c4 10             	add    esp,0x10
c0013386:	5b                   	pop    ebx
c0013387:	5e                   	pop    esi
c0013388:	5f                   	pop    edi
c0013389:	c3                   	ret    

c001338a <VgaText::putx(unsigned int)>:
c001338a:	57                   	push   edi
c001338b:	b9 11 00 00 00       	mov    ecx,0x11
c0013390:	56                   	push   esi
c0013391:	be af ab 02 c0       	mov    esi,0xc002abaf
c0013396:	53                   	push   ebx
c0013397:	83 ec 20             	sub    esp,0x20
c001339a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001339e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00133a2:	fc                   	cld    
c00133a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00133a5:	be 08 00 00 00       	mov    esi,0x8
c00133aa:	50                   	push   eax
c00133ab:	50                   	push   eax
c00133ac:	89 d8                	mov    eax,ebx
c00133ae:	c1 e3 04             	shl    ebx,0x4
c00133b1:	c1 e8 1c             	shr    eax,0x1c
c00133b4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00133b9:	50                   	push   eax
c00133ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00133be:	e8 cf fe ff ff       	call   c0013292 <VgaText::putchar(char)>
c00133c3:	83 c4 10             	add    esp,0x10
c00133c6:	4e                   	dec    esi
c00133c7:	75 e1                	jne    c00133aa <VgaText::putx(unsigned int)+0x20>
c00133c9:	83 c4 20             	add    esp,0x20
c00133cc:	5b                   	pop    ebx
c00133cd:	5e                   	pop    esi
c00133ce:	5f                   	pop    edi
c00133cf:	c3                   	ret    

c00133d0 <VgaText::puts(char const*)>:
c00133d0:	53                   	push   ebx
c00133d1:	83 ec 08             	sub    esp,0x8
c00133d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00133d8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00133db:	85 c0                	test   eax,eax
c00133dd:	74 12                	je     c00133f1 <VgaText::puts(char const*)+0x21>
c00133df:	43                   	inc    ebx
c00133e0:	51                   	push   ecx
c00133e1:	51                   	push   ecx
c00133e2:	50                   	push   eax
c00133e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e7:	e8 a6 fe ff ff       	call   c0013292 <VgaText::putchar(char)>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	eb e7                	jmp    c00133d8 <VgaText::puts(char const*)+0x8>
c00133f1:	83 c4 08             	add    esp,0x8
c00133f4:	5b                   	pop    ebx
c00133f5:	c3                   	ret    

c00133f6 <VgaText::write(unsigned long long, void*, int*)>:
c00133f6:	55                   	push   ebp
c00133f7:	57                   	push   edi
c00133f8:	56                   	push   esi
c00133f9:	53                   	push   ebx
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013401:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0013405:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013409:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0013410:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0013413:	39 eb                	cmp    ebx,ebp
c0013415:	74 13                	je     c001342a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0013417:	43                   	inc    ebx
c0013418:	50                   	push   eax
c0013419:	50                   	push   eax
c001341a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001341e:	50                   	push   eax
c001341f:	56                   	push   esi
c0013420:	e8 6d fe ff ff       	call   c0013292 <VgaText::putchar(char)>
c0013425:	83 c4 10             	add    esp,0x10
c0013428:	eb e9                	jmp    c0013413 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001342a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0013431:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013435:	89 38                	mov    DWORD PTR [eax],edi
c0013437:	83 c4 0c             	add    esp,0xc
c001343a:	31 c0                	xor    eax,eax
c001343c:	5b                   	pop    ebx
c001343d:	5e                   	pop    esi
c001343e:	5f                   	pop    edi
c001343f:	5d                   	pop    ebp
c0013440:	c3                   	ret    
c0013441:	90                   	nop

c0013442 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0013442:	55                   	push   ebp
c0013443:	57                   	push   edi
c0013444:	56                   	push   esi
c0013445:	53                   	push   ebx
c0013446:	83 ec 1c             	sub    esp,0x1c
c0013449:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001344d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013451:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013455:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0013458:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001345c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013460:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013464:	85 db                	test   ebx,ebx
c0013466:	75 14                	jne    c001347c <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c0013468:	c7 44 24 30 b0 c5 02 c0 	mov    DWORD PTR [esp+0x30],0xc002c5b0
c0013470:	83 c4 1c             	add    esp,0x1c
c0013473:	5b                   	pop    ebx
c0013474:	5e                   	pop    esi
c0013475:	5f                   	pop    edi
c0013476:	5d                   	pop    ebp
c0013477:	e9 e8 d5 ff ff       	jmp    c0010a64 <KePanic(char const*)>
c001347c:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0013483:	50                   	push   eax
c0013484:	50                   	push   eax
c0013485:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001348a:	50                   	push   eax
c001348b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0013490:	50                   	push   eax
c0013491:	e8 66 fa ff ff       	call   c0012efc <VgaText::combineColours(unsigned char, unsigned char)>
c0013496:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c001349a:	83 c4 10             	add    esp,0x10
c001349d:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00134a0:	0f b6 e8             	movzx  ebp,al
c00134a3:	0f b7 c9             	movzx  ecx,cx
c00134a6:	01 c9                	add    ecx,ecx
c00134a8:	01 cb                	add    ebx,ecx
c00134aa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00134ad:	85 c0                	test   eax,eax
c00134af:	0f 84 ef 00 00 00    	je     c00135a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00134b5:	83 f8 0d             	cmp    eax,0xd
c00134b8:	75 0c                	jne    c00134c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00134ba:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00134c1:	e9 d8 00 00 00       	jmp    c001359e <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00134c6:	83 f8 0a             	cmp    eax,0xa
c00134c9:	75 44                	jne    c001350f <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c00134cb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00134ce:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00134d5:	8d 48 01             	lea    ecx,[eax+0x1]
c00134d8:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c00134db:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00134de:	75 0f                	jne    c00134ef <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c00134e0:	83 ec 0c             	sub    esp,0xc
c00134e3:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c00134e6:	57                   	push   edi
c00134e7:	e8 22 fa ff ff       	call   c0012f0e <VgaText::scrollScreen()>
c00134ec:	83 c4 10             	add    esp,0x10
c00134ef:	83 ec 0c             	sub    esp,0xc
c00134f2:	57                   	push   edi
c00134f3:	e8 20 f9 ff ff       	call   c0012e18 <VgaText::updateCursor()>
c00134f8:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00134fc:	83 c4 10             	add    esp,0x10
c00134ff:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0013502:	0f b7 db             	movzx  ebx,bx
c0013505:	01 db                	add    ebx,ebx
c0013507:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001350a:	e9 8f 00 00 00       	jmp    c001359e <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001350f:	83 f8 08             	cmp    eax,0x8
c0013512:	75 34                	jne    c0013548 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0013514:	51                   	push   ecx
c0013515:	51                   	push   ecx
c0013516:	6a 01                	push   0x1
c0013518:	57                   	push   edi
c0013519:	e8 82 fc ff ff       	call   c00131a0 <VgaText::decrementCursor(bool)>
c001351e:	5b                   	pop    ebx
c001351f:	58                   	pop    eax
c0013520:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0013523:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0013526:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0013529:	ff 77 34             	push   DWORD PTR [edi+0x34]
c001352c:	6a 20                	push   0x20
c001352e:	57                   	push   edi
c001352f:	e8 7c fa ff ff       	call   c0012fb0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0013534:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0013538:	83 c4 20             	add    esp,0x20
c001353b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001353e:	0f b7 db             	movzx  ebx,bx
c0013541:	01 db                	add    ebx,ebx
c0013543:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0013546:	eb 56                	jmp    c001359e <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0013548:	52                   	push   edx
c0013549:	52                   	push   edx
c001354a:	55                   	push   ebp
c001354b:	50                   	push   eax
c001354c:	e8 4f fa ff ff       	call   c0012fa0 <VgaText::combineCharAndColour(char, unsigned char)>
c0013551:	83 c4 10             	add    esp,0x10
c0013554:	66 89 03             	mov    WORD PTR [ebx],ax
c0013557:	39 3d f4 71 03 c0    	cmp    DWORD PTR ds:0xc00371f4,edi
c001355d:	75 1d                	jne    c001357c <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c001355f:	83 ec 0c             	sub    esp,0xc
c0013562:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0013565:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0013568:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001356c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013570:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0013573:	50                   	push   eax
c0013574:	e8 e3 93 00 00       	call   c001c95c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0013579:	83 c4 20             	add    esp,0x20
c001357c:	83 c3 02             	add    ebx,0x2
c001357f:	50                   	push   eax
c0013580:	50                   	push   eax
c0013581:	6a 00                	push   0x0
c0013583:	57                   	push   edi
c0013584:	e8 c3 fb ff ff       	call   c001314c <VgaText::incrementCursor(bool)>
c0013589:	83 c4 10             	add    esp,0x10
c001358c:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0013590:	75 0c                	jne    c001359e <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0013592:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0013596:	0f b7 db             	movzx  ebx,bx
c0013599:	01 db                	add    ebx,ebx
c001359b:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001359e:	46                   	inc    esi
c001359f:	e9 06 ff ff ff       	jmp    c00134aa <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00135a4:	83 ec 0c             	sub    esp,0xc
c00135a7:	57                   	push   edi
c00135a8:	e8 6b f8 ff ff       	call   c0012e18 <VgaText::updateCursor()>
c00135ad:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c00135b4:	83 c4 2c             	add    esp,0x2c
c00135b7:	5b                   	pop    ebx
c00135b8:	5e                   	pop    esi
c00135b9:	5f                   	pop    edi
c00135ba:	5d                   	pop    ebp
c00135bb:	c3                   	ret    

c00135bc <VgaText::VgaText(char const*)>:
c00135bc:	56                   	push   esi
c00135bd:	53                   	push   ebx
c00135be:	83 ec 04             	sub    esp,0x4
c00135c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c5:	83 ec 08             	sub    esp,0x8
c00135c8:	6a 00                	push   0x0
c00135ca:	50                   	push   eax
c00135cb:	e8 d8 05 00 00       	call   c0013ba8 <UnixFile::UnixFile(int)>
c00135d0:	83 c4 10             	add    esp,0x10
c00135d3:	ba e8 c5 02 c0       	mov    edx,0xc002c5e8
c00135d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135dc:	89 10                	mov    DWORD PTR [eax],edx
c00135de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00135e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ed:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00135f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00135fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013600:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0013604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013608:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001360f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013613:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001361a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0013625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013629:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0013630:	83 ec 0c             	sub    esp,0xc
c0013633:	68 c0 c5 02 c0       	push   0xc002c5c0
c0013638:	e8 3f 39 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001363d:	83 c4 10             	add    esp,0x10
c0013640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013644:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001364b:	83 ec 0c             	sub    esp,0xc
c001364e:	6a 01                	push   0x1
c0013650:	e8 a6 09 00 00       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c0013655:	83 c4 10             	add    esp,0x10
c0013658:	89 c2                	mov    edx,eax
c001365a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001365e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013661:	8b 1d 90 72 03 c0    	mov    ebx,DWORD PTR ds:0xc0037290
c0013667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001366b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001366e:	89 c6                	mov    esi,eax
c0013670:	e8 e3 d5 ff ff       	call   c0010c58 <Phys::allocatePage()>
c0013675:	68 05 0c 00 00       	push   0xc05
c001367a:	56                   	push   esi
c001367b:	50                   	push   eax
c001367c:	53                   	push   ebx
c001367d:	e8 5c 10 00 00       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c0013682:	83 c4 10             	add    esp,0x10
c0013685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013689:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001368c:	83 ec 04             	sub    esp,0x4
c001368f:	68 a0 0f 00 00       	push   0xfa0
c0013694:	6a 00                	push   0x0
c0013696:	50                   	push   eax
c0013697:	e8 54 ce fe ff       	call   c00004f0 <memset>
c001369c:	83 c4 10             	add    esp,0x10
c001369f:	83 ec 04             	sub    esp,0x4
c00136a2:	6a 00                	push   0x0
c00136a4:	6a 07                	push   0x7
c00136a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136aa:	e8 13 f8 ff ff       	call   c0012ec2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00136af:	83 c4 10             	add    esp,0x10
c00136b2:	83 ec 04             	sub    esp,0x4
c00136b5:	6a 00                	push   0x0
c00136b7:	6a 00                	push   0x0
c00136b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136bd:	e8 aa f9 ff ff       	call   c001306c <VgaText::setCursor(int, int)>
c00136c2:	83 c4 10             	add    esp,0x10
c00136c5:	83 ec 0c             	sub    esp,0xc
c00136c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136cc:	e8 fd f9 ff ff       	call   c00130ce <VgaText::clearScreen()>
c00136d1:	83 c4 10             	add    esp,0x10
c00136d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d8:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00136dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e0:	05 82 00 00 00       	add    eax,0x82
c00136e5:	83 ec 04             	sub    esp,0x4
c00136e8:	68 80 00 00 00       	push   0x80
c00136ed:	6a 00                	push   0x0
c00136ef:	50                   	push   eax
c00136f0:	e8 fb cd fe ff       	call   c00004f0 <memset>
c00136f5:	83 c4 10             	add    esp,0x10
c00136f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136fc:	05 02 01 00 00       	add    eax,0x102
c0013701:	83 ec 04             	sub    esp,0x4
c0013704:	68 80 00 00 00       	push   0x80
c0013709:	6a 00                	push   0x0
c001370b:	50                   	push   eax
c001370c:	e8 df cd fe ff       	call   c00004f0 <memset>
c0013711:	83 c4 10             	add    esp,0x10
c0013714:	90                   	nop
c0013715:	83 c4 04             	add    esp,0x4
c0013718:	5b                   	pop    ebx
c0013719:	5e                   	pop    esi
c001371a:	c3                   	ret    
c001371b:	90                   	nop

c001371c <VgaText::receiveKey(unsigned char)>:
c001371c:	55                   	push   ebp
c001371d:	57                   	push   edi
c001371e:	56                   	push   esi
c001371f:	53                   	push   ebx
c0013720:	83 ec 2c             	sub    esp,0x2c
c0013723:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0013727:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001372b:	89 ef                	mov    edi,ebp
c001372d:	81 e7 ff 00 00 00    	and    edi,0xff
c0013733:	0f 84 66 01 00 00    	je     c001389f <VgaText::receiveKey(unsigned char)+0x183>
c0013739:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c001373f:	83 ff 08             	cmp    edi,0x8
c0013742:	75 73                	jne    c00137b7 <VgaText::receiveKey(unsigned char)+0x9b>
c0013744:	83 ec 0c             	sub    esp,0xc
c0013747:	56                   	push   esi
c0013748:	e8 23 ce fe ff       	call   c0000570 <strlen>
c001374d:	83 c4 10             	add    esp,0x10
c0013750:	85 c0                	test   eax,eax
c0013752:	0f 84 02 01 00 00    	je     c001385a <VgaText::receiveKey(unsigned char)+0x13e>
c0013758:	50                   	push   eax
c0013759:	50                   	push   eax
c001375a:	6a 08                	push   0x8
c001375c:	53                   	push   ebx
c001375d:	e8 30 fb ff ff       	call   c0013292 <VgaText::putchar(char)>
c0013762:	89 34 24             	mov    DWORD PTR [esp],esi
c0013765:	e8 06 ce fe ff       	call   c0000570 <strlen>
c001376a:	83 c4 10             	add    esp,0x10
c001376d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0013775:	83 fa 0d             	cmp    edx,0xd
c0013778:	89 d0                	mov    eax,edx
c001377a:	0f 95 c1             	setne  cl
c001377d:	83 fa 1f             	cmp    edx,0x1f
c0013780:	0f 9e c2             	setle  dl
c0013783:	0f b6 d2             	movzx  edx,dl
c0013786:	85 ca                	test   edx,ecx
c0013788:	74 17                	je     c00137a1 <VgaText::receiveKey(unsigned char)+0x85>
c001378a:	83 e8 08             	sub    eax,0x8
c001378d:	3c 02                	cmp    al,0x2
c001378f:	76 10                	jbe    c00137a1 <VgaText::receiveKey(unsigned char)+0x85>
c0013791:	55                   	push   ebp
c0013792:	55                   	push   ebp
c0013793:	68 d3 c5 02 c0       	push   0xc002c5d3
c0013798:	53                   	push   ebx
c0013799:	e8 32 fc ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001379e:	83 c4 10             	add    esp,0x10
c00137a1:	83 ec 0c             	sub    esp,0xc
c00137a4:	56                   	push   esi
c00137a5:	e8 c6 cd fe ff       	call   c0000570 <strlen>
c00137aa:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c00137b2:	e9 a0 00 00 00       	jmp    c0013857 <VgaText::receiveKey(unsigned char)+0x13b>
c00137b7:	83 ec 0c             	sub    esp,0xc
c00137ba:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00137c0:	50                   	push   eax
c00137c1:	e8 aa cd fe ff       	call   c0000570 <strlen>
c00137c6:	89 34 24             	mov    DWORD PTR [esp],esi
c00137c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00137cd:	e8 9e cd fe ff       	call   c0000570 <strlen>
c00137d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00137d6:	83 c4 10             	add    esp,0x10
c00137d9:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c00137dd:	3d 80 00 00 00       	cmp    eax,0x80
c00137e2:	0f 87 b7 00 00 00    	ja     c001389f <VgaText::receiveKey(unsigned char)+0x183>
c00137e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00137eb:	8d 55 f7             	lea    edx,[ebp-0x9]
c00137ee:	3c 1e                	cmp    al,0x1e
c00137f0:	0f 96 c0             	setbe  al
c00137f3:	80 fa 01             	cmp    dl,0x1
c00137f6:	0f 97 c2             	seta   dl
c00137f9:	0f b6 d2             	movzx  edx,dl
c00137fc:	85 c2                	test   edx,eax
c00137fe:	74 2e                	je     c001382e <VgaText::receiveKey(unsigned char)+0x112>
c0013800:	83 ff 0d             	cmp    edi,0xd
c0013803:	74 29                	je     c001382e <VgaText::receiveKey(unsigned char)+0x112>
c0013805:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0013808:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001380b:	68 d9 c5 02 c0       	push   0xc002c5d9
c0013810:	53                   	push   ebx
c0013811:	e8 2c fc ff ff       	call   c0013442 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0013816:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0013819:	8d 45 40             	lea    eax,[ebp+0x40]
c001381c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001381f:	0f b6 c0             	movzx  eax,al
c0013822:	50                   	push   eax
c0013823:	53                   	push   ebx
c0013824:	e8 99 f9 ff ff       	call   c00131c2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0013829:	83 c4 20             	add    esp,0x20
c001382c:	eb 11                	jmp    c001383f <VgaText::receiveKey(unsigned char)+0x123>
c001382e:	89 e8                	mov    eax,ebp
c0013830:	51                   	push   ecx
c0013831:	0f be c0             	movsx  eax,al
c0013834:	51                   	push   ecx
c0013835:	50                   	push   eax
c0013836:	53                   	push   ebx
c0013837:	e8 56 fa ff ff       	call   c0013292 <VgaText::putchar(char)>
c001383c:	83 c4 10             	add    esp,0x10
c001383f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013844:	89 e8                	mov    eax,ebp
c0013846:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001384a:	52                   	push   edx
c001384b:	52                   	push   edx
c001384c:	8d 44 24 26          	lea    eax,[esp+0x26]
c0013850:	50                   	push   eax
c0013851:	56                   	push   esi
c0013852:	e8 e9 cf fe ff       	call   c0000840 <strcat>
c0013857:	83 c4 10             	add    esp,0x10
c001385a:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0013860:	b0 01                	mov    al,0x1
c0013862:	83 ff 1c             	cmp    edi,0x1c
c0013865:	77 0e                	ja     c0013875 <VgaText::receiveKey(unsigned char)+0x159>
c0013867:	b8 08 04 00 10       	mov    eax,0x10000408
c001386c:	89 f9                	mov    ecx,edi
c001386e:	d3 e8                	shr    eax,cl
c0013870:	f7 d0                	not    eax
c0013872:	83 e0 01             	and    eax,0x1
c0013875:	84 c0                	test   al,al
c0013877:	74 04                	je     c001387d <VgaText::receiveKey(unsigned char)+0x161>
c0013879:	84 d2                	test   dl,dl
c001387b:	74 22                	je     c001389f <VgaText::receiveKey(unsigned char)+0x183>
c001387d:	81 c3 02 01 00 00    	add    ebx,0x102
c0013883:	50                   	push   eax
c0013884:	50                   	push   eax
c0013885:	56                   	push   esi
c0013886:	53                   	push   ebx
c0013887:	e8 b4 cf fe ff       	call   c0000840 <strcat>
c001388c:	83 c4 0c             	add    esp,0xc
c001388f:	68 80 00 00 00       	push   0x80
c0013894:	6a 00                	push   0x0
c0013896:	56                   	push   esi
c0013897:	e8 54 cc fe ff       	call   c00004f0 <memset>
c001389c:	83 c4 10             	add    esp,0x10
c001389f:	83 c4 2c             	add    esp,0x2c
c00138a2:	5b                   	pop    ebx
c00138a3:	5e                   	pop    esi
c00138a4:	5f                   	pop    edi
c00138a5:	5d                   	pop    ebp
c00138a6:	c3                   	ret    
c00138a7:	90                   	nop

c00138a8 <VgaText::doUpdate()>:
c00138a8:	c3                   	ret    
c00138a9:	66 90                	xchg   ax,ax
c00138ab:	90                   	nop

c00138ac <TSS::TSS()>:
c00138ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138b7:	90                   	nop
c00138b8:	c3                   	ret    
c00138b9:	90                   	nop
c00138ba:	66 90                	xchg   ax,ax

c00138bc <TSS::setESP(unsigned long)>:
c00138bc:	55                   	push   ebp
c00138bd:	89 e5                	mov    ebp,esp
c00138bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00138c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00138c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00138c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00138cb:	90                   	nop
c00138cc:	5d                   	pop    ebp
c00138cd:	c3                   	ret    
c00138ce:	66 90                	xchg   ax,ax

c00138d0 <TSS::flush()>:
c00138d0:	55                   	push   ebp
c00138d1:	89 e5                	mov    ebp,esp
c00138d3:	83 ec 10             	sub    esp,0x10
c00138d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00138d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00138db:	83 c8 03             	or     eax,0x3
c00138de:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00138e2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00138e6:	66 89 d0             	mov    ax,dx
c00138e9:	0f 00 d8             	ltr    ax
c00138ec:	90                   	nop
c00138ed:	c9                   	leave  
c00138ee:	c3                   	ret    
c00138ef:	90                   	nop

c00138f0 <TSS::setup(unsigned long, unsigned long)>:
c00138f0:	55                   	push   ebp
c00138f1:	89 e5                	mov    ebp,esp
c00138f3:	83 ec 18             	sub    esp,0x18
c00138f6:	83 ec 0c             	sub    esp,0xc
c00138f9:	6a 68                	push   0x68
c00138fb:	e8 0f cd ff ff       	call   c001060f <malloc>
c0013900:	83 c4 10             	add    esp,0x10
c0013903:	89 c2                	mov    edx,eax
c0013905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013908:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001390b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001390e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013911:	83 ec 08             	sub    esp,0x8
c0013914:	50                   	push   eax
c0013915:	68 fc c5 02 c0       	push   0xc002c5fc
c001391a:	e8 5d 36 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001391f:	83 c4 10             	add    esp,0x10
c0013922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013925:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013928:	83 ec 04             	sub    esp,0x4
c001392b:	6a 68                	push   0x68
c001392d:	6a 00                	push   0x0
c001392f:	50                   	push   eax
c0013930:	e8 bb cb fe ff       	call   c00004f0 <memset>
c0013935:	83 c4 10             	add    esp,0x10
c0013938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001393b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001393e:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0013944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013947:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001394a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0013950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013953:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013956:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0013959:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001395c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001395f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013962:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0013968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001396b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001396e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0013974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013977:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001397a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0013980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013983:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013986:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001398c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001398f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013992:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0013998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001399b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001399e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00139a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00139a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139aa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00139ad:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00139b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00139b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00139b9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00139bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00139bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139c2:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00139c9:	83 ec 0c             	sub    esp,0xc
c00139cc:	68 13 c6 02 c0       	push   0xc002c613
c00139d1:	e8 a6 35 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00139d6:	83 c4 10             	add    esp,0x10
c00139d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00139dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139df:	0f 20 da             	mov    edx,cr3
c00139e2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00139e5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00139e8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00139eb:	83 ec 0c             	sub    esp,0xc
c00139ee:	68 16 c6 02 c0       	push   0xc002c616
c00139f3:	e8 84 35 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00139f8:	83 c4 10             	add    esp,0x10
c00139fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00139fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a01:	83 ec 08             	sub    esp,0x8
c0013a04:	50                   	push   eax
c0013a05:	8d 45 ec             	lea    eax,[ebp-0x14]
c0013a08:	50                   	push   eax
c0013a09:	e8 66 bc ff ff       	call   c000f674 <GDTEntry::setBase(unsigned int)>
c0013a0e:	83 c4 10             	add    esp,0x10
c0013a11:	83 ec 08             	sub    esp,0x8
c0013a14:	6a 68                	push   0x68
c0013a16:	8d 45 ec             	lea    eax,[ebp-0x14]
c0013a19:	50                   	push   eax
c0013a1a:	e8 71 bc ff ff       	call   c000f690 <GDTEntry::setLimit(unsigned int)>
c0013a1f:	83 c4 10             	add    esp,0x10
c0013a22:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0013a26:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0013a29:	83 e0 0f             	and    eax,0xf
c0013a2c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0013a2f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0013a32:	83 c8 40             	or     eax,0x40
c0013a35:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0013a38:	83 ec 0c             	sub    esp,0xc
c0013a3b:	68 19 c6 02 c0       	push   0xc002c619
c0013a40:	e8 37 35 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013a45:	83 c4 10             	add    esp,0x10
c0013a48:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0013a4d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013a53:	83 ec 08             	sub    esp,0x8
c0013a56:	50                   	push   eax
c0013a57:	68 1c c6 02 c0       	push   0xc002c61c
c0013a5c:	e8 1b 35 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013a61:	83 c4 10             	add    esp,0x10
c0013a64:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0013a69:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013a6f:	05 64 01 00 00       	add    eax,0x164
c0013a74:	83 ec 04             	sub    esp,0x4
c0013a77:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0013a7a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0013a7d:	50                   	push   eax
c0013a7e:	e8 41 bc ff ff       	call   c000f6c4 <GDT::addEntry(GDTEntry)>
c0013a83:	83 c4 10             	add    esp,0x10
c0013a86:	89 c2                	mov    edx,eax
c0013a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013a8b:	89 10                	mov    DWORD PTR [eax],edx
c0013a8d:	83 ec 0c             	sub    esp,0xc
c0013a90:	68 31 c6 02 c0       	push   0xc002c631
c0013a95:	e8 e2 34 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013a9a:	83 c4 10             	add    esp,0x10
c0013a9d:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0013aa2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013aa8:	05 64 01 00 00       	add    eax,0x164
c0013aad:	83 ec 0c             	sub    esp,0xc
c0013ab0:	50                   	push   eax
c0013ab1:	e8 38 bc ff ff       	call   c000f6ee <GDT::flush()>
c0013ab6:	83 c4 10             	add    esp,0x10
c0013ab9:	83 ec 0c             	sub    esp,0xc
c0013abc:	68 34 c6 02 c0       	push   0xc002c634
c0013ac1:	e8 b6 34 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013ac6:	83 c4 10             	add    esp,0x10
c0013ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013acc:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ace:	c9                   	leave  
c0013acf:	c3                   	ret    

c0013ad0 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0013ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ad4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013ad8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013adb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0013ae0:	75 08                	jne    c0013aea <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0013ae2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0013ae8:	eb 38                	jmp    c0013b22 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0013aea:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013aef:	75 17                	jne    c0013b08 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0013af1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013af6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013af9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0013aff:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b05:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0013b08:	89 c1                	mov    ecx,eax
c0013b0a:	83 e1 fd             	and    ecx,0xfffffffd
c0013b0d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0013b13:	74 cd                	je     c0013ae2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0013b15:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013b1a:	83 e0 ef             	and    eax,0xffffffef
c0013b1d:	83 f8 08             	cmp    eax,0x8
c0013b20:	76 c0                	jbe    c0013ae2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0013b22:	31 c0                	xor    eax,eax
c0013b24:	c3                   	ret    
c0013b25:	90                   	nop

c0013b26 <ReservedFilename::isAtty()>:
c0013b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b2a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013b2d:	31 c0                	xor    eax,eax
c0013b2f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0013b35:	74 09                	je     c0013b40 <ReservedFilename::isAtty()+0x1a>
c0013b37:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0013b3d:	0f 94 c0             	sete   al
c0013b40:	c3                   	ret    
c0013b41:	90                   	nop

c0013b42 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0013b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b46:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013b4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b4d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013b51:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0013b56:	75 08                	jne    c0013b60 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0013b58:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0013b5e:	eb 3d                	jmp    c0013b9d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013b60:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013b65:	75 17                	jne    c0013b7e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0013b67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013b6f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0013b75:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b7b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0013b7e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013b83:	75 04                	jne    c0013b89 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0013b85:	89 0a                	mov    DWORD PTR [edx],ecx
c0013b87:	eb 14                	jmp    c0013b9d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013b89:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0013b8e:	74 c8                	je     c0013b58 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013b90:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013b95:	83 e0 ef             	and    eax,0xffffffef
c0013b98:	83 f8 08             	cmp    eax,0x8
c0013b9b:	76 bb                	jbe    c0013b58 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013b9d:	31 c0                	xor    eax,eax
c0013b9f:	c3                   	ret    

c0013ba0 <UnixFile::getFileDescriptor()>:
c0013ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ba7:	c3                   	ret    

c0013ba8 <UnixFile::UnixFile(int)>:
c0013ba8:	53                   	push   ebx
c0013ba9:	83 ec 28             	sub    esp,0x28
c0013bac:	ba 60 c6 02 c0       	mov    edx,0xc002c660
c0013bb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013bb5:	89 10                	mov    DWORD PTR [eax],edx
c0013bb7:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0013bbf:	0f 8f 90 01 00 00    	jg     c0013d55 <UnixFile::UnixFile(int)+0x1ad>
c0013bc5:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c0013bca:	8d 50 01             	lea    edx,[eax+0x1]
c0013bcd:	89 15 20 0c 03 c0    	mov    DWORD PTR ds:0xc0030c20,edx
c0013bd3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013bd7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013bda:	83 ec 08             	sub    esp,0x8
c0013bdd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013be1:	68 78 72 03 c0       	push   0xc0037278
c0013be6:	e8 ff 5e 01 00       	call   c0029aea <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013beb:	83 c4 10             	add    esp,0x10
c0013bee:	a0 74 72 03 c0       	mov    al,ds:0xc0037274
c0013bf3:	83 f0 01             	xor    eax,0x1
c0013bf6:	0f b6 c0             	movzx  eax,al
c0013bf9:	85 c0                	test   eax,eax
c0013bfb:	0f 84 55 01 00 00    	je     c0013d56 <UnixFile::UnixFile(int)+0x1ae>
c0013c01:	c6 05 74 72 03 c0 01 	mov    BYTE PTR ds:0xc0037274,0x1
c0013c08:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c17:	e8 f3 c9 ff ff       	call   c001060f <malloc>
c0013c1c:	83 c4 10             	add    esp,0x10
c0013c1f:	89 c3                	mov    ebx,eax
c0013c21:	83 ec 08             	sub    esp,0x8
c0013c24:	68 03 ff ff 0f       	push   0xfffff03
c0013c29:	53                   	push   ebx
c0013c2a:	e8 2d 01 00 00       	call   c0013d5c <ReservedFilename::ReservedFilename(int)>
c0013c2f:	83 c4 10             	add    esp,0x10
c0013c32:	89 1d 6c 72 03 c0    	mov    DWORD PTR ds:0xc003726c,ebx
c0013c38:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0013c40:	83 ec 0c             	sub    esp,0xc
c0013c43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c47:	e8 c3 c9 ff ff       	call   c001060f <malloc>
c0013c4c:	83 c4 10             	add    esp,0x10
c0013c4f:	89 c3                	mov    ebx,eax
c0013c51:	83 ec 08             	sub    esp,0x8
c0013c54:	68 01 ff ff 0f       	push   0xfffff01
c0013c59:	53                   	push   ebx
c0013c5a:	e8 fd 00 00 00       	call   c0013d5c <ReservedFilename::ReservedFilename(int)>
c0013c5f:	83 c4 10             	add    esp,0x10
c0013c62:	89 1d 70 72 03 c0    	mov    DWORD PTR ds:0xc0037270,ebx
c0013c68:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0013c70:	83 ec 0c             	sub    esp,0xc
c0013c73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c77:	e8 93 c9 ff ff       	call   c001060f <malloc>
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	89 c3                	mov    ebx,eax
c0013c81:	83 ec 08             	sub    esp,0x8
c0013c84:	68 00 ff ff 0f       	push   0xfffff00
c0013c89:	53                   	push   ebx
c0013c8a:	e8 cd 00 00 00       	call   c0013d5c <ReservedFilename::ReservedFilename(int)>
c0013c8f:	83 c4 10             	add    esp,0x10
c0013c92:	89 1d 64 72 03 c0    	mov    DWORD PTR ds:0xc0037264,ebx
c0013c98:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0013ca0:	83 ec 0c             	sub    esp,0xc
c0013ca3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013ca7:	e8 63 c9 ff ff       	call   c001060f <malloc>
c0013cac:	83 c4 10             	add    esp,0x10
c0013caf:	89 c3                	mov    ebx,eax
c0013cb1:	83 ec 08             	sub    esp,0x8
c0013cb4:	68 02 ff ff 0f       	push   0xfffff02
c0013cb9:	53                   	push   ebx
c0013cba:	e8 9d 00 00 00       	call   c0013d5c <ReservedFilename::ReservedFilename(int)>
c0013cbf:	83 c4 10             	add    esp,0x10
c0013cc2:	89 1d 68 72 03 c0    	mov    DWORD PTR ds:0xc0037268,ebx
c0013cc8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013cd0:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013cd5:	7f 7f                	jg     c0013d56 <UnixFile::UnixFile(int)+0x1ae>
c0013cd7:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0013cdf:	83 ec 0c             	sub    esp,0xc
c0013ce2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ce6:	e8 24 c9 ff ff       	call   c001060f <malloc>
c0013ceb:	83 c4 10             	add    esp,0x10
c0013cee:	89 c3                	mov    ebx,eax
c0013cf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cf4:	05 10 ff ff 0f       	add    eax,0xfffff10
c0013cf9:	83 ec 08             	sub    esp,0x8
c0013cfc:	50                   	push   eax
c0013cfd:	53                   	push   ebx
c0013cfe:	e8 59 00 00 00       	call   c0013d5c <ReservedFilename::ReservedFilename(int)>
c0013d03:	83 c4 10             	add    esp,0x10
c0013d06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d0a:	89 1c 85 40 72 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8dc0],ebx
c0013d11:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0013d19:	83 ec 0c             	sub    esp,0xc
c0013d1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013d20:	e8 ea c8 ff ff       	call   c001060f <malloc>
c0013d25:	83 c4 10             	add    esp,0x10
c0013d28:	89 c3                	mov    ebx,eax
c0013d2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d2e:	05 20 ff ff 0f       	add    eax,0xfffff20
c0013d33:	83 ec 08             	sub    esp,0x8
c0013d36:	50                   	push   eax
c0013d37:	53                   	push   ebx
c0013d38:	e8 1f 00 00 00       	call   c0013d5c <ReservedFilename::ReservedFilename(int)>
c0013d3d:	83 c4 10             	add    esp,0x10
c0013d40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d44:	89 1c 85 00 72 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8e00],ebx
c0013d4b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013d50:	e9 7b ff ff ff       	jmp    c0013cd0 <UnixFile::UnixFile(int)+0x128>
c0013d55:	90                   	nop
c0013d56:	83 c4 28             	add    esp,0x28
c0013d59:	5b                   	pop    ebx
c0013d5a:	c3                   	ret    
c0013d5b:	90                   	nop

c0013d5c <ReservedFilename::ReservedFilename(int)>:
c0013d5c:	83 ec 0c             	sub    esp,0xc
c0013d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d63:	83 ec 08             	sub    esp,0x8
c0013d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d6a:	50                   	push   eax
c0013d6b:	e8 38 fe ff ff       	call   c0013ba8 <UnixFile::UnixFile(int)>
c0013d70:	83 c4 10             	add    esp,0x10
c0013d73:	ba 7c c6 02 c0       	mov    edx,0xc002c67c
c0013d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d7c:	89 10                	mov    DWORD PTR [eax],edx
c0013d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d86:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013d89:	90                   	nop
c0013d8a:	83 c4 0c             	add    esp,0xc
c0013d8d:	c3                   	ret    

c0013d8e <UnixFile::~UnixFile()>:
c0013d8e:	83 ec 1c             	sub    esp,0x1c
c0013d91:	ba 60 c6 02 c0       	mov    edx,0xc002c660
c0013d96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d9a:	89 10                	mov    DWORD PTR [eax],edx
c0013d9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013da3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0013da8:	7f 76                	jg     c0013e20 <UnixFile::~UnixFile()+0x92>
c0013daa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013db2:	83 ec 0c             	sub    esp,0xc
c0013db5:	68 78 72 03 c0       	push   0xc0037278
c0013dba:	e8 ff 5d 01 00       	call   c0029bbe <LinkedList<UnixFile>::getFirstElement()>
c0013dbf:	83 c4 10             	add    esp,0x10
c0013dc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013dc6:	83 ec 0c             	sub    esp,0xc
c0013dc9:	68 78 72 03 c0       	push   0xc0037278
c0013dce:	e8 f3 5d 01 00       	call   c0029bc6 <LinkedList<UnixFile>::removeFirst()>
c0013dd3:	83 c4 10             	add    esp,0x10
c0013dd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013dda:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0013dde:	74 43                	je     c0013e23 <UnixFile::~UnixFile()+0x95>
c0013de0:	83 ec 08             	sub    esp,0x8
c0013de3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013de7:	68 78 72 03 c0       	push   0xc0037278
c0013dec:	e8 f9 5c 01 00       	call   c0029aea <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013df1:	83 c4 10             	add    esp,0x10
c0013df4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013df8:	8d 50 01             	lea    edx,[eax+0x1]
c0013dfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013dff:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013e04:	0f 94 c0             	sete   al
c0013e07:	0f b6 c0             	movzx  eax,al
c0013e0a:	85 c0                	test   eax,eax
c0013e0c:	74 a4                	je     c0013db2 <UnixFile::~UnixFile()+0x24>
c0013e0e:	83 ec 0c             	sub    esp,0xc
c0013e11:	68 38 c6 02 c0       	push   0xc002c638
c0013e16:	e8 49 cc ff ff       	call   c0010a64 <KePanic(char const*)>
c0013e1b:	83 c4 10             	add    esp,0x10
c0013e1e:	eb 92                	jmp    c0013db2 <UnixFile::~UnixFile()+0x24>
c0013e20:	90                   	nop
c0013e21:	eb 01                	jmp    c0013e24 <UnixFile::~UnixFile()+0x96>
c0013e23:	90                   	nop
c0013e24:	90                   	nop
c0013e25:	83 c4 1c             	add    esp,0x1c
c0013e28:	c3                   	ret    
c0013e29:	90                   	nop

c0013e2a <UnixFile::~UnixFile()>:
c0013e2a:	83 ec 0c             	sub    esp,0xc
c0013e2d:	83 ec 0c             	sub    esp,0xc
c0013e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e34:	e8 55 ff ff ff       	call   c0013d8e <UnixFile::~UnixFile()>
c0013e39:	83 c4 10             	add    esp,0x10
c0013e3c:	83 ec 08             	sub    esp,0x8
c0013e3f:	6a 0c                	push   0xc
c0013e41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e45:	e8 ce a2 ff ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0013e4a:	83 c4 10             	add    esp,0x10
c0013e4d:	83 c4 0c             	add    esp,0xc
c0013e50:	c3                   	ret    
c0013e51:	90                   	nop

c0013e52 <ReservedFilename::~ReservedFilename()>:
c0013e52:	83 ec 0c             	sub    esp,0xc
c0013e55:	ba 7c c6 02 c0       	mov    edx,0xc002c67c
c0013e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5e:	89 10                	mov    DWORD PTR [eax],edx
c0013e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e64:	83 ec 0c             	sub    esp,0xc
c0013e67:	50                   	push   eax
c0013e68:	e8 21 ff ff ff       	call   c0013d8e <UnixFile::~UnixFile()>
c0013e6d:	83 c4 10             	add    esp,0x10
c0013e70:	90                   	nop
c0013e71:	83 c4 0c             	add    esp,0xc
c0013e74:	c3                   	ret    
c0013e75:	90                   	nop

c0013e76 <ReservedFilename::~ReservedFilename()>:
c0013e76:	83 ec 0c             	sub    esp,0xc
c0013e79:	83 ec 0c             	sub    esp,0xc
c0013e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e80:	e8 cd ff ff ff       	call   c0013e52 <ReservedFilename::~ReservedFilename()>
c0013e85:	83 c4 10             	add    esp,0x10
c0013e88:	83 ec 08             	sub    esp,0x8
c0013e8b:	6a 0c                	push   0xc
c0013e8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e91:	e8 82 a2 ff ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0013e96:	83 c4 10             	add    esp,0x10
c0013e99:	83 c4 0c             	add    esp,0xc
c0013e9c:	c3                   	ret    

c0013e9d <KeGetFileFromDescriptor(int)>:
c0013e9d:	53                   	push   ebx
c0013e9e:	83 ec 08             	sub    esp,0x8
c0013ea1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ea5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0013eab:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0013eb1:	7f 30                	jg     c0013ee3 <KeGetFileFromDescriptor(int)+0x46>
c0013eb3:	83 ec 0c             	sub    esp,0xc
c0013eb6:	68 78 72 03 c0       	push   0xc0037278
c0013ebb:	e8 fe 5c 01 00       	call   c0029bbe <LinkedList<UnixFile>::getFirstElement()>
c0013ec0:	83 c4 10             	add    esp,0x10
c0013ec3:	8d 50 ff             	lea    edx,[eax-0x1]
c0013ec6:	83 fa fd             	cmp    edx,0xfffffffd
c0013ec9:	76 04                	jbe    c0013ecf <KeGetFileFromDescriptor(int)+0x32>
c0013ecb:	31 c0                	xor    eax,eax
c0013ecd:	eb 6e                	jmp    c0013f3d <KeGetFileFromDescriptor(int)+0xa0>
c0013ecf:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0013ed2:	74 69                	je     c0013f3d <KeGetFileFromDescriptor(int)+0xa0>
c0013ed4:	52                   	push   edx
c0013ed5:	52                   	push   edx
c0013ed6:	50                   	push   eax
c0013ed7:	68 78 72 03 c0       	push   0xc0037278
c0013edc:	e8 87 5d 01 00       	call   c0029c68 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0013ee1:	eb dd                	jmp    c0013ec0 <KeGetFileFromDescriptor(int)+0x23>
c0013ee3:	a1 6c 72 03 c0       	mov    eax,ds:0xc003726c
c0013ee8:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0013eee:	74 4d                	je     c0013f3d <KeGetFileFromDescriptor(int)+0xa0>
c0013ef0:	a1 70 72 03 c0       	mov    eax,ds:0xc0037270
c0013ef5:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0013efb:	74 40                	je     c0013f3d <KeGetFileFromDescriptor(int)+0xa0>
c0013efd:	a1 68 72 03 c0       	mov    eax,ds:0xc0037268
c0013f02:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0013f08:	74 33                	je     c0013f3d <KeGetFileFromDescriptor(int)+0xa0>
c0013f0a:	a1 64 72 03 c0       	mov    eax,ds:0xc0037264
c0013f0f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013f15:	74 26                	je     c0013f3d <KeGetFileFromDescriptor(int)+0xa0>
c0013f17:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013f1d:	83 f8 08             	cmp    eax,0x8
c0013f20:	77 09                	ja     c0013f2b <KeGetFileFromDescriptor(int)+0x8e>
c0013f22:	8b 04 85 40 72 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc8dc0]
c0013f29:	eb 12                	jmp    c0013f3d <KeGetFileFromDescriptor(int)+0xa0>
c0013f2b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0013f31:	83 fb 08             	cmp    ebx,0x8
c0013f34:	77 95                	ja     c0013ecb <KeGetFileFromDescriptor(int)+0x2e>
c0013f36:	8b 04 9d 00 72 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc8e00]
c0013f3d:	83 c4 08             	add    esp,0x8
c0013f40:	5b                   	pop    ebx
c0013f41:	c3                   	ret    

c0013f42 <__static_initialization_and_destruction_0(int, int)>:
c0013f42:	83 ec 0c             	sub    esp,0xc
c0013f45:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013f4a:	75 34                	jne    c0013f80 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013f4c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013f54:	75 2a                	jne    c0013f80 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013f56:	83 ec 0c             	sub    esp,0xc
c0013f59:	68 78 72 03 c0       	push   0xc0037278
c0013f5e:	e8 45 5b 01 00       	call   c0029aa8 <LinkedList<UnixFile>::LinkedList()>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	83 ec 04             	sub    esp,0x4
c0013f69:	68 00 04 03 c0       	push   0xc0030400
c0013f6e:	68 78 72 03 c0       	push   0xc0037278
c0013f73:	68 a6 9a 02 c0       	push   0xc0029aa6
c0013f78:	e8 4b a1 ff ff       	call   c000e0c8 <__cxa_atexit>
c0013f7d:	83 c4 10             	add    esp,0x10
c0013f80:	90                   	nop
c0013f81:	83 c4 0c             	add    esp,0xc
c0013f84:	c3                   	ret    

c0013f85 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013f85:	83 ec 0c             	sub    esp,0xc
c0013f88:	83 ec 08             	sub    esp,0x8
c0013f8b:	68 ff ff 00 00       	push   0xffff
c0013f90:	6a 01                	push   0x1
c0013f92:	e8 ab ff ff ff       	call   c0013f42 <__static_initialization_and_destruction_0(int, int)>
c0013f97:	83 c4 10             	add    esp,0x10
c0013f9a:	83 c4 0c             	add    esp,0xc
c0013f9d:	c3                   	ret    

c0013f9e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013f9e:	53                   	push   ebx
c0013f9f:	8b 15 28 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c28
c0013fa5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013fa9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fad:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013fb3:	89 d8                	mov    eax,ebx
c0013fb5:	d1 e8                	shr    eax,1
c0013fb7:	01 d0                	add    eax,edx
c0013fb9:	80 e3 01             	and    bl,0x1
c0013fbc:	8a 10                	mov    dl,BYTE PTR [eax]
c0013fbe:	75 09                	jne    c0013fc9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013fc0:	83 e2 f0             	and    edx,0xfffffff0
c0013fc3:	09 ca                	or     edx,ecx
c0013fc5:	88 10                	mov    BYTE PTR [eax],dl
c0013fc7:	5b                   	pop    ebx
c0013fc8:	c3                   	ret    
c0013fc9:	83 e2 0f             	and    edx,0xf
c0013fcc:	0f b6 c9             	movzx  ecx,cl
c0013fcf:	c1 e1 04             	shl    ecx,0x4
c0013fd2:	09 ca                	or     edx,ecx
c0013fd4:	88 10                	mov    BYTE PTR [eax],dl
c0013fd6:	5b                   	pop    ebx
c0013fd7:	c3                   	ret    

c0013fd8 <Virt::getPageState(unsigned long)>:
c0013fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fdc:	8b 0d 28 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c28
c0013fe2:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013fe8:	89 d0                	mov    eax,edx
c0013fea:	d1 e8                	shr    eax,1
c0013fec:	80 e2 01             	and    dl,0x1
c0013fef:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0013ff2:	74 03                	je     c0013ff7 <Virt::getPageState(unsigned long)+0x1f>
c0013ff4:	c1 e8 04             	shr    eax,0x4
c0013ff7:	83 e0 0f             	and    eax,0xf
c0013ffa:	c3                   	ret    

c0013ffb <Virt::allocateKernelVirtualPages(int)>:
c0013ffb:	55                   	push   ebp
c0013ffc:	31 ed                	xor    ebp,ebp
c0013ffe:	57                   	push   edi
c0013fff:	31 ff                	xor    edi,edi
c0014001:	56                   	push   esi
c0014002:	53                   	push   ebx
c0014003:	31 db                	xor    ebx,ebx
c0014005:	83 ec 0c             	sub    esp,0xc
c0014008:	8b 35 24 0c 03 c0    	mov    esi,DWORD PTR ds:0xc0030c24
c001400e:	56                   	push   esi
c001400f:	e8 c4 ff ff ff       	call   c0013fd8 <Virt::getPageState(unsigned long)>
c0014014:	5a                   	pop    edx
c0014015:	84 c0                	test   al,al
c0014017:	75 41                	jne    c001405a <Virt::allocateKernelVirtualPages(int)+0x5f>
c0014019:	85 db                	test   ebx,ebx
c001401b:	75 02                	jne    c001401f <Virt::allocateKernelVirtualPages(int)+0x24>
c001401d:	89 f5                	mov    ebp,esi
c001401f:	83 c3 01             	add    ebx,0x1
c0014022:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0014026:	74 5f                	je     c0014087 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0014028:	83 c6 01             	add    esi,0x1
c001402b:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0014031:	76 34                	jbe    c0014067 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0014033:	c7 05 24 0c 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0030c24,0xc8000
c001403d:	f7 c7 01 00 00 00    	test   edi,0x1
c0014043:	75 2a                	jne    c001406f <Virt::allocateKernelVirtualPages(int)+0x74>
c0014045:	be 00 80 0c 00       	mov    esi,0xc8000
c001404a:	bf 01 00 00 00       	mov    edi,0x1
c001404f:	56                   	push   esi
c0014050:	e8 83 ff ff ff       	call   c0013fd8 <Virt::getPageState(unsigned long)>
c0014055:	5a                   	pop    edx
c0014056:	84 c0                	test   al,al
c0014058:	74 bf                	je     c0014019 <Virt::allocateKernelVirtualPages(int)+0x1e>
c001405a:	31 db                	xor    ebx,ebx
c001405c:	83 c6 01             	add    esi,0x1
c001405f:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0014065:	77 cc                	ja     c0014033 <Virt::allocateKernelVirtualPages(int)+0x38>
c0014067:	89 35 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,esi
c001406d:	eb 9f                	jmp    c001400e <Virt::allocateKernelVirtualPages(int)+0x13>
c001406f:	83 ec 0c             	sub    esp,0xc
c0014072:	68 90 c6 02 c0       	push   0xc002c690
c0014077:	e8 e8 c9 ff ff       	call   c0010a64 <KePanic(char const*)>
c001407c:	8b 35 24 0c 03 c0    	mov    esi,DWORD PTR ds:0xc0030c24
c0014082:	83 c4 10             	add    esp,0x10
c0014085:	eb 87                	jmp    c001400e <Virt::allocateKernelVirtualPages(int)+0x13>
c0014087:	89 2d 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,ebp
c001408d:	83 fb 01             	cmp    ebx,0x1
c0014090:	74 6f                	je     c0014101 <Virt::allocateKernelVirtualPages(int)+0x106>
c0014092:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014096:	85 c9                	test   ecx,ecx
c0014098:	74 49                	je     c00140e3 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001409a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001409e:	89 e8                	mov    eax,ebp
c00140a0:	31 db                	xor    ebx,ebx
c00140a2:	8d 79 ff             	lea    edi,[ecx-0x1]
c00140a5:	eb 18                	jmp    c00140bf <Virt::allocateKernelVirtualPages(int)+0xc4>
c00140a7:	6a 01                	push   0x1
c00140a9:	83 c3 01             	add    ebx,0x1
c00140ac:	50                   	push   eax
c00140ad:	e8 ec fe ff ff       	call   c0013f9e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00140b2:	58                   	pop    eax
c00140b3:	5a                   	pop    edx
c00140b4:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00140b8:	74 29                	je     c00140e3 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00140ba:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c00140bf:	8d 50 01             	lea    edx,[eax+0x1]
c00140c2:	85 db                	test   ebx,ebx
c00140c4:	89 15 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,edx
c00140ca:	74 24                	je     c00140f0 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00140cc:	39 df                	cmp    edi,ebx
c00140ce:	75 d7                	jne    c00140a7 <Virt::allocateKernelVirtualPages(int)+0xac>
c00140d0:	6a 03                	push   0x3
c00140d2:	83 c3 01             	add    ebx,0x1
c00140d5:	50                   	push   eax
c00140d6:	e8 c3 fe ff ff       	call   c0013f9e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00140db:	59                   	pop    ecx
c00140dc:	5e                   	pop    esi
c00140dd:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00140e1:	75 d7                	jne    c00140ba <Virt::allocateKernelVirtualPages(int)+0xbf>
c00140e3:	83 c4 0c             	add    esp,0xc
c00140e6:	89 e8                	mov    eax,ebp
c00140e8:	5b                   	pop    ebx
c00140e9:	c1 e0 0c             	shl    eax,0xc
c00140ec:	5e                   	pop    esi
c00140ed:	5f                   	pop    edi
c00140ee:	5d                   	pop    ebp
c00140ef:	c3                   	ret    
c00140f0:	6a 02                	push   0x2
c00140f2:	bb 01 00 00 00       	mov    ebx,0x1
c00140f7:	50                   	push   eax
c00140f8:	e8 a1 fe ff ff       	call   c0013f9e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00140fd:	58                   	pop    eax
c00140fe:	5a                   	pop    edx
c00140ff:	eb b9                	jmp    c00140ba <Virt::allocateKernelVirtualPages(int)+0xbf>
c0014101:	6a 04                	push   0x4
c0014103:	8d 45 01             	lea    eax,[ebp+0x1]
c0014106:	55                   	push   ebp
c0014107:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001410c:	e8 8d fe ff ff       	call   c0013f9e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0014111:	5b                   	pop    ebx
c0014112:	89 e8                	mov    eax,ebp
c0014114:	5e                   	pop    esi
c0014115:	c1 e0 0c             	shl    eax,0xc
c0014118:	83 c4 0c             	add    esp,0xc
c001411b:	5b                   	pop    ebx
c001411c:	5e                   	pop    esi
c001411d:	5f                   	pop    edi
c001411e:	5d                   	pop    ebp
c001411f:	c3                   	ret    

c0014120 <Virt::freeSwapfilePage(unsigned long)>:
c0014120:	53                   	push   ebx
c0014121:	8b 15 8c 72 03 c0    	mov    edx,DWORD PTR ds:0xc003728c
c0014127:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001412b:	b8 01 00 00 00       	mov    eax,0x1
c0014130:	89 cb                	mov    ebx,ecx
c0014132:	d3 e0                	shl    eax,cl
c0014134:	c1 eb 05             	shr    ebx,0x5
c0014137:	f7 d0                	not    eax
c0014139:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001413c:	21 c1                	and    ecx,eax
c001413e:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0014141:	5b                   	pop    ebx
c0014142:	c3                   	ret    

c0014143 <Virt::swapIDToSector(unsigned long)>:
c0014143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014147:	8b 15 2c 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c2c
c001414d:	8b 0d 34 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c34
c0014153:	0f af c2             	imul   eax,edx
c0014156:	01 c8                	add    eax,ecx
c0014158:	c3                   	ret    

c0014159 <Virt::allocateSwapfilePage()>:
c0014159:	55                   	push   ebp
c001415a:	31 d2                	xor    edx,edx
c001415c:	57                   	push   edi
c001415d:	56                   	push   esi
c001415e:	53                   	push   ebx
c001415f:	83 ec 0c             	sub    esp,0xc
c0014162:	8b 0d 2c 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c2c
c0014168:	a1 30 0c 03 c0       	mov    eax,ds:0xc0030c30
c001416d:	f7 f1                	div    ecx
c001416f:	39 0d 30 0c 03 c0    	cmp    DWORD PTR ds:0xc0030c30,ecx
c0014175:	72 2f                	jb     c00141a6 <Virt::allocateSwapfilePage()+0x4d>
c0014177:	8b 35 8c 72 03 c0    	mov    esi,DWORD PTR ds:0xc003728c
c001417d:	8b 16                	mov    edx,DWORD PTR [esi]
c001417f:	f6 c2 01             	test   dl,0x1
c0014182:	74 3e                	je     c00141c2 <Virt::allocateSwapfilePage()+0x69>
c0014184:	31 c9                	xor    ecx,ecx
c0014186:	bf 01 00 00 00       	mov    edi,0x1
c001418b:	eb 12                	jmp    c001419f <Virt::allocateSwapfilePage()+0x46>
c001418d:	89 fd                	mov    ebp,edi
c001418f:	89 ca                	mov    edx,ecx
c0014191:	d3 e5                	shl    ebp,cl
c0014193:	c1 ea 05             	shr    edx,0x5
c0014196:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0014199:	8b 13                	mov    edx,DWORD PTR [ebx]
c001419b:	85 ea                	test   edx,ebp
c001419d:	74 2c                	je     c00141cb <Virt::allocateSwapfilePage()+0x72>
c001419f:	83 c1 01             	add    ecx,0x1
c00141a2:	39 c8                	cmp    eax,ecx
c00141a4:	77 e7                	ja     c001418d <Virt::allocateSwapfilePage()+0x34>
c00141a6:	83 ec 0c             	sub    esp,0xc
c00141a9:	68 a3 c9 02 c0       	push   0xc002c9a3
c00141ae:	e8 b1 c8 ff ff       	call   c0010a64 <KePanic(char const*)>
c00141b3:	83 c4 10             	add    esp,0x10
c00141b6:	31 c9                	xor    ecx,ecx
c00141b8:	83 c4 0c             	add    esp,0xc
c00141bb:	89 c8                	mov    eax,ecx
c00141bd:	5b                   	pop    ebx
c00141be:	5e                   	pop    esi
c00141bf:	5f                   	pop    edi
c00141c0:	5d                   	pop    ebp
c00141c1:	c3                   	ret    
c00141c2:	89 f3                	mov    ebx,esi
c00141c4:	bd 01 00 00 00       	mov    ebp,0x1
c00141c9:	31 c9                	xor    ecx,ecx
c00141cb:	09 ea                	or     edx,ebp
c00141cd:	89 c8                	mov    eax,ecx
c00141cf:	89 13                	mov    DWORD PTR [ebx],edx
c00141d1:	83 c4 0c             	add    esp,0xc
c00141d4:	5b                   	pop    ebx
c00141d5:	5e                   	pop    esi
c00141d6:	5f                   	pop    edi
c00141d7:	5d                   	pop    ebp
c00141d8:	c3                   	ret    

c00141d9 <Virt::virtualMemorySetup()>:
c00141d9:	53                   	push   ebx
c00141da:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00141df:	6a 0f                	push   0xf
c00141e1:	53                   	push   ebx
c00141e2:	83 c3 01             	add    ebx,0x1
c00141e5:	e8 b4 fd ff ff       	call   c0013f9e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00141ea:	58                   	pop    eax
c00141eb:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00141f1:	5a                   	pop    edx
c00141f2:	75 eb                	jne    c00141df <Virt::virtualMemorySetup()+0x6>
c00141f4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00141f9:	6a 00                	push   0x0
c00141fb:	53                   	push   ebx
c00141fc:	83 c3 01             	add    ebx,0x1
c00141ff:	e8 9a fd ff ff       	call   c0013f9e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0014204:	59                   	pop    ecx
c0014205:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001420b:	58                   	pop    eax
c001420c:	75 eb                	jne    c00141f9 <Virt::virtualMemorySetup()+0x20>
c001420e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0014213:	6a 0f                	push   0xf
c0014215:	53                   	push   ebx
c0014216:	83 c3 01             	add    ebx,0x1
c0014219:	e8 80 fd ff ff       	call   c0013f9e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001421e:	58                   	pop    eax
c001421f:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0014225:	5a                   	pop    edx
c0014226:	75 eb                	jne    c0014213 <Virt::virtualMemorySetup()+0x3a>
c0014228:	5b                   	pop    ebx
c0014229:	c3                   	ret    

c001422a <Virt::setupPageSwapping(int)>:
c001422a:	53                   	push   ebx
c001422b:	83 ec 0c             	sub    esp,0xc
c001422e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014232:	a1 e8 6a 03 c0       	mov    eax,ds:0xc0036ae8
c0014237:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001423d:	8b 10                	mov    edx,DWORD PTR [eax]
c001423f:	53                   	push   ebx
c0014240:	c1 e3 0b             	shl    ebx,0xb
c0014243:	68 ba c9 02 c0       	push   0xc002c9ba
c0014248:	50                   	push   eax
c0014249:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001424c:	89 1d 30 0c 03 c0    	mov    DWORD PTR ds:0xc0030c30,ebx
c0014252:	c6 05 38 0c 03 c0 43 	mov    BYTE PTR ds:0xc0030c38,0x43
c0014259:	c1 eb 08             	shr    ebx,0x8
c001425c:	a3 34 0c 03 c0       	mov    ds:0xc0030c34,eax
c0014261:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014264:	c7 05 2c 0c 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0030c2c,0x8
c001426e:	e8 9c c3 ff ff       	call   c001060f <malloc>
c0014273:	83 c4 0c             	add    esp,0xc
c0014276:	89 c1                	mov    ecx,eax
c0014278:	a3 8c 72 03 c0       	mov    ds:0xc003728c,eax
c001427d:	31 d2                	xor    edx,edx
c001427f:	a1 30 0c 03 c0       	mov    eax,ds:0xc0030c30
c0014284:	f7 35 2c 0c 03 c0    	div    DWORD PTR ds:0xc0030c2c
c001428a:	c1 e8 05             	shr    eax,0x5
c001428d:	50                   	push   eax
c001428e:	6a 00                	push   0x0
c0014290:	51                   	push   ecx
c0014291:	e8 5a c2 fe ff       	call   c00004f0 <memset>
c0014296:	83 c4 18             	add    esp,0x18
c0014299:	5b                   	pop    ebx
c001429a:	c3                   	ret    
c001429b:	90                   	nop

c001429c <VAS::setCPUSpecific(unsigned long)>:
c001429c:	c3                   	ret    
c001429d:	90                   	nop

c001429e <VAS::VAS(VAS*)>:
c001429e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00142b4:	90                   	nop
c00142b5:	c3                   	ret    

c00142b6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00142b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00142ba:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00142bf:	89 c2                	mov    edx,eax
c00142c1:	c1 e8 0a             	shr    eax,0xa
c00142c4:	c1 ea 16             	shr    edx,0x16
c00142c7:	83 f9 01             	cmp    ecx,0x1
c00142ca:	19 c9                	sbb    ecx,ecx
c00142cc:	c1 e2 0c             	shl    edx,0xc
c00142cf:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00142d5:	25 fc 0f 00 00       	and    eax,0xffc
c00142da:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00142e1:	01 d0                	add    eax,edx
c00142e3:	c3                   	ret    

c00142e4 <VAS::getPageTableEntry(unsigned long)>:
c00142e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00142e8:	89 ca                	mov    edx,ecx
c00142ea:	c1 e9 0a             	shr    ecx,0xa
c00142ed:	c1 ea 16             	shr    edx,0x16
c00142f0:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00142f6:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00142fc:	c1 e0 0c             	shl    eax,0xc
c00142ff:	8d 04 08             	lea    eax,[eax+ecx*1]
c0014302:	c3                   	ret    

c0014303 <Virt::freeKernelVirtualPages(unsigned long)>:
c0014303:	55                   	push   ebp
c0014304:	57                   	push   edi
c0014305:	bf 01 00 00 00       	mov    edi,0x1
c001430a:	56                   	push   esi
c001430b:	53                   	push   ebx
c001430c:	83 ec 1c             	sub    esp,0x1c
c001430f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014313:	c1 ee 0c             	shr    esi,0xc
c0014316:	eb 48                	jmp    c0014360 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0014318:	83 ec 08             	sub    esp,0x8
c001431b:	a1 90 72 03 c0       	mov    eax,ds:0xc0037290
c0014320:	55                   	push   ebp
c0014321:	50                   	push   eax
c0014322:	e8 bd ff ff ff       	call   c00142e4 <VAS::getPageTableEntry(unsigned long)>
c0014327:	83 c4 10             	add    esp,0x10
c001432a:	8b 10                	mov    edx,DWORD PTR [eax]
c001432c:	f6 c6 04             	test   dh,0x4
c001432f:	75 70                	jne    c00143a1 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0014331:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014337:	83 fb 04             	cmp    ebx,0x4
c001433a:	0f 84 8a 00 00 00    	je     c00143ca <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0014340:	83 fb 02             	cmp    ebx,0x2
c0014343:	0f 84 9a 00 00 00    	je     c00143e3 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0014349:	83 fb 03             	cmp    ebx,0x3
c001434c:	0f 84 be 00 00 00    	je     c0014410 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0014352:	83 fb 01             	cmp    ebx,0x1
c0014355:	0f 84 a2 00 00 00    	je     c00143fd <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001435b:	83 c6 01             	add    esi,0x1
c001435e:	31 ff                	xor    edi,edi
c0014360:	56                   	push   esi
c0014361:	89 f5                	mov    ebp,esi
c0014363:	e8 70 fc ff ff       	call   c0013fd8 <Virt::getPageState(unsigned long)>
c0014368:	c1 e5 0c             	shl    ebp,0xc
c001436b:	0f b6 d8             	movzx  ebx,al
c001436e:	5a                   	pop    edx
c001436f:	85 db                	test   ebx,ebx
c0014371:	75 a5                	jne    c0014318 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0014373:	83 ec 0c             	sub    esp,0xc
c0014376:	68 d1 c9 02 c0       	push   0xc002c9d1
c001437b:	e8 e4 c6 ff ff       	call   c0010a64 <KePanic(char const*)>
c0014380:	5a                   	pop    edx
c0014381:	59                   	pop    ecx
c0014382:	55                   	push   ebp
c0014383:	8b 2d 90 72 03 c0    	mov    ebp,DWORD PTR ds:0xc0037290
c0014389:	55                   	push   ebp
c001438a:	e8 55 ff ff ff       	call   c00142e4 <VAS::getPageTableEntry(unsigned long)>
c001438f:	83 c4 10             	add    esp,0x10
c0014392:	8b 10                	mov    edx,DWORD PTR [eax]
c0014394:	f6 c6 04             	test   dh,0x4
c0014397:	75 08                	jne    c00143a1 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0014399:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001439f:	eb ba                	jmp    c001435b <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00143a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00143a5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00143ab:	83 ec 0c             	sub    esp,0xc
c00143ae:	52                   	push   edx
c00143af:	e8 3b c8 ff ff       	call   c0010bef <Phys::freePage(unsigned long)>
c00143b4:	83 c4 10             	add    esp,0x10
c00143b7:	83 fb 04             	cmp    ebx,0x4
c00143ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00143be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143c4:	0f 85 76 ff ff ff    	jne    c0014340 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00143ca:	83 e7 01             	and    edi,0x1
c00143cd:	75 46                	jne    c0014415 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00143cf:	c7 44 24 30 b0 c6 02 c0 	mov    DWORD PTR [esp+0x30],0xc002c6b0
c00143d7:	83 c4 1c             	add    esp,0x1c
c00143da:	5b                   	pop    ebx
c00143db:	5e                   	pop    esi
c00143dc:	5f                   	pop    edi
c00143dd:	5d                   	pop    ebp
c00143de:	e9 81 c6 ff ff       	jmp    c0010a64 <KePanic(char const*)>
c00143e3:	83 e7 01             	and    edi,0x1
c00143e6:	75 15                	jne    c00143fd <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00143e8:	83 ec 0c             	sub    esp,0xc
c00143eb:	68 ed c9 02 c0       	push   0xc002c9ed
c00143f0:	e8 6f c6 ff ff       	call   c0010a64 <KePanic(char const*)>
c00143f5:	83 c4 10             	add    esp,0x10
c00143f8:	e9 5e ff ff ff       	jmp    c001435b <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00143fd:	83 ec 08             	sub    esp,0x8
c0014400:	6a 00                	push   0x0
c0014402:	56                   	push   esi
c0014403:	e8 96 fb ff ff       	call   c0013f9e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0014408:	83 c4 10             	add    esp,0x10
c001440b:	e9 4b ff ff ff       	jmp    c001435b <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0014410:	83 e7 01             	and    edi,0x1
c0014413:	75 16                	jne    c001442b <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0014415:	83 ec 08             	sub    esp,0x8
c0014418:	6a 00                	push   0x0
c001441a:	56                   	push   esi
c001441b:	e8 7e fb ff ff       	call   c0013f9e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0014420:	83 c4 10             	add    esp,0x10
c0014423:	83 c4 1c             	add    esp,0x1c
c0014426:	5b                   	pop    ebx
c0014427:	5e                   	pop    esi
c0014428:	5f                   	pop    edi
c0014429:	5d                   	pop    ebp
c001442a:	c3                   	ret    
c001442b:	c7 44 24 30 09 ca 02 c0 	mov    DWORD PTR [esp+0x30],0xc002ca09
c0014433:	83 c4 1c             	add    esp,0x1c
c0014436:	5b                   	pop    ebx
c0014437:	5e                   	pop    esi
c0014438:	5f                   	pop    edi
c0014439:	5d                   	pop    ebp
c001443a:	e9 25 c6 ff ff       	jmp    c0010a64 <KePanic(char const*)>
c001443f:	90                   	nop

c0014440 <VAS::freeAllocatedPages(unsigned long)>:
c0014440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014444:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014448:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001444c:	74 09                	je     c0014457 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001444e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014452:	e9 ac fe ff ff       	jmp    c0014303 <Virt::freeKernelVirtualPages(unsigned long)>
c0014457:	c7 44 24 04 d4 c6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c6d4
c001445f:	e9 18 2b ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c0014464 <VAS::virtualToPhysical(unsigned long)>:
c0014464:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014468:	50                   	push   eax
c0014469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001446d:	52                   	push   edx
c001446e:	e8 71 fe ff ff       	call   c00142e4 <VAS::getPageTableEntry(unsigned long)>
c0014473:	59                   	pop    ecx
c0014474:	8b 00                	mov    eax,DWORD PTR [eax]
c0014476:	5a                   	pop    edx
c0014477:	25 00 f0 ff ff       	and    eax,0xfffff000
c001447c:	c3                   	ret    
c001447d:	90                   	nop

c001447e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c001447e:	55                   	push   ebp
c001447f:	57                   	push   edi
c0014480:	56                   	push   esi
c0014481:	53                   	push   ebx
c0014482:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014486:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001448a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001448e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0014492:	85 db                	test   ebx,ebx
c0014494:	7e 24                	jle    c00144ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0014496:	c1 e3 0c             	shl    ebx,0xc
c0014499:	01 f3                	add    ebx,esi
c001449b:	56                   	push   esi
c001449c:	81 c6 00 10 00 00    	add    esi,0x1000
c00144a2:	55                   	push   ebp
c00144a3:	e8 3c fe ff ff       	call   c00142e4 <VAS::getPageTableEntry(unsigned long)>
c00144a8:	5a                   	pop    edx
c00144a9:	59                   	pop    ecx
c00144aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c00144ac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00144b0:	21 f9                	and    ecx,edi
c00144b2:	09 d1                	or     ecx,edx
c00144b4:	39 f3                	cmp    ebx,esi
c00144b6:	89 08                	mov    DWORD PTR [eax],ecx
c00144b8:	75 e1                	jne    c001449b <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00144ba:	5b                   	pop    ebx
c00144bb:	5e                   	pop    esi
c00144bc:	5f                   	pop    edi
c00144bd:	5d                   	pop    ebp
c00144be:	c3                   	ret    
c00144bf:	90                   	nop

c00144c0 <VAS::VAS()>:
c00144c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00144d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144da:	a3 90 72 03 c0       	mov    ds:0xc0037290,eax
c00144df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144e3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00144e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144eb:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00144ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144f2:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00144f9:	ba 7d 20 03 c0       	mov    edx,0xc003207d
c00144fe:	b8 00 20 03 c0       	mov    eax,0xc0032000
c0014503:	29 c2                	sub    edx,eax
c0014505:	89 d0                	mov    eax,edx
c0014507:	05 ff 0f 00 00       	add    eax,0xfff
c001450c:	c1 e8 0c             	shr    eax,0xc
c001450f:	89 c2                	mov    edx,eax
c0014511:	b8 00 20 03 c0       	mov    eax,0xc0032000
c0014516:	6a 04                	push   0x4
c0014518:	6a ff                	push   0xffffffff
c001451a:	52                   	push   edx
c001451b:	50                   	push   eax
c001451c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014520:	e8 59 ff ff ff       	call   c001447e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014525:	83 c4 14             	add    esp,0x14
c0014528:	90                   	nop
c0014529:	c3                   	ret    

c001452a <VAS::setToWriteCombining(unsigned long, int)>:
c001452a:	a1 24 74 03 c0       	mov    eax,ds:0xc0037424
c001452f:	50                   	push   eax
c0014530:	6a ff                	push   0xffffffff
c0014532:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014536:	52                   	push   edx
c0014537:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001453b:	51                   	push   ecx
c001453c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014540:	50                   	push   eax
c0014541:	e8 38 ff ff ff       	call   c001447e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014546:	83 c4 14             	add    esp,0x14
c0014549:	c3                   	ret    

c001454a <VAS::mapOtherVASIn(bool, VAS*)>:
c001454a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001454e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014555:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0014558:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001455d:	83 f8 01             	cmp    eax,0x1
c0014560:	19 c0                	sbb    eax,eax
c0014562:	83 ca 03             	or     edx,0x3
c0014565:	83 e0 fc             	and    eax,0xfffffffc
c0014568:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001456f:	0f 20 d8             	mov    eax,cr3
c0014572:	0f 22 d8             	mov    cr3,eax
c0014575:	c3                   	ret    

c0014576 <VAS::~VAS()>:
c0014576:	83 ec 2c             	sub    esp,0x2c
c0014579:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014581:	fa                   	cli    
c0014582:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0014587:	83 c0 01             	add    eax,0x1
c001458a:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c001458f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014594:	8b 00                	mov    eax,DWORD PTR [eax]
c0014596:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014599:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001459f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00145a3:	6a 01                	push   0x1
c00145a5:	50                   	push   eax
c00145a6:	e8 9f ff ff ff       	call   c001454a <VAS::mapOtherVASIn(bool, VAS*)>
c00145ab:	83 c4 0c             	add    esp,0xc
c00145ae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00145b6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00145be:	0f 8f d8 00 00 00    	jg     c001469c <VAS::~VAS()+0x126>
c00145c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00145cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00145cf:	c1 e2 02             	shl    edx,0x2
c00145d2:	01 d0                	add    eax,edx
c00145d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00145d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00145da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145de:	83 e0 01             	and    eax,0x1
c00145e1:	0f 84 ab 00 00 00    	je     c0014692 <VAS::~VAS()+0x11c>
c00145e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00145ef:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00145f7:	7f 74                	jg     c001466d <VAS::~VAS()+0xf7>
c00145f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145fd:	c1 e0 0a             	shl    eax,0xa
c0014600:	89 c2                	mov    edx,eax
c0014602:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014606:	01 d0                	add    eax,edx
c0014608:	c1 e0 0c             	shl    eax,0xc
c001460b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001460f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014614:	8b 00                	mov    eax,DWORD PTR [eax]
c0014616:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014619:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001461f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014623:	6a 01                	push   0x1
c0014625:	50                   	push   eax
c0014626:	e8 8b fc ff ff       	call   c00142b6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001462b:	83 c4 0c             	add    esp,0xc
c001462e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014632:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014636:	8b 00                	mov    eax,DWORD PTR [eax]
c0014638:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001463c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014640:	25 01 04 00 00       	and    eax,0x401
c0014645:	3d 01 04 00 00       	cmp    eax,0x401
c001464a:	75 1a                	jne    c0014666 <VAS::~VAS()+0xf0>
c001464c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014650:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014655:	83 ec 0c             	sub    esp,0xc
c0014658:	50                   	push   eax
c0014659:	e8 91 c5 ff ff       	call   c0010bef <Phys::freePage(unsigned long)>
c001465e:	83 c4 10             	add    esp,0x10
c0014661:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014666:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c001466b:	eb 82                	jmp    c00145ef <VAS::~VAS()+0x79>
c001466d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014671:	25 00 04 00 00       	and    eax,0x400
c0014676:	74 1a                	je     c0014692 <VAS::~VAS()+0x11c>
c0014678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014681:	83 ec 0c             	sub    esp,0xc
c0014684:	50                   	push   eax
c0014685:	e8 65 c5 ff ff       	call   c0010bef <Phys::freePage(unsigned long)>
c001468a:	83 c4 10             	add    esp,0x10
c001468d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014692:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014697:	e9 1a ff ff ff       	jmp    c00145b6 <VAS::~VAS()+0x40>
c001469c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00146a3:	83 ec 0c             	sub    esp,0xc
c00146a6:	50                   	push   eax
c00146a7:	e8 57 fc ff ff       	call   c0014303 <Virt::freeKernelVirtualPages(unsigned long)>
c00146ac:	83 c4 10             	add    esp,0x10
c00146af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00146b6:	83 ec 0c             	sub    esp,0xc
c00146b9:	50                   	push   eax
c00146ba:	e8 30 c5 ff ff       	call   c0010bef <Phys::freePage(unsigned long)>
c00146bf:	83 c4 10             	add    esp,0x10
c00146c2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00146c7:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00146cf:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00146d4:	85 c0                	test   eax,eax
c00146d6:	75 01                	jne    c00146d9 <VAS::~VAS()+0x163>
c00146d8:	fb                   	sti    
c00146d9:	90                   	nop
c00146da:	83 c4 2c             	add    esp,0x2c
c00146dd:	c3                   	ret    

c00146de <VAS::mapPage(unsigned long, unsigned long, int)>:
c00146de:	55                   	push   ebp
c00146df:	57                   	push   edi
c00146e0:	56                   	push   esi
c00146e1:	53                   	push   ebx
c00146e2:	83 ec 1c             	sub    esp,0x1c
c00146e5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00146e9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00146ed:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00146f3:	77 08                	ja     c00146fd <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00146f5:	0f 20 d8             	mov    eax,cr3
c00146f8:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00146fb:	75 49                	jne    c0014746 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c00146fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014701:	09 d8                	or     eax,ebx
c0014703:	a9 ff 0f 00 00       	test   eax,0xfff
c0014708:	75 59                	jne    c0014763 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c001470a:	89 de                	mov    esi,ebx
c001470c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001470f:	c1 ee 16             	shr    esi,0x16
c0014712:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0014719:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001471d:	74 56                	je     c0014775 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c001471f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0014723:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014727:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001472d:	c1 eb 0a             	shr    ebx,0xa
c0014730:	c1 e6 0c             	shl    esi,0xc
c0014733:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0014739:	09 d0                	or     eax,edx
c001473b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001473e:	83 c4 1c             	add    esp,0x1c
c0014741:	5b                   	pop    ebx
c0014742:	5e                   	pop    esi
c0014743:	5f                   	pop    edi
c0014744:	5d                   	pop    ebp
c0014745:	c3                   	ret    
c0014746:	83 ec 0c             	sub    esp,0xc
c0014749:	68 f8 c6 02 c0       	push   0xc002c6f8
c001474e:	e8 29 28 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014753:	83 c4 10             	add    esp,0x10
c0014756:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001475a:	09 d8                	or     eax,ebx
c001475c:	a9 ff 0f 00 00       	test   eax,0xfff
c0014761:	74 a7                	je     c001470a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0014763:	83 ec 0c             	sub    esp,0xc
c0014766:	68 60 c7 02 c0       	push   0xc002c760
c001476b:	e8 f4 c2 ff ff       	call   c0010a64 <KePanic(char const*)>
c0014770:	83 c4 10             	add    esp,0x10
c0014773:	eb 95                	jmp    c001470a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0014775:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014779:	e8 da c4 ff ff       	call   c0010c58 <Phys::allocatePage()>
c001477e:	83 ec 0c             	sub    esp,0xc
c0014781:	89 c5                	mov    ebp,eax
c0014783:	8b 0d 90 72 03 c0    	mov    ecx,DWORD PTR ds:0xc0037290
c0014789:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001478d:	6a 01                	push   0x1
c001478f:	e8 67 f8 ff ff       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c0014794:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001479b:	6a 01                	push   0x1
c001479d:	50                   	push   eax
c001479e:	55                   	push   ebp
c001479f:	81 cd 07 04 00 00    	or     ebp,0x407
c00147a5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00147a9:	51                   	push   ecx
c00147aa:	e8 19 01 00 00       	call   c00148c8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00147af:	83 c4 1c             	add    esp,0x1c
c00147b2:	68 00 10 00 00       	push   0x1000
c00147b7:	6a 00                	push   0x0
c00147b9:	50                   	push   eax
c00147ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147be:	e8 2d bd fe ff       	call   c00004f0 <memset>
c00147c3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00147c7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00147ca:	e8 34 fb ff ff       	call   c0014303 <Virt::freeKernelVirtualPages(unsigned long)>
c00147cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00147d3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00147d6:	83 c4 10             	add    esp,0x10
c00147d9:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00147dc:	e9 3e ff ff ff       	jmp    c001471f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c00147e1:	90                   	nop

c00147e2 <VAS::allocatePages(int, int)>:
c00147e2:	55                   	push   ebp
c00147e3:	57                   	push   edi
c00147e4:	56                   	push   esi
c00147e5:	53                   	push   ebx
c00147e6:	83 ec 1c             	sub    esp,0x1c
c00147e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00147ed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00147f1:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00147f5:	75 71                	jne    c0014868 <VAS::allocatePages(int, int)+0x86>
c00147f7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00147fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147fe:	85 c0                	test   eax,eax
c0014800:	74 4d                	je     c001484f <VAS::allocatePages(int, int)+0x6d>
c0014802:	89 dd                	mov    ebp,ebx
c0014804:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014808:	c1 e5 0c             	shl    ebp,0xc
c001480b:	01 c5                	add    ebp,eax
c001480d:	85 db                	test   ebx,ebx
c001480f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0014812:	7e 29                	jle    c001483d <VAS::allocatePages(int, int)+0x5b>
c0014814:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0014818:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001481c:	81 cf 00 04 00 00    	or     edi,0x400
c0014822:	e8 31 c4 ff ff       	call   c0010c58 <Phys::allocatePage()>
c0014827:	57                   	push   edi
c0014828:	53                   	push   ebx
c0014829:	81 c3 00 10 00 00    	add    ebx,0x1000
c001482f:	50                   	push   eax
c0014830:	56                   	push   esi
c0014831:	e8 a8 fe ff ff       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c0014836:	83 c4 10             	add    esp,0x10
c0014839:	39 dd                	cmp    ebp,ebx
c001483b:	75 e5                	jne    c0014822 <VAS::allocatePages(int, int)+0x40>
c001483d:	0f 20 d8             	mov    eax,cr3
c0014840:	0f 22 d8             	mov    cr3,eax
c0014843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014847:	83 c4 1c             	add    esp,0x1c
c001484a:	5b                   	pop    ebx
c001484b:	5e                   	pop    esi
c001484c:	5f                   	pop    edi
c001484d:	5d                   	pop    ebp
c001484e:	c3                   	ret    
c001484f:	83 ec 0c             	sub    esp,0xc
c0014852:	68 84 c7 02 c0       	push   0xc002c784
c0014857:	e8 08 c2 ff ff       	call   c0010a64 <KePanic(char const*)>
c001485c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001485f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014863:	83 c4 10             	add    esp,0x10
c0014866:	eb 9a                	jmp    c0014802 <VAS::allocatePages(int, int)+0x20>
c0014868:	83 ec 0c             	sub    esp,0xc
c001486b:	53                   	push   ebx
c001486c:	e8 8a f7 ff ff       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c0014871:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014875:	83 c4 10             	add    esp,0x10
c0014878:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001487d:	77 37                	ja     c00148b6 <VAS::allocatePages(int, int)+0xd4>
c001487f:	85 db                	test   ebx,ebx
c0014881:	7e ba                	jle    c001483d <VAS::allocatePages(int, int)+0x5b>
c0014883:	c1 e3 0c             	shl    ebx,0xc
c0014886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001488a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001488e:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0014891:	81 cf 00 04 00 00    	or     edi,0x400
c0014897:	89 c3                	mov    ebx,eax
c0014899:	e8 ba c3 ff ff       	call   c0010c58 <Phys::allocatePage()>
c001489e:	57                   	push   edi
c001489f:	53                   	push   ebx
c00148a0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00148a6:	50                   	push   eax
c00148a7:	56                   	push   esi
c00148a8:	e8 31 fe ff ff       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c00148ad:	83 c4 10             	add    esp,0x10
c00148b0:	39 dd                	cmp    ebp,ebx
c00148b2:	75 e5                	jne    c0014899 <VAS::allocatePages(int, int)+0xb7>
c00148b4:	eb 87                	jmp    c001483d <VAS::allocatePages(int, int)+0x5b>
c00148b6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00148ba:	a1 28 74 03 c0       	mov    eax,ds:0xc0037428
c00148bf:	09 c2                	or     edx,eax
c00148c1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00148c5:	eb b8                	jmp    c001487f <VAS::allocatePages(int, int)+0x9d>
c00148c7:	90                   	nop

c00148c8 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00148c8:	55                   	push   ebp
c00148c9:	57                   	push   edi
c00148ca:	56                   	push   esi
c00148cb:	53                   	push   ebx
c00148cc:	83 ec 0c             	sub    esp,0xc
c00148cf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00148d3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00148d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00148db:	85 db                	test   ebx,ebx
c00148dd:	7e 2f                	jle    c001490e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c00148df:	c1 e3 0c             	shl    ebx,0xc
c00148e2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00148e6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00148ea:	01 d3                	add    ebx,edx
c00148ec:	55                   	push   ebp
c00148ed:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00148f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148f5:	29 c2                	sub    edx,eax
c00148f7:	01 f2                	add    edx,esi
c00148f9:	52                   	push   edx
c00148fa:	56                   	push   esi
c00148fb:	81 c6 00 10 00 00    	add    esi,0x1000
c0014901:	57                   	push   edi
c0014902:	e8 d7 fd ff ff       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c0014907:	83 c4 10             	add    esp,0x10
c001490a:	39 de                	cmp    esi,ebx
c001490c:	75 de                	jne    c00148ec <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c001490e:	0f 20 d8             	mov    eax,cr3
c0014911:	0f 22 d8             	mov    cr3,eax
c0014914:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014918:	83 c4 0c             	add    esp,0xc
c001491b:	5b                   	pop    ebx
c001491c:	5e                   	pop    esi
c001491d:	5f                   	pop    edi
c001491e:	5d                   	pop    ebp
c001491f:	c3                   	ret    

c0014920 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0014920:	55                   	push   ebp
c0014921:	57                   	push   edi
c0014922:	56                   	push   esi
c0014923:	53                   	push   ebx
c0014924:	83 ec 1c             	sub    esp,0x1c
c0014927:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001492b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001492f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014933:	09 f8                	or     eax,edi
c0014935:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014939:	a9 ff 0f 00 00       	test   eax,0xfff
c001493e:	75 4f                	jne    c001498f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0014940:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0014944:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0014947:	c1 eb 16             	shr    ebx,0x16
c001494a:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0014951:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0014955:	74 52                	je     c00149a9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0014957:	0f b6 f2             	movzx  esi,dl
c001495a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001495e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0014962:	c1 e8 0a             	shr    eax,0xa
c0014965:	83 fe 01             	cmp    esi,0x1
c0014968:	19 d2                	sbb    edx,edx
c001496a:	c1 e3 0c             	shl    ebx,0xc
c001496d:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0014973:	25 fc 0f 00 00       	and    eax,0xffc
c0014978:	01 d8                	add    eax,ebx
c001497a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001497e:	09 d9                	or     ecx,ebx
c0014980:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0014987:	83 c4 1c             	add    esp,0x1c
c001498a:	5b                   	pop    ebx
c001498b:	5e                   	pop    esi
c001498c:	5f                   	pop    edi
c001498d:	5d                   	pop    ebp
c001498e:	c3                   	ret    
c001498f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0014993:	83 ec 0c             	sub    esp,0xc
c0014996:	68 b0 c7 02 c0       	push   0xc002c7b0
c001499b:	e8 c4 c0 ff ff       	call   c0010a64 <KePanic(char const*)>
c00149a0:	83 c4 10             	add    esp,0x10
c00149a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00149a7:	eb 97                	jmp    c0014940 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c00149a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00149ad:	e8 a6 c2 ff ff       	call   c0010c58 <Phys::allocatePage()>
c00149b2:	83 ec 0c             	sub    esp,0xc
c00149b5:	89 c5                	mov    ebp,eax
c00149b7:	8b 0d 90 72 03 c0    	mov    ecx,DWORD PTR ds:0xc0037290
c00149bd:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00149c1:	6a 01                	push   0x1
c00149c3:	e8 33 f6 ff ff       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c00149c8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00149cf:	6a 01                	push   0x1
c00149d1:	50                   	push   eax
c00149d2:	55                   	push   ebp
c00149d3:	81 cd 07 04 00 00    	or     ebp,0x407
c00149d9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00149dd:	51                   	push   ecx
c00149de:	e8 e5 fe ff ff       	call   c00148c8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00149e3:	83 c4 1c             	add    esp,0x1c
c00149e6:	68 00 10 00 00       	push   0x1000
c00149eb:	6a 00                	push   0x0
c00149ed:	50                   	push   eax
c00149ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149f2:	e8 f9 ba fe ff       	call   c00004f0 <memset>
c00149f7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00149fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00149fe:	e8 00 f9 ff ff       	call   c0014303 <Virt::freeKernelVirtualPages(unsigned long)>
c0014a03:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0014a06:	83 c4 10             	add    esp,0x10
c0014a09:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0014a0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014a10:	e9 42 ff ff ff       	jmp    c0014957 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0014a15:	90                   	nop

c0014a16 <VAS::VAS(bool)>:
c0014a16:	53                   	push   ebx
c0014a17:	83 ec 28             	sub    esp,0x28
c0014a1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a1e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014a22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014a2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014a38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a3c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014a40:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0014a43:	e8 10 c2 ff ff       	call   c0010c58 <Phys::allocatePage()>
c0014a48:	89 c2                	mov    edx,eax
c0014a4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a4e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014a51:	8b 1d 90 72 03 c0    	mov    ebx,DWORD PTR ds:0xc0037290
c0014a57:	83 ec 0c             	sub    esp,0xc
c0014a5a:	6a 01                	push   0x1
c0014a5c:	e8 9a f5 ff ff       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c0014a61:	83 c4 10             	add    esp,0x10
c0014a64:	89 c2                	mov    edx,eax
c0014a66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a6a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014a6d:	83 ec 0c             	sub    esp,0xc
c0014a70:	6a 03                	push   0x3
c0014a72:	6a 01                	push   0x1
c0014a74:	52                   	push   edx
c0014a75:	50                   	push   eax
c0014a76:	53                   	push   ebx
c0014a77:	e8 4c fe ff ff       	call   c00148c8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014a7c:	83 c4 20             	add    esp,0x20
c0014a7f:	89 c2                	mov    edx,eax
c0014a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a85:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0014a88:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014a90:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0014a98:	7f 1d                	jg     c0014ab7 <VAS::VAS(bool)+0xa1>
c0014a9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a9e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014aa1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014aa5:	c1 e2 02             	shl    edx,0x2
c0014aa8:	01 d0                	add    eax,edx
c0014aaa:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014ab0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014ab5:	eb d9                	jmp    c0014a90 <VAS::VAS(bool)+0x7a>
c0014ab7:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0014abf:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0014ac7:	7f 59                	jg     c0014b22 <VAS::VAS(bool)+0x10c>
c0014ac9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014acd:	2d 00 02 00 00       	sub    eax,0x200
c0014ad2:	c1 e0 0c             	shl    eax,0xc
c0014ad5:	89 c2                	mov    edx,eax
c0014ad7:	a1 28 74 03 c0       	mov    eax,ds:0xc0037428
c0014adc:	89 d1                	mov    ecx,edx
c0014ade:	09 c1                	or     ecx,eax
c0014ae0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ae4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014ae7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014aeb:	c1 e2 02             	shl    edx,0x2
c0014aee:	01 d0                	add    eax,edx
c0014af0:	83 c9 05             	or     ecx,0x5
c0014af3:	89 ca                	mov    edx,ecx
c0014af5:	89 10                	mov    DWORD PTR [eax],edx
c0014af7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014afb:	2d 40 03 00 00       	sub    eax,0x340
c0014b00:	83 f8 7f             	cmp    eax,0x7f
c0014b03:	77 16                	ja     c0014b1b <VAS::VAS(bool)+0x105>
c0014b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014b0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b10:	c1 e2 02             	shl    edx,0x2
c0014b13:	01 d0                	add    eax,edx
c0014b15:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014b1b:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014b20:	eb 9d                	jmp    c0014abf <VAS::VAS(bool)+0xa9>
c0014b22:	8b 15 28 74 03 c0    	mov    edx,DWORD PTR ds:0xc0037428
c0014b28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014b2f:	05 20 0c 00 00       	add    eax,0xc20
c0014b34:	81 ca 03 40 00 00    	or     edx,0x4003
c0014b3a:	89 10                	mov    DWORD PTR [eax],edx
c0014b3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014b43:	a1 28 74 03 c0       	mov    eax,ds:0xc0037428
c0014b48:	09 c2                	or     edx,eax
c0014b4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014b51:	05 fc 0f 00 00       	add    eax,0xffc
c0014b56:	83 ca 03             	or     edx,0x3
c0014b59:	89 10                	mov    DWORD PTR [eax],edx
c0014b5b:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0014b60:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014b66:	83 ec 0c             	sub    esp,0xc
c0014b69:	50                   	push   eax
c0014b6a:	e8 83 5e ff ff       	call   c000a9f2 <Device::getName()>
c0014b6f:	83 c4 10             	add    esp,0x10
c0014b72:	83 ec 08             	sub    esp,0x8
c0014b75:	68 23 ca 02 c0       	push   0xc002ca23
c0014b7a:	50                   	push   eax
c0014b7b:	e8 d0 bb fe ff       	call   c0000750 <strcmp>
c0014b80:	83 c4 10             	add    esp,0x10
c0014b83:	85 c0                	test   eax,eax
c0014b85:	0f 94 c0             	sete   al
c0014b88:	0f b6 c0             	movzx  eax,al
c0014b8b:	85 c0                	test   eax,eax
c0014b8d:	74 68                	je     c0014bf7 <VAS::VAS(bool)+0x1e1>
c0014b8f:	fa                   	cli    
c0014b90:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0014b95:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014b9b:	05 68 09 00 00       	add    eax,0x968
c0014ba0:	83 ec 0c             	sub    esp,0xc
c0014ba3:	50                   	push   eax
c0014ba4:	e8 59 ad ff ff       	call   c000f902 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0014ba9:	83 c4 10             	add    esp,0x10
c0014bac:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014bb1:	89 c3                	mov    ebx,eax
c0014bb3:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0014bb8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014bbe:	05 68 09 00 00       	add    eax,0x968
c0014bc3:	83 ec 0c             	sub    esp,0xc
c0014bc6:	50                   	push   eax
c0014bc7:	e8 36 ad ff ff       	call   c000f902 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0014bcc:	83 c4 10             	add    esp,0x10
c0014bcf:	83 ec 08             	sub    esp,0x8
c0014bd2:	50                   	push   eax
c0014bd3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014bd7:	e8 08 f7 ff ff       	call   c00142e4 <VAS::getPageTableEntry(unsigned long)>
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014be1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014be6:	6a 11                	push   0x11
c0014be8:	53                   	push   ebx
c0014be9:	50                   	push   eax
c0014bea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014bee:	e8 eb fa ff ff       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c0014bf3:	83 c4 10             	add    esp,0x10
c0014bf6:	fb                   	sti    
c0014bf7:	90                   	nop
c0014bf8:	83 c4 28             	add    esp,0x28
c0014bfb:	5b                   	pop    ebx
c0014bfc:	c3                   	ret    
c0014bfd:	90                   	nop

c0014bfe <VAS::evict(unsigned long)>:
c0014bfe:	55                   	push   ebp
c0014bff:	57                   	push   edi
c0014c00:	56                   	push   esi
c0014c01:	53                   	push   ebx
c0014c02:	83 ec 24             	sub    esp,0x24
c0014c05:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014c09:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014c0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c11:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0014c16:	50                   	push   eax
c0014c17:	68 31 ca 02 c0       	push   0xc002ca31
c0014c1c:	e8 5b 23 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014c21:	e8 33 f5 ff ff       	call   c0014159 <Virt::allocateSwapfilePage()>
c0014c26:	83 c4 10             	add    esp,0x10
c0014c29:	89 c7                	mov    edi,eax
c0014c2b:	a1 2c 0c 03 c0       	mov    eax,ds:0xc0030c2c
c0014c30:	85 c0                	test   eax,eax
c0014c32:	7e 40                	jle    c0014c74 <VAS::evict(unsigned long)+0x76>
c0014c34:	89 ee                	mov    esi,ebp
c0014c36:	31 db                	xor    ebx,ebx
c0014c38:	83 ec 0c             	sub    esp,0xc
c0014c3b:	57                   	push   edi
c0014c3c:	e8 02 f5 ff ff       	call   c0014143 <Virt::swapIDToSector(unsigned long)>
c0014c41:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c44:	01 d8                	add    eax,ebx
c0014c46:	6a 01                	push   0x1
c0014c48:	31 d2                	xor    edx,edx
c0014c4a:	83 c3 01             	add    ebx,0x1
c0014c4d:	52                   	push   edx
c0014c4e:	81 c6 00 02 00 00    	add    esi,0x200
c0014c54:	50                   	push   eax
c0014c55:	0f be 05 38 0c 03 c0 	movsx  eax,BYTE PTR ds:0xc0030c38
c0014c5c:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c0014c63:	50                   	push   eax
c0014c64:	e8 b5 6b ff ff       	call   c000b81e <LogicalDisk::write(unsigned long long, int, void*)>
c0014c69:	83 c4 20             	add    esp,0x20
c0014c6c:	39 1d 2c 0c 03 c0    	cmp    DWORD PTR ds:0xc0030c2c,ebx
c0014c72:	7f c4                	jg     c0014c38 <VAS::evict(unsigned long)+0x3a>
c0014c74:	83 ec 08             	sub    esp,0x8
c0014c77:	c1 e7 0c             	shl    edi,0xc
c0014c7a:	55                   	push   ebp
c0014c7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c7f:	50                   	push   eax
c0014c80:	e8 5f f6 ff ff       	call   c00142e4 <VAS::getPageTableEntry(unsigned long)>
c0014c85:	8b 10                	mov    edx,DWORD PTR [eax]
c0014c87:	89 d3                	mov    ebx,edx
c0014c89:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0014c8f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014c95:	09 d7                	or     edi,edx
c0014c97:	89 38                	mov    DWORD PTR [eax],edi
c0014c99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c9c:	8b 15 88 72 03 c0    	mov    edx,DWORD PTR ds:0xc0037288
c0014ca2:	83 c2 01             	add    edx,0x1
c0014ca5:	89 15 88 72 03 c0    	mov    DWORD PTR ds:0xc0037288,edx
c0014cab:	e8 3f bf ff ff       	call   c0010bef <Phys::freePage(unsigned long)>
c0014cb0:	0f 20 d8             	mov    eax,cr3
c0014cb3:	0f 22 d8             	mov    cr3,eax
c0014cb6:	8b 0d 88 72 03 c0    	mov    ecx,DWORD PTR ds:0xc0037288
c0014cbc:	51                   	push   ecx
c0014cbd:	55                   	push   ebp
c0014cbe:	53                   	push   ebx
c0014cbf:	68 d4 c7 02 c0       	push   0xc002c7d4
c0014cc4:	e8 b3 22 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014cc9:	83 c4 18             	add    esp,0x18
c0014ccc:	a1 84 72 03 c0       	mov    eax,ds:0xc0037284
c0014cd1:	50                   	push   eax
c0014cd2:	8d 50 01             	lea    edx,[eax+0x1]
c0014cd5:	68 46 ca 02 c0       	push   0xc002ca46
c0014cda:	89 15 84 72 03 c0    	mov    DWORD PTR ds:0xc0037284,edx
c0014ce0:	e8 97 22 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014ce5:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0014cea:	c7 44 24 40 58 ca 02 c0 	mov    DWORD PTR [esp+0x40],0xc002ca58
c0014cf2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014cf6:	83 c4 2c             	add    esp,0x2c
c0014cf9:	5b                   	pop    ebx
c0014cfa:	5e                   	pop    esi
c0014cfb:	5f                   	pop    edi
c0014cfc:	5d                   	pop    ebp
c0014cfd:	e9 7a 22 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c0014d02 <VAS::canLockPage(unsigned long)>:
c0014d02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014d06:	50                   	push   eax
c0014d07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d0b:	52                   	push   edx
c0014d0c:	e8 d3 f5 ff ff       	call   c00142e4 <VAS::getPageTableEntry(unsigned long)>
c0014d11:	59                   	pop    ecx
c0014d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d14:	5a                   	pop    edx
c0014d15:	c1 e8 0b             	shr    eax,0xb
c0014d18:	83 e0 01             	and    eax,0x1
c0014d1b:	c3                   	ret    

c0014d1c <VAS::unlockPage(unsigned long)>:
c0014d1c:	83 ec 0c             	sub    esp,0xc
c0014d1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d23:	50                   	push   eax
c0014d24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014d28:	52                   	push   edx
c0014d29:	e8 b6 f5 ff ff       	call   c00142e4 <VAS::getPageTableEntry(unsigned long)>
c0014d2e:	59                   	pop    ecx
c0014d2f:	5a                   	pop    edx
c0014d30:	8b 10                	mov    edx,DWORD PTR [eax]
c0014d32:	f6 c6 08             	test   dh,0x8
c0014d35:	75 09                	jne    c0014d40 <VAS::unlockPage(unsigned long)+0x24>
c0014d37:	80 ce 08             	or     dh,0x8
c0014d3a:	89 10                	mov    DWORD PTR [eax],edx
c0014d3c:	83 c4 0c             	add    esp,0xc
c0014d3f:	c3                   	ret    
c0014d40:	c7 44 24 10 08 c8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002c808
c0014d48:	83 c4 0c             	add    esp,0xc
c0014d4b:	e9 14 bd ff ff       	jmp    c0010a64 <KePanic(char const*)>

c0014d50 <VAS::canLockPages(unsigned long, int)>:
c0014d50:	55                   	push   ebp
c0014d51:	57                   	push   edi
c0014d52:	56                   	push   esi
c0014d53:	53                   	push   ebx
c0014d54:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014d58:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014d5c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014d60:	85 ff                	test   edi,edi
c0014d62:	7e 23                	jle    c0014d87 <VAS::canLockPages(unsigned long, int)+0x37>
c0014d64:	31 f6                	xor    esi,esi
c0014d66:	eb 0d                	jmp    c0014d75 <VAS::canLockPages(unsigned long, int)+0x25>
c0014d68:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014d6e:	83 c6 01             	add    esi,0x1
c0014d71:	39 f7                	cmp    edi,esi
c0014d73:	74 0d                	je     c0014d82 <VAS::canLockPages(unsigned long, int)+0x32>
c0014d75:	53                   	push   ebx
c0014d76:	55                   	push   ebp
c0014d77:	e8 86 ff ff ff       	call   c0014d02 <VAS::canLockPage(unsigned long)>
c0014d7c:	5a                   	pop    edx
c0014d7d:	84 c0                	test   al,al
c0014d7f:	59                   	pop    ecx
c0014d80:	75 e6                	jne    c0014d68 <VAS::canLockPages(unsigned long, int)+0x18>
c0014d82:	5b                   	pop    ebx
c0014d83:	5e                   	pop    esi
c0014d84:	5f                   	pop    edi
c0014d85:	5d                   	pop    ebp
c0014d86:	c3                   	ret    
c0014d87:	b0 01                	mov    al,0x1
c0014d89:	eb f7                	jmp    c0014d82 <VAS::canLockPages(unsigned long, int)+0x32>
c0014d8b:	90                   	nop

c0014d8c <VAS::unlockPages(unsigned long, int)>:
c0014d8c:	55                   	push   ebp
c0014d8d:	57                   	push   edi
c0014d8e:	56                   	push   esi
c0014d8f:	53                   	push   ebx
c0014d90:	83 ec 0c             	sub    esp,0xc
c0014d93:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014d97:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014d9b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014d9f:	85 ff                	test   edi,edi
c0014da1:	7e 1c                	jle    c0014dbf <VAS::unlockPages(unsigned long, int)+0x33>
c0014da3:	31 f6                	xor    esi,esi
c0014da5:	83 ec 08             	sub    esp,0x8
c0014da8:	83 c6 01             	add    esi,0x1
c0014dab:	53                   	push   ebx
c0014dac:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014db2:	55                   	push   ebp
c0014db3:	e8 64 ff ff ff       	call   c0014d1c <VAS::unlockPage(unsigned long)>
c0014db8:	83 c4 10             	add    esp,0x10
c0014dbb:	39 f7                	cmp    edi,esi
c0014dbd:	75 e6                	jne    c0014da5 <VAS::unlockPages(unsigned long, int)+0x19>
c0014dbf:	83 c4 0c             	add    esp,0xc
c0014dc2:	5b                   	pop    ebx
c0014dc3:	5e                   	pop    esi
c0014dc4:	5f                   	pop    edi
c0014dc5:	5d                   	pop    ebp
c0014dc6:	c3                   	ret    
c0014dc7:	90                   	nop

c0014dc8 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0014dc8:	55                   	push   ebp
c0014dc9:	57                   	push   edi
c0014dca:	56                   	push   esi
c0014dcb:	53                   	push   ebx
c0014dcc:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0014dd2:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0014dd9:	89 c5                	mov    ebp,eax
c0014ddb:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c0014de1:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0014de6:	77 11                	ja     c0014df9 <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0014de8:	85 ed                	test   ebp,ebp
c0014dea:	75 1d                	jne    c0014e09 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0014dec:	31 c0                	xor    eax,eax
c0014dee:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014df4:	5b                   	pop    ebx
c0014df5:	5e                   	pop    esi
c0014df6:	5f                   	pop    edi
c0014df7:	5d                   	pop    ebp
c0014df8:	c3                   	ret    
c0014df9:	83 ec 0c             	sub    esp,0xc
c0014dfc:	68 6d ca 02 c0       	push   0xc002ca6d
c0014e01:	e8 5e bc ff ff       	call   c0010a64 <KePanic(char const*)>
c0014e06:	83 c4 10             	add    esp,0x10
c0014e09:	83 ec 08             	sub    esp,0x8
c0014e0c:	55                   	push   ebp
c0014e0d:	8b 9c 24 2c 10 00 00 	mov    ebx,DWORD PTR [esp+0x102c]
c0014e14:	53                   	push   ebx
c0014e15:	e8 ca f4 ff ff       	call   c00142e4 <VAS::getPageTableEntry(unsigned long)>
c0014e1a:	83 c4 10             	add    esp,0x10
c0014e1d:	89 c3                	mov    ebx,eax
c0014e1f:	85 c0                	test   eax,eax
c0014e21:	74 c9                	je     c0014dec <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c0014e23:	8b 38                	mov    edi,DWORD PTR [eax]
c0014e25:	f7 c7 00 02 00 00    	test   edi,0x200
c0014e2b:	0f 85 b3 00 00 00    	jne    c0014ee4 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c0014e31:	89 f8                	mov    eax,edi
c0014e33:	25 01 04 00 00       	and    eax,0x401
c0014e38:	3d 00 04 00 00       	cmp    eax,0x400
c0014e3d:	75 ad                	jne    c0014dec <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c0014e3f:	e8 14 be ff ff       	call   c0010c58 <Phys::allocatePage()>
c0014e44:	c1 ef 0c             	shr    edi,0xc
c0014e47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014e49:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0014e4f:	09 c2                	or     edx,eax
c0014e51:	81 ca 01 08 00 00    	or     edx,0x801
c0014e57:	89 13                	mov    DWORD PTR [ebx],edx
c0014e59:	8b 15 2c 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c2c
c0014e5f:	85 d2                	test   edx,edx
c0014e61:	7e 4d                	jle    c0014eb0 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0014e63:	89 ee                	mov    esi,ebp
c0014e65:	31 db                	xor    ebx,ebx
c0014e67:	83 ec 08             	sub    esp,0x8
c0014e6a:	56                   	push   esi
c0014e6b:	68 94 ca 02 c0       	push   0xc002ca94
c0014e70:	e8 07 21 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014e75:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e78:	e8 c6 f2 ff ff       	call   c0014143 <Virt::swapIDToSector(unsigned long)>
c0014e7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e80:	01 d8                	add    eax,ebx
c0014e82:	6a 01                	push   0x1
c0014e84:	31 d2                	xor    edx,edx
c0014e86:	83 c3 01             	add    ebx,0x1
c0014e89:	52                   	push   edx
c0014e8a:	81 c6 00 02 00 00    	add    esi,0x200
c0014e90:	50                   	push   eax
c0014e91:	0f be 05 38 0c 03 c0 	movsx  eax,BYTE PTR ds:0xc0030c38
c0014e98:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c0014e9f:	50                   	push   eax
c0014ea0:	e8 0d 69 ff ff       	call   c000b7b2 <LogicalDisk::read(unsigned long long, int, void*)>
c0014ea5:	83 c4 20             	add    esp,0x20
c0014ea8:	39 1d 2c 0c 03 c0    	cmp    DWORD PTR ds:0xc0030c2c,ebx
c0014eae:	7f b7                	jg     c0014e67 <VAS::tryLoadBackOffDisk(unsigned long)+0x9f>
c0014eb0:	83 ec 04             	sub    esp,0x4
c0014eb3:	a1 88 72 03 c0       	mov    eax,ds:0xc0037288
c0014eb8:	83 e8 01             	sub    eax,0x1
c0014ebb:	50                   	push   eax
c0014ebc:	a3 88 72 03 c0       	mov    ds:0xc0037288,eax
c0014ec1:	55                   	push   ebp
c0014ec2:	68 7f ca 02 c0       	push   0xc002ca7f
c0014ec7:	e8 b0 20 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014ecc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014ecf:	e8 4c f2 ff ff       	call   c0014120 <Virt::freeSwapfilePage(unsigned long)>
c0014ed4:	0f 20 d8             	mov    eax,cr3
c0014ed7:	0f 22 d8             	mov    cr3,eax
c0014eda:	b0 01                	mov    al,0x1
c0014edc:	83 c4 10             	add    esp,0x10
c0014edf:	e9 0a ff ff ff       	jmp    c0014dee <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c0014ee4:	83 ec 0c             	sub    esp,0xc
c0014ee7:	68 38 c8 02 c0       	push   0xc002c838
c0014eec:	e8 8b 20 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014ef1:	8b 33                	mov    esi,DWORD PTR [ebx]
c0014ef3:	e8 60 bd ff ff       	call   c0010c58 <Phys::allocatePage()>
c0014ef8:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0014efe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f00:	83 c9 01             	or     ecx,0x1
c0014f03:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014f05:	0f 20 da             	mov    edx,cr3
c0014f08:	0f 22 da             	mov    cr3,edx
c0014f0b:	ba 00 10 00 00       	mov    edx,0x1000
c0014f10:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014f14:	89 d1                	mov    ecx,edx
c0014f16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014f18:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f1a:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0014f20:	09 c8                	or     eax,ecx
c0014f22:	83 c8 02             	or     eax,0x2
c0014f25:	89 03                	mov    DWORD PTR [ebx],eax
c0014f27:	0f 20 d8             	mov    eax,cr3
c0014f2a:	0f 22 d8             	mov    cr3,eax
c0014f2d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014f31:	89 ef                	mov    edi,ebp
c0014f33:	89 d1                	mov    ecx,edx
c0014f35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014f37:	b0 01                	mov    al,0x1
c0014f39:	83 c4 10             	add    esp,0x10
c0014f3c:	e9 ad fe ff ff       	jmp    c0014dee <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c0014f41:	90                   	nop

c0014f42 <VAS::lockPage(unsigned long)>:
c0014f42:	56                   	push   esi
c0014f43:	53                   	push   ebx
c0014f44:	83 ec 04             	sub    esp,0x4
c0014f47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f4f:	50                   	push   eax
c0014f50:	56                   	push   esi
c0014f51:	e8 8e f3 ff ff       	call   c00142e4 <VAS::getPageTableEntry(unsigned long)>
c0014f56:	5a                   	pop    edx
c0014f57:	89 c3                	mov    ebx,eax
c0014f59:	59                   	pop    ecx
c0014f5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f5c:	a8 01                	test   al,0x1
c0014f5e:	74 10                	je     c0014f70 <VAS::lockPage(unsigned long)+0x2e>
c0014f60:	f6 c4 08             	test   ah,0x8
c0014f63:	74 28                	je     c0014f8d <VAS::lockPage(unsigned long)+0x4b>
c0014f65:	80 e4 f7             	and    ah,0xf7
c0014f68:	89 03                	mov    DWORD PTR [ebx],eax
c0014f6a:	83 c4 04             	add    esp,0x4
c0014f6d:	5b                   	pop    ebx
c0014f6e:	5e                   	pop    esi
c0014f6f:	c3                   	ret    
c0014f70:	83 ec 08             	sub    esp,0x8
c0014f73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014f78:	50                   	push   eax
c0014f79:	56                   	push   esi
c0014f7a:	e8 49 fe ff ff       	call   c0014dc8 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014f7f:	83 c4 10             	add    esp,0x10
c0014f82:	84 c0                	test   al,al
c0014f84:	74 19                	je     c0014f9f <VAS::lockPage(unsigned long)+0x5d>
c0014f86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f88:	f6 c4 08             	test   ah,0x8
c0014f8b:	75 d8                	jne    c0014f65 <VAS::lockPage(unsigned long)+0x23>
c0014f8d:	c7 44 24 10 08 c8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002c808
c0014f95:	83 c4 04             	add    esp,0x4
c0014f98:	5b                   	pop    ebx
c0014f99:	5e                   	pop    esi
c0014f9a:	e9 c5 ba ff ff       	jmp    c0010a64 <KePanic(char const*)>
c0014f9f:	83 ec 0c             	sub    esp,0xc
c0014fa2:	68 58 c8 02 c0       	push   0xc002c858
c0014fa7:	e8 b8 ba ff ff       	call   c0010a64 <KePanic(char const*)>
c0014fac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fae:	83 c4 10             	add    esp,0x10
c0014fb1:	eb ad                	jmp    c0014f60 <VAS::lockPage(unsigned long)+0x1e>
c0014fb3:	90                   	nop

c0014fb4 <VAS::lockPages(unsigned long, int)>:
c0014fb4:	55                   	push   ebp
c0014fb5:	57                   	push   edi
c0014fb6:	56                   	push   esi
c0014fb7:	53                   	push   ebx
c0014fb8:	83 ec 0c             	sub    esp,0xc
c0014fbb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014fbf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014fc3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014fc7:	85 ff                	test   edi,edi
c0014fc9:	7e 1c                	jle    c0014fe7 <VAS::lockPages(unsigned long, int)+0x33>
c0014fcb:	31 f6                	xor    esi,esi
c0014fcd:	83 ec 08             	sub    esp,0x8
c0014fd0:	83 c6 01             	add    esi,0x1
c0014fd3:	53                   	push   ebx
c0014fd4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014fda:	55                   	push   ebp
c0014fdb:	e8 62 ff ff ff       	call   c0014f42 <VAS::lockPage(unsigned long)>
c0014fe0:	83 c4 10             	add    esp,0x10
c0014fe3:	39 f7                	cmp    edi,esi
c0014fe5:	75 e6                	jne    c0014fcd <VAS::lockPages(unsigned long, int)+0x19>
c0014fe7:	83 c4 0c             	add    esp,0xc
c0014fea:	5b                   	pop    ebx
c0014feb:	5e                   	pop    esi
c0014fec:	5f                   	pop    edi
c0014fed:	5d                   	pop    ebp
c0014fee:	c3                   	ret    
c0014fef:	90                   	nop

c0014ff0 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014ff0:	55                   	push   ebp
c0014ff1:	57                   	push   edi
c0014ff2:	56                   	push   esi
c0014ff3:	53                   	push   ebx
c0014ff4:	83 ec 28             	sub    esp,0x28
c0014ff7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0014ffb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014fff:	50                   	push   eax
c0015000:	e8 f6 ef ff ff       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c0015005:	83 c4 0c             	add    esp,0xc
c0015008:	89 c5                	mov    ebp,eax
c001500a:	6a 07                	push   0x7
c001500c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015010:	52                   	push   edx
c0015011:	56                   	push   esi
c0015012:	e8 cb f7 ff ff       	call   c00147e2 <VAS::allocatePages(int, int)>
c0015017:	83 c4 10             	add    esp,0x10
c001501a:	89 c7                	mov    edi,eax
c001501c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0015020:	85 c9                	test   ecx,ecx
c0015022:	74 2f                	je     c0015053 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0015024:	31 db                	xor    ebx,ebx
c0015026:	e8 2d bc ff ff       	call   c0010c58 <Phys::allocatePage()>
c001502b:	83 c3 01             	add    ebx,0x1
c001502e:	6a 03                	push   0x3
c0015030:	55                   	push   ebp
c0015031:	50                   	push   eax
c0015032:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015036:	56                   	push   esi
c0015037:	e8 a2 f6 ff ff       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c001503c:	6a 07                	push   0x7
c001503e:	57                   	push   edi
c001503f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015043:	50                   	push   eax
c0015044:	56                   	push   esi
c0015045:	e8 94 f6 ff ff       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c001504a:	83 c4 20             	add    esp,0x20
c001504d:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0015051:	75 d3                	jne    c0015026 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0015053:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015057:	89 28                	mov    DWORD PTR [eax],ebp
c0015059:	83 c4 1c             	add    esp,0x1c
c001505c:	89 f8                	mov    eax,edi
c001505e:	5b                   	pop    ebx
c001505f:	5e                   	pop    esi
c0015060:	5f                   	pop    edi
c0015061:	5d                   	pop    ebp
c0015062:	c3                   	ret    
c0015063:	90                   	nop

c0015064 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0015064:	53                   	push   ebx
c0015065:	83 ec 14             	sub    esp,0x14
c0015068:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001506c:	68 88 c8 02 c0       	push   0xc002c888
c0015071:	e8 06 1f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015076:	c7 04 24 e8 c8 02 c0 	mov    DWORD PTR [esp],0xc002c8e8
c001507d:	e8 fa 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015082:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0015086:	83 c4 18             	add    esp,0x18
c0015089:	5b                   	pop    ebx
c001508a:	e9 74 f2 ff ff       	jmp    c0014303 <Virt::freeKernelVirtualPages(unsigned long)>
c001508f:	90                   	nop

c0015090 <VAS::scanForEviction()>:
c0015090:	57                   	push   edi
c0015091:	56                   	push   esi
c0015092:	31 f6                	xor    esi,esi
c0015094:	53                   	push   ebx
c0015095:	83 ec 18             	sub    esp,0x18
c0015098:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001509c:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00150a1:	50                   	push   eax
c00150a2:	68 64 c9 02 c0       	push   0xc002c964
c00150a7:	e8 d0 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00150ac:	c7 04 24 ad ca 02 c0 	mov    DWORD PTR [esp],0xc002caad
c00150b3:	e8 c4 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00150b8:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00150bb:	83 c4 10             	add    esp,0x10
c00150be:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00150c4:	75 0e                	jne    c00150d4 <VAS::scanForEviction()+0x44>
c00150c6:	89 da                	mov    edx,ebx
c00150c8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00150cb:	c1 ea 16             	shr    edx,0x16
c00150ce:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00150d2:	74 5b                	je     c001512f <VAS::scanForEviction()+0x9f>
c00150d4:	83 ec 08             	sub    esp,0x8
c00150d7:	53                   	push   ebx
c00150d8:	57                   	push   edi
c00150d9:	e8 06 f2 ff ff       	call   c00142e4 <VAS::getPageTableEntry(unsigned long)>
c00150de:	83 c4 10             	add    esp,0x10
c00150e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00150e3:	89 d1                	mov    ecx,edx
c00150e5:	c1 e9 0c             	shr    ecx,0xc
c00150e8:	74 10                	je     c00150fa <VAS::scanForEviction()+0x6a>
c00150ea:	89 d1                	mov    ecx,edx
c00150ec:	81 e1 00 0c 00 00    	and    ecx,0xc00
c00150f2:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c00150f8:	74 40                	je     c001513a <VAS::scanForEviction()+0xaa>
c00150fa:	81 c3 00 10 00 00    	add    ebx,0x1000
c0015100:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0015106:	76 2d                	jbe    c0015135 <VAS::scanForEviction()+0xa5>
c0015108:	83 c6 01             	add    esi,0x1
c001510b:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0015112:	83 fe 03             	cmp    esi,0x3
c0015115:	74 37                	je     c001514e <VAS::scanForEviction()+0xbe>
c0015117:	31 db                	xor    ebx,ebx
c0015119:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001511f:	75 b3                	jne    c00150d4 <VAS::scanForEviction()+0x44>
c0015121:	89 da                	mov    edx,ebx
c0015123:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0015126:	c1 ea 16             	shr    edx,0x16
c0015129:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001512d:	75 a5                	jne    c00150d4 <VAS::scanForEviction()+0x44>
c001512f:	81 c3 00 00 40 00    	add    ebx,0x400000
c0015135:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0015138:	eb 84                	jmp    c00150be <VAS::scanForEviction()+0x2e>
c001513a:	f6 c2 01             	test   dl,0x1
c001513d:	74 bb                	je     c00150fa <VAS::scanForEviction()+0x6a>
c001513f:	f6 c2 20             	test   dl,0x20
c0015142:	74 13                	je     c0015157 <VAS::scanForEviction()+0xc7>
c0015144:	83 e2 df             	and    edx,0xffffffdf
c0015147:	89 10                	mov    DWORD PTR [eax],edx
c0015149:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001514c:	eb ac                	jmp    c00150fa <VAS::scanForEviction()+0x6a>
c001514e:	83 c4 10             	add    esp,0x10
c0015151:	31 c0                	xor    eax,eax
c0015153:	5b                   	pop    ebx
c0015154:	5e                   	pop    esi
c0015155:	5f                   	pop    edi
c0015156:	c3                   	ret    
c0015157:	83 ec 08             	sub    esp,0x8
c001515a:	89 d0                	mov    eax,edx
c001515c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015161:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015165:	53                   	push   ebx
c0015166:	68 c9 ca 02 c0       	push   0xc002cac9
c001516b:	e8 0c 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015170:	58                   	pop    eax
c0015171:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0015174:	5a                   	pop    edx
c0015175:	51                   	push   ecx
c0015176:	57                   	push   edi
c0015177:	e8 82 fa ff ff       	call   c0014bfe <VAS::evict(unsigned long)>
c001517c:	5b                   	pop    ebx
c001517d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0015180:	5e                   	pop    esi
c0015181:	50                   	push   eax
c0015182:	68 dd ca 02 c0       	push   0xc002cadd
c0015187:	e8 f0 1d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001518c:	58                   	pop    eax
c001518d:	5a                   	pop    edx
c001518e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015192:	50                   	push   eax
c0015193:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015197:	68 f0 ca 02 c0       	push   0xc002caf0
c001519c:	e8 db 1d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00151a1:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00151a4:	81 c1 00 10 00 00    	add    ecx,0x1000
c00151aa:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00151ad:	8b 3d 30 73 03 c0    	mov    edi,DWORD PTR ds:0xc0037330
c00151b3:	5b                   	pop    ebx
c00151b4:	5e                   	pop    esi
c00151b5:	57                   	push   edi
c00151b6:	68 84 c9 02 c0       	push   0xc002c984
c00151bb:	e8 bc 1d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00151c0:	83 c4 10             	add    esp,0x10
c00151c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151c7:	83 c4 10             	add    esp,0x10
c00151ca:	5b                   	pop    ebx
c00151cb:	5e                   	pop    esi
c00151cc:	5f                   	pop    edi
c00151cd:	c3                   	ret    

c00151ce <mapVASFirstTime>:
c00151ce:	55                   	push   ebp
c00151cf:	57                   	push   edi
c00151d0:	56                   	push   esi
c00151d1:	53                   	push   ebx
c00151d2:	83 ec 0c             	sub    esp,0xc
c00151d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00151dd:	83 fa 01             	cmp    edx,0x1
c00151e0:	0f 84 cb 00 00 00    	je     c00152b1 <mapVASFirstTime+0xe3>
c00151e6:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00151e9:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00151ec:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00151f1:	c1 e5 15             	shl    ebp,0x15
c00151f4:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00151f9:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c00151ff:	29 eb                	sub    ebx,ebp
c0015201:	29 ef                	sub    edi,ebp
c0015203:	e8 50 ba ff ff       	call   c0010c58 <Phys::allocatePage()>
c0015208:	83 ec 0c             	sub    esp,0xc
c001520b:	68 03 04 00 00       	push   0x403
c0015210:	6a 01                	push   0x1
c0015212:	53                   	push   ebx
c0015213:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0015219:	50                   	push   eax
c001521a:	56                   	push   esi
c001521b:	e8 a8 f6 ff ff       	call   c00148c8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015220:	83 c4 20             	add    esp,0x20
c0015223:	39 fb                	cmp    ebx,edi
c0015225:	75 dc                	jne    c0015203 <mapVASFirstTime+0x35>
c0015227:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001522c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0015231:	29 eb                	sub    ebx,ebp
c0015233:	29 ef                	sub    edi,ebp
c0015235:	e8 1e ba ff ff       	call   c0010c58 <Phys::allocatePage()>
c001523a:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001523e:	83 fa 01             	cmp    edx,0x1
c0015241:	19 d2                	sbb    edx,edx
c0015243:	83 ec 0c             	sub    esp,0xc
c0015246:	83 e2 04             	and    edx,0x4
c0015249:	81 c2 03 04 00 00    	add    edx,0x403
c001524f:	52                   	push   edx
c0015250:	6a 01                	push   0x1
c0015252:	53                   	push   ebx
c0015253:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0015259:	50                   	push   eax
c001525a:	56                   	push   esi
c001525b:	e8 68 f6 ff ff       	call   c00148c8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015260:	83 c4 20             	add    esp,0x20
c0015263:	39 df                	cmp    edi,ebx
c0015265:	75 ce                	jne    c0015235 <mapVASFirstTime+0x67>
c0015267:	83 ec 0c             	sub    esp,0xc
c001526a:	bb 7c 30 03 c0       	mov    ebx,0xc003307c
c001526f:	6a 04                	push   0x4
c0015271:	81 eb 00 20 03 c0    	sub    ebx,0xc0032000
c0015277:	6a ff                	push   0xffffffff
c0015279:	c1 eb 0c             	shr    ebx,0xc
c001527c:	53                   	push   ebx
c001527d:	68 00 20 03 c0       	push   0xc0032000
c0015282:	56                   	push   esi
c0015283:	e8 f6 f1 ff ff       	call   c001447e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0015288:	83 c4 14             	add    esp,0x14
c001528b:	a1 90 72 03 c0       	mov    eax,ds:0xc0037290
c0015290:	6a 04                	push   0x4
c0015292:	6a ff                	push   0xffffffff
c0015294:	53                   	push   ebx
c0015295:	68 00 20 03 c0       	push   0xc0032000
c001529a:	50                   	push   eax
c001529b:	e8 de f1 ff ff       	call   c001447e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00152a0:	0f 20 d8             	mov    eax,cr3
c00152a3:	0f 22 d8             	mov    cr3,eax
c00152a6:	83 c4 20             	add    esp,0x20
c00152a9:	83 c4 0c             	add    esp,0xc
c00152ac:	5b                   	pop    ebx
c00152ad:	5e                   	pop    esi
c00152ae:	5f                   	pop    edi
c00152af:	5d                   	pop    ebp
c00152b0:	c3                   	ret    
c00152b1:	83 ec 0c             	sub    esp,0xc
c00152b4:	68 fd ca 02 c0       	push   0xc002cafd
c00152b9:	e8 be 1c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00152be:	83 c4 10             	add    esp,0x10
c00152c1:	83 c4 0c             	add    esp,0xc
c00152c4:	5b                   	pop    ebx
c00152c5:	5e                   	pop    esi
c00152c6:	5f                   	pop    edi
c00152c7:	5d                   	pop    ebp
c00152c8:	c3                   	ret    

c00152c9 <SysAlarm(regs*)>:
c00152c9:	53                   	push   ebx
c00152ca:	83 ec 10             	sub    esp,0x10
c00152cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00152d1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00152d4:	68 16 cb 02 c0       	push   0xc002cb16
c00152d9:	e8 9e 1c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00152de:	83 c4 0c             	add    esp,0xc
c00152e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00152e4:	31 d2                	xor    edx,edx
c00152e6:	52                   	push   edx
c00152e7:	50                   	push   eax
c00152e8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00152ee:	e8 ad 09 00 00       	call   c0015ca0 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c00152f3:	83 c4 18             	add    esp,0x18
c00152f6:	5b                   	pop    ebx
c00152f7:	c3                   	ret    

c00152f8 <SysEject(regs*)>:
c00152f8:	83 ec 0c             	sub    esp,0xc
c00152fb:	83 ca ff             	or     edx,0xffffffff
c00152fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015302:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015305:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001530a:	83 e9 41             	sub    ecx,0x41
c001530d:	83 f9 19             	cmp    ecx,0x19
c0015310:	77 18                	ja     c001532a <SysEject(regs*)+0x32>
c0015312:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c0015319:	85 c9                	test   ecx,ecx
c001531b:	74 0d                	je     c001532a <SysEject(regs*)+0x32>
c001531d:	83 ec 0c             	sub    esp,0xc
c0015320:	51                   	push   ecx
c0015321:	e8 22 64 ff ff       	call   c000b748 <LogicalDisk::eject()>
c0015326:	83 c4 10             	add    esp,0x10
c0015329:	99                   	cdq    
c001532a:	83 c4 0c             	add    esp,0xc
c001532d:	c3                   	ret    

c001532e <SysExit(regs*)>:
c001532e:	83 ec 18             	sub    esp,0x18
c0015331:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015335:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015338:	e8 bf 2a 00 00       	call   c0017dfc <KeTerminateCurrentThread(int)>
c001533d:	83 c8 ff             	or     eax,0xffffffff
c0015340:	83 c4 1c             	add    esp,0x1c
c0015343:	89 c2                	mov    edx,eax
c0015345:	c3                   	ret    

c0015346 <SysGetCwd(regs*)>:
c0015346:	83 ec 10             	sub    esp,0x10
c0015349:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001534d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015350:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015353:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015358:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001535b:	e8 fe 37 ff ff       	call   c0008b5e <Fs::getcwd(Process*, char*, int)>
c0015360:	83 c4 1c             	add    esp,0x1c
c0015363:	99                   	cdq    
c0015364:	c3                   	ret    

c0015365 <SysGetPID(regs*)>:
c0015365:	83 ec 14             	sub    esp,0x14
c0015368:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001536d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015370:	ff 30                	push   DWORD PTR [eax]
c0015372:	68 2b cb 02 c0       	push   0xc002cb2b
c0015377:	e8 00 1c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001537c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015381:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015384:	8b 00                	mov    eax,DWORD PTR [eax]
c0015386:	83 c4 1c             	add    esp,0x1c
c0015389:	99                   	cdq    
c001538a:	c3                   	ret    

c001538b <SysGetRAMData(regs*)>:
c001538b:	8b 0d 7c 71 03 c0    	mov    ecx,DWORD PTR ds:0xc003717c
c0015391:	a1 88 72 03 c0       	mov    eax,ds:0xc0037288
c0015396:	03 05 78 71 03 c0    	add    eax,DWORD PTR ds:0xc0037178
c001539c:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00153a2:	99                   	cdq    
c00153a3:	f7 f9                	idiv   ecx
c00153a5:	c1 e0 18             	shl    eax,0x18
c00153a8:	09 c8                	or     eax,ecx
c00153aa:	99                   	cdq    
c00153ab:	c3                   	ret    

c00153ac <SysGetVGAPtr(regs*)>:
c00153ac:	55                   	push   ebp
c00153ad:	57                   	push   edi
c00153ae:	56                   	push   esi
c00153af:	53                   	push   ebx
c00153b0:	83 ec 1c             	sub    esp,0x1c
c00153b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00153b7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00153ba:	83 f8 ff             	cmp    eax,0xffffffff
c00153bd:	74 23                	je     c00153e2 <SysGetVGAPtr(regs*)+0x36>
c00153bf:	83 ec 0c             	sub    esp,0xc
c00153c2:	50                   	push   eax
c00153c3:	e8 e0 24 00 00       	call   c00178a8 <KeProcessFromPID(int)>
c00153c8:	31 d2                	xor    edx,edx
c00153ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00153ce:	83 c4 10             	add    esp,0x10
c00153d1:	b8 01 00 00 00       	mov    eax,0x1
c00153d6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00153db:	75 11                	jne    c00153ee <SysGetVGAPtr(regs*)+0x42>
c00153dd:	e9 80 00 00 00       	jmp    c0015462 <SysGetVGAPtr(regs*)+0xb6>
c00153e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153f2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00153f6:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c00153fc:	74 0c                	je     c001540a <SysGetVGAPtr(regs*)+0x5e>
c00153fe:	83 ec 0c             	sub    esp,0xc
c0015401:	55                   	push   ebp
c0015402:	e8 7c dc ff ff       	call   c0013083 <setActiveTerminal(VgaText*)>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001540d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015410:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015415:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015417:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001541a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001541d:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0015423:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0015426:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015429:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c001542f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015433:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0015436:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c001543d:	c1 e8 07             	shr    eax,0x7
c0015440:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0015446:	50                   	push   eax
c0015447:	50                   	push   eax
c0015448:	68 3a cb 02 c0       	push   0xc002cb3a
c001544d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015450:	05 ac 0f 00 00       	add    eax,0xfac
c0015455:	50                   	push   eax
c0015456:	e8 e5 b1 fe ff       	call   c0000640 <strcpy>
c001545b:	83 c4 10             	add    esp,0x10
c001545e:	31 c0                	xor    eax,eax
c0015460:	31 d2                	xor    edx,edx
c0015462:	83 c4 1c             	add    esp,0x1c
c0015465:	5b                   	pop    ebx
c0015466:	5e                   	pop    esi
c0015467:	5f                   	pop    edi
c0015468:	5d                   	pop    ebp
c0015469:	c3                   	ret    
c001546a:	66 90                	xchg   ax,ax

c001546c <SysKill(regs*)>:
c001546c:	53                   	push   ebx
c001546d:	83 ec 08             	sub    esp,0x8
c0015470:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015474:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0015478:	75 16                	jne    c0015490 <SysKill(regs*)+0x24>
c001547a:	83 ec 0c             	sub    esp,0xc
c001547d:	68 44 cb 02 c0       	push   0xc002cb44
c0015482:	e8 dd b5 ff ff       	call   c0010a64 <KePanic(char const*)>
c0015487:	83 c4 10             	add    esp,0x10
c001548a:	e9 89 00 00 00       	jmp    c0015518 <SysKill(regs*)+0xac>
c001548f:	90                   	nop
c0015490:	83 ec 0c             	sub    esp,0xc
c0015493:	68 4c 73 03 c0       	push   0xc003734c
c0015498:	e8 c7 42 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001549d:	8d 76 00             	lea    esi,[esi+0x0]
c00154a0:	83 c4 10             	add    esp,0x10
c00154a3:	85 c0                	test   eax,eax
c00154a5:	74 19                	je     c00154c0 <SysKill(regs*)+0x54>
c00154a7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00154aa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00154ad:	39 0a                	cmp    DWORD PTR [edx],ecx
c00154af:	74 33                	je     c00154e4 <SysKill(regs*)+0x78>
c00154b1:	52                   	push   edx
c00154b2:	52                   	push   edx
c00154b3:	50                   	push   eax
c00154b4:	68 4c 73 03 c0       	push   0xc003734c
c00154b9:	e8 b2 47 01 00       	call   c0029c70 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00154be:	eb e0                	jmp    c00154a0 <SysKill(regs*)+0x34>
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	68 40 73 03 c0       	push   0xc0037340
c00154c8:	e8 97 42 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154cd:	8d 76 00             	lea    esi,[esi+0x0]
c00154d0:	83 c4 10             	add    esp,0x10
c00154d3:	85 c0                	test   eax,eax
c00154d5:	74 41                	je     c0015518 <SysKill(regs*)+0xac>
c00154d7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00154da:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00154dd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00154df:	75 27                	jne    c0015508 <SysKill(regs*)+0x9c>
c00154e1:	8d 76 00             	lea    esi,[esi+0x0]
c00154e4:	51                   	push   ecx
c00154e5:	51                   	push   ecx
c00154e6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00154e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154f1:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00154f7:	e8 83 c7 ff ff       	call   c0011c7f <KeRaiseSignal(SigHandlerBlock*, int)>
c00154fc:	83 c4 10             	add    esp,0x10
c00154ff:	31 c0                	xor    eax,eax
c0015501:	31 d2                	xor    edx,edx
c0015503:	eb 1b                	jmp    c0015520 <SysKill(regs*)+0xb4>
c0015505:	8d 76 00             	lea    esi,[esi+0x0]
c0015508:	52                   	push   edx
c0015509:	52                   	push   edx
c001550a:	50                   	push   eax
c001550b:	68 40 73 03 c0       	push   0xc0037340
c0015510:	e8 5b 47 01 00       	call   c0029c70 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015515:	eb b9                	jmp    c00154d0 <SysKill(regs*)+0x64>
c0015517:	90                   	nop
c0015518:	83 c8 ff             	or     eax,0xffffffff
c001551b:	89 c2                	mov    edx,eax
c001551d:	8d 76 00             	lea    esi,[esi+0x0]
c0015520:	83 c4 08             	add    esp,0x8
c0015523:	5b                   	pop    ebx
c0015524:	c3                   	ret    

c0015525 <SysLoadDLL(regs*)>:
c0015525:	56                   	push   esi
c0015526:	31 d2                	xor    edx,edx
c0015528:	53                   	push   ebx
c0015529:	b8 01 00 00 00       	mov    eax,0x1
c001552e:	53                   	push   ebx
c001552f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015533:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015537:	0f 84 82 00 00 00    	je     c00155bf <SysLoadDLL(regs*)+0x9a>
c001553d:	83 ec 0c             	sub    esp,0xc
c0015540:	68 14 01 00 00       	push   0x114
c0015545:	e8 c5 b0 ff ff       	call   c001060f <malloc>
c001554a:	83 c4 0c             	add    esp,0xc
c001554d:	89 c3                	mov    ebx,eax
c001554f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015554:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015557:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001555a:	53                   	push   ebx
c001555b:	e8 6a 39 ff ff       	call   c0008eca <File::File(char const*, Process*)>
c0015560:	83 c4 10             	add    esp,0x10
c0015563:	31 d2                	xor    edx,edx
c0015565:	b8 02 00 00 00       	mov    eax,0x2
c001556a:	85 db                	test   ebx,ebx
c001556c:	74 51                	je     c00155bf <SysLoadDLL(regs*)+0x9a>
c001556e:	83 ec 0c             	sub    esp,0xc
c0015571:	53                   	push   ebx
c0015572:	e8 35 3c ff ff       	call   c00091ac <File::exists()>
c0015577:	83 c4 10             	add    esp,0x10
c001557a:	84 c0                	test   al,al
c001557c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001557e:	75 11                	jne    c0015591 <SysLoadDLL(regs*)+0x6c>
c0015580:	83 ec 0c             	sub    esp,0xc
c0015583:	53                   	push   ebx
c0015584:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015587:	83 c4 10             	add    esp,0x10
c001558a:	b8 03 00 00 00       	mov    eax,0x3
c001558f:	eb 2c                	jmp    c00155bd <SysLoadDLL(regs*)+0x98>
c0015591:	83 ec 0c             	sub    esp,0xc
c0015594:	53                   	push   ebx
c0015595:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015598:	83 c4 0c             	add    esp,0xc
c001559b:	6a 00                	push   0x0
c001559d:	ff 35 08 71 03 c0    	push   DWORD PTR ds:0xc0037108
c00155a3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00155a6:	e8 b5 16 00 00       	call   c0016c60 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c00155ab:	83 c4 10             	add    esp,0x10
c00155ae:	88 c1                	mov    cl,al
c00155b0:	31 d2                	xor    edx,edx
c00155b2:	31 c0                	xor    eax,eax
c00155b4:	84 c9                	test   cl,cl
c00155b6:	75 07                	jne    c00155bf <SysLoadDLL(regs*)+0x9a>
c00155b8:	b8 04 00 00 00       	mov    eax,0x4
c00155bd:	31 d2                	xor    edx,edx
c00155bf:	59                   	pop    ecx
c00155c0:	5b                   	pop    ebx
c00155c1:	5e                   	pop    esi
c00155c2:	c3                   	ret    

c00155c3 <SysPause(regs*)>:
c00155c3:	83 ec 18             	sub    esp,0x18
c00155c6:	6a 08                	push   0x8
c00155c8:	e8 ef 20 00 00       	call   c00176bc <blockTask(TaskState)>
c00155cd:	31 c0                	xor    eax,eax
c00155cf:	31 d2                	xor    edx,edx
c00155d1:	83 c4 1c             	add    esp,0x1c
c00155d4:	c3                   	ret    

c00155d5 <SysPthreadCreate(regs*)>:
c00155d5:	83 ec 18             	sub    esp,0x18
c00155d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155dd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00155e0:	e8 af 1e 00 00       	call   c0017494 <Process::createUserThread()>
c00155e5:	31 c0                	xor    eax,eax
c00155e7:	31 d2                	xor    edx,edx
c00155e9:	83 c4 1c             	add    esp,0x1c
c00155ec:	c3                   	ret    

c00155ed <SysPthreadGetTID(regs*)>:
c00155ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00155f5:	99                   	cdq    
c00155f6:	c3                   	ret    

c00155f7 <SysInternalPthreadGetContext(regs*)>:
c00155f7:	31 c0                	xor    eax,eax
c00155f9:	31 d2                	xor    edx,edx
c00155fb:	c3                   	ret    

c00155fc <SysInternalPthreadGetStartLocation(regs*)>:
c00155fc:	31 c0                	xor    eax,eax
c00155fe:	31 d2                	xor    edx,edx
c0015600:	c3                   	ret    

c0015601 <SysPthreadJoin(regs*)>:
c0015601:	31 c0                	xor    eax,eax
c0015603:	31 d2                	xor    edx,edx
c0015605:	c3                   	ret    

c0015606 <SysPthreadExit(regs*)>:
c0015606:	83 ec 18             	sub    esp,0x18
c0015609:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001560d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015610:	e8 e7 27 00 00       	call   c0017dfc <KeTerminateCurrentThread(int)>
c0015615:	83 c8 ff             	or     eax,0xffffffff
c0015618:	83 c4 1c             	add    esp,0x1c
c001561b:	89 c2                	mov    edx,eax
c001561d:	c3                   	ret    

c001561e <SysRead(regs*)>:
c001561e:	57                   	push   edi
c001561f:	56                   	push   esi
c0015620:	53                   	push   ebx
c0015621:	83 ec 10             	sub    esp,0x10
c0015624:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015628:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001562b:	83 f8 02             	cmp    eax,0x2
c001562e:	77 10                	ja     c0015640 <SysRead(regs*)+0x22>
c0015630:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015635:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015638:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c001563e:	eb 0e                	jmp    c001564e <SysRead(regs*)+0x30>
c0015640:	83 ec 0c             	sub    esp,0xc
c0015643:	50                   	push   eax
c0015644:	e8 54 e8 ff ff       	call   c0013e9d <KeGetFileFromDescriptor(int)>
c0015649:	83 c4 10             	add    esp,0x10
c001564c:	89 c1                	mov    ecx,eax
c001564e:	83 c8 ff             	or     eax,0xffffffff
c0015651:	85 c9                	test   ecx,ecx
c0015653:	89 c2                	mov    edx,eax
c0015655:	74 28                	je     c001567f <SysRead(regs*)+0x61>
c0015657:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001565f:	31 ff                	xor    edi,edi
c0015661:	83 ec 0c             	sub    esp,0xc
c0015664:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015666:	8d 54 24 18          	lea    edx,[esp+0x18]
c001566a:	52                   	push   edx
c001566b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001566e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015671:	57                   	push   edi
c0015672:	56                   	push   esi
c0015673:	51                   	push   ecx
c0015674:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015677:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001567b:	83 c4 20             	add    esp,0x20
c001567e:	99                   	cdq    
c001567f:	83 c4 10             	add    esp,0x10
c0015682:	5b                   	pop    ebx
c0015683:	5e                   	pop    esi
c0015684:	5f                   	pop    edi
c0015685:	c3                   	ret    

c0015686 <SysRegisterSignal(regs*)>:
c0015686:	83 ec 18             	sub    esp,0x18
c0015689:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001568d:	6a 00                	push   0x0
c001568f:	6a 00                	push   0x0
c0015691:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015694:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015697:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001569c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001569f:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00156a5:	e8 9f c5 ff ff       	call   c0011c49 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00156aa:	83 c4 2c             	add    esp,0x2c
c00156ad:	99                   	cdq    
c00156ae:	c3                   	ret    

c00156af <SysRegistryGetTypeFromPath(regs*)>:
c00156af:	53                   	push   ebx
c00156b0:	81 ec 40 01 00 00    	sub    esp,0x140
c00156b6:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00156bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00156c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00156c3:	e8 a4 96 ff ff       	call   c000ed6c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00156c8:	83 c4 10             	add    esp,0x10
c00156cb:	89 c1                	mov    ecx,eax
c00156cd:	85 c0                	test   eax,eax
c00156cf:	74 15                	je     c00156e6 <SysRegistryGetTypeFromPath(regs*)+0x37>
c00156d1:	50                   	push   eax
c00156d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00156d6:	50                   	push   eax
c00156d7:	51                   	push   ecx
c00156d8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00156db:	e8 70 92 ff ff       	call   c000e950 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00156e0:	83 c4 10             	add    esp,0x10
c00156e3:	99                   	cdq    
c00156e4:	eb 05                	jmp    c00156eb <SysRegistryGetTypeFromPath(regs*)+0x3c>
c00156e6:	83 c8 ff             	or     eax,0xffffffff
c00156e9:	89 c2                	mov    edx,eax
c00156eb:	81 c4 38 01 00 00    	add    esp,0x138
c00156f1:	5b                   	pop    ebx
c00156f2:	c3                   	ret    

c00156f3 <SysRegistryReadExtent(regs*)>:
c00156f3:	83 ec 1c             	sub    esp,0x1c
c00156f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00156fa:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00156fd:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0015700:	85 c0                	test   eax,eax
c0015702:	79 1f                	jns    c0015723 <SysRegistryReadExtent(regs*)+0x30>
c0015704:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0015709:	52                   	push   edx
c001570a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001570e:	52                   	push   edx
c001570f:	50                   	push   eax
c0015710:	51                   	push   ecx
c0015711:	e8 2c 91 ff ff       	call   c000e842 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0015716:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001571a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001571e:	83 c4 10             	add    esp,0x10
c0015721:	eb 14                	jmp    c0015737 <SysRegistryReadExtent(regs*)+0x44>
c0015723:	83 ec 04             	sub    esp,0x4
c0015726:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015729:	50                   	push   eax
c001572a:	51                   	push   ecx
c001572b:	e8 ac 8b ff ff       	call   c000e2dc <CmGetString(Reghive_Tag*, int, char*)>
c0015730:	83 c4 10             	add    esp,0x10
c0015733:	31 c0                	xor    eax,eax
c0015735:	31 d2                	xor    edx,edx
c0015737:	83 c4 1c             	add    esp,0x1c
c001573a:	c3                   	ret    

c001573b <SysRegistryPathToExtentLookup(regs*)>:
c001573b:	83 ec 14             	sub    esp,0x14
c001573e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015742:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015745:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015748:	e8 1f 96 ff ff       	call   c000ed6c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001574d:	83 c4 1c             	add    esp,0x1c
c0015750:	99                   	cdq    
c0015751:	c3                   	ret    

c0015752 <SysRegistryEnterDirectory(regs*)>:
c0015752:	83 ec 14             	sub    esp,0x14
c0015755:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015759:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001575c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001575f:	e8 ef 8b ff ff       	call   c000e353 <CmEnterDirectory(Reghive_Tag*, int)>
c0015764:	83 c4 1c             	add    esp,0x1c
c0015767:	99                   	cdq    
c0015768:	c3                   	ret    

c0015769 <SysRegistryGetNext(regs*)>:
c0015769:	83 ec 14             	sub    esp,0x14
c001576c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015770:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015773:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015776:	e8 17 8c ff ff       	call   c000e392 <CmGetNext(Reghive_Tag*, int)>
c001577b:	83 c4 1c             	add    esp,0x1c
c001577e:	99                   	cdq    
c001577f:	c3                   	ret    

c0015780 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0015780:	57                   	push   edi
c0015781:	56                   	push   esi
c0015782:	53                   	push   ebx
c0015783:	81 ec 34 01 00 00    	sub    esp,0x134
c0015789:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015790:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0015794:	57                   	push   edi
c0015795:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015798:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001579b:	e8 b0 91 ff ff       	call   c000e950 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00157a0:	89 c3                	mov    ebx,eax
c00157a2:	58                   	pop    eax
c00157a3:	5a                   	pop    edx
c00157a4:	57                   	push   edi
c00157a5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00157a8:	e8 93 ae fe ff       	call   c0000640 <strcpy>
c00157ad:	89 d8                	mov    eax,ebx
c00157af:	81 c4 40 01 00 00    	add    esp,0x140
c00157b5:	99                   	cdq    
c00157b6:	5b                   	pop    ebx
c00157b7:	5e                   	pop    esi
c00157b8:	5f                   	pop    edi
c00157b9:	c3                   	ret    

c00157ba <SysRegistryOpen(regs*)>:
c00157ba:	83 ec 18             	sub    esp,0x18
c00157bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00157c1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00157c4:	e8 a3 89 ff ff       	call   c000e16c <CmOpen(char const*)>
c00157c9:	83 c4 1c             	add    esp,0x1c
c00157cc:	99                   	cdq    
c00157cd:	c3                   	ret    

c00157ce <SysRegistryClose(regs*)>:
c00157ce:	83 ec 18             	sub    esp,0x18
c00157d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00157d5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00157d8:	e8 ad 8a ff ff       	call   c000e28a <CmClose(Reghive_Tag*)>
c00157dd:	31 c0                	xor    eax,eax
c00157df:	31 d2                	xor    edx,edx
c00157e1:	83 c4 1c             	add    esp,0x1c
c00157e4:	c3                   	ret    

c00157e5 <SysRegistryEasyReadString(regs*)>:
c00157e5:	57                   	push   edi
c00157e6:	56                   	push   esi
c00157e7:	53                   	push   ebx
c00157e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157ec:	83 ec 0c             	sub    esp,0xc
c00157ef:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00157f2:	e8 75 89 ff ff       	call   c000e16c <CmOpen(char const*)>
c00157f7:	5a                   	pop    edx
c00157f8:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00157fb:	59                   	pop    ecx
c00157fc:	89 c3                	mov    ebx,eax
c00157fe:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015801:	50                   	push   eax
c0015802:	e8 65 95 ff ff       	call   c000ed6c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0015807:	83 c4 10             	add    esp,0x10
c001580a:	89 c1                	mov    ecx,eax
c001580c:	b8 01 00 00 00       	mov    eax,0x1
c0015811:	85 c9                	test   ecx,ecx
c0015813:	7e 16                	jle    c001582b <SysRegistryEasyReadString(regs*)+0x46>
c0015815:	50                   	push   eax
c0015816:	57                   	push   edi
c0015817:	51                   	push   ecx
c0015818:	53                   	push   ebx
c0015819:	e8 be 8a ff ff       	call   c000e2dc <CmGetString(Reghive_Tag*, int, char*)>
c001581e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015821:	e8 64 8a ff ff       	call   c000e28a <CmClose(Reghive_Tag*)>
c0015826:	83 c4 10             	add    esp,0x10
c0015829:	31 c0                	xor    eax,eax
c001582b:	5b                   	pop    ebx
c001582c:	31 d2                	xor    edx,edx
c001582e:	5e                   	pop    esi
c001582f:	5f                   	pop    edi
c0015830:	c3                   	ret    

c0015831 <SysRegistryEasyReadInteger(regs*)>:
c0015831:	56                   	push   esi
c0015832:	53                   	push   ebx
c0015833:	83 ec 10             	sub    esp,0x10
c0015836:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001583a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001583d:	e8 2a 89 ff ff       	call   c000e16c <CmOpen(char const*)>
c0015842:	5a                   	pop    edx
c0015843:	89 c3                	mov    ebx,eax
c0015845:	59                   	pop    ecx
c0015846:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015849:	50                   	push   eax
c001584a:	e8 1d 95 ff ff       	call   c000ed6c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001584f:	83 c4 10             	add    esp,0x10
c0015852:	89 c1                	mov    ecx,eax
c0015854:	b8 01 00 00 00       	mov    eax,0x1
c0015859:	85 c9                	test   ecx,ecx
c001585b:	7e 18                	jle    c0015875 <SysRegistryEasyReadInteger(regs*)+0x44>
c001585d:	50                   	push   eax
c001585e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015861:	51                   	push   ecx
c0015862:	53                   	push   ebx
c0015863:	e8 da 8f ff ff       	call   c000e842 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0015868:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001586b:	e8 1a 8a ff ff       	call   c000e28a <CmClose(Reghive_Tag*)>
c0015870:	83 c4 10             	add    esp,0x10
c0015873:	31 c0                	xor    eax,eax
c0015875:	59                   	pop    ecx
c0015876:	31 d2                	xor    edx,edx
c0015878:	5b                   	pop    ebx
c0015879:	5e                   	pop    esi
c001587a:	c3                   	ret    

c001587b <SysSbrk(regs*)>:
c001587b:	56                   	push   esi
c001587c:	53                   	push   ebx
c001587d:	50                   	push   eax
c001587e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015883:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015887:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001588a:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001588d:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0015893:	85 db                	test   ebx,ebx
c0015895:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015898:	74 02                	je     c001589c <SysSbrk(regs*)+0x21>
c001589a:	79 06                	jns    c00158a2 <SysSbrk(regs*)+0x27>
c001589c:	89 f0                	mov    eax,esi
c001589e:	31 d2                	xor    edx,edx
c00158a0:	eb 2a                	jmp    c00158cc <SysSbrk(regs*)+0x51>
c00158a2:	83 c8 ff             	or     eax,0xffffffff
c00158a5:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00158ab:	89 c2                	mov    edx,eax
c00158ad:	77 1d                	ja     c00158cc <SysSbrk(regs*)+0x51>
c00158af:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00158b5:	50                   	push   eax
c00158b6:	c1 ea 0c             	shr    edx,0xc
c00158b9:	68 07 0c 00 00       	push   0xc07
c00158be:	52                   	push   edx
c00158bf:	51                   	push   ecx
c00158c0:	e8 1d ef ff ff       	call   c00147e2 <VAS::allocatePages(int, int)>
c00158c5:	89 f0                	mov    eax,esi
c00158c7:	31 d2                	xor    edx,edx
c00158c9:	83 c4 10             	add    esp,0x10
c00158cc:	59                   	pop    ecx
c00158cd:	5b                   	pop    ebx
c00158ce:	5e                   	pop    esi
c00158cf:	c3                   	ret    

c00158d0 <SysSetCwd(regs*)>:
c00158d0:	83 ec 14             	sub    esp,0x14
c00158d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158d7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00158da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158df:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00158e2:	e8 64 39 ff ff       	call   c000924b <Fs::setcwd(Process*, char*)>
c00158e7:	83 c4 1c             	add    esp,0x1c
c00158ea:	99                   	cdq    
c00158eb:	c3                   	ret    

c00158ec <SysSetTime(regs*)>:
c00158ec:	55                   	push   ebp
c00158ed:	31 d2                	xor    edx,edx
c00158ef:	57                   	push   edi
c00158f0:	56                   	push   esi
c00158f1:	be 18 00 00 00       	mov    esi,0x18
c00158f6:	53                   	push   ebx
c00158f7:	bb 3c 00 00 00       	mov    ebx,0x3c
c00158fc:	83 ec 20             	sub    esp,0x20
c00158ff:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0015903:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015906:	f7 f3                	div    ebx
c0015908:	89 d7                	mov    edi,edx
c001590a:	31 d2                	xor    edx,edx
c001590c:	f7 f3                	div    ebx
c001590e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015911:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015915:	bb 10 0e 00 00       	mov    ebx,0xe10
c001591a:	31 d2                	xor    edx,edx
c001591c:	f7 f3                	div    ebx
c001591e:	31 d2                	xor    edx,edx
c0015920:	f7 f6                	div    esi
c0015922:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0015925:	89 d5                	mov    ebp,edx
c0015927:	89 c3                	mov    ebx,eax
c0015929:	be 0c 00 00 00       	mov    esi,0xc
c001592e:	83 e3 1f             	and    ebx,0x1f
c0015931:	c1 e8 05             	shr    eax,0x5
c0015934:	43                   	inc    ebx
c0015935:	31 d2                	xor    edx,edx
c0015937:	f7 f6                	div    esi
c0015939:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001593d:	57                   	push   edi
c001593e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015942:	55                   	push   ebp
c0015943:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0015947:	56                   	push   esi
c0015948:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001594c:	53                   	push   ebx
c001594d:	68 65 cb 02 c0       	push   0xc002cb65
c0015952:	e8 25 16 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015957:	83 c4 1c             	add    esp,0x1c
c001595a:	57                   	push   edi
c001595b:	c1 e7 10             	shl    edi,0x10
c001595e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015962:	55                   	push   ebp
c0015963:	56                   	push   esi
c0015964:	c1 e6 10             	shl    esi,0x10
c0015967:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001596b:	53                   	push   ebx
c001596c:	68 87 cb 02 c0       	push   0xc002cb87
c0015971:	e8 06 16 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015976:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001597b:	31 d2                	xor    edx,edx
c001597d:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
c0015983:	31 c0                	xor    eax,eax
c0015985:	88 d8                	mov    al,bl
c0015987:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c001598b:	0f b7 d8             	movzx  ebx,ax
c001598e:	09 f3                	or     ebx,esi
c0015990:	89 d8                	mov    eax,ebx
c0015992:	89 eb                	mov    ebx,ebp
c0015994:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0015998:	88 da                	mov    dl,bl
c001599a:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c001599e:	83 c4 1c             	add    esp,0x1c
c00159a1:	89 d6                	mov    esi,edx
c00159a3:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c00159a9:	09 fe                	or     esi,edi
c00159ab:	56                   	push   esi
c00159ac:	50                   	push   eax
c00159ad:	51                   	push   ecx
c00159ae:	e8 09 49 ff ff       	call   c000a2bc <Clock::setTimeInDatetimeLocal(datetime_t)>
c00159b3:	83 c4 2c             	add    esp,0x2c
c00159b6:	83 f0 01             	xor    eax,0x1
c00159b9:	5b                   	pop    ebx
c00159ba:	0f b6 c0             	movzx  eax,al
c00159bd:	5e                   	pop    esi
c00159be:	31 d2                	xor    edx,edx
c00159c0:	5f                   	pop    edi
c00159c1:	5d                   	pop    ebp
c00159c2:	c3                   	ret    

c00159c3 <SysSymlink(regs*)>:
c00159c3:	56                   	push   esi
c00159c4:	83 c8 ff             	or     eax,0xffffffff
c00159c7:	53                   	push   ebx
c00159c8:	89 c2                	mov    edx,eax
c00159ca:	81 ec 34 02 00 00    	sub    esp,0x234
c00159d0:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00159d7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00159db:	74 50                	je     c0015a2d <SysSymlink(regs*)+0x6a>
c00159dd:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00159e0:	85 c9                	test   ecx,ecx
c00159e2:	74 49                	je     c0015a2d <SysSymlink(regs*)+0x6a>
c00159e4:	6a 01                	push   0x1
c00159e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159ee:	05 0c 01 00 00       	add    eax,0x10c
c00159f3:	50                   	push   eax
c00159f4:	51                   	push   ecx
c00159f5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00159f9:	56                   	push   esi
c00159fa:	e8 b3 31 ff ff       	call   c0008bb2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00159ff:	6a 01                	push   0x1
c0015a01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a09:	05 0c 01 00 00       	add    eax,0x10c
c0015a0e:	50                   	push   eax
c0015a0f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a12:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0015a19:	53                   	push   ebx
c0015a1a:	e8 93 31 ff ff       	call   c0008bb2 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015a1f:	83 c4 18             	add    esp,0x18
c0015a22:	56                   	push   esi
c0015a23:	53                   	push   ebx
c0015a24:	e8 b6 2d ff ff       	call   c00087df <KeCreateSymlink(char const*, char const*)>
c0015a29:	83 c4 10             	add    esp,0x10
c0015a2c:	99                   	cdq    
c0015a2d:	81 c4 34 02 00 00    	add    esp,0x234
c0015a33:	5b                   	pop    ebx
c0015a34:	5e                   	pop    esi
c0015a35:	c3                   	ret    

c0015a36 <SysTimezone(regs*)>:
c0015a36:	83 ec 0c             	sub    esp,0xc
c0015a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a3d:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0015a41:	75 17                	jne    c0015a5a <SysTimezone(regs*)+0x24>
c0015a43:	83 ec 0c             	sub    esp,0xc
c0015a46:	68 a9 cb 02 c0       	push   0xc002cba9
c0015a4b:	e8 2c 15 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015a50:	83 c8 ff             	or     eax,0xffffffff
c0015a53:	83 c4 10             	add    esp,0x10
c0015a56:	89 c2                	mov    edx,eax
c0015a58:	eb 16                	jmp    c0015a70 <SysTimezone(regs*)+0x3a>
c0015a5a:	83 ec 0c             	sub    esp,0xc
c0015a5d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015a60:	e8 e4 42 ff ff       	call   c0009d49 <KeSetTimezone(int)>
c0015a65:	31 d2                	xor    edx,edx
c0015a67:	83 f0 01             	xor    eax,0x1
c0015a6a:	83 c4 10             	add    esp,0x10
c0015a6d:	0f b6 c0             	movzx  eax,al
c0015a70:	83 c4 0c             	add    esp,0xc
c0015a73:	c3                   	ret    

c0015a74 <SysTruncate(regs*)>:
c0015a74:	55                   	push   ebp
c0015a75:	57                   	push   edi
c0015a76:	31 ff                	xor    edi,edi
c0015a78:	56                   	push   esi
c0015a79:	53                   	push   ebx
c0015a7a:	83 ec 0c             	sub    esp,0xc
c0015a7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a81:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015a84:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0015a87:	89 ce                	mov    esi,ecx
c0015a89:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0015a8d:	0f 84 9a 00 00 00    	je     c0015b2d <SysTruncate(regs*)+0xb9>
c0015a93:	83 ec 0c             	sub    esp,0xc
c0015a96:	68 14 01 00 00       	push   0x114
c0015a9b:	e8 6f ab ff ff       	call   c001060f <malloc>
c0015aa0:	83 c4 0c             	add    esp,0xc
c0015aa3:	89 c3                	mov    ebx,eax
c0015aa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aaa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015aad:	55                   	push   ebp
c0015aae:	53                   	push   ebx
c0015aaf:	e8 16 34 ff ff       	call   c0008eca <File::File(char const*, Process*)>
c0015ab4:	83 c4 10             	add    esp,0x10
c0015ab7:	31 d2                	xor    edx,edx
c0015ab9:	b8 03 00 00 00       	mov    eax,0x3
c0015abe:	85 db                	test   ebx,ebx
c0015ac0:	0f 84 a2 00 00 00    	je     c0015b68 <SysTruncate(regs*)+0xf4>
c0015ac6:	51                   	push   ecx
c0015ac7:	51                   	push   ecx
c0015ac8:	6a 02                	push   0x2
c0015aca:	53                   	push   ebx
c0015acb:	e8 18 34 ff ff       	call   c0008ee8 <File::open(FileOpenMode)>
c0015ad0:	83 c4 10             	add    esp,0x10
c0015ad3:	85 c0                	test   eax,eax
c0015ad5:	74 13                	je     c0015aea <SysTruncate(regs*)+0x76>
c0015ad7:	83 ec 0c             	sub    esp,0xc
c0015ada:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015adc:	53                   	push   ebx
c0015add:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ae0:	83 c4 10             	add    esp,0x10
c0015ae3:	b8 04 00 00 00       	mov    eax,0x4
c0015ae8:	eb 7c                	jmp    c0015b66 <SysTruncate(regs*)+0xf2>
c0015aea:	52                   	push   edx
c0015aeb:	57                   	push   edi
c0015aec:	56                   	push   esi
c0015aed:	53                   	push   ebx
c0015aee:	e8 09 35 ff ff       	call   c0008ffc <File::truncate(unsigned long long)>
c0015af3:	83 c4 10             	add    esp,0x10
c0015af6:	85 c0                	test   eax,eax
c0015af8:	74 1b                	je     c0015b15 <SysTruncate(regs*)+0xa1>
c0015afa:	83 ec 0c             	sub    esp,0xc
c0015afd:	53                   	push   ebx
c0015afe:	e8 43 34 ff ff       	call   c0008f46 <File::close()>
c0015b03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	b8 05 00 00 00       	mov    eax,0x5
c0015b13:	eb 51                	jmp    c0015b66 <SysTruncate(regs*)+0xf2>
c0015b15:	83 ec 0c             	sub    esp,0xc
c0015b18:	53                   	push   ebx
c0015b19:	e8 28 34 ff ff       	call   c0008f46 <File::close()>
c0015b1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b26:	83 c4 10             	add    esp,0x10
c0015b29:	31 c0                	xor    eax,eax
c0015b2b:	eb 39                	jmp    c0015b66 <SysTruncate(regs*)+0xf2>
c0015b2d:	31 d2                	xor    edx,edx
c0015b2f:	b8 01 00 00 00       	mov    eax,0x1
c0015b34:	83 fd 02             	cmp    ebp,0x2
c0015b37:	7e 2f                	jle    c0015b68 <SysTruncate(regs*)+0xf4>
c0015b39:	83 ec 0c             	sub    esp,0xc
c0015b3c:	51                   	push   ecx
c0015b3d:	e8 5b e3 ff ff       	call   c0013e9d <KeGetFileFromDescriptor(int)>
c0015b42:	83 c4 10             	add    esp,0x10
c0015b45:	89 c1                	mov    ecx,eax
c0015b47:	31 d2                	xor    edx,edx
c0015b49:	b8 02 00 00 00       	mov    eax,0x2
c0015b4e:	85 c9                	test   ecx,ecx
c0015b50:	74 16                	je     c0015b68 <SysTruncate(regs*)+0xf4>
c0015b52:	50                   	push   eax
c0015b53:	57                   	push   edi
c0015b54:	56                   	push   esi
c0015b55:	51                   	push   ecx
c0015b56:	e8 a1 34 ff ff       	call   c0008ffc <File::truncate(unsigned long long)>
c0015b5b:	83 c4 10             	add    esp,0x10
c0015b5e:	85 c0                	test   eax,eax
c0015b60:	0f 95 c0             	setne  al
c0015b63:	0f b6 c0             	movzx  eax,al
c0015b66:	31 d2                	xor    edx,edx
c0015b68:	83 c4 0c             	add    esp,0xc
c0015b6b:	5b                   	pop    ebx
c0015b6c:	5e                   	pop    esi
c0015b6d:	5f                   	pop    edi
c0015b6e:	5d                   	pop    ebp
c0015b6f:	c3                   	ret    

c0015b70 <SysWrite(regs*)>:
c0015b70:	57                   	push   edi
c0015b71:	56                   	push   esi
c0015b72:	53                   	push   ebx
c0015b73:	83 ec 10             	sub    esp,0x10
c0015b76:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015b7a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015b7d:	83 f8 02             	cmp    eax,0x2
c0015b80:	77 10                	ja     c0015b92 <SysWrite(regs*)+0x22>
c0015b82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b8a:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0015b90:	eb 0e                	jmp    c0015ba0 <SysWrite(regs*)+0x30>
c0015b92:	83 ec 0c             	sub    esp,0xc
c0015b95:	50                   	push   eax
c0015b96:	e8 02 e3 ff ff       	call   c0013e9d <KeGetFileFromDescriptor(int)>
c0015b9b:	83 c4 10             	add    esp,0x10
c0015b9e:	89 c1                	mov    ecx,eax
c0015ba0:	83 c8 ff             	or     eax,0xffffffff
c0015ba3:	85 c9                	test   ecx,ecx
c0015ba5:	89 c2                	mov    edx,eax
c0015ba7:	74 28                	je     c0015bd1 <SysWrite(regs*)+0x61>
c0015ba9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015bb1:	31 ff                	xor    edi,edi
c0015bb3:	83 ec 0c             	sub    esp,0xc
c0015bb6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015bb8:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015bbc:	52                   	push   edx
c0015bbd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015bc0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015bc3:	57                   	push   edi
c0015bc4:	56                   	push   esi
c0015bc5:	51                   	push   ecx
c0015bc6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015bc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015bcd:	83 c4 20             	add    esp,0x20
c0015bd0:	99                   	cdq    
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	5b                   	pop    ebx
c0015bd5:	5e                   	pop    esi
c0015bd6:	5f                   	pop    edi
c0015bd7:	c3                   	ret    

c0015bd8 <SysWsbe(regs*)>:
c0015bd8:	55                   	push   ebp
c0015bd9:	57                   	push   edi
c0015bda:	56                   	push   esi
c0015bdb:	53                   	push   ebx
c0015bdc:	83 ec 3c             	sub    esp,0x3c
c0015bdf:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015be3:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0015bea:	75 2d                	jne    c0015c19 <SysWsbe(regs*)+0x41>
c0015bec:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0015bf3:	75 24                	jne    c0015c19 <SysWsbe(regs*)+0x41>
c0015bf5:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0015bfc:	75 1b                	jne    c0015c19 <SysWsbe(regs*)+0x41>
c0015bfe:	6a 01                	push   0x1
c0015c00:	6a 00                	push   0x0
c0015c02:	68 9e ac 00 c0       	push   0xc000ac9e
c0015c07:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c0015c0d:	e8 1e 17 00 00       	call   c0017330 <Process::createThread(void (*)(void*), void*, int)>
c0015c12:	83 c4 10             	add    esp,0x10
c0015c15:	31 c0                	xor    eax,eax
c0015c17:	eb 52                	jmp    c0015c6b <SysWsbe(regs*)+0x93>
c0015c19:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015c1d:	be be cb 02 c0       	mov    esi,0xc002cbbe
c0015c22:	b9 0b 00 00 00       	mov    ecx,0xb
c0015c27:	fc                   	cld    
c0015c28:	83 ec 0c             	sub    esp,0xc
c0015c2b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015c2d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015c31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015c39:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0015c3f:	8b 06                	mov    eax,DWORD PTR [esi]
c0015c41:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0015c44:	57                   	push   edi
c0015c45:	e8 26 a9 fe ff       	call   c0000570 <strlen>
c0015c4a:	5a                   	pop    edx
c0015c4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015c4f:	52                   	push   edx
c0015c50:	31 d2                	xor    edx,edx
c0015c52:	57                   	push   edi
c0015c53:	52                   	push   edx
c0015c54:	50                   	push   eax
c0015c55:	56                   	push   esi
c0015c56:	ff d5                	call   ebp
c0015c58:	83 c4 14             	add    esp,0x14
c0015c5b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c5e:	e8 99 21 00 00       	call   c0017dfc <KeTerminateCurrentThread(int)>
c0015c63:	83 c4 10             	add    esp,0x10
c0015c66:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015c6b:	83 c4 3c             	add    esp,0x3c
c0015c6e:	31 d2                	xor    edx,edx
c0015c70:	5b                   	pop    ebx
c0015c71:	5e                   	pop    esi
c0015c72:	5f                   	pop    edi
c0015c73:	5d                   	pop    ebp
c0015c74:	c3                   	ret    

c0015c75 <SysYield(regs*)>:
c0015c75:	83 ec 0c             	sub    esp,0xc
c0015c78:	fa                   	cli    
c0015c79:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0015c7f:	e8 78 19 00 00       	call   c00175fc <schedule()>
c0015c84:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0015c8b:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0015c92:	75 01                	jne    c0015c95 <SysYield(regs*)+0x20>
c0015c94:	fb                   	sti    
c0015c95:	31 c0                	xor    eax,eax
c0015c97:	31 d2                	xor    edx,edx
c0015c99:	83 c4 0c             	add    esp,0xc
c0015c9c:	c3                   	ret    
c0015c9d:	66 90                	xchg   ax,ax
c0015c9f:	90                   	nop

c0015ca0 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0015ca0:	55                   	push   ebp
c0015ca1:	57                   	push   edi
c0015ca2:	56                   	push   esi
c0015ca3:	53                   	push   ebx
c0015ca4:	83 ec 2c             	sub    esp,0x2c
c0015ca7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015cab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015caf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015cb3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015cb7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015cbb:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0015cbe:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c0015cc2:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015cc6:	c1 e0 08             	shl    eax,0x8
c0015cc9:	09 c1                	or     ecx,eax
c0015ccb:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015ccf:	c1 e0 10             	shl    eax,0x10
c0015cd2:	09 c1                	or     ecx,eax
c0015cd4:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015cd8:	83 e0 7f             	and    eax,0x7f
c0015cdb:	c1 e0 18             	shl    eax,0x18
c0015cde:	09 c8                	or     eax,ecx
c0015ce0:	89 c5                	mov    ebp,eax
c0015ce2:	89 f8                	mov    eax,edi
c0015ce4:	80 f4 00             	xor    ah,0x0
c0015ce7:	89 c3                	mov    ebx,eax
c0015ce9:	89 e8                	mov    eax,ebp
c0015ceb:	80 f4 00             	xor    ah,0x0
c0015cee:	89 c6                	mov    esi,eax
c0015cf0:	89 f0                	mov    eax,esi
c0015cf2:	09 d8                	or     eax,ebx
c0015cf4:	74 42                	je     c0015d38 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0015cf6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015cfa:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0015cfd:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015d01:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015d05:	c1 e0 08             	shl    eax,0x8
c0015d08:	09 c6                	or     esi,eax
c0015d0a:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015d0e:	c1 e0 10             	shl    eax,0x10
c0015d11:	09 c6                	or     esi,eax
c0015d13:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015d17:	83 e0 7f             	and    eax,0x7f
c0015d1a:	c1 e0 18             	shl    eax,0x18
c0015d1d:	09 f0                	or     eax,esi
c0015d1f:	89 c3                	mov    ebx,eax
c0015d21:	a1 50 6b 03 c0       	mov    eax,ds:0xc0036b50
c0015d26:	8b 15 54 6b 03 c0    	mov    edx,DWORD PTR ds:0xc0036b54
c0015d2c:	29 c1                	sub    ecx,eax
c0015d2e:	19 d3                	sbb    ebx,edx
c0015d30:	89 c8                	mov    eax,ecx
c0015d32:	89 da                	mov    edx,ebx
c0015d34:	eb 0e                	jmp    c0015d44 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0015d36:	66 90                	xchg   ax,ax
c0015d38:	b8 00 00 00 00       	mov    eax,0x0
c0015d3d:	ba 00 00 00 00       	mov    edx,0x0
c0015d42:	66 90                	xchg   ax,ax
c0015d44:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015d48:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d50:	80 f4 00             	xor    ah,0x0
c0015d53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015d57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d5b:	80 f4 00             	xor    ah,0x0
c0015d5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d62:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015d66:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0015d6a:	89 e8                	mov    eax,ebp
c0015d6c:	09 f8                	or     eax,edi
c0015d6e:	74 30                	je     c0015da0 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0015d70:	8b 0d 50 6b 03 c0    	mov    ecx,DWORD PTR ds:0xc0036b50
c0015d76:	8b 1d 54 6b 03 c0    	mov    ebx,DWORD PTR ds:0xc0036b54
c0015d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015d84:	01 c8                	add    eax,ecx
c0015d86:	11 da                	adc    edx,ebx
c0015d88:	89 c6                	mov    esi,eax
c0015d8a:	83 e6 ff             	and    esi,0xffffffff
c0015d8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015d90:	89 d0                	mov    eax,edx
c0015d92:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0015d97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d9b:	eb 13                	jmp    c0015db0 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c0015d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0015da0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015da7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015daf:	90                   	nop
c0015db0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015db4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015db7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0015dbb:	89 cf                	mov    edi,ecx
c0015dbd:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0015dc0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015dc3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0015dc7:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0015dcc:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c0015dcf:	83 e1 00             	and    ecx,0x0
c0015dd2:	09 ca                	or     edx,ecx
c0015dd4:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015dd7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ddb:	c1 ea 08             	shr    edx,0x8
c0015dde:	0f b6 d2             	movzx  edx,dl
c0015de1:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c0015de4:	83 e1 00             	and    ecx,0x0
c0015de7:	09 ca                	or     edx,ecx
c0015de9:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015dec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015df0:	c1 ea 10             	shr    edx,0x10
c0015df3:	0f b6 d2             	movzx  edx,dl
c0015df6:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c0015df9:	83 e1 00             	and    ecx,0x0
c0015dfc:	09 ca                	or     edx,ecx
c0015dfe:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015e01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e05:	c1 ea 18             	shr    edx,0x18
c0015e08:	83 e2 7f             	and    edx,0x7f
c0015e0b:	89 d3                	mov    ebx,edx
c0015e0d:	83 e3 7f             	and    ebx,0x7f
c0015e10:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015e13:	83 e2 80             	and    edx,0xffffff80
c0015e16:	88 d1                	mov    cl,dl
c0015e18:	88 da                	mov    dl,bl
c0015e1a:	09 ca                	or     edx,ecx
c0015e1c:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015e1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e23:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015e27:	83 c4 2c             	add    esp,0x2c
c0015e2a:	5b                   	pop    ebx
c0015e2b:	5e                   	pop    esi
c0015e2c:	5f                   	pop    edi
c0015e2d:	5d                   	pop    ebp
c0015e2e:	c3                   	ret    
c0015e2f:	90                   	nop

c0015e30 <KeCheckAlarm(ThreadControlBlock*)>:
c0015e30:	55                   	push   ebp
c0015e31:	57                   	push   edi
c0015e32:	56                   	push   esi
c0015e33:	53                   	push   ebx
c0015e34:	83 ec 0c             	sub    esp,0xc
c0015e37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e3b:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015e3e:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0015e42:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c0015e46:	c1 e5 08             	shl    ebp,0x8
c0015e49:	09 fd                	or     ebp,edi
c0015e4b:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0015e4f:	c1 e7 10             	shl    edi,0x10
c0015e52:	09 ef                	or     edi,ebp
c0015e54:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0015e58:	83 e0 7f             	and    eax,0x7f
c0015e5b:	c1 e0 18             	shl    eax,0x18
c0015e5e:	09 f8                	or     eax,edi
c0015e60:	89 c1                	mov    ecx,eax
c0015e62:	89 d0                	mov    eax,edx
c0015e64:	80 f4 00             	xor    ah,0x0
c0015e67:	89 c3                	mov    ebx,eax
c0015e69:	89 c8                	mov    eax,ecx
c0015e6b:	80 f4 00             	xor    ah,0x0
c0015e6e:	89 c6                	mov    esi,eax
c0015e70:	89 f0                	mov    eax,esi
c0015e72:	09 d8                	or     eax,ebx
c0015e74:	0f 84 9e 00 00 00    	je     c0015f18 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015e7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e7e:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c0015e81:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c0015e85:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c0015e89:	c1 e6 08             	shl    esi,0x8
c0015e8c:	09 de                	or     esi,ebx
c0015e8e:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c0015e92:	c1 e3 10             	shl    ebx,0x10
c0015e95:	09 f3                	or     ebx,esi
c0015e97:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c0015e9b:	83 e1 7f             	and    ecx,0x7f
c0015e9e:	c1 e1 18             	shl    ecx,0x18
c0015ea1:	09 d9                	or     ecx,ebx
c0015ea3:	89 ca                	mov    edx,ecx
c0015ea5:	89 c1                	mov    ecx,eax
c0015ea7:	89 d3                	mov    ebx,edx
c0015ea9:	a1 50 6b 03 c0       	mov    eax,ds:0xc0036b50
c0015eae:	8b 15 54 6b 03 c0    	mov    edx,DWORD PTR ds:0xc0036b54
c0015eb4:	39 c8                	cmp    eax,ecx
c0015eb6:	89 d0                	mov    eax,edx
c0015eb8:	19 d8                	sbb    eax,ebx
c0015eba:	72 5c                	jb     c0015f18 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015ebc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ec0:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c0015ec7:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0015eca:	83 e2 00             	and    edx,0x0
c0015ecd:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015ed0:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015ed3:	83 e2 00             	and    edx,0x0
c0015ed6:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015ed9:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015edc:	83 e2 00             	and    edx,0x0
c0015edf:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015ee2:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015ee5:	83 e2 80             	and    edx,0xffffff80
c0015ee8:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015eeb:	83 ec 0c             	sub    esp,0xc
c0015eee:	68 ea cb 02 c0       	push   0xc002cbea
c0015ef3:	e8 84 10 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015ef8:	83 c4 10             	add    esp,0x10
c0015efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f02:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015f08:	83 ec 08             	sub    esp,0x8
c0015f0b:	6a 0e                	push   0xe
c0015f0d:	50                   	push   eax
c0015f0e:	e8 6c bd ff ff       	call   c0011c7f <KeRaiseSignal(SigHandlerBlock*, int)>
c0015f13:	83 c4 10             	add    esp,0x10
c0015f16:	66 90                	xchg   ax,ax
c0015f18:	90                   	nop
c0015f19:	83 c4 0c             	add    esp,0xc
c0015f1c:	5b                   	pop    ebx
c0015f1d:	5e                   	pop    esi
c0015f1e:	5f                   	pop    edi
c0015f1f:	5d                   	pop    ebp
c0015f20:	c3                   	ret    

c0015f21 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015f21:	55                   	push   ebp
c0015f22:	57                   	push   edi
c0015f23:	56                   	push   esi
c0015f24:	53                   	push   ebx
c0015f25:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015f2b:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015f33:	0f 95 c0             	setne  al
c0015f36:	31 d2                	xor    edx,edx
c0015f38:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015f40:	0f 94 c2             	sete   dl
c0015f43:	85 c2                	test   edx,eax
c0015f45:	74 34                	je     c0015f7b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015f47:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015f52:	74 27                	je     c0015f7b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015f54:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015f5b:	05 00 10 00 00       	add    eax,0x1000
c0015f60:	89 c1                	mov    ecx,eax
c0015f62:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015f67:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0015f6d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0015f74:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0015f7b:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0015f82:	83 ec 0c             	sub    esp,0xc
c0015f85:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015f8b:	6a 01                	push   0x1
c0015f8d:	e8 69 e0 ff ff       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c0015f92:	83 c4 10             	add    esp,0x10
c0015f95:	89 c3                	mov    ebx,eax
c0015f97:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015f9d:	0f 86 26 01 00 00    	jbe    c00160c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0015fa3:	c1 ee 0c             	shr    esi,0xc
c0015fa6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015fad:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015fb1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015fb9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015fc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fc4:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015fcb:	29 ef                	sub    edi,ebp
c0015fcd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0015fd1:	0f 83 f9 00 00 00    	jae    c00160d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0015fd7:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015fdd:	76 05                	jbe    c0015fe4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0015fdf:	bf 00 10 00 00       	mov    edi,0x1000
c0015fe4:	83 ec 0c             	sub    esp,0xc
c0015fe7:	31 d2                	xor    edx,edx
c0015fe9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015ff0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015ff2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015ff6:	50                   	push   eax
c0015ff7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015ffb:	56                   	push   esi
c0015ffc:	52                   	push   edx
c0015ffd:	57                   	push   edi
c0015ffe:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016005:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016008:	83 c4 20             	add    esp,0x20
c001600b:	85 c0                	test   eax,eax
c001600d:	75 06                	jne    c0016015 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001600f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016013:	74 13                	je     c0016028 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0016015:	83 ec 0c             	sub    esp,0xc
c0016018:	53                   	push   ebx
c0016019:	e8 e5 e2 ff ff       	call   c0014303 <Virt::freeKernelVirtualPages(unsigned long)>
c001601e:	83 c4 10             	add    esp,0x10
c0016021:	31 c0                	xor    eax,eax
c0016023:	e9 80 01 00 00       	jmp    c00161a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0016028:	fa                   	cli    
c0016029:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001602f:	e8 24 ac ff ff       	call   c0010c58 <Phys::allocatePage()>
c0016034:	6a 07                	push   0x7
c0016036:	89 c7                	mov    edi,eax
c0016038:	53                   	push   ebx
c0016039:	50                   	push   eax
c001603a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001603f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016042:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0016048:	e8 91 e6 ff ff       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c001604d:	83 c4 0c             	add    esp,0xc
c0016050:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016057:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001605d:	6a 00                	push   0x0
c001605f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016064:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016067:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001606d:	e8 d8 e4 ff ff       	call   c001454a <VAS::mapOtherVASIn(bool, VAS*)>
c0016072:	58                   	pop    eax
c0016073:	5a                   	pop    edx
c0016074:	68 07 0c 00 00       	push   0xc07
c0016079:	55                   	push   ebp
c001607a:	57                   	push   edi
c001607b:	89 df                	mov    edi,ebx
c001607d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016084:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001608a:	6a 00                	push   0x0
c001608c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016091:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016094:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001609a:	e8 81 e8 ff ff       	call   c0014920 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001609f:	b9 00 10 00 00       	mov    ecx,0x1000
c00160a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00160a6:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c00160ad:	83 c4 20             	add    esp,0x20
c00160b0:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c00160b7:	75 01                	jne    c00160ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c00160b9:	fb                   	sti    
c00160ba:	81 c5 00 10 00 00    	add    ebp,0x1000
c00160c0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00160c4:	e9 f0 fe ff ff       	jmp    c0015fb9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00160c9:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00160d0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00160d7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00160dd:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00160e3:	0f 86 b1 00 00 00    	jbe    c001619a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00160e9:	fa                   	cli    
c00160ea:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c00160f0:	c1 ee 0c             	shr    esi,0xc
c00160f3:	51                   	push   ecx
c00160f4:	31 ff                	xor    edi,edi
c00160f6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00160fd:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0016103:	6a 00                	push   0x0
c0016105:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001610a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001610d:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0016113:	e8 32 e4 ff ff       	call   c001454a <VAS::mapOtherVASIn(bool, VAS*)>
c0016118:	83 c4 10             	add    esp,0x10
c001611b:	e8 38 ab ff ff       	call   c0010c58 <Phys::allocatePage()>
c0016120:	47                   	inc    edi
c0016121:	6a 07                	push   0x7
c0016123:	53                   	push   ebx
c0016124:	50                   	push   eax
c0016125:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016129:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001612f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016132:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0016138:	e8 a1 e5 ff ff       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c001613d:	58                   	pop    eax
c001613e:	5a                   	pop    edx
c001613f:	68 07 0c 00 00       	push   0xc07
c0016144:	55                   	push   ebp
c0016145:	81 c5 00 10 00 00    	add    ebp,0x1000
c001614b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001614f:	50                   	push   eax
c0016150:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016157:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001615d:	6a 00                	push   0x0
c001615f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016164:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016167:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001616d:	e8 ae e7 ff ff       	call   c0014920 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016172:	83 c4 1c             	add    esp,0x1c
c0016175:	68 00 10 00 00       	push   0x1000
c001617a:	6a 00                	push   0x0
c001617c:	53                   	push   ebx
c001617d:	e8 6e a3 fe ff       	call   c00004f0 <memset>
c0016182:	83 c4 10             	add    esp,0x10
c0016185:	39 fe                	cmp    esi,edi
c0016187:	77 92                	ja     c001611b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0016189:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0016190:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0016197:	75 01                	jne    c001619a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0016199:	fb                   	sti    
c001619a:	83 ec 0c             	sub    esp,0xc
c001619d:	53                   	push   ebx
c001619e:	e8 60 e1 ff ff       	call   c0014303 <Virt::freeKernelVirtualPages(unsigned long)>
c00161a3:	83 c4 10             	add    esp,0x10
c00161a6:	b0 01                	mov    al,0x1
c00161a8:	81 c4 2c 10 00 00    	add    esp,0x102c
c00161ae:	5b                   	pop    ebx
c00161af:	5e                   	pop    esi
c00161b0:	5f                   	pop    edi
c00161b1:	5d                   	pop    ebp
c00161b2:	c3                   	ret    

c00161b3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00161b3:	55                   	push   ebp
c00161b4:	57                   	push   edi
c00161b5:	56                   	push   esi
c00161b6:	53                   	push   ebx
c00161b7:	83 ec 68             	sub    esp,0x68
c00161ba:	68 14 01 00 00       	push   0x114
c00161bf:	e8 4b a4 ff ff       	call   c001060f <malloc>
c00161c4:	83 c4 0c             	add    esp,0xc
c00161c7:	89 c6                	mov    esi,eax
c00161c9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00161cd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00161d1:	50                   	push   eax
c00161d2:	e8 f3 2c ff ff       	call   c0008eca <File::File(char const*, Process*)>
c00161d7:	5b                   	pop    ebx
c00161d8:	5f                   	pop    edi
c00161d9:	6a 01                	push   0x1
c00161db:	56                   	push   esi
c00161dc:	e8 07 2d ff ff       	call   c0008ee8 <File::open(FileOpenMode)>
c00161e1:	83 c4 10             	add    esp,0x10
c00161e4:	85 c0                	test   eax,eax
c00161e6:	0f 85 c6 01 00 00    	jne    c00163b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c00161ec:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00161f4:	83 ec 0c             	sub    esp,0xc
c00161f7:	6a 34                	push   0x34
c00161f9:	e8 11 a4 ff ff       	call   c001060f <malloc>
c00161fe:	59                   	pop    ecx
c00161ff:	89 c3                	mov    ebx,eax
c0016201:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0016205:	8b 06                	mov    eax,DWORD PTR [esi]
c0016207:	57                   	push   edi
c0016208:	53                   	push   ebx
c0016209:	6a 00                	push   0x0
c001620b:	6a 34                	push   0x34
c001620d:	56                   	push   esi
c001620e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016211:	83 c4 20             	add    esp,0x20
c0016214:	85 c0                	test   eax,eax
c0016216:	0f 85 96 01 00 00    	jne    c00163b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001621c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016222:	0f 85 8a 01 00 00    	jne    c00163b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0016228:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001622b:	85 c0                	test   eax,eax
c001622d:	0f 84 7f 01 00 00    	je     c00163b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0016233:	52                   	push   edx
c0016234:	31 d2                	xor    edx,edx
c0016236:	52                   	push   edx
c0016237:	50                   	push   eax
c0016238:	56                   	push   esi
c0016239:	e8 68 2d ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c001623e:	83 c4 10             	add    esp,0x10
c0016241:	85 c0                	test   eax,eax
c0016243:	0f 85 69 01 00 00    	jne    c00163b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0016249:	83 ec 0c             	sub    esp,0xc
c001624c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001624f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016257:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001625b:	0f af c2             	imul   eax,edx
c001625e:	50                   	push   eax
c001625f:	e8 ab a3 ff ff       	call   c001060f <malloc>
c0016264:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016266:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001626a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001626d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016271:	31 ff                	xor    edi,edi
c0016273:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016277:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001627b:	0f af c2             	imul   eax,edx
c001627e:	99                   	cdq    
c001627f:	52                   	push   edx
c0016280:	50                   	push   eax
c0016281:	56                   	push   esi
c0016282:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016285:	83 c4 20             	add    esp,0x20
c0016288:	0f b7 c7             	movzx  eax,di
c001628b:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c001628f:	73 71                	jae    c0016302 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c0016291:	6b c0 28             	imul   eax,eax,0x28
c0016294:	55                   	push   ebp
c0016295:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016299:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c001629d:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00162a0:	6b d2 28             	imul   edx,edx,0x28
c00162a3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00162a7:	31 d2                	xor    edx,edx
c00162a9:	52                   	push   edx
c00162aa:	50                   	push   eax
c00162ab:	56                   	push   esi
c00162ac:	e8 f5 2c ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c00162b1:	83 c4 0c             	add    esp,0xc
c00162b4:	6a 20                	push   0x20
c00162b6:	6a 00                	push   0x0
c00162b8:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c00162bc:	55                   	push   ebp
c00162bd:	e8 2e a2 fe ff       	call   c00004f0 <memset>
c00162c2:	58                   	pop    eax
c00162c3:	8b 06                	mov    eax,DWORD PTR [esi]
c00162c5:	8d 54 24 38          	lea    edx,[esp+0x38]
c00162c9:	52                   	push   edx
c00162ca:	55                   	push   ebp
c00162cb:	6a 00                	push   0x0
c00162cd:	6a 1f                	push   0x1f
c00162cf:	56                   	push   esi
c00162d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00162d3:	83 c4 18             	add    esp,0x18
c00162d6:	55                   	push   ebp
c00162d7:	68 fb cb 02 c0       	push   0xc002cbfb
c00162dc:	e8 6f a4 fe ff       	call   c0000750 <strcmp>
c00162e1:	83 c4 10             	add    esp,0x10
c00162e4:	85 c0                	test   eax,eax
c00162e6:	75 17                	jne    c00162ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c00162e8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00162ec:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c00162f0:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c00162f6:	83 c8 80             	or     eax,0xffffff80
c00162f9:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c00162ff:	47                   	inc    edi
c0016300:	eb 86                	jmp    c0016288 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0016302:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016305:	85 c0                	test   eax,eax
c0016307:	0f 84 a5 00 00 00    	je     c00163b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001630d:	31 d2                	xor    edx,edx
c001630f:	57                   	push   edi
c0016310:	52                   	push   edx
c0016311:	50                   	push   eax
c0016312:	56                   	push   esi
c0016313:	e8 8e 2c ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c0016318:	83 c4 10             	add    esp,0x10
c001631b:	85 c0                	test   eax,eax
c001631d:	0f 85 8f 00 00 00    	jne    c00163b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0016323:	83 ec 0c             	sub    esp,0xc
c0016326:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001632a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001632e:	31 ed                	xor    ebp,ebp
c0016330:	0f af c2             	imul   eax,edx
c0016333:	50                   	push   eax
c0016334:	e8 d6 a2 ff ff       	call   c001060f <malloc>
c0016339:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001633d:	59                   	pop    ecx
c001633e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016340:	8d 44 24 34          	lea    eax,[esp+0x34]
c0016344:	50                   	push   eax
c0016345:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016349:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001634d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016351:	0f af c2             	imul   eax,edx
c0016354:	99                   	cdq    
c0016355:	52                   	push   edx
c0016356:	50                   	push   eax
c0016357:	56                   	push   esi
c0016358:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001635b:	83 c4 20             	add    esp,0x20
c001635e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016366:	0f b7 fd             	movzx  edi,bp
c0016369:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c001636d:	0f 83 80 00 00 00    	jae    c00163f3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x240>
c0016373:	c1 e7 05             	shl    edi,0x5
c0016376:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c001637a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001637d:	75 6e                	jne    c00163ed <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c001637f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016382:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016386:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016389:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001638d:	52                   	push   edx
c001638e:	31 d2                	xor    edx,edx
c0016390:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016393:	52                   	push   edx
c0016394:	50                   	push   eax
c0016395:	56                   	push   esi
c0016396:	e8 0b 2c ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c001639b:	83 c4 10             	add    esp,0x10
c001639e:	85 c0                	test   eax,eax
c00163a0:	74 17                	je     c00163b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x206>
c00163a2:	83 ec 0c             	sub    esp,0xc
c00163a5:	68 0a cc 02 c0       	push   0xc002cc0a
c00163aa:	e8 cd 0b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00163af:	83 c4 10             	add    esp,0x10
c00163b2:	31 c0                	xor    eax,eax
c00163b4:	e9 8a 00 00 00       	jmp    c0016443 <Thr::loadProgramIntoMemory(Process*, char const*)+0x290>
c00163b9:	83 ec 0c             	sub    esp,0xc
c00163bc:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00163bf:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00163c2:	50                   	push   eax
c00163c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00163c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163cb:	56                   	push   esi
c00163cc:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00163d3:	e8 49 fb ff ff       	call   c0015f21 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00163d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00163dc:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00163e0:	83 c4 20             	add    esp,0x20
c00163e3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00163e7:	73 04                	jae    c00163ed <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c00163e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163ed:	45                   	inc    ebp
c00163ee:	e9 73 ff ff ff       	jmp    c0016366 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c00163f3:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c00163f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163ff:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0016405:	83 ec 0c             	sub    esp,0xc
c0016408:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c001640e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016413:	05 00 10 00 00       	add    eax,0x1000
c0016418:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001641b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001641f:	e8 fb a1 ff ff       	call   c001061f <free>
c0016424:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016427:	e8 f3 a1 ff ff       	call   c001061f <free>
c001642c:	58                   	pop    eax
c001642d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016431:	e8 e9 a1 ff ff       	call   c001061f <free>
c0016436:	89 34 24             	mov    DWORD PTR [esp],esi
c0016439:	e8 08 2b ff ff       	call   c0008f46 <File::close()>
c001643e:	83 c4 10             	add    esp,0x10
c0016441:	b0 01                	mov    al,0x1
c0016443:	83 c4 5c             	add    esp,0x5c
c0016446:	5b                   	pop    ebx
c0016447:	5e                   	pop    esi
c0016448:	5f                   	pop    edi
c0016449:	5d                   	pop    ebp
c001644a:	c3                   	ret    

c001644b <Thr::runtimeReferenceHelper()>:
c001644b:	83 ec 18             	sub    esp,0x18
c001644e:	68 12 cc 02 c0       	push   0xc002cc12
c0016453:	e8 24 0b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016458:	fa                   	cli    
c0016459:	83 c4 10             	add    esp,0x10
c001645c:	eb fe                	jmp    c001645c <Thr::runtimeReferenceHelper()+0x11>

c001645e <Thr::getAddressOfKernelSymbol(char const*)>:
c001645e:	57                   	push   edi
c001645f:	56                   	push   esi
c0016460:	53                   	push   ebx
c0016461:	31 db                	xor    ebx,ebx
c0016463:	39 1d 00 73 03 c0    	cmp    DWORD PTR ds:0xc0037300,ebx
c0016469:	7e 3c                	jle    c00164a7 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001646b:	8b 34 9d e0 72 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffc8d20]
c0016472:	31 ff                	xor    edi,edi
c0016474:	39 3c 9d a0 72 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffc8d60],edi
c001647b:	7e 27                	jle    c00164a4 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001647d:	50                   	push   eax
c001647e:	50                   	push   eax
c001647f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016483:	8b 06                	mov    eax,DWORD PTR [esi]
c0016485:	03 04 9d c0 72 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffc8d40]
c001648c:	50                   	push   eax
c001648d:	e8 be a2 fe ff       	call   c0000750 <strcmp>
c0016492:	83 c4 10             	add    esp,0x10
c0016495:	85 c0                	test   eax,eax
c0016497:	75 05                	jne    c001649e <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016499:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001649c:	eb 0b                	jmp    c00164a9 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001649e:	83 c6 10             	add    esi,0x10
c00164a1:	47                   	inc    edi
c00164a2:	eb d0                	jmp    c0016474 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00164a4:	43                   	inc    ebx
c00164a5:	eb bc                	jmp    c0016463 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00164a7:	31 c0                	xor    eax,eax
c00164a9:	5b                   	pop    ebx
c00164aa:	5e                   	pop    esi
c00164ab:	5f                   	pop    edi
c00164ac:	c3                   	ret    

c00164ad <Thr::loadKernelSymbolTable(char const*)>:
c00164ad:	55                   	push   ebp
c00164ae:	57                   	push   edi
c00164af:	56                   	push   esi
c00164b0:	53                   	push   ebx
c00164b1:	83 ec 68             	sub    esp,0x68
c00164b4:	8b 35 58 73 03 c0    	mov    esi,DWORD PTR ds:0xc0037358
c00164ba:	68 14 01 00 00       	push   0x114
c00164bf:	e8 4b a1 ff ff       	call   c001060f <malloc>
c00164c4:	83 c4 0c             	add    esp,0xc
c00164c7:	89 c3                	mov    ebx,eax
c00164c9:	56                   	push   esi
c00164ca:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00164ce:	50                   	push   eax
c00164cf:	e8 f6 29 ff ff       	call   c0008eca <File::File(char const*, Process*)>
c00164d4:	5e                   	pop    esi
c00164d5:	5f                   	pop    edi
c00164d6:	6a 01                	push   0x1
c00164d8:	53                   	push   ebx
c00164d9:	e8 0a 2a ff ff       	call   c0008ee8 <File::open(FileOpenMode)>
c00164de:	83 c4 10             	add    esp,0x10
c00164e1:	85 c0                	test   eax,eax
c00164e3:	74 0a                	je     c00164ef <Thr::loadKernelSymbolTable(char const*)+0x42>
c00164e5:	83 ec 0c             	sub    esp,0xc
c00164e8:	68 34 cc 02 c0       	push   0xc002cc34
c00164ed:	eb 34                	jmp    c0016523 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00164ef:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00164f7:	83 ec 0c             	sub    esp,0xc
c00164fa:	6a 34                	push   0x34
c00164fc:	e8 0e a1 ff ff       	call   c001060f <malloc>
c0016501:	59                   	pop    ecx
c0016502:	89 c7                	mov    edi,eax
c0016504:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016508:	8b 03                	mov    eax,DWORD PTR [ebx]
c001650a:	56                   	push   esi
c001650b:	57                   	push   edi
c001650c:	6a 00                	push   0x0
c001650e:	6a 34                	push   0x34
c0016510:	53                   	push   ebx
c0016511:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016514:	83 c4 20             	add    esp,0x20
c0016517:	85 c0                	test   eax,eax
c0016519:	74 17                	je     c0016532 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001651b:	83 ec 0c             	sub    esp,0xc
c001651e:	68 4b cc 02 c0       	push   0xc002cc4b
c0016523:	e8 3c a5 ff ff       	call   c0010a64 <KePanic(char const*)>
c0016528:	83 c4 10             	add    esp,0x10
c001652b:	31 c0                	xor    eax,eax
c001652d:	e9 31 02 00 00       	jmp    c0016763 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016532:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016538:	75 e1                	jne    c001651b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001653a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001653d:	85 c0                	test   eax,eax
c001653f:	74 da                	je     c001651b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016541:	52                   	push   edx
c0016542:	31 d2                	xor    edx,edx
c0016544:	52                   	push   edx
c0016545:	50                   	push   eax
c0016546:	53                   	push   ebx
c0016547:	e8 5a 2a ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c001654c:	83 c4 10             	add    esp,0x10
c001654f:	85 c0                	test   eax,eax
c0016551:	75 c8                	jne    c001651b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016553:	83 ec 0c             	sub    esp,0xc
c0016556:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001655a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001655e:	31 ed                	xor    ebp,ebp
c0016560:	0f af c2             	imul   eax,edx
c0016563:	50                   	push   eax
c0016564:	e8 a6 a0 ff ff       	call   c001060f <malloc>
c0016569:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001656b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001656f:	89 34 24             	mov    DWORD PTR [esp],esi
c0016572:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016576:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001657a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001657e:	0f af c2             	imul   eax,edx
c0016581:	99                   	cdq    
c0016582:	52                   	push   edx
c0016583:	50                   	push   eax
c0016584:	53                   	push   ebx
c0016585:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016588:	83 c4 20             	add    esp,0x20
c001658b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016593:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001659b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00165a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00165ab:	0f b7 f5             	movzx  esi,bp
c00165ae:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00165b2:	0f 83 a7 00 00 00    	jae    c001665f <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00165b8:	6b f6 28             	imul   esi,esi,0x28
c00165bb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00165bf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00165c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00165c6:	50                   	push   eax
c00165c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165cb:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00165cf:	8b 16                	mov    edx,DWORD PTR [esi]
c00165d1:	6b c0 28             	imul   eax,eax,0x28
c00165d4:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00165d8:	89 d0                	mov    eax,edx
c00165da:	31 d2                	xor    edx,edx
c00165dc:	52                   	push   edx
c00165dd:	50                   	push   eax
c00165de:	53                   	push   ebx
c00165df:	e8 c2 29 ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c00165e4:	83 c4 0c             	add    esp,0xc
c00165e7:	6a 20                	push   0x20
c00165e9:	6a 00                	push   0x0
c00165eb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00165ef:	52                   	push   edx
c00165f0:	e8 fb 9e fe ff       	call   c00004f0 <memset>
c00165f5:	58                   	pop    eax
c00165f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165f8:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00165fc:	51                   	push   ecx
c00165fd:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016601:	52                   	push   edx
c0016602:	6a 00                	push   0x0
c0016604:	6a 1f                	push   0x1f
c0016606:	53                   	push   ebx
c0016607:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001660a:	83 c4 18             	add    esp,0x18
c001660d:	68 62 cc 02 c0       	push   0xc002cc62
c0016612:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016616:	52                   	push   edx
c0016617:	e8 34 a1 fe ff       	call   c0000750 <strcmp>
c001661c:	83 c4 10             	add    esp,0x10
c001661f:	85 c0                	test   eax,eax
c0016621:	75 0f                	jne    c0016632 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016623:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016626:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001662a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001662e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016632:	50                   	push   eax
c0016633:	50                   	push   eax
c0016634:	68 6a cc 02 c0       	push   0xc002cc6a
c0016639:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001663d:	50                   	push   eax
c001663e:	e8 0d a1 fe ff       	call   c0000750 <strcmp>
c0016643:	83 c4 10             	add    esp,0x10
c0016646:	85 c0                	test   eax,eax
c0016648:	75 0f                	jne    c0016659 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001664a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001664d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016651:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016655:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016659:	45                   	inc    ebp
c001665a:	e9 4c ff ff ff       	jmp    c00165ab <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001665f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016664:	75 10                	jne    c0016676 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016666:	83 ec 0c             	sub    esp,0xc
c0016669:	68 72 cc 02 c0       	push   0xc002cc72
c001666e:	e8 f1 a3 ff ff       	call   c0010a64 <KePanic(char const*)>
c0016673:	83 c4 10             	add    esp,0x10
c0016676:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001667b:	75 10                	jne    c001668d <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001667d:	83 ec 0c             	sub    esp,0xc
c0016680:	68 72 cc 02 c0       	push   0xc002cc72
c0016685:	e8 da a3 ff ff       	call   c0010a64 <KePanic(char const*)>
c001668a:	83 c4 10             	add    esp,0x10
c001668d:	31 d2                	xor    edx,edx
c001668f:	50                   	push   eax
c0016690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016694:	52                   	push   edx
c0016695:	50                   	push   eax
c0016696:	53                   	push   ebx
c0016697:	e8 0a 29 ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c001669c:	5a                   	pop    edx
c001669d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00166a1:	e8 69 9f ff ff       	call   c001060f <malloc>
c00166a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00166aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00166ae:	31 c9                	xor    ecx,ecx
c00166b0:	5e                   	pop    esi
c00166b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166b3:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00166b7:	55                   	push   ebp
c00166b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166bc:	51                   	push   ecx
c00166bd:	52                   	push   edx
c00166be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00166c2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00166c6:	53                   	push   ebx
c00166c7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00166ca:	83 c4 14             	add    esp,0x14
c00166cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00166d1:	e8 39 9f ff ff       	call   c001060f <malloc>
c00166d6:	89 c6                	mov    esi,eax
c00166d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166da:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00166dd:	56                   	push   esi
c00166de:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00166e2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00166e6:	51                   	push   ecx
c00166e7:	52                   	push   edx
c00166e8:	53                   	push   ebx
c00166e9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00166ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166f0:	8b 15 00 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037300
c00166f6:	83 c4 1c             	add    esp,0x1c
c00166f9:	c1 e8 04             	shr    eax,0x4
c00166fc:	89 04 95 a0 72 03 c0 	mov    DWORD PTR [edx*4-0x3ffc8d60],eax
c0016703:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016707:	31 d2                	xor    edx,edx
c0016709:	52                   	push   edx
c001670a:	50                   	push   eax
c001670b:	53                   	push   ebx
c001670c:	e8 95 28 ff ff       	call   c0008fa6 <File::seek(unsigned long long)>
c0016711:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016713:	31 d2                	xor    edx,edx
c0016715:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016718:	56                   	push   esi
c0016719:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001671d:	52                   	push   edx
c001671e:	50                   	push   eax
c001671f:	53                   	push   ebx
c0016720:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016723:	83 c4 14             	add    esp,0x14
c0016726:	53                   	push   ebx
c0016727:	e8 1a 28 ff ff       	call   c0008f46 <File::close()>
c001672c:	5d                   	pop    ebp
c001672d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016731:	e8 e9 9e ff ff       	call   c001061f <free>
c0016736:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016739:	e8 e1 9e ff ff       	call   c001061f <free>
c001673e:	a1 00 73 03 c0       	mov    eax,ds:0xc0037300
c0016743:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016747:	8d 50 01             	lea    edx,[eax+0x1]
c001674a:	89 0c 85 e0 72 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8d20],ecx
c0016751:	89 34 85 c0 72 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8d40],esi
c0016758:	89 15 00 73 03 c0    	mov    DWORD PTR ds:0xc0037300,edx
c001675e:	83 c4 10             	add    esp,0x10
c0016761:	b0 01                	mov    al,0x1
c0016763:	83 c4 5c             	add    esp,0x5c
c0016766:	5b                   	pop    ebx
c0016767:	5e                   	pop    esi
c0016768:	5f                   	pop    edi
c0016769:	5d                   	pop    ebp
c001676a:	c3                   	ret    

c001676b <KeIsELFValid(Elf32_Ehdr*)>:
c001676b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001676f:	31 c0                	xor    eax,eax
c0016771:	80 3a 7f             	cmp    BYTE PTR [edx],0x7f
c0016774:	75 13                	jne    c0016789 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0016776:	80 7a 01 45          	cmp    BYTE PTR [edx+0x1],0x45
c001677a:	75 0d                	jne    c0016789 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c001677c:	80 7a 02 4c          	cmp    BYTE PTR [edx+0x2],0x4c
c0016780:	75 07                	jne    c0016789 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0016782:	80 7a 03 46          	cmp    BYTE PTR [edx+0x3],0x46
c0016786:	0f 94 c0             	sete   al
c0016789:	c3                   	ret    

c001678a <KeGetELFSectionHeader(unsigned char*, int)>:
c001678a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001678e:	6b 54 24 08 28       	imul   edx,DWORD PTR [esp+0x8],0x28
c0016793:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
c0016796:	01 d0                	add    eax,edx
c0016798:	c3                   	ret    

c0016799 <KeGetELFProgramHeader(unsigned char*, int)>:
c0016799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001679d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167a1:	c1 e0 05             	shl    eax,0x5
c00167a4:	03 42 1c             	add    eax,DWORD PTR [edx+0x1c]
c00167a7:	01 d0                	add    eax,edx
c00167a9:	c3                   	ret    

c00167aa <KeLookupELFString(unsigned char*, int)>:
c00167aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00167ae:	31 c0                	xor    eax,eax
c00167b0:	0f b7 51 32          	movzx  edx,WORD PTR [ecx+0x32]
c00167b4:	85 d2                	test   edx,edx
c00167b6:	74 14                	je     c00167cc <KeLookupELFString(unsigned char*, int)+0x22>
c00167b8:	52                   	push   edx
c00167b9:	51                   	push   ecx
c00167ba:	e8 cb ff ff ff       	call   c001678a <KeGetELFSectionHeader(unsigned char*, int)>
c00167bf:	5a                   	pop    edx
c00167c0:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c00167c3:	5a                   	pop    edx
c00167c4:	89 c8                	mov    eax,ecx
c00167c6:	74 04                	je     c00167cc <KeLookupELFString(unsigned char*, int)+0x22>
c00167c8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00167cc:	c3                   	ret    

c00167cd <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>:
c00167cd:	55                   	push   ebp
c00167ce:	57                   	push   edi
c00167cf:	56                   	push   esi
c00167d0:	53                   	push   ebx
c00167d1:	31 db                	xor    ebx,ebx
c00167d3:	83 ec 1c             	sub    esp,0x1c
c00167d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167da:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00167dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167e1:	89 c5                	mov    ebp,eax
c00167e3:	0f b6 44 24 34       	movzx  eax,BYTE PTR [esp+0x34]
c00167e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167f0:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c00167f4:	39 d8                	cmp    eax,ebx
c00167f6:	0f 8e 81 00 00 00    	jle    c001687d <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xb0>
c00167fc:	53                   	push   ebx
c00167fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016801:	e8 93 ff ff ff       	call   c0016799 <KeGetELFProgramHeader(unsigned char*, int)>
c0016806:	5a                   	pop    edx
c0016807:	83 38 01             	cmp    DWORD PTR [eax],0x1
c001680a:	59                   	pop    ecx
c001680b:	75 6a                	jne    c0016877 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c001680d:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0016810:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0016813:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
c0016816:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0016819:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001681d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016822:	75 22                	jne    c0016846 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x79>
c0016824:	83 ec 0c             	sub    esp,0xc
c0016827:	68 8c cc 02 c0       	push   0xc002cc8c
c001682c:	e8 33 a2 ff ff       	call   c0010a64 <KePanic(char const*)>
c0016831:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016835:	01 f2                	add    edx,esi
c0016837:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c001683b:	83 c4 10             	add    esp,0x10
c001683e:	39 d5                	cmp    ebp,edx
c0016840:	73 35                	jae    c0016877 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c0016842:	89 d5                	mov    ebp,edx
c0016844:	eb 31                	jmp    c0016877 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c0016846:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001684a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001684d:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0016851:	01 f2                	add    edx,esi
c0016853:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016857:	89 d7                	mov    edi,edx
c0016859:	03 70 04             	add    esi,DWORD PTR [eax+0x4]
c001685c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001685e:	50                   	push   eax
c001685f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016863:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016867:	50                   	push   eax
c0016868:	6a 00                	push   0x0
c001686a:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c001686e:	52                   	push   edx
c001686f:	e8 7c 9c fe ff       	call   c00004f0 <memset>
c0016874:	83 c4 10             	add    esp,0x10
c0016877:	43                   	inc    ebx
c0016878:	e9 6f ff ff ff       	jmp    c00167ec <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x1f>
c001687d:	83 c4 1c             	add    esp,0x1c
c0016880:	89 e8                	mov    eax,ebp
c0016882:	5b                   	pop    ebx
c0016883:	5e                   	pop    esi
c0016884:	5f                   	pop    edi
c0016885:	5d                   	pop    ebp
c0016886:	c3                   	ret    

c0016887 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>:
c0016887:	57                   	push   edi
c0016888:	56                   	push   esi
c0016889:	53                   	push   ebx
c001688a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001688e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0016892:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016896:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001689a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001689d:	85 db                	test   ebx,ebx
c001689f:	74 04                	je     c00168a5 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c00168a1:	85 c0                	test   eax,eax
c00168a3:	75 05                	jne    c00168aa <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x23>
c00168a5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00168a8:	eb 5c                	jmp    c0016906 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x7f>
c00168aa:	50                   	push   eax
c00168ab:	51                   	push   ecx
c00168ac:	e8 d9 fe ff ff       	call   c001678a <KeGetELFSectionHeader(unsigned char*, int)>
c00168b1:	5f                   	pop    edi
c00168b2:	89 c7                	mov    edi,eax
c00168b4:	5a                   	pop    edx
c00168b5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00168b8:	31 d2                	xor    edx,edx
c00168ba:	f7 77 24             	div    DWORD PTR [edi+0x24]
c00168bd:	39 c3                	cmp    ebx,eax
c00168bf:	73 e4                	jae    c00168a5 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c00168c1:	c1 e3 04             	shl    ebx,0x4
c00168c4:	03 5f 10             	add    ebx,DWORD PTR [edi+0x10]
c00168c7:	01 cb                	add    ebx,ecx
c00168c9:	0f b7 53 0e          	movzx  edx,WORD PTR [ebx+0xe]
c00168cd:	85 d2                	test   edx,edx
c00168cf:	75 39                	jne    c001690a <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x83>
c00168d1:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00168d4:	51                   	push   ecx
c00168d5:	e8 b0 fe ff ff       	call   c001678a <KeGetELFSectionHeader(unsigned char*, int)>
c00168da:	52                   	push   edx
c00168db:	03 0b                	add    ecx,DWORD PTR [ebx]
c00168dd:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c00168e0:	51                   	push   ecx
c00168e1:	e8 78 fb ff ff       	call   c001645e <Thr::getAddressOfKernelSymbol(char const*)>
c00168e6:	83 c4 10             	add    esp,0x10
c00168e9:	85 c0                	test   eax,eax
c00168eb:	75 32                	jne    c001691f <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c00168ed:	f6 43 0c 20          	test   BYTE PTR [ebx+0xc],0x20
c00168f1:	75 03                	jne    c00168f6 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x6f>
c00168f3:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00168f6:	83 ec 0c             	sub    esp,0xc
c00168f9:	68 b5 cc 02 c0       	push   0xc002ccb5
c00168fe:	e8 79 06 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016903:	83 c4 10             	add    esp,0x10
c0016906:	31 c0                	xor    eax,eax
c0016908:	eb 15                	jmp    c001691f <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c001690a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001690d:	81 fa f1 ff 00 00    	cmp    edx,0xfff1
c0016913:	74 0a                	je     c001691f <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0016915:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016919:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c001691d:	01 d0                	add    eax,edx
c001691f:	5b                   	pop    ebx
c0016920:	5e                   	pop    esi
c0016921:	5f                   	pop    edi
c0016922:	c3                   	ret    

c0016923 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>:
c0016923:	55                   	push   ebp
c0016924:	57                   	push   edi
c0016925:	56                   	push   esi
c0016926:	53                   	push   ebx
c0016927:	83 ec 1c             	sub    esp,0x1c
c001692a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001692e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016932:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016936:	8b 69 18             	mov    ebp,DWORD PTR [ecx+0x18]
c0016939:	8b 1e                	mov    ebx,DWORD PTR [esi]
c001693b:	29 ef                	sub    edi,ebp
c001693d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0016940:	01 fb                	add    ebx,edi
c0016942:	c1 ea 08             	shr    edx,0x8
c0016945:	74 2d                	je     c0016974 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x51>
c0016947:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001694c:	50                   	push   eax
c001694d:	50                   	push   eax
c001694e:	55                   	push   ebp
c001694f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016953:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0016957:	50                   	push   eax
c0016958:	52                   	push   edx
c0016959:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001695d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016960:	51                   	push   ecx
c0016961:	e8 21 ff ff ff       	call   c0016887 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>
c0016966:	83 c4 20             	add    esp,0x20
c0016969:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001696e:	74 06                	je     c0016976 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x53>
c0016970:	31 c0                	xor    eax,eax
c0016972:	eb 27                	jmp    c001699b <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0016974:	31 c0                	xor    eax,eax
c0016976:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c001697a:	83 fa 01             	cmp    edx,0x1
c001697d:	75 04                	jne    c0016983 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x60>
c001697f:	01 03                	add    DWORD PTR [ebx],eax
c0016981:	eb 16                	jmp    c0016999 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c0016983:	83 fa 02             	cmp    edx,0x2
c0016986:	75 08                	jne    c0016990 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x6d>
c0016988:	03 03                	add    eax,DWORD PTR [ebx]
c001698a:	29 d8                	sub    eax,ebx
c001698c:	89 03                	mov    DWORD PTR [ebx],eax
c001698e:	eb 09                	jmp    c0016999 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c0016990:	31 c0                	xor    eax,eax
c0016992:	83 fa 08             	cmp    edx,0x8
c0016995:	75 04                	jne    c001699b <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0016997:	01 3b                	add    DWORD PTR [ebx],edi
c0016999:	b0 01                	mov    al,0x1
c001699b:	83 c4 1c             	add    esp,0x1c
c001699e:	5b                   	pop    ebx
c001699f:	5e                   	pop    esi
c00169a0:	5f                   	pop    edi
c00169a1:	5d                   	pop    ebp
c00169a2:	c3                   	ret    

c00169a3 <KePerformRelocations(unsigned char*, unsigned long)>:
c00169a3:	55                   	push   ebp
c00169a4:	31 ed                	xor    ebp,ebp
c00169a6:	57                   	push   edi
c00169a7:	56                   	push   esi
c00169a8:	53                   	push   ebx
c00169a9:	83 ec 1c             	sub    esp,0x1c
c00169ac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169b0:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c00169b4:	39 e8                	cmp    eax,ebp
c00169b6:	0f 8e 92 00 00 00    	jle    c0016a4e <KePerformRelocations(unsigned char*, unsigned long)+0xab>
c00169bc:	55                   	push   ebp
c00169bd:	56                   	push   esi
c00169be:	e8 c7 fd ff ff       	call   c001678a <KeGetELFSectionHeader(unsigned char*, int)>
c00169c3:	5a                   	pop    edx
c00169c4:	89 c3                	mov    ebx,eax
c00169c6:	59                   	pop    ecx
c00169c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00169ca:	83 f8 09             	cmp    eax,0x9
c00169cd:	75 64                	jne    c0016a33 <KePerformRelocations(unsigned char*, unsigned long)+0x90>
c00169cf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00169d2:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00169d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169d9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169e0:	ff 33                	push   DWORD PTR [ebx]
c00169e2:	56                   	push   esi
c00169e3:	e8 c2 fd ff ff       	call   c00167aa <KeLookupELFString(unsigned char*, int)>
c00169e8:	68 d6 cc 02 c0       	push   0xc002ccd6
c00169ed:	50                   	push   eax
c00169ee:	e8 5d 9d fe ff       	call   c0000750 <strcmp>
c00169f3:	83 c4 10             	add    esp,0x10
c00169f6:	89 c1                	mov    ecx,eax
c00169f8:	85 c0                	test   eax,eax
c00169fa:	75 4c                	jne    c0016a48 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c00169fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a00:	31 d2                	xor    edx,edx
c0016a02:	01 f7                	add    edi,esi
c0016a04:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0016a08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a0c:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0016a10:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016a14:	7d 32                	jge    c0016a48 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0016a16:	57                   	push   edi
c0016a17:	83 c7 08             	add    edi,0x8
c0016a1a:	53                   	push   ebx
c0016a1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a1f:	56                   	push   esi
c0016a20:	e8 fe fe ff ff       	call   c0016923 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>
c0016a25:	83 c4 10             	add    esp,0x10
c0016a28:	84 c0                	test   al,al
c0016a2a:	74 24                	je     c0016a50 <KePerformRelocations(unsigned char*, unsigned long)+0xad>
c0016a2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016a30:	41                   	inc    ecx
c0016a31:	eb d9                	jmp    c0016a0c <KePerformRelocations(unsigned char*, unsigned long)+0x69>
c0016a33:	83 f8 04             	cmp    eax,0x4
c0016a36:	75 10                	jne    c0016a48 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0016a38:	83 ec 0c             	sub    esp,0xc
c0016a3b:	68 df cc 02 c0       	push   0xc002ccdf
c0016a40:	e8 1f a0 ff ff       	call   c0010a64 <KePanic(char const*)>
c0016a45:	83 c4 10             	add    esp,0x10
c0016a48:	45                   	inc    ebp
c0016a49:	e9 62 ff ff ff       	jmp    c00169b0 <KePerformRelocations(unsigned char*, unsigned long)+0xd>
c0016a4e:	b0 01                	mov    al,0x1
c0016a50:	83 c4 1c             	add    esp,0x1c
c0016a53:	5b                   	pop    ebx
c0016a54:	5e                   	pop    esi
c0016a55:	5f                   	pop    edi
c0016a56:	5d                   	pop    ebp
c0016a57:	c3                   	ret    

c0016a58 <KeLoadELF(unsigned char*, bool, unsigned long)>:
c0016a58:	57                   	push   edi
c0016a59:	56                   	push   esi
c0016a5a:	53                   	push   ebx
c0016a5b:	83 ec 10             	sub    esp,0x10
c0016a5e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016a62:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016a66:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016a6a:	53                   	push   ebx
c0016a6b:	e8 fb fc ff ff       	call   c001676b <KeIsELFValid(Elf32_Ehdr*)>
c0016a70:	59                   	pop    ecx
c0016a71:	84 c0                	test   al,al
c0016a73:	75 04                	jne    c0016a79 <KeLoadELF(unsigned char*, bool, unsigned long)+0x21>
c0016a75:	31 c0                	xor    eax,eax
c0016a77:	eb 4d                	jmp    c0016ac6 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0016a79:	81 e6 ff 00 00 00    	and    esi,0xff
c0016a7f:	74 07                	je     c0016a88 <KeLoadELF(unsigned char*, bool, unsigned long)+0x30>
c0016a81:	66 83 7b 30 00       	cmp    WORD PTR [ebx+0x30],0x0
c0016a86:	74 ed                	je     c0016a75 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0016a88:	66 83 7b 2c 00       	cmp    WORD PTR [ebx+0x2c],0x0
c0016a8d:	74 e6                	je     c0016a75 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0016a8f:	52                   	push   edx
c0016a90:	57                   	push   edi
c0016a91:	56                   	push   esi
c0016a92:	53                   	push   ebx
c0016a93:	e8 35 fd ff ff       	call   c00167cd <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>
c0016a98:	59                   	pop    ecx
c0016a99:	5a                   	pop    edx
c0016a9a:	50                   	push   eax
c0016a9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a9f:	68 00 cd 02 c0       	push   0xc002cd00
c0016aa4:	e8 d3 04 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016aa9:	83 c4 10             	add    esp,0x10
c0016aac:	85 f6                	test   esi,esi
c0016aae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ab2:	74 12                	je     c0016ac6 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0016ab4:	50                   	push   eax
c0016ab5:	50                   	push   eax
c0016ab6:	57                   	push   edi
c0016ab7:	53                   	push   ebx
c0016ab8:	e8 e6 fe ff ff       	call   c00169a3 <KePerformRelocations(unsigned char*, unsigned long)>
c0016abd:	83 c4 10             	add    esp,0x10
c0016ac0:	84 c0                	test   al,al
c0016ac2:	74 b1                	je     c0016a75 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0016ac4:	89 f8                	mov    eax,edi
c0016ac6:	83 c4 10             	add    esp,0x10
c0016ac9:	5b                   	pop    ebx
c0016aca:	5e                   	pop    esi
c0016acb:	5f                   	pop    edi
c0016acc:	c3                   	ret    

c0016acd <KeLoadDriver(char const*)>:
c0016acd:	57                   	push   edi
c0016ace:	56                   	push   esi
c0016acf:	53                   	push   ebx
c0016ad0:	83 ec 28             	sub    esp,0x28
c0016ad3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016ad7:	57                   	push   edi
c0016ad8:	68 24 cd 02 c0       	push   0xc002cd24
c0016add:	e8 9a 04 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016ae2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016ae9:	e8 21 9b ff ff       	call   c001060f <malloc>
c0016aee:	83 c4 0c             	add    esp,0xc
c0016af1:	89 c3                	mov    ebx,eax
c0016af3:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c0016af9:	57                   	push   edi
c0016afa:	50                   	push   eax
c0016afb:	e8 ca 23 ff ff       	call   c0008eca <File::File(char const*, Process*)>
c0016b00:	83 c4 10             	add    esp,0x10
c0016b03:	85 db                	test   ebx,ebx
c0016b05:	0f 84 20 01 00 00    	je     c0016c2b <KeLoadDriver(char const*)+0x15e>
c0016b0b:	50                   	push   eax
c0016b0c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016b10:	50                   	push   eax
c0016b11:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016b15:	50                   	push   eax
c0016b16:	53                   	push   ebx
c0016b17:	e8 ce 26 ff ff       	call   c00091ea <File::stat(unsigned long long*, bool*)>
c0016b1c:	83 c4 10             	add    esp,0x10
c0016b1f:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016b24:	0f 85 01 01 00 00    	jne    c0016c2b <KeLoadDriver(char const*)+0x15e>
c0016b2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b32:	89 d1                	mov    ecx,edx
c0016b34:	09 c1                	or     ecx,eax
c0016b36:	0f 84 ef 00 00 00    	je     c0016c2b <KeLoadDriver(char const*)+0x15e>
c0016b3c:	05 ff 0f 00 00       	add    eax,0xfff
c0016b41:	83 d2 00             	adc    edx,0x0
c0016b44:	51                   	push   ecx
c0016b45:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016b49:	6a 03                	push   0x3
c0016b4b:	50                   	push   eax
c0016b4c:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c0016b52:	e8 8b dc ff ff       	call   c00147e2 <VAS::allocatePages(int, int)>
c0016b57:	83 c4 0c             	add    esp,0xc
c0016b5a:	89 c6                	mov    esi,eax
c0016b5c:	50                   	push   eax
c0016b5d:	57                   	push   edi
c0016b5e:	68 3a cd 02 c0       	push   0xc002cd3a
c0016b63:	e8 14 04 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016b68:	5f                   	pop    edi
c0016b69:	58                   	pop    eax
c0016b6a:	6a 01                	push   0x1
c0016b6c:	53                   	push   ebx
c0016b6d:	e8 76 23 ff ff       	call   c0008ee8 <File::open(FileOpenMode)>
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	85 c0                	test   eax,eax
c0016b77:	74 11                	je     c0016b8a <KeLoadDriver(char const*)+0xbd>
c0016b79:	83 ec 0c             	sub    esp,0xc
c0016b7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b7e:	53                   	push   ebx
c0016b7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b82:	83 c4 10             	add    esp,0x10
c0016b85:	e9 a1 00 00 00       	jmp    c0016c2b <KeLoadDriver(char const*)+0x15e>
c0016b8a:	83 ec 0c             	sub    esp,0xc
c0016b8d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016b91:	e8 79 9a ff ff       	call   c001060f <malloc>
c0016b96:	5a                   	pop    edx
c0016b97:	89 c7                	mov    edi,eax
c0016b99:	8d 54 24 20          	lea    edx,[esp+0x20]
c0016b9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b9f:	52                   	push   edx
c0016ba0:	57                   	push   edi
c0016ba1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ba5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ba9:	53                   	push   ebx
c0016baa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016bad:	83 c4 14             	add    esp,0x14
c0016bb0:	53                   	push   ebx
c0016bb1:	31 db                	xor    ebx,ebx
c0016bb3:	e8 8e 23 ff ff       	call   c0008f46 <File::close()>
c0016bb8:	83 c4 0c             	add    esp,0xc
c0016bbb:	56                   	push   esi
c0016bbc:	6a 01                	push   0x1
c0016bbe:	57                   	push   edi
c0016bbf:	e8 94 fe ff ff       	call   c0016a58 <KeLoadELF(unsigned char*, bool, unsigned long)>
c0016bc4:	83 c4 10             	add    esp,0x10
c0016bc7:	89 c7                	mov    edi,eax
c0016bc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016bcd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016bd1:	05 ff 0f 00 00       	add    eax,0xfff
c0016bd6:	83 d2 00             	adc    edx,0x0
c0016bd9:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016bdd:	c1 ea 0c             	shr    edx,0xc
c0016be0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016be4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016be8:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0016bec:	ba 00 00 00 00       	mov    edx,0x0
c0016bf1:	89 d0                	mov    eax,edx
c0016bf3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0016bf7:	73 34                	jae    c0016c2d <KeLoadDriver(char const*)+0x160>
c0016bf9:	50                   	push   eax
c0016bfa:	50                   	push   eax
c0016bfb:	89 d8                	mov    eax,ebx
c0016bfd:	c1 e0 0c             	shl    eax,0xc
c0016c00:	01 f0                	add    eax,esi
c0016c02:	50                   	push   eax
c0016c03:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c0016c09:	e8 d6 d6 ff ff       	call   c00142e4 <VAS::getPageTableEntry(unsigned long)>
c0016c0e:	83 c4 10             	add    esp,0x10
c0016c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c13:	a8 60                	test   al,0x60
c0016c15:	75 11                	jne    c0016c28 <KeLoadDriver(char const*)+0x15b>
c0016c17:	83 ec 0c             	sub    esp,0xc
c0016c1a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016c1f:	50                   	push   eax
c0016c20:	e8 ca 9f ff ff       	call   c0010bef <Phys::freePage(unsigned long)>
c0016c25:	83 c4 10             	add    esp,0x10
c0016c28:	43                   	inc    ebx
c0016c29:	eb 9e                	jmp    c0016bc9 <KeLoadDriver(char const*)+0xfc>
c0016c2b:	31 ff                	xor    edi,edi
c0016c2d:	83 c4 20             	add    esp,0x20
c0016c30:	89 f8                	mov    eax,edi
c0016c32:	5b                   	pop    ebx
c0016c33:	5e                   	pop    esi
c0016c34:	5f                   	pop    edi
c0016c35:	c3                   	ret    

c0016c36 <KeExecuteDriver(unsigned long, void*)>:
c0016c36:	56                   	push   esi
c0016c37:	53                   	push   ebx
c0016c38:	51                   	push   ecx
c0016c39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016c3d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016c41:	85 db                	test   ebx,ebx
c0016c43:	75 10                	jne    c0016c55 <KeExecuteDriver(unsigned long, void*)+0x1f>
c0016c45:	83 ec 0c             	sub    esp,0xc
c0016c48:	68 46 cd 02 c0       	push   0xc002cd46
c0016c4d:	e8 12 9e ff ff       	call   c0010a64 <KePanic(char const*)>
c0016c52:	83 c4 10             	add    esp,0x10
c0016c55:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0016c59:	89 d8                	mov    eax,ebx
c0016c5b:	5a                   	pop    edx
c0016c5c:	5b                   	pop    ebx
c0016c5d:	5e                   	pop    esi
c0016c5e:	ff e0                	jmp    eax

c0016c60 <KeLoadAndExecuteDriver(char const*, void*, bool)>:
c0016c60:	57                   	push   edi
c0016c61:	56                   	push   esi
c0016c62:	53                   	push   ebx
c0016c63:	81 ec 0c 01 00 00    	sub    esp,0x10c
c0016c69:	8b b4 24 1c 01 00 00 	mov    esi,DWORD PTR [esp+0x11c]
c0016c70:	8b bc 24 24 01 00 00 	mov    edi,DWORD PTR [esp+0x124]
c0016c77:	56                   	push   esi
c0016c78:	e8 50 fe ff ff       	call   c0016acd <KeLoadDriver(char const*)>
c0016c7d:	83 c4 10             	add    esp,0x10
c0016c80:	85 c0                	test   eax,eax
c0016c82:	74 16                	je     c0016c9a <KeLoadAndExecuteDriver(char const*, void*, bool)+0x3a>
c0016c84:	53                   	push   ebx
c0016c85:	53                   	push   ebx
c0016c86:	b3 01                	mov    bl,0x1
c0016c88:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0016c8f:	50                   	push   eax
c0016c90:	e8 a1 ff ff ff       	call   c0016c36 <KeExecuteDriver(unsigned long, void*)>
c0016c95:	83 c4 10             	add    esp,0x10
c0016c98:	eb 2d                	jmp    c0016cc7 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0016c9a:	89 fb                	mov    ebx,edi
c0016c9c:	84 db                	test   bl,bl
c0016c9e:	74 27                	je     c0016cc7 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0016ca0:	50                   	push   eax
c0016ca1:	50                   	push   eax
c0016ca2:	68 70 cd 02 c0       	push   0xc002cd70
c0016ca7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0016cab:	53                   	push   ebx
c0016cac:	e8 8f 99 fe ff       	call   c0000640 <strcpy>
c0016cb1:	5a                   	pop    edx
c0016cb2:	59                   	pop    ecx
c0016cb3:	56                   	push   esi
c0016cb4:	53                   	push   ebx
c0016cb5:	e8 86 9b fe ff       	call   c0000840 <strcat>
c0016cba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016cbd:	e8 a2 9d ff ff       	call   c0010a64 <KePanic(char const*)>
c0016cc2:	31 db                	xor    ebx,ebx
c0016cc4:	83 c4 10             	add    esp,0x10
c0016cc7:	81 c4 00 01 00 00    	add    esp,0x100
c0016ccd:	88 d8                	mov    al,bl
c0016ccf:	5b                   	pop    ebx
c0016cd0:	5e                   	pop    esi
c0016cd1:	5f                   	pop    edi
c0016cd2:	c3                   	ret    

c0016cd3 <KeProcessExec(Process*, char const*)>:
c0016cd3:	56                   	push   esi
c0016cd4:	53                   	push   ebx
c0016cd5:	83 ec 04             	sub    esp,0x4
c0016cd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016cdc:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016ce2:	85 f6                	test   esi,esi
c0016ce4:	74 16                	je     c0016cfc <KeProcessExec(Process*, char const*)+0x29>
c0016ce6:	83 ec 0c             	sub    esp,0xc
c0016ce9:	56                   	push   esi
c0016cea:	e8 87 d8 ff ff       	call   c0014576 <VAS::~VAS()>
c0016cef:	58                   	pop    eax
c0016cf0:	5a                   	pop    edx
c0016cf1:	6a 14                	push   0x14
c0016cf3:	56                   	push   esi
c0016cf4:	e8 1f 74 ff ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0016cf9:	83 c4 10             	add    esp,0x10
c0016cfc:	83 ec 0c             	sub    esp,0xc
c0016cff:	6a 14                	push   0x14
c0016d01:	e8 09 99 ff ff       	call   c001060f <malloc>
c0016d06:	89 c6                	mov    esi,eax
c0016d08:	58                   	pop    eax
c0016d09:	5a                   	pop    edx
c0016d0a:	6a 00                	push   0x0
c0016d0c:	56                   	push   esi
c0016d0d:	e8 04 dd ff ff       	call   c0014a16 <VAS::VAS(bool)>
c0016d12:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0016d18:	59                   	pop    ecx
c0016d19:	5e                   	pop    esi
c0016d1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d1e:	50                   	push   eax
c0016d1f:	53                   	push   ebx
c0016d20:	e8 8e f4 ff ff       	call   c00161b3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016d25:	83 c4 14             	add    esp,0x14
c0016d28:	31 c0                	xor    eax,eax
c0016d2a:	5b                   	pop    ebx
c0016d2b:	5e                   	pop    esi
c0016d2c:	c3                   	ret    
c0016d2d:	66 90                	xchg   ax,ax
c0016d2f:	90                   	nop

c0016d30 <userModeEntryPoint(void*)>:
c0016d30:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0016d38:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0016d3d:	85 c0                	test   eax,eax
c0016d3f:	75 03                	jne    c0016d44 <userModeEntryPoint(void*)+0x14>
c0016d41:	fb                   	sti    
c0016d42:	66 90                	xchg   ax,ax
c0016d44:	fb                   	sti    
c0016d45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d4d:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0016d53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d57:	e9 e3 94 fe ff       	jmp    c000023f <goToUsermode>

c0016d5c <changeTSS>:
c0016d5c:	83 ec 14             	sub    esp,0x14
c0016d5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d64:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0016d67:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016d6c:	c1 e2 15             	shl    edx,0x15
c0016d6f:	29 d0                	sub    eax,edx
c0016d71:	50                   	push   eax
c0016d72:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0016d77:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d7d:	05 68 11 00 00       	add    eax,0x1168
c0016d82:	50                   	push   eax
c0016d83:	e8 34 cb ff ff       	call   c00138bc <TSS::setESP(unsigned long)>
c0016d88:	83 c4 1c             	add    esp,0x1c
c0016d8b:	c3                   	ret    

c0016d8c <switchToThread(ThreadControlBlock*)>:
c0016d8c:	57                   	push   edi
c0016d8d:	8b 0d 2c 73 03 c0    	mov    ecx,DWORD PTR ds:0xc003732c
c0016d93:	56                   	push   esi
c0016d94:	85 c9                	test   ecx,ecx
c0016d96:	53                   	push   ebx
c0016d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016d9b:	0f 85 9b 00 00 00    	jne    c0016e3c <switchToThread(ThreadControlBlock*)+0xb0>
c0016da1:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016da5:	81 fa ff 00 00 00    	cmp    edx,0xff
c0016dab:	0f 84 87 00 00 00    	je     c0016e38 <switchToThread(ThreadControlBlock*)+0xac>
c0016db1:	b8 00 04 00 00       	mov    eax,0x400
c0016db6:	29 d0                	sub    eax,edx
c0016db8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0016dbb:	d1 f8                	sar    eax,1
c0016dbd:	01 d0                	add    eax,edx
c0016dbf:	90                   	nop
c0016dc0:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016dc3:	e8 33 49 00 00       	call   c001b6fb <HalQueryPerformanceCounter()>
c0016dc8:	a3 70 73 03 c0       	mov    ds:0xc0037370,eax
c0016dcd:	89 15 74 73 03 c0    	mov    DWORD PTR ds:0xc0037374,edx
c0016dd3:	89 c6                	mov    esi,eax
c0016dd5:	89 d7                	mov    edi,edx
c0016dd7:	2b 35 60 73 03 c0    	sub    esi,DWORD PTR ds:0xc0037360
c0016ddd:	a3 60 73 03 c0       	mov    ds:0xc0037360,eax
c0016de2:	1b 3d 64 73 03 c0    	sbb    edi,DWORD PTR ds:0xc0037364
c0016de8:	89 35 68 73 03 c0    	mov    DWORD PTR ds:0xc0037368,esi
c0016dee:	89 3d 6c 73 03 c0    	mov    DWORD PTR ds:0xc003736c,edi
c0016df4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016dfa:	89 15 64 73 03 c0    	mov    DWORD PTR ds:0xc0037364,edx
c0016e00:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016e03:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016e06:	01 c6                	add    esi,eax
c0016e08:	11 d7                	adc    edi,edx
c0016e0a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016e0d:	83 ec 0c             	sub    esp,0xc
c0016e10:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016e13:	53                   	push   ebx
c0016e14:	e8 5e 94 fe ff       	call   c0000277 <switchToThreadASM>
c0016e19:	0f 20 c0             	mov    eax,cr0
c0016e1c:	83 c8 08             	or     eax,0x8
c0016e1f:	0f 22 c0             	mov    cr0,eax
c0016e22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e27:	83 c4 10             	add    esp,0x10
c0016e2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e2e:	5b                   	pop    ebx
c0016e2f:	5e                   	pop    esi
c0016e30:	5f                   	pop    edi
c0016e31:	e9 fa ef ff ff       	jmp    c0015e30 <KeCheckAlarm(ThreadControlBlock*)>
c0016e36:	66 90                	xchg   ax,ax
c0016e38:	31 c0                	xor    eax,eax
c0016e3a:	eb 84                	jmp    c0016dc0 <switchToThread(ThreadControlBlock*)+0x34>
c0016e3c:	5b                   	pop    ebx
c0016e3d:	c7 05 28 73 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x1
c0016e47:	5e                   	pop    esi
c0016e48:	5f                   	pop    edi
c0016e49:	c3                   	ret    
c0016e4a:	66 90                	xchg   ax,ax

c0016e4c <Process::addArgs(char**)>:
c0016e4c:	57                   	push   edi
c0016e4d:	56                   	push   esi
c0016e4e:	53                   	push   ebx
c0016e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016e57:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c0016e61:	85 ff                	test   edi,edi
c0016e63:	74 4f                	je     c0016eb4 <Process::addArgs(char**)+0x68>
c0016e65:	8b 07                	mov    eax,DWORD PTR [edi]
c0016e67:	85 c0                	test   eax,eax
c0016e69:	74 49                	je     c0016eb4 <Process::addArgs(char**)+0x68>
c0016e6b:	31 db                	xor    ebx,ebx
c0016e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e70:	83 ec 0c             	sub    esp,0xc
c0016e73:	50                   	push   eax
c0016e74:	e8 f7 96 fe ff       	call   c0000570 <strlen>
c0016e79:	83 c0 01             	add    eax,0x1
c0016e7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e7f:	e8 8b 97 ff ff       	call   c001060f <malloc>
c0016e84:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c0016e8b:	5a                   	pop    edx
c0016e8c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0016e8f:	59                   	pop    ecx
c0016e90:	83 c3 01             	add    ebx,0x1
c0016e93:	52                   	push   edx
c0016e94:	50                   	push   eax
c0016e95:	e8 a6 97 fe ff       	call   c0000640 <strcpy>
c0016e9a:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c0016ea0:	83 c4 10             	add    esp,0x10
c0016ea3:	83 c1 01             	add    ecx,0x1
c0016ea6:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c0016eac:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0016eaf:	85 c0                	test   eax,eax
c0016eb1:	75 bd                	jne    c0016e70 <Process::addArgs(char**)+0x24>
c0016eb3:	90                   	nop
c0016eb4:	5b                   	pop    ebx
c0016eb5:	5e                   	pop    esi
c0016eb6:	5f                   	pop    edi
c0016eb7:	c3                   	ret    

c0016eb8 <Process::Process(char const*, Process*, char**)>:
c0016eb8:	56                   	push   esi
c0016eb9:	53                   	push   ebx
c0016eba:	83 ec 14             	sub    esp,0x14
c0016ebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ec1:	05 0c 02 00 00       	add    eax,0x20c
c0016ec6:	bb 07 00 00 00       	mov    ebx,0x7
c0016ecb:	89 c6                	mov    esi,eax
c0016ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed0:	85 db                	test   ebx,ebx
c0016ed2:	78 14                	js     c0016ee8 <Process::Process(char const*, Process*, char**)+0x30>
c0016ed4:	83 ec 0c             	sub    esp,0xc
c0016ed7:	56                   	push   esi
c0016ed8:	e8 9f 2d 01 00       	call   c0029c7c <ThreadControlBlock::ThreadControlBlock()>
c0016edd:	83 c4 10             	add    esp,0x10
c0016ee0:	83 c6 73             	add    esi,0x73
c0016ee3:	83 eb 01             	sub    ebx,0x1
c0016ee6:	eb e8                	jmp    c0016ed0 <Process::Process(char const*, Process*, char**)+0x18>
c0016ee8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eec:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016ef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef7:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016efe:	83 ec 0c             	sub    esp,0xc
c0016f01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f05:	e8 4a 84 ff ff       	call   c000f354 <KeNewProcessEnv(Process*)>
c0016f0a:	83 c4 10             	add    esp,0x10
c0016f0d:	89 c2                	mov    edx,eax
c0016f0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f13:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f1d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016f26:	a1 3c 0c 03 c0       	mov    eax,ds:0xc0030c3c
c0016f2b:	8d 50 01             	lea    edx,[eax+0x1]
c0016f2e:	89 15 3c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c3c,edx
c0016f34:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016f38:	89 02                	mov    DWORD PTR [edx],eax
c0016f3a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016f42:	83 ec 0c             	sub    esp,0xc
c0016f45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f49:	e8 c1 96 ff ff       	call   c001060f <malloc>
c0016f4e:	83 c4 10             	add    esp,0x10
c0016f51:	89 c3                	mov    ebx,eax
c0016f53:	83 ec 08             	sub    esp,0x8
c0016f56:	6a 00                	push   0x0
c0016f58:	53                   	push   ebx
c0016f59:	e8 b8 da ff ff       	call   c0014a16 <VAS::VAS(bool)>
c0016f5e:	83 c4 10             	add    esp,0x10
c0016f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f65:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f6f:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016f81:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016f87:	e8 4b ac ff ff       	call   c0011bd7 <KeInitSignals()>
c0016f8c:	89 c2                	mov    edx,eax
c0016f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f92:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016fa2:	85 c0                	test   eax,eax
c0016fa4:	74 42                	je     c0016fe8 <Process::Process(char const*, Process*, char**)+0x130>
c0016fa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016faa:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016fb0:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fba:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc4:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016fca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd4:	05 0c 01 00 00       	add    eax,0x10c
c0016fd9:	83 ec 08             	sub    esp,0x8
c0016fdc:	52                   	push   edx
c0016fdd:	50                   	push   eax
c0016fde:	e8 5d 96 fe ff       	call   c0000640 <strcpy>
c0016fe3:	83 c4 10             	add    esp,0x10
c0016fe6:	eb 7c                	jmp    c0017064 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016fe8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016ff0:	83 ec 0c             	sub    esp,0xc
c0016ff3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ff7:	e8 13 96 ff ff       	call   c001060f <malloc>
c0016ffc:	83 c4 10             	add    esp,0x10
c0016fff:	89 c3                	mov    ebx,eax
c0017001:	83 ec 08             	sub    esp,0x8
c0017004:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017008:	53                   	push   ebx
c0017009:	e8 ae c5 ff ff       	call   c00135bc <VgaText::VgaText(char const*)>
c001700e:	83 c4 10             	add    esp,0x10
c0017011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017015:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c001701b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017025:	83 ec 0c             	sub    esp,0xc
c0017028:	50                   	push   eax
c0017029:	e8 e4 bd ff ff       	call   c0012e12 <addToTerminalCycle(VgaText*)>
c001702e:	83 c4 10             	add    esp,0x10
c0017031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017035:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001703b:	83 ec 0c             	sub    esp,0xc
c001703e:	50                   	push   eax
c001703f:	e8 3f c0 ff ff       	call   c0013083 <setActiveTerminal(VgaText*)>
c0017044:	83 c4 10             	add    esp,0x10
c0017047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704b:	05 0c 01 00 00       	add    eax,0x10c
c0017050:	83 ec 08             	sub    esp,0x8
c0017053:	68 84 cd 02 c0       	push   0xc002cd84
c0017058:	50                   	push   eax
c0017059:	e8 e2 95 fe ff       	call   c0000640 <strcpy>
c001705e:	83 c4 10             	add    esp,0x10
c0017061:	8d 76 00             	lea    esi,[esi+0x0]
c0017064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017068:	83 c0 0c             	add    eax,0xc
c001706b:	83 ec 08             	sub    esp,0x8
c001706e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017072:	50                   	push   eax
c0017073:	e8 c8 95 fe ff       	call   c0000640 <strcpy>
c0017078:	83 c4 10             	add    esp,0x10
c001707b:	83 ec 08             	sub    esp,0x8
c001707e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017082:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017086:	e8 c1 fd ff ff       	call   c0016e4c <Process::addArgs(char**)>
c001708b:	83 c4 10             	add    esp,0x10
c001708e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017092:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0017098:	83 e2 7f             	and    edx,0x7f
c001709b:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c00170a1:	83 ec 08             	sub    esp,0x8
c00170a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170ac:	e8 02 f1 ff ff       	call   c00161b3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00170b1:	83 c4 10             	add    esp,0x10
c00170b4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00170b8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00170bc:	83 f0 01             	xor    eax,0x1
c00170bf:	88 c2                	mov    dl,al
c00170c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c5:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c00170cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00170d1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00170d6:	52                   	push   edx
c00170d7:	50                   	push   eax
c00170d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170dc:	68 f0 cd 02 c0       	push   0xc002cdf0
c00170e1:	e8 96 fe fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00170e6:	83 c4 10             	add    esp,0x10
c00170e9:	90                   	nop
c00170ea:	83 c4 14             	add    esp,0x14
c00170ed:	5b                   	pop    ebx
c00170ee:	5e                   	pop    esi
c00170ef:	c3                   	ret    

c00170f0 <Process::Process(bool, char const*, Process*, char**)>:
c00170f0:	56                   	push   esi
c00170f1:	53                   	push   ebx
c00170f2:	83 ec 24             	sub    esp,0x24
c00170f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170f9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017101:	05 0c 02 00 00       	add    eax,0x20c
c0017106:	bb 07 00 00 00       	mov    ebx,0x7
c001710b:	89 c6                	mov    esi,eax
c001710d:	8d 76 00             	lea    esi,[esi+0x0]
c0017110:	85 db                	test   ebx,ebx
c0017112:	78 14                	js     c0017128 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017114:	83 ec 0c             	sub    esp,0xc
c0017117:	56                   	push   esi
c0017118:	e8 5f 2b 01 00       	call   c0029c7c <ThreadControlBlock::ThreadControlBlock()>
c001711d:	83 c4 10             	add    esp,0x10
c0017120:	83 c6 73             	add    esi,0x73
c0017123:	83 eb 01             	sub    ebx,0x1
c0017126:	eb e8                	jmp    c0017110 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001712c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0017133:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017137:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001713e:	83 ec 0c             	sub    esp,0xc
c0017141:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017145:	e8 0a 82 ff ff       	call   c000f354 <KeNewProcessEnv(Process*)>
c001714a:	83 c4 10             	add    esp,0x10
c001714d:	89 c2                	mov    edx,eax
c001714f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017153:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0017159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001715d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0017166:	a1 3c 0c 03 c0       	mov    eax,ds:0xc0030c3c
c001716b:	8d 50 01             	lea    edx,[eax+0x1]
c001716e:	89 15 3c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c3c,edx
c0017174:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017178:	89 02                	mov    DWORD PTR [edx],eax
c001717a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017182:	83 ec 0c             	sub    esp,0xc
c0017185:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017189:	e8 81 94 ff ff       	call   c001060f <malloc>
c001718e:	83 c4 10             	add    esp,0x10
c0017191:	89 c3                	mov    ebx,eax
c0017193:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017198:	83 ec 08             	sub    esp,0x8
c001719b:	50                   	push   eax
c001719c:	53                   	push   ebx
c001719d:	e8 74 d8 ff ff       	call   c0014a16 <VAS::VAS(bool)>
c00171a2:	83 c4 10             	add    esp,0x10
c00171a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171a9:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00171af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171b3:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00171bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171c1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00171c5:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00171cb:	e8 07 aa ff ff       	call   c0011bd7 <KeInitSignals()>
c00171d0:	89 c2                	mov    edx,eax
c00171d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171d6:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c00171dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171e0:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00171e6:	85 c0                	test   eax,eax
c00171e8:	74 42                	je     c001722c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00171ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171ee:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00171f4:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00171fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171fe:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0017204:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017208:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001720e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017218:	05 0c 01 00 00       	add    eax,0x10c
c001721d:	83 ec 08             	sub    esp,0x8
c0017220:	52                   	push   edx
c0017221:	50                   	push   eax
c0017222:	e8 19 94 fe ff       	call   c0000640 <strcpy>
c0017227:	83 c4 10             	add    esp,0x10
c001722a:	eb 7c                	jmp    c00172a8 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c001722c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0017234:	83 ec 0c             	sub    esp,0xc
c0017237:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001723b:	e8 cf 93 ff ff       	call   c001060f <malloc>
c0017240:	83 c4 10             	add    esp,0x10
c0017243:	89 c3                	mov    ebx,eax
c0017245:	83 ec 08             	sub    esp,0x8
c0017248:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001724c:	53                   	push   ebx
c001724d:	e8 6a c3 ff ff       	call   c00135bc <VgaText::VgaText(char const*)>
c0017252:	83 c4 10             	add    esp,0x10
c0017255:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017259:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c001725f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017263:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017269:	83 ec 0c             	sub    esp,0xc
c001726c:	50                   	push   eax
c001726d:	e8 a0 bb ff ff       	call   c0012e12 <addToTerminalCycle(VgaText*)>
c0017272:	83 c4 10             	add    esp,0x10
c0017275:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017279:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001727f:	83 ec 0c             	sub    esp,0xc
c0017282:	50                   	push   eax
c0017283:	e8 fb bd ff ff       	call   c0013083 <setActiveTerminal(VgaText*)>
c0017288:	83 c4 10             	add    esp,0x10
c001728b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001728f:	05 0c 01 00 00       	add    eax,0x10c
c0017294:	83 ec 08             	sub    esp,0x8
c0017297:	68 84 cd 02 c0       	push   0xc002cd84
c001729c:	50                   	push   eax
c001729d:	e8 9e 93 fe ff       	call   c0000640 <strcpy>
c00172a2:	83 c4 10             	add    esp,0x10
c00172a5:	8d 76 00             	lea    esi,[esi+0x0]
c00172a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172ac:	83 c0 0c             	add    eax,0xc
c00172af:	83 ec 08             	sub    esp,0x8
c00172b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00172b6:	50                   	push   eax
c00172b7:	e8 84 93 fe ff       	call   c0000640 <strcpy>
c00172bc:	83 c4 10             	add    esp,0x10
c00172bf:	83 ec 08             	sub    esp,0x8
c00172c2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172ca:	e8 7d fb ff ff       	call   c0016e4c <Process::addArgs(char**)>
c00172cf:	83 c4 10             	add    esp,0x10
c00172d2:	90                   	nop
c00172d3:	83 c4 24             	add    esp,0x24
c00172d6:	5b                   	pop    ebx
c00172d7:	5e                   	pop    esi
c00172d8:	c3                   	ret    
c00172d9:	8d 76 00             	lea    esi,[esi+0x0]

c00172dc <taskStartupFunction>:
c00172dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172e1:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00172e4:	c3                   	ret    
c00172e5:	8d 76 00             	lea    esi,[esi+0x0]

c00172e8 <KeDisablePreemption()>:
c00172e8:	a1 0c 73 03 c0       	mov    eax,ds:0xc003730c
c00172ed:	85 c0                	test   eax,eax
c00172ef:	75 13                	jne    c0017304 <KeDisablePreemption()+0x1c>
c00172f1:	8a 15 0c 71 03 c0    	mov    dl,BYTE PTR ds:0xc003710c
c00172f7:	c6 05 0c 71 03 c0 00 	mov    BYTE PTR ds:0xc003710c,0x0
c00172fe:	88 15 08 73 03 c0    	mov    BYTE PTR ds:0xc0037308,dl
c0017304:	83 c0 01             	add    eax,0x1
c0017307:	a3 0c 73 03 c0       	mov    ds:0xc003730c,eax
c001730c:	c3                   	ret    
c001730d:	8d 76 00             	lea    esi,[esi+0x0]

c0017310 <KeRestorePreemption()>:
c0017310:	a1 0c 73 03 c0       	mov    eax,ds:0xc003730c
c0017315:	83 e8 01             	sub    eax,0x1
c0017318:	a3 0c 73 03 c0       	mov    ds:0xc003730c,eax
c001731d:	75 0d                	jne    c001732c <KeRestorePreemption()+0x1c>
c001731f:	a0 08 73 03 c0       	mov    al,ds:0xc0037308
c0017324:	a2 0c 71 03 c0       	mov    ds:0xc003710c,al
c0017329:	8d 76 00             	lea    esi,[esi+0x0]
c001732c:	c3                   	ret    
c001732d:	90                   	nop
c001732e:	66 90                	xchg   ax,ax

c0017330 <Process::createThread(void (*)(void*), void*, int)>:
c0017330:	55                   	push   ebp
c0017331:	31 c9                	xor    ecx,ecx
c0017333:	57                   	push   edi
c0017334:	56                   	push   esi
c0017335:	53                   	push   ebx
c0017336:	83 ec 0c             	sub    esp,0xc
c0017339:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001733d:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0017344:	89 f2                	mov    edx,esi
c0017346:	66 90                	xchg   ax,ax
c0017348:	0f b7 c2             	movzx  eax,dx
c001734b:	80 e2 01             	and    dl,0x1
c001734e:	74 18                	je     c0017368 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0017350:	d1 f8                	sar    eax,1
c0017352:	83 c1 01             	add    ecx,0x1
c0017355:	89 c2                	mov    edx,eax
c0017357:	83 f9 10             	cmp    ecx,0x10
c001735a:	75 ec                	jne    c0017348 <Process::createThread(void (*)(void*), void*, int)+0x18>
c001735c:	83 c4 0c             	add    esp,0xc
c001735f:	31 db                	xor    ebx,ebx
c0017361:	89 d8                	mov    eax,ebx
c0017363:	5b                   	pop    ebx
c0017364:	5e                   	pop    esi
c0017365:	5f                   	pop    edi
c0017366:	5d                   	pop    ebp
c0017367:	c3                   	ret    
c0017368:	b8 01 00 00 00       	mov    eax,0x1
c001736d:	d3 e0                	shl    eax,cl
c001736f:	09 c6                	or     esi,eax
c0017371:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0017374:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c001737b:	01 c0                	add    eax,eax
c001737d:	01 c8                	add    eax,ecx
c001737f:	01 c0                	add    eax,eax
c0017381:	01 c8                	add    eax,ecx
c0017383:	8d 04 80             	lea    eax,[eax+eax*4]
c0017386:	01 d8                	add    eax,ebx
c0017388:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001738f:	75 0b                	jne    c001739c <Process::createThread(void (*)(void*), void*, int)+0x6c>
c0017391:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001739b:	90                   	nop
c001739c:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c00173a2:	83 ec 0c             	sub    esp,0xc
c00173a5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00173a8:	8d 04 89             	lea    eax,[ecx+ecx*4]
c00173ab:	01 c0                	add    eax,eax
c00173ad:	01 c8                	add    eax,ecx
c00173af:	01 c0                	add    eax,eax
c00173b1:	01 c8                	add    eax,ecx
c00173b3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00173b6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00173b9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00173bf:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00173c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173c9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00173cf:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c00173d5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c00173db:	89 ca                	mov    edx,ecx
c00173dd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00173e4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00173e8:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c00173f2:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c00173fc:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0017403:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c001740a:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0017411:	f7 da                	neg    edx
c0017413:	c1 e2 15             	shl    edx,0x15
c0017416:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001741c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017422:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017426:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017430:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017436:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001743c:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0017442:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001744c:	83 e2 80             	and    edx,0xffffff80
c001744f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017459:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c001745f:	68 00 01 00 00       	push   0x100
c0017464:	e8 a6 91 ff ff       	call   c001060f <malloc>
c0017469:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001746c:	58                   	pop    eax
c001746d:	5a                   	pop    edx
c001746e:	53                   	push   ebx
c001746f:	68 88 cd 02 c0       	push   0xc002cd88
c0017474:	e8 03 fb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017479:	59                   	pop    ecx
c001747a:	5e                   	pop    esi
c001747b:	53                   	push   ebx
c001747c:	68 4c 73 03 c0       	push   0xc003734c
c0017481:	e8 a2 23 01 00       	call   c0029828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017486:	89 d8                	mov    eax,ebx
c0017488:	83 c4 10             	add    esp,0x10
c001748b:	83 c4 0c             	add    esp,0xc
c001748e:	5b                   	pop    ebx
c001748f:	5e                   	pop    esi
c0017490:	5f                   	pop    edi
c0017491:	5d                   	pop    ebp
c0017492:	c3                   	ret    
c0017493:	90                   	nop

c0017494 <Process::createUserThread()>:
c0017494:	83 ec 0c             	sub    esp,0xc
c0017497:	68 80 00 00 00       	push   0x80
c001749c:	6a 00                	push   0x0
c001749e:	68 30 6d 01 c0       	push   0xc0016d30
c00174a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00174a7:	50                   	push   eax
c00174a8:	e8 83 fe ff ff       	call   c0017330 <Process::createThread(void (*)(void*), void*, int)>
c00174ad:	83 c4 1c             	add    esp,0x1c
c00174b0:	c3                   	ret    
c00174b1:	8d 76 00             	lea    esi,[esi+0x0]

c00174b4 <setupMultitasking(void (*)())>:
c00174b4:	56                   	push   esi
c00174b5:	53                   	push   ebx
c00174b6:	83 ec 04             	sub    esp,0x4
c00174b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174bd:	eb 11                	jmp    c00174d0 <setupMultitasking(void (*)())+0x1c>
c00174bf:	90                   	nop
c00174c0:	83 ec 0c             	sub    esp,0xc
c00174c3:	68 4c 73 03 c0       	push   0xc003734c
c00174c8:	e8 9f 22 01 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00174cd:	83 c4 10             	add    esp,0x10
c00174d0:	83 ec 0c             	sub    esp,0xc
c00174d3:	68 4c 73 03 c0       	push   0xc003734c
c00174d8:	e8 6b 22 01 00       	call   c0029748 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00174dd:	83 c4 10             	add    esp,0x10
c00174e0:	84 c0                	test   al,al
c00174e2:	74 dc                	je     c00174c0 <setupMultitasking(void (*)())+0xc>
c00174e4:	83 ec 0c             	sub    esp,0xc
c00174e7:	68 c4 07 00 00       	push   0x7c4
c00174ec:	e8 1e 91 ff ff       	call   c001060f <malloc>
c00174f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00174f8:	89 c3                	mov    ebx,eax
c00174fa:	6a 00                	push   0x0
c00174fc:	68 9c cd 02 c0       	push   0xc002cd9c
c0017501:	6a 01                	push   0x1
c0017503:	50                   	push   eax
c0017504:	e8 e7 fb ff ff       	call   c00170f0 <Process::Process(bool, char const*, Process*, char**)>
c0017509:	83 c4 14             	add    esp,0x14
c001750c:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0017512:	89 1d 58 73 03 c0    	mov    DWORD PTR ds:0xc0037358,ebx
c0017518:	50                   	push   eax
c0017519:	e8 65 bb ff ff       	call   c0013083 <setActiveTerminal(VgaText*)>
c001751e:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0017525:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001752f:	83 c8 01             	or     eax,0x1
c0017532:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0017539:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c001753f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017542:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001754c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017552:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017558:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017562:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001756c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017576:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001757c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017586:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001758c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017596:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c001759d:	e8 6d 90 ff ff       	call   c001060f <malloc>
c00175a2:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c00175ac:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00175b2:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c00175b9:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c00175c0:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c00175c7:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c00175ce:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00175d4:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00175da:	5a                   	pop    edx
c00175db:	59                   	pop    ecx
c00175dc:	68 84 cd 02 c0       	push   0xc002cd84
c00175e1:	50                   	push   eax
c00175e2:	e8 59 90 fe ff       	call   c0000640 <strcpy>
c00175e7:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c00175ee:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00175f2:	83 c4 14             	add    esp,0x14
c00175f5:	5b                   	pop    ebx
c00175f6:	5e                   	pop    esi
c00175f7:	e9 6d 8c fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c00175fc <schedule()>:
c00175fc:	8b 15 2c 73 03 c0    	mov    edx,DWORD PTR ds:0xc003732c
c0017602:	85 d2                	test   edx,edx
c0017604:	74 0e                	je     c0017614 <schedule()+0x18>
c0017606:	c7 05 28 73 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x1
c0017610:	c3                   	ret    
c0017611:	8d 76 00             	lea    esi,[esi+0x0]
c0017614:	53                   	push   ebx
c0017615:	83 ec 14             	sub    esp,0x14
c0017618:	68 4c 73 03 c0       	push   0xc003734c
c001761d:	e8 26 21 01 00       	call   c0029748 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017622:	83 c4 10             	add    esp,0x10
c0017625:	84 c0                	test   al,al
c0017627:	75 3f                	jne    c0017668 <schedule()+0x6c>
c0017629:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001762e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017631:	83 fa 01             	cmp    edx,0x1
c0017634:	74 3a                	je     c0017670 <schedule()+0x74>
c0017636:	66 90                	xchg   ax,ax
c0017638:	83 ec 0c             	sub    esp,0xc
c001763b:	68 4c 73 03 c0       	push   0xc003734c
c0017640:	e8 1f 21 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017645:	c7 04 24 4c 73 03 c0 	mov    DWORD PTR [esp],0xc003734c
c001764c:	89 c3                	mov    ebx,eax
c001764e:	e8 19 21 01 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017653:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001765a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001765d:	e8 2a f7 ff ff       	call   c0016d8c <switchToThread(ThreadControlBlock*)>
c0017662:	83 c4 10             	add    esp,0x10
c0017665:	8d 76 00             	lea    esi,[esi+0x0]
c0017668:	83 c4 08             	add    esp,0x8
c001766b:	5b                   	pop    ebx
c001766c:	c3                   	ret    
c001766d:	8d 76 00             	lea    esi,[esi+0x0]
c0017670:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017677:	83 ec 08             	sub    esp,0x8
c001767a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001767f:	50                   	push   eax
c0017680:	68 4c 73 03 c0       	push   0xc003734c
c0017685:	e8 9e 21 01 00       	call   c0029828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001768a:	83 c4 10             	add    esp,0x10
c001768d:	eb a9                	jmp    c0017638 <schedule()+0x3c>
c001768f:	90                   	nop

c0017690 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017690:	83 ec 0c             	sub    esp,0xc
c0017693:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017698:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001769c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001769f:	e8 58 ff ff ff       	call   c00175fc <schedule()>
c00176a4:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00176ac:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00176b1:	85 c0                	test   eax,eax
c00176b3:	75 03                	jne    c00176b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00176b5:	fb                   	sti    
c00176b6:	66 90                	xchg   ax,ax
c00176b8:	83 c4 0c             	add    esp,0xc
c00176bb:	c3                   	ret    

c00176bc <blockTask(TaskState)>:
c00176bc:	83 ec 0c             	sub    esp,0xc
c00176bf:	fa                   	cli    
c00176c0:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00176c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00176c9:	83 c0 01             	add    eax,0x1
c00176cc:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00176d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00176d9:	e8 1e ff ff ff       	call   c00175fc <schedule()>
c00176de:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00176e6:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c00176ec:	85 d2                	test   edx,edx
c00176ee:	75 04                	jne    c00176f4 <blockTask(TaskState)+0x38>
c00176f0:	fb                   	sti    
c00176f1:	8d 76 00             	lea    esi,[esi+0x0]
c00176f4:	83 c4 0c             	add    esp,0xc
c00176f7:	c3                   	ret    

c00176f8 <waitTask(int, int*, int)>:
c00176f8:	83 ec 18             	sub    esp,0x18
c00176fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017700:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017704:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0017707:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001770b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017710:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017713:	6a 07                	push   0x7
c0017715:	e8 a2 ff ff ff       	call   c00176bc <blockTask(TaskState)>
c001771a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001771f:	83 c4 10             	add    esp,0x10
c0017722:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017725:	85 d2                	test   edx,edx
c0017727:	74 0b                	je     c0017734 <waitTask(int, int*, int)+0x3c>
c0017729:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001772c:	89 02                	mov    DWORD PTR [edx],eax
c001772e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017733:	90                   	nop
c0017734:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0017737:	83 c4 0c             	add    esp,0xc
c001773a:	c3                   	ret    
c001773b:	90                   	nop

c001773c <milliTenthSleepUntil(unsigned long long)>:
c001773c:	83 ec 0c             	sub    esp,0xc
c001773f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017743:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017747:	3b 05 50 6b 03 c0    	cmp    eax,DWORD PTR ds:0xc0036b50
c001774d:	89 d1                	mov    ecx,edx
c001774f:	1b 0d 54 6b 03 c0    	sbb    ecx,DWORD PTR ds:0xc0036b54
c0017755:	73 05                	jae    c001775c <milliTenthSleepUntil(unsigned long long)+0x20>
c0017757:	90                   	nop
c0017758:	83 c4 0c             	add    esp,0xc
c001775b:	c3                   	ret    
c001775c:	fa                   	cli    
c001775d:	8b 0d 30 73 03 c0    	mov    ecx,DWORD PTR ds:0xc0037330
c0017763:	83 ec 08             	sub    esp,0x8
c0017766:	83 c1 01             	add    ecx,0x1
c0017769:	89 0d 30 73 03 c0    	mov    DWORD PTR ds:0xc0037330,ecx
c001776f:	8b 0d 2c 73 03 c0    	mov    ecx,DWORD PTR ds:0xc003732c
c0017775:	83 c1 01             	add    ecx,0x1
c0017778:	89 0d 2c 73 03 c0    	mov    DWORD PTR ds:0xc003732c,ecx
c001777e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017784:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0017787:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001778a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001778f:	50                   	push   eax
c0017790:	68 40 73 03 c0       	push   0xc0037340
c0017795:	e8 8e 20 01 00       	call   c0029828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001779a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00177a1:	e8 16 ff ff ff       	call   c00176bc <blockTask(TaskState)>
c00177a6:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c00177ab:	83 c4 10             	add    esp,0x10
c00177ae:	83 e8 01             	sub    eax,0x1
c00177b1:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c00177b6:	85 c0                	test   eax,eax
c00177b8:	75 0a                	jne    c00177c4 <milliTenthSleepUntil(unsigned long long)+0x88>
c00177ba:	8b 15 28 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037328
c00177c0:	85 d2                	test   edx,edx
c00177c2:	75 18                	jne    c00177dc <milliTenthSleepUntil(unsigned long long)+0xa0>
c00177c4:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00177cc:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00177d1:	85 c0                	test   eax,eax
c00177d3:	75 83                	jne    c0017758 <milliTenthSleepUntil(unsigned long long)+0x1c>
c00177d5:	fb                   	sti    
c00177d6:	83 c4 0c             	add    esp,0xc
c00177d9:	c3                   	ret    
c00177da:	66 90                	xchg   ax,ax
c00177dc:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c00177e6:	e8 11 fe ff ff       	call   c00175fc <schedule()>
c00177eb:	eb d7                	jmp    c00177c4 <milliTenthSleepUntil(unsigned long long)+0x88>
c00177ed:	8d 76 00             	lea    esi,[esi+0x0]

c00177f0 <milliTenthSleep(unsigned long long)>:
c00177f0:	a1 50 6b 03 c0       	mov    eax,ds:0xc0036b50
c00177f5:	8b 15 54 6b 03 c0    	mov    edx,DWORD PTR ds:0xc0036b54
c00177fb:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00177ff:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017803:	e9 34 ff ff ff       	jmp    c001773c <milliTenthSleepUntil(unsigned long long)>

c0017808 <sleep(unsigned long long)>:
c0017808:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0017810:	b8 10 27 00 00       	mov    eax,0x2710
c0017815:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017819:	01 ca                	add    edx,ecx
c001781b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001781f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017823:	eb cb                	jmp    c00177f0 <milliTenthSleep(unsigned long long)>
c0017825:	8d 76 00             	lea    esi,[esi+0x0]

c0017828 <sleep(unsigned int)>:
c0017828:	83 ec 14             	sub    esp,0x14
c001782b:	b8 10 27 00 00       	mov    eax,0x2710
c0017830:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017834:	52                   	push   edx
c0017835:	50                   	push   eax
c0017836:	e8 b5 ff ff ff       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c001783b:	83 c4 1c             	add    esp,0x1c
c001783e:	c3                   	ret    
c001783f:	90                   	nop

c0017840 <milliTenthSleep(unsigned int)>:
c0017840:	83 ec 14             	sub    esp,0x14
c0017843:	31 d2                	xor    edx,edx
c0017845:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017849:	03 05 50 6b 03 c0    	add    eax,DWORD PTR ds:0xc0036b50
c001784f:	13 15 54 6b 03 c0    	adc    edx,DWORD PTR ds:0xc0036b54
c0017855:	52                   	push   edx
c0017856:	50                   	push   eax
c0017857:	e8 e0 fe ff ff       	call   c001773c <milliTenthSleepUntil(unsigned long long)>
c001785c:	83 c4 1c             	add    esp,0x1c
c001785f:	c3                   	ret    

c0017860 <taskReturned>:
c0017860:	83 ec 18             	sub    esp,0x18
c0017863:	68 24 ce 02 c0       	push   0xc002ce24
c0017868:	e8 f7 91 ff ff       	call   c0010a64 <KePanic(char const*)>
c001786d:	83 c4 10             	add    esp,0x10
c0017870:	83 ec 0c             	sub    esp,0xc
c0017873:	6a 02                	push   0x2
c0017875:	e8 42 fe ff ff       	call   c00176bc <blockTask(TaskState)>
c001787a:	fa                   	cli    
c001787b:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017880:	83 c0 01             	add    eax,0x1
c0017883:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017888:	e8 6f fd ff ff       	call   c00175fc <schedule()>
c001788d:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017895:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c001789b:	83 c4 10             	add    esp,0x10
c001789e:	85 d2                	test   edx,edx
c00178a0:	75 ce                	jne    c0017870 <taskReturned+0x10>
c00178a2:	fb                   	sti    
c00178a3:	eb cb                	jmp    c0017870 <taskReturned+0x10>
c00178a5:	8d 76 00             	lea    esi,[esi+0x0]

c00178a8 <KeProcessFromPID(int)>:
c00178a8:	57                   	push   edi
c00178a9:	56                   	push   esi
c00178aa:	53                   	push   ebx
c00178ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00178af:	fa                   	cli    
c00178b0:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00178b5:	83 ec 0c             	sub    esp,0xc
c00178b8:	83 c0 01             	add    eax,0x1
c00178bb:	68 4c 73 03 c0       	push   0xc003734c
c00178c0:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00178c5:	e8 9a 1e 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00178ca:	83 c4 10             	add    esp,0x10
c00178cd:	89 c7                	mov    edi,eax
c00178cf:	eb 17                	jmp    c00178e8 <KeProcessFromPID(int)+0x40>
c00178d1:	8d 76 00             	lea    esi,[esi+0x0]
c00178d4:	83 ec 0c             	sub    esp,0xc
c00178d7:	68 4c 73 03 c0       	push   0xc003734c
c00178dc:	e8 83 1e 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00178e1:	83 c4 10             	add    esp,0x10
c00178e4:	39 f8                	cmp    eax,edi
c00178e6:	74 50                	je     c0017938 <KeProcessFromPID(int)+0x90>
c00178e8:	83 ec 0c             	sub    esp,0xc
c00178eb:	68 4c 73 03 c0       	push   0xc003734c
c00178f0:	e8 6f 1e 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00178f5:	c7 04 24 4c 73 03 c0 	mov    DWORD PTR [esp],0xc003734c
c00178fc:	89 c3                	mov    ebx,eax
c00178fe:	e8 69 1e 01 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017903:	59                   	pop    ecx
c0017904:	58                   	pop    eax
c0017905:	53                   	push   ebx
c0017906:	68 4c 73 03 c0       	push   0xc003734c
c001790b:	e8 18 1f 01 00       	call   c0029828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017910:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017913:	83 c4 10             	add    esp,0x10
c0017916:	39 30                	cmp    DWORD PTR [eax],esi
c0017918:	75 ba                	jne    c00178d4 <KeProcessFromPID(int)+0x2c>
c001791a:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017922:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c0017928:	85 d2                	test   edx,edx
c001792a:	74 08                	je     c0017934 <KeProcessFromPID(int)+0x8c>
c001792c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001792f:	5b                   	pop    ebx
c0017930:	5e                   	pop    esi
c0017931:	5f                   	pop    edi
c0017932:	c3                   	ret    
c0017933:	90                   	nop
c0017934:	fb                   	sti    
c0017935:	eb f5                	jmp    c001792c <KeProcessFromPID(int)+0x84>
c0017937:	90                   	nop
c0017938:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017940:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017945:	85 c0                	test   eax,eax
c0017947:	75 07                	jne    c0017950 <KeProcessFromPID(int)+0xa8>
c0017949:	fb                   	sti    
c001794a:	31 c0                	xor    eax,eax
c001794c:	5b                   	pop    ebx
c001794d:	5e                   	pop    esi
c001794e:	5f                   	pop    edi
c001794f:	c3                   	ret    
c0017950:	5b                   	pop    ebx
c0017951:	31 c0                	xor    eax,eax
c0017953:	5e                   	pop    esi
c0017954:	5f                   	pop    edi
c0017955:	c3                   	ret    
c0017956:	66 90                	xchg   ax,ax

c0017958 <unblockTask(ThreadControlBlock*)>:
c0017958:	53                   	push   ebx
c0017959:	83 ec 08             	sub    esp,0x8
c001795c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017960:	fa                   	cli    
c0017961:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c0017967:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001796a:	83 c2 01             	add    edx,0x1
c001796d:	85 c0                	test   eax,eax
c001796f:	89 15 30 73 03 c0    	mov    DWORD PTR ds:0xc0037330,edx
c0017975:	74 6d                	je     c00179e4 <unblockTask(ThreadControlBlock*)+0x8c>
c0017977:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001797a:	83 f8 01             	cmp    eax,0x1
c001797d:	74 39                	je     c00179b8 <unblockTask(ThreadControlBlock*)+0x60>
c001797f:	83 ec 0c             	sub    esp,0xc
c0017982:	68 4c 73 03 c0       	push   0xc003734c
c0017987:	e8 d8 1d 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001798c:	83 c4 10             	add    esp,0x10
c001798f:	85 c0                	test   eax,eax
c0017991:	75 1d                	jne    c00179b0 <unblockTask(ThreadControlBlock*)+0x58>
c0017993:	eb 63                	jmp    c00179f8 <unblockTask(ThreadControlBlock*)+0xa0>
c0017995:	8d 76 00             	lea    esi,[esi+0x0]
c0017998:	83 ec 08             	sub    esp,0x8
c001799b:	50                   	push   eax
c001799c:	68 4c 73 03 c0       	push   0xc003734c
c00179a1:	e8 ca 22 01 00       	call   c0029c70 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00179a6:	83 c4 10             	add    esp,0x10
c00179a9:	85 c0                	test   eax,eax
c00179ab:	74 4b                	je     c00179f8 <unblockTask(ThreadControlBlock*)+0xa0>
c00179ad:	8d 76 00             	lea    esi,[esi+0x0]
c00179b0:	39 c3                	cmp    ebx,eax
c00179b2:	75 e4                	jne    c0017998 <unblockTask(ThreadControlBlock*)+0x40>
c00179b4:	eb 12                	jmp    c00179c8 <unblockTask(ThreadControlBlock*)+0x70>
c00179b6:	66 90                	xchg   ax,ax
c00179b8:	83 ec 0c             	sub    esp,0xc
c00179bb:	68 ba cd 02 c0       	push   0xc002cdba
c00179c0:	e8 b7 f5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00179c5:	83 c4 10             	add    esp,0x10
c00179c8:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00179d0:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00179d5:	85 c0                	test   eax,eax
c00179d7:	75 03                	jne    c00179dc <unblockTask(ThreadControlBlock*)+0x84>
c00179d9:	fb                   	sti    
c00179da:	66 90                	xchg   ax,ax
c00179dc:	83 c4 08             	add    esp,0x8
c00179df:	5b                   	pop    ebx
c00179e0:	c3                   	ret    
c00179e1:	8d 76 00             	lea    esi,[esi+0x0]
c00179e4:	83 ec 0c             	sub    esp,0xc
c00179e7:	68 a3 cd 02 c0       	push   0xc002cda3
c00179ec:	e8 8b f5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00179f1:	83 c4 10             	add    esp,0x10
c00179f4:	eb d2                	jmp    c00179c8 <unblockTask(ThreadControlBlock*)+0x70>
c00179f6:	66 90                	xchg   ax,ax
c00179f8:	83 ec 08             	sub    esp,0x8
c00179fb:	53                   	push   ebx
c00179fc:	68 4c 73 03 c0       	push   0xc003734c
c0017a01:	e8 22 1e 01 00       	call   c0029828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017a06:	83 c4 10             	add    esp,0x10
c0017a09:	eb bd                	jmp    c00179c8 <unblockTask(ThreadControlBlock*)+0x70>
c0017a0b:	90                   	nop

c0017a0c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017a0c:	55                   	push   ebp
c0017a0d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017a12:	57                   	push   edi
c0017a13:	56                   	push   esi
c0017a14:	53                   	push   ebx
c0017a15:	83 ec 1c             	sub    esp,0x1c
c0017a18:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017a1c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017a1f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017a22:	d3 c0                	rol    eax,cl
c0017a24:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c0017a2b:	21 c8                	and    eax,ecx
c0017a2d:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017a34:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017a37:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017a3f:	0f 85 b7 01 00 00    	jne    c0017bfc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017a45:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0017a4b:	85 ed                	test   ebp,ebp
c0017a4d:	7e 29                	jle    c0017a78 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017a4f:	31 f6                	xor    esi,esi
c0017a51:	8d 76 00             	lea    esi,[esi+0x0]
c0017a54:	83 ec 0c             	sub    esp,0xc
c0017a57:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0017a5e:	83 c6 01             	add    esi,0x1
c0017a61:	57                   	push   edi
c0017a62:	e8 b8 8b ff ff       	call   c001061f <free>
c0017a67:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017a6a:	83 c4 10             	add    esp,0x10
c0017a6d:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0017a73:	7f df                	jg     c0017a54 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0017a75:	8d 76 00             	lea    esi,[esi+0x0]
c0017a78:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0017a82:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017a85:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c0017a8b:	89 f7                	mov    edi,esi
c0017a8d:	85 ed                	test   ebp,ebp
c0017a8f:	74 1b                	je     c0017aac <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0017a91:	83 ec 0c             	sub    esp,0xc
c0017a94:	55                   	push   ebp
c0017a95:	e8 d6 77 ff ff       	call   c000f270 <EnvVarContainer::~EnvVarContainer()>
c0017a9a:	59                   	pop    ecx
c0017a9b:	5e                   	pop    esi
c0017a9c:	6a 0c                	push   0xc
c0017a9e:	55                   	push   ebp
c0017a9f:	e8 74 66 ff ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0017aa4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017aa7:	83 c4 10             	add    esp,0x10
c0017aaa:	89 f7                	mov    edi,esi
c0017aac:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017ab2:	85 c0                	test   eax,eax
c0017ab4:	0f 84 b6 00 00 00    	je     c0017b70 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c0017aba:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0017abd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017ac1:	31 c9                	xor    ecx,ecx
c0017ac3:	eb 17                	jmp    c0017adc <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0017ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ac8:	83 c1 01             	add    ecx,0x1
c0017acb:	83 f9 10             	cmp    ecx,0x10
c0017ace:	0f 84 9c 00 00 00    	je     c0017b70 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c0017ad4:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017ada:	66 90                	xchg   ax,ax
c0017adc:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0017ae3:	d3 fa                	sar    edx,cl
c0017ae5:	80 e2 01             	and    dl,0x1
c0017ae8:	74 de                	je     c0017ac8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017aea:	8d 14 89             	lea    edx,[ecx+ecx*4]
c0017aed:	01 d2                	add    edx,edx
c0017aef:	01 ca                	add    edx,ecx
c0017af1:	01 d2                	add    edx,edx
c0017af3:	01 ca                	add    edx,ecx
c0017af5:	8d 14 92             	lea    edx,[edx+edx*4]
c0017af8:	01 d0                	add    eax,edx
c0017afa:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017b00:	83 fd 07             	cmp    ebp,0x7
c0017b03:	75 c3                	jne    c0017ac8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017b05:	05 40 02 00 00       	add    eax,0x240
c0017b0a:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017b0d:	83 fd ff             	cmp    ebp,0xffffffff
c0017b10:	0f 8c ee 00 00 00    	jl     c0017c04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0017b16:	0f 84 ac 01 00 00    	je     c0017cc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0017b1c:	85 ed                	test   ebp,ebp
c0017b1e:	0f 84 90 01 00 00    	je     c0017cb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c0017b24:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0017b26:	75 a0                	jne    c0017ac8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017b28:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017b2e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017b32:	01 d0                	add    eax,edx
c0017b34:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017b38:	83 ec 0c             	sub    esp,0xc
c0017b3b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017b41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017b44:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017b4a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017b51:	50                   	push   eax
c0017b52:	e8 01 fe ff ff       	call   c0017958 <unblockTask(ThreadControlBlock*)>
c0017b57:	83 c4 10             	add    esp,0x10
c0017b5a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017b5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017b61:	89 f7                	mov    edi,esi
c0017b63:	83 c1 01             	add    ecx,0x1
c0017b66:	83 f9 10             	cmp    ecx,0x10
c0017b69:	0f 85 65 ff ff ff    	jne    c0017ad4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0017b6f:	90                   	nop
c0017b70:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c0017b76:	85 c0                	test   eax,eax
c0017b78:	74 62                	je     c0017bdc <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0017b7a:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0017b80:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c0017b86:	74 54                	je     c0017bdc <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0017b88:	83 ec 0c             	sub    esp,0xc
c0017b8b:	68 4c 73 03 c0       	push   0xc003734c
c0017b90:	e8 cf 1b 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017b95:	c7 04 24 4c 73 03 c0 	mov    DWORD PTR [esp],0xc003734c
c0017b9c:	89 c7                	mov    edi,eax
c0017b9e:	e8 a5 1b 01 00       	call   c0029748 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017ba3:	83 c4 10             	add    esp,0x10
c0017ba6:	84 c0                	test   al,al
c0017ba8:	0f 84 ce 00 00 00    	je     c0017c7c <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c0017bae:	66 90                	xchg   ax,ax
c0017bb0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017bb3:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0017bb9:	85 d2                	test   edx,edx
c0017bbb:	74 0f                	je     c0017bcc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0017bbd:	83 ec 0c             	sub    esp,0xc
c0017bc0:	8b 02                	mov    eax,DWORD PTR [edx]
c0017bc2:	52                   	push   edx
c0017bc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017bc6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017bc9:	83 c4 10             	add    esp,0x10
c0017bcc:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c0017bd6:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0017bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0017bdc:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c0017be2:	85 db                	test   ebx,ebx
c0017be4:	74 16                	je     c0017bfc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017be6:	83 ec 0c             	sub    esp,0xc
c0017be9:	53                   	push   ebx
c0017bea:	e8 87 c9 ff ff       	call   c0014576 <VAS::~VAS()>
c0017bef:	58                   	pop    eax
c0017bf0:	5a                   	pop    edx
c0017bf1:	6a 14                	push   0x14
c0017bf3:	53                   	push   ebx
c0017bf4:	e8 1f 65 ff ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0017bf9:	83 c4 10             	add    esp,0x10
c0017bfc:	83 c4 1c             	add    esp,0x1c
c0017bff:	5b                   	pop    ebx
c0017c00:	5e                   	pop    esi
c0017c01:	5f                   	pop    edi
c0017c02:	5d                   	pop    ebp
c0017c03:	c3                   	ret    
c0017c04:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017c08:	83 ec 0c             	sub    esp,0xc
c0017c0b:	68 58 ce 02 c0       	push   0xc002ce58
c0017c10:	e8 4f 8e ff ff       	call   c0010a64 <KePanic(char const*)>
c0017c15:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017c18:	83 c4 10             	add    esp,0x10
c0017c1b:	89 f7                	mov    edi,esi
c0017c1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c21:	e9 a2 fe ff ff       	jmp    c0017ac8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017c26:	66 90                	xchg   ax,ax
c0017c28:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017c2e:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017c34:	75 1e                	jne    c0017c54 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0017c36:	83 ec 0c             	sub    esp,0xc
c0017c39:	68 c0 ce 02 c0       	push   0xc002cec0
c0017c3e:	e8 39 f3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017c43:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017c4a:	e8 6d fa ff ff       	call   c00176bc <blockTask(TaskState)>
c0017c4f:	83 c4 10             	add    esp,0x10
c0017c52:	66 90                	xchg   ax,ax
c0017c54:	83 ec 08             	sub    esp,0x8
c0017c57:	56                   	push   esi
c0017c58:	68 4c 73 03 c0       	push   0xc003734c
c0017c5d:	e8 c6 1b 01 00       	call   c0029828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017c62:	c7 04 24 4c 73 03 c0 	mov    DWORD PTR [esp],0xc003734c
c0017c69:	e8 f6 1a 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017c6e:	83 c4 10             	add    esp,0x10
c0017c71:	39 f8                	cmp    eax,edi
c0017c73:	0f 84 37 ff ff ff    	je     c0017bb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c0017c79:	8d 76 00             	lea    esi,[esi+0x0]
c0017c7c:	83 ec 0c             	sub    esp,0xc
c0017c7f:	68 4c 73 03 c0       	push   0xc003734c
c0017c84:	e8 db 1a 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017c89:	c7 04 24 4c 73 03 c0 	mov    DWORD PTR [esp],0xc003734c
c0017c90:	89 c6                	mov    esi,eax
c0017c92:	e8 d5 1a 01 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017c97:	83 c4 10             	add    esp,0x10
c0017c9a:	39 f3                	cmp    ebx,esi
c0017c9c:	74 b6                	je     c0017c54 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0017c9e:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0017ca1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017ca4:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c0017caa:	75 a8                	jne    c0017c54 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0017cac:	e9 77 ff ff ff       	jmp    c0017c28 <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c0017cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0017cb4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017cb8:	83 ec 0c             	sub    esp,0xc
c0017cbb:	68 8c ce 02 c0       	push   0xc002ce8c
c0017cc0:	e9 4b ff ff ff       	jmp    c0017c10 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c0017cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0017cc8:	8b 36                	mov    esi,DWORD PTR [esi]
c0017cca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017cce:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0017cd1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017cd4:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0017cda:	01 d7                	add    edi,edx
c0017cdc:	89 f8                	mov    eax,edi
c0017cde:	e9 51 fe ff ff       	jmp    c0017b34 <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c0017ce3:	90                   	nop

c0017ce4 <cleanerTaskFunction(void*)>:
c0017ce4:	53                   	push   ebx
c0017ce5:	83 ec 08             	sub    esp,0x8
c0017ce8:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017cf0:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017cf5:	85 c0                	test   eax,eax
c0017cf7:	75 03                	jne    c0017cfc <cleanerTaskFunction(void*)+0x18>
c0017cf9:	fb                   	sti    
c0017cfa:	66 90                	xchg   ax,ax
c0017cfc:	fa                   	cli    
c0017cfd:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017d02:	83 c0 01             	add    eax,0x1
c0017d05:	80 3d 14 73 03 c0 00 	cmp    BYTE PTR ds:0xc0037314,0x0
c0017d0c:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017d11:	0f 85 c9 00 00 00    	jne    c0017de0 <cleanerTaskFunction(void*)+0xfc>
c0017d17:	83 ec 0c             	sub    esp,0xc
c0017d1a:	6a 02                	push   0x2
c0017d1c:	e8 6f f9 ff ff       	call   c0017690 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017d21:	83 c4 10             	add    esp,0x10
c0017d24:	c6 05 14 73 03 c0 00 	mov    BYTE PTR ds:0xc0037314,0x0
c0017d2b:	fa                   	cli    
c0017d2c:	8b 0d 30 73 03 c0    	mov    ecx,DWORD PTR ds:0xc0037330
c0017d32:	8b 1d 2c 73 03 c0    	mov    ebx,DWORD PTR ds:0xc003732c
c0017d38:	83 c1 01             	add    ecx,0x1
c0017d3b:	83 c3 01             	add    ebx,0x1
c0017d3e:	89 0d 30 73 03 c0    	mov    DWORD PTR ds:0xc0037330,ecx
c0017d44:	89 1d 2c 73 03 c0    	mov    DWORD PTR ds:0xc003732c,ebx
c0017d4a:	fa                   	cli    
c0017d4b:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017d50:	83 c0 01             	add    eax,0x1
c0017d53:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017d58:	eb 2a                	jmp    c0017d84 <cleanerTaskFunction(void*)+0xa0>
c0017d5a:	66 90                	xchg   ax,ax
c0017d5c:	83 ec 0c             	sub    esp,0xc
c0017d5f:	68 34 73 03 c0       	push   0xc0037334
c0017d64:	e8 fb 19 01 00       	call   c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017d69:	c7 04 24 34 73 03 c0 	mov    DWORD PTR [esp],0xc0037334
c0017d70:	89 c3                	mov    ebx,eax
c0017d72:	e8 f5 19 01 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017d77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d7a:	e8 8d fc ff ff       	call   c0017a0c <cleanupTerminatedTask(ThreadControlBlock*)>
c0017d7f:	83 c4 10             	add    esp,0x10
c0017d82:	66 90                	xchg   ax,ax
c0017d84:	83 ec 0c             	sub    esp,0xc
c0017d87:	68 34 73 03 c0       	push   0xc0037334
c0017d8c:	e8 b7 19 01 00       	call   c0029748 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017d91:	83 c4 10             	add    esp,0x10
c0017d94:	84 c0                	test   al,al
c0017d96:	74 c4                	je     c0017d5c <cleanerTaskFunction(void*)+0x78>
c0017d98:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017da0:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c0017da6:	85 d2                	test   edx,edx
c0017da8:	75 02                	jne    c0017dac <cleanerTaskFunction(void*)+0xc8>
c0017daa:	fb                   	sti    
c0017dab:	90                   	nop
c0017dac:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0017db1:	83 e8 01             	sub    eax,0x1
c0017db4:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c0017db9:	0f 85 29 ff ff ff    	jne    c0017ce8 <cleanerTaskFunction(void*)+0x4>
c0017dbf:	a1 28 73 03 c0       	mov    eax,ds:0xc0037328
c0017dc4:	85 c0                	test   eax,eax
c0017dc6:	0f 84 1c ff ff ff    	je     c0017ce8 <cleanerTaskFunction(void*)+0x4>
c0017dcc:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c0017dd6:	e8 21 f8 ff ff       	call   c00175fc <schedule()>
c0017ddb:	e9 08 ff ff ff       	jmp    c0017ce8 <cleanerTaskFunction(void*)+0x4>
c0017de0:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017de8:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017ded:	85 c0                	test   eax,eax
c0017def:	0f 85 2f ff ff ff    	jne    c0017d24 <cleanerTaskFunction(void*)+0x40>
c0017df5:	fb                   	sti    
c0017df6:	e9 29 ff ff ff       	jmp    c0017d24 <cleanerTaskFunction(void*)+0x40>
c0017dfb:	90                   	nop

c0017dfc <KeTerminateCurrentThread(int)>:
c0017dfc:	83 ec 14             	sub    esp,0x14
c0017dff:	fa                   	cli    
c0017e00:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017e05:	83 c0 01             	add    eax,0x1
c0017e08:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017e0d:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0017e12:	83 c0 01             	add    eax,0x1
c0017e15:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c0017e1a:	fa                   	cli    
c0017e1b:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017e20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e24:	83 c0 01             	add    eax,0x1
c0017e27:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017e2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e31:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017e34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e39:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017e3c:	50                   	push   eax
c0017e3d:	68 34 73 03 c0       	push   0xc0037334
c0017e42:	e8 e1 19 01 00       	call   c0029828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017e47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e4c:	83 c4 10             	add    esp,0x10
c0017e4f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017e56:	a1 10 73 03 c0       	mov    eax,ds:0xc0037310
c0017e5b:	85 c0                	test   eax,eax
c0017e5d:	0f 84 81 00 00 00    	je     c0017ee4 <KeTerminateCurrentThread(int)+0xe8>
c0017e63:	83 ec 0c             	sub    esp,0xc
c0017e66:	c6 05 14 73 03 c0 01 	mov    BYTE PTR ds:0xc0037314,0x1
c0017e6d:	50                   	push   eax
c0017e6e:	e8 e5 fa ff ff       	call   c0017958 <unblockTask(ThreadControlBlock*)>
c0017e73:	83 c4 10             	add    esp,0x10
c0017e76:	66 90                	xchg   ax,ax
c0017e78:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017e80:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017e85:	85 c0                	test   eax,eax
c0017e87:	75 03                	jne    c0017e8c <KeTerminateCurrentThread(int)+0x90>
c0017e89:	fb                   	sti    
c0017e8a:	66 90                	xchg   ax,ax
c0017e8c:	a1 2c 73 03 c0       	mov    eax,ds:0xc003732c
c0017e91:	83 e8 01             	sub    eax,0x1
c0017e94:	a3 2c 73 03 c0       	mov    ds:0xc003732c,eax
c0017e99:	75 09                	jne    c0017ea4 <KeTerminateCurrentThread(int)+0xa8>
c0017e9b:	83 3d 28 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037328,0x0
c0017ea2:	75 54                	jne    c0017ef8 <KeTerminateCurrentThread(int)+0xfc>
c0017ea4:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017eac:	8b 0d 30 73 03 c0    	mov    ecx,DWORD PTR ds:0xc0037330
c0017eb2:	85 c9                	test   ecx,ecx
c0017eb4:	75 06                	jne    c0017ebc <KeTerminateCurrentThread(int)+0xc0>
c0017eb6:	66 90                	xchg   ax,ax
c0017eb8:	fb                   	sti    
c0017eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ebc:	fa                   	cli    
c0017ebd:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0017ec2:	83 c0 01             	add    eax,0x1
c0017ec5:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0017eca:	e8 2d f7 ff ff       	call   c00175fc <schedule()>
c0017ecf:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0017ed7:	8b 15 30 73 03 c0    	mov    edx,DWORD PTR ds:0xc0037330
c0017edd:	85 d2                	test   edx,edx
c0017edf:	75 db                	jne    c0017ebc <KeTerminateCurrentThread(int)+0xc0>
c0017ee1:	eb d5                	jmp    c0017eb8 <KeTerminateCurrentThread(int)+0xbc>
c0017ee3:	90                   	nop
c0017ee4:	83 ec 0c             	sub    esp,0xc
c0017ee7:	68 d1 cd 02 c0       	push   0xc002cdd1
c0017eec:	e8 8b f0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017ef1:	83 c4 10             	add    esp,0x10
c0017ef4:	eb 82                	jmp    c0017e78 <KeTerminateCurrentThread(int)+0x7c>
c0017ef6:	66 90                	xchg   ax,ax
c0017ef8:	c7 05 28 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037328,0x0
c0017f02:	e8 f5 f6 ff ff       	call   c00175fc <schedule()>
c0017f07:	eb 9b                	jmp    c0017ea4 <KeTerminateCurrentThread(int)+0xa8>
c0017f09:	8d 76 00             	lea    esi,[esi+0x0]

c0017f0c <__static_initialization_and_destruction_0(int, int)>:
c0017f0c:	83 ec 0c             	sub    esp,0xc
c0017f0f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017f14:	0f 85 8e 00 00 00    	jne    c0017fa8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017f1a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017f22:	0f 85 80 00 00 00    	jne    c0017fa8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017f28:	83 ec 0c             	sub    esp,0xc
c0017f2b:	68 4c 73 03 c0       	push   0xc003734c
c0017f30:	e8 93 1d 01 00       	call   c0029cc8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017f35:	83 c4 10             	add    esp,0x10
c0017f38:	83 ec 04             	sub    esp,0x4
c0017f3b:	68 00 04 03 c0       	push   0xc0030400
c0017f40:	68 4c 73 03 c0       	push   0xc003734c
c0017f45:	68 78 9c 02 c0       	push   0xc0029c78
c0017f4a:	e8 79 61 ff ff       	call   c000e0c8 <__cxa_atexit>
c0017f4f:	83 c4 10             	add    esp,0x10
c0017f52:	83 ec 0c             	sub    esp,0xc
c0017f55:	68 40 73 03 c0       	push   0xc0037340
c0017f5a:	e8 69 1d 01 00       	call   c0029cc8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017f5f:	83 c4 10             	add    esp,0x10
c0017f62:	83 ec 04             	sub    esp,0x4
c0017f65:	68 00 04 03 c0       	push   0xc0030400
c0017f6a:	68 40 73 03 c0       	push   0xc0037340
c0017f6f:	68 78 9c 02 c0       	push   0xc0029c78
c0017f74:	e8 4f 61 ff ff       	call   c000e0c8 <__cxa_atexit>
c0017f79:	83 c4 10             	add    esp,0x10
c0017f7c:	83 ec 0c             	sub    esp,0xc
c0017f7f:	68 34 73 03 c0       	push   0xc0037334
c0017f84:	e8 3f 1d 01 00       	call   c0029cc8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017f89:	83 c4 10             	add    esp,0x10
c0017f8c:	83 ec 04             	sub    esp,0x4
c0017f8f:	68 00 04 03 c0       	push   0xc0030400
c0017f94:	68 34 73 03 c0       	push   0xc0037334
c0017f99:	68 78 9c 02 c0       	push   0xc0029c78
c0017f9e:	e8 25 61 ff ff       	call   c000e0c8 <__cxa_atexit>
c0017fa3:	83 c4 10             	add    esp,0x10
c0017fa6:	66 90                	xchg   ax,ax
c0017fa8:	90                   	nop
c0017fa9:	83 c4 0c             	add    esp,0xc
c0017fac:	c3                   	ret    
c0017fad:	8d 76 00             	lea    esi,[esi+0x0]

c0017fb0 <_GLOBAL__sub_I_keNextPID>:
c0017fb0:	83 ec 0c             	sub    esp,0xc
c0017fb3:	83 ec 08             	sub    esp,0x8
c0017fb6:	68 ff ff 00 00       	push   0xffff
c0017fbb:	6a 01                	push   0x1
c0017fbd:	e8 4a ff ff ff       	call   c0017f0c <__static_initialization_and_destruction_0(int, int)>
c0017fc2:	83 c4 10             	add    esp,0x10
c0017fc5:	83 c4 0c             	add    esp,0xc
c0017fc8:	c3                   	ret    

c0017fc9 <Vm::inbv(unsigned short)>:
c0017fc9:	55                   	push   ebp
c0017fca:	89 e5                	mov    ebp,esp
c0017fcc:	83 ec 14             	sub    esp,0x14
c0017fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fd2:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017fd6:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017fda:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017fdf:	75 07                	jne    c0017fe8 <Vm::inbv(unsigned short)+0x1f>
c0017fe1:	a1 90 73 03 c0       	mov    eax,ds:0xc0037390
c0017fe6:	eb 16                	jmp    c0017ffe <Vm::inbv(unsigned short)+0x35>
c0017fe8:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017fec:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017ff0:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0017ff4:	89 c2                	mov    edx,eax
c0017ff6:	ec                   	in     al,dx
c0017ff7:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0017ffa:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017ffd:	90                   	nop
c0017ffe:	c9                   	leave  
c0017fff:	c3                   	ret    

c0018000 <Vm::outbv(unsigned short, unsigned char)>:
c0018000:	55                   	push   ebp
c0018001:	89 e5                	mov    ebp,esp
c0018003:	83 ec 18             	sub    esp,0x18
c0018006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018009:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001800c:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0018010:	88 d0                	mov    al,dl
c0018012:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0018015:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0018019:	3d fe fe 00 00       	cmp    eax,0xfefe
c001801e:	75 2d                	jne    c001804d <Vm::outbv(unsigned short, unsigned char)+0x4d>
c0018020:	a1 90 73 03 c0       	mov    eax,ds:0xc0037390
c0018025:	8d 50 01             	lea    edx,[eax+0x1]
c0018028:	89 15 90 73 03 c0    	mov    DWORD PTR ds:0xc0037390,edx
c001802e:	8a 55 e8             	mov    dl,BYTE PTR [ebp-0x18]
c0018031:	88 90 a0 73 03 c0    	mov    BYTE PTR [eax-0x3ffc8c60],dl
c0018037:	a1 90 73 03 c0       	mov    eax,ds:0xc0037390
c001803c:	83 f8 20             	cmp    eax,0x20
c001803f:	75 23                	jne    c0018064 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0018041:	c7 05 90 73 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0037390,0x1f
c001804b:	eb 17                	jmp    c0018064 <Vm::outbv(unsigned short, unsigned char)+0x64>
c001804d:	0f b6 55 e8          	movzx  edx,BYTE PTR [ebp-0x18]
c0018051:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0018055:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0018059:	88 55 fd             	mov    BYTE PTR [ebp-0x3],dl
c001805c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001805f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0018063:	ee                   	out    dx,al
c0018064:	90                   	nop
c0018065:	c9                   	leave  
c0018066:	c3                   	ret    

c0018067 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018067:	55                   	push   ebp
c0018068:	89 e5                	mov    ebp,esp
c001806a:	83 ec 08             	sub    esp,0x8
c001806d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018070:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018073:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
c0018077:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
c001807b:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
c001807f:	c1 e0 04             	shl    eax,0x4
c0018082:	89 c2                	mov    edx,eax
c0018084:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
c0018088:	01 d0                	add    eax,edx
c001808a:	c9                   	leave  
c001808b:	c3                   	ret    

c001808c <Vm::getSegment(unsigned int)>:
c001808c:	55                   	push   ebp
c001808d:	89 e5                	mov    ebp,esp
c001808f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018092:	c1 e8 10             	shr    eax,0x10
c0018095:	5d                   	pop    ebp
c0018096:	c3                   	ret    

c0018097 <Vm::getOffset(unsigned int)>:
c0018097:	55                   	push   ebp
c0018098:	89 e5                	mov    ebp,esp
c001809a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001809d:	5d                   	pop    ebp
c001809e:	c3                   	ret    

c001809f <Vm::mainloop2()>:
c001809f:	55                   	push   ebp
c00180a0:	89 e5                	mov    ebp,esp
c00180a2:	53                   	push   ebx
c00180a3:	83 ec 04             	sub    esp,0x4
c00180a6:	fa                   	cli    
c00180a7:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00180ac:	83 c0 01             	add    eax,0x1
c00180af:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00180b4:	c6 05 89 73 03 c0 01 	mov    BYTE PTR ds:0xc0037389,0x1
c00180bb:	83 ec 0c             	sub    esp,0xc
c00180be:	6a 02                	push   0x2
c00180c0:	e8 cb f5 ff ff       	call   c0017690 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00180c5:	83 c4 10             	add    esp,0x10
c00180c8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00180cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00180cf:	66 8b 40 5f          	mov    ax,WORD PTR [eax+0x5f]
c00180d3:	0f b7 d8             	movzx  ebx,ax
c00180d6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00180db:	8b 00                	mov    eax,DWORD PTR [eax]
c00180dd:	66 8b 40 5d          	mov    ax,WORD PTR [eax+0x5d]
c00180e1:	0f b7 c8             	movzx  ecx,ax
c00180e4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00180e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00180eb:	66 8b 40 5b          	mov    ax,WORD PTR [eax+0x5b]
c00180ef:	0f b7 d0             	movzx  edx,ax
c00180f2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00180f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00180f9:	66 8b 40 59          	mov    ax,WORD PTR [eax+0x59]
c00180fd:	0f b7 c0             	movzx  eax,ax
c0018100:	53                   	push   ebx
c0018101:	51                   	push   ecx
c0018102:	52                   	push   edx
c0018103:	50                   	push   eax
c0018104:	e8 06 81 fe ff       	call   c000020f <goToVM86>
c0018109:	83 c4 10             	add    esp,0x10
c001810c:	90                   	nop
c001810d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018110:	c9                   	leave  
c0018111:	c3                   	ret    

c0018112 <Vm::mainVm8086Loop(void*)>:
c0018112:	55                   	push   ebp
c0018113:	89 e5                	mov    ebp,esp
c0018115:	83 ec 08             	sub    esp,0x8
c0018118:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0018120:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0018125:	85 c0                	test   eax,eax
c0018127:	75 01                	jne    c001812a <Vm::mainVm8086Loop(void*)+0x18>
c0018129:	fb                   	sti    
c001812a:	e8 70 ff ff ff       	call   c001809f <Vm::mainloop2()>
c001812f:	90                   	nop
c0018130:	c9                   	leave  
c0018131:	c3                   	ret    

c0018132 <Vm::mainloop3(unsigned long)>:
c0018132:	55                   	push   ebp
c0018133:	89 e5                	mov    ebp,esp
c0018135:	83 ec 08             	sub    esp,0x8
c0018138:	fa                   	cli    
c0018139:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c001813e:	83 c0 01             	add    eax,0x1
c0018141:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0018146:	c6 05 88 73 03 c0 01 	mov    BYTE PTR ds:0xc0037388,0x1
c001814d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018150:	a3 84 73 03 c0       	mov    ds:0xc0037384,eax
c0018155:	83 ec 0c             	sub    esp,0xc
c0018158:	6a 02                	push   0x2
c001815a:	e8 31 f5 ff ff       	call   c0017690 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001815f:	83 c4 10             	add    esp,0x10
c0018162:	e8 38 ff ff ff       	call   c001809f <Vm::mainloop2()>
c0018167:	90                   	nop
c0018168:	c9                   	leave  
c0018169:	c3                   	ret    

c001816a <Vm::initialise8086()>:
c001816a:	55                   	push   ebp
c001816b:	89 e5                	mov    ebp,esp
c001816d:	83 ec 08             	sub    esp,0x8
c0018170:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c0018175:	68 80 00 00 00       	push   0x80
c001817a:	6a 00                	push   0x0
c001817c:	68 12 81 01 c0       	push   0xc0018112
c0018181:	50                   	push   eax
c0018182:	e8 a9 f1 ff ff       	call   c0017330 <Process::createThread(void (*)(void*), void*, int)>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	a3 8c 73 03 c0       	mov    ds:0xc003738c,eax
c001818f:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c0018194:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001819a:	83 ec 0c             	sub    esp,0xc
c001819d:	6a 07                	push   0x7
c001819f:	68 10 01 00 00       	push   0x110
c00181a4:	6a 00                	push   0x0
c00181a6:	6a 00                	push   0x0
c00181a8:	50                   	push   eax
c00181a9:	e8 1a c7 ff ff       	call   c00148c8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00181ae:	83 c4 20             	add    esp,0x20
c00181b1:	90                   	nop
c00181b2:	c9                   	leave  
c00181b3:	c3                   	ret    

c00181b4 <Vm::finish8086()>:
c00181b4:	55                   	push   ebp
c00181b5:	89 e5                	mov    ebp,esp
c00181b7:	83 ec 18             	sub    esp,0x18
c00181ba:	fa                   	cli    
c00181bb:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00181c0:	83 c0 01             	add    eax,0x1
c00181c3:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00181c8:	a0 88 73 03 c0       	mov    al,ds:0xc0037388
c00181cd:	0f b6 c0             	movzx  eax,al
c00181d0:	85 c0                	test   eax,eax
c00181d2:	75 19                	jne    c00181ed <Vm::finish8086()+0x39>
c00181d4:	e8 23 f4 ff ff       	call   c00175fc <schedule()>
c00181d9:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00181e1:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00181e6:	85 c0                	test   eax,eax
c00181e8:	75 d0                	jne    c00181ba <Vm::finish8086()+0x6>
c00181ea:	fb                   	sti    
c00181eb:	eb cd                	jmp    c00181ba <Vm::finish8086()+0x6>
c00181ed:	90                   	nop
c00181ee:	a1 84 73 03 c0       	mov    eax,ds:0xc0037384
c00181f3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00181f6:	c6 05 88 73 03 c0 00 	mov    BYTE PTR ds:0xc0037388,0x0
c00181fd:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c0018202:	83 ec 0c             	sub    esp,0xc
c0018205:	50                   	push   eax
c0018206:	e8 4d f7 ff ff       	call   c0017958 <unblockTask(ThreadControlBlock*)>
c001820b:	83 c4 10             	add    esp,0x10
c001820e:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0018216:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c001821b:	85 c0                	test   eax,eax
c001821d:	75 01                	jne    c0018220 <Vm::finish8086()+0x6c>
c001821f:	fb                   	sti    
c0018220:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018223:	c9                   	leave  
c0018224:	c3                   	ret    

c0018225 <Vm::getOutput8086(unsigned char*)>:
c0018225:	55                   	push   ebp
c0018226:	89 e5                	mov    ebp,esp
c0018228:	57                   	push   edi
c0018229:	56                   	push   esi
c001822a:	53                   	push   ebx
c001822b:	83 ec 20             	sub    esp,0x20
c001822e:	a1 90 73 03 c0       	mov    eax,ds:0xc0037390
c0018233:	89 c2                	mov    edx,eax
c0018235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018238:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001823b:	c7 45 e8 a0 73 03 c0 	mov    DWORD PTR [ebp-0x18],0xc00373a0
c0018242:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0018245:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018248:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001824b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001824e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018251:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0018254:	89 c6                	mov    esi,eax
c0018256:	89 d7                	mov    edi,edx
c0018258:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001825a:	89 c8                	mov    eax,ecx
c001825c:	89 fa                	mov    edx,edi
c001825e:	89 f3                	mov    ebx,esi
c0018260:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0018263:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0018266:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018269:	a1 90 73 03 c0       	mov    eax,ds:0xc0037390
c001826e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018271:	c7 05 90 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037390,0x0
c001827b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001827e:	83 c4 20             	add    esp,0x20
c0018281:	5b                   	pop    ebx
c0018282:	5e                   	pop    esi
c0018283:	5f                   	pop    edi
c0018284:	5d                   	pop    ebp
c0018285:	c3                   	ret    

c0018286 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018286:	55                   	push   ebp
c0018287:	89 e5                	mov    ebp,esp
c0018289:	57                   	push   edi
c001828a:	56                   	push   esi
c001828b:	53                   	push   ebx
c001828c:	83 ec 3c             	sub    esp,0x3c
c001828f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0018292:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0018295:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0018298:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001829b:	66 89 5d c4          	mov    WORD PTR [ebp-0x3c],bx
c001829f:	66 89 4d c0          	mov    WORD PTR [ebp-0x40],cx
c00182a3:	66 89 55 bc          	mov    WORD PTR [ebp-0x44],dx
c00182a7:	66 89 45 b8          	mov    WORD PTR [ebp-0x48],ax
c00182ab:	a0 80 73 03 c0       	mov    al,ds:0xc0037380
c00182b0:	83 f0 01             	xor    eax,0x1
c00182b3:	0f b6 c0             	movzx  eax,al
c00182b6:	85 c0                	test   eax,eax
c00182b8:	74 07                	je     c00182c1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c00182ba:	c6 05 80 73 03 c0 01 	mov    BYTE PTR ds:0xc0037380,0x1
c00182c1:	fa                   	cli    
c00182c2:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00182c7:	83 c0 01             	add    eax,0x1
c00182ca:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c00182cf:	a0 89 73 03 c0       	mov    al,ds:0xc0037389
c00182d4:	0f b6 c0             	movzx  eax,al
c00182d7:	85 c0                	test   eax,eax
c00182d9:	75 19                	jne    c00182f4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x6e>
c00182db:	e8 1c f3 ff ff       	call   c00175fc <schedule()>
c00182e0:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00182e8:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00182ed:	85 c0                	test   eax,eax
c00182ef:	75 d0                	jne    c00182c1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c00182f1:	fb                   	sti    
c00182f2:	eb cd                	jmp    c00182c1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c00182f4:	90                   	nop
c00182f5:	8b 15 8c 73 03 c0    	mov    edx,DWORD PTR ds:0xc003738c
c00182fb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00182fe:	66 89 42 59          	mov    WORD PTR [edx+0x59],ax
c0018302:	8b 15 8c 73 03 c0    	mov    edx,DWORD PTR ds:0xc003738c
c0018308:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001830b:	66 89 42 5b          	mov    WORD PTR [edx+0x5b],ax
c001830f:	8b 15 8c 73 03 c0    	mov    edx,DWORD PTR ds:0xc003738c
c0018315:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0018318:	66 89 42 5d          	mov    WORD PTR [edx+0x5d],ax
c001831c:	8b 15 8c 73 03 c0    	mov    edx,DWORD PTR ds:0xc003738c
c0018322:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c0018325:	66 89 42 5f          	mov    WORD PTR [edx+0x5f],ax
c0018329:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c001832e:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018332:	c7 05 90 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037390,0x0
c001833c:	83 ec 04             	sub    esp,0x4
c001833f:	6a 20                	push   0x20
c0018341:	6a 00                	push   0x0
c0018343:	68 a0 73 03 c0       	push   0xc00373a0
c0018348:	e8 a3 81 fe ff       	call   c00004f0 <memset>
c001834d:	83 c4 10             	add    esp,0x10
c0018350:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0018353:	0f b7 55 c4          	movzx  edx,WORD PTR [ebp-0x3c]
c0018357:	0f b7 45 c0          	movzx  eax,WORD PTR [ebp-0x40]
c001835b:	83 ec 08             	sub    esp,0x8
c001835e:	52                   	push   edx
c001835f:	50                   	push   eax
c0018360:	e8 02 fd ff ff       	call   c0018067 <Vm::realToLinear(unsigned short, unsigned short)>
c0018365:	83 c4 10             	add    esp,0x10
c0018368:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001836b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001836e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0018371:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0018374:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018377:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001837a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001837d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018380:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0018383:	89 c6                	mov    esi,eax
c0018385:	89 d7                	mov    edi,edx
c0018387:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018389:	89 c8                	mov    eax,ecx
c001838b:	89 fa                	mov    edx,edi
c001838d:	89 f3                	mov    ebx,esi
c001838f:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0018392:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0018395:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0018398:	c6 05 89 73 03 c0 00 	mov    BYTE PTR ds:0xc0037389,0x0
c001839f:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00183a7:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00183ac:	85 c0                	test   eax,eax
c00183ae:	75 01                	jne    c00183b1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x12b>
c00183b0:	fb                   	sti    
c00183b1:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c00183b6:	83 ec 0c             	sub    esp,0xc
c00183b9:	50                   	push   eax
c00183ba:	e8 99 f5 ff ff       	call   c0017958 <unblockTask(ThreadControlBlock*)>
c00183bf:	83 c4 10             	add    esp,0x10
c00183c2:	b0 01                	mov    al,0x1
c00183c4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00183c7:	5b                   	pop    ebx
c00183c8:	5e                   	pop    esi
c00183c9:	5f                   	pop    edi
c00183ca:	5d                   	pop    ebp
c00183cb:	c3                   	ret    

c00183cc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00183cc:	55                   	push   ebp
c00183cd:	89 e5                	mov    ebp,esp
c00183cf:	56                   	push   esi
c00183d0:	53                   	push   ebx
c00183d1:	83 ec 30             	sub    esp,0x30
c00183d4:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00183d7:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00183da:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00183dd:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00183e0:	66 89 5d d4          	mov    WORD PTR [ebp-0x2c],bx
c00183e4:	66 89 4d d0          	mov    WORD PTR [ebp-0x30],cx
c00183e8:	66 89 55 cc          	mov    WORD PTR [ebp-0x34],dx
c00183ec:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c00183f0:	a0 80 73 03 c0       	mov    al,ds:0xc0037380
c00183f5:	83 f0 01             	xor    eax,0x1
c00183f8:	0f b6 c0             	movzx  eax,al
c00183fb:	85 c0                	test   eax,eax
c00183fd:	74 07                	je     c0018406 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3a>
c00183ff:	c6 05 80 73 03 c0 01 	mov    BYTE PTR ds:0xc0037380,0x1
c0018406:	83 ec 08             	sub    esp,0x8
c0018409:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001840c:	68 e8 ce 02 c0       	push   0xc002cee8
c0018411:	e8 66 eb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018416:	83 c4 10             	add    esp,0x10
c0018419:	fa                   	cli    
c001841a:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c001841f:	83 c0 01             	add    eax,0x1
c0018422:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c0018427:	a0 89 73 03 c0       	mov    al,ds:0xc0037389
c001842c:	0f b6 c0             	movzx  eax,al
c001842f:	85 c0                	test   eax,eax
c0018431:	75 19                	jne    c001844c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x80>
c0018433:	e8 c4 f1 ff ff       	call   c00175fc <schedule()>
c0018438:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0018440:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0018445:	85 c0                	test   eax,eax
c0018447:	75 d0                	jne    c0018419 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0018449:	fb                   	sti    
c001844a:	eb cd                	jmp    c0018419 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c001844c:	90                   	nop
c001844d:	8b 15 8c 73 03 c0    	mov    edx,DWORD PTR ds:0xc003738c
c0018453:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018456:	66 89 42 59          	mov    WORD PTR [edx+0x59],ax
c001845a:	8b 15 8c 73 03 c0    	mov    edx,DWORD PTR ds:0xc003738c
c0018460:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018463:	66 89 42 5b          	mov    WORD PTR [edx+0x5b],ax
c0018467:	8b 15 8c 73 03 c0    	mov    edx,DWORD PTR ds:0xc003738c
c001846d:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
c0018470:	66 89 42 5d          	mov    WORD PTR [edx+0x5d],ax
c0018474:	8b 15 8c 73 03 c0    	mov    edx,DWORD PTR ds:0xc003738c
c001847a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001847d:	66 89 42 5f          	mov    WORD PTR [edx+0x5f],ax
c0018481:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c0018486:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001848a:	c7 05 90 73 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037390,0x0
c0018494:	83 ec 04             	sub    esp,0x4
c0018497:	6a 20                	push   0x20
c0018499:	6a 00                	push   0x0
c001849b:	68 a0 73 03 c0       	push   0xc00373a0
c00184a0:	e8 4b 80 fe ff       	call   c00004f0 <memset>
c00184a5:	83 c4 10             	add    esp,0x10
c00184a8:	c7 45 ec 14 01 00 00 	mov    DWORD PTR [ebp-0x14],0x114
c00184af:	83 ec 0c             	sub    esp,0xc
c00184b2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00184b5:	e8 55 81 ff ff       	call   c001060f <malloc>
c00184ba:	83 c4 10             	add    esp,0x10
c00184bd:	89 c3                	mov    ebx,eax
c00184bf:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c00184c4:	83 ec 04             	sub    esp,0x4
c00184c7:	50                   	push   eax
c00184c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00184cb:	53                   	push   ebx
c00184cc:	e8 f9 09 ff ff       	call   c0008eca <File::File(char const*, Process*)>
c00184d1:	83 c4 10             	add    esp,0x10
c00184d4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00184d7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00184db:	75 29                	jne    c0018506 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13a>
c00184dd:	83 ec 0c             	sub    esp,0xc
c00184e0:	68 0a cf 02 c0       	push   0xc002cf0a
c00184e5:	e8 7a 85 ff ff       	call   c0010a64 <KePanic(char const*)>
c00184ea:	83 c4 10             	add    esp,0x10
c00184ed:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00184f5:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00184fa:	85 c0                	test   eax,eax
c00184fc:	75 01                	jne    c00184ff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x133>
c00184fe:	fb                   	sti    
c00184ff:	b0 00                	mov    al,0x0
c0018501:	e9 fb 00 00 00       	jmp    c0018601 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c0018506:	83 ec 04             	sub    esp,0x4
c0018509:	8d 45 df             	lea    eax,[ebp-0x21]
c001850c:	50                   	push   eax
c001850d:	8d 45 e0             	lea    eax,[ebp-0x20]
c0018510:	50                   	push   eax
c0018511:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0018514:	e8 d1 0c ff ff       	call   c00091ea <File::stat(unsigned long long*, bool*)>
c0018519:	83 c4 10             	add    esp,0x10
c001851c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001851f:	0f b6 c0             	movzx  eax,al
c0018522:	85 c0                	test   eax,eax
c0018524:	74 29                	je     c001854f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0018526:	83 ec 0c             	sub    esp,0xc
c0018529:	68 1e cf 02 c0       	push   0xc002cf1e
c001852e:	e8 31 85 ff ff       	call   c0010a64 <KePanic(char const*)>
c0018533:	83 c4 10             	add    esp,0x10
c0018536:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c001853e:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0018543:	85 c0                	test   eax,eax
c0018545:	75 01                	jne    c0018548 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17c>
c0018547:	fb                   	sti    
c0018548:	b0 00                	mov    al,0x0
c001854a:	e9 b2 00 00 00       	jmp    c0018601 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c001854f:	83 ec 08             	sub    esp,0x8
c0018552:	6a 01                	push   0x1
c0018554:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0018557:	e8 8c 09 ff ff       	call   c0008ee8 <File::open(FileOpenMode)>
c001855c:	83 c4 10             	add    esp,0x10
c001855f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018562:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0018566:	74 26                	je     c001858e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1c2>
c0018568:	83 ec 0c             	sub    esp,0xc
c001856b:	68 37 cf 02 c0       	push   0xc002cf37
c0018570:	e8 ef 84 ff ff       	call   c0010a64 <KePanic(char const*)>
c0018575:	83 c4 10             	add    esp,0x10
c0018578:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c0018580:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0018585:	85 c0                	test   eax,eax
c0018587:	75 01                	jne    c001858a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1be>
c0018589:	fb                   	sti    
c001858a:	b0 00                	mov    al,0x0
c001858c:	eb 73                	jmp    c0018601 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c001858e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018591:	8b 00                	mov    eax,DWORD PTR [eax]
c0018593:	83 c0 0c             	add    eax,0xc
c0018596:	8b 18                	mov    ebx,DWORD PTR [eax]
c0018598:	0f b7 55 d4          	movzx  edx,WORD PTR [ebp-0x2c]
c001859c:	0f b7 45 d0          	movzx  eax,WORD PTR [ebp-0x30]
c00185a0:	83 ec 08             	sub    esp,0x8
c00185a3:	52                   	push   edx
c00185a4:	50                   	push   eax
c00185a5:	e8 bd fa ff ff       	call   c0018067 <Vm::realToLinear(unsigned short, unsigned short)>
c00185aa:	83 c4 10             	add    esp,0x10
c00185ad:	89 c6                	mov    esi,eax
c00185af:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00185b2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00185b5:	83 ec 0c             	sub    esp,0xc
c00185b8:	8d 4d d8             	lea    ecx,[ebp-0x28]
c00185bb:	51                   	push   ecx
c00185bc:	56                   	push   esi
c00185bd:	52                   	push   edx
c00185be:	50                   	push   eax
c00185bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00185c2:	ff d3                	call   ebx
c00185c4:	83 c4 20             	add    esp,0x20
c00185c7:	83 ec 0c             	sub    esp,0xc
c00185ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00185cd:	e8 74 09 ff ff       	call   c0008f46 <File::close()>
c00185d2:	83 c4 10             	add    esp,0x10
c00185d5:	c6 05 89 73 03 c0 00 	mov    BYTE PTR ds:0xc0037389,0x0
c00185dc:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c00185e4:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c00185e9:	85 c0                	test   eax,eax
c00185eb:	75 01                	jne    c00185ee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x222>
c00185ed:	fb                   	sti    
c00185ee:	a1 8c 73 03 c0       	mov    eax,ds:0xc003738c
c00185f3:	83 ec 0c             	sub    esp,0xc
c00185f6:	50                   	push   eax
c00185f7:	e8 5c f3 ff ff       	call   c0017958 <unblockTask(ThreadControlBlock*)>
c00185fc:	83 c4 10             	add    esp,0x10
c00185ff:	b0 01                	mov    al,0x1
c0018601:	8d 65 f8             	lea    esp,[ebp-0x8]
c0018604:	5b                   	pop    ebx
c0018605:	5e                   	pop    esi
c0018606:	5d                   	pop    ebp
c0018607:	c3                   	ret    

c0018608 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018608:	55                   	push   ebp
c0018609:	89 e5                	mov    ebp,esp
c001860b:	83 ec 68             	sub    esp,0x68
c001860e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0018611:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0018614:	66 89 55 9c          	mov    WORD PTR [ebp-0x64],dx
c0018618:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c001861c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c0018623:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
c0018626:	83 e8 06             	sub    eax,0x6
c0018629:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c001862d:	0f b7 55 98          	movzx  edx,WORD PTR [ebp-0x68]
c0018631:	0f b7 45 9c          	movzx  eax,WORD PTR [ebp-0x64]
c0018635:	52                   	push   edx
c0018636:	50                   	push   eax
c0018637:	e8 2b fa ff ff       	call   c0018067 <Vm::realToLinear(unsigned short, unsigned short)>
c001863c:	83 c4 08             	add    esp,0x8
c001863f:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0018642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018645:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018648:	83 e8 06             	sub    eax,0x6
c001864b:	0f b7 d0             	movzx  edx,ax
c001864e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018651:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018657:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001865a:	83 c0 02             	add    eax,0x2
c001865d:	0f b7 c0             	movzx  eax,ax
c0018660:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0018663:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c0018666:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
c001866a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c001866d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018670:	66 8b 45 da          	mov    ax,WORD PTR [ebp-0x26]
c0018674:	88 c2                	mov    dl,al
c0018676:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018679:	88 10                	mov    BYTE PTR [eax],dl
c001867b:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
c001867f:	c1 e8 08             	shr    eax,0x8
c0018682:	89 c2                	mov    edx,eax
c0018684:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018687:	83 c0 01             	add    eax,0x1
c001868a:	88 10                	mov    BYTE PTR [eax],dl
c001868c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001868f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018692:	0f b7 c0             	movzx  eax,ax
c0018695:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0018698:	83 c2 02             	add    edx,0x2
c001869b:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
c001869e:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c00186a2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00186a5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00186a8:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c00186ac:	88 c2                	mov    dl,al
c00186ae:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00186b1:	88 10                	mov    BYTE PTR [eax],dl
c00186b3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c00186b7:	c1 e8 08             	shr    eax,0x8
c00186ba:	89 c2                	mov    edx,eax
c00186bc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00186bf:	83 c0 01             	add    eax,0x1
c00186c2:	88 10                	mov    BYTE PTR [eax],dl
c00186c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00186ca:	0f b7 c0             	movzx  eax,ax
c00186cd:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00186d0:	83 c2 04             	add    edx,0x4
c00186d3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00186d6:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
c00186da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00186dd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00186e0:	66 8b 45 f2          	mov    ax,WORD PTR [ebp-0xe]
c00186e4:	88 c2                	mov    dl,al
c00186e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00186e9:	88 10                	mov    BYTE PTR [eax],dl
c00186eb:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
c00186ef:	c1 e8 08             	shr    eax,0x8
c00186f2:	89 c2                	mov    edx,eax
c00186f4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00186f7:	83 c0 01             	add    eax,0x1
c00186fa:	88 10                	mov    BYTE PTR [eax],dl
c00186fc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018701:	8b 00                	mov    eax,DWORD PTR [eax]
c0018703:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0018706:	0f b6 c0             	movzx  eax,al
c0018709:	85 c0                	test   eax,eax
c001870b:	74 5e                	je     c001876b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x163>
c001870d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0018710:	83 c0 04             	add    eax,0x4
c0018713:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0018716:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018719:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c001871c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001871f:	8a 00                	mov    al,BYTE PTR [eax]
c0018721:	0f b6 c0             	movzx  eax,al
c0018724:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0018727:	83 c2 01             	add    edx,0x1
c001872a:	8a 12                	mov    dl,BYTE PTR [edx]
c001872c:	0f b6 d2             	movzx  edx,dl
c001872f:	c1 e2 08             	shl    edx,0x8
c0018732:	09 d0                	or     eax,edx
c0018734:	80 cc 02             	or     ah,0x2
c0018737:	0f b7 c0             	movzx  eax,ax
c001873a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c001873d:	83 c2 04             	add    edx,0x4
c0018740:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0018743:	66 89 45 ce          	mov    WORD PTR [ebp-0x32],ax
c0018747:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001874a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001874d:	66 8b 45 ce          	mov    ax,WORD PTR [ebp-0x32]
c0018751:	88 c2                	mov    dl,al
c0018753:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0018756:	88 10                	mov    BYTE PTR [eax],dl
c0018758:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
c001875c:	c1 e8 08             	shr    eax,0x8
c001875f:	89 c2                	mov    edx,eax
c0018761:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0018764:	83 c0 01             	add    eax,0x1
c0018767:	88 10                	mov    BYTE PTR [eax],dl
c0018769:	eb 5e                	jmp    c00187c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x1c1>
c001876b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001876e:	83 c0 04             	add    eax,0x4
c0018771:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0018774:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0018777:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c001877a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c001877d:	8a 00                	mov    al,BYTE PTR [eax]
c001877f:	0f b6 c0             	movzx  eax,al
c0018782:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c0018785:	83 c2 01             	add    edx,0x1
c0018788:	8a 12                	mov    dl,BYTE PTR [edx]
c001878a:	0f b6 d2             	movzx  edx,dl
c001878d:	c1 e2 08             	shl    edx,0x8
c0018790:	09 d0                	or     eax,edx
c0018792:	0f b7 c0             	movzx  eax,ax
c0018795:	25 ff fd 00 00       	and    eax,0xfdff
c001879a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c001879d:	83 c2 04             	add    edx,0x4
c00187a0:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
c00187a3:	66 89 45 ba          	mov    WORD PTR [ebp-0x46],ax
c00187a7:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c00187aa:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c00187ad:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
c00187b1:	88 c2                	mov    dl,al
c00187b3:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c00187b6:	88 10                	mov    BYTE PTR [eax],dl
c00187b8:	0f b7 45 ba          	movzx  eax,WORD PTR [ebp-0x46]
c00187bc:	c1 e8 08             	shr    eax,0x8
c00187bf:	89 c2                	mov    edx,eax
c00187c1:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c00187c4:	83 c0 01             	add    eax,0x1
c00187c7:	88 10                	mov    BYTE PTR [eax],dl
c00187c9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00187ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00187d0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00187d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00187d7:	c1 e0 02             	shl    eax,0x2
c00187da:	8d 50 02             	lea    edx,[eax+0x2]
c00187dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00187e0:	01 d0                	add    eax,edx
c00187e2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00187e5:	0f b7 d0             	movzx  edx,ax
c00187e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187eb:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00187ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00187f1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00187f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00187fb:	01 d0                	add    eax,edx
c00187fd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018800:	0f b7 d0             	movzx  edx,ax
c0018803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018806:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018809:	90                   	nop
c001880a:	c9                   	leave  
c001880b:	c3                   	ret    

c001880c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001880c:	55                   	push   ebp
c001880d:	89 e5                	mov    ebp,esp
c001880f:	83 ec 28             	sub    esp,0x28
c0018812:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018815:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018818:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c001881c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018820:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018824:	c1 e0 04             	shl    eax,0x4
c0018827:	89 c2                	mov    edx,eax
c0018829:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001882d:	01 d0                	add    eax,edx
c001882f:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018834:	7e 10                	jle    c0018846 <Vm::readByteFromReal(unsigned short, unsigned short)+0x3a>
c0018836:	83 ec 0c             	sub    esp,0xc
c0018839:	68 50 cf 02 c0       	push   0xc002cf50
c001883e:	e8 21 82 ff ff       	call   c0010a64 <KePanic(char const*)>
c0018843:	83 c4 10             	add    esp,0x10
c0018846:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001884a:	c1 e0 04             	shl    eax,0x4
c001884d:	89 c2                	mov    edx,eax
c001884f:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018853:	01 d0                	add    eax,edx
c0018855:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018858:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001885b:	8a 00                	mov    al,BYTE PTR [eax]
c001885d:	c9                   	leave  
c001885e:	c3                   	ret    

c001885f <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001885f:	55                   	push   ebp
c0018860:	89 e5                	mov    ebp,esp
c0018862:	83 ec 28             	sub    esp,0x28
c0018865:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018868:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001886b:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c001886f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018873:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018877:	c1 e0 04             	shl    eax,0x4
c001887a:	89 c2                	mov    edx,eax
c001887c:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018880:	01 d0                	add    eax,edx
c0018882:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018887:	7e 10                	jle    c0018899 <Vm::readWordFromReal(unsigned short, unsigned short)+0x3a>
c0018889:	83 ec 0c             	sub    esp,0xc
c001888c:	68 50 cf 02 c0       	push   0xc002cf50
c0018891:	e8 ce 81 ff ff       	call   c0010a64 <KePanic(char const*)>
c0018896:	83 c4 10             	add    esp,0x10
c0018899:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001889d:	c1 e0 04             	shl    eax,0x4
c00188a0:	89 c2                	mov    edx,eax
c00188a2:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00188a6:	01 d0                	add    eax,edx
c00188a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00188ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00188ae:	66 8b 00             	mov    ax,WORD PTR [eax]
c00188b1:	c9                   	leave  
c00188b2:	c3                   	ret    

c00188b3 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00188b3:	55                   	push   ebp
c00188b4:	89 e5                	mov    ebp,esp
c00188b6:	83 ec 28             	sub    esp,0x28
c00188b9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00188bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00188bf:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00188c3:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00188c7:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00188cb:	c1 e0 04             	shl    eax,0x4
c00188ce:	89 c2                	mov    edx,eax
c00188d0:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00188d4:	01 d0                	add    eax,edx
c00188d6:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00188db:	7e 10                	jle    c00188ed <Vm::readDwordFromReal(unsigned short, unsigned short)+0x3a>
c00188dd:	83 ec 0c             	sub    esp,0xc
c00188e0:	68 50 cf 02 c0       	push   0xc002cf50
c00188e5:	e8 7a 81 ff ff       	call   c0010a64 <KePanic(char const*)>
c00188ea:	83 c4 10             	add    esp,0x10
c00188ed:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00188f1:	c1 e0 04             	shl    eax,0x4
c00188f4:	89 c2                	mov    edx,eax
c00188f6:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00188fa:	01 d0                	add    eax,edx
c00188fc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00188ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018902:	8b 00                	mov    eax,DWORD PTR [eax]
c0018904:	c9                   	leave  
c0018905:	c3                   	ret    

c0018906 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018906:	55                   	push   ebp
c0018907:	89 e5                	mov    ebp,esp
c0018909:	83 ec 28             	sub    esp,0x28
c001890c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001890f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018912:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0018915:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0018919:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001891d:	88 c8                	mov    al,cl
c001891f:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
c0018922:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018926:	c1 e0 04             	shl    eax,0x4
c0018929:	89 c2                	mov    edx,eax
c001892b:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001892f:	01 d0                	add    eax,edx
c0018931:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018936:	7e 10                	jle    c0018948 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)+0x42>
c0018938:	83 ec 0c             	sub    esp,0xc
c001893b:	68 50 cf 02 c0       	push   0xc002cf50
c0018940:	e8 1f 81 ff ff       	call   c0010a64 <KePanic(char const*)>
c0018945:	83 c4 10             	add    esp,0x10
c0018948:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001894c:	c1 e0 04             	shl    eax,0x4
c001894f:	89 c2                	mov    edx,eax
c0018951:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018955:	01 d0                	add    eax,edx
c0018957:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001895a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001895d:	8a 55 dc             	mov    dl,BYTE PTR [ebp-0x24]
c0018960:	88 10                	mov    BYTE PTR [eax],dl
c0018962:	90                   	nop
c0018963:	c9                   	leave  
c0018964:	c3                   	ret    

c0018965 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018965:	55                   	push   ebp
c0018966:	89 e5                	mov    ebp,esp
c0018968:	83 ec 28             	sub    esp,0x28
c001896b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001896e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018971:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018974:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
c0018978:	66 89 55 e0          	mov    WORD PTR [ebp-0x20],dx
c001897c:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018980:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018984:	c1 e0 04             	shl    eax,0x4
c0018987:	89 c2                	mov    edx,eax
c0018989:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001898d:	01 d0                	add    eax,edx
c001898f:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018994:	7e 10                	jle    c00189a6 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)+0x41>
c0018996:	83 ec 0c             	sub    esp,0xc
c0018999:	68 50 cf 02 c0       	push   0xc002cf50
c001899e:	e8 c1 80 ff ff       	call   c0010a64 <KePanic(char const*)>
c00189a3:	83 c4 10             	add    esp,0x10
c00189a6:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00189aa:	c1 e0 04             	shl    eax,0x4
c00189ad:	89 c2                	mov    edx,eax
c00189af:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00189b3:	01 d0                	add    eax,edx
c00189b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00189b8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00189bb:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00189be:	66 89 02             	mov    WORD PTR [edx],ax
c00189c1:	90                   	nop
c00189c2:	c9                   	leave  
c00189c3:	c3                   	ret    

c00189c4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00189c4:	55                   	push   ebp
c00189c5:	89 e5                	mov    ebp,esp
c00189c7:	83 ec 28             	sub    esp,0x28
c00189ca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00189cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00189d0:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00189d4:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00189d8:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00189dc:	c1 e0 04             	shl    eax,0x4
c00189df:	89 c2                	mov    edx,eax
c00189e1:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00189e5:	01 d0                	add    eax,edx
c00189e7:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00189ec:	7e 10                	jle    c00189fe <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)+0x3a>
c00189ee:	83 ec 0c             	sub    esp,0xc
c00189f1:	68 50 cf 02 c0       	push   0xc002cf50
c00189f6:	e8 69 80 ff ff       	call   c0010a64 <KePanic(char const*)>
c00189fb:	83 c4 10             	add    esp,0x10
c00189fe:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018a02:	c1 e0 04             	shl    eax,0x4
c0018a05:	89 c2                	mov    edx,eax
c0018a07:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018a0b:	01 d0                	add    eax,edx
c0018a0d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018a10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018a13:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0018a16:	89 10                	mov    DWORD PTR [eax],edx
c0018a18:	90                   	nop
c0018a19:	c9                   	leave  
c0018a1a:	c3                   	ret    

c0018a1b <Vm::faultHandler(regs*)>:
c0018a1b:	55                   	push   ebp
c0018a1c:	89 e5                	mov    ebp,esp
c0018a1e:	57                   	push   edi
c0018a1f:	56                   	push   esi
c0018a20:	53                   	push   ebx
c0018a21:	81 ec ac 00 00 00    	sub    esp,0xac
c0018a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018a2d:	0f b7 d0             	movzx  edx,ax
c0018a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a33:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018a36:	0f b7 c0             	movzx  eax,ax
c0018a39:	52                   	push   edx
c0018a3a:	50                   	push   eax
c0018a3b:	e8 27 f6 ff ff       	call   c0018067 <Vm::realToLinear(unsigned short, unsigned short)>
c0018a40:	83 c4 08             	add    esp,0x8
c0018a43:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a49:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018a4c:	0f b7 d0             	movzx  edx,ax
c0018a4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a52:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018a55:	0f b7 c0             	movzx  eax,ax
c0018a58:	52                   	push   edx
c0018a59:	50                   	push   eax
c0018a5a:	e8 08 f6 ff ff       	call   c0018067 <Vm::realToLinear(unsigned short, unsigned short)>
c0018a5f:	83 c4 08             	add    esp,0x8
c0018a62:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a68:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018a6b:	0f b7 d0             	movzx  edx,ax
c0018a6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a71:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018a74:	0f b7 c0             	movzx  eax,ax
c0018a77:	52                   	push   edx
c0018a78:	50                   	push   eax
c0018a79:	e8 e9 f5 ff ff       	call   c0018067 <Vm::realToLinear(unsigned short, unsigned short)>
c0018a7e:	83 c4 08             	add    esp,0x8
c0018a81:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0018a84:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0018a8b:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
c0018a8f:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
c0018a93:	c6 45 e1 06          	mov    BYTE PTR [ebp-0x1f],0x6
c0018a97:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a9a:	8a 00                	mov    al,BYTE PTR [eax]
c0018a9c:	0f b6 c0             	movzx  eax,al
c0018a9f:	83 e8 26             	sub    eax,0x26
c0018aa2:	3d d5 00 00 00       	cmp    eax,0xd5
c0018aa7:	0f 87 f4 0c 00 00    	ja     c00197a1 <Vm::faultHandler(regs*)+0xd86>
c0018aad:	8b 04 85 d0 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3030]
c0018ab4:	ff e0                	jmp    eax
c0018ab6:	c6 45 e1 02          	mov    BYTE PTR [ebp-0x1f],0x2
c0018aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018abd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ac0:	8d 50 01             	lea    edx,[eax+0x1]
c0018ac3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ac6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018ac9:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018acd:	e9 83 0d 00 00       	jmp    c0019855 <Vm::faultHandler(regs*)+0xe3a>
c0018ad2:	c6 45 e1 00          	mov    BYTE PTR [ebp-0x1f],0x0
c0018ad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ad9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018adc:	8d 50 01             	lea    edx,[eax+0x1]
c0018adf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ae2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018ae5:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018ae9:	e9 67 0d 00 00       	jmp    c0019855 <Vm::faultHandler(regs*)+0xe3a>
c0018aee:	c6 45 e1 01          	mov    BYTE PTR [ebp-0x1f],0x1
c0018af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018af5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018af8:	8d 50 01             	lea    edx,[eax+0x1]
c0018afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018afe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018b01:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018b05:	e9 4b 0d 00 00       	jmp    c0019855 <Vm::faultHandler(regs*)+0xe3a>
c0018b0a:	c6 45 e1 03          	mov    BYTE PTR [ebp-0x1f],0x3
c0018b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b11:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b14:	8d 50 01             	lea    edx,[eax+0x1]
c0018b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b1a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018b1d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018b21:	e9 2f 0d 00 00       	jmp    c0019855 <Vm::faultHandler(regs*)+0xe3a>
c0018b26:	c6 45 e1 04          	mov    BYTE PTR [ebp-0x1f],0x4
c0018b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b2d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b30:	8d 50 01             	lea    edx,[eax+0x1]
c0018b33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b36:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018b39:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018b3d:	e9 13 0d 00 00       	jmp    c0019855 <Vm::faultHandler(regs*)+0xe3a>
c0018b42:	c6 45 e1 05          	mov    BYTE PTR [ebp-0x1f],0x5
c0018b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b49:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b4c:	8d 50 01             	lea    edx,[eax+0x1]
c0018b4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b52:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018b55:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018b59:	e9 f7 0c 00 00       	jmp    c0019855 <Vm::faultHandler(regs*)+0xe3a>
c0018b5e:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0018b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b65:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b68:	8d 50 01             	lea    edx,[eax+0x1]
c0018b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b6e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018b71:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018b75:	e9 db 0c 00 00       	jmp    c0019855 <Vm::faultHandler(regs*)+0xe3a>
c0018b7a:	c6 45 e2 01          	mov    BYTE PTR [ebp-0x1e],0x1
c0018b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b81:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b84:	8d 50 01             	lea    edx,[eax+0x1]
c0018b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b8a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018b8d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018b91:	e9 bf 0c 00 00       	jmp    c0019855 <Vm::faultHandler(regs*)+0xe3a>
c0018b96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b9c:	8d 50 01             	lea    edx,[eax+0x1]
c0018b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ba2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018ba5:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018ba9:	e9 a7 0c 00 00       	jmp    c0019855 <Vm::faultHandler(regs*)+0xe3a>
c0018bae:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018bb2:	85 c0                	test   eax,eax
c0018bb4:	74 5b                	je     c0018c11 <Vm::faultHandler(regs*)+0x1f6>
c0018bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bb9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018bbc:	83 e8 04             	sub    eax,0x4
c0018bbf:	0f b7 d0             	movzx  edx,ax
c0018bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bc5:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018bc8:	83 6d d0 04          	sub    DWORD PTR [ebp-0x30],0x4
c0018bcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bcf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018bd2:	25 ff 0d 00 00       	and    eax,0xdff
c0018bd7:	89 c2                	mov    edx,eax
c0018bd9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018bdc:	89 10                	mov    DWORD PTR [eax],edx
c0018bde:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0018be5:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0018be8:	0f b6 c0             	movzx  eax,al
c0018beb:	85 c0                	test   eax,eax
c0018bed:	74 11                	je     c0018c00 <Vm::faultHandler(regs*)+0x1e5>
c0018bef:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bf4:	80 cc 02             	or     ah,0x2
c0018bf7:	89 c2                	mov    edx,eax
c0018bf9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018bfc:	89 10                	mov    DWORD PTR [eax],edx
c0018bfe:	eb 64                	jmp    c0018c64 <Vm::faultHandler(regs*)+0x249>
c0018c00:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018c03:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c05:	80 e4 fd             	and    ah,0xfd
c0018c08:	89 c2                	mov    edx,eax
c0018c0a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018c0d:	89 10                	mov    DWORD PTR [eax],edx
c0018c0f:	eb 53                	jmp    c0018c64 <Vm::faultHandler(regs*)+0x249>
c0018c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c14:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018c17:	83 e8 02             	sub    eax,0x2
c0018c1a:	0f b7 d0             	movzx  edx,ax
c0018c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c20:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018c23:	83 6d d4 02          	sub    DWORD PTR [ebp-0x2c],0x2
c0018c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018c2d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018c30:	66 89 02             	mov    WORD PTR [edx],ax
c0018c33:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018c38:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c3a:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0018c3d:	0f b6 c0             	movzx  eax,al
c0018c40:	85 c0                	test   eax,eax
c0018c42:	74 11                	je     c0018c55 <Vm::faultHandler(regs*)+0x23a>
c0018c44:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018c47:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018c4a:	80 cc 02             	or     ah,0x2
c0018c4d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018c50:	66 89 02             	mov    WORD PTR [edx],ax
c0018c53:	eb 0f                	jmp    c0018c64 <Vm::faultHandler(regs*)+0x249>
c0018c55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018c58:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018c5b:	80 e4 fd             	and    ah,0xfd
c0018c5e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018c61:	66 89 02             	mov    WORD PTR [edx],ax
c0018c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c67:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018c6a:	8d 50 01             	lea    edx,[eax+0x1]
c0018c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c70:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018c73:	b0 01                	mov    al,0x1
c0018c75:	e9 e0 0b 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0018c7a:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018c7e:	85 c0                	test   eax,eax
c0018c80:	74 46                	je     c0018cc8 <Vm::faultHandler(regs*)+0x2ad>
c0018c82:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018c85:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c87:	25 ff 0d 00 00       	and    eax,0xdff
c0018c8c:	0d 00 02 02 00       	or     eax,0x20200
c0018c91:	89 c2                	mov    edx,eax
c0018c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c96:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018c99:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c9e:	25 00 02 00 00       	and    eax,0x200
c0018ca3:	89 c2                	mov    edx,eax
c0018ca5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018caa:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cac:	85 d2                	test   edx,edx
c0018cae:	0f 95 c2             	setne  dl
c0018cb1:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018cb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cb7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018cba:	83 c0 04             	add    eax,0x4
c0018cbd:	0f b7 d0             	movzx  edx,ax
c0018cc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cc3:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018cc6:	eb 47                	jmp    c0018d0f <Vm::faultHandler(regs*)+0x2f4>
c0018cc8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018ccb:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018cce:	0f b7 c0             	movzx  eax,ax
c0018cd1:	0d 00 02 02 00       	or     eax,0x20200
c0018cd6:	89 c2                	mov    edx,eax
c0018cd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cdb:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018cde:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018ce1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018ce4:	0f b7 c0             	movzx  eax,ax
c0018ce7:	25 00 02 00 00       	and    eax,0x200
c0018cec:	89 c2                	mov    edx,eax
c0018cee:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cf5:	85 d2                	test   edx,edx
c0018cf7:	0f 95 c2             	setne  dl
c0018cfa:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018cfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d00:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018d03:	83 c0 02             	add    eax,0x2
c0018d06:	0f b7 d0             	movzx  edx,ax
c0018d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d0c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018d0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d12:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018d15:	8d 50 01             	lea    edx,[eax+0x1]
c0018d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d1b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018d1e:	b0 01                	mov    al,0x1
c0018d20:	e9 35 0b 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0018d25:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d28:	83 c0 01             	add    eax,0x1
c0018d2b:	8a 00                	mov    al,BYTE PTR [eax]
c0018d2d:	0f b6 c0             	movzx  eax,al
c0018d30:	3d ee 00 00 00       	cmp    eax,0xee
c0018d35:	75 19                	jne    c0018d50 <Vm::faultHandler(regs*)+0x335>
c0018d37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d3a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018d3d:	83 ec 0c             	sub    esp,0xc
c0018d40:	50                   	push   eax
c0018d41:	e8 ec f3 ff ff       	call   c0018132 <Vm::mainloop3(unsigned long)>
c0018d46:	83 c4 10             	add    esp,0x10
c0018d49:	b0 01                	mov    al,0x1
c0018d4b:	e9 0a 0b 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0018d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d53:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018d56:	0f b7 c8             	movzx  ecx,ax
c0018d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d5c:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018d5f:	0f b7 d0             	movzx  edx,ax
c0018d62:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d65:	83 c0 01             	add    eax,0x1
c0018d68:	8a 00                	mov    al,BYTE PTR [eax]
c0018d6a:	0f b6 c0             	movzx  eax,al
c0018d6d:	83 ec 0c             	sub    esp,0xc
c0018d70:	51                   	push   ecx
c0018d71:	52                   	push   edx
c0018d72:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0018d75:	50                   	push   eax
c0018d76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018d79:	e8 8a f8 ff ff       	call   c0018608 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018d7e:	83 c4 20             	add    esp,0x20
c0018d81:	b0 01                	mov    al,0x1
c0018d83:	e9 d2 0a 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0018d88:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018d8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d8f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018d93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d96:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018d99:	8d 50 01             	lea    edx,[eax+0x1]
c0018d9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d9f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018da2:	b0 01                	mov    al,0x1
c0018da4:	e9 b1 0a 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0018da9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018dae:	8b 00                	mov    eax,DWORD PTR [eax]
c0018db0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018db7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018dba:	8d 50 01             	lea    edx,[eax+0x1]
c0018dbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dc0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018dc3:	b0 01                	mov    al,0x1
c0018dc5:	e9 90 0a 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0018dca:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018dcd:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0018dd0:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0018dd3:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
c0018dd6:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c0018dd9:	8a 00                	mov    al,BYTE PTR [eax]
c0018ddb:	0f b6 c0             	movzx  eax,al
c0018dde:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c0018de1:	83 c2 01             	add    edx,0x1
c0018de4:	8a 12                	mov    dl,BYTE PTR [edx]
c0018de6:	0f b6 d2             	movzx  edx,dl
c0018de9:	c1 e2 08             	shl    edx,0x8
c0018dec:	09 d0                	or     eax,edx
c0018dee:	0f b7 d0             	movzx  edx,ax
c0018df1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018df4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018df7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018dfa:	83 c0 02             	add    eax,0x2
c0018dfd:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0018e00:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0018e03:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0018e06:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0018e09:	8a 00                	mov    al,BYTE PTR [eax]
c0018e0b:	0f b6 c0             	movzx  eax,al
c0018e0e:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c0018e11:	83 c2 01             	add    edx,0x1
c0018e14:	8a 12                	mov    dl,BYTE PTR [edx]
c0018e16:	0f b6 d2             	movzx  edx,dl
c0018e19:	c1 e2 08             	shl    edx,0x8
c0018e1c:	09 d0                	or     eax,edx
c0018e1e:	0f b7 d0             	movzx  edx,ax
c0018e21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e24:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0018e27:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018e2a:	83 c0 04             	add    eax,0x4
c0018e2d:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
c0018e30:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0018e33:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
c0018e36:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c0018e39:	8a 00                	mov    al,BYTE PTR [eax]
c0018e3b:	0f b6 c0             	movzx  eax,al
c0018e3e:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c0018e41:	83 c2 01             	add    edx,0x1
c0018e44:	8a 12                	mov    dl,BYTE PTR [edx]
c0018e46:	0f b6 d2             	movzx  edx,dl
c0018e49:	c1 e2 08             	shl    edx,0x8
c0018e4c:	09 d0                	or     eax,edx
c0018e4e:	0f b7 c0             	movzx  eax,ax
c0018e51:	0d 00 02 02 00       	or     eax,0x20200
c0018e56:	89 c2                	mov    edx,eax
c0018e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e5b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018e5e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018e61:	83 c0 04             	add    eax,0x4
c0018e64:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0018e67:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018e6a:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0018e6d:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0018e70:	8a 00                	mov    al,BYTE PTR [eax]
c0018e72:	0f b6 c0             	movzx  eax,al
c0018e75:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0018e78:	83 c2 01             	add    edx,0x1
c0018e7b:	8a 12                	mov    dl,BYTE PTR [edx]
c0018e7d:	0f b6 d2             	movzx  edx,dl
c0018e80:	c1 e2 08             	shl    edx,0x8
c0018e83:	09 d0                	or     eax,edx
c0018e85:	0f b7 c0             	movzx  eax,ax
c0018e88:	25 00 02 00 00       	and    eax,0x200
c0018e8d:	89 c2                	mov    edx,eax
c0018e8f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018e94:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e96:	85 d2                	test   edx,edx
c0018e98:	0f 95 c2             	setne  dl
c0018e9b:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ea1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018ea4:	83 c0 06             	add    eax,0x6
c0018ea7:	0f b7 d0             	movzx  edx,ax
c0018eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ead:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018eb0:	b0 01                	mov    al,0x1
c0018eb2:	e9 a3 09 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0018eb7:	66 c7 45 ca 00 00    	mov    WORD PTR [ebp-0x36],0x0
c0018ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ec0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018ec3:	66 89 45 ca          	mov    WORD PTR [ebp-0x36],ax
c0018ec7:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018ecb:	85 c0                	test   eax,eax
c0018ecd:	74 7a                	je     c0018f49 <Vm::faultHandler(regs*)+0x52e>
c0018ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ed2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018ed5:	3d ff ff 00 00       	cmp    eax,0xffff
c0018eda:	76 6d                	jbe    c0018f49 <Vm::faultHandler(regs*)+0x52e>
c0018edc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018edf:	83 c0 05             	add    eax,0x5
c0018ee2:	8a 00                	mov    al,BYTE PTR [eax]
c0018ee4:	0f b6 c0             	movzx  eax,al
c0018ee7:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018eed:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ef0:	83 c0 04             	add    eax,0x4
c0018ef3:	8a 00                	mov    al,BYTE PTR [eax]
c0018ef5:	0f b6 f8             	movzx  edi,al
c0018ef8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018efb:	83 c0 03             	add    eax,0x3
c0018efe:	8a 00                	mov    al,BYTE PTR [eax]
c0018f00:	0f b6 f0             	movzx  esi,al
c0018f03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018f06:	83 c0 02             	add    eax,0x2
c0018f09:	8a 00                	mov    al,BYTE PTR [eax]
c0018f0b:	0f b6 d8             	movzx  ebx,al
c0018f0e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018f11:	83 c0 01             	add    eax,0x1
c0018f14:	8a 00                	mov    al,BYTE PTR [eax]
c0018f16:	0f b6 c8             	movzx  ecx,al
c0018f19:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018f1c:	8a 00                	mov    al,BYTE PTR [eax]
c0018f1e:	0f b6 d0             	movzx  edx,al
c0018f21:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018f24:	8a 00                	mov    al,BYTE PTR [eax]
c0018f26:	0f b6 c0             	movzx  eax,al
c0018f29:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018f2f:	57                   	push   edi
c0018f30:	56                   	push   esi
c0018f31:	53                   	push   ebx
c0018f32:	51                   	push   ecx
c0018f33:	52                   	push   edx
c0018f34:	50                   	push   eax
c0018f35:	68 70 cf 02 c0       	push   0xc002cf70
c0018f3a:	e8 3d e0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018f3f:	83 c4 20             	add    esp,0x20
c0018f42:	b0 00                	mov    al,0x0
c0018f44:	e9 11 09 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0018f49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f4c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018f4f:	0f b7 c0             	movzx  eax,ax
c0018f52:	83 ec 0c             	sub    esp,0xc
c0018f55:	50                   	push   eax
c0018f56:	e8 6e f0 ff ff       	call   c0017fc9 <Vm::inbv(unsigned short)>
c0018f5b:	83 c4 10             	add    esp,0x10
c0018f5e:	0f b6 c8             	movzx  ecx,al
c0018f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f64:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018f67:	0f b7 d0             	movzx  edx,ax
c0018f6a:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
c0018f6e:	83 ec 04             	sub    esp,0x4
c0018f71:	51                   	push   ecx
c0018f72:	52                   	push   edx
c0018f73:	50                   	push   eax
c0018f74:	e8 8d f9 ff ff       	call   c0018906 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018f79:	83 c4 10             	add    esp,0x10
c0018f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f7f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018f82:	25 00 04 00 00       	and    eax,0x400
c0018f87:	85 c0                	test   eax,eax
c0018f89:	74 14                	je     c0018f9f <Vm::faultHandler(regs*)+0x584>
c0018f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f8e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018f91:	83 e8 01             	sub    eax,0x1
c0018f94:	0f b7 d0             	movzx  edx,ax
c0018f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f9a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018f9d:	eb 12                	jmp    c0018fb1 <Vm::faultHandler(regs*)+0x596>
c0018f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fa2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018fa5:	83 c0 01             	add    eax,0x1
c0018fa8:	0f b7 d0             	movzx  edx,ax
c0018fab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fae:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fb4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018fb7:	8d 50 01             	lea    edx,[eax+0x1]
c0018fba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fbd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018fc0:	b0 01                	mov    al,0x1
c0018fc2:	e9 93 08 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0018fc7:	66 c7 45 c8 00 00    	mov    WORD PTR [ebp-0x38],0x0
c0018fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fd0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018fd3:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0018fd7:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018fdb:	85 c0                	test   eax,eax
c0018fdd:	74 7a                	je     c0019059 <Vm::faultHandler(regs*)+0x63e>
c0018fdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fe2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018fe5:	3d ff ff 00 00       	cmp    eax,0xffff
c0018fea:	76 6d                	jbe    c0019059 <Vm::faultHandler(regs*)+0x63e>
c0018fec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018fef:	83 c0 05             	add    eax,0x5
c0018ff2:	8a 00                	mov    al,BYTE PTR [eax]
c0018ff4:	0f b6 c0             	movzx  eax,al
c0018ff7:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018ffd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019000:	83 c0 04             	add    eax,0x4
c0019003:	8a 00                	mov    al,BYTE PTR [eax]
c0019005:	0f b6 f8             	movzx  edi,al
c0019008:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001900b:	83 c0 03             	add    eax,0x3
c001900e:	8a 00                	mov    al,BYTE PTR [eax]
c0019010:	0f b6 f0             	movzx  esi,al
c0019013:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019016:	83 c0 02             	add    eax,0x2
c0019019:	8a 00                	mov    al,BYTE PTR [eax]
c001901b:	0f b6 d8             	movzx  ebx,al
c001901e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019021:	83 c0 01             	add    eax,0x1
c0019024:	8a 00                	mov    al,BYTE PTR [eax]
c0019026:	0f b6 c8             	movzx  ecx,al
c0019029:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001902c:	8a 00                	mov    al,BYTE PTR [eax]
c001902e:	0f b6 d0             	movzx  edx,al
c0019031:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019034:	8a 00                	mov    al,BYTE PTR [eax]
c0019036:	0f b6 c0             	movzx  eax,al
c0019039:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c001903f:	57                   	push   edi
c0019040:	56                   	push   esi
c0019041:	53                   	push   ebx
c0019042:	51                   	push   ecx
c0019043:	52                   	push   edx
c0019044:	50                   	push   eax
c0019045:	68 70 cf 02 c0       	push   0xc002cf70
c001904a:	e8 2d df fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001904f:	83 c4 20             	add    esp,0x20
c0019052:	b0 00                	mov    al,0x0
c0019054:	e9 01 08 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0019059:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001905d:	85 c0                	test   eax,eax
c001905f:	74 6f                	je     c00190d0 <Vm::faultHandler(regs*)+0x6b5>
c0019061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019064:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019067:	0f b7 c0             	movzx  eax,ax
c001906a:	66 89 45 a6          	mov    WORD PTR [ebp-0x5a],ax
c001906e:	66 8b 45 a6          	mov    ax,WORD PTR [ebp-0x5a]
c0019072:	89 c2                	mov    edx,eax
c0019074:	ed                   	in     eax,dx
c0019075:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
c0019078:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
c001907b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001907e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019081:	0f b7 d0             	movzx  edx,ax
c0019084:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0019088:	83 ec 04             	sub    esp,0x4
c001908b:	51                   	push   ecx
c001908c:	52                   	push   edx
c001908d:	50                   	push   eax
c001908e:	e8 31 f9 ff ff       	call   c00189c4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019093:	83 c4 10             	add    esp,0x10
c0019096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019099:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001909c:	25 00 04 00 00       	and    eax,0x400
c00190a1:	85 c0                	test   eax,eax
c00190a3:	74 17                	je     c00190bc <Vm::faultHandler(regs*)+0x6a1>
c00190a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00190ab:	83 e8 04             	sub    eax,0x4
c00190ae:	0f b7 d0             	movzx  edx,ax
c00190b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190b4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00190b7:	e9 83 00 00 00       	jmp    c001913f <Vm::faultHandler(regs*)+0x724>
c00190bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00190c2:	83 c0 04             	add    eax,0x4
c00190c5:	0f b7 d0             	movzx  edx,ax
c00190c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190cb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00190ce:	eb 6f                	jmp    c001913f <Vm::faultHandler(regs*)+0x724>
c00190d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190d3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00190d6:	0f b7 c0             	movzx  eax,ax
c00190d9:	66 89 45 9e          	mov    WORD PTR [ebp-0x62],ax
c00190dd:	66 8b 45 9e          	mov    ax,WORD PTR [ebp-0x62]
c00190e1:	89 c2                	mov    edx,eax
c00190e3:	66 ed                	in     ax,dx
c00190e5:	66 89 45 9c          	mov    WORD PTR [ebp-0x64],ax
c00190e9:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
c00190ec:	0f b7 c8             	movzx  ecx,ax
c00190ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00190f5:	0f b7 d0             	movzx  edx,ax
c00190f8:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c00190fc:	83 ec 04             	sub    esp,0x4
c00190ff:	51                   	push   ecx
c0019100:	52                   	push   edx
c0019101:	50                   	push   eax
c0019102:	e8 5e f8 ff ff       	call   c0018965 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019107:	83 c4 10             	add    esp,0x10
c001910a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001910d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019110:	25 00 04 00 00       	and    eax,0x400
c0019115:	85 c0                	test   eax,eax
c0019117:	74 14                	je     c001912d <Vm::faultHandler(regs*)+0x712>
c0019119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001911c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001911f:	83 e8 02             	sub    eax,0x2
c0019122:	0f b7 d0             	movzx  edx,ax
c0019125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019128:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001912b:	eb 12                	jmp    c001913f <Vm::faultHandler(regs*)+0x724>
c001912d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019130:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019133:	83 c0 02             	add    eax,0x2
c0019136:	0f b7 d0             	movzx  edx,ax
c0019139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001913c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001913f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019142:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019145:	8d 50 01             	lea    edx,[eax+0x1]
c0019148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001914b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001914e:	b0 01                	mov    al,0x1
c0019150:	e9 05 07 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0019155:	66 c7 45 de 00 00    	mov    WORD PTR [ebp-0x22],0x0
c001915b:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c001915f:	83 f8 06             	cmp    eax,0x6
c0019162:	77 4f                	ja     c00191b3 <Vm::faultHandler(regs*)+0x798>
c0019164:	8b 04 85 28 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2cd8]
c001916b:	ff e0                	jmp    eax
c001916d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019170:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0019173:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0019177:	eb 3a                	jmp    c00191b3 <Vm::faultHandler(regs*)+0x798>
c0019179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001917c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001917f:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0019183:	eb 2e                	jmp    c00191b3 <Vm::faultHandler(regs*)+0x798>
c0019185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019188:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001918b:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c001918f:	eb 22                	jmp    c00191b3 <Vm::faultHandler(regs*)+0x798>
c0019191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019194:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019197:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c001919b:	eb 16                	jmp    c00191b3 <Vm::faultHandler(regs*)+0x798>
c001919d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00191a2:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00191a6:	eb 0b                	jmp    c00191b3 <Vm::faultHandler(regs*)+0x798>
c00191a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191ab:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c00191ae:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00191b2:	90                   	nop
c00191b3:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c00191b7:	85 c0                	test   eax,eax
c00191b9:	74 7a                	je     c0019235 <Vm::faultHandler(regs*)+0x81a>
c00191bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191be:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00191c1:	3d ff ff 00 00       	cmp    eax,0xffff
c00191c6:	76 6d                	jbe    c0019235 <Vm::faultHandler(regs*)+0x81a>
c00191c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00191cb:	83 c0 05             	add    eax,0x5
c00191ce:	8a 00                	mov    al,BYTE PTR [eax]
c00191d0:	0f b6 c0             	movzx  eax,al
c00191d3:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00191d9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00191dc:	83 c0 04             	add    eax,0x4
c00191df:	8a 00                	mov    al,BYTE PTR [eax]
c00191e1:	0f b6 f8             	movzx  edi,al
c00191e4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00191e7:	83 c0 03             	add    eax,0x3
c00191ea:	8a 00                	mov    al,BYTE PTR [eax]
c00191ec:	0f b6 f0             	movzx  esi,al
c00191ef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00191f2:	83 c0 02             	add    eax,0x2
c00191f5:	8a 00                	mov    al,BYTE PTR [eax]
c00191f7:	0f b6 d8             	movzx  ebx,al
c00191fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00191fd:	83 c0 01             	add    eax,0x1
c0019200:	8a 00                	mov    al,BYTE PTR [eax]
c0019202:	0f b6 c8             	movzx  ecx,al
c0019205:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019208:	8a 00                	mov    al,BYTE PTR [eax]
c001920a:	0f b6 d0             	movzx  edx,al
c001920d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019210:	8a 00                	mov    al,BYTE PTR [eax]
c0019212:	0f b6 c0             	movzx  eax,al
c0019215:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c001921b:	57                   	push   edi
c001921c:	56                   	push   esi
c001921d:	53                   	push   ebx
c001921e:	51                   	push   ecx
c001921f:	52                   	push   edx
c0019220:	50                   	push   eax
c0019221:	68 70 cf 02 c0       	push   0xc002cf70
c0019226:	e8 51 dd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001922b:	83 c4 20             	add    esp,0x20
c001922e:	b0 00                	mov    al,0x0
c0019230:	e9 25 06 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0019235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019238:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001923b:	0f b7 d0             	movzx  edx,ax
c001923e:	0f b7 45 de          	movzx  eax,WORD PTR [ebp-0x22]
c0019242:	83 ec 08             	sub    esp,0x8
c0019245:	52                   	push   edx
c0019246:	50                   	push   eax
c0019247:	e8 c0 f5 ff ff       	call   c001880c <Vm::readByteFromReal(unsigned short, unsigned short)>
c001924c:	83 c4 10             	add    esp,0x10
c001924f:	0f b6 d0             	movzx  edx,al
c0019252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019255:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019258:	0f b7 c0             	movzx  eax,ax
c001925b:	83 ec 08             	sub    esp,0x8
c001925e:	52                   	push   edx
c001925f:	50                   	push   eax
c0019260:	e8 9b ed ff ff       	call   c0018000 <Vm::outbv(unsigned short, unsigned char)>
c0019265:	83 c4 10             	add    esp,0x10
c0019268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001926b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001926e:	25 00 04 00 00       	and    eax,0x400
c0019273:	85 c0                	test   eax,eax
c0019275:	74 14                	je     c001928b <Vm::faultHandler(regs*)+0x870>
c0019277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001927a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001927d:	83 e8 01             	sub    eax,0x1
c0019280:	0f b7 d0             	movzx  edx,ax
c0019283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019286:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0019289:	eb 12                	jmp    c001929d <Vm::faultHandler(regs*)+0x882>
c001928b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001928e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019291:	83 c0 01             	add    eax,0x1
c0019294:	0f b7 d0             	movzx  edx,ax
c0019297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001929a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001929d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192a0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00192a3:	8d 50 01             	lea    edx,[eax+0x1]
c00192a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192a9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00192ac:	b0 01                	mov    al,0x1
c00192ae:	e9 a7 05 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c00192b3:	66 c7 45 dc 00 00    	mov    WORD PTR [ebp-0x24],0x0
c00192b9:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c00192bd:	83 f8 06             	cmp    eax,0x6
c00192c0:	77 4f                	ja     c0019311 <Vm::faultHandler(regs*)+0x8f6>
c00192c2:	8b 04 85 44 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2cbc]
c00192c9:	ff e0                	jmp    eax
c00192cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00192d1:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00192d5:	eb 3a                	jmp    c0019311 <Vm::faultHandler(regs*)+0x8f6>
c00192d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00192dd:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00192e1:	eb 2e                	jmp    c0019311 <Vm::faultHandler(regs*)+0x8f6>
c00192e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192e6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00192e9:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00192ed:	eb 22                	jmp    c0019311 <Vm::faultHandler(regs*)+0x8f6>
c00192ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00192f5:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00192f9:	eb 16                	jmp    c0019311 <Vm::faultHandler(regs*)+0x8f6>
c00192fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0019300:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0019304:	eb 0b                	jmp    c0019311 <Vm::faultHandler(regs*)+0x8f6>
c0019306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019309:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c001930c:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0019310:	90                   	nop
c0019311:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0019315:	85 c0                	test   eax,eax
c0019317:	74 7a                	je     c0019393 <Vm::faultHandler(regs*)+0x978>
c0019319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001931c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001931f:	3d ff ff 00 00       	cmp    eax,0xffff
c0019324:	76 6d                	jbe    c0019393 <Vm::faultHandler(regs*)+0x978>
c0019326:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019329:	83 c0 05             	add    eax,0x5
c001932c:	8a 00                	mov    al,BYTE PTR [eax]
c001932e:	0f b6 c0             	movzx  eax,al
c0019331:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0019337:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001933a:	83 c0 04             	add    eax,0x4
c001933d:	8a 00                	mov    al,BYTE PTR [eax]
c001933f:	0f b6 f8             	movzx  edi,al
c0019342:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019345:	83 c0 03             	add    eax,0x3
c0019348:	8a 00                	mov    al,BYTE PTR [eax]
c001934a:	0f b6 f0             	movzx  esi,al
c001934d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019350:	83 c0 02             	add    eax,0x2
c0019353:	8a 00                	mov    al,BYTE PTR [eax]
c0019355:	0f b6 d8             	movzx  ebx,al
c0019358:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001935b:	83 c0 01             	add    eax,0x1
c001935e:	8a 00                	mov    al,BYTE PTR [eax]
c0019360:	0f b6 c8             	movzx  ecx,al
c0019363:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019366:	8a 00                	mov    al,BYTE PTR [eax]
c0019368:	0f b6 d0             	movzx  edx,al
c001936b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001936e:	8a 00                	mov    al,BYTE PTR [eax]
c0019370:	0f b6 c0             	movzx  eax,al
c0019373:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0019379:	57                   	push   edi
c001937a:	56                   	push   esi
c001937b:	53                   	push   ebx
c001937c:	51                   	push   ecx
c001937d:	52                   	push   edx
c001937e:	50                   	push   eax
c001937f:	68 70 cf 02 c0       	push   0xc002cf70
c0019384:	e8 f3 db fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019389:	83 c4 20             	add    esp,0x20
c001938c:	b0 00                	mov    al,0x0
c001938e:	e9 c7 04 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0019393:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0019397:	85 c0                	test   eax,eax
c0019399:	74 6e                	je     c0019409 <Vm::faultHandler(regs*)+0x9ee>
c001939b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001939e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00193a1:	0f b7 d0             	movzx  edx,ax
c00193a4:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c00193a8:	83 ec 08             	sub    esp,0x8
c00193ab:	52                   	push   edx
c00193ac:	50                   	push   eax
c00193ad:	e8 01 f5 ff ff       	call   c00188b3 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00193b2:	83 c4 10             	add    esp,0x10
c00193b5:	89 c2                	mov    edx,eax
c00193b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193ba:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00193bd:	0f b7 c0             	movzx  eax,ax
c00193c0:	66 89 45 9a          	mov    WORD PTR [ebp-0x66],ax
c00193c4:	89 55 94             	mov    DWORD PTR [ebp-0x6c],edx
c00193c7:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
c00193ca:	66 8b 55 9a          	mov    dx,WORD PTR [ebp-0x66]
c00193ce:	ef                   	out    dx,eax
c00193cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00193d5:	25 00 04 00 00       	and    eax,0x400
c00193da:	85 c0                	test   eax,eax
c00193dc:	74 17                	je     c00193f5 <Vm::faultHandler(regs*)+0x9da>
c00193de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193e1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00193e4:	83 e8 04             	sub    eax,0x4
c00193e7:	0f b7 d0             	movzx  edx,ax
c00193ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193ed:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00193f0:	e9 80 00 00 00       	jmp    c0019475 <Vm::faultHandler(regs*)+0xa5a>
c00193f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193f8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00193fb:	83 c0 04             	add    eax,0x4
c00193fe:	0f b7 d0             	movzx  edx,ax
c0019401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019404:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0019407:	eb 6c                	jmp    c0019475 <Vm::faultHandler(regs*)+0xa5a>
c0019409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001940c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001940f:	0f b7 d0             	movzx  edx,ax
c0019412:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0019416:	83 ec 08             	sub    esp,0x8
c0019419:	52                   	push   edx
c001941a:	50                   	push   eax
c001941b:	e8 3f f4 ff ff       	call   c001885f <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019420:	83 c4 10             	add    esp,0x10
c0019423:	0f b7 c0             	movzx  eax,ax
c0019426:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019429:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001942c:	0f b7 d2             	movzx  edx,dx
c001942f:	66 89 55 92          	mov    WORD PTR [ebp-0x6e],dx
c0019433:	66 89 45 90          	mov    WORD PTR [ebp-0x70],ax
c0019437:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
c001943a:	66 8b 55 92          	mov    dx,WORD PTR [ebp-0x6e]
c001943e:	66 ef                	out    dx,ax
c0019440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019443:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019446:	25 00 04 00 00       	and    eax,0x400
c001944b:	85 c0                	test   eax,eax
c001944d:	74 14                	je     c0019463 <Vm::faultHandler(regs*)+0xa48>
c001944f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019452:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019455:	83 e8 02             	sub    eax,0x2
c0019458:	0f b7 d0             	movzx  edx,ax
c001945b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001945e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0019461:	eb 12                	jmp    c0019475 <Vm::faultHandler(regs*)+0xa5a>
c0019463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019466:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019469:	83 c0 02             	add    eax,0x2
c001946c:	0f b7 d0             	movzx  edx,ax
c001946f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019472:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0019475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019478:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001947b:	8d 50 01             	lea    edx,[eax+0x1]
c001947e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019481:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019484:	b0 01                	mov    al,0x1
c0019486:	e9 cf 03 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c001948b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001948e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019491:	b0 00                	mov    al,0x0
c0019493:	89 c2                	mov    edx,eax
c0019495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019498:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001949b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001949e:	83 c0 01             	add    eax,0x1
c00194a1:	8a 00                	mov    al,BYTE PTR [eax]
c00194a3:	0f b6 c0             	movzx  eax,al
c00194a6:	83 ec 0c             	sub    esp,0xc
c00194a9:	50                   	push   eax
c00194aa:	e8 1a eb ff ff       	call   c0017fc9 <Vm::inbv(unsigned short)>
c00194af:	83 c4 10             	add    esp,0x10
c00194b2:	88 c1                	mov    cl,al
c00194b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00194b7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00194ba:	0f b6 c1             	movzx  eax,cl
c00194bd:	09 c2                	or     edx,eax
c00194bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00194c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00194c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00194c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00194cb:	8d 50 02             	lea    edx,[eax+0x2]
c00194ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00194d1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00194d4:	b0 01                	mov    al,0x1
c00194d6:	e9 7f 03 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c00194db:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00194df:	85 c0                	test   eax,eax
c00194e1:	74 24                	je     c0019507 <Vm::faultHandler(regs*)+0xaec>
c00194e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00194e6:	83 c0 01             	add    eax,0x1
c00194e9:	8a 00                	mov    al,BYTE PTR [eax]
c00194eb:	0f b6 c0             	movzx  eax,al
c00194ee:	66 89 45 8e          	mov    WORD PTR [ebp-0x72],ax
c00194f2:	66 8b 45 8e          	mov    ax,WORD PTR [ebp-0x72]
c00194f6:	89 c2                	mov    edx,eax
c00194f8:	ed                   	in     eax,dx
c00194f9:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
c00194fc:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
c00194ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019502:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019505:	eb 42                	jmp    c0019549 <Vm::faultHandler(regs*)+0xb2e>
c0019507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001950a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001950d:	25 00 00 ff ff       	and    eax,0xffff0000
c0019512:	89 c2                	mov    edx,eax
c0019514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019517:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001951a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001951d:	83 c0 01             	add    eax,0x1
c0019520:	8a 00                	mov    al,BYTE PTR [eax]
c0019522:	0f b6 c0             	movzx  eax,al
c0019525:	66 89 45 86          	mov    WORD PTR [ebp-0x7a],ax
c0019529:	66 8b 45 86          	mov    ax,WORD PTR [ebp-0x7a]
c001952d:	89 c2                	mov    edx,eax
c001952f:	66 ed                	in     ax,dx
c0019531:	66 89 45 84          	mov    WORD PTR [ebp-0x7c],ax
c0019535:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
c0019538:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001953b:	8b 52 2c             	mov    edx,DWORD PTR [edx+0x2c]
c001953e:	0f b7 c0             	movzx  eax,ax
c0019541:	09 c2                	or     edx,eax
c0019543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019546:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001954c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001954f:	8d 50 02             	lea    edx,[eax+0x2]
c0019552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019555:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019558:	b0 01                	mov    al,0x1
c001955a:	e9 fb 02 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c001955f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019562:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019565:	0f b6 d0             	movzx  edx,al
c0019568:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001956b:	83 c0 01             	add    eax,0x1
c001956e:	8a 00                	mov    al,BYTE PTR [eax]
c0019570:	0f b6 c0             	movzx  eax,al
c0019573:	83 ec 08             	sub    esp,0x8
c0019576:	52                   	push   edx
c0019577:	50                   	push   eax
c0019578:	e8 83 ea ff ff       	call   c0018000 <Vm::outbv(unsigned short, unsigned char)>
c001957d:	83 c4 10             	add    esp,0x10
c0019580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019583:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019586:	8d 50 02             	lea    edx,[eax+0x2]
c0019589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001958c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001958f:	b0 01                	mov    al,0x1
c0019591:	e9 c4 02 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0019596:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001959a:	85 c0                	test   eax,eax
c001959c:	74 28                	je     c00195c6 <Vm::faultHandler(regs*)+0xbab>
c001959e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195a1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00195a4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00195a7:	83 c0 01             	add    eax,0x1
c00195aa:	8a 00                	mov    al,BYTE PTR [eax]
c00195ac:	0f b6 c0             	movzx  eax,al
c00195af:	66 89 45 82          	mov    WORD PTR [ebp-0x7e],ax
c00195b3:	89 95 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],edx
c00195b9:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [ebp-0x84]
c00195bf:	66 8b 55 82          	mov    dx,WORD PTR [ebp-0x7e]
c00195c3:	ef                   	out    dx,eax
c00195c4:	eb 31                	jmp    c00195f7 <Vm::faultHandler(regs*)+0xbdc>
c00195c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195c9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00195cc:	0f b7 c0             	movzx  eax,ax
c00195cf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00195d2:	83 c2 01             	add    edx,0x1
c00195d5:	8a 12                	mov    dl,BYTE PTR [edx]
c00195d7:	0f b6 d2             	movzx  edx,dl
c00195da:	66 89 95 7a ff ff ff 	mov    WORD PTR [ebp-0x86],dx
c00195e1:	66 89 85 78 ff ff ff 	mov    WORD PTR [ebp-0x88],ax
c00195e8:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [ebp-0x88]
c00195ee:	66 8b 95 7a ff ff ff 	mov    dx,WORD PTR [ebp-0x86]
c00195f5:	66 ef                	out    dx,ax
c00195f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00195fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00195fd:	8d 50 02             	lea    edx,[eax+0x2]
c0019600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019603:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019606:	b0 01                	mov    al,0x1
c0019608:	e9 4d 02 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c001960d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019610:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019613:	b0 00                	mov    al,0x0
c0019615:	89 c2                	mov    edx,eax
c0019617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001961a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001961d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019620:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019623:	0f b7 c0             	movzx  eax,ax
c0019626:	83 ec 0c             	sub    esp,0xc
c0019629:	50                   	push   eax
c001962a:	e8 9a e9 ff ff       	call   c0017fc9 <Vm::inbv(unsigned short)>
c001962f:	83 c4 10             	add    esp,0x10
c0019632:	88 c1                	mov    cl,al
c0019634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019637:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001963a:	0f b6 c1             	movzx  eax,cl
c001963d:	09 c2                	or     edx,eax
c001963f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019642:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019648:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001964b:	8d 50 01             	lea    edx,[eax+0x1]
c001964e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019651:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019654:	b0 01                	mov    al,0x1
c0019656:	e9 ff 01 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c001965b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001965f:	85 c0                	test   eax,eax
c0019661:	74 2e                	je     c0019691 <Vm::faultHandler(regs*)+0xc76>
c0019663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019666:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019669:	0f b7 c0             	movzx  eax,ax
c001966c:	66 89 85 76 ff ff ff 	mov    WORD PTR [ebp-0x8a],ax
c0019673:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [ebp-0x8a]
c001967a:	89 c2                	mov    edx,eax
c001967c:	ed                   	in     eax,dx
c001967d:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
c0019683:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [ebp-0x90]
c0019689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001968c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001968f:	eb 4c                	jmp    c00196dd <Vm::faultHandler(regs*)+0xcc2>
c0019691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019694:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019697:	25 00 00 ff ff       	and    eax,0xffff0000
c001969c:	89 c2                	mov    edx,eax
c001969e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00196a1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00196a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00196a7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00196aa:	0f b7 c0             	movzx  eax,ax
c00196ad:	66 89 85 6e ff ff ff 	mov    WORD PTR [ebp-0x92],ax
c00196b4:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [ebp-0x92]
c00196bb:	89 c2                	mov    edx,eax
c00196bd:	66 ed                	in     ax,dx
c00196bf:	66 89 85 6c ff ff ff 	mov    WORD PTR [ebp-0x94],ax
c00196c6:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [ebp-0x94]
c00196cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00196cf:	8b 52 2c             	mov    edx,DWORD PTR [edx+0x2c]
c00196d2:	0f b7 c0             	movzx  eax,ax
c00196d5:	09 c2                	or     edx,eax
c00196d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00196da:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00196dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00196e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00196e3:	8d 50 01             	lea    edx,[eax+0x1]
c00196e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00196e9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00196ec:	b0 01                	mov    al,0x1
c00196ee:	e9 67 01 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c00196f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00196f6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00196f9:	0f b6 d0             	movzx  edx,al
c00196fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00196ff:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019702:	0f b7 c0             	movzx  eax,ax
c0019705:	83 ec 08             	sub    esp,0x8
c0019708:	52                   	push   edx
c0019709:	50                   	push   eax
c001970a:	e8 f1 e8 ff ff       	call   c0018000 <Vm::outbv(unsigned short, unsigned char)>
c001970f:	83 c4 10             	add    esp,0x10
c0019712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019715:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019718:	8d 50 01             	lea    edx,[eax+0x1]
c001971b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001971e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019721:	b0 01                	mov    al,0x1
c0019723:	e9 32 01 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0019728:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001972c:	85 c0                	test   eax,eax
c001972e:	74 2c                	je     c001975c <Vm::faultHandler(regs*)+0xd41>
c0019730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019733:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0019736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019739:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001973c:	0f b7 c0             	movzx  eax,ax
c001973f:	66 89 85 6a ff ff ff 	mov    WORD PTR [ebp-0x96],ax
c0019746:	89 95 64 ff ff ff    	mov    DWORD PTR [ebp-0x9c],edx
c001974c:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
c0019752:	66 8b 95 6a ff ff ff 	mov    dx,WORD PTR [ebp-0x96]
c0019759:	ef                   	out    dx,eax
c001975a:	eb 2f                	jmp    c001978b <Vm::faultHandler(regs*)+0xd70>
c001975c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001975f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019762:	0f b7 c0             	movzx  eax,ax
c0019765:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019768:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001976b:	0f b7 d2             	movzx  edx,dx
c001976e:	66 89 95 62 ff ff ff 	mov    WORD PTR [ebp-0x9e],dx
c0019775:	66 89 85 60 ff ff ff 	mov    WORD PTR [ebp-0xa0],ax
c001977c:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [ebp-0xa0]
c0019782:	66 8b 95 62 ff ff ff 	mov    dx,WORD PTR [ebp-0x9e]
c0019789:	66 ef                	out    dx,ax
c001978b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001978e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019791:	8d 50 01             	lea    edx,[eax+0x1]
c0019794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019797:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001979a:	b0 01                	mov    al,0x1
c001979c:	e9 b9 00 00 00       	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c00197a1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00197a4:	83 c0 05             	add    eax,0x5
c00197a7:	8a 00                	mov    al,BYTE PTR [eax]
c00197a9:	0f b6 c0             	movzx  eax,al
c00197ac:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00197b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00197b5:	83 c0 04             	add    eax,0x4
c00197b8:	8a 00                	mov    al,BYTE PTR [eax]
c00197ba:	0f b6 f8             	movzx  edi,al
c00197bd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00197c0:	83 c0 03             	add    eax,0x3
c00197c3:	8a 00                	mov    al,BYTE PTR [eax]
c00197c5:	0f b6 f0             	movzx  esi,al
c00197c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00197cb:	83 c0 02             	add    eax,0x2
c00197ce:	8a 00                	mov    al,BYTE PTR [eax]
c00197d0:	0f b6 d8             	movzx  ebx,al
c00197d3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00197d6:	83 c0 01             	add    eax,0x1
c00197d9:	8a 00                	mov    al,BYTE PTR [eax]
c00197db:	0f b6 c8             	movzx  ecx,al
c00197de:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00197e1:	8a 00                	mov    al,BYTE PTR [eax]
c00197e3:	0f b6 d0             	movzx  edx,al
c00197e6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00197e9:	8a 00                	mov    al,BYTE PTR [eax]
c00197eb:	0f b6 c0             	movzx  eax,al
c00197ee:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00197f4:	57                   	push   edi
c00197f5:	56                   	push   esi
c00197f6:	53                   	push   ebx
c00197f7:	51                   	push   ecx
c00197f8:	52                   	push   edx
c00197f9:	50                   	push   eax
c00197fa:	68 a0 cf 02 c0       	push   0xc002cfa0
c00197ff:	e8 78 d7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019804:	83 c4 20             	add    esp,0x20
c0019807:	83 ec 0c             	sub    esp,0xc
c001980a:	6a 60                	push   0x60
c001980c:	e8 b8 e7 ff ff       	call   c0017fc9 <Vm::inbv(unsigned short)>
c0019811:	83 c4 10             	add    esp,0x10
c0019814:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0019817:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c001981b:	83 f8 1c             	cmp    eax,0x1c
c001981e:	74 09                	je     c0019829 <Vm::faultHandler(regs*)+0xe0e>
c0019820:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0019824:	83 f8 5a             	cmp    eax,0x5a
c0019827:	75 24                	jne    c001984d <Vm::faultHandler(regs*)+0xe32>
c0019829:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c001982d:	83 f8 1c             	cmp    eax,0x1c
c0019830:	74 09                	je     c001983b <Vm::faultHandler(regs*)+0xe20>
c0019832:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0019836:	83 f8 5a             	cmp    eax,0x5a
c0019839:	75 15                	jne    c0019850 <Vm::faultHandler(regs*)+0xe35>
c001983b:	83 ec 0c             	sub    esp,0xc
c001983e:	6a 60                	push   0x60
c0019840:	e8 84 e7 ff ff       	call   c0017fc9 <Vm::inbv(unsigned short)>
c0019845:	83 c4 10             	add    esp,0x10
c0019848:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001984b:	eb dc                	jmp    c0019829 <Vm::faultHandler(regs*)+0xe0e>
c001984d:	90                   	nop
c001984e:	eb b7                	jmp    c0019807 <Vm::faultHandler(regs*)+0xdec>
c0019850:	90                   	nop
c0019851:	b0 00                	mov    al,0x0
c0019853:	eb 05                	jmp    c001985a <Vm::faultHandler(regs*)+0xe3f>
c0019855:	e9 3d f2 ff ff       	jmp    c0018a97 <Vm::faultHandler(regs*)+0x7c>
c001985a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001985d:	5b                   	pop    ebx
c001985e:	5e                   	pop    esi
c001985f:	5f                   	pop    edi
c0019860:	5d                   	pop    ebp
c0019861:	c3                   	ret    

c0019862 <IOAPIC::close(int, int, void*)>:
c0019862:	b8 00 00 00 00       	mov    eax,0x0
c0019867:	c3                   	ret    

c0019868 <apicGetBase()>:
c0019868:	55                   	push   ebp
c0019869:	89 e5                	mov    ebp,esp
c001986b:	83 ec 18             	sub    esp,0x18
c001986e:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019873:	83 e0 08             	and    eax,0x8
c0019876:	0f b6 c0             	movzx  eax,al
c0019879:	85 c0                	test   eax,eax
c001987b:	75 07                	jne    c0019884 <apicGetBase()+0x1c>
c001987d:	b8 00 00 00 00       	mov    eax,0x0
c0019882:	eb 1b                	jmp    c001989f <apicGetBase()+0x37>
c0019884:	83 ec 0c             	sub    esp,0xc
c0019887:	6a 1b                	push   0x1b
c0019889:	e8 72 15 00 00       	call   c001ae00 <x86rdmsr(unsigned int)>
c001988e:	83 c4 10             	add    esp,0x10
c0019891:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0019894:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0019897:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001989a:	25 00 00 ff ff       	and    eax,0xffff0000
c001989f:	c9                   	leave  
c00198a0:	c3                   	ret    
c00198a1:	90                   	nop

c00198a2 <IOAPIC::IOAPIC()>:
c00198a2:	83 ec 0c             	sub    esp,0xc
c00198a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198a9:	83 ec 08             	sub    esp,0x8
c00198ac:	68 60 d3 02 c0       	push   0xc002d360
c00198b1:	50                   	push   eax
c00198b2:	e8 3f 10 ff ff       	call   c000a8f6 <Device::Device(char const*)>
c00198b7:	83 c4 10             	add    esp,0x10
c00198ba:	ba 80 d3 02 c0       	mov    edx,0xc002d380
c00198bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198c3:	89 10                	mov    DWORD PTR [eax],edx
c00198c5:	90                   	nop
c00198c6:	83 c4 0c             	add    esp,0xc
c00198c9:	c3                   	ret    

c00198ca <apicOpen()>:
c00198ca:	55                   	push   ebp
c00198cb:	89 e5                	mov    ebp,esp
c00198cd:	53                   	push   ebx
c00198ce:	83 ec 34             	sub    esp,0x34
c00198d1:	83 ec 0c             	sub    esp,0xc
c00198d4:	68 68 d3 02 c0       	push   0xc002d368
c00198d9:	e8 9e d6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00198de:	83 c4 10             	add    esp,0x10
c00198e1:	a0 00 74 03 c0       	mov    al,ds:0xc0037400
c00198e6:	83 f0 01             	xor    eax,0x1
c00198e9:	0f b6 c0             	movzx  eax,al
c00198ec:	85 c0                	test   eax,eax
c00198ee:	0f 84 a3 00 00 00    	je     c0019997 <apicOpen()+0xcd>
c00198f4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00198f8:	a0 40 6e 03 c0       	mov    al,ds:0xc0036e40
c00198fd:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0019901:	0f b6 c0             	movzx  eax,al
c0019904:	39 c2                	cmp    edx,eax
c0019906:	0f 83 84 00 00 00    	jae    c0019990 <apicOpen()+0xc6>
c001990c:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0019913:	83 ec 0c             	sub    esp,0xc
c0019916:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0019919:	e8 f1 6c ff ff       	call   c001060f <malloc>
c001991e:	83 c4 10             	add    esp,0x10
c0019921:	89 c3                	mov    ebx,eax
c0019923:	83 ec 0c             	sub    esp,0xc
c0019926:	53                   	push   ebx
c0019927:	e8 76 ff ff ff       	call   c00198a2 <IOAPIC::IOAPIC()>
c001992c:	83 c4 10             	add    esp,0x10
c001992f:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0019932:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0019936:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0019939:	89 14 85 e0 73 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8c20],edx
c0019940:	a1 c0 73 03 c0       	mov    eax,ds:0xc00373c0
c0019945:	83 c0 01             	add    eax,0x1
c0019948:	a3 c0 73 03 c0       	mov    ds:0xc00373c0,eax
c001994d:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c0019952:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0019958:	83 ec 08             	sub    esp,0x8
c001995b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001995e:	50                   	push   eax
c001995f:	e8 30 0e ff ff       	call   c000a794 <Device::addChild(Device*)>
c0019964:	83 c4 10             	add    esp,0x10
c0019967:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001996a:	8b 00                	mov    eax,DWORD PTR [eax]
c001996c:	83 c0 08             	add    eax,0x8
c001996f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019971:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0019975:	6a 00                	push   0x0
c0019977:	6a 00                	push   0x0
c0019979:	52                   	push   edx
c001997a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001997d:	ff d0                	call   eax
c001997f:	83 c4 10             	add    esp,0x10
c0019982:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0019985:	83 c0 01             	add    eax,0x1
c0019988:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001998b:	e9 68 ff ff ff       	jmp    c00198f8 <apicOpen()+0x2e>
c0019990:	c6 05 00 74 03 c0 01 	mov    BYTE PTR ds:0xc0037400,0x1
c0019997:	e8 cc fe ff ff       	call   c0019868 <apicGetBase()>
c001999c:	05 f0 00 00 00       	add    eax,0xf0
c00199a1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00199a4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00199a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00199a9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00199ac:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c00199b3:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c00199ba:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00199bd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00199c0:	89 10                	mov    DWORD PTR [eax],edx
c00199c2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00199c9:	a1 8c 6d 03 c0       	mov    eax,ds:0xc0036d8c
c00199ce:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00199d1:	7d 7c                	jge    c0019a4f <apicOpen()+0x185>
c00199d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00199d6:	8b 04 85 a0 6d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9260]
c00199dd:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c00199e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00199e3:	8b 04 85 a0 6d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9260]
c00199ea:	c1 e8 08             	shr    eax,0x8
c00199ed:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00199f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00199f4:	8b 04 85 a0 6d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9260]
c00199fb:	c1 e8 18             	shr    eax,0x18
c00199fe:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0019a01:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0019a05:	3d ff 00 00 00       	cmp    eax,0xff
c0019a0a:	75 3a                	jne    c0019a46 <apicOpen()+0x17c>
c0019a0c:	e8 57 fe ff ff       	call   c0019868 <apicGetBase()>
c0019a11:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0019a15:	83 fa 01             	cmp    edx,0x1
c0019a18:	75 07                	jne    c0019a21 <apicOpen()+0x157>
c0019a1a:	ba 60 03 00 00       	mov    edx,0x360
c0019a1f:	eb 05                	jmp    c0019a26 <apicOpen()+0x15c>
c0019a21:	ba 50 03 00 00       	mov    edx,0x350
c0019a26:	01 d0                	add    eax,edx
c0019a28:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0019a2b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019a2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a30:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0019a33:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0019a3a:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0019a3e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019a41:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0019a44:	89 10                	mov    DWORD PTR [eax],edx
c0019a46:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0019a4a:	e9 7a ff ff ff       	jmp    c00199c9 <apicOpen()+0xff>
c0019a4f:	90                   	nop
c0019a50:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0019a53:	c9                   	leave  
c0019a54:	c3                   	ret    
c0019a55:	90                   	nop

c0019a56 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0019a56:	55                   	push   ebp
c0019a57:	89 e5                	mov    ebp,esp
c0019a59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019a5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019a62:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0019a65:	72 1d                	jb     c0019a84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0019a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019a6a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0019a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019a73:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0019a79:	01 d0                	add    eax,edx
c0019a7b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0019a7e:	73 04                	jae    c0019a84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0019a80:	b0 01                	mov    al,0x1
c0019a82:	eb 02                	jmp    c0019a86 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0019a84:	b0 00                	mov    al,0x0
c0019a86:	5d                   	pop    ebp
c0019a87:	c3                   	ret    

c0019a88 <IOAPIC::read(int)>:
c0019a88:	55                   	push   ebp
c0019a89:	89 e5                	mov    ebp,esp
c0019a8b:	83 ec 10             	sub    esp,0x10
c0019a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019a91:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019a97:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0019a9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019a9d:	0f b6 d0             	movzx  edx,al
c0019aa0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0019aa3:	89 10                	mov    DWORD PTR [eax],edx
c0019aa5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0019aa8:	83 c0 10             	add    eax,0x10
c0019aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0019aad:	c9                   	leave  
c0019aae:	c3                   	ret    
c0019aaf:	90                   	nop

c0019ab0 <IOAPIC::open(int, int, void*)>:
c0019ab0:	55                   	push   ebp
c0019ab1:	89 e5                	mov    ebp,esp
c0019ab3:	57                   	push   edi
c0019ab4:	56                   	push   esi
c0019ab5:	53                   	push   ebx
c0019ab6:	83 ec 04             	sub    esp,0x4
c0019ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019abc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0019abf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019ac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019ac8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019ace:	8b 14 85 80 6e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9180]
c0019ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019ad8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019ade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019ae1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019ae7:	8b 14 85 00 6f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9100]
c0019aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019af1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019afa:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0019b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b03:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0019b09:	0f b6 f0             	movzx  esi,al
c0019b0c:	89 d0                	mov    eax,edx
c0019b0e:	ba 00 00 00 00       	mov    edx,0x0
c0019b13:	89 c7                	mov    edi,eax
c0019b15:	83 e7 ff             	and    edi,0xffffffff
c0019b18:	89 f9                	mov    ecx,edi
c0019b1a:	0f b6 da             	movzx  ebx,dl
c0019b1d:	89 c8                	mov    eax,ecx
c0019b1f:	89 da                	mov    edx,ebx
c0019b21:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0019b24:	8d 5e 08             	lea    ebx,[esi+0x8]
c0019b27:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0019b2b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0019b2f:	83 e0 00             	and    eax,0x0
c0019b32:	09 d0                	or     eax,edx
c0019b34:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0019b38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b3b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0019b41:	8d 50 01             	lea    edx,[eax+0x1]
c0019b44:	88 d1                	mov    cl,dl
c0019b46:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019b49:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0019b4f:	0f b6 d0             	movzx  edx,al
c0019b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b55:	83 c2 08             	add    edx,0x8
c0019b58:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0019b5c:	0f b6 c9             	movzx  ecx,cl
c0019b5f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0019b65:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0019b69:	6a 01                	push   0x1
c0019b6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019b6e:	e8 15 ff ff ff       	call   c0019a88 <IOAPIC::read(int)>
c0019b73:	83 c4 08             	add    esp,0x8
c0019b76:	c1 f8 10             	sar    eax,0x10
c0019b79:	0f b6 c0             	movzx  eax,al
c0019b7c:	8d 50 01             	lea    edx,[eax+0x1]
c0019b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b82:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0019b88:	b8 00 00 00 00       	mov    eax,0x0
c0019b8d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0019b90:	5b                   	pop    ebx
c0019b91:	5e                   	pop    esi
c0019b92:	5f                   	pop    edi
c0019b93:	5d                   	pop    ebp
c0019b94:	c3                   	ret    
c0019b95:	90                   	nop

c0019b96 <IOAPIC::write(int, int)>:
c0019b96:	55                   	push   ebp
c0019b97:	89 e5                	mov    ebp,esp
c0019b99:	83 ec 10             	sub    esp,0x10
c0019b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b9f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019ba5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0019ba8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019bab:	0f b6 d0             	movzx  edx,al
c0019bae:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0019bb1:	89 10                	mov    DWORD PTR [eax],edx
c0019bb3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0019bb6:	8d 50 10             	lea    edx,[eax+0x10]
c0019bb9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0019bbc:	89 02                	mov    DWORD PTR [edx],eax
c0019bbe:	90                   	nop
c0019bbf:	c9                   	leave  
c0019bc0:	c3                   	ret    
c0019bc1:	90                   	nop

c0019bc2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0019bc2:	55                   	push   ebp
c0019bc3:	89 e5                	mov    ebp,esp
c0019bc5:	53                   	push   ebx
c0019bc6:	83 ec 2c             	sub    esp,0x2c
c0019bc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019bcc:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0019bcf:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0019bd2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0019bd5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0019bd8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0019bdb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0019bde:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0019be1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0019be4:	88 d8                	mov    al,bl
c0019be6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0019be9:	88 c8                	mov    al,cl
c0019beb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0019bee:	88 d0                	mov    al,dl
c0019bf0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0019bf3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0019bf7:	83 c0 08             	add    eax,0x8
c0019bfa:	01 c0                	add    eax,eax
c0019bfc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0019bff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0019c03:	83 c0 08             	add    eax,0x8
c0019c06:	01 c0                	add    eax,eax
c0019c08:	83 c0 01             	add    eax,0x1
c0019c0b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0019c0e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0019c11:	50                   	push   eax
c0019c12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019c15:	e8 6e fe ff ff       	call   c0019a88 <IOAPIC::read(int)>
c0019c1a:	83 c4 08             	add    esp,0x8
c0019c1d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019c20:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0019c27:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019c2a:	c1 e0 18             	shl    eax,0x18
c0019c2d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0019c30:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0019c33:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0019c36:	52                   	push   edx
c0019c37:	50                   	push   eax
c0019c38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019c3b:	e8 56 ff ff ff       	call   c0019b96 <IOAPIC::write(int, int)>
c0019c40:	83 c4 0c             	add    esp,0xc
c0019c43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019c46:	50                   	push   eax
c0019c47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019c4a:	e8 39 fe ff ff       	call   c0019a88 <IOAPIC::read(int)>
c0019c4f:	83 c4 08             	add    esp,0x8
c0019c52:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0019c55:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0019c5c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0019c63:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0019c6a:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0019c6e:	85 c0                	test   eax,eax
c0019c70:	74 09                	je     c0019c7b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0019c72:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0019c79:	eb 07                	jmp    c0019c82 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0019c7b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0019c82:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0019c86:	85 c0                	test   eax,eax
c0019c88:	74 09                	je     c0019c93 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0019c8a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0019c91:	eb 07                	jmp    c0019c9a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0019c93:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0019c9a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0019ca1:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0019ca5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0019ca8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0019cab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019cae:	52                   	push   edx
c0019caf:	50                   	push   eax
c0019cb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019cb3:	e8 de fe ff ff       	call   c0019b96 <IOAPIC::write(int, int)>
c0019cb8:	83 c4 0c             	add    esp,0xc
c0019cbb:	90                   	nop
c0019cbc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0019cbf:	c9                   	leave  
c0019cc0:	c3                   	ret    
c0019cc1:	90                   	nop

c0019cc2 <noCopro(unsigned long)>:
c0019cc2:	c3                   	ret    

c0019cc3 <HalRestart()>:
c0019cc3:	e4 64                	in     al,0x64
c0019cc5:	a8 02                	test   al,0x2
c0019cc7:	75 fa                	jne    c0019cc3 <HalRestart()>
c0019cc9:	b0 fe                	mov    al,0xfe
c0019ccb:	e6 64                	out    0x64,al
c0019ccd:	c3                   	ret    

c0019cce <HalShutdown()>:
c0019cce:	c3                   	ret    

c0019ccf <HalSleep()>:
c0019ccf:	c3                   	ret    

c0019cd0 <CPU::close(int, int, void*)>:
c0019cd0:	31 c0                	xor    eax,eax
c0019cd2:	c3                   	ret    

c0019cd3 <x86ReadCMOS(unsigned char)>:
c0019cd3:	83 ec 14             	sub    esp,0x14
c0019cd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019cda:	88 04 24             	mov    BYTE PTR [esp],al
c0019cdd:	a0 2c 74 03 c0       	mov    al,ds:0xc003742c
c0019ce2:	0f b6 c0             	movzx  eax,al
c0019ce5:	85 c0                	test   eax,eax
c0019ce7:	74 04                	je     c0019ced <x86ReadCMOS(unsigned char)+0x1a>
c0019ce9:	b2 00                	mov    dl,0x0
c0019ceb:	eb 02                	jmp    c0019cef <x86ReadCMOS(unsigned char)+0x1c>
c0019ced:	b2 80                	mov    dl,0x80
c0019cef:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019cf2:	09 d0                	or     eax,edx
c0019cf4:	0f b6 c0             	movzx  eax,al
c0019cf7:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0019cfe:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019d02:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019d06:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0019d0b:	ee                   	out    dx,al
c0019d0c:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0019d13:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0019d18:	89 c2                	mov    edx,eax
c0019d1a:	ec                   	in     al,dx
c0019d1b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019d1f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019d23:	83 c4 14             	add    esp,0x14
c0019d26:	c3                   	ret    

c0019d27 <x86WriteCMOS(unsigned char, unsigned char)>:
c0019d27:	83 ec 18             	sub    esp,0x18
c0019d2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d32:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0019d36:	88 04 24             	mov    BYTE PTR [esp],al
c0019d39:	a0 2c 74 03 c0       	mov    al,ds:0xc003742c
c0019d3e:	0f b6 c0             	movzx  eax,al
c0019d41:	85 c0                	test   eax,eax
c0019d43:	74 04                	je     c0019d49 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0019d45:	b2 00                	mov    dl,0x0
c0019d47:	eb 02                	jmp    c0019d4b <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0019d49:	b2 80                	mov    dl,0x80
c0019d4b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019d4f:	09 d0                	or     eax,edx
c0019d51:	0f b6 c0             	movzx  eax,al
c0019d54:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0019d5b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019d5f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019d63:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019d68:	ee                   	out    dx,al
c0019d69:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0019d6d:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0019d74:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0019d78:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0019d7c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0019d81:	ee                   	out    dx,al
c0019d82:	90                   	nop
c0019d83:	83 c4 18             	add    esp,0x18
c0019d86:	c3                   	ret    

c0019d87 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0019d87:	60                   	pusha  
c0019d88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d90:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019d94:	9c                   	pushf  
c0019d95:	fa                   	cli    
c0019d96:	0f 09                	wbinvd 
c0019d98:	0f 30                	wrmsr  
c0019d9a:	9d                   	popf   
c0019d9b:	89 c2                	mov    edx,eax
c0019d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019da1:	89 10                	mov    DWORD PTR [eax],edx
c0019da3:	61                   	popa   
c0019da4:	90                   	nop
c0019da5:	c3                   	ret    

c0019da6 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0019da6:	60                   	pusha  
c0019da7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dab:	89 c1                	mov    ecx,eax
c0019dad:	9c                   	pushf  
c0019dae:	fa                   	cli    
c0019daf:	0f 09                	wbinvd 
c0019db1:	31 c0                	xor    eax,eax
c0019db3:	31 d2                	xor    edx,edx
c0019db5:	0f 32                	rdmsr  
c0019db7:	9d                   	popf   
c0019db8:	89 c2                	mov    edx,eax
c0019dba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019dbe:	89 10                	mov    DWORD PTR [eax],edx
c0019dc0:	61                   	popa   
c0019dc1:	90                   	nop
c0019dc2:	c3                   	ret    

c0019dc3 <AMD_K6_writeback(int, int, int)>:
c0019dc3:	83 ec 20             	sub    esp,0x20
c0019dc6:	a1 70 71 03 c0       	mov    eax,ds:0xc0037170
c0019dcb:	c1 e8 14             	shr    eax,0x14
c0019dce:	c1 e8 02             	shr    eax,0x2
c0019dd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019dd5:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0019dda:	0f 85 9e 00 00 00    	jne    c0019e7e <AMD_K6_writeback(int, int, int)+0xbb>
c0019de0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019de4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019de8:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0019ded:	75 19                	jne    c0019e08 <AMD_K6_writeback(int, int, int)+0x45>
c0019def:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0019df4:	7f 0a                	jg     c0019e00 <AMD_K6_writeback(int, int, int)+0x3d>
c0019df6:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0019dfe:	eb 08                	jmp    c0019e08 <AMD_K6_writeback(int, int, int)+0x45>
c0019e00:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0019e08:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0019e0d:	7c 6e                	jl     c0019e7d <AMD_K6_writeback(int, int, int)+0xba>
c0019e0f:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0019e14:	7e 09                	jle    c0019e1f <AMD_K6_writeback(int, int, int)+0x5c>
c0019e16:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0019e1b:	74 36                	je     c0019e53 <AMD_K6_writeback(int, int, int)+0x90>
c0019e1d:	eb 5e                	jmp    c0019e7d <AMD_K6_writeback(int, int, int)+0xba>
c0019e1f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019e23:	50                   	push   eax
c0019e24:	68 82 00 00 c0       	push   0xc0000082
c0019e29:	e8 78 ff ff ff       	call   c0019da6 <AMD_K6_read_msr(unsigned int, REGS*)>
c0019e2e:	83 c4 08             	add    esp,0x8
c0019e31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e35:	01 c0                	add    eax,eax
c0019e37:	83 e0 7f             	and    eax,0x7f
c0019e3a:	89 c2                	mov    edx,eax
c0019e3c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019e40:	50                   	push   eax
c0019e41:	6a 00                	push   0x0
c0019e43:	52                   	push   edx
c0019e44:	68 82 00 00 c0       	push   0xc0000082
c0019e49:	e8 39 ff ff ff       	call   c0019d87 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019e4e:	83 c4 10             	add    esp,0x10
c0019e51:	eb 2b                	jmp    c0019e7e <AMD_K6_writeback(int, int, int)+0xbb>
c0019e53:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019e57:	50                   	push   eax
c0019e58:	68 82 00 00 c0       	push   0xc0000082
c0019e5d:	e8 44 ff ff ff       	call   c0019da6 <AMD_K6_read_msr(unsigned int, REGS*)>
c0019e62:	83 c4 08             	add    esp,0x8
c0019e65:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019e69:	50                   	push   eax
c0019e6a:	6a 00                	push   0x0
c0019e6c:	6a 00                	push   0x0
c0019e6e:	68 82 00 00 c0       	push   0xc0000082
c0019e73:	e8 0f ff ff ff       	call   c0019d87 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019e78:	83 c4 10             	add    esp,0x10
c0019e7b:	eb 01                	jmp    c0019e7e <AMD_K6_writeback(int, int, int)+0xbb>
c0019e7d:	90                   	nop
c0019e7e:	90                   	nop
c0019e7f:	83 c4 20             	add    esp,0x20
c0019e82:	c3                   	ret    

c0019e83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0019e83:	56                   	push   esi
c0019e84:	53                   	push   ebx
c0019e85:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c0019e8a:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0019e8e:	75 32                	jne    c0019ec2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0019e90:	8b 15 20 74 03 c0    	mov    edx,DWORD PTR ds:0xc0037420
c0019e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e9a:	89 10                	mov    DWORD PTR [eax],edx
c0019e9c:	8b 15 1c 74 03 c0    	mov    edx,DWORD PTR ds:0xc003741c
c0019ea2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ea6:	89 10                	mov    DWORD PTR [eax],edx
c0019ea8:	8b 15 18 74 03 c0    	mov    edx,DWORD PTR ds:0xc0037418
c0019eae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019eb2:	89 10                	mov    DWORD PTR [eax],edx
c0019eb4:	8b 15 14 74 03 c0    	mov    edx,DWORD PTR ds:0xc0037414
c0019eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ebe:	89 10                	mov    DWORD PTR [eax],edx
c0019ec0:	eb 5c                	jmp    c0019f1e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0019ec2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ec6:	ba 00 00 00 00       	mov    edx,0x0
c0019ecb:	89 d1                	mov    ecx,edx
c0019ecd:	0f a2                	cpuid  
c0019ecf:	89 c6                	mov    esi,eax
c0019ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ed5:	89 30                	mov    DWORD PTR [eax],esi
c0019ed7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019edb:	89 18                	mov    DWORD PTR [eax],ebx
c0019edd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ee1:	89 08                	mov    DWORD PTR [eax],ecx
c0019ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ee7:	89 10                	mov    DWORD PTR [eax],edx
c0019ee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019eed:	a3 e0 0e 03 c0       	mov    ds:0xc0030ee0,eax
c0019ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ef6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ef8:	a3 20 74 03 c0       	mov    ds:0xc0037420,eax
c0019efd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f01:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f03:	a3 1c 74 03 c0       	mov    ds:0xc003741c,eax
c0019f08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f0e:	a3 18 74 03 c0       	mov    ds:0xc0037418,eax
c0019f13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f17:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f19:	a3 14 74 03 c0       	mov    ds:0xc0037414,eax
c0019f1e:	5b                   	pop    ebx
c0019f1f:	5e                   	pop    esi
c0019f20:	c3                   	ret    

c0019f21 <cpuidCheckEDX(unsigned int)>:
c0019f21:	83 ec 10             	sub    esp,0x10
c0019f24:	89 e0                	mov    eax,esp
c0019f26:	50                   	push   eax
c0019f27:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f2b:	50                   	push   eax
c0019f2c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f30:	50                   	push   eax
c0019f31:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f35:	50                   	push   eax
c0019f36:	6a 01                	push   0x1
c0019f38:	e8 46 ff ff ff       	call   c0019e83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019f3d:	83 c4 14             	add    esp,0x14
c0019f40:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019f43:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019f47:	0f 95 c0             	setne  al
c0019f4a:	83 c4 10             	add    esp,0x10
c0019f4d:	c3                   	ret    

c0019f4e <cpuidCheckECX(unsigned int)>:
c0019f4e:	83 ec 10             	sub    esp,0x10
c0019f51:	89 e0                	mov    eax,esp
c0019f53:	50                   	push   eax
c0019f54:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f58:	50                   	push   eax
c0019f59:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f5d:	50                   	push   eax
c0019f5e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f62:	50                   	push   eax
c0019f63:	6a 01                	push   0x1
c0019f65:	e8 19 ff ff ff       	call   c0019e83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019f6a:	83 c4 14             	add    esp,0x14
c0019f6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f71:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019f75:	0f 95 c0             	setne  al
c0019f78:	83 c4 10             	add    esp,0x10
c0019f7b:	c3                   	ret    

c0019f7c <cpuidCheckExtendedEBX(unsigned int)>:
c0019f7c:	83 ec 10             	sub    esp,0x10
c0019f7f:	89 e0                	mov    eax,esp
c0019f81:	50                   	push   eax
c0019f82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f86:	50                   	push   eax
c0019f87:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f8b:	50                   	push   eax
c0019f8c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f90:	50                   	push   eax
c0019f91:	6a 07                	push   0x7
c0019f93:	e8 eb fe ff ff       	call   c0019e83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019f98:	83 c4 14             	add    esp,0x14
c0019f9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f9f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019fa3:	0f 95 c0             	setne  al
c0019fa6:	83 c4 10             	add    esp,0x10
c0019fa9:	c3                   	ret    

c0019faa <cpuidCheckExtendedECX(unsigned int)>:
c0019faa:	83 ec 10             	sub    esp,0x10
c0019fad:	89 e0                	mov    eax,esp
c0019faf:	50                   	push   eax
c0019fb0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019fb4:	50                   	push   eax
c0019fb5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019fb9:	50                   	push   eax
c0019fba:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fbe:	50                   	push   eax
c0019fbf:	6a 07                	push   0x7
c0019fc1:	e8 bd fe ff ff       	call   c0019e83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019fc6:	83 c4 14             	add    esp,0x14
c0019fc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fcd:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019fd1:	0f 95 c0             	setne  al
c0019fd4:	83 c4 10             	add    esp,0x10
c0019fd7:	c3                   	ret    

c0019fd8 <HalDetectFeatures()>:
c0019fd8:	57                   	push   edi
c0019fd9:	56                   	push   esi
c0019fda:	53                   	push   ebx
c0019fdb:	81 ec 90 00 00 00    	sub    esp,0x90
c0019fe1:	83 ec 04             	sub    esp,0x4
c0019fe4:	6a 08                	push   0x8
c0019fe6:	6a 00                	push   0x0
c0019fe8:	68 4c 74 03 c0       	push   0xc003744c
c0019fed:	e8 fe 64 fe ff       	call   c00004f0 <memset>
c0019ff2:	83 c4 10             	add    esp,0x10
c0019ff5:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c0019ffa:	83 c8 04             	or     eax,0x4
c0019ffd:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001a002:	83 ec 0c             	sub    esp,0xc
c001a005:	68 a4 d3 02 c0       	push   0xc002d3a4
c001a00a:	e8 6d cf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a00f:	83 c4 10             	add    esp,0x10
c001a012:	e8 e2 61 fe ff       	call   c00001f9 <detectCPUID>
c001a017:	85 c0                	test   eax,eax
c001a019:	0f 95 c0             	setne  al
c001a01c:	83 e0 01             	and    eax,0x1
c001a01f:	83 e0 01             	and    eax,0x1
c001a022:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001a025:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a02a:	83 e0 fd             	and    eax,0xfffffffd
c001a02d:	88 c2                	mov    dl,al
c001a02f:	88 c8                	mov    al,cl
c001a031:	09 d0                	or     eax,edx
c001a033:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001a038:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a03d:	83 e0 02             	and    eax,0x2
c001a040:	0f b6 c0             	movzx  eax,al
c001a043:	85 c0                	test   eax,eax
c001a045:	0f 84 84 02 00 00    	je     c001a2cf <HalDetectFeatures()+0x2f7>
c001a04b:	83 ec 0c             	sub    esp,0xc
c001a04e:	6a 20                	push   0x20
c001a050:	e8 cc fe ff ff       	call   c0019f21 <cpuidCheckEDX(unsigned int)>
c001a055:	83 c4 10             	add    esp,0x10
c001a058:	83 e0 01             	and    eax,0x1
c001a05b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a062:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a067:	83 e0 f7             	and    eax,0xfffffff7
c001a06a:	88 c2                	mov    dl,al
c001a06c:	88 c8                	mov    al,cl
c001a06e:	09 d0                	or     eax,edx
c001a070:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001a075:	83 ec 0c             	sub    esp,0xc
c001a078:	68 00 00 00 04       	push   0x4000000
c001a07d:	e8 9f fe ff ff       	call   c0019f21 <cpuidCheckEDX(unsigned int)>
c001a082:	83 c4 10             	add    esp,0x10
c001a085:	89 c1                	mov    ecx,eax
c001a087:	83 e1 01             	and    ecx,0x1
c001a08a:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001a08f:	83 e0 fe             	and    eax,0xfffffffe
c001a092:	88 c2                	mov    dl,al
c001a094:	88 c8                	mov    al,cl
c001a096:	09 d0                	or     eax,edx
c001a098:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c001a09d:	83 ec 0c             	sub    esp,0xc
c001a0a0:	68 80 00 00 00       	push   0x80
c001a0a5:	e8 77 fe ff ff       	call   c0019f21 <cpuidCheckEDX(unsigned int)>
c001a0aa:	83 c4 10             	add    esp,0x10
c001a0ad:	89 c1                	mov    ecx,eax
c001a0af:	c1 e1 07             	shl    ecx,0x7
c001a0b2:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001a0b7:	83 e0 7f             	and    eax,0x7f
c001a0ba:	88 c2                	mov    dl,al
c001a0bc:	88 c8                	mov    al,cl
c001a0be:	09 d0                	or     eax,edx
c001a0c0:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c001a0c5:	83 ec 0c             	sub    esp,0xc
c001a0c8:	68 00 00 80 00       	push   0x800000
c001a0cd:	e8 4f fe ff ff       	call   c0019f21 <cpuidCheckEDX(unsigned int)>
c001a0d2:	83 c4 10             	add    esp,0x10
c001a0d5:	83 e0 01             	and    eax,0x1
c001a0d8:	89 c1                	mov    ecx,eax
c001a0da:	c1 e1 05             	shl    ecx,0x5
c001a0dd:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a0e2:	83 e0 df             	and    eax,0xffffffdf
c001a0e5:	88 c2                	mov    dl,al
c001a0e7:	88 c8                	mov    al,cl
c001a0e9:	09 d0                	or     eax,edx
c001a0eb:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001a0f0:	83 ec 0c             	sub    esp,0xc
c001a0f3:	6a 01                	push   0x1
c001a0f5:	e8 26 3f ff ff       	call   c000e020 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a0fa:	83 c4 10             	add    esp,0x10
c001a0fd:	0f b6 c0             	movzx  eax,al
c001a100:	85 c0                	test   eax,eax
c001a102:	75 17                	jne    c001a11b <HalDetectFeatures()+0x143>
c001a104:	83 ec 0c             	sub    esp,0xc
c001a107:	68 00 04 00 00       	push   0x400
c001a10c:	e8 0f 3f ff ff       	call   c000e020 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a111:	83 c4 10             	add    esp,0x10
c001a114:	0f b6 c0             	movzx  eax,al
c001a117:	85 c0                	test   eax,eax
c001a119:	74 04                	je     c001a11f <HalDetectFeatures()+0x147>
c001a11b:	b0 01                	mov    al,0x1
c001a11d:	eb 02                	jmp    c001a121 <HalDetectFeatures()+0x149>
c001a11f:	b0 00                	mov    al,0x0
c001a121:	0f b6 c0             	movzx  eax,al
c001a124:	85 c0                	test   eax,eax
c001a126:	74 0f                	je     c001a137 <HalDetectFeatures()+0x15f>
c001a128:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a12d:	83 e0 fe             	and    eax,0xfffffffe
c001a130:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001a135:	eb 28                	jmp    c001a15f <HalDetectFeatures()+0x187>
c001a137:	83 ec 0c             	sub    esp,0xc
c001a13a:	68 00 02 00 00       	push   0x200
c001a13f:	e8 dd fd ff ff       	call   c0019f21 <cpuidCheckEDX(unsigned int)>
c001a144:	83 c4 10             	add    esp,0x10
c001a147:	89 c1                	mov    ecx,eax
c001a149:	83 e1 01             	and    ecx,0x1
c001a14c:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a151:	83 e0 fe             	and    eax,0xfffffffe
c001a154:	88 c2                	mov    dl,al
c001a156:	88 c8                	mov    al,cl
c001a158:	09 d0                	or     eax,edx
c001a15a:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001a15f:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a164:	83 e0 01             	and    eax,0x1
c001a167:	0f b6 c0             	movzx  eax,al
c001a16a:	85 c0                	test   eax,eax
c001a16c:	74 1c                	je     c001a18a <HalDetectFeatures()+0x1b2>
c001a16e:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a173:	83 e0 08             	and    eax,0x8
c001a176:	0f b6 c0             	movzx  eax,al
c001a179:	85 c0                	test   eax,eax
c001a17b:	75 0d                	jne    c001a18a <HalDetectFeatures()+0x1b2>
c001a17d:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a182:	83 e0 fe             	and    eax,0xfffffffe
c001a185:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001a18a:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c001a192:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c001a19a:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c001a1a2:	85 c0                	test   eax,eax
c001a1a4:	0f 84 ab 00 00 00    	je     c001a255 <HalDetectFeatures()+0x27d>
c001a1aa:	83 ec 0c             	sub    esp,0xc
c001a1ad:	6a 01                	push   0x1
c001a1af:	e8 9a fd ff ff       	call   c0019f4e <cpuidCheckECX(unsigned int)>
c001a1b4:	83 c4 10             	add    esp,0x10
c001a1b7:	83 e0 01             	and    eax,0x1
c001a1ba:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001a1bd:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001a1c2:	83 e0 fd             	and    eax,0xfffffffd
c001a1c5:	88 c2                	mov    dl,al
c001a1c7:	88 c8                	mov    al,cl
c001a1c9:	09 d0                	or     eax,edx
c001a1cb:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c001a1d0:	83 ec 0c             	sub    esp,0xc
c001a1d3:	68 00 02 00 00       	push   0x200
c001a1d8:	e8 71 fd ff ff       	call   c0019f4e <cpuidCheckECX(unsigned int)>
c001a1dd:	83 c4 10             	add    esp,0x10
c001a1e0:	83 e0 01             	and    eax,0x1
c001a1e3:	89 c1                	mov    ecx,eax
c001a1e5:	c1 e1 04             	shl    ecx,0x4
c001a1e8:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001a1ed:	83 e0 ef             	and    eax,0xffffffef
c001a1f0:	88 c2                	mov    dl,al
c001a1f2:	88 c8                	mov    al,cl
c001a1f4:	09 d0                	or     eax,edx
c001a1f6:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c001a1fb:	83 ec 0c             	sub    esp,0xc
c001a1fe:	68 00 00 08 00       	push   0x80000
c001a203:	e8 46 fd ff ff       	call   c0019f4e <cpuidCheckECX(unsigned int)>
c001a208:	83 c4 10             	add    esp,0x10
c001a20b:	83 e0 01             	and    eax,0x1
c001a20e:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001a215:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001a21a:	83 e0 fb             	and    eax,0xfffffffb
c001a21d:	88 c2                	mov    dl,al
c001a21f:	88 c8                	mov    al,cl
c001a221:	09 d0                	or     eax,edx
c001a223:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c001a228:	83 ec 0c             	sub    esp,0xc
c001a22b:	68 00 00 10 00       	push   0x100000
c001a230:	e8 19 fd ff ff       	call   c0019f4e <cpuidCheckECX(unsigned int)>
c001a235:	83 c4 10             	add    esp,0x10
c001a238:	83 e0 01             	and    eax,0x1
c001a23b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a242:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001a247:	83 e0 f7             	and    eax,0xfffffff7
c001a24a:	88 c2                	mov    dl,al
c001a24c:	88 c8                	mov    al,cl
c001a24e:	09 d0                	or     eax,edx
c001a250:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c001a255:	83 ec 0c             	sub    esp,0xc
c001a258:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a25c:	50                   	push   eax
c001a25d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a261:	50                   	push   eax
c001a262:	8d 44 24 34          	lea    eax,[esp+0x34]
c001a266:	50                   	push   eax
c001a267:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001a26b:	50                   	push   eax
c001a26c:	68 00 00 00 80       	push   0x80000000
c001a271:	e8 0d fc ff ff       	call   c0019e83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a276:	83 c4 20             	add    esp,0x20
c001a279:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a27d:	3d 00 00 00 80       	cmp    eax,0x80000000
c001a282:	76 4b                	jbe    c001a2cf <HalDetectFeatures()+0x2f7>
c001a284:	83 ec 0c             	sub    esp,0xc
c001a287:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a28b:	50                   	push   eax
c001a28c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a290:	50                   	push   eax
c001a291:	8d 44 24 34          	lea    eax,[esp+0x34]
c001a295:	50                   	push   eax
c001a296:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001a29a:	50                   	push   eax
c001a29b:	68 01 00 00 80       	push   0x80000001
c001a2a0:	e8 de fb ff ff       	call   c0019e83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a2a5:	83 c4 20             	add    esp,0x20
c001a2a8:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a2ad:	83 e0 bf             	and    eax,0xffffffbf
c001a2b0:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001a2b5:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a2ba:	83 e0 fd             	and    eax,0xfffffffd
c001a2bd:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a2c2:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a2c7:	83 e0 fe             	and    eax,0xfffffffe
c001a2ca:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a2cf:	83 ec 0c             	sub    esp,0xc
c001a2d2:	68 00 04 00 00       	push   0x400
c001a2d7:	e8 44 3d ff ff       	call   c000e020 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a2dc:	83 c4 10             	add    esp,0x10
c001a2df:	0f b6 c0             	movzx  eax,al
c001a2e2:	85 c0                	test   eax,eax
c001a2e4:	74 0d                	je     c001a2f3 <HalDetectFeatures()+0x31b>
c001a2e6:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a2eb:	83 e0 fb             	and    eax,0xfffffffb
c001a2ee:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001a2f3:	c6 05 48 74 03 c0 01 	mov    BYTE PTR ds:0xc0037448,0x1
c001a2fa:	83 ec 04             	sub    esp,0x4
c001a2fd:	6a 0d                	push   0xd
c001a2ff:	6a 00                	push   0x0
c001a301:	68 30 74 03 c0       	push   0xc0037430
c001a306:	e8 e5 61 fe ff       	call   c00004f0 <memset>
c001a30b:	83 c4 10             	add    esp,0x10
c001a30e:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001a313:	83 e0 02             	and    eax,0x2
c001a316:	0f b6 c0             	movzx  eax,al
c001a319:	85 c0                	test   eax,eax
c001a31b:	0f 84 16 08 00 00    	je     c001ab37 <HalDetectFeatures()+0xb5f>
c001a321:	83 ec 0c             	sub    esp,0xc
c001a324:	6a 10                	push   0x10
c001a326:	e8 f6 fb ff ff       	call   c0019f21 <cpuidCheckEDX(unsigned int)>
c001a32b:	83 c4 10             	add    esp,0x10
c001a32e:	83 e0 01             	and    eax,0x1
c001a331:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a338:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a33d:	83 e0 f7             	and    eax,0xfffffff7
c001a340:	88 c2                	mov    dl,al
c001a342:	88 c8                	mov    al,cl
c001a344:	09 d0                	or     eax,edx
c001a346:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a34b:	83 ec 0c             	sub    esp,0xc
c001a34e:	6a 40                	push   0x40
c001a350:	e8 cc fb ff ff       	call   c0019f21 <cpuidCheckEDX(unsigned int)>
c001a355:	83 c4 10             	add    esp,0x10
c001a358:	83 e0 01             	and    eax,0x1
c001a35b:	89 c1                	mov    ecx,eax
c001a35d:	c1 e1 04             	shl    ecx,0x4
c001a360:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a365:	83 e0 ef             	and    eax,0xffffffef
c001a368:	88 c2                	mov    dl,al
c001a36a:	88 c8                	mov    al,cl
c001a36c:	09 d0                	or     eax,edx
c001a36e:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a373:	83 ec 0c             	sub    esp,0xc
c001a376:	6a 08                	push   0x8
c001a378:	e8 a4 fb ff ff       	call   c0019f21 <cpuidCheckEDX(unsigned int)>
c001a37d:	83 c4 10             	add    esp,0x10
c001a380:	83 e0 01             	and    eax,0x1
c001a383:	89 c1                	mov    ecx,eax
c001a385:	c1 e1 05             	shl    ecx,0x5
c001a388:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a38d:	83 e0 df             	and    eax,0xffffffdf
c001a390:	88 c2                	mov    dl,al
c001a392:	88 c8                	mov    al,cl
c001a394:	09 d0                	or     eax,edx
c001a396:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a39b:	83 ec 0c             	sub    esp,0xc
c001a39e:	68 00 20 00 00       	push   0x2000
c001a3a3:	e8 79 fb ff ff       	call   c0019f21 <cpuidCheckEDX(unsigned int)>
c001a3a8:	83 c4 10             	add    esp,0x10
c001a3ab:	83 e0 01             	and    eax,0x1
c001a3ae:	89 c1                	mov    ecx,eax
c001a3b0:	c1 e1 06             	shl    ecx,0x6
c001a3b3:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a3b8:	83 e0 bf             	and    eax,0xffffffbf
c001a3bb:	88 c2                	mov    dl,al
c001a3bd:	88 c8                	mov    al,cl
c001a3bf:	09 d0                	or     eax,edx
c001a3c1:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a3c6:	83 ec 0c             	sub    esp,0xc
c001a3c9:	68 00 00 01 00       	push   0x10000
c001a3ce:	e8 4e fb ff ff       	call   c0019f21 <cpuidCheckEDX(unsigned int)>
c001a3d3:	83 c4 10             	add    esp,0x10
c001a3d6:	89 c1                	mov    ecx,eax
c001a3d8:	c1 e1 07             	shl    ecx,0x7
c001a3db:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a3e0:	83 e0 7f             	and    eax,0x7f
c001a3e3:	88 c2                	mov    dl,al
c001a3e5:	88 c8                	mov    al,cl
c001a3e7:	09 d0                	or     eax,edx
c001a3e9:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001a3ee:	83 ec 0c             	sub    esp,0xc
c001a3f1:	6a 01                	push   0x1
c001a3f3:	e8 29 fb ff ff       	call   c0019f21 <cpuidCheckEDX(unsigned int)>
c001a3f8:	83 c4 10             	add    esp,0x10
c001a3fb:	83 e0 01             	and    eax,0x1
c001a3fe:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a405:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001a40a:	83 e0 f7             	and    eax,0xfffffff7
c001a40d:	88 c2                	mov    dl,al
c001a40f:	88 c8                	mov    al,cl
c001a411:	09 d0                	or     eax,edx
c001a413:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001a418:	83 ec 0c             	sub    esp,0xc
c001a41b:	68 00 08 00 00       	push   0x800
c001a420:	e8 fc fa ff ff       	call   c0019f21 <cpuidCheckEDX(unsigned int)>
c001a425:	83 c4 10             	add    esp,0x10
c001a428:	89 c1                	mov    ecx,eax
c001a42a:	83 e1 01             	and    ecx,0x1
c001a42d:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001a432:	83 e0 fe             	and    eax,0xfffffffe
c001a435:	88 c2                	mov    dl,al
c001a437:	88 c8                	mov    al,cl
c001a439:	09 d0                	or     eax,edx
c001a43b:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001a440:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a445:	83 e0 40             	and    eax,0x40
c001a448:	0f b6 c0             	movzx  eax,al
c001a44b:	85 c0                	test   eax,eax
c001a44d:	74 0a                	je     c001a459 <HalDetectFeatures()+0x481>
c001a44f:	c7 05 28 74 03 c0 00 01 00 00 	mov    DWORD PTR ds:0xc0037428,0x100
c001a459:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001a45e:	83 e0 80             	and    eax,0xffffff80
c001a461:	0f b6 c0             	movzx  eax,al
c001a464:	85 c0                	test   eax,eax
c001a466:	74 0a                	je     c001a472 <HalDetectFeatures()+0x49a>
c001a468:	c7 05 24 74 03 c0 80 00 00 00 	mov    DWORD PTR ds:0xc0037424,0x80
c001a472:	83 ec 0c             	sub    esp,0xc
c001a475:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a479:	50                   	push   eax
c001a47a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a47e:	50                   	push   eax
c001a47f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a483:	50                   	push   eax
c001a484:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a488:	50                   	push   eax
c001a489:	6a 00                	push   0x0
c001a48b:	e8 f3 f9 ff ff       	call   c0019e83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a490:	83 c4 20             	add    esp,0x20
c001a493:	c7 44 24 48 30 74 03 c0 	mov    DWORD PTR [esp+0x48],0xc0037430
c001a49b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a49f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a4a3:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c001a4ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a4af:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001a4b3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001a4b7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001a4bb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001a4bf:	89 c6                	mov    esi,eax
c001a4c1:	89 d7                	mov    edi,edx
c001a4c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4c5:	89 c8                	mov    eax,ecx
c001a4c7:	89 fa                	mov    edx,edi
c001a4c9:	89 f3                	mov    ebx,esi
c001a4cb:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001a4cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a4d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a4d7:	b8 34 74 03 c0       	mov    eax,0xc0037434
c001a4dc:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a4e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4e4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a4e8:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c001a4f0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a4f4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a4f8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a4fc:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001a500:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a504:	89 c6                	mov    esi,eax
c001a506:	89 d7                	mov    edi,edx
c001a508:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a50a:	89 c8                	mov    eax,ecx
c001a50c:	89 fa                	mov    edx,edi
c001a50e:	89 f3                	mov    ebx,esi
c001a510:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c001a514:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c001a518:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a51c:	b8 38 74 03 c0       	mov    eax,0xc0037438
c001a521:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c001a528:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a52c:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001a530:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c001a538:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a53f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c001a543:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001a547:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a54e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001a552:	89 c6                	mov    esi,eax
c001a554:	89 d7                	mov    edi,edx
c001a556:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a558:	89 c8                	mov    eax,ecx
c001a55a:	89 fa                	mov    edx,edi
c001a55c:	89 f3                	mov    ebx,esi
c001a55e:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001a562:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c001a566:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001a56a:	83 ec 08             	sub    esp,0x8
c001a56d:	68 b9 d3 02 c0       	push   0xc002d3b9
c001a572:	68 30 74 03 c0       	push   0xc0037430
c001a577:	e8 d4 61 fe ff       	call   c0000750 <strcmp>
c001a57c:	83 c4 10             	add    esp,0x10
c001a57f:	85 c0                	test   eax,eax
c001a581:	74 19                	je     c001a59c <HalDetectFeatures()+0x5c4>
c001a583:	83 ec 08             	sub    esp,0x8
c001a586:	68 c6 d3 02 c0       	push   0xc002d3c6
c001a58b:	68 30 74 03 c0       	push   0xc0037430
c001a590:	e8 bb 61 fe ff       	call   c0000750 <strcmp>
c001a595:	83 c4 10             	add    esp,0x10
c001a598:	85 c0                	test   eax,eax
c001a59a:	75 04                	jne    c001a5a0 <HalDetectFeatures()+0x5c8>
c001a59c:	b0 01                	mov    al,0x1
c001a59e:	eb 02                	jmp    c001a5a2 <HalDetectFeatures()+0x5ca>
c001a5a0:	b0 00                	mov    al,0x0
c001a5a2:	0f b6 c0             	movzx  eax,al
c001a5a5:	85 c0                	test   eax,eax
c001a5a7:	74 0f                	je     c001a5b8 <HalDetectFeatures()+0x5e0>
c001a5a9:	c7 05 44 74 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x2
c001a5b3:	e9 0d 03 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a5b8:	83 ec 08             	sub    esp,0x8
c001a5bb:	68 d3 d3 02 c0       	push   0xc002d3d3
c001a5c0:	68 30 74 03 c0       	push   0xc0037430
c001a5c5:	e8 86 61 fe ff       	call   c0000750 <strcmp>
c001a5ca:	83 c4 10             	add    esp,0x10
c001a5cd:	85 c0                	test   eax,eax
c001a5cf:	74 19                	je     c001a5ea <HalDetectFeatures()+0x612>
c001a5d1:	83 ec 08             	sub    esp,0x8
c001a5d4:	68 e0 d3 02 c0       	push   0xc002d3e0
c001a5d9:	68 30 74 03 c0       	push   0xc0037430
c001a5de:	e8 6d 61 fe ff       	call   c0000750 <strcmp>
c001a5e3:	83 c4 10             	add    esp,0x10
c001a5e6:	85 c0                	test   eax,eax
c001a5e8:	75 04                	jne    c001a5ee <HalDetectFeatures()+0x616>
c001a5ea:	b0 01                	mov    al,0x1
c001a5ec:	eb 02                	jmp    c001a5f0 <HalDetectFeatures()+0x618>
c001a5ee:	b0 00                	mov    al,0x0
c001a5f0:	0f b6 c0             	movzx  eax,al
c001a5f3:	85 c0                	test   eax,eax
c001a5f5:	74 0f                	je     c001a606 <HalDetectFeatures()+0x62e>
c001a5f7:	c7 05 44 74 03 c0 04 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x4
c001a601:	e9 bf 02 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a606:	83 ec 08             	sub    esp,0x8
c001a609:	68 ed d3 02 c0       	push   0xc002d3ed
c001a60e:	68 30 74 03 c0       	push   0xc0037430
c001a613:	e8 38 61 fe ff       	call   c0000750 <strcmp>
c001a618:	83 c4 10             	add    esp,0x10
c001a61b:	85 c0                	test   eax,eax
c001a61d:	74 19                	je     c001a638 <HalDetectFeatures()+0x660>
c001a61f:	83 ec 08             	sub    esp,0x8
c001a622:	68 fa d3 02 c0       	push   0xc002d3fa
c001a627:	68 30 74 03 c0       	push   0xc0037430
c001a62c:	e8 1f 61 fe ff       	call   c0000750 <strcmp>
c001a631:	83 c4 10             	add    esp,0x10
c001a634:	85 c0                	test   eax,eax
c001a636:	75 04                	jne    c001a63c <HalDetectFeatures()+0x664>
c001a638:	b0 01                	mov    al,0x1
c001a63a:	eb 02                	jmp    c001a63e <HalDetectFeatures()+0x666>
c001a63c:	b0 00                	mov    al,0x0
c001a63e:	0f b6 c0             	movzx  eax,al
c001a641:	85 c0                	test   eax,eax
c001a643:	74 0f                	je     c001a654 <HalDetectFeatures()+0x67c>
c001a645:	c7 05 44 74 03 c0 05 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x5
c001a64f:	e9 71 02 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a654:	83 ec 08             	sub    esp,0x8
c001a657:	68 07 d4 02 c0       	push   0xc002d407
c001a65c:	68 30 74 03 c0       	push   0xc0037430
c001a661:	e8 ea 60 fe ff       	call   c0000750 <strcmp>
c001a666:	83 c4 10             	add    esp,0x10
c001a669:	85 c0                	test   eax,eax
c001a66b:	0f 94 c0             	sete   al
c001a66e:	0f b6 c0             	movzx  eax,al
c001a671:	85 c0                	test   eax,eax
c001a673:	74 0f                	je     c001a684 <HalDetectFeatures()+0x6ac>
c001a675:	c7 05 44 74 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x1
c001a67f:	e9 41 02 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a684:	83 ec 08             	sub    esp,0x8
c001a687:	68 14 d4 02 c0       	push   0xc002d414
c001a68c:	68 30 74 03 c0       	push   0xc0037430
c001a691:	e8 ba 60 fe ff       	call   c0000750 <strcmp>
c001a696:	83 c4 10             	add    esp,0x10
c001a699:	85 c0                	test   eax,eax
c001a69b:	0f 94 c0             	sete   al
c001a69e:	0f b6 c0             	movzx  eax,al
c001a6a1:	85 c0                	test   eax,eax
c001a6a3:	74 0f                	je     c001a6b4 <HalDetectFeatures()+0x6dc>
c001a6a5:	c7 05 44 74 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x3
c001a6af:	e9 11 02 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a6b4:	83 ec 08             	sub    esp,0x8
c001a6b7:	68 d3 d3 02 c0       	push   0xc002d3d3
c001a6bc:	68 30 74 03 c0       	push   0xc0037430
c001a6c1:	e8 8a 60 fe ff       	call   c0000750 <strcmp>
c001a6c6:	83 c4 10             	add    esp,0x10
c001a6c9:	85 c0                	test   eax,eax
c001a6cb:	0f 94 c0             	sete   al
c001a6ce:	0f b6 c0             	movzx  eax,al
c001a6d1:	85 c0                	test   eax,eax
c001a6d3:	74 0f                	je     c001a6e4 <HalDetectFeatures()+0x70c>
c001a6d5:	c7 05 44 74 03 c0 06 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x6
c001a6df:	e9 e1 01 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a6e4:	83 ec 08             	sub    esp,0x8
c001a6e7:	68 21 d4 02 c0       	push   0xc002d421
c001a6ec:	68 30 74 03 c0       	push   0xc0037430
c001a6f1:	e8 5a 60 fe ff       	call   c0000750 <strcmp>
c001a6f6:	83 c4 10             	add    esp,0x10
c001a6f9:	85 c0                	test   eax,eax
c001a6fb:	0f 94 c0             	sete   al
c001a6fe:	0f b6 c0             	movzx  eax,al
c001a701:	85 c0                	test   eax,eax
c001a703:	74 0f                	je     c001a714 <HalDetectFeatures()+0x73c>
c001a705:	c7 05 44 74 03 c0 07 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x7
c001a70f:	e9 b1 01 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a714:	83 ec 08             	sub    esp,0x8
c001a717:	68 2e d4 02 c0       	push   0xc002d42e
c001a71c:	68 30 74 03 c0       	push   0xc0037430
c001a721:	e8 2a 60 fe ff       	call   c0000750 <strcmp>
c001a726:	83 c4 10             	add    esp,0x10
c001a729:	85 c0                	test   eax,eax
c001a72b:	0f 94 c0             	sete   al
c001a72e:	0f b6 c0             	movzx  eax,al
c001a731:	85 c0                	test   eax,eax
c001a733:	74 0f                	je     c001a744 <HalDetectFeatures()+0x76c>
c001a735:	c7 05 44 74 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x8
c001a73f:	e9 81 01 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a744:	83 ec 08             	sub    esp,0x8
c001a747:	68 3b d4 02 c0       	push   0xc002d43b
c001a74c:	68 30 74 03 c0       	push   0xc0037430
c001a751:	e8 fa 5f fe ff       	call   c0000750 <strcmp>
c001a756:	83 c4 10             	add    esp,0x10
c001a759:	85 c0                	test   eax,eax
c001a75b:	0f 94 c0             	sete   al
c001a75e:	0f b6 c0             	movzx  eax,al
c001a761:	85 c0                	test   eax,eax
c001a763:	74 0f                	je     c001a774 <HalDetectFeatures()+0x79c>
c001a765:	c7 05 44 74 03 c0 09 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x9
c001a76f:	e9 51 01 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a774:	83 ec 08             	sub    esp,0x8
c001a777:	68 48 d4 02 c0       	push   0xc002d448
c001a77c:	68 30 74 03 c0       	push   0xc0037430
c001a781:	e8 ca 5f fe ff       	call   c0000750 <strcmp>
c001a786:	83 c4 10             	add    esp,0x10
c001a789:	85 c0                	test   eax,eax
c001a78b:	0f 94 c0             	sete   al
c001a78e:	0f b6 c0             	movzx  eax,al
c001a791:	85 c0                	test   eax,eax
c001a793:	74 0f                	je     c001a7a4 <HalDetectFeatures()+0x7cc>
c001a795:	c7 05 44 74 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xa
c001a79f:	e9 21 01 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a7a4:	83 ec 08             	sub    esp,0x8
c001a7a7:	68 55 d4 02 c0       	push   0xc002d455
c001a7ac:	68 30 74 03 c0       	push   0xc0037430
c001a7b1:	e8 9a 5f fe ff       	call   c0000750 <strcmp>
c001a7b6:	83 c4 10             	add    esp,0x10
c001a7b9:	85 c0                	test   eax,eax
c001a7bb:	0f 94 c0             	sete   al
c001a7be:	0f b6 c0             	movzx  eax,al
c001a7c1:	85 c0                	test   eax,eax
c001a7c3:	74 0f                	je     c001a7d4 <HalDetectFeatures()+0x7fc>
c001a7c5:	c7 05 44 74 03 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xb
c001a7cf:	e9 f1 00 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a7d4:	83 ec 08             	sub    esp,0x8
c001a7d7:	68 62 d4 02 c0       	push   0xc002d462
c001a7dc:	68 30 74 03 c0       	push   0xc0037430
c001a7e1:	e8 6a 5f fe ff       	call   c0000750 <strcmp>
c001a7e6:	83 c4 10             	add    esp,0x10
c001a7e9:	85 c0                	test   eax,eax
c001a7eb:	0f 94 c0             	sete   al
c001a7ee:	0f b6 c0             	movzx  eax,al
c001a7f1:	85 c0                	test   eax,eax
c001a7f3:	74 0f                	je     c001a804 <HalDetectFeatures()+0x82c>
c001a7f5:	c7 05 44 74 03 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xc
c001a7ff:	e9 c1 00 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a804:	83 ec 08             	sub    esp,0x8
c001a807:	68 6f d4 02 c0       	push   0xc002d46f
c001a80c:	68 30 74 03 c0       	push   0xc0037430
c001a811:	e8 3a 5f fe ff       	call   c0000750 <strcmp>
c001a816:	83 c4 10             	add    esp,0x10
c001a819:	85 c0                	test   eax,eax
c001a81b:	0f 94 c0             	sete   al
c001a81e:	0f b6 c0             	movzx  eax,al
c001a821:	85 c0                	test   eax,eax
c001a823:	74 0f                	je     c001a834 <HalDetectFeatures()+0x85c>
c001a825:	c7 05 44 74 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xd
c001a82f:	e9 91 00 00 00       	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a834:	83 ec 08             	sub    esp,0x8
c001a837:	68 7c d4 02 c0       	push   0xc002d47c
c001a83c:	68 30 74 03 c0       	push   0xc0037430
c001a841:	e8 0a 5f fe ff       	call   c0000750 <strcmp>
c001a846:	83 c4 10             	add    esp,0x10
c001a849:	85 c0                	test   eax,eax
c001a84b:	0f 94 c0             	sete   al
c001a84e:	0f b6 c0             	movzx  eax,al
c001a851:	85 c0                	test   eax,eax
c001a853:	74 0c                	je     c001a861 <HalDetectFeatures()+0x889>
c001a855:	c7 05 44 74 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xd
c001a85f:	eb 64                	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a861:	83 ec 08             	sub    esp,0x8
c001a864:	68 89 d4 02 c0       	push   0xc002d489
c001a869:	68 30 74 03 c0       	push   0xc0037430
c001a86e:	e8 dd 5e fe ff       	call   c0000750 <strcmp>
c001a873:	83 c4 10             	add    esp,0x10
c001a876:	85 c0                	test   eax,eax
c001a878:	0f 94 c0             	sete   al
c001a87b:	0f b6 c0             	movzx  eax,al
c001a87e:	85 c0                	test   eax,eax
c001a880:	74 0c                	je     c001a88e <HalDetectFeatures()+0x8b6>
c001a882:	c7 05 44 74 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xd
c001a88c:	eb 37                	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a88e:	83 ec 08             	sub    esp,0x8
c001a891:	68 96 d4 02 c0       	push   0xc002d496
c001a896:	68 30 74 03 c0       	push   0xc0037430
c001a89b:	e8 b0 5e fe ff       	call   c0000750 <strcmp>
c001a8a0:	83 c4 10             	add    esp,0x10
c001a8a3:	85 c0                	test   eax,eax
c001a8a5:	0f 94 c0             	sete   al
c001a8a8:	0f b6 c0             	movzx  eax,al
c001a8ab:	85 c0                	test   eax,eax
c001a8ad:	74 0c                	je     c001a8bb <HalDetectFeatures()+0x8e3>
c001a8af:	c7 05 44 74 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0037444,0xd
c001a8b9:	eb 0a                	jmp    c001a8c5 <HalDetectFeatures()+0x8ed>
c001a8bb:	c7 05 44 74 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x0
c001a8c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8c9:	83 f8 06             	cmp    eax,0x6
c001a8cc:	0f 86 cc 00 00 00    	jbe    c001a99e <HalDetectFeatures()+0x9c6>
c001a8d2:	83 ec 0c             	sub    esp,0xc
c001a8d5:	68 80 00 00 00       	push   0x80
c001a8da:	e8 9d f6 ff ff       	call   c0019f7c <cpuidCheckExtendedEBX(unsigned int)>
c001a8df:	83 c4 10             	add    esp,0x10
c001a8e2:	89 c1                	mov    ecx,eax
c001a8e4:	83 e1 01             	and    ecx,0x1
c001a8e7:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a8ec:	83 e0 fe             	and    eax,0xfffffffe
c001a8ef:	88 c2                	mov    dl,al
c001a8f1:	88 c8                	mov    al,cl
c001a8f3:	09 d0                	or     eax,edx
c001a8f5:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a8fa:	83 ec 0c             	sub    esp,0xc
c001a8fd:	68 00 00 10 00       	push   0x100000
c001a902:	e8 75 f6 ff ff       	call   c0019f7c <cpuidCheckExtendedEBX(unsigned int)>
c001a907:	83 c4 10             	add    esp,0x10
c001a90a:	83 e0 01             	and    eax,0x1
c001a90d:	89 c1                	mov    ecx,eax
c001a90f:	c1 e1 06             	shl    ecx,0x6
c001a912:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a917:	83 e0 bf             	and    eax,0xffffffbf
c001a91a:	88 c2                	mov    dl,al
c001a91c:	88 c8                	mov    al,cl
c001a91e:	09 d0                	or     eax,edx
c001a920:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a925:	83 ec 0c             	sub    esp,0xc
c001a928:	68 00 00 04 00       	push   0x40000
c001a92d:	e8 4a f6 ff ff       	call   c0019f7c <cpuidCheckExtendedEBX(unsigned int)>
c001a932:	83 c4 10             	add    esp,0x10
c001a935:	83 e0 01             	and    eax,0x1
c001a938:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001a93b:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a940:	83 e0 fd             	and    eax,0xfffffffd
c001a943:	88 c2                	mov    dl,al
c001a945:	88 c8                	mov    al,cl
c001a947:	09 d0                	or     eax,edx
c001a949:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a94e:	83 ec 0c             	sub    esp,0xc
c001a951:	6a 04                	push   0x4
c001a953:	e8 52 f6 ff ff       	call   c0019faa <cpuidCheckExtendedECX(unsigned int)>
c001a958:	83 c4 10             	add    esp,0x10
c001a95b:	83 e0 01             	and    eax,0x1
c001a95e:	89 c1                	mov    ecx,eax
c001a960:	c1 e1 05             	shl    ecx,0x5
c001a963:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001a968:	83 e0 df             	and    eax,0xffffffdf
c001a96b:	88 c2                	mov    dl,al
c001a96d:	88 c8                	mov    al,cl
c001a96f:	09 d0                	or     eax,edx
c001a971:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001a976:	83 ec 0c             	sub    esp,0xc
c001a979:	6a 20                	push   0x20
c001a97b:	e8 2a f6 ff ff       	call   c0019faa <cpuidCheckExtendedECX(unsigned int)>
c001a980:	83 c4 10             	add    esp,0x10
c001a983:	83 e0 01             	and    eax,0x1
c001a986:	89 c1                	mov    ecx,eax
c001a988:	c1 e1 04             	shl    ecx,0x4
c001a98b:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001a990:	83 e0 ef             	and    eax,0xffffffef
c001a993:	88 c2                	mov    dl,al
c001a995:	88 c8                	mov    al,cl
c001a997:	09 d0                	or     eax,edx
c001a999:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001a99e:	83 ec 0c             	sub    esp,0xc
c001a9a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a9a5:	50                   	push   eax
c001a9a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9aa:	50                   	push   eax
c001a9ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a9af:	50                   	push   eax
c001a9b0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a9b4:	50                   	push   eax
c001a9b5:	6a 01                	push   0x1
c001a9b7:	e8 c7 f4 ff ff       	call   c0019e83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a9bc:	83 c4 20             	add    esp,0x20
c001a9bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9c3:	83 e0 0f             	and    eax,0xf
c001a9c6:	a2 40 74 03 c0       	mov    ds:0xc0037440,al
c001a9cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9cf:	c1 e8 04             	shr    eax,0x4
c001a9d2:	83 e0 0f             	and    eax,0xf
c001a9d5:	a2 3e 74 03 c0       	mov    ds:0xc003743e,al
c001a9da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9de:	c1 e8 08             	shr    eax,0x8
c001a9e1:	83 e0 0f             	and    eax,0xf
c001a9e4:	a2 3d 74 03 c0       	mov    ds:0xc003743d,al
c001a9e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9ed:	c1 e8 0c             	shr    eax,0xc
c001a9f0:	83 e0 03             	and    eax,0x3
c001a9f3:	a2 3f 74 03 c0       	mov    ds:0xc003743f,al
c001a9f8:	a0 3d 74 03 c0       	mov    al,ds:0xc003743d
c001a9fd:	0f b6 c0             	movzx  eax,al
c001aa00:	83 f8 06             	cmp    eax,0x6
c001aa03:	74 0d                	je     c001aa12 <HalDetectFeatures()+0xa3a>
c001aa05:	a0 3d 74 03 c0       	mov    al,ds:0xc003743d
c001aa0a:	0f b6 c0             	movzx  eax,al
c001aa0d:	83 f8 0f             	cmp    eax,0xf
c001aa10:	75 18                	jne    c001aa2a <HalDetectFeatures()+0xa52>
c001aa12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa16:	c1 e8 10             	shr    eax,0x10
c001aa19:	c1 e0 04             	shl    eax,0x4
c001aa1c:	88 c2                	mov    dl,al
c001aa1e:	a0 3e 74 03 c0       	mov    al,ds:0xc003743e
c001aa23:	09 d0                	or     eax,edx
c001aa25:	a2 3e 74 03 c0       	mov    ds:0xc003743e,al
c001aa2a:	a0 3d 74 03 c0       	mov    al,ds:0xc003743d
c001aa2f:	0f b6 c0             	movzx  eax,al
c001aa32:	83 f8 0f             	cmp    eax,0xf
c001aa35:	75 15                	jne    c001aa4c <HalDetectFeatures()+0xa74>
c001aa37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa3b:	c1 e8 14             	shr    eax,0x14
c001aa3e:	88 c2                	mov    dl,al
c001aa40:	a0 3d 74 03 c0       	mov    al,ds:0xc003743d
c001aa45:	01 d0                	add    eax,edx
c001aa47:	a2 3d 74 03 c0       	mov    ds:0xc003743d,al
c001aa4c:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c001aa54:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c001aa5c:	85 c0                	test   eax,eax
c001aa5e:	74 2d                	je     c001aa8d <HalDetectFeatures()+0xab5>
c001aa60:	83 ec 0c             	sub    esp,0xc
c001aa63:	68 00 00 00 40       	push   0x40000000
c001aa68:	e8 e1 f4 ff ff       	call   c0019f4e <cpuidCheckECX(unsigned int)>
c001aa6d:	83 c4 10             	add    esp,0x10
c001aa70:	83 e0 01             	and    eax,0x1
c001aa73:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001aa7a:	a0 4e 74 03 c0       	mov    al,ds:0xc003744e
c001aa7f:	83 e0 fb             	and    eax,0xfffffffb
c001aa82:	88 c2                	mov    dl,al
c001aa84:	88 c8                	mov    al,cl
c001aa86:	09 d0                	or     eax,edx
c001aa88:	a2 4e 74 03 c0       	mov    ds:0xc003744e,al
c001aa8d:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001aa92:	83 c8 04             	or     eax,0x4
c001aa95:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001aa9a:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001aa9f:	83 c8 08             	or     eax,0x8
c001aaa2:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001aaa7:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001aaac:	83 c8 10             	or     eax,0x10
c001aaaf:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001aab4:	83 ec 0c             	sub    esp,0xc
c001aab7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aabb:	50                   	push   eax
c001aabc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aac0:	50                   	push   eax
c001aac1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aac5:	50                   	push   eax
c001aac6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001aaca:	50                   	push   eax
c001aacb:	68 00 00 00 80       	push   0x80000000
c001aad0:	e8 ae f3 ff ff       	call   c0019e83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001aad5:	83 c4 20             	add    esp,0x20
c001aad8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aadc:	3d 00 00 00 80       	cmp    eax,0x80000000
c001aae1:	0f 86 96 01 00 00    	jbe    c001ac7d <HalDetectFeatures()+0xca5>
c001aae7:	83 ec 0c             	sub    esp,0xc
c001aaea:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aaee:	50                   	push   eax
c001aaef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aaf3:	50                   	push   eax
c001aaf4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aaf8:	50                   	push   eax
c001aaf9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001aafd:	50                   	push   eax
c001aafe:	68 01 00 00 80       	push   0x80000001
c001ab03:	e8 7b f3 ff ff       	call   c0019e83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ab08:	83 c4 20             	add    esp,0x20
c001ab0b:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001ab10:	83 e0 7f             	and    eax,0x7f
c001ab13:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001ab18:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001ab1d:	83 e0 fb             	and    eax,0xfffffffb
c001ab20:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001ab25:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001ab2a:	83 e0 fd             	and    eax,0xfffffffd
c001ab2d:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001ab32:	e9 46 01 00 00       	jmp    c001ac7d <HalDetectFeatures()+0xca5>
c001ab37:	83 ec 08             	sub    esp,0x8
c001ab3a:	68 07 d4 02 c0       	push   0xc002d407
c001ab3f:	68 30 74 03 c0       	push   0xc0037430
c001ab44:	e8 f7 5a fe ff       	call   c0000640 <strcpy>
c001ab49:	83 c4 10             	add    esp,0x10
c001ab4c:	c7 05 44 74 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0037444,0x1
c001ab56:	e8 68 56 fe ff       	call   c00001c3 <is486>
c001ab5b:	85 c0                	test   eax,eax
c001ab5d:	0f 95 c0             	setne  al
c001ab60:	0f b6 c0             	movzx  eax,al
c001ab63:	85 c0                	test   eax,eax
c001ab65:	0f 84 8d 00 00 00    	je     c001abf8 <HalDetectFeatures()+0xc20>
c001ab6b:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001ab70:	83 c8 04             	or     eax,0x4
c001ab73:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001ab78:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001ab7d:	83 c8 08             	or     eax,0x8
c001ab80:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001ab85:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001ab8a:	83 c8 10             	or     eax,0x10
c001ab8d:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001ab92:	0f 20 c0             	mov    eax,cr0
c001ab95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ab99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ab9d:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001aba4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001abab:	83 e0 04             	and    eax,0x4
c001abae:	74 1e                	je     c001abce <HalDetectFeatures()+0xbf6>
c001abb0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001abb7:	83 e0 10             	and    eax,0x10
c001abba:	75 12                	jne    c001abce <HalDetectFeatures()+0xbf6>
c001abbc:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001abc1:	83 e0 f7             	and    eax,0xfffffff7
c001abc4:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001abc9:	e9 af 00 00 00       	jmp    c001ac7d <HalDetectFeatures()+0xca5>
c001abce:	e8 cb 55 fe ff       	call   c000019e <hasLegacyFPU>
c001abd3:	83 e0 01             	and    eax,0x1
c001abd6:	83 e0 01             	and    eax,0x1
c001abd9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001abe0:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001abe5:	83 e0 f7             	and    eax,0xfffffff7
c001abe8:	88 c2                	mov    dl,al
c001abea:	88 c8                	mov    al,cl
c001abec:	09 d0                	or     eax,edx
c001abee:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001abf3:	e9 85 00 00 00       	jmp    c001ac7d <HalDetectFeatures()+0xca5>
c001abf8:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001abfd:	83 e0 fb             	and    eax,0xfffffffb
c001ac00:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001ac05:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001ac0a:	83 e0 f7             	and    eax,0xfffffff7
c001ac0d:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001ac12:	a0 4f 74 03 c0       	mov    al,ds:0xc003744f
c001ac17:	83 e0 ef             	and    eax,0xffffffef
c001ac1a:	a2 4f 74 03 c0       	mov    ds:0xc003744f,al
c001ac1f:	0f 20 c0             	mov    eax,cr0
c001ac22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ac26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ac2a:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c001ac31:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac38:	83 e0 04             	and    eax,0x4
c001ac3b:	74 1b                	je     c001ac58 <HalDetectFeatures()+0xc80>
c001ac3d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac44:	83 e0 10             	and    eax,0x10
c001ac47:	75 0f                	jne    c001ac58 <HalDetectFeatures()+0xc80>
c001ac49:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001ac4e:	83 e0 f7             	and    eax,0xfffffff7
c001ac51:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001ac56:	eb 25                	jmp    c001ac7d <HalDetectFeatures()+0xca5>
c001ac58:	e8 41 55 fe ff       	call   c000019e <hasLegacyFPU>
c001ac5d:	83 e0 01             	and    eax,0x1
c001ac60:	83 e0 01             	and    eax,0x1
c001ac63:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001ac6a:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001ac6f:	83 e0 f7             	and    eax,0xfffffff7
c001ac72:	88 c2                	mov    dl,al
c001ac74:	88 c8                	mov    al,cl
c001ac76:	09 d0                	or     eax,edx
c001ac78:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001ac7d:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001ac82:	83 e0 08             	and    eax,0x8
c001ac85:	0f b6 c0             	movzx  eax,al
c001ac88:	85 c0                	test   eax,eax
c001ac8a:	75 25                	jne    c001acb1 <HalDetectFeatures()+0xcd9>
c001ac8c:	e8 0d 55 fe ff       	call   c000019e <hasLegacyFPU>
c001ac91:	83 e0 01             	and    eax,0x1
c001ac94:	83 e0 01             	and    eax,0x1
c001ac97:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001ac9e:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001aca3:	83 e0 f7             	and    eax,0xfffffff7
c001aca6:	88 c2                	mov    dl,al
c001aca8:	88 c8                	mov    al,cl
c001acaa:	09 d0                	or     eax,edx
c001acac:	a2 50 74 03 c0       	mov    ds:0xc0037450,al
c001acb1:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001acb6:	83 e0 08             	and    eax,0x8
c001acb9:	0f b6 c0             	movzx  eax,al
c001acbc:	85 c0                	test   eax,eax
c001acbe:	74 0d                	je     c001accd <HalDetectFeatures()+0xcf5>
c001acc0:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001acc5:	83 c8 10             	or     eax,0x10
c001acc8:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001accd:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001acd2:	83 e0 10             	and    eax,0x10
c001acd5:	0f b6 c0             	movzx  eax,al
c001acd8:	85 c0                	test   eax,eax
c001acda:	75 23                	jne    c001acff <HalDetectFeatures()+0xd27>
c001acdc:	e8 35 9b 00 00       	call   c0024816 <x87Detect>
c001ace1:	83 e0 01             	and    eax,0x1
c001ace4:	83 e0 01             	and    eax,0x1
c001ace7:	89 c1                	mov    ecx,eax
c001ace9:	c1 e1 04             	shl    ecx,0x4
c001acec:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001acf1:	83 e0 ef             	and    eax,0xffffffef
c001acf4:	88 c2                	mov    dl,al
c001acf6:	88 c8                	mov    al,cl
c001acf8:	09 d0                	or     eax,edx
c001acfa:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001acff:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001ad04:	83 e0 01             	and    eax,0x1
c001ad07:	0f b6 c0             	movzx  eax,al
c001ad0a:	85 c0                	test   eax,eax
c001ad0c:	75 2d                	jne    c001ad3b <HalDetectFeatures()+0xd63>
c001ad0e:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001ad13:	83 e0 02             	and    eax,0x2
c001ad16:	0f b6 c0             	movzx  eax,al
c001ad19:	85 c0                	test   eax,eax
c001ad1b:	75 1e                	jne    c001ad3b <HalDetectFeatures()+0xd63>
c001ad1d:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001ad22:	83 e0 04             	and    eax,0x4
c001ad25:	0f b6 c0             	movzx  eax,al
c001ad28:	85 c0                	test   eax,eax
c001ad2a:	75 0f                	jne    c001ad3b <HalDetectFeatures()+0xd63>
c001ad2c:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001ad31:	83 e0 08             	and    eax,0x8
c001ad34:	0f b6 c0             	movzx  eax,al
c001ad37:	85 c0                	test   eax,eax
c001ad39:	74 0d                	je     c001ad48 <HalDetectFeatures()+0xd70>
c001ad3b:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ad40:	83 c8 80             	or     eax,0xffffff80
c001ad43:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001ad48:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ad4d:	83 e0 10             	and    eax,0x10
c001ad50:	0f b6 c0             	movzx  eax,al
c001ad53:	85 c0                	test   eax,eax
c001ad55:	74 2f                	je     c001ad86 <HalDetectFeatures()+0xdae>
c001ad57:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ad5c:	83 e0 80             	and    eax,0xffffff80
c001ad5f:	0f b6 c0             	movzx  eax,al
c001ad62:	85 c0                	test   eax,eax
c001ad64:	75 20                	jne    c001ad86 <HalDetectFeatures()+0xdae>
c001ad66:	e8 65 9a 00 00       	call   c00247d0 <sseDetect>
c001ad6b:	83 e0 01             	and    eax,0x1
c001ad6e:	89 c1                	mov    ecx,eax
c001ad70:	c1 e1 07             	shl    ecx,0x7
c001ad73:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ad78:	83 e0 7f             	and    eax,0x7f
c001ad7b:	88 c2                	mov    dl,al
c001ad7d:	88 c8                	mov    al,cl
c001ad7f:	09 d0                	or     eax,edx
c001ad81:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001ad86:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ad8b:	83 e0 80             	and    eax,0xffffff80
c001ad8e:	0f b6 c0             	movzx  eax,al
c001ad91:	85 c0                	test   eax,eax
c001ad93:	74 1c                	je     c001adb1 <HalDetectFeatures()+0xdd9>
c001ad95:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001ad9a:	83 e0 20             	and    eax,0x20
c001ad9d:	0f b6 c0             	movzx  eax,al
c001ada0:	85 c0                	test   eax,eax
c001ada2:	75 0d                	jne    c001adb1 <HalDetectFeatures()+0xdd9>
c001ada4:	a0 4d 74 03 c0       	mov    al,ds:0xc003744d
c001ada9:	83 e0 df             	and    eax,0xffffffdf
c001adac:	a2 4d 74 03 c0       	mov    ds:0xc003744d,al
c001adb1:	c6 05 48 74 03 c0 00 	mov    BYTE PTR ds:0xc0037448,0x0
c001adb8:	90                   	nop
c001adb9:	81 c4 90 00 00 00    	add    esp,0x90
c001adbf:	5b                   	pop    ebx
c001adc0:	5e                   	pop    esi
c001adc1:	5f                   	pop    edi
c001adc2:	c3                   	ret    

c001adc3 <HalEnableNMI()>:
c001adc3:	c6 05 2c 74 03 c0 01 	mov    BYTE PTR ds:0xc003742c,0x1
c001adca:	6a 10                	push   0x10
c001adcc:	e8 02 ef ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001add1:	83 c4 04             	add    esp,0x4
c001add4:	90                   	nop
c001add5:	c3                   	ret    

c001add6 <HalDisableNMI()>:
c001add6:	c6 05 2c 74 03 c0 00 	mov    BYTE PTR ds:0xc003742c,0x0
c001addd:	6a 10                	push   0x10
c001addf:	e8 ef ee ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001ade4:	83 c4 04             	add    esp,0x4
c001ade7:	90                   	nop
c001ade8:	c3                   	ret    

c001ade9 <HalGetNMIState()>:
c001ade9:	a0 2c 74 03 c0       	mov    al,ds:0xc003742c
c001adee:	c3                   	ret    

c001adef <HalIsAPICEnabled()>:
c001adef:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001adf4:	83 e0 01             	and    eax,0x1
c001adf7:	0f b6 c0             	movzx  eax,al
c001adfa:	85 c0                	test   eax,eax
c001adfc:	0f 95 c0             	setne  al
c001adff:	c3                   	ret    

c001ae00 <x86rdmsr(unsigned int)>:
c001ae00:	83 ec 1c             	sub    esp,0x1c
c001ae03:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ae08:	83 e0 08             	and    eax,0x8
c001ae0b:	0f b6 c0             	movzx  eax,al
c001ae0e:	85 c0                	test   eax,eax
c001ae10:	75 10                	jne    c001ae22 <x86rdmsr(unsigned int)+0x22>
c001ae12:	83 ec 0c             	sub    esp,0xc
c001ae15:	68 a2 d4 02 c0       	push   0xc002d4a2
c001ae1a:	e8 45 5c ff ff       	call   c0010a64 <KePanic(char const*)>
c001ae1f:	83 c4 10             	add    esp,0x10
c001ae22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae26:	89 c1                	mov    ecx,eax
c001ae28:	0f 32                	rdmsr  
c001ae2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ae2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae3a:	83 c4 1c             	add    esp,0x1c
c001ae3d:	c3                   	ret    

c001ae3e <x86wrmsr(unsigned int, unsigned long long)>:
c001ae3e:	83 ec 1c             	sub    esp,0x1c
c001ae41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ae49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae51:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001ae56:	83 e0 08             	and    eax,0x8
c001ae59:	0f b6 c0             	movzx  eax,al
c001ae5c:	85 c0                	test   eax,eax
c001ae5e:	75 10                	jne    c001ae70 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001ae60:	83 ec 0c             	sub    esp,0xc
c001ae63:	68 a8 d4 02 c0       	push   0xc002d4a8
c001ae68:	e8 f7 5b ff ff       	call   c0010a64 <KePanic(char const*)>
c001ae6d:	83 c4 10             	add    esp,0x10
c001ae70:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001ae74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae7c:	0f 30                	wrmsr  
c001ae7e:	90                   	nop
c001ae7f:	83 c4 1c             	add    esp,0x1c
c001ae82:	c3                   	ret    

c001ae83 <HalHandleGeneralProtectionFault(void*, void*)>:
c001ae83:	83 ec 0c             	sub    esp,0xc
c001ae86:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001ae8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae8d:	8a 40 62             	mov    al,BYTE PTR [eax+0x62]
c001ae90:	0f b6 c0             	movzx  eax,al
c001ae93:	85 c0                	test   eax,eax
c001ae95:	74 11                	je     c001aea8 <HalHandleGeneralProtectionFault(void*, void*)+0x25>
c001ae97:	83 ec 0c             	sub    esp,0xc
c001ae9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae9e:	e8 78 db ff ff       	call   c0018a1b <Vm::faultHandler(regs*)>
c001aea3:	83 c4 10             	add    esp,0x10
c001aea6:	eb 02                	jmp    c001aeaa <HalHandleGeneralProtectionFault(void*, void*)+0x27>
c001aea8:	b0 00                	mov    al,0x0
c001aeaa:	83 c4 0c             	add    esp,0xc
c001aead:	c3                   	ret    

c001aeae <HalFindRSDP()>:
c001aeae:	83 ec 1c             	sub    esp,0x1c
c001aeb1:	a1 7c 71 03 c0       	mov    eax,ds:0xc003717c
c001aeb6:	3d ff 07 00 00       	cmp    eax,0x7ff
c001aebb:	7e 17                	jle    c001aed4 <HalFindRSDP()+0x26>
c001aebd:	83 ec 0c             	sub    esp,0xc
c001aec0:	68 00 04 00 00       	push   0x400
c001aec5:	e8 56 31 ff ff       	call   c000e020 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001aeca:	83 c4 10             	add    esp,0x10
c001aecd:	0f b6 c0             	movzx  eax,al
c001aed0:	85 c0                	test   eax,eax
c001aed2:	74 04                	je     c001aed8 <HalFindRSDP()+0x2a>
c001aed4:	b0 01                	mov    al,0x1
c001aed6:	eb 02                	jmp    c001aeda <HalFindRSDP()+0x2c>
c001aed8:	b0 00                	mov    al,0x0
c001aeda:	0f b6 c0             	movzx  eax,al
c001aedd:	85 c0                	test   eax,eax
c001aedf:	74 1d                	je     c001aefe <HalFindRSDP()+0x50>
c001aee1:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001aee6:	83 e0 fb             	and    eax,0xfffffffb
c001aee9:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001aeee:	83 ec 0c             	sub    esp,0xc
c001aef1:	68 ae d4 02 c0       	push   0xc002d4ae
c001aef6:	e8 81 c0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aefb:	83 c4 10             	add    esp,0x10
c001aefe:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001af03:	83 e0 04             	and    eax,0x4
c001af06:	0f b6 c0             	movzx  eax,al
c001af09:	85 c0                	test   eax,eax
c001af0b:	75 17                	jne    c001af24 <HalFindRSDP()+0x76>
c001af0d:	83 ec 0c             	sub    esp,0xc
c001af10:	68 bd d4 02 c0       	push   0xc002d4bd
c001af15:	e8 62 c0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001af1a:	83 c4 10             	add    esp,0x10
c001af1d:	b8 00 00 00 00       	mov    eax,0x0
c001af22:	eb 63                	jmp    c001af87 <HalFindRSDP()+0xd9>
c001af24:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001af2c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001af34:	77 2f                	ja     c001af65 <HalFindRSDP()+0xb7>
c001af36:	83 ec 04             	sub    esp,0x4
c001af39:	6a 08                	push   0x8
c001af3b:	68 c7 d4 02 c0       	push   0xc002d4c7
c001af40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af44:	e8 37 54 fe ff       	call   c0000380 <memcmp>
c001af49:	83 c4 10             	add    esp,0x10
c001af4c:	85 c0                	test   eax,eax
c001af4e:	0f 94 c0             	sete   al
c001af51:	0f b6 c0             	movzx  eax,al
c001af54:	85 c0                	test   eax,eax
c001af56:	74 06                	je     c001af5e <HalFindRSDP()+0xb0>
c001af58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af5c:	eb 29                	jmp    c001af87 <HalFindRSDP()+0xd9>
c001af5e:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001af63:	eb c7                	jmp    c001af2c <HalFindRSDP()+0x7e>
c001af65:	83 ec 0c             	sub    esp,0xc
c001af68:	68 d0 d4 02 c0       	push   0xc002d4d0
c001af6d:	e8 0a c0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001af72:	83 c4 10             	add    esp,0x10
c001af75:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001af7a:	83 e0 fb             	and    eax,0xfffffffb
c001af7d:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001af82:	b8 00 00 00 00       	mov    eax,0x0
c001af87:	83 c4 1c             	add    esp,0x1c
c001af8a:	c3                   	ret    

c001af8b <HalHandlePageFault(void*, void*)>:
c001af8b:	83 ec 1c             	sub    esp,0x1c
c001af8e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001af93:	8b 00                	mov    eax,DWORD PTR [eax]
c001af95:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af98:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001af9e:	0f 20 d2             	mov    edx,cr2
c001afa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001afa5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001afa9:	83 ec 08             	sub    esp,0x8
c001afac:	52                   	push   edx
c001afad:	50                   	push   eax
c001afae:	e8 15 9e ff ff       	call   c0014dc8 <VAS::tryLoadBackOffDisk(unsigned long)>
c001afb3:	83 c4 10             	add    esp,0x10
c001afb6:	83 c4 1c             	add    esp,0x1c
c001afb9:	c3                   	ret    

c001afba <HalHandleOpcodeFault(void*, void*)>:
c001afba:	83 ec 1c             	sub    esp,0x1c
c001afbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afc5:	a0 48 74 03 c0       	mov    al,ds:0xc0037448
c001afca:	0f b6 c0             	movzx  eax,al
c001afcd:	85 c0                	test   eax,eax
c001afcf:	74 25                	je     c001aff6 <HalHandleOpcodeFault(void*, void*)+0x3c>
c001afd1:	83 ec 0c             	sub    esp,0xc
c001afd4:	68 dc d6 02 c0       	push   0xc002d6dc
c001afd9:	e8 9e bf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001afde:	83 c4 10             	add    esp,0x10
c001afe1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afe5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001afe8:	8d 50 19             	lea    edx,[eax+0x19]
c001afeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001aff2:	b0 01                	mov    al,0x1
c001aff4:	eb 02                	jmp    c001aff8 <HalHandleOpcodeFault(void*, void*)+0x3e>
c001aff6:	b0 00                	mov    al,0x0
c001aff8:	83 c4 1c             	add    esp,0x1c
c001affb:	c3                   	ret    

c001affc <HalDisplayDebugInfo(void*)>:
c001affc:	83 ec 2c             	sub    esp,0x2c
c001afff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b003:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b007:	0f 20 c0             	mov    eax,cr0
c001b00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b00e:	0f 20 d0             	mov    eax,cr2
c001b011:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b015:	0f 20 d8             	mov    eax,cr3
c001b018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b01c:	0f 20 e0             	mov    eax,cr4
c001b01f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b027:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b02a:	83 ec 08             	sub    esp,0x8
c001b02d:	50                   	push   eax
c001b02e:	68 ea d4 02 c0       	push   0xc002d4ea
c001b033:	e8 44 bf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b038:	83 c4 10             	add    esp,0x10
c001b03b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b03f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001b042:	83 ec 08             	sub    esp,0x8
c001b045:	50                   	push   eax
c001b046:	68 db d4 02 c0       	push   0xc002d4db
c001b04b:	e8 2c bf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b050:	83 c4 10             	add    esp,0x10
c001b053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b057:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001b05a:	83 ec 08             	sub    esp,0x8
c001b05d:	50                   	push   eax
c001b05e:	68 e6 d4 02 c0       	push   0xc002d4e6
c001b063:	e8 14 bf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b068:	83 c4 10             	add    esp,0x10
c001b06b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b06f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b072:	83 ec 08             	sub    esp,0x8
c001b075:	50                   	push   eax
c001b076:	68 f5 d4 02 c0       	push   0xc002d4f5
c001b07b:	e8 fc be fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b080:	83 c4 10             	add    esp,0x10
c001b083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b087:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001b08a:	83 ec 08             	sub    esp,0x8
c001b08d:	50                   	push   eax
c001b08e:	68 00 d5 02 c0       	push   0xc002d500
c001b093:	e8 e4 be fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b098:	83 c4 10             	add    esp,0x10
c001b09b:	83 ec 08             	sub    esp,0x8
c001b09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a2:	68 0b d5 02 c0       	push   0xc002d50b
c001b0a7:	e8 d0 be fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b0ac:	83 c4 10             	add    esp,0x10
c001b0af:	83 ec 08             	sub    esp,0x8
c001b0b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0b6:	68 16 d5 02 c0       	push   0xc002d516
c001b0bb:	e8 bc be fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b0c0:	83 c4 10             	add    esp,0x10
c001b0c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0c7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001b0ca:	c1 e0 05             	shl    eax,0x5
c001b0cd:	8d 90 40 0c 03 c0    	lea    edx,[eax-0x3ffcf3c0]
c001b0d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0d7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001b0da:	83 ec 04             	sub    esp,0x4
c001b0dd:	52                   	push   edx
c001b0de:	50                   	push   eax
c001b0df:	68 21 d5 02 c0       	push   0xc002d521
c001b0e4:	e8 93 be fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b0e9:	83 c4 10             	add    esp,0x10
c001b0ec:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b0f1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b0f7:	83 ec 0c             	sub    esp,0xc
c001b0fa:	50                   	push   eax
c001b0fb:	e8 83 7f ff ff       	call   c0013083 <setActiveTerminal(VgaText*)>
c001b100:	83 c4 10             	add    esp,0x10
c001b103:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b108:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b10e:	83 ec 08             	sub    esp,0x8
c001b111:	68 30 d5 02 c0       	push   0xc002d530
c001b116:	50                   	push   eax
c001b117:	e8 b4 82 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b11c:	83 c4 10             	add    esp,0x10
c001b11f:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b124:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b12a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b12e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001b131:	83 ec 08             	sub    esp,0x8
c001b134:	52                   	push   edx
c001b135:	50                   	push   eax
c001b136:	e8 4f 82 ff ff       	call   c001338a <VgaText::putx(unsigned int)>
c001b13b:	83 c4 10             	add    esp,0x10
c001b13e:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b143:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b149:	83 ec 08             	sub    esp,0x8
c001b14c:	68 3e d5 02 c0       	push   0xc002d53e
c001b151:	50                   	push   eax
c001b152:	e8 79 82 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b157:	83 c4 10             	add    esp,0x10
c001b15a:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b15f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b165:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001b16a:	8b 12                	mov    edx,DWORD PTR [edx]
c001b16c:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b16f:	83 c2 0c             	add    edx,0xc
c001b172:	83 ec 08             	sub    esp,0x8
c001b175:	52                   	push   edx
c001b176:	50                   	push   eax
c001b177:	e8 54 82 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b17c:	83 c4 10             	add    esp,0x10
c001b17f:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b184:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b18a:	83 ec 08             	sub    esp,0x8
c001b18d:	68 47 d5 02 c0       	push   0xc002d547
c001b192:	50                   	push   eax
c001b193:	e8 38 82 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b198:	83 c4 10             	add    esp,0x10
c001b19b:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b1a0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b1a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b1aa:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001b1ad:	83 ec 08             	sub    esp,0x8
c001b1b0:	52                   	push   edx
c001b1b1:	50                   	push   eax
c001b1b2:	e8 d3 81 ff ff       	call   c001338a <VgaText::putx(unsigned int)>
c001b1b7:	83 c4 10             	add    esp,0x10
c001b1ba:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b1bf:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b1c5:	83 ec 08             	sub    esp,0x8
c001b1c8:	68 4f d5 02 c0       	push   0xc002d54f
c001b1cd:	50                   	push   eax
c001b1ce:	e8 fd 81 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b1d3:	83 c4 10             	add    esp,0x10
c001b1d6:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b1db:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b1e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b1e5:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001b1e8:	83 ec 08             	sub    esp,0x8
c001b1eb:	52                   	push   edx
c001b1ec:	50                   	push   eax
c001b1ed:	e8 98 81 ff ff       	call   c001338a <VgaText::putx(unsigned int)>
c001b1f2:	83 c4 10             	add    esp,0x10
c001b1f5:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b1fa:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b200:	83 ec 08             	sub    esp,0x8
c001b203:	68 57 d5 02 c0       	push   0xc002d557
c001b208:	50                   	push   eax
c001b209:	e8 c2 81 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b20e:	83 c4 10             	add    esp,0x10
c001b211:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b216:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b21c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b220:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001b223:	83 ec 08             	sub    esp,0x8
c001b226:	52                   	push   edx
c001b227:	50                   	push   eax
c001b228:	e8 5d 81 ff ff       	call   c001338a <VgaText::putx(unsigned int)>
c001b22d:	83 c4 10             	add    esp,0x10
c001b230:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b235:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b23b:	83 ec 08             	sub    esp,0x8
c001b23e:	68 5f d5 02 c0       	push   0xc002d55f
c001b243:	50                   	push   eax
c001b244:	e8 87 81 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b249:	83 c4 10             	add    esp,0x10
c001b24c:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b251:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b257:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b25b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001b25e:	83 ec 08             	sub    esp,0x8
c001b261:	52                   	push   edx
c001b262:	50                   	push   eax
c001b263:	e8 22 81 ff ff       	call   c001338a <VgaText::putx(unsigned int)>
c001b268:	83 c4 10             	add    esp,0x10
c001b26b:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b270:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b276:	83 ec 08             	sub    esp,0x8
c001b279:	68 67 d5 02 c0       	push   0xc002d567
c001b27e:	50                   	push   eax
c001b27f:	e8 4c 81 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b284:	83 c4 10             	add    esp,0x10
c001b287:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b28c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b292:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b296:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001b299:	83 ec 08             	sub    esp,0x8
c001b29c:	52                   	push   edx
c001b29d:	50                   	push   eax
c001b29e:	e8 e7 80 ff ff       	call   c001338a <VgaText::putx(unsigned int)>
c001b2a3:	83 c4 10             	add    esp,0x10
c001b2a6:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b2ab:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b2b1:	83 ec 08             	sub    esp,0x8
c001b2b4:	68 6f d5 02 c0       	push   0xc002d56f
c001b2b9:	50                   	push   eax
c001b2ba:	e8 11 81 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b2bf:	83 c4 10             	add    esp,0x10
c001b2c2:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b2c7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b2cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b2d1:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b2d4:	83 ec 08             	sub    esp,0x8
c001b2d7:	52                   	push   edx
c001b2d8:	50                   	push   eax
c001b2d9:	e8 ac 80 ff ff       	call   c001338a <VgaText::putx(unsigned int)>
c001b2de:	83 c4 10             	add    esp,0x10
c001b2e1:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b2e6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b2ec:	83 ec 08             	sub    esp,0x8
c001b2ef:	68 77 d5 02 c0       	push   0xc002d577
c001b2f4:	50                   	push   eax
c001b2f5:	e8 d6 80 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b2fa:	83 c4 10             	add    esp,0x10
c001b2fd:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b302:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b308:	83 ec 08             	sub    esp,0x8
c001b30b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b30f:	50                   	push   eax
c001b310:	e8 75 80 ff ff       	call   c001338a <VgaText::putx(unsigned int)>
c001b315:	83 c4 10             	add    esp,0x10
c001b318:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b31d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b323:	83 ec 08             	sub    esp,0x8
c001b326:	68 80 d5 02 c0       	push   0xc002d580
c001b32b:	50                   	push   eax
c001b32c:	e8 9f 80 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b331:	83 c4 10             	add    esp,0x10
c001b334:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b339:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b33f:	83 ec 08             	sub    esp,0x8
c001b342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b346:	50                   	push   eax
c001b347:	e8 3e 80 ff ff       	call   c001338a <VgaText::putx(unsigned int)>
c001b34c:	83 c4 10             	add    esp,0x10
c001b34f:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b354:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b35a:	83 ec 08             	sub    esp,0x8
c001b35d:	68 88 d5 02 c0       	push   0xc002d588
c001b362:	50                   	push   eax
c001b363:	e8 68 80 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b368:	83 c4 10             	add    esp,0x10
c001b36b:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001b370:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b376:	83 ec 08             	sub    esp,0x8
c001b379:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b37d:	50                   	push   eax
c001b37e:	e8 07 80 ff ff       	call   c001338a <VgaText::putx(unsigned int)>
c001b383:	83 c4 10             	add    esp,0x10
c001b386:	fa                   	cli    
c001b387:	f4                   	hlt    
c001b388:	eb fe                	jmp    c001b388 <HalDisplayDebugInfo(void*)+0x38c>

c001b38a <HalReceivedNMI()>:
c001b38a:	83 ec 1c             	sub    esp,0x1c
c001b38d:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001b394:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b398:	89 c2                	mov    edx,eax
c001b39a:	ec                   	in     al,dx
c001b39b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001b39f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001b3a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b3a7:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001b3ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3b2:	89 c2                	mov    edx,eax
c001b3b4:	ec                   	in     al,dx
c001b3b5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b3b9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001b3bd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001b3c1:	83 ec 0c             	sub    esp,0xc
c001b3c4:	68 90 d5 02 c0       	push   0xc002d590
c001b3c9:	e8 ae bb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b3ce:	83 c4 10             	add    esp,0x10
c001b3d1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b3d6:	83 e0 10             	and    eax,0x10
c001b3d9:	74 10                	je     c001b3eb <HalReceivedNMI()+0x61>
c001b3db:	83 ec 0c             	sub    esp,0xc
c001b3de:	68 a1 d5 02 c0       	push   0xc002d5a1
c001b3e3:	e8 7c 56 ff ff       	call   c0010a64 <KePanic(char const*)>
c001b3e8:	83 c4 10             	add    esp,0x10
c001b3eb:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001b3f0:	83 e0 40             	and    eax,0x40
c001b3f3:	74 10                	je     c001b405 <HalReceivedNMI()+0x7b>
c001b3f5:	83 ec 0c             	sub    esp,0xc
c001b3f8:	68 ae d5 02 c0       	push   0xc002d5ae
c001b3fd:	e8 62 56 ff ff       	call   c0010a64 <KePanic(char const*)>
c001b402:	83 c4 10             	add    esp,0x10
c001b405:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001b409:	0f be c0             	movsx  eax,al
c001b40c:	85 c0                	test   eax,eax
c001b40e:	79 10                	jns    c001b420 <HalReceivedNMI()+0x96>
c001b410:	83 ec 0c             	sub    esp,0xc
c001b413:	68 b8 d5 02 c0       	push   0xc002d5b8
c001b418:	e8 47 56 ff ff       	call   c0010a64 <KePanic(char const*)>
c001b41d:	83 c4 10             	add    esp,0x10
c001b420:	90                   	nop
c001b421:	83 c4 1c             	add    esp,0x1c
c001b424:	c3                   	ret    

c001b425 <HalSystemIdle()>:
c001b425:	56                   	push   esi
c001b426:	53                   	push   ebx
c001b427:	83 ec 14             	sub    esp,0x14
c001b42a:	a0 50 74 03 c0       	mov    al,ds:0xc0037450
c001b42f:	83 e0 10             	and    eax,0x10
c001b432:	0f b6 c0             	movzx  eax,al
c001b435:	85 c0                	test   eax,eax
c001b437:	74 43                	je     c001b47c <HalSystemIdle()+0x57>
c001b439:	83 ec 0c             	sub    esp,0xc
c001b43c:	68 e1 00 00 00       	push   0xe1
c001b441:	e8 ba f9 ff ff       	call   c001ae00 <x86rdmsr(unsigned int)>
c001b446:	83 c4 10             	add    esp,0x10
c001b449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b44d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b451:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b455:	83 e0 02             	and    eax,0x2
c001b458:	89 c3                	mov    ebx,eax
c001b45a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b45e:	83 e0 00             	and    eax,0x0
c001b461:	89 c6                	mov    esi,eax
c001b463:	83 ec 04             	sub    esp,0x4
c001b466:	56                   	push   esi
c001b467:	53                   	push   ebx
c001b468:	68 e1 00 00 00       	push   0xe1
c001b46d:	e8 cc f9 ff ff       	call   c001ae3e <x86wrmsr(unsigned int, unsigned long long)>
c001b472:	83 c4 10             	add    esp,0x10
c001b475:	e8 1a 4d fe ff       	call   c0000194 <doTPAUSE>
c001b47a:	eb 01                	jmp    c001b47d <HalSystemIdle()+0x58>
c001b47c:	f4                   	hlt    
c001b47d:	90                   	nop
c001b47e:	83 c4 14             	add    esp,0x14
c001b481:	5b                   	pop    ebx
c001b482:	5e                   	pop    esi
c001b483:	c3                   	ret    

c001b484 <i386SaveCoprocessor(void*)>:
c001b484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b488:	83 c0 3f             	add    eax,0x3f
c001b48b:	83 e0 c0             	and    eax,0xffffffc0
c001b48e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b492:	ff 25 10 74 03 c0    	jmp    DWORD PTR ds:0xc0037410

c001b498 <i386LoadCoprocessor(void*)>:
c001b498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b49c:	83 c0 3f             	add    eax,0x3f
c001b49f:	83 e0 c0             	and    eax,0xffffffc0
c001b4a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b4a6:	ff 25 0c 74 03 c0    	jmp    DWORD PTR ds:0xc003740c

c001b4ac <x87EmulHandler(regs*, void*)>:
c001b4ac:	53                   	push   ebx
c001b4ad:	83 ec 08             	sub    esp,0x8
c001b4b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4b5:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001b4b9:	74 10                	je     c001b4cb <x87EmulHandler(regs*, void*)+0x1f>
c001b4bb:	83 ec 0c             	sub    esp,0xc
c001b4be:	68 c5 d5 02 c0       	push   0xc002d5c5
c001b4c3:	e8 9c 55 ff ff       	call   c0010a64 <KePanic(char const*)>
c001b4c8:	83 c4 10             	add    esp,0x10
c001b4cb:	0f 20 c0             	mov    eax,cr0
c001b4ce:	a8 08                	test   al,0x8
c001b4d0:	74 59                	je     c001b52b <x87EmulHandler(regs*, void*)+0x7f>
c001b4d2:	0f 06                	clts   
c001b4d4:	a1 08 74 03 c0       	mov    eax,ds:0xc0037408
c001b4d9:	85 c0                	test   eax,eax
c001b4db:	74 0e                	je     c001b4eb <x87EmulHandler(regs*, void*)+0x3f>
c001b4dd:	83 ec 0c             	sub    esp,0xc
c001b4e0:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001b4e3:	e8 9c ff ff ff       	call   c001b484 <i386SaveCoprocessor(void*)>
c001b4e8:	83 c4 10             	add    esp,0x10
c001b4eb:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001b4f1:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001b4f5:	75 12                	jne    c001b509 <x87EmulHandler(regs*, void*)+0x5d>
c001b4f7:	83 ec 0c             	sub    esp,0xc
c001b4fa:	68 40 02 00 00       	push   0x240
c001b4ff:	e8 0b 51 ff ff       	call   c001060f <malloc>
c001b504:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001b507:	eb 10                	jmp    c001b519 <x87EmulHandler(regs*, void*)+0x6d>
c001b509:	83 ec 0c             	sub    esp,0xc
c001b50c:	a1 08 74 03 c0       	mov    eax,ds:0xc0037408
c001b511:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001b514:	e8 7f ff ff ff       	call   c001b498 <i386LoadCoprocessor(void*)>
c001b519:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b51e:	83 c4 10             	add    esp,0x10
c001b521:	a3 08 74 03 c0       	mov    ds:0xc0037408,eax
c001b526:	83 c4 08             	add    esp,0x8
c001b529:	5b                   	pop    ebx
c001b52a:	c3                   	ret    
c001b52b:	83 ec 0c             	sub    esp,0xc
c001b52e:	68 d9 d5 02 c0       	push   0xc002d5d9
c001b533:	e8 44 ba fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b538:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001b540:	83 c4 18             	add    esp,0x18
c001b543:	5b                   	pop    ebx
c001b544:	e9 b3 c8 ff ff       	jmp    c0017dfc <KeTerminateCurrentThread(int)>

c001b549 <HalInitialiseCoprocessor()>:
c001b549:	83 ec 10             	sub    esp,0x10
c001b54c:	c7 05 08 74 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037408,0x0
c001b556:	6a 00                	push   0x0
c001b558:	68 ac b4 01 c0       	push   0xc001b4ac
c001b55d:	6a 07                	push   0x7
c001b55f:	e8 fb 07 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b564:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001b569:	83 c4 10             	add    esp,0x10
c001b56c:	a8 80                	test   al,0x80
c001b56e:	74 29                	je     c001b599 <HalInitialiseCoprocessor()+0x50>
c001b570:	83 ec 0c             	sub    esp,0xc
c001b573:	68 ef d5 02 c0       	push   0xc002d5ef
c001b578:	e8 ff b9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b57d:	c7 05 10 74 03 c0 e8 47 02 c0 	mov    DWORD PTR ds:0xc0037410,0xc00247e8
c001b587:	c7 05 0c 74 03 c0 f0 47 02 c0 	mov    DWORD PTR ds:0xc003740c,0xc00247f0
c001b591:	83 c4 1c             	add    esp,0x1c
c001b594:	e9 5f 92 00 00       	jmp    c00247f8 <sseInit>
c001b599:	a8 10                	test   al,0x10
c001b59b:	74 29                	je     c001b5c6 <HalInitialiseCoprocessor()+0x7d>
c001b59d:	83 ec 0c             	sub    esp,0xc
c001b5a0:	68 fa d5 02 c0       	push   0xc002d5fa
c001b5a5:	e8 d2 b9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b5aa:	c7 05 10 74 03 c0 37 48 02 c0 	mov    DWORD PTR ds:0xc0037410,0xc0024837
c001b5b4:	c7 05 0c 74 03 c0 3e 48 02 c0 	mov    DWORD PTR ds:0xc003740c,0xc002483e
c001b5be:	83 c4 1c             	add    esp,0x1c
c001b5c1:	e9 7f 92 00 00       	jmp    c0024845 <x87Init>
c001b5c6:	c7 05 10 74 03 c0 c2 9c 01 c0 	mov    DWORD PTR ds:0xc0037410,0xc0019cc2
c001b5d0:	c7 05 0c 74 03 c0 c2 9c 01 c0 	mov    DWORD PTR ds:0xc003740c,0xc0019cc2
c001b5da:	0f 20 c0             	mov    eax,cr0
c001b5dd:	83 c8 04             	or     eax,0x4
c001b5e0:	0f 22 c0             	mov    cr0,eax
c001b5e3:	83 c4 0c             	add    esp,0xc
c001b5e6:	c3                   	ret    

c001b5e7 <HalPanic(char const*)>:
c001b5e7:	53                   	push   ebx
c001b5e8:	83 ec 10             	sub    esp,0x10
c001b5eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b5ef:	fa                   	cli    
c001b5f0:	53                   	push   ebx
c001b5f1:	68 05 d6 02 c0       	push   0xc002d605
c001b5f6:	e8 81 b9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b5fb:	a1 04 74 03 c0       	mov    eax,ds:0xc0037404
c001b600:	83 c4 10             	add    esp,0x10
c001b603:	85 c0                	test   eax,eax
c001b605:	74 09                	je     c001b610 <HalPanic(char const*)+0x29>
c001b607:	83 ec 0c             	sub    esp,0xc
c001b60a:	53                   	push   ebx
c001b60b:	ff d0                	call   eax
c001b60d:	83 c4 10             	add    esp,0x10
c001b610:	a1 f4 71 03 c0       	mov    eax,ds:0xc00371f4
c001b615:	85 c0                	test   eax,eax
c001b617:	0f 84 dc 00 00 00    	je     c001b6f9 <HalPanic(char const*)+0x112>
c001b61d:	52                   	push   edx
c001b61e:	6a 01                	push   0x1
c001b620:	6a 0f                	push   0xf
c001b622:	50                   	push   eax
c001b623:	e8 9a 78 ff ff       	call   c0012ec2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b628:	59                   	pop    ecx
c001b629:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b62f:	e8 9a 7a ff ff       	call   c00130ce <VgaText::clearScreen()>
c001b634:	58                   	pop    eax
c001b635:	5a                   	pop    edx
c001b636:	68 d8 c5 02 c0       	push   0xc002c5d8
c001b63b:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b641:	e8 b4 78 ff ff       	call   c0012efa <VgaText::setTitle(char*)>
c001b646:	83 c4 0c             	add    esp,0xc
c001b649:	6a 01                	push   0x1
c001b64b:	6a 0f                	push   0xf
c001b64d:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b653:	e8 6a 78 ff ff       	call   c0012ec2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b658:	59                   	pop    ecx
c001b659:	58                   	pop    eax
c001b65a:	68 1e d6 02 c0       	push   0xc002d61e
c001b65f:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b665:	e8 66 7d ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b66a:	83 c4 0c             	add    esp,0xc
c001b66d:	6a 0f                	push   0xf
c001b66f:	6a 01                	push   0x1
c001b671:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b677:	e8 46 78 ff ff       	call   c0012ec2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b67c:	58                   	pop    eax
c001b67d:	5a                   	pop    edx
c001b67e:	68 27 d6 02 c0       	push   0xc002d627
c001b683:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b689:	e8 42 7d ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b68e:	83 c4 0c             	add    esp,0xc
c001b691:	6a 01                	push   0x1
c001b693:	6a 0f                	push   0xf
c001b695:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b69b:	e8 22 78 ff ff       	call   c0012ec2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b6a0:	59                   	pop    ecx
c001b6a1:	58                   	pop    eax
c001b6a2:	68 6b d6 02 c0       	push   0xc002d66b
c001b6a7:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b6ad:	e8 1e 7d ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b6b2:	58                   	pop    eax
c001b6b3:	5a                   	pop    edx
c001b6b4:	68 34 d6 02 c0       	push   0xc002d634
c001b6b9:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b6bf:	e8 0c 7d ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b6c4:	59                   	pop    ecx
c001b6c5:	58                   	pop    eax
c001b6c6:	68 6e d6 02 c0       	push   0xc002d66e
c001b6cb:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b6d1:	e8 fa 7c ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b6d6:	58                   	pop    eax
c001b6d7:	5a                   	pop    edx
c001b6d8:	53                   	push   ebx
c001b6d9:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b6df:	e8 ec 7c ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b6e4:	59                   	pop    ecx
c001b6e5:	5b                   	pop    ebx
c001b6e6:	68 6b d6 02 c0       	push   0xc002d66b
c001b6eb:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c001b6f1:	e8 da 7c ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c001b6f6:	83 c4 10             	add    esp,0x10
c001b6f9:	eb fe                	jmp    c001b6f9 <HalPanic(char const*)+0x112>

c001b6fb <HalQueryPerformanceCounter()>:
c001b6fb:	31 c0                	xor    eax,eax
c001b6fd:	31 d2                	xor    edx,edx
c001b6ff:	f6 05 4e 74 03 c0 08 	test   BYTE PTR ds:0xc003744e,0x8
c001b706:	75 02                	jne    c001b70a <HalQueryPerformanceCounter()+0xf>
c001b708:	0f 31                	rdtsc  
c001b70a:	c3                   	ret    

c001b70b <HalInitialise()>:
c001b70b:	53                   	push   ebx
c001b70c:	83 ec 08             	sub    esp,0x8
c001b70f:	e8 c4 e8 ff ff       	call   c0019fd8 <HalDetectFeatures()>
c001b714:	83 ec 0c             	sub    esp,0xc
c001b717:	68 c3 9c 01 c0       	push   0xc0019cc3
c001b71c:	e8 85 5c ff ff       	call   c00113a6 <KeRegisterRestartHandler(void (*)())>
c001b721:	c7 04 24 ce 9c 01 c0 	mov    DWORD PTR [esp],0xc0019cce
c001b728:	e8 6f 5c ff ff       	call   c001139c <KeRegisterShutdownHandler(void (*)())>
c001b72d:	c7 04 24 cf 9c 01 c0 	mov    DWORD PTR [esp],0xc0019ccf
c001b734:	e8 77 5c ff ff       	call   c00113b0 <KeRegisterSleepHandler(void (*)())>
c001b739:	e8 0e 1a ff ff       	call   c000d14c <scanMADT()>
c001b73e:	83 c4 10             	add    esp,0x10
c001b741:	80 3d 40 6e 03 c0 00 	cmp    BYTE PTR ds:0xc0036e40,0x0
c001b748:	75 0d                	jne    c001b757 <HalInitialise()+0x4c>
c001b74a:	a0 4c 74 03 c0       	mov    al,ds:0xc003744c
c001b74f:	83 e0 fe             	and    eax,0xfffffffe
c001b752:	a2 4c 74 03 c0       	mov    ds:0xc003744c,al
c001b757:	e8 e0 08 00 00       	call   c001c03c <picOpen()>
c001b75c:	f6 05 4c 74 03 c0 01 	test   BYTE PTR ds:0xc003744c,0x1
c001b763:	74 0a                	je     c001b76f <HalInitialise()+0x64>
c001b765:	e8 22 08 00 00       	call   c001bf8c <picDisable()>
c001b76a:	e8 5b e1 ff ff       	call   c00198ca <apicOpen()>
c001b76f:	bb 0f 00 00 00       	mov    ebx,0xf
c001b774:	50                   	push   eax
c001b775:	6a 00                	push   0x0
c001b777:	68 4c f6 00 c0       	push   0xc000f64c
c001b77c:	6a 02                	push   0x2
c001b77e:	e8 dc 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b783:	83 c4 0c             	add    esp,0xc
c001b786:	6a 00                	push   0x0
c001b788:	68 c4 f5 00 c0       	push   0xc000f5c4
c001b78d:	6a 06                	push   0x6
c001b78f:	e8 cb 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b794:	83 c4 0c             	add    esp,0xc
c001b797:	6a 00                	push   0x0
c001b799:	68 5c f6 00 c0       	push   0xc000f65c
c001b79e:	6a 08                	push   0x8
c001b7a0:	e8 ba 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b7a5:	83 c4 0c             	add    esp,0xc
c001b7a8:	6a 00                	push   0x0
c001b7aa:	68 1c f5 00 c0       	push   0xc000f51c
c001b7af:	6a 0d                	push   0xd
c001b7b1:	e8 a9 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b7b6:	83 c4 0c             	add    esp,0xc
c001b7b9:	6a 00                	push   0x0
c001b7bb:	68 70 f5 00 c0       	push   0xc000f570
c001b7c0:	6a 0e                	push   0xe
c001b7c2:	e8 98 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b7c7:	83 c4 0c             	add    esp,0xc
c001b7ca:	6a 00                	push   0x0
c001b7cc:	68 18 f6 00 c0       	push   0xc000f618
c001b7d1:	6a 00                	push   0x0
c001b7d3:	e8 87 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b7d8:	83 c4 0c             	add    esp,0xc
c001b7db:	6a 00                	push   0x0
c001b7dd:	68 18 f6 00 c0       	push   0xc000f618
c001b7e2:	6a 01                	push   0x1
c001b7e4:	e8 76 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b7e9:	83 c4 0c             	add    esp,0xc
c001b7ec:	6a 00                	push   0x0
c001b7ee:	68 18 f6 00 c0       	push   0xc000f618
c001b7f3:	6a 03                	push   0x3
c001b7f5:	e8 65 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b7fa:	83 c4 0c             	add    esp,0xc
c001b7fd:	6a 00                	push   0x0
c001b7ff:	68 18 f6 00 c0       	push   0xc000f618
c001b804:	6a 04                	push   0x4
c001b806:	e8 54 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b80b:	83 c4 0c             	add    esp,0xc
c001b80e:	6a 00                	push   0x0
c001b810:	68 18 f6 00 c0       	push   0xc000f618
c001b815:	6a 05                	push   0x5
c001b817:	e8 43 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b81c:	83 c4 0c             	add    esp,0xc
c001b81f:	6a 00                	push   0x0
c001b821:	68 18 f6 00 c0       	push   0xc000f618
c001b826:	6a 00                	push   0x0
c001b828:	e8 32 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b82d:	83 c4 0c             	add    esp,0xc
c001b830:	6a 00                	push   0x0
c001b832:	68 18 f6 00 c0       	push   0xc000f618
c001b837:	6a 01                	push   0x1
c001b839:	e8 21 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b83e:	83 c4 0c             	add    esp,0xc
c001b841:	6a 00                	push   0x0
c001b843:	68 18 f6 00 c0       	push   0xc000f618
c001b848:	6a 09                	push   0x9
c001b84a:	e8 10 05 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b84f:	83 c4 0c             	add    esp,0xc
c001b852:	6a 00                	push   0x0
c001b854:	68 18 f6 00 c0       	push   0xc000f618
c001b859:	6a 0a                	push   0xa
c001b85b:	e8 ff 04 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b860:	83 c4 0c             	add    esp,0xc
c001b863:	6a 00                	push   0x0
c001b865:	68 18 f6 00 c0       	push   0xc000f618
c001b86a:	6a 0b                	push   0xb
c001b86c:	e8 ee 04 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b871:	83 c4 10             	add    esp,0x10
c001b874:	50                   	push   eax
c001b875:	6a 00                	push   0x0
c001b877:	68 18 f6 00 c0       	push   0xc000f618
c001b87c:	53                   	push   ebx
c001b87d:	43                   	inc    ebx
c001b87e:	e8 dc 04 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b883:	83 c4 10             	add    esp,0x10
c001b886:	83 fb 1e             	cmp    ebx,0x1e
c001b889:	75 e9                	jne    c001b874 <HalInitialise()+0x169>
c001b88b:	50                   	push   eax
c001b88c:	6a 00                	push   0x0
c001b88e:	68 5c 2d 01 c0       	push   0xc0012d5c
c001b893:	6a 60                	push   0x60
c001b895:	e8 c5 04 00 00       	call   c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b89a:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001b89f:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b8a9:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001b8b0:	e8 5a 4d ff ff       	call   c001060f <malloc>
c001b8b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b8b8:	89 c3                	mov    ebx,eax
c001b8ba:	e8 eb 0e 00 00       	call   c001c7aa <RTC::RTC()>
c001b8bf:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001b8c9:	5a                   	pop    edx
c001b8ca:	59                   	pop    ecx
c001b8cb:	53                   	push   ebx
c001b8cc:	ff 35 08 71 03 c0    	push   DWORD PTR ds:0xc0037108
c001b8d2:	e8 bd ee fe ff       	call   c000a794 <Device::addChild(Device*)>
c001b8d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8d9:	6a 00                	push   0x0
c001b8db:	6a 00                	push   0x0
c001b8dd:	6a 00                	push   0x0
c001b8df:	53                   	push   ebx
c001b8e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b8e3:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001b8e8:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001b8ee:	83 c4 28             	add    esp,0x28
c001b8f1:	5b                   	pop    ebx
c001b8f2:	c3                   	ret    

c001b8f3 <HalMakeBeep(int)>:
c001b8f3:	53                   	push   ebx
c001b8f4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b8f8:	85 db                	test   ebx,ebx
c001b8fa:	75 07                	jne    c001b903 <HalMakeBeep(int)+0x10>
c001b8fc:	e4 61                	in     al,0x61
c001b8fe:	83 e0 fc             	and    eax,0xfffffffc
c001b901:	eb 26                	jmp    c001b929 <HalMakeBeep(int)+0x36>
c001b903:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b908:	99                   	cdq    
c001b909:	f7 fb                	idiv   ebx
c001b90b:	89 c1                	mov    ecx,eax
c001b90d:	b0 b6                	mov    al,0xb6
c001b90f:	e6 43                	out    0x43,al
c001b911:	88 c8                	mov    al,cl
c001b913:	e6 42                	out    0x42,al
c001b915:	89 c8                	mov    eax,ecx
c001b917:	c1 e8 08             	shr    eax,0x8
c001b91a:	e6 42                	out    0x42,al
c001b91c:	e4 61                	in     al,0x61
c001b91e:	89 c2                	mov    edx,eax
c001b920:	83 ca 03             	or     edx,0x3
c001b923:	38 d0                	cmp    al,dl
c001b925:	74 04                	je     c001b92b <HalMakeBeep(int)+0x38>
c001b927:	88 d0                	mov    al,dl
c001b929:	e6 61                	out    0x61,al
c001b92b:	5b                   	pop    ebx
c001b92c:	c3                   	ret    

c001b92d <HalGetRand()>:
c001b92d:	31 c0                	xor    eax,eax
c001b92f:	c3                   	ret    

c001b930 <HalEndOfInterrupt(int)>:
c001b930:	f6 05 4c 74 03 c0 01 	test   BYTE PTR ds:0xc003744c,0x1
c001b937:	74 1d                	je     c001b956 <HalEndOfInterrupt(int)+0x26>
c001b939:	83 ec 18             	sub    esp,0x18
c001b93c:	6a 1b                	push   0x1b
c001b93e:	e8 bd f4 ff ff       	call   c001ae00 <x86rdmsr(unsigned int)>
c001b943:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b948:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001b952:	83 c4 1c             	add    esp,0x1c
c001b955:	c3                   	ret    
c001b956:	e9 65 08 00 00       	jmp    c001c1c0 <picEOI(int)>
c001b95b:	90                   	nop

c001b95c <CPU::CPU()>:
c001b95c:	83 ec 0c             	sub    esp,0xc
c001b95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b963:	83 ec 08             	sub    esp,0x8
c001b966:	68 f6 d3 02 c0       	push   0xc002d3f6
c001b96b:	50                   	push   eax
c001b96c:	e8 85 ef fe ff       	call   c000a8f6 <Device::Device(char const*)>
c001b971:	83 c4 10             	add    esp,0x10
c001b974:	ba 08 d7 02 c0       	mov    edx,0xc002d708
c001b979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97d:	89 10                	mov    DWORD PTR [eax],edx
c001b97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b983:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b991:	05 64 01 00 00       	add    eax,0x164
c001b996:	83 ec 0c             	sub    esp,0xc
c001b999:	50                   	push   eax
c001b99a:	e8 0f 3d ff ff       	call   c000f6ae <GDT::GDT()>
c001b99f:	83 c4 10             	add    esp,0x10
c001b9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a6:	05 68 09 00 00       	add    eax,0x968
c001b9ab:	83 ec 0c             	sub    esp,0xc
c001b9ae:	50                   	push   eax
c001b9af:	e8 4c 3f ff ff       	call   c000f900 <IDT::IDT()>
c001b9b4:	83 c4 10             	add    esp,0x10
c001b9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9bb:	05 68 11 00 00       	add    eax,0x1168
c001b9c0:	83 ec 0c             	sub    esp,0xc
c001b9c3:	50                   	push   eax
c001b9c4:	e8 e3 7e ff ff       	call   c00138ac <TSS::TSS()>
c001b9c9:	83 c4 10             	add    esp,0x10
c001b9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d0:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001b9da:	90                   	nop
c001b9db:	83 c4 0c             	add    esp,0xc
c001b9de:	c3                   	ret    
c001b9df:	90                   	nop

c001b9e0 <CPU::setupSMEP()>:
c001b9e0:	0f 20 e0             	mov    eax,cr4
c001b9e3:	0d 00 00 10 00       	or     eax,0x100000
c001b9e8:	0f 22 e0             	mov    cr4,eax
c001b9eb:	c3                   	ret    

c001b9ec <CPU::setupUMIP()>:
c001b9ec:	0f 20 e0             	mov    eax,cr4
c001b9ef:	80 cc 08             	or     ah,0x8
c001b9f2:	0f 22 e0             	mov    cr4,eax
c001b9f5:	c3                   	ret    

c001b9f6 <CPU::setupTSC()>:
c001b9f6:	0f 20 e0             	mov    eax,cr4
c001b9f9:	83 c8 04             	or     eax,0x4
c001b9fc:	0f 22 e0             	mov    cr4,eax
c001b9ff:	c3                   	ret    

c001ba00 <CPU::setupLargePages()>:
c001ba00:	0f 20 e0             	mov    eax,cr4
c001ba03:	83 c8 10             	or     eax,0x10
c001ba06:	0f 22 e0             	mov    cr4,eax
c001ba09:	c3                   	ret    

c001ba0a <CPU::setupPAT()>:
c001ba0a:	f6 05 4c 74 03 c0 08 	test   BYTE PTR ds:0xc003744c,0x8
c001ba11:	74 28                	je     c001ba3b <CPU::setupPAT()+0x31>
c001ba13:	53                   	push   ebx
c001ba14:	83 ec 14             	sub    esp,0x14
c001ba17:	68 77 02 00 00       	push   0x277
c001ba1c:	e8 df f3 ff ff       	call   c001ae00 <x86rdmsr(unsigned int)>
c001ba21:	83 c4 0c             	add    esp,0xc
c001ba24:	83 e2 f8             	and    edx,0xfffffff8
c001ba27:	83 ca 01             	or     edx,0x1
c001ba2a:	52                   	push   edx
c001ba2b:	50                   	push   eax
c001ba2c:	68 77 02 00 00       	push   0x277
c001ba31:	e8 08 f4 ff ff       	call   c001ae3e <x86wrmsr(unsigned int, unsigned long long)>
c001ba36:	83 c4 18             	add    esp,0x18
c001ba39:	5b                   	pop    ebx
c001ba3a:	c3                   	ret    
c001ba3b:	c3                   	ret    

c001ba3c <CPU::setupMTRR()>:
c001ba3c:	c3                   	ret    
c001ba3d:	90                   	nop

c001ba3e <CPU::setupGlobalPages()>:
c001ba3e:	0f 20 e0             	mov    eax,cr4
c001ba41:	0c 80                	or     al,0x80
c001ba43:	0f 22 e0             	mov    cr4,eax
c001ba46:	c3                   	ret    
c001ba47:	90                   	nop

c001ba48 <CPU::allowUsermodeDataAccess()>:
c001ba48:	f6 05 4f 74 03 c0 40 	test   BYTE PTR ds:0xc003744f,0x40
c001ba4f:	74 03                	je     c001ba54 <CPU::allowUsermodeDataAccess()+0xc>
c001ba51:	0f 01 cb             	stac   
c001ba54:	c3                   	ret    
c001ba55:	90                   	nop

c001ba56 <CPU::prohibitUsermodeDataAccess()>:
c001ba56:	f6 05 4f 74 03 c0 40 	test   BYTE PTR ds:0xc003744f,0x40
c001ba5d:	74 03                	je     c001ba62 <CPU::prohibitUsermodeDataAccess()+0xc>
c001ba5f:	0f 01 ca             	clac   
c001ba62:	c3                   	ret    
c001ba63:	90                   	nop

c001ba64 <CPU::setupSMAP()>:
c001ba64:	0f 20 e0             	mov    eax,cr4
c001ba67:	0d 00 00 20 00       	or     eax,0x200000
c001ba6c:	0f 22 e0             	mov    cr4,eax
c001ba6f:	eb e5                	jmp    c001ba56 <CPU::prohibitUsermodeDataAccess()>
c001ba71:	90                   	nop

c001ba72 <CPU::setupFeatures()>:
c001ba72:	53                   	push   ebx
c001ba73:	83 ec 08             	sub    esp,0x8
c001ba76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba7a:	f6 05 4f 74 03 c0 20 	test   BYTE PTR ds:0xc003744f,0x20
c001ba81:	74 18                	je     c001ba9b <CPU::setupFeatures()+0x29>
c001ba83:	83 ec 0c             	sub    esp,0xc
c001ba86:	68 79 d6 02 c0       	push   0xc002d679
c001ba8b:	e8 ec b4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ba90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba93:	e8 54 ff ff ff       	call   c001b9ec <CPU::setupUMIP()>
c001ba98:	83 c4 10             	add    esp,0x10
c001ba9b:	f6 05 4e 74 03 c0 08 	test   BYTE PTR ds:0xc003744e,0x8
c001baa2:	74 18                	je     c001babc <CPU::setupFeatures()+0x4a>
c001baa4:	83 ec 0c             	sub    esp,0xc
c001baa7:	68 83 d6 02 c0       	push   0xc002d683
c001baac:	e8 cb b4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001bab1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bab4:	e8 3d ff ff ff       	call   c001b9f6 <CPU::setupTSC()>
c001bab9:	83 c4 10             	add    esp,0x10
c001babc:	f6 05 4e 74 03 c0 20 	test   BYTE PTR ds:0xc003744e,0x20
c001bac3:	74 18                	je     c001badd <CPU::setupFeatures()+0x6b>
c001bac5:	83 ec 0c             	sub    esp,0xc
c001bac8:	68 8c d6 02 c0       	push   0xc002d68c
c001bacd:	e8 aa b4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001bad2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bad5:	e8 26 ff ff ff       	call   c001ba00 <CPU::setupLargePages()>
c001bada:	83 c4 10             	add    esp,0x10
c001badd:	f6 05 4e 74 03 c0 40 	test   BYTE PTR ds:0xc003744e,0x40
c001bae4:	74 18                	je     c001bafe <CPU::setupFeatures()+0x8c>
c001bae6:	83 ec 0c             	sub    esp,0xc
c001bae9:	68 95 d6 02 c0       	push   0xc002d695
c001baee:	e8 89 b4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001baf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001baf6:	e8 43 ff ff ff       	call   c001ba3e <CPU::setupGlobalPages()>
c001bafb:	83 c4 10             	add    esp,0x10
c001bafe:	f6 05 4e 74 03 c0 80 	test   BYTE PTR ds:0xc003744e,0x80
c001bb05:	74 18                	je     c001bb1f <CPU::setupFeatures()+0xad>
c001bb07:	83 ec 0c             	sub    esp,0xc
c001bb0a:	68 a7 d6 02 c0       	push   0xc002d6a7
c001bb0f:	e8 68 b4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001bb14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb17:	e8 ee fe ff ff       	call   c001ba0a <CPU::setupPAT()>
c001bb1c:	83 c4 10             	add    esp,0x10
c001bb1f:	f6 05 50 74 03 c0 04 	test   BYTE PTR ds:0xc0037450,0x4
c001bb26:	74 11                	je     c001bb39 <CPU::setupFeatures()+0xc7>
c001bb28:	c7 44 24 10 b0 d6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002d6b0
c001bb30:	83 c4 08             	add    esp,0x8
c001bb33:	5b                   	pop    ebx
c001bb34:	e9 43 b4 fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001bb39:	83 c4 08             	add    esp,0x8
c001bb3c:	5b                   	pop    ebx
c001bb3d:	c3                   	ret    

c001bb3e <CPU::open(int, int, void*)>:
c001bb3e:	55                   	push   ebp
c001bb3f:	57                   	push   edi
c001bb40:	56                   	push   esi
c001bb41:	53                   	push   ebx
c001bb42:	83 ec 18             	sub    esp,0x18
c001bb45:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bb49:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb4d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001bb51:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001bb57:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001bb5d:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001bb63:	50                   	push   eax
c001bb64:	e8 a7 3b ff ff       	call   c000f710 <GDT::setup()>
c001bb69:	83 c4 0c             	add    esp,0xc
c001bb6c:	6a 00                	push   0x0
c001bb6e:	68 ef be ad de       	push   0xdeadbeef
c001bb73:	55                   	push   ebp
c001bb74:	e8 77 7d ff ff       	call   c00138f0 <TSS::setup(unsigned long, unsigned long)>
c001bb79:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bb7c:	e8 4f 7d ff ff       	call   c00138d0 <TSS::flush()>
c001bb81:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001bb87:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb8a:	e8 e7 3d ff ff       	call   c000f976 <IDT::setup()>
c001bb8f:	b8 00 04 00 00       	mov    eax,0x400
c001bb94:	0f 23 f8             	mov    dr7,eax
c001bb97:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001bba1:	e8 b2 50 ff ff       	call   c0010c58 <Phys::allocatePage()>
c001bba6:	83 c4 10             	add    esp,0x10
c001bba9:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001bbaf:	85 f6                	test   esi,esi
c001bbb1:	89 38                	mov    DWORD PTR [eax],edi
c001bbb3:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001bbb9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001bbbc:	74 10                	je     c001bbce <CPU::open(int, int, void*)+0x90>
c001bbbe:	50                   	push   eax
c001bbbf:	50                   	push   eax
c001bbc0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001bbc6:	56                   	push   esi
c001bbc7:	e8 d0 86 ff ff       	call   c001429c <VAS::setCPUSpecific(unsigned long)>
c001bbcc:	eb 0d                	jmp    c001bbdb <CPU::open(int, int, void*)+0x9d>
c001bbce:	83 ec 0c             	sub    esp,0xc
c001bbd1:	68 ba d6 02 c0       	push   0xc002d6ba
c001bbd6:	e8 89 4e ff ff       	call   c0010a64 <KePanic(char const*)>
c001bbdb:	83 c4 10             	add    esp,0x10
c001bbde:	83 ec 0c             	sub    esp,0xc
c001bbe1:	68 c8 d6 02 c0       	push   0xc002d6c8
c001bbe6:	e8 82 24 ff ff       	call   c000e06d <KeSetBootMessage(char const*)>
c001bbeb:	e8 1b fb ff ff       	call   c001b70b <HalInitialise()>
c001bbf0:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001bbf7:	e8 24 24 ff ff       	call   c000e020 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001bbfc:	0f b6 c0             	movzx  eax,al
c001bbff:	83 f8 01             	cmp    eax,0x1
c001bc02:	19 c0                	sbb    eax,eax
c001bc04:	25 aa 00 00 00       	and    eax,0xaa
c001bc09:	83 c0 1e             	add    eax,0x1e
c001bc0c:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc0f:	e8 e5 01 ff ff       	call   c000bdf9 <setupTimer(int)>
c001bc14:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001bc1a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001bc21:	e8 fa 23 ff ff       	call   c000e020 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001bc26:	83 c4 10             	add    esp,0x10
c001bc29:	84 c0                	test   al,al
c001bc2b:	74 0c                	je     c001bc39 <CPU::open(int, int, void*)+0xfb>
c001bc2d:	83 ec 0c             	sub    esp,0xc
c001bc30:	53                   	push   ebx
c001bc31:	e8 3c fe ff ff       	call   c001ba72 <CPU::setupFeatures()>
c001bc36:	83 c4 10             	add    esp,0x10
c001bc39:	83 c4 0c             	add    esp,0xc
c001bc3c:	31 c0                	xor    eax,eax
c001bc3e:	5b                   	pop    ebx
c001bc3f:	5e                   	pop    esi
c001bc40:	5f                   	pop    edi
c001bc41:	5d                   	pop    ebp
c001bc42:	c3                   	ret    

c001bc43 <convertLegacyIRQNumber(int)>:
c001bc43:	83 ec 0c             	sub    esp,0xc
c001bc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc4a:	f6 05 4c 74 03 c0 01 	test   BYTE PTR ds:0xc003744c,0x1
c001bc51:	74 0c                	je     c001bc5f <convertLegacyIRQNumber(int)+0x1c>
c001bc53:	83 f8 0f             	cmp    eax,0xf
c001bc56:	7f 0b                	jg     c001bc63 <convertLegacyIRQNumber(int)+0x20>
c001bc58:	0f b6 80 48 04 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcfbb8]
c001bc5f:	83 c4 0c             	add    esp,0xc
c001bc62:	c3                   	ret    
c001bc63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bc67:	83 ec 0c             	sub    esp,0xc
c001bc6a:	68 2c d7 02 c0       	push   0xc002d72c
c001bc6f:	e8 f0 4d ff ff       	call   c0010a64 <KePanic(char const*)>
c001bc74:	83 c4 10             	add    esp,0x10
c001bc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc7b:	83 c4 0c             	add    esp,0xc
c001bc7e:	c3                   	ret    

c001bc7f <KeSetupInterrupts()>:
c001bc7f:	31 c0                	xor    eax,eax
c001bc81:	c7 80 60 84 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc7ba0],0x0
c001bc8b:	c7 80 60 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba0],0x0
c001bc95:	c7 80 64 84 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc7b9c],0x0
c001bc9f:	c7 80 64 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8b9c],0x0
c001bca9:	c7 80 68 84 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc7b98],0x0
c001bcb3:	c7 80 68 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8b98],0x0
c001bcbd:	c7 80 6c 84 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc7b94],0x0
c001bcc7:	c7 80 6c 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8b94],0x0
c001bcd1:	83 c0 10             	add    eax,0x10
c001bcd4:	3d 00 10 00 00       	cmp    eax,0x1000
c001bcd9:	75 a6                	jne    c001bc81 <KeSetupInterrupts()+0x2>
c001bcdb:	c3                   	ret    

c001bcdc <int_handler>:
c001bcdc:	55                   	push   ebp
c001bcdd:	57                   	push   edi
c001bcde:	56                   	push   esi
c001bcdf:	53                   	push   ebx
c001bce0:	83 ec 0c             	sub    esp,0xc
c001bce3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bce7:	eb 02                	jmp    c001bceb <int_handler+0xf>
c001bce9:	fa                   	cli    
c001bcea:	f4                   	hlt    
c001bceb:	e8 6e 4d ff ff       	call   c0010a5e <KeIsKernelInPanic()>
c001bcf0:	84 c0                	test   al,al
c001bcf2:	75 f5                	jne    c001bce9 <int_handler+0xd>
c001bcf4:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001bcf7:	8d 46 e0             	lea    eax,[esi-0x20]
c001bcfa:	83 f8 17             	cmp    eax,0x17
c001bcfd:	76 40                	jbe    c001bd3f <int_handler+0x63>
c001bcff:	c1 e6 04             	shl    esi,0x4
c001bd02:	31 db                	xor    ebx,ebx
c001bd04:	8d ae 60 84 03 c0    	lea    ebp,[esi-0x3ffc7ba0]
c001bd0a:	81 c6 60 74 03 c0    	add    esi,0xc0037460
c001bd10:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001bd14:	85 c0                	test   eax,eax
c001bd16:	74 13                	je     c001bd2b <int_handler+0x4f>
c001bd18:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001bd1b:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001bd1f:	74 2c                	je     c001bd4d <int_handler+0x71>
c001bd21:	83 ec 08             	sub    esp,0x8
c001bd24:	52                   	push   edx
c001bd25:	57                   	push   edi
c001bd26:	ff d0                	call   eax
c001bd28:	83 c4 10             	add    esp,0x10
c001bd2b:	83 c3 01             	add    ebx,0x1
c001bd2e:	83 fb 04             	cmp    ebx,0x4
c001bd31:	75 dd                	jne    c001bd10 <int_handler+0x34>
c001bd33:	83 c4 0c             	add    esp,0xc
c001bd36:	31 c0                	xor    eax,eax
c001bd38:	5b                   	pop    ebx
c001bd39:	31 d2                	xor    edx,edx
c001bd3b:	5e                   	pop    esi
c001bd3c:	5f                   	pop    edi
c001bd3d:	5d                   	pop    ebp
c001bd3e:	c3                   	ret    
c001bd3f:	83 ec 0c             	sub    esp,0xc
c001bd42:	50                   	push   eax
c001bd43:	e8 e8 fb ff ff       	call   c001b930 <HalEndOfInterrupt(int)>
c001bd48:	83 c4 10             	add    esp,0x10
c001bd4b:	eb b2                	jmp    c001bcff <int_handler+0x23>
c001bd4d:	83 ec 08             	sub    esp,0x8
c001bd50:	52                   	push   edx
c001bd51:	57                   	push   edi
c001bd52:	ff d0                	call   eax
c001bd54:	83 c4 10             	add    esp,0x10
c001bd57:	83 c4 0c             	add    esp,0xc
c001bd5a:	5b                   	pop    ebx
c001bd5b:	5e                   	pop    esi
c001bd5c:	5f                   	pop    edi
c001bd5d:	5d                   	pop    ebp
c001bd5e:	c3                   	ret    

c001bd5f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001bd5f:	56                   	push   esi
c001bd60:	31 c0                	xor    eax,eax
c001bd62:	53                   	push   ebx
c001bd63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bd67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd6b:	89 ca                	mov    edx,ecx
c001bd6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bd71:	c1 e2 04             	shl    edx,0x4
c001bd74:	83 bc 82 60 84 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc7ba0],0x0
c001bd7c:	74 17                	je     c001bd95 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001bd7e:	83 c0 01             	add    eax,0x1
c001bd81:	83 f8 04             	cmp    eax,0x4
c001bd84:	75 ee                	jne    c001bd74 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001bd86:	c7 44 24 0c 8d d7 02 c0 	mov    DWORD PTR [esp+0xc],0xc002d78d
c001bd8e:	5b                   	pop    ebx
c001bd8f:	5e                   	pop    esi
c001bd90:	e9 cf 4c ff ff       	jmp    c0010a64 <KePanic(char const*)>
c001bd95:	8d 04 88             	lea    eax,[eax+ecx*4]
c001bd98:	89 1c 85 60 84 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7ba0],ebx
c001bd9f:	89 34 85 60 74 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8ba0],esi
c001bda6:	5b                   	pop    ebx
c001bda7:	5e                   	pop    esi
c001bda8:	c3                   	ret    

c001bda9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001bda9:	57                   	push   edi
c001bdaa:	f6 05 4c 74 03 c0 01 	test   BYTE PTR ds:0xc003744c,0x1
c001bdb1:	56                   	push   esi
c001bdb2:	53                   	push   ebx
c001bdb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bdb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdbb:	74 54                	je     c001be11 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001bdbd:	89 c7                	mov    edi,eax
c001bdbf:	84 c0                	test   al,al
c001bdc1:	74 1d                	je     c001bde0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001bdc3:	83 fe 0f             	cmp    esi,0xf
c001bdc6:	0f 8f d5 00 00 00    	jg     c001bea1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001bdcc:	0f b6 b6 48 04 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcfbb8]
c001bdd3:	0f b7 bc 36 20 6e 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc91e0]
c001bddb:	d1 ef                	shr    edi,1
c001bddd:	83 e7 01             	and    edi,0x1
c001bde0:	83 ec 08             	sub    esp,0x8
c001bde3:	a1 c0 73 03 c0       	mov    eax,ds:0xc00373c0
c001bde8:	31 db                	xor    ebx,ebx
c001bdea:	50                   	push   eax
c001bdeb:	68 9a d7 02 c0       	push   0xc002d79a
c001bdf0:	e8 87 b1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001bdf5:	83 c4 10             	add    esp,0x10
c001bdf8:	a1 c0 73 03 c0       	mov    eax,ds:0xc00373c0
c001bdfd:	85 c0                	test   eax,eax
c001bdff:	7f 55                	jg     c001be56 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001be01:	83 ec 0c             	sub    esp,0xc
c001be04:	68 b1 d7 02 c0       	push   0xc002d7b1
c001be09:	e8 56 4c ff ff       	call   c0010a64 <KePanic(char const*)>
c001be0e:	83 c4 10             	add    esp,0x10
c001be11:	8d 7e 20             	lea    edi,[esi+0x20]
c001be14:	89 f8                	mov    eax,edi
c001be16:	31 d2                	xor    edx,edx
c001be18:	c1 e0 04             	shl    eax,0x4
c001be1b:	8b 8c 90 60 84 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc7ba0]
c001be22:	85 c9                	test   ecx,ecx
c001be24:	0f 84 8e 00 00 00    	je     c001beb8 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001be2a:	83 c2 01             	add    edx,0x1
c001be2d:	83 fa 04             	cmp    edx,0x4
c001be30:	75 e9                	jne    c001be1b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001be32:	83 ec 0c             	sub    esp,0xc
c001be35:	68 68 d7 02 c0       	push   0xc002d768
c001be3a:	e8 25 4c ff ff       	call   c0010a64 <KePanic(char const*)>
c001be3f:	83 c4 10             	add    esp,0x10
c001be42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be47:	5b                   	pop    ebx
c001be48:	5e                   	pop    esi
c001be49:	5f                   	pop    edi
c001be4a:	c3                   	ret    
c001be4b:	83 c3 01             	add    ebx,0x1
c001be4e:	39 1d c0 73 03 c0    	cmp    DWORD PTR ds:0xc00373c0,ebx
c001be54:	7e ab                	jle    c001be01 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001be56:	83 ec 08             	sub    esp,0x8
c001be59:	8b 04 9d e0 73 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc8c20]
c001be60:	56                   	push   esi
c001be61:	50                   	push   eax
c001be62:	e8 ef db ff ff       	call   c0019a56 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001be67:	83 c4 10             	add    esp,0x10
c001be6a:	84 c0                	test   al,al
c001be6c:	74 dd                	je     c001be4b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001be6e:	83 ec 04             	sub    esp,0x4
c001be71:	89 f8                	mov    eax,edi
c001be73:	8b 1c 9d e0 73 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffc8c20]
c001be7a:	0f b6 f8             	movzx  edi,al
c001be7d:	57                   	push   edi
c001be7e:	8d 7e 20             	lea    edi,[esi+0x20]
c001be81:	6a 00                	push   0x0
c001be83:	89 f8                	mov    eax,edi
c001be85:	0f b6 c0             	movzx  eax,al
c001be88:	50                   	push   eax
c001be89:	89 f0                	mov    eax,esi
c001be8b:	6a 00                	push   0x0
c001be8d:	0f b6 c0             	movzx  eax,al
c001be90:	6a 00                	push   0x0
c001be92:	50                   	push   eax
c001be93:	53                   	push   ebx
c001be94:	e8 29 dd ff ff       	call   c0019bc2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001be99:	83 c4 20             	add    esp,0x20
c001be9c:	e9 73 ff ff ff       	jmp    c001be14 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001bea1:	83 ec 0c             	sub    esp,0xc
c001bea4:	31 ff                	xor    edi,edi
c001bea6:	68 2c d7 02 c0       	push   0xc002d72c
c001beab:	e8 b4 4b ff ff       	call   c0010a64 <KePanic(char const*)>
c001beb0:	83 c4 10             	add    esp,0x10
c001beb3:	e9 28 ff ff ff       	jmp    c001bde0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001beb8:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bebb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bebf:	89 14 85 60 84 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7ba0],edx
c001bec6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001beca:	5b                   	pop    ebx
c001becb:	89 14 85 60 74 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8ba0],edx
c001bed2:	89 f0                	mov    eax,esi
c001bed4:	5e                   	pop    esi
c001bed5:	5f                   	pop    edi
c001bed6:	c3                   	ret    

c001bed7 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001bed7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bedb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bedf:	c1 e0 04             	shl    eax,0x4
c001bee2:	8d 50 10             	lea    edx,[eax+0x10]
c001bee5:	39 88 60 84 03 c0    	cmp    DWORD PTR [eax-0x3ffc7ba0],ecx
c001beeb:	74 08                	je     c001bef5 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001beed:	83 c0 04             	add    eax,0x4
c001bef0:	39 d0                	cmp    eax,edx
c001bef2:	75 f1                	jne    c001bee5 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001bef4:	c3                   	ret    
c001bef5:	c7 80 60 84 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc7ba0],0x0
c001beff:	c7 80 60 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba0],0x0
c001bf09:	eb e2                	jmp    c001beed <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001bf0b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001bf0b:	53                   	push   ebx
c001bf0c:	83 ec 08             	sub    esp,0x8
c001bf0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bf13:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bf18:	74 09                	je     c001bf23 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001bf1a:	f6 05 4c 74 03 c0 01 	test   BYTE PTR ds:0xc003744c,0x1
c001bf21:	75 37                	jne    c001bf5a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001bf23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf27:	83 c0 20             	add    eax,0x20
c001bf2a:	c1 e0 04             	shl    eax,0x4
c001bf2d:	8d 50 10             	lea    edx,[eax+0x10]
c001bf30:	39 98 60 84 03 c0    	cmp    DWORD PTR [eax-0x3ffc7ba0],ebx
c001bf36:	74 0c                	je     c001bf44 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001bf38:	83 c0 04             	add    eax,0x4
c001bf3b:	39 d0                	cmp    eax,edx
c001bf3d:	75 f1                	jne    c001bf30 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001bf3f:	83 c4 08             	add    esp,0x8
c001bf42:	5b                   	pop    ebx
c001bf43:	c3                   	ret    
c001bf44:	c7 80 60 84 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc7ba0],0x0
c001bf4e:	c7 80 60 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba0],0x0
c001bf58:	eb de                	jmp    c001bf38 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001bf5a:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001bf5f:	7f 11                	jg     c001bf72 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001bf61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf65:	0f b6 80 48 04 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcfbb8]
c001bf6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bf70:	eb b1                	jmp    c001bf23 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001bf72:	83 ec 0c             	sub    esp,0xc
c001bf75:	68 be d7 02 c0       	push   0xc002d7be
c001bf7a:	e8 e5 4a ff ff       	call   c0010a64 <KePanic(char const*)>
c001bf7f:	83 c4 10             	add    esp,0x10
c001bf82:	eb 9f                	jmp    c001bf23 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>

c001bf84 <picIoWait()>:
c001bf84:	eb 00                	jmp    c001bf86 <picIoWait()+0x2>
c001bf86:	eb 00                	jmp    c001bf88 <picIoWait()+0x4>
c001bf88:	90                   	nop
c001bf89:	c3                   	ret    
c001bf8a:	66 90                	xchg   ax,ax

c001bf8c <picDisable()>:
c001bf8c:	83 ec 10             	sub    esp,0x10
c001bf8f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001bf96:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001bf9b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bf9f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bfa4:	ee                   	out    dx,al
c001bfa5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001bfac:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001bfb1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001bfb5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001bfba:	ee                   	out    dx,al
c001bfbb:	90                   	nop
c001bfbc:	83 c4 10             	add    esp,0x10
c001bfbf:	c3                   	ret    

c001bfc0 <picGetIRQReg(int)>:
c001bfc0:	83 ec 10             	sub    esp,0x10
c001bfc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bfc7:	0f b6 c0             	movzx  eax,al
c001bfca:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001bfd1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001bfd5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001bfd9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bfde:	ee                   	out    dx,al
c001bfdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bfe3:	0f b6 c0             	movzx  eax,al
c001bfe6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001bfed:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001bff1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001bff5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bffa:	ee                   	out    dx,al
c001bffb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001c002:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001c007:	89 c2                	mov    edx,eax
c001c009:	ec                   	in     al,dx
c001c00a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c00e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c012:	0f b6 c0             	movzx  eax,al
c001c015:	c1 e0 08             	shl    eax,0x8
c001c018:	89 c1                	mov    ecx,eax
c001c01a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001c021:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001c026:	89 c2                	mov    edx,eax
c001c028:	ec                   	in     al,dx
c001c029:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c02d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001c031:	0f b6 c0             	movzx  eax,al
c001c034:	09 c8                	or     eax,ecx
c001c036:	83 c4 10             	add    esp,0x10
c001c039:	c3                   	ret    
c001c03a:	66 90                	xchg   ax,ax

c001c03c <picOpen()>:
c001c03c:	83 ec 50             	sub    esp,0x50
c001c03f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001c046:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001c04b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c04f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c053:	ee                   	out    dx,al
c001c054:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001c05b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001c060:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001c064:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c068:	ee                   	out    dx,al
c001c069:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001c071:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001c079:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001c080:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c084:	89 c2                	mov    edx,eax
c001c086:	ec                   	in     al,dx
c001c087:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001c08b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001c08f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001c093:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001c09a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c09e:	89 c2                	mov    edx,eax
c001c0a0:	ec                   	in     al,dx
c001c0a1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001c0a5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001c0a9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001c0ad:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001c0b4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001c0b9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001c0bd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c0c1:	ee                   	out    dx,al
c001c0c2:	e8 bd fe ff ff       	call   c001bf84 <picIoWait()>
c001c0c7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001c0ce:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001c0d3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001c0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c0db:	ee                   	out    dx,al
c001c0dc:	e8 a3 fe ff ff       	call   c001bf84 <picIoWait()>
c001c0e1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c0e5:	0f b6 c0             	movzx  eax,al
c001c0e8:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001c0ef:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001c0f3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001c0f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c0fb:	ee                   	out    dx,al
c001c0fc:	e8 83 fe ff ff       	call   c001bf84 <picIoWait()>
c001c101:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c105:	0f b6 c0             	movzx  eax,al
c001c108:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001c10f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c113:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c117:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c11b:	ee                   	out    dx,al
c001c11c:	e8 63 fe ff ff       	call   c001bf84 <picIoWait()>
c001c121:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001c128:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001c12d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001c131:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c135:	ee                   	out    dx,al
c001c136:	e8 49 fe ff ff       	call   c001bf84 <picIoWait()>
c001c13b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001c142:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001c147:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001c14b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c14f:	ee                   	out    dx,al
c001c150:	e8 2f fe ff ff       	call   c001bf84 <picIoWait()>
c001c155:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001c15c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001c161:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001c165:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c169:	ee                   	out    dx,al
c001c16a:	e8 15 fe ff ff       	call   c001bf84 <picIoWait()>
c001c16f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001c176:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001c17b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001c17f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c183:	ee                   	out    dx,al
c001c184:	e8 fb fd ff ff       	call   c001bf84 <picIoWait()>
c001c189:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001c18e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001c195:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001c199:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001c19d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001c1a1:	ee                   	out    dx,al
c001c1a2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001c1a7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001c1ae:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c1b2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001c1b6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001c1ba:	ee                   	out    dx,al
c001c1bb:	90                   	nop
c001c1bc:	83 c4 50             	add    esp,0x50
c001c1bf:	c3                   	ret    

c001c1c0 <picEOI(int)>:
c001c1c0:	83 ec 10             	sub    esp,0x10
c001c1c3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001c1c8:	75 1e                	jne    c001c1e8 <picEOI(int)+0x28>
c001c1ca:	6a 0b                	push   0xb
c001c1cc:	e8 ef fd ff ff       	call   c001bfc0 <picGetIRQReg(int)>
c001c1d1:	83 c4 04             	add    esp,0x4
c001c1d4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001c1d9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001c1de:	25 80 00 00 00       	and    eax,0x80
c001c1e3:	74 73                	je     c001c258 <picEOI(int)+0x98>
c001c1e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1e8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001c1ed:	75 31                	jne    c001c220 <picEOI(int)+0x60>
c001c1ef:	6a 0b                	push   0xb
c001c1f1:	e8 ca fd ff ff       	call   c001bfc0 <picGetIRQReg(int)>
c001c1f6:	83 c4 04             	add    esp,0x4
c001c1f9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001c1fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c202:	98                   	cwde   
c001c203:	85 c0                	test   eax,eax
c001c205:	78 19                	js     c001c220 <picEOI(int)+0x60>
c001c207:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001c20e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001c213:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c217:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001c21c:	ee                   	out    dx,al
c001c21d:	eb 3d                	jmp    c001c25c <picEOI(int)+0x9c>
c001c21f:	90                   	nop
c001c220:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001c225:	7e 19                	jle    c001c240 <picEOI(int)+0x80>
c001c227:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001c22e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001c233:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001c237:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001c23c:	ee                   	out    dx,al
c001c23d:	8d 76 00             	lea    esi,[esi+0x0]
c001c240:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001c247:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001c24c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001c250:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001c255:	ee                   	out    dx,al
c001c256:	eb 04                	jmp    c001c25c <picEOI(int)+0x9c>
c001c258:	90                   	nop
c001c259:	8d 76 00             	lea    esi,[esi+0x0]
c001c25c:	83 c4 10             	add    esp,0x10
c001c25f:	c3                   	ret    

c001c260 <RTC::open(int, int, void*)>:
c001c260:	31 c0                	xor    eax,eax
c001c262:	c3                   	ret    
c001c263:	90                   	nop

c001c264 <RTC::close(int, int, void*)>:
c001c264:	31 c0                	xor    eax,eax
c001c266:	c3                   	ret    
c001c267:	90                   	nop

c001c268 <RTC::timeInSecondsUTC()>:
c001c268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c26c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001c272:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c278:	c3                   	ret    
c001c279:	90                   	nop

c001c27a <RTC::timeInDatetimeUTC()>:
c001c27a:	53                   	push   ebx
c001c27b:	83 ec 14             	sub    esp,0x14
c001c27e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c286:	8b 10                	mov    edx,DWORD PTR [eax]
c001c288:	50                   	push   eax
c001c289:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001c28c:	83 c4 0c             	add    esp,0xc
c001c28f:	52                   	push   edx
c001c290:	50                   	push   eax
c001c291:	53                   	push   ebx
c001c292:	e8 f3 e0 fe ff       	call   c000a38a <KeSecondsToDatetime(unsigned long long)>
c001c297:	89 d8                	mov    eax,ebx
c001c299:	83 c4 14             	add    esp,0x14
c001c29c:	5b                   	pop    ebx
c001c29d:	c2 04 00             	ret    0x4

c001c2a0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001c2a0:	56                   	push   esi
c001c2a1:	53                   	push   ebx
c001c2a2:	83 ec 14             	sub    esp,0x14
c001c2a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c2a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2ab:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001c2ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c2b2:	52                   	push   edx
c001c2b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c2b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c2bb:	50                   	push   eax
c001c2bc:	e8 c9 e0 fe ff       	call   c000a38a <KeSecondsToDatetime(unsigned long long)>
c001c2c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c2c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c2c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c2cd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001c2d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c2d5:	89 f0                	mov    eax,esi
c001c2d7:	83 c4 20             	add    esp,0x20
c001c2da:	5b                   	pop    ebx
c001c2db:	5e                   	pop    esi
c001c2dc:	ff e0                	jmp    eax

c001c2de <RTC::~RTC()>:
c001c2de:	83 ec 0c             	sub    esp,0xc
c001c2e1:	ba e8 d7 02 c0       	mov    edx,0xc002d7e8
c001c2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ea:	89 10                	mov    DWORD PTR [eax],edx
c001c2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f0:	83 ec 0c             	sub    esp,0xc
c001c2f3:	50                   	push   eax
c001c2f4:	e8 33 db fe ff       	call   c0009e2c <Clock::~Clock()>
c001c2f9:	83 c4 10             	add    esp,0x10
c001c2fc:	90                   	nop
c001c2fd:	83 c4 0c             	add    esp,0xc
c001c300:	c3                   	ret    
c001c301:	90                   	nop

c001c302 <RTC::~RTC()>:
c001c302:	83 ec 0c             	sub    esp,0xc
c001c305:	83 ec 0c             	sub    esp,0xc
c001c308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c30c:	e8 cd ff ff ff       	call   c001c2de <RTC::~RTC()>
c001c311:	83 c4 10             	add    esp,0x10
c001c314:	83 ec 08             	sub    esp,0x8
c001c317:	68 60 01 00 00       	push   0x160
c001c31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c320:	e8 f3 1d ff ff       	call   c000e118 <operator delete(void*, unsigned long)>
c001c325:	83 c4 10             	add    esp,0x10
c001c328:	83 c4 0c             	add    esp,0xc
c001c32b:	c3                   	ret    

c001c32c <RTC::get_update_in_progress_flag()>:
c001c32c:	83 ec 18             	sub    esp,0x18
c001c32f:	6a 0a                	push   0xa
c001c331:	e8 9d d9 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c336:	83 c4 1c             	add    esp,0x1c
c001c339:	0f b6 c0             	movzx  eax,al
c001c33c:	c1 e8 07             	shr    eax,0x7
c001c33f:	c3                   	ret    

c001c340 <RTC::completeRTCRefresh()>:
c001c340:	55                   	push   ebp
c001c341:	57                   	push   edi
c001c342:	56                   	push   esi
c001c343:	53                   	push   ebx
c001c344:	83 ec 3c             	sub    esp,0x3c
c001c347:	8b 1d 50 6b 03 c0    	mov    ebx,DWORD PTR ds:0xc0036b50
c001c34d:	83 ec 0c             	sub    esp,0xc
c001c350:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c354:	e8 d3 ff ff ff       	call   c001c32c <RTC::get_update_in_progress_flag()>
c001c359:	83 c4 10             	add    esp,0x10
c001c35c:	84 c0                	test   al,al
c001c35e:	74 0e                	je     c001c36e <RTC::completeRTCRefresh()+0x2e>
c001c360:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001c366:	3b 05 50 6b 03 c0    	cmp    eax,DWORD PTR ds:0xc0036b50
c001c36c:	73 df                	jae    c001c34d <RTC::completeRTCRefresh()+0xd>
c001c36e:	83 ec 0c             	sub    esp,0xc
c001c371:	6a 00                	push   0x0
c001c373:	e8 5b d9 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c378:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001c37f:	89 c5                	mov    ebp,eax
c001c381:	e8 4d d9 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c386:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c38d:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001c391:	e8 3d d9 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c396:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001c39d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001c3a1:	e8 2d d9 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c3a6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001c3ad:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c3b1:	e8 1d d9 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c3b6:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001c3bd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001c3c1:	e8 0d d9 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c3c6:	0f b6 c0             	movzx  eax,al
c001c3c9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c3cd:	83 c4 10             	add    esp,0x10
c001c3d0:	8b 1d 50 6b 03 c0    	mov    ebx,DWORD PTR ds:0xc0036b50
c001c3d6:	83 ec 0c             	sub    esp,0xc
c001c3d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c3dd:	e8 4a ff ff ff       	call   c001c32c <RTC::get_update_in_progress_flag()>
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	84 c0                	test   al,al
c001c3e7:	74 0e                	je     c001c3f7 <RTC::completeRTCRefresh()+0xb7>
c001c3e9:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001c3ef:	3b 05 50 6b 03 c0    	cmp    eax,DWORD PTR ds:0xc0036b50
c001c3f5:	73 df                	jae    c001c3d6 <RTC::completeRTCRefresh()+0x96>
c001c3f7:	83 ec 0c             	sub    esp,0xc
c001c3fa:	6a 00                	push   0x0
c001c3fc:	e8 d2 d8 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c401:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001c408:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c40c:	e8 c2 d8 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c411:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c418:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c41c:	e8 b2 d8 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c421:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001c428:	88 c3                	mov    bl,al
c001c42a:	e8 a4 d8 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c42f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001c436:	89 c6                	mov    esi,eax
c001c438:	e8 96 d8 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c43d:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001c444:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c448:	e8 86 d8 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c44d:	89 e9                	mov    ecx,ebp
c001c44f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c453:	0f b6 f8             	movzx  edi,al
c001c456:	83 c4 10             	add    esp,0x10
c001c459:	0f b6 eb             	movzx  ebp,bl
c001c45c:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001c460:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c465:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c46a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c46e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001c472:	0f 94 c0             	sete   al
c001c475:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c479:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001c47d:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001c482:	0f 94 c2             	sete   dl
c001c485:	21 d0                	and    eax,edx
c001c487:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001c48b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001c48f:	0f 94 c2             	sete   dl
c001c492:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c496:	21 c2                	and    edx,eax
c001c498:	89 f0                	mov    eax,esi
c001c49a:	0f b6 c0             	movzx  eax,al
c001c49d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4a1:	89 f0                	mov    eax,esi
c001c4a3:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001c4a7:	0f 94 c0             	sete   al
c001c4aa:	21 d0                	and    eax,edx
c001c4ac:	31 d2                	xor    edx,edx
c001c4ae:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001c4b2:	0f 94 c2             	sete   dl
c001c4b5:	85 c2                	test   edx,eax
c001c4b7:	75 27                	jne    c001c4e0 <RTC::completeRTCRefresh()+0x1a0>
c001c4b9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c4bd:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001c4c1:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001c4c5:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001c4c9:	89 f0                	mov    eax,esi
c001c4cb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001c4cf:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001c4d3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c4d7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c4db:	e9 f0 fe ff ff       	jmp    c001c3d0 <RTC::completeRTCRefresh()+0x90>
c001c4e0:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001c4e4:	75 d3                	jne    c001c4b9 <RTC::completeRTCRefresh()+0x179>
c001c4e6:	83 ec 0c             	sub    esp,0xc
c001c4e9:	6a 0b                	push   0xb
c001c4eb:	e8 e3 d7 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c4f0:	83 c4 10             	add    esp,0x10
c001c4f3:	a8 04                	test   al,0x4
c001c4f5:	75 7a                	jne    c001c571 <RTC::completeRTCRefresh()+0x231>
c001c4f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c4fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c4ff:	83 e1 0f             	and    ecx,0xf
c001c502:	c1 ea 04             	shr    edx,0x4
c001c505:	83 e6 0f             	and    esi,0xf
c001c508:	6b d2 0a             	imul   edx,edx,0xa
c001c50b:	c1 ef 04             	shr    edi,0x4
c001c50e:	01 d1                	add    ecx,edx
c001c510:	6b ff 0a             	imul   edi,edi,0xa
c001c513:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001c517:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c51b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c51f:	c1 ea 04             	shr    edx,0x4
c001c522:	83 e1 0f             	and    ecx,0xf
c001c525:	6b d2 0a             	imul   edx,edx,0xa
c001c528:	01 d1                	add    ecx,edx
c001c52a:	89 ea                	mov    edx,ebp
c001c52c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001c530:	c1 ea 04             	shr    edx,0x4
c001c533:	89 d9                	mov    ecx,ebx
c001c535:	83 e2 07             	and    edx,0x7
c001c538:	83 e1 0f             	and    ecx,0xf
c001c53b:	6b d2 0a             	imul   edx,edx,0xa
c001c53e:	83 e3 80             	and    ebx,0xffffff80
c001c541:	01 d1                	add    ecx,edx
c001c543:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c547:	09 cb                	or     ebx,ecx
c001c549:	c1 ea 04             	shr    edx,0x4
c001c54c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c550:	6b d2 0a             	imul   edx,edx,0xa
c001c553:	83 e1 0f             	and    ecx,0xf
c001c556:	01 d6                	add    esi,edx
c001c558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c55c:	c1 ea 04             	shr    edx,0x4
c001c55f:	6b d2 0a             	imul   edx,edx,0xa
c001c562:	01 d1                	add    ecx,edx
c001c564:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c568:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001c56c:	83 e2 0f             	and    edx,0xf
c001c56f:	01 d7                	add    edi,edx
c001c571:	a8 02                	test   al,0x2
c001c573:	75 15                	jne    c001c58a <RTC::completeRTCRefresh()+0x24a>
c001c575:	f6 c3 80             	test   bl,0x80
c001c578:	74 10                	je     c001c58a <RTC::completeRTCRefresh()+0x24a>
c001c57a:	83 e3 7f             	and    ebx,0x7f
c001c57d:	b9 18 00 00 00       	mov    ecx,0x18
c001c582:	8d 43 0c             	lea    eax,[ebx+0xc]
c001c585:	99                   	cdq    
c001c586:	f7 f9                	idiv   ecx
c001c588:	88 d3                	mov    bl,dl
c001c58a:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001c590:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001c596:	77 06                	ja     c001c59e <RTC::completeRTCRefresh()+0x25e>
c001c598:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001c59e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c5a3:	31 c9                	xor    ecx,ecx
c001c5a5:	c1 e0 10             	shl    eax,0x10
c001c5a8:	89 cf                	mov    edi,ecx
c001c5aa:	c1 e5 10             	shl    ebp,0x10
c001c5ad:	31 d2                	xor    edx,edx
c001c5af:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001c5b5:	09 c7                	or     edi,eax
c001c5b7:	89 f0                	mov    eax,esi
c001c5b9:	89 f9                	mov    ecx,edi
c001c5bb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c5bf:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001c5c3:	88 c2                	mov    dl,al
c001c5c5:	88 d9                	mov    cl,bl
c001c5c7:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001c5cb:	0f b7 c2             	movzx  eax,dx
c001c5ce:	09 e8                	or     eax,ebp
c001c5d0:	89 c2                	mov    edx,eax
c001c5d2:	50                   	push   eax
c001c5d3:	50                   	push   eax
c001c5d4:	51                   	push   ecx
c001c5d5:	52                   	push   edx
c001c5d6:	e8 a1 d9 fe ff       	call   c0009f7c <KeDatetimeToSeconds(datetime_t)>
c001c5db:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001c5df:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001c5e5:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001c5eb:	83 c4 4c             	add    esp,0x4c
c001c5ee:	5b                   	pop    ebx
c001c5ef:	5e                   	pop    esi
c001c5f0:	5f                   	pop    edi
c001c5f1:	5d                   	pop    ebp
c001c5f2:	c3                   	ret    
c001c5f3:	90                   	nop

c001c5f4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001c5f4:	55                   	push   ebp
c001c5f5:	57                   	push   edi
c001c5f6:	56                   	push   esi
c001c5f7:	53                   	push   ebx
c001c5f8:	83 ec 34             	sub    esp,0x34
c001c5fb:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c5ff:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c603:	6a 00                	push   0x0
c001c605:	89 fb                	mov    ebx,edi
c001c607:	6a 00                	push   0x0
c001c609:	e8 19 d7 ff ff       	call   c0019d27 <x86WriteCMOS(unsigned char, unsigned char)>
c001c60e:	5d                   	pop    ebp
c001c60f:	58                   	pop    eax
c001c610:	6a 00                	push   0x0
c001c612:	6a 02                	push   0x2
c001c614:	e8 0e d7 ff ff       	call   c0019d27 <x86WriteCMOS(unsigned char, unsigned char)>
c001c619:	31 d2                	xor    edx,edx
c001c61b:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001c622:	89 f9                	mov    ecx,edi
c001c624:	89 f8                	mov    eax,edi
c001c626:	c1 e9 10             	shr    ecx,0x10
c001c629:	0f b6 c4             	movzx  eax,ah
c001c62c:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001c630:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001c634:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c638:	b9 64 00 00 00       	mov    ecx,0x64
c001c63d:	89 f0                	mov    eax,esi
c001c63f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c643:	89 f0                	mov    eax,esi
c001c645:	0f b6 c4             	movzx  eax,ah
c001c648:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c64c:	89 f0                	mov    eax,esi
c001c64e:	c1 e8 10             	shr    eax,0x10
c001c651:	f7 f1                	div    ecx
c001c653:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c657:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001c65b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c65f:	e8 6f d6 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c664:	83 c4 10             	add    esp,0x10
c001c667:	89 c5                	mov    ebp,eax
c001c669:	a8 04                	test   al,0x4
c001c66b:	75 6e                	jne    c001c6db <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001c66d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c671:	31 d2                	xor    edx,edx
c001c673:	0f b6 c1             	movzx  eax,cl
c001c676:	b9 0a 00 00 00       	mov    ecx,0xa
c001c67b:	f7 f1                	div    ecx
c001c67d:	c1 e0 04             	shl    eax,0x4
c001c680:	09 d0                	or     eax,edx
c001c682:	31 d2                	xor    edx,edx
c001c684:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c688:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c68d:	f7 f1                	div    ecx
c001c68f:	c1 e0 04             	shl    eax,0x4
c001c692:	09 d0                	or     eax,edx
c001c694:	31 d2                	xor    edx,edx
c001c696:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c69a:	0f b6 c3             	movzx  eax,bl
c001c69d:	f7 f1                	div    ecx
c001c69f:	c1 e0 04             	shl    eax,0x4
c001c6a2:	09 d0                	or     eax,edx
c001c6a4:	31 d2                	xor    edx,edx
c001c6a6:	89 c3                	mov    ebx,eax
c001c6a8:	89 f0                	mov    eax,esi
c001c6aa:	0f b6 c0             	movzx  eax,al
c001c6ad:	f7 f1                	div    ecx
c001c6af:	c1 e0 04             	shl    eax,0x4
c001c6b2:	09 d0                	or     eax,edx
c001c6b4:	31 d2                	xor    edx,edx
c001c6b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c6ba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6bf:	f7 f1                	div    ecx
c001c6c1:	c1 e0 04             	shl    eax,0x4
c001c6c4:	09 d0                	or     eax,edx
c001c6c6:	31 d2                	xor    edx,edx
c001c6c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c6cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6d0:	f7 f1                	div    ecx
c001c6d2:	c1 e0 04             	shl    eax,0x4
c001c6d5:	09 d0                	or     eax,edx
c001c6d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c6db:	83 e5 02             	and    ebp,0x2
c001c6de:	75 1e                	jne    c001c6fe <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c6e0:	0f b6 c3             	movzx  eax,bl
c001c6e3:	83 f8 0b             	cmp    eax,0xb
c001c6e6:	76 10                	jbe    c001c6f8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001c6e8:	8d 53 f4             	lea    edx,[ebx-0xc]
c001c6eb:	88 d3                	mov    bl,dl
c001c6ed:	84 d2                	test   dl,dl
c001c6ef:	75 02                	jne    c001c6f3 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001c6f1:	b3 0c                	mov    bl,0xc
c001c6f3:	83 cb 80             	or     ebx,0xffffff80
c001c6f6:	eb 06                	jmp    c001c6fe <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c6f8:	85 c0                	test   eax,eax
c001c6fa:	75 02                	jne    c001c6fe <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c6fc:	b3 0c                	mov    bl,0xc
c001c6fe:	0f b6 db             	movzx  ebx,bl
c001c701:	50                   	push   eax
c001c702:	50                   	push   eax
c001c703:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001c708:	52                   	push   edx
c001c709:	6a 00                	push   0x0
c001c70b:	e8 17 d6 ff ff       	call   c0019d27 <x86WriteCMOS(unsigned char, unsigned char)>
c001c710:	5a                   	pop    edx
c001c711:	59                   	pop    ecx
c001c712:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c717:	50                   	push   eax
c001c718:	6a 02                	push   0x2
c001c71a:	e8 08 d6 ff ff       	call   c0019d27 <x86WriteCMOS(unsigned char, unsigned char)>
c001c71f:	5e                   	pop    esi
c001c720:	5f                   	pop    edi
c001c721:	53                   	push   ebx
c001c722:	6a 04                	push   0x4
c001c724:	e8 fe d5 ff ff       	call   c0019d27 <x86WriteCMOS(unsigned char, unsigned char)>
c001c729:	5d                   	pop    ebp
c001c72a:	58                   	pop    eax
c001c72b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001c730:	52                   	push   edx
c001c731:	6a 07                	push   0x7
c001c733:	e8 ef d5 ff ff       	call   c0019d27 <x86WriteCMOS(unsigned char, unsigned char)>
c001c738:	58                   	pop    eax
c001c739:	5a                   	pop    edx
c001c73a:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c73f:	50                   	push   eax
c001c740:	6a 08                	push   0x8
c001c742:	e8 e0 d5 ff ff       	call   c0019d27 <x86WriteCMOS(unsigned char, unsigned char)>
c001c747:	59                   	pop    ecx
c001c748:	5b                   	pop    ebx
c001c749:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c74e:	55                   	push   ebp
c001c74f:	6a 09                	push   0x9
c001c751:	e8 d1 d5 ff ff       	call   c0019d27 <x86WriteCMOS(unsigned char, unsigned char)>
c001c756:	5e                   	pop    esi
c001c757:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c75b:	e8 e0 fb ff ff       	call   c001c340 <RTC::completeRTCRefresh()>
c001c760:	83 c4 3c             	add    esp,0x3c
c001c763:	b0 01                	mov    al,0x1
c001c765:	5b                   	pop    ebx
c001c766:	5e                   	pop    esi
c001c767:	5f                   	pop    edi
c001c768:	5d                   	pop    ebp
c001c769:	c3                   	ret    

c001c76a <rtcIRQHandler(regs*, void*)>:
c001c76a:	53                   	push   ebx
c001c76b:	83 ec 14             	sub    esp,0x14
c001c76e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c772:	6a 0c                	push   0xc
c001c774:	e8 5a d5 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c779:	83 c4 10             	add    esp,0x10
c001c77c:	a8 80                	test   al,0x80
c001c77e:	74 24                	je     c001c7a4 <rtcIRQHandler(regs*, void*)+0x3a>
c001c780:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001c787:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001c78e:	66 ff 05 60 94 03 c0 	inc    WORD PTR ds:0xc0039460
c001c795:	75 0d                	jne    c001c7a4 <rtcIRQHandler(regs*, void*)+0x3a>
c001c797:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c79b:	83 c4 08             	add    esp,0x8
c001c79e:	5b                   	pop    ebx
c001c79f:	e9 9c fb ff ff       	jmp    c001c340 <RTC::completeRTCRefresh()>
c001c7a4:	83 c4 08             	add    esp,0x8
c001c7a7:	5b                   	pop    ebx
c001c7a8:	c3                   	ret    
c001c7a9:	90                   	nop

c001c7aa <RTC::RTC()>:
c001c7aa:	83 ec 1c             	sub    esp,0x1c
c001c7ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7b1:	83 ec 08             	sub    esp,0x8
c001c7b4:	68 cb d7 02 c0       	push   0xc002d7cb
c001c7b9:	50                   	push   eax
c001c7ba:	e8 37 d6 fe ff       	call   c0009df6 <Clock::Clock(char const*)>
c001c7bf:	83 c4 10             	add    esp,0x10
c001c7c2:	ba e8 d7 02 c0       	mov    edx,0xc002d7e8
c001c7c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7cb:	89 10                	mov    DWORD PTR [eax],edx
c001c7cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7d1:	83 ec 0c             	sub    esp,0xc
c001c7d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c7d8:	6a 01                	push   0x1
c001c7da:	68 6a c7 01 c0       	push   0xc001c76a
c001c7df:	6a 08                	push   0x8
c001c7e1:	50                   	push   eax
c001c7e2:	e8 59 df fe ff       	call   c000a740 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c7e7:	83 c4 20             	add    esp,0x20
c001c7ea:	89 c2                	mov    edx,eax
c001c7ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7f0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c7f6:	fa                   	cli    
c001c7f7:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c001c7fc:	83 c0 01             	add    eax,0x1
c001c7ff:	a3 30 73 03 c0       	mov    ds:0xc0037330,eax
c001c804:	83 ec 0c             	sub    esp,0xc
c001c807:	6a 0b                	push   0xb
c001c809:	e8 c5 d4 ff ff       	call   c0019cd3 <x86ReadCMOS(unsigned char)>
c001c80e:	83 c4 10             	add    esp,0x10
c001c811:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c815:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c819:	83 c8 10             	or     eax,0x10
c001c81c:	0f b6 c0             	movzx  eax,al
c001c81f:	83 ec 08             	sub    esp,0x8
c001c822:	50                   	push   eax
c001c823:	6a 0b                	push   0xb
c001c825:	e8 fd d4 ff ff       	call   c0019d27 <x86WriteCMOS(unsigned char, unsigned char)>
c001c82a:	83 c4 10             	add    esp,0x10
c001c82d:	83 ec 0c             	sub    esp,0xc
c001c830:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c834:	e8 07 fb ff ff       	call   c001c340 <RTC::completeRTCRefresh()>
c001c839:	83 c4 10             	add    esp,0x10
c001c83c:	f0 83 2d 30 73 03 c0 01 	lock sub DWORD PTR ds:0xc0037330,0x1
c001c844:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c001c849:	85 c0                	test   eax,eax
c001c84b:	75 01                	jne    c001c84e <RTC::RTC()+0xa4>
c001c84d:	fb                   	sti    
c001c84e:	90                   	nop
c001c84f:	83 c4 1c             	add    esp,0x1c
c001c852:	c3                   	ret    
c001c853:	90                   	nop

c001c854 <HalConsoleScroll(int, int)>:
c001c854:	83 ec 10             	sub    esp,0x10
c001c857:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001c85f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001c867:	90                   	nop
c001c868:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c86d:	0f 8f e1 00 00 00    	jg     c001c954 <HalConsoleScroll(int, int)+0x100>
c001c873:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c87b:	90                   	nop
c001c87c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001c884:	0f 8f be 00 00 00    	jg     c001c948 <HalConsoleScroll(int, int)+0xf4>
c001c88a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c88e:	89 d0                	mov    eax,edx
c001c890:	c1 e0 02             	shl    eax,0x2
c001c893:	01 d0                	add    eax,edx
c001c895:	c1 e0 05             	shl    eax,0x5
c001c898:	89 c2                	mov    edx,eax
c001c89a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c89e:	01 d0                	add    eax,edx
c001c8a0:	89 c2                	mov    edx,eax
c001c8a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8a6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c8a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c8ad:	89 d0                	mov    eax,edx
c001c8af:	c1 e0 02             	shl    eax,0x2
c001c8b2:	01 d0                	add    eax,edx
c001c8b4:	c1 e0 05             	shl    eax,0x5
c001c8b7:	89 c2                	mov    edx,eax
c001c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8bd:	01 d0                	add    eax,edx
c001c8bf:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001c8c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8c9:	01 c2                	add    edx,eax
c001c8cb:	8a 01                	mov    al,BYTE PTR [ecx]
c001c8cd:	88 02                	mov    BYTE PTR [edx],al
c001c8cf:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c8d4:	75 66                	jne    c001c93c <HalConsoleScroll(int, int)+0xe8>
c001c8d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8da:	83 e0 01             	and    eax,0x1
c001c8dd:	74 39                	je     c001c918 <HalConsoleScroll(int, int)+0xc4>
c001c8df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c8e3:	83 e0 0f             	and    eax,0xf
c001c8e6:	88 c2                	mov    dl,al
c001c8e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8ec:	c1 e0 04             	shl    eax,0x4
c001c8ef:	09 d0                	or     eax,edx
c001c8f1:	88 c1                	mov    cl,al
c001c8f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c8f7:	89 d0                	mov    eax,edx
c001c8f9:	c1 e0 02             	shl    eax,0x2
c001c8fc:	01 d0                	add    eax,edx
c001c8fe:	c1 e0 05             	shl    eax,0x5
c001c901:	89 c2                	mov    edx,eax
c001c903:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c907:	01 d0                	add    eax,edx
c001c909:	89 c2                	mov    edx,eax
c001c90b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c90f:	01 d0                	add    eax,edx
c001c911:	88 ca                	mov    dl,cl
c001c913:	88 10                	mov    BYTE PTR [eax],dl
c001c915:	eb 25                	jmp    c001c93c <HalConsoleScroll(int, int)+0xe8>
c001c917:	90                   	nop
c001c918:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c91c:	89 d0                	mov    eax,edx
c001c91e:	c1 e0 02             	shl    eax,0x2
c001c921:	01 d0                	add    eax,edx
c001c923:	c1 e0 05             	shl    eax,0x5
c001c926:	89 c2                	mov    edx,eax
c001c928:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c92c:	01 d0                	add    eax,edx
c001c92e:	89 c2                	mov    edx,eax
c001c930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c934:	01 d0                	add    eax,edx
c001c936:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001c939:	8d 76 00             	lea    esi,[esi+0x0]
c001c93c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001c941:	e9 36 ff ff ff       	jmp    c001c87c <HalConsoleScroll(int, int)+0x28>
c001c946:	66 90                	xchg   ax,ax
c001c948:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c94d:	e9 16 ff ff ff       	jmp    c001c868 <HalConsoleScroll(int, int)+0x14>
c001c952:	66 90                	xchg   ax,ax
c001c954:	90                   	nop
c001c955:	83 c4 10             	add    esp,0x10
c001c958:	c3                   	ret    
c001c959:	8d 76 00             	lea    esi,[esi+0x0]

c001c95c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001c95c:	83 ec 14             	sub    esp,0x14
c001c95f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c963:	88 04 24             	mov    BYTE PTR [esp],al
c001c966:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c969:	0f b6 c0             	movzx  eax,al
c001c96c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c970:	89 d1                	mov    ecx,edx
c001c972:	83 e1 0f             	and    ecx,0xf
c001c975:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c979:	c1 e2 04             	shl    edx,0x4
c001c97c:	0f b6 d2             	movzx  edx,dl
c001c97f:	09 ca                	or     edx,ecx
c001c981:	c1 e2 08             	shl    edx,0x8
c001c984:	09 d0                	or     eax,edx
c001c986:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001c98b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001c993:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c997:	89 d0                	mov    eax,edx
c001c999:	c1 e0 02             	shl    eax,0x2
c001c99c:	01 d0                	add    eax,edx
c001c99e:	c1 e0 04             	shl    eax,0x4
c001c9a1:	89 c2                	mov    edx,eax
c001c9a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c9a7:	01 d0                	add    eax,edx
c001c9a9:	01 c0                	add    eax,eax
c001c9ab:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001c9af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9b3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001c9b8:	66 89 02             	mov    WORD PTR [edx],ax
c001c9bb:	90                   	nop
c001c9bc:	83 c4 14             	add    esp,0x14
c001c9bf:	c3                   	ret    

c001c9c0 <HalConsoleCursorUpdate(int, int)>:
c001c9c0:	83 ec 20             	sub    esp,0x20
c001c9c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c9c7:	89 c2                	mov    edx,eax
c001c9c9:	c1 e2 02             	shl    edx,0x2
c001c9cc:	01 d0                	add    eax,edx
c001c9ce:	c1 e0 04             	shl    eax,0x4
c001c9d1:	89 c2                	mov    edx,eax
c001c9d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c9d7:	01 d0                	add    eax,edx
c001c9d9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001c9de:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001c9e5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001c9ea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c9ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9f2:	ee                   	out    dx,al
c001c9f3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c9f8:	0f b6 c0             	movzx  eax,al
c001c9fb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001ca02:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001ca06:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001ca0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca0e:	ee                   	out    dx,al
c001ca0f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001ca16:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001ca1b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001ca1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ca23:	ee                   	out    dx,al
c001ca24:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001ca29:	c1 e8 08             	shr    eax,0x8
c001ca2c:	0f b6 c0             	movzx  eax,al
c001ca2f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001ca36:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001ca3a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001ca3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca42:	ee                   	out    dx,al
c001ca43:	90                   	nop
c001ca44:	83 c4 20             	add    esp,0x20
c001ca47:	c3                   	ret    

c001ca48 <ACPIDriver::initialise()>:
c001ca48:	90                   	nop
c001ca49:	c3                   	ret    
c001ca4a:	66 90                	xchg   ax,ax

c001ca4c <ACPIDriver::detect()>:
c001ca4c:	90                   	nop
c001ca4d:	c3                   	ret    
c001ca4e:	66 90                	xchg   ax,ax

c001ca50 <ACPIDriver::deinitialise()>:
c001ca50:	90                   	nop
c001ca51:	c3                   	ret    
c001ca52:	66 90                	xchg   ax,ax

c001ca54 <ACPIDriver::setPowerState(DevicePowerState)>:
c001ca54:	90                   	nop
c001ca55:	c3                   	ret    
c001ca56:	66 90                	xchg   ax,ax

c001ca58 <ACPIDriver::getHumanReadableName()>:
c001ca58:	b8 02 b0 02 c0       	mov    eax,0xc002b002
c001ca5d:	c3                   	ret    

c001ca5e <DMA8237::detect()>:
c001ca5e:	c3                   	ret    
c001ca5f:	90                   	nop

c001ca60 <DMA8237::deinitialise()>:
c001ca60:	c3                   	ret    
c001ca61:	90                   	nop

c001ca62 <DMA8237::setPowerState(DevicePowerState)>:
c001ca62:	c3                   	ret    
c001ca63:	90                   	nop

c001ca64 <DMA8237::getHumanReadableName()>:
c001ca64:	b8 38 d8 02 c0       	mov    eax,0xc002d838
c001ca69:	c3                   	ret    

c001ca6a <DMA8237::initialise()>:
c001ca6a:	53                   	push   ebx
c001ca6b:	83 ec 08             	sub    esp,0x8
c001ca6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca72:	6a 01                	push   0x1
c001ca74:	6a 10                	push   0x10
c001ca76:	6a 00                	push   0x0
c001ca78:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001ca7b:	e8 6c b3 fe ff       	call   c0007dec <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001ca80:	6a 02                	push   0x2
c001ca82:	6a 20                	push   0x20
c001ca84:	68 c0 00 00 00       	push   0xc0
c001ca89:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001ca8c:	e8 5b b3 fe ff       	call   c0007dec <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001ca91:	83 c4 20             	add    esp,0x20
c001ca94:	6a 01                	push   0x1
c001ca96:	6a 03                	push   0x3
c001ca98:	68 81 00 00 00       	push   0x81
c001ca9d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001caa0:	e8 47 b3 fe ff       	call   c0007dec <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001caa5:	6a 01                	push   0x1
c001caa7:	6a 01                	push   0x1
c001caa9:	68 87 00 00 00       	push   0x87
c001caae:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001cab1:	e8 36 b3 fe ff       	call   c0007dec <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001cab6:	83 c4 20             	add    esp,0x20
c001cab9:	6a 01                	push   0x1
c001cabb:	6a 03                	push   0x3
c001cabd:	68 89 00 00 00       	push   0x89
c001cac2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001cac5:	e8 22 b3 fe ff       	call   c0007dec <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001caca:	6a 01                	push   0x1
c001cacc:	6a 01                	push   0x1
c001cace:	68 8f 00 00 00       	push   0x8f
c001cad3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001cad6:	e8 11 b3 fe ff       	call   c0007dec <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001cadb:	c6 43 08 ee          	mov    BYTE PTR [ebx+0x8],0xee
c001cadf:	31 c0                	xor    eax,eax
c001cae1:	e6 0d                	out    0xd,al
c001cae3:	e6 da                	out    0xda,al
c001cae5:	83 c4 28             	add    esp,0x28
c001cae8:	5b                   	pop    ebx
c001cae9:	c3                   	ret    

c001caea <DMAChannel::DMAChannel(int)>:
c001caea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caee:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001caf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caf9:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cb00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb08:	89 10                	mov    DWORD PTR [eax],edx
c001cb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb0e:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001cb15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb19:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cb20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb24:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001cb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb2c:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c001cb30:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001cb35:	0f 9f c2             	setg   dl
c001cb38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb3c:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
c001cb3f:	90                   	nop
c001cb40:	c3                   	ret    
c001cb41:	90                   	nop

c001cb42 <DMAChannel::~DMAChannel()>:
c001cb42:	83 ec 0c             	sub    esp,0xc
c001cb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cb4c:	85 c0                	test   eax,eax
c001cb4e:	74 1b                	je     c001cb6b <DMAChannel::~DMAChannel()+0x29>
c001cb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb54:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c001cb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb5b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cb5e:	83 ec 08             	sub    esp,0x8
c001cb61:	52                   	push   edx
c001cb62:	50                   	push   eax
c001cb63:	e8 f0 3f ff ff       	call   c0010b58 <Phys::freeDMA(unsigned long, unsigned long)>
c001cb68:	83 c4 10             	add    esp,0x10
c001cb6b:	90                   	nop
c001cb6c:	83 c4 0c             	add    esp,0xc
c001cb6f:	c3                   	ret    

c001cb70 <DMAChannel::getAddress()>:
c001cb70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cb77:	c3                   	ret    

c001cb78 <DMAChannel::getChannelNum()>:
c001cb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb7e:	c3                   	ret    
c001cb7f:	90                   	nop

c001cb80 <DMAChannel::setLength(unsigned int)>:
c001cb80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb88:	3d 00 00 01 00       	cmp    eax,0x10000
c001cb8d:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001cb90:	76 0d                	jbe    c001cb9f <DMAChannel::setLength(unsigned int)+0x1f>
c001cb92:	c7 44 24 04 58 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d858
c001cb9a:	e9 c5 3e ff ff       	jmp    c0010a64 <KePanic(char const*)>
c001cb9f:	c3                   	ret    

c001cba0 <DMAChannel::setAddress(unsigned int)>:
c001cba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cba4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cba8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cbab:	c3                   	ret    

c001cbac <DMAChannel::allocateAddressAndSet(unsigned short)>:
c001cbac:	56                   	push   esi
c001cbad:	53                   	push   ebx
c001cbae:	83 ec 10             	sub    esp,0x10
c001cbb1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cbb5:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
c001cbba:	56                   	push   esi
c001cbbb:	e8 b0 3e ff ff       	call   c0010a70 <Phys::allocateDMA(unsigned long)>
c001cbc0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001cbc3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001cbc6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001cbc9:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c001cbcc:	83 c4 14             	add    esp,0x14
c001cbcf:	5b                   	pop    ebx
c001cbd0:	5e                   	pop    esi
c001cbd1:	c3                   	ret    

c001cbd2 <DMAChannel::stop()>:
c001cbd2:	c3                   	ret    
c001cbd3:	90                   	nop

c001cbd4 <DMAChannel::mask(bool)>:
c001cbd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cbd8:	b1 04                	mov    cl,0x4
c001cbda:	8b 02                	mov    eax,DWORD PTR [edx]
c001cbdc:	83 e0 03             	and    eax,0x3
c001cbdf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001cbe4:	75 02                	jne    c001cbe8 <DMAChannel::mask(bool)+0x14>
c001cbe6:	31 c9                	xor    ecx,ecx
c001cbe8:	0f b6 52 0e          	movzx  edx,BYTE PTR [edx+0xe]
c001cbec:	09 c8                	or     eax,ecx
c001cbee:	83 fa 01             	cmp    edx,0x1
c001cbf1:	19 d2                	sbb    edx,edx
c001cbf3:	80 e2 36             	and    dl,0x36
c001cbf6:	81 c2 d4 00 00 00    	add    edx,0xd4
c001cbfc:	ee                   	out    dx,al
c001cbfd:	c3                   	ret    

c001cbfe <DMAChannel::unmask()>:
c001cbfe:	6a 00                	push   0x0
c001cc00:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001cc04:	e8 cb ff ff ff       	call   c001cbd4 <DMAChannel::mask(bool)>
c001cc09:	58                   	pop    eax
c001cc0a:	5a                   	pop    edx
c001cc0b:	c3                   	ret    

c001cc0c <DMAChannel::setMode(unsigned char)>:
c001cc0c:	53                   	push   ebx
c001cc0d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cc11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc15:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
c001cc19:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
c001cc1c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001cc20:	74 27                	je     c001cc49 <DMAChannel::setMode(unsigned char)+0x3d>
c001cc22:	6a 01                	push   0x1
c001cc24:	53                   	push   ebx
c001cc25:	e8 aa ff ff ff       	call   c001cbd4 <DMAChannel::mask(bool)>
c001cc2a:	58                   	pop    eax
c001cc2b:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c001cc2f:	5a                   	pop    edx
c001cc30:	83 f8 01             	cmp    eax,0x1
c001cc33:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
c001cc36:	19 d2                	sbb    edx,edx
c001cc38:	80 e2 35             	and    dl,0x35
c001cc3b:	81 c2 d6 00 00 00    	add    edx,0xd6
c001cc41:	ee                   	out    dx,al
c001cc42:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001cc46:	5b                   	pop    ebx
c001cc47:	eb b5                	jmp    c001cbfe <DMAChannel::unmask()>
c001cc49:	5b                   	pop    ebx
c001cc4a:	c3                   	ret    
c001cc4b:	90                   	nop

c001cc4c <DMAChannel::start()>:
c001cc4c:	55                   	push   ebp
c001cc4d:	57                   	push   edi
c001cc4e:	56                   	push   esi
c001cc4f:	53                   	push   ebx
c001cc50:	83 ec 1c             	sub    esp,0x1c
c001cc53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cc57:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc59:	83 f8 07             	cmp    eax,0x7
c001cc5c:	77 58                	ja     c001ccb6 <DMAChannel::start()+0x6a>
c001cc5e:	8a 88 cc d8 02 c0    	mov    cl,BYTE PTR [eax-0x3ffd2734]
c001cc64:	8a 98 d4 d8 02 c0    	mov    bl,BYTE PTR [eax-0x3ffd272c]
c001cc6a:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
c001cc6e:	8a 80 c4 d8 02 c0    	mov    al,BYTE PTR [eax-0x3ffd273c]
c001cc74:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cc78:	fa                   	cli    
c001cc79:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001cc7f:	6a 01                	push   0x1
c001cc81:	56                   	push   esi
c001cc82:	e8 4d ff ff ff       	call   c001cbd4 <DMAChannel::mask(bool)>
c001cc87:	58                   	pop    eax
c001cc88:	0f b6 7e 0e          	movzx  edi,BYTE PTR [esi+0xe]
c001cc8c:	5a                   	pop    edx
c001cc8d:	83 ff 01             	cmp    edi,0x1
c001cc90:	19 d2                	sbb    edx,edx
c001cc92:	31 c0                	xor    eax,eax
c001cc94:	80 e2 34             	and    dl,0x34
c001cc97:	81 c2 d8 00 00 00    	add    edx,0xd8
c001cc9d:	89 d5                	mov    ebp,edx
c001cc9f:	ee                   	out    dx,al
c001cca0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c001cca3:	0f b6 d3             	movzx  edx,bl
c001cca6:	85 ff                	test   edi,edi
c001cca8:	74 20                	je     c001ccca <DMAChannel::start()+0x7e>
c001ccaa:	89 c8                	mov    eax,ecx
c001ccac:	d1 e8                	shr    eax,1
c001ccae:	ee                   	out    dx,al
c001ccaf:	89 c8                	mov    eax,ecx
c001ccb1:	c1 e8 09             	shr    eax,0x9
c001ccb4:	eb 1c                	jmp    c001ccd2 <DMAChannel::start()+0x86>
c001ccb6:	c7 44 24 30 74 d8 02 c0 	mov    DWORD PTR [esp+0x30],0xc002d874
c001ccbe:	83 c4 1c             	add    esp,0x1c
c001ccc1:	5b                   	pop    ebx
c001ccc2:	5e                   	pop    esi
c001ccc3:	5f                   	pop    edi
c001ccc4:	5d                   	pop    ebp
c001ccc5:	e9 9a 3d ff ff       	jmp    c0010a64 <KePanic(char const*)>
c001ccca:	88 c8                	mov    al,cl
c001cccc:	ee                   	out    dx,al
c001cccd:	89 c8                	mov    eax,ecx
c001cccf:	c1 e8 08             	shr    eax,0x8
c001ccd2:	ee                   	out    dx,al
c001ccd3:	31 c0                	xor    eax,eax
c001ccd5:	89 ea                	mov    edx,ebp
c001ccd7:	ee                   	out    dx,al
c001ccd8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001ccdb:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cce0:	48                   	dec    eax
c001cce1:	ee                   	out    dx,al
c001cce2:	c1 e8 08             	shr    eax,0x8
c001cce5:	ee                   	out    dx,al
c001cce6:	89 c8                	mov    eax,ecx
c001cce8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001cced:	c1 e8 10             	shr    eax,0x10
c001ccf0:	ee                   	out    dx,al
c001ccf1:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001ccf5:	74 12                	je     c001cd09 <DMAChannel::start()+0xbd>
c001ccf7:	83 ff 01             	cmp    edi,0x1
c001ccfa:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
c001ccfd:	19 d2                	sbb    edx,edx
c001ccff:	80 e2 35             	and    dl,0x35
c001cd02:	81 c2 d6 00 00 00    	add    edx,0xd6
c001cd08:	ee                   	out    dx,al
c001cd09:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
c001cd0d:	83 ec 0c             	sub    esp,0xc
c001cd10:	56                   	push   esi
c001cd11:	e8 e8 fe ff ff       	call   c001cbfe <DMAChannel::unmask()>
c001cd16:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cd1d:	83 c4 10             	add    esp,0x10
c001cd20:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001cd27:	75 01                	jne    c001cd2a <DMAChannel::start()+0xde>
c001cd29:	fb                   	sti    
c001cd2a:	83 c4 1c             	add    esp,0x1c
c001cd2d:	5b                   	pop    ebx
c001cd2e:	5e                   	pop    esi
c001cd2f:	5f                   	pop    edi
c001cd30:	5d                   	pop    ebp
c001cd31:	c3                   	ret    

c001cd32 <DMA8237::getAvailable()>:
c001cd32:	fa                   	cli    
c001cd33:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001cd39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd3d:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
c001cd41:	31 c0                	xor    eax,eax
c001cd43:	0f a3 c2             	bt     edx,eax
c001cd46:	73 09                	jae    c001cd51 <DMA8237::getAvailable()+0x1f>
c001cd48:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cd4f:	eb 10                	jmp    c001cd61 <DMA8237::getAvailable()+0x2f>
c001cd51:	40                   	inc    eax
c001cd52:	83 f8 08             	cmp    eax,0x8
c001cd55:	75 ec                	jne    c001cd43 <DMA8237::getAvailable()+0x11>
c001cd57:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cd5e:	83 c8 ff             	or     eax,0xffffffff
c001cd61:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001cd68:	75 01                	jne    c001cd6b <DMA8237::getAvailable()+0x39>
c001cd6a:	fb                   	sti    
c001cd6b:	c3                   	ret    

c001cd6c <DMA8237::tryLockChannelWithBase(int)>:
c001cd6c:	56                   	push   esi
c001cd6d:	53                   	push   ebx
c001cd6e:	83 ec 14             	sub    esp,0x14
c001cd71:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cd75:	fa                   	cli    
c001cd76:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001cd7c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cd80:	8d 43 03             	lea    eax,[ebx+0x3]
c001cd83:	39 d8                	cmp    eax,ebx
c001cd85:	7c 4a                	jl     c001cdd1 <DMA8237::tryLockChannelWithBase(int)+0x65>
c001cd87:	0f b6 4e 08          	movzx  ecx,BYTE PTR [esi+0x8]
c001cd8b:	89 ca                	mov    edx,ecx
c001cd8d:	0f a3 d9             	bt     ecx,ebx
c001cd90:	73 3c                	jae    c001cdce <DMA8237::tryLockChannelWithBase(int)+0x62>
c001cd92:	83 ec 0c             	sub    esp,0xc
c001cd95:	88 d9                	mov    cl,bl
c001cd97:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001cd9c:	d3 c0                	rol    eax,cl
c001cd9e:	21 d0                	and    eax,edx
c001cda0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cda3:	6a 18                	push   0x18
c001cda5:	e8 65 38 ff ff       	call   c001060f <malloc>
c001cdaa:	5a                   	pop    edx
c001cdab:	59                   	pop    ecx
c001cdac:	53                   	push   ebx
c001cdad:	50                   	push   eax
c001cdae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cdb2:	e8 33 fd ff ff       	call   c001caea <DMAChannel::DMAChannel(int)>
c001cdb7:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cdbe:	83 c4 10             	add    esp,0x10
c001cdc1:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001cdc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cdcc:	eb 13                	jmp    c001cde1 <DMA8237::tryLockChannelWithBase(int)+0x75>
c001cdce:	43                   	inc    ebx
c001cdcf:	eb b2                	jmp    c001cd83 <DMA8237::tryLockChannelWithBase(int)+0x17>
c001cdd1:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cdd8:	31 c0                	xor    eax,eax
c001cdda:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001cde1:	75 01                	jne    c001cde4 <DMA8237::tryLockChannelWithBase(int)+0x78>
c001cde3:	fb                   	sti    
c001cde4:	83 c4 14             	add    esp,0x14
c001cde7:	5b                   	pop    ebx
c001cde8:	5e                   	pop    esi
c001cde9:	c3                   	ret    

c001cdea <DMA8237::lockChannelWithBase(int)>:
c001cdea:	83 ec 0c             	sub    esp,0xc
c001cded:	50                   	push   eax
c001cdee:	50                   	push   eax
c001cdef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdf7:	e8 70 ff ff ff       	call   c001cd6c <DMA8237::tryLockChannelWithBase(int)>
c001cdfc:	83 c4 10             	add    esp,0x10
c001cdff:	85 c0                	test   eax,eax
c001ce01:	74 ea                	je     c001cded <DMA8237::lockChannelWithBase(int)+0x3>
c001ce03:	83 c4 0c             	add    esp,0xc
c001ce06:	c3                   	ret    
c001ce07:	90                   	nop

c001ce08 <DMA8237::tryLockChannel8()>:
c001ce08:	83 ec 14             	sub    esp,0x14
c001ce0b:	6a 00                	push   0x0
c001ce0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce11:	e8 56 ff ff ff       	call   c001cd6c <DMA8237::tryLockChannelWithBase(int)>
c001ce16:	83 c4 1c             	add    esp,0x1c
c001ce19:	c3                   	ret    

c001ce1a <DMA8237::tryLockChannel16()>:
c001ce1a:	83 ec 14             	sub    esp,0x14
c001ce1d:	6a 04                	push   0x4
c001ce1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce23:	e8 44 ff ff ff       	call   c001cd6c <DMA8237::tryLockChannelWithBase(int)>
c001ce28:	83 c4 1c             	add    esp,0x1c
c001ce2b:	c3                   	ret    

c001ce2c <DMA8237::tryLockChannel(int)>:
c001ce2c:	56                   	push   esi
c001ce2d:	53                   	push   ebx
c001ce2e:	83 ec 14             	sub    esp,0x14
c001ce31:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ce35:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ce39:	83 fb 07             	cmp    ebx,0x7
c001ce3c:	76 14                	jbe    c001ce52 <DMA8237::tryLockChannel(int)+0x26>
c001ce3e:	83 ec 0c             	sub    esp,0xc
c001ce41:	68 84 d8 02 c0       	push   0xc002d884
c001ce46:	e8 31 a1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ce4b:	83 c4 10             	add    esp,0x10
c001ce4e:	31 c0                	xor    eax,eax
c001ce50:	eb 61                	jmp    c001ceb3 <DMA8237::tryLockChannel(int)+0x87>
c001ce52:	fa                   	cli    
c001ce53:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001ce59:	0f b6 46 08          	movzx  eax,BYTE PTR [esi+0x8]
c001ce5d:	89 c2                	mov    edx,eax
c001ce5f:	0f a3 d8             	bt     eax,ebx
c001ce62:	73 3c                	jae    c001cea0 <DMA8237::tryLockChannel(int)+0x74>
c001ce64:	83 ec 0c             	sub    esp,0xc
c001ce67:	88 d9                	mov    cl,bl
c001ce69:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ce6e:	d3 c0                	rol    eax,cl
c001ce70:	21 d0                	and    eax,edx
c001ce72:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ce75:	6a 18                	push   0x18
c001ce77:	e8 93 37 ff ff       	call   c001060f <malloc>
c001ce7c:	5a                   	pop    edx
c001ce7d:	59                   	pop    ecx
c001ce7e:	53                   	push   ebx
c001ce7f:	50                   	push   eax
c001ce80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce84:	e8 61 fc ff ff       	call   c001caea <DMAChannel::DMAChannel(int)>
c001ce89:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001ce90:	83 c4 10             	add    esp,0x10
c001ce93:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001ce9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce9e:	eb 10                	jmp    c001ceb0 <DMA8237::tryLockChannel(int)+0x84>
c001cea0:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cea7:	31 c0                	xor    eax,eax
c001cea9:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001ceb0:	75 01                	jne    c001ceb3 <DMA8237::tryLockChannel(int)+0x87>
c001ceb2:	fb                   	sti    
c001ceb3:	83 c4 14             	add    esp,0x14
c001ceb6:	5b                   	pop    ebx
c001ceb7:	5e                   	pop    esi
c001ceb8:	c3                   	ret    
c001ceb9:	90                   	nop

c001ceba <DMA8237::lockChannel8()>:
c001ceba:	83 ec 14             	sub    esp,0x14
c001cebd:	6a 00                	push   0x0
c001cebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cec3:	e8 22 ff ff ff       	call   c001cdea <DMA8237::lockChannelWithBase(int)>
c001cec8:	83 c4 1c             	add    esp,0x1c
c001cecb:	c3                   	ret    

c001cecc <DMA8237::lockChannel16()>:
c001cecc:	83 ec 14             	sub    esp,0x14
c001cecf:	6a 04                	push   0x4
c001ced1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ced5:	e8 10 ff ff ff       	call   c001cdea <DMA8237::lockChannelWithBase(int)>
c001ceda:	83 c4 1c             	add    esp,0x1c
c001cedd:	c3                   	ret    

c001cede <DMA8237::lockChannel(int)>:
c001cede:	83 ec 0c             	sub    esp,0xc
c001cee1:	50                   	push   eax
c001cee2:	50                   	push   eax
c001cee3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cee7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceeb:	e8 3c ff ff ff       	call   c001ce2c <DMA8237::tryLockChannel(int)>
c001cef0:	83 c4 10             	add    esp,0x10
c001cef3:	85 c0                	test   eax,eax
c001cef5:	74 ea                	je     c001cee1 <DMA8237::lockChannel(int)+0x3>
c001cef7:	83 c4 0c             	add    esp,0xc
c001cefa:	c3                   	ret    
c001cefb:	90                   	nop

c001cefc <DMA8237::unlockChannel(DMAChannel*)>:
c001cefc:	56                   	push   esi
c001cefd:	53                   	push   ebx
c001cefe:	53                   	push   ebx
c001ceff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cf03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf07:	85 db                	test   ebx,ebx
c001cf09:	75 10                	jne    c001cf1b <DMA8237::unlockChannel(DMAChannel*)+0x1f>
c001cf0b:	83 ec 0c             	sub    esp,0xc
c001cf0e:	68 93 d8 02 c0       	push   0xc002d893
c001cf13:	e8 4c 3b ff ff       	call   c0010a64 <KePanic(char const*)>
c001cf18:	83 c4 10             	add    esp,0x10
c001cf1b:	fa                   	cli    
c001cf1c:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c001cf22:	0f b6 46 08          	movzx  eax,BYTE PTR [esi+0x8]
c001cf26:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf28:	89 c2                	mov    edx,eax
c001cf2a:	0f a3 c8             	bt     eax,ecx
c001cf2d:	72 21                	jb     c001cf50 <DMA8237::unlockChannel(DMAChannel*)+0x54>
c001cf2f:	83 ec 0c             	sub    esp,0xc
c001cf32:	b8 01 00 00 00       	mov    eax,0x1
c001cf37:	d3 e0                	shl    eax,cl
c001cf39:	09 d0                	or     eax,edx
c001cf3b:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cf3e:	53                   	push   ebx
c001cf3f:	e8 fe fb ff ff       	call   c001cb42 <DMAChannel::~DMAChannel()>
c001cf44:	5a                   	pop    edx
c001cf45:	59                   	pop    ecx
c001cf46:	6a 18                	push   0x18
c001cf48:	53                   	push   ebx
c001cf49:	e8 ca 11 ff ff       	call   c000e118 <operator delete(void*, unsigned long)>
c001cf4e:	eb 0d                	jmp    c001cf5d <DMA8237::unlockChannel(DMAChannel*)+0x61>
c001cf50:	83 ec 0c             	sub    esp,0xc
c001cf53:	68 aa d8 02 c0       	push   0xc002d8aa
c001cf58:	e8 07 3b ff ff       	call   c0010a64 <KePanic(char const*)>
c001cf5d:	83 c4 10             	add    esp,0x10
c001cf60:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c001cf67:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c001cf6e:	75 01                	jne    c001cf71 <DMA8237::unlockChannel(DMAChannel*)+0x75>
c001cf70:	fb                   	sti    
c001cf71:	58                   	pop    eax
c001cf72:	5b                   	pop    ebx
c001cf73:	5e                   	pop    esi
c001cf74:	c3                   	ret    
c001cf75:	66 90                	xchg   ax,ax
c001cf77:	90                   	nop

c001cf78 <ISADriver::detect()>:
c001cf78:	c3                   	ret    
c001cf79:	90                   	nop

c001cf7a <ISADriver::deinitialise()>:
c001cf7a:	c3                   	ret    
c001cf7b:	90                   	nop

c001cf7c <ISADriver::setPowerState(DevicePowerState)>:
c001cf7c:	c3                   	ret    
c001cf7d:	90                   	nop

c001cf7e <ISADriver::getHumanReadableName()>:
c001cf7e:	b8 1d b0 02 c0       	mov    eax,0xc002b01d
c001cf83:	c3                   	ret    

c001cf84 <ISADriver::detectCOMPort(unsigned short)>:
c001cf84:	55                   	push   ebp
c001cf85:	57                   	push   edi
c001cf86:	56                   	push   esi
c001cf87:	53                   	push   ebx
c001cf88:	83 ec 14             	sub    esp,0x14
c001cf8b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cf8f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cf93:	0f b7 c3             	movzx  eax,bx
c001cf96:	6a 08                	push   0x8
c001cf98:	50                   	push   eax
c001cf99:	e8 d2 ab fe ff       	call   c0007b70 <KeIsPortInUse(unsigned short, int)>
c001cf9e:	83 c4 10             	add    esp,0x10
c001cfa1:	84 c0                	test   al,al
c001cfa3:	0f 85 93 00 00 00    	jne    c001d03c <ISADriver::detectCOMPort(unsigned short)+0xb8>
c001cfa9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001cfac:	89 ea                	mov    edx,ebp
c001cfae:	ee                   	out    dx,al
c001cfaf:	b0 80                	mov    al,0x80
c001cfb1:	8d 73 03             	lea    esi,[ebx+0x3]
c001cfb4:	89 f2                	mov    edx,esi
c001cfb6:	ee                   	out    dx,al
c001cfb7:	b1 03                	mov    cl,0x3
c001cfb9:	89 da                	mov    edx,ebx
c001cfbb:	88 c8                	mov    al,cl
c001cfbd:	ee                   	out    dx,al
c001cfbe:	31 c0                	xor    eax,eax
c001cfc0:	89 ea                	mov    edx,ebp
c001cfc2:	ee                   	out    dx,al
c001cfc3:	88 c8                	mov    al,cl
c001cfc5:	89 f2                	mov    edx,esi
c001cfc7:	ee                   	out    dx,al
c001cfc8:	b0 c7                	mov    al,0xc7
c001cfca:	8d 53 02             	lea    edx,[ebx+0x2]
c001cfcd:	ee                   	out    dx,al
c001cfce:	b0 0b                	mov    al,0xb
c001cfd0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c001cfd3:	89 ca                	mov    edx,ecx
c001cfd5:	ee                   	out    dx,al
c001cfd6:	b0 1e                	mov    al,0x1e
c001cfd8:	ee                   	out    dx,al
c001cfd9:	b0 ae                	mov    al,0xae
c001cfdb:	89 da                	mov    edx,ebx
c001cfdd:	ee                   	out    dx,al
c001cfde:	ec                   	in     al,dx
c001cfdf:	3c ae                	cmp    al,0xae
c001cfe1:	75 59                	jne    c001d03c <ISADriver::detectCOMPort(unsigned short)+0xb8>
c001cfe3:	b0 0f                	mov    al,0xf
c001cfe5:	89 ca                	mov    edx,ecx
c001cfe7:	ee                   	out    dx,al
c001cfe8:	83 ec 0c             	sub    esp,0xc
c001cfeb:	68 8c 00 00 00       	push   0x8c
c001cff0:	e8 1a 36 ff ff       	call   c001060f <malloc>
c001cff5:	89 04 24             	mov    DWORD PTR [esp],eax
c001cff8:	89 c6                	mov    esi,eax
c001cffa:	e8 95 ce 00 00       	call   c0029e94 <SerialHardware::SerialHardware()>
c001cfff:	66 89 5e 40          	mov    WORD PTR [esi+0x40],bx
c001d003:	c7 46 70 00 00 00 00 	mov    DWORD PTR [esi+0x70],0x0
c001d00a:	c7 04 24 24 00 00 00 	mov    DWORD PTR [esp],0x24
c001d011:	e8 f9 35 ff ff       	call   c001060f <malloc>
c001d016:	89 04 24             	mov    DWORD PTR [esp],eax
c001d019:	89 c3                	mov    ebx,eax
c001d01b:	e8 f8 ce 00 00       	call   c0029f18 <UART16550::UART16550()>
c001d020:	58                   	pop    eax
c001d021:	5a                   	pop    edx
c001d022:	53                   	push   ebx
c001d023:	56                   	push   esi
c001d024:	e8 9f ce 00 00       	call   c0029ec8 <SerialHardware::setDriver(SerialDriver*)>
c001d029:	59                   	pop    ecx
c001d02a:	5b                   	pop    ebx
c001d02b:	56                   	push   esi
c001d02c:	ff 77 04             	push   DWORD PTR [edi+0x4]
c001d02f:	e8 e8 ab fe ff       	call   c0007c1c <Hardware::addChild(Hardware*)>
c001d034:	ff 47 08             	inc    DWORD PTR [edi+0x8]
c001d037:	83 c4 10             	add    esp,0x10
c001d03a:	66 90                	xchg   ax,ax
c001d03c:	83 c4 0c             	add    esp,0xc
c001d03f:	5b                   	pop    ebx
c001d040:	5e                   	pop    esi
c001d041:	5f                   	pop    edi
c001d042:	5d                   	pop    ebp
c001d043:	c3                   	ret    

c001d044 <ISADriver::initialise()>:
c001d044:	57                   	push   edi
c001d045:	56                   	push   esi
c001d046:	53                   	push   ebx
c001d047:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d04b:	83 ec 0c             	sub    esp,0xc
c001d04e:	68 8c 00 00 00       	push   0x8c
c001d053:	e8 b7 35 ff ff       	call   c001060f <malloc>
c001d058:	89 04 24             	mov    DWORD PTR [esp],eax
c001d05b:	89 c6                	mov    esi,eax
c001d05d:	e8 fe ce 00 00       	call   c0029f60 <LegacyDMAHardware::LegacyDMAHardware()>
c001d062:	c7 04 24 0c 00 00 00 	mov    DWORD PTR [esp],0xc
c001d069:	e8 a1 35 ff ff       	call   c001060f <malloc>
c001d06e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d071:	89 c7                	mov    edi,eax
c001d073:	e8 6c cf 00 00       	call   c0029fe4 <DMA8237::DMA8237()>
c001d078:	59                   	pop    ecx
c001d079:	58                   	pop    eax
c001d07a:	57                   	push   edi
c001d07b:	56                   	push   esi
c001d07c:	e8 13 cf 00 00       	call   c0029f94 <LegacyDMAHardware::setDriver(LegacyDMADriver*)>
c001d081:	58                   	pop    eax
c001d082:	5a                   	pop    edx
c001d083:	56                   	push   esi
c001d084:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001d087:	e8 90 ab fe ff       	call   c0007c1c <Hardware::addChild(Hardware*)>
c001d08c:	59                   	pop    ecx
c001d08d:	5e                   	pop    esi
c001d08e:	68 f8 03 00 00       	push   0x3f8
c001d093:	53                   	push   ebx
c001d094:	e8 eb fe ff ff       	call   c001cf84 <ISADriver::detectCOMPort(unsigned short)>
c001d099:	5f                   	pop    edi
c001d09a:	58                   	pop    eax
c001d09b:	68 f8 02 00 00       	push   0x2f8
c001d0a0:	53                   	push   ebx
c001d0a1:	e8 de fe ff ff       	call   c001cf84 <ISADriver::detectCOMPort(unsigned short)>
c001d0a6:	58                   	pop    eax
c001d0a7:	5a                   	pop    edx
c001d0a8:	68 e8 03 00 00       	push   0x3e8
c001d0ad:	53                   	push   ebx
c001d0ae:	e8 d1 fe ff ff       	call   c001cf84 <ISADriver::detectCOMPort(unsigned short)>
c001d0b3:	59                   	pop    ecx
c001d0b4:	5e                   	pop    esi
c001d0b5:	68 e8 02 00 00       	push   0x2e8
c001d0ba:	53                   	push   ebx
c001d0bb:	e8 c4 fe ff ff       	call   c001cf84 <ISADriver::detectCOMPort(unsigned short)>
c001d0c0:	83 c4 10             	add    esp,0x10
c001d0c3:	83 7b 08 02          	cmp    DWORD PTR [ebx+0x8],0x2
c001d0c7:	7e 37                	jle    c001d100 <ISADriver::initialise()+0xbc>
c001d0c9:	50                   	push   eax
c001d0ca:	50                   	push   eax
c001d0cb:	68 f8 05 00 00       	push   0x5f8
c001d0d0:	53                   	push   ebx
c001d0d1:	e8 ae fe ff ff       	call   c001cf84 <ISADriver::detectCOMPort(unsigned short)>
c001d0d6:	5a                   	pop    edx
c001d0d7:	59                   	pop    ecx
c001d0d8:	68 f8 04 00 00       	push   0x4f8
c001d0dd:	53                   	push   ebx
c001d0de:	e8 a1 fe ff ff       	call   c001cf84 <ISADriver::detectCOMPort(unsigned short)>
c001d0e3:	5e                   	pop    esi
c001d0e4:	5f                   	pop    edi
c001d0e5:	68 e8 05 00 00       	push   0x5e8
c001d0ea:	53                   	push   ebx
c001d0eb:	e8 94 fe ff ff       	call   c001cf84 <ISADriver::detectCOMPort(unsigned short)>
c001d0f0:	58                   	pop    eax
c001d0f1:	5a                   	pop    edx
c001d0f2:	68 e8 04 00 00       	push   0x4e8
c001d0f7:	53                   	push   ebx
c001d0f8:	e8 87 fe ff ff       	call   c001cf84 <ISADriver::detectCOMPort(unsigned short)>
c001d0fd:	83 c4 10             	add    esp,0x10
c001d100:	5b                   	pop    ebx
c001d101:	5e                   	pop    esi
c001d102:	5f                   	pop    edi
c001d103:	c3                   	ret    

c001d104 <ISAPnPDriver::detect()>:
c001d104:	c3                   	ret    
c001d105:	90                   	nop

c001d106 <ISAPnPDriver::deinitialise()>:
c001d106:	c3                   	ret    
c001d107:	90                   	nop

c001d108 <ISAPnPDriver::setPowerState(DevicePowerState)>:
c001d108:	c3                   	ret    
c001d109:	90                   	nop

c001d10a <ISAPnPDriver::getHumanReadableName()>:
c001d10a:	b8 07 b0 02 c0       	mov    eax,0xc002b007
c001d10f:	c3                   	ret    

c001d110 <ISAPnPDriver::sendInitiationKey()>:
c001d110:	57                   	push   edi
c001d111:	b9 08 00 00 00       	mov    ecx,0x8
c001d116:	56                   	push   esi
c001d117:	be a0 db 02 c0       	mov    esi,0xc002dba0
c001d11c:	83 ec 24             	sub    esp,0x24
c001d11f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d123:	fc                   	cld    
c001d124:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d126:	fa                   	cli    
c001d127:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d12b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d12e:	31 c0                	xor    eax,eax
c001d130:	ee                   	out    dx,al
c001d131:	ee                   	out    dx,al
c001d132:	66 90                	xchg   ax,ax
c001d134:	8a 44 0c 04          	mov    al,BYTE PTR [esp+ecx*1+0x4]
c001d138:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d13c:	ee                   	out    dx,al
c001d13d:	41                   	inc    ecx
c001d13e:	83 f9 20             	cmp    ecx,0x20
c001d141:	75 f1                	jne    c001d134 <ISAPnPDriver::sendInitiationKey()+0x24>
c001d143:	31 c0                	xor    eax,eax
c001d145:	ee                   	out    dx,al
c001d146:	ee                   	out    dx,al
c001d147:	31 c9                	xor    ecx,ecx
c001d149:	8d 76 00             	lea    esi,[esi+0x0]
c001d14c:	8a 44 0c 04          	mov    al,BYTE PTR [esp+ecx*1+0x4]
c001d150:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d154:	ee                   	out    dx,al
c001d155:	41                   	inc    ecx
c001d156:	83 f9 20             	cmp    ecx,0x20
c001d159:	75 f1                	jne    c001d14c <ISAPnPDriver::sendInitiationKey()+0x3c>
c001d15b:	fb                   	sti    
c001d15c:	83 c4 24             	add    esp,0x24
c001d15f:	5e                   	pop    esi
c001d160:	5f                   	pop    edi
c001d161:	c3                   	ret    

c001d162 <ISAPnPDriver::isolateCard()>:
c001d162:	57                   	push   edi
c001d163:	31 ff                	xor    edi,edi
c001d165:	56                   	push   esi
c001d166:	31 f6                	xor    esi,esi
c001d168:	53                   	push   ebx
c001d169:	bb 40 00 00 00       	mov    ebx,0x40
c001d16e:	83 ec 1c             	sub    esp,0x1c
c001d171:	68 f8 d9 02 c0       	push   0xc002d9f8
c001d176:	e8 01 9e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d17b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d17f:	83 c4 10             	add    esp,0x10
c001d182:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d185:	8d 76 00             	lea    esi,[esi+0x0]
c001d188:	ec                   	in     al,dx
c001d189:	0f b6 c8             	movzx  ecx,al
c001d18c:	ec                   	in     al,dx
c001d18d:	01 f6                	add    esi,esi
c001d18f:	0f b6 c0             	movzx  eax,al
c001d192:	11 ff                	adc    edi,edi
c001d194:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001d198:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d19c:	83 f9 55             	cmp    ecx,0x55
c001d19f:	75 07                	jne    c001d1a8 <ISAPnPDriver::isolateCard()+0x46>
c001d1a1:	3d aa 00 00 00       	cmp    eax,0xaa
c001d1a6:	eb 0c                	jmp    c001d1b4 <ISAPnPDriver::isolateCard()+0x52>
c001d1a8:	83 f8 55             	cmp    eax,0x55
c001d1ab:	75 1b                	jne    c001d1c8 <ISAPnPDriver::isolateCard()+0x66>
c001d1ad:	81 f9 aa 00 00 00    	cmp    ecx,0xaa
c001d1b3:	90                   	nop
c001d1b4:	75 12                	jne    c001d1c8 <ISAPnPDriver::isolateCard()+0x66>
c001d1b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d1be:	89 c7                	mov    edi,eax
c001d1c0:	83 c9 01             	or     ecx,0x1
c001d1c3:	89 ce                	mov    esi,ecx
c001d1c5:	8d 76 00             	lea    esi,[esi+0x0]
c001d1c8:	4b                   	dec    ebx
c001d1c9:	75 bd                	jne    c001d188 <ISAPnPDriver::isolateCard()+0x26>
c001d1cb:	b9 08 00 00 00       	mov    ecx,0x8
c001d1d0:	ec                   	in     al,dx
c001d1d1:	ec                   	in     al,dx
c001d1d2:	49                   	dec    ecx
c001d1d3:	75 fb                	jne    c001d1d0 <ISAPnPDriver::isolateCard()+0x6e>
c001d1d5:	83 ec 0c             	sub    esp,0xc
c001d1d8:	68 96 da 02 c0       	push   0xc002da96
c001d1dd:	e8 9a 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d1e2:	83 c4 20             	add    esp,0x20
c001d1e5:	89 f0                	mov    eax,esi
c001d1e7:	89 fa                	mov    edx,edi
c001d1e9:	5b                   	pop    ebx
c001d1ea:	5e                   	pop    esi
c001d1eb:	5f                   	pop    edi
c001d1ec:	c3                   	ret    
c001d1ed:	90                   	nop

c001d1ee <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>:
c001d1ee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d1f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1f6:	8b 51 08             	mov    edx,DWORD PTR [ecx+0x8]
c001d1f9:	ee                   	out    dx,al
c001d1fa:	66 8b 51 0a          	mov    dx,WORD PTR [ecx+0xa]
c001d1fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d202:	ee                   	out    dx,al
c001d203:	c3                   	ret    

c001d204 <ISAPnPDriver::changeReadPortBase()>:
c001d204:	56                   	push   esi
c001d205:	53                   	push   ebx
c001d206:	83 ec 10             	sub    esp,0x10
c001d209:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d20d:	68 b9 da 02 c0       	push   0xc002dab9
c001d212:	e8 65 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d217:	0f b7 5e 0c          	movzx  ebx,WORD PTR [esi+0xc]
c001d21b:	90                   	nop
c001d21c:	83 c3 04             	add    ebx,0x4
c001d21f:	83 c4 10             	add    esp,0x10
c001d222:	81 fb f2 03 00 00    	cmp    ebx,0x3f2
c001d228:	7f 5e                	jg     c001d288 <ISAPnPDriver::changeReadPortBase()+0x84>
c001d22a:	51                   	push   ecx
c001d22b:	51                   	push   ecx
c001d22c:	53                   	push   ebx
c001d22d:	68 cd da 02 c0       	push   0xc002dacd
c001d232:	e8 45 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d237:	58                   	pop    eax
c001d238:	5a                   	pop    edx
c001d239:	6a 01                	push   0x1
c001d23b:	53                   	push   ebx
c001d23c:	e8 2f a9 fe ff       	call   c0007b70 <KeIsPortInUse(unsigned short, int)>
c001d241:	83 c4 10             	add    esp,0x10
c001d244:	84 c0                	test   al,al
c001d246:	75 30                	jne    c001d278 <ISAPnPDriver::changeReadPortBase()+0x74>
c001d248:	66 89 5e 0c          	mov    WORD PTR [esi+0xc],bx
c001d24c:	52                   	push   edx
c001d24d:	52                   	push   edx
c001d24e:	53                   	push   ebx
c001d24f:	68 e7 da 02 c0       	push   0xc002dae7
c001d254:	e8 23 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d259:	0f b7 46 0c          	movzx  eax,WORD PTR [esi+0xc]
c001d25d:	83 c4 0c             	add    esp,0xc
c001d260:	c1 f8 03             	sar    eax,0x3
c001d263:	0f b6 c0             	movzx  eax,al
c001d266:	50                   	push   eax
c001d267:	6a 00                	push   0x0
c001d269:	56                   	push   esi
c001d26a:	e8 7f ff ff ff       	call   c001d1ee <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001d26f:	83 c4 14             	add    esp,0x14
c001d272:	5b                   	pop    ebx
c001d273:	5e                   	pop    esi
c001d274:	c3                   	ret    
c001d275:	8d 76 00             	lea    esi,[esi+0x0]
c001d278:	83 ec 0c             	sub    esp,0xc
c001d27b:	68 f8 c4 02 c0       	push   0xc002c4f8
c001d280:	e8 f7 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d285:	eb 95                	jmp    c001d21c <ISAPnPDriver::changeReadPortBase()+0x18>
c001d287:	90                   	nop
c001d288:	c7 44 24 10 0a db 02 c0 	mov    DWORD PTR [esp+0x10],0xc002db0a
c001d290:	58                   	pop    eax
c001d291:	5b                   	pop    ebx
c001d292:	5e                   	pop    esi
c001d293:	e9 e4 9c fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c001d298 <ISAPnPDriver::resetAllCards()>:
c001d298:	6a 05                	push   0x5
c001d29a:	6a 02                	push   0x2
c001d29c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d2a0:	e8 49 ff ff ff       	call   c001d1ee <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001d2a5:	83 c4 0c             	add    esp,0xc
c001d2a8:	c3                   	ret    
c001d2a9:	90                   	nop

c001d2aa <ISAPnPDriver::readRegister(unsigned char)>:
c001d2aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d2ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2b2:	8b 51 08             	mov    edx,DWORD PTR [ecx+0x8]
c001d2b5:	ee                   	out    dx,al
c001d2b6:	8b 51 0c             	mov    edx,DWORD PTR [ecx+0xc]
c001d2b9:	ec                   	in     al,dx
c001d2ba:	c3                   	ret    
c001d2bb:	90                   	nop

c001d2bc <ISAPnPDriver::initialise()>:
c001d2bc:	55                   	push   ebp
c001d2bd:	57                   	push   edi
c001d2be:	56                   	push   esi
c001d2bf:	53                   	push   ebx
c001d2c0:	83 ec 28             	sub    esp,0x28
c001d2c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d2c7:	68 1e db 02 c0       	push   0xc002db1e
c001d2cc:	e8 ab 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d2d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d2d4:	e8 bf ff ff ff       	call   c001d298 <ISAPnPDriver::resetAllCards()>
c001d2d9:	c7 04 24 21 db 02 c0 	mov    DWORD PTR [esp],0xc002db21
c001d2e0:	e8 97 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d2e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d2e8:	e8 23 fe ff ff       	call   c001d110 <ISAPnPDriver::sendInitiationKey()>
c001d2ed:	c7 04 24 a0 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1a0
c001d2f4:	e8 83 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d2f9:	83 c4 0c             	add    esp,0xc
c001d2fc:	6a 00                	push   0x0
c001d2fe:	6a 03                	push   0x3
c001d300:	53                   	push   ebx
c001d301:	e8 e8 fe ff ff       	call   c001d1ee <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001d306:	c7 04 24 e1 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4e1
c001d30d:	e8 6a 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d312:	66 c7 43 0c 03 02    	mov    WORD PTR [ebx+0xc],0x203
c001d318:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d31b:	e8 e4 fe ff ff       	call   c001d204 <ISAPnPDriver::changeReadPortBase()>
c001d320:	c7 04 24 24 db 02 c0 	mov    DWORD PTR [esp],0xc002db24
c001d327:	e8 50 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d32c:	83 c4 10             	add    esp,0x10
c001d32f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d337:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d33f:	90                   	nop
c001d340:	83 ec 0c             	sub    esp,0xc
c001d343:	53                   	push   ebx
c001d344:	e8 19 fe ff ff       	call   c001d162 <ISAPnPDriver::isolateCard()>
c001d349:	83 c4 10             	add    esp,0x10
c001d34c:	89 c6                	mov    esi,eax
c001d34e:	89 d7                	mov    edi,edx
c001d350:	89 d0                	mov    eax,edx
c001d352:	09 f0                	or     eax,esi
c001d354:	75 36                	jne    c001d38c <ISAPnPDriver::initialise()+0xd0>
c001d356:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d35b:	0f 85 a7 00 00 00    	jne    c001d408 <ISAPnPDriver::initialise()+0x14c>
c001d361:	83 ec 0c             	sub    esp,0xc
c001d364:	53                   	push   ebx
c001d365:	e8 9a fe ff ff       	call   c001d204 <ISAPnPDriver::changeReadPortBase()>
c001d36a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	83 7c 24 08 13       	cmp    DWORD PTR [esp+0x8],0x13
c001d376:	7e c8                	jle    c001d340 <ISAPnPDriver::initialise()+0x84>
c001d378:	c7 44 24 30 27 db 02 c0 	mov    DWORD PTR [esp+0x30],0xc002db27
c001d380:	83 c4 1c             	add    esp,0x1c
c001d383:	5b                   	pop    ebx
c001d384:	5e                   	pop    esi
c001d385:	5f                   	pop    edi
c001d386:	5d                   	pop    ebp
c001d387:	e9 f0 9b fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001d38c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d390:	50                   	push   eax
c001d391:	56                   	push   esi
c001d392:	52                   	push   edx
c001d393:	68 3a db 02 c0       	push   0xc002db3a
c001d398:	e8 df 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d39d:	5a                   	pop    edx
c001d39e:	59                   	pop    ecx
c001d39f:	6a 06                	push   0x6
c001d3a1:	53                   	push   ebx
c001d3a2:	e8 03 ff ff ff       	call   c001d2aa <ISAPnPDriver::readRegister(unsigned char)>
c001d3a7:	0f b6 e8             	movzx  ebp,al
c001d3aa:	58                   	pop    eax
c001d3ab:	5a                   	pop    edx
c001d3ac:	55                   	push   ebp
c001d3ad:	68 72 db 02 c0       	push   0xc002db72
c001d3b2:	e8 c5 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d3b7:	c7 04 24 88 01 00 00 	mov    DWORD PTR [esp],0x188
c001d3be:	e8 4c 32 ff ff       	call   c001060f <malloc>
c001d3c3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3ca:	e8 a1 cc 00 00       	call   c002a070 <UnknownHardware::UnknownHardware()>
c001d3cf:	57                   	push   edi
c001d3d0:	56                   	push   esi
c001d3d1:	55                   	push   ebp
c001d3d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3d6:	50                   	push   eax
c001d3d7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d3db:	e8 c0 cc 00 00       	call   c002a0a0 <UnknownHardware::setISAPnPDetection(unsigned char, unsigned long long)>
c001d3e0:	83 c4 18             	add    esp,0x18
c001d3e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3e7:	50                   	push   eax
c001d3e8:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001d3eb:	e8 2c a8 fe ff       	call   c0007c1c <Hardware::addChild(Hardware*)>
c001d3f0:	83 c4 0c             	add    esp,0xc
c001d3f3:	6a 00                	push   0x0
c001d3f5:	6a 03                	push   0x3
c001d3f7:	53                   	push   ebx
c001d3f8:	e8 f1 fd ff ff       	call   c001d1ee <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001d3fd:	83 c4 10             	add    esp,0x10
c001d400:	e9 3b ff ff ff       	jmp    c001d340 <ISAPnPDriver::initialise()+0x84>
c001d405:	8d 76 00             	lea    esi,[esi+0x0]
c001d408:	6a 01                	push   0x1
c001d40a:	6a 01                	push   0x1
c001d40c:	0f b7 43 0a          	movzx  eax,WORD PTR [ebx+0xa]
c001d410:	50                   	push   eax
c001d411:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001d414:	e8 d3 a9 fe ff       	call   c0007dec <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001d419:	6a 01                	push   0x1
c001d41b:	6a 01                	push   0x1
c001d41d:	0f b7 43 08          	movzx  eax,WORD PTR [ebx+0x8]
c001d421:	50                   	push   eax
c001d422:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001d425:	e8 c2 a9 fe ff       	call   c0007dec <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001d42a:	83 c4 20             	add    esp,0x20
c001d42d:	6a 01                	push   0x1
c001d42f:	6a 01                	push   0x1
c001d431:	0f b7 43 0c          	movzx  eax,WORD PTR [ebx+0xc]
c001d435:	50                   	push   eax
c001d436:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001d439:	e8 ae a9 fe ff       	call   c0007dec <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001d43e:	83 c4 2c             	add    esp,0x2c
c001d441:	5b                   	pop    ebx
c001d442:	5e                   	pop    esi
c001d443:	5f                   	pop    edi
c001d444:	5d                   	pop    ebp
c001d445:	c3                   	ret    
c001d446:	66 90                	xchg   ax,ax

c001d448 <PCIDriver::deinitialise()>:
c001d448:	90                   	nop
c001d449:	c3                   	ret    
c001d44a:	66 90                	xchg   ax,ax

c001d44c <PCIDriver::setPowerState(DevicePowerState)>:
c001d44c:	90                   	nop
c001d44d:	c3                   	ret    
c001d44e:	66 90                	xchg   ax,ax

c001d450 <PCIDriver::getHumanReadableName()>:
c001d450:	b8 fa af 02 c0       	mov    eax,0xc002affa
c001d455:	c3                   	ret    
c001d456:	66 90                	xchg   ax,ax

c001d458 <PCIDriver::readBAR8(unsigned int, int)>:
c001d458:	83 ec 10             	sub    esp,0x10
c001d45b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d45f:	83 e0 01             	and    eax,0x1
c001d462:	74 2c                	je     c001d490 <PCIDriver::readBAR8(unsigned int, int)+0x38>
c001d464:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d468:	83 e0 fc             	and    eax,0xfffffffc
c001d46b:	89 c2                	mov    edx,eax
c001d46d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d471:	01 d0                	add    eax,edx
c001d473:	0f b7 c0             	movzx  eax,ax
c001d476:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001d47b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001d480:	89 c2                	mov    edx,eax
c001d482:	ec                   	in     al,dx
c001d483:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001d487:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001d48b:	eb 1f                	jmp    c001d4ac <PCIDriver::readBAR8(unsigned int, int)+0x54>
c001d48d:	8d 76 00             	lea    esi,[esi+0x0]
c001d490:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d494:	83 e0 f0             	and    eax,0xfffffff0
c001d497:	89 c2                	mov    edx,eax
c001d499:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d49d:	01 d0                	add    eax,edx
c001d49f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4a7:	8a 00                	mov    al,BYTE PTR [eax]
c001d4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001d4ac:	83 c4 10             	add    esp,0x10
c001d4af:	c3                   	ret    

c001d4b0 <PCIDriver::readBAR16(unsigned int, int)>:
c001d4b0:	83 ec 10             	sub    esp,0x10
c001d4b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d4b7:	83 e0 01             	and    eax,0x1
c001d4ba:	74 2c                	je     c001d4e8 <PCIDriver::readBAR16(unsigned int, int)+0x38>
c001d4bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d4c0:	83 e0 fc             	and    eax,0xfffffffc
c001d4c3:	89 c2                	mov    edx,eax
c001d4c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d4c9:	01 d0                	add    eax,edx
c001d4cb:	0f b7 c0             	movzx  eax,ax
c001d4ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001d4d3:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001d4d8:	89 c2                	mov    edx,eax
c001d4da:	66 ed                	in     ax,dx
c001d4dc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d4e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d4e5:	eb 1d                	jmp    c001d504 <PCIDriver::readBAR16(unsigned int, int)+0x54>
c001d4e7:	90                   	nop
c001d4e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d4ec:	83 e0 f0             	and    eax,0xfffffff0
c001d4ef:	89 c2                	mov    edx,eax
c001d4f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d4f5:	01 d0                	add    eax,edx
c001d4f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4ff:	66 8b 00             	mov    ax,WORD PTR [eax]
c001d502:	66 90                	xchg   ax,ax
c001d504:	83 c4 10             	add    esp,0x10
c001d507:	c3                   	ret    

c001d508 <PCIDriver::readBAR32(unsigned int, int)>:
c001d508:	83 ec 10             	sub    esp,0x10
c001d50b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d50f:	83 e0 01             	and    eax,0x1
c001d512:	74 2c                	je     c001d540 <PCIDriver::readBAR32(unsigned int, int)+0x38>
c001d514:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d518:	83 e0 fc             	and    eax,0xfffffffc
c001d51b:	89 c2                	mov    edx,eax
c001d51d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d521:	01 d0                	add    eax,edx
c001d523:	0f b7 c0             	movzx  eax,ax
c001d526:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001d52b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001d530:	89 c2                	mov    edx,eax
c001d532:	ed                   	in     eax,dx
c001d533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d537:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d53b:	eb 1f                	jmp    c001d55c <PCIDriver::readBAR32(unsigned int, int)+0x54>
c001d53d:	8d 76 00             	lea    esi,[esi+0x0]
c001d540:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d544:	83 e0 f0             	and    eax,0xfffffff0
c001d547:	89 c2                	mov    edx,eax
c001d549:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d54d:	01 d0                	add    eax,edx
c001d54f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d553:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d557:	8b 00                	mov    eax,DWORD PTR [eax]
c001d559:	8d 76 00             	lea    esi,[esi+0x0]
c001d55c:	83 c4 10             	add    esp,0x10
c001d55f:	c3                   	ret    

c001d560 <PCIDriver::writeBAR8(unsigned int, unsigned char, int)>:
c001d560:	83 ec 14             	sub    esp,0x14
c001d563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d567:	88 04 24             	mov    BYTE PTR [esp],al
c001d56a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d56e:	83 e0 01             	and    eax,0x1
c001d571:	74 2d                	je     c001d5a0 <PCIDriver::writeBAR8(unsigned int, unsigned char, int)+0x40>
c001d573:	0f b6 14 24          	movzx  edx,BYTE PTR [esp]
c001d577:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d57b:	83 e0 fc             	and    eax,0xfffffffc
c001d57e:	89 c1                	mov    ecx,eax
c001d580:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d584:	01 c8                	add    eax,ecx
c001d586:	0f b7 c0             	movzx  eax,ax
c001d589:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001d58e:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c001d592:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d596:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001d59b:	ee                   	out    dx,al
c001d59c:	eb 1e                	jmp    c001d5bc <PCIDriver::writeBAR8(unsigned int, unsigned char, int)+0x5c>
c001d59e:	66 90                	xchg   ax,ax
c001d5a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5a4:	83 e0 f0             	and    eax,0xfffffff0
c001d5a7:	89 c2                	mov    edx,eax
c001d5a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d5ad:	01 d0                	add    eax,edx
c001d5af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d5b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d5ba:	88 10                	mov    BYTE PTR [eax],dl
c001d5bc:	90                   	nop
c001d5bd:	83 c4 14             	add    esp,0x14
c001d5c0:	c3                   	ret    
c001d5c1:	90                   	nop
c001d5c2:	66 90                	xchg   ax,ax

c001d5c4 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)>:
c001d5c4:	83 ec 14             	sub    esp,0x14
c001d5c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5cb:	66 89 04 24          	mov    WORD PTR [esp],ax
c001d5cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5d3:	83 e0 01             	and    eax,0x1
c001d5d6:	74 30                	je     c001d608 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)+0x44>
c001d5d8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001d5dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d5e0:	83 e2 fc             	and    edx,0xfffffffc
c001d5e3:	89 d1                	mov    ecx,edx
c001d5e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d5e9:	01 ca                	add    edx,ecx
c001d5eb:	0f b7 d2             	movzx  edx,dx
c001d5ee:	66 89 54 24 0e       	mov    WORD PTR [esp+0xe],dx
c001d5f3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001d5f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5fc:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001d601:	66 ef                	out    dx,ax
c001d603:	eb 23                	jmp    c001d628 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)+0x64>
c001d605:	8d 76 00             	lea    esi,[esi+0x0]
c001d608:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d60c:	83 e0 f0             	and    eax,0xfffffff0
c001d60f:	89 c2                	mov    edx,eax
c001d611:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d615:	01 d0                	add    eax,edx
c001d617:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d61b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d61f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d622:	66 89 02             	mov    WORD PTR [edx],ax
c001d625:	8d 76 00             	lea    esi,[esi+0x0]
c001d628:	90                   	nop
c001d629:	83 c4 14             	add    esp,0x14
c001d62c:	c3                   	ret    
c001d62d:	90                   	nop
c001d62e:	66 90                	xchg   ax,ax

c001d630 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)>:
c001d630:	83 ec 10             	sub    esp,0x10
c001d633:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d637:	83 e0 01             	and    eax,0x1
c001d63a:	74 2c                	je     c001d668 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)+0x38>
c001d63c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d640:	83 e0 fc             	and    eax,0xfffffffc
c001d643:	89 c2                	mov    edx,eax
c001d645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d649:	01 d0                	add    eax,edx
c001d64b:	0f b7 c0             	movzx  eax,ax
c001d64e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001d653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d657:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d65b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d65f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d664:	ef                   	out    dx,eax
c001d665:	eb 21                	jmp    c001d688 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)+0x58>
c001d667:	90                   	nop
c001d668:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d66c:	83 e0 f0             	and    eax,0xfffffff0
c001d66f:	89 c2                	mov    edx,eax
c001d671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d675:	01 d0                	add    eax,edx
c001d677:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d67b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d67f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d683:	89 10                	mov    DWORD PTR [eax],edx
c001d685:	8d 76 00             	lea    esi,[esi+0x0]
c001d688:	90                   	nop
c001d689:	83 c4 10             	add    esp,0x10
c001d68c:	c3                   	ret    
c001d68d:	90                   	nop
c001d68e:	66 90                	xchg   ax,ax

c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d690:	53                   	push   ebx
c001d691:	83 ec 30             	sub    esp,0x30
c001d694:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d698:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d69c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d6a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d6a4:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
c001d6a8:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d6ac:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d6b0:	88 04 24             	mov    BYTE PTR [esp],al
c001d6b3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d6b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d6bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d6c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d6c5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d6ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d6ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d6d2:	c1 e0 10             	shl    eax,0x10
c001d6d5:	89 c2                	mov    edx,eax
c001d6d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6db:	c1 e0 0b             	shl    eax,0xb
c001d6de:	09 c2                	or     edx,eax
c001d6e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d6e4:	c1 e0 08             	shl    eax,0x8
c001d6e7:	09 c2                	or     edx,eax
c001d6e9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001d6ed:	25 fc 00 00 00       	and    eax,0xfc
c001d6f2:	09 d0                	or     eax,edx
c001d6f4:	0d 00 00 00 80       	or     eax,0x80000000
c001d6f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6fd:	66 c7 44 24 16 f8 0c 	mov    WORD PTR [esp+0x16],0xcf8
c001d704:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d708:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d710:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001d715:	ef                   	out    dx,eax
c001d716:	66 c7 44 24 1e fc 0c 	mov    WORD PTR [esp+0x1e],0xcfc
c001d71d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001d722:	89 c2                	mov    edx,eax
c001d724:	ed                   	in     eax,dx
c001d725:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d729:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d72d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001d731:	83 e0 02             	and    eax,0x2
c001d734:	c1 e0 03             	shl    eax,0x3
c001d737:	88 c1                	mov    cl,al
c001d739:	d3 ea                	shr    edx,cl
c001d73b:	89 d0                	mov    eax,edx
c001d73d:	83 c4 30             	add    esp,0x30
c001d740:	5b                   	pop    ebx
c001d741:	c3                   	ret    
c001d742:	66 90                	xchg   ax,ax

c001d744 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d744:	57                   	push   edi
c001d745:	56                   	push   esi
c001d746:	53                   	push   ebx
c001d747:	83 ec 54             	sub    esp,0x54
c001d74a:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
c001d74e:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
c001d752:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001d756:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c001d75a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c001d75e:	89 f0                	mov    eax,esi
c001d760:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001d764:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
c001d768:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d76c:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d770:	89 f8                	mov    eax,edi
c001d772:	66 89 04 24          	mov    WORD PTR [esp],ax
c001d776:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d77b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d77f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d784:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001d788:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d78d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d791:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d795:	c1 e0 10             	shl    eax,0x10
c001d798:	89 c2                	mov    edx,eax
c001d79a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d79e:	c1 e0 0b             	shl    eax,0xb
c001d7a1:	09 c2                	or     edx,eax
c001d7a3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d7a7:	c1 e0 08             	shl    eax,0x8
c001d7aa:	09 c2                	or     edx,eax
c001d7ac:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d7b1:	25 fc 00 00 00       	and    eax,0xfc
c001d7b6:	09 d0                	or     eax,edx
c001d7b8:	0d 00 00 00 80       	or     eax,0x80000000
c001d7bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001d7c1:	66 c7 44 24 36 f8 0c 	mov    WORD PTR [esp+0x36],0xcf8
c001d7c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d7cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d7d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7d4:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c001d7d9:	ef                   	out    dx,eax
c001d7da:	66 c7 44 24 3e fc 0c 	mov    WORD PTR [esp+0x3e],0xcfc
c001d7e1:	66 8b 44 24 3e       	mov    ax,WORD PTR [esp+0x3e]
c001d7e6:	89 c2                	mov    edx,eax
c001d7e8:	ed                   	in     eax,dx
c001d7e9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d7ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d7f1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001d7f5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d7fa:	83 e0 02             	and    eax,0x2
c001d7fd:	74 15                	je     c001d814 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd0>
c001d7ff:	81 64 24 50 ff ff 00 00 	and    DWORD PTR [esp+0x50],0xffff
c001d807:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001d80b:	c1 e0 10             	shl    eax,0x10
c001d80e:	09 44 24 50          	or     DWORD PTR [esp+0x50],eax
c001d812:	eb 10                	jmp    c001d824 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xe0>
c001d814:	81 64 24 50 00 00 ff ff 	and    DWORD PTR [esp+0x50],0xffff0000
c001d81c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001d820:	09 44 24 50          	or     DWORD PTR [esp+0x50],eax
c001d824:	66 c7 44 24 26 f8 0c 	mov    WORD PTR [esp+0x26],0xcf8
c001d82b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d82f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d837:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c001d83c:	ef                   	out    dx,eax
c001d83d:	66 c7 44 24 2e fc 0c 	mov    WORD PTR [esp+0x2e],0xcfc
c001d844:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d848:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d84c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d850:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c001d855:	ef                   	out    dx,eax
c001d856:	90                   	nop
c001d857:	83 c4 54             	add    esp,0x54
c001d85a:	5b                   	pop    ebx
c001d85b:	5e                   	pop    esi
c001d85c:	5f                   	pop    edi
c001d85d:	c3                   	ret    
c001d85e:	66 90                	xchg   ax,ax

c001d860 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d860:	83 ec 0c             	sub    esp,0xc
c001d863:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d867:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d86b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d86f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d873:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d877:	88 04 24             	mov    BYTE PTR [esp],al
c001d87a:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d87e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d883:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d888:	6a 00                	push   0x0
c001d88a:	51                   	push   ecx
c001d88b:	52                   	push   edx
c001d88c:	50                   	push   eax
c001d88d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d891:	e8 fa fd ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d896:	83 c4 14             	add    esp,0x14
c001d899:	83 c4 0c             	add    esp,0xc
c001d89c:	c3                   	ret    
c001d89d:	90                   	nop
c001d89e:	66 90                	xchg   ax,ax

c001d8a0 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d8a0:	83 ec 0c             	sub    esp,0xc
c001d8a3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d8a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d8ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8af:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d8b3:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d8b7:	88 04 24             	mov    BYTE PTR [esp],al
c001d8ba:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d8be:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d8c3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d8c8:	6a 0e                	push   0xe
c001d8ca:	51                   	push   ecx
c001d8cb:	52                   	push   edx
c001d8cc:	50                   	push   eax
c001d8cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d8d1:	e8 ba fd ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8d6:	83 c4 14             	add    esp,0x14
c001d8d9:	0f b6 c0             	movzx  eax,al
c001d8dc:	83 c4 0c             	add    esp,0xc
c001d8df:	c3                   	ret    

c001d8e0 <PCIDriver::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d8e0:	83 ec 1c             	sub    esp,0x1c
c001d8e3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d8e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d8ef:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d8f3:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d8f7:	88 04 24             	mov    BYTE PTR [esp],al
c001d8fa:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d8fe:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d903:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d908:	6a 0a                	push   0xa
c001d90a:	51                   	push   ecx
c001d90b:	52                   	push   edx
c001d90c:	50                   	push   eax
c001d90d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d911:	e8 7a fd ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d916:	83 c4 14             	add    esp,0x14
c001d919:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001d91d:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d921:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d926:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d92b:	6a 0a                	push   0xa
c001d92d:	51                   	push   ecx
c001d92e:	52                   	push   edx
c001d92f:	50                   	push   eax
c001d930:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d934:	e8 57 fd ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d939:	83 c4 14             	add    esp,0x14
c001d93c:	0f b7 c0             	movzx  eax,ax
c001d93f:	c1 f8 08             	sar    eax,0x8
c001d942:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d946:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d94b:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c001d950:	c1 e2 08             	shl    edx,0x8
c001d953:	09 d0                	or     eax,edx
c001d955:	83 c4 1c             	add    esp,0x1c
c001d958:	c3                   	ret    
c001d959:	90                   	nop
c001d95a:	66 90                	xchg   ax,ax

c001d95c <PCIDriver::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d95c:	83 ec 0c             	sub    esp,0xc
c001d95f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d967:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d96b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d96f:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d973:	88 04 24             	mov    BYTE PTR [esp],al
c001d976:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d97a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d97f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d984:	6a 08                	push   0x8
c001d986:	51                   	push   ecx
c001d987:	52                   	push   edx
c001d988:	50                   	push   eax
c001d989:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d98d:	e8 fe fc ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d992:	83 c4 14             	add    esp,0x14
c001d995:	0f b7 c0             	movzx  eax,ax
c001d998:	c1 f8 08             	sar    eax,0x8
c001d99b:	83 c4 0c             	add    esp,0xc
c001d99e:	c3                   	ret    
c001d99f:	90                   	nop

c001d9a0 <PCIDriver::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d9a0:	83 ec 0c             	sub    esp,0xc
c001d9a3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d9a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d9ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9af:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d9b3:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d9b7:	88 04 24             	mov    BYTE PTR [esp],al
c001d9ba:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d9be:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d9c3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d9c8:	6a 08                	push   0x8
c001d9ca:	51                   	push   ecx
c001d9cb:	52                   	push   edx
c001d9cc:	50                   	push   eax
c001d9cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d9d1:	e8 ba fc ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d9d6:	83 c4 14             	add    esp,0x14
c001d9d9:	83 c4 0c             	add    esp,0xc
c001d9dc:	c3                   	ret    
c001d9dd:	90                   	nop
c001d9de:	66 90                	xchg   ax,ax

c001d9e0 <PCIDriver::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d9e0:	83 ec 0c             	sub    esp,0xc
c001d9e3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d9e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d9eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9ef:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d9f3:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d9f7:	88 04 24             	mov    BYTE PTR [esp],al
c001d9fa:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d9fe:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001da03:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001da08:	6a 3c                	push   0x3c
c001da0a:	51                   	push   ecx
c001da0b:	52                   	push   edx
c001da0c:	50                   	push   eax
c001da0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001da11:	e8 7a fc ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da16:	83 c4 14             	add    esp,0x14
c001da19:	83 c4 0c             	add    esp,0xc
c001da1c:	c3                   	ret    
c001da1d:	90                   	nop
c001da1e:	66 90                	xchg   ax,ax

c001da20 <PCIDriver::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001da20:	83 ec 0c             	sub    esp,0xc
c001da23:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001da27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001da2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da2f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001da33:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001da37:	88 04 24             	mov    BYTE PTR [esp],al
c001da3a:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001da3e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001da43:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001da48:	6a 18                	push   0x18
c001da4a:	51                   	push   ecx
c001da4b:	52                   	push   edx
c001da4c:	50                   	push   eax
c001da4d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001da51:	e8 3a fc ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da56:	83 c4 14             	add    esp,0x14
c001da59:	0f b7 c0             	movzx  eax,ax
c001da5c:	c1 f8 08             	sar    eax,0x8
c001da5f:	83 c4 0c             	add    esp,0xc
c001da62:	c3                   	ret    
c001da63:	90                   	nop

c001da64 <PCIDriver::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001da64:	56                   	push   esi
c001da65:	53                   	push   ebx
c001da66:	83 ec 10             	sub    esp,0x10
c001da69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001da6d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001da71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001da79:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
c001da7d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001da81:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001da85:	88 04 24             	mov    BYTE PTR [esp],al
c001da88:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001da8c:	c1 e0 02             	shl    eax,0x2
c001da8f:	83 c0 12             	add    eax,0x12
c001da92:	0f b6 d8             	movzx  ebx,al
c001da95:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001da99:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001da9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001daa3:	53                   	push   ebx
c001daa4:	51                   	push   ecx
c001daa5:	52                   	push   edx
c001daa6:	50                   	push   eax
c001daa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daab:	e8 e0 fb ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dab0:	83 c4 14             	add    esp,0x14
c001dab3:	0f b7 c0             	movzx  eax,ax
c001dab6:	c1 e0 10             	shl    eax,0x10
c001dab9:	89 c6                	mov    esi,eax
c001dabb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dabf:	83 c0 04             	add    eax,0x4
c001dac2:	c1 e0 02             	shl    eax,0x2
c001dac5:	0f b6 d8             	movzx  ebx,al
c001dac8:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001dacc:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001dad1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dad6:	53                   	push   ebx
c001dad7:	51                   	push   ecx
c001dad8:	52                   	push   edx
c001dad9:	50                   	push   eax
c001dada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dade:	e8 ad fb ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dae3:	83 c4 14             	add    esp,0x14
c001dae6:	0f b7 c0             	movzx  eax,ax
c001dae9:	09 f0                	or     eax,esi
c001daeb:	83 c4 10             	add    esp,0x10
c001daee:	5b                   	pop    ebx
c001daef:	5e                   	pop    esi
c001daf0:	c3                   	ret    
c001daf1:	90                   	nop
c001daf2:	66 90                	xchg   ax,ax

c001daf4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)>:
c001daf4:	83 ec 0c             	sub    esp,0xc
c001daf7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dafb:	0f b6 c0             	movzx  eax,al
c001dafe:	83 f8 40             	cmp    eax,0x40
c001db01:	0f 87 65 05 00 00    	ja     c001e06c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x578>
c001db07:	8b 04 85 30 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1bd0]
c001db0e:	ff e0                	jmp    eax
c001db10:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001db14:	0f b6 c0             	movzx  eax,al
c001db17:	83 f8 01             	cmp    eax,0x1
c001db1a:	75 0c                	jne    c001db28 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x34>
c001db1c:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c001db21:	e9 72 05 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db26:	66 90                	xchg   ax,ax
c001db28:	b8 18 dc 02 c0       	mov    eax,0xc002dc18
c001db2d:	e9 66 05 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db32:	66 90                	xchg   ax,ax
c001db34:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001db38:	0f b6 c0             	movzx  eax,al
c001db3b:	83 f8 08             	cmp    eax,0x8
c001db3e:	77 6c                	ja     c001dbac <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0xb8>
c001db40:	8b 04 85 34 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1acc]
c001db47:	ff e0                	jmp    eax
c001db49:	8d 76 00             	lea    esi,[esi+0x0]
c001db4c:	b8 29 dc 02 c0       	mov    eax,0xc002dc29
c001db51:	e9 42 05 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db56:	66 90                	xchg   ax,ax
c001db58:	b8 3d dc 02 c0       	mov    eax,0xc002dc3d
c001db5d:	e9 36 05 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db62:	66 90                	xchg   ax,ax
c001db64:	b8 50 dc 02 c0       	mov    eax,0xc002dc50
c001db69:	e9 2a 05 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db6e:	66 90                	xchg   ax,ax
c001db70:	b8 6b dc 02 c0       	mov    eax,0xc002dc6b
c001db75:	e9 1e 05 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db7a:	66 90                	xchg   ax,ax
c001db7c:	b8 82 dc 02 c0       	mov    eax,0xc002dc82
c001db81:	e9 12 05 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db86:	66 90                	xchg   ax,ax
c001db88:	b8 96 dc 02 c0       	mov    eax,0xc002dc96
c001db8d:	e9 06 05 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db92:	66 90                	xchg   ax,ax
c001db94:	b8 a9 dc 02 c0       	mov    eax,0xc002dca9
c001db99:	e9 fa 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001db9e:	66 90                	xchg   ax,ax
c001dba0:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c001dba5:	e9 ee 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dbaa:	66 90                	xchg   ax,ax
c001dbac:	b8 bd dc 02 c0       	mov    eax,0xc002dcbd
c001dbb1:	e9 e2 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dbb6:	66 90                	xchg   ax,ax
c001dbb8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dbbc:	0f b6 c0             	movzx  eax,al
c001dbbf:	85 c0                	test   eax,eax
c001dbc1:	75 0d                	jne    c001dbd0 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0xdc>
c001dbc3:	b8 d5 dc 02 c0       	mov    eax,0xc002dcd5
c001dbc8:	e9 cb 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dbcd:	8d 76 00             	lea    esi,[esi+0x0]
c001dbd0:	b8 ed dc 02 c0       	mov    eax,0xc002dced
c001dbd5:	e9 be 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dbda:	66 90                	xchg   ax,ax
c001dbdc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dbe0:	0f b6 c0             	movzx  eax,al
c001dbe3:	83 f8 01             	cmp    eax,0x1
c001dbe6:	74 14                	je     c001dbfc <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x108>
c001dbe8:	83 f8 02             	cmp    eax,0x2
c001dbeb:	74 1b                	je     c001dc08 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x114>
c001dbed:	85 c0                	test   eax,eax
c001dbef:	75 23                	jne    c001dc14 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x120>
c001dbf1:	b8 b4 e2 02 c0       	mov    eax,0xc002e2b4
c001dbf6:	e9 9d 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dbfb:	90                   	nop
c001dbfc:	b8 04 dd 02 c0       	mov    eax,0xc002dd04
c001dc01:	e9 92 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc06:	66 90                	xchg   ax,ax
c001dc08:	b8 17 dd 02 c0       	mov    eax,0xc002dd17
c001dc0d:	e9 86 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc12:	66 90                	xchg   ax,ax
c001dc14:	b8 29 dd 02 c0       	mov    eax,0xc002dd29
c001dc19:	e9 7a 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc1e:	66 90                	xchg   ax,ax
c001dc20:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dc24:	0f b6 c0             	movzx  eax,al
c001dc27:	83 f8 01             	cmp    eax,0x1
c001dc2a:	74 24                	je     c001dc50 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x15c>
c001dc2c:	83 f8 01             	cmp    eax,0x1
c001dc2f:	7f 07                	jg     c001dc38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x144>
c001dc31:	85 c0                	test   eax,eax
c001dc33:	74 0f                	je     c001dc44 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x150>
c001dc35:	eb 3d                	jmp    c001dc74 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x180>
c001dc37:	90                   	nop
c001dc38:	83 f8 02             	cmp    eax,0x2
c001dc3b:	74 1f                	je     c001dc5c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x168>
c001dc3d:	83 f8 03             	cmp    eax,0x3
c001dc40:	74 26                	je     c001dc68 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x174>
c001dc42:	eb 30                	jmp    c001dc74 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x180>
c001dc44:	b8 40 dd 02 c0       	mov    eax,0xc002dd40
c001dc49:	e9 4a 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc4e:	66 90                	xchg   ax,ax
c001dc50:	b8 55 dd 02 c0       	mov    eax,0xc002dd55
c001dc55:	e9 3e 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc5a:	66 90                	xchg   ax,ax
c001dc5c:	b8 6a dd 02 c0       	mov    eax,0xc002dd6a
c001dc61:	e9 32 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc66:	66 90                	xchg   ax,ax
c001dc68:	b8 7f dd 02 c0       	mov    eax,0xc002dd7f
c001dc6d:	e9 26 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc72:	66 90                	xchg   ax,ax
c001dc74:	b8 90 dd 02 c0       	mov    eax,0xc002dd90
c001dc79:	e9 1a 04 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc7e:	66 90                	xchg   ax,ax
c001dc80:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dc84:	0f b6 c0             	movzx  eax,al
c001dc87:	85 c0                	test   eax,eax
c001dc89:	74 09                	je     c001dc94 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x1a0>
c001dc8b:	83 f8 01             	cmp    eax,0x1
c001dc8e:	74 10                	je     c001dca0 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x1ac>
c001dc90:	eb 1a                	jmp    c001dcac <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x1b8>
c001dc92:	66 90                	xchg   ax,ax
c001dc94:	b8 aa dd 02 c0       	mov    eax,0xc002ddaa
c001dc99:	e9 fa 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dc9e:	66 90                	xchg   ax,ax
c001dca0:	b8 bd dd 02 c0       	mov    eax,0xc002ddbd
c001dca5:	e9 ee 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dcaa:	66 90                	xchg   ax,ax
c001dcac:	b8 d9 dd 02 c0       	mov    eax,0xc002ddd9
c001dcb1:	e9 e2 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dcb6:	66 90                	xchg   ax,ax
c001dcb8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dcbc:	0f b6 c0             	movzx  eax,al
c001dcbf:	83 f8 0a             	cmp    eax,0xa
c001dcc2:	0f 87 84 00 00 00    	ja     c001dd4c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x258>
c001dcc8:	8b 04 85 58 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1aa8]
c001dccf:	ff e0                	jmp    eax
c001dcd1:	8d 76 00             	lea    esi,[esi+0x0]
c001dcd4:	b8 76 de 02 c0       	mov    eax,0xc002de76
c001dcd9:	e9 ba 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dcde:	66 90                	xchg   ax,ax
c001dce0:	b8 ef dd 02 c0       	mov    eax,0xc002ddef
c001dce5:	e9 ae 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dcea:	66 90                	xchg   ax,ax
c001dcec:	b8 fe dd 02 c0       	mov    eax,0xc002ddfe
c001dcf1:	e9 a2 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dcf6:	66 90                	xchg   ax,ax
c001dcf8:	b8 0e de 02 c0       	mov    eax,0xc002de0e
c001dcfd:	e9 96 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd02:	66 90                	xchg   ax,ax
c001dd04:	b8 1d de 02 c0       	mov    eax,0xc002de1d
c001dd09:	e9 8a 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd0e:	66 90                	xchg   ax,ax
c001dd10:	b8 2f de 02 c0       	mov    eax,0xc002de2f
c001dd15:	e9 7e 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd1a:	66 90                	xchg   ax,ax
c001dd1c:	b8 3d de 02 c0       	mov    eax,0xc002de3d
c001dd21:	e9 72 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd26:	66 90                	xchg   ax,ax
c001dd28:	b8 4a de 02 c0       	mov    eax,0xc002de4a
c001dd2d:	e9 66 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd32:	66 90                	xchg   ax,ax
c001dd34:	b8 59 de 02 c0       	mov    eax,0xc002de59
c001dd39:	e9 5a 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd3e:	66 90                	xchg   ax,ax
c001dd40:	b8 68 de 02 c0       	mov    eax,0xc002de68
c001dd45:	e9 4e 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd4a:	66 90                	xchg   ax,ax
c001dd4c:	b8 86 de 02 c0       	mov    eax,0xc002de86
c001dd51:	e9 42 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd56:	66 90                	xchg   ax,ax
c001dd58:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dd5c:	0f b6 c0             	movzx  eax,al
c001dd5f:	83 f8 05             	cmp    eax,0x5
c001dd62:	77 54                	ja     c001ddb8 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x2c4>
c001dd64:	8b 04 85 84 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a7c]
c001dd6b:	ff e0                	jmp    eax
c001dd6d:	8d 76 00             	lea    esi,[esi+0x0]
c001dd70:	b8 97 de 02 c0       	mov    eax,0xc002de97
c001dd75:	e9 1e 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd7a:	66 90                	xchg   ax,ax
c001dd7c:	b8 ad de 02 c0       	mov    eax,0xc002dead
c001dd81:	e9 12 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd86:	66 90                	xchg   ax,ax
c001dd88:	b8 d8 e2 02 c0       	mov    eax,0xc002e2d8
c001dd8d:	e9 06 03 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd92:	66 90                	xchg   ax,ax
c001dd94:	b8 c5 de 02 c0       	mov    eax,0xc002dec5
c001dd99:	e9 fa 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dd9e:	66 90                	xchg   ax,ax
c001dda0:	b8 cf de 02 c0       	mov    eax,0xc002decf
c001dda5:	e9 ee 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ddaa:	66 90                	xchg   ax,ax
c001ddac:	b8 e7 de 02 c0       	mov    eax,0xc002dee7
c001ddb1:	e9 e2 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ddb6:	66 90                	xchg   ax,ax
c001ddb8:	b8 01 df 02 c0       	mov    eax,0xc002df01
c001ddbd:	e9 d6 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ddc2:	66 90                	xchg   ax,ax
c001ddc4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ddc8:	0f b6 c0             	movzx  eax,al
c001ddcb:	83 f8 06             	cmp    eax,0x6
c001ddce:	77 60                	ja     c001de30 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x33c>
c001ddd0:	8b 04 85 9c e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a64]
c001ddd7:	ff e0                	jmp    eax
c001ddd9:	8d 76 00             	lea    esi,[esi+0x0]
c001dddc:	b8 f8 e2 02 c0       	mov    eax,0xc002e2f8
c001dde1:	e9 b2 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dde6:	66 90                	xchg   ax,ax
c001dde8:	b8 1e df 02 c0       	mov    eax,0xc002df1e
c001dded:	e9 a6 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ddf2:	66 90                	xchg   ax,ax
c001ddf4:	b8 31 df 02 c0       	mov    eax,0xc002df31
c001ddf9:	e9 9a 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ddfe:	66 90                	xchg   ax,ax
c001de00:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c001de05:	e9 8e 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de0a:	66 90                	xchg   ax,ax
c001de0c:	b8 3b df 02 c0       	mov    eax,0xc002df3b
c001de11:	e9 82 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de16:	66 90                	xchg   ax,ax
c001de18:	b8 53 df 02 c0       	mov    eax,0xc002df53
c001de1d:	e9 76 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de22:	66 90                	xchg   ax,ax
c001de24:	b8 6a df 02 c0       	mov    eax,0xc002df6a
c001de29:	e9 6a 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de2e:	66 90                	xchg   ax,ax
c001de30:	b8 74 df 02 c0       	mov    eax,0xc002df74
c001de35:	e9 5e 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de3a:	66 90                	xchg   ax,ax
c001de3c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001de40:	0f b6 c0             	movzx  eax,al
c001de43:	83 f8 04             	cmp    eax,0x4
c001de46:	77 48                	ja     c001de90 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x39c>
c001de48:	8b 04 85 b8 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a48]
c001de4f:	ff e0                	jmp    eax
c001de51:	8d 76 00             	lea    esi,[esi+0x0]
c001de54:	b8 8a df 02 c0       	mov    eax,0xc002df8a
c001de59:	e9 3a 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de5e:	66 90                	xchg   ax,ax
c001de60:	b8 a2 df 02 c0       	mov    eax,0xc002dfa2
c001de65:	e9 2e 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de6a:	66 90                	xchg   ax,ax
c001de6c:	b8 b4 df 02 c0       	mov    eax,0xc002dfb4
c001de71:	e9 22 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de76:	66 90                	xchg   ax,ax
c001de78:	b8 c9 df 02 c0       	mov    eax,0xc002dfc9
c001de7d:	e9 16 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de82:	66 90                	xchg   ax,ax
c001de84:	b8 e1 df 02 c0       	mov    eax,0xc002dfe1
c001de89:	e9 0a 02 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de8e:	66 90                	xchg   ax,ax
c001de90:	b8 fa df 02 c0       	mov    eax,0xc002dffa
c001de95:	e9 fe 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001de9a:	66 90                	xchg   ax,ax
c001de9c:	b8 16 e0 02 c0       	mov    eax,0xc002e016
c001dea1:	e9 f2 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dea6:	66 90                	xchg   ax,ax
c001dea8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001deac:	0f b6 c0             	movzx  eax,al
c001deaf:	83 f8 40             	cmp    eax,0x40
c001deb2:	77 6c                	ja     c001df20 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x42c>
c001deb4:	8b 04 85 cc e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a34]
c001debb:	ff e0                	jmp    eax
c001debd:	8d 76 00             	lea    esi,[esi+0x0]
c001dec0:	b8 2a e0 02 c0       	mov    eax,0xc002e02a
c001dec5:	e9 ce 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001deca:	66 90                	xchg   ax,ax
c001decc:	b8 39 e0 02 c0       	mov    eax,0xc002e039
c001ded1:	e9 c2 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001ded6:	66 90                	xchg   ax,ax
c001ded8:	b8 48 e0 02 c0       	mov    eax,0xc002e048
c001dedd:	e9 b6 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dee2:	66 90                	xchg   ax,ax
c001dee4:	b8 5a e0 02 c0       	mov    eax,0xc002e05a
c001dee9:	e9 aa 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001deee:	66 90                	xchg   ax,ax
c001def0:	b8 70 e0 02 c0       	mov    eax,0xc002e070
c001def5:	e9 9e 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001defa:	66 90                	xchg   ax,ax
c001defc:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c001df01:	e9 92 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001df06:	66 90                	xchg   ax,ax
c001df08:	b8 92 e0 02 c0       	mov    eax,0xc002e092
c001df0d:	e9 86 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001df12:	66 90                	xchg   ax,ax
c001df14:	b8 a1 e0 02 c0       	mov    eax,0xc002e0a1
c001df19:	e9 7a 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001df1e:	66 90                	xchg   ax,ax
c001df20:	b8 ae e0 02 c0       	mov    eax,0xc002e0ae
c001df25:	e9 6e 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001df2a:	66 90                	xchg   ax,ax
c001df2c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001df30:	0f b6 c0             	movzx  eax,al
c001df33:	83 f8 09             	cmp    eax,0x9
c001df36:	0f 87 84 00 00 00    	ja     c001dfc0 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x4cc>
c001df3c:	8b 04 85 d0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1930]
c001df43:	ff e0                	jmp    eax
c001df45:	8d 76 00             	lea    esi,[esi+0x0]
c001df48:	b8 be e0 02 c0       	mov    eax,0xc002e0be
c001df4d:	e9 46 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001df52:	66 90                	xchg   ax,ax
c001df54:	b8 d6 e0 02 c0       	mov    eax,0xc002e0d6
c001df59:	e9 3a 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001df5e:	66 90                	xchg   ax,ax
c001df60:	b8 f0 e0 02 c0       	mov    eax,0xc002e0f0
c001df65:	e9 2e 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001df6a:	66 90                	xchg   ax,ax
c001df6c:	b8 f8 e0 02 c0       	mov    eax,0xc002e0f8
c001df71:	e9 22 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001df76:	66 90                	xchg   ax,ax
c001df78:	b8 0b e1 02 c0       	mov    eax,0xc002e10b
c001df7d:	e9 16 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001df82:	66 90                	xchg   ax,ax
c001df84:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c001df89:	e9 0a 01 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001df8e:	66 90                	xchg   ax,ax
c001df90:	b8 35 e1 02 c0       	mov    eax,0xc002e135
c001df95:	e9 fe 00 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001df9a:	66 90                	xchg   ax,ax
c001df9c:	b8 4f e1 02 c0       	mov    eax,0xc002e14f
c001dfa1:	e9 f2 00 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dfa6:	66 90                	xchg   ax,ax
c001dfa8:	b8 62 e1 02 c0       	mov    eax,0xc002e162
c001dfad:	e9 e6 00 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dfb2:	66 90                	xchg   ax,ax
c001dfb4:	b8 77 e1 02 c0       	mov    eax,0xc002e177
c001dfb9:	e9 da 00 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dfbe:	66 90                	xchg   ax,ax
c001dfc0:	b8 8c e1 02 c0       	mov    eax,0xc002e18c
c001dfc5:	e9 ce 00 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dfca:	66 90                	xchg   ax,ax
c001dfcc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dfd0:	0f b6 c0             	movzx  eax,al
c001dfd3:	83 f8 21             	cmp    eax,0x21
c001dfd6:	77 54                	ja     c001e02c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x538>
c001dfd8:	8b 04 85 f8 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1908]
c001dfdf:	ff e0                	jmp    eax
c001dfe1:	8d 76 00             	lea    esi,[esi+0x0]
c001dfe4:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c001dfe9:	e9 aa 00 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dfee:	66 90                	xchg   ax,ax
c001dff0:	b8 a6 e1 02 c0       	mov    eax,0xc002e1a6
c001dff5:	e9 9e 00 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001dffa:	66 90                	xchg   ax,ax
c001dffc:	b8 b8 e1 02 c0       	mov    eax,0xc002e1b8
c001e001:	e9 92 00 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e006:	66 90                	xchg   ax,ax
c001e008:	b8 ca e1 02 c0       	mov    eax,0xc002e1ca
c001e00d:	e9 86 00 00 00       	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e012:	66 90                	xchg   ax,ax
c001e014:	b8 e3 e1 02 c0       	mov    eax,0xc002e1e3
c001e019:	eb 7d                	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e01b:	90                   	nop
c001e01c:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c001e021:	eb 75                	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e023:	90                   	nop
c001e024:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c001e029:	eb 6d                	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e02b:	90                   	nop
c001e02c:	b8 fc e1 02 c0       	mov    eax,0xc002e1fc
c001e031:	eb 65                	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e033:	90                   	nop
c001e034:	b8 14 e2 02 c0       	mov    eax,0xc002e214
c001e039:	eb 5d                	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e03b:	90                   	nop
c001e03c:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c001e041:	eb 55                	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e043:	90                   	nop
c001e044:	b8 2f e2 02 c0       	mov    eax,0xc002e22f
c001e049:	eb 4d                	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e04b:	90                   	nop
c001e04c:	b8 c8 e3 02 c0       	mov    eax,0xc002e3c8
c001e051:	eb 45                	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e053:	90                   	nop
c001e054:	b8 49 e2 02 c0       	mov    eax,0xc002e249
c001e059:	eb 3d                	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e05b:	90                   	nop
c001e05c:	b8 ec e3 02 c0       	mov    eax,0xc002e3ec
c001e061:	eb 35                	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e063:	90                   	nop
c001e064:	b8 a1 e0 02 c0       	mov    eax,0xc002e0a1
c001e069:	eb 2d                	jmp    c001e098 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001e06b:	90                   	nop
c001e06c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001e070:	0f b6 c8             	movzx  ecx,al
c001e073:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e077:	0f b6 d0             	movzx  edx,al
c001e07a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e07e:	0f b6 c0             	movzx  eax,al
c001e081:	51                   	push   ecx
c001e082:	52                   	push   edx
c001e083:	50                   	push   eax
c001e084:	68 10 e4 02 c0       	push   0xc002e410
c001e089:	e8 ee 8e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001e08e:	83 c4 10             	add    esp,0x10
c001e091:	b8 64 e2 02 c0       	mov    eax,0xc002e264
c001e096:	66 90                	xchg   ax,ax
c001e098:	83 c4 0c             	add    esp,0xc
c001e09b:	c3                   	ret    

c001e09c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)>:
c001e09c:	55                   	push   ebp
c001e09d:	57                   	push   edi
c001e09e:	56                   	push   esi
c001e09f:	53                   	push   ebx
c001e0a0:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e0a6:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001e0ad:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001e0b4:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c001e0bb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001e0bf:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c001e0c3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e0c7:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001e0cc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e0d1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e0d6:	6a 0c                	push   0xc
c001e0d8:	51                   	push   ecx
c001e0d9:	52                   	push   edx
c001e0da:	50                   	push   eax
c001e0db:	ff b4 24 b0 00 00 00 	push   DWORD PTR [esp+0xb0]
c001e0e2:	e8 a9 f5 ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0e7:	83 c4 14             	add    esp,0x14
c001e0ea:	0f b7 c0             	movzx  eax,ax
c001e0ed:	c1 f8 10             	sar    eax,0x10
c001e0f0:	25 ff 00 00 00       	and    eax,0xff
c001e0f5:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c001e0f9:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c001e0fe:	0f 85 b4 02 00 00    	jne    c001e3b8 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x31c>
c001e104:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001e109:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e10e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e113:	51                   	push   ecx
c001e114:	52                   	push   edx
c001e115:	50                   	push   eax
c001e116:	ff b4 24 ac 00 00 00 	push   DWORD PTR [esp+0xac]
c001e11d:	e8 3e f7 ff ff       	call   c001d860 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e122:	83 c4 10             	add    esp,0x10
c001e125:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e12a:	0f b7 44 24 6e       	movzx  eax,WORD PTR [esp+0x6e]
c001e12f:	3d ff ff 00 00       	cmp    eax,0xffff
c001e134:	0f 84 82 02 00 00    	je     c001e3bc <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x320>
c001e13a:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001e13f:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e144:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e149:	51                   	push   ecx
c001e14a:	52                   	push   edx
c001e14b:	50                   	push   eax
c001e14c:	ff b4 24 ac 00 00 00 	push   DWORD PTR [esp+0xac]
c001e153:	e8 88 f7 ff ff       	call   c001d8e0 <PCIDriver::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e158:	83 c4 10             	add    esp,0x10
c001e15b:	66 89 44 24 6c       	mov    WORD PTR [esp+0x6c],ax
c001e160:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001e165:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e16a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e16f:	51                   	push   ecx
c001e170:	52                   	push   edx
c001e171:	50                   	push   eax
c001e172:	ff b4 24 ac 00 00 00 	push   DWORD PTR [esp+0xac]
c001e179:	e8 62 f8 ff ff       	call   c001d9e0 <PCIDriver::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e17e:	83 c4 10             	add    esp,0x10
c001e181:	88 44 24 7f          	mov    BYTE PTR [esp+0x7f],al
c001e185:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001e18a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e18f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e194:	6a 3c                	push   0x3c
c001e196:	51                   	push   ecx
c001e197:	52                   	push   edx
c001e198:	50                   	push   eax
c001e199:	ff b4 24 b0 00 00 00 	push   DWORD PTR [esp+0xb0]
c001e1a0:	e8 eb f4 ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1a5:	83 c4 14             	add    esp,0x14
c001e1a8:	0f b7 c0             	movzx  eax,ax
c001e1ab:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001e1af:	c1 6c 24 68 08       	shr    DWORD PTR [esp+0x68],0x8
c001e1b4:	81 64 24 68 ff 00 00 00 	and    DWORD PTR [esp+0x68],0xff
c001e1bc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e1c0:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e1c4:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001e1c9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e1cf:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e1d5:	85 c0                	test   eax,eax
c001e1d7:	0f 84 87 00 00 00    	je     c001e264 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x1c8>
c001e1dd:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c001e1e5:	8d 76 00             	lea    esi,[esi+0x0]
c001e1e8:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001e1ed:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e1f3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e1f9:	39 44 24 78          	cmp    DWORD PTR [esp+0x78],eax
c001e1fd:	7d 65                	jge    c001e264 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x1c8>
c001e1ff:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e204:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001e209:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e20f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001e213:	83 c1 2a             	add    ecx,0x2a
c001e216:	8b 44 c8 0c          	mov    eax,DWORD PTR [eax+ecx*8+0xc]
c001e21a:	0f b7 c0             	movzx  eax,ax
c001e21d:	39 c2                	cmp    edx,eax
c001e21f:	75 3b                	jne    c001e25c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x1c0>
c001e221:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001e226:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e22c:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c001e230:	83 c2 2a             	add    edx,0x2a
c001e233:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e237:	0f b6 c0             	movzx  eax,al
c001e23a:	39 44 24 68          	cmp    DWORD PTR [esp+0x68],eax
c001e23e:	75 1c                	jne    c001e25c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x1c0>
c001e240:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c001e245:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e24b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c001e24f:	83 c2 2a             	add    edx,0x2a
c001e252:	8a 44 d0 0f          	mov    al,BYTE PTR [eax+edx*8+0xf]
c001e256:	88 44 24 7f          	mov    BYTE PTR [esp+0x7f],al
c001e25a:	66 90                	xchg   ax,ax
c001e25c:	83 44 24 78 01       	add    DWORD PTR [esp+0x78],0x1
c001e261:	eb 85                	jmp    c001e1e8 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x14c>
c001e263:	90                   	nop
c001e264:	c7 44 24 74 00 00 00 00 	mov    DWORD PTR [esp+0x74],0x0
c001e26c:	83 7c 24 74 05       	cmp    DWORD PTR [esp+0x74],0x5
c001e271:	7f 3d                	jg     c001e2b0 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x214>
c001e273:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c001e278:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001e27d:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001e282:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001e286:	0f b6 c0             	movzx  eax,al
c001e289:	53                   	push   ebx
c001e28a:	51                   	push   ecx
c001e28b:	52                   	push   edx
c001e28c:	50                   	push   eax
c001e28d:	ff b4 24 b0 00 00 00 	push   DWORD PTR [esp+0xb0]
c001e294:	e8 cb f7 ff ff       	call   c001da64 <PCIDriver::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e299:	83 c4 14             	add    esp,0x14
c001e29c:	89 c2                	mov    edx,eax
c001e29e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001e2a2:	89 54 84 20          	mov    DWORD PTR [esp+eax*4+0x20],edx
c001e2a6:	83 44 24 74 01       	add    DWORD PTR [esp+0x74],0x1
c001e2ab:	eb bf                	jmp    c001e26c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x1d0>
c001e2ad:	8d 76 00             	lea    esi,[esi+0x0]
c001e2b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e2b4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e2b8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e2bc:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001e2c0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e2c4:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001e2c8:	0f b7 44 24 6c       	movzx  eax,WORD PTR [esp+0x6c]
c001e2cd:	c1 f8 08             	sar    eax,0x8
c001e2d0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e2d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c001e2d8:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001e2dc:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c001e2e0:	0f b6 c8             	movzx  ecx,al
c001e2e3:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c001e2e7:	0f b6 d0             	movzx  edx,al
c001e2ea:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001e2ee:	0f b6 c0             	movzx  eax,al
c001e2f1:	6a 02                	push   0x2
c001e2f3:	51                   	push   ecx
c001e2f4:	52                   	push   edx
c001e2f5:	50                   	push   eax
c001e2f6:	ff b4 24 b0 00 00 00 	push   DWORD PTR [esp+0xb0]
c001e2fd:	e8 8e f3 ff ff       	call   c001d690 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e302:	83 c4 14             	add    esp,0x14
c001e305:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e30a:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001e30f:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e314:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e319:	51                   	push   ecx
c001e31a:	52                   	push   edx
c001e31b:	50                   	push   eax
c001e31c:	ff b4 24 ac 00 00 00 	push   DWORD PTR [esp+0xac]
c001e323:	e8 34 f6 ff ff       	call   c001d95c <PCIDriver::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e328:	83 c4 10             	add    esp,0x10
c001e32b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e32f:	66 8b 44 24 6e       	mov    ax,WORD PTR [esp+0x6e]
c001e334:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e339:	8a 44 24 7f          	mov    al,BYTE PTR [esp+0x7f]
c001e33d:	88 44 24 38          	mov    BYTE PTR [esp+0x38],al
c001e341:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e345:	8d 54 24 18          	lea    edx,[esp+0x18]
c001e349:	b9 09 00 00 00       	mov    ecx,0x9
c001e34e:	fc                   	cld    
c001e34f:	89 c7                	mov    edi,eax
c001e351:	89 d6                	mov    esi,edx
c001e353:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e355:	c7 44 24 60 88 01 00 00 	mov    DWORD PTR [esp+0x60],0x188
c001e35d:	83 ec 0c             	sub    esp,0xc
c001e360:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001e364:	e8 a6 22 ff ff       	call   c001060f <malloc>
c001e369:	83 c4 10             	add    esp,0x10
c001e36c:	89 c5                	mov    ebp,eax
c001e36e:	83 ec 08             	sub    esp,0x8
c001e371:	83 ec 24             	sub    esp,0x24
c001e374:	89 e0                	mov    eax,esp
c001e376:	89 c3                	mov    ebx,eax
c001e378:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e37c:	ba 09 00 00 00       	mov    edx,0x9
c001e381:	89 df                	mov    edi,ebx
c001e383:	89 c6                	mov    esi,eax
c001e385:	89 d1                	mov    ecx,edx
c001e387:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e389:	55                   	push   ebp
c001e38a:	e8 b5 bd 00 00       	call   c002a144 <UnknownHardware::UnknownHardware(DevicePCIConnectionInfo)>
c001e38f:	83 c4 30             	add    esp,0x30
c001e392:	89 6c 24 64          	mov    DWORD PTR [esp+0x64],ebp
c001e396:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c001e39d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3a0:	83 ec 08             	sub    esp,0x8
c001e3a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001e3a7:	50                   	push   eax
c001e3a8:	e8 6f 98 fe ff       	call   c0007c1c <Hardware::addChild(Hardware*)>
c001e3ad:	83 c4 10             	add    esp,0x10
c001e3b0:	e9 0b 00 00 00       	jmp    c001e3c0 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x324>
c001e3b5:	8d 76 00             	lea    esi,[esi+0x0]
c001e3b8:	90                   	nop
c001e3b9:	eb 05                	jmp    c001e3c0 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x324>
c001e3bb:	90                   	nop
c001e3bc:	90                   	nop
c001e3bd:	8d 76 00             	lea    esi,[esi+0x0]
c001e3c0:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e3c6:	5b                   	pop    ebx
c001e3c7:	5e                   	pop    esi
c001e3c8:	5f                   	pop    edi
c001e3c9:	5d                   	pop    ebp
c001e3ca:	c3                   	ret    
c001e3cb:	90                   	nop

c001e3cc <PCIDriver::checkDevice(unsigned char, unsigned char)>:
c001e3cc:	83 ec 2c             	sub    esp,0x2c
c001e3cf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e3d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e3d7:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e3db:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e3df:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e3e4:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001e3e9:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e3ee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e3f3:	51                   	push   ecx
c001e3f4:	52                   	push   edx
c001e3f5:	50                   	push   eax
c001e3f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e3fa:	e8 61 f4 ff ff       	call   c001d860 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e3ff:	83 c4 10             	add    esp,0x10
c001e402:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e407:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001e40c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e411:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e416:	51                   	push   ecx
c001e417:	52                   	push   edx
c001e418:	50                   	push   eax
c001e419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e41d:	e8 7a fc ff ff       	call   c001e09c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)>
c001e422:	83 c4 10             	add    esp,0x10
c001e425:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001e42a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e42f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e434:	51                   	push   ecx
c001e435:	52                   	push   edx
c001e436:	50                   	push   eax
c001e437:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e43b:	e8 60 f4 ff ff       	call   c001d8a0 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e440:	83 c4 10             	add    esp,0x10
c001e443:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e447:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001e44b:	0f be c0             	movsx  eax,al
c001e44e:	85 c0                	test   eax,eax
c001e450:	79 6e                	jns    c001e4c0 <PCIDriver::checkDevice(unsigned char, unsigned char)+0xf4>
c001e452:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e457:	90                   	nop
c001e458:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e45d:	83 f8 07             	cmp    eax,0x7
c001e460:	77 5e                	ja     c001e4c0 <PCIDriver::checkDevice(unsigned char, unsigned char)+0xf4>
c001e462:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001e467:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e46c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e471:	51                   	push   ecx
c001e472:	52                   	push   edx
c001e473:	50                   	push   eax
c001e474:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e478:	e8 e3 f3 ff ff       	call   c001d860 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e47d:	83 c4 10             	add    esp,0x10
c001e480:	0f b7 c0             	movzx  eax,ax
c001e483:	3d ff ff 00 00       	cmp    eax,0xffff
c001e488:	0f 95 c0             	setne  al
c001e48b:	0f b6 c0             	movzx  eax,al
c001e48e:	85 c0                	test   eax,eax
c001e490:	74 1e                	je     c001e4b0 <PCIDriver::checkDevice(unsigned char, unsigned char)+0xe4>
c001e492:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001e497:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e49c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e4a1:	51                   	push   ecx
c001e4a2:	52                   	push   edx
c001e4a3:	50                   	push   eax
c001e4a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e4a8:	e8 ef fb ff ff       	call   c001e09c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)>
c001e4ad:	83 c4 10             	add    esp,0x10
c001e4b0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e4b4:	83 c0 01             	add    eax,0x1
c001e4b7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e4bb:	eb 9b                	jmp    c001e458 <PCIDriver::checkDevice(unsigned char, unsigned char)+0x8c>
c001e4bd:	8d 76 00             	lea    esi,[esi+0x0]
c001e4c0:	90                   	nop
c001e4c1:	83 c4 2c             	add    esp,0x2c
c001e4c4:	c3                   	ret    
c001e4c5:	90                   	nop
c001e4c6:	66 90                	xchg   ax,ax

c001e4c8 <PCIDriver::checkBus(unsigned char)>:
c001e4c8:	83 ec 2c             	sub    esp,0x2c
c001e4cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e4cf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e4d3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e4d8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e4dd:	83 f8 1f             	cmp    eax,0x1f
c001e4e0:	77 2a                	ja     c001e50c <PCIDriver::checkBus(unsigned char)+0x44>
c001e4e2:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001e4e7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e4ec:	83 ec 04             	sub    esp,0x4
c001e4ef:	52                   	push   edx
c001e4f0:	50                   	push   eax
c001e4f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e4f5:	e8 d2 fe ff ff       	call   c001e3cc <PCIDriver::checkDevice(unsigned char, unsigned char)>
c001e4fa:	83 c4 10             	add    esp,0x10
c001e4fd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e501:	83 c0 01             	add    eax,0x1
c001e504:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e508:	eb ce                	jmp    c001e4d8 <PCIDriver::checkBus(unsigned char)+0x10>
c001e50a:	66 90                	xchg   ax,ax
c001e50c:	90                   	nop
c001e50d:	83 c4 2c             	add    esp,0x2c
c001e510:	c3                   	ret    
c001e511:	90                   	nop
c001e512:	66 90                	xchg   ax,ax

c001e514 <PCIDriver::enumerateDevices()>:
c001e514:	83 ec 1c             	sub    esp,0x1c
c001e517:	6a 00                	push   0x0
c001e519:	6a 00                	push   0x0
c001e51b:	6a 00                	push   0x0
c001e51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e521:	e8 7a f3 ff ff       	call   c001d8a0 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e526:	83 c4 10             	add    esp,0x10
c001e529:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e52e:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001e533:	25 80 00 00 00       	and    eax,0x80
c001e538:	75 16                	jne    c001e550 <PCIDriver::enumerateDevices()+0x3c>
c001e53a:	83 ec 08             	sub    esp,0x8
c001e53d:	6a 00                	push   0x0
c001e53f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e543:	e8 80 ff ff ff       	call   c001e4c8 <PCIDriver::checkBus(unsigned char)>
c001e548:	83 c4 10             	add    esp,0x10
c001e54b:	eb 63                	jmp    c001e5b0 <PCIDriver::enumerateDevices()+0x9c>
c001e54d:	8d 76 00             	lea    esi,[esi+0x0]
c001e550:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e555:	8d 76 00             	lea    esi,[esi+0x0]
c001e558:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e55d:	83 f8 07             	cmp    eax,0x7
c001e560:	77 4e                	ja     c001e5b0 <PCIDriver::enumerateDevices()+0x9c>
c001e562:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e567:	50                   	push   eax
c001e568:	6a 00                	push   0x0
c001e56a:	6a 00                	push   0x0
c001e56c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e570:	e8 eb f2 ff ff       	call   c001d860 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e575:	83 c4 10             	add    esp,0x10
c001e578:	0f b7 c0             	movzx  eax,ax
c001e57b:	3d ff ff 00 00       	cmp    eax,0xffff
c001e580:	0f 95 c0             	setne  al
c001e583:	0f b6 c0             	movzx  eax,al
c001e586:	85 c0                	test   eax,eax
c001e588:	75 22                	jne    c001e5ac <PCIDriver::enumerateDevices()+0x98>
c001e58a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e58f:	83 ec 08             	sub    esp,0x8
c001e592:	50                   	push   eax
c001e593:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e597:	e8 2c ff ff ff       	call   c001e4c8 <PCIDriver::checkBus(unsigned char)>
c001e59c:	83 c4 10             	add    esp,0x10
c001e59f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e5a3:	83 c0 01             	add    eax,0x1
c001e5a6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e5aa:	eb ac                	jmp    c001e558 <PCIDriver::enumerateDevices()+0x44>
c001e5ac:	90                   	nop
c001e5ad:	8d 76 00             	lea    esi,[esi+0x0]
c001e5b0:	90                   	nop
c001e5b1:	83 c4 1c             	add    esp,0x1c
c001e5b4:	c3                   	ret    
c001e5b5:	90                   	nop
c001e5b6:	66 90                	xchg   ax,ax

c001e5b8 <PCIDriver::initialise()>:
c001e5b8:	83 ec 0c             	sub    esp,0xc
c001e5bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5c2:	6a 04                	push   0x4
c001e5c4:	6a 08                	push   0x8
c001e5c6:	68 f8 0c 00 00       	push   0xcf8
c001e5cb:	50                   	push   eax
c001e5cc:	e8 1b 98 fe ff       	call   c0007dec <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001e5d1:	83 c4 10             	add    esp,0x10
c001e5d4:	83 ec 0c             	sub    esp,0xc
c001e5d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5db:	e8 34 ff ff ff       	call   c001e514 <PCIDriver::enumerateDevices()>
c001e5e0:	83 c4 10             	add    esp,0x10
c001e5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5e9:	83 c0 08             	add    eax,0x8
c001e5ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5ee:	83 ec 0c             	sub    esp,0xc
c001e5f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5f5:	ff d0                	call   eax
c001e5f7:	83 c4 10             	add    esp,0x10
c001e5fa:	90                   	nop
c001e5fb:	83 c4 0c             	add    esp,0xc
c001e5fe:	c3                   	ret    
c001e5ff:	90                   	nop

c001e600 <PCIDriver::detect()>:
c001e600:	83 ec 2c             	sub    esp,0x2c
c001e603:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e607:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e60a:	83 c0 74             	add    eax,0x74
c001e60d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e611:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e615:	83 ec 08             	sub    esp,0x8
c001e618:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e61c:	50                   	push   eax
c001e61d:	e8 aa a3 00 00       	call   c00289cc <std::vector<Hardware*>::begin()>
c001e622:	83 c4 0c             	add    esp,0xc
c001e625:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e629:	83 ec 08             	sub    esp,0x8
c001e62c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e630:	50                   	push   eax
c001e631:	e8 ba a3 00 00       	call   c00289f0 <std::vector<Hardware*>::end()>
c001e636:	83 c4 0c             	add    esp,0xc
c001e639:	8d 76 00             	lea    esi,[esi+0x0]
c001e63c:	83 ec 08             	sub    esp,0x8
c001e63f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e643:	50                   	push   eax
c001e644:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e648:	50                   	push   eax
c001e649:	e8 72 a0 00 00       	call   c00286c0 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c001e64e:	83 c4 10             	add    esp,0x10
c001e651:	0f b6 c0             	movzx  eax,al
c001e654:	85 c0                	test   eax,eax
c001e656:	74 3c                	je     c001e694 <PCIDriver::detect()+0x94>
c001e658:	83 ec 0c             	sub    esp,0xc
c001e65b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e65f:	50                   	push   eax
c001e660:	e8 6f a0 00 00       	call   c00286d4 <std::vector<Hardware*>::iterator::operator*() const>
c001e665:	83 c4 10             	add    esp,0x10
c001e668:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e66c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e670:	83 ec 08             	sub    esp,0x8
c001e673:	8d 54 24 18          	lea    edx,[esp+0x18]
c001e677:	52                   	push   edx
c001e678:	50                   	push   eax
c001e679:	e8 96 a3 00 00       	call   c0028a14 <std::vector<Hardware*>::iterator::operator++()>
c001e67e:	83 c4 0c             	add    esp,0xc
c001e681:	83 ec 0c             	sub    esp,0xc
c001e684:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e688:	50                   	push   eax
c001e689:	e8 1e a0 00 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c001e68e:	83 c4 10             	add    esp,0x10
c001e691:	eb a9                	jmp    c001e63c <PCIDriver::detect()+0x3c>
c001e693:	90                   	nop
c001e694:	83 ec 0c             	sub    esp,0xc
c001e697:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e69b:	50                   	push   eax
c001e69c:	e8 0b a0 00 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c001e6a1:	83 c4 10             	add    esp,0x10
c001e6a4:	83 ec 0c             	sub    esp,0xc
c001e6a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e6ab:	50                   	push   eax
c001e6ac:	e8 fb 9f 00 00       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c001e6b1:	83 c4 10             	add    esp,0x10
c001e6b4:	90                   	nop
c001e6b5:	83 c4 2c             	add    esp,0x2c
c001e6b8:	c3                   	ret    
c001e6b9:	90                   	nop

c001e6ba <UART16550::detect()>:
c001e6ba:	c3                   	ret    
c001e6bb:	90                   	nop

c001e6bc <UART16550::deinitialise()>:
c001e6bc:	c3                   	ret    
c001e6bd:	90                   	nop

c001e6be <UART16550::setPowerState(DevicePowerState)>:
c001e6be:	c3                   	ret    
c001e6bf:	90                   	nop

c001e6c0 <UART16550::getHumanReadableName()>:
c001e6c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6c4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e6c7:	b8 80 e9 02 c0       	mov    eax,0xc002e980
c001e6cc:	8d 4a ff             	lea    ecx,[edx-0x1]
c001e6cf:	83 f9 07             	cmp    ecx,0x7
c001e6d2:	77 05                	ja     c001e6d9 <UART16550::getHumanReadableName()+0x19>
c001e6d4:	6b d2 30             	imul   edx,edx,0x30
c001e6d7:	01 d0                	add    eax,edx
c001e6d9:	c3                   	ret    

c001e6da <UART16550::areInterruptsSupported()>:
c001e6da:	b0 01                	mov    al,0x1
c001e6dc:	c3                   	ret    
c001e6dd:	90                   	nop

c001e6de <UART16550::areInterruptsEnabled()>:
c001e6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6e2:	8a 40 1c             	mov    al,BYTE PTR [eax+0x1c]
c001e6e5:	c3                   	ret    

c001e6e6 <UART16550::getBaud()>:
c001e6e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ea:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001e6ed:	c3                   	ret    

c001e6ee <UART16550::getHardwareBufferSize()>:
c001e6ee:	b8 01 00 00 00       	mov    eax,0x1
c001e6f3:	c3                   	ret    

c001e6f4 <UART16550::getNumberBytesInIRQBuffer()>:
c001e6f4:	31 c0                	xor    eax,eax
c001e6f6:	c3                   	ret    
c001e6f7:	90                   	nop

c001e6f8 <UART16550::getMaximumBytesInIRQBuffer()>:
c001e6f8:	31 c0                	xor    eax,eax
c001e6fa:	c3                   	ret    
c001e6fb:	90                   	nop

c001e6fc <UART16550::emptyBuffer()>:
c001e6fc:	c3                   	ret    
c001e6fd:	90                   	nop

c001e6fe <UART16550::waitForData()>:
c001e6fe:	53                   	push   ebx
c001e6ff:	83 ec 08             	sub    esp,0x8
c001e702:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e706:	83 ec 0c             	sub    esp,0xc
c001e709:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e70b:	53                   	push   ebx
c001e70c:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001e70f:	83 c4 10             	add    esp,0x10
c001e712:	84 c0                	test   al,al
c001e714:	74 f0                	je     c001e706 <UART16550::waitForData()+0x8>
c001e716:	83 c4 08             	add    esp,0x8
c001e719:	5b                   	pop    ebx
c001e71a:	c3                   	ret    
c001e71b:	90                   	nop

c001e71c <UART16550::isParityModeSupported(SerialParityMode)>:
c001e71c:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c001e721:	0f 96 c0             	setbe  al
c001e724:	c3                   	ret    
c001e725:	90                   	nop

c001e726 <UART16550::getPartityMode()>:
c001e726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e72a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e72d:	c3                   	ret    

c001e72e <UART16550::isTransmissionSizeValid(int)>:
c001e72e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e732:	83 e8 05             	sub    eax,0x5
c001e735:	83 f8 03             	cmp    eax,0x3
c001e738:	0f 96 c0             	setbe  al
c001e73b:	c3                   	ret    

c001e73c <UART16550::getTransmissionSize()>:
c001e73c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e740:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e743:	c3                   	ret    

c001e744 <UART16550::isNumberOfStopBitsValid(int)>:
c001e744:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e748:	48                   	dec    eax
c001e749:	83 f8 01             	cmp    eax,0x1
c001e74c:	0f 96 c0             	setbe  al
c001e74f:	c3                   	ret    

c001e750 <UART16550::getNumberOfStopBits()>:
c001e750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e754:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001e757:	c3                   	ret    

c001e758 <UART16550::supportsHardwareStopBits()>:
c001e758:	b0 01                	mov    al,0x1
c001e75a:	c3                   	ret    
c001e75b:	90                   	nop

c001e75c <UART16550::supportsHardwareParity()>:
c001e75c:	b0 01                	mov    al,0x1
c001e75e:	c3                   	ret    
c001e75f:	90                   	nop

c001e760 <UART16550::enableInterrupts(bool)>:
c001e760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e764:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e768:	88 50 1c             	mov    BYTE PTR [eax+0x1c],dl
c001e76b:	c7 44 24 04 a8 e7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002e7a8
c001e773:	e9 ec 22 ff ff       	jmp    c0010a64 <KePanic(char const*)>

c001e778 <UART16550::setBaud(int)>:
c001e778:	53                   	push   ebx
c001e779:	83 ec 10             	sub    esp,0x10
c001e77c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e780:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e786:	53                   	push   ebx
c001e787:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001e78a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001e78d:	c7 44 24 20 bb e7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002e7bb
c001e795:	83 c4 18             	add    esp,0x18
c001e798:	5b                   	pop    ebx
c001e799:	e9 c6 22 ff ff       	jmp    c0010a64 <KePanic(char const*)>

c001e79e <UART16550::write(unsigned char)>:
c001e79e:	c7 44 24 04 ca e7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002e7ca
c001e7a6:	e9 b9 22 ff ff       	jmp    c0010a64 <KePanic(char const*)>
c001e7ab:	90                   	nop

c001e7ac <UART16550::isDataReady()>:
c001e7ac:	83 ec 18             	sub    esp,0x18
c001e7af:	68 df e7 02 c0       	push   0xc002e7df
c001e7b4:	e8 ab 22 ff ff       	call   c0010a64 <KePanic(char const*)>
c001e7b9:	31 c0                	xor    eax,eax
c001e7bb:	83 c4 1c             	add    esp,0x1c
c001e7be:	c3                   	ret    
c001e7bf:	90                   	nop

c001e7c0 <UART16550::setParityMode(SerialParityMode)>:
c001e7c0:	56                   	push   esi
c001e7c1:	53                   	push   ebx
c001e7c2:	83 ec 0c             	sub    esp,0xc
c001e7c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e7c9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001e7cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e7cf:	56                   	push   esi
c001e7d0:	53                   	push   ebx
c001e7d1:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001e7d4:	83 c4 10             	add    esp,0x10
c001e7d7:	84 c0                	test   al,al
c001e7d9:	74 13                	je     c001e7ee <UART16550::setParityMode(SerialParityMode)+0x2e>
c001e7db:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c001e7de:	c7 44 24 10 f6 e7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002e7f6
c001e7e6:	5a                   	pop    edx
c001e7e7:	5b                   	pop    ebx
c001e7e8:	5e                   	pop    esi
c001e7e9:	e9 76 22 ff ff       	jmp    c0010a64 <KePanic(char const*)>
c001e7ee:	58                   	pop    eax
c001e7ef:	5b                   	pop    ebx
c001e7f0:	5e                   	pop    esi
c001e7f1:	c3                   	ret    

c001e7f2 <UART16550::setTransmissionSize(int)>:
c001e7f2:	56                   	push   esi
c001e7f3:	53                   	push   ebx
c001e7f4:	83 ec 0c             	sub    esp,0xc
c001e7f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e7fb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001e7ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e801:	56                   	push   esi
c001e802:	53                   	push   ebx
c001e803:	ff 50 5c             	call   DWORD PTR [eax+0x5c]
c001e806:	83 c4 10             	add    esp,0x10
c001e809:	84 c0                	test   al,al
c001e80b:	74 13                	je     c001e820 <UART16550::setTransmissionSize(int)+0x2e>
c001e80d:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001e810:	c7 44 24 10 0f e8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002e80f
c001e818:	5a                   	pop    edx
c001e819:	5b                   	pop    ebx
c001e81a:	5e                   	pop    esi
c001e81b:	e9 44 22 ff ff       	jmp    c0010a64 <KePanic(char const*)>
c001e820:	58                   	pop    eax
c001e821:	5b                   	pop    ebx
c001e822:	5e                   	pop    esi
c001e823:	c3                   	ret    

c001e824 <UART16550::setNumberOfStopBits(int)>:
c001e824:	56                   	push   esi
c001e825:	53                   	push   ebx
c001e826:	83 ec 0c             	sub    esp,0xc
c001e829:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e82d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001e831:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e833:	56                   	push   esi
c001e834:	53                   	push   ebx
c001e835:	ff 50 68             	call   DWORD PTR [eax+0x68]
c001e838:	83 c4 10             	add    esp,0x10
c001e83b:	84 c0                	test   al,al
c001e83d:	74 13                	je     c001e852 <UART16550::setNumberOfStopBits(int)+0x2e>
c001e83f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001e842:	c7 44 24 10 2e e8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002e82e
c001e84a:	5a                   	pop    edx
c001e84b:	5b                   	pop    ebx
c001e84c:	5e                   	pop    esi
c001e84d:	e9 12 22 ff ff       	jmp    c0010a64 <KePanic(char const*)>
c001e852:	58                   	pop    eax
c001e853:	5b                   	pop    ebx
c001e854:	5e                   	pop    esi
c001e855:	c3                   	ret    

c001e856 <UART16550::didAnyErrorsOccur()>:
c001e856:	83 ec 18             	sub    esp,0x18
c001e859:	68 4d e8 02 c0       	push   0xc002e84d
c001e85e:	e8 01 22 ff ff       	call   c0010a64 <KePanic(char const*)>
c001e863:	31 c0                	xor    eax,eax
c001e865:	83 c4 1c             	add    esp,0x1c
c001e868:	c3                   	ret    
c001e869:	90                   	nop

c001e86a <UART16550::clearAllErrors()>:
c001e86a:	c7 44 24 04 6a e8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002e86a
c001e872:	e9 ed 21 ff ff       	jmp    c0010a64 <KePanic(char const*)>
c001e877:	90                   	nop

c001e878 <UART16550::clearFirstError()>:
c001e878:	c7 44 24 04 84 e8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002e884
c001e880:	e9 df 21 ff ff       	jmp    c0010a64 <KePanic(char const*)>
c001e885:	90                   	nop

c001e886 <UART16550::getFirstError()>:
c001e886:	83 ec 18             	sub    esp,0x18
c001e889:	68 9f e8 02 c0       	push   0xc002e89f
c001e88e:	e8 d1 21 ff ff       	call   c0010a64 <KePanic(char const*)>
c001e893:	b8 01 00 00 00       	mov    eax,0x1
c001e898:	83 c4 1c             	add    esp,0x1c
c001e89b:	c3                   	ret    

c001e89c <UART16550::initialise()>:
c001e89c:	53                   	push   ebx
c001e89d:	83 ec 08             	sub    esp,0x8
c001e8a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e8a4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001e8a7:	83 78 70 00          	cmp    DWORD PTR [eax+0x70],0x0
c001e8ab:	75 09                	jne    c001e8b6 <UART16550::initialise()+0x1a>
c001e8ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e8b0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c001e8b4:	eb 10                	jmp    c001e8c6 <UART16550::initialise()+0x2a>
c001e8b6:	83 ec 0c             	sub    esp,0xc
c001e8b9:	68 b8 e8 02 c0       	push   0xc002e8b8
c001e8be:	e8 a1 21 ff ff       	call   c0010a64 <KePanic(char const*)>
c001e8c3:	83 c4 10             	add    esp,0x10
c001e8c6:	6a 01                	push   0x1
c001e8c8:	6a 08                	push   0x8
c001e8ca:	0f b7 43 08          	movzx  eax,WORD PTR [ebx+0x8]
c001e8ce:	50                   	push   eax
c001e8cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001e8d2:	e8 15 95 fe ff       	call   c0007dec <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001e8d7:	a1 e4 0e 03 c0       	mov    eax,ds:0xc0030ee4
c001e8dc:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c001e8df:	8d 50 01             	lea    edx,[eax+0x1]
c001e8e2:	89 15 e4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ee4,edx
c001e8e8:	83 c4 18             	add    esp,0x18
c001e8eb:	5b                   	pop    ebx
c001e8ec:	c3                   	ret    
c001e8ed:	90                   	nop

c001e8ee <UART16550::read()>:
c001e8ee:	83 ec 18             	sub    esp,0x18
c001e8f1:	68 d8 e8 02 c0       	push   0xc002e8d8
c001e8f6:	e8 69 21 ff ff       	call   c0010a64 <KePanic(char const*)>
c001e8fb:	90                   	nop

c001e8fc <UART16550::getBaudDivisor(int)>:
c001e8fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e900:	b8 01 00 00 00       	mov    eax,0x1
c001e905:	81 f9 ff c1 01 00    	cmp    ecx,0x1c1ff
c001e90b:	7f 11                	jg     c001e91e <UART16550::getBaudDivisor(int)+0x22>
c001e90d:	b8 ff ff 00 00       	mov    eax,0xffff
c001e912:	85 c9                	test   ecx,ecx
c001e914:	7e 08                	jle    c001e91e <UART16550::getBaudDivisor(int)+0x22>
c001e916:	b8 00 c2 01 00       	mov    eax,0x1c200
c001e91b:	99                   	cdq    
c001e91c:	f7 f9                	idiv   ecx
c001e91e:	c3                   	ret    
c001e91f:	90                   	nop

c001e920 <UART16550::getClosestSupportedBaud(int)>:
c001e920:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e924:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e928:	e8 cf ff ff ff       	call   c001e8fc <UART16550::getBaudDivisor(int)>
c001e92d:	5a                   	pop    edx
c001e92e:	59                   	pop    ecx
c001e92f:	89 c1                	mov    ecx,eax
c001e931:	b8 00 c2 01 00       	mov    eax,0x1c200
c001e936:	99                   	cdq    
c001e937:	f7 f9                	idiv   ecx
c001e939:	c3                   	ret    
c001e93a:	66 90                	xchg   ax,ax

c001e93c <FAT::getName()>:
c001e93c:	b8 30 eb 02 c0       	mov    eax,0xc002eb30
c001e941:	c3                   	ret    
c001e942:	66 90                	xchg   ax,ax

c001e944 <FAT::tell(void*, unsigned long long*)>:
c001e944:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e949:	75 09                	jne    c001e954 <FAT::tell(void*, unsigned long long*)+0x10>
c001e94b:	b8 04 00 00 00       	mov    eax,0x4
c001e950:	c3                   	ret    
c001e951:	8d 76 00             	lea    esi,[esi+0x0]
c001e954:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e959:	75 09                	jne    c001e964 <FAT::tell(void*, unsigned long long*)+0x20>
c001e95b:	b8 04 00 00 00       	mov    eax,0x4
c001e960:	c3                   	ret    
c001e961:	8d 76 00             	lea    esi,[esi+0x0]
c001e964:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e968:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001e96b:	ba 00 00 00 00       	mov    edx,0x0
c001e970:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e974:	89 01                	mov    DWORD PTR [ecx],eax
c001e976:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e979:	b8 00 00 00 00       	mov    eax,0x0
c001e97e:	c3                   	ret    
c001e97f:	90                   	nop

c001e980 <FAT::stat(void*, unsigned long long*)>:
c001e980:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e985:	75 09                	jne    c001e990 <FAT::stat(void*, unsigned long long*)+0x10>
c001e987:	b8 04 00 00 00       	mov    eax,0x4
c001e98c:	c3                   	ret    
c001e98d:	8d 76 00             	lea    esi,[esi+0x0]
c001e990:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e995:	75 09                	jne    c001e9a0 <FAT::stat(void*, unsigned long long*)+0x20>
c001e997:	b8 04 00 00 00       	mov    eax,0x4
c001e99c:	c3                   	ret    
c001e99d:	8d 76 00             	lea    esi,[esi+0x0]
c001e9a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e9a7:	ba 00 00 00 00       	mov    edx,0x0
c001e9ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e9b0:	89 01                	mov    DWORD PTR [ecx],eax
c001e9b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e9b5:	b8 00 00 00 00       	mov    eax,0x0
c001e9ba:	c3                   	ret    
c001e9bb:	90                   	nop

c001e9bc <FAT::~FAT()>:
c001e9bc:	83 ec 0c             	sub    esp,0xc
c001e9bf:	ba 7c eb 02 c0       	mov    edx,0xc002eb7c
c001e9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c8:	89 10                	mov    DWORD PTR [eax],edx
c001e9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ce:	83 ec 0c             	sub    esp,0xc
c001e9d1:	50                   	push   eax
c001e9d2:	e8 55 a1 fe ff       	call   c0008b2c <Filesystem::~Filesystem()>
c001e9d7:	83 c4 10             	add    esp,0x10
c001e9da:	90                   	nop
c001e9db:	83 c4 0c             	add    esp,0xc
c001e9de:	c3                   	ret    
c001e9df:	90                   	nop

c001e9e0 <FAT::~FAT()>:
c001e9e0:	83 ec 0c             	sub    esp,0xc
c001e9e3:	83 ec 0c             	sub    esp,0xc
c001e9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9ea:	e8 cd ff ff ff       	call   c001e9bc <FAT::~FAT()>
c001e9ef:	83 c4 10             	add    esp,0x10
c001e9f2:	83 ec 08             	sub    esp,0x8
c001e9f5:	6a 08                	push   0x8
c001e9f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9fb:	e8 18 f7 fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c001ea00:	83 c4 10             	add    esp,0x10
c001ea03:	83 c4 0c             	add    esp,0xc
c001ea06:	c3                   	ret    
c001ea07:	90                   	nop

c001ea08 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ea08:	83 ec 1c             	sub    esp,0x1c
c001ea0b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ea12:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ea17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ea1b:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001ea22:	83 f8 ff             	cmp    eax,0xffffffff
c001ea25:	75 35                	jne    c001ea5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001ea27:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ea2b:	88 c2                	mov    dl,al
c001ea2d:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001ea32:	01 d0                	add    eax,edx
c001ea34:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ea38:	8b 15 80 94 03 c0    	mov    edx,DWORD PTR ds:0xc0039480
c001ea3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ea42:	89 14 85 a0 94 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6b60],edx
c001ea49:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001ea4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ea52:	89 14 85 20 95 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6ae0],edx
c001ea59:	eb 19                	jmp    c001ea74 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001ea5b:	90                   	nop
c001ea5c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ea60:	88 c2                	mov    dl,al
c001ea62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ea66:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001ea6d:	01 d0                	add    eax,edx
c001ea6f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ea73:	90                   	nop
c001ea74:	83 ec 04             	sub    esp,0x4
c001ea77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ea7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ea7f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ea83:	50                   	push   eax
c001ea84:	e8 2f 67 fe ff       	call   c00051b8 <f_getlabel>
c001ea89:	83 c4 10             	add    esp,0x10
c001ea8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea90:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ea95:	75 09                	jne    c001eaa0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001ea97:	b8 00 00 00 00       	mov    eax,0x0
c001ea9c:	eb 0a                	jmp    c001eaa8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001ea9e:	66 90                	xchg   ax,ax
c001eaa0:	b8 01 00 00 00       	mov    eax,0x1
c001eaa5:	8d 76 00             	lea    esi,[esi+0x0]
c001eaa8:	83 c4 1c             	add    esp,0x1c
c001eaab:	c3                   	ret    

c001eaac <FAT::setlabel(LogicalDisk*, int, char*)>:
c001eaac:	57                   	push   edi
c001eaad:	83 ec 58             	sub    esp,0x58
c001eab0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001eab8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001eabc:	b8 00 00 00 00       	mov    eax,0x0
c001eac1:	b9 0f 00 00 00       	mov    ecx,0xf
c001eac6:	fc                   	cld    
c001eac7:	89 d7                	mov    edi,edx
c001eac9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eacb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eacf:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001ead6:	83 f8 ff             	cmp    eax,0xffffffff
c001ead9:	75 35                	jne    c001eb10 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001eadb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001eadf:	88 c2                	mov    dl,al
c001eae1:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001eae6:	01 d0                	add    eax,edx
c001eae8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001eaec:	8b 15 80 94 03 c0    	mov    edx,DWORD PTR ds:0xc0039480
c001eaf2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eaf6:	89 14 85 a0 94 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6b60],edx
c001eafd:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001eb02:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001eb06:	89 14 85 20 95 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6ae0],edx
c001eb0d:	eb 19                	jmp    c001eb28 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001eb0f:	90                   	nop
c001eb10:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001eb14:	88 c2                	mov    dl,al
c001eb16:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eb1a:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001eb21:	01 d0                	add    eax,edx
c001eb23:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001eb27:	90                   	nop
c001eb28:	83 ec 08             	sub    esp,0x8
c001eb2b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001eb2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eb33:	50                   	push   eax
c001eb34:	e8 07 1d fe ff       	call   c0000840 <strcat>
c001eb39:	83 c4 10             	add    esp,0x10
c001eb3c:	83 ec 0c             	sub    esp,0xc
c001eb3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eb43:	50                   	push   eax
c001eb44:	e8 c0 67 fe ff       	call   c0005309 <f_setlabel>
c001eb49:	83 c4 10             	add    esp,0x10
c001eb4c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eb50:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001eb55:	75 09                	jne    c001eb60 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001eb57:	b8 00 00 00 00       	mov    eax,0x0
c001eb5c:	eb 0a                	jmp    c001eb68 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001eb5e:	66 90                	xchg   ax,ax
c001eb60:	b8 01 00 00 00       	mov    eax,0x1
c001eb65:	8d 76 00             	lea    esi,[esi+0x0]
c001eb68:	83 c4 58             	add    esp,0x58
c001eb6b:	5f                   	pop    edi
c001eb6c:	c3                   	ret    
c001eb6d:	90                   	nop
c001eb6e:	66 90                	xchg   ax,ax

c001eb70 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001eb70:	83 ec 2c             	sub    esp,0x2c
c001eb73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001eb7b:	83 ec 08             	sub    esp,0x8
c001eb7e:	68 54 eb 02 c0       	push   0xc002eb54
c001eb83:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eb87:	e8 c4 1b fe ff       	call   c0000750 <strcmp>
c001eb8c:	83 c4 10             	add    esp,0x10
c001eb8f:	85 c0                	test   eax,eax
c001eb91:	0f 94 c0             	sete   al
c001eb94:	0f b6 c0             	movzx  eax,al
c001eb97:	85 c0                	test   eax,eax
c001eb99:	74 0d                	je     c001eba8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001eb9b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001eba3:	e9 c0 00 00 00       	jmp    c001ec68 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001eba8:	83 ec 08             	sub    esp,0x8
c001ebab:	68 46 eb 02 c0       	push   0xc002eb46
c001ebb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ebb4:	e8 97 1b fe ff       	call   c0000750 <strcmp>
c001ebb9:	83 c4 10             	add    esp,0x10
c001ebbc:	85 c0                	test   eax,eax
c001ebbe:	0f 94 c0             	sete   al
c001ebc1:	0f b6 c0             	movzx  eax,al
c001ebc4:	85 c0                	test   eax,eax
c001ebc6:	74 10                	je     c001ebd8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001ebc8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ebd0:	e9 93 00 00 00       	jmp    c001ec68 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ebd5:	8d 76 00             	lea    esi,[esi+0x0]
c001ebd8:	83 ec 08             	sub    esp,0x8
c001ebdb:	68 4c eb 02 c0       	push   0xc002eb4c
c001ebe0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ebe4:	e8 67 1b fe ff       	call   c0000750 <strcmp>
c001ebe9:	83 c4 10             	add    esp,0x10
c001ebec:	85 c0                	test   eax,eax
c001ebee:	0f 94 c0             	sete   al
c001ebf1:	0f b6 c0             	movzx  eax,al
c001ebf4:	85 c0                	test   eax,eax
c001ebf6:	74 0c                	je     c001ec04 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001ebf8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ec00:	eb 66                	jmp    c001ec68 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ec02:	66 90                	xchg   ax,ax
c001ec04:	83 ec 08             	sub    esp,0x8
c001ec07:	68 dc a5 02 c0       	push   0xc002a5dc
c001ec0c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec10:	e8 3b 1b fe ff       	call   c0000750 <strcmp>
c001ec15:	83 c4 10             	add    esp,0x10
c001ec18:	85 c0                	test   eax,eax
c001ec1a:	0f 94 c0             	sete   al
c001ec1d:	0f b6 c0             	movzx  eax,al
c001ec20:	85 c0                	test   eax,eax
c001ec22:	74 0c                	je     c001ec30 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001ec24:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001ec2c:	eb 3a                	jmp    c001ec68 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ec2e:	66 90                	xchg   ax,ax
c001ec30:	83 ec 08             	sub    esp,0x8
c001ec33:	68 52 eb 02 c0       	push   0xc002eb52
c001ec38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec3c:	e8 0f 1b fe ff       	call   c0000750 <strcmp>
c001ec41:	83 c4 10             	add    esp,0x10
c001ec44:	85 c0                	test   eax,eax
c001ec46:	0f 94 c0             	sete   al
c001ec49:	0f b6 c0             	movzx  eax,al
c001ec4c:	85 c0                	test   eax,eax
c001ec4e:	74 0c                	je     c001ec5c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001ec50:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ec58:	eb 0e                	jmp    c001ec68 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ec5a:	66 90                	xchg   ax,ax
c001ec5c:	b8 08 00 00 00       	mov    eax,0x8
c001ec61:	e9 ea 00 00 00       	jmp    c001ed50 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ec66:	66 90                	xchg   ax,ax
c001ec68:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ec6f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ec74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ec78:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001ec7f:	83 f8 ff             	cmp    eax,0xffffffff
c001ec82:	75 34                	jne    c001ecb8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001ec84:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ec88:	88 c2                	mov    dl,al
c001ec8a:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001ec8f:	01 d0                	add    eax,edx
c001ec91:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ec95:	8b 15 80 94 03 c0    	mov    edx,DWORD PTR ds:0xc0039480
c001ec9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ec9f:	89 14 85 a0 94 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6b60],edx
c001eca6:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001ecab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ecaf:	89 14 85 20 95 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6ae0],edx
c001ecb6:	eb 18                	jmp    c001ecd0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001ecb8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ecbc:	88 c2                	mov    dl,al
c001ecbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ecc2:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001ecc9:	01 d0                	add    eax,edx
c001eccb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001eccf:	90                   	nop
c001ecd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ecd4:	88 04 24             	mov    BYTE PTR [esp],al
c001ecd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ecdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecdf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ece7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ecec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ecf4:	83 ec 0c             	sub    esp,0xc
c001ecf7:	68 00 20 00 00       	push   0x2000
c001ecfc:	e8 0e 19 ff ff       	call   c001060f <malloc>
c001ed01:	83 c4 10             	add    esp,0x10
c001ed04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ed08:	68 00 20 00 00       	push   0x2000
c001ed0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed11:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ed15:	50                   	push   eax
c001ed16:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ed1a:	50                   	push   eax
c001ed1b:	e8 e6 68 fe ff       	call   c0005606 <f_mkfs>
c001ed20:	83 c4 10             	add    esp,0x10
c001ed23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ed27:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ed2c:	75 0a                	jne    c001ed38 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001ed2e:	b8 00 00 00 00       	mov    eax,0x0
c001ed33:	eb 1b                	jmp    c001ed50 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ed35:	8d 76 00             	lea    esi,[esi+0x0]
c001ed38:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ed3d:	75 09                	jne    c001ed48 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001ed3f:	b8 09 00 00 00       	mov    eax,0x9
c001ed44:	eb 0a                	jmp    c001ed50 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ed46:	66 90                	xchg   ax,ax
c001ed48:	b8 01 00 00 00       	mov    eax,0x1
c001ed4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ed50:	83 c4 2c             	add    esp,0x2c
c001ed53:	c3                   	ret    

c001ed54 <FAT::tryMount(LogicalDisk*, int)>:
c001ed54:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001ed5a:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001ed5f:	83 f8 14             	cmp    eax,0x14
c001ed62:	75 18                	jne    c001ed7c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001ed64:	83 ec 0c             	sub    esp,0xc
c001ed67:	68 58 eb 02 c0       	push   0xc002eb58
c001ed6c:	e8 f3 1c ff ff       	call   c0010a64 <KePanic(char const*)>
c001ed71:	83 c4 10             	add    esp,0x10
c001ed74:	b0 00                	mov    al,0x0
c001ed76:	e9 ed 01 00 00       	jmp    c001ef68 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ed7b:	90                   	nop
c001ed7c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001ed83:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ed89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed8f:	3d 00 02 00 00       	cmp    eax,0x200
c001ed94:	74 0a                	je     c001eda0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001ed96:	b0 00                	mov    al,0x0
c001ed98:	e9 cb 01 00 00       	jmp    c001ef68 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ed9d:	8d 76 00             	lea    esi,[esi+0x0]
c001eda0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001eda8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001edaf:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001edb6:	83 f8 ff             	cmp    eax,0xffffffff
c001edb9:	74 09                	je     c001edc4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001edbb:	b0 01                	mov    al,0x1
c001edbd:	e9 a6 01 00 00       	jmp    c001ef68 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001edc2:	66 90                	xchg   ax,ax
c001edc4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001edce:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001edd6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001eddd:	88 c2                	mov    dl,al
c001eddf:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001ede4:	01 d0                	add    eax,edx
c001ede6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001eded:	8b 15 80 94 03 c0    	mov    edx,DWORD PTR ds:0xc0039480
c001edf3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001edfa:	89 14 85 a0 94 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6b60],edx
c001ee01:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001ee06:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001ee0d:	89 14 85 20 95 03 c0 	mov    DWORD PTR [eax*4-0x3ffc6ae0],edx
c001ee14:	83 ec 0c             	sub    esp,0xc
c001ee17:	68 34 02 00 00       	push   0x234
c001ee1c:	e8 ee 17 ff ff       	call   c001060f <malloc>
c001ee21:	83 c4 10             	add    esp,0x10
c001ee24:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001ee2b:	83 ec 04             	sub    esp,0x4
c001ee2e:	6a 00                	push   0x0
c001ee30:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001ee37:	50                   	push   eax
c001ee38:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001ee3f:	e8 9d 4f fe ff       	call   c0003de1 <f_mount>
c001ee44:	83 c4 10             	add    esp,0x10
c001ee47:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001ee4e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001ee56:	74 1c                	je     c001ee74 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001ee58:	83 ec 0c             	sub    esp,0xc
c001ee5b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001ee62:	e8 c8 17 ff ff       	call   c001062f <rfree>
c001ee67:	83 c4 10             	add    esp,0x10
c001ee6a:	b0 00                	mov    al,0x0
c001ee6c:	e9 f7 00 00 00       	jmp    c001ef68 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ee71:	8d 76 00             	lea    esi,[esi+0x0]
c001ee74:	83 ec 04             	sub    esp,0x4
c001ee77:	68 00 01 00 00       	push   0x100
c001ee7c:	6a 00                	push   0x0
c001ee7e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001ee85:	50                   	push   eax
c001ee86:	e8 65 16 fe ff       	call   c00004f0 <memset>
c001ee8b:	83 c4 10             	add    esp,0x10
c001ee8e:	83 ec 08             	sub    esp,0x8
c001ee91:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001ee98:	50                   	push   eax
c001ee99:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001eea0:	50                   	push   eax
c001eea1:	e8 9a 19 fe ff       	call   c0000840 <strcat>
c001eea6:	83 c4 10             	add    esp,0x10
c001eea9:	83 ec 08             	sub    esp,0x8
c001eeac:	68 66 eb 02 c0       	push   0xc002eb66
c001eeb1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001eeb8:	50                   	push   eax
c001eeb9:	e8 82 19 fe ff       	call   c0000840 <strcat>
c001eebe:	83 c4 10             	add    esp,0x10
c001eec1:	83 ec 04             	sub    esp,0x4
c001eec4:	6a 01                	push   0x1
c001eec6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001eecd:	50                   	push   eax
c001eece:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eed2:	50                   	push   eax
c001eed3:	e8 6b 4f fe ff       	call   c0003e43 <f_open>
c001eed8:	83 c4 10             	add    esp,0x10
c001eedb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001eee2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001eee9:	85 c0                	test   eax,eax
c001eeeb:	74 0b                	je     c001eef8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001eeed:	78 31                	js     c001ef20 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001eeef:	83 e8 04             	sub    eax,0x4
c001eef2:	83 f8 01             	cmp    eax,0x1
c001eef5:	77 29                	ja     c001ef20 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001eef7:	90                   	nop
c001eef8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001ef00:	83 ec 0c             	sub    esp,0xc
c001ef03:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ef07:	50                   	push   eax
c001ef08:	e8 05 57 fe ff       	call   c0004612 <f_close>
c001ef0d:	83 c4 10             	add    esp,0x10
c001ef10:	90                   	nop
c001ef11:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001ef19:	85 c0                	test   eax,eax
c001ef1b:	74 43                	je     c001ef60 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001ef1d:	eb 31                	jmp    c001ef50 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001ef1f:	90                   	nop
c001ef20:	83 ec 0c             	sub    esp,0xc
c001ef23:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001ef2a:	e8 00 17 ff ff       	call   c001062f <rfree>
c001ef2f:	83 c4 10             	add    esp,0x10
c001ef32:	83 ec 04             	sub    esp,0x4
c001ef35:	6a 00                	push   0x0
c001ef37:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001ef3e:	50                   	push   eax
c001ef3f:	6a 00                	push   0x0
c001ef41:	e8 9b 4e fe ff       	call   c0003de1 <f_mount>
c001ef46:	83 c4 10             	add    esp,0x10
c001ef49:	b0 00                	mov    al,0x0
c001ef4b:	eb 1b                	jmp    c001ef68 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ef4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ef50:	a1 80 94 03 c0       	mov    eax,ds:0xc0039480
c001ef55:	83 c0 01             	add    eax,0x1
c001ef58:	a3 80 94 03 c0       	mov    ds:0xc0039480,eax
c001ef5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ef60:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001ef67:	90                   	nop
c001ef68:	81 c4 4c 03 00 00    	add    esp,0x34c
c001ef6e:	c3                   	ret    
c001ef6f:	90                   	nop

c001ef70 <FAT::allocateSwapfile(char const*, int)>:
c001ef70:	55                   	push   ebp
c001ef71:	57                   	push   edi
c001ef72:	56                   	push   esi
c001ef73:	53                   	push   ebx
c001ef74:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001ef7a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ef85:	83 ec 0c             	sub    esp,0xc
c001ef88:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ef8f:	e8 7b 16 ff ff       	call   c001060f <malloc>
c001ef94:	83 c4 10             	add    esp,0x10
c001ef97:	89 c7                	mov    edi,eax
c001ef99:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c001ef9e:	83 ec 04             	sub    esp,0x4
c001efa1:	50                   	push   eax
c001efa2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001efa9:	57                   	push   edi
c001efaa:	e8 1b 9f fe ff       	call   c0008eca <File::File(char const*, Process*)>
c001efaf:	83 c4 10             	add    esp,0x10
c001efb2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001efb9:	83 ec 04             	sub    esp,0x4
c001efbc:	8d 44 24 13          	lea    eax,[esp+0x13]
c001efc0:	50                   	push   eax
c001efc1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001efc5:	50                   	push   eax
c001efc6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001efcd:	e8 18 a2 fe ff       	call   c00091ea <File::stat(unsigned long long*, bool*)>
c001efd2:	83 c4 10             	add    esp,0x10
c001efd5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001efdc:	c1 e0 14             	shl    eax,0x14
c001efdf:	89 c7                	mov    edi,eax
c001efe1:	89 c5                	mov    ebp,eax
c001efe3:	c1 fd 1f             	sar    ebp,0x1f
c001efe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001efee:	89 f9                	mov    ecx,edi
c001eff0:	31 c1                	xor    ecx,eax
c001eff2:	89 cb                	mov    ebx,ecx
c001eff4:	89 e9                	mov    ecx,ebp
c001eff6:	31 d1                	xor    ecx,edx
c001eff8:	89 ce                	mov    esi,ecx
c001effa:	89 f0                	mov    eax,esi
c001effc:	09 d8                	or     eax,ebx
c001effe:	0f 84 9c 00 00 00    	je     c001f0a0 <FAT::allocateSwapfile(char const*, int)+0x130>
c001f004:	83 ec 0c             	sub    esp,0xc
c001f007:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001f00e:	e8 a3 a0 fe ff       	call   c00090b6 <File::unlink()>
c001f013:	83 c4 10             	add    esp,0x10
c001f016:	83 ec 08             	sub    esp,0x8
c001f019:	6a 12                	push   0x12
c001f01b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001f022:	e8 c1 9e fe ff       	call   c0008ee8 <File::open(FileOpenMode)>
c001f027:	83 c4 10             	add    esp,0x10
c001f02a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001f031:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f037:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001f03e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001f045:	c1 e0 14             	shl    eax,0x14
c001f048:	83 ec 04             	sub    esp,0x4
c001f04b:	6a 01                	push   0x1
c001f04d:	50                   	push   eax
c001f04e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001f055:	e8 3f 64 fe ff       	call   c0005499 <f_expand>
c001f05a:	83 c4 10             	add    esp,0x10
c001f05d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001f064:	8b 00                	mov    eax,DWORD PTR [eax]
c001f066:	83 c0 10             	add    eax,0x10
c001f069:	8b 00                	mov    eax,DWORD PTR [eax]
c001f06b:	83 ec 0c             	sub    esp,0xc
c001f06e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001f072:	52                   	push   edx
c001f073:	8d 54 24 30          	lea    edx,[esp+0x30]
c001f077:	52                   	push   edx
c001f078:	6a 00                	push   0x0
c001f07a:	68 00 04 00 00       	push   0x400
c001f07f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001f086:	ff d0                	call   eax
c001f088:	83 c4 20             	add    esp,0x20
c001f08b:	83 ec 0c             	sub    esp,0xc
c001f08e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001f095:	e8 ac 9e fe ff       	call   c0008f46 <File::close()>
c001f09a:	83 c4 10             	add    esp,0x10
c001f09d:	8d 76 00             	lea    esi,[esi+0x0]
c001f0a0:	83 ec 08             	sub    esp,0x8
c001f0a3:	6a 01                	push   0x1
c001f0a5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001f0ac:	e8 37 9e fe ff       	call   c0008ee8 <File::open(FileOpenMode)>
c001f0b1:	83 c4 10             	add    esp,0x10
c001f0b4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001f0bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0bd:	83 c0 0c             	add    eax,0xc
c001f0c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0c2:	83 ec 0c             	sub    esp,0xc
c001f0c5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001f0c9:	52                   	push   edx
c001f0ca:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001f0ce:	52                   	push   edx
c001f0cf:	6a 00                	push   0x0
c001f0d1:	6a 04                	push   0x4
c001f0d3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001f0da:	ff d0                	call   eax
c001f0dc:	83 c4 20             	add    esp,0x20
c001f0df:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001f0e6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f0ec:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001f0f3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001f0fa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001f0fd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001f104:	83 ec 0c             	sub    esp,0xc
c001f107:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001f10e:	e8 33 9e fe ff       	call   c0008f46 <File::close()>
c001f113:	83 c4 10             	add    esp,0x10
c001f116:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001f11d:	ba 00 00 00 00       	mov    edx,0x0
c001f122:	81 c4 3c 04 00 00    	add    esp,0x43c
c001f128:	5b                   	pop    ebx
c001f129:	5e                   	pop    esi
c001f12a:	5f                   	pop    edi
c001f12b:	5d                   	pop    ebp
c001f12c:	c3                   	ret    
c001f12d:	90                   	nop
c001f12e:	66 90                	xchg   ax,ax

c001f130 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001f130:	57                   	push   edi
c001f131:	56                   	push   esi
c001f132:	53                   	push   ebx
c001f133:	81 ec 50 02 00 00    	sub    esp,0x250
c001f139:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001f141:	74 0d                	je     c001f150 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001f143:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001f14b:	75 0f                	jne    c001f15c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001f14d:	8d 76 00             	lea    esi,[esi+0x0]
c001f150:	b8 04 00 00 00       	mov    eax,0x4
c001f155:	e9 3a 01 00 00       	jmp    c001f294 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001f15a:	66 90                	xchg   ax,ax
c001f15c:	83 ec 08             	sub    esp,0x8
c001f15f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001f166:	50                   	push   eax
c001f167:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001f16e:	e8 6c 57 fe ff       	call   c00048df <f_readdir>
c001f173:	83 c4 10             	add    esp,0x10
c001f176:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001f17d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001f184:	83 ec 0c             	sub    esp,0xc
c001f187:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001f18e:	83 c0 16             	add    eax,0x16
c001f191:	50                   	push   eax
c001f192:	e8 d9 13 fe ff       	call   c0000570 <strlen>
c001f197:	83 c4 10             	add    esp,0x10
c001f19a:	ba 00 00 00 00       	mov    edx,0x0
c001f19f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1a3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001f1a7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001f1ae:	0f b6 c0             	movzx  eax,al
c001f1b1:	83 e0 10             	and    eax,0x10
c001f1b4:	74 0a                	je     c001f1c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001f1b6:	b8 02 00 00 00       	mov    eax,0x2
c001f1bb:	eb 0b                	jmp    c001f1c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001f1bd:	8d 76 00             	lea    esi,[esi+0x0]
c001f1c0:	b8 01 00 00 00       	mov    eax,0x1
c001f1c5:	8d 76 00             	lea    esi,[esi+0x0]
c001f1c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f1cc:	83 ec 08             	sub    esp,0x8
c001f1cf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001f1d6:	83 c0 16             	add    eax,0x16
c001f1d9:	50                   	push   eax
c001f1da:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f1de:	83 c0 10             	add    eax,0x10
c001f1e1:	50                   	push   eax
c001f1e2:	e8 59 14 fe ff       	call   c0000640 <strcpy>
c001f1e7:	83 c4 10             	add    esp,0x10
c001f1ea:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001f1f1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001f1f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f1fc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001f203:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001f20a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001f211:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001f218:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001f21f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001f226:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001f22d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001f234:	89 c6                	mov    esi,eax
c001f236:	89 d7                	mov    edi,edx
c001f238:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f23a:	89 c8                	mov    eax,ecx
c001f23c:	89 fa                	mov    edx,edi
c001f23e:	89 f3                	mov    ebx,esi
c001f240:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001f247:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001f24e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001f255:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001f25c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f262:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001f269:	0f be c0             	movsx  eax,al
c001f26c:	85 c0                	test   eax,eax
c001f26e:	75 08                	jne    c001f278 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001f270:	b8 07 00 00 00       	mov    eax,0x7
c001f275:	eb 1d                	jmp    c001f294 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001f277:	90                   	nop
c001f278:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001f27f:	85 c0                	test   eax,eax
c001f281:	75 09                	jne    c001f28c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001f283:	b8 00 00 00 00       	mov    eax,0x0
c001f288:	eb 0a                	jmp    c001f294 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001f28a:	66 90                	xchg   ax,ax
c001f28c:	b8 01 00 00 00       	mov    eax,0x1
c001f291:	8d 76 00             	lea    esi,[esi+0x0]
c001f294:	81 c4 50 02 00 00    	add    esp,0x250
c001f29a:	5b                   	pop    ebx
c001f29b:	5e                   	pop    esi
c001f29c:	5f                   	pop    edi
c001f29d:	c3                   	ret    
c001f29e:	66 90                	xchg   ax,ax

c001f2a0 <FAT::read(void*, unsigned long, void*, int*)>:
c001f2a0:	83 ec 1c             	sub    esp,0x1c
c001f2a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f2a8:	74 0a                	je     c001f2b4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001f2aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001f2af:	75 0b                	jne    c001f2bc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001f2b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2b4:	b8 04 00 00 00       	mov    eax,0x4
c001f2b9:	eb 41                	jmp    c001f2fc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001f2bb:	90                   	nop
c001f2bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f2c0:	50                   	push   eax
c001f2c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f2c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f2c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f2cd:	e8 34 4e fe ff       	call   c0004106 <f_read>
c001f2d2:	83 c4 10             	add    esp,0x10
c001f2d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2dd:	89 c2                	mov    edx,eax
c001f2df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f2e3:	89 10                	mov    DWORD PTR [eax],edx
c001f2e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2e9:	85 c0                	test   eax,eax
c001f2eb:	75 07                	jne    c001f2f4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001f2ed:	b8 00 00 00 00       	mov    eax,0x0
c001f2f2:	eb 08                	jmp    c001f2fc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001f2f4:	b8 01 00 00 00       	mov    eax,0x1
c001f2f9:	8d 76 00             	lea    esi,[esi+0x0]
c001f2fc:	83 c4 1c             	add    esp,0x1c
c001f2ff:	c3                   	ret    

c001f300 <FAT::write(void*, unsigned long, void*, int*)>:
c001f300:	83 ec 1c             	sub    esp,0x1c
c001f303:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f308:	74 0a                	je     c001f314 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001f30a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001f30f:	75 0b                	jne    c001f31c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001f311:	8d 76 00             	lea    esi,[esi+0x0]
c001f314:	b8 04 00 00 00       	mov    eax,0x4
c001f319:	eb 41                	jmp    c001f35c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001f31b:	90                   	nop
c001f31c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f320:	50                   	push   eax
c001f321:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f325:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f329:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f32d:	e8 d3 4f fe ff       	call   c0004305 <f_write>
c001f332:	83 c4 10             	add    esp,0x10
c001f335:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f339:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f33d:	89 c2                	mov    edx,eax
c001f33f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f343:	89 10                	mov    DWORD PTR [eax],edx
c001f345:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f349:	85 c0                	test   eax,eax
c001f34b:	75 07                	jne    c001f354 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001f34d:	b8 00 00 00 00       	mov    eax,0x0
c001f352:	eb 08                	jmp    c001f35c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001f354:	b8 01 00 00 00       	mov    eax,0x1
c001f359:	8d 76 00             	lea    esi,[esi+0x0]
c001f35c:	83 c4 1c             	add    esp,0x1c
c001f35f:	c3                   	ret    

c001f360 <FAT::close(void*)>:
c001f360:	83 ec 1c             	sub    esp,0x1c
c001f363:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f368:	75 0a                	jne    c001f374 <FAT::close(void*)+0x14>
c001f36a:	b8 04 00 00 00       	mov    eax,0x4
c001f36f:	eb 3f                	jmp    c001f3b0 <FAT::close(void*)+0x50>
c001f371:	8d 76 00             	lea    esi,[esi+0x0]
c001f374:	83 ec 0c             	sub    esp,0xc
c001f377:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f37b:	e8 92 52 fe ff       	call   c0004612 <f_close>
c001f380:	83 c4 10             	add    esp,0x10
c001f383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f387:	83 ec 0c             	sub    esp,0xc
c001f38a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f38e:	e8 8c 12 ff ff       	call   c001061f <free>
c001f393:	83 c4 10             	add    esp,0x10
c001f396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f39a:	85 c0                	test   eax,eax
c001f39c:	75 0a                	jne    c001f3a8 <FAT::close(void*)+0x48>
c001f39e:	b8 00 00 00 00       	mov    eax,0x0
c001f3a3:	eb 0b                	jmp    c001f3b0 <FAT::close(void*)+0x50>
c001f3a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f3a8:	b8 01 00 00 00       	mov    eax,0x1
c001f3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001f3b0:	83 c4 1c             	add    esp,0x1c
c001f3b3:	c3                   	ret    

c001f3b4 <FAT::closeDir(void*)>:
c001f3b4:	83 ec 1c             	sub    esp,0x1c
c001f3b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f3bc:	75 0a                	jne    c001f3c8 <FAT::closeDir(void*)+0x14>
c001f3be:	b8 04 00 00 00       	mov    eax,0x4
c001f3c3:	eb 3f                	jmp    c001f404 <FAT::closeDir(void*)+0x50>
c001f3c5:	8d 76 00             	lea    esi,[esi+0x0]
c001f3c8:	83 ec 0c             	sub    esp,0xc
c001f3cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f3cf:	e8 e9 54 fe ff       	call   c00048bd <f_closedir>
c001f3d4:	83 c4 10             	add    esp,0x10
c001f3d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3db:	83 ec 0c             	sub    esp,0xc
c001f3de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f3e2:	e8 38 12 ff ff       	call   c001061f <free>
c001f3e7:	83 c4 10             	add    esp,0x10
c001f3ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3ee:	85 c0                	test   eax,eax
c001f3f0:	75 0a                	jne    c001f3fc <FAT::closeDir(void*)+0x48>
c001f3f2:	b8 00 00 00 00       	mov    eax,0x0
c001f3f7:	eb 0b                	jmp    c001f404 <FAT::closeDir(void*)+0x50>
c001f3f9:	8d 76 00             	lea    esi,[esi+0x0]
c001f3fc:	b8 01 00 00 00       	mov    eax,0x1
c001f401:	8d 76 00             	lea    esi,[esi+0x0]
c001f404:	83 c4 1c             	add    esp,0x1c
c001f407:	c3                   	ret    

c001f408 <FAT::truncate(void*, unsigned long long)>:
c001f408:	83 ec 2c             	sub    esp,0x2c
c001f40b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f40f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f417:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f41b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001f420:	75 0a                	jne    c001f42c <FAT::truncate(void*, unsigned long long)+0x24>
c001f422:	b8 04 00 00 00       	mov    eax,0x4
c001f427:	eb 47                	jmp    c001f470 <FAT::truncate(void*, unsigned long long)+0x68>
c001f429:	8d 76 00             	lea    esi,[esi+0x0]
c001f42c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f430:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001f433:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f437:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f43f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f443:	83 ec 08             	sub    esp,0x8
c001f446:	50                   	push   eax
c001f447:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001f44b:	e8 f1 51 fe ff       	call   c0004641 <f_lseek>
c001f450:	83 c4 10             	add    esp,0x10
c001f453:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f457:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f45b:	85 c0                	test   eax,eax
c001f45d:	75 09                	jne    c001f468 <FAT::truncate(void*, unsigned long long)+0x60>
c001f45f:	b8 00 00 00 00       	mov    eax,0x0
c001f464:	eb 0a                	jmp    c001f470 <FAT::truncate(void*, unsigned long long)+0x68>
c001f466:	66 90                	xchg   ax,ax
c001f468:	b8 01 00 00 00       	mov    eax,0x1
c001f46d:	8d 76 00             	lea    esi,[esi+0x0]
c001f470:	83 c4 2c             	add    esp,0x2c
c001f473:	c3                   	ret    

c001f474 <FAT::seek(void*, unsigned long long)>:
c001f474:	83 ec 2c             	sub    esp,0x2c
c001f477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f47f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f483:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f487:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001f48c:	75 0a                	jne    c001f498 <FAT::seek(void*, unsigned long long)+0x24>
c001f48e:	b8 04 00 00 00       	mov    eax,0x4
c001f493:	eb 33                	jmp    c001f4c8 <FAT::seek(void*, unsigned long long)+0x54>
c001f495:	8d 76 00             	lea    esi,[esi+0x0]
c001f498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f49c:	83 ec 08             	sub    esp,0x8
c001f49f:	50                   	push   eax
c001f4a0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001f4a4:	e8 98 51 fe ff       	call   c0004641 <f_lseek>
c001f4a9:	83 c4 10             	add    esp,0x10
c001f4ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f4b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f4b4:	85 c0                	test   eax,eax
c001f4b6:	75 08                	jne    c001f4c0 <FAT::seek(void*, unsigned long long)+0x4c>
c001f4b8:	b8 00 00 00 00       	mov    eax,0x0
c001f4bd:	eb 09                	jmp    c001f4c8 <FAT::seek(void*, unsigned long long)+0x54>
c001f4bf:	90                   	nop
c001f4c0:	b8 01 00 00 00       	mov    eax,0x1
c001f4c5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4c8:	83 c4 2c             	add    esp,0x2c
c001f4cb:	c3                   	ret    

c001f4cc <fatWrapperReadDisk>:
c001f4cc:	53                   	push   ebx
c001f4cd:	83 ec 18             	sub    esp,0x18
c001f4d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f4d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f4d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f4dd:	8b 0c 85 e0 6a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9520]
c001f4e4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f4e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f4ec:	ba 00 00 00 00       	mov    edx,0x0
c001f4f1:	83 ec 0c             	sub    esp,0xc
c001f4f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f4f8:	53                   	push   ebx
c001f4f9:	52                   	push   edx
c001f4fa:	50                   	push   eax
c001f4fb:	51                   	push   ecx
c001f4fc:	e8 b1 c2 fe ff       	call   c000b7b2 <LogicalDisk::read(unsigned long long, int, void*)>
c001f501:	83 c4 20             	add    esp,0x20
c001f504:	83 c4 18             	add    esp,0x18
c001f507:	5b                   	pop    ebx
c001f508:	c3                   	ret    
c001f509:	8d 76 00             	lea    esi,[esi+0x0]

c001f50c <fatWrapperWriteDisk>:
c001f50c:	53                   	push   ebx
c001f50d:	83 ec 18             	sub    esp,0x18
c001f510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f514:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f518:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f51d:	8b 0c 85 e0 6a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9520]
c001f524:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f528:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f52c:	ba 00 00 00 00       	mov    edx,0x0
c001f531:	83 ec 0c             	sub    esp,0xc
c001f534:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f538:	53                   	push   ebx
c001f539:	52                   	push   edx
c001f53a:	50                   	push   eax
c001f53b:	51                   	push   ecx
c001f53c:	e8 dd c2 fe ff       	call   c000b81e <LogicalDisk::write(unsigned long long, int, void*)>
c001f541:	83 c4 20             	add    esp,0x20
c001f544:	83 c4 18             	add    esp,0x18
c001f547:	5b                   	pop    ebx
c001f548:	c3                   	ret    
c001f549:	8d 76 00             	lea    esi,[esi+0x0]

c001f54c <fatWrapperIoctl>:
c001f54c:	53                   	push   ebx
c001f54d:	83 ec 28             	sub    esp,0x28
c001f550:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f554:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f558:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001f55c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f560:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f565:	83 f8 02             	cmp    eax,0x2
c001f568:	75 32                	jne    c001f59c <fatWrapperIoctl+0x50>
c001f56a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f56e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f572:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f577:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c001f57e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f584:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f58a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f58e:	66 89 02             	mov    WORD PTR [edx],ax
c001f591:	b8 00 00 00 00       	mov    eax,0x0
c001f596:	e9 c5 00 00 00       	jmp    c001f660 <fatWrapperIoctl+0x114>
c001f59b:	90                   	nop
c001f59c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f5a1:	83 f8 01             	cmp    eax,0x1
c001f5a4:	75 6a                	jne    c001f610 <fatWrapperIoctl+0xc4>
c001f5a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f5aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f5ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f5b3:	8b 04 85 e0 6a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9520]
c001f5ba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f5c0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001f5c6:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001f5cc:	89 c8                	mov    eax,ecx
c001f5ce:	89 da                	mov    edx,ebx
c001f5d0:	0f a4 c2 0a          	shld   edx,eax,0xa
c001f5d4:	c1 e0 0a             	shl    eax,0xa
c001f5d7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001f5dc:	8b 0c 8d e0 6a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc9520]
c001f5e3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001f5e9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001f5ef:	89 cb                	mov    ebx,ecx
c001f5f1:	c1 fb 1f             	sar    ebx,0x1f
c001f5f4:	53                   	push   ebx
c001f5f5:	51                   	push   ecx
c001f5f6:	52                   	push   edx
c001f5f7:	50                   	push   eax
c001f5f8:	e8 57 55 00 00       	call   c0024b54 <__udivdi3>
c001f5fd:	83 c4 10             	add    esp,0x10
c001f600:	89 c2                	mov    edx,eax
c001f602:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f606:	89 10                	mov    DWORD PTR [eax],edx
c001f608:	b8 00 00 00 00       	mov    eax,0x0
c001f60d:	eb 51                	jmp    c001f660 <fatWrapperIoctl+0x114>
c001f60f:	90                   	nop
c001f610:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f615:	85 c0                	test   eax,eax
c001f617:	75 07                	jne    c001f620 <fatWrapperIoctl+0xd4>
c001f619:	b8 00 00 00 00       	mov    eax,0x0
c001f61e:	eb 40                	jmp    c001f660 <fatWrapperIoctl+0x114>
c001f620:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f625:	83 f8 03             	cmp    eax,0x3
c001f628:	75 1a                	jne    c001f644 <fatWrapperIoctl+0xf8>
c001f62a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f62e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f632:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f636:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001f63c:	b8 00 00 00 00       	mov    eax,0x0
c001f641:	eb 1d                	jmp    c001f660 <fatWrapperIoctl+0x114>
c001f643:	90                   	nop
c001f644:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f649:	83 f8 04             	cmp    eax,0x4
c001f64c:	75 0a                	jne    c001f658 <fatWrapperIoctl+0x10c>
c001f64e:	b8 00 00 00 00       	mov    eax,0x0
c001f653:	eb 0b                	jmp    c001f660 <fatWrapperIoctl+0x114>
c001f655:	8d 76 00             	lea    esi,[esi+0x0]
c001f658:	b8 04 00 00 00       	mov    eax,0x4
c001f65d:	8d 76 00             	lea    esi,[esi+0x0]
c001f660:	83 c4 28             	add    esp,0x28
c001f663:	5b                   	pop    ebx
c001f664:	c3                   	ret    
c001f665:	90                   	nop
c001f666:	66 90                	xchg   ax,ax

c001f668 <FAT::FAT()>:
c001f668:	83 ec 1c             	sub    esp,0x1c
c001f66b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f66f:	83 ec 0c             	sub    esp,0xc
c001f672:	50                   	push   eax
c001f673:	e8 90 94 fe ff       	call   c0008b08 <Filesystem::Filesystem()>
c001f678:	83 c4 10             	add    esp,0x10
c001f67b:	ba 7c eb 02 c0       	mov    edx,0xc002eb7c
c001f680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f684:	89 10                	mov    DWORD PTR [eax],edx
c001f686:	c7 05 80 94 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0039480,0x0
c001f690:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f698:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001f69d:	7f 19                	jg     c001f6b8 <FAT::FAT()+0x50>
c001f69f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6a3:	c7 04 85 a0 94 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffc6b60],0xffffffff
c001f6ae:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001f6b3:	eb e3                	jmp    c001f698 <FAT::FAT()+0x30>
c001f6b5:	8d 76 00             	lea    esi,[esi+0x0]
c001f6b8:	90                   	nop
c001f6b9:	83 c4 1c             	add    esp,0x1c
c001f6bc:	c3                   	ret    
c001f6bd:	90                   	nop
c001f6be:	66 90                	xchg   ax,ax

c001f6c0 <FAT::fixFilepath(char*)>:
c001f6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6c4:	8a 00                	mov    al,BYTE PTR [eax]
c001f6c6:	0f be c0             	movsx  eax,al
c001f6c9:	83 f8 40             	cmp    eax,0x40
c001f6cc:	7e 2e                	jle    c001f6fc <FAT::fixFilepath(char*)+0x3c>
c001f6ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6d2:	8a 00                	mov    al,BYTE PTR [eax]
c001f6d4:	83 e8 41             	sub    eax,0x41
c001f6d7:	88 c2                	mov    dl,al
c001f6d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6dd:	88 10                	mov    BYTE PTR [eax],dl
c001f6df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6e3:	8a 00                	mov    al,BYTE PTR [eax]
c001f6e5:	0f be c0             	movsx  eax,al
c001f6e8:	8b 04 85 a0 94 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc6b60]
c001f6ef:	83 c0 30             	add    eax,0x30
c001f6f2:	88 c2                	mov    dl,al
c001f6f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6f8:	88 10                	mov    BYTE PTR [eax],dl
c001f6fa:	66 90                	xchg   ax,ax
c001f6fc:	90                   	nop
c001f6fd:	c3                   	ret    
c001f6fe:	66 90                	xchg   ax,ax

c001f700 <FAT::open(char const*, void**, FileOpenMode)>:
c001f700:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f706:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f70e:	74 0c                	je     c001f71c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001f710:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f718:	75 0e                	jne    c001f728 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001f71a:	66 90                	xchg   ax,ax
c001f71c:	b8 04 00 00 00       	mov    eax,0x4
c001f721:	e9 46 01 00 00       	jmp    c001f86c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001f726:	66 90                	xchg   ax,ax
c001f728:	83 ec 08             	sub    esp,0x8
c001f72b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f732:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f736:	50                   	push   eax
c001f737:	e8 04 0f fe ff       	call   c0000640 <strcpy>
c001f73c:	83 c4 10             	add    esp,0x10
c001f73f:	83 ec 08             	sub    esp,0x8
c001f742:	8d 44 24 10          	lea    eax,[esp+0x10]
c001f746:	50                   	push   eax
c001f747:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f74e:	e8 6d ff ff ff       	call   c001f6c0 <FAT::fixFilepath(char*)>
c001f753:	83 c4 10             	add    esp,0x10
c001f756:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001f75e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f765:	83 e0 01             	and    eax,0x1
c001f768:	74 12                	je     c001f77c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001f76a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f771:	83 c8 01             	or     eax,0x1
c001f774:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f77b:	90                   	nop
c001f77c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f783:	83 e0 04             	and    eax,0x4
c001f786:	74 24                	je     c001f7ac <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001f788:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f78f:	83 c8 30             	or     eax,0x30
c001f792:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f799:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f7a0:	83 c8 02             	or     eax,0x2
c001f7a3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f7aa:	66 90                	xchg   ax,ax
c001f7ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f7b3:	83 e0 02             	and    eax,0x2
c001f7b6:	74 14                	je     c001f7cc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001f7b8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f7bf:	83 c8 02             	or     eax,0x2
c001f7c2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f7c9:	8d 76 00             	lea    esi,[esi+0x0]
c001f7cc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f7d3:	83 e0 08             	and    eax,0x8
c001f7d6:	74 14                	je     c001f7ec <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001f7d8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f7df:	83 c8 04             	or     eax,0x4
c001f7e2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f7e9:	8d 76 00             	lea    esi,[esi+0x0]
c001f7ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f7f3:	83 e0 10             	and    eax,0x10
c001f7f6:	74 14                	je     c001f80c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001f7f8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f7ff:	83 c8 08             	or     eax,0x8
c001f802:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f809:	8d 76 00             	lea    esi,[esi+0x0]
c001f80c:	83 ec 0c             	sub    esp,0xc
c001f80f:	68 28 02 00 00       	push   0x228
c001f814:	e8 f6 0d ff ff       	call   c001060f <malloc>
c001f819:	83 c4 10             	add    esp,0x10
c001f81c:	89 c2                	mov    edx,eax
c001f81e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f825:	89 10                	mov    DWORD PTR [eax],edx
c001f827:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001f82f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f836:	8b 00                	mov    eax,DWORD PTR [eax]
c001f838:	83 ec 04             	sub    esp,0x4
c001f83b:	52                   	push   edx
c001f83c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f840:	52                   	push   edx
c001f841:	50                   	push   eax
c001f842:	e8 fc 45 fe ff       	call   c0003e43 <f_open>
c001f847:	83 c4 10             	add    esp,0x10
c001f84a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001f851:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001f859:	74 09                	je     c001f864 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001f85b:	b8 01 00 00 00       	mov    eax,0x1
c001f860:	eb 0a                	jmp    c001f86c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001f862:	66 90                	xchg   ax,ax
c001f864:	b8 00 00 00 00       	mov    eax,0x0
c001f869:	8d 76 00             	lea    esi,[esi+0x0]
c001f86c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f872:	c3                   	ret    
c001f873:	90                   	nop

c001f874 <FAT::openDir(char const*, void**)>:
c001f874:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f87a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f882:	74 0c                	je     c001f890 <FAT::openDir(char const*, void**)+0x1c>
c001f884:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f88c:	75 0e                	jne    c001f89c <FAT::openDir(char const*, void**)+0x28>
c001f88e:	66 90                	xchg   ax,ax
c001f890:	b8 04 00 00 00       	mov    eax,0x4
c001f895:	e9 82 00 00 00       	jmp    c001f91c <FAT::openDir(char const*, void**)+0xa8>
c001f89a:	66 90                	xchg   ax,ax
c001f89c:	83 ec 08             	sub    esp,0x8
c001f89f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f8a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f8aa:	50                   	push   eax
c001f8ab:	e8 90 0d fe ff       	call   c0000640 <strcpy>
c001f8b0:	83 c4 10             	add    esp,0x10
c001f8b3:	83 ec 08             	sub    esp,0x8
c001f8b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f8ba:	50                   	push   eax
c001f8bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f8c2:	e8 f9 fd ff ff       	call   c001f6c0 <FAT::fixFilepath(char*)>
c001f8c7:	83 c4 10             	add    esp,0x10
c001f8ca:	83 ec 0c             	sub    esp,0xc
c001f8cd:	6a 30                	push   0x30
c001f8cf:	e8 3b 0d ff ff       	call   c001060f <malloc>
c001f8d4:	83 c4 10             	add    esp,0x10
c001f8d7:	89 c2                	mov    edx,eax
c001f8d9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f8e0:	89 10                	mov    DWORD PTR [eax],edx
c001f8e2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f8e9:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8eb:	83 ec 08             	sub    esp,0x8
c001f8ee:	8d 54 24 14          	lea    edx,[esp+0x14]
c001f8f2:	52                   	push   edx
c001f8f3:	50                   	push   eax
c001f8f4:	e8 f9 4e fe ff       	call   c00047f2 <f_opendir>
c001f8f9:	83 c4 10             	add    esp,0x10
c001f8fc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f903:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001f90b:	74 07                	je     c001f914 <FAT::openDir(char const*, void**)+0xa0>
c001f90d:	b8 01 00 00 00       	mov    eax,0x1
c001f912:	eb 08                	jmp    c001f91c <FAT::openDir(char const*, void**)+0xa8>
c001f914:	b8 00 00 00 00       	mov    eax,0x0
c001f919:	8d 76 00             	lea    esi,[esi+0x0]
c001f91c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f922:	c3                   	ret    
c001f923:	90                   	nop

c001f924 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001f924:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f92a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001f932:	75 0c                	jne    c001f940 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001f934:	b8 04 00 00 00       	mov    eax,0x4
c001f939:	e9 d6 00 00 00       	jmp    c001fa14 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f93e:	66 90                	xchg   ax,ax
c001f940:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001f948:	75 0a                	jne    c001f954 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001f94a:	b8 04 00 00 00       	mov    eax,0x4
c001f94f:	e9 c0 00 00 00       	jmp    c001fa14 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f954:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001f95c:	75 0a                	jne    c001f968 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001f95e:	b8 04 00 00 00       	mov    eax,0x4
c001f963:	e9 ac 00 00 00       	jmp    c001fa14 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f968:	83 ec 08             	sub    esp,0x8
c001f96b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f972:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f979:	50                   	push   eax
c001f97a:	e8 c1 0c fe ff       	call   c0000640 <strcpy>
c001f97f:	83 c4 10             	add    esp,0x10
c001f982:	83 ec 08             	sub    esp,0x8
c001f985:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001f98c:	50                   	push   eax
c001f98d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f994:	e8 27 fd ff ff       	call   c001f6c0 <FAT::fixFilepath(char*)>
c001f999:	83 c4 10             	add    esp,0x10
c001f99c:	83 ec 08             	sub    esp,0x8
c001f99f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f9a3:	50                   	push   eax
c001f9a4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f9ab:	50                   	push   eax
c001f9ac:	e8 c0 4f fe ff       	call   c0004971 <f_stat>
c001f9b1:	83 c4 10             	add    esp,0x10
c001f9b4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f9bb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f9c2:	85 c0                	test   eax,eax
c001f9c4:	74 0a                	je     c001f9d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001f9c6:	83 f8 04             	cmp    eax,0x4
c001f9c9:	74 39                	je     c001fa04 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001f9cb:	eb 3f                	jmp    c001fa0c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001f9cd:	8d 76 00             	lea    esi,[esi+0x0]
c001f9d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f9d4:	0f b6 c0             	movzx  eax,al
c001f9d7:	83 e0 10             	and    eax,0x10
c001f9da:	0f 95 c2             	setne  dl
c001f9dd:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001f9e4:	88 10                	mov    BYTE PTR [eax],dl
c001f9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ea:	ba 00 00 00 00       	mov    edx,0x0
c001f9ef:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001f9f6:	89 01                	mov    DWORD PTR [ecx],eax
c001f9f8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f9fb:	b8 00 00 00 00       	mov    eax,0x0
c001fa00:	eb 12                	jmp    c001fa14 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001fa02:	66 90                	xchg   ax,ax
c001fa04:	b8 02 00 00 00       	mov    eax,0x2
c001fa09:	eb 09                	jmp    c001fa14 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001fa0b:	90                   	nop
c001fa0c:	b8 01 00 00 00       	mov    eax,0x1
c001fa11:	8d 76 00             	lea    esi,[esi+0x0]
c001fa14:	81 c4 2c 02 00 00    	add    esp,0x22c
c001fa1a:	c3                   	ret    
c001fa1b:	90                   	nop

c001fa1c <FAT::unlink(char const*)>:
c001fa1c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fa22:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001fa2a:	75 08                	jne    c001fa34 <FAT::unlink(char const*)+0x18>
c001fa2c:	b8 04 00 00 00       	mov    eax,0x4
c001fa31:	eb 61                	jmp    c001fa94 <FAT::unlink(char const*)+0x78>
c001fa33:	90                   	nop
c001fa34:	83 ec 08             	sub    esp,0x8
c001fa37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fa3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fa42:	50                   	push   eax
c001fa43:	e8 f8 0b fe ff       	call   c0000640 <strcpy>
c001fa48:	83 c4 10             	add    esp,0x10
c001fa4b:	83 ec 08             	sub    esp,0x8
c001fa4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa52:	50                   	push   eax
c001fa53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fa5a:	e8 61 fc ff ff       	call   c001f6c0 <FAT::fixFilepath(char*)>
c001fa5f:	83 c4 10             	add    esp,0x10
c001fa62:	83 ec 0c             	sub    esp,0xc
c001fa65:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fa69:	50                   	push   eax
c001fa6a:	e8 74 51 fe ff       	call   c0004be3 <f_unlink>
c001fa6f:	83 c4 10             	add    esp,0x10
c001fa72:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001fa79:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001fa80:	85 c0                	test   eax,eax
c001fa82:	75 08                	jne    c001fa8c <FAT::unlink(char const*)+0x70>
c001fa84:	b8 00 00 00 00       	mov    eax,0x0
c001fa89:	eb 09                	jmp    c001fa94 <FAT::unlink(char const*)+0x78>
c001fa8b:	90                   	nop
c001fa8c:	b8 01 00 00 00       	mov    eax,0x1
c001fa91:	8d 76 00             	lea    esi,[esi+0x0]
c001fa94:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fa9a:	c3                   	ret    
c001fa9b:	90                   	nop

c001fa9c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001fa9c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001faa2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001faa9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001fab0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fab4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fab8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001fac0:	75 0a                	jne    c001facc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001fac2:	b8 04 00 00 00       	mov    eax,0x4
c001fac7:	e9 7c 01 00 00       	jmp    c001fc48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001facc:	83 ec 08             	sub    esp,0x8
c001facf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001fad6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001fada:	50                   	push   eax
c001fadb:	e8 60 0b fe ff       	call   c0000640 <strcpy>
c001fae0:	83 c4 10             	add    esp,0x10
c001fae3:	83 ec 08             	sub    esp,0x8
c001fae6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001faea:	50                   	push   eax
c001faeb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001faf2:	e8 c9 fb ff ff       	call   c001f6c0 <FAT::fixFilepath(char*)>
c001faf7:	83 c4 10             	add    esp,0x10
c001fafa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001fb02:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001fb0a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fb0f:	83 e0 01             	and    eax,0x1
c001fb12:	74 14                	je     c001fb28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001fb14:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001fb1b:	83 c8 01             	or     eax,0x1
c001fb1e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001fb25:	8d 76 00             	lea    esi,[esi+0x0]
c001fb28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fb2d:	83 e0 02             	and    eax,0x2
c001fb30:	74 12                	je     c001fb44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001fb32:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001fb39:	83 c8 20             	or     eax,0x20
c001fb3c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001fb43:	90                   	nop
c001fb44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fb49:	83 e0 04             	and    eax,0x4
c001fb4c:	74 12                	je     c001fb60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001fb4e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001fb55:	83 c8 04             	or     eax,0x4
c001fb58:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001fb5f:	90                   	nop
c001fb60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fb65:	83 e0 08             	and    eax,0x8
c001fb68:	74 12                	je     c001fb7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001fb6a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001fb71:	83 c8 02             	or     eax,0x2
c001fb74:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001fb7b:	90                   	nop
c001fb7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fb81:	83 e0 01             	and    eax,0x1
c001fb84:	74 12                	je     c001fb98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001fb86:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001fb8d:	83 c8 01             	or     eax,0x1
c001fb90:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001fb97:	90                   	nop
c001fb98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fb9d:	83 e0 02             	and    eax,0x2
c001fba0:	74 12                	je     c001fbb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001fba2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001fba9:	83 c8 20             	or     eax,0x20
c001fbac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001fbb3:	90                   	nop
c001fbb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fbb9:	83 e0 04             	and    eax,0x4
c001fbbc:	74 12                	je     c001fbd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001fbbe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001fbc5:	83 c8 04             	or     eax,0x4
c001fbc8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001fbcf:	90                   	nop
c001fbd0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fbd5:	83 e0 08             	and    eax,0x8
c001fbd8:	74 12                	je     c001fbec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001fbda:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001fbe1:	83 c8 02             	or     eax,0x2
c001fbe4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001fbeb:	90                   	nop
c001fbec:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001fbf3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001fbfa:	09 d0                	or     eax,edx
c001fbfc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001fc03:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001fc0b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001fc13:	83 ec 04             	sub    esp,0x4
c001fc16:	52                   	push   edx
c001fc17:	50                   	push   eax
c001fc18:	8d 44 24 24          	lea    eax,[esp+0x24]
c001fc1c:	50                   	push   eax
c001fc1d:	e8 36 54 fe ff       	call   c0005058 <f_chmod>
c001fc22:	83 c4 10             	add    esp,0x10
c001fc25:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001fc2c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001fc33:	85 c0                	test   eax,eax
c001fc35:	75 09                	jne    c001fc40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001fc37:	b8 00 00 00 00       	mov    eax,0x0
c001fc3c:	eb 0a                	jmp    c001fc48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001fc3e:	66 90                	xchg   ax,ax
c001fc40:	b8 01 00 00 00       	mov    eax,0x1
c001fc45:	8d 76 00             	lea    esi,[esi+0x0]
c001fc48:	81 c4 2c 01 00 00    	add    esp,0x12c
c001fc4e:	c3                   	ret    
c001fc4f:	90                   	nop

c001fc50 <FAT::rename(char const*, char const*)>:
c001fc50:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001fc56:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001fc5e:	74 0c                	je     c001fc6c <FAT::rename(char const*, char const*)+0x1c>
c001fc60:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001fc68:	75 0e                	jne    c001fc78 <FAT::rename(char const*, char const*)+0x28>
c001fc6a:	66 90                	xchg   ax,ax
c001fc6c:	b8 04 00 00 00       	mov    eax,0x4
c001fc71:	e9 9e 00 00 00       	jmp    c001fd14 <FAT::rename(char const*, char const*)+0xc4>
c001fc76:	66 90                	xchg   ax,ax
c001fc78:	83 ec 08             	sub    esp,0x8
c001fc7b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001fc82:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fc89:	50                   	push   eax
c001fc8a:	e8 b1 09 fe ff       	call   c0000640 <strcpy>
c001fc8f:	83 c4 10             	add    esp,0x10
c001fc92:	83 ec 08             	sub    esp,0x8
c001fc95:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001fc9c:	50                   	push   eax
c001fc9d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001fca4:	e8 17 fa ff ff       	call   c001f6c0 <FAT::fixFilepath(char*)>
c001fca9:	83 c4 10             	add    esp,0x10
c001fcac:	83 ec 08             	sub    esp,0x8
c001fcaf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001fcb6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fcba:	50                   	push   eax
c001fcbb:	e8 80 09 fe ff       	call   c0000640 <strcpy>
c001fcc0:	83 c4 10             	add    esp,0x10
c001fcc3:	83 ec 08             	sub    esp,0x8
c001fcc6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fcca:	50                   	push   eax
c001fccb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001fcd2:	e8 e9 f9 ff ff       	call   c001f6c0 <FAT::fixFilepath(char*)>
c001fcd7:	83 c4 10             	add    esp,0x10
c001fcda:	83 ec 08             	sub    esp,0x8
c001fcdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fce1:	50                   	push   eax
c001fce2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fce9:	50                   	push   eax
c001fcea:	e8 b1 51 fe ff       	call   c0004ea0 <f_rename>
c001fcef:	83 c4 10             	add    esp,0x10
c001fcf2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001fcf9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001fd00:	85 c0                	test   eax,eax
c001fd02:	75 08                	jne    c001fd0c <FAT::rename(char const*, char const*)+0xbc>
c001fd04:	b8 00 00 00 00       	mov    eax,0x0
c001fd09:	eb 09                	jmp    c001fd14 <FAT::rename(char const*, char const*)+0xc4>
c001fd0b:	90                   	nop
c001fd0c:	b8 01 00 00 00       	mov    eax,0x1
c001fd11:	8d 76 00             	lea    esi,[esi+0x0]
c001fd14:	81 c4 1c 02 00 00    	add    esp,0x21c
c001fd1a:	c3                   	ret    
c001fd1b:	90                   	nop

c001fd1c <FAT::mkdir(char const*)>:
c001fd1c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fd22:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001fd2a:	75 08                	jne    c001fd34 <FAT::mkdir(char const*)+0x18>
c001fd2c:	b8 04 00 00 00       	mov    eax,0x4
c001fd31:	eb 61                	jmp    c001fd94 <FAT::mkdir(char const*)+0x78>
c001fd33:	90                   	nop
c001fd34:	83 ec 08             	sub    esp,0x8
c001fd37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fd3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fd42:	50                   	push   eax
c001fd43:	e8 f8 08 fe ff       	call   c0000640 <strcpy>
c001fd48:	83 c4 10             	add    esp,0x10
c001fd4b:	83 ec 08             	sub    esp,0x8
c001fd4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fd52:	50                   	push   eax
c001fd53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fd5a:	e8 61 f9 ff ff       	call   c001f6c0 <FAT::fixFilepath(char*)>
c001fd5f:	83 c4 10             	add    esp,0x10
c001fd62:	83 ec 0c             	sub    esp,0xc
c001fd65:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fd69:	50                   	push   eax
c001fd6a:	e8 96 4f fe ff       	call   c0004d05 <f_mkdir>
c001fd6f:	83 c4 10             	add    esp,0x10
c001fd72:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001fd79:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001fd80:	85 c0                	test   eax,eax
c001fd82:	75 08                	jne    c001fd8c <FAT::mkdir(char const*)+0x70>
c001fd84:	b8 00 00 00 00       	mov    eax,0x0
c001fd89:	eb 09                	jmp    c001fd94 <FAT::mkdir(char const*)+0x78>
c001fd8b:	90                   	nop
c001fd8c:	b8 01 00 00 00       	mov    eax,0x1
c001fd91:	8d 76 00             	lea    esi,[esi+0x0]
c001fd94:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fd9a:	c3                   	ret    
c001fd9b:	90                   	nop

c001fd9c <FAT::exists(char const*)>:
c001fd9c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001fda2:	83 ec 08             	sub    esp,0x8
c001fda5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001fdac:	8d 44 24 10          	lea    eax,[esp+0x10]
c001fdb0:	50                   	push   eax
c001fdb1:	e8 8a 08 fe ff       	call   c0000640 <strcpy>
c001fdb6:	83 c4 10             	add    esp,0x10
c001fdb9:	83 ec 08             	sub    esp,0x8
c001fdbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fdc0:	50                   	push   eax
c001fdc1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001fdc8:	e8 f3 f8 ff ff       	call   c001f6c0 <FAT::fixFilepath(char*)>
c001fdcd:	83 c4 10             	add    esp,0x10
c001fdd0:	83 ec 08             	sub    esp,0x8
c001fdd3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001fdda:	50                   	push   eax
c001fddb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001fddf:	50                   	push   eax
c001fde0:	e8 8c 4b fe ff       	call   c0004971 <f_stat>
c001fde5:	83 c4 10             	add    esp,0x10
c001fde8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001fdef:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001fdf6:	85 c0                	test   eax,eax
c001fdf8:	75 06                	jne    c001fe00 <FAT::exists(char const*)+0x64>
c001fdfa:	b0 01                	mov    al,0x1
c001fdfc:	eb 06                	jmp    c001fe04 <FAT::exists(char const*)+0x68>
c001fdfe:	66 90                	xchg   ax,ax
c001fe00:	b0 00                	mov    al,0x0
c001fe02:	66 90                	xchg   ax,ax
c001fe04:	81 c4 2c 02 00 00    	add    esp,0x22c
c001fe0a:	c3                   	ret    
c001fe0b:	90                   	nop

c001fe0c <isoReadDiscSectorHelper>:
c001fe0c:	83 ec 2c             	sub    esp,0x2c
c001fe0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fe13:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fe17:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001fe1c:	83 e8 41             	sub    eax,0x41
c001fe1f:	8b 0c 85 e0 6a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9520]
c001fe26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fe2a:	ba 00 00 00 00       	mov    edx,0x0
c001fe2f:	83 ec 0c             	sub    esp,0xc
c001fe32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fe36:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe3a:	52                   	push   edx
c001fe3b:	50                   	push   eax
c001fe3c:	51                   	push   ecx
c001fe3d:	e8 70 b9 fe ff       	call   c000b7b2 <LogicalDisk::read(unsigned long long, int, void*)>
c001fe42:	83 c4 20             	add    esp,0x20
c001fe45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fe49:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001fe4e:	74 0c                	je     c001fe5c <isoReadDiscSectorHelper+0x50>
c001fe50:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe54:	c1 e0 0b             	shl    eax,0xb
c001fe57:	eb 0b                	jmp    c001fe64 <isoReadDiscSectorHelper+0x58>
c001fe59:	8d 76 00             	lea    esi,[esi+0x0]
c001fe5c:	b8 00 00 00 00       	mov    eax,0x0
c001fe61:	8d 76 00             	lea    esi,[esi+0x0]
c001fe64:	83 c4 2c             	add    esp,0x2c
c001fe67:	c3                   	ret    

c001fe68 <iso_kprintf>:
c001fe68:	83 ec 0c             	sub    esp,0xc
c001fe6b:	83 ec 08             	sub    esp,0x8
c001fe6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe72:	68 2c d5 02 c0       	push   0xc002d52c
c001fe77:	e8 00 71 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001fe7c:	83 c4 10             	add    esp,0x10
c001fe7f:	90                   	nop
c001fe80:	83 c4 0c             	add    esp,0xc
c001fe83:	c3                   	ret    

c001fe84 <iso_kprintfd>:
c001fe84:	83 ec 0c             	sub    esp,0xc
c001fe87:	83 ec 08             	sub    esp,0x8
c001fe8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe8e:	68 ea ca 02 c0       	push   0xc002caea
c001fe93:	e8 e4 70 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001fe98:	83 c4 10             	add    esp,0x10
c001fe9b:	90                   	nop
c001fe9c:	83 c4 0c             	add    esp,0xc
c001fe9f:	c3                   	ret    

c001fea0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001fea0:	b8 08 00 00 00       	mov    eax,0x8
c001fea5:	c3                   	ret    

c001fea6 <ISO9660::truncate(void*, unsigned long long)>:
c001fea6:	b8 01 00 00 00       	mov    eax,0x1
c001feab:	c3                   	ret    

c001feac <ISO9660::getName()>:
c001feac:	b8 e0 eb 02 c0       	mov    eax,0xc002ebe0
c001feb1:	c3                   	ret    

c001feb2 <ISO9660::closeDir(void*)>:
c001feb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001feb8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001febb:	90                   	nop

c001febc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001febc:	b8 01 00 00 00       	mov    eax,0x1
c001fec1:	c3                   	ret    

c001fec2 <ISO9660::unlink(char const*)>:
c001fec2:	b8 01 00 00 00       	mov    eax,0x1
c001fec7:	c3                   	ret    

c001fec8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001fec8:	b8 03 00 00 00       	mov    eax,0x3
c001fecd:	c3                   	ret    

c001fece <ISO9660::rename(char const*, char const*)>:
c001fece:	b8 01 00 00 00       	mov    eax,0x1
c001fed3:	c3                   	ret    

c001fed4 <ISO9660::mkdir(char const*)>:
c001fed4:	b8 01 00 00 00       	mov    eax,0x1
c001fed9:	c3                   	ret    

c001feda <ISO9660::~ISO9660()>:
c001feda:	83 ec 0c             	sub    esp,0xc
c001fedd:	ba 20 ed 02 c0       	mov    edx,0xc002ed20
c001fee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee6:	89 10                	mov    DWORD PTR [eax],edx
c001fee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feec:	83 ec 0c             	sub    esp,0xc
c001feef:	50                   	push   eax
c001fef0:	e8 37 8c fe ff       	call   c0008b2c <Filesystem::~Filesystem()>
c001fef5:	83 c4 10             	add    esp,0x10
c001fef8:	90                   	nop
c001fef9:	83 c4 0c             	add    esp,0xc
c001fefc:	c3                   	ret    
c001fefd:	90                   	nop

c001fefe <ISO9660::~ISO9660()>:
c001fefe:	83 ec 0c             	sub    esp,0xc
c001ff01:	83 ec 0c             	sub    esp,0xc
c001ff04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff08:	e8 cd ff ff ff       	call   c001feda <ISO9660::~ISO9660()>
c001ff0d:	83 c4 10             	add    esp,0x10
c001ff10:	83 ec 08             	sub    esp,0x8
c001ff13:	6a 08                	push   0x8
c001ff15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff19:	e8 fa e1 fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c001ff1e:	83 c4 10             	add    esp,0x10
c001ff21:	83 c4 0c             	add    esp,0xc
c001ff24:	c3                   	ret    
c001ff25:	90                   	nop

c001ff26 <ISO9660::exists(char const*)>:
c001ff26:	83 ec 18             	sub    esp,0x18
c001ff29:	68 fb eb 02 c0       	push   0xc002ebfb
c001ff2e:	e8 31 0b ff ff       	call   c0010a64 <KePanic(char const*)>
c001ff33:	31 c0                	xor    eax,eax
c001ff35:	83 c4 1c             	add    esp,0x1c
c001ff38:	c3                   	ret    
c001ff39:	90                   	nop

c001ff3a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ff3a:	56                   	push   esi
c001ff3b:	53                   	push   ebx
c001ff3c:	53                   	push   ebx
c001ff3d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff41:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ff45:	85 db                	test   ebx,ebx
c001ff47:	0f 84 ca 00 00 00    	je     c0020017 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ff4d:	85 f6                	test   esi,esi
c001ff4f:	0f 84 c2 00 00 00    	je     c0020017 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ff55:	b8 03 00 00 00       	mov    eax,0x3
c001ff5a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001ff5f:	0f 85 b7 00 00 00    	jne    c002001c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ff65:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ff67:	0f be 05 80 95 03 c0 	movsx  eax,BYTE PTR ds:0xc0039580
c001ff6e:	38 0d 80 95 03 c0    	cmp    BYTE PTR ds:0xc0039580,cl
c001ff74:	74 1b                	je     c001ff91 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ff76:	85 c0                	test   eax,eax
c001ff78:	74 10                	je     c001ff8a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ff7a:	83 ec 0c             	sub    esp,0xc
c001ff7d:	68 19 ec 02 c0       	push   0xc002ec19
c001ff82:	e8 dd 0a ff ff       	call   c0010a64 <KePanic(char const*)>
c001ff87:	83 c4 10             	add    esp,0x10
c001ff8a:	8a 03                	mov    al,BYTE PTR [ebx]
c001ff8c:	a2 80 95 03 c0       	mov    ds:0xc0039580,al
c001ff91:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ff94:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c001ff9b:	85 c0                	test   eax,eax
c001ff9d:	74 09                	je     c001ffa8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ff9f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ffa6:	74 48                	je     c001fff0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ffa8:	83 ec 0c             	sub    esp,0xc
c001ffab:	68 29 ec 02 c0       	push   0xc002ec29
c001ffb0:	e8 c7 6f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ffb5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ffb8:	83 c4 10             	add    esp,0x10
c001ffbb:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c001ffc2:	85 c0                	test   eax,eax
c001ffc4:	74 17                	je     c001ffdd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001ffc6:	83 ec 0c             	sub    esp,0xc
c001ffc9:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001ffd0:	68 49 ec 02 c0       	push   0xc002ec49
c001ffd5:	e8 a2 6f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ffda:	83 c4 10             	add    esp,0x10
c001ffdd:	83 ec 0c             	sub    esp,0xc
c001ffe0:	0f be 05 80 95 03 c0 	movsx  eax,BYTE PTR ds:0xc0039580
c001ffe7:	50                   	push   eax
c001ffe8:	e8 41 6c fe ff       	call   c0006c2e <init_percd>
c001ffed:	83 c4 10             	add    esp,0x10
c001fff0:	83 c3 03             	add    ebx,0x3
c001fff3:	51                   	push   ecx
c001fff4:	51                   	push   ecx
c001fff5:	6a 00                	push   0x0
c001fff7:	53                   	push   ebx
c001fff8:	e8 f8 66 fe ff       	call   c00066f5 <iso_open>
c001fffd:	83 c4 10             	add    esp,0x10
c0020000:	89 c2                	mov    edx,eax
c0020002:	b8 01 00 00 00       	mov    eax,0x1
c0020007:	83 fa ff             	cmp    edx,0xffffffff
c002000a:	74 10                	je     c002001c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c002000c:	83 c2 32             	add    edx,0x32
c002000f:	31 c0                	xor    eax,eax
c0020011:	01 d2                	add    edx,edx
c0020013:	89 16                	mov    DWORD PTR [esi],edx
c0020015:	eb 05                	jmp    c002001c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0020017:	b8 04 00 00 00       	mov    eax,0x4
c002001c:	5a                   	pop    edx
c002001d:	5b                   	pop    ebx
c002001e:	5e                   	pop    esi
c002001f:	c3                   	ret    

c0020020 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020020:	53                   	push   ebx
c0020021:	83 ec 08             	sub    esp,0x8
c0020024:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020028:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002002c:	85 c0                	test   eax,eax
c002002e:	74 2d                	je     c002005d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0020030:	85 db                	test   ebx,ebx
c0020032:	74 29                	je     c002005d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0020034:	b9 02 00 00 00       	mov    ecx,0x2
c0020039:	52                   	push   edx
c002003a:	99                   	cdq    
c002003b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002003f:	f7 f9                	idiv   ecx
c0020041:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020045:	83 e8 32             	sub    eax,0x32
c0020048:	50                   	push   eax
c0020049:	e8 4f 67 fe ff       	call   c000679d <iso_read>
c002004e:	83 c4 10             	add    esp,0x10
c0020051:	89 03                	mov    DWORD PTR [ebx],eax
c0020053:	09 d0                	or     eax,edx
c0020055:	0f 94 c0             	sete   al
c0020058:	0f b6 c0             	movzx  eax,al
c002005b:	eb 05                	jmp    c0020062 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c002005d:	b8 04 00 00 00       	mov    eax,0x4
c0020062:	83 c4 08             	add    esp,0x8
c0020065:	5b                   	pop    ebx
c0020066:	c3                   	ret    
c0020067:	90                   	nop

c0020068 <ISO9660::seek(void*, unsigned long long)>:
c0020068:	57                   	push   edi
c0020069:	56                   	push   esi
c002006a:	b8 04 00 00 00       	mov    eax,0x4
c002006f:	51                   	push   ecx
c0020070:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020074:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020078:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002007c:	85 d2                	test   edx,edx
c002007e:	74 26                	je     c00200a6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0020080:	6a 00                	push   0x0
c0020082:	b9 02 00 00 00       	mov    ecx,0x2
c0020087:	57                   	push   edi
c0020088:	89 d0                	mov    eax,edx
c002008a:	56                   	push   esi
c002008b:	99                   	cdq    
c002008c:	f7 f9                	idiv   ecx
c002008e:	83 e8 32             	sub    eax,0x32
c0020091:	50                   	push   eax
c0020092:	e8 1c 68 fe ff       	call   c00068b3 <iso_seek>
c0020097:	83 c4 10             	add    esp,0x10
c002009a:	31 f0                	xor    eax,esi
c002009c:	31 fa                	xor    edx,edi
c002009e:	09 d0                	or     eax,edx
c00200a0:	0f 95 c0             	setne  al
c00200a3:	0f b6 c0             	movzx  eax,al
c00200a6:	5a                   	pop    edx
c00200a7:	5e                   	pop    esi
c00200a8:	5f                   	pop    edi
c00200a9:	c3                   	ret    

c00200aa <ISO9660::tell(void*, unsigned long long*)>:
c00200aa:	53                   	push   ebx
c00200ab:	83 ec 08             	sub    esp,0x8
c00200ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00200b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00200b6:	85 c0                	test   eax,eax
c00200b8:	74 24                	je     c00200de <ISO9660::tell(void*, unsigned long long*)+0x34>
c00200ba:	85 db                	test   ebx,ebx
c00200bc:	74 20                	je     c00200de <ISO9660::tell(void*, unsigned long long*)+0x34>
c00200be:	83 ec 0c             	sub    esp,0xc
c00200c1:	b9 02 00 00 00       	mov    ecx,0x2
c00200c6:	99                   	cdq    
c00200c7:	f7 f9                	idiv   ecx
c00200c9:	83 e8 32             	sub    eax,0x32
c00200cc:	50                   	push   eax
c00200cd:	e8 65 68 fe ff       	call   c0006937 <iso_tell>
c00200d2:	83 c4 10             	add    esp,0x10
c00200d5:	89 03                	mov    DWORD PTR [ebx],eax
c00200d7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00200da:	31 c0                	xor    eax,eax
c00200dc:	eb 05                	jmp    c00200e3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00200de:	b8 04 00 00 00       	mov    eax,0x4
c00200e3:	83 c4 08             	add    esp,0x8
c00200e6:	5b                   	pop    ebx
c00200e7:	c3                   	ret    

c00200e8 <ISO9660::stat(void*, unsigned long long*)>:
c00200e8:	53                   	push   ebx
c00200e9:	83 ec 14             	sub    esp,0x14
c00200ec:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00200f0:	68 6d ec 02 c0       	push   0xc002ec6d
c00200f5:	e8 82 6e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00200fa:	83 c4 10             	add    esp,0x10
c00200fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020102:	74 2c                	je     c0020130 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0020104:	85 db                	test   ebx,ebx
c0020106:	74 28                	je     c0020130 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0020108:	83 ec 0c             	sub    esp,0xc
c002010b:	b9 02 00 00 00       	mov    ecx,0x2
c0020110:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020114:	99                   	cdq    
c0020115:	f7 f9                	idiv   ecx
c0020117:	83 e8 32             	sub    eax,0x32
c002011a:	50                   	push   eax
c002011b:	e8 48 68 fe ff       	call   c0006968 <iso_total>
c0020120:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020127:	89 03                	mov    DWORD PTR [ebx],eax
c0020129:	83 c4 10             	add    esp,0x10
c002012c:	31 c0                	xor    eax,eax
c002012e:	eb 05                	jmp    c0020135 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0020130:	b8 04 00 00 00       	mov    eax,0x4
c0020135:	83 c4 08             	add    esp,0x8
c0020138:	5b                   	pop    ebx
c0020139:	c3                   	ret    

c002013a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002013a:	55                   	push   ebp
c002013b:	57                   	push   edi
c002013c:	56                   	push   esi
c002013d:	53                   	push   ebx
c002013e:	83 ec 18             	sub    esp,0x18
c0020141:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020145:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0020149:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002014d:	68 75 ec 02 c0       	push   0xc002ec75
c0020152:	e8 25 6e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020157:	83 c4 10             	add    esp,0x10
c002015a:	85 ff                	test   edi,edi
c002015c:	0f 94 c0             	sete   al
c002015f:	85 f6                	test   esi,esi
c0020161:	0f 94 c2             	sete   dl
c0020164:	09 d0                	or     eax,edx
c0020166:	a8 01                	test   al,0x1
c0020168:	0f 85 dd 00 00 00    	jne    c002024b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002016e:	85 db                	test   ebx,ebx
c0020170:	0f 84 d5 00 00 00    	je     c002024b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0020176:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0020179:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c002017f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0020186:	0f be 05 80 95 03 c0 	movsx  eax,BYTE PTR ds:0xc0039580
c002018d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002018f:	38 0d 80 95 03 c0    	cmp    BYTE PTR ds:0xc0039580,cl
c0020195:	74 1b                	je     c00201b2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0020197:	85 c0                	test   eax,eax
c0020199:	74 10                	je     c00201ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c002019b:	83 ec 0c             	sub    esp,0xc
c002019e:	68 19 ec 02 c0       	push   0xc002ec19
c00201a3:	e8 bc 08 ff ff       	call   c0010a64 <KePanic(char const*)>
c00201a8:	83 c4 10             	add    esp,0x10
c00201ab:	8a 03                	mov    al,BYTE PTR [ebx]
c00201ad:	a2 80 95 03 c0       	mov    ds:0xc0039580,al
c00201b2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00201b5:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c00201bc:	85 c0                	test   eax,eax
c00201be:	74 09                	je     c00201c9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00201c0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00201c7:	74 51                	je     c002021a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00201c9:	83 ec 0c             	sub    esp,0xc
c00201cc:	68 7d ec 02 c0       	push   0xc002ec7d
c00201d1:	e8 a6 6d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00201d6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00201d9:	83 c4 10             	add    esp,0x10
c00201dc:	83 3c 85 dc 69 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc9624],0x0
c00201e4:	74 21                	je     c0020207 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00201e6:	83 ec 0c             	sub    esp,0xc
c00201e9:	68 9d ec 02 c0       	push   0xc002ec9d
c00201ee:	e8 89 6d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00201f3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00201f6:	83 c4 10             	add    esp,0x10
c00201f9:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c0020200:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0020207:	83 ec 0c             	sub    esp,0xc
c002020a:	0f be 05 80 95 03 c0 	movsx  eax,BYTE PTR ds:0xc0039580
c0020211:	50                   	push   eax
c0020212:	e8 17 6a fe ff       	call   c0006c2e <init_percd>
c0020217:	83 c4 10             	add    esp,0x10
c002021a:	83 c3 03             	add    ebx,0x3
c002021d:	52                   	push   edx
c002021e:	52                   	push   edx
c002021f:	6a 00                	push   0x0
c0020221:	53                   	push   ebx
c0020222:	e8 ce 64 fe ff       	call   c00066f5 <iso_open>
c0020227:	83 c4 10             	add    esp,0x10
c002022a:	89 c5                	mov    ebp,eax
c002022c:	83 f8 ff             	cmp    eax,0xffffffff
c002022f:	75 21                	jne    c0020252 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0020231:	50                   	push   eax
c0020232:	50                   	push   eax
c0020233:	6a 01                	push   0x1
c0020235:	53                   	push   ebx
c0020236:	e8 ba 64 fe ff       	call   c00066f5 <iso_open>
c002023b:	83 c4 10             	add    esp,0x10
c002023e:	ba 02 00 00 00       	mov    edx,0x2
c0020243:	40                   	inc    eax
c0020244:	74 2b                	je     c0020271 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0020246:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0020249:	eb 24                	jmp    c002026f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c002024b:	ba 04 00 00 00       	mov    edx,0x4
c0020250:	eb 1f                	jmp    c0020271 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0020252:	83 ec 0c             	sub    esp,0xc
c0020255:	50                   	push   eax
c0020256:	e8 0d 67 fe ff       	call   c0006968 <iso_total>
c002025b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0020262:	89 07                	mov    DWORD PTR [edi],eax
c0020264:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0020267:	e8 13 65 fe ff       	call   c000677f <iso_close>
c002026c:	83 c4 10             	add    esp,0x10
c002026f:	31 d2                	xor    edx,edx
c0020271:	83 c4 0c             	add    esp,0xc
c0020274:	89 d0                	mov    eax,edx
c0020276:	5b                   	pop    ebx
c0020277:	5e                   	pop    esi
c0020278:	5f                   	pop    edi
c0020279:	5d                   	pop    ebp
c002027a:	c3                   	ret    
c002027b:	90                   	nop

c002027c <ISO9660::close(void*)>:
c002027c:	83 ec 0c             	sub    esp,0xc
c002027f:	b8 04 00 00 00       	mov    eax,0x4
c0020284:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020288:	85 d2                	test   edx,edx
c002028a:	74 1b                	je     c00202a7 <ISO9660::close(void*)+0x2b>
c002028c:	83 ec 0c             	sub    esp,0xc
c002028f:	b9 02 00 00 00       	mov    ecx,0x2
c0020294:	89 d0                	mov    eax,edx
c0020296:	99                   	cdq    
c0020297:	f7 f9                	idiv   ecx
c0020299:	83 e8 32             	sub    eax,0x32
c002029c:	50                   	push   eax
c002029d:	e8 dd 64 fe ff       	call   c000677f <iso_close>
c00202a2:	83 c4 10             	add    esp,0x10
c00202a5:	31 c0                	xor    eax,eax
c00202a7:	83 c4 0c             	add    esp,0xc
c00202aa:	c3                   	ret    
c00202ab:	90                   	nop

c00202ac <ISO9660::openDir(char const*, void**)>:
c00202ac:	56                   	push   esi
c00202ad:	53                   	push   ebx
c00202ae:	50                   	push   eax
c00202af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00202b3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00202b7:	85 db                	test   ebx,ebx
c00202b9:	0f 84 bd 00 00 00    	je     c002037c <ISO9660::openDir(char const*, void**)+0xd0>
c00202bf:	85 f6                	test   esi,esi
c00202c1:	0f 84 b5 00 00 00    	je     c002037c <ISO9660::openDir(char const*, void**)+0xd0>
c00202c7:	8a 13                	mov    dl,BYTE PTR [ebx]
c00202c9:	0f be 05 80 95 03 c0 	movsx  eax,BYTE PTR ds:0xc0039580
c00202d0:	38 15 80 95 03 c0    	cmp    BYTE PTR ds:0xc0039580,dl
c00202d6:	74 1b                	je     c00202f3 <ISO9660::openDir(char const*, void**)+0x47>
c00202d8:	85 c0                	test   eax,eax
c00202da:	74 10                	je     c00202ec <ISO9660::openDir(char const*, void**)+0x40>
c00202dc:	83 ec 0c             	sub    esp,0xc
c00202df:	68 19 ec 02 c0       	push   0xc002ec19
c00202e4:	e8 7b 07 ff ff       	call   c0010a64 <KePanic(char const*)>
c00202e9:	83 c4 10             	add    esp,0x10
c00202ec:	8a 03                	mov    al,BYTE PTR [ebx]
c00202ee:	a2 80 95 03 c0       	mov    ds:0xc0039580,al
c00202f3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00202f6:	8b 04 85 dc 69 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9624]
c00202fd:	85 c0                	test   eax,eax
c00202ff:	74 10                	je     c0020311 <ISO9660::openDir(char const*, void**)+0x65>
c0020301:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0020308:	74 1a                	je     c0020324 <ISO9660::openDir(char const*, void**)+0x78>
c002030a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0020311:	83 ec 0c             	sub    esp,0xc
c0020314:	0f be 05 80 95 03 c0 	movsx  eax,BYTE PTR ds:0xc0039580
c002031b:	50                   	push   eax
c002031c:	e8 0d 69 fe ff       	call   c0006c2e <init_percd>
c0020321:	83 c4 10             	add    esp,0x10
c0020324:	83 c3 03             	add    ebx,0x3
c0020327:	50                   	push   eax
c0020328:	50                   	push   eax
c0020329:	6a 01                	push   0x1
c002032b:	53                   	push   ebx
c002032c:	e8 c4 63 fe ff       	call   c00066f5 <iso_open>
c0020331:	83 c4 10             	add    esp,0x10
c0020334:	89 c3                	mov    ebx,eax
c0020336:	83 f8 ff             	cmp    eax,0xffffffff
c0020339:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c002033e:	75 1c                	jne    c002035c <ISO9660::openDir(char const*, void**)+0xb0>
c0020340:	53                   	push   ebx
c0020341:	53                   	push   ebx
c0020342:	68 c1 ec 02 c0       	push   0xc002ecc1
c0020347:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c002034d:	e8 7e 30 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c0020352:	83 c4 10             	add    esp,0x10
c0020355:	b8 01 00 00 00       	mov    eax,0x1
c002035a:	eb 25                	jmp    c0020381 <ISO9660::openDir(char const*, void**)+0xd5>
c002035c:	01 db                	add    ebx,ebx
c002035e:	51                   	push   ecx
c002035f:	83 c3 65             	add    ebx,0x65
c0020362:	51                   	push   ecx
c0020363:	68 d4 ec 02 c0       	push   0xc002ecd4
c0020368:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c002036e:	e8 5d 30 ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c0020373:	89 1e                	mov    DWORD PTR [esi],ebx
c0020375:	83 c4 10             	add    esp,0x10
c0020378:	31 c0                	xor    eax,eax
c002037a:	eb 05                	jmp    c0020381 <ISO9660::openDir(char const*, void**)+0xd5>
c002037c:	b8 04 00 00 00       	mov    eax,0x4
c0020381:	5a                   	pop    edx
c0020382:	5b                   	pop    ebx
c0020383:	5e                   	pop    esi
c0020384:	c3                   	ret    
c0020385:	90                   	nop

c0020386 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020386:	55                   	push   ebp
c0020387:	57                   	push   edi
c0020388:	56                   	push   esi
c0020389:	53                   	push   ebx
c002038a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020390:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0020397:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002039e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00203a6:	0f 84 e7 00 00 00    	je     c0020493 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00203ac:	85 db                	test   ebx,ebx
c00203ae:	0f 84 df 00 00 00    	je     c0020493 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00203b4:	83 ec 0c             	sub    esp,0xc
c00203b7:	68 e7 ec 02 c0       	push   0xc002ece7
c00203bc:	e8 bb 6b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00203c1:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00203c8:	b9 02 00 00 00       	mov    ecx,0x2
c00203cd:	99                   	cdq    
c00203ce:	f7 f9                	idiv   ecx
c00203d0:	83 e8 32             	sub    eax,0x32
c00203d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00203d6:	e8 df 65 fe ff       	call   c00069ba <iso_readdir>
c00203db:	83 c4 10             	add    esp,0x10
c00203de:	89 c6                	mov    esi,eax
c00203e0:	85 c0                	test   eax,eax
c00203e2:	75 37                	jne    c002041b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c00203e4:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c00203e9:	56                   	push   esi
c00203ea:	56                   	push   esi
c00203eb:	68 f2 ec 02 c0       	push   0xc002ecf2
c00203f0:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c00203f6:	e8 d5 2f ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c00203fb:	83 c4 0c             	add    esp,0xc
c00203fe:	68 10 01 00 00       	push   0x110
c0020403:	6a 00                	push   0x0
c0020405:	57                   	push   edi
c0020406:	e8 e5 00 fe ff       	call   c00004f0 <memset>
c002040b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020411:	83 c4 10             	add    esp,0x10
c0020414:	b8 01 00 00 00       	mov    eax,0x1
c0020419:	eb 7d                	jmp    c0020498 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c002041b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020421:	8d 68 08             	lea    ebp,[eax+0x8]
c0020424:	83 ec 0c             	sub    esp,0xc
c0020427:	55                   	push   ebp
c0020428:	e8 43 01 fe ff       	call   c0000570 <strlen>
c002042d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0020435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020439:	83 c4 10             	add    esp,0x10
c002043c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0020440:	75 0a                	jne    c002044c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020442:	b8 02 00 00 00       	mov    eax,0x2
c0020447:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c002044a:	74 05                	je     c0020451 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c002044c:	b8 01 00 00 00       	mov    eax,0x1
c0020451:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020455:	50                   	push   eax
c0020456:	50                   	push   eax
c0020457:	55                   	push   ebp
c0020458:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002045c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0020460:	50                   	push   eax
c0020461:	e8 da 01 fe ff       	call   c0000640 <strcpy>
c0020466:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002046d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002046f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0020475:	5a                   	pop    edx
c0020476:	a1 58 73 03 c0       	mov    eax,ds:0xc0037358
c002047b:	59                   	pop    ecx
c002047c:	68 05 ed 02 c0       	push   0xc002ed05
c0020481:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c0020487:	e8 44 2f ff ff       	call   c00133d0 <VgaText::puts(char const*)>
c002048c:	83 c4 10             	add    esp,0x10
c002048f:	31 c0                	xor    eax,eax
c0020491:	eb 05                	jmp    c0020498 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0020493:	b8 04 00 00 00       	mov    eax,0x4
c0020498:	81 c4 1c 01 00 00    	add    esp,0x11c
c002049e:	5b                   	pop    ebx
c002049f:	5e                   	pop    esi
c00204a0:	5f                   	pop    edi
c00204a1:	5d                   	pop    ebp
c00204a2:	c3                   	ret    

c00204a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00204a3:	57                   	push   edi
c00204a4:	56                   	push   esi
c00204a5:	53                   	push   ebx
c00204a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00204aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00204ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00204b2:	39 35 84 95 03 c0    	cmp    DWORD PTR ds:0xc0039584,esi
c00204b8:	0f be cb             	movsx  ecx,bl
c00204bb:	75 0b                	jne    c00204c8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00204bd:	0f be 05 e8 0e 03 c0 	movsx  eax,BYTE PTR ds:0xc0030ee8
c00204c4:	39 c8                	cmp    eax,ecx
c00204c6:	74 47                	je     c002050f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00204c8:	83 ec 0c             	sub    esp,0xc
c00204cb:	31 d2                	xor    edx,edx
c00204cd:	68 a0 95 03 c0       	push   0xc00395a0
c00204d2:	6a 01                	push   0x1
c00204d4:	52                   	push   edx
c00204d5:	56                   	push   esi
c00204d6:	ff 34 8d dc 69 03 c0 	push   DWORD PTR [ecx*4-0x3ffc9624]
c00204dd:	e8 d0 b2 fe ff       	call   c000b7b2 <LogicalDisk::read(unsigned long long, int, void*)>
c00204e2:	83 c4 20             	add    esp,0x20
c00204e5:	85 c0                	test   eax,eax
c00204e7:	75 0e                	jne    c00204f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00204e9:	89 35 84 95 03 c0    	mov    DWORD PTR ds:0xc0039584,esi
c00204ef:	88 1d e8 0e 03 c0    	mov    BYTE PTR ds:0xc0030ee8,bl
c00204f5:	eb 18                	jmp    c002050f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00204f7:	50                   	push   eax
c00204f8:	68 00 08 00 00       	push   0x800
c00204fd:	6a 00                	push   0x0
c00204ff:	57                   	push   edi
c0020500:	e8 eb ff fd ff       	call   c00004f0 <memset>
c0020505:	83 c4 10             	add    esp,0x10
c0020508:	b8 01 00 00 00       	mov    eax,0x1
c002050d:	eb 0e                	jmp    c002051d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c002050f:	be a0 95 03 c0       	mov    esi,0xc00395a0
c0020514:	b9 00 08 00 00       	mov    ecx,0x800
c0020519:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002051b:	31 c0                	xor    eax,eax
c002051d:	5b                   	pop    ebx
c002051e:	5e                   	pop    esi
c002051f:	5f                   	pop    edi
c0020520:	c3                   	ret    
c0020521:	90                   	nop

c0020522 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020522:	53                   	push   ebx
c0020523:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0020529:	c7 05 84 95 03 c0 ef be ad de 	mov    DWORD PTR ds:0xc0039584,0xdeadbeef
c0020533:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c002053a:	8d 58 41             	lea    ebx,[eax+0x41]
c002053d:	0f be db             	movsx  ebx,bl
c0020540:	53                   	push   ebx
c0020541:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020545:	50                   	push   eax
c0020546:	6a 10                	push   0x10
c0020548:	e8 56 ff ff ff       	call   c00204a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002054d:	83 c4 10             	add    esp,0x10
c0020550:	31 d2                	xor    edx,edx
c0020552:	85 c0                	test   eax,eax
c0020554:	75 33                	jne    c0020589 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0020556:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002055b:	75 2c                	jne    c0020589 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002055d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020562:	75 25                	jne    c0020589 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0020564:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020569:	75 1e                	jne    c0020589 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002056b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020570:	75 17                	jne    c0020589 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0020572:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020577:	75 10                	jne    c0020589 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0020579:	83 ec 0c             	sub    esp,0xc
c002057c:	53                   	push   ebx
c002057d:	e8 ac 66 fe ff       	call   c0006c2e <init_percd>
c0020582:	83 c4 10             	add    esp,0x10
c0020585:	40                   	inc    eax
c0020586:	0f 95 c2             	setne  dl
c0020589:	88 d0                	mov    al,dl
c002058b:	81 c4 08 08 00 00    	add    esp,0x808
c0020591:	5b                   	pop    ebx
c0020592:	c3                   	ret    
c0020593:	90                   	nop

c0020594 <ISO9660::ISO9660()>:
c0020594:	83 ec 0c             	sub    esp,0xc
c0020597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002059b:	83 ec 0c             	sub    esp,0xc
c002059e:	50                   	push   eax
c002059f:	e8 64 85 fe ff       	call   c0008b08 <Filesystem::Filesystem()>
c00205a4:	83 c4 10             	add    esp,0x10
c00205a7:	ba 20 ed 02 c0       	mov    edx,0xc002ed20
c00205ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b0:	89 10                	mov    DWORD PTR [eax],edx
c00205b2:	e8 89 67 fe ff       	call   c0006d40 <fs_iso9660_init>
c00205b7:	90                   	nop
c00205b8:	83 c4 0c             	add    esp,0xc
c00205bb:	c3                   	ret    

c00205bc <SoundCard::beginPlayback()>:
c00205bc:	c7 44 24 04 84 ed 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ed84
c00205c4:	e9 9b 04 ff ff       	jmp    c0010a64 <KePanic(char const*)>
c00205c9:	90                   	nop

c00205ca <SoundCard::stopPlayback()>:
c00205ca:	c7 44 24 04 84 ed 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ed84
c00205d2:	e9 8d 04 ff ff       	jmp    c0010a64 <KePanic(char const*)>
c00205d7:	90                   	nop

c00205d8 <SoundCard::SoundCard(char const*)>:
c00205d8:	83 ec 1c             	sub    esp,0x1c
c00205db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205df:	83 ec 08             	sub    esp,0x8
c00205e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00205e6:	50                   	push   eax
c00205e7:	e8 0a a3 fe ff       	call   c000a8f6 <Device::Device(char const*)>
c00205ec:	83 c4 10             	add    esp,0x10
c00205ef:	ba d0 ed 02 c0       	mov    edx,0xc002edd0
c00205f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205f8:	89 10                	mov    DWORD PTR [eax],edx
c00205fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205fe:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0020605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020609:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0020613:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020617:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0020621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020625:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c002062f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020633:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002063d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020645:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002064a:	7f 1a                	jg     c0020666 <SoundCard::SoundCard(char const*)+0x8e>
c002064c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020650:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020654:	83 c2 54             	add    edx,0x54
c0020657:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c002065f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0020664:	eb df                	jmp    c0020645 <SoundCard::SoundCard(char const*)+0x6d>
c0020666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002066a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0020671:	90                   	nop
c0020672:	83 c4 1c             	add    esp,0x1c
c0020675:	c3                   	ret    

c0020676 <SoundCard::~SoundCard()>:
c0020676:	83 ec 0c             	sub    esp,0xc
c0020679:	ba d0 ed 02 c0       	mov    edx,0xc002edd0
c002067e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020682:	89 10                	mov    DWORD PTR [eax],edx
c0020684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020688:	83 ec 0c             	sub    esp,0xc
c002068b:	50                   	push   eax
c002068c:	e8 05 a0 fe ff       	call   c000a696 <Device::~Device()>
c0020691:	83 c4 10             	add    esp,0x10
c0020694:	90                   	nop
c0020695:	83 c4 0c             	add    esp,0xc
c0020698:	c3                   	ret    
c0020699:	90                   	nop

c002069a <SoundCard::~SoundCard()>:
c002069a:	83 ec 0c             	sub    esp,0xc
c002069d:	83 ec 0c             	sub    esp,0xc
c00206a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206a4:	e8 cd ff ff ff       	call   c0020676 <SoundCard::~SoundCard()>
c00206a9:	83 c4 10             	add    esp,0x10
c00206ac:	83 ec 08             	sub    esp,0x8
c00206af:	68 e8 01 00 00       	push   0x1e8
c00206b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206b8:	e8 5b da fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c00206bd:	83 c4 10             	add    esp,0x10
c00206c0:	83 c4 0c             	add    esp,0xc
c00206c3:	c3                   	ret    

c00206c4 <SoundCard::configureRates(int, int, int)>:
c00206c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00206c8:	31 c0                	xor    eax,eax
c00206ca:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00206d1:	75 20                	jne    c00206f3 <SoundCard::configureRates(int, int, int)+0x2f>
c00206d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206d7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00206dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206e1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00206e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206eb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00206f1:	b0 01                	mov    al,0x1
c00206f3:	c3                   	ret    

c00206f4 <SoundCard::getSamples16(int, short*)>:
c00206f4:	55                   	push   ebp
c00206f5:	57                   	push   edi
c00206f6:	31 ff                	xor    edi,edi
c00206f8:	56                   	push   esi
c00206f9:	53                   	push   ebx
c00206fa:	31 db                	xor    ebx,ebx
c00206fc:	83 ec 10             	sub    esp,0x10
c00206ff:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020703:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0020707:	8d 04 36             	lea    eax,[esi+esi*1]
c002070a:	50                   	push   eax
c002070b:	6a 00                	push   0x0
c002070d:	55                   	push   ebp
c002070e:	e8 dd fd fd ff       	call   c00004f0 <memset>
c0020713:	83 c4 10             	add    esp,0x10
c0020716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002071a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0020721:	85 c0                	test   eax,eax
c0020723:	74 1b                	je     c0020740 <SoundCard::getSamples16(int, short*)+0x4c>
c0020725:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0020729:	75 15                	jne    c0020740 <SoundCard::getSamples16(int, short*)+0x4c>
c002072b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002072f:	55                   	push   ebp
c0020730:	56                   	push   esi
c0020731:	50                   	push   eax
c0020732:	e8 8d 03 00 00       	call   c0020ac4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0020737:	83 c4 10             	add    esp,0x10
c002073a:	39 c7                	cmp    edi,eax
c002073c:	7d 02                	jge    c0020740 <SoundCard::getSamples16(int, short*)+0x4c>
c002073e:	89 c7                	mov    edi,eax
c0020740:	43                   	inc    ebx
c0020741:	83 fb 20             	cmp    ebx,0x20
c0020744:	75 d0                	jne    c0020716 <SoundCard::getSamples16(int, short*)+0x22>
c0020746:	83 c4 0c             	add    esp,0xc
c0020749:	89 f8                	mov    eax,edi
c002074b:	5b                   	pop    ebx
c002074c:	5e                   	pop    esi
c002074d:	5f                   	pop    edi
c002074e:	5d                   	pop    ebp
c002074f:	c3                   	ret    

c0020750 <SoundCard::getSamples32(int, int*)>:
c0020750:	55                   	push   ebp
c0020751:	57                   	push   edi
c0020752:	31 ff                	xor    edi,edi
c0020754:	56                   	push   esi
c0020755:	31 f6                	xor    esi,esi
c0020757:	53                   	push   ebx
c0020758:	83 ec 10             	sub    esp,0x10
c002075b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002075f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0020763:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0020767:	c1 e0 02             	shl    eax,0x2
c002076a:	50                   	push   eax
c002076b:	6a 00                	push   0x0
c002076d:	55                   	push   ebp
c002076e:	e8 7d fd fd ff       	call   c00004f0 <memset>
c0020773:	83 c4 10             	add    esp,0x10
c0020776:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c002077d:	85 c0                	test   eax,eax
c002077f:	74 1b                	je     c002079c <SoundCard::getSamples32(int, int*)+0x4c>
c0020781:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0020785:	75 15                	jne    c002079c <SoundCard::getSamples32(int, int*)+0x4c>
c0020787:	53                   	push   ebx
c0020788:	55                   	push   ebp
c0020789:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002078d:	50                   	push   eax
c002078e:	e8 fd 03 00 00       	call   c0020b90 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0020793:	83 c4 10             	add    esp,0x10
c0020796:	39 c6                	cmp    esi,eax
c0020798:	7d 02                	jge    c002079c <SoundCard::getSamples32(int, int*)+0x4c>
c002079a:	89 c6                	mov    esi,eax
c002079c:	47                   	inc    edi
c002079d:	83 ff 20             	cmp    edi,0x20
c00207a0:	75 d4                	jne    c0020776 <SoundCard::getSamples32(int, int*)+0x26>
c00207a2:	85 f6                	test   esi,esi
c00207a4:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c00207ab:	75 0f                	jne    c00207bc <SoundCard::getSamples32(int, int*)+0x6c>
c00207ad:	85 c0                	test   eax,eax
c00207af:	74 1b                	je     c00207cc <SoundCard::getSamples32(int, int*)+0x7c>
c00207b1:	83 ec 0c             	sub    esp,0xc
c00207b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00207b6:	53                   	push   ebx
c00207b7:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00207ba:	eb 0d                	jmp    c00207c9 <SoundCard::getSamples32(int, int*)+0x79>
c00207bc:	85 c0                	test   eax,eax
c00207be:	75 0c                	jne    c00207cc <SoundCard::getSamples32(int, int*)+0x7c>
c00207c0:	83 ec 0c             	sub    esp,0xc
c00207c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00207c5:	53                   	push   ebx
c00207c6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00207c9:	83 c4 10             	add    esp,0x10
c00207cc:	83 c4 0c             	add    esp,0xc
c00207cf:	89 f0                	mov    eax,esi
c00207d1:	5b                   	pop    ebx
c00207d2:	5e                   	pop    esi
c00207d3:	5f                   	pop    edi
c00207d4:	5d                   	pop    ebp
c00207d5:	c3                   	ret    

c00207d6 <SoundCard::addChannel(SoundPort*)>:
c00207d6:	83 ec 0c             	sub    esp,0xc
c00207d9:	31 c0                	xor    eax,eax
c00207db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00207df:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00207e7:	74 1b                	je     c0020804 <SoundCard::addChannel(SoundPort*)+0x2e>
c00207e9:	40                   	inc    eax
c00207ea:	83 f8 20             	cmp    eax,0x20
c00207ed:	75 f0                	jne    c00207df <SoundCard::addChannel(SoundPort*)+0x9>
c00207ef:	83 ec 0c             	sub    esp,0xc
c00207f2:	68 a9 ed 02 c0       	push   0xc002eda9
c00207f7:	e8 68 02 ff ff       	call   c0010a64 <KePanic(char const*)>
c00207fc:	83 c4 10             	add    esp,0x10
c00207ff:	83 c8 ff             	or     eax,0xffffffff
c0020802:	eb 0b                	jmp    c002080f <SoundCard::addChannel(SoundPort*)+0x39>
c0020804:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020808:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c002080f:	83 c4 0c             	add    esp,0xc
c0020812:	c3                   	ret    
c0020813:	90                   	nop

c0020814 <SoundCard::removeChannel(int)>:
c0020814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020818:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002081c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0020827:	c3                   	ret    

c0020828 <SoundPort::SoundPort(int, int, int, int)>:
c0020828:	83 ec 0c             	sub    esp,0xc
c002082b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002082f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002083a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002083e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020842:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020846:	89 10                	mov    DWORD PTR [eax],edx
c0020848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002084c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020850:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020857:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002085b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002085e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0020863:	75 13                	jne    c0020878 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0020865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020869:	8b 00                	mov    eax,DWORD PTR [eax]
c002086b:	05 a0 0f 00 00       	add    eax,0xfa0
c0020870:	01 c0                	add    eax,eax
c0020872:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020876:	66 90                	xchg   ax,ax
c0020878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002087c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020880:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0020883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020887:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c002088e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020892:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0020895:	c1 e0 02             	shl    eax,0x2
c0020898:	83 ec 0c             	sub    esp,0xc
c002089b:	50                   	push   eax
c002089c:	e8 6e fd fe ff       	call   c001060f <malloc>
c00208a1:	83 c4 10             	add    esp,0x10
c00208a4:	89 c2                	mov    edx,eax
c00208a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208aa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00208ad:	90                   	nop
c00208ae:	83 c4 0c             	add    esp,0xc
c00208b1:	c3                   	ret    
c00208b2:	66 90                	xchg   ax,ax

c00208b4 <SoundPort::~SoundPort()>:
c00208b4:	83 ec 0c             	sub    esp,0xc
c00208b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00208be:	85 c0                	test   eax,eax
c00208c0:	74 1e                	je     c00208e0 <SoundPort::~SoundPort()+0x2c>
c00208c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208c6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00208c9:	83 ec 0c             	sub    esp,0xc
c00208cc:	50                   	push   eax
c00208cd:	e8 4d fd fe ff       	call   c001061f <free>
c00208d2:	83 c4 10             	add    esp,0x10
c00208d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208d9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00208e0:	90                   	nop
c00208e1:	83 c4 0c             	add    esp,0xc
c00208e4:	c3                   	ret    
c00208e5:	90                   	nop
c00208e6:	66 90                	xchg   ax,ax

c00208e8 <SoundPort::unpause()>:
c00208e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208ec:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00208f0:	c3                   	ret    
c00208f1:	90                   	nop
c00208f2:	66 90                	xchg   ax,ax

c00208f4 <SoundPort::pause()>:
c00208f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208f8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00208fc:	c3                   	ret    
c00208fd:	90                   	nop
c00208fe:	66 90                	xchg   ax,ax

c0020900 <SoundPort::getBufferUsed()>:
c0020900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020904:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0020907:	c3                   	ret    

c0020908 <SoundPort::getBufferSize()>:
c0020908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002090c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002090f:	c3                   	ret    

c0020910 <SoundPort::buffer8(signed char*, int)>:
c0020910:	55                   	push   ebp
c0020911:	57                   	push   edi
c0020912:	56                   	push   esi
c0020913:	53                   	push   ebx
c0020914:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020918:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002091c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c002091f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0020922:	74 70                	je     c0020994 <SoundPort::buffer8(signed char*, int)+0x84>
c0020924:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020928:	85 c9                	test   ecx,ecx
c002092a:	7e 68                	jle    c0020994 <SoundPort::buffer8(signed char*, int)+0x84>
c002092c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c0020930:	8d 48 01             	lea    ecx,[eax+0x1]
c0020933:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0020936:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020939:	89 f1                	mov    ecx,esi
c002093b:	c1 e1 18             	shl    ecx,0x18
c002093e:	29 f1                	sub    ecx,esi
c0020940:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0020943:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020946:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020949:	74 51                	je     c002099c <SoundPort::buffer8(signed char*, int)+0x8c>
c002094b:	31 ff                	xor    edi,edi
c002094d:	eb 25                	jmp    c0020974 <SoundPort::buffer8(signed char*, int)+0x64>
c002094f:	90                   	nop
c0020950:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c0020955:	8d 59 01             	lea    ebx,[ecx+0x1]
c0020958:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c002095b:	89 f3                	mov    ebx,esi
c002095d:	c1 e3 18             	shl    ebx,0x18
c0020960:	29 f3                	sub    ebx,esi
c0020962:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c0020965:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0020968:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002096b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002096e:	74 1c                	je     c002098c <SoundPort::buffer8(signed char*, int)+0x7c>
c0020970:	89 c7                	mov    edi,eax
c0020972:	66 90                	xchg   ax,ax
c0020974:	8d 47 01             	lea    eax,[edi+0x1]
c0020977:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c002097b:	75 d3                	jne    c0020950 <SoundPort::buffer8(signed char*, int)+0x40>
c002097d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020981:	8d 76 00             	lea    esi,[esi+0x0]
c0020984:	5b                   	pop    ebx
c0020985:	5e                   	pop    esi
c0020986:	5f                   	pop    edi
c0020987:	5d                   	pop    ebp
c0020988:	c3                   	ret    
c0020989:	8d 76 00             	lea    esi,[esi+0x0]
c002098c:	5b                   	pop    ebx
c002098d:	8d 47 02             	lea    eax,[edi+0x2]
c0020990:	5e                   	pop    esi
c0020991:	5f                   	pop    edi
c0020992:	5d                   	pop    ebp
c0020993:	c3                   	ret    
c0020994:	5b                   	pop    ebx
c0020995:	31 c0                	xor    eax,eax
c0020997:	5e                   	pop    esi
c0020998:	5f                   	pop    edi
c0020999:	5d                   	pop    ebp
c002099a:	c3                   	ret    
c002099b:	90                   	nop
c002099c:	b8 01 00 00 00       	mov    eax,0x1
c00209a1:	eb e1                	jmp    c0020984 <SoundPort::buffer8(signed char*, int)+0x74>
c00209a3:	90                   	nop

c00209a4 <SoundPort::buffer16(short*, int)>:
c00209a4:	55                   	push   ebp
c00209a5:	57                   	push   edi
c00209a6:	56                   	push   esi
c00209a7:	53                   	push   ebx
c00209a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00209ac:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00209b0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00209b3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00209b6:	74 70                	je     c0020a28 <SoundPort::buffer16(short*, int)+0x84>
c00209b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00209bc:	85 c9                	test   ecx,ecx
c00209be:	7e 68                	jle    c0020a28 <SoundPort::buffer16(short*, int)+0x84>
c00209c0:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c00209c4:	8d 48 01             	lea    ecx,[eax+0x1]
c00209c7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00209ca:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00209cd:	89 f1                	mov    ecx,esi
c00209cf:	c1 e1 10             	shl    ecx,0x10
c00209d2:	29 f1                	sub    ecx,esi
c00209d4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00209d7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00209da:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00209dd:	74 51                	je     c0020a30 <SoundPort::buffer16(short*, int)+0x8c>
c00209df:	31 ff                	xor    edi,edi
c00209e1:	eb 25                	jmp    c0020a08 <SoundPort::buffer16(short*, int)+0x64>
c00209e3:	90                   	nop
c00209e4:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c00209e9:	8d 59 01             	lea    ebx,[ecx+0x1]
c00209ec:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c00209ef:	89 f3                	mov    ebx,esi
c00209f1:	c1 e3 10             	shl    ebx,0x10
c00209f4:	29 f3                	sub    ebx,esi
c00209f6:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c00209f9:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00209fc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00209ff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020a02:	74 1c                	je     c0020a20 <SoundPort::buffer16(short*, int)+0x7c>
c0020a04:	89 c7                	mov    edi,eax
c0020a06:	66 90                	xchg   ax,ax
c0020a08:	8d 47 01             	lea    eax,[edi+0x1]
c0020a0b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0020a0f:	75 d3                	jne    c00209e4 <SoundPort::buffer16(short*, int)+0x40>
c0020a11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a15:	8d 76 00             	lea    esi,[esi+0x0]
c0020a18:	5b                   	pop    ebx
c0020a19:	5e                   	pop    esi
c0020a1a:	5f                   	pop    edi
c0020a1b:	5d                   	pop    ebp
c0020a1c:	c3                   	ret    
c0020a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0020a20:	5b                   	pop    ebx
c0020a21:	8d 47 02             	lea    eax,[edi+0x2]
c0020a24:	5e                   	pop    esi
c0020a25:	5f                   	pop    edi
c0020a26:	5d                   	pop    ebp
c0020a27:	c3                   	ret    
c0020a28:	5b                   	pop    ebx
c0020a29:	31 c0                	xor    eax,eax
c0020a2b:	5e                   	pop    esi
c0020a2c:	5f                   	pop    edi
c0020a2d:	5d                   	pop    ebp
c0020a2e:	c3                   	ret    
c0020a2f:	90                   	nop
c0020a30:	b8 01 00 00 00       	mov    eax,0x1
c0020a35:	eb e1                	jmp    c0020a18 <SoundPort::buffer16(short*, int)+0x74>
c0020a37:	90                   	nop

c0020a38 <SoundPort::buffer32(int*, int)>:
c0020a38:	55                   	push   ebp
c0020a39:	57                   	push   edi
c0020a3a:	56                   	push   esi
c0020a3b:	53                   	push   ebx
c0020a3c:	83 ec 04             	sub    esp,0x4
c0020a3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020a43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a47:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020a4a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020a4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a51:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020a54:	74 5a                	je     c0020ab0 <SoundPort::buffer32(int*, int)+0x78>
c0020a56:	85 c0                	test   eax,eax
c0020a58:	7e 56                	jle    c0020ab0 <SoundPort::buffer32(int*, int)+0x78>
c0020a5a:	8d 71 01             	lea    esi,[ecx+0x1]
c0020a5d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0020a60:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0020a63:	8b 37                	mov    esi,DWORD PTR [edi]
c0020a65:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0020a68:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020a6b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020a6e:	74 4c                	je     c0020abc <SoundPort::buffer32(int*, int)+0x84>
c0020a70:	31 f6                	xor    esi,esi
c0020a72:	eb 1c                	jmp    c0020a90 <SoundPort::buffer32(int*, int)+0x58>
c0020a74:	8d 69 01             	lea    ebp,[ecx+0x1]
c0020a77:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0020a7a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0020a7d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0020a80:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0020a84:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020a87:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020a8a:	74 18                	je     c0020aa4 <SoundPort::buffer32(int*, int)+0x6c>
c0020a8c:	89 de                	mov    esi,ebx
c0020a8e:	66 90                	xchg   ax,ax
c0020a90:	8d 5e 01             	lea    ebx,[esi+0x1]
c0020a93:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0020a96:	75 dc                	jne    c0020a74 <SoundPort::buffer32(int*, int)+0x3c>
c0020a98:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020a9b:	90                   	nop
c0020a9c:	83 c4 04             	add    esp,0x4
c0020a9f:	5b                   	pop    ebx
c0020aa0:	5e                   	pop    esi
c0020aa1:	5f                   	pop    edi
c0020aa2:	5d                   	pop    ebp
c0020aa3:	c3                   	ret    
c0020aa4:	83 c4 04             	add    esp,0x4
c0020aa7:	8d 46 02             	lea    eax,[esi+0x2]
c0020aaa:	5b                   	pop    ebx
c0020aab:	5e                   	pop    esi
c0020aac:	5f                   	pop    edi
c0020aad:	5d                   	pop    ebp
c0020aae:	c3                   	ret    
c0020aaf:	90                   	nop
c0020ab0:	83 c4 04             	add    esp,0x4
c0020ab3:	31 c0                	xor    eax,eax
c0020ab5:	5b                   	pop    ebx
c0020ab6:	5e                   	pop    esi
c0020ab7:	5f                   	pop    edi
c0020ab8:	5d                   	pop    ebp
c0020ab9:	c3                   	ret    
c0020aba:	66 90                	xchg   ax,ax
c0020abc:	b8 01 00 00 00       	mov    eax,0x1
c0020ac1:	eb d9                	jmp    c0020a9c <SoundPort::buffer32(int*, int)+0x64>
c0020ac3:	90                   	nop

c0020ac4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0020ac4:	57                   	push   edi
c0020ac5:	56                   	push   esi
c0020ac6:	53                   	push   ebx
c0020ac7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020acb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0020acf:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0020ad5:	39 03                	cmp    DWORD PTR [ebx],eax
c0020ad7:	74 13                	je     c0020aec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0020ad9:	83 ec 0c             	sub    esp,0xc
c0020adc:	68 fc ed 02 c0       	push   0xc002edfc
c0020ae1:	e8 7e ff fe ff       	call   c0010a64 <KePanic(char const*)>
c0020ae6:	83 c4 10             	add    esp,0x10
c0020ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0020aec:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0020af2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0020af5:	74 11                	je     c0020b08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0020af7:	83 ec 0c             	sub    esp,0xc
c0020afa:	68 3b ee 02 c0       	push   0xc002ee3b
c0020aff:	e8 60 ff fe ff       	call   c0010a64 <KePanic(char const*)>
c0020b04:	83 c4 10             	add    esp,0x10
c0020b07:	90                   	nop
c0020b08:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0020b0e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0020b11:	74 11                	je     c0020b24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0020b13:	83 ec 0c             	sub    esp,0xc
c0020b16:	68 3b ee 02 c0       	push   0xc002ee3b
c0020b1b:	e8 44 ff fe ff       	call   c0010a64 <KePanic(char const*)>
c0020b20:	83 c4 10             	add    esp,0x10
c0020b23:	90                   	nop
c0020b24:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0020b27:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0020b2b:	7e 07                	jle    c0020b34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0020b2d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020b31:	8d 76 00             	lea    esi,[esi+0x0]
c0020b34:	85 f6                	test   esi,esi
c0020b36:	7e 2c                	jle    c0020b64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0020b38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020b3c:	8d 3c 36             	lea    edi,[esi+esi*1]
c0020b3f:	31 c9                	xor    ecx,ecx
c0020b41:	01 d7                	add    edi,edx
c0020b43:	90                   	nop
c0020b44:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0020b47:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0020b4a:	85 c0                	test   eax,eax
c0020b4c:	79 06                	jns    c0020b54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0020b4e:	05 ff 7f 00 00       	add    eax,0x7fff
c0020b53:	90                   	nop
c0020b54:	c1 f8 0f             	sar    eax,0xf
c0020b57:	83 c1 04             	add    ecx,0x4
c0020b5a:	66 01 02             	add    WORD PTR [edx],ax
c0020b5d:	83 c2 02             	add    edx,0x2
c0020b60:	39 d7                	cmp    edi,edx
c0020b62:	75 e0                	jne    c0020b44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0020b64:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0020b67:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0020b6a:	83 ec 04             	sub    esp,0x4
c0020b6d:	29 f0                	sub    eax,esi
c0020b6f:	c1 e0 02             	shl    eax,0x2
c0020b72:	50                   	push   eax
c0020b73:	8d 04 b2             	lea    eax,[edx+esi*4]
c0020b76:	50                   	push   eax
c0020b77:	52                   	push   edx
c0020b78:	e8 53 f8 fd ff       	call   c00003d0 <memmove>
c0020b7d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0020b80:	83 c4 10             	add    esp,0x10
c0020b83:	29 f0                	sub    eax,esi
c0020b85:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0020b88:	89 f0                	mov    eax,esi
c0020b8a:	5b                   	pop    ebx
c0020b8b:	5e                   	pop    esi
c0020b8c:	5f                   	pop    edi
c0020b8d:	c3                   	ret    
c0020b8e:	66 90                	xchg   ax,ax

c0020b90 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0020b90:	57                   	push   edi
c0020b91:	56                   	push   esi
c0020b92:	53                   	push   ebx
c0020b93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020b97:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020b9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020b9f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0020ba5:	39 06                	cmp    DWORD PTR [esi],eax
c0020ba7:	74 13                	je     c0020bbc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0020ba9:	83 ec 0c             	sub    esp,0xc
c0020bac:	68 1c ee 02 c0       	push   0xc002ee1c
c0020bb1:	e8 ae fe fe ff       	call   c0010a64 <KePanic(char const*)>
c0020bb6:	83 c4 10             	add    esp,0x10
c0020bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0020bbc:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0020bc2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0020bc5:	74 11                	je     c0020bd8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0020bc7:	83 ec 0c             	sub    esp,0xc
c0020bca:	68 57 ee 02 c0       	push   0xc002ee57
c0020bcf:	e8 90 fe fe ff       	call   c0010a64 <KePanic(char const*)>
c0020bd4:	83 c4 10             	add    esp,0x10
c0020bd7:	90                   	nop
c0020bd8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0020bde:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0020be1:	74 11                	je     c0020bf4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0020be3:	83 ec 0c             	sub    esp,0xc
c0020be6:	68 57 ee 02 c0       	push   0xc002ee57
c0020beb:	e8 74 fe fe ff       	call   c0010a64 <KePanic(char const*)>
c0020bf0:	83 c4 10             	add    esp,0x10
c0020bf3:	90                   	nop
c0020bf4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0020bf7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0020bfb:	7e 07                	jle    c0020c04 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0020bfd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0020c01:	8d 76 00             	lea    esi,[esi+0x0]
c0020c04:	85 ff                	test   edi,edi
c0020c06:	7e 1c                	jle    c0020c24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0020c08:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0020c0f:	31 c0                	xor    eax,eax
c0020c11:	8d 76 00             	lea    esi,[esi+0x0]
c0020c14:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020c17:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0020c1a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0020c1d:	83 c0 04             	add    eax,0x4
c0020c20:	39 c1                	cmp    ecx,eax
c0020c22:	75 f0                	jne    c0020c14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0020c24:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020c27:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020c2a:	83 ec 04             	sub    esp,0x4
c0020c2d:	29 f8                	sub    eax,edi
c0020c2f:	c1 e0 02             	shl    eax,0x2
c0020c32:	50                   	push   eax
c0020c33:	8d 04 ba             	lea    eax,[edx+edi*4]
c0020c36:	50                   	push   eax
c0020c37:	52                   	push   edx
c0020c38:	e8 93 f7 fd ff       	call   c00003d0 <memmove>
c0020c3d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0020c40:	83 c4 10             	add    esp,0x10
c0020c43:	29 f8                	sub    eax,edi
c0020c45:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0020c48:	89 f8                	mov    eax,edi
c0020c4a:	5b                   	pop    ebx
c0020c4b:	5e                   	pop    esi
c0020c4c:	5f                   	pop    edi
c0020c4d:	c3                   	ret    

c0020c4e <PCI::open(int, int, void*)>:
c0020c4e:	83 ec 18             	sub    esp,0x18
c0020c51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c55:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020c59:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020c5f:	8b 10                	mov    edx,DWORD PTR [eax]
c0020c61:	50                   	push   eax
c0020c62:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0020c65:	31 c0                	xor    eax,eax
c0020c67:	83 c4 1c             	add    esp,0x1c
c0020c6a:	c3                   	ret    
c0020c6b:	90                   	nop

c0020c6c <PCI::close(int, int, void*)>:
c0020c6c:	31 c0                	xor    eax,eax
c0020c6e:	c3                   	ret    
c0020c6f:	90                   	nop

c0020c70 <PCI::PCI()>:
c0020c70:	83 ec 0c             	sub    esp,0xc
c0020c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c77:	83 ec 08             	sub    esp,0x8
c0020c7a:	68 fa af 02 c0       	push   0xc002affa
c0020c7f:	50                   	push   eax
c0020c80:	e8 1f 8a fe ff       	call   c00096a4 <Bus::Bus(char const*)>
c0020c85:	83 c4 10             	add    esp,0x10
c0020c88:	ba 74 ef 02 c0       	mov    edx,0xc002ef74
c0020c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c91:	89 10                	mov    DWORD PTR [eax],edx
c0020c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c97:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0020ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ca5:	a3 a0 9d 03 c0       	mov    ds:0xc0039da0,eax
c0020caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020cb4:	0f b6 d0             	movzx  edx,al
c0020cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cbb:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0020cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cc6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020ccc:	0f b6 d0             	movzx  edx,al
c0020ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cd3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020ce2:	8d 50 01             	lea    edx,[eax+0x1]
c0020ce5:	88 d1                	mov    cl,dl
c0020ce7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020ceb:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0020cf1:	0f b6 d0             	movzx  edx,al
c0020cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cf8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020cfc:	83 c9 c0             	or     ecx,0xffffffc0
c0020cff:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020d03:	90                   	nop
c0020d04:	83 c4 0c             	add    esp,0xc
c0020d07:	c3                   	ret    

c0020d08 <PCI::readBAR8(unsigned int, int)>:
c0020d08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d10:	f6 c2 01             	test   dl,0x1
c0020d13:	74 07                	je     c0020d1c <PCI::readBAR8(unsigned int, int)+0x14>
c0020d15:	83 e2 fc             	and    edx,0xfffffffc
c0020d18:	01 c2                	add    edx,eax
c0020d1a:	ec                   	in     al,dx
c0020d1b:	c3                   	ret    
c0020d1c:	83 e2 f0             	and    edx,0xfffffff0
c0020d1f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0020d22:	c3                   	ret    
c0020d23:	90                   	nop

c0020d24 <PCI::readBAR16(unsigned int, int)>:
c0020d24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d2c:	f6 c2 01             	test   dl,0x1
c0020d2f:	74 08                	je     c0020d39 <PCI::readBAR16(unsigned int, int)+0x15>
c0020d31:	83 e2 fc             	and    edx,0xfffffffc
c0020d34:	01 c2                	add    edx,eax
c0020d36:	66 ed                	in     ax,dx
c0020d38:	c3                   	ret    
c0020d39:	83 e2 f0             	and    edx,0xfffffff0
c0020d3c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0020d40:	c3                   	ret    
c0020d41:	90                   	nop

c0020d42 <PCI::readBAR32(unsigned int, int)>:
c0020d42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d4a:	f6 c2 01             	test   dl,0x1
c0020d4d:	74 07                	je     c0020d56 <PCI::readBAR32(unsigned int, int)+0x14>
c0020d4f:	83 e2 fc             	and    edx,0xfffffffc
c0020d52:	01 c2                	add    edx,eax
c0020d54:	ed                   	in     eax,dx
c0020d55:	c3                   	ret    
c0020d56:	83 e2 f0             	and    edx,0xfffffff0
c0020d59:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0020d5c:	c3                   	ret    
c0020d5d:	90                   	nop

c0020d5e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0020d5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d6a:	f6 c2 01             	test   dl,0x1
c0020d6d:	74 07                	je     c0020d76 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0020d6f:	83 e2 fc             	and    edx,0xfffffffc
c0020d72:	01 ca                	add    edx,ecx
c0020d74:	ee                   	out    dx,al
c0020d75:	c3                   	ret    
c0020d76:	83 e2 f0             	and    edx,0xfffffff0
c0020d79:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0020d7c:	c3                   	ret    
c0020d7d:	90                   	nop

c0020d7e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0020d7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d8a:	f6 c2 01             	test   dl,0x1
c0020d8d:	74 08                	je     c0020d97 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0020d8f:	83 e2 fc             	and    edx,0xfffffffc
c0020d92:	01 ca                	add    edx,ecx
c0020d94:	66 ef                	out    dx,ax
c0020d96:	c3                   	ret    
c0020d97:	83 e2 f0             	and    edx,0xfffffff0
c0020d9a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0020d9e:	c3                   	ret    
c0020d9f:	90                   	nop

c0020da0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0020da0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020da8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020dac:	f6 c2 01             	test   dl,0x1
c0020daf:	74 07                	je     c0020db8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0020db1:	83 e2 fc             	and    edx,0xfffffffc
c0020db4:	01 ca                	add    edx,ecx
c0020db6:	ef                   	out    dx,eax
c0020db7:	c3                   	ret    
c0020db8:	83 e2 f0             	and    edx,0xfffffff0
c0020dbb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0020dbe:	c3                   	ret    
c0020dbf:	90                   	nop

c0020dc0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020dc0:	55                   	push   ebp
c0020dc1:	57                   	push   edi
c0020dc2:	56                   	push   esi
c0020dc3:	53                   	push   ebx
c0020dc4:	83 ec 0c             	sub    esp,0xc
c0020dc7:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c0020dcc:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0020dd0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0020dd4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020dd8:	83 fe 07             	cmp    esi,0x7
c0020ddb:	76 10                	jbe    c0020ded <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0020ddd:	83 ec 0c             	sub    esp,0xc
c0020de0:	68 73 ee 02 c0       	push   0xc002ee73
c0020de5:	e8 7a fc fe ff       	call   c0010a64 <KePanic(char const*)>
c0020dea:	83 c4 10             	add    esp,0x10
c0020ded:	0f b6 db             	movzx  ebx,bl
c0020df0:	83 fb 0f             	cmp    ebx,0xf
c0020df3:	76 10                	jbe    c0020e05 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c0020df5:	83 ec 0c             	sub    esp,0xc
c0020df8:	68 a3 ee 02 c0       	push   0xc002eea3
c0020dfd:	e8 62 fc fe ff       	call   c0010a64 <KePanic(char const*)>
c0020e02:	83 c4 10             	add    esp,0x10
c0020e05:	8d 04 36             	lea    eax,[esi+esi*1]
c0020e08:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020e0d:	83 c8 f0             	or     eax,0xfffffff0
c0020e10:	ee                   	out    dx,al
c0020e11:	ba fa 0c 00 00       	mov    edx,0xcfa
c0020e16:	89 e8                	mov    eax,ebp
c0020e18:	ee                   	out    dx,al
c0020e19:	83 c4 0c             	add    esp,0xc
c0020e1c:	89 d8                	mov    eax,ebx
c0020e1e:	89 f9                	mov    ecx,edi
c0020e20:	c1 e0 08             	shl    eax,0x8
c0020e23:	0f b6 d9             	movzx  ebx,cl
c0020e26:	83 e3 fc             	and    ebx,0xfffffffc
c0020e29:	09 d8                	or     eax,ebx
c0020e2b:	5b                   	pop    ebx
c0020e2c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c0020e31:	5e                   	pop    esi
c0020e32:	5f                   	pop    edi
c0020e33:	5d                   	pop    ebp
c0020e34:	c3                   	ret    
c0020e35:	90                   	nop

c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020e36:	57                   	push   edi
c0020e37:	56                   	push   esi
c0020e38:	53                   	push   ebx
c0020e39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020e3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e41:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0020e47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020e4b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020e4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020e53:	83 ff 01             	cmp    edi,0x1
c0020e56:	75 3f                	jne    c0020e97 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c0020e58:	89 de                	mov    esi,ebx
c0020e5a:	0f b6 c0             	movzx  eax,al
c0020e5d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0020e63:	c1 e0 10             	shl    eax,0x10
c0020e66:	0f b6 c9             	movzx  ecx,cl
c0020e69:	09 f0                	or     eax,esi
c0020e6b:	c1 e1 08             	shl    ecx,0x8
c0020e6e:	0f b6 d2             	movzx  edx,dl
c0020e71:	09 c8                	or     eax,ecx
c0020e73:	c1 e2 0b             	shl    edx,0xb
c0020e76:	09 d0                	or     eax,edx
c0020e78:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020e7d:	0d 00 00 00 80       	or     eax,0x80000000
c0020e82:	ef                   	out    dx,eax
c0020e83:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020e88:	ed                   	in     eax,dx
c0020e89:	83 e3 02             	and    ebx,0x2
c0020e8c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c0020e93:	d3 e8                	shr    eax,cl
c0020e95:	eb 44                	jmp    c0020edb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c0020e97:	83 ff 02             	cmp    edi,0x2
c0020e9a:	75 2d                	jne    c0020ec9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c0020e9c:	83 ec 0c             	sub    esp,0xc
c0020e9f:	0f b6 c9             	movzx  ecx,cl
c0020ea2:	0f b6 d2             	movzx  edx,dl
c0020ea5:	0f b6 fb             	movzx  edi,bl
c0020ea8:	0f b6 c0             	movzx  eax,al
c0020eab:	57                   	push   edi
c0020eac:	51                   	push   ecx
c0020ead:	52                   	push   edx
c0020eae:	50                   	push   eax
c0020eaf:	56                   	push   esi
c0020eb0:	e8 0b ff ff ff       	call   c0020dc0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020eb5:	89 c2                	mov    edx,eax
c0020eb7:	ed                   	in     eax,dx
c0020eb8:	83 e3 02             	and    ebx,0x2
c0020ebb:	83 c4 20             	add    esp,0x20
c0020ebe:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c0020ec5:	d3 e8                	shr    eax,cl
c0020ec7:	eb 12                	jmp    c0020edb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c0020ec9:	83 ec 0c             	sub    esp,0xc
c0020ecc:	68 46 b0 02 c0       	push   0xc002b046
c0020ed1:	e8 8e fb fe ff       	call   c0010a64 <KePanic(char const*)>
c0020ed6:	83 c4 10             	add    esp,0x10
c0020ed9:	31 c0                	xor    eax,eax
c0020edb:	5b                   	pop    ebx
c0020edc:	5e                   	pop    esi
c0020edd:	5f                   	pop    edi
c0020ede:	c3                   	ret    
c0020edf:	90                   	nop

c0020ee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0020ee0:	83 ec 18             	sub    esp,0x18
c0020ee3:	6a 00                	push   0x0
c0020ee5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020eea:	50                   	push   eax
c0020eeb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020ef0:	50                   	push   eax
c0020ef1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020ef6:	50                   	push   eax
c0020ef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020efb:	e8 36 ff ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020f00:	83 c4 2c             	add    esp,0x2c
c0020f03:	c3                   	ret    

c0020f04 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0020f04:	83 ec 18             	sub    esp,0x18
c0020f07:	6a 0e                	push   0xe
c0020f09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020f0e:	50                   	push   eax
c0020f0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020f14:	50                   	push   eax
c0020f15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020f1a:	50                   	push   eax
c0020f1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020f1f:	e8 12 ff ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020f24:	83 c4 2c             	add    esp,0x2c
c0020f27:	0f b6 c0             	movzx  eax,al
c0020f2a:	c3                   	ret    
c0020f2b:	90                   	nop

c0020f2c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0020f2c:	55                   	push   ebp
c0020f2d:	57                   	push   edi
c0020f2e:	56                   	push   esi
c0020f2f:	53                   	push   ebx
c0020f30:	83 ec 18             	sub    esp,0x18
c0020f33:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0020f38:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0020f3d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0020f42:	6a 0a                	push   0xa
c0020f44:	56                   	push   esi
c0020f45:	55                   	push   ebp
c0020f46:	57                   	push   edi
c0020f47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020f4b:	e8 e6 fe ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020f50:	83 c4 14             	add    esp,0x14
c0020f53:	89 c3                	mov    ebx,eax
c0020f55:	6a 0a                	push   0xa
c0020f57:	0f b6 db             	movzx  ebx,bl
c0020f5a:	56                   	push   esi
c0020f5b:	55                   	push   ebp
c0020f5c:	57                   	push   edi
c0020f5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020f61:	e8 d0 fe ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020f66:	83 c4 2c             	add    esp,0x2c
c0020f69:	25 00 ff 00 00       	and    eax,0xff00
c0020f6e:	09 d8                	or     eax,ebx
c0020f70:	5b                   	pop    ebx
c0020f71:	5e                   	pop    esi
c0020f72:	5f                   	pop    edi
c0020f73:	5d                   	pop    ebp
c0020f74:	c3                   	ret    
c0020f75:	90                   	nop

c0020f76 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020f76:	83 ec 18             	sub    esp,0x18
c0020f79:	6a 08                	push   0x8
c0020f7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020f80:	50                   	push   eax
c0020f81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020f86:	50                   	push   eax
c0020f87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020f8c:	50                   	push   eax
c0020f8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020f91:	e8 a0 fe ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020f96:	83 c4 2c             	add    esp,0x2c
c0020f99:	0f b6 c4             	movzx  eax,ah
c0020f9c:	c3                   	ret    
c0020f9d:	90                   	nop

c0020f9e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020f9e:	83 ec 18             	sub    esp,0x18
c0020fa1:	6a 08                	push   0x8
c0020fa3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020fa8:	50                   	push   eax
c0020fa9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020fae:	50                   	push   eax
c0020faf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020fb4:	50                   	push   eax
c0020fb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020fb9:	e8 78 fe ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020fbe:	83 c4 2c             	add    esp,0x2c
c0020fc1:	c3                   	ret    

c0020fc2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020fc2:	83 ec 18             	sub    esp,0x18
c0020fc5:	6a 3c                	push   0x3c
c0020fc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020fcc:	50                   	push   eax
c0020fcd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020fd2:	50                   	push   eax
c0020fd3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020fd8:	50                   	push   eax
c0020fd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020fdd:	e8 54 fe ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020fe2:	83 c4 2c             	add    esp,0x2c
c0020fe5:	c3                   	ret    

c0020fe6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020fe6:	83 ec 18             	sub    esp,0x18
c0020fe9:	6a 18                	push   0x18
c0020feb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020ff0:	50                   	push   eax
c0020ff1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020ff6:	50                   	push   eax
c0020ff7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020ffc:	50                   	push   eax
c0020ffd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021001:	e8 30 fe ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021006:	83 c4 2c             	add    esp,0x2c
c0021009:	0f b6 c4             	movzx  eax,ah
c002100c:	c3                   	ret    
c002100d:	90                   	nop

c002100e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002100e:	55                   	push   ebp
c002100f:	57                   	push   edi
c0021010:	56                   	push   esi
c0021011:	53                   	push   ebx
c0021012:	83 ec 28             	sub    esp,0x28
c0021015:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021019:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002101e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0021023:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0021028:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002102f:	8d 43 12             	lea    eax,[ebx+0x12]
c0021032:	83 c3 10             	add    ebx,0x10
c0021035:	0f b6 c0             	movzx  eax,al
c0021038:	0f b6 db             	movzx  ebx,bl
c002103b:	50                   	push   eax
c002103c:	51                   	push   ecx
c002103d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0021041:	57                   	push   edi
c0021042:	55                   	push   ebp
c0021043:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021047:	e8 ea fd ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002104c:	83 c4 14             	add    esp,0x14
c002104f:	89 c6                	mov    esi,eax
c0021051:	53                   	push   ebx
c0021052:	c1 e6 10             	shl    esi,0x10
c0021055:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021059:	51                   	push   ecx
c002105a:	57                   	push   edi
c002105b:	55                   	push   ebp
c002105c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021060:	e8 d1 fd ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021065:	83 c4 3c             	add    esp,0x3c
c0021068:	0f b7 c0             	movzx  eax,ax
c002106b:	5b                   	pop    ebx
c002106c:	09 f0                	or     eax,esi
c002106e:	5e                   	pop    esi
c002106f:	5f                   	pop    edi
c0021070:	5d                   	pop    ebp
c0021071:	c3                   	ret    

c0021072 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021072:	55                   	push   ebp
c0021073:	57                   	push   edi
c0021074:	56                   	push   esi
c0021075:	53                   	push   ebx
c0021076:	83 ec 0c             	sub    esp,0xc
c0021079:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002107d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021081:	89 f5                	mov    ebp,esi
c0021083:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0021089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002108d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021091:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021095:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021099:	83 f9 01             	cmp    ecx,0x1
c002109c:	75 5d                	jne    c00210fb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002109e:	0f b6 c8             	movzx  ecx,al
c00210a1:	0f b6 d2             	movzx  edx,dl
c00210a4:	c1 e1 10             	shl    ecx,0x10
c00210a7:	c1 e2 0b             	shl    edx,0xb
c00210aa:	89 f0                	mov    eax,esi
c00210ac:	25 fc 00 00 00       	and    eax,0xfc
c00210b1:	09 c1                	or     ecx,eax
c00210b3:	89 e8                	mov    eax,ebp
c00210b5:	0f b6 c0             	movzx  eax,al
c00210b8:	c1 e0 08             	shl    eax,0x8
c00210bb:	09 c1                	or     ecx,eax
c00210bd:	09 d1                	or     ecx,edx
c00210bf:	ba f8 0c 00 00       	mov    edx,0xcf8
c00210c4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00210ca:	89 c8                	mov    eax,ecx
c00210cc:	ef                   	out    dx,eax
c00210cd:	ba fc 0c 00 00       	mov    edx,0xcfc
c00210d2:	ed                   	in     eax,dx
c00210d3:	0f b7 db             	movzx  ebx,bx
c00210d6:	83 e6 02             	and    esi,0x2
c00210d9:	74 0a                	je     c00210e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00210db:	0f b7 d0             	movzx  edx,ax
c00210de:	c1 e3 10             	shl    ebx,0x10
c00210e1:	09 d3                	or     ebx,edx
c00210e3:	eb 05                	jmp    c00210ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00210e5:	66 31 c0             	xor    ax,ax
c00210e8:	09 c3                	or     ebx,eax
c00210ea:	ba f8 0c 00 00       	mov    edx,0xcf8
c00210ef:	89 c8                	mov    eax,ecx
c00210f1:	ef                   	out    dx,eax
c00210f2:	ba fc 0c 00 00       	mov    edx,0xcfc
c00210f7:	89 d8                	mov    eax,ebx
c00210f9:	eb 41                	jmp    c002113c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00210fb:	83 f9 02             	cmp    ecx,0x2
c00210fe:	75 45                	jne    c0021145 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0021100:	83 ec 0c             	sub    esp,0xc
c0021103:	0f b6 d2             	movzx  edx,dl
c0021106:	89 f1                	mov    ecx,esi
c0021108:	0f b6 c0             	movzx  eax,al
c002110b:	0f b6 f1             	movzx  esi,cl
c002110e:	89 e9                	mov    ecx,ebp
c0021110:	56                   	push   esi
c0021111:	0f b6 c9             	movzx  ecx,cl
c0021114:	51                   	push   ecx
c0021115:	52                   	push   edx
c0021116:	50                   	push   eax
c0021117:	57                   	push   edi
c0021118:	e8 a3 fc ff ff       	call   c0020dc0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002111d:	89 c2                	mov    edx,eax
c002111f:	ed                   	in     eax,dx
c0021120:	83 c4 20             	add    esp,0x20
c0021123:	0f b7 db             	movzx  ebx,bx
c0021126:	f6 c2 02             	test   dl,0x2
c0021129:	74 0c                	je     c0021137 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002112b:	0f b7 c8             	movzx  ecx,ax
c002112e:	89 d8                	mov    eax,ebx
c0021130:	c1 e0 10             	shl    eax,0x10
c0021133:	09 c8                	or     eax,ecx
c0021135:	eb 05                	jmp    c002113c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0021137:	66 31 c0             	xor    ax,ax
c002113a:	09 d8                	or     eax,ebx
c002113c:	ef                   	out    dx,eax
c002113d:	83 c4 0c             	add    esp,0xc
c0021140:	5b                   	pop    ebx
c0021141:	5e                   	pop    esi
c0021142:	5f                   	pop    edi
c0021143:	5d                   	pop    ebp
c0021144:	c3                   	ret    
c0021145:	c7 44 24 20 46 b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b046
c002114d:	83 c4 0c             	add    esp,0xc
c0021150:	5b                   	pop    ebx
c0021151:	5e                   	pop    esi
c0021152:	5f                   	pop    edi
c0021153:	5d                   	pop    ebp
c0021154:	e9 0b f9 fe ff       	jmp    c0010a64 <KePanic(char const*)>
c0021159:	90                   	nop

c002115a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002115a:	55                   	push   ebp
c002115b:	57                   	push   edi
c002115c:	56                   	push   esi
c002115d:	53                   	push   ebx
c002115e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c0021164:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c002116b:	80 3d ac 9d 03 c0 00 	cmp    BYTE PTR ds:0xc0039dac,0x0
c0021172:	0f 85 bd 00 00 00    	jne    c0021235 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c0021178:	83 ec 0c             	sub    esp,0xc
c002117b:	68 14 01 00 00       	push   0x114
c0021180:	e8 8a f4 fe ff       	call   c001060f <malloc>
c0021185:	83 c4 0c             	add    esp,0xc
c0021188:	89 c3                	mov    ebx,eax
c002118a:	ff 35 58 73 03 c0    	push   DWORD PTR ds:0xc0037358
c0021190:	68 d3 ee 02 c0       	push   0xc002eed3
c0021195:	50                   	push   eax
c0021196:	e8 2f 7d fe ff       	call   c0008eca <File::File(char const*, Process*)>
c002119b:	83 c4 10             	add    esp,0x10
c002119e:	85 db                	test   ebx,ebx
c00211a0:	0f 84 67 02 00 00    	je     c002140d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c00211a6:	56                   	push   esi
c00211a7:	56                   	push   esi
c00211a8:	6a 01                	push   0x1
c00211aa:	53                   	push   ebx
c00211ab:	e8 38 7d fe ff       	call   c0008ee8 <File::open(FileOpenMode)>
c00211b0:	83 c4 10             	add    esp,0x10
c00211b3:	85 c0                	test   eax,eax
c00211b5:	0f 85 52 02 00 00    	jne    c002140d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c00211bb:	52                   	push   edx
c00211bc:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c00211c0:	50                   	push   eax
c00211c1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00211c5:	50                   	push   eax
c00211c6:	53                   	push   ebx
c00211c7:	e8 1e 80 fe ff       	call   c00091ea <File::stat(unsigned long long*, bool*)>
c00211cc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00211d0:	40                   	inc    eax
c00211d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00211d4:	e8 36 f4 fe ff       	call   c001060f <malloc>
c00211d9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00211dd:	a3 a8 9d 03 c0       	mov    ds:0xc0039da8,eax
c00211e2:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00211e6:	59                   	pop    ecx
c00211e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00211e9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c00211ed:	51                   	push   ecx
c00211ee:	50                   	push   eax
c00211ef:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00211f3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00211f7:	53                   	push   ebx
c00211f8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00211fb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00211ff:	83 c4 20             	add    esp,0x20
c0021202:	89 c8                	mov    eax,ecx
c0021204:	99                   	cdq    
c0021205:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c0021209:	0f 85 fe 01 00 00    	jne    c002140d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002120f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c0021213:	0f 85 f4 01 00 00    	jne    c002140d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c0021219:	83 ec 0c             	sub    esp,0xc
c002121c:	53                   	push   ebx
c002121d:	e8 24 7d fe ff       	call   c0008f46 <File::close()>
c0021222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021226:	c6 05 ac 9d 03 c0 01 	mov    BYTE PTR ds:0xc0039dac,0x1
c002122d:	a3 a4 9d 03 c0       	mov    ds:0xc0039da4,eax
c0021232:	83 c4 10             	add    esp,0x10
c0021235:	a1 a4 9d 03 c0       	mov    eax,ds:0xc0039da4
c002123a:	8b 1d a8 9d 03 c0    	mov    ebx,DWORD PTR ds:0xc0039da8
c0021240:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021244:	31 f6                	xor    esi,esi
c0021246:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002124e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0021255:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002125a:	31 c9                	xor    ecx,ecx
c002125c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c0021264:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0021269:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c0021271:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0021275:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002127d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0021281:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0021285:	0f 8e 82 01 00 00    	jle    c002140d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002128b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002128e:	d4 40                	aam    0x40
c0021290:	d5 39                	aad    0x39
c0021292:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0021296:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c002129a:	d4 40                	aam    0x40
c002129c:	d5 39                	aad    0x39
c002129e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00212a2:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c00212a6:	d4 40                	aam    0x40
c00212a8:	d5 39                	aad    0x39
c00212aa:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00212ae:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c00212b2:	d4 40                	aam    0x40
c00212b4:	d5 39                	aad    0x39
c00212b6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00212ba:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c00212be:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00212c2:	3c 56                	cmp    al,0x56
c00212c4:	74 43                	je     c0021309 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c00212c6:	d4 40                	aam    0x40
c00212c8:	d5 39                	aad    0x39
c00212ca:	8d 48 d0             	lea    ecx,[eax-0x30]
c00212cd:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c00212d1:	0f b6 c9             	movzx  ecx,cl
c00212d4:	c1 e1 04             	shl    ecx,0x4
c00212d7:	d4 40                	aam    0x40
c00212d9:	d5 39                	aad    0x39
c00212db:	83 e8 30             	sub    eax,0x30
c00212de:	0f b6 c0             	movzx  eax,al
c00212e1:	09 c1                	or     ecx,eax
c00212e3:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c00212e7:	c1 e1 04             	shl    ecx,0x4
c00212ea:	d4 40                	aam    0x40
c00212ec:	d5 39                	aad    0x39
c00212ee:	83 e8 30             	sub    eax,0x30
c00212f1:	0f b6 c0             	movzx  eax,al
c00212f4:	09 c1                	or     ecx,eax
c00212f6:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c00212fa:	c1 e1 04             	shl    ecx,0x4
c00212fd:	d4 40                	aam    0x40
c00212ff:	d5 39                	aad    0x39
c0021301:	83 e8 30             	sub    eax,0x30
c0021304:	0f b6 c0             	movzx  eax,al
c0021307:	09 c1                	or     ecx,eax
c0021309:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c002130d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0021311:	3c 58                	cmp    al,0x58
c0021313:	74 47                	je     c002135c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c0021315:	d4 40                	aam    0x40
c0021317:	d5 39                	aad    0x39
c0021319:	8d 50 d0             	lea    edx,[eax-0x30]
c002131c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c0021320:	0f b6 d2             	movzx  edx,dl
c0021323:	c1 e2 04             	shl    edx,0x4
c0021326:	d4 40                	aam    0x40
c0021328:	d5 39                	aad    0x39
c002132a:	83 e8 30             	sub    eax,0x30
c002132d:	0f b6 c0             	movzx  eax,al
c0021330:	09 c2                	or     edx,eax
c0021332:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c0021336:	c1 e2 04             	shl    edx,0x4
c0021339:	d4 40                	aam    0x40
c002133b:	d5 39                	aad    0x39
c002133d:	83 e8 30             	sub    eax,0x30
c0021340:	0f b6 c0             	movzx  eax,al
c0021343:	09 c2                	or     edx,eax
c0021345:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c0021349:	c1 e2 04             	shl    edx,0x4
c002134c:	d4 40                	aam    0x40
c002134e:	d5 39                	aad    0x39
c0021350:	83 e8 30             	sub    eax,0x30
c0021353:	0f b6 c0             	movzx  eax,al
c0021356:	09 c2                	or     edx,eax
c0021358:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002135c:	83 c6 10             	add    esi,0x10
c002135f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c0021363:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c0021367:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002136b:	83 fa 0a             	cmp    edx,0xa
c002136e:	74 0b                	je     c002137b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c0021370:	47                   	inc    edi
c0021371:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0021375:	75 19                	jne    c0021390 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c0021377:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002137b:	31 c0                	xor    eax,eax
c002137d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c0021382:	0f 94 c0             	sete   al
c0021385:	01 c6                	add    esi,eax
c0021387:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002138c:	75 0b                	jne    c0021399 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c002138e:	eb 14                	jmp    c00213a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c0021390:	46                   	inc    esi
c0021391:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c0021394:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0021397:	eb ca                	jmp    c0021363 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c0021399:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c002139e:	0f 85 dd fe ff ff    	jne    c0021281 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c00213a4:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c00213a9:	74 10                	je     c00213bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c00213ab:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c00213b0:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c00213b5:	0f 85 c6 fe ff ff    	jne    c0021281 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c00213bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00213bf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00213c3:	83 e8 30             	sub    eax,0x30
c00213c6:	83 ef 30             	sub    edi,0x30
c00213c9:	c1 e0 04             	shl    eax,0x4
c00213cc:	09 f8                	or     eax,edi
c00213ce:	0f b6 c0             	movzx  eax,al
c00213d1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00213d5:	0f 85 a6 fe ff ff    	jne    c0021281 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c00213db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213df:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00213e3:	83 e8 30             	sub    eax,0x30
c00213e6:	83 ef 30             	sub    edi,0x30
c00213e9:	c1 e0 04             	shl    eax,0x4
c00213ec:	09 f8                	or     eax,edi
c00213ee:	0f b6 c0             	movzx  eax,al
c00213f1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00213f5:	0f 85 86 fe ff ff    	jne    c0021281 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c00213fb:	50                   	push   eax
c00213fc:	50                   	push   eax
c00213fd:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021401:	50                   	push   eax
c0021402:	55                   	push   ebp
c0021403:	e8 38 f2 fd ff       	call   c0000640 <strcpy>
c0021408:	83 c4 10             	add    esp,0x10
c002140b:	eb 06                	jmp    c0021413 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c002140d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0021411:	31 ed                	xor    ebp,ebp
c0021413:	81 c4 4c 01 00 00    	add    esp,0x14c
c0021419:	89 e8                	mov    eax,ebp
c002141b:	5b                   	pop    ebx
c002141c:	5e                   	pop    esi
c002141d:	5f                   	pop    edi
c002141e:	5d                   	pop    ebp
c002141f:	c3                   	ret    

c0021420 <PCI::checkBus(unsigned char)>:
c0021420:	56                   	push   esi
c0021421:	53                   	push   ebx
c0021422:	31 db                	xor    ebx,ebx
c0021424:	51                   	push   ecx
c0021425:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002142a:	52                   	push   edx
c002142b:	53                   	push   ebx
c002142c:	43                   	inc    ebx
c002142d:	56                   	push   esi
c002142e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021432:	e8 6f 03 00 00       	call   c00217a6 <PCI::checkDevice(unsigned char, unsigned char)>
c0021437:	83 c4 10             	add    esp,0x10
c002143a:	83 fb 20             	cmp    ebx,0x20
c002143d:	75 eb                	jne    c002142a <PCI::checkBus(unsigned char)+0xa>
c002143f:	58                   	pop    eax
c0021440:	5b                   	pop    ebx
c0021441:	5e                   	pop    esi
c0021442:	c3                   	ret    
c0021443:	90                   	nop

c0021444 <PCI::foundDevice(PCIDeviceInfo)>:
c0021444:	55                   	push   ebp
c0021445:	57                   	push   edi
c0021446:	56                   	push   esi
c0021447:	53                   	push   ebx
c0021448:	81 ec 8c 00 00 00    	sub    esp,0x8c
c002144e:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c0021456:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c002145d:	3d ff ff 00 00       	cmp    eax,0xffff
c0021462:	0f 84 b7 01 00 00    	je     c002161f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c0021468:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c0021470:	66 81 fb 06 04       	cmp    bx,0x406
c0021475:	75 32                	jne    c00214a9 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c0021477:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c002147f:	50                   	push   eax
c0021480:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c0021488:	50                   	push   eax
c0021489:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c0021491:	50                   	push   eax
c0021492:	55                   	push   ebp
c0021493:	e8 4e fb ff ff       	call   c0020fe6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021498:	59                   	pop    ecx
c0021499:	0f b6 c0             	movzx  eax,al
c002149c:	5b                   	pop    ebx
c002149d:	50                   	push   eax
c002149e:	55                   	push   ebp
c002149f:	e8 7c ff ff ff       	call   c0021420 <PCI::checkBus(unsigned char)>
c00214a4:	e9 16 01 00 00       	jmp    c00215bf <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c00214a9:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c00214b0:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c00214b6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00214ba:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c00214c1:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c00214c9:	85 c0                	test   eax,eax
c00214cb:	74 36                	je     c0021503 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c00214cd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00214d0:	85 d2                	test   edx,edx
c00214d2:	74 2b                	je     c00214ff <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c00214d4:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c00214da:	31 f9                	xor    ecx,edi
c00214dc:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c00214e2:	75 1b                	jne    c00214ff <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c00214e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00214e8:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c00214ee:	75 0f                	jne    c00214ff <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c00214f0:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c00214f7:	39 f2                	cmp    edx,esi
c00214f9:	0f 84 20 01 00 00    	je     c002161f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c00214ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0021501:	eb c6                	jmp    c00214c9 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c0021503:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021507:	be 06 ef 02 c0       	mov    esi,0xc002ef06
c002150c:	b9 07 00 00 00       	mov    ecx,0x7
c0021511:	fc                   	cld    
c0021512:	31 d2                	xor    edx,edx
c0021514:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021516:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c002151d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0021521:	b9 12 00 00 00       	mov    ecx,0x12
c0021526:	83 ec 0c             	sub    esp,0xc
c0021529:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002152b:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c0021533:	b9 0a 00 00 00       	mov    ecx,0xa
c0021538:	f7 f1                	div    ecx
c002153a:	83 c0 30             	add    eax,0x30
c002153d:	83 c2 30             	add    edx,0x30
c0021540:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0021544:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c0021548:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c0021550:	31 d2                	xor    edx,edx
c0021552:	f7 f1                	div    ecx
c0021554:	83 c0 30             	add    eax,0x30
c0021557:	83 c2 30             	add    edx,0x30
c002155a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c002155e:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c0021562:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021566:	50                   	push   eax
c0021567:	e8 01 cb fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c002156c:	83 c4 10             	add    esp,0x10
c002156f:	81 fb 01 06 00 00    	cmp    ebx,0x601
c0021575:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c002157c:	75 46                	jne    c00215c4 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c002157e:	83 ec 0c             	sub    esp,0xc
c0021581:	68 64 01 00 00       	push   0x164
c0021586:	e8 84 f0 fe ff       	call   c001060f <malloc>
c002158b:	89 c3                	mov    ebx,eax
c002158d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021590:	e8 3b 11 00 00       	call   c00226d0 <SATABus::SATABus()>
c0021595:	58                   	pop    eax
c0021596:	5a                   	pop    edx
c0021597:	53                   	push   ebx
c0021598:	55                   	push   ebp
c0021599:	e8 f6 91 fe ff       	call   c000a794 <Device::addChild(Device*)>
c002159e:	83 ec 1c             	sub    esp,0x1c
c00215a1:	b9 09 00 00 00       	mov    ecx,0x9
c00215a6:	89 e7                	mov    edi,esp
c00215a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00215aa:	53                   	push   ebx
c00215ab:	e8 2a 91 fe ff       	call   c000a6da <Device::preOpenPCI(PCIDeviceInfo)>
c00215b0:	83 c4 30             	add    esp,0x30
c00215b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00215b5:	6a 00                	push   0x0
c00215b7:	6a 00                	push   0x0
c00215b9:	6a 00                	push   0x0
c00215bb:	53                   	push   ebx
c00215bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00215bf:	83 c4 10             	add    esp,0x10
c00215c2:	eb 5b                	jmp    c002161f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c00215c4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00215ca:	75 19                	jne    c00215e5 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c00215cc:	83 ec 0c             	sub    esp,0xc
c00215cf:	68 70 02 00 00       	push   0x270
c00215d4:	e8 36 f0 fe ff       	call   c001060f <malloc>
c00215d9:	89 c3                	mov    ebx,eax
c00215db:	89 04 24             	mov    DWORD PTR [esp],eax
c00215de:	e8 93 02 00 00       	call   c0021876 <IDE::IDE()>
c00215e3:	eb b0                	jmp    c0021595 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c00215e5:	83 ec 0c             	sub    esp,0xc
c00215e8:	68 58 01 00 00       	push   0x158
c00215ed:	e8 1d f0 fe ff       	call   c001060f <malloc>
c00215f2:	89 c3                	mov    ebx,eax
c00215f4:	58                   	pop    eax
c00215f5:	5a                   	pop    edx
c00215f6:	68 ec ee 02 c0       	push   0xc002eeec
c00215fb:	53                   	push   ebx
c00215fc:	e8 47 94 fe ff       	call   c000aa48 <DriverlessDevice::DriverlessDevice(char const*)>
c0021601:	59                   	pop    ecx
c0021602:	5f                   	pop    edi
c0021603:	53                   	push   ebx
c0021604:	55                   	push   ebp
c0021605:	e8 8a 91 fe ff       	call   c000a794 <Device::addChild(Device*)>
c002160a:	83 ec 1c             	sub    esp,0x1c
c002160d:	b9 09 00 00 00       	mov    ecx,0x9
c0021612:	89 e7                	mov    edi,esp
c0021614:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021616:	53                   	push   ebx
c0021617:	e8 be 90 fe ff       	call   c000a6da <Device::preOpenPCI(PCIDeviceInfo)>
c002161c:	83 c4 30             	add    esp,0x30
c002161f:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021625:	5b                   	pop    ebx
c0021626:	5e                   	pop    esi
c0021627:	5f                   	pop    edi
c0021628:	5d                   	pop    ebp
c0021629:	c3                   	ret    

c002162a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002162a:	55                   	push   ebp
c002162b:	57                   	push   edi
c002162c:	56                   	push   esi
c002162d:	53                   	push   ebx
c002162e:	83 ec 68             	sub    esp,0x68
c0021631:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0021635:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002163c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021640:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0021647:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002164c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021650:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0021657:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002165c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0021660:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c0021665:	6a 0c                	push   0xc
c0021667:	57                   	push   edi
c0021668:	53                   	push   ebx
c0021669:	56                   	push   esi
c002166a:	55                   	push   ebp
c002166b:	e8 c6 f7 ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021670:	83 c4 20             	add    esp,0x20
c0021673:	57                   	push   edi
c0021674:	53                   	push   ebx
c0021675:	56                   	push   esi
c0021676:	55                   	push   ebp
c0021677:	e8 b0 f8 ff ff       	call   c0020f2c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002167c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0021681:	57                   	push   edi
c0021682:	53                   	push   ebx
c0021683:	56                   	push   esi
c0021684:	55                   	push   ebp
c0021685:	e8 38 f9 ff ff       	call   c0020fc2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002168a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002168e:	83 c4 14             	add    esp,0x14
c0021691:	6a 3c                	push   0x3c
c0021693:	57                   	push   edi
c0021694:	53                   	push   ebx
c0021695:	56                   	push   esi
c0021696:	55                   	push   ebp
c0021697:	e8 9a f7 ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002169c:	0f b6 c4             	movzx  eax,ah
c002169f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00216a3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00216a7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00216ab:	a1 08 71 03 c0       	mov    eax,ds:0xc0037108
c00216b0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00216b6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c00216bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00216c0:	83 c4 20             	add    esp,0x20
c00216c3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00216c8:	74 30                	je     c00216fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00216ca:	31 c0                	xor    eax,eax
c00216cc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00216d0:	7e 28                	jle    c00216fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00216d2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c00216da:	39 cb                	cmp    ebx,ecx
c00216dc:	75 19                	jne    c00216f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00216de:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c00216e6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c00216ea:	75 0b                	jne    c00216f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00216ec:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c00216f3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c00216f7:	40                   	inc    eax
c00216f8:	eb d2                	jmp    c00216cc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c00216fa:	31 d2                	xor    edx,edx
c00216fc:	83 ec 0c             	sub    esp,0xc
c00216ff:	57                   	push   edi
c0021700:	53                   	push   ebx
c0021701:	56                   	push   esi
c0021702:	52                   	push   edx
c0021703:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0021707:	55                   	push   ebp
c0021708:	e8 01 f9 ff ff       	call   c002100e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002170d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021711:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021715:	42                   	inc    edx
c0021716:	83 c4 20             	add    esp,0x20
c0021719:	83 fa 06             	cmp    edx,0x6
c002171c:	75 de                	jne    c00216fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002171e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021726:	c1 e2 08             	shl    edx,0x8
c0021729:	83 ec 0c             	sub    esp,0xc
c002172c:	0f b6 c4             	movzx  eax,ah
c002172f:	09 d0                	or     eax,edx
c0021731:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0021736:	6a 02                	push   0x2
c0021738:	57                   	push   edi
c0021739:	53                   	push   ebx
c002173a:	56                   	push   esi
c002173b:	55                   	push   ebp
c002173c:	e8 f5 f6 ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021741:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0021746:	83 c4 20             	add    esp,0x20
c0021749:	57                   	push   edi
c002174a:	53                   	push   ebx
c002174b:	56                   	push   esi
c002174c:	55                   	push   ebp
c002174d:	e8 24 f8 ff ff       	call   c0020f76 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021752:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021756:	57                   	push   edi
c0021757:	53                   	push   ebx
c0021758:	56                   	push   esi
c0021759:	55                   	push   ebp
c002175a:	e8 81 f7 ff ff       	call   c0020ee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002175f:	b9 09 00 00 00       	mov    ecx,0x9
c0021764:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0021769:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002176d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0021771:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0021775:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0021779:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002177d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0021781:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0021785:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0021789:	83 ec 0c             	sub    esp,0xc
c002178c:	fc                   	cld    
c002178d:	89 e7                	mov    edi,esp
c002178f:	8d 74 24 58          	lea    esi,[esp+0x58]
c0021793:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021795:	55                   	push   ebp
c0021796:	e8 a9 fc ff ff       	call   c0021444 <PCI::foundDevice(PCIDeviceInfo)>
c002179b:	81 c4 8c 00 00 00    	add    esp,0x8c
c00217a1:	5b                   	pop    ebx
c00217a2:	5e                   	pop    esi
c00217a3:	5f                   	pop    edi
c00217a4:	5d                   	pop    ebp
c00217a5:	c3                   	ret    

c00217a6 <PCI::checkDevice(unsigned char, unsigned char)>:
c00217a6:	55                   	push   ebp
c00217a7:	57                   	push   edi
c00217a8:	56                   	push   esi
c00217a9:	53                   	push   ebx
c00217aa:	83 ec 0c             	sub    esp,0xc
c00217ad:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00217b1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00217b6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00217bb:	6a 00                	push   0x0
c00217bd:	56                   	push   esi
c00217be:	57                   	push   edi
c00217bf:	55                   	push   ebp
c00217c0:	e8 1b f7 ff ff       	call   c0020ee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00217c5:	6a 00                	push   0x0
c00217c7:	56                   	push   esi
c00217c8:	57                   	push   edi
c00217c9:	55                   	push   ebp
c00217ca:	e8 5b fe ff ff       	call   c002162a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00217cf:	83 c4 20             	add    esp,0x20
c00217d2:	6a 00                	push   0x0
c00217d4:	56                   	push   esi
c00217d5:	57                   	push   edi
c00217d6:	55                   	push   ebp
c00217d7:	e8 28 f7 ff ff       	call   c0020f04 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00217dc:	83 c4 10             	add    esp,0x10
c00217df:	a8 80                	test   al,0x80
c00217e1:	74 2d                	je     c0021810 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c00217e3:	bb 01 00 00 00       	mov    ebx,0x1
c00217e8:	53                   	push   ebx
c00217e9:	56                   	push   esi
c00217ea:	57                   	push   edi
c00217eb:	55                   	push   ebp
c00217ec:	e8 ef f6 ff ff       	call   c0020ee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00217f1:	83 c4 10             	add    esp,0x10
c00217f4:	0f b7 c0             	movzx  eax,ax
c00217f7:	3d ff ff 00 00       	cmp    eax,0xffff
c00217fc:	74 0c                	je     c002180a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00217fe:	53                   	push   ebx
c00217ff:	56                   	push   esi
c0021800:	57                   	push   edi
c0021801:	55                   	push   ebp
c0021802:	e8 23 fe ff ff       	call   c002162a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021807:	83 c4 10             	add    esp,0x10
c002180a:	43                   	inc    ebx
c002180b:	83 fb 08             	cmp    ebx,0x8
c002180e:	75 d8                	jne    c00217e8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021810:	83 c4 0c             	add    esp,0xc
c0021813:	5b                   	pop    ebx
c0021814:	5e                   	pop    esi
c0021815:	5f                   	pop    edi
c0021816:	5d                   	pop    ebp
c0021817:	c3                   	ret    

c0021818 <PCI::detect()>:
c0021818:	56                   	push   esi
c0021819:	53                   	push   ebx
c002181a:	53                   	push   ebx
c002181b:	31 db                	xor    ebx,ebx
c002181d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021821:	6a 00                	push   0x0
c0021823:	6a 00                	push   0x0
c0021825:	6a 00                	push   0x0
c0021827:	56                   	push   esi
c0021828:	e8 d7 f6 ff ff       	call   c0020f04 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002182d:	83 c4 10             	add    esp,0x10
c0021830:	a8 80                	test   al,0x80
c0021832:	75 21                	jne    c0021855 <PCI::detect()+0x3d>
c0021834:	51                   	push   ecx
c0021835:	51                   	push   ecx
c0021836:	6a 00                	push   0x0
c0021838:	56                   	push   esi
c0021839:	e8 e2 fb ff ff       	call   c0021420 <PCI::checkBus(unsigned char)>
c002183e:	83 c4 10             	add    esp,0x10
c0021841:	eb 2a                	jmp    c002186d <PCI::detect()+0x55>
c0021843:	52                   	push   edx
c0021844:	52                   	push   edx
c0021845:	53                   	push   ebx
c0021846:	43                   	inc    ebx
c0021847:	56                   	push   esi
c0021848:	e8 d3 fb ff ff       	call   c0021420 <PCI::checkBus(unsigned char)>
c002184d:	83 c4 10             	add    esp,0x10
c0021850:	83 fb 08             	cmp    ebx,0x8
c0021853:	74 18                	je     c002186d <PCI::detect()+0x55>
c0021855:	53                   	push   ebx
c0021856:	6a 00                	push   0x0
c0021858:	6a 00                	push   0x0
c002185a:	56                   	push   esi
c002185b:	e8 80 f6 ff ff       	call   c0020ee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021860:	83 c4 10             	add    esp,0x10
c0021863:	0f b7 c0             	movzx  eax,ax
c0021866:	3d ff ff 00 00       	cmp    eax,0xffff
c002186b:	74 d6                	je     c0021843 <PCI::detect()+0x2b>
c002186d:	58                   	pop    eax
c002186e:	5b                   	pop    ebx
c002186f:	5e                   	pop    esi
c0021870:	c3                   	ret    
c0021871:	90                   	nop

c0021872 <IDE::close(int, int, void*)>:
c0021872:	83 c8 ff             	or     eax,0xffffffff
c0021875:	c3                   	ret    

c0021876 <IDE::IDE()>:
c0021876:	83 ec 0c             	sub    esp,0xc
c0021879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002187d:	83 ec 08             	sub    esp,0x8
c0021880:	68 98 ef 02 c0       	push   0xc002ef98
c0021885:	50                   	push   eax
c0021886:	e8 61 92 fe ff       	call   c000aaec <HardDiskController::HardDiskController(char const*)>
c002188b:	83 c4 10             	add    esp,0x10
c002188e:	ba c4 f0 02 c0       	mov    edx,0xc002f0c4
c0021893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021897:	89 10                	mov    DWORD PTR [eax],edx
c0021899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002189d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00218a4:	90                   	nop
c00218a5:	83 c4 0c             	add    esp,0xc
c00218a8:	c3                   	ret    
c00218a9:	90                   	nop

c00218aa <IDE::prepareInterrupt(unsigned char)>:
c00218aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00218af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00218b3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00218bb:	c3                   	ret    

c00218bc <selectDrive(unsigned char, unsigned char)>:
c00218bc:	c3                   	ret    
c00218bd:	90                   	nop

c00218be <IDE::getBase(unsigned char)>:
c00218be:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00218c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218c7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00218cf:	c3                   	ret    

c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00218d0:	55                   	push   ebp
c00218d1:	57                   	push   edi
c00218d2:	56                   	push   esi
c00218d3:	53                   	push   ebx
c00218d4:	83 ec 1c             	sub    esp,0x1c
c00218d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00218db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00218df:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00218e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00218e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00218ea:	80 f9 03             	cmp    cl,0x3
c00218ed:	77 4f                	ja     c002193e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c00218ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00218f3:	0f b6 fa             	movzx  edi,dl
c00218f6:	0f b6 db             	movzx  ebx,bl
c00218f9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c00218fc:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c0021901:	80 ca 80             	or     dl,0x80
c0021904:	52                   	push   edx
c0021905:	6a 0c                	push   0xc
c0021907:	57                   	push   edi
c0021908:	56                   	push   esi
c0021909:	e8 c2 ff ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002190e:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0021913:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021917:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002191b:	ee                   	out    dx,al
c002191c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0021921:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0021925:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021929:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002192d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021935:	83 c4 2c             	add    esp,0x2c
c0021938:	5b                   	pop    ebx
c0021939:	5e                   	pop    esi
c002193a:	5f                   	pop    edi
c002193b:	5d                   	pop    ebp
c002193c:	eb 92                	jmp    c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002193e:	0f b6 cb             	movzx  ecx,bl
c0021941:	83 f9 07             	cmp    ecx,0x7
c0021944:	77 12                	ja     c0021958 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c0021946:	0f b6 d2             	movzx  edx,dl
c0021949:	0f b6 db             	movzx  ebx,bl
c002194c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c0021954:	01 da                	add    edx,ebx
c0021956:	eb 2f                	jmp    c0021987 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021958:	83 f9 0d             	cmp    ecx,0xd
c002195b:	77 13                	ja     c0021970 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002195d:	0f b6 d2             	movzx  edx,dl
c0021960:	0f b6 db             	movzx  ebx,bl
c0021963:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c002196a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002196e:	eb 17                	jmp    c0021987 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021970:	83 f9 15             	cmp    ecx,0x15
c0021973:	77 13                	ja     c0021988 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c0021975:	0f b6 d2             	movzx  edx,dl
c0021978:	0f b6 db             	movzx  ebx,bl
c002197b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c0021983:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0021987:	ee                   	out    dx,al
c0021988:	83 c4 1c             	add    esp,0x1c
c002198b:	5b                   	pop    ebx
c002198c:	5e                   	pop    esi
c002198d:	5f                   	pop    edi
c002198e:	5d                   	pop    ebp
c002198f:	c3                   	ret    

c0021990 <IDE::read(unsigned char, unsigned char)>:
c0021990:	55                   	push   ebp
c0021991:	57                   	push   edi
c0021992:	56                   	push   esi
c0021993:	53                   	push   ebx
c0021994:	83 ec 1c             	sub    esp,0x1c
c0021997:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002199b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002199f:	8d 43 f8             	lea    eax,[ebx-0x8]
c00219a2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00219a6:	3c 03                	cmp    al,0x3
c00219a8:	77 40                	ja     c00219ea <IDE::read(unsigned char, unsigned char)+0x5a>
c00219aa:	0f b6 f9             	movzx  edi,cl
c00219ad:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c00219b0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00219b5:	0c 80                	or     al,0x80
c00219b7:	50                   	push   eax
c00219b8:	6a 0c                	push   0xc
c00219ba:	57                   	push   edi
c00219bb:	56                   	push   esi
c00219bc:	e8 0f ff ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219c1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c00219c6:	0f b6 d3             	movzx  edx,bl
c00219c9:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c00219cd:	ec                   	in     al,dx
c00219ce:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00219d2:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c00219d7:	52                   	push   edx
c00219d8:	6a 0c                	push   0xc
c00219da:	57                   	push   edi
c00219db:	56                   	push   esi
c00219dc:	e8 ef fe ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219e1:	83 c4 20             	add    esp,0x20
c00219e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00219e8:	eb 4c                	jmp    c0021a36 <IDE::read(unsigned char, unsigned char)+0xa6>
c00219ea:	0f b6 d3             	movzx  edx,bl
c00219ed:	83 fa 07             	cmp    edx,0x7
c00219f0:	77 12                	ja     c0021a04 <IDE::read(unsigned char, unsigned char)+0x74>
c00219f2:	0f b6 c9             	movzx  ecx,cl
c00219f5:	0f b6 d3             	movzx  edx,bl
c00219f8:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c0021a00:	01 c2                	add    edx,eax
c0021a02:	eb 31                	jmp    c0021a35 <IDE::read(unsigned char, unsigned char)+0xa5>
c0021a04:	83 fa 0d             	cmp    edx,0xd
c0021a07:	77 13                	ja     c0021a1c <IDE::read(unsigned char, unsigned char)+0x8c>
c0021a09:	0f b6 c9             	movzx  ecx,cl
c0021a0c:	0f b6 d3             	movzx  edx,bl
c0021a0f:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c0021a16:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0021a1a:	eb 19                	jmp    c0021a35 <IDE::read(unsigned char, unsigned char)+0xa5>
c0021a1c:	31 c0                	xor    eax,eax
c0021a1e:	83 fa 15             	cmp    edx,0x15
c0021a21:	77 13                	ja     c0021a36 <IDE::read(unsigned char, unsigned char)+0xa6>
c0021a23:	0f b6 c9             	movzx  ecx,cl
c0021a26:	0f b6 d3             	movzx  edx,bl
c0021a29:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c0021a31:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0021a35:	ec                   	in     al,dx
c0021a36:	83 c4 1c             	add    esp,0x1c
c0021a39:	5b                   	pop    ebx
c0021a3a:	5e                   	pop    esi
c0021a3b:	5f                   	pop    edi
c0021a3c:	5d                   	pop    ebp
c0021a3d:	c3                   	ret    

c0021a3e <IDE::waitInterrupt(unsigned char)>:
c0021a3e:	55                   	push   ebp
c0021a3f:	57                   	push   edi
c0021a40:	56                   	push   esi
c0021a41:	53                   	push   ebx
c0021a42:	31 db                	xor    ebx,ebx
c0021a44:	83 ec 0c             	sub    esp,0xc
c0021a47:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a4b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0021a50:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0021a58:	89 e8                	mov    eax,ebp
c0021a5a:	84 c0                	test   al,al
c0021a5c:	75 31                	jne    c0021a8f <IDE::waitInterrupt(unsigned char)+0x51>
c0021a5e:	52                   	push   edx
c0021a5f:	6a 0c                	push   0xc
c0021a61:	56                   	push   esi
c0021a62:	57                   	push   edi
c0021a63:	e8 28 ff ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0021a68:	83 c4 10             	add    esp,0x10
c0021a6b:	a8 01                	test   al,0x1
c0021a6d:	75 28                	jne    c0021a97 <IDE::waitInterrupt(unsigned char)+0x59>
c0021a6f:	f6 c3 04             	test   bl,0x4
c0021a72:	75 13                	jne    c0021a87 <IDE::waitInterrupt(unsigned char)+0x49>
c0021a74:	83 fb 32             	cmp    ebx,0x32
c0021a77:	7e 0e                	jle    c0021a87 <IDE::waitInterrupt(unsigned char)+0x49>
c0021a79:	50                   	push   eax
c0021a7a:	50                   	push   eax
c0021a7b:	6a 00                	push   0x0
c0021a7d:	6a 64                	push   0x64
c0021a7f:	e8 6c 5d ff ff       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c0021a84:	83 c4 10             	add    esp,0x10
c0021a87:	83 fb 3c             	cmp    ebx,0x3c
c0021a8a:	74 0b                	je     c0021a97 <IDE::waitInterrupt(unsigned char)+0x59>
c0021a8c:	43                   	inc    ebx
c0021a8d:	eb c1                	jmp    c0021a50 <IDE::waitInterrupt(unsigned char)+0x12>
c0021a8f:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0021a97:	83 c4 0c             	add    esp,0xc
c0021a9a:	89 e8                	mov    eax,ebp
c0021a9c:	5b                   	pop    ebx
c0021a9d:	5e                   	pop    esi
c0021a9e:	5f                   	pop    edi
c0021a9f:	5d                   	pop    ebp
c0021aa0:	c3                   	ret    

c0021aa1 <ideChannel0IRQHandler(regs*, void*)>:
c0021aa1:	83 ec 10             	sub    esp,0x10
c0021aa4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021aa8:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0021aaf:	6a 07                	push   0x7
c0021ab1:	6a 00                	push   0x0
c0021ab3:	50                   	push   eax
c0021ab4:	e8 d7 fe ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0021ab9:	83 c4 1c             	add    esp,0x1c
c0021abc:	c3                   	ret    

c0021abd <ideChannel1IRQHandler(regs*, void*)>:
c0021abd:	83 ec 10             	sub    esp,0x10
c0021ac0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ac4:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0021acb:	6a 07                	push   0x7
c0021acd:	6a 01                	push   0x1
c0021acf:	50                   	push   eax
c0021ad0:	e8 bb fe ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0021ad5:	83 c4 1c             	add    esp,0x1c
c0021ad8:	c3                   	ret    
c0021ad9:	90                   	nop

c0021ada <IDE::enableIRQs(unsigned char, bool)>:
c0021ada:	57                   	push   edi
c0021adb:	b8 02 00 00 00       	mov    eax,0x2
c0021ae0:	56                   	push   esi
c0021ae1:	53                   	push   ebx
c0021ae2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021ae6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0021aea:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0021aef:	74 02                	je     c0021af3 <IDE::enableIRQs(unsigned char, bool)+0x19>
c0021af1:	31 c0                	xor    eax,eax
c0021af3:	0f b6 db             	movzx  ebx,bl
c0021af6:	bf 04 00 00 00       	mov    edi,0x4
c0021afb:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c0021b02:	50                   	push   eax
c0021b03:	6a 0c                	push   0xc
c0021b05:	53                   	push   ebx
c0021b06:	56                   	push   esi
c0021b07:	e8 c4 fd ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b0c:	83 c4 10             	add    esp,0x10
c0021b0f:	50                   	push   eax
c0021b10:	6a 0c                	push   0xc
c0021b12:	53                   	push   ebx
c0021b13:	56                   	push   esi
c0021b14:	e8 77 fe ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0021b19:	83 c4 10             	add    esp,0x10
c0021b1c:	4f                   	dec    edi
c0021b1d:	75 f0                	jne    c0021b0f <IDE::enableIRQs(unsigned char, bool)+0x35>
c0021b1f:	5b                   	pop    ebx
c0021b20:	5e                   	pop    esi
c0021b21:	5f                   	pop    edi
c0021b22:	c3                   	ret    
c0021b23:	90                   	nop

c0021b24 <IDE::open(int, int, void*)>:
c0021b24:	57                   	push   edi
c0021b25:	56                   	push   esi
c0021b26:	53                   	push   ebx
c0021b27:	83 ec 10             	sub    esp,0x10
c0021b2a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021b2e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0021b37:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0021b40:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0021b47:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0021b4e:	0f 85 84 02 00 00    	jne    c0021dd8 <IDE::open(int, int, void*)+0x2b4>
c0021b54:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0021b5a:	a8 70                	test   al,0x70
c0021b5c:	75 44                	jne    c0021ba2 <IDE::open(int, int, void*)+0x7e>
c0021b5e:	ba 20 84 00 00       	mov    edx,0x8420
c0021b63:	0f a3 c2             	bt     edx,eax
c0021b66:	73 3a                	jae    c0021ba2 <IDE::open(int, int, void*)+0x7e>
c0021b68:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0021b6e:	83 ec 0c             	sub    esp,0xc
c0021b71:	83 e0 fc             	and    eax,0xfffffffc
c0021b74:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0021b7b:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0021b81:	83 e0 fc             	and    eax,0xfffffffc
c0021b84:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0021b8b:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0021b91:	83 e0 fc             	and    eax,0xfffffffc
c0021b94:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021b9b:	68 62 b3 02 c0       	push   0xc002b362
c0021ba0:	eb 60                	jmp    c0021c02 <IDE::open(int, int, void*)+0xde>
c0021ba2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0021bac:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0021bb6:	be 64 00 00 00       	mov    esi,0x64
c0021bbb:	57                   	push   edi
c0021bbc:	57                   	push   edi
c0021bbd:	68 b0 ef 02 c0       	push   0xc002efb0
c0021bc2:	8d 7c 24 12          	lea    edi,[esp+0x12]
c0021bc6:	57                   	push   edi
c0021bc7:	e8 74 ea fd ff       	call   c0000640 <strcpy>
c0021bcc:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c0021bd3:	31 d2                	xor    edx,edx
c0021bd5:	89 c8                	mov    eax,ecx
c0021bd7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021bda:	f7 f6                	div    esi
c0021bdc:	be 0a 00 00 00       	mov    esi,0xa
c0021be1:	83 c0 30             	add    eax,0x30
c0021be4:	31 d2                	xor    edx,edx
c0021be6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0021bea:	89 c8                	mov    eax,ecx
c0021bec:	f7 f6                	div    esi
c0021bee:	89 d1                	mov    ecx,edx
c0021bf0:	31 d2                	xor    edx,edx
c0021bf2:	83 c1 30             	add    ecx,0x30
c0021bf5:	f7 f6                	div    esi
c0021bf7:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c0021bfb:	83 c2 30             	add    edx,0x30
c0021bfe:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c0021c02:	e8 66 c4 fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0021c07:	bf f8 0c 00 00       	mov    edi,0xcf8
c0021c0c:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0021c13:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0021c1a:	c1 e1 10             	shl    ecx,0x10
c0021c1d:	c1 e0 0b             	shl    eax,0xb
c0021c20:	83 c4 10             	add    esp,0x10
c0021c23:	09 c1                	or     ecx,eax
c0021c25:	89 fa                	mov    edx,edi
c0021c27:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021c2e:	c1 e0 08             	shl    eax,0x8
c0021c31:	09 c1                	or     ecx,eax
c0021c33:	89 c8                	mov    eax,ecx
c0021c35:	0d 08 00 00 80       	or     eax,0x80000008
c0021c3a:	ef                   	out    dx,eax
c0021c3b:	be fc 0c 00 00       	mov    esi,0xcfc
c0021c40:	89 f2                	mov    edx,esi
c0021c42:	ed                   	in     eax,dx
c0021c43:	c1 e8 10             	shr    eax,0x10
c0021c46:	3d ff ff 00 00       	cmp    eax,0xffff
c0021c4b:	0f 84 e5 00 00 00    	je     c0021d36 <IDE::open(int, int, void*)+0x212>
c0021c51:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0021c57:	89 fa                	mov    edx,edi
c0021c59:	89 c8                	mov    eax,ecx
c0021c5b:	ef                   	out    dx,eax
c0021c5c:	b0 fe                	mov    al,0xfe
c0021c5e:	89 f2                	mov    edx,esi
c0021c60:	ee                   	out    dx,al
c0021c61:	89 c8                	mov    eax,ecx
c0021c63:	89 fa                	mov    edx,edi
c0021c65:	ef                   	out    dx,eax
c0021c66:	89 f2                	mov    edx,esi
c0021c68:	ed                   	in     eax,dx
c0021c69:	3c fe                	cmp    al,0xfe
c0021c6b:	0f 85 85 00 00 00    	jne    c0021cf6 <IDE::open(int, int, void*)+0x1d2>
c0021c71:	83 ec 0c             	sub    esp,0xc
c0021c74:	68 98 b3 02 c0       	push   0xc002b398
c0021c79:	e8 ef c3 fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0021c7e:	c7 04 24 b6 ef 02 c0 	mov    DWORD PTR [esp],0xc002efb6
c0021c85:	e8 f2 52 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021c8a:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0021c94:	c7 04 24 88 b6 02 c0 	mov    DWORD PTR [esp],0xc002b688
c0021c9b:	e8 cd c3 fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0021ca0:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0021ca7:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021cae:	c1 e1 10             	shl    ecx,0x10
c0021cb1:	c1 e0 08             	shl    eax,0x8
c0021cb4:	89 fa                	mov    edx,edi
c0021cb6:	09 c1                	or     ecx,eax
c0021cb8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0021cbf:	c1 e0 0b             	shl    eax,0xb
c0021cc2:	09 c1                	or     ecx,eax
c0021cc4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0021cca:	89 c8                	mov    eax,ecx
c0021ccc:	ef                   	out    dx,eax
c0021ccd:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0021cd3:	89 f2                	mov    edx,esi
c0021cd5:	ee                   	out    dx,al
c0021cd6:	89 c8                	mov    eax,ecx
c0021cd8:	89 fa                	mov    edx,edi
c0021cda:	ef                   	out    dx,eax
c0021cdb:	89 f2                	mov    edx,esi
c0021cdd:	ed                   	in     eax,dx
c0021cde:	0f b6 c0             	movzx  eax,al
c0021ce1:	83 c4 10             	add    esp,0x10
c0021ce4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0021cea:	74 5a                	je     c0021d46 <IDE::open(int, int, void*)+0x222>
c0021cec:	83 ec 0c             	sub    esp,0xc
c0021cef:	68 cb ef 02 c0       	push   0xc002efcb
c0021cf4:	eb 48                	jmp    c0021d3e <IDE::open(int, int, void*)+0x21a>
c0021cf6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0021cff:	75 2b                	jne    c0021d2c <IDE::open(int, int, void*)+0x208>
c0021d01:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c0021d08:	3d 80 00 00 00       	cmp    eax,0x80
c0021d0d:	74 07                	je     c0021d16 <IDE::open(int, int, void*)+0x1f2>
c0021d0f:	3d 8a 00 00 00       	cmp    eax,0x8a
c0021d14:	75 16                	jne    c0021d2c <IDE::open(int, int, void*)+0x208>
c0021d16:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021d1d:	83 ec 0c             	sub    esp,0xc
c0021d20:	68 be ab 02 c0       	push   0xc002abbe
c0021d25:	e8 43 c3 fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0021d2a:	eb 17                	jmp    c0021d43 <IDE::open(int, int, void*)+0x21f>
c0021d2c:	83 ec 0c             	sub    esp,0xc
c0021d2f:	68 d3 ef 02 c0       	push   0xc002efd3
c0021d34:	eb 08                	jmp    c0021d3e <IDE::open(int, int, void*)+0x21a>
c0021d36:	83 ec 0c             	sub    esp,0xc
c0021d39:	68 04 f0 02 c0       	push   0xc002f004
c0021d3e:	e8 21 ed fe ff       	call   c0010a64 <KePanic(char const*)>
c0021d43:	83 c4 10             	add    esp,0x10
c0021d46:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c0021d4d:	0f 84 bf 00 00 00    	je     c0021e12 <IDE::open(int, int, void*)+0x2ee>
c0021d53:	83 ec 0c             	sub    esp,0xc
c0021d56:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0021d5c:	83 e0 fc             	and    eax,0xfffffffc
c0021d5f:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0021d66:	83 c0 08             	add    eax,0x8
c0021d69:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0021d70:	68 2e f0 02 c0       	push   0xc002f02e
c0021d75:	e8 02 52 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0021d81:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021d88:	50                   	push   eax
c0021d89:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0021d90:	50                   	push   eax
c0021d91:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0021d98:	50                   	push   eax
c0021d99:	ff 35 a0 9d 03 c0    	push   DWORD PTR ds:0xc0039da0
c0021d9f:	e8 92 f0 ff ff       	call   c0020e36 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021da4:	83 c4 18             	add    esp,0x18
c0021da7:	83 c8 07             	or     eax,0x7
c0021daa:	0f b7 c0             	movzx  eax,ax
c0021dad:	50                   	push   eax
c0021dae:	6a 04                	push   0x4
c0021db0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021db7:	50                   	push   eax
c0021db8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0021dbf:	50                   	push   eax
c0021dc0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0021dc7:	50                   	push   eax
c0021dc8:	ff 35 a0 9d 03 c0    	push   DWORD PTR ds:0xc0039da0
c0021dce:	e8 9f f2 ff ff       	call   c0021072 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c0021dd3:	83 c4 20             	add    esp,0x20
c0021dd6:	eb 3a                	jmp    c0021e12 <IDE::open(int, int, void*)+0x2ee>
c0021dd8:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0021dde:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021de5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0021dec:	05 06 02 00 00       	add    eax,0x206
c0021df1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021df8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0021dff:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0021e06:	05 06 02 00 00       	add    eax,0x206
c0021e0b:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0021e12:	83 ec 0c             	sub    esp,0xc
c0021e15:	68 27 bc 02 c0       	push   0xc002bc27
c0021e1a:	e8 4e c2 fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0021e1f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0021e25:	83 c4 10             	add    esp,0x10
c0021e28:	89 c2                	mov    edx,eax
c0021e2a:	83 e2 0f             	and    edx,0xf
c0021e2d:	83 fa 08             	cmp    edx,0x8
c0021e30:	75 0a                	jne    c0021e3c <IDE::open(int, int, void*)+0x318>
c0021e32:	83 e8 02             	sub    eax,0x2
c0021e35:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021e3c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0021e42:	89 c2                	mov    edx,eax
c0021e44:	83 e2 0f             	and    edx,0xf
c0021e47:	83 fa 08             	cmp    edx,0x8
c0021e4a:	75 0a                	jne    c0021e56 <IDE::open(int, int, void*)+0x332>
c0021e4c:	83 e8 02             	sub    eax,0x2
c0021e4f:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0021e56:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0021e5d:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0021e64:	89 d0                	mov    eax,edx
c0021e66:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021e69:	8d 7a 01             	lea    edi,[edx+0x1]
c0021e6c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021e70:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0021e74:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c0021e78:	83 e1 3f             	and    ecx,0x3f
c0021e7b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c0021e7f:	89 f9                	mov    ecx,edi
c0021e81:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0021e88:	0f b6 c9             	movzx  ecx,cl
c0021e8b:	8d 78 02             	lea    edi,[eax+0x2]
c0021e8e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021e91:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0021e95:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0021e99:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c0021e9d:	83 e2 3f             	and    edx,0x3f
c0021ea0:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c0021ea4:	89 f9                	mov    ecx,edi
c0021ea6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0021eac:	0f b6 d1             	movzx  edx,cl
c0021eaf:	8d 78 03             	lea    edi,[eax+0x3]
c0021eb2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021eb5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021eb9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0021ebd:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c0021ec1:	83 e1 3f             	and    ecx,0x3f
c0021ec4:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c0021ec8:	89 fa                	mov    edx,edi
c0021eca:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0021ed0:	0f b6 ca             	movzx  ecx,dl
c0021ed3:	8d 78 04             	lea    edi,[eax+0x4]
c0021ed6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021ed9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0021edd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0021ee1:	89 fa                	mov    edx,edi
c0021ee3:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0021ee9:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c0021eed:	83 e2 3f             	and    edx,0x3f
c0021ef0:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c0021ef4:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0021efb:	66 85 f6             	test   si,si
c0021efe:	74 24                	je     c0021f24 <IDE::open(int, int, void*)+0x400>
c0021f00:	89 f9                	mov    ecx,edi
c0021f02:	83 c0 05             	add    eax,0x5
c0021f05:	0f b6 d1             	movzx  edx,cl
c0021f08:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021f0b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021f0f:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0021f13:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0021f19:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c0021f1d:	83 e0 3f             	and    eax,0x3f
c0021f20:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c0021f24:	83 ec 0c             	sub    esp,0xc
c0021f27:	68 46 f0 02 c0       	push   0xc002f046
c0021f2c:	e8 3c c1 fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0021f31:	58                   	pop    eax
c0021f32:	5a                   	pop    edx
c0021f33:	6a 00                	push   0x0
c0021f35:	53                   	push   ebx
c0021f36:	e8 6f f9 ff ff       	call   c00218aa <IDE::prepareInterrupt(unsigned char)>
c0021f3b:	59                   	pop    ecx
c0021f3c:	5e                   	pop    esi
c0021f3d:	6a 01                	push   0x1
c0021f3f:	53                   	push   ebx
c0021f40:	e8 65 f9 ff ff       	call   c00218aa <IDE::prepareInterrupt(unsigned char)>
c0021f45:	c7 04 24 ac d5 02 c0 	mov    DWORD PTR [esp],0xc002d5ac
c0021f4c:	e8 1c c1 fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0021f51:	83 c4 0c             	add    esp,0xc
c0021f54:	6a 00                	push   0x0
c0021f56:	6a 00                	push   0x0
c0021f58:	53                   	push   ebx
c0021f59:	e8 7c fb ff ff       	call   c0021ada <IDE::enableIRQs(unsigned char, bool)>
c0021f5e:	83 c4 0c             	add    esp,0xc
c0021f61:	6a 00                	push   0x0
c0021f63:	6a 01                	push   0x1
c0021f65:	53                   	push   ebx
c0021f66:	e8 6f fb ff ff       	call   c0021ada <IDE::enableIRQs(unsigned char, bool)>
c0021f6b:	c7 04 24 48 f0 02 c0 	mov    DWORD PTR [esp],0xc002f048
c0021f72:	e8 f6 c0 fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0021f77:	83 c4 10             	add    esp,0x10
c0021f7a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0021f81:	74 3c                	je     c0021fbf <IDE::open(int, int, void*)+0x49b>
c0021f83:	83 ec 0c             	sub    esp,0xc
c0021f86:	53                   	push   ebx
c0021f87:	6a 01                	push   0x1
c0021f89:	68 a1 1a 02 c0       	push   0xc0021aa1
c0021f8e:	6a 0e                	push   0xe
c0021f90:	53                   	push   ebx
c0021f91:	e8 aa 87 fe ff       	call   c000a740 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021f96:	83 c4 14             	add    esp,0x14
c0021f99:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0021f9f:	53                   	push   ebx
c0021fa0:	6a 01                	push   0x1
c0021fa2:	68 bd 1a 02 c0       	push   0xc0021abd
c0021fa7:	6a 0f                	push   0xf
c0021fa9:	53                   	push   ebx
c0021faa:	e8 91 87 fe ff       	call   c000a740 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021faf:	83 c4 14             	add    esp,0x14
c0021fb2:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0021fb8:	68 8e b8 02 c0       	push   0xc002b88e
c0021fbd:	eb 40                	jmp    c0021fff <IDE::open(int, int, void*)+0x4db>
c0021fbf:	83 ec 0c             	sub    esp,0xc
c0021fc2:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0021fcc:	53                   	push   ebx
c0021fcd:	6a 00                	push   0x0
c0021fcf:	68 a1 1a 02 c0       	push   0xc0021aa1
c0021fd4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0021fda:	53                   	push   ebx
c0021fdb:	e8 60 87 fe ff       	call   c000a740 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021fe0:	83 c4 14             	add    esp,0x14
c0021fe3:	53                   	push   ebx
c0021fe4:	6a 00                	push   0x0
c0021fe6:	68 bd 1a 02 c0       	push   0xc0021abd
c0021feb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0021ff1:	53                   	push   ebx
c0021ff2:	e8 49 87 fe ff       	call   c000a740 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021ff7:	83 c4 14             	add    esp,0x14
c0021ffa:	68 ae c5 02 c0       	push   0xc002c5ae
c0021fff:	e8 69 c0 fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0022004:	83 c4 10             	add    esp,0x10
c0022007:	83 ec 0c             	sub    esp,0xc
c002200a:	68 4a f0 02 c0       	push   0xc002f04a
c002200f:	e8 59 c0 fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0022014:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022016:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022019:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002201c:	c7 04 24 21 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca21
c0022023:	e8 45 c0 fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0022028:	83 c4 0c             	add    esp,0xc
c002202b:	6a 07                	push   0x7
c002202d:	6a 00                	push   0x0
c002202f:	53                   	push   ebx
c0022030:	e8 5b f9 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0022035:	83 c4 0c             	add    esp,0xc
c0022038:	6a 07                	push   0x7
c002203a:	6a 01                	push   0x1
c002203c:	53                   	push   ebx
c002203d:	e8 4e f9 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0022042:	c7 04 24 b8 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2b8
c0022049:	e8 1f c0 fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c002204e:	83 c4 0c             	add    esp,0xc
c0022051:	6a 01                	push   0x1
c0022053:	6a 00                	push   0x0
c0022055:	53                   	push   ebx
c0022056:	e8 7f fa ff ff       	call   c0021ada <IDE::enableIRQs(unsigned char, bool)>
c002205b:	83 c4 0c             	add    esp,0xc
c002205e:	6a 01                	push   0x1
c0022060:	6a 01                	push   0x1
c0022062:	53                   	push   ebx
c0022063:	e8 72 fa ff ff       	call   c0021ada <IDE::enableIRQs(unsigned char, bool)>
c0022068:	c7 04 24 4d f0 02 c0 	mov    DWORD PTR [esp],0xc002f04d
c002206f:	e8 f9 bf fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0022074:	83 c4 20             	add    esp,0x20
c0022077:	31 c0                	xor    eax,eax
c0022079:	5b                   	pop    ebx
c002207a:	5e                   	pop    esi
c002207b:	5f                   	pop    edi
c002207c:	c3                   	ret    
c002207d:	90                   	nop

c002207e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002207e:	55                   	push   ebp
c002207f:	57                   	push   edi
c0022080:	56                   	push   esi
c0022081:	53                   	push   ebx
c0022082:	83 ec 1c             	sub    esp,0x1c
c0022085:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0022089:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002208d:	8d 42 f8             	lea    eax,[edx-0x8]
c0022090:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022094:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022098:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002209c:	3c 03                	cmp    al,0x3
c002209e:	77 5a                	ja     c00220fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c00220a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00220a4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00220a8:	0f b6 db             	movzx  ebx,bl
c00220ab:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00220ae:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00220b3:	0c 80                	or     al,0x80
c00220b5:	50                   	push   eax
c00220b6:	6a 0c                	push   0xc
c00220b8:	53                   	push   ebx
c00220b9:	56                   	push   esi
c00220ba:	e8 11 f8 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00220bf:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c00220c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00220c8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00220cc:	0f b6 d2             	movzx  edx,dl
c00220cf:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c00220d3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00220d5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00220da:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00220de:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00220e2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00220e6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00220ee:	83 c4 2c             	add    esp,0x2c
c00220f1:	5b                   	pop    ebx
c00220f2:	5e                   	pop    esi
c00220f3:	5f                   	pop    edi
c00220f4:	5d                   	pop    ebp
c00220f5:	e9 d6 f7 ff ff       	jmp    c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00220fa:	0f b6 c2             	movzx  eax,dl
c00220fd:	83 f8 07             	cmp    eax,0x7
c0022100:	77 12                	ja     c0022114 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c0022102:	0f b6 c2             	movzx  eax,dl
c0022105:	0f b6 db             	movzx  ebx,bl
c0022108:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c0022110:	01 c2                	add    edx,eax
c0022112:	eb 2f                	jmp    c0022143 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c0022114:	83 f8 0d             	cmp    eax,0xd
c0022117:	77 13                	ja     c002212c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c0022119:	0f b6 db             	movzx  ebx,bl
c002211c:	0f b6 d2             	movzx  edx,dl
c002211f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c0022126:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002212a:	eb 17                	jmp    c0022143 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002212c:	83 f8 15             	cmp    eax,0x15
c002212f:	77 14                	ja     c0022145 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c0022131:	0f b6 db             	movzx  ebx,bl
c0022134:	0f b6 d2             	movzx  edx,dl
c0022137:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002213f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022143:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022145:	83 c4 1c             	add    esp,0x1c
c0022148:	5b                   	pop    ebx
c0022149:	5e                   	pop    esi
c002214a:	5f                   	pop    edi
c002214b:	5d                   	pop    ebp
c002214c:	c3                   	ret    
c002214d:	90                   	nop

c002214e <IDE::detect()>:
c002214e:	55                   	push   ebp
c002214f:	57                   	push   edi
c0022150:	56                   	push   esi
c0022151:	53                   	push   ebx
c0022152:	81 ec 28 02 00 00    	sub    esp,0x228
c0022158:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c002215f:	68 4f f0 02 c0       	push   0xc002f04f
c0022164:	e8 04 bf fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0022169:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c002216f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0022173:	83 c4 10             	add    esp,0x10
c0022176:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c002217b:	0f 85 2f 04 00 00    	jne    c00225b0 <IDE::detect()+0x462>
c0022181:	83 ec 0c             	sub    esp,0xc
c0022184:	31 f6                	xor    esi,esi
c0022186:	68 52 f0 02 c0       	push   0xc002f052
c002218b:	31 ff                	xor    edi,edi
c002218d:	e8 db be fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0022192:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022199:	83 c4 10             	add    esp,0x10
c002219c:	83 ec 0c             	sub    esp,0xc
c002219f:	68 55 f0 02 c0       	push   0xc002f055
c00221a4:	e8 c4 be fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c00221a9:	83 c4 10             	add    esp,0x10
c00221ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00221b3:	83 ec 0c             	sub    esp,0xc
c00221b6:	31 ed                	xor    ebp,ebp
c00221b8:	68 58 f0 02 c0       	push   0xc002f058
c00221bd:	e8 ab be fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c00221c2:	89 f8                	mov    eax,edi
c00221c4:	c1 e0 06             	shl    eax,0x6
c00221c7:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00221cf:	c7 04 24 5b f0 02 c0 	mov    DWORD PTR [esp],0xc002f05b
c00221d6:	e8 92 be fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c00221db:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00221df:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00221e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e7:	c1 e0 04             	shl    eax,0x4
c00221ea:	83 c8 a0             	or     eax,0xffffffa0
c00221ed:	0f b6 c0             	movzx  eax,al
c00221f0:	50                   	push   eax
c00221f1:	6a 06                	push   0x6
c00221f3:	56                   	push   esi
c00221f4:	53                   	push   ebx
c00221f5:	e8 d6 f6 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00221fa:	83 c4 1c             	add    esp,0x1c
c00221fd:	6a 0c                	push   0xc
c00221ff:	56                   	push   esi
c0022200:	53                   	push   ebx
c0022201:	e8 8a f7 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0022206:	83 c4 0c             	add    esp,0xc
c0022209:	6a 0c                	push   0xc
c002220b:	56                   	push   esi
c002220c:	53                   	push   ebx
c002220d:	e8 7e f7 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0022212:	83 c4 0c             	add    esp,0xc
c0022215:	6a 0c                	push   0xc
c0022217:	56                   	push   esi
c0022218:	53                   	push   ebx
c0022219:	e8 72 f7 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c002221e:	83 c4 0c             	add    esp,0xc
c0022221:	6a 0c                	push   0xc
c0022223:	56                   	push   esi
c0022224:	53                   	push   ebx
c0022225:	e8 66 f7 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c002222a:	c7 04 24 5e f0 02 c0 	mov    DWORD PTR [esp],0xc002f05e
c0022231:	e8 37 be fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0022236:	68 ec 00 00 00       	push   0xec
c002223b:	6a 07                	push   0x7
c002223d:	56                   	push   esi
c002223e:	53                   	push   ebx
c002223f:	e8 8c f6 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022244:	83 c4 1c             	add    esp,0x1c
c0022247:	6a 0c                	push   0xc
c0022249:	56                   	push   esi
c002224a:	53                   	push   ebx
c002224b:	e8 40 f7 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0022250:	83 c4 0c             	add    esp,0xc
c0022253:	6a 0c                	push   0xc
c0022255:	56                   	push   esi
c0022256:	53                   	push   ebx
c0022257:	e8 34 f7 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c002225c:	83 c4 0c             	add    esp,0xc
c002225f:	6a 0c                	push   0xc
c0022261:	56                   	push   esi
c0022262:	53                   	push   ebx
c0022263:	e8 28 f7 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0022268:	83 c4 0c             	add    esp,0xc
c002226b:	6a 0c                	push   0xc
c002226d:	56                   	push   esi
c002226e:	53                   	push   ebx
c002226f:	e8 1c f7 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0022274:	c7 04 24 61 f0 02 c0 	mov    DWORD PTR [esp],0xc002f061
c002227b:	e8 ed bd fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0022280:	83 c4 0c             	add    esp,0xc
c0022283:	6a 0c                	push   0xc
c0022285:	56                   	push   esi
c0022286:	53                   	push   ebx
c0022287:	e8 04 f7 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c002228c:	83 c4 10             	add    esp,0x10
c002228f:	84 c0                	test   al,al
c0022291:	75 1f                	jne    c00222b2 <IDE::detect()+0x164>
c0022293:	83 ec 0c             	sub    esp,0xc
c0022296:	68 64 f0 02 c0       	push   0xc002f064
c002229b:	e8 cd bd fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c00222a0:	e9 e9 02 00 00       	jmp    c002258e <IDE::detect()+0x440>
c00222a5:	a8 80                	test   al,0x80
c00222a7:	74 21                	je     c00222ca <IDE::detect()+0x17c>
c00222a9:	45                   	inc    ebp
c00222aa:	81 fd 17 01 00 00    	cmp    ebp,0x117
c00222b0:	7f 1e                	jg     c00222d0 <IDE::detect()+0x182>
c00222b2:	50                   	push   eax
c00222b3:	6a 0c                	push   0xc
c00222b5:	56                   	push   esi
c00222b6:	53                   	push   ebx
c00222b7:	e8 d4 f6 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c00222bc:	83 c4 10             	add    esp,0x10
c00222bf:	a8 01                	test   al,0x1
c00222c1:	74 e2                	je     c00222a5 <IDE::detect()+0x157>
c00222c3:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c00222c8:	eb 23                	jmp    c00222ed <IDE::detect()+0x19f>
c00222ca:	a8 08                	test   al,0x8
c00222cc:	74 db                	je     c00222a9 <IDE::detect()+0x15b>
c00222ce:	eb 18                	jmp    c00222e8 <IDE::detect()+0x19a>
c00222d0:	50                   	push   eax
c00222d1:	50                   	push   eax
c00222d2:	6a 00                	push   0x0
c00222d4:	6a 32                	push   0x32
c00222d6:	e8 15 55 ff ff       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c00222db:	83 c4 10             	add    esp,0x10
c00222de:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c00222e4:	75 cc                	jne    c00222b2 <IDE::detect()+0x164>
c00222e6:	eb db                	jmp    c00222c3 <IDE::detect()+0x175>
c00222e8:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c00222ed:	83 ec 0c             	sub    esp,0xc
c00222f0:	68 67 f0 02 c0       	push   0xc002f067
c00222f5:	e8 73 bd fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c00222fa:	83 c4 10             	add    esp,0x10
c00222fd:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c0022302:	74 5f                	je     c0022363 <IDE::detect()+0x215>
c0022304:	51                   	push   ecx
c0022305:	6a 04                	push   0x4
c0022307:	56                   	push   esi
c0022308:	53                   	push   ebx
c0022309:	e8 82 f6 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c002230e:	83 c4 0c             	add    esp,0xc
c0022311:	89 c5                	mov    ebp,eax
c0022313:	6a 05                	push   0x5
c0022315:	56                   	push   esi
c0022316:	53                   	push   ebx
c0022317:	e8 74 f6 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c002231c:	83 c4 10             	add    esp,0x10
c002231f:	89 e9                	mov    ecx,ebp
c0022321:	0f b6 c0             	movzx  eax,al
c0022324:	0f b6 e9             	movzx  ebp,cl
c0022327:	83 fd 14             	cmp    ebp,0x14
c002232a:	75 07                	jne    c0022333 <IDE::detect()+0x1e5>
c002232c:	3d eb 00 00 00       	cmp    eax,0xeb
c0022331:	eb 0e                	jmp    c0022341 <IDE::detect()+0x1f3>
c0022333:	3d 96 00 00 00       	cmp    eax,0x96
c0022338:	0f 85 53 02 00 00    	jne    c0022591 <IDE::detect()+0x443>
c002233e:	83 fd 69             	cmp    ebp,0x69
c0022341:	0f 85 4a 02 00 00    	jne    c0022591 <IDE::detect()+0x443>
c0022347:	68 a1 00 00 00       	push   0xa1
c002234c:	6a 07                	push   0x7
c002234e:	56                   	push   esi
c002234f:	53                   	push   ebx
c0022350:	e8 7b f5 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022355:	58                   	pop    eax
c0022356:	5a                   	pop    edx
c0022357:	6a 00                	push   0x0
c0022359:	6a 0a                	push   0xa
c002235b:	e8 90 54 ff ff       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c0022360:	83 c4 10             	add    esp,0x10
c0022363:	83 ec 0c             	sub    esp,0xc
c0022366:	89 fd                	mov    ebp,edi
c0022368:	68 6a f0 02 c0       	push   0xc002f06a
c002236d:	c1 e5 06             	shl    ebp,0x6
c0022370:	e8 f8 bc fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0022375:	01 dd                	add    ebp,ebx
c0022377:	8d 54 24 20          	lea    edx,[esp+0x20]
c002237b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0022382:	52                   	push   edx
c0022383:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0022387:	6a 00                	push   0x0
c0022389:	56                   	push   esi
c002238a:	53                   	push   ebx
c002238b:	e8 ee fc ff ff       	call   c002207e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022390:	83 c4 14             	add    esp,0x14
c0022393:	68 6e f0 02 c0       	push   0xc002f06e
c0022398:	e8 d0 bc fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c002239d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00223a2:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c00223a9:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c00223b0:	89 f0                	mov    eax,esi
c00223b2:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c00223b8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00223bc:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c00223c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223c6:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c00223cd:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c00223d5:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c00223dc:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c00223e4:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c00223ea:	c7 04 24 72 f0 02 c0 	mov    DWORD PTR [esp],0xc002f072
c00223f1:	e8 77 bc fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c00223f6:	83 c4 10             	add    esp,0x10
c00223f9:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c0022400:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022404:	74 09                	je     c002240f <IDE::detect()+0x2c1>
c0022406:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c002240d:	eb 07                	jmp    c0022416 <IDE::detect()+0x2c8>
c002240f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0022416:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002241a:	89 f8                	mov    eax,edi
c002241c:	83 ec 0c             	sub    esp,0xc
c002241f:	c1 e0 06             	shl    eax,0x6
c0022422:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0022425:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c002242b:	68 76 f0 02 c0       	push   0xc002f076
c0022430:	e8 38 bc fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0022435:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022439:	89 e8                	mov    eax,ebp
c002243b:	83 c4 10             	add    esp,0x10
c002243e:	8d 6a 28             	lea    ebp,[edx+0x28]
c0022441:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c0022444:	83 c0 02             	add    eax,0x2
c0022447:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c002244d:	83 c2 02             	add    edx,0x2
c0022450:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c0022453:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c0022459:	39 d5                	cmp    ebp,edx
c002245b:	75 e4                	jne    c0022441 <IDE::detect()+0x2f3>
c002245d:	89 f8                	mov    eax,edi
c002245f:	c1 e0 06             	shl    eax,0x6
c0022462:	01 d8                	add    eax,ebx
c0022464:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002246b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022472:	c1 ea 09             	shr    edx,0x9
c0022475:	83 e2 01             	and    edx,0x1
c0022478:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c002247f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022485:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c0022489:	74 0c                	je     c0022497 <IDE::detect()+0x349>
c002248b:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c0022494:	0f 95 c2             	setne  dl
c0022497:	83 ec 0c             	sub    esp,0xc
c002249a:	89 fd                	mov    ebp,edi
c002249c:	c1 e5 06             	shl    ebp,0x6
c002249f:	01 dd                	add    ebp,ebx
c00224a1:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c00224a7:	68 7a f0 02 c0       	push   0xc002f07a
c00224ac:	e8 bc bb fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c00224b1:	83 c4 10             	add    esp,0x10
c00224b4:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c00224b9:	75 66                	jne    c0022521 <IDE::detect()+0x3d3>
c00224bb:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c00224c2:	0f 84 b8 00 00 00    	je     c0022580 <IDE::detect()+0x432>
c00224c8:	83 ec 0c             	sub    esp,0xc
c00224cb:	68 7e f0 02 c0       	push   0xc002f07e
c00224d0:	e8 98 bb fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c00224d5:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c00224dc:	e8 2e e1 fe ff       	call   c001060f <malloc>
c00224e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00224e4:	89 c5                	mov    ebp,eax
c00224e6:	e8 43 05 00 00       	call   c0022a2e <ATA::ATA()>
c00224eb:	c7 04 24 82 f0 02 c0 	mov    DWORD PTR [esp],0xc002f082
c00224f2:	e8 76 bb fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c00224f7:	59                   	pop    ecx
c00224f8:	58                   	pop    eax
c00224f9:	55                   	push   ebp
c00224fa:	53                   	push   ebx
c00224fb:	e8 94 82 fe ff       	call   c000a794 <Device::addChild(Device*)>
c0022500:	c7 04 24 87 f0 02 c0 	mov    DWORD PTR [esp],0xc002f087
c0022507:	e8 61 bb fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c002250c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002250f:	53                   	push   ebx
c0022510:	57                   	push   edi
c0022511:	6a 00                	push   0x0
c0022513:	55                   	push   ebp
c0022514:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022517:	83 c4 14             	add    esp,0x14
c002251a:	68 8c f0 02 c0       	push   0xc002f08c
c002251f:	eb 57                	jmp    c0022578 <IDE::detect()+0x42a>
c0022521:	83 ec 0c             	sub    esp,0xc
c0022524:	68 91 f0 02 c0       	push   0xc002f091
c0022529:	e8 3f bb fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c002252e:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0022535:	e8 d5 e0 fe ff       	call   c001060f <malloc>
c002253a:	89 04 24             	mov    DWORD PTR [esp],eax
c002253d:	89 c5                	mov    ebp,eax
c002253f:	e8 98 0c 00 00       	call   c00231dc <ATAPI::ATAPI()>
c0022544:	c7 04 24 97 f0 02 c0 	mov    DWORD PTR [esp],0xc002f097
c002254b:	e8 1d bb fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0022550:	58                   	pop    eax
c0022551:	5a                   	pop    edx
c0022552:	55                   	push   ebp
c0022553:	53                   	push   ebx
c0022554:	e8 3b 82 fe ff       	call   c000a794 <Device::addChild(Device*)>
c0022559:	c7 04 24 9e f0 02 c0 	mov    DWORD PTR [esp],0xc002f09e
c0022560:	e8 08 bb fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c0022565:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022568:	53                   	push   ebx
c0022569:	57                   	push   edi
c002256a:	6a 00                	push   0x0
c002256c:	55                   	push   ebp
c002256d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022570:	83 c4 14             	add    esp,0x14
c0022573:	68 a5 f0 02 c0       	push   0xc002f0a5
c0022578:	e8 f0 ba fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c002257d:	83 c4 10             	add    esp,0x10
c0022580:	83 ec 0c             	sub    esp,0xc
c0022583:	47                   	inc    edi
c0022584:	68 ac f0 02 c0       	push   0xc002f0ac
c0022589:	e8 df ba fe ff       	call   c000e06d <KeSetBootMessage(char const*)>
c002258e:	83 c4 10             	add    esp,0x10
c0022591:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c0022595:	74 0c                	je     c00225a3 <IDE::detect()+0x455>
c0022597:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c002259e:	e9 10 fc ff ff       	jmp    c00221b3 <IDE::detect()+0x65>
c00225a3:	4e                   	dec    esi
c00225a4:	74 0a                	je     c00225b0 <IDE::detect()+0x462>
c00225a6:	be 01 00 00 00       	mov    esi,0x1
c00225ab:	e9 ec fb ff ff       	jmp    c002219c <IDE::detect()+0x4e>
c00225b0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00225b6:	5b                   	pop    ebx
c00225b7:	5e                   	pop    esi
c00225b8:	5f                   	pop    edi
c00225b9:	5d                   	pop    ebp
c00225ba:	c3                   	ret    
c00225bb:	90                   	nop

c00225bc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00225bc:	55                   	push   ebp
c00225bd:	57                   	push   edi
c00225be:	56                   	push   esi
c00225bf:	53                   	push   ebx
c00225c0:	83 ec 1c             	sub    esp,0x1c
c00225c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00225c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00225cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00225cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00225d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00225d7:	88 c3                	mov    bl,al
c00225d9:	25 ff 00 00 00       	and    eax,0xff
c00225de:	0f 84 88 00 00 00    	je     c002266c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c00225e4:	83 ec 0c             	sub    esp,0xc
c00225e7:	89 c7                	mov    edi,eax
c00225e9:	68 b0 f0 02 c0       	push   0xc002f0b0
c00225ee:	e8 89 49 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00225f3:	83 c4 10             	add    esp,0x10
c00225f6:	83 ff 01             	cmp    edi,0x1
c00225f9:	74 6b                	je     c0022666 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c00225fb:	83 ff 02             	cmp    edi,0x2
c00225fe:	75 58                	jne    c0022658 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c0022600:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0022605:	01 ff                	add    edi,edi
c0022607:	50                   	push   eax
c0022608:	09 fe                	or     esi,edi
c002260a:	6a 01                	push   0x1
c002260c:	89 f0                	mov    eax,esi
c002260e:	0f b6 f0             	movzx  esi,al
c0022611:	c1 e6 06             	shl    esi,0x6
c0022614:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002261c:	50                   	push   eax
c002261d:	55                   	push   ebp
c002261e:	e8 6d f3 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0022623:	83 c4 10             	add    esp,0x10
c0022626:	a8 01                	test   al,0x1
c0022628:	74 02                	je     c002262c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002262a:	b3 07                	mov    bl,0x7
c002262c:	a8 02                	test   al,0x2
c002262e:	74 02                	je     c0022632 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c0022630:	b3 03                	mov    bl,0x3
c0022632:	a8 04                	test   al,0x4
c0022634:	74 02                	je     c0022638 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c0022636:	b3 14                	mov    bl,0x14
c0022638:	a8 08                	test   al,0x8
c002263a:	74 02                	je     c002263e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002263c:	b3 03                	mov    bl,0x3
c002263e:	a8 10                	test   al,0x10
c0022640:	74 02                	je     c0022644 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c0022642:	b3 15                	mov    bl,0x15
c0022644:	a8 20                	test   al,0x20
c0022646:	74 02                	je     c002264a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c0022648:	b3 03                	mov    bl,0x3
c002264a:	a8 40                	test   al,0x40
c002264c:	74 02                	je     c0022650 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002264e:	b3 16                	mov    bl,0x16
c0022650:	a8 80                	test   al,0x80
c0022652:	74 18                	je     c002266c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0022654:	b3 0d                	mov    bl,0xd
c0022656:	eb 14                	jmp    c002266c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0022658:	83 ff 03             	cmp    edi,0x3
c002265b:	74 0d                	je     c002266a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002265d:	83 ff 04             	cmp    edi,0x4
c0022660:	75 0a                	jne    c002266c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0022662:	b3 08                	mov    bl,0x8
c0022664:	eb 06                	jmp    c002266c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0022666:	b3 13                	mov    bl,0x13
c0022668:	eb 02                	jmp    c002266c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002266a:	b3 17                	mov    bl,0x17
c002266c:	83 c4 1c             	add    esp,0x1c
c002266f:	88 d8                	mov    al,bl
c0022671:	5b                   	pop    ebx
c0022672:	5e                   	pop    esi
c0022673:	5f                   	pop    edi
c0022674:	5d                   	pop    ebp
c0022675:	c3                   	ret    

c0022676 <IDE::polling(unsigned char, unsigned int)>:
c0022676:	57                   	push   edi
c0022677:	56                   	push   esi
c0022678:	53                   	push   ebx
c0022679:	bb 04 00 00 00       	mov    ebx,0x4
c002267e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022682:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022687:	52                   	push   edx
c0022688:	6a 0c                	push   0xc
c002268a:	56                   	push   esi
c002268b:	57                   	push   edi
c002268c:	e8 ff f2 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0022691:	83 c4 10             	add    esp,0x10
c0022694:	4b                   	dec    ebx
c0022695:	75 f0                	jne    c0022687 <IDE::polling(unsigned char, unsigned int)+0x11>
c0022697:	bb a0 86 01 00       	mov    ebx,0x186a0
c002269c:	50                   	push   eax
c002269d:	6a 0c                	push   0xc
c002269f:	56                   	push   esi
c00226a0:	57                   	push   edi
c00226a1:	e8 ea f2 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c00226a6:	83 c4 10             	add    esp,0x10
c00226a9:	a8 01                	test   al,0x1
c00226ab:	75 17                	jne    c00226c4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c00226ad:	a8 20                	test   al,0x20
c00226af:	75 0f                	jne    c00226c0 <IDE::polling(unsigned char, unsigned int)+0x4a>
c00226b1:	4b                   	dec    ebx
c00226b2:	74 10                	je     c00226c4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c00226b4:	a8 80                	test   al,0x80
c00226b6:	75 e4                	jne    c002269c <IDE::polling(unsigned char, unsigned int)+0x26>
c00226b8:	a8 08                	test   al,0x8
c00226ba:	74 e0                	je     c002269c <IDE::polling(unsigned char, unsigned int)+0x26>
c00226bc:	31 c0                	xor    eax,eax
c00226be:	eb 06                	jmp    c00226c6 <IDE::polling(unsigned char, unsigned int)+0x50>
c00226c0:	b0 01                	mov    al,0x1
c00226c2:	eb 02                	jmp    c00226c6 <IDE::polling(unsigned char, unsigned int)+0x50>
c00226c4:	b0 02                	mov    al,0x2
c00226c6:	5b                   	pop    ebx
c00226c7:	5e                   	pop    esi
c00226c8:	5f                   	pop    edi
c00226c9:	c3                   	ret    

c00226ca <SATABus::close(int, int, void*)>:
c00226ca:	31 c0                	xor    eax,eax
c00226cc:	c3                   	ret    
c00226cd:	90                   	nop

c00226ce <SATABus::detect()>:
c00226ce:	c3                   	ret    
c00226cf:	90                   	nop

c00226d0 <SATABus::SATABus()>:
c00226d0:	83 ec 0c             	sub    esp,0xc
c00226d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226d7:	83 ec 08             	sub    esp,0x8
c00226da:	68 e8 f0 02 c0       	push   0xc002f0e8
c00226df:	50                   	push   eax
c00226e0:	e8 07 84 fe ff       	call   c000aaec <HardDiskController::HardDiskController(char const*)>
c00226e5:	83 c4 10             	add    esp,0x10
c00226e8:	ba 14 f1 02 c0       	mov    edx,0xc002f114
c00226ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226f1:	89 10                	mov    DWORD PTR [eax],edx
c00226f3:	83 ec 0c             	sub    esp,0xc
c00226f6:	6a 50                	push   0x50
c00226f8:	e8 42 e6 fe ff       	call   c0010d3f <Phys::allocateContiguousPages(int)>
c00226fd:	83 c4 10             	add    esp,0x10
c0022700:	89 c2                	mov    edx,eax
c0022702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022706:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002270c:	83 ec 0c             	sub    esp,0xc
c002270f:	6a 50                	push   0x50
c0022711:	e8 e5 18 ff ff       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c0022716:	83 c4 10             	add    esp,0x10
c0022719:	89 c2                	mov    edx,eax
c002271b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002271f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022725:	a1 90 72 03 c0       	mov    eax,ds:0xc0037290
c002272a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002272e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022734:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022738:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002273e:	83 ec 0c             	sub    esp,0xc
c0022741:	6a 03                	push   0x3
c0022743:	6a 50                	push   0x50
c0022745:	51                   	push   ecx
c0022746:	52                   	push   edx
c0022747:	50                   	push   eax
c0022748:	e8 7b 21 ff ff       	call   c00148c8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002274d:	83 c4 20             	add    esp,0x20
c0022750:	90                   	nop
c0022751:	83 c4 0c             	add    esp,0xc
c0022754:	c3                   	ret    
c0022755:	90                   	nop

c0022756 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002275a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002275d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022760:	09 c2                	or     edx,eax
c0022762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022766:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002276c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002276e:	31 c0                	xor    eax,eax
c0022770:	c1 e9 08             	shr    ecx,0x8
c0022773:	83 e1 0f             	and    ecx,0xf
c0022776:	39 c8                	cmp    eax,ecx
c0022778:	74 0a                	je     c0022784 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002277a:	f6 c2 01             	test   dl,0x1
c002277d:	74 08                	je     c0022787 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002277f:	d1 ea                	shr    edx,1
c0022781:	40                   	inc    eax
c0022782:	eb f2                	jmp    c0022776 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0022784:	83 c8 ff             	or     eax,0xffffffff
c0022787:	c3                   	ret    

c0022788 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022788:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002278c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002278f:	89 c2                	mov    edx,eax
c0022791:	c1 ea 08             	shr    edx,0x8
c0022794:	83 e2 0f             	and    edx,0xf
c0022797:	4a                   	dec    edx
c0022798:	75 32                	jne    c00227cc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002279a:	83 e0 0f             	and    eax,0xf
c002279d:	83 f8 03             	cmp    eax,0x3
c00227a0:	75 2a                	jne    c00227cc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00227a2:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00227a5:	b8 02 00 00 00       	mov    eax,0x2
c00227aa:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00227b0:	74 1c                	je     c00227ce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00227b2:	b8 04 00 00 00       	mov    eax,0x4
c00227b7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00227bd:	74 0f                	je     c00227ce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00227bf:	31 c0                	xor    eax,eax
c00227c1:	83 fa 03             	cmp    edx,0x3
c00227c4:	0f 94 c0             	sete   al
c00227c7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00227cb:	c3                   	ret    
c00227cc:	31 c0                	xor    eax,eax
c00227ce:	c3                   	ret    
c00227cf:	90                   	nop

c00227d0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00227d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00227d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00227d7:	0f ba e2 0f          	bt     edx,0xf
c00227db:	72 f7                	jb     c00227d4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00227dd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00227e0:	83 ca 10             	or     edx,0x10
c00227e3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00227e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00227e9:	83 ca 01             	or     edx,0x1
c00227ec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00227ef:	c3                   	ret    

c00227f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00227f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00227f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00227f7:	83 e2 fe             	and    edx,0xfffffffe
c00227fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00227fd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022800:	83 e2 ef             	and    edx,0xffffffef
c0022803:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022806:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022809:	0f ba e2 0e          	bt     edx,0xe
c002280d:	72 f7                	jb     c0022806 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002280f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022812:	0f ba e2 0f          	bt     edx,0xf
c0022816:	72 ee                	jb     c0022806 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022818:	c3                   	ret    
c0022819:	90                   	nop

c002281a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002281a:	55                   	push   ebp
c002281b:	57                   	push   edi
c002281c:	56                   	push   esi
c002281d:	53                   	push   ebx
c002281e:	83 ec 1c             	sub    esp,0x1c
c0022821:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022825:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022829:	53                   	push   ebx
c002282a:	56                   	push   esi
c002282b:	e8 c0 ff ff ff       	call   c00227f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022830:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0022834:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002283a:	83 ec 0c             	sub    esp,0xc
c002283d:	c1 e5 0a             	shl    ebp,0xa
c0022840:	01 e8                	add    eax,ebp
c0022842:	89 03                	mov    DWORD PTR [ebx],eax
c0022844:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022846:	68 00 04 00 00       	push   0x400
c002284b:	6a 00                	push   0x0
c002284d:	50                   	push   eax
c002284e:	e8 9d dc fd ff       	call   c00004f0 <memset>
c0022853:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022859:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002285d:	01 e8                	add    eax,ebp
c002285f:	83 c4 1c             	add    esp,0x1c
c0022862:	89 03                	mov    DWORD PTR [ebx],eax
c0022864:	c1 e2 08             	shl    edx,0x8
c0022867:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002286e:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0022874:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002287a:	01 f8                	add    eax,edi
c002287c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002287f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022882:	68 00 01 00 00       	push   0x100
c0022887:	6a 00                	push   0x0
c0022889:	50                   	push   eax
c002288a:	e8 61 dc fd ff       	call   c00004f0 <memset>
c002288f:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0022895:	01 fa                	add    edx,edi
c0022897:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002289b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002289e:	c1 e7 0d             	shl    edi,0xd
c00228a1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00228a8:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00228ae:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00228b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00228b8:	31 ff                	xor    edi,edi
c00228ba:	83 c4 10             	add    esp,0x10
c00228bd:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00228c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228c7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00228cd:	83 c5 20             	add    ebp,0x20
c00228d0:	01 f8                	add    eax,edi
c00228d2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00228d5:	52                   	push   edx
c00228d6:	68 00 01 00 00       	push   0x100
c00228db:	6a 00                	push   0x0
c00228dd:	50                   	push   eax
c00228de:	e8 0d dc fd ff       	call   c00004f0 <memset>
c00228e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228e7:	83 c4 10             	add    esp,0x10
c00228ea:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00228f0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00228f7:	01 f8                	add    eax,edi
c00228f9:	81 c7 00 01 00 00    	add    edi,0x100
c00228ff:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022902:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022908:	75 b3                	jne    c00228bd <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002290a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0022911:	50                   	push   eax
c0022912:	50                   	push   eax
c0022913:	53                   	push   ebx
c0022914:	56                   	push   esi
c0022915:	e8 b6 fe ff ff       	call   c00227d0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002291a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0022921:	83 c4 2c             	add    esp,0x2c
c0022924:	5b                   	pop    ebx
c0022925:	5e                   	pop    esi
c0022926:	5f                   	pop    edi
c0022927:	5d                   	pop    ebp
c0022928:	c3                   	ret    
c0022929:	90                   	nop

c002292a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002292a:	55                   	push   ebp
c002292b:	57                   	push   edi
c002292c:	56                   	push   esi
c002292d:	53                   	push   ebx
c002292e:	31 db                	xor    ebx,ebx
c0022930:	83 ec 0c             	sub    esp,0xc
c0022933:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022937:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002293b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002293e:	f7 c7 01 00 00 00    	test   edi,0x1
c0022944:	74 7a                	je     c00229c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0022946:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002294a:	89 d8                	mov    eax,ebx
c002294c:	c1 e0 07             	shl    eax,0x7
c002294f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0022956:	55                   	push   ebp
c0022957:	56                   	push   esi
c0022958:	e8 2b fe ff ff       	call   c0022788 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002295d:	5a                   	pop    edx
c002295e:	83 f8 01             	cmp    eax,0x1
c0022961:	59                   	pop    ecx
c0022962:	75 21                	jne    c0022985 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0022964:	50                   	push   eax
c0022965:	53                   	push   ebx
c0022966:	55                   	push   ebp
c0022967:	56                   	push   esi
c0022968:	e8 ad fe ff ff       	call   c002281a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002296d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022974:	e8 96 dc fe ff       	call   c001060f <malloc>
c0022979:	89 c5                	mov    ebp,eax
c002297b:	89 04 24             	mov    DWORD PTR [esp],eax
c002297e:	e8 25 0f 00 00       	call   c00238a8 <SATA::SATA()>
c0022983:	eb 24                	jmp    c00229a9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0022985:	83 f8 04             	cmp    eax,0x4
c0022988:	75 36                	jne    c00229c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002298a:	51                   	push   ecx
c002298b:	53                   	push   ebx
c002298c:	55                   	push   ebp
c002298d:	56                   	push   esi
c002298e:	e8 87 fe ff ff       	call   c002281a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022993:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002299a:	e8 70 dc fe ff       	call   c001060f <malloc>
c002299f:	89 c5                	mov    ebp,eax
c00229a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00229a4:	e8 97 12 00 00       	call   c0023c40 <SATAPI::SATAPI()>
c00229a9:	58                   	pop    eax
c00229aa:	5a                   	pop    edx
c00229ab:	55                   	push   ebp
c00229ac:	56                   	push   esi
c00229ad:	e8 e2 7d fe ff       	call   c000a794 <Device::addChild(Device*)>
c00229b2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00229b5:	56                   	push   esi
c00229b6:	6a 00                	push   0x0
c00229b8:	53                   	push   ebx
c00229b9:	55                   	push   ebp
c00229ba:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00229bd:	83 c4 20             	add    esp,0x20
c00229c0:	d1 ef                	shr    edi,1
c00229c2:	43                   	inc    ebx
c00229c3:	83 fb 20             	cmp    ebx,0x20
c00229c6:	0f 85 72 ff ff ff    	jne    c002293e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00229cc:	83 c4 0c             	add    esp,0xc
c00229cf:	5b                   	pop    ebx
c00229d0:	5e                   	pop    esi
c00229d1:	5f                   	pop    edi
c00229d2:	5d                   	pop    ebp
c00229d3:	c3                   	ret    

c00229d4 <SATABus::open(int, int, void*)>:
c00229d4:	53                   	push   ebx
c00229d5:	83 ec 08             	sub    esp,0x8
c00229d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00229dc:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c00229e2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00229e8:	e8 fb 48 ff ff       	call   c00172e8 <KeDisablePreemption()>
c00229ed:	52                   	push   edx
c00229ee:	52                   	push   edx
c00229ef:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c00229f5:	53                   	push   ebx
c00229f6:	e8 2f ff ff ff       	call   c002292a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00229fb:	e8 10 49 ff ff       	call   c0017310 <KeRestorePreemption()>
c0022a00:	31 c0                	xor    eax,eax
c0022a02:	83 c4 18             	add    esp,0x18
c0022a05:	5b                   	pop    ebx
c0022a06:	c3                   	ret    
c0022a07:	90                   	nop

c0022a08 <ATA::close(int, int, void*)>:
c0022a08:	83 ec 0c             	sub    esp,0xc
c0022a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022a15:	85 c0                	test   eax,eax
c0022a17:	74 0c                	je     c0022a25 <ATA::close(int, int, void*)+0x1d>
c0022a19:	83 ec 0c             	sub    esp,0xc
c0022a1c:	8b 10                	mov    edx,DWORD PTR [eax]
c0022a1e:	50                   	push   eax
c0022a1f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022a22:	83 c4 10             	add    esp,0x10
c0022a25:	31 c0                	xor    eax,eax
c0022a27:	83 c4 0c             	add    esp,0xc
c0022a2a:	c3                   	ret    
c0022a2b:	90                   	nop

c0022a2c <ATA::powerSaving(PowerSavingLevel)>:
c0022a2c:	c3                   	ret    
c0022a2d:	90                   	nop

c0022a2e <ATA::ATA()>:
c0022a2e:	83 ec 0c             	sub    esp,0xc
c0022a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a35:	83 ec 04             	sub    esp,0x4
c0022a38:	68 00 02 00 00       	push   0x200
c0022a3d:	68 95 f2 02 c0       	push   0xc002f295
c0022a42:	50                   	push   eax
c0022a43:	e8 2e 81 fe ff       	call   c000ab76 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022a48:	83 c4 10             	add    esp,0x10
c0022a4b:	ba fc f1 02 c0       	mov    edx,0xc002f1fc
c0022a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a54:	89 10                	mov    DWORD PTR [eax],edx
c0022a56:	90                   	nop
c0022a57:	83 c4 0c             	add    esp,0xc
c0022a5a:	c3                   	ret    
c0022a5b:	90                   	nop

c0022a5c <ATA::flush(bool)>:
c0022a5c:	53                   	push   ebx
c0022a5d:	83 ec 08             	sub    esp,0x8
c0022a60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022a64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a69:	83 f8 01             	cmp    eax,0x1
c0022a6c:	19 c0                	sbb    eax,eax
c0022a6e:	83 e0 fd             	and    eax,0xfffffffd
c0022a71:	05 ea 00 00 00       	add    eax,0xea
c0022a76:	50                   	push   eax
c0022a77:	6a 07                	push   0x7
c0022a79:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022a80:	50                   	push   eax
c0022a81:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022a87:	e8 44 ee ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a8c:	83 c4 0c             	add    esp,0xc
c0022a8f:	6a 00                	push   0x0
c0022a91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022a98:	50                   	push   eax
c0022a99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022a9f:	e8 d2 fb ff ff       	call   c0022676 <IDE::polling(unsigned char, unsigned int)>
c0022aa4:	83 c4 18             	add    esp,0x18
c0022aa7:	5b                   	pop    ebx
c0022aa8:	c3                   	ret    
c0022aa9:	90                   	nop

c0022aaa <ATA::readyForCommand()>:
c0022aaa:	56                   	push   esi
c0022aab:	53                   	push   ebx
c0022aac:	31 db                	xor    ebx,ebx
c0022aae:	50                   	push   eax
c0022aaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ab3:	50                   	push   eax
c0022ab4:	6a 0c                	push   0xc
c0022ab6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022abd:	50                   	push   eax
c0022abe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022ac4:	e8 c7 ee ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0022ac9:	83 c4 10             	add    esp,0x10
c0022acc:	a8 88                	test   al,0x88
c0022ace:	74 20                	je     c0022af0 <ATA::readyForCommand()+0x46>
c0022ad0:	43                   	inc    ebx
c0022ad1:	83 fb 63             	cmp    ebx,0x63
c0022ad4:	7e dd                	jle    c0022ab3 <ATA::readyForCommand()+0x9>
c0022ad6:	51                   	push   ecx
c0022ad7:	51                   	push   ecx
c0022ad8:	6a 00                	push   0x0
c0022ada:	6a 0a                	push   0xa
c0022adc:	e8 0f 4d ff ff       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c0022ae1:	83 c4 10             	add    esp,0x10
c0022ae4:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022aea:	75 c7                	jne    c0022ab3 <ATA::readyForCommand()+0x9>
c0022aec:	31 c0                	xor    eax,eax
c0022aee:	eb 02                	jmp    c0022af2 <ATA::readyForCommand()+0x48>
c0022af0:	b0 01                	mov    al,0x1
c0022af2:	5a                   	pop    edx
c0022af3:	5b                   	pop    ebx
c0022af4:	5e                   	pop    esi
c0022af5:	c3                   	ret    

c0022af6 <ATA::access(unsigned long long, int, void*, bool)>:
c0022af6:	55                   	push   ebp
c0022af7:	57                   	push   edi
c0022af8:	56                   	push   esi
c0022af9:	53                   	push   ebx
c0022afa:	83 ec 2c             	sub    esp,0x2c
c0022afd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022b01:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022b05:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022b09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022b0d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022b11:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022b15:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022b19:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022b1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b23:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022b29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022b2d:	c1 e0 06             	shl    eax,0x6
c0022b30:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0022b38:	74 5d                	je     c0022b97 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0022b3a:	89 fa                	mov    edx,edi
c0022b3c:	89 f0                	mov    eax,esi
c0022b3e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0022b42:	c1 ea 1c             	shr    edx,0x1c
c0022b45:	89 d1                	mov    ecx,edx
c0022b47:	09 c1                	or     ecx,eax
c0022b49:	74 25                	je     c0022b70 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0022b4b:	31 ed                	xor    ebp,ebp
c0022b4d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0022b54:	89 fa                	mov    edx,edi
c0022b56:	89 f0                	mov    eax,esi
c0022b58:	0f ad d0             	shrd   eax,edx,cl
c0022b5b:	d3 ea                	shr    edx,cl
c0022b5d:	f6 c1 20             	test   cl,0x20
c0022b60:	74 02                	je     c0022b64 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0022b62:	89 d0                	mov    eax,edx
c0022b64:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0022b68:	45                   	inc    ebp
c0022b69:	83 fd 06             	cmp    ebp,0x6
c0022b6c:	75 df                	jne    c0022b4d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0022b6e:	eb 76                	jmp    c0022be6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0022b70:	89 f0                	mov    eax,esi
c0022b72:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0022b77:	89 fa                	mov    edx,edi
c0022b79:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022b80:	0f ac d0 10          	shrd   eax,edx,0x10
c0022b84:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022b89:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0022b8d:	c1 ee 18             	shr    esi,0x18
c0022b90:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0022b95:	eb 56                	jmp    c0022bed <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0022b97:	6a 00                	push   0x0
c0022b99:	6a 3f                	push   0x3f
c0022b9b:	57                   	push   edi
c0022b9c:	56                   	push   esi
c0022b9d:	e8 b2 20 00 00       	call   c0024c54 <__umoddi3>
c0022ba2:	83 c4 10             	add    esp,0x10
c0022ba5:	40                   	inc    eax
c0022ba6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0022baa:	6a 00                	push   0x0
c0022bac:	68 f0 03 00 00       	push   0x3f0
c0022bb1:	57                   	push   edi
c0022bb2:	56                   	push   esi
c0022bb3:	e8 9c 1f 00 00       	call   c0024b54 <__udivdi3>
c0022bb8:	83 c4 10             	add    esp,0x10
c0022bbb:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0022bc0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022bc7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022bcc:	6a 00                	push   0x0
c0022bce:	6a 3f                	push   0x3f
c0022bd0:	57                   	push   edi
c0022bd1:	56                   	push   esi
c0022bd2:	e8 7d 1f 00 00       	call   c0024b54 <__udivdi3>
c0022bd7:	83 c4 10             	add    esp,0x10
c0022bda:	83 e0 0f             	and    eax,0xf
c0022bdd:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0022be2:	89 c6                	mov    esi,eax
c0022be4:	eb 07                	jmp    c0022bed <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0022be6:	31 f6                	xor    esi,esi
c0022be8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0022bed:	55                   	push   ebp
c0022bee:	6a 00                	push   0x0
c0022bf0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022bf7:	50                   	push   eax
c0022bf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bfc:	e8 d9 ee ff ff       	call   c0021ada <IDE::enableIRQs(unsigned char, bool)>
c0022c01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c04:	e8 a1 fe ff ff       	call   c0022aaa <ATA::readyForCommand()>
c0022c09:	83 c4 10             	add    esp,0x10
c0022c0c:	84 c0                	test   al,al
c0022c0e:	75 0a                	jne    c0022c1a <ATA::access(unsigned long long, int, void*, bool)+0x124>
c0022c10:	be 01 00 00 00       	mov    esi,0x1
c0022c15:	e9 c2 02 00 00       	jmp    c0022edc <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c0022c1a:	fa                   	cli    
c0022c1b:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0022c21:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0022c27:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c0022c2c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0022c32:	75 0a                	jne    c0022c3e <ATA::access(unsigned long long, int, void*, bool)+0x148>
c0022c34:	c1 e0 04             	shl    eax,0x4
c0022c37:	09 c6                	or     esi,eax
c0022c39:	83 ce a0             	or     esi,0xffffffa0
c0022c3c:	eb 08                	jmp    c0022c46 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c0022c3e:	c1 e0 04             	shl    eax,0x4
c0022c41:	09 c6                	or     esi,eax
c0022c43:	83 ce e0             	or     esi,0xffffffe0
c0022c46:	89 f0                	mov    eax,esi
c0022c48:	0f b6 d2             	movzx  edx,dl
c0022c4b:	0f b6 f0             	movzx  esi,al
c0022c4e:	56                   	push   esi
c0022c4f:	6a 06                	push   0x6
c0022c51:	52                   	push   edx
c0022c52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022c58:	e8 73 ec ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c5d:	83 c4 10             	add    esp,0x10
c0022c60:	6a 00                	push   0x0
c0022c62:	6a 01                	push   0x1
c0022c64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022c6b:	50                   	push   eax
c0022c6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022c72:	e8 59 ec ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c77:	83 c4 10             	add    esp,0x10
c0022c7a:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0022c7f:	83 f8 02             	cmp    eax,0x2
c0022c82:	75 6e                	jne    c0022cf2 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c0022c84:	6a 00                	push   0x0
c0022c86:	6a 08                	push   0x8
c0022c88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022c8f:	50                   	push   eax
c0022c90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022c96:	e8 35 ec ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c9b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022ca0:	50                   	push   eax
c0022ca1:	6a 09                	push   0x9
c0022ca3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022caa:	50                   	push   eax
c0022cab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022cb1:	e8 1a ec ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022cb6:	83 c4 20             	add    esp,0x20
c0022cb9:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0022cbe:	50                   	push   eax
c0022cbf:	6a 0a                	push   0xa
c0022cc1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022cc8:	50                   	push   eax
c0022cc9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022ccf:	e8 fc eb ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022cd4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0022cd9:	50                   	push   eax
c0022cda:	6a 0b                	push   0xb
c0022cdc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022ce3:	50                   	push   eax
c0022ce4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022cea:	e8 e1 eb ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022cef:	83 c4 20             	add    esp,0x20
c0022cf2:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0022cf7:	50                   	push   eax
c0022cf8:	6a 02                	push   0x2
c0022cfa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022d01:	50                   	push   eax
c0022d02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022d08:	e8 c3 eb ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d0d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0022d12:	50                   	push   eax
c0022d13:	6a 03                	push   0x3
c0022d15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022d1c:	50                   	push   eax
c0022d1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022d23:	e8 a8 eb ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d28:	83 c4 20             	add    esp,0x20
c0022d2b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0022d30:	50                   	push   eax
c0022d31:	6a 04                	push   0x4
c0022d33:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022d3a:	50                   	push   eax
c0022d3b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022d41:	e8 8a eb ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d46:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d4b:	50                   	push   eax
c0022d4c:	6a 05                	push   0x5
c0022d4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022d55:	50                   	push   eax
c0022d56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022d5c:	e8 6f eb ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d61:	83 c4 20             	add    esp,0x20
c0022d64:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0022d69:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0022d6e:	74 13                	je     c0022d83 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c0022d70:	83 f8 02             	cmp    eax,0x2
c0022d73:	74 20                	je     c0022d95 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c0022d75:	48                   	dec    eax
c0022d76:	0f 85 94 fe ff ff    	jne    c0022c10 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c0022d7c:	b8 30 00 00 00       	mov    eax,0x30
c0022d81:	eb 1e                	jmp    c0022da1 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c0022d83:	83 f8 02             	cmp    eax,0x2
c0022d86:	74 14                	je     c0022d9c <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c0022d88:	48                   	dec    eax
c0022d89:	b8 20 00 00 00       	mov    eax,0x20
c0022d8e:	74 11                	je     c0022da1 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c0022d90:	e9 7b fe ff ff       	jmp    c0022c10 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c0022d95:	b8 34 00 00 00       	mov    eax,0x34
c0022d9a:	eb 05                	jmp    c0022da1 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c0022d9c:	b8 24 00 00 00       	mov    eax,0x24
c0022da1:	50                   	push   eax
c0022da2:	6a 07                	push   0x7
c0022da4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022dab:	50                   	push   eax
c0022dac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022db2:	e8 19 eb ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022db7:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0022dbe:	83 c4 10             	add    esp,0x10
c0022dc1:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0022dc8:	75 01                	jne    c0022dcb <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c0022dca:	fb                   	sti    
c0022dcb:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0022dcf:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c0022dd4:	85 f6                	test   esi,esi
c0022dd6:	0f 84 dd 00 00 00    	je     c0022eb9 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0022ddc:	57                   	push   edi
c0022ddd:	6a 01                	push   0x1
c0022ddf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022de6:	50                   	push   eax
c0022de7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022ded:	e8 84 f8 ff ff       	call   c0022676 <IDE::polling(unsigned char, unsigned int)>
c0022df2:	83 c4 10             	add    esp,0x10
c0022df5:	0f b6 c0             	movzx  eax,al
c0022df8:	85 c0                	test   eax,eax
c0022dfa:	74 23                	je     c0022e1f <ATA::access(unsigned long long, int, void*, bool)+0x329>
c0022dfc:	50                   	push   eax
c0022dfd:	89 c6                	mov    esi,eax
c0022dff:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0022e06:	50                   	push   eax
c0022e07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022e0e:	50                   	push   eax
c0022e0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022e15:	e8 a2 f7 ff ff       	call   c00225bc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0022e1a:	e9 ba 00 00 00       	jmp    c0022ed9 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c0022e1f:	85 ed                	test   ebp,ebp
c0022e21:	74 49                	je     c0022e6c <ATA::access(unsigned long long, int, void*, bool)+0x376>
c0022e23:	fa                   	cli    
c0022e24:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0022e2a:	31 c9                	xor    ecx,ecx
c0022e2c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022e30:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022e34:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c0022e38:	51                   	push   ecx
c0022e39:	51                   	push   ecx
c0022e3a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022e41:	50                   	push   eax
c0022e42:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022e48:	e8 71 ea ff ff       	call   c00218be <IDE::getBase(unsigned char)>
c0022e4d:	89 c2                	mov    edx,eax
c0022e4f:	89 f8                	mov    eax,edi
c0022e51:	66 ef                	out    dx,ax
c0022e53:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022e57:	83 c4 10             	add    esp,0x10
c0022e5a:	41                   	inc    ecx
c0022e5b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0022e61:	75 c9                	jne    c0022e2c <ATA::access(unsigned long long, int, void*, bool)+0x336>
c0022e63:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0022e6a:	eb 35                	jmp    c0022ea1 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c0022e6c:	fa                   	cli    
c0022e6d:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0022e73:	52                   	push   edx
c0022e74:	52                   	push   edx
c0022e75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022e7c:	50                   	push   eax
c0022e7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022e83:	e8 36 ea ff ff       	call   c00218be <IDE::getBase(unsigned char)>
c0022e88:	b9 00 01 00 00       	mov    ecx,0x100
c0022e8d:	89 c2                	mov    edx,eax
c0022e8f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0022e93:	fc                   	cld    
c0022e94:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0022e97:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0022e9e:	83 c4 10             	add    esp,0x10
c0022ea1:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0022ea8:	75 01                	jne    c0022eab <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c0022eaa:	fb                   	sti    
c0022eab:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0022eb3:	4e                   	dec    esi
c0022eb4:	e9 1b ff ff ff       	jmp    c0022dd4 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c0022eb9:	31 f6                	xor    esi,esi
c0022ebb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0022ec0:	74 1a                	je     c0022edc <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c0022ec2:	50                   	push   eax
c0022ec3:	50                   	push   eax
c0022ec4:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0022ec9:	83 f8 02             	cmp    eax,0x2
c0022ecc:	0f 94 c0             	sete   al
c0022ecf:	0f b6 c0             	movzx  eax,al
c0022ed2:	50                   	push   eax
c0022ed3:	53                   	push   ebx
c0022ed4:	e8 83 fb ff ff       	call   c0022a5c <ATA::flush(bool)>
c0022ed9:	83 c4 10             	add    esp,0x10
c0022edc:	83 c4 2c             	add    esp,0x2c
c0022edf:	89 f0                	mov    eax,esi
c0022ee1:	5b                   	pop    ebx
c0022ee2:	5e                   	pop    esi
c0022ee3:	5f                   	pop    edi
c0022ee4:	5d                   	pop    ebp
c0022ee5:	c3                   	ret    

c0022ee6 <ATA::read(unsigned long long, int, void*)>:
c0022ee6:	57                   	push   edi
c0022ee7:	b8 04 00 00 00       	mov    eax,0x4
c0022eec:	56                   	push   esi
c0022eed:	53                   	push   ebx
c0022eee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022ef2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022ef6:	8d 7a ff             	lea    edi,[edx-0x1]
c0022ef9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022efd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022f01:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0022f07:	77 25                	ja     c0022f2e <ATA::read(unsigned long long, int, void*)+0x48>
c0022f09:	b8 06 00 00 00       	mov    eax,0x6
c0022f0e:	85 f6                	test   esi,esi
c0022f10:	74 1c                	je     c0022f2e <ATA::read(unsigned long long, int, void*)+0x48>
c0022f12:	50                   	push   eax
c0022f13:	50                   	push   eax
c0022f14:	6a 00                	push   0x0
c0022f16:	56                   	push   esi
c0022f17:	52                   	push   edx
c0022f18:	53                   	push   ebx
c0022f19:	51                   	push   ecx
c0022f1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f1e:	e8 d3 fb ff ff       	call   c0022af6 <ATA::access(unsigned long long, int, void*, bool)>
c0022f23:	83 c4 20             	add    esp,0x20
c0022f26:	85 c0                	test   eax,eax
c0022f28:	0f 95 c0             	setne  al
c0022f2b:	0f b6 c0             	movzx  eax,al
c0022f2e:	5b                   	pop    ebx
c0022f2f:	5e                   	pop    esi
c0022f30:	5f                   	pop    edi
c0022f31:	c3                   	ret    

c0022f32 <ATA::write(unsigned long long, int, void*)>:
c0022f32:	57                   	push   edi
c0022f33:	b8 04 00 00 00       	mov    eax,0x4
c0022f38:	56                   	push   esi
c0022f39:	53                   	push   ebx
c0022f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022f3e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022f42:	8d 7a ff             	lea    edi,[edx-0x1]
c0022f45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022f49:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022f4d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0022f53:	77 25                	ja     c0022f7a <ATA::write(unsigned long long, int, void*)+0x48>
c0022f55:	b8 06 00 00 00       	mov    eax,0x6
c0022f5a:	85 f6                	test   esi,esi
c0022f5c:	74 1c                	je     c0022f7a <ATA::write(unsigned long long, int, void*)+0x48>
c0022f5e:	50                   	push   eax
c0022f5f:	50                   	push   eax
c0022f60:	6a 01                	push   0x1
c0022f62:	56                   	push   esi
c0022f63:	52                   	push   edx
c0022f64:	53                   	push   ebx
c0022f65:	51                   	push   ecx
c0022f66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f6a:	e8 87 fb ff ff       	call   c0022af6 <ATA::access(unsigned long long, int, void*, bool)>
c0022f6f:	83 c4 20             	add    esp,0x20
c0022f72:	85 c0                	test   eax,eax
c0022f74:	0f 95 c0             	setne  al
c0022f77:	0f b6 c0             	movzx  eax,al
c0022f7a:	5b                   	pop    ebx
c0022f7b:	5e                   	pop    esi
c0022f7c:	5f                   	pop    edi
c0022f7d:	c3                   	ret    

c0022f7e <ATA::detectCHS()>:
c0022f7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f82:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0022f88:	c1 e0 06             	shl    eax,0x6
c0022f8b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0022f91:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0022f9b:	c7 44 24 04 38 f1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002f138
c0022fa3:	e9 bc da fe ff       	jmp    c0010a64 <KePanic(char const*)>

c0022fa8 <ATA::open(int, int, void*)>:
c0022fa8:	53                   	push   ebx
c0022fa9:	83 ec 08             	sub    esp,0x8
c0022fac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022fb0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022fb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022fb8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0022fbe:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0022fc4:	c1 e0 06             	shl    eax,0x6
c0022fc7:	01 d0                	add    eax,edx
c0022fc9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0022fd0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0022fd6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0022fdd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0022fe7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0022fed:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0022ff4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0022ffb:	75 0c                	jne    c0023009 <ATA::open(int, int, void*)+0x61>
c0022ffd:	83 ec 0c             	sub    esp,0xc
c0023000:	53                   	push   ebx
c0023001:	e8 78 ff ff ff       	call   c0022f7e <ATA::detectCHS()>
c0023006:	83 c4 10             	add    esp,0x10
c0023009:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002300f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023015:	c1 e0 06             	shl    eax,0x6
c0023018:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002301f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023029:	d1 e8                	shr    eax,1
c002302b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023031:	6a 04                	push   0x4
c0023033:	6a 0c                	push   0xc
c0023035:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002303c:	50                   	push   eax
c002303d:	52                   	push   edx
c002303e:	e8 8d e8 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023043:	90                   	nop
c0023044:	90                   	nop
c0023045:	6a 00                	push   0x0
c0023047:	6a 0c                	push   0xc
c0023049:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023050:	50                   	push   eax
c0023051:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023057:	e8 74 e8 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002305c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023062:	83 c4 20             	add    esp,0x20
c0023065:	c1 e0 06             	shl    eax,0x6
c0023068:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c002306e:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c0023075:	0f 84 00 01 00 00    	je     c002317b <ATA::open(int, int, void*)+0x1d3>
c002307b:	83 ec 0c             	sub    esp,0xc
c002307e:	6a 08                	push   0x8
c0023080:	e8 ba dc fe ff       	call   c0010d3f <Phys::allocateContiguousPages(int)>
c0023085:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002308b:	c7 04 24 4a f1 02 c0 	mov    DWORD PTR [esp],0xc002f14a
c0023092:	e8 e5 3e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023097:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c002309e:	e8 58 0f ff ff       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c00230a3:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00230a9:	6a 03                	push   0x3
c00230ab:	50                   	push   eax
c00230ac:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00230b2:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c00230b8:	e8 21 16 ff ff       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c00230bd:	83 c4 20             	add    esp,0x20
c00230c0:	e8 93 db fe ff       	call   c0010c58 <Phys::allocatePage()>
c00230c5:	83 ec 0c             	sub    esp,0xc
c00230c8:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c00230ce:	6a 01                	push   0x1
c00230d0:	e8 26 0f ff ff       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c00230d5:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c00230db:	6a 03                	push   0x3
c00230dd:	50                   	push   eax
c00230de:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c00230e4:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c00230ea:	e8 ef 15 ff ff       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c00230ef:	83 c4 14             	add    esp,0x14
c00230f2:	68 83 f1 02 c0       	push   0xc002f183
c00230f7:	e8 80 3e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00230fc:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c0023103:	50                   	push   eax
c0023104:	6a 12                	push   0x12
c0023106:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002310d:	50                   	push   eax
c002310e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023114:	e8 b7 e7 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023119:	83 c4 20             	add    esp,0x20
c002311c:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c0023122:	0f b6 c4             	movzx  eax,ah
c0023125:	50                   	push   eax
c0023126:	6a 13                	push   0x13
c0023128:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002312f:	50                   	push   eax
c0023130:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023136:	e8 95 e7 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002313b:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c0023142:	50                   	push   eax
c0023143:	6a 14                	push   0x14
c0023145:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002314c:	50                   	push   eax
c002314d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023153:	e8 78 e7 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023158:	83 c4 20             	add    esp,0x20
c002315b:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c0023162:	50                   	push   eax
c0023163:	6a 15                	push   0x15
c0023165:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002316c:	50                   	push   eax
c002316d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023173:	e8 58 e7 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023178:	83 c4 10             	add    esp,0x10
c002317b:	83 ec 0c             	sub    esp,0xc
c002317e:	53                   	push   ebx
c002317f:	e8 5a 7a fe ff       	call   c000abde <PhysicalDisk::startCache()>
c0023184:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023187:	e8 be 88 fe ff       	call   c000ba4a <createPartitionsForDisk(PhysicalDisk*)>
c002318c:	31 c0                	xor    eax,eax
c002318e:	83 c4 18             	add    esp,0x18
c0023191:	5b                   	pop    ebx
c0023192:	c3                   	ret    

c0023193 <combineCharAndColour(char, unsigned char)>:
c0023193:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023198:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002319e:	c1 e0 08             	shl    eax,0x8
c00231a1:	09 d0                	or     eax,edx
c00231a3:	c3                   	ret    

c00231a4 <combineColours(unsigned char, unsigned char)>:
c00231a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00231a9:	c1 e0 04             	shl    eax,0x4
c00231ac:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c00231b0:	c3                   	ret    
c00231b1:	90                   	nop

c00231b2 <ATAPI::write(unsigned long long, int, void*)>:
c00231b2:	b8 03 00 00 00       	mov    eax,0x3
c00231b7:	c3                   	ret    

c00231b8 <ATAPI::close(int, int, void*)>:
c00231b8:	83 ec 0c             	sub    esp,0xc
c00231bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00231c5:	85 c0                	test   eax,eax
c00231c7:	74 0c                	je     c00231d5 <ATAPI::close(int, int, void*)+0x1d>
c00231c9:	83 ec 0c             	sub    esp,0xc
c00231cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00231ce:	50                   	push   eax
c00231cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00231d2:	83 c4 10             	add    esp,0x10
c00231d5:	31 c0                	xor    eax,eax
c00231d7:	83 c4 0c             	add    esp,0xc
c00231da:	c3                   	ret    
c00231db:	90                   	nop

c00231dc <ATAPI::ATAPI()>:
c00231dc:	83 ec 0c             	sub    esp,0xc
c00231df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231e3:	83 ec 04             	sub    esp,0x4
c00231e6:	68 00 08 00 00       	push   0x800
c00231eb:	68 35 f3 02 c0       	push   0xc002f335
c00231f0:	50                   	push   eax
c00231f1:	e8 80 79 fe ff       	call   c000ab76 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00231f6:	83 c4 10             	add    esp,0x10
c00231f9:	ba 44 f2 02 c0       	mov    edx,0xc002f244
c00231fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023202:	89 10                	mov    DWORD PTR [eax],edx
c0023204:	90                   	nop
c0023205:	83 c4 0c             	add    esp,0xc
c0023208:	c3                   	ret    
c0023209:	90                   	nop

c002320a <ATAPI::readyForCommand()>:
c002320a:	56                   	push   esi
c002320b:	53                   	push   ebx
c002320c:	31 db                	xor    ebx,ebx
c002320e:	50                   	push   eax
c002320f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023213:	50                   	push   eax
c0023214:	6a 0c                	push   0xc
c0023216:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002321d:	50                   	push   eax
c002321e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023224:	e8 67 e7 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0023229:	83 c4 10             	add    esp,0x10
c002322c:	a8 88                	test   al,0x88
c002322e:	74 26                	je     c0023256 <ATAPI::readyForCommand()+0x4c>
c0023230:	43                   	inc    ebx
c0023231:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0023237:	7e da                	jle    c0023213 <ATAPI::readyForCommand()+0x9>
c0023239:	51                   	push   ecx
c002323a:	51                   	push   ecx
c002323b:	6a 00                	push   0x0
c002323d:	68 5e 01 00 00       	push   0x15e
c0023242:	e8 a9 45 ff ff       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c0023247:	83 c4 10             	add    esp,0x10
c002324a:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0023250:	75 c1                	jne    c0023213 <ATAPI::readyForCommand()+0x9>
c0023252:	31 c0                	xor    eax,eax
c0023254:	eb 02                	jmp    c0023258 <ATAPI::readyForCommand()+0x4e>
c0023256:	b0 01                	mov    al,0x1
c0023258:	5a                   	pop    edx
c0023259:	5b                   	pop    ebx
c002325a:	5e                   	pop    esi
c002325b:	c3                   	ret    

c002325c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002325c:	55                   	push   ebp
c002325d:	57                   	push   edi
c002325e:	56                   	push   esi
c002325f:	53                   	push   ebx
c0023260:	83 ec 20             	sub    esp,0x20
c0023263:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023267:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002326b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002326f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023273:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023277:	6a 01                	push   0x1
c0023279:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023280:	50                   	push   eax
c0023281:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023287:	e8 4e e8 ff ff       	call   c0021ada <IDE::enableIRQs(unsigned char, bool)>
c002328c:	5e                   	pop    esi
c002328d:	58                   	pop    eax
c002328e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023295:	50                   	push   eax
c0023296:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002329c:	e8 09 e6 ff ff       	call   c00218aa <IDE::prepareInterrupt(unsigned char)>
c00232a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00232a4:	e8 61 ff ff ff       	call   c002320a <ATAPI::readyForCommand()>
c00232a9:	83 c4 10             	add    esp,0x10
c00232ac:	84 c0                	test   al,al
c00232ae:	75 0a                	jne    c00232ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00232b0:	bb 01 00 00 00       	mov    ebx,0x1
c00232b5:	e9 60 02 00 00       	jmp    c002351a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c00232ba:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c00232c0:	c1 e0 04             	shl    eax,0x4
c00232c3:	0f b6 c0             	movzx  eax,al
c00232c6:	50                   	push   eax
c00232c7:	6a 06                	push   0x6
c00232c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00232d0:	50                   	push   eax
c00232d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00232d7:	e8 f4 e5 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232dc:	6a 00                	push   0x0
c00232de:	6a 01                	push   0x1
c00232e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00232e7:	50                   	push   eax
c00232e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00232ee:	e8 dd e5 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232f3:	83 c4 20             	add    esp,0x20
c00232f6:	0f b6 c3             	movzx  eax,bl
c00232f9:	0f b6 df             	movzx  ebx,bh
c00232fc:	50                   	push   eax
c00232fd:	6a 04                	push   0x4
c00232ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023306:	50                   	push   eax
c0023307:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002330d:	e8 be e5 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023312:	53                   	push   ebx
c0023313:	6a 05                	push   0x5
c0023315:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002331c:	50                   	push   eax
c002331d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023323:	e8 a8 e5 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023328:	83 c4 20             	add    esp,0x20
c002332b:	68 a0 00 00 00       	push   0xa0
c0023330:	6a 07                	push   0x7
c0023332:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023339:	50                   	push   eax
c002333a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023340:	e8 8b e5 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023345:	83 c4 0c             	add    esp,0xc
c0023348:	6a 01                	push   0x1
c002334a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023351:	50                   	push   eax
c0023352:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023358:	e8 19 f3 ff ff       	call   c0022676 <IDE::polling(unsigned char, unsigned int)>
c002335d:	83 c4 10             	add    esp,0x10
c0023360:	0f b6 d8             	movzx  ebx,al
c0023363:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c0023369:	85 db                	test   ebx,ebx
c002336b:	74 20                	je     c002338d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002336d:	53                   	push   ebx
c002336e:	0f b6 c0             	movzx  eax,al
c0023371:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c0023378:	52                   	push   edx
c0023379:	50                   	push   eax
c002337a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023380:	e8 37 f2 ff ff       	call   c00225bc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023385:	83 c4 10             	add    esp,0x10
c0023388:	e9 8d 01 00 00       	jmp    c002351a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002338d:	0f b6 c0             	movzx  eax,al
c0023390:	53                   	push   ebx
c0023391:	53                   	push   ebx
c0023392:	50                   	push   eax
c0023393:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023399:	e8 20 e5 ff ff       	call   c00218be <IDE::getBase(unsigned char)>
c002339e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00233a2:	b9 06 00 00 00       	mov    ecx,0x6
c00233a7:	89 c2                	mov    edx,eax
c00233a9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00233ac:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00233b0:	83 c4 10             	add    esp,0x10
c00233b3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00233b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00233bc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00233c2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00233c9:	85 db                	test   ebx,ebx
c00233cb:	0f 84 ec 00 00 00    	je     c00234bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c00233d1:	51                   	push   ecx
c00233d2:	51                   	push   ecx
c00233d3:	52                   	push   edx
c00233d4:	50                   	push   eax
c00233d5:	e8 64 e6 ff ff       	call   c0021a3e <IDE::waitInterrupt(unsigned char)>
c00233da:	83 c4 10             	add    esp,0x10
c00233dd:	84 c0                	test   al,al
c00233df:	0f 84 cb fe ff ff    	je     c00232b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00233e5:	56                   	push   esi
c00233e6:	56                   	push   esi
c00233e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00233ee:	50                   	push   eax
c00233ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00233f5:	e8 b0 e4 ff ff       	call   c00218aa <IDE::prepareInterrupt(unsigned char)>
c00233fa:	83 c4 0c             	add    esp,0xc
c00233fd:	6a 04                	push   0x4
c00233ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023406:	50                   	push   eax
c0023407:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002340d:	e8 7e e5 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c0023412:	83 c4 0c             	add    esp,0xc
c0023415:	89 c6                	mov    esi,eax
c0023417:	6a 05                	push   0x5
c0023419:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023420:	50                   	push   eax
c0023421:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023427:	e8 64 e5 ff ff       	call   c0021990 <IDE::read(unsigned char, unsigned char)>
c002342c:	89 f1                	mov    ecx,esi
c002342e:	0f b6 c0             	movzx  eax,al
c0023431:	0f b6 f1             	movzx  esi,cl
c0023434:	c1 e0 08             	shl    eax,0x8
c0023437:	09 c6                	or     esi,eax
c0023439:	d1 fe                	sar    esi,1
c002343b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002343f:	83 c4 10             	add    esp,0x10
c0023442:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0023447:	74 41                	je     c002348a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c0023449:	31 c9                	xor    ecx,ecx
c002344b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023451:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023458:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002345c:	75 0a                	jne    c0023468 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002345e:	01 c9                	add    ecx,ecx
c0023460:	01 cd                	add    ebp,ecx
c0023462:	4b                   	dec    ebx
c0023463:	e9 54 ff ff ff       	jmp    c00233bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c0023468:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002346d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023471:	51                   	push   ecx
c0023472:	51                   	push   ecx
c0023473:	52                   	push   edx
c0023474:	50                   	push   eax
c0023475:	e8 44 e4 ff ff       	call   c00218be <IDE::getBase(unsigned char)>
c002347a:	89 c2                	mov    edx,eax
c002347c:	89 f0                	mov    eax,esi
c002347e:	66 ef                	out    dx,ax
c0023480:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023484:	83 c4 10             	add    esp,0x10
c0023487:	41                   	inc    ecx
c0023488:	eb c1                	jmp    c002344b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002348a:	31 f6                	xor    esi,esi
c002348c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023492:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023499:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002349d:	75 06                	jne    c00234a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002349f:	01 f6                	add    esi,esi
c00234a1:	01 f5                	add    ebp,esi
c00234a3:	eb bd                	jmp    c0023462 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c00234a5:	51                   	push   ecx
c00234a6:	51                   	push   ecx
c00234a7:	52                   	push   edx
c00234a8:	50                   	push   eax
c00234a9:	e8 10 e4 ff ff       	call   c00218be <IDE::getBase(unsigned char)>
c00234ae:	89 c2                	mov    edx,eax
c00234b0:	66 ed                	in     ax,dx
c00234b2:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00234b7:	83 c4 10             	add    esp,0x10
c00234ba:	46                   	inc    esi
c00234bb:	eb cf                	jmp    c002348c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c00234bd:	51                   	push   ecx
c00234be:	51                   	push   ecx
c00234bf:	52                   	push   edx
c00234c0:	50                   	push   eax
c00234c1:	e8 78 e5 ff ff       	call   c0021a3e <IDE::waitInterrupt(unsigned char)>
c00234c6:	83 c4 10             	add    esp,0x10
c00234c9:	84 c0                	test   al,al
c00234cb:	0f 84 df fd ff ff    	je     c00232b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00234d1:	bb a0 86 01 00       	mov    ebx,0x186a0
c00234d6:	52                   	push   edx
c00234d7:	52                   	push   edx
c00234d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00234df:	50                   	push   eax
c00234e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00234e6:	e8 bf e3 ff ff       	call   c00218aa <IDE::prepareInterrupt(unsigned char)>
c00234eb:	83 c4 10             	add    esp,0x10
c00234ee:	50                   	push   eax
c00234ef:	50                   	push   eax
c00234f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00234f7:	50                   	push   eax
c00234f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00234fe:	e8 bb e3 ff ff       	call   c00218be <IDE::getBase(unsigned char)>
c0023503:	8d 50 07             	lea    edx,[eax+0x7]
c0023506:	ec                   	in     al,dx
c0023507:	83 c4 10             	add    esp,0x10
c002350a:	a8 88                	test   al,0x88
c002350c:	74 0a                	je     c0023518 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002350e:	4b                   	dec    ebx
c002350f:	75 dd                	jne    c00234ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c0023511:	bb 02 00 00 00       	mov    ebx,0x2
c0023516:	eb 02                	jmp    c002351a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0023518:	31 db                	xor    ebx,ebx
c002351a:	83 c4 1c             	add    esp,0x1c
c002351d:	89 d8                	mov    eax,ebx
c002351f:	5b                   	pop    ebx
c0023520:	5e                   	pop    esi
c0023521:	5f                   	pop    edi
c0023522:	5d                   	pop    ebp
c0023523:	c3                   	ret    

c0023524 <ATAPI::diskRemoved()>:
c0023524:	53                   	push   ebx
c0023525:	83 ec 14             	sub    esp,0x14
c0023528:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002352c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023533:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0023539:	e8 fa 81 fe ff       	call   c000b738 <LogicalDisk::unmount()>
c002353e:	58                   	pop    eax
c002353f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0023545:	e8 d6 8b fe ff       	call   c000c120 <VCache::writeWriteBuffer()>
c002354a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0023550:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023554:	83 c4 18             	add    esp,0x18
c0023557:	5b                   	pop    ebx
c0023558:	e9 b3 8b fe ff       	jmp    c000c110 <VCache::invalidateReadBuffer()>
c002355d:	90                   	nop

c002355e <ATAPI::eject()>:
c002355e:	57                   	push   edi
c002355f:	b9 03 00 00 00       	mov    ecx,0x3
c0023564:	53                   	push   ebx
c0023565:	83 ec 14             	sub    esp,0x14
c0023568:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002356c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023570:	fc                   	cld    
c0023571:	31 c0                	xor    eax,eax
c0023573:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023575:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002357a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002357f:	50                   	push   eax
c0023580:	50                   	push   eax
c0023581:	6a 00                	push   0x0
c0023583:	6a 00                	push   0x0
c0023585:	6a 00                	push   0x0
c0023587:	6a 02                	push   0x2
c0023589:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002358d:	50                   	push   eax
c002358e:	53                   	push   ebx
c002358f:	e8 c8 fc ff ff       	call   c002325c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023594:	83 c4 14             	add    esp,0x14
c0023597:	53                   	push   ebx
c0023598:	e8 87 ff ff ff       	call   c0023524 <ATAPI::diskRemoved()>
c002359d:	83 c4 24             	add    esp,0x24
c00235a0:	31 c0                	xor    eax,eax
c00235a2:	5b                   	pop    ebx
c00235a3:	5f                   	pop    edi
c00235a4:	c3                   	ret    
c00235a5:	90                   	nop

c00235a6 <ATAPI::diskInserted()>:
c00235a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235aa:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c00235b1:	c3                   	ret    

c00235b2 <ATAPI::detectMedia()>:
c00235b2:	56                   	push   esi
c00235b3:	53                   	push   ebx
c00235b4:	83 ec 28             	sub    esp,0x28
c00235b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00235bb:	6a 0c                	push   0xc
c00235bd:	6a 00                	push   0x0
c00235bf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00235c3:	56                   	push   esi
c00235c4:	e8 27 cf fd ff       	call   c00004f0 <memset>
c00235c9:	58                   	pop    eax
c00235ca:	5a                   	pop    edx
c00235cb:	6a 00                	push   0x0
c00235cd:	6a 00                	push   0x0
c00235cf:	6a 00                	push   0x0
c00235d1:	6a 00                	push   0x0
c00235d3:	56                   	push   esi
c00235d4:	53                   	push   ebx
c00235d5:	e8 82 fc ff ff       	call   c002325c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00235da:	83 c4 1c             	add    esp,0x1c
c00235dd:	6a 0c                	push   0xc
c00235df:	6a 00                	push   0x0
c00235e1:	56                   	push   esi
c00235e2:	e8 09 cf fd ff       	call   c00004f0 <memset>
c00235e7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00235ec:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00235f1:	59                   	pop    ecx
c00235f2:	58                   	pop    eax
c00235f3:	6a 01                	push   0x1
c00235f5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00235f9:	50                   	push   eax
c00235fa:	6a 00                	push   0x0
c00235fc:	6a 12                	push   0x12
c00235fe:	56                   	push   esi
c00235ff:	53                   	push   ebx
c0023600:	e8 57 fc ff ff       	call   c002325c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023605:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023609:	83 c4 20             	add    esp,0x20
c002360c:	83 e0 7f             	and    eax,0x7f
c002360f:	83 f8 70             	cmp    eax,0x70
c0023612:	74 15                	je     c0023629 <ATAPI::detectMedia()+0x77>
c0023614:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002361b:	75 0c                	jne    c0023629 <ATAPI::detectMedia()+0x77>
c002361d:	83 ec 0c             	sub    esp,0xc
c0023620:	53                   	push   ebx
c0023621:	e8 80 ff ff ff       	call   c00235a6 <ATAPI::diskInserted()>
c0023626:	83 c4 10             	add    esp,0x10
c0023629:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002362d:	83 e0 0f             	and    eax,0xf
c0023630:	83 f8 02             	cmp    eax,0x2
c0023633:	75 1b                	jne    c0023650 <ATAPI::detectMedia()+0x9e>
c0023635:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002363a:	75 2d                	jne    c0023669 <ATAPI::detectMedia()+0xb7>
c002363c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023643:	74 24                	je     c0023669 <ATAPI::detectMedia()+0xb7>
c0023645:	83 ec 0c             	sub    esp,0xc
c0023648:	53                   	push   ebx
c0023649:	e8 d6 fe ff ff       	call   c0023524 <ATAPI::diskRemoved()>
c002364e:	eb 16                	jmp    c0023666 <ATAPI::detectMedia()+0xb4>
c0023650:	85 c0                	test   eax,eax
c0023652:	75 15                	jne    c0023669 <ATAPI::detectMedia()+0xb7>
c0023654:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002365b:	75 0c                	jne    c0023669 <ATAPI::detectMedia()+0xb7>
c002365d:	83 ec 0c             	sub    esp,0xc
c0023660:	53                   	push   ebx
c0023661:	e8 40 ff ff ff       	call   c00235a6 <ATAPI::diskInserted()>
c0023666:	83 c4 10             	add    esp,0x10
c0023669:	83 c4 24             	add    esp,0x24
c002366c:	5b                   	pop    ebx
c002366d:	5e                   	pop    esi
c002366e:	c3                   	ret    
c002366f:	90                   	nop

c0023670 <ATAPI::open(int, int, void*)>:
c0023670:	56                   	push   esi
c0023671:	53                   	push   ebx
c0023672:	50                   	push   eax
c0023673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023677:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002367b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002367f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023685:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002368b:	c1 e0 06             	shl    eax,0x6
c002368e:	01 d0                	add    eax,edx
c0023690:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023697:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002369d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00236a4:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00236ae:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00236b4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00236bb:	6a 04                	push   0x4
c00236bd:	6a 0c                	push   0xc
c00236bf:	51                   	push   ecx
c00236c0:	52                   	push   edx
c00236c1:	e8 0a e2 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236c6:	90                   	nop
c00236c7:	90                   	nop
c00236c8:	6a 00                	push   0x0
c00236ca:	6a 0c                	push   0xc
c00236cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236d3:	50                   	push   eax
c00236d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236da:	e8 f1 e1 ff ff       	call   c00218d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236df:	83 c4 14             	add    esp,0x14
c00236e2:	68 78 01 00 00       	push   0x178
c00236e7:	e8 23 cf fe ff       	call   c001060f <malloc>
c00236ec:	83 c4 0c             	add    esp,0xc
c00236ef:	89 c6                	mov    esi,eax
c00236f1:	6a 00                	push   0x0
c00236f3:	68 ff ff ff 7f       	push   0x7fffffff
c00236f8:	6a 00                	push   0x0
c00236fa:	6a 00                	push   0x0
c00236fc:	53                   	push   ebx
c00236fd:	68 e7 f3 02 c0       	push   0xc002f3e7
c0023702:	50                   	push   eax
c0023703:	e8 6e 7e fe ff       	call   c000b576 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0023708:	83 c4 14             	add    esp,0x14
c002370b:	56                   	push   esi
c002370c:	e8 25 7f fe ff       	call   c000b636 <LogicalDisk::assignDriveLetter()>
c0023711:	5a                   	pop    edx
c0023712:	0f be c0             	movsx  eax,al
c0023715:	59                   	pop    ecx
c0023716:	50                   	push   eax
c0023717:	68 2c f2 02 c0       	push   0xc002f22c
c002371c:	e8 5b 38 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023721:	58                   	pop    eax
c0023722:	5a                   	pop    edx
c0023723:	56                   	push   esi
c0023724:	53                   	push   ebx
c0023725:	e8 6a 70 fe ff       	call   c000a794 <Device::addChild(Device*)>
c002372a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0023730:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023733:	e8 a6 74 fe ff       	call   c000abde <PhysicalDisk::startCache()>
c0023738:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002373f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023742:	e8 6b fe ff ff       	call   c00235b2 <ATAPI::detectMedia()>
c0023747:	83 c4 14             	add    esp,0x14
c002374a:	31 c0                	xor    eax,eax
c002374c:	5b                   	pop    ebx
c002374d:	5e                   	pop    esi
c002374e:	c3                   	ret    
c002374f:	90                   	nop

c0023750 <ATAPI::read(unsigned long long, int, void*)>:
c0023750:	55                   	push   ebp
c0023751:	57                   	push   edi
c0023752:	56                   	push   esi
c0023753:	53                   	push   ebx
c0023754:	83 ec 1c             	sub    esp,0x1c
c0023757:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002375b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002375f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023763:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002376a:	74 3c                	je     c00237a8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002376c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023770:	b9 03 00 00 00       	mov    ecx,0x3
c0023775:	fc                   	cld    
c0023776:	31 c0                	xor    eax,eax
c0023778:	0f ce                	bswap  esi
c002377a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002377c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023781:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0023785:	89 e8                	mov    eax,ebp
c0023787:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002378b:	50                   	push   eax
c002378c:	50                   	push   eax
c002378d:	55                   	push   ebp
c002378e:	c1 e5 0b             	shl    ebp,0xb
c0023791:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023795:	6a 00                	push   0x0
c0023797:	55                   	push   ebp
c0023798:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002379c:	50                   	push   eax
c002379d:	53                   	push   ebx
c002379e:	e8 b9 fa ff ff       	call   c002325c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00237a3:	83 c4 20             	add    esp,0x20
c00237a6:	eb 1a                	jmp    c00237c2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c00237a8:	83 ec 0c             	sub    esp,0xc
c00237ab:	53                   	push   ebx
c00237ac:	e8 01 fe ff ff       	call   c00235b2 <ATAPI::detectMedia()>
c00237b1:	83 c4 10             	add    esp,0x10
c00237b4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00237bb:	75 af                	jne    c002376c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00237bd:	b8 02 00 00 00       	mov    eax,0x2
c00237c2:	83 c4 1c             	add    esp,0x1c
c00237c5:	5b                   	pop    ebx
c00237c6:	5e                   	pop    esi
c00237c7:	5f                   	pop    edi
c00237c8:	5d                   	pop    ebp
c00237c9:	c3                   	ret    

c00237ca <SATA::close(int, int, void*)>:
c00237ca:	83 ec 0c             	sub    esp,0xc
c00237cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237d1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00237d7:	85 c0                	test   eax,eax
c00237d9:	74 0c                	je     c00237e7 <SATA::close(int, int, void*)+0x1d>
c00237db:	83 ec 0c             	sub    esp,0xc
c00237de:	8b 10                	mov    edx,DWORD PTR [eax]
c00237e0:	50                   	push   eax
c00237e1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00237e4:	83 c4 10             	add    esp,0x10
c00237e7:	31 c0                	xor    eax,eax
c00237e9:	83 c4 0c             	add    esp,0xc
c00237ec:	c3                   	ret    
c00237ed:	90                   	nop

c00237ee <SATA::powerSaving(PowerSavingLevel)>:
c00237ee:	c3                   	ret    
c00237ef:	90                   	nop

c00237f0 <SATA::open(int, int, void*)>:
c00237f0:	56                   	push   esi
c00237f1:	53                   	push   ebx
c00237f2:	83 ec 10             	sub    esp,0x10
c00237f5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00237f9:	68 74 f2 02 c0       	push   0xc002f274
c00237fe:	e8 79 37 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023803:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023807:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023811:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023817:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0023821:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023825:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002382f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023835:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002383c:	e8 17 d4 fe ff       	call   c0010c58 <Phys::allocatePage()>
c0023841:	89 c6                	mov    esi,eax
c0023843:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023849:	81 c6 00 10 00 00    	add    esi,0x1000
c002384f:	e8 04 d4 fe ff       	call   c0010c58 <Phys::allocatePage()>
c0023854:	83 c4 10             	add    esp,0x10
c0023857:	39 c6                	cmp    esi,eax
c0023859:	74 10                	je     c002386b <SATA::open(int, int, void*)+0x7b>
c002385b:	83 ec 0c             	sub    esp,0xc
c002385e:	68 80 f2 02 c0       	push   0xc002f280
c0023863:	e8 fc d1 fe ff       	call   c0010a64 <KePanic(char const*)>
c0023868:	83 c4 10             	add    esp,0x10
c002386b:	83 ec 0c             	sub    esp,0xc
c002386e:	6a 02                	push   0x2
c0023870:	e8 86 07 ff ff       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c0023875:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002387b:	6a 03                	push   0x3
c002387d:	50                   	push   eax
c002387e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0023884:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c002388a:	e8 4f 0e ff ff       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c002388f:	83 c4 14             	add    esp,0x14
c0023892:	53                   	push   ebx
c0023893:	e8 46 73 fe ff       	call   c000abde <PhysicalDisk::startCache()>
c0023898:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002389b:	e8 aa 81 fe ff       	call   c000ba4a <createPartitionsForDisk(PhysicalDisk*)>
c00238a0:	83 c4 14             	add    esp,0x14
c00238a3:	31 c0                	xor    eax,eax
c00238a5:	5b                   	pop    ebx
c00238a6:	5e                   	pop    esi
c00238a7:	c3                   	ret    

c00238a8 <SATA::SATA()>:
c00238a8:	83 ec 0c             	sub    esp,0xc
c00238ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238af:	83 ec 04             	sub    esp,0x4
c00238b2:	68 00 02 00 00       	push   0x200
c00238b7:	68 94 f2 02 c0       	push   0xc002f294
c00238bc:	50                   	push   eax
c00238bd:	e8 b4 72 fe ff       	call   c000ab76 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00238c2:	83 c4 10             	add    esp,0x10
c00238c5:	ba 04 f3 02 c0       	mov    edx,0xc002f304
c00238ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238ce:	89 10                	mov    DWORD PTR [eax],edx
c00238d0:	90                   	nop
c00238d1:	83 c4 0c             	add    esp,0xc
c00238d4:	c3                   	ret    
c00238d5:	90                   	nop

c00238d6 <SATA::access(unsigned long long, int, void*, bool)>:
c00238d6:	55                   	push   ebp
c00238d7:	57                   	push   edi
c00238d8:	56                   	push   esi
c00238d9:	53                   	push   ebx
c00238da:	83 ec 2c             	sub    esp,0x2c
c00238dd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00238e1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00238e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00238e9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00238ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00238f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238f5:	fa                   	cli    
c00238f6:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c00238fc:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0023901:	7e 10                	jle    c0023913 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c0023903:	83 ec 0c             	sub    esp,0xc
c0023906:	68 a4 f2 02 c0       	push   0xc002f2a4
c002390b:	e8 54 d1 fe ff       	call   c0010a64 <KePanic(char const*)>
c0023910:	83 c4 10             	add    esp,0x10
c0023913:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023919:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002391f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023925:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023929:	89 d0                	mov    eax,edx
c002392b:	c1 e0 07             	shl    eax,0x7
c002392e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0023932:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002393c:	51                   	push   ecx
c002393d:	8d 42 02             	lea    eax,[edx+0x2]
c0023940:	51                   	push   ecx
c0023941:	c1 e0 07             	shl    eax,0x7
c0023944:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023948:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002394c:	50                   	push   eax
c002394d:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023953:	e8 fe ed ff ff       	call   c0022756 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023958:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002395c:	83 c4 10             	add    esp,0x10
c002395f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0023964:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023968:	0f 84 a4 01 00 00    	je     c0023b12 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c002396e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023972:	c1 e0 09             	shl    eax,0x9
c0023975:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002397a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002397e:	74 0e                	je     c002398e <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0023980:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0023986:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002398a:	89 c1                	mov    ecx,eax
c002398c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002398e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0023994:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023998:	8d 42 02             	lea    eax,[edx+0x2]
c002399b:	c1 e0 07             	shl    eax,0x7
c002399e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00239a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00239a4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00239aa:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00239b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00239b4:	c1 e1 05             	shl    ecx,0x5
c00239b7:	01 c8                	add    eax,ecx
c00239b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00239bd:	83 e1 01             	and    ecx,0x1
c00239c0:	89 ce                	mov    esi,ecx
c00239c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00239c4:	c1 e6 06             	shl    esi,0x6
c00239c7:	83 e1 bf             	and    ecx,0xffffffbf
c00239ca:	09 f1                	or     ecx,esi
c00239cc:	88 08                	mov    BYTE PTR [eax],cl
c00239ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c00239d0:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00239d6:	81 c9 05 00 01 00    	or     ecx,0x10005
c00239dc:	89 08                	mov    DWORD PTR [eax],ecx
c00239de:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00239e4:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00239ea:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00239f0:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00239f3:	50                   	push   eax
c00239f4:	68 90 00 00 00       	push   0x90
c00239f9:	6a 00                	push   0x0
c00239fb:	56                   	push   esi
c00239fc:	e8 ef ca fd ff       	call   c00004f0 <memset>
c0023a01:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023a07:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0023a0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023a11:	83 c4 10             	add    esp,0x10
c0023a14:	48                   	dec    eax
c0023a15:	25 ff ff 3f 00       	and    eax,0x3fffff
c0023a1a:	89 c1                	mov    ecx,eax
c0023a1c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0023a22:	25 00 00 c0 ff       	and    eax,0xffc00000
c0023a27:	09 c8                	or     eax,ecx
c0023a29:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0023a2f:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0023a35:	83 c8 80             	or     eax,0xffffff80
c0023a38:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0023a3e:	66 8b 06             	mov    ax,WORD PTR [esi]
c0023a41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023a45:	25 00 7f 00 00       	and    eax,0x7f00
c0023a4a:	0d 27 80 ff ff       	or     eax,0xffff8027
c0023a4f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0023a54:	66 89 06             	mov    WORD PTR [esi],ax
c0023a57:	b0 35                	mov    al,0x35
c0023a59:	75 02                	jne    c0023a5d <SATA::access(unsigned long long, int, void*, bool)+0x187>
c0023a5b:	b0 25                	mov    al,0x25
c0023a5d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0023a60:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0023a64:	89 e8                	mov    eax,ebp
c0023a66:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0023a6a:	c1 e8 10             	shr    eax,0x10
c0023a6d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0023a70:	89 e8                	mov    eax,ebp
c0023a72:	c1 e8 18             	shr    eax,0x18
c0023a75:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0023a78:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023a7c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0023a7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a83:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0023a86:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023a8a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0023a8e:	89 d6                	mov    esi,edx
c0023a90:	31 c0                	xor    eax,eax
c0023a92:	c1 e6 07             	shl    esi,0x7
c0023a95:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0023a99:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0023a9f:	80 e1 88             	and    cl,0x88
c0023aa2:	74 0a                	je     c0023aae <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0023aa4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023aa9:	74 0a                	je     c0023ab5 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0023aab:	40                   	inc    eax
c0023aac:	eb eb                	jmp    c0023a99 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0023aae:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023ab3:	75 0a                	jne    c0023abf <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0023ab5:	83 ec 0c             	sub    esp,0xc
c0023ab8:	68 dd f2 02 c0       	push   0xc002f2dd
c0023abd:	eb 36                	jmp    c0023af5 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c0023abf:	b8 01 00 00 00       	mov    eax,0x1
c0023ac4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0023ac8:	c1 e2 07             	shl    edx,0x7
c0023acb:	d3 e0                	shl    eax,cl
c0023acd:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0023ad1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0023ad7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0023add:	85 c8                	test   eax,ecx
c0023adf:	74 25                	je     c0023b06 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0023ae1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0023ae7:	0f ba e1 1e          	bt     ecx,0x1e
c0023aeb:	73 ea                	jae    c0023ad7 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c0023aed:	83 ec 0c             	sub    esp,0xc
c0023af0:	68 eb f2 02 c0       	push   0xc002f2eb
c0023af5:	e8 82 34 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023afa:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0023b01:	83 c4 10             	add    esp,0x10
c0023b04:	eb 13                	jmp    c0023b19 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c0023b06:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0023b0c:	0f ba e0 1e          	bt     eax,0x1e
c0023b10:	73 18                	jae    c0023b2a <SATA::access(unsigned long long, int, void*, bool)+0x254>
c0023b12:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0023b19:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0023b20:	75 01                	jne    c0023b23 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c0023b22:	fb                   	sti    
c0023b23:	b8 01 00 00 00       	mov    eax,0x1
c0023b28:	eb 2c                	jmp    c0023b56 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0023b2a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0023b2f:	75 10                	jne    c0023b41 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c0023b31:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0023b37:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0023b3b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023b3f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023b41:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0023b48:	a1 30 73 03 c0       	mov    eax,ds:0xc0037330
c0023b4d:	85 c0                	test   eax,eax
c0023b4f:	75 03                	jne    c0023b54 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0023b51:	fb                   	sti    
c0023b52:	eb 02                	jmp    c0023b56 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0023b54:	31 c0                	xor    eax,eax
c0023b56:	83 c4 2c             	add    esp,0x2c
c0023b59:	5b                   	pop    ebx
c0023b5a:	5e                   	pop    esi
c0023b5b:	5f                   	pop    edi
c0023b5c:	5d                   	pop    ebp
c0023b5d:	c3                   	ret    

c0023b5e <SATA::read(unsigned long long, int, void*)>:
c0023b5e:	57                   	push   edi
c0023b5f:	b8 04 00 00 00       	mov    eax,0x4
c0023b64:	56                   	push   esi
c0023b65:	53                   	push   ebx
c0023b66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023b6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023b6e:	8d 7a ff             	lea    edi,[edx-0x1]
c0023b71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023b75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023b79:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0023b7f:	77 25                	ja     c0023ba6 <SATA::read(unsigned long long, int, void*)+0x48>
c0023b81:	b8 06 00 00 00       	mov    eax,0x6
c0023b86:	85 f6                	test   esi,esi
c0023b88:	74 1c                	je     c0023ba6 <SATA::read(unsigned long long, int, void*)+0x48>
c0023b8a:	50                   	push   eax
c0023b8b:	50                   	push   eax
c0023b8c:	6a 00                	push   0x0
c0023b8e:	56                   	push   esi
c0023b8f:	52                   	push   edx
c0023b90:	53                   	push   ebx
c0023b91:	51                   	push   ecx
c0023b92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023b96:	e8 3b fd ff ff       	call   c00238d6 <SATA::access(unsigned long long, int, void*, bool)>
c0023b9b:	83 c4 20             	add    esp,0x20
c0023b9e:	85 c0                	test   eax,eax
c0023ba0:	0f 95 c0             	setne  al
c0023ba3:	0f b6 c0             	movzx  eax,al
c0023ba6:	5b                   	pop    ebx
c0023ba7:	5e                   	pop    esi
c0023ba8:	5f                   	pop    edi
c0023ba9:	c3                   	ret    

c0023baa <SATA::write(unsigned long long, int, void*)>:
c0023baa:	55                   	push   ebp
c0023bab:	b8 04 00 00 00       	mov    eax,0x4
c0023bb0:	57                   	push   edi
c0023bb1:	56                   	push   esi
c0023bb2:	53                   	push   ebx
c0023bb3:	83 ec 0c             	sub    esp,0xc
c0023bb6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023bba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023bbe:	8d 73 ff             	lea    esi,[ebx-0x1]
c0023bc1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0023bc5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023bc9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023bcf:	77 3d                	ja     c0023c0e <SATA::write(unsigned long long, int, void*)+0x64>
c0023bd1:	b8 06 00 00 00       	mov    eax,0x6
c0023bd6:	85 ed                	test   ebp,ebp
c0023bd8:	74 34                	je     c0023c0e <SATA::write(unsigned long long, int, void*)+0x64>
c0023bda:	c1 e3 09             	shl    ebx,0x9
c0023bdd:	01 eb                	add    ebx,ebp
c0023bdf:	89 d6                	mov    esi,edx
c0023be1:	89 cf                	mov    edi,ecx
c0023be3:	83 c6 01             	add    esi,0x1
c0023be6:	83 d7 00             	adc    edi,0x0
c0023be9:	50                   	push   eax
c0023bea:	50                   	push   eax
c0023beb:	6a 01                	push   0x1
c0023bed:	55                   	push   ebp
c0023bee:	81 c5 00 02 00 00    	add    ebp,0x200
c0023bf4:	6a 01                	push   0x1
c0023bf6:	51                   	push   ecx
c0023bf7:	52                   	push   edx
c0023bf8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023bfc:	e8 d5 fc ff ff       	call   c00238d6 <SATA::access(unsigned long long, int, void*, bool)>
c0023c01:	83 c4 20             	add    esp,0x20
c0023c04:	89 f2                	mov    edx,esi
c0023c06:	89 f9                	mov    ecx,edi
c0023c08:	39 dd                	cmp    ebp,ebx
c0023c0a:	75 d3                	jne    c0023bdf <SATA::write(unsigned long long, int, void*)+0x35>
c0023c0c:	31 c0                	xor    eax,eax
c0023c0e:	83 c4 0c             	add    esp,0xc
c0023c11:	5b                   	pop    ebx
c0023c12:	5e                   	pop    esi
c0023c13:	5f                   	pop    edi
c0023c14:	5d                   	pop    ebp
c0023c15:	c3                   	ret    

c0023c16 <SATAPI::write(unsigned long long, int, void*)>:
c0023c16:	b8 03 00 00 00       	mov    eax,0x3
c0023c1b:	c3                   	ret    

c0023c1c <SATAPI::close(int, int, void*)>:
c0023c1c:	83 ec 0c             	sub    esp,0xc
c0023c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c23:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023c29:	85 c0                	test   eax,eax
c0023c2b:	74 0c                	je     c0023c39 <SATAPI::close(int, int, void*)+0x1d>
c0023c2d:	83 ec 0c             	sub    esp,0xc
c0023c30:	8b 10                	mov    edx,DWORD PTR [eax]
c0023c32:	50                   	push   eax
c0023c33:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023c36:	83 c4 10             	add    esp,0x10
c0023c39:	31 c0                	xor    eax,eax
c0023c3b:	83 c4 0c             	add    esp,0xc
c0023c3e:	c3                   	ret    
c0023c3f:	90                   	nop

c0023c40 <SATAPI::SATAPI()>:
c0023c40:	83 ec 0c             	sub    esp,0xc
c0023c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c47:	83 ec 04             	sub    esp,0x4
c0023c4a:	68 00 08 00 00       	push   0x800
c0023c4f:	68 34 f3 02 c0       	push   0xc002f334
c0023c54:	50                   	push   eax
c0023c55:	e8 1c 6f fe ff       	call   c000ab76 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023c5a:	83 c4 10             	add    esp,0x10
c0023c5d:	ba 28 f4 02 c0       	mov    edx,0xc002f428
c0023c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c66:	89 10                	mov    DWORD PTR [eax],edx
c0023c68:	90                   	nop
c0023c69:	83 c4 0c             	add    esp,0xc
c0023c6c:	c3                   	ret    
c0023c6d:	90                   	nop

c0023c6e <SATAPI::diskRemoved()>:
c0023c6e:	c3                   	ret    
c0023c6f:	90                   	nop

c0023c70 <SATAPI::diskInserted()>:
c0023c70:	83 ec 18             	sub    esp,0x18
c0023c73:	68 40 f3 02 c0       	push   0xc002f340
c0023c78:	e8 ff 32 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023c7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023c81:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0023c88:	83 c4 1c             	add    esp,0x1c
c0023c8b:	c3                   	ret    

c0023c8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0023c8c:	55                   	push   ebp
c0023c8d:	57                   	push   edi
c0023c8e:	56                   	push   esi
c0023c8f:	53                   	push   ebx
c0023c90:	83 ec 34             	sub    esp,0x34
c0023c93:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0023c97:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0023c9b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0023c9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023ca3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0023ca7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0023cad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023cb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023cb7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0023cbd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023cc1:	83 c0 02             	add    eax,0x2
c0023cc4:	c1 e0 07             	shl    eax,0x7
c0023cc7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0023ccb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ccf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023cd3:	c1 e0 07             	shl    eax,0x7
c0023cd6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0023cda:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023cde:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023ce8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0023cec:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0023cf2:	e8 5f ea ff ff       	call   c0022756 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023cf7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023cfb:	83 c4 10             	add    esp,0x10
c0023cfe:	b8 01 00 00 00       	mov    eax,0x1
c0023d03:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0023d08:	0f 84 57 02 00 00    	je     c0023f65 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0023d0e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0023d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023d18:	8b 00                	mov    eax,DWORD PTR [eax]
c0023d1a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0023d20:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0023d26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023d2a:	c1 e1 05             	shl    ecx,0x5
c0023d2d:	01 c8                	add    eax,ecx
c0023d2f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d31:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0023d37:	81 c9 25 00 01 00    	or     ecx,0x10025
c0023d3d:	89 08                	mov    DWORD PTR [eax],ecx
c0023d3f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0023d45:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0023d4b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0023d51:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0023d54:	8d 7b 40             	lea    edi,[ebx+0x40]
c0023d57:	50                   	push   eax
c0023d58:	68 90 00 00 00       	push   0x90
c0023d5d:	6a 00                	push   0x0
c0023d5f:	53                   	push   ebx
c0023d60:	e8 8b c7 fd ff       	call   c00004f0 <memset>
c0023d65:	b9 0c 00 00 00       	mov    ecx,0xc
c0023d6a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0023d6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023d70:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0023d76:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0023d7a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0023d80:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023d84:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0023d88:	48                   	dec    eax
c0023d89:	25 ff ff 3f 00       	and    eax,0x3fffff
c0023d8e:	89 c1                	mov    ecx,eax
c0023d90:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023d96:	25 00 00 c0 ff       	and    eax,0xffc00000
c0023d9b:	09 c8                	or     eax,ecx
c0023d9d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023da3:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0023da9:	83 c8 80             	or     eax,0xffffff80
c0023dac:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0023db2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023db5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023db9:	25 00 7f 00 00       	and    eax,0x7f00
c0023dbe:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0023dc2:	0d 27 80 ff ff       	or     eax,0xffff8027
c0023dc7:	66 89 03             	mov    WORD PTR [ebx],ax
c0023dca:	89 d0                	mov    eax,edx
c0023dcc:	c1 ea 18             	shr    edx,0x18
c0023dcf:	c1 e8 10             	shr    eax,0x10
c0023dd2:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0023dd5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023dd8:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0023ddc:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023ddf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023de3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023de6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0023dea:	83 c4 10             	add    esp,0x10
c0023ded:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0023df1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023df5:	31 c0                	xor    eax,eax
c0023df7:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0023dfd:	80 e1 88             	and    cl,0x88
c0023e00:	74 0a                	je     c0023e0c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c0023e02:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023e07:	74 0a                	je     c0023e13 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c0023e09:	40                   	inc    eax
c0023e0a:	eb eb                	jmp    c0023df7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0023e0c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023e11:	75 43                	jne    c0023e56 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0023e13:	83 ec 0c             	sub    esp,0xc
c0023e16:	68 58 f3 02 c0       	push   0xc002f358
c0023e1b:	e8 5c 31 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023e20:	58                   	pop    eax
c0023e21:	5a                   	pop    edx
c0023e22:	68 6d f3 02 c0       	push   0xc002f36d
c0023e27:	ff 35 f4 71 03 c0    	push   DWORD PTR ds:0xc00371f4
c0023e2d:	e8 9e f5 fe ff       	call   c00133d0 <VgaText::puts(char const*)>
c0023e32:	59                   	pop    ecx
c0023e33:	5b                   	pop    ebx
c0023e34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0023e38:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0023e3e:	e8 ad e9 ff ff       	call   c00227f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e43:	5e                   	pop    esi
c0023e44:	5f                   	pop    edi
c0023e45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0023e49:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0023e4f:	e8 7c e9 ff ff       	call   c00227d0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0023e54:	eb 48                	jmp    c0023e9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c0023e56:	be 01 00 00 00       	mov    esi,0x1
c0023e5b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0023e5f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023e63:	d3 e6                	shl    esi,cl
c0023e65:	c1 e7 07             	shl    edi,0x7
c0023e68:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0023e6e:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c0023e73:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0023e77:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0023e7d:	85 c6                	test   esi,eax
c0023e7f:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0023e85:	0f 84 a7 00 00 00    	je     c0023f32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c0023e8b:	0f ba e0 1e          	bt     eax,0x1e
c0023e8f:	73 1a                	jae    c0023eab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c0023e91:	83 ec 0c             	sub    esp,0xc
c0023e94:	68 7f f3 02 c0       	push   0xc002f37f
c0023e99:	e8 de 30 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023e9e:	83 c4 10             	add    esp,0x10
c0023ea1:	b8 01 00 00 00       	mov    eax,0x1
c0023ea6:	e9 ba 00 00 00       	jmp    c0023f65 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0023eab:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c0023eb1:	83 f8 0d             	cmp    eax,0xd
c0023eb4:	77 0b                	ja     c0023ec1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c0023eb6:	50                   	push   eax
c0023eb7:	50                   	push   eax
c0023eb8:	6a 00                	push   0x0
c0023eba:	68 c8 00 00 00       	push   0xc8
c0023ebf:	eb 2a                	jmp    c0023eeb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0023ec1:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c0023ec7:	83 f8 0d             	cmp    eax,0xd
c0023eca:	77 0b                	ja     c0023ed7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c0023ecc:	51                   	push   ecx
c0023ecd:	51                   	push   ecx
c0023ece:	6a 00                	push   0x0
c0023ed0:	68 58 02 00 00       	push   0x258
c0023ed5:	eb 14                	jmp    c0023eeb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0023ed7:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c0023edd:	83 f8 06             	cmp    eax,0x6
c0023ee0:	77 11                	ja     c0023ef3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0023ee2:	52                   	push   edx
c0023ee3:	52                   	push   edx
c0023ee4:	6a 00                	push   0x0
c0023ee6:	68 dc 05 00 00       	push   0x5dc
c0023eeb:	e8 00 39 ff ff       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c0023ef0:	83 c4 10             	add    esp,0x10
c0023ef3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0023ef7:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0023efa:	75 06                	jne    c0023f02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c0023efc:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0023f00:	74 16                	je     c0023f18 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0023f02:	83 fb 06             	cmp    ebx,0x6
c0023f05:	77 11                	ja     c0023f18 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0023f07:	50                   	push   eax
c0023f08:	50                   	push   eax
c0023f09:	6a 00                	push   0x0
c0023f0b:	68 c4 09 00 00       	push   0x9c4
c0023f10:	e8 db 38 ff ff       	call   c00177f0 <milliTenthSleep(unsigned long long)>
c0023f15:	83 c4 10             	add    esp,0x10
c0023f18:	43                   	inc    ebx
c0023f19:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c0023f1f:	0f 85 52 ff ff ff    	jne    c0023e77 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c0023f25:	83 ec 0c             	sub    esp,0xc
c0023f28:	68 92 f3 02 c0       	push   0xc002f392
c0023f2d:	e9 67 ff ff ff       	jmp    c0023e99 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0023f32:	0f ba e0 1e          	bt     eax,0x1e
c0023f36:	73 0d                	jae    c0023f45 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c0023f38:	83 ec 0c             	sub    esp,0xc
c0023f3b:	68 a6 f3 02 c0       	push   0xc002f3a6
c0023f40:	e9 54 ff ff ff       	jmp    c0023e99 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0023f45:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0023f4a:	74 17                	je     c0023f63 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0023f4c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0023f51:	74 10                	je     c0023f63 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0023f53:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0023f59:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0023f5d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0023f61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023f63:	31 c0                	xor    eax,eax
c0023f65:	83 c4 2c             	add    esp,0x2c
c0023f68:	5b                   	pop    ebx
c0023f69:	5e                   	pop    esi
c0023f6a:	5f                   	pop    edi
c0023f6b:	5d                   	pop    ebp
c0023f6c:	c3                   	ret    
c0023f6d:	90                   	nop

c0023f6e <SATAPI::eject()>:
c0023f6e:	57                   	push   edi
c0023f6f:	b9 03 00 00 00       	mov    ecx,0x3
c0023f74:	83 ec 18             	sub    esp,0x18
c0023f77:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023f7b:	fc                   	cld    
c0023f7c:	31 c0                	xor    eax,eax
c0023f7e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023f80:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0023f85:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023f8a:	50                   	push   eax
c0023f8b:	6a 00                	push   0x0
c0023f8d:	6a 00                	push   0x0
c0023f8f:	6a 00                	push   0x0
c0023f91:	6a 00                	push   0x0
c0023f93:	6a 02                	push   0x2
c0023f95:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023f99:	50                   	push   eax
c0023f9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023f9e:	e8 e9 fc ff ff       	call   c0023c8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0023fa3:	31 c0                	xor    eax,eax
c0023fa5:	83 c4 38             	add    esp,0x38
c0023fa8:	5f                   	pop    edi
c0023fa9:	c3                   	ret    

c0023faa <SATAPI::detectMedia()>:
c0023faa:	53                   	push   ebx
c0023fab:	83 ec 14             	sub    esp,0x14
c0023fae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023fb2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0023fb8:	e8 63 81 fe ff       	call   c000c120 <VCache::writeWriteBuffer()>
c0023fbd:	59                   	pop    ecx
c0023fbe:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0023fc4:	e8 47 81 fe ff       	call   c000c110 <VCache::invalidateReadBuffer()>
c0023fc9:	c7 04 24 bb f3 02 c0 	mov    DWORD PTR [esp],0xc002f3bb
c0023fd0:	e8 a7 2f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023fd5:	83 c4 10             	add    esp,0x10
c0023fd8:	31 c0                	xor    eax,eax
c0023fda:	8b 14 85 e0 6a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9520]
c0023fe1:	85 d2                	test   edx,edx
c0023fe3:	74 0f                	je     c0023ff4 <SATAPI::detectMedia()+0x4a>
c0023fe5:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0023feb:	75 07                	jne    c0023ff4 <SATAPI::detectMedia()+0x4a>
c0023fed:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0023ff4:	40                   	inc    eax
c0023ff5:	83 f8 1a             	cmp    eax,0x1a
c0023ff8:	75 e0                	jne    c0023fda <SATAPI::detectMedia()+0x30>
c0023ffa:	83 c4 08             	add    esp,0x8
c0023ffd:	5b                   	pop    ebx
c0023ffe:	c3                   	ret    
c0023fff:	90                   	nop

c0024000 <SATAPI::open(int, int, void*)>:
c0024000:	56                   	push   esi
c0024001:	53                   	push   ebx
c0024002:	51                   	push   ecx
c0024003:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024007:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002400b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024015:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002401b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024025:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024029:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024033:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024039:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024040:	e8 13 cc fe ff       	call   c0010c58 <Phys::allocatePage()>
c0024045:	89 c6                	mov    esi,eax
c0024047:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002404d:	81 c6 00 10 00 00    	add    esi,0x1000
c0024053:	e8 00 cc fe ff       	call   c0010c58 <Phys::allocatePage()>
c0024058:	39 c6                	cmp    esi,eax
c002405a:	74 10                	je     c002406c <SATAPI::open(int, int, void*)+0x6c>
c002405c:	83 ec 0c             	sub    esp,0xc
c002405f:	68 d0 f3 02 c0       	push   0xc002f3d0
c0024064:	e8 fb c9 fe ff       	call   c0010a64 <KePanic(char const*)>
c0024069:	83 c4 10             	add    esp,0x10
c002406c:	83 ec 0c             	sub    esp,0xc
c002406f:	6a 02                	push   0x2
c0024071:	e8 85 ff fe ff       	call   c0013ffb <Virt::allocateKernelVirtualPages(int)>
c0024076:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002407c:	6a 03                	push   0x3
c002407e:	50                   	push   eax
c002407f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0024085:	ff 35 90 72 03 c0    	push   DWORD PTR ds:0xc0037290
c002408b:	e8 4e 06 ff ff       	call   c00146de <VAS::mapPage(unsigned long, unsigned long, int)>
c0024090:	83 c4 14             	add    esp,0x14
c0024093:	68 78 01 00 00       	push   0x178
c0024098:	e8 72 c5 fe ff       	call   c001060f <malloc>
c002409d:	83 c4 0c             	add    esp,0xc
c00240a0:	89 c6                	mov    esi,eax
c00240a2:	6a 00                	push   0x0
c00240a4:	68 ff ff ff 7f       	push   0x7fffffff
c00240a9:	6a 00                	push   0x0
c00240ab:	6a 00                	push   0x0
c00240ad:	53                   	push   ebx
c00240ae:	68 e6 f3 02 c0       	push   0xc002f3e6
c00240b3:	50                   	push   eax
c00240b4:	e8 bd 74 fe ff       	call   c000b576 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00240b9:	83 c4 14             	add    esp,0x14
c00240bc:	56                   	push   esi
c00240bd:	e8 74 75 fe ff       	call   c000b636 <LogicalDisk::assignDriveLetter()>
c00240c2:	5a                   	pop    edx
c00240c3:	0f be c0             	movsx  eax,al
c00240c6:	59                   	pop    ecx
c00240c7:	50                   	push   eax
c00240c8:	68 2c f2 02 c0       	push   0xc002f22c
c00240cd:	e8 aa 2e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00240d2:	58                   	pop    eax
c00240d3:	5a                   	pop    edx
c00240d4:	56                   	push   esi
c00240d5:	53                   	push   ebx
c00240d6:	e8 b9 66 fe ff       	call   c000a794 <Device::addChild(Device*)>
c00240db:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00240e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240e4:	e8 f5 6a fe ff       	call   c000abde <PhysicalDisk::startCache()>
c00240e9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00240f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240f3:	e8 b2 fe ff ff       	call   c0023faa <SATAPI::detectMedia()>
c00240f8:	83 c4 14             	add    esp,0x14
c00240fb:	31 c0                	xor    eax,eax
c00240fd:	5b                   	pop    ebx
c00240fe:	5e                   	pop    esi
c00240ff:	c3                   	ret    

c0024100 <SATAPI::read(unsigned long long, int, void*)>:
c0024100:	57                   	push   edi
c0024101:	56                   	push   esi
c0024102:	53                   	push   ebx
c0024103:	83 ec 30             	sub    esp,0x30
c0024106:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002410a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002410e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0024112:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024116:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002411a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002411e:	83 fe 04             	cmp    esi,0x4
c0024121:	7e 10                	jle    c0024133 <SATAPI::read(unsigned long long, int, void*)+0x33>
c0024123:	83 ec 0c             	sub    esp,0xc
c0024126:	68 f4 f3 02 c0       	push   0xc002f3f4
c002412b:	e8 34 c9 fe ff       	call   c0010a64 <KePanic(char const*)>
c0024130:	83 c4 10             	add    esp,0x10
c0024133:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024139:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002413f:	51                   	push   ecx
c0024140:	50                   	push   eax
c0024141:	83 c0 02             	add    eax,0x2
c0024144:	c1 e0 07             	shl    eax,0x7
c0024147:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002414d:	50                   	push   eax
c002414e:	52                   	push   edx
c002414f:	e8 c6 e6 ff ff       	call   c002281a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024154:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0024158:	b9 03 00 00 00       	mov    ecx,0x3
c002415d:	fc                   	cld    
c002415e:	31 c0                	xor    eax,eax
c0024160:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024162:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0024167:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002416c:	83 c4 0c             	add    esp,0xc
c002416f:	6a 00                	push   0x0
c0024171:	6a 00                	push   0x0
c0024173:	6a 00                	push   0x0
c0024175:	6a 00                	push   0x0
c0024177:	6a 02                	push   0x2
c0024179:	8d 44 24 30          	lea    eax,[esp+0x30]
c002417d:	50                   	push   eax
c002417e:	53                   	push   ebx
c002417f:	e8 08 fb ff ff       	call   c0023c8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024184:	83 c4 20             	add    esp,0x20
c0024187:	85 c0                	test   eax,eax
c0024189:	75 44                	jne    c00241cf <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002418b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002418f:	b9 03 00 00 00       	mov    ecx,0x3
c0024194:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024196:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002419a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002419f:	0f c8                	bswap  eax
c00241a1:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c00241a5:	89 f0                	mov    eax,esi
c00241a7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00241ab:	50                   	push   eax
c00241ac:	56                   	push   esi
c00241ad:	c1 e6 0b             	shl    esi,0xb
c00241b0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00241b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00241b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00241bc:	56                   	push   esi
c00241bd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00241c1:	50                   	push   eax
c00241c2:	53                   	push   ebx
c00241c3:	e8 c4 fa ff ff       	call   c0023c8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00241c8:	83 c4 20             	add    esp,0x20
c00241cb:	85 c0                	test   eax,eax
c00241cd:	74 14                	je     c00241e3 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c00241cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00241d3:	83 ec 0c             	sub    esp,0xc
c00241d6:	53                   	push   ebx
c00241d7:	e8 ce fd ff ff       	call   c0023faa <SATAPI::detectMedia()>
c00241dc:	83 c4 10             	add    esp,0x10
c00241df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00241e3:	83 c4 30             	add    esp,0x30
c00241e6:	5b                   	pop    ebx
c00241e7:	5e                   	pop    esi
c00241e8:	5f                   	pop    edi
c00241e9:	c3                   	ret    
c00241ea:	66 90                	xchg   ax,ax

c00241ec <APICTimer::close(int, int, void*)>:
c00241ec:	b8 00 00 00 00       	mov    eax,0x0
c00241f1:	c3                   	ret    
c00241f2:	66 90                	xchg   ax,ax

c00241f4 <apicTimerHandler(regs*, void*)>:
c00241f4:	83 ec 0c             	sub    esp,0xc
c00241f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00241fb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00241fd:	b8 10 27 00 00       	mov    eax,0x2710
c0024202:	ba 00 00 00 00       	mov    edx,0x0
c0024207:	f7 f1                	div    ecx
c0024209:	83 ec 0c             	sub    esp,0xc
c002420c:	50                   	push   eax
c002420d:	e8 22 7c fe ff       	call   c000be34 <timerHandler(unsigned int)>
c0024212:	83 c4 10             	add    esp,0x10
c0024215:	90                   	nop
c0024216:	83 c4 0c             	add    esp,0xc
c0024219:	c3                   	ret    
c002421a:	66 90                	xchg   ax,ax

c002421c <APICTimer::open(int, int, void*)>:
c002421c:	83 ec 0c             	sub    esp,0xc
c002421f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024223:	8b 00                	mov    eax,DWORD PTR [eax]
c0024225:	83 c0 24             	add    eax,0x24
c0024228:	8b 00                	mov    eax,DWORD PTR [eax]
c002422a:	83 ec 08             	sub    esp,0x8
c002422d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024235:	ff d0                	call   eax
c0024237:	83 c4 10             	add    esp,0x10
c002423a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002423e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024242:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002424c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024250:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024256:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002425a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024260:	83 ec 0c             	sub    esp,0xc
c0024263:	51                   	push   ecx
c0024264:	6a 01                	push   0x1
c0024266:	68 f4 41 02 c0       	push   0xc00241f4
c002426b:	52                   	push   edx
c002426c:	50                   	push   eax
c002426d:	e8 ce 64 fe ff       	call   c000a740 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024272:	83 c4 20             	add    esp,0x20
c0024275:	89 c2                	mov    edx,eax
c0024277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002427b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024281:	b8 00 00 00 00       	mov    eax,0x0
c0024286:	83 c4 0c             	add    esp,0xc
c0024289:	c3                   	ret    
c002428a:	66 90                	xchg   ax,ax

c002428c <APICTimer::write(int)>:
c002428c:	83 ec 0c             	sub    esp,0xc
c002428f:	83 ec 0c             	sub    esp,0xc
c0024292:	68 58 f4 02 c0       	push   0xc002f458
c0024297:	e8 c8 c7 fe ff       	call   c0010a64 <KePanic(char const*)>
c002429c:	83 c4 10             	add    esp,0x10
c002429f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00242a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00242ad:	90                   	nop
c00242ae:	83 c4 0c             	add    esp,0xc
c00242b1:	c3                   	ret    
c00242b2:	66 90                	xchg   ax,ax

c00242b4 <APICTimer::APICTimer()>:
c00242b4:	83 ec 0c             	sub    esp,0xc
c00242b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242bb:	83 ec 08             	sub    esp,0x8
c00242be:	68 68 f4 02 c0       	push   0xc002f468
c00242c3:	50                   	push   eax
c00242c4:	e8 9f 7a fe ff       	call   c000bd68 <Timer::Timer(char const*)>
c00242c9:	83 c4 10             	add    esp,0x10
c00242cc:	ba 7c f4 02 c0       	mov    edx,0xc002f47c
c00242d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242d5:	89 10                	mov    DWORD PTR [eax],edx
c00242d7:	90                   	nop
c00242d8:	83 c4 0c             	add    esp,0xc
c00242db:	c3                   	ret    

c00242dc <PIT::write(int)>:
c00242dc:	83 ec 10             	sub    esp,0x10
c00242df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00242e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00242e7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00242ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00242f1:	a3 b8 9d 03 c0       	mov    ds:0xc0039db8,eax
c00242f6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00242fb:	89 c2                	mov    edx,eax
c00242fd:	c1 fa 1f             	sar    edx,0x1f
c0024300:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024304:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024308:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002430f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024314:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024318:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002431d:	ee                   	out    dx,al
c002431e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024322:	0f b6 c0             	movzx  eax,al
c0024325:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002432c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024330:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024334:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024339:	ee                   	out    dx,al
c002433a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002433e:	c1 f8 08             	sar    eax,0x8
c0024341:	0f b6 c0             	movzx  eax,al
c0024344:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002434b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002434f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024353:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024358:	ee                   	out    dx,al
c0024359:	90                   	nop
c002435a:	83 c4 10             	add    esp,0x10
c002435d:	c3                   	ret    
c002435e:	66 90                	xchg   ax,ax

c0024360 <pitHandler(regs*, void*)>:
c0024360:	83 ec 0c             	sub    esp,0xc
c0024363:	8b 0d b8 9d 03 c0    	mov    ecx,DWORD PTR ds:0xc0039db8
c0024369:	b8 10 27 00 00       	mov    eax,0x2710
c002436e:	89 c2                	mov    edx,eax
c0024370:	c1 fa 1f             	sar    edx,0x1f
c0024373:	f7 f9                	idiv   ecx
c0024375:	83 ec 0c             	sub    esp,0xc
c0024378:	50                   	push   eax
c0024379:	e8 b6 7a fe ff       	call   c000be34 <timerHandler(unsigned int)>
c002437e:	83 c4 10             	add    esp,0x10
c0024381:	90                   	nop
c0024382:	83 c4 0c             	add    esp,0xc
c0024385:	c3                   	ret    
c0024386:	66 90                	xchg   ax,ax

c0024388 <PIT::open(int, int, void*)>:
c0024388:	83 ec 0c             	sub    esp,0xc
c002438b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002438f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024391:	83 c0 24             	add    eax,0x24
c0024394:	8b 00                	mov    eax,DWORD PTR [eax]
c0024396:	83 ec 08             	sub    esp,0x8
c0024399:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002439d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00243a1:	ff d0                	call   eax
c00243a3:	83 c4 10             	add    esp,0x10
c00243a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243aa:	83 ec 0c             	sub    esp,0xc
c00243ad:	6a 00                	push   0x0
c00243af:	6a 01                	push   0x1
c00243b1:	68 60 43 02 c0       	push   0xc0024360
c00243b6:	6a 00                	push   0x0
c00243b8:	50                   	push   eax
c00243b9:	e8 82 63 fe ff       	call   c000a740 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00243be:	83 c4 20             	add    esp,0x20
c00243c1:	89 c2                	mov    edx,eax
c00243c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243c7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00243cd:	b8 00 00 00 00       	mov    eax,0x0
c00243d2:	83 c4 0c             	add    esp,0xc
c00243d5:	c3                   	ret    
c00243d6:	66 90                	xchg   ax,ax

c00243d8 <PIT::close(int, int, void*)>:
c00243d8:	83 ec 0c             	sub    esp,0xc
c00243db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243df:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00243e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243ed:	6a 01                	push   0x1
c00243ef:	68 60 43 02 c0       	push   0xc0024360
c00243f4:	6a 00                	push   0x0
c00243f6:	50                   	push   eax
c00243f7:	e8 7a 63 fe ff       	call   c000a776 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00243fc:	83 c4 10             	add    esp,0x10
c00243ff:	b8 00 00 00 00       	mov    eax,0x0
c0024404:	83 c4 0c             	add    esp,0xc
c0024407:	c3                   	ret    

c0024408 <PIT::PIT()>:
c0024408:	83 ec 0c             	sub    esp,0xc
c002440b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002440f:	83 ec 08             	sub    esp,0x8
c0024412:	68 a4 f4 02 c0       	push   0xc002f4a4
c0024417:	50                   	push   eax
c0024418:	e8 4b 79 fe ff       	call   c000bd68 <Timer::Timer(char const*)>
c002441d:	83 c4 10             	add    esp,0x10
c0024420:	ba cc f4 02 c0       	mov    edx,0xc002f4cc
c0024425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024429:	89 10                	mov    DWORD PTR [eax],edx
c002442b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002442f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024435:	0f b6 d0             	movzx  edx,al
c0024438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002443c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0024443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024447:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002444d:	0f b6 d0             	movzx  edx,al
c0024450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024454:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0024459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002445d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024463:	8d 50 01             	lea    edx,[eax+0x1]
c0024466:	88 d1                	mov    cl,dl
c0024468:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002446c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0024472:	0f b6 d0             	movzx  edx,al
c0024475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024479:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002447d:	83 e1 3f             	and    ecx,0x3f
c0024480:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024484:	90                   	nop
c0024485:	83 c4 0c             	add    esp,0xc
c0024488:	c3                   	ret    
c0024489:	66 90                	xchg   ax,ax
c002448b:	66 90                	xchg   ax,ax
c002448d:	66 90                	xchg   ax,ax
c002448f:	90                   	nop

c0024490 <avxDetect>:
c0024490:	b8 01 00 00 00       	mov    eax,0x1
c0024495:	0f a2                	cpuid  
c0024497:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002449d:	74 15                	je     c00244b4 <avxDetect.noAVX>
c002449f:	b8 01 00 00 00       	mov    eax,0x1
c00244a4:	0f a2                	cpuid  
c00244a6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00244ac:	74 06                	je     c00244b4 <avxDetect.noAVX>
c00244ae:	b8 01 00 00 00       	mov    eax,0x1
c00244b3:	c3                   	ret    

c00244b4 <avxDetect.noAVX>:
c00244b4:	b8 00 00 00 00       	mov    eax,0x0
c00244b9:	c3                   	ret    

c00244ba <avxSave>:
c00244ba:	53                   	push   ebx
c00244bb:	52                   	push   edx
c00244bc:	31 c0                	xor    eax,eax
c00244be:	48                   	dec    eax
c00244bf:	89 c2                	mov    edx,eax
c00244c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00244c5:	0f ae 23             	xsave  [ebx]
c00244c8:	5a                   	pop    edx
c00244c9:	5b                   	pop    ebx
c00244ca:	c3                   	ret    

c00244cb <avxLoad>:
c00244cb:	53                   	push   ebx
c00244cc:	52                   	push   edx
c00244cd:	31 c0                	xor    eax,eax
c00244cf:	48                   	dec    eax
c00244d0:	89 c2                	mov    edx,eax
c00244d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00244d6:	0f ae 2b             	xrstor [ebx]
c00244d9:	5a                   	pop    edx
c00244da:	5b                   	pop    ebx
c00244db:	c3                   	ret    

c00244dc <avxInit>:
c00244dc:	e8 17 03 00 00       	call   c00247f8 <sseInit>
c00244e1:	50                   	push   eax
c00244e2:	51                   	push   ecx
c00244e3:	0f 20 e0             	mov    eax,cr4
c00244e6:	0d 00 00 04 00       	or     eax,0x40000
c00244eb:	0f 22 e0             	mov    cr4,eax
c00244ee:	31 c9                	xor    ecx,ecx
c00244f0:	0f 01 d0             	xgetbv 
c00244f3:	0d 07 00 00 00       	or     eax,0x7
c00244f8:	0f 01 d1             	xsetbv 
c00244fb:	59                   	pop    ecx
c00244fc:	58                   	pop    eax
c00244fd:	c3                   	ret    

c00244fe <avxClose>:
c00244fe:	c3                   	ret    
c00244ff:	90                   	nop

c0024500 <isr0>:
c0024500:	fa                   	cli    
c0024501:	68 00 00 00 00       	push   0x0
c0024506:	68 00 00 00 00       	push   0x0
c002450b:	e9 56 01 00 00       	jmp    c0024666 <int_common_stub>

c0024510 <isr1>:
c0024510:	fa                   	cli    
c0024511:	6a 00                	push   0x0
c0024513:	6a 01                	push   0x1
c0024515:	e9 4c 01 00 00       	jmp    c0024666 <int_common_stub>

c002451a <isr2>:
c002451a:	fa                   	cli    
c002451b:	6a 00                	push   0x0
c002451d:	6a 02                	push   0x2
c002451f:	e9 42 01 00 00       	jmp    c0024666 <int_common_stub>

c0024524 <isr3>:
c0024524:	fa                   	cli    
c0024525:	6a 00                	push   0x0
c0024527:	6a 03                	push   0x3
c0024529:	e9 38 01 00 00       	jmp    c0024666 <int_common_stub>

c002452e <isr4>:
c002452e:	fa                   	cli    
c002452f:	6a 00                	push   0x0
c0024531:	6a 04                	push   0x4
c0024533:	e9 2e 01 00 00       	jmp    c0024666 <int_common_stub>

c0024538 <isr5>:
c0024538:	fa                   	cli    
c0024539:	6a 00                	push   0x0
c002453b:	6a 05                	push   0x5
c002453d:	e9 24 01 00 00       	jmp    c0024666 <int_common_stub>

c0024542 <isr6>:
c0024542:	fa                   	cli    
c0024543:	6a 00                	push   0x0
c0024545:	6a 06                	push   0x6
c0024547:	e9 1a 01 00 00       	jmp    c0024666 <int_common_stub>

c002454c <isr7>:
c002454c:	fa                   	cli    
c002454d:	6a 00                	push   0x0
c002454f:	6a 07                	push   0x7
c0024551:	e9 10 01 00 00       	jmp    c0024666 <int_common_stub>

c0024556 <isr8>:
c0024556:	fa                   	cli    
c0024557:	6a 08                	push   0x8
c0024559:	e9 08 01 00 00       	jmp    c0024666 <int_common_stub>

c002455e <isr9>:
c002455e:	fa                   	cli    
c002455f:	6a 00                	push   0x0
c0024561:	6a 09                	push   0x9
c0024563:	e9 fe 00 00 00       	jmp    c0024666 <int_common_stub>

c0024568 <isr10>:
c0024568:	fa                   	cli    
c0024569:	6a 0a                	push   0xa
c002456b:	e9 f6 00 00 00       	jmp    c0024666 <int_common_stub>

c0024570 <isr11>:
c0024570:	fa                   	cli    
c0024571:	6a 0b                	push   0xb
c0024573:	e9 ee 00 00 00       	jmp    c0024666 <int_common_stub>

c0024578 <isr12>:
c0024578:	fa                   	cli    
c0024579:	6a 0c                	push   0xc
c002457b:	e9 e6 00 00 00       	jmp    c0024666 <int_common_stub>

c0024580 <isr13>:
c0024580:	fa                   	cli    
c0024581:	6a 0d                	push   0xd
c0024583:	53                   	push   ebx
c0024584:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0024588:	81 fb 2b 47 02 c0    	cmp    ebx,0xc002472b
c002458e:	5b                   	pop    ebx
c002458f:	0f 84 98 01 00 00    	je     c002472d <finishSignal2>
c0024595:	e9 cc 00 00 00       	jmp    c0024666 <int_common_stub>

c002459a <isr14>:
c002459a:	fa                   	cli    
c002459b:	6a 0e                	push   0xe
c002459d:	e9 c4 00 00 00       	jmp    c0024666 <int_common_stub>

c00245a2 <isr15>:
c00245a2:	fa                   	cli    
c00245a3:	6a 00                	push   0x0
c00245a5:	6a 0f                	push   0xf
c00245a7:	e9 ba 00 00 00       	jmp    c0024666 <int_common_stub>

c00245ac <isr16>:
c00245ac:	fa                   	cli    
c00245ad:	6a 00                	push   0x0
c00245af:	6a 10                	push   0x10
c00245b1:	e9 b0 00 00 00       	jmp    c0024666 <int_common_stub>

c00245b6 <isr17>:
c00245b6:	fa                   	cli    
c00245b7:	6a 00                	push   0x0
c00245b9:	6a 11                	push   0x11
c00245bb:	e9 a6 00 00 00       	jmp    c0024666 <int_common_stub>

c00245c0 <isr18>:
c00245c0:	fa                   	cli    
c00245c1:	6a 00                	push   0x0
c00245c3:	6a 12                	push   0x12
c00245c5:	e9 9c 00 00 00       	jmp    c0024666 <int_common_stub>

c00245ca <irq3>:
c00245ca:	fa                   	cli    
c00245cb:	6a 00                	push   0x0
c00245cd:	6a 23                	push   0x23
c00245cf:	e9 92 00 00 00       	jmp    c0024666 <int_common_stub>

c00245d4 <irq4>:
c00245d4:	fa                   	cli    
c00245d5:	6a 00                	push   0x0
c00245d7:	6a 24                	push   0x24
c00245d9:	e9 88 00 00 00       	jmp    c0024666 <int_common_stub>

c00245de <irq5>:
c00245de:	fa                   	cli    
c00245df:	6a 00                	push   0x0
c00245e1:	6a 25                	push   0x25
c00245e3:	e9 7e 00 00 00       	jmp    c0024666 <int_common_stub>

c00245e8 <irq6>:
c00245e8:	fa                   	cli    
c00245e9:	6a 00                	push   0x0
c00245eb:	6a 26                	push   0x26
c00245ed:	e9 74 00 00 00       	jmp    c0024666 <int_common_stub>

c00245f2 <irq7>:
c00245f2:	fa                   	cli    
c00245f3:	6a 00                	push   0x0
c00245f5:	6a 27                	push   0x27
c00245f7:	e9 6a 00 00 00       	jmp    c0024666 <int_common_stub>

c00245fc <irq8>:
c00245fc:	fa                   	cli    
c00245fd:	6a 00                	push   0x0
c00245ff:	6a 28                	push   0x28
c0024601:	e9 60 00 00 00       	jmp    c0024666 <int_common_stub>

c0024606 <irq9>:
c0024606:	fa                   	cli    
c0024607:	6a 00                	push   0x0
c0024609:	6a 29                	push   0x29
c002460b:	e9 56 00 00 00       	jmp    c0024666 <int_common_stub>

c0024610 <irq10>:
c0024610:	fa                   	cli    
c0024611:	6a 00                	push   0x0
c0024613:	6a 2a                	push   0x2a
c0024615:	e9 4c 00 00 00       	jmp    c0024666 <int_common_stub>

c002461a <irq11>:
c002461a:	fa                   	cli    
c002461b:	6a 00                	push   0x0
c002461d:	6a 2b                	push   0x2b
c002461f:	e9 42 00 00 00       	jmp    c0024666 <int_common_stub>

c0024624 <irq12>:
c0024624:	fa                   	cli    
c0024625:	6a 00                	push   0x0
c0024627:	6a 2c                	push   0x2c
c0024629:	e9 38 00 00 00       	jmp    c0024666 <int_common_stub>

c002462e <irq13>:
c002462e:	fa                   	cli    
c002462f:	6a 00                	push   0x0
c0024631:	6a 2d                	push   0x2d
c0024633:	e9 2e 00 00 00       	jmp    c0024666 <int_common_stub>

c0024638 <irq14>:
c0024638:	fa                   	cli    
c0024639:	6a 00                	push   0x0
c002463b:	6a 2e                	push   0x2e
c002463d:	e9 24 00 00 00       	jmp    c0024666 <int_common_stub>

c0024642 <irq15>:
c0024642:	fa                   	cli    
c0024643:	6a 00                	push   0x0
c0024645:	6a 2f                	push   0x2f
c0024647:	e9 1a 00 00 00       	jmp    c0024666 <int_common_stub>

c002464c <irq1>:
c002464c:	fa                   	cli    
c002464d:	6a 00                	push   0x0
c002464f:	6a 21                	push   0x21
c0024651:	eb 13                	jmp    c0024666 <int_common_stub>

c0024653 <irq2>:
c0024653:	fa                   	cli    
c0024654:	6a 00                	push   0x0
c0024656:	6a 22                	push   0x22
c0024658:	eb 0c                	jmp    c0024666 <int_common_stub>

c002465a <isr96>:
c002465a:	6a 00                	push   0x0
c002465c:	6a 60                	push   0x60
c002465e:	fb                   	sti    
c002465f:	eb 05                	jmp    c0024666 <int_common_stub>

c0024661 <irq0>:
c0024661:	fa                   	cli    
c0024662:	6a 00                	push   0x0
c0024664:	6a 20                	push   0x20

c0024666 <int_common_stub>:
c0024666:	60                   	pusha  
c0024667:	1e                   	push   ds
c0024668:	06                   	push   es
c0024669:	0f a0                	push   fs
c002466b:	0f a8                	push   gs
c002466d:	66 b8 10 00          	mov    ax,0x10
c0024671:	66 8e d8             	mov    ds,ax
c0024674:	66 8e c0             	mov    es,ax
c0024677:	66 8e e0             	mov    fs,ax
c002467a:	66 8e e8             	mov    gs,ax
c002467d:	54                   	push   esp
c002467e:	fc                   	cld    
c002467f:	e8 58 76 ff ff       	call   c001bcdc <int_handler>
c0024684:	81 c4 04 00 00 00    	add    esp,0x4
c002468a:	e8 a0 d7 fe ff       	call   c0011e2f <KiCheckSignalZ>
c002468f:	85 c0                	test   eax,eax
c0024691:	75 0e                	jne    c00246a1 <doSignals>
c0024693:	0f a9                	pop    gs
c0024695:	0f a1                	pop    fs
c0024697:	07                   	pop    es
c0024698:	1f                   	pop    ds
c0024699:	61                   	popa   
c002469a:	81 c4 08 00 00 00    	add    esp,0x8
c00246a0:	cf                   	iret   

c00246a1 <doSignals>:
c00246a1:	0f a9                	pop    gs
c00246a3:	0f a1                	pop    fs
c00246a5:	07                   	pop    es
c00246a6:	1f                   	pop    ds
c00246a7:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c00246ac:	61                   	popa   
c00246ad:	53                   	push   ebx
c00246ae:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c00246b4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00246b7:	5b                   	pop    ebx
c00246b8:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c00246bd:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c00246c0:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c00246c3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00246c6:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c00246c9:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c00246cc:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c00246cf:	81 c4 08 00 00 00    	add    esp,0x8
c00246d5:	5e                   	pop    esi
c00246d6:	5b                   	pop    ebx
c00246d7:	59                   	pop    ecx
c00246d8:	5a                   	pop    edx
c00246d9:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c00246dc:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c00246df:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00246e2:	52                   	push   edx
c00246e3:	51                   	push   ecx
c00246e4:	53                   	push   ebx
c00246e5:	56                   	push   esi
c00246e6:	81 ec 08 00 00 00    	sub    esp,0x8
c00246ec:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00246ef:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00246f2:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c00246f5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00246fb:	60                   	pusha  
c00246fc:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c0024702:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0024705:	89 e3                	mov    ebx,esp
c0024707:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002470a:	52                   	push   edx
c002470b:	68 2b 47 02 c0       	push   0xc002472b
c0024710:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c0024713:	89 dc                	mov    esp,ebx
c0024715:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0024718:	68 23 00 00 00       	push   0x23
c002471d:	51                   	push   ecx
c002471e:	68 02 02 00 00       	push   0x202
c0024723:	68 1b 00 00 00       	push   0x1b
c0024728:	ff 36                	push   DWORD PTR [esi]
c002472a:	cf                   	iret   

c002472b <finishSignal>:
c002472b:	cd 0f                	int    0xf

c002472d <finishSignal2>:
c002472d:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c0024733:	e8 83 d7 fe ff       	call   c0011ebb <KiFinishSignalZ>
c0024738:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002473e:	68 23 00 00 00       	push   0x23
c0024743:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0024746:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0024749:	68 1b 00 00 00       	push   0x1b
c002474e:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c0024751:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024754:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024757:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002475a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002475d:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c0024760:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0024763:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0024766:	cf                   	iret   
c0024767:	90                   	nop

c0024768 <irq16>:
c0024768:	fa                   	cli    
c0024769:	6a 00                	push   0x0
c002476b:	6a 30                	push   0x30
c002476d:	e9 f4 fe ff ff       	jmp    c0024666 <int_common_stub>

c0024772 <irq17>:
c0024772:	fa                   	cli    
c0024773:	6a 00                	push   0x0
c0024775:	6a 31                	push   0x31
c0024777:	e9 ea fe ff ff       	jmp    c0024666 <int_common_stub>

c002477c <irq18>:
c002477c:	fa                   	cli    
c002477d:	6a 00                	push   0x0
c002477f:	6a 32                	push   0x32
c0024781:	e9 e0 fe ff ff       	jmp    c0024666 <int_common_stub>

c0024786 <irq19>:
c0024786:	fa                   	cli    
c0024787:	6a 00                	push   0x0
c0024789:	6a 33                	push   0x33
c002478b:	e9 d6 fe ff ff       	jmp    c0024666 <int_common_stub>

c0024790 <irq20>:
c0024790:	fa                   	cli    
c0024791:	6a 00                	push   0x0
c0024793:	6a 34                	push   0x34
c0024795:	e9 cc fe ff ff       	jmp    c0024666 <int_common_stub>

c002479a <irq21>:
c002479a:	fa                   	cli    
c002479b:	6a 00                	push   0x0
c002479d:	6a 35                	push   0x35
c002479f:	e9 c2 fe ff ff       	jmp    c0024666 <int_common_stub>

c00247a4 <irq22>:
c00247a4:	fa                   	cli    
c00247a5:	6a 00                	push   0x0
c00247a7:	6a 36                	push   0x36
c00247a9:	e9 b8 fe ff ff       	jmp    c0024666 <int_common_stub>

c00247ae <irq23>:
c00247ae:	fa                   	cli    
c00247af:	6a 00                	push   0x0
c00247b1:	6a 37                	push   0x37
c00247b3:	e9 ae fe ff ff       	jmp    c0024666 <int_common_stub>
c00247b8:	66 90                	xchg   ax,ax
c00247ba:	66 90                	xchg   ax,ax
c00247bc:	66 90                	xchg   ax,ax
c00247be:	66 90                	xchg   ax,ax

c00247c0 <i386GetRDRAND>:
c00247c0:	b9 64 00 00 00       	mov    ecx,0x64

c00247c5 <retry>:
c00247c5:	0f c7 f0             	rdrand eax
c00247c8:	72 05                	jb     c00247cf <retry.done>
c00247ca:	e2 f9                	loop   c00247c5 <retry>

c00247cc <retry.fail>:
c00247cc:	31 c0                	xor    eax,eax
c00247ce:	c3                   	ret    

c00247cf <retry.done>:
c00247cf:	c3                   	ret    

c00247d0 <sseDetect>:
c00247d0:	b8 01 00 00 00       	mov    eax,0x1
c00247d5:	0f a2                	cpuid  
c00247d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00247dd:	74 06                	je     c00247e5 <sseDetect.noSSE>
c00247df:	b8 01 00 00 00       	mov    eax,0x1
c00247e4:	c3                   	ret    

c00247e5 <sseDetect.noSSE>:
c00247e5:	31 c0                	xor    eax,eax
c00247e7:	c3                   	ret    

c00247e8 <sseSave>:
c00247e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00247ec:	0f ae 00             	fxsave [eax]
c00247ef:	c3                   	ret    

c00247f0 <sseLoad>:
c00247f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00247f4:	0f ae 08             	fxrstor [eax]
c00247f7:	c3                   	ret    

c00247f8 <sseInit>:
c00247f8:	e8 48 00 00 00       	call   c0024845 <x87Init>
c00247fd:	0f 20 e0             	mov    eax,cr4
c0024800:	66 0d 00 06          	or     ax,0x600
c0024804:	0f 22 e0             	mov    cr4,eax
c0024807:	c3                   	ret    

c0024808 <sseClose>:
c0024808:	c3                   	ret    
c0024809:	66 90                	xchg   ax,ax
c002480b:	66 90                	xchg   ax,ax
c002480d:	66 90                	xchg   ax,ax
c002480f:	90                   	nop

c0024810 <value_37F>:
c0024810:	7f 03                	jg     c0024815 <value_37A+0x1>

c0024812 <value_37E>:
c0024812:	7e 03                	jle    c0024817 <x87Detect+0x1>

c0024814 <value_37A>:
c0024814:	7a 03                	jp     c0024819 <x87Detect+0x3>

c0024816 <x87Detect>:
c0024816:	53                   	push   ebx
c0024817:	51                   	push   ecx
c0024818:	52                   	push   edx
c0024819:	b8 01 00 00 00       	mov    eax,0x1
c002481e:	0f a2                	cpuid  
c0024820:	f7 c2 01 00 00 00    	test   edx,0x1
c0024826:	74 06                	je     c002482e <x87Detect.nox87>
c0024828:	b8 01 00 00 00       	mov    eax,0x1
c002482d:	c3                   	ret    

c002482e <x87Detect.nox87>:
c002482e:	b8 00 00 00 00       	mov    eax,0x0
c0024833:	5a                   	pop    edx
c0024834:	59                   	pop    ecx
c0024835:	5b                   	pop    ebx
c0024836:	c3                   	ret    

c0024837 <x87Save>:
c0024837:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002483b:	dd 30                	fnsave [eax]
c002483d:	c3                   	ret    

c002483e <x87Load>:
c002483e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024842:	dd 20                	frstor [eax]
c0024844:	c3                   	ret    

c0024845 <x87Init>:
c0024845:	0f 20 c0             	mov    eax,cr0
c0024848:	66 25 fb ff          	and    ax,0xfffb
c002484c:	66 0d 22 00          	or     ax,0x22
c0024850:	0f 22 c0             	mov    cr0,eax
c0024853:	db e3                	fninit 
c0024855:	0f 06                	clts   
c0024857:	d9 2d 14 48 02 c0    	fldcw  WORD PTR ds:0xc0024814
c002485d:	c3                   	ret    

c002485e <x87Close>:
c002485e:	c3                   	ret    
c002485f:	90                   	nop

c0024860 <__do_global_ctors_aux>:
c0024860:	a1 ac a4 02 c0       	mov    eax,ds:0xc002a4ac
c0024865:	83 f8 ff             	cmp    eax,0xffffffff
c0024868:	74 1a                	je     c0024884 <__do_global_ctors_aux+0x24>
c002486a:	55                   	push   ebp
c002486b:	89 e5                	mov    ebp,esp
c002486d:	53                   	push   ebx
c002486e:	52                   	push   edx
c002486f:	bb ac a4 02 c0       	mov    ebx,0xc002a4ac
c0024874:	ff d0                	call   eax
c0024876:	83 eb 04             	sub    ebx,0x4
c0024879:	8b 03                	mov    eax,DWORD PTR [ebx]
c002487b:	83 f8 ff             	cmp    eax,0xffffffff
c002487e:	75 f4                	jne    c0024874 <__do_global_ctors_aux+0x14>
c0024880:	58                   	pop    eax
c0024881:	5b                   	pop    ebx
c0024882:	5d                   	pop    ebp
c0024883:	c3                   	ret    
c0024884:	c3                   	ret    
c0024885:	66 90                	xchg   ax,ax
c0024887:	90                   	nop

c0024888 <__divdi3>:
c0024888:	55                   	push   ebp
c0024889:	57                   	push   edi
c002488a:	56                   	push   esi
c002488b:	53                   	push   ebx
c002488c:	83 ec 1c             	sub    esp,0x1c
c002488f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0024893:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024897:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002489a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002489e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00248a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00248a6:	85 db                	test   ebx,ebx
c00248a8:	0f 88 8e 00 00 00    	js     c002493c <__divdi3+0xb4>
c00248ae:	89 dd                	mov    ebp,ebx
c00248b0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00248b8:	89 d3                	mov    ebx,edx
c00248ba:	85 d2                	test   edx,edx
c00248bc:	79 0d                	jns    c00248cb <__divdi3+0x43>
c00248be:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00248c2:	f7 d8                	neg    eax
c00248c4:	83 d2 00             	adc    edx,0x0
c00248c7:	f7 da                	neg    edx
c00248c9:	89 d3                	mov    ebx,edx
c00248cb:	89 c7                	mov    edi,eax
c00248cd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00248d0:	85 db                	test   ebx,ebx
c00248d2:	75 48                	jne    c002491c <__divdi3+0x94>
c00248d4:	39 ef                	cmp    edi,ebp
c00248d6:	76 24                	jbe    c00248fc <__divdi3+0x74>
c00248d8:	89 ea                	mov    edx,ebp
c00248da:	f7 f7                	div    edi
c00248dc:	89 c1                	mov    ecx,eax
c00248de:	31 f6                	xor    esi,esi
c00248e0:	89 c8                	mov    eax,ecx
c00248e2:	89 f2                	mov    edx,esi
c00248e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00248e8:	85 c9                	test   ecx,ecx
c00248ea:	74 07                	je     c00248f3 <__divdi3+0x6b>
c00248ec:	f7 d8                	neg    eax
c00248ee:	83 d2 00             	adc    edx,0x0
c00248f1:	f7 da                	neg    edx
c00248f3:	83 c4 1c             	add    esp,0x1c
c00248f6:	5b                   	pop    ebx
c00248f7:	5e                   	pop    esi
c00248f8:	5f                   	pop    edi
c00248f9:	5d                   	pop    ebp
c00248fa:	c3                   	ret    
c00248fb:	90                   	nop
c00248fc:	85 ff                	test   edi,edi
c00248fe:	75 0b                	jne    c002490b <__divdi3+0x83>
c0024900:	b8 01 00 00 00       	mov    eax,0x1
c0024905:	31 d2                	xor    edx,edx
c0024907:	f7 f3                	div    ebx
c0024909:	89 c7                	mov    edi,eax
c002490b:	31 d2                	xor    edx,edx
c002490d:	89 e8                	mov    eax,ebp
c002490f:	f7 f7                	div    edi
c0024911:	89 c6                	mov    esi,eax
c0024913:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024916:	f7 f7                	div    edi
c0024918:	89 c1                	mov    ecx,eax
c002491a:	eb c4                	jmp    c00248e0 <__divdi3+0x58>
c002491c:	39 eb                	cmp    ebx,ebp
c002491e:	77 3c                	ja     c002495c <__divdi3+0xd4>
c0024920:	0f bd f3             	bsr    esi,ebx
c0024923:	83 f6 1f             	xor    esi,0x1f
c0024926:	75 40                	jne    c0024968 <__divdi3+0xe0>
c0024928:	39 eb                	cmp    ebx,ebp
c002492a:	72 09                	jb     c0024935 <__divdi3+0xad>
c002492c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002492f:	0f 87 97 00 00 00    	ja     c00249cc <__divdi3+0x144>
c0024935:	b9 01 00 00 00       	mov    ecx,0x1
c002493a:	eb a4                	jmp    c00248e0 <__divdi3+0x58>
c002493c:	f7 d9                	neg    ecx
c002493e:	83 d3 00             	adc    ebx,0x0
c0024941:	f7 db                	neg    ebx
c0024943:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0024946:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002494a:	89 dd                	mov    ebp,ebx
c002494c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0024954:	e9 5f ff ff ff       	jmp    c00248b8 <__divdi3+0x30>
c0024959:	8d 76 00             	lea    esi,[esi+0x0]
c002495c:	31 f6                	xor    esi,esi
c002495e:	31 c9                	xor    ecx,ecx
c0024960:	e9 7b ff ff ff       	jmp    c00248e0 <__divdi3+0x58>
c0024965:	8d 76 00             	lea    esi,[esi+0x0]
c0024968:	b8 20 00 00 00       	mov    eax,0x20
c002496d:	29 f0                	sub    eax,esi
c002496f:	89 f1                	mov    ecx,esi
c0024971:	d3 e3                	shl    ebx,cl
c0024973:	89 fa                	mov    edx,edi
c0024975:	88 c1                	mov    cl,al
c0024977:	d3 ea                	shr    edx,cl
c0024979:	09 da                	or     edx,ebx
c002497b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002497f:	89 f1                	mov    ecx,esi
c0024981:	d3 e7                	shl    edi,cl
c0024983:	89 eb                	mov    ebx,ebp
c0024985:	88 c1                	mov    cl,al
c0024987:	d3 eb                	shr    ebx,cl
c0024989:	89 f1                	mov    ecx,esi
c002498b:	d3 e5                	shl    ebp,cl
c002498d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0024990:	88 c1                	mov    cl,al
c0024992:	d3 ea                	shr    edx,cl
c0024994:	09 d5                	or     ebp,edx
c0024996:	89 e8                	mov    eax,ebp
c0024998:	89 da                	mov    edx,ebx
c002499a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002499e:	89 d3                	mov    ebx,edx
c00249a0:	89 c5                	mov    ebp,eax
c00249a2:	f7 e7                	mul    edi
c00249a4:	39 d3                	cmp    ebx,edx
c00249a6:	72 18                	jb     c00249c0 <__divdi3+0x138>
c00249a8:	74 0a                	je     c00249b4 <__divdi3+0x12c>
c00249aa:	89 e9                	mov    ecx,ebp
c00249ac:	31 f6                	xor    esi,esi
c00249ae:	e9 2d ff ff ff       	jmp    c00248e0 <__divdi3+0x58>
c00249b3:	90                   	nop
c00249b4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00249b7:	89 f1                	mov    ecx,esi
c00249b9:	d3 e7                	shl    edi,cl
c00249bb:	39 c7                	cmp    edi,eax
c00249bd:	73 eb                	jae    c00249aa <__divdi3+0x122>
c00249bf:	90                   	nop
c00249c0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00249c3:	31 f6                	xor    esi,esi
c00249c5:	e9 16 ff ff ff       	jmp    c00248e0 <__divdi3+0x58>
c00249ca:	66 90                	xchg   ax,ax
c00249cc:	31 c9                	xor    ecx,ecx
c00249ce:	e9 0d ff ff ff       	jmp    c00248e0 <__divdi3+0x58>
c00249d3:	90                   	nop

c00249d4 <__moddi3>:
c00249d4:	55                   	push   ebp
c00249d5:	57                   	push   edi
c00249d6:	56                   	push   esi
c00249d7:	53                   	push   ebx
c00249d8:	83 ec 2c             	sub    esp,0x2c
c00249db:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00249df:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00249e3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00249e7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00249eb:	85 db                	test   ebx,ebx
c00249ed:	0f 88 85 00 00 00    	js     c0024a78 <__moddi3+0xa4>
c00249f3:	89 de                	mov    esi,ebx
c00249f5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00249fd:	89 d7                	mov    edi,edx
c00249ff:	85 d2                	test   edx,edx
c0024a01:	79 09                	jns    c0024a0c <__moddi3+0x38>
c0024a03:	f7 d8                	neg    eax
c0024a05:	83 d2 00             	adc    edx,0x0
c0024a08:	f7 da                	neg    edx
c0024a0a:	89 d7                	mov    edi,edx
c0024a0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a10:	89 cd                	mov    ebp,ecx
c0024a12:	85 ff                	test   edi,edi
c0024a14:	75 52                	jne    c0024a68 <__moddi3+0x94>
c0024a16:	89 c3                	mov    ebx,eax
c0024a18:	39 f0                	cmp    eax,esi
c0024a1a:	76 24                	jbe    c0024a40 <__moddi3+0x6c>
c0024a1c:	89 c8                	mov    eax,ecx
c0024a1e:	89 f2                	mov    edx,esi
c0024a20:	f7 f3                	div    ebx
c0024a22:	89 d6                	mov    esi,edx
c0024a24:	89 f0                	mov    eax,esi
c0024a26:	31 d2                	xor    edx,edx
c0024a28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024a2c:	85 c9                	test   ecx,ecx
c0024a2e:	74 07                	je     c0024a37 <__moddi3+0x63>
c0024a30:	f7 d8                	neg    eax
c0024a32:	83 d2 00             	adc    edx,0x0
c0024a35:	f7 da                	neg    edx
c0024a37:	83 c4 2c             	add    esp,0x2c
c0024a3a:	5b                   	pop    ebx
c0024a3b:	5e                   	pop    esi
c0024a3c:	5f                   	pop    edi
c0024a3d:	5d                   	pop    ebp
c0024a3e:	c3                   	ret    
c0024a3f:	90                   	nop
c0024a40:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0024a44:	85 db                	test   ebx,ebx
c0024a46:	75 0d                	jne    c0024a55 <__moddi3+0x81>
c0024a48:	b8 01 00 00 00       	mov    eax,0x1
c0024a4d:	31 d2                	xor    edx,edx
c0024a4f:	f7 f7                	div    edi
c0024a51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a55:	89 f0                	mov    eax,esi
c0024a57:	31 d2                	xor    edx,edx
c0024a59:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024a5d:	f7 f7                	div    edi
c0024a5f:	89 e8                	mov    eax,ebp
c0024a61:	f7 f7                	div    edi
c0024a63:	89 d6                	mov    esi,edx
c0024a65:	eb bd                	jmp    c0024a24 <__moddi3+0x50>
c0024a67:	90                   	nop
c0024a68:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0024a6c:	39 f7                	cmp    edi,esi
c0024a6e:	76 20                	jbe    c0024a90 <__moddi3+0xbc>
c0024a70:	89 c8                	mov    eax,ecx
c0024a72:	89 f2                	mov    edx,esi
c0024a74:	eb b2                	jmp    c0024a28 <__moddi3+0x54>
c0024a76:	66 90                	xchg   ax,ax
c0024a78:	f7 d9                	neg    ecx
c0024a7a:	83 d3 00             	adc    ebx,0x0
c0024a7d:	f7 db                	neg    ebx
c0024a7f:	89 de                	mov    esi,ebx
c0024a81:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0024a89:	e9 6f ff ff ff       	jmp    c00249fd <__moddi3+0x29>
c0024a8e:	66 90                	xchg   ax,ax
c0024a90:	0f bd c7             	bsr    eax,edi
c0024a93:	83 f0 1f             	xor    eax,0x1f
c0024a96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024a9a:	75 24                	jne    c0024ac0 <__moddi3+0xec>
c0024a9c:	39 f7                	cmp    edi,esi
c0024a9e:	72 06                	jb     c0024aa6 <__moddi3+0xd2>
c0024aa0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0024aa4:	77 0c                	ja     c0024ab2 <__moddi3+0xde>
c0024aa6:	89 e9                	mov    ecx,ebp
c0024aa8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0024aac:	19 fe                	sbb    esi,edi
c0024aae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0024ab2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ab6:	89 f2                	mov    edx,esi
c0024ab8:	e9 6b ff ff ff       	jmp    c0024a28 <__moddi3+0x54>
c0024abd:	8d 76 00             	lea    esi,[esi+0x0]
c0024ac0:	b8 20 00 00 00       	mov    eax,0x20
c0024ac5:	89 c2                	mov    edx,eax
c0024ac7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024acb:	29 da                	sub    edx,ebx
c0024acd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024ad1:	88 d9                	mov    cl,bl
c0024ad3:	d3 e7                	shl    edi,cl
c0024ad5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ad9:	88 d1                	mov    cl,dl
c0024adb:	d3 e8                	shr    eax,cl
c0024add:	09 c7                	or     edi,eax
c0024adf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0024ae3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024ae7:	89 d8                	mov    eax,ebx
c0024ae9:	88 d9                	mov    cl,bl
c0024aeb:	d3 e7                	shl    edi,cl
c0024aed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024af1:	89 f3                	mov    ebx,esi
c0024af3:	88 d1                	mov    cl,dl
c0024af5:	d3 eb                	shr    ebx,cl
c0024af7:	89 c7                	mov    edi,eax
c0024af9:	88 c1                	mov    cl,al
c0024afb:	d3 e6                	shl    esi,cl
c0024afd:	89 e8                	mov    eax,ebp
c0024aff:	88 d1                	mov    cl,dl
c0024b01:	d3 e8                	shr    eax,cl
c0024b03:	09 f0                	or     eax,esi
c0024b05:	89 f9                	mov    ecx,edi
c0024b07:	d3 e5                	shl    ebp,cl
c0024b09:	89 da                	mov    edx,ebx
c0024b0b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0024b0f:	89 d3                	mov    ebx,edx
c0024b11:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024b15:	89 c6                	mov    esi,eax
c0024b17:	89 d1                	mov    ecx,edx
c0024b19:	39 d3                	cmp    ebx,edx
c0024b1b:	72 27                	jb     c0024b44 <__moddi3+0x170>
c0024b1d:	74 21                	je     c0024b40 <__moddi3+0x16c>
c0024b1f:	29 f5                	sub    ebp,esi
c0024b21:	19 cb                	sbb    ebx,ecx
c0024b23:	89 de                	mov    esi,ebx
c0024b25:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0024b29:	d3 e6                	shl    esi,cl
c0024b2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0024b2f:	89 f9                	mov    ecx,edi
c0024b31:	d3 ed                	shr    ebp,cl
c0024b33:	09 ee                	or     esi,ebp
c0024b35:	89 f0                	mov    eax,esi
c0024b37:	d3 eb                	shr    ebx,cl
c0024b39:	89 da                	mov    edx,ebx
c0024b3b:	e9 e8 fe ff ff       	jmp    c0024a28 <__moddi3+0x54>
c0024b40:	39 c5                	cmp    ebp,eax
c0024b42:	73 db                	jae    c0024b1f <__moddi3+0x14b>
c0024b44:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0024b48:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0024b4c:	89 d1                	mov    ecx,edx
c0024b4e:	89 c6                	mov    esi,eax
c0024b50:	eb cd                	jmp    c0024b1f <__moddi3+0x14b>
c0024b52:	66 90                	xchg   ax,ax

c0024b54 <__udivdi3>:
c0024b54:	55                   	push   ebp
c0024b55:	57                   	push   edi
c0024b56:	56                   	push   esi
c0024b57:	53                   	push   ebx
c0024b58:	83 ec 1c             	sub    esp,0x1c
c0024b5b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024b5f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024b63:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024b67:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024b6b:	85 d2                	test   edx,edx
c0024b6d:	75 41                	jne    c0024bb0 <__udivdi3+0x5c>
c0024b6f:	39 f7                	cmp    edi,esi
c0024b71:	76 15                	jbe    c0024b88 <__udivdi3+0x34>
c0024b73:	89 e8                	mov    eax,ebp
c0024b75:	89 f2                	mov    edx,esi
c0024b77:	f7 f7                	div    edi
c0024b79:	31 db                	xor    ebx,ebx
c0024b7b:	89 da                	mov    edx,ebx
c0024b7d:	83 c4 1c             	add    esp,0x1c
c0024b80:	5b                   	pop    ebx
c0024b81:	5e                   	pop    esi
c0024b82:	5f                   	pop    edi
c0024b83:	5d                   	pop    ebp
c0024b84:	c3                   	ret    
c0024b85:	8d 76 00             	lea    esi,[esi+0x0]
c0024b88:	89 f9                	mov    ecx,edi
c0024b8a:	85 ff                	test   edi,edi
c0024b8c:	75 0b                	jne    c0024b99 <__udivdi3+0x45>
c0024b8e:	b8 01 00 00 00       	mov    eax,0x1
c0024b93:	31 d2                	xor    edx,edx
c0024b95:	f7 f7                	div    edi
c0024b97:	89 c1                	mov    ecx,eax
c0024b99:	31 d2                	xor    edx,edx
c0024b9b:	89 f0                	mov    eax,esi
c0024b9d:	f7 f1                	div    ecx
c0024b9f:	89 c3                	mov    ebx,eax
c0024ba1:	89 e8                	mov    eax,ebp
c0024ba3:	f7 f1                	div    ecx
c0024ba5:	89 da                	mov    edx,ebx
c0024ba7:	83 c4 1c             	add    esp,0x1c
c0024baa:	5b                   	pop    ebx
c0024bab:	5e                   	pop    esi
c0024bac:	5f                   	pop    edi
c0024bad:	5d                   	pop    ebp
c0024bae:	c3                   	ret    
c0024baf:	90                   	nop
c0024bb0:	39 f2                	cmp    edx,esi
c0024bb2:	77 1c                	ja     c0024bd0 <__udivdi3+0x7c>
c0024bb4:	0f bd da             	bsr    ebx,edx
c0024bb7:	83 f3 1f             	xor    ebx,0x1f
c0024bba:	75 24                	jne    c0024be0 <__udivdi3+0x8c>
c0024bbc:	39 f2                	cmp    edx,esi
c0024bbe:	72 08                	jb     c0024bc8 <__udivdi3+0x74>
c0024bc0:	39 ef                	cmp    edi,ebp
c0024bc2:	0f 87 84 00 00 00    	ja     c0024c4c <__udivdi3+0xf8>
c0024bc8:	b8 01 00 00 00       	mov    eax,0x1
c0024bcd:	eb ac                	jmp    c0024b7b <__udivdi3+0x27>
c0024bcf:	90                   	nop
c0024bd0:	31 db                	xor    ebx,ebx
c0024bd2:	31 c0                	xor    eax,eax
c0024bd4:	89 da                	mov    edx,ebx
c0024bd6:	83 c4 1c             	add    esp,0x1c
c0024bd9:	5b                   	pop    ebx
c0024bda:	5e                   	pop    esi
c0024bdb:	5f                   	pop    edi
c0024bdc:	5d                   	pop    ebp
c0024bdd:	c3                   	ret    
c0024bde:	66 90                	xchg   ax,ax
c0024be0:	b8 20 00 00 00       	mov    eax,0x20
c0024be5:	29 d8                	sub    eax,ebx
c0024be7:	88 d9                	mov    cl,bl
c0024be9:	d3 e2                	shl    edx,cl
c0024beb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0024bef:	89 fa                	mov    edx,edi
c0024bf1:	88 c1                	mov    cl,al
c0024bf3:	d3 ea                	shr    edx,cl
c0024bf5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024bf9:	09 d1                	or     ecx,edx
c0024bfb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0024bff:	88 d9                	mov    cl,bl
c0024c01:	d3 e7                	shl    edi,cl
c0024c03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024c07:	89 f7                	mov    edi,esi
c0024c09:	88 c1                	mov    cl,al
c0024c0b:	d3 ef                	shr    edi,cl
c0024c0d:	88 d9                	mov    cl,bl
c0024c0f:	d3 e6                	shl    esi,cl
c0024c11:	89 ea                	mov    edx,ebp
c0024c13:	88 c1                	mov    cl,al
c0024c15:	d3 ea                	shr    edx,cl
c0024c17:	09 d6                	or     esi,edx
c0024c19:	89 f0                	mov    eax,esi
c0024c1b:	89 fa                	mov    edx,edi
c0024c1d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0024c21:	89 d7                	mov    edi,edx
c0024c23:	89 c6                	mov    esi,eax
c0024c25:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024c29:	39 d7                	cmp    edi,edx
c0024c2b:	72 13                	jb     c0024c40 <__udivdi3+0xec>
c0024c2d:	74 09                	je     c0024c38 <__udivdi3+0xe4>
c0024c2f:	89 f0                	mov    eax,esi
c0024c31:	31 db                	xor    ebx,ebx
c0024c33:	e9 43 ff ff ff       	jmp    c0024b7b <__udivdi3+0x27>
c0024c38:	88 d9                	mov    cl,bl
c0024c3a:	d3 e5                	shl    ebp,cl
c0024c3c:	39 c5                	cmp    ebp,eax
c0024c3e:	73 ef                	jae    c0024c2f <__udivdi3+0xdb>
c0024c40:	8d 46 ff             	lea    eax,[esi-0x1]
c0024c43:	31 db                	xor    ebx,ebx
c0024c45:	e9 31 ff ff ff       	jmp    c0024b7b <__udivdi3+0x27>
c0024c4a:	66 90                	xchg   ax,ax
c0024c4c:	31 c0                	xor    eax,eax
c0024c4e:	e9 28 ff ff ff       	jmp    c0024b7b <__udivdi3+0x27>
c0024c53:	90                   	nop

c0024c54 <__umoddi3>:
c0024c54:	55                   	push   ebp
c0024c55:	57                   	push   edi
c0024c56:	56                   	push   esi
c0024c57:	53                   	push   ebx
c0024c58:	83 ec 1c             	sub    esp,0x1c
c0024c5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024c5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024c63:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024c67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024c6b:	89 da                	mov    edx,ebx
c0024c6d:	85 c0                	test   eax,eax
c0024c6f:	75 37                	jne    c0024ca8 <__umoddi3+0x54>
c0024c71:	39 df                	cmp    edi,ebx
c0024c73:	76 13                	jbe    c0024c88 <__umoddi3+0x34>
c0024c75:	89 f0                	mov    eax,esi
c0024c77:	f7 f7                	div    edi
c0024c79:	89 d0                	mov    eax,edx
c0024c7b:	31 d2                	xor    edx,edx
c0024c7d:	83 c4 1c             	add    esp,0x1c
c0024c80:	5b                   	pop    ebx
c0024c81:	5e                   	pop    esi
c0024c82:	5f                   	pop    edi
c0024c83:	5d                   	pop    ebp
c0024c84:	c3                   	ret    
c0024c85:	8d 76 00             	lea    esi,[esi+0x0]
c0024c88:	89 fd                	mov    ebp,edi
c0024c8a:	85 ff                	test   edi,edi
c0024c8c:	75 0b                	jne    c0024c99 <__umoddi3+0x45>
c0024c8e:	b8 01 00 00 00       	mov    eax,0x1
c0024c93:	31 d2                	xor    edx,edx
c0024c95:	f7 f7                	div    edi
c0024c97:	89 c5                	mov    ebp,eax
c0024c99:	89 d8                	mov    eax,ebx
c0024c9b:	31 d2                	xor    edx,edx
c0024c9d:	f7 f5                	div    ebp
c0024c9f:	89 f0                	mov    eax,esi
c0024ca1:	f7 f5                	div    ebp
c0024ca3:	89 d0                	mov    eax,edx
c0024ca5:	eb d4                	jmp    c0024c7b <__umoddi3+0x27>
c0024ca7:	90                   	nop
c0024ca8:	89 f1                	mov    ecx,esi
c0024caa:	39 d8                	cmp    eax,ebx
c0024cac:	76 0a                	jbe    c0024cb8 <__umoddi3+0x64>
c0024cae:	89 f0                	mov    eax,esi
c0024cb0:	83 c4 1c             	add    esp,0x1c
c0024cb3:	5b                   	pop    ebx
c0024cb4:	5e                   	pop    esi
c0024cb5:	5f                   	pop    edi
c0024cb6:	5d                   	pop    ebp
c0024cb7:	c3                   	ret    
c0024cb8:	0f bd e8             	bsr    ebp,eax
c0024cbb:	83 f5 1f             	xor    ebp,0x1f
c0024cbe:	75 1c                	jne    c0024cdc <__umoddi3+0x88>
c0024cc0:	39 d8                	cmp    eax,ebx
c0024cc2:	72 04                	jb     c0024cc8 <__umoddi3+0x74>
c0024cc4:	39 f7                	cmp    edi,esi
c0024cc6:	77 08                	ja     c0024cd0 <__umoddi3+0x7c>
c0024cc8:	89 da                	mov    edx,ebx
c0024cca:	29 fe                	sub    esi,edi
c0024ccc:	19 c2                	sbb    edx,eax
c0024cce:	89 f1                	mov    ecx,esi
c0024cd0:	89 c8                	mov    eax,ecx
c0024cd2:	83 c4 1c             	add    esp,0x1c
c0024cd5:	5b                   	pop    ebx
c0024cd6:	5e                   	pop    esi
c0024cd7:	5f                   	pop    edi
c0024cd8:	5d                   	pop    ebp
c0024cd9:	c3                   	ret    
c0024cda:	66 90                	xchg   ax,ax
c0024cdc:	ba 20 00 00 00       	mov    edx,0x20
c0024ce1:	29 ea                	sub    edx,ebp
c0024ce3:	89 e9                	mov    ecx,ebp
c0024ce5:	d3 e0                	shl    eax,cl
c0024ce7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024ceb:	89 f8                	mov    eax,edi
c0024ced:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024cf1:	88 d1                	mov    cl,dl
c0024cf3:	d3 e8                	shr    eax,cl
c0024cf5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024cf9:	09 c1                	or     ecx,eax
c0024cfb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0024cff:	89 e9                	mov    ecx,ebp
c0024d01:	d3 e7                	shl    edi,cl
c0024d03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024d07:	89 d8                	mov    eax,ebx
c0024d09:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024d0d:	88 d1                	mov    cl,dl
c0024d0f:	d3 e8                	shr    eax,cl
c0024d11:	89 c7                	mov    edi,eax
c0024d13:	89 e9                	mov    ecx,ebp
c0024d15:	d3 e3                	shl    ebx,cl
c0024d17:	89 f0                	mov    eax,esi
c0024d19:	88 d1                	mov    cl,dl
c0024d1b:	d3 e8                	shr    eax,cl
c0024d1d:	09 d8                	or     eax,ebx
c0024d1f:	89 e9                	mov    ecx,ebp
c0024d21:	d3 e6                	shl    esi,cl
c0024d23:	89 f3                	mov    ebx,esi
c0024d25:	89 fa                	mov    edx,edi
c0024d27:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0024d2b:	89 d1                	mov    ecx,edx
c0024d2d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024d31:	89 c6                	mov    esi,eax
c0024d33:	89 d7                	mov    edi,edx
c0024d35:	39 d1                	cmp    ecx,edx
c0024d37:	72 27                	jb     c0024d60 <__umoddi3+0x10c>
c0024d39:	74 21                	je     c0024d5c <__umoddi3+0x108>
c0024d3b:	89 ca                	mov    edx,ecx
c0024d3d:	29 f3                	sub    ebx,esi
c0024d3f:	19 fa                	sbb    edx,edi
c0024d41:	89 d0                	mov    eax,edx
c0024d43:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024d47:	d3 e0                	shl    eax,cl
c0024d49:	89 e9                	mov    ecx,ebp
c0024d4b:	d3 eb                	shr    ebx,cl
c0024d4d:	09 d8                	or     eax,ebx
c0024d4f:	d3 ea                	shr    edx,cl
c0024d51:	83 c4 1c             	add    esp,0x1c
c0024d54:	5b                   	pop    ebx
c0024d55:	5e                   	pop    esi
c0024d56:	5f                   	pop    edi
c0024d57:	5d                   	pop    ebp
c0024d58:	c3                   	ret    
c0024d59:	8d 76 00             	lea    esi,[esi+0x0]
c0024d5c:	39 c3                	cmp    ebx,eax
c0024d5e:	73 db                	jae    c0024d3b <__umoddi3+0xe7>
c0024d60:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0024d64:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0024d68:	89 d7                	mov    edi,edx
c0024d6a:	89 c6                	mov    esi,eax
c0024d6c:	eb cd                	jmp    c0024d3b <__umoddi3+0xe7>
c0024d6e:	66 90                	xchg   ax,ax

c0024d70 <acos>:
c0024d70:	83 ec 4c             	sub    esp,0x4c
c0024d73:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0024d77:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024d7b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d7f:	89 d0                	mov    eax,edx
c0024d81:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024d86:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c0024d8b:	7e 23                	jle    c0024db0 <acos+0x40>
c0024d8d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0024d91:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0024d96:	09 c8                	or     eax,ecx
c0024d98:	0f 85 32 01 00 00    	jne    c0024ed0 <acos+0x160>
c0024d9e:	85 d2                	test   edx,edx
c0024da0:	0f 8e 4a 01 00 00    	jle    c0024ef0 <acos+0x180>
c0024da6:	d9 ee                	fldz   
c0024da8:	83 c4 4c             	add    esp,0x4c
c0024dab:	c3                   	ret    
c0024dac:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024db0:	3d ff ff df 3f       	cmp    eax,0x3fdfffff
c0024db5:	7f 29                	jg     c0024de0 <acos+0x70>
c0024db7:	3d 00 00 60 3c       	cmp    eax,0x3c600000
c0024dbc:	0f 8f 4e 01 00 00    	jg     c0024f10 <acos+0x1a0>
c0024dc2:	dd 05 f0 0e 03 c0    	fld    QWORD PTR ds:0xc0030ef0
c0024dc8:	dc 05 00 f5 02 c0    	fadd   QWORD PTR ds:0xc002f500
c0024dce:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024dd2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024dd6:	83 c4 4c             	add    esp,0x4c
c0024dd9:	c3                   	ret    
c0024dda:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024de0:	85 d2                	test   edx,edx
c0024de2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024de6:	0f 88 d4 01 00 00    	js     c0024fc0 <acos+0x250>
c0024dec:	d9 e8                	fld1   
c0024dee:	de e1                	fsubrp st(1),st
c0024df0:	d8 0d 5c f5 02 c0    	fmul   DWORD PTR ds:0xc002f55c
c0024df6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024dfa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024dfe:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0024e02:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024e05:	e8 36 27 00 00       	call   c0027540 <sqrt>
c0024e0a:	31 c0                	xor    eax,eax
c0024e0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0024e10:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024e14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024e1c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024e20:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0024e24:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e28:	d9 c1                	fld    st(1)
c0024e2a:	dc 0d 08 f5 02 c0    	fmul   QWORD PTR ds:0xc002f508
c0024e30:	dc 05 10 f5 02 c0    	fadd   QWORD PTR ds:0xc002f510
c0024e36:	d8 ca                	fmul   st,st(2)
c0024e38:	dc 25 18 f5 02 c0    	fsub   QWORD PTR ds:0xc002f518
c0024e3e:	d8 ca                	fmul   st,st(2)
c0024e40:	dc 05 20 f5 02 c0    	fadd   QWORD PTR ds:0xc002f520
c0024e46:	d8 ca                	fmul   st,st(2)
c0024e48:	dc 25 28 f5 02 c0    	fsub   QWORD PTR ds:0xc002f528
c0024e4e:	d8 ca                	fmul   st,st(2)
c0024e50:	dc 05 30 f5 02 c0    	fadd   QWORD PTR ds:0xc002f530
c0024e56:	d8 ca                	fmul   st,st(2)
c0024e58:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024e5c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024e60:	d9 c2                	fld    st(2)
c0024e62:	dc 0d 38 f5 02 c0    	fmul   QWORD PTR ds:0xc002f538
c0024e68:	dc 25 40 f5 02 c0    	fsub   QWORD PTR ds:0xc002f540
c0024e6e:	d8 cb                	fmul   st,st(3)
c0024e70:	dc 05 48 f5 02 c0    	fadd   QWORD PTR ds:0xc002f548
c0024e76:	d8 cb                	fmul   st,st(3)
c0024e78:	dc 25 50 f5 02 c0    	fsub   QWORD PTR ds:0xc002f550
c0024e7e:	d8 cb                	fmul   st,st(3)
c0024e80:	d9 e8                	fld1   
c0024e82:	de c1                	faddp  st(1),st
c0024e84:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024e88:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024e8c:	de f9                	fdivp  st(1),st
c0024e8e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024e92:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024e96:	d8 c9                	fmul   st,st(1)
c0024e98:	d9 c3                	fld    st(3)
c0024e9a:	d8 cc                	fmul   st,st(4)
c0024e9c:	de eb                	fsubp  st(3),st
c0024e9e:	d9 c9                	fxch   st(1)
c0024ea0:	d8 c3                	fadd   st,st(3)
c0024ea2:	de fa                	fdivp  st(2),st
c0024ea4:	d9 c9                	fxch   st(1)
c0024ea6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024eaa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024eae:	de c1                	faddp  st(1),st
c0024eb0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024eb4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024eb8:	de c1                	faddp  st(1),st
c0024eba:	d8 c0                	fadd   st,st(0)
c0024ebc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024ec0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024ec4:	83 c4 4c             	add    esp,0x4c
c0024ec7:	c3                   	ret    
c0024ec8:	90                   	nop
c0024ec9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024ed0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024ed4:	d8 e0                	fsub   st,st(0)
c0024ed6:	d8 f0                	fdiv   st,st(0)
c0024ed8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024edc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024ee0:	83 c4 4c             	add    esp,0x4c
c0024ee3:	c3                   	ret    
c0024ee4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024eea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024ef0:	dd 05 f0 0e 03 c0    	fld    QWORD PTR ds:0xc0030ef0
c0024ef6:	d8 c0                	fadd   st,st(0)
c0024ef8:	dc 05 f8 f4 02 c0    	fadd   QWORD PTR ds:0xc002f4f8
c0024efe:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f02:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f06:	83 c4 4c             	add    esp,0x4c
c0024f09:	c3                   	ret    
c0024f0a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024f10:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024f14:	d9 c0                	fld    st(0)
c0024f16:	d8 c9                	fmul   st,st(1)
c0024f18:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f1c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f20:	dd 05 f0 0e 03 c0    	fld    QWORD PTR ds:0xc0030ef0
c0024f26:	d9 c1                	fld    st(1)
c0024f28:	dc 0d 08 f5 02 c0    	fmul   QWORD PTR ds:0xc002f508
c0024f2e:	dc 05 10 f5 02 c0    	fadd   QWORD PTR ds:0xc002f510
c0024f34:	d8 ca                	fmul   st,st(2)
c0024f36:	dc 25 18 f5 02 c0    	fsub   QWORD PTR ds:0xc002f518
c0024f3c:	d8 ca                	fmul   st,st(2)
c0024f3e:	dc 05 20 f5 02 c0    	fadd   QWORD PTR ds:0xc002f520
c0024f44:	d8 ca                	fmul   st,st(2)
c0024f46:	dc 25 28 f5 02 c0    	fsub   QWORD PTR ds:0xc002f528
c0024f4c:	d8 ca                	fmul   st,st(2)
c0024f4e:	dc 05 30 f5 02 c0    	fadd   QWORD PTR ds:0xc002f530
c0024f54:	d8 ca                	fmul   st,st(2)
c0024f56:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f5a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f5e:	d9 c2                	fld    st(2)
c0024f60:	dc 0d 38 f5 02 c0    	fmul   QWORD PTR ds:0xc002f538
c0024f66:	dc 25 40 f5 02 c0    	fsub   QWORD PTR ds:0xc002f540
c0024f6c:	d8 cb                	fmul   st,st(3)
c0024f6e:	dc 05 48 f5 02 c0    	fadd   QWORD PTR ds:0xc002f548
c0024f74:	d8 cb                	fmul   st,st(3)
c0024f76:	dc 25 50 f5 02 c0    	fsub   QWORD PTR ds:0xc002f550
c0024f7c:	de cb                	fmulp  st(3),st
c0024f7e:	d9 ca                	fxch   st(2)
c0024f80:	d8 05 58 f5 02 c0    	fadd   DWORD PTR ds:0xc002f558
c0024f86:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f8a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f8e:	de fa                	fdivp  st(2),st
c0024f90:	d9 c9                	fxch   st(1)
c0024f92:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f96:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f9a:	d8 ca                	fmul   st,st(2)
c0024f9c:	de e9                	fsubp  st(1),st
c0024f9e:	de e9                	fsubp  st(1),st
c0024fa0:	dc 2d 00 f5 02 c0    	fsubr  QWORD PTR ds:0xc002f500
c0024fa6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024faa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024fae:	83 c4 4c             	add    esp,0x4c
c0024fb1:	c3                   	ret    
c0024fb2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024fb9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024fc0:	d9 e8                	fld1   
c0024fc2:	de c1                	faddp  st(1),st
c0024fc4:	d8 0d 5c f5 02 c0    	fmul   DWORD PTR ds:0xc002f55c
c0024fca:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024fce:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024fd2:	d9 c0                	fld    st(0)
c0024fd4:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0024fd8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024fdb:	e8 60 25 00 00       	call   c0027540 <sqrt>
c0024fe0:	dd 05 f0 0e 03 c0    	fld    QWORD PTR ds:0xc0030ef0
c0024fe6:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0024fea:	d9 c0                	fld    st(0)
c0024fec:	dc 0d 08 f5 02 c0    	fmul   QWORD PTR ds:0xc002f508
c0024ff2:	dc 05 10 f5 02 c0    	fadd   QWORD PTR ds:0xc002f510
c0024ff8:	d8 c9                	fmul   st,st(1)
c0024ffa:	dc 25 18 f5 02 c0    	fsub   QWORD PTR ds:0xc002f518
c0025000:	d8 c9                	fmul   st,st(1)
c0025002:	dc 05 20 f5 02 c0    	fadd   QWORD PTR ds:0xc002f520
c0025008:	d8 c9                	fmul   st,st(1)
c002500a:	dc 25 28 f5 02 c0    	fsub   QWORD PTR ds:0xc002f528
c0025010:	d8 c9                	fmul   st,st(1)
c0025012:	dc 05 30 f5 02 c0    	fadd   QWORD PTR ds:0xc002f530
c0025018:	d8 c9                	fmul   st,st(1)
c002501a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002501e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025022:	d9 c1                	fld    st(1)
c0025024:	dc 0d 38 f5 02 c0    	fmul   QWORD PTR ds:0xc002f538
c002502a:	dc 25 40 f5 02 c0    	fsub   QWORD PTR ds:0xc002f540
c0025030:	d8 ca                	fmul   st,st(2)
c0025032:	dc 05 48 f5 02 c0    	fadd   QWORD PTR ds:0xc002f548
c0025038:	d8 ca                	fmul   st,st(2)
c002503a:	dc 25 50 f5 02 c0    	fsub   QWORD PTR ds:0xc002f550
c0025040:	de ca                	fmulp  st(2),st
c0025042:	d9 e8                	fld1   
c0025044:	de c2                	faddp  st(2),st
c0025046:	d9 c9                	fxch   st(1)
c0025048:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002504c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025050:	de f9                	fdivp  st(1),st
c0025052:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025056:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002505a:	d8 ca                	fmul   st,st(2)
c002505c:	de e1                	fsubrp st(1),st
c002505e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025062:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025066:	de c1                	faddp  st(1),st
c0025068:	d8 c0                	fadd   st,st(0)
c002506a:	dc 2d f8 f4 02 c0    	fsubr  QWORD PTR ds:0xc002f4f8
c0025070:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025074:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025078:	83 c4 4c             	add    esp,0x4c
c002507b:	c3                   	ret    
c002507c:	66 90                	xchg   ax,ax
c002507e:	66 90                	xchg   ax,ax

c0025080 <asin>:
c0025080:	56                   	push   esi
c0025081:	53                   	push   ebx
c0025082:	83 ec 44             	sub    esp,0x44
c0025085:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0025089:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002508d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0025091:	89 f3                	mov    ebx,esi
c0025093:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025099:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c002509f:	7e 4f                	jle    c00250f0 <asin+0x70>
c00250a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a5:	81 eb 00 00 f0 3f    	sub    ebx,0x3ff00000
c00250ab:	09 c3                	or     ebx,eax
c00250ad:	74 21                	je     c00250d0 <asin+0x50>
c00250af:	d8 e0                	fsub   st,st(0)
c00250b1:	d8 f0                	fdiv   st,st(0)
c00250b3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00250b7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00250bb:	eb 05                	jmp    c00250c2 <asin+0x42>
c00250bd:	8d 76 00             	lea    esi,[esi+0x0]
c00250c0:	dd d9                	fstp   st(1)
c00250c2:	83 c4 44             	add    esp,0x44
c00250c5:	5b                   	pop    ebx
c00250c6:	5e                   	pop    esi
c00250c7:	c3                   	ret    
c00250c8:	90                   	nop
c00250c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00250d0:	d9 c0                	fld    st(0)
c00250d2:	dc 0d 00 f5 02 c0    	fmul   QWORD PTR ds:0xc002f500
c00250d8:	d9 c9                	fxch   st(1)
c00250da:	dc 0d 60 f5 02 c0    	fmul   QWORD PTR ds:0xc002f560
c00250e0:	de c1                	faddp  st(1),st
c00250e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00250e6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00250ea:	83 c4 44             	add    esp,0x44
c00250ed:	5b                   	pop    ebx
c00250ee:	5e                   	pop    esi
c00250ef:	c3                   	ret    
c00250f0:	dd d8                	fstp   st(0)
c00250f2:	81 fb ff ff df 3f    	cmp    ebx,0x3fdfffff
c00250f8:	0f 8f b2 00 00 00    	jg     c00251b0 <asin+0x130>
c00250fe:	81 fb ff ff 4f 3e    	cmp    ebx,0x3e4fffff
c0025104:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025108:	7f 16                	jg     c0025120 <asin+0xa0>
c002510a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002510e:	d9 e8                	fld1   
c0025110:	d9 c2                	fld    st(2)
c0025112:	dc 05 68 f5 02 c0    	fadd   QWORD PTR ds:0xc002f568
c0025118:	df f1                	fcomip st,st(1)
c002511a:	dd d8                	fstp   st(0)
c002511c:	77 a2                	ja     c00250c0 <asin+0x40>
c002511e:	dd d8                	fstp   st(0)
c0025120:	d9 c0                	fld    st(0)
c0025122:	d8 c9                	fmul   st,st(1)
c0025124:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025128:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002512c:	d9 c0                	fld    st(0)
c002512e:	dc 0d 08 f5 02 c0    	fmul   QWORD PTR ds:0xc002f508
c0025134:	dc 05 10 f5 02 c0    	fadd   QWORD PTR ds:0xc002f510
c002513a:	d8 c9                	fmul   st,st(1)
c002513c:	dc 25 18 f5 02 c0    	fsub   QWORD PTR ds:0xc002f518
c0025142:	d8 c9                	fmul   st,st(1)
c0025144:	dc 05 20 f5 02 c0    	fadd   QWORD PTR ds:0xc002f520
c002514a:	d8 c9                	fmul   st,st(1)
c002514c:	dc 25 28 f5 02 c0    	fsub   QWORD PTR ds:0xc002f528
c0025152:	d8 c9                	fmul   st,st(1)
c0025154:	dc 05 30 f5 02 c0    	fadd   QWORD PTR ds:0xc002f530
c002515a:	d8 c9                	fmul   st,st(1)
c002515c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025160:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025164:	d9 c1                	fld    st(1)
c0025166:	dc 0d 38 f5 02 c0    	fmul   QWORD PTR ds:0xc002f538
c002516c:	dc 25 40 f5 02 c0    	fsub   QWORD PTR ds:0xc002f540
c0025172:	d8 ca                	fmul   st,st(2)
c0025174:	dc 05 48 f5 02 c0    	fadd   QWORD PTR ds:0xc002f548
c002517a:	d8 ca                	fmul   st,st(2)
c002517c:	dc 25 50 f5 02 c0    	fsub   QWORD PTR ds:0xc002f550
c0025182:	de ca                	fmulp  st(2),st
c0025184:	d9 c9                	fxch   st(1)
c0025186:	d8 05 58 f5 02 c0    	fadd   DWORD PTR ds:0xc002f558
c002518c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025190:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025194:	de f9                	fdivp  st(1),st
c0025196:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002519a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002519e:	d8 c9                	fmul   st,st(1)
c00251a0:	de c1                	faddp  st(1),st
c00251a2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00251a6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00251aa:	83 c4 44             	add    esp,0x44
c00251ad:	5b                   	pop    ebx
c00251ae:	5e                   	pop    esi
c00251af:	c3                   	ret    
c00251b0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00251b4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00251b7:	e8 34 1d 00 00       	call   c0026ef0 <fabs>
c00251bc:	d9 e8                	fld1   
c00251be:	dc e1                	fsubr  st(1),st
c00251c0:	d9 c9                	fxch   st(1)
c00251c2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00251c6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00251ca:	d9 05 5c f5 02 c0    	fld    DWORD PTR ds:0xc002f55c
c00251d0:	de c9                	fmulp  st(1),st
c00251d2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00251d6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00251da:	d9 c0                	fld    st(0)
c00251dc:	d9 c0                	fld    st(0)
c00251de:	dc 0d 08 f5 02 c0    	fmul   QWORD PTR ds:0xc002f508
c00251e4:	dc 05 10 f5 02 c0    	fadd   QWORD PTR ds:0xc002f510
c00251ea:	d8 c9                	fmul   st,st(1)
c00251ec:	dc 25 18 f5 02 c0    	fsub   QWORD PTR ds:0xc002f518
c00251f2:	d8 c9                	fmul   st,st(1)
c00251f4:	dc 05 20 f5 02 c0    	fadd   QWORD PTR ds:0xc002f520
c00251fa:	d8 c9                	fmul   st,st(1)
c00251fc:	dc 25 28 f5 02 c0    	fsub   QWORD PTR ds:0xc002f528
c0025202:	d8 c9                	fmul   st,st(1)
c0025204:	dc 05 30 f5 02 c0    	fadd   QWORD PTR ds:0xc002f530
c002520a:	d8 c9                	fmul   st,st(1)
c002520c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025210:	d9 c0                	fld    st(0)
c0025212:	dc 0d 38 f5 02 c0    	fmul   QWORD PTR ds:0xc002f538
c0025218:	dc 25 40 f5 02 c0    	fsub   QWORD PTR ds:0xc002f540
c002521e:	d8 c9                	fmul   st,st(1)
c0025220:	dc 05 48 f5 02 c0    	fadd   QWORD PTR ds:0xc002f548
c0025226:	d8 c9                	fmul   st,st(1)
c0025228:	dc 25 50 f5 02 c0    	fsub   QWORD PTR ds:0xc002f550
c002522e:	d8 c9                	fmul   st,st(1)
c0025230:	d9 c9                	fxch   st(1)
c0025232:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0025236:	de c2                	faddp  st(2),st
c0025238:	d9 c9                	fxch   st(1)
c002523a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c002523e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025241:	e8 fa 22 00 00       	call   c0027540 <sqrt>
c0025246:	81 fb 32 33 ef 3f    	cmp    ebx,0x3fef3332
c002524c:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0025250:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025254:	7e 4a                	jle    c00252a0 <asin+0x220>
c0025256:	dd d8                	fstp   st(0)
c0025258:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002525c:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0025260:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025264:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025268:	d8 c9                	fmul   st,st(1)
c002526a:	de c1                	faddp  st(1),st
c002526c:	d8 c0                	fadd   st,st(0)
c002526e:	dc 25 60 f5 02 c0    	fsub   QWORD PTR ds:0xc002f560
c0025274:	dc 2d 00 f5 02 c0    	fsubr  QWORD PTR ds:0xc002f500
c002527a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002527e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025282:	85 f6                	test   esi,esi
c0025284:	0f 8f 38 fe ff ff    	jg     c00250c2 <asin+0x42>
c002528a:	d9 e0                	fchs   
c002528c:	e9 31 fe ff ff       	jmp    c00250c2 <asin+0x42>
c0025291:	eb 0d                	jmp    c00252a0 <asin+0x220>
c0025293:	90                   	nop
c0025294:	90                   	nop
c0025295:	90                   	nop
c0025296:	90                   	nop
c0025297:	90                   	nop
c0025298:	90                   	nop
c0025299:	90                   	nop
c002529a:	90                   	nop
c002529b:	90                   	nop
c002529c:	90                   	nop
c002529d:	90                   	nop
c002529e:	90                   	nop
c002529f:	90                   	nop
c00252a0:	dd d9                	fstp   st(1)
c00252a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252a6:	31 c0                	xor    eax,eax
c00252a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00252ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00252b0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00252b4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00252b8:	d9 c0                	fld    st(0)
c00252ba:	d8 c1                	fadd   st,st(1)
c00252bc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00252c0:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c00252c4:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00252c8:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00252cc:	de c9                	fmulp  st(1),st
c00252ce:	d9 c2                	fld    st(2)
c00252d0:	d8 cb                	fmul   st,st(3)
c00252d2:	de ec                	fsubp  st(4),st
c00252d4:	d9 c9                	fxch   st(1)
c00252d6:	d8 c2                	fadd   st,st(2)
c00252d8:	de fb                	fdivp  st(3),st
c00252da:	d9 ca                	fxch   st(2)
c00252dc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00252e0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00252e4:	d8 c0                	fadd   st,st(0)
c00252e6:	dc 2d 60 f5 02 c0    	fsubr  QWORD PTR ds:0xc002f560
c00252ec:	de ea                	fsubp  st(2),st
c00252ee:	d9 c9                	fxch   st(1)
c00252f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00252f4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00252f8:	d9 c9                	fxch   st(1)
c00252fa:	d8 c0                	fadd   st,st(0)
c00252fc:	dd 05 70 f5 02 c0    	fld    QWORD PTR ds:0xc002f570
c0025302:	dc e1                	fsubr  st(1),st
c0025304:	d9 c9                	fxch   st(1)
c0025306:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002530a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002530e:	de ea                	fsubp  st(2),st
c0025310:	de e1                	fsubrp st(1),st
c0025312:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025316:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002531a:	e9 63 ff ff ff       	jmp    c0025282 <asin+0x202>
c002531f:	90                   	nop

c0025320 <atan2>:
c0025320:	83 ec 4c             	sub    esp,0x4c
c0025323:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0025327:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c002532b:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002532f:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0025333:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025337:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c002533b:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c002533f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025347:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002534b:	89 c1                	mov    ecx,eax
c002534d:	f7 d9                	neg    ecx
c002534f:	89 d3                	mov    ebx,edx
c0025351:	09 c1                	or     ecx,eax
c0025353:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025359:	c1 e9 1f             	shr    ecx,0x1f
c002535c:	09 d9                	or     ecx,ebx
c002535e:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0025364:	77 7a                	ja     c00253e0 <atan2+0xc0>
c0025366:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002536a:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c002536e:	89 f1                	mov    ecx,esi
c0025370:	f7 d9                	neg    ecx
c0025372:	89 ef                	mov    edi,ebp
c0025374:	09 f1                	or     ecx,esi
c0025376:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
c002537c:	c1 e9 1f             	shr    ecx,0x1f
c002537f:	09 f9                	or     ecx,edi
c0025381:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0025387:	77 57                	ja     c00253e0 <atan2+0xc0>
c0025389:	81 fa 00 00 f0 3f    	cmp    edx,0x3ff00000
c002538f:	75 08                	jne    c0025399 <atan2+0x79>
c0025391:	85 c0                	test   eax,eax
c0025393:	0f 84 f7 00 00 00    	je     c0025490 <atan2+0x170>
c0025399:	89 d1                	mov    ecx,edx
c002539b:	c1 f9 1e             	sar    ecx,0x1e
c002539e:	83 e1 02             	and    ecx,0x2
c00253a1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00253a5:	89 e9                	mov    ecx,ebp
c00253a7:	c1 e9 1f             	shr    ecx,0x1f
c00253aa:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00253ae:	09 fe                	or     esi,edi
c00253b0:	75 5e                	jne    c0025410 <atan2+0xf0>
c00253b2:	83 f9 02             	cmp    ecx,0x2
c00253b5:	0f 84 65 01 00 00    	je     c0025520 <atan2+0x200>
c00253bb:	83 f9 03             	cmp    ecx,0x3
c00253be:	0f 85 1c 01 00 00    	jne    c00254e0 <atan2+0x1c0>
c00253c4:	dd 05 00 0f 03 c0    	fld    QWORD PTR ds:0xc0030f00
c00253ca:	dd 05 78 f5 02 c0    	fld    QWORD PTR ds:0xc002f578
c00253d0:	de e1                	fsubrp st(1),st
c00253d2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00253d6:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00253da:	eb 14                	jmp    c00253f0 <atan2+0xd0>
c00253dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00253e0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00253e4:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c00253e8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00253ec:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00253f0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00253f4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00253f8:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00253fc:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025400:	83 c4 4c             	add    esp,0x4c
c0025403:	c3                   	ret    
c0025404:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002540a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025410:	09 d8                	or     eax,ebx
c0025412:	0f 84 98 00 00 00    	je     c00254b0 <atan2+0x190>
c0025418:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c002541e:	0f 84 1c 01 00 00    	je     c0025540 <atan2+0x220>
c0025424:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c002542a:	0f 84 80 00 00 00    	je     c00254b0 <atan2+0x190>
c0025430:	29 df                	sub    edi,ebx
c0025432:	c1 ff 14             	sar    edi,0x14
c0025435:	83 ff 3c             	cmp    edi,0x3c
c0025438:	0f 8f b2 00 00 00    	jg     c00254f0 <atan2+0x1d0>
c002543e:	c1 ea 1f             	shr    edx,0x1f
c0025441:	84 d2                	test   dl,dl
c0025443:	0f 84 97 01 00 00    	je     c00255e0 <atan2+0x2c0>
c0025449:	83 ff c4             	cmp    edi,0xffffffc4
c002544c:	0f 8d 8e 01 00 00    	jge    c00255e0 <atan2+0x2c0>
c0025452:	d9 ee                	fldz   
c0025454:	83 f9 01             	cmp    ecx,0x1
c0025457:	0f 84 02 01 00 00    	je     c002555f <atan2+0x23f>
c002545d:	83 f9 02             	cmp    ecx,0x2
c0025460:	0f 84 2a 01 00 00    	je     c0025590 <atan2+0x270>
c0025466:	85 c9                	test   ecx,ecx
c0025468:	74 86                	je     c00253f0 <atan2+0xd0>
c002546a:	dd 05 f8 0e 03 c0    	fld    QWORD PTR ds:0xc0030ef8
c0025470:	de e9                	fsubp  st(1),st
c0025472:	dc 25 f8 f4 02 c0    	fsub   QWORD PTR ds:0xc002f4f8
c0025478:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002547c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025480:	e9 6b ff ff ff       	jmp    c00253f0 <atan2+0xd0>
c0025485:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025490:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0025494:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0025498:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c002549c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00254a0:	83 c4 4c             	add    esp,0x4c
c00254a3:	e9 a8 11 00 00       	jmp    c0026650 <atan>
c00254a8:	90                   	nop
c00254a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00254b0:	85 ed                	test   ebp,ebp
c00254b2:	0f 88 b8 00 00 00    	js     c0025570 <atan2+0x250>
c00254b8:	dd 05 00 0f 03 c0    	fld    QWORD PTR ds:0xc0030f00
c00254be:	dc 05 00 f5 02 c0    	fadd   QWORD PTR ds:0xc002f500
c00254c4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00254c8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00254cc:	e9 1f ff ff ff       	jmp    c00253f0 <atan2+0xd0>
c00254d1:	eb 0d                	jmp    c00254e0 <atan2+0x1c0>
c00254d3:	90                   	nop
c00254d4:	90                   	nop
c00254d5:	90                   	nop
c00254d6:	90                   	nop
c00254d7:	90                   	nop
c00254d8:	90                   	nop
c00254d9:	90                   	nop
c00254da:	90                   	nop
c00254db:	90                   	nop
c00254dc:	90                   	nop
c00254dd:	90                   	nop
c00254de:	90                   	nop
c00254df:	90                   	nop
c00254e0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00254e4:	e9 07 ff ff ff       	jmp    c00253f0 <atan2+0xd0>
c00254e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00254f0:	dd 05 f8 0e 03 c0    	fld    QWORD PTR ds:0xc0030ef8
c00254f6:	83 e1 01             	and    ecx,0x1
c00254f9:	d9 05 5c f5 02 c0    	fld    DWORD PTR ds:0xc002f55c
c00254ff:	de c9                	fmulp  st(1),st
c0025501:	dc 05 00 f5 02 c0    	fadd   QWORD PTR ds:0xc002f500
c0025507:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002550b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002550f:	e9 40 ff ff ff       	jmp    c0025454 <atan2+0x134>
c0025514:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002551a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025520:	dd 05 00 0f 03 c0    	fld    QWORD PTR ds:0xc0030f00
c0025526:	dc 05 f8 f4 02 c0    	fadd   QWORD PTR ds:0xc002f4f8
c002552c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025530:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025534:	e9 b7 fe ff ff       	jmp    c00253f0 <atan2+0xd0>
c0025539:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025540:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0025546:	74 68                	je     c00255b0 <atan2+0x290>
c0025548:	83 f9 02             	cmp    ecx,0x2
c002554b:	74 d3                	je     c0025520 <atan2+0x200>
c002554d:	83 f9 03             	cmp    ecx,0x3
c0025550:	0f 84 6e fe ff ff    	je     c00253c4 <atan2+0xa4>
c0025556:	d9 ee                	fldz   
c0025558:	49                   	dec    ecx
c0025559:	0f 85 91 fe ff ff    	jne    c00253f0 <atan2+0xd0>
c002555f:	d9 e0                	fchs   
c0025561:	e9 8a fe ff ff       	jmp    c00253f0 <atan2+0xd0>
c0025566:	8d 76 00             	lea    esi,[esi+0x0]
c0025569:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025570:	dd 05 00 0f 03 c0    	fld    QWORD PTR ds:0xc0030f00
c0025576:	dd 05 80 f5 02 c0    	fld    QWORD PTR ds:0xc002f580
c002557c:	de e1                	fsubrp st(1),st
c002557e:	e9 41 ff ff ff       	jmp    c00254c4 <atan2+0x1a4>
c0025583:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025589:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025590:	dd 05 f8 0e 03 c0    	fld    QWORD PTR ds:0xc0030ef8
c0025596:	de e9                	fsubp  st(1),st
c0025598:	dc 2d f8 f4 02 c0    	fsubr  QWORD PTR ds:0xc002f4f8
c002559e:	e9 21 ff ff ff       	jmp    c00254c4 <atan2+0x1a4>
c00255a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00255a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00255b0:	83 f9 02             	cmp    ecx,0x2
c00255b3:	0f 84 82 00 00 00    	je     c002563b <atan2+0x31b>
c00255b9:	83 f9 03             	cmp    ecx,0x3
c00255bc:	74 62                	je     c0025620 <atan2+0x300>
c00255be:	49                   	dec    ecx
c00255bf:	90                   	nop
c00255c0:	74 43                	je     c0025605 <atan2+0x2e5>
c00255c2:	dd 05 00 0f 03 c0    	fld    QWORD PTR ds:0xc0030f00
c00255c8:	dc 05 70 f5 02 c0    	fadd   QWORD PTR ds:0xc002f570
c00255ce:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00255d2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00255d6:	e9 15 fe ff ff       	jmp    c00253f0 <atan2+0xd0>
c00255db:	90                   	nop
c00255dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00255e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00255e4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00255e8:	dc 74 24 10          	fdiv   QWORD PTR [esp+0x10]
c00255ec:	dd 1c 24             	fstp   QWORD PTR [esp]
c00255ef:	e8 fc 18 00 00       	call   c0026ef0 <fabs>
c00255f4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00255f7:	e8 54 10 00 00       	call   c0026650 <atan>
c00255fc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025600:	e9 4f fe ff ff       	jmp    c0025454 <atan2+0x134>
c0025605:	dd 05 00 0f 03 c0    	fld    QWORD PTR ds:0xc0030f00
c002560b:	dd 05 88 f5 02 c0    	fld    QWORD PTR ds:0xc002f588
c0025611:	de e1                	fsubrp st(1),st
c0025613:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025617:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002561b:	e9 d0 fd ff ff       	jmp    c00253f0 <atan2+0xd0>
c0025620:	dd 05 00 0f 03 c0    	fld    QWORD PTR ds:0xc0030f00
c0025626:	dd 05 98 f5 02 c0    	fld    QWORD PTR ds:0xc002f598
c002562c:	de e1                	fsubrp st(1),st
c002562e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025632:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025636:	e9 b5 fd ff ff       	jmp    c00253f0 <atan2+0xd0>
c002563b:	dd 05 00 0f 03 c0    	fld    QWORD PTR ds:0xc0030f00
c0025641:	dc 05 90 f5 02 c0    	fadd   QWORD PTR ds:0xc002f590
c0025647:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002564b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002564f:	e9 9c fd ff ff       	jmp    c00253f0 <atan2+0xd0>
c0025654:	66 90                	xchg   ax,ax
c0025656:	66 90                	xchg   ax,ax
c0025658:	66 90                	xchg   ax,ax
c002565a:	66 90                	xchg   ax,ax
c002565c:	66 90                	xchg   ax,ax
c002565e:	66 90                	xchg   ax,ax

c0025660 <cosh>:
c0025660:	53                   	push   ebx
c0025661:	83 ec 28             	sub    esp,0x28
c0025664:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025668:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002566c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025670:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025676:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c002567c:	0f 8f 9e 00 00 00    	jg     c0025720 <cosh+0xc0>
c0025682:	dd d8                	fstp   st(0)
c0025684:	81 fb 42 2e d6 3f    	cmp    ebx,0x3fd62e42
c002568a:	7e 44                	jle    c00256d0 <cosh+0x70>
c002568c:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0025692:	0f 8e a8 00 00 00    	jle    c0025740 <cosh+0xe0>
c0025698:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c002569e:	0f 8e dc 00 00 00    	jle    c0025780 <cosh+0x120>
c00256a4:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c00256aa:	0f 8e 00 01 00 00    	jle    c00257b0 <cosh+0x150>
c00256b0:	d9 05 a0 f5 02 c0    	fld    DWORD PTR ds:0xc002f5a0
c00256b6:	eb 0c                	jmp    c00256c4 <cosh+0x64>
c00256b8:	90                   	nop
c00256b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00256c0:	dd d9                	fstp   st(1)
c00256c2:	dd d9                	fstp   st(1)
c00256c4:	83 c4 28             	add    esp,0x28
c00256c7:	5b                   	pop    ebx
c00256c8:	c3                   	ret    
c00256c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00256d0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00256d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00256d7:	e8 14 18 00 00       	call   c0026ef0 <fabs>
c00256dc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00256df:	e8 7c 13 00 00       	call   c0026a60 <expm1>
c00256e4:	81 fb ff ff 7f 3c    	cmp    ebx,0x3c7fffff
c00256ea:	d9 e8                	fld1   
c00256ec:	d9 c1                	fld    st(1)
c00256ee:	d8 c1                	fadd   st,st(1)
c00256f0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00256f4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00256f8:	7e c6                	jle    c00256c0 <cosh+0x60>
c00256fa:	d9 ca                	fxch   st(2)
c00256fc:	d8 c8                	fmul   st,st(0)
c00256fe:	d9 ca                	fxch   st(2)
c0025700:	d8 c0                	fadd   st,st(0)
c0025702:	de fa                	fdivp  st(2),st
c0025704:	de c1                	faddp  st(1),st
c0025706:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002570a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002570e:	83 c4 28             	add    esp,0x28
c0025711:	5b                   	pop    ebx
c0025712:	c3                   	ret    
c0025713:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025719:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025720:	d9 c0                	fld    st(0)
c0025722:	de c9                	fmulp  st(1),st
c0025724:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025728:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002572c:	83 c4 28             	add    esp,0x28
c002572f:	5b                   	pop    ebx
c0025730:	c3                   	ret    
c0025731:	eb 0d                	jmp    c0025740 <cosh+0xe0>
c0025733:	90                   	nop
c0025734:	90                   	nop
c0025735:	90                   	nop
c0025736:	90                   	nop
c0025737:	90                   	nop
c0025738:	90                   	nop
c0025739:	90                   	nop
c002573a:	90                   	nop
c002573b:	90                   	nop
c002573c:	90                   	nop
c002573d:	90                   	nop
c002573e:	90                   	nop
c002573f:	90                   	nop
c0025740:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025744:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025747:	e8 a4 17 00 00       	call   c0026ef0 <fabs>
c002574c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002574f:	e8 54 1d 00 00       	call   c00274a8 <exp>
c0025754:	d9 05 5c f5 02 c0    	fld    DWORD PTR ds:0xc002f55c
c002575a:	d9 c1                	fld    st(1)
c002575c:	d8 c9                	fmul   st,st(1)
c002575e:	d9 c9                	fxch   st(1)
c0025760:	de f2                	fdivrp st(2),st
c0025762:	de c1                	faddp  st(1),st
c0025764:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025768:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002576c:	e9 53 ff ff ff       	jmp    c00256c4 <cosh+0x64>
c0025771:	eb 0d                	jmp    c0025780 <cosh+0x120>
c0025773:	90                   	nop
c0025774:	90                   	nop
c0025775:	90                   	nop
c0025776:	90                   	nop
c0025777:	90                   	nop
c0025778:	90                   	nop
c0025779:	90                   	nop
c002577a:	90                   	nop
c002577b:	90                   	nop
c002577c:	90                   	nop
c002577d:	90                   	nop
c002577e:	90                   	nop
c002577f:	90                   	nop
c0025780:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025784:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025787:	e8 64 17 00 00       	call   c0026ef0 <fabs>
c002578c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002578f:	e8 14 1d 00 00       	call   c00274a8 <exp>
c0025794:	d9 05 5c f5 02 c0    	fld    DWORD PTR ds:0xc002f55c
c002579a:	de c9                	fmulp  st(1),st
c002579c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00257a0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00257a4:	e9 1b ff ff ff       	jmp    c00256c4 <cosh+0x64>
c00257a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00257b0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00257b4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00257b7:	e8 34 17 00 00       	call   c0026ef0 <fabs>
c00257bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00257c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00257c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00257c8:	e8 d3 0c 00 00       	call   c00264a0 <__ldexp_exp>
c00257cd:	e9 f2 fe ff ff       	jmp    c00256c4 <cosh+0x64>
c00257d2:	66 90                	xchg   ax,ax
c00257d4:	66 90                	xchg   ax,ax
c00257d6:	66 90                	xchg   ax,ax
c00257d8:	66 90                	xchg   ax,ax
c00257da:	66 90                	xchg   ax,ax
c00257dc:	66 90                	xchg   ax,ax
c00257de:	66 90                	xchg   ax,ax

c00257e0 <pow>:
c00257e0:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00257e6:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
c00257ed:	dd 84 24 a0 00 00 00 	fld    QWORD PTR [esp+0xa0]
c00257f4:	89 9c 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],ebx
c00257fb:	89 bc 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],edi
c0025802:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025806:	89 ac 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],ebp
c002580d:	dd 84 24 a8 00 00 00 	fld    QWORD PTR [esp+0xa8]
c0025814:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025818:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002581c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025820:	89 f3                	mov    ebx,esi
c0025822:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025828:	89 d9                	mov    ecx,ebx
c002582a:	09 c1                	or     ecx,eax
c002582c:	0f 84 9e 00 00 00    	je     c00258d0 <pow+0xf0>
c0025832:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0025836:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002583a:	81 ff 00 00 f0 3f    	cmp    edi,0x3ff00000
c0025840:	75 3e                	jne    c0025880 <pow+0xa0>
c0025842:	85 ed                	test   ebp,ebp
c0025844:	75 3a                	jne    c0025880 <pow+0xa0>
c0025846:	d9 e8                	fld1   
c0025848:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002584c:	eb 02                	jmp    c0025850 <pow+0x70>
c002584e:	dd d8                	fstp   st(0)
c0025850:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025854:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c002585b:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0025862:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c0025869:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0025870:	81 c4 9c 00 00 00    	add    esp,0x9c
c0025876:	c3                   	ret    
c0025877:	89 f6                	mov    esi,esi
c0025879:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025880:	89 fa                	mov    edx,edi
c0025882:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025888:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c002588c:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c0025892:	7f 1c                	jg     c00258b0 <pow+0xd0>
c0025894:	0f 94 c1             	sete   cl
c0025897:	85 ed                	test   ebp,ebp
c0025899:	0f 95 c2             	setne  dl
c002589c:	84 ca                	test   dl,cl
c002589e:	75 10                	jne    c00258b0 <pow+0xd0>
c00258a0:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c00258a6:	7f 08                	jg     c00258b0 <pow+0xd0>
c00258a8:	75 36                	jne    c00258e0 <pow+0x100>
c00258aa:	85 c0                	test   eax,eax
c00258ac:	74 32                	je     c00258e0 <pow+0x100>
c00258ae:	66 90                	xchg   ax,ax
c00258b0:	d9 ee                	fldz   
c00258b2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00258b6:	d8 c1                	fadd   st,st(1)
c00258b8:	d9 c9                	fxch   st(1)
c00258ba:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00258be:	de c1                	faddp  st(1),st
c00258c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00258c4:	eb 8a                	jmp    c0025850 <pow+0x70>
c00258c6:	8d 76 00             	lea    esi,[esi+0x0]
c00258c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00258d0:	d9 e8                	fld1   
c00258d2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00258d6:	e9 75 ff ff ff       	jmp    c0025850 <pow+0x70>
c00258db:	90                   	nop
c00258dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00258e0:	31 c9                	xor    ecx,ecx
c00258e2:	85 ff                	test   edi,edi
c00258e4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00258e8:	0f 88 22 01 00 00    	js     c0025a10 <pow+0x230>
c00258ee:	85 c0                	test   eax,eax
c00258f0:	75 5e                	jne    c0025950 <pow+0x170>
c00258f2:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c00258f8:	0f 84 72 01 00 00    	je     c0025a70 <pow+0x290>
c00258fe:	81 fb 00 00 f0 3f    	cmp    ebx,0x3ff00000
c0025904:	0f 84 b6 01 00 00    	je     c0025ac0 <pow+0x2e0>
c002590a:	81 fe 00 00 00 40    	cmp    esi,0x40000000
c0025910:	0f 84 38 07 00 00    	je     c002604e <pow+0x86e>
c0025916:	81 fe 00 00 08 40    	cmp    esi,0x40080000
c002591c:	0f 84 33 08 00 00    	je     c0026155 <pow+0x975>
c0025922:	81 fe 00 00 10 40    	cmp    esi,0x40100000
c0025928:	0f 84 4f 08 00 00    	je     c002617d <pow+0x99d>
c002592e:	81 fe 00 00 e0 3f    	cmp    esi,0x3fe00000
c0025934:	75 1a                	jne    c0025950 <pow+0x170>
c0025936:	89 f8                	mov    eax,edi
c0025938:	f7 d0                	not    eax
c002593a:	c1 e8 1f             	shr    eax,0x1f
c002593d:	84 c0                	test   al,al
c002593f:	0f 85 f1 08 00 00    	jne    c0026236 <pow+0xa56>
c0025945:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025950:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025954:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025957:	e8 94 15 00 00       	call   c0026ef0 <fabs>
c002595c:	85 ed                	test   ebp,ebp
c002595e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025962:	75 1e                	jne    c0025982 <pow+0x1a2>
c0025964:	89 f8                	mov    eax,edi
c0025966:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002596b:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0025970:	0f 84 33 06 00 00    	je     c0025fa9 <pow+0x7c9>
c0025976:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002597a:	85 c0                	test   eax,eax
c002597c:	0f 84 27 06 00 00    	je     c0025fa9 <pow+0x7c9>
c0025982:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0025986:	89 f8                	mov    eax,edi
c0025988:	c1 e8 1f             	shr    eax,0x1f
c002598b:	48                   	dec    eax
c002598c:	09 c1                	or     ecx,eax
c002598e:	0f 84 49 01 00 00    	je     c0025add <pow+0x2fd>
c0025994:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0025998:	d9 ee                	fldz   
c002599a:	49                   	dec    ecx
c002599b:	09 c1                	or     ecx,eax
c002599d:	0f 85 4b 01 00 00    	jne    c0025aee <pow+0x30e>
c00259a3:	d9 e0                	fchs   
c00259a5:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00259a9:	d9 05 a4 f5 02 c0    	fld    DWORD PTR ds:0xc002f5a4
c00259af:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00259b3:	db 2d f0 f5 02 c0    	fld    TBYTE PTR ds:0xc002f5f0
c00259b9:	db 2d 00 f6 02 c0    	fld    TBYTE PTR ds:0xc002f600
c00259bf:	d9 e8                	fld1   
c00259c1:	d9 e0                	fchs   
c00259c3:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c00259c7:	81 fb 00 00 e0 41    	cmp    ebx,0x41e00000
c00259cd:	0f 8e 40 01 00 00    	jle    c0025b13 <pow+0x333>
c00259d3:	81 fb 00 00 f0 43    	cmp    ebx,0x43f00000
c00259d9:	0f 8e 93 06 00 00    	jle    c0026072 <pow+0x892>
c00259df:	dd d8                	fstp   st(0)
c00259e1:	dd d8                	fstp   st(0)
c00259e3:	81 7c 24 30 ff ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3fefffff
c00259eb:	0f 8f c9 07 00 00    	jg     c00261ba <pow+0x9da>
c00259f1:	85 f6                	test   esi,esi
c00259f3:	0f 88 94 08 00 00    	js     c002628d <pow+0xaad>
c00259f9:	d9 ee                	fldz   
c00259fb:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00259ff:	e9 4c fe ff ff       	jmp    c0025850 <pow+0x70>
c0025a04:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025a0a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025a10:	81 fb ff ff 3f 43    	cmp    ebx,0x433fffff
c0025a16:	0f 8f 94 00 00 00    	jg     c0025ab0 <pow+0x2d0>
c0025a1c:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c0025a22:	0f 8e c6 fe ff ff    	jle    c00258ee <pow+0x10e>
c0025a28:	89 d9                	mov    ecx,ebx
c0025a2a:	c1 f9 14             	sar    ecx,0x14
c0025a2d:	81 e9 ff 03 00 00    	sub    ecx,0x3ff
c0025a33:	83 f9 14             	cmp    ecx,0x14
c0025a36:	0f 8e e5 06 00 00    	jle    c0026121 <pow+0x941>
c0025a3c:	ba 34 00 00 00       	mov    edx,0x34
c0025a41:	29 ca                	sub    edx,ecx
c0025a43:	89 d1                	mov    ecx,edx
c0025a45:	89 c2                	mov    edx,eax
c0025a47:	d3 ea                	shr    edx,cl
c0025a49:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0025a4d:	d3 e2                	shl    edx,cl
c0025a4f:	39 c2                	cmp    edx,eax
c0025a51:	0f 85 97 fe ff ff    	jne    c00258ee <pow+0x10e>
c0025a57:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0025a5b:	b9 02 00 00 00       	mov    ecx,0x2
c0025a60:	83 e2 01             	and    edx,0x1
c0025a63:	29 d1                	sub    ecx,edx
c0025a65:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0025a69:	e9 80 fe ff ff       	jmp    c00258ee <pow+0x10e>
c0025a6e:	66 90                	xchg   ax,ax
c0025a70:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0025a74:	8d 87 00 00 10 c0    	lea    eax,[edi-0x3ff00000]
c0025a7a:	09 e8                	or     eax,ebp
c0025a7c:	0f 84 61 05 00 00    	je     c0025fe3 <pow+0x803>
c0025a82:	81 ff ff ff ef 3f    	cmp    edi,0x3fefffff
c0025a88:	0f 8e 60 05 00 00    	jle    c0025fee <pow+0x80e>
c0025a8e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025a92:	85 f6                	test   esi,esi
c0025a94:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025a98:	0f 89 b2 fd ff ff    	jns    c0025850 <pow+0x70>
c0025a9e:	e9 56 ff ff ff       	jmp    c00259f9 <pow+0x219>
c0025aa3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025aa9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025ab0:	ba 02 00 00 00       	mov    edx,0x2
c0025ab5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0025ab9:	e9 30 fe ff ff       	jmp    c00258ee <pow+0x10e>
c0025abe:	66 90                	xchg   ax,ax
c0025ac0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025ac4:	85 f6                	test   esi,esi
c0025ac6:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0025aca:	0f 89 7e fd ff ff    	jns    c002584e <pow+0x6e>
c0025ad0:	d9 e8                	fld1   
c0025ad2:	de f1                	fdivrp st(1),st
c0025ad4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025ad8:	e9 73 fd ff ff       	jmp    c0025850 <pow+0x70>
c0025add:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025ae1:	d8 e0                	fsub   st,st(0)
c0025ae3:	d8 f0                	fdiv   st,st(0)
c0025ae5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025ae9:	e9 62 fd ff ff       	jmp    c0025850 <pow+0x70>
c0025aee:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0025af2:	d9 05 a0 f5 02 c0    	fld    DWORD PTR ds:0xc002f5a0
c0025af8:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025afc:	db 2d d0 f5 02 c0    	fld    TBYTE PTR ds:0xc002f5d0
c0025b02:	db 2d e0 f5 02 c0    	fld    TBYTE PTR ds:0xc002f5e0
c0025b08:	d9 e8                	fld1   
c0025b0a:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0025b0e:	e9 b4 fe ff ff       	jmp    c00259c7 <pow+0x1e7>
c0025b13:	dd d8                	fstp   st(0)
c0025b15:	dd d8                	fstp   st(0)
c0025b17:	31 c0                	xor    eax,eax
c0025b19:	81 e7 00 00 f0 7f    	and    edi,0x7ff00000
c0025b1f:	75 1b                	jne    c0025b3c <pow+0x35c>
c0025b21:	d9 05 b8 f5 02 c0    	fld    DWORD PTR ds:0xc002f5b8
c0025b27:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0025b2b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025b2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0025b33:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0025b37:	b8 cb ff ff ff       	mov    eax,0xffffffcb
c0025b3c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0025b40:	89 f9                	mov    ecx,edi
c0025b42:	81 e7 ff ff 0f 00    	and    edi,0xfffff
c0025b48:	c1 f9 14             	sar    ecx,0x14
c0025b4b:	8d 8c 08 01 fc ff ff 	lea    ecx,[eax+ecx*1-0x3ff]
c0025b52:	89 f8                	mov    eax,edi
c0025b54:	0d 00 00 f0 3f       	or     eax,0x3ff00000
c0025b59:	81 ff 8e 98 03 00    	cmp    edi,0x3988e
c0025b5f:	0f 8e f8 04 00 00    	jle    c002605d <pow+0x87d>
c0025b65:	81 ff 79 b6 0b 00    	cmp    edi,0xbb679
c0025b6b:	0f 8e 25 06 00 00    	jle    c0026196 <pow+0x9b6>
c0025b71:	d9 ee                	fldz   
c0025b73:	41                   	inc    ecx
c0025b74:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0025b78:	2d 00 00 10 00       	sub    eax,0x100000
c0025b7d:	31 d2                	xor    edx,edx
c0025b7f:	d9 ee                	fldz   
c0025b81:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c0025b85:	d9 e8                	fld1   
c0025b87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025b8b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025b8f:	d1 f8                	sar    eax,1
c0025b91:	31 f6                	xor    esi,esi
c0025b93:	0d 00 00 00 20       	or     eax,0x20000000
c0025b98:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0025b9c:	8d 84 02 00 00 08 00 	lea    eax,[edx+eax*1+0x80000]
c0025ba3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0025ba7:	31 ff                	xor    edi,edi
c0025ba9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025bad:	d9 c0                	fld    st(0)
c0025baf:	d8 e2                	fsub   st,st(2)
c0025bb1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025bb5:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025bb9:	d9 c1                	fld    st(1)
c0025bbb:	d8 c3                	fadd   st,st(3)
c0025bbd:	d8 3d 58 f5 02 c0    	fdivr  DWORD PTR ds:0xc002f558
c0025bc3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025bc7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025bcb:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0025bcf:	d9 c0                	fld    st(0)
c0025bd1:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025bd5:	de ca                	fmulp  st(2),st
c0025bd7:	d9 c9                	fxch   st(1)
c0025bd9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025bdd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0025be1:	89 6c 24 34          	mov    DWORD PTR [esp+0x34],ebp
c0025be5:	31 ed                	xor    ebp,ebp
c0025be7:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025beb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0025bef:	31 c0                	xor    eax,eax
c0025bf1:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0025bf5:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025bf9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025bfd:	d9 c0                	fld    st(0)
c0025bff:	d8 c9                	fmul   st,st(1)
c0025c01:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025c05:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025c09:	d9 c2                	fld    st(2)
c0025c0b:	d8 cc                	fmul   st,st(4)
c0025c0d:	de ed                	fsubp  st(5),st
c0025c0f:	d9 ca                	fxch   st(2)
c0025c11:	de e6                	fsubrp st(6),st
c0025c13:	d9 cc                	fxch   st(4)
c0025c15:	de e5                	fsubrp st(5),st
c0025c17:	d9 cc                	fxch   st(4)
c0025c19:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025c1d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025c21:	d8 c9                	fmul   st,st(1)
c0025c23:	de ea                	fsubp  st(2),st
c0025c25:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025c29:	de ca                	fmulp  st(2),st
c0025c2b:	d9 c9                	fxch   st(1)
c0025c2d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025c31:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025c35:	d9 c3                	fld    st(3)
c0025c37:	dc 0d 38 f6 02 c0    	fmul   QWORD PTR ds:0xc002f638
c0025c3d:	dc 05 40 f6 02 c0    	fadd   QWORD PTR ds:0xc002f640
c0025c43:	d8 cc                	fmul   st,st(4)
c0025c45:	dc 05 48 f6 02 c0    	fadd   QWORD PTR ds:0xc002f648
c0025c4b:	d8 cc                	fmul   st,st(4)
c0025c4d:	dc 05 50 f6 02 c0    	fadd   QWORD PTR ds:0xc002f650
c0025c53:	d8 cc                	fmul   st,st(4)
c0025c55:	dc 05 58 f6 02 c0    	fadd   QWORD PTR ds:0xc002f658
c0025c5b:	d8 cc                	fmul   st,st(4)
c0025c5d:	dc 05 60 f6 02 c0    	fadd   QWORD PTR ds:0xc002f660
c0025c63:	d9 cc                	fxch   st(4)
c0025c65:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0025c69:	d8 c8                	fmul   st,st(0)
c0025c6b:	de cc                	fmulp  st(4),st
c0025c6d:	d9 cb                	fxch   st(3)
c0025c6f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025c73:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025c77:	d9 c1                	fld    st(1)
c0025c79:	d8 c3                	fadd   st,st(3)
c0025c7b:	d8 cc                	fmul   st,st(4)
c0025c7d:	de c1                	faddp  st(1),st
c0025c7f:	d9 c1                	fld    st(1)
c0025c81:	d8 ca                	fmul   st,st(2)
c0025c83:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025c87:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025c8b:	d9 c9                	fxch   st(1)
c0025c8d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025c91:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025c95:	d9 05 bc f5 02 c0    	fld    DWORD PTR ds:0xc002f5bc
c0025c9b:	d9 c2                	fld    st(2)
c0025c9d:	d8 c1                	fadd   st,st(1)
c0025c9f:	d8 c2                	fadd   st,st(2)
c0025ca1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025ca5:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025ca9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025cad:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025cb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025cb5:	31 c0                	xor    eax,eax
c0025cb7:	dc cc                	fmul   st(4),st
c0025cb9:	d9 cc                	fxch   st(4)
c0025cbb:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025cbf:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025cc3:	d9 c9                	fxch   st(1)
c0025cc5:	d8 ec                	fsubr  st,st(4)
c0025cc7:	de e3                	fsubrp st(3),st
c0025cc9:	d9 c9                	fxch   st(1)
c0025ccb:	de e2                	fsubrp st(2),st
c0025ccd:	d9 c9                	fxch   st(1)
c0025ccf:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025cd3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025cd7:	de cb                	fmulp  st(3),st
c0025cd9:	d9 cb                	fxch   st(3)
c0025cdb:	de c9                	fmulp  st(1),st
c0025cdd:	de c1                	faddp  st(1),st
c0025cdf:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025ce3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025ce7:	d9 c1                	fld    st(1)
c0025ce9:	d8 c1                	fadd   st,st(1)
c0025ceb:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025cef:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025cf3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025cf7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025cfb:	d9 c0                	fld    st(0)
c0025cfd:	d8 0d c0 f5 02 c0    	fmul   DWORD PTR ds:0xc002f5c0
c0025d03:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025d07:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025d0b:	d9 cb                	fxch   st(3)
c0025d0d:	d8 e9                	fsubr  st,st(1)
c0025d0f:	de ea                	fsubp  st(2),st
c0025d11:	d9 c9                	fxch   st(1)
c0025d13:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025d17:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025d1b:	dc 0d 68 f6 02 c0    	fmul   QWORD PTR ds:0xc002f668
c0025d21:	d9 c9                	fxch   st(1)
c0025d23:	dc 0d 70 f6 02 c0    	fmul   QWORD PTR ds:0xc002f670
c0025d29:	de c1                	faddp  st(1),st
c0025d2b:	db 6c 24 58          	fld    TBYTE PTR [esp+0x58]
c0025d2f:	de c1                	faddp  st(1),st
c0025d31:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025d35:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0025d39:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025d3d:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0025d41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025d45:	d9 c2                	fld    st(2)
c0025d47:	d8 c2                	fadd   st,st(2)
c0025d49:	db 6c 24 68          	fld    TBYTE PTR [esp+0x68]
c0025d4d:	dc c1                	fadd   st(1),st
c0025d4f:	d9 c9                	fxch   st(1)
c0025d51:	d8 c2                	fadd   st,st(2)
c0025d53:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025d57:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025d5b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025d5f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025d63:	dc e2                	fsubr  st(2),st
c0025d65:	d9 ca                	fxch   st(2)
c0025d67:	de e1                	fsubrp st(1),st
c0025d69:	de e3                	fsubrp st(3),st
c0025d6b:	d9 ca                	fxch   st(2)
c0025d6d:	de e9                	fsubp  st(1),st
c0025d6f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025d73:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025d77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025d7b:	31 db                	xor    ebx,ebx
c0025d7d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0025d81:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025d85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025d89:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025d8d:	d9 c0                	fld    st(0)
c0025d8f:	d8 e2                	fsub   st,st(2)
c0025d91:	d8 cc                	fmul   st,st(4)
c0025d93:	d9 c9                	fxch   st(1)
c0025d95:	de cb                	fmulp  st(3),st
c0025d97:	de c2                	faddp  st(2),st
c0025d99:	d9 c9                	fxch   st(1)
c0025d9b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025d9f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025da3:	d9 ca                	fxch   st(2)
c0025da5:	de c9                	fmulp  st(1),st
c0025da7:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025dab:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025daf:	d9 c1                	fld    st(1)
c0025db1:	d8 c1                	fadd   st,st(1)
c0025db3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025db7:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025dbb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0025dbf:	81 fa ff ff 8f 40    	cmp    edx,0x408fffff
c0025dc5:	89 d3                	mov    ebx,edx
c0025dc7:	0f 8e 38 02 00 00    	jle    c0026005 <pow+0x825>
c0025dcd:	8d 8a 00 00 70 bf    	lea    ecx,[edx-0x40900000]
c0025dd3:	09 c1                	or     ecx,eax
c0025dd5:	0f 85 f6 03 00 00    	jne    c00261d1 <pow+0x9f1>
c0025ddb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025ddf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025de3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025de7:	d8 e1                	fsub   st,st(1)
c0025de9:	d9 c2                	fld    st(2)
c0025deb:	dc 05 78 f6 02 c0    	fadd   QWORD PTR ds:0xc002f678
c0025df1:	df f1                	fcomip st,st(1)
c0025df3:	dd d8                	fstp   st(0)
c0025df5:	0f 87 2a 04 00 00    	ja     c0026225 <pow+0xa45>
c0025dfb:	89 d9                	mov    ecx,ebx
c0025dfd:	c1 f9 14             	sar    ecx,0x14
c0025e00:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025e06:	81 e9 fe 03 00 00    	sub    ecx,0x3fe
c0025e0c:	b8 00 00 10 00       	mov    eax,0x100000
c0025e11:	d3 f8                	sar    eax,cl
c0025e13:	31 c9                	xor    ecx,ecx
c0025e15:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0025e19:	01 d8                	add    eax,ebx
c0025e1b:	be ff ff 0f 00       	mov    esi,0xfffff
c0025e20:	89 c2                	mov    edx,eax
c0025e22:	c1 fa 14             	sar    edx,0x14
c0025e25:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0025e2b:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0025e31:	88 d1                	mov    cl,dl
c0025e33:	d3 fe                	sar    esi,cl
c0025e35:	b9 14 00 00 00       	mov    ecx,0x14
c0025e3a:	f7 d6                	not    esi
c0025e3c:	29 d1                	sub    ecx,edx
c0025e3e:	21 c6                	and    esi,eax
c0025e40:	25 ff ff 0f 00       	and    eax,0xfffff
c0025e45:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025e49:	0d 00 00 10 00       	or     eax,0x100000
c0025e4e:	d3 f8                	sar    eax,cl
c0025e50:	85 db                	test   ebx,ebx
c0025e52:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025e56:	89 c1                	mov    ecx,eax
c0025e58:	79 02                	jns    c0025e5c <pow+0x67c>
c0025e5a:	f7 d9                	neg    ecx
c0025e5c:	de e9                	fsubp  st(1),st
c0025e5e:	89 ce                	mov    esi,ecx
c0025e60:	c1 e6 14             	shl    esi,0x14
c0025e63:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025e67:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025e6b:	d9 c1                	fld    st(1)
c0025e6d:	d8 c1                	fadd   st,st(1)
c0025e6f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025e73:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025e77:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025e7b:	31 c0                	xor    eax,eax
c0025e7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025e81:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025e85:	d9 c0                	fld    st(0)
c0025e87:	d8 0d c4 f5 02 c0    	fmul   DWORD PTR ds:0xc002f5c4
c0025e8d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025e91:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025e95:	d9 ca                	fxch   st(2)
c0025e97:	d8 e9                	fsubr  st,st(1)
c0025e99:	de eb                	fsubp  st(3),st
c0025e9b:	d9 ca                	fxch   st(2)
c0025e9d:	dc 0d 80 f6 02 c0    	fmul   QWORD PTR ds:0xc002f680
c0025ea3:	d9 ca                	fxch   st(2)
c0025ea5:	dc 0d 88 f6 02 c0    	fmul   QWORD PTR ds:0xc002f688
c0025eab:	de c2                	faddp  st(2),st
c0025ead:	d9 c9                	fxch   st(1)
c0025eaf:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025eb3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025eb7:	d9 c1                	fld    st(1)
c0025eb9:	d8 c1                	fadd   st,st(1)
c0025ebb:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025ebf:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025ec3:	d9 c0                	fld    st(0)
c0025ec5:	d8 c9                	fmul   st,st(1)
c0025ec7:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025ecb:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025ecf:	d9 c0                	fld    st(0)
c0025ed1:	dc 0d 90 f6 02 c0    	fmul   QWORD PTR ds:0xc002f690
c0025ed7:	dc 25 98 f6 02 c0    	fsub   QWORD PTR ds:0xc002f698
c0025edd:	d8 c9                	fmul   st,st(1)
c0025edf:	dc 05 a0 f6 02 c0    	fadd   QWORD PTR ds:0xc002f6a0
c0025ee5:	d8 c9                	fmul   st,st(1)
c0025ee7:	dc 25 a8 f6 02 c0    	fsub   QWORD PTR ds:0xc002f6a8
c0025eed:	d8 c9                	fmul   st,st(1)
c0025eef:	dc 05 b0 f6 02 c0    	fadd   QWORD PTR ds:0xc002f6b0
c0025ef5:	de c9                	fmulp  st(1),st
c0025ef7:	d8 e9                	fsubr  st,st(1)
c0025ef9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025efd:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025f01:	d9 cb                	fxch   st(3)
c0025f03:	d8 e9                	fsubr  st,st(1)
c0025f05:	de ea                	fsubp  st(2),st
c0025f07:	d9 c9                	fxch   st(1)
c0025f09:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025f0d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025f11:	d9 c1                	fld    st(1)
c0025f13:	d8 cb                	fmul   st,st(3)
c0025f15:	d9 cb                	fxch   st(3)
c0025f17:	d8 25 c8 f5 02 c0    	fsub   DWORD PTR ds:0xc002f5c8
c0025f1d:	de fb                	fdivp  st(3),st
c0025f1f:	d9 c1                	fld    st(1)
c0025f21:	d8 c9                	fmul   st,st(1)
c0025f23:	de c1                	faddp  st(1),st
c0025f25:	de ea                	fsubp  st(2),st
c0025f27:	d9 c9                	fxch   st(1)
c0025f29:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025f2d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025f31:	de e1                	fsubrp st(1),st
c0025f33:	d8 2d 58 f5 02 c0    	fsubr  DWORD PTR ds:0xc002f558
c0025f39:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025f3d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025f41:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0025f45:	89 d3                	mov    ebx,edx
c0025f47:	01 f3                	add    ebx,esi
c0025f49:	81 fb ff ff 0f 00    	cmp    ebx,0xfffff
c0025f4f:	0f 8e a7 02 00 00    	jle    c00261fc <pow+0xa1c>
c0025f55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025f59:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0025f5d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025f61:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0025f65:	de c9                	fmulp  st(1),st
c0025f67:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025f6b:	e9 e0 f8 ff ff       	jmp    c0025850 <pow+0x70>
c0025f70:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025f74:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025f77:	e8 74 0f 00 00       	call   c0026ef0 <fabs>
c0025f7c:	85 ed                	test   ebp,ebp
c0025f7e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025f82:	0f 85 55 fb ff ff    	jne    c0025add <pow+0x2fd>
c0025f88:	89 f8                	mov    eax,edi
c0025f8a:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025f8f:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0025f94:	74 0b                	je     c0025fa1 <pow+0x7c1>
c0025f96:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0025f9b:	0f 85 3c fb ff ff    	jne    c0025add <pow+0x2fd>
c0025fa1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0025fa9:	85 f6                	test   esi,esi
c0025fab:	79 0a                	jns    c0025fb7 <pow+0x7d7>
c0025fad:	d9 e8                	fld1   
c0025faf:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0025fb3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025fb7:	85 ff                	test   edi,edi
c0025fb9:	0f 89 91 f8 ff ff    	jns    c0025850 <pow+0x70>
c0025fbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025fc3:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0025fc8:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
c0025fcc:	0f 85 10 02 00 00    	jne    c00261e2 <pow+0xa02>
c0025fd2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025fd6:	d8 e0                	fsub   st,st(0)
c0025fd8:	d8 f0                	fdiv   st,st(0)
c0025fda:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025fde:	e9 6d f8 ff ff       	jmp    c0025850 <pow+0x70>
c0025fe3:	d9 e8                	fld1   
c0025fe5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025fe9:	e9 62 f8 ff ff       	jmp    c0025850 <pow+0x70>
c0025fee:	85 f6                	test   esi,esi
c0025ff0:	0f 89 03 fa ff ff    	jns    c00259f9 <pow+0x219>
c0025ff6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025ffa:	d9 e0                	fchs   
c0025ffc:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026000:	e9 4b f8 ff ff       	jmp    c0025850 <pow+0x70>
c0026005:	89 d1                	mov    ecx,edx
c0026007:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
c002600d:	81 f9 ff cb 90 40    	cmp    ecx,0x4090cbff
c0026013:	0f 8e 4f 01 00 00    	jle    c0026168 <pow+0x988>
c0026019:	8d 8a 00 34 6f 3f    	lea    ecx,[edx+0x3f6f3400]
c002601f:	09 c1                	or     ecx,eax
c0026021:	0f 85 55 02 00 00    	jne    c002627c <pow+0xa9c>
c0026027:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002602b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002602f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026033:	d8 e1                	fsub   st,st(1)
c0026035:	df f2                	fcomip st,st(2)
c0026037:	0f 82 be fd ff ff    	jb     c0025dfb <pow+0x61b>
c002603d:	dd d8                	fstp   st(0)
c002603f:	dd d8                	fstp   st(0)
c0026041:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0026045:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026049:	e9 02 f8 ff ff       	jmp    c0025850 <pow+0x70>
c002604e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026052:	d8 c8                	fmul   st,st(0)
c0026054:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026058:	e9 f3 f7 ff ff       	jmp    c0025850 <pow+0x70>
c002605d:	d9 ee                	fldz   
c002605f:	31 d2                	xor    edx,edx
c0026061:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0026065:	d9 ee                	fldz   
c0026067:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c002606b:	d9 e8                	fld1   
c002606d:	e9 15 fb ff ff       	jmp    c0025b87 <pow+0x3a7>
c0026072:	81 7c 24 30 fe ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3feffffe
c002607a:	0f 8e 91 01 00 00    	jle    c0026211 <pow+0xa31>
c0026080:	81 7c 24 30 00 00 f0 3f 	cmp    DWORD PTR [esp+0x30],0x3ff00000
c0026088:	0f 8f da 01 00 00    	jg     c0026268 <pow+0xa88>
c002608e:	dd d8                	fstp   st(0)
c0026090:	dd d8                	fstp   st(0)
c0026092:	d9 e8                	fld1   
c0026094:	31 c0                	xor    eax,eax
c0026096:	dc 6c 24 28          	fsubr  QWORD PTR [esp+0x28]
c002609a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002609e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00260a2:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00260a6:	d9 c0                	fld    st(0)
c00260a8:	d8 0d b0 f5 02 c0    	fmul   DWORD PTR ds:0xc002f5b0
c00260ae:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00260b2:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00260b6:	d9 c1                	fld    st(1)
c00260b8:	dc 0d 28 f6 02 c0    	fmul   QWORD PTR ds:0xc002f628
c00260be:	d9 c2                	fld    st(2)
c00260c0:	d8 0d b4 f5 02 c0    	fmul   DWORD PTR ds:0xc002f5b4
c00260c6:	db 2d 10 f6 02 c0    	fld    TBYTE PTR ds:0xc002f610
c00260cc:	de e1                	fsubrp st(1),st
c00260ce:	d8 cb                	fmul   st,st(3)
c00260d0:	d8 2d 5c f5 02 c0    	fsubr  DWORD PTR ds:0xc002f55c
c00260d6:	d9 cb                	fxch   st(3)
c00260d8:	d8 c8                	fmul   st,st(0)
c00260da:	de cb                	fmulp  st(3),st
c00260dc:	d9 ca                	fxch   st(2)
c00260de:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00260e2:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00260e6:	dc 0d 30 f6 02 c0    	fmul   QWORD PTR ds:0xc002f630
c00260ec:	de ea                	fsubp  st(2),st
c00260ee:	d9 c9                	fxch   st(1)
c00260f0:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00260f4:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00260f8:	d9 c1                	fld    st(1)
c00260fa:	d8 c1                	fadd   st,st(1)
c00260fc:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0026100:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0026104:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026108:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002610c:	dc e2                	fsubr  st(2),st
c002610e:	d9 c9                	fxch   st(1)
c0026110:	de e2                	fsubrp st(2),st
c0026112:	d9 c9                	fxch   st(1)
c0026114:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0026118:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002611c:	e9 56 fc ff ff       	jmp    c0025d77 <pow+0x597>
c0026121:	85 c0                	test   eax,eax
c0026123:	0f 85 47 fe ff ff    	jne    c0025f70 <pow+0x790>
c0026129:	b8 14 00 00 00       	mov    eax,0x14
c002612e:	29 c8                	sub    eax,ecx
c0026130:	89 c1                	mov    ecx,eax
c0026132:	89 d8                	mov    eax,ebx
c0026134:	d3 f8                	sar    eax,cl
c0026136:	89 c2                	mov    edx,eax
c0026138:	d3 e2                	shl    edx,cl
c002613a:	39 da                	cmp    edx,ebx
c002613c:	0f 85 bc f7 ff ff    	jne    c00258fe <pow+0x11e>
c0026142:	83 e0 01             	and    eax,0x1
c0026145:	b9 02 00 00 00       	mov    ecx,0x2
c002614a:	29 c1                	sub    ecx,eax
c002614c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0026150:	e9 a9 f7 ff ff       	jmp    c00258fe <pow+0x11e>
c0026155:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026159:	d9 c0                	fld    st(0)
c002615b:	d8 c9                	fmul   st,st(1)
c002615d:	de c9                	fmulp  st(1),st
c002615f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026163:	e9 e8 f6 ff ff       	jmp    c0025850 <pow+0x70>
c0026168:	81 f9 00 00 e0 3f    	cmp    ecx,0x3fe00000
c002616e:	0f 8f 28 01 00 00    	jg     c002629c <pow+0xabc>
c0026174:	31 f6                	xor    esi,esi
c0026176:	31 c9                	xor    ecx,ecx
c0026178:	e9 fa fc ff ff       	jmp    c0025e77 <pow+0x697>
c002617d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026181:	d8 c8                	fmul   st,st(0)
c0026183:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0026187:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002618b:	d8 c8                	fmul   st,st(0)
c002618d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026191:	e9 ba f6 ff ff       	jmp    c0025850 <pow+0x70>
c0026196:	d9 05 a8 f5 02 c0    	fld    DWORD PTR ds:0xc002f5a8
c002619c:	ba 00 00 04 00       	mov    edx,0x40000
c00261a1:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00261a5:	dd 05 20 f6 02 c0    	fld    QWORD PTR ds:0xc002f620
c00261ab:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c00261af:	d9 05 ac f5 02 c0    	fld    DWORD PTR ds:0xc002f5ac
c00261b5:	e9 cd f9 ff ff       	jmp    c0025b87 <pow+0x3a7>
c00261ba:	85 f6                	test   esi,esi
c00261bc:	0f 8e 37 f8 ff ff    	jle    c00259f9 <pow+0x219>
c00261c2:	d9 05 a0 f5 02 c0    	fld    DWORD PTR ds:0xc002f5a0
c00261c8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00261cc:	e9 7f f6 ff ff       	jmp    c0025850 <pow+0x70>
c00261d1:	dd d8                	fstp   st(0)
c00261d3:	dd d8                	fstp   st(0)
c00261d5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00261d9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00261dd:	e9 6e f6 ff ff       	jmp    c0025850 <pow+0x70>
c00261e2:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00261e7:	0f 85 63 f6 ff ff    	jne    c0025850 <pow+0x70>
c00261ed:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00261f1:	d9 e0                	fchs   
c00261f3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00261f7:	e9 54 f6 ff ff       	jmp    c0025850 <pow+0x70>
c00261fc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026200:	89 04 24             	mov    DWORD PTR [esp],eax
c0026203:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026207:	e8 c0 13 00 00       	call   c00275cc <ldexp>
c002620c:	e9 50 fd ff ff       	jmp    c0025f61 <pow+0x781>
c0026211:	85 f6                	test   esi,esi
c0026213:	0f 99 c0             	setns  al
c0026216:	84 c0                	test   al,al
c0026218:	db c9                	fcmovne st,st(1)
c002621a:	dd d9                	fstp   st(1)
c002621c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026220:	e9 2b f6 ff ff       	jmp    c0025850 <pow+0x70>
c0026225:	dd d8                	fstp   st(0)
c0026227:	dd d8                	fstp   st(0)
c0026229:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002622d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026231:	e9 1a f6 ff ff       	jmp    c0025850 <pow+0x70>
c0026236:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c002623d:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0026244:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c002624b:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0026252:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026256:	dd 9c 24 a0 00 00 00 	fstp   QWORD PTR [esp+0xa0]
c002625d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0026263:	e9 d8 12 00 00       	jmp    c0027540 <sqrt>
c0026268:	85 f6                	test   esi,esi
c002626a:	0f 9e c0             	setle  al
c002626d:	84 c0                	test   al,al
c002626f:	db c9                	fcmovne st,st(1)
c0026271:	dd d9                	fstp   st(1)
c0026273:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026277:	e9 d4 f5 ff ff       	jmp    c0025850 <pow+0x70>
c002627c:	dd d8                	fstp   st(0)
c002627e:	dd d8                	fstp   st(0)
c0026280:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0026284:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026288:	e9 c3 f5 ff ff       	jmp    c0025850 <pow+0x70>
c002628d:	d9 05 a0 f5 02 c0    	fld    DWORD PTR ds:0xc002f5a0
c0026293:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026297:	e9 b4 f5 ff ff       	jmp    c0025850 <pow+0x70>
c002629c:	c1 f9 14             	sar    ecx,0x14
c002629f:	e9 62 fb ff ff       	jmp    c0025e06 <pow+0x626>
c00262a4:	66 90                	xchg   ax,ax
c00262a6:	66 90                	xchg   ax,ax
c00262a8:	66 90                	xchg   ax,ax
c00262aa:	66 90                	xchg   ax,ax
c00262ac:	66 90                	xchg   ax,ax
c00262ae:	66 90                	xchg   ax,ax

c00262b0 <sinh>:
c00262b0:	53                   	push   ebx
c00262b1:	83 ec 38             	sub    esp,0x38
c00262b4:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00262b8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00262bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262c0:	89 c3                	mov    ebx,eax
c00262c2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00262c8:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c00262ce:	0f 8f ec 00 00 00    	jg     c00263c0 <sinh+0x110>
c00262d4:	dd d8                	fstp   st(0)
c00262d6:	d9 e8                	fld1   
c00262d8:	85 c0                	test   eax,eax
c00262da:	0f 88 90 00 00 00    	js     c0026370 <sinh+0xc0>
c00262e0:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c00262e6:	d9 05 5c f5 02 c0    	fld    DWORD PTR ds:0xc002f55c
c00262ec:	0f 8f 8e 00 00 00    	jg     c0026380 <sinh+0xd0>
c00262f2:	dd d9                	fstp   st(1)
c00262f4:	eb 0c                	jmp    c0026302 <sinh+0x52>
c00262f6:	8d 76 00             	lea    esi,[esi+0x0]
c00262f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026300:	dd d9                	fstp   st(1)
c0026302:	81 fb ff ff 2f 3e    	cmp    ebx,0x3e2fffff
c0026308:	0f 8f d2 00 00 00    	jg     c00263e0 <sinh+0x130>
c002630e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026312:	d9 e8                	fld1   
c0026314:	d9 c1                	fld    st(1)
c0026316:	dc 05 c0 f6 02 c0    	fadd   QWORD PTR ds:0xc002f6c0
c002631c:	df f1                	fcomip st,st(1)
c002631e:	dd d8                	fstp   st(0)
c0026320:	77 3e                	ja     c0026360 <sinh+0xb0>
c0026322:	dd d8                	fstp   st(0)
c0026324:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0026328:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002632c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002632f:	e8 bc 0b 00 00       	call   c0026ef0 <fabs>
c0026334:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026337:	e8 24 07 00 00       	call   c0026a60 <expm1>
c002633c:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0026340:	d9 c1                	fld    st(1)
c0026342:	d8 c2                	fadd   st,st(2)
c0026344:	d9 c2                	fld    st(2)
c0026346:	d8 cb                	fmul   st,st(3)
c0026348:	d9 cb                	fxch   st(3)
c002634a:	d8 05 58 f5 02 c0    	fadd   DWORD PTR ds:0xc002f558
c0026350:	de fb                	fdivp  st(3),st
c0026352:	de e2                	fsubrp st(2),st
c0026354:	de c9                	fmulp  st(1),st
c0026356:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002635a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002635e:	eb 02                	jmp    c0026362 <sinh+0xb2>
c0026360:	dd d9                	fstp   st(1)
c0026362:	83 c4 38             	add    esp,0x38
c0026365:	5b                   	pop    ebx
c0026366:	c3                   	ret    
c0026367:	89 f6                	mov    esi,esi
c0026369:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026370:	d9 e0                	fchs   
c0026372:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0026378:	d9 05 b8 f6 02 c0    	fld    DWORD PTR ds:0xc002f6b8
c002637e:	7e 80                	jle    c0026300 <sinh+0x50>
c0026380:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c0026386:	0f 8e a4 00 00 00    	jle    c0026430 <sinh+0x180>
c002638c:	dd d8                	fstp   st(0)
c002638e:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c0026394:	0f 8e c6 00 00 00    	jle    c0026460 <sinh+0x1b0>
c002639a:	dd d8                	fstp   st(0)
c002639c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00263a0:	dc 0d c0 f6 02 c0    	fmul   QWORD PTR ds:0xc002f6c0
c00263a6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00263aa:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00263ae:	83 c4 38             	add    esp,0x38
c00263b1:	5b                   	pop    ebx
c00263b2:	c3                   	ret    
c00263b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00263b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00263c0:	d9 c0                	fld    st(0)
c00263c2:	de c1                	faddp  st(1),st
c00263c4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00263c8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00263cc:	83 c4 38             	add    esp,0x38
c00263cf:	5b                   	pop    ebx
c00263d0:	c3                   	ret    
c00263d1:	eb 0d                	jmp    c00263e0 <sinh+0x130>
c00263d3:	90                   	nop
c00263d4:	90                   	nop
c00263d5:	90                   	nop
c00263d6:	90                   	nop
c00263d7:	90                   	nop
c00263d8:	90                   	nop
c00263d9:	90                   	nop
c00263da:	90                   	nop
c00263db:	90                   	nop
c00263dc:	90                   	nop
c00263dd:	90                   	nop
c00263de:	90                   	nop
c00263df:	90                   	nop
c00263e0:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00263e4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00263e8:	dd 1c 24             	fstp   QWORD PTR [esp]
c00263eb:	e8 00 0b 00 00       	call   c0026ef0 <fabs>
c00263f0:	dd 1c 24             	fstp   QWORD PTR [esp]
c00263f3:	e8 68 06 00 00       	call   c0026a60 <expm1>
c00263f8:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c00263fe:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0026402:	0f 8e 38 ff ff ff    	jle    c0026340 <sinh+0x90>
c0026408:	d9 c1                	fld    st(1)
c002640a:	d8 05 58 f5 02 c0    	fadd   DWORD PTR ds:0xc002f558
c0026410:	d8 fa                	fdivr  st,st(2)
c0026412:	de c2                	faddp  st(2),st
c0026414:	de c9                	fmulp  st(1),st
c0026416:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002641a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002641e:	83 c4 38             	add    esp,0x38
c0026421:	5b                   	pop    ebx
c0026422:	c3                   	ret    
c0026423:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026429:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026430:	dd d9                	fstp   st(1)
c0026432:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0026436:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002643a:	dd 1c 24             	fstp   QWORD PTR [esp]
c002643d:	e8 ae 0a 00 00       	call   c0026ef0 <fabs>
c0026442:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026445:	e8 5e 10 00 00       	call   c00274a8 <exp>
c002644a:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c002644e:	de c9                	fmulp  st(1),st
c0026450:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0026454:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026458:	e9 05 ff ff ff       	jmp    c0026362 <sinh+0xb2>
c002645d:	8d 76 00             	lea    esi,[esi+0x0]
c0026460:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0026464:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026468:	dd 1c 24             	fstp   QWORD PTR [esp]
c002646b:	e8 80 0a 00 00       	call   c0026ef0 <fabs>
c0026470:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026475:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026479:	dd 1c 24             	fstp   QWORD PTR [esp]
c002647c:	e8 1f 00 00 00       	call   c00264a0 <__ldexp_exp>
c0026481:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0026485:	de c9                	fmulp  st(1),st
c0026487:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002648b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002648f:	e9 ce fe ff ff       	jmp    c0026362 <sinh+0xb2>
c0026494:	66 90                	xchg   ax,ax
c0026496:	66 90                	xchg   ax,ax
c0026498:	66 90                	xchg   ax,ax
c002649a:	66 90                	xchg   ax,ax
c002649c:	66 90                	xchg   ax,ax
c002649e:	66 90                	xchg   ax,ax

c00264a0 <__ldexp_exp>:
c00264a0:	53                   	push   ebx
c00264a1:	83 ec 28             	sub    esp,0x28
c00264a4:	dd 05 c8 f6 02 c0    	fld    QWORD PTR ds:0xc002f6c8
c00264aa:	dc 6c 24 30          	fsubr  QWORD PTR [esp+0x30]
c00264ae:	dd 1c 24             	fstp   QWORD PTR [esp]
c00264b1:	e8 f2 0f 00 00       	call   c00274a8 <exp>
c00264b6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00264ba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00264be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264c2:	89 da                	mov    edx,ebx
c00264c4:	89 d8                	mov    eax,ebx
c00264c6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00264ca:	c1 e8 14             	shr    eax,0x14
c00264cd:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00264d3:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c00264d9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00264dd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00264e1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00264e5:	8d 84 02 08 03 00 00 	lea    eax,[edx+eax*1+0x308]
c00264ec:	c1 e0 14             	shl    eax,0x14
c00264ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00264f3:	31 c0                	xor    eax,eax
c00264f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00264f9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00264fd:	de c9                	fmulp  st(1),st
c00264ff:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026503:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026507:	83 c4 28             	add    esp,0x28
c002650a:	5b                   	pop    ebx
c002650b:	c3                   	ret    
c002650c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0026510 <__ldexp_cexp>:
c0026510:	57                   	push   edi
c0026511:	56                   	push   esi
c0026512:	53                   	push   ebx
c0026513:	83 ec 60             	sub    esp,0x60
c0026516:	dd 44 24 7c          	fld    QWORD PTR [esp+0x7c]
c002651a:	dd 44 24 74          	fld    QWORD PTR [esp+0x74]
c002651e:	dd 14 24             	fst    QWORD PTR [esp]
c0026521:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0026525:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0026529:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c002652d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026531:	e8 6a 0f 00 00       	call   c00274a0 <creal>
c0026536:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002653a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c002653e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026541:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026545:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026549:	e8 42 0f 00 00       	call   c0027490 <cimag>
c002654e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026552:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026556:	dc 25 c8 f6 02 c0    	fsub   QWORD PTR ds:0xc002f6c8
c002655c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002655f:	e8 44 0f 00 00       	call   c00274a8 <exp>
c0026564:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0026568:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002656c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0026570:	89 fa                	mov    edx,edi
c0026572:	89 f8                	mov    eax,edi
c0026574:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0026578:	c1 e8 14             	shr    eax,0x14
c002657b:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0026581:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0026587:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002658b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0026592:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026596:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002659a:	8d 94 02 09 ff ff ff 	lea    edx,[edx+eax*1-0xf7]
c00265a1:	89 d1                	mov    ecx,edx
c00265a3:	c1 e9 1f             	shr    ecx,0x1f
c00265a6:	01 d1                	add    ecx,edx
c00265a8:	d1 f9                	sar    ecx,1
c00265aa:	8d 81 ff 03 00 00    	lea    eax,[ecx+0x3ff]
c00265b0:	29 ca                	sub    edx,ecx
c00265b2:	c1 e0 14             	shl    eax,0x14
c00265b5:	81 c2 ff 03 00 00    	add    edx,0x3ff
c00265bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00265bf:	c1 e2 14             	shl    edx,0x14
c00265c2:	31 c0                	xor    eax,eax
c00265c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00265c8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00265cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00265d0:	31 d2                	xor    edx,edx
c00265d2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00265d6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00265da:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00265de:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00265e2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00265e6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00265e9:	e8 12 03 00 00       	call   c0026900 <cos>
c00265ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00265f2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00265f6:	db 7c 24 48          	fstp   TBYTE PTR [esp+0x48]
c00265fa:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00265fe:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0026602:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0026606:	db 7c 24 20          	fstp   TBYTE PTR [esp+0x20]
c002660a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002660e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026611:	e8 fa 0b 00 00       	call   c0027210 <sin>
c0026616:	89 d8                	mov    eax,ebx
c0026618:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002661c:	db 6c 24 48          	fld    TBYTE PTR [esp+0x48]
c0026620:	dc c9                	fmul   st(1),st
c0026622:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0026626:	dc ca                	fmul   st(2),st
c0026628:	db 6c 24 20          	fld    TBYTE PTR [esp+0x20]
c002662c:	dc cb                	fmul   st(3),st
c002662e:	d9 cb                	fxch   st(3)
c0026630:	dd 1b                	fstp   QWORD PTR [ebx]
c0026632:	d9 cb                	fxch   st(3)
c0026634:	de c9                	fmulp  st(1),st
c0026636:	de ca                	fmulp  st(2),st
c0026638:	de c9                	fmulp  st(1),st
c002663a:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002663d:	83 c4 60             	add    esp,0x60
c0026640:	5b                   	pop    ebx
c0026641:	5e                   	pop    esi
c0026642:	5f                   	pop    edi
c0026643:	c2 04 00             	ret    0x4
c0026646:	66 90                	xchg   ax,ax
c0026648:	66 90                	xchg   ax,ax
c002664a:	66 90                	xchg   ax,ax
c002664c:	66 90                	xchg   ax,ax
c002664e:	66 90                	xchg   ax,ax

c0026650 <atan>:
c0026650:	56                   	push   esi
c0026651:	53                   	push   ebx
c0026652:	83 ec 24             	sub    esp,0x24
c0026655:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0026659:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002665d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0026661:	89 f3                	mov    ebx,esi
c0026663:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026669:	81 fb ff ff 0f 44    	cmp    ebx,0x440fffff
c002666f:	7e 5f                	jle    c00266d0 <atan+0x80>
c0026671:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0026677:	7f 0a                	jg     c0026683 <atan+0x33>
c0026679:	75 25                	jne    c00266a0 <atan+0x50>
c002667b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002667f:	85 c0                	test   eax,eax
c0026681:	74 1d                	je     c00266a0 <atan+0x50>
c0026683:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026687:	d8 c0                	fadd   st,st(0)
c0026689:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002668d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026691:	83 c4 24             	add    esp,0x24
c0026694:	5b                   	pop    ebx
c0026695:	5e                   	pop    esi
c0026696:	c3                   	ret    
c0026697:	89 f6                	mov    esi,esi
c0026699:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00266a0:	85 f6                	test   esi,esi
c00266a2:	dd 05 f8 f6 02 c0    	fld    QWORD PTR ds:0xc002f6f8
c00266a8:	0f 8e 22 01 00 00    	jle    c00267d0 <atan+0x180>
c00266ae:	dc 05 00 f5 02 c0    	fadd   QWORD PTR ds:0xc002f500
c00266b4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00266b8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00266bc:	83 c4 24             	add    esp,0x24
c00266bf:	5b                   	pop    ebx
c00266c0:	5e                   	pop    esi
c00266c1:	c3                   	ret    
c00266c2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00266c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00266d0:	81 fb ff ff db 3f    	cmp    ebx,0x3fdbffff
c00266d6:	0f 8f 34 01 00 00    	jg     c0026810 <atan+0x1c0>
c00266dc:	81 fb ff ff 3f 3e    	cmp    ebx,0x3e3fffff
c00266e2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00266e6:	0f 8e c4 00 00 00    	jle    c00267b0 <atan+0x160>
c00266ec:	eb 04                	jmp    c00266f2 <atan+0xa2>
c00266ee:	66 90                	xchg   ax,ax
c00266f0:	dd d8                	fstp   st(0)
c00266f2:	d9 ee                	fldz   
c00266f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00266f9:	d9 ee                	fldz   
c00266fb:	d9 c2                	fld    st(2)
c00266fd:	40                   	inc    eax
c00266fe:	d8 cb                	fmul   st,st(3)
c0026700:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026704:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026708:	d9 c0                	fld    st(0)
c002670a:	d8 c9                	fmul   st,st(1)
c002670c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026710:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026714:	d9 c0                	fld    st(0)
c0026716:	dc 0d 28 f7 02 c0    	fmul   QWORD PTR ds:0xc002f728
c002671c:	dc 05 30 f7 02 c0    	fadd   QWORD PTR ds:0xc002f730
c0026722:	d8 c9                	fmul   st,st(1)
c0026724:	dc 05 38 f7 02 c0    	fadd   QWORD PTR ds:0xc002f738
c002672a:	d8 c9                	fmul   st,st(1)
c002672c:	dc 05 40 f7 02 c0    	fadd   QWORD PTR ds:0xc002f740
c0026732:	d8 c9                	fmul   st,st(1)
c0026734:	dc 05 48 f7 02 c0    	fadd   QWORD PTR ds:0xc002f748
c002673a:	d8 c9                	fmul   st,st(1)
c002673c:	dc 05 50 f7 02 c0    	fadd   QWORD PTR ds:0xc002f750
c0026742:	de ca                	fmulp  st(2),st
c0026744:	d9 c9                	fxch   st(1)
c0026746:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002674a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002674e:	d9 c1                	fld    st(1)
c0026750:	dc 0d 58 f7 02 c0    	fmul   QWORD PTR ds:0xc002f758
c0026756:	dc 25 60 f7 02 c0    	fsub   QWORD PTR ds:0xc002f760
c002675c:	d8 ca                	fmul   st,st(2)
c002675e:	dc 25 68 f7 02 c0    	fsub   QWORD PTR ds:0xc002f768
c0026764:	d8 ca                	fmul   st,st(2)
c0026766:	dc 25 70 f7 02 c0    	fsub   QWORD PTR ds:0xc002f770
c002676c:	d8 ca                	fmul   st,st(2)
c002676e:	dc 25 78 f7 02 c0    	fsub   QWORD PTR ds:0xc002f778
c0026774:	de ca                	fmulp  st(2),st
c0026776:	d9 c9                	fxch   st(1)
c0026778:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002677c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026780:	de c1                	faddp  st(1),st
c0026782:	d8 cb                	fmul   st,st(3)
c0026784:	74 6a                	je     c00267f0 <atan+0x1a0>
c0026786:	85 f6                	test   esi,esi
c0026788:	de e2                	fsubrp st(2),st
c002678a:	d9 c9                	fxch   st(1)
c002678c:	de e2                	fsubrp st(2),st
c002678e:	de e1                	fsubrp st(1),st
c0026790:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026794:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026798:	0f 89 f3 fe ff ff    	jns    c0026691 <atan+0x41>
c002679e:	d9 e0                	fchs   
c00267a0:	83 c4 24             	add    esp,0x24
c00267a3:	5b                   	pop    ebx
c00267a4:	5e                   	pop    esi
c00267a5:	c3                   	ret    
c00267a6:	8d 76 00             	lea    esi,[esi+0x0]
c00267a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00267b0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00267b4:	d9 e8                	fld1   
c00267b6:	d9 c2                	fld    st(2)
c00267b8:	dc 05 68 f5 02 c0    	fadd   QWORD PTR ds:0xc002f568
c00267be:	df f1                	fcomip st,st(1)
c00267c0:	dd d8                	fstp   st(0)
c00267c2:	0f 86 28 ff ff ff    	jbe    c00266f0 <atan+0xa0>
c00267c8:	dd d9                	fstp   st(1)
c00267ca:	e9 c2 fe ff ff       	jmp    c0026691 <atan+0x41>
c00267cf:	90                   	nop
c00267d0:	dd 05 80 f5 02 c0    	fld    QWORD PTR ds:0xc002f580
c00267d6:	de e1                	fsubrp st(1),st
c00267d8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00267dc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00267e0:	e9 ac fe ff ff       	jmp    c0026691 <atan+0x41>
c00267e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00267e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00267f0:	dd da                	fstp   st(2)
c00267f2:	dd d8                	fstp   st(0)
c00267f4:	de e9                	fsubp  st(1),st
c00267f6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00267fa:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00267fe:	83 c4 24             	add    esp,0x24
c0026801:	5b                   	pop    ebx
c0026802:	5e                   	pop    esi
c0026803:	c3                   	ret    
c0026804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002680a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026810:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026814:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026817:	e8 d4 06 00 00       	call   c0026ef0 <fabs>
c002681c:	81 fb ff ff f2 3f    	cmp    ebx,0x3ff2ffff
c0026822:	7f 3c                	jg     c0026860 <atan+0x210>
c0026824:	81 fb ff ff e5 3f    	cmp    ebx,0x3fe5ffff
c002682a:	0f 8f a0 00 00 00    	jg     c00268d0 <atan+0x280>
c0026830:	d9 c0                	fld    st(0)
c0026832:	31 c0                	xor    eax,eax
c0026834:	d8 c1                	fadd   st,st(1)
c0026836:	d8 25 58 f5 02 c0    	fsub   DWORD PTR ds:0xc002f558
c002683c:	d9 c9                	fxch   st(1)
c002683e:	d8 05 c8 f5 02 c0    	fadd   DWORD PTR ds:0xc002f5c8
c0026844:	de f9                	fdivp  st(1),st
c0026846:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002684a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002684e:	dd 05 18 f7 02 c0    	fld    QWORD PTR ds:0xc002f718
c0026854:	dd 05 20 f7 02 c0    	fld    QWORD PTR ds:0xc002f720
c002685a:	e9 9c fe ff ff       	jmp    c00266fb <atan+0xab>
c002685f:	90                   	nop
c0026860:	81 fb ff 7f 03 40    	cmp    ebx,0x40037fff
c0026866:	7f 38                	jg     c00268a0 <atan+0x250>
c0026868:	d9 05 ac f5 02 c0    	fld    DWORD PTR ds:0xc002f5ac
c002686e:	b8 02 00 00 00       	mov    eax,0x2
c0026873:	d9 c1                	fld    st(1)
c0026875:	d8 e1                	fsub   st,st(1)
c0026877:	d9 ca                	fxch   st(2)
c0026879:	de c9                	fmulp  st(1),st
c002687b:	d8 05 58 f5 02 c0    	fadd   DWORD PTR ds:0xc002f558
c0026881:	de f9                	fdivp  st(1),st
c0026883:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026887:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002688b:	dd 05 08 f7 02 c0    	fld    QWORD PTR ds:0xc002f708
c0026891:	dd 05 10 f7 02 c0    	fld    QWORD PTR ds:0xc002f710
c0026897:	e9 5f fe ff ff       	jmp    c00266fb <atan+0xab>
c002689c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00268a0:	d8 3d 80 f7 02 c0    	fdivr  DWORD PTR ds:0xc002f780
c00268a6:	b8 03 00 00 00       	mov    eax,0x3
c00268ab:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00268af:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00268b3:	dd 05 60 f5 02 c0    	fld    QWORD PTR ds:0xc002f560
c00268b9:	dd 05 00 f5 02 c0    	fld    QWORD PTR ds:0xc002f500
c00268bf:	e9 37 fe ff ff       	jmp    c00266fb <atan+0xab>
c00268c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00268ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00268d0:	d9 e8                	fld1   
c00268d2:	b8 01 00 00 00       	mov    eax,0x1
c00268d7:	d9 c1                	fld    st(1)
c00268d9:	d8 e1                	fsub   st,st(1)
c00268db:	d9 ca                	fxch   st(2)
c00268dd:	de c1                	faddp  st(1),st
c00268df:	de f9                	fdivp  st(1),st
c00268e1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00268e5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00268e9:	dd 05 00 f7 02 c0    	fld    QWORD PTR ds:0xc002f700
c00268ef:	dd 05 70 f5 02 c0    	fld    QWORD PTR ds:0xc002f570
c00268f5:	e9 01 fe ff ff       	jmp    c00266fb <atan+0xab>
c00268fa:	66 90                	xchg   ax,ax
c00268fc:	66 90                	xchg   ax,ax
c00268fe:	66 90                	xchg   ax,ax

c0026900 <cos>:
c0026900:	83 ec 5c             	sub    esp,0x5c
c0026903:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0026907:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002690b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002690f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026914:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0026919:	7f 55                	jg     c0026970 <cos+0x70>
c002691b:	3d 9d a0 46 3e       	cmp    eax,0x3e46a09d
c0026920:	7f 2e                	jg     c0026950 <cos+0x50>
c0026922:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0026926:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002692b:	66 0d 00 0c          	or     ax,0xc00
c002692f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0026934:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0026938:	db 5c 24 30          	fistp  DWORD PTR [esp+0x30]
c002693c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0026940:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026944:	85 c0                	test   eax,eax
c0026946:	0f 84 94 00 00 00    	je     c00269e0 <cos+0xe0>
c002694c:	eb 04                	jmp    c0026952 <cos+0x52>
c002694e:	66 90                	xchg   ax,ax
c0026950:	dd d8                	fstp   st(0)
c0026952:	d9 ee                	fldz   
c0026954:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026958:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002695c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002695f:	e8 ac 11 00 00       	call   c0027b10 <__kernel_cos>
c0026964:	83 c4 5c             	add    esp,0x5c
c0026967:	c3                   	ret    
c0026968:	90                   	nop
c0026969:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026970:	dd d8                	fstp   st(0)
c0026972:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0026977:	7e 17                	jle    c0026990 <cos+0x90>
c0026979:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002697d:	d8 e0                	fsub   st,st(0)
c002697f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026983:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026987:	83 c4 5c             	add    esp,0x5c
c002698a:	c3                   	ret    
c002698b:	90                   	nop
c002698c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026990:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026994:	8d 44 24 40          	lea    eax,[esp+0x40]
c0026998:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002699c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002699f:	e8 3c 0c 00 00       	call   c00275e0 <__ieee754_rem_pio2>
c00269a4:	83 e0 03             	and    eax,0x3
c00269a7:	83 f8 01             	cmp    eax,0x1
c00269aa:	0f 84 80 00 00 00    	je     c0026a30 <cos+0x130>
c00269b0:	83 f8 02             	cmp    eax,0x2
c00269b3:	74 5b                	je     c0026a10 <cos+0x110>
c00269b5:	85 c0                	test   eax,eax
c00269b7:	74 37                	je     c00269f0 <cos+0xf0>
c00269b9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00269bd:	b8 01 00 00 00       	mov    eax,0x1
c00269c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00269c6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00269ca:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00269ce:	dd 1c 24             	fstp   QWORD PTR [esp]
c00269d1:	e8 ba 1b 00 00       	call   c0028590 <__kernel_sin>
c00269d6:	eb 8c                	jmp    c0026964 <cos+0x64>
c00269d8:	90                   	nop
c00269d9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00269e0:	d9 e8                	fld1   
c00269e2:	83 c4 5c             	add    esp,0x5c
c00269e5:	c3                   	ret    
c00269e6:	8d 76 00             	lea    esi,[esi+0x0]
c00269e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00269f0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00269f4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00269f8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00269fc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00269ff:	e8 0c 11 00 00       	call   c0027b10 <__kernel_cos>
c0026a04:	e9 5b ff ff ff       	jmp    c0026964 <cos+0x64>
c0026a09:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026a10:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026a14:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026a18:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026a1c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026a1f:	e8 ec 10 00 00       	call   c0027b10 <__kernel_cos>
c0026a24:	d9 e0                	fchs   
c0026a26:	e9 39 ff ff ff       	jmp    c0026964 <cos+0x64>
c0026a2b:	90                   	nop
c0026a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026a30:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026a34:	ba 01 00 00 00       	mov    edx,0x1
c0026a39:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0026a3d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026a41:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026a45:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026a48:	e8 43 1b 00 00       	call   c0028590 <__kernel_sin>
c0026a4d:	d9 e0                	fchs   
c0026a4f:	e9 10 ff ff ff       	jmp    c0026964 <cos+0x64>
c0026a54:	66 90                	xchg   ax,ax
c0026a56:	66 90                	xchg   ax,ax
c0026a58:	66 90                	xchg   ax,ax
c0026a5a:	66 90                	xchg   ax,ax
c0026a5c:	66 90                	xchg   ax,ax
c0026a5e:	66 90                	xchg   ax,ax

c0026a60 <expm1>:
c0026a60:	d9 05 90 f7 02 c0    	fld    DWORD PTR ds:0xc002f790
c0026a66:	83 ec 24             	sub    esp,0x24
c0026a69:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026a6d:	dd 14 24             	fst    QWORD PTR [esp]
c0026a70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026a74:	89 d0                	mov    eax,edx
c0026a76:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a7b:	3d 79 68 43 40       	cmp    eax,0x40436879
c0026a80:	0f 86 ea 00 00 00    	jbe    c0026b70 <expm1+0x110>
c0026a86:	dd d9                	fstp   st(1)
c0026a88:	3d 41 2e 86 40       	cmp    eax,0x40862e41
c0026a8d:	76 51                	jbe    c0026ae0 <expm1+0x80>
c0026a8f:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0026a94:	76 2a                	jbe    c0026ac0 <expm1+0x60>
c0026a96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026a99:	89 d1                	mov    ecx,edx
c0026a9b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0026aa1:	09 c1                	or     ecx,eax
c0026aa3:	0f 84 b7 03 00 00    	je     c0026e60 <expm1+0x400>
c0026aa9:	d9 c0                	fld    st(0)
c0026aab:	de c1                	faddp  st(1),st
c0026aad:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026ab1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026ab5:	e9 0a 02 00 00       	jmp    c0026cc4 <expm1+0x264>
c0026aba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026ac0:	dd d8                	fstp   st(0)
c0026ac2:	dd 05 a8 f7 02 c0    	fld    QWORD PTR ds:0xc002f7a8
c0026ac8:	dd 04 24             	fld    QWORD PTR [esp]
c0026acb:	df f1                	fcomip st,st(1)
c0026acd:	dd d8                	fstp   st(0)
c0026acf:	0f 87 cb 03 00 00    	ja     c0026ea0 <expm1+0x440>
c0026ad5:	eb 0b                	jmp    c0026ae2 <expm1+0x82>
c0026ad7:	89 f6                	mov    esi,esi
c0026ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026ae0:	dd d8                	fstp   st(0)
c0026ae2:	85 d2                	test   edx,edx
c0026ae4:	dd 04 24             	fld    QWORD PTR [esp]
c0026ae7:	0f 88 e3 01 00 00    	js     c0026cd0 <expm1+0x270>
c0026aed:	d9 c0                	fld    st(0)
c0026aef:	dc 0d 30 f6 02 c0    	fmul   QWORD PTR ds:0xc002f630
c0026af5:	d9 05 5c f5 02 c0    	fld    DWORD PTR ds:0xc002f55c
c0026afb:	d9 7c 24 16          	fnstcw WORD PTR [esp+0x16]
c0026aff:	de c1                	faddp  st(1),st
c0026b01:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0026b06:	66 0d 00 0c          	or     ax,0xc00
c0026b0a:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0026b0f:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0026b13:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0026b17:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c0026b1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026b22:	db 04 24             	fild   DWORD PTR [esp]
c0026b25:	d9 c0                	fld    st(0)
c0026b27:	dc 0d b8 f7 02 c0    	fmul   QWORD PTR ds:0xc002f7b8
c0026b2d:	de ea                	fsubp  st(2),st
c0026b2f:	d9 c9                	fxch   st(1)
c0026b31:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026b35:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026b39:	d9 c9                	fxch   st(1)
c0026b3b:	dc 0d a0 f7 02 c0    	fmul   QWORD PTR ds:0xc002f7a0
c0026b41:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026b45:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026b49:	d9 c1                	fld    st(1)
c0026b4b:	d8 e1                	fsub   st,st(1)
c0026b4d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026b50:	dd 04 24             	fld    QWORD PTR [esp]
c0026b53:	dc ea                	fsub   st(2),st
c0026b55:	d9 ca                	fxch   st(2)
c0026b57:	de e1                	fsubrp st(1),st
c0026b59:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026b5d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026b61:	eb 2c                	jmp    c0026b8f <expm1+0x12f>
c0026b63:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026b69:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026b70:	dd d8                	fstp   st(0)
c0026b72:	3d 42 2e d6 3f       	cmp    eax,0x3fd62e42
c0026b77:	dd 04 24             	fld    QWORD PTR [esp]
c0026b7a:	0f 87 c0 01 00 00    	ja     c0026d40 <expm1+0x2e0>
c0026b80:	31 c9                	xor    ecx,ecx
c0026b82:	3d ff ff 8f 3c       	cmp    eax,0x3c8fffff
c0026b87:	0f 86 f3 01 00 00    	jbe    c0026d80 <expm1+0x320>
c0026b8d:	d9 c9                	fxch   st(1)
c0026b8f:	d9 05 5c f5 02 c0    	fld    DWORD PTR ds:0xc002f55c
c0026b95:	85 c9                	test   ecx,ecx
c0026b97:	d9 c2                	fld    st(2)
c0026b99:	d8 c9                	fmul   st,st(1)
c0026b9b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026b9f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026ba3:	d9 c0                	fld    st(0)
c0026ba5:	d8 cc                	fmul   st,st(4)
c0026ba7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026bab:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026baf:	d9 c0                	fld    st(0)
c0026bb1:	dc 0d c0 f7 02 c0    	fmul   QWORD PTR ds:0xc002f7c0
c0026bb7:	dc 05 c8 f7 02 c0    	fadd   QWORD PTR ds:0xc002f7c8
c0026bbd:	d8 c9                	fmul   st,st(1)
c0026bbf:	dc 25 d0 f7 02 c0    	fsub   QWORD PTR ds:0xc002f7d0
c0026bc5:	d8 c9                	fmul   st,st(1)
c0026bc7:	dc 05 d8 f7 02 c0    	fadd   QWORD PTR ds:0xc002f7d8
c0026bcd:	d8 c9                	fmul   st,st(1)
c0026bcf:	dc 25 e0 f7 02 c0    	fsub   QWORD PTR ds:0xc002f7e0
c0026bd5:	d8 c9                	fmul   st,st(1)
c0026bd7:	d9 e8                	fld1   
c0026bd9:	dc c1                	fadd   st(1),st
c0026bdb:	d9 c9                	fxch   st(1)
c0026bdd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026be1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026be5:	dc cb                	fmul   st(3),st
c0026be7:	d9 cb                	fxch   st(3)
c0026be9:	d8 2d bc f5 02 c0    	fsubr  DWORD PTR ds:0xc002f5bc
c0026bef:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026bf3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026bf7:	dc eb                	fsub   st(3),st
c0026bf9:	d8 ce                	fmul   st,st(6)
c0026bfb:	d8 2d 84 f7 02 c0    	fsubr  DWORD PTR ds:0xc002f784
c0026c01:	de fb                	fdivp  st(3),st
c0026c03:	d9 ca                	fxch   st(2)
c0026c05:	d8 c9                	fmul   st,st(1)
c0026c07:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026c0b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026c0f:	0f 84 9b 00 00 00    	je     c0026cb0 <expm1+0x250>
c0026c15:	89 c8                	mov    eax,ecx
c0026c17:	c1 e0 14             	shl    eax,0x14
c0026c1a:	05 00 00 f0 3f       	add    eax,0x3ff00000
c0026c1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c23:	31 c0                	xor    eax,eax
c0026c25:	83 f9 ff             	cmp    ecx,0xffffffff
c0026c28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c2c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0026c30:	d9 c9                	fxch   st(1)
c0026c32:	d8 e5                	fsub   st,st(5)
c0026c34:	d8 ce                	fmul   st,st(6)
c0026c36:	de e5                	fsubrp st(5),st
c0026c38:	d9 cc                	fxch   st(4)
c0026c3a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026c3e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026c42:	de e1                	fsubrp st(1),st
c0026c44:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026c48:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026c4c:	0f 84 9e 01 00 00    	je     c0026df0 <expm1+0x390>
c0026c52:	83 f9 01             	cmp    ecx,0x1
c0026c55:	0f 84 55 01 00 00    	je     c0026db0 <expm1+0x350>
c0026c5b:	dd da                	fstp   st(2)
c0026c5d:	d9 c9                	fxch   st(1)
c0026c5f:	8d 41 01             	lea    eax,[ecx+0x1]
c0026c62:	83 f8 39             	cmp    eax,0x39
c0026c65:	0f 87 95 00 00 00    	ja     c0026d00 <expm1+0x2a0>
c0026c6b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0026c72:	83 f9 13             	cmp    ecx,0x13
c0026c75:	0f 8f b5 01 00 00    	jg     c0026e30 <expm1+0x3d0>
c0026c7b:	dd d9                	fstp   st(1)
c0026c7d:	b8 00 00 20 00       	mov    eax,0x200000
c0026c82:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0026c87:	d3 f8                	sar    eax,cl
c0026c89:	29 c2                	sub    edx,eax
c0026c8b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026c8f:	dd 04 24             	fld    QWORD PTR [esp]
c0026c92:	d9 cb                	fxch   st(3)
c0026c94:	de e9                	fsubp  st(1),st
c0026c96:	de ea                	fsubp  st(2),st
c0026c98:	d9 c9                	fxch   st(1)
c0026c9a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026c9e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026ca2:	de c9                	fmulp  st(1),st
c0026ca4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026ca8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026cac:	83 c4 24             	add    esp,0x24
c0026caf:	c3                   	ret    
c0026cb0:	dd db                	fstp   st(3)
c0026cb2:	dd db                	fstp   st(3)
c0026cb4:	dd d8                	fstp   st(0)
c0026cb6:	d8 ca                	fmul   st,st(2)
c0026cb8:	de e1                	fsubrp st(1),st
c0026cba:	de e9                	fsubp  st(1),st
c0026cbc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026cc0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026cc4:	83 c4 24             	add    esp,0x24
c0026cc7:	c3                   	ret    
c0026cc8:	90                   	nop
c0026cc9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026cd0:	d9 ee                	fldz   
c0026cd2:	d9 c1                	fld    st(1)
c0026cd4:	dc 05 b0 f7 02 c0    	fadd   QWORD PTR ds:0xc002f7b0
c0026cda:	d9 c9                	fxch   st(1)
c0026cdc:	df f1                	fcomip st,st(1)
c0026cde:	dd d8                	fstp   st(0)
c0026ce0:	0f 87 8a 01 00 00    	ja     c0026e70 <expm1+0x410>
c0026ce6:	d9 c0                	fld    st(0)
c0026ce8:	dc 0d 30 f6 02 c0    	fmul   QWORD PTR ds:0xc002f630
c0026cee:	d9 05 b8 f6 02 c0    	fld    DWORD PTR ds:0xc002f6b8
c0026cf4:	e9 02 fe ff ff       	jmp    c0026afb <expm1+0x9b>
c0026cf9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026d00:	de e3                	fsubrp st(3),st
c0026d02:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0026d08:	de e2                	fsubrp st(2),st
c0026d0a:	d9 c9                	fxch   st(1)
c0026d0c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026d10:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d14:	0f 84 96 01 00 00    	je     c0026eb0 <expm1+0x450>
c0026d1a:	de c9                	fmulp  st(1),st
c0026d1c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026d20:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d24:	d9 e8                	fld1   
c0026d26:	de e9                	fsubp  st(1),st
c0026d28:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026d2c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d30:	eb 92                	jmp    c0026cc4 <expm1+0x264>
c0026d32:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026d39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026d40:	dd d9                	fstp   st(1)
c0026d42:	3d b1 a2 f0 3f       	cmp    eax,0x3ff0a2b1
c0026d47:	0f 87 7a 01 00 00    	ja     c0026ec7 <expm1+0x467>
c0026d4d:	85 d2                	test   edx,edx
c0026d4f:	0f 88 bb 00 00 00    	js     c0026e10 <expm1+0x3b0>
c0026d55:	dc 25 b8 f7 02 c0    	fsub   QWORD PTR ds:0xc002f7b8
c0026d5b:	b9 01 00 00 00       	mov    ecx,0x1
c0026d60:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026d64:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d68:	dd 05 a0 f7 02 c0    	fld    QWORD PTR ds:0xc002f7a0
c0026d6e:	e9 d6 fd ff ff       	jmp    c0026b49 <expm1+0xe9>
c0026d73:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026d79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026d80:	dd d9                	fstp   st(1)
c0026d82:	d9 c0                	fld    st(0)
c0026d84:	dc 05 68 f5 02 c0    	fadd   QWORD PTR ds:0xc002f568
c0026d8a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c0026d8e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d92:	de e1                	fsubrp st(1),st
c0026d94:	de e9                	fsubp  st(1),st
c0026d96:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026d9a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d9e:	83 c4 24             	add    esp,0x24
c0026da1:	c3                   	ret    
c0026da2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026da9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026db0:	dd db                	fstp   st(3)
c0026db2:	d9 c9                	fxch   st(1)
c0026db4:	d9 ca                	fxch   st(2)
c0026db6:	dd 04 24             	fld    QWORD PTR [esp]
c0026db9:	d9 05 88 f7 02 c0    	fld    DWORD PTR ds:0xc002f788
c0026dbf:	df f1                	fcomip st,st(1)
c0026dc1:	dd d8                	fstp   st(0)
c0026dc3:	0f 86 b7 00 00 00    	jbe    c0026e80 <expm1+0x420>
c0026dc9:	dd d9                	fstp   st(1)
c0026dcb:	d9 ca                	fxch   st(2)
c0026dcd:	de c1                	faddp  st(1),st
c0026dcf:	de e9                	fsubp  st(1),st
c0026dd1:	d8 0d 8c f7 02 c0    	fmul   DWORD PTR ds:0xc002f78c
c0026dd7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026ddb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026ddf:	e9 e0 fe ff ff       	jmp    c0026cc4 <expm1+0x264>
c0026de4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026dea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026df0:	dd db                	fstp   st(3)
c0026df2:	dd d8                	fstp   st(0)
c0026df4:	d9 c9                	fxch   st(1)
c0026df6:	de ea                	fsubp  st(2),st
c0026df8:	dc c9                	fmul   st(1),st
c0026dfa:	de e9                	fsubp  st(1),st
c0026dfc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026e00:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026e04:	e9 bb fe ff ff       	jmp    c0026cc4 <expm1+0x264>
c0026e09:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026e10:	dc 05 b8 f7 02 c0    	fadd   QWORD PTR ds:0xc002f7b8
c0026e16:	b9 ff ff ff ff       	mov    ecx,0xffffffff
c0026e1b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026e1f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026e23:	dd 05 98 f7 02 c0    	fld    QWORD PTR ds:0xc002f798
c0026e29:	e9 1b fd ff ff       	jmp    c0026b49 <expm1+0xe9>
c0026e2e:	66 90                	xchg   ax,ax
c0026e30:	b8 ff 03 00 00       	mov    eax,0x3ff
c0026e35:	29 c8                	sub    eax,ecx
c0026e37:	c1 e0 14             	shl    eax,0x14
c0026e3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026e3e:	dd 04 24             	fld    QWORD PTR [esp]
c0026e41:	de c1                	faddp  st(1),st
c0026e43:	de eb                	fsubp  st(3),st
c0026e45:	d9 ca                	fxch   st(2)
c0026e47:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026e4b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026e4f:	de c2                	faddp  st(2),st
c0026e51:	d9 c9                	fxch   st(1)
c0026e53:	e9 42 fe ff ff       	jmp    c0026c9a <expm1+0x23a>
c0026e58:	90                   	nop
c0026e59:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026e60:	dd d8                	fstp   st(0)
c0026e62:	85 d2                	test   edx,edx
c0026e64:	78 0c                	js     c0026e72 <expm1+0x412>
c0026e66:	dd 04 24             	fld    QWORD PTR [esp]
c0026e69:	e9 56 fe ff ff       	jmp    c0026cc4 <expm1+0x264>
c0026e6e:	66 90                	xchg   ax,ax
c0026e70:	dd d8                	fstp   st(0)
c0026e72:	d9 e8                	fld1   
c0026e74:	d9 e0                	fchs   
c0026e76:	e9 49 fe ff ff       	jmp    c0026cc4 <expm1+0x264>
c0026e7b:	90                   	nop
c0026e7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026e80:	dd da                	fstp   st(2)
c0026e82:	d9 c9                	fxch   st(1)
c0026e84:	de ea                	fsubp  st(2),st
c0026e86:	d9 c9                	fxch   st(1)
c0026e88:	d8 c0                	fadd   st,st(0)
c0026e8a:	de c1                	faddp  st(1),st
c0026e8c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026e90:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026e94:	e9 2b fe ff ff       	jmp    c0026cc4 <expm1+0x264>
c0026e99:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026ea0:	d9 05 a0 f5 02 c0    	fld    DWORD PTR ds:0xc002f5a0
c0026ea6:	e9 19 fe ff ff       	jmp    c0026cc4 <expm1+0x264>
c0026eab:	90                   	nop
c0026eac:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026eb0:	dd d9                	fstp   st(1)
c0026eb2:	d8 c0                	fadd   st,st(0)
c0026eb4:	dc 0d e8 f7 02 c0    	fmul   QWORD PTR ds:0xc002f7e8
c0026eba:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026ebe:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026ec2:	e9 5d fe ff ff       	jmp    c0026d24 <expm1+0x2c4>
c0026ec7:	d9 c0                	fld    st(0)
c0026ec9:	85 d2                	test   edx,edx
c0026ecb:	dc 0d 30 f6 02 c0    	fmul   QWORD PTR ds:0xc002f630
c0026ed1:	0f 88 17 fe ff ff    	js     c0026cee <expm1+0x28e>
c0026ed7:	d9 05 5c f5 02 c0    	fld    DWORD PTR ds:0xc002f55c
c0026edd:	e9 19 fc ff ff       	jmp    c0026afb <expm1+0x9b>
c0026ee2:	66 90                	xchg   ax,ax
c0026ee4:	66 90                	xchg   ax,ax
c0026ee6:	66 90                	xchg   ax,ax
c0026ee8:	66 90                	xchg   ax,ax
c0026eea:	66 90                	xchg   ax,ax
c0026eec:	66 90                	xchg   ax,ax
c0026eee:	66 90                	xchg   ax,ax

c0026ef0 <fabs>:
c0026ef0:	83 ec 0c             	sub    esp,0xc
c0026ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ef7:	89 04 24             	mov    DWORD PTR [esp],eax
c0026efa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026efe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026f07:	dd 04 24             	fld    QWORD PTR [esp]
c0026f0a:	83 c4 0c             	add    esp,0xc
c0026f0d:	c3                   	ret    
c0026f0e:	66 90                	xchg   ax,ax

c0026f10 <frexp>:
c0026f10:	53                   	push   ebx
c0026f11:	83 ec 10             	sub    esp,0x10
c0026f14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026f18:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0026f1c:	dd 14 24             	fst    QWORD PTR [esp]
c0026f1f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026f23:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c0026f29:	89 d0                	mov    eax,edx
c0026f2b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f30:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0026f35:	7f 59                	jg     c0026f90 <frexp+0x80>
c0026f37:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0026f3a:	09 c3                	or     ebx,eax
c0026f3c:	74 62                	je     c0026fa0 <frexp+0x90>
c0026f3e:	31 db                	xor    ebx,ebx
c0026f40:	f7 c2 00 00 f0 7f    	test   edx,0x7ff00000
c0026f46:	75 28                	jne    c0026f70 <frexp+0x60>
c0026f48:	d9 05 f0 f7 02 c0    	fld    DWORD PTR ds:0xc002f7f0
c0026f4e:	bb ca ff ff ff       	mov    ebx,0xffffffca
c0026f53:	de c9                	fmulp  st(1),st
c0026f55:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026f58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026f5c:	89 d0                	mov    eax,edx
c0026f5e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f63:	eb 0d                	jmp    c0026f72 <frexp+0x62>
c0026f65:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026f69:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026f70:	dd d8                	fstp   st(0)
c0026f72:	c1 f8 14             	sar    eax,0x14
c0026f75:	81 e2 ff ff 0f 80    	and    edx,0x800fffff
c0026f7b:	8d 84 03 02 fc ff ff 	lea    eax,[ebx+eax*1-0x3fe]
c0026f82:	81 ca 00 00 e0 3f    	or     edx,0x3fe00000
c0026f88:	89 01                	mov    DWORD PTR [ecx],eax
c0026f8a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026f8e:	eb 12                	jmp    c0026fa2 <frexp+0x92>
c0026f90:	dd d8                	fstp   st(0)
c0026f92:	eb 0e                	jmp    c0026fa2 <frexp+0x92>
c0026f94:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026f9a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026fa0:	dd d8                	fstp   st(0)
c0026fa2:	dd 04 24             	fld    QWORD PTR [esp]
c0026fa5:	83 c4 10             	add    esp,0x10
c0026fa8:	5b                   	pop    ebx
c0026fa9:	c3                   	ret    
c0026faa:	66 90                	xchg   ax,ax
c0026fac:	66 90                	xchg   ax,ax
c0026fae:	66 90                	xchg   ax,ax

c0026fb0 <modf>:
c0026fb0:	53                   	push   ebx
c0026fb1:	83 ec 18             	sub    esp,0x18
c0026fb4:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0026fb8:	dd 14 24             	fst    QWORD PTR [esp]
c0026fbb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026fbf:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0026fc2:	89 d0                	mov    eax,edx
c0026fc4:	c1 f8 14             	sar    eax,0x14
c0026fc7:	25 ff 07 00 00       	and    eax,0x7ff
c0026fcc:	8d 88 01 fc ff ff    	lea    ecx,[eax-0x3ff]
c0026fd2:	83 f9 13             	cmp    ecx,0x13
c0026fd5:	7f 49                	jg     c0027020 <modf+0x70>
c0026fd7:	85 c9                	test   ecx,ecx
c0026fd9:	0f 88 f1 00 00 00    	js     c00270d0 <modf+0x120>
c0026fdf:	dd d8                	fstp   st(0)
c0026fe1:	b8 ff ff 0f 00       	mov    eax,0xfffff
c0026fe6:	d3 f8                	sar    eax,cl
c0026fe8:	89 d1                	mov    ecx,edx
c0026fea:	21 c1                	and    ecx,eax
c0026fec:	09 d9                	or     ecx,ebx
c0026fee:	0f 84 ac 00 00 00    	je     c00270a0 <modf+0xf0>
c0026ff4:	f7 d0                	not    eax
c0026ff6:	21 d0                	and    eax,edx
c0026ff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ffc:	31 c0                	xor    eax,eax
c0026ffe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027002:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027006:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c002700a:	dd 10                	fst    QWORD PTR [eax]
c002700c:	dd 04 24             	fld    QWORD PTR [esp]
c002700f:	de e1                	fsubrp st(1),st
c0027011:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0027015:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0027019:	83 c4 18             	add    esp,0x18
c002701c:	5b                   	pop    ebx
c002701d:	c3                   	ret    
c002701e:	66 90                	xchg   ax,ax
c0027020:	dd d8                	fstp   st(0)
c0027022:	83 f9 33             	cmp    ecx,0x33
c0027025:	7e 39                	jle    c0027060 <modf+0xb0>
c0027027:	81 f9 00 04 00 00    	cmp    ecx,0x400
c002702d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027031:	0f 84 e9 00 00 00    	je     c0027120 <modf+0x170>
c0027037:	dd 04 24             	fld    QWORD PTR [esp]
c002703a:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027040:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0027047:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002704b:	dd 18                	fstp   QWORD PTR [eax]
c002704d:	dd 04 24             	fld    QWORD PTR [esp]
c0027050:	83 c4 18             	add    esp,0x18
c0027053:	5b                   	pop    ebx
c0027054:	c3                   	ret    
c0027055:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027059:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027060:	8d 88 ed fb ff ff    	lea    ecx,[eax-0x413]
c0027066:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002706b:	d3 e8                	shr    eax,cl
c002706d:	85 d8                	test   eax,ebx
c002706f:	75 7f                	jne    c00270f0 <modf+0x140>
c0027071:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027075:	81 e2 00 00 00 80    	and    edx,0x80000000
c002707b:	dd 04 24             	fld    QWORD PTR [esp]
c002707e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0027085:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027089:	dd 18                	fstp   QWORD PTR [eax]
c002708b:	dd 04 24             	fld    QWORD PTR [esp]
c002708e:	83 c4 18             	add    esp,0x18
c0027091:	5b                   	pop    ebx
c0027092:	c3                   	ret    
c0027093:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027099:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00270a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00270a4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00270aa:	dd 04 24             	fld    QWORD PTR [esp]
c00270ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00270b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00270b8:	dd 18                	fstp   QWORD PTR [eax]
c00270ba:	dd 04 24             	fld    QWORD PTR [esp]
c00270bd:	83 c4 18             	add    esp,0x18
c00270c0:	5b                   	pop    ebx
c00270c1:	c3                   	ret    
c00270c2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00270c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00270d0:	81 e2 00 00 00 80    	and    edx,0x80000000
c00270d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00270da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00270de:	31 d2                	xor    edx,edx
c00270e0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00270e4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00270e8:	dd 18                	fstp   QWORD PTR [eax]
c00270ea:	83 c4 18             	add    esp,0x18
c00270ed:	5b                   	pop    ebx
c00270ee:	c3                   	ret    
c00270ef:	90                   	nop
c00270f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00270f4:	f7 d0                	not    eax
c00270f6:	21 d8                	and    eax,ebx
c00270f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00270fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027100:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0027104:	dd 10                	fst    QWORD PTR [eax]
c0027106:	dd 04 24             	fld    QWORD PTR [esp]
c0027109:	de e1                	fsubrp st(1),st
c002710b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002710f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0027113:	83 c4 18             	add    esp,0x18
c0027116:	5b                   	pop    ebx
c0027117:	c3                   	ret    
c0027118:	90                   	nop
c0027119:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027120:	dd 04 24             	fld    QWORD PTR [esp]
c0027123:	dd 10                	fst    QWORD PTR [eax]
c0027125:	d9 ee                	fldz   
c0027127:	de f1                	fdivrp st(1),st
c0027129:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002712d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0027131:	e9 e3 fe ff ff       	jmp    c0027019 <modf+0x69>
c0027136:	66 90                	xchg   ax,ax
c0027138:	66 90                	xchg   ax,ax
c002713a:	66 90                	xchg   ax,ax
c002713c:	66 90                	xchg   ax,ax
c002713e:	66 90                	xchg   ax,ax

c0027140 <round>:
c0027140:	83 ec 2c             	sub    esp,0x2c
c0027143:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0027147:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002714b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002714f:	89 c2                	mov    edx,eax
c0027151:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027157:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c002715d:	0f 84 9d 00 00 00    	je     c0027200 <round+0xc0>
c0027163:	dd d8                	fstp   st(0)
c0027165:	85 c0                	test   eax,eax
c0027167:	78 47                	js     c00271b0 <round+0x70>
c0027169:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002716d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027170:	e8 ff 03 00 00       	call   c0027574 <floor>
c0027175:	d9 c0                	fld    st(0)
c0027177:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002717b:	d8 e9                	fsubr  st,st(1)
c002717d:	d9 05 b8 f6 02 c0    	fld    DWORD PTR ds:0xc002f6b8
c0027183:	df f1                	fcomip st,st(1)
c0027185:	dd d8                	fstp   st(0)
c0027187:	72 17                	jb     c00271a0 <round+0x60>
c0027189:	dd d9                	fstp   st(1)
c002718b:	d8 05 58 f5 02 c0    	fadd   DWORD PTR ds:0xc002f558
c0027191:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0027195:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0027199:	eb 07                	jmp    c00271a2 <round+0x62>
c002719b:	90                   	nop
c002719c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00271a0:	dd d8                	fstp   st(0)
c00271a2:	83 c4 2c             	add    esp,0x2c
c00271a5:	c3                   	ret    
c00271a6:	8d 76 00             	lea    esi,[esi+0x0]
c00271a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00271b0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00271b4:	d9 e0                	fchs   
c00271b6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00271b9:	e8 b6 03 00 00       	call   c0027574 <floor>
c00271be:	d9 c0                	fld    st(0)
c00271c0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00271c4:	d8 c1                	fadd   st,st(1)
c00271c6:	d9 05 b8 f6 02 c0    	fld    DWORD PTR ds:0xc002f6b8
c00271cc:	df f1                	fcomip st,st(1)
c00271ce:	dd d8                	fstp   st(0)
c00271d0:	72 1e                	jb     c00271f0 <round+0xb0>
c00271d2:	dd d9                	fstp   st(1)
c00271d4:	d8 05 58 f5 02 c0    	fadd   DWORD PTR ds:0xc002f558
c00271da:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00271de:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00271e2:	eb 0e                	jmp    c00271f2 <round+0xb2>
c00271e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00271ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00271f0:	dd d8                	fstp   st(0)
c00271f2:	d9 e0                	fchs   
c00271f4:	83 c4 2c             	add    esp,0x2c
c00271f7:	c3                   	ret    
c00271f8:	90                   	nop
c00271f9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027200:	d9 c0                	fld    st(0)
c0027202:	de c1                	faddp  st(1),st
c0027204:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0027208:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002720c:	83 c4 2c             	add    esp,0x2c
c002720f:	c3                   	ret    

c0027210 <sin>:
c0027210:	83 ec 5c             	sub    esp,0x5c
c0027213:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0027217:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002721b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002721f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027224:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0027229:	7f 65                	jg     c0027290 <sin+0x80>
c002722b:	3d ff ff 4f 3e       	cmp    eax,0x3e4fffff
c0027230:	7f 2e                	jg     c0027260 <sin+0x50>
c0027232:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0027236:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002723b:	66 0d 00 0c          	or     ax,0xc00
c002723f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0027244:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0027248:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c002724c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0027250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0027254:	85 c0                	test   eax,eax
c0027256:	75 18                	jne    c0027270 <sin+0x60>
c0027258:	83 c4 5c             	add    esp,0x5c
c002725b:	c3                   	ret    
c002725c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027260:	dd d8                	fstp   st(0)
c0027262:	eb 0e                	jmp    c0027272 <sin+0x62>
c0027264:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002726a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0027270:	dd d8                	fstp   st(0)
c0027272:	d9 ee                	fldz   
c0027274:	31 c9                	xor    ecx,ecx
c0027276:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002727a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c002727e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0027282:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027285:	e8 06 13 00 00       	call   c0028590 <__kernel_sin>
c002728a:	83 c4 5c             	add    esp,0x5c
c002728d:	c3                   	ret    
c002728e:	66 90                	xchg   ax,ax
c0027290:	dd d8                	fstp   st(0)
c0027292:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0027297:	7e 17                	jle    c00272b0 <sin+0xa0>
c0027299:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002729d:	d8 e0                	fsub   st,st(0)
c002729f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00272a3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00272a7:	83 c4 5c             	add    esp,0x5c
c00272aa:	c3                   	ret    
c00272ab:	90                   	nop
c00272ac:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00272b0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00272b4:	8d 44 24 40          	lea    eax,[esp+0x40]
c00272b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00272bc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00272bf:	e8 1c 03 00 00       	call   c00275e0 <__ieee754_rem_pio2>
c00272c4:	83 e0 03             	and    eax,0x3
c00272c7:	83 f8 01             	cmp    eax,0x1
c00272ca:	0f 84 90 00 00 00    	je     c0027360 <sin+0x150>
c00272d0:	83 f8 02             	cmp    eax,0x2
c00272d3:	74 2b                	je     c0027300 <sin+0xf0>
c00272d5:	85 c0                	test   eax,eax
c00272d7:	74 57                	je     c0027330 <sin+0x120>
c00272d9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00272dd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00272e1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00272e5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00272e8:	e8 23 08 00 00       	call   c0027b10 <__kernel_cos>
c00272ed:	d9 e0                	fchs   
c00272ef:	e9 64 ff ff ff       	jmp    c0027258 <sin+0x48>
c00272f4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00272fa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0027300:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027304:	b8 01 00 00 00       	mov    eax,0x1
c0027309:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002730d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0027311:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0027315:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027318:	e8 73 12 00 00       	call   c0028590 <__kernel_sin>
c002731d:	d9 e0                	fchs   
c002731f:	e9 34 ff ff ff       	jmp    c0027258 <sin+0x48>
c0027324:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002732a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0027330:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027334:	ba 01 00 00 00       	mov    edx,0x1
c0027339:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002733d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0027341:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0027345:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027348:	e8 43 12 00 00       	call   c0028590 <__kernel_sin>
c002734d:	e9 06 ff ff ff       	jmp    c0027258 <sin+0x48>
c0027352:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027359:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027360:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027364:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0027368:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002736c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002736f:	e8 9c 07 00 00       	call   c0027b10 <__kernel_cos>
c0027374:	e9 df fe ff ff       	jmp    c0027258 <sin+0x48>
c0027379:	66 90                	xchg   ax,ax
c002737b:	66 90                	xchg   ax,ax
c002737d:	66 90                	xchg   ax,ax
c002737f:	90                   	nop

c0027380 <tanh>:
c0027380:	53                   	push   ebx
c0027381:	83 ec 28             	sub    esp,0x28
c0027384:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0027388:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002738c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0027390:	89 d8                	mov    eax,ebx
c0027392:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027397:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c002739c:	7e 32                	jle    c00273d0 <tanh+0x50>
c002739e:	d9 e8                	fld1   
c00273a0:	85 db                	test   ebx,ebx
c00273a2:	dc f1                	fdivr  st(1),st
c00273a4:	78 1a                	js     c00273c0 <tanh+0x40>
c00273a6:	de c1                	faddp  st(1),st
c00273a8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00273ac:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00273b0:	83 c4 28             	add    esp,0x28
c00273b3:	5b                   	pop    ebx
c00273b4:	c3                   	ret    
c00273b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00273b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00273c0:	de e9                	fsubp  st(1),st
c00273c2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00273c6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00273ca:	83 c4 28             	add    esp,0x28
c00273cd:	5b                   	pop    ebx
c00273ce:	c3                   	ret    
c00273cf:	90                   	nop
c00273d0:	dd d8                	fstp   st(0)
c00273d2:	3d ff ff 35 40       	cmp    eax,0x4035ffff
c00273d7:	7f 57                	jg     c0027430 <tanh+0xb0>
c00273d9:	3d ff ff 2f 3e       	cmp    eax,0x3e2fffff
c00273de:	7f 70                	jg     c0027450 <tanh+0xd0>
c00273e0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00273e4:	d9 e8                	fld1   
c00273e6:	d9 c1                	fld    st(1)
c00273e8:	dc 05 68 f5 02 c0    	fadd   QWORD PTR ds:0xc002f568
c00273ee:	df f1                	fcomip st,st(1)
c00273f0:	dd d8                	fstp   st(0)
c00273f2:	77 bc                	ja     c00273b0 <tanh+0x30>
c00273f4:	dd d8                	fstp   st(0)
c00273f6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00273fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c00273fd:	e8 ee fa ff ff       	call   c0026ef0 <fabs>
c0027402:	d9 05 8c f7 02 c0    	fld    DWORD PTR ds:0xc002f78c
c0027408:	de c9                	fmulp  st(1),st
c002740a:	dd 1c 24             	fstp   QWORD PTR [esp]
c002740d:	e8 4e f6 ff ff       	call   c0026a60 <expm1>
c0027412:	d9 c0                	fld    st(0)
c0027414:	d9 e0                	fchs   
c0027416:	d9 05 c8 f5 02 c0    	fld    DWORD PTR ds:0xc002f5c8
c002741c:	de c2                	faddp  st(2),st
c002741e:	de f1                	fdivrp st(1),st
c0027420:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0027424:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0027428:	eb 08                	jmp    c0027432 <tanh+0xb2>
c002742a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027430:	d9 e8                	fld1   
c0027432:	85 db                	test   ebx,ebx
c0027434:	0f 89 76 ff ff ff    	jns    c00273b0 <tanh+0x30>
c002743a:	d9 e0                	fchs   
c002743c:	83 c4 28             	add    esp,0x28
c002743f:	5b                   	pop    ebx
c0027440:	c3                   	ret    
c0027441:	eb 0d                	jmp    c0027450 <tanh+0xd0>
c0027443:	90                   	nop
c0027444:	90                   	nop
c0027445:	90                   	nop
c0027446:	90                   	nop
c0027447:	90                   	nop
c0027448:	90                   	nop
c0027449:	90                   	nop
c002744a:	90                   	nop
c002744b:	90                   	nop
c002744c:	90                   	nop
c002744d:	90                   	nop
c002744e:	90                   	nop
c002744f:	90                   	nop
c0027450:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c0027455:	7e 9f                	jle    c00273f6 <tanh+0x76>
c0027457:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002745b:	dd 1c 24             	fstp   QWORD PTR [esp]
c002745e:	e8 8d fa ff ff       	call   c0026ef0 <fabs>
c0027463:	d8 c0                	fadd   st,st(0)
c0027465:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027468:	e8 f3 f5 ff ff       	call   c0026a60 <expm1>
c002746d:	d9 05 c8 f5 02 c0    	fld    DWORD PTR ds:0xc002f5c8
c0027473:	dc c1                	fadd   st(1),st
c0027475:	de f1                	fdivrp st(1),st
c0027477:	d8 2d 58 f5 02 c0    	fsubr  DWORD PTR ds:0xc002f558
c002747d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0027481:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0027485:	eb ab                	jmp    c0027432 <tanh+0xb2>
c0027487:	66 90                	xchg   ax,ax
c0027489:	66 90                	xchg   ax,ax
c002748b:	66 90                	xchg   ax,ax
c002748d:	66 90                	xchg   ax,ax
c002748f:	90                   	nop

c0027490 <cimag>:
c0027490:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0027494:	c3                   	ret    
c0027495:	66 90                	xchg   ax,ax
c0027497:	66 90                	xchg   ax,ax
c0027499:	66 90                	xchg   ax,ax
c002749b:	66 90                	xchg   ax,ax
c002749d:	66 90                	xchg   ax,ax
c002749f:	90                   	nop

c00274a0 <creal>:
c00274a0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00274a4:	c3                   	ret    
c00274a5:	66 90                	xchg   ax,ax
c00274a7:	90                   	nop

c00274a8 <exp>:
c00274a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00274ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00274b1:	3d 00 00 f0 7f       	cmp    eax,0x7ff00000
c00274b6:	73 42                	jae    c00274fa <x_Inf_or_NaN>
c00274b8:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00274bc:	9b d9 7c 24 04       	fstcw  WORD PTR [esp+0x4]
c00274c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274c5:	25 00 03 00 00       	and    eax,0x300
c00274ca:	3d 00 03 00 00       	cmp    eax,0x300
c00274cf:	74 0c                	je     c00274dd <exp+0x35>
c00274d1:	c7 44 24 08 7f 13 00 00 	mov    DWORD PTR [esp+0x8],0x137f
c00274d9:	d9 6c 24 08          	fldcw  WORD PTR [esp+0x8]
c00274dd:	d9 ea                	fldl2e 
c00274df:	de c9                	fmulp  st(1),st
c00274e1:	dd d1                	fst    st(1)
c00274e3:	d9 fc                	frndint 
c00274e5:	dd d2                	fst    st(2)
c00274e7:	de e9                	fsubp  st(1),st
c00274e9:	d9 f0                	f2xm1  
c00274eb:	d9 e8                	fld1   
c00274ed:	de c1                	faddp  st(1),st
c00274ef:	d9 fd                	fscale 
c00274f1:	dd d9                	fstp   st(1)
c00274f3:	74 04                	je     c00274f9 <exp+0x51>
c00274f5:	d9 6c 24 04          	fldcw  WORD PTR [esp+0x4]
c00274f9:	c3                   	ret    

c00274fa <x_Inf_or_NaN>:
c00274fa:	81 7c 24 08 00 00 f0 ff 	cmp    DWORD PTR [esp+0x8],0xfff00000
c0027502:	75 0a                	jne    c002750e <x_not_minus_Inf>
c0027504:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0027509:	75 03                	jne    c002750e <x_not_minus_Inf>
c002750b:	d9 ee                	fldz   
c002750d:	c3                   	ret    

c002750e <x_not_minus_Inf>:
c002750e:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027512:	c3                   	ret    
c0027513:	90                   	nop

c0027514 <fmod>:
c0027514:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0027518:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002751c:	d9 f8                	fprem  
c002751e:	9b df e0             	fstsw  ax
c0027521:	9e                   	sahf   
c0027522:	7a f8                	jp     c002751c <fmod+0x8>
c0027524:	dd d9                	fstp   st(1)
c0027526:	c3                   	ret    
c0027527:	90                   	nop

c0027528 <log>:
c0027528:	d9 ed                	fldln2 
c002752a:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002752e:	d9 f1                	fyl2x  
c0027530:	c3                   	ret    
c0027531:	66 90                	xchg   ax,ax
c0027533:	90                   	nop

c0027534 <log10>:
c0027534:	d9 ec                	fldlg2 
c0027536:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002753a:	d9 f1                	fyl2x  
c002753c:	c3                   	ret    
c002753d:	66 90                	xchg   ax,ax
c002753f:	90                   	nop

c0027540 <sqrt>:
c0027540:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027544:	d9 fa                	fsqrt  
c0027546:	c3                   	ret    
c0027547:	90                   	nop

c0027548 <ceil>:
c0027548:	55                   	push   ebp
c0027549:	89 e5                	mov    ebp,esp
c002754b:	83 ec 08             	sub    esp,0x8
c002754e:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c0027552:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0027556:	66 81 ca 00 08       	or     dx,0x800
c002755b:	66 81 e2 ff fb       	and    dx,0xfbff
c0027560:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0027564:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0027567:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c002756a:	d9 fc                	frndint 
c002756c:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c002756f:	c9                   	leave  
c0027570:	c3                   	ret    
c0027571:	66 90                	xchg   ax,ax
c0027573:	90                   	nop

c0027574 <floor>:
c0027574:	55                   	push   ebp
c0027575:	89 e5                	mov    ebp,esp
c0027577:	83 ec 08             	sub    esp,0x8
c002757a:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c002757e:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0027582:	66 81 ca 00 04       	or     dx,0x400
c0027587:	66 81 e2 ff f7       	and    dx,0xf7ff
c002758c:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0027590:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0027593:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c0027596:	d9 fc                	frndint 
c0027598:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c002759b:	c9                   	leave  
c002759c:	c3                   	ret    
c002759d:	66 90                	xchg   ax,ax
c002759f:	90                   	nop

c00275a0 <tan>:
c00275a0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00275a4:	d9 f2                	fptan  
c00275a6:	df e0                	fnstsw ax
c00275a8:	66 25 00 04          	and    ax,0x400
c00275ac:	75 03                	jne    c00275b1 <tan+0x11>
c00275ae:	dd d8                	fstp   st(0)
c00275b0:	c3                   	ret    
c00275b1:	d9 eb                	fldpi  
c00275b3:	d8 c0                	fadd   st,st(0)
c00275b5:	d9 c9                	fxch   st(1)
c00275b7:	d9 f5                	fprem1 
c00275b9:	9b df e0             	fstsw  ax
c00275bc:	66 25 00 04          	and    ax,0x400
c00275c0:	75 f5                	jne    c00275b7 <tan+0x17>
c00275c2:	dd d9                	fstp   st(1)
c00275c4:	d9 f2                	fptan  
c00275c6:	dd d8                	fstp   st(0)
c00275c8:	c3                   	ret    
c00275c9:	66 90                	xchg   ax,ax
c00275cb:	90                   	nop

c00275cc <ldexp>:
c00275cc:	db 44 24 0c          	fild   DWORD PTR [esp+0xc]
c00275d0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00275d4:	d9 fd                	fscale 
c00275d6:	dd d9                	fstp   st(1)
c00275d8:	c3                   	ret    
c00275d9:	66 90                	xchg   ax,ax
c00275db:	66 90                	xchg   ax,ax
c00275dd:	66 90                	xchg   ax,ax
c00275df:	90                   	nop

c00275e0 <__ieee754_rem_pio2>:
c00275e0:	56                   	push   esi
c00275e1:	53                   	push   ebx
c00275e2:	83 ec 74             	sub    esp,0x74
c00275e5:	dd 84 24 80 00 00 00 	fld    QWORD PTR [esp+0x80]
c00275ec:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c00275f3:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00275f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00275fb:	89 f2                	mov    edx,esi
c00275fd:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027603:	81 fa 7a 6a 0f 40    	cmp    edx,0x400f6a7a
c0027609:	7f 65                	jg     c0027670 <__ieee754_rem_pio2+0x90>
c002760b:	89 f0                	mov    eax,esi
c002760d:	25 ff ff 0f 00       	and    eax,0xfffff
c0027612:	3d fb 21 09 00       	cmp    eax,0x921fb
c0027617:	0f 84 57 02 00 00    	je     c0027874 <__ieee754_rem_pio2+0x294>
c002761d:	81 fa 7c d9 02 40    	cmp    edx,0x4002d97c
c0027623:	0f 8f b7 01 00 00    	jg     c00277e0 <__ieee754_rem_pio2+0x200>
c0027629:	85 f6                	test   esi,esi
c002762b:	0f 8e 3a 04 00 00    	jle    c0027a6b <__ieee754_rem_pio2+0x48b>
c0027631:	dc 25 f8 f7 02 c0    	fsub   QWORD PTR ds:0xc002f7f8
c0027637:	b8 01 00 00 00       	mov    eax,0x1
c002763c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027640:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027644:	dd 05 00 f8 02 c0    	fld    QWORD PTR ds:0xc002f800
c002764a:	d9 c1                	fld    st(1)
c002764c:	d8 e1                	fsub   st,st(1)
c002764e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027652:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027656:	dd 13                	fst    QWORD PTR [ebx]
c0027658:	de ea                	fsubp  st(2),st
c002765a:	de e9                	fsubp  st(1),st
c002765c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002765f:	83 c4 74             	add    esp,0x74
c0027662:	5b                   	pop    ebx
c0027663:	5e                   	pop    esi
c0027664:	c3                   	ret    
c0027665:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027669:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027670:	dd d8                	fstp   st(0)
c0027672:	81 fa 3b 46 1c 40    	cmp    edx,0x401c463b
c0027678:	7f 66                	jg     c00276e0 <__ieee754_rem_pio2+0x100>
c002767a:	81 fa bc fd 15 40    	cmp    edx,0x4015fdbc
c0027680:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027684:	0f 8f 96 01 00 00    	jg     c0027820 <__ieee754_rem_pio2+0x240>
c002768a:	81 fa 7c d9 12 40    	cmp    edx,0x4012d97c
c0027690:	0f 84 de 01 00 00    	je     c0027874 <__ieee754_rem_pio2+0x294>
c0027696:	85 f6                	test   esi,esi
c0027698:	0f 8e 00 04 00 00    	jle    c0027a9e <__ieee754_rem_pio2+0x4be>
c002769e:	dc 25 18 f8 02 c0    	fsub   QWORD PTR ds:0xc002f818
c00276a4:	b8 03 00 00 00       	mov    eax,0x3
c00276a9:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00276ad:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00276b1:	db 2d 60 f8 02 c0    	fld    TBYTE PTR ds:0xc002f860
c00276b7:	d9 c1                	fld    st(1)
c00276b9:	d8 e1                	fsub   st,st(1)
c00276bb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00276bf:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00276c3:	dd 13                	fst    QWORD PTR [ebx]
c00276c5:	de ea                	fsubp  st(2),st
c00276c7:	de e9                	fsubp  st(1),st
c00276c9:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00276cc:	83 c4 74             	add    esp,0x74
c00276cf:	5b                   	pop    ebx
c00276d0:	5e                   	pop    esi
c00276d1:	c3                   	ret    
c00276d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00276d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00276e0:	81 fa fa 21 39 41    	cmp    edx,0x413921fa
c00276e6:	0f 8e 84 01 00 00    	jle    c0027870 <__ieee754_rem_pio2+0x290>
c00276ec:	81 fa ff ff ef 7f    	cmp    edx,0x7fefffff
c00276f2:	0f 8f d8 02 00 00    	jg     c00279d0 <__ieee754_rem_pio2+0x3f0>
c00276f8:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00276fc:	89 d1                	mov    ecx,edx
c00276fe:	c1 f9 14             	sar    ecx,0x14
c0027701:	81 e9 16 04 00 00    	sub    ecx,0x416
c0027707:	89 c8                	mov    eax,ecx
c0027709:	c1 e0 14             	shl    eax,0x14
c002770c:	29 c2                	sub    edx,eax
c002770e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027712:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0027716:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002771a:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002771f:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0027723:	66 0d 00 0c          	or     ax,0xc00
c0027727:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c002772c:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0027730:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0027734:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0027738:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c002773c:	dd 54 24 58          	fst    QWORD PTR [esp+0x58]
c0027740:	de e9                	fsubp  st(1),st
c0027742:	d9 05 74 f8 02 c0    	fld    DWORD PTR ds:0xc002f874
c0027748:	dc c9                	fmul   st(1),st
c002774a:	d9 c9                	fxch   st(1)
c002774c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027750:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027754:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0027758:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c002775c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0027760:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c0027764:	dd 54 24 60          	fst    QWORD PTR [esp+0x60]
c0027768:	de e9                	fsubp  st(1),st
c002776a:	de c9                	fmulp  st(1),st
c002776c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027770:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027774:	dd 54 24 68          	fst    QWORD PTR [esp+0x68]
c0027778:	d9 ee                	fldz   
c002777a:	d9 c9                	fxch   st(1)
c002777c:	df e9                	fucomip st,st(1)
c002777e:	dd d8                	fstp   st(0)
c0027780:	0f 8a 8a 02 00 00    	jp     c0027a10 <__ieee754_rem_pio2+0x430>
c0027786:	0f 85 84 02 00 00    	jne    c0027a10 <__ieee754_rem_pio2+0x430>
c002778c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027790:	31 c0                	xor    eax,eax
c0027792:	85 d2                	test   edx,edx
c0027794:	0f 95 c0             	setne  al
c0027797:	40                   	inc    eax
c0027798:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002779c:	8d 44 24 48          	lea    eax,[esp+0x48]
c00277a0:	ba 01 00 00 00       	mov    edx,0x1
c00277a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00277a9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00277ad:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00277b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00277b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00277b8:	e8 f3 03 00 00       	call   c0027bb0 <__kernel_rem_pio2>
c00277bd:	85 f6                	test   esi,esi
c00277bf:	0f 88 5b 02 00 00    	js     c0027a20 <__ieee754_rem_pio2+0x440>
c00277c5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00277c9:	dd 1b                	fstp   QWORD PTR [ebx]
c00277cb:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00277cf:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00277d2:	e9 88 fe ff ff       	jmp    c002765f <__ieee754_rem_pio2+0x7f>
c00277d7:	89 f6                	mov    esi,esi
c00277d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00277e0:	85 f6                	test   esi,esi
c00277e2:	0f 8e 50 02 00 00    	jle    c0027a38 <__ieee754_rem_pio2+0x458>
c00277e8:	dc 25 08 f8 02 c0    	fsub   QWORD PTR ds:0xc002f808
c00277ee:	b8 02 00 00 00       	mov    eax,0x2
c00277f3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00277f7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00277fb:	dd 05 10 f8 02 c0    	fld    QWORD PTR ds:0xc002f810
c0027801:	d9 c1                	fld    st(1)
c0027803:	d8 e1                	fsub   st,st(1)
c0027805:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027809:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002780d:	dd 13                	fst    QWORD PTR [ebx]
c002780f:	de ea                	fsubp  st(2),st
c0027811:	de e9                	fsubp  st(1),st
c0027813:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027816:	83 c4 74             	add    esp,0x74
c0027819:	5b                   	pop    ebx
c002781a:	5e                   	pop    esi
c002781b:	c3                   	ret    
c002781c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027820:	81 fa fb 21 19 40    	cmp    edx,0x401921fb
c0027826:	74 4c                	je     c0027874 <__ieee754_rem_pio2+0x294>
c0027828:	85 f6                	test   esi,esi
c002782a:	0f 8e a1 02 00 00    	jle    c0027ad1 <__ieee754_rem_pio2+0x4f1>
c0027830:	dc 25 20 f8 02 c0    	fsub   QWORD PTR ds:0xc002f820
c0027836:	b8 04 00 00 00       	mov    eax,0x4
c002783b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002783f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027843:	dd 05 28 f8 02 c0    	fld    QWORD PTR ds:0xc002f828
c0027849:	d9 c1                	fld    st(1)
c002784b:	d8 e1                	fsub   st,st(1)
c002784d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027851:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027855:	dd 13                	fst    QWORD PTR [ebx]
c0027857:	de ea                	fsubp  st(2),st
c0027859:	de e9                	fsubp  st(1),st
c002785b:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002785e:	83 c4 74             	add    esp,0x74
c0027861:	5b                   	pop    ebx
c0027862:	5e                   	pop    esi
c0027863:	c3                   	ret    
c0027864:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002786a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0027870:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027874:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0027878:	d9 c0                	fld    st(0)
c002787a:	dc 0d 30 f8 02 c0    	fmul   QWORD PTR ds:0xc002f830
c0027880:	c1 fa 14             	sar    edx,0x14
c0027883:	89 d6                	mov    esi,edx
c0027885:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002788a:	d9 05 70 f8 02 c0    	fld    DWORD PTR ds:0xc002f870
c0027890:	dc c1                	fadd   st(1),st
c0027892:	d9 c9                	fxch   st(1)
c0027894:	66 0d 00 0c          	or     ax,0xc00
c0027898:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c002789d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00278a1:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00278a5:	de e1                	fsubrp st(1),st
c00278a7:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00278ab:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00278af:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c00278b3:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c00278b7:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00278bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00278bf:	d9 c0                	fld    st(0)
c00278c1:	dc 0d f8 f7 02 c0    	fmul   QWORD PTR ds:0xc002f7f8
c00278c7:	de ea                	fsubp  st(2),st
c00278c9:	d9 c9                	fxch   st(1)
c00278cb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00278cf:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00278d3:	d9 c1                	fld    st(1)
c00278d5:	dc 0d 00 f8 02 c0    	fmul   QWORD PTR ds:0xc002f800
c00278db:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00278df:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00278e3:	d9 c1                	fld    st(1)
c00278e5:	d8 e1                	fsub   st,st(1)
c00278e7:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00278eb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00278ef:	c1 e9 14             	shr    ecx,0x14
c00278f2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278f8:	29 ce                	sub    esi,ecx
c00278fa:	83 fe 10             	cmp    esi,0x10
c00278fd:	7f 21                	jg     c0027920 <__ieee754_rem_pio2+0x340>
c00278ff:	dd da                	fstp   st(2)
c0027901:	d9 c9                	fxch   st(1)
c0027903:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027907:	dd 1b                	fstp   QWORD PTR [ebx]
c0027909:	d9 c9                	fxch   st(1)
c002790b:	dc 64 24 20          	fsub   QWORD PTR [esp+0x20]
c002790f:	de e1                	fsubrp st(1),st
c0027911:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027914:	83 c4 74             	add    esp,0x74
c0027917:	5b                   	pop    ebx
c0027918:	5e                   	pop    esi
c0027919:	c3                   	ret    
c002791a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027920:	dd d8                	fstp   st(0)
c0027922:	d9 c1                	fld    st(1)
c0027924:	dc 0d 38 f8 02 c0    	fmul   QWORD PTR ds:0xc002f838
c002792a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002792e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027932:	d9 c1                	fld    st(1)
c0027934:	d8 e1                	fsub   st,st(1)
c0027936:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002793a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002793e:	d9 c0                	fld    st(0)
c0027940:	dc eb                	fsub   st(3),st
c0027942:	d9 cb                	fxch   st(3)
c0027944:	de e2                	fsubrp st(2),st
c0027946:	d9 c3                	fld    st(3)
c0027948:	dc 0d 40 f8 02 c0    	fmul   QWORD PTR ds:0xc002f840
c002794e:	de e2                	fsubrp st(2),st
c0027950:	d9 c9                	fxch   st(1)
c0027952:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027956:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002795a:	d9 c2                	fld    st(2)
c002795c:	d8 e1                	fsub   st,st(1)
c002795e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0027962:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0027966:	c1 e9 14             	shr    ecx,0x14
c0027969:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002796f:	29 ca                	sub    edx,ecx
c0027971:	83 fa 31             	cmp    edx,0x31
c0027974:	7e 7a                	jle    c00279f0 <__ieee754_rem_pio2+0x410>
c0027976:	dd d8                	fstp   st(0)
c0027978:	dd d8                	fstp   st(0)
c002797a:	d9 c1                	fld    st(1)
c002797c:	dc 0d 48 f8 02 c0    	fmul   QWORD PTR ds:0xc002f848
c0027982:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027986:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002798a:	d9 c1                	fld    st(1)
c002798c:	d8 e1                	fsub   st,st(1)
c002798e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027992:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027996:	d9 cb                	fxch   st(3)
c0027998:	dc 0d 50 f8 02 c0    	fmul   QWORD PTR ds:0xc002f850
c002799e:	d9 ca                	fxch   st(2)
c00279a0:	d8 e3                	fsub   st,st(3)
c00279a2:	de e1                	fsubrp st(1),st
c00279a4:	de e9                	fsubp  st(1),st
c00279a6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00279aa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00279ae:	d9 c1                	fld    st(1)
c00279b0:	d8 e1                	fsub   st,st(1)
c00279b2:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00279b6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00279ba:	dd 1b                	fstp   QWORD PTR [ebx]
c00279bc:	d9 c9                	fxch   st(1)
c00279be:	e9 48 ff ff ff       	jmp    c002790b <__ieee754_rem_pio2+0x32b>
c00279c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00279c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00279d0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00279d4:	31 c0                	xor    eax,eax
c00279d6:	d8 e0                	fsub   st,st(0)
c00279d8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00279dc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00279e0:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00279e3:	dd 1b                	fstp   QWORD PTR [ebx]
c00279e5:	e9 75 fc ff ff       	jmp    c002765f <__ieee754_rem_pio2+0x7f>
c00279ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00279f0:	dd da                	fstp   st(2)
c00279f2:	dd da                	fstp   st(2)
c00279f4:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00279f8:	dd 1b                	fstp   QWORD PTR [ebx]
c00279fa:	d9 c9                	fxch   st(1)
c00279fc:	e9 0a ff ff ff       	jmp    c002790b <__ieee754_rem_pio2+0x32b>
c0027a01:	eb 0d                	jmp    c0027a10 <__ieee754_rem_pio2+0x430>
c0027a03:	90                   	nop
c0027a04:	90                   	nop
c0027a05:	90                   	nop
c0027a06:	90                   	nop
c0027a07:	90                   	nop
c0027a08:	90                   	nop
c0027a09:	90                   	nop
c0027a0a:	90                   	nop
c0027a0b:	90                   	nop
c0027a0c:	90                   	nop
c0027a0d:	90                   	nop
c0027a0e:	90                   	nop
c0027a0f:	90                   	nop
c0027a10:	b8 03 00 00 00       	mov    eax,0x3
c0027a15:	e9 7e fd ff ff       	jmp    c0027798 <__ieee754_rem_pio2+0x1b8>
c0027a1a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027a20:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027a24:	f7 d8                	neg    eax
c0027a26:	d9 e0                	fchs   
c0027a28:	dd 1b                	fstp   QWORD PTR [ebx]
c0027a2a:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0027a2e:	d9 e0                	fchs   
c0027a30:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027a33:	e9 27 fc ff ff       	jmp    c002765f <__ieee754_rem_pio2+0x7f>
c0027a38:	dc 05 08 f8 02 c0    	fadd   QWORD PTR ds:0xc002f808
c0027a3e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0027a43:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027a47:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027a4b:	dd 05 10 f8 02 c0    	fld    QWORD PTR ds:0xc002f810
c0027a51:	d9 c1                	fld    st(1)
c0027a53:	d8 c1                	fadd   st,st(1)
c0027a55:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027a59:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027a5d:	dd 13                	fst    QWORD PTR [ebx]
c0027a5f:	de ea                	fsubp  st(2),st
c0027a61:	de c1                	faddp  st(1),st
c0027a63:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027a66:	e9 f4 fb ff ff       	jmp    c002765f <__ieee754_rem_pio2+0x7f>
c0027a6b:	dc 05 f8 f7 02 c0    	fadd   QWORD PTR ds:0xc002f7f8
c0027a71:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027a76:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027a7a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027a7e:	dd 05 00 f8 02 c0    	fld    QWORD PTR ds:0xc002f800
c0027a84:	d9 c1                	fld    st(1)
c0027a86:	d8 c1                	fadd   st,st(1)
c0027a88:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027a8c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027a90:	dd 13                	fst    QWORD PTR [ebx]
c0027a92:	de ea                	fsubp  st(2),st
c0027a94:	de c1                	faddp  st(1),st
c0027a96:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027a99:	e9 c1 fb ff ff       	jmp    c002765f <__ieee754_rem_pio2+0x7f>
c0027a9e:	dc 05 18 f8 02 c0    	fadd   QWORD PTR ds:0xc002f818
c0027aa4:	b8 fd ff ff ff       	mov    eax,0xfffffffd
c0027aa9:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027aad:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027ab1:	db 2d 60 f8 02 c0    	fld    TBYTE PTR ds:0xc002f860
c0027ab7:	d9 c1                	fld    st(1)
c0027ab9:	d8 c1                	fadd   st,st(1)
c0027abb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027abf:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027ac3:	dd 13                	fst    QWORD PTR [ebx]
c0027ac5:	de ea                	fsubp  st(2),st
c0027ac7:	de c1                	faddp  st(1),st
c0027ac9:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027acc:	e9 8e fb ff ff       	jmp    c002765f <__ieee754_rem_pio2+0x7f>
c0027ad1:	dc 05 20 f8 02 c0    	fadd   QWORD PTR ds:0xc002f820
c0027ad7:	b8 fc ff ff ff       	mov    eax,0xfffffffc
c0027adc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027ae0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027ae4:	dd 05 28 f8 02 c0    	fld    QWORD PTR ds:0xc002f828
c0027aea:	d9 c1                	fld    st(1)
c0027aec:	d8 c1                	fadd   st,st(1)
c0027aee:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027af2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027af6:	dd 13                	fst    QWORD PTR [ebx]
c0027af8:	de ea                	fsubp  st(2),st
c0027afa:	de c1                	faddp  st(1),st
c0027afc:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027aff:	e9 5b fb ff ff       	jmp    c002765f <__ieee754_rem_pio2+0x7f>
c0027b04:	66 90                	xchg   ax,ax
c0027b06:	66 90                	xchg   ax,ax
c0027b08:	66 90                	xchg   ax,ax
c0027b0a:	66 90                	xchg   ax,ax
c0027b0c:	66 90                	xchg   ax,ax
c0027b0e:	66 90                	xchg   ax,ax

c0027b10 <__kernel_cos>:
c0027b10:	83 ec 0c             	sub    esp,0xc
c0027b13:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0027b17:	d9 c0                	fld    st(0)
c0027b19:	d8 c9                	fmul   st,st(1)
c0027b1b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027b1e:	dd 04 24             	fld    QWORD PTR [esp]
c0027b21:	d9 c0                	fld    st(0)
c0027b23:	d8 c9                	fmul   st,st(1)
c0027b25:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027b28:	dd 04 24             	fld    QWORD PTR [esp]
c0027b2b:	d9 c1                	fld    st(1)
c0027b2d:	d8 0d 5c f5 02 c0    	fmul   DWORD PTR ds:0xc002f55c
c0027b33:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027b36:	dd 04 24             	fld    QWORD PTR [esp]
c0027b39:	d9 e8                	fld1   
c0027b3b:	d9 c0                	fld    st(0)
c0027b3d:	d8 e2                	fsub   st,st(2)
c0027b3f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027b42:	dd 04 24             	fld    QWORD PTR [esp]
c0027b45:	d9 c4                	fld    st(4)
c0027b47:	dc 0d 78 f8 02 c0    	fmul   QWORD PTR ds:0xc002f878
c0027b4d:	dc 05 80 f8 02 c0    	fadd   QWORD PTR ds:0xc002f880
c0027b53:	d8 cd                	fmul   st,st(5)
c0027b55:	dc 25 88 f8 02 c0    	fsub   QWORD PTR ds:0xc002f888
c0027b5b:	d9 cc                	fxch   st(4)
c0027b5d:	d8 c8                	fmul   st,st(0)
c0027b5f:	de cc                	fmulp  st(4),st
c0027b61:	d9 c4                	fld    st(4)
c0027b63:	dc 0d 90 f8 02 c0    	fmul   QWORD PTR ds:0xc002f890
c0027b69:	dc 25 98 f8 02 c0    	fsub   QWORD PTR ds:0xc002f898
c0027b6f:	d8 cd                	fmul   st,st(5)
c0027b71:	dc 05 a0 f8 02 c0    	fadd   QWORD PTR ds:0xc002f8a0
c0027b77:	d8 cd                	fmul   st,st(5)
c0027b79:	de c4                	faddp  st(4),st
c0027b7b:	d9 cb                	fxch   st(3)
c0027b7d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027b80:	dd 04 24             	fld    QWORD PTR [esp]
c0027b83:	de cc                	fmulp  st(4),st
c0027b85:	d9 cc                	fxch   st(4)
c0027b87:	dc 4c 24 18          	fmul   QWORD PTR [esp+0x18]
c0027b8b:	de eb                	fsubp  st(3),st
c0027b8d:	d9 cb                	fxch   st(3)
c0027b8f:	d8 e1                	fsub   st,st(1)
c0027b91:	de e3                	fsubrp st(3),st
c0027b93:	d9 c9                	fxch   st(1)
c0027b95:	de c2                	faddp  st(2),st
c0027b97:	de c1                	faddp  st(1),st
c0027b99:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027b9c:	dd 04 24             	fld    QWORD PTR [esp]
c0027b9f:	83 c4 0c             	add    esp,0xc
c0027ba2:	c3                   	ret    
c0027ba3:	66 90                	xchg   ax,ax
c0027ba5:	66 90                	xchg   ax,ax
c0027ba7:	66 90                	xchg   ax,ax
c0027ba9:	66 90                	xchg   ax,ax
c0027bab:	66 90                	xchg   ax,ax
c0027bad:	66 90                	xchg   ax,ax
c0027baf:	90                   	nop

c0027bb0 <__kernel_rem_pio2>:
c0027bb0:	55                   	push   ebp
c0027bb1:	57                   	push   edi
c0027bb2:	56                   	push   esi
c0027bb3:	53                   	push   ebx
c0027bb4:	81 ec 8c 02 00 00    	sub    esp,0x28c
c0027bba:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0027bc1:	8b 9c 24 a8 02 00 00 	mov    ebx,DWORD PTR [esp+0x2a8]
c0027bc8:	8b 04 85 88 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc78]
c0027bcf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0027bd3:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0027bda:	48                   	dec    eax
c0027bdb:	83 fb ec             	cmp    ebx,0xffffffec
c0027bde:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0027be2:	0f 8c 44 08 00 00    	jl     c002842c <__kernel_rem_pio2+0x87c>
c0027be8:	8d 4b fd             	lea    ecx,[ebx-0x3]
c0027beb:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
c0027bf0:	89 c8                	mov    eax,ecx
c0027bf2:	f7 ea                	imul   edx
c0027bf4:	c1 f9 1f             	sar    ecx,0x1f
c0027bf7:	c1 fa 02             	sar    edx,0x2
c0027bfa:	29 ca                	sub    edx,ecx
c0027bfc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0027c00:	8d 42 01             	lea    eax,[edx+0x1]
c0027c03:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0027c0a:	29 d0                	sub    eax,edx
c0027c0c:	c1 e0 03             	shl    eax,0x3
c0027c0f:	01 d8                	add    eax,ebx
c0027c11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027c15:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0027c19:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0027c1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027c21:	29 c2                	sub    edx,eax
c0027c23:	01 c6                	add    esi,eax
c0027c25:	78 58                	js     c0027c7f <__kernel_rem_pio2+0xcf>
c0027c27:	85 d2                	test   edx,edx
c0027c29:	0f 89 f4 04 00 00    	jns    c0028123 <__kernel_rem_pio2+0x573>
c0027c2f:	8d 5c 16 01          	lea    ebx,[esi+edx*1+0x1]
c0027c33:	b8 00 00 00 00       	mov    eax,0x0
c0027c38:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c0027c3f:	85 db                	test   ebx,ebx
c0027c41:	0f 4f d8             	cmovg  ebx,eax
c0027c44:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027c4a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0027c50:	d9 ee                	fldz   
c0027c52:	42                   	inc    edx
c0027c53:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0027c56:	40                   	inc    eax
c0027c57:	39 da                	cmp    edx,ebx
c0027c59:	7c f5                	jl     c0027c50 <__kernel_rem_pio2+0xa0>
c0027c5b:	39 c6                	cmp    esi,eax
c0027c5d:	7c 20                	jl     c0027c7f <__kernel_rem_pio2+0xcf>
c0027c5f:	29 c2                	sub    edx,eax
c0027c61:	c1 e2 02             	shl    edx,0x2
c0027c64:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027c6a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0027c70:	db 84 82 c0 f8 02 c0 	fild   DWORD PTR [edx+eax*4-0x3ffd0740]
c0027c77:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0027c7a:	40                   	inc    eax
c0027c7b:	39 c6                	cmp    esi,eax
c0027c7d:	7d f1                	jge    c0027c70 <__kernel_rem_pio2+0xc0>
c0027c7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027c83:	85 c0                	test   eax,eax
c0027c85:	78 7c                	js     c0027d03 <__kernel_rem_pio2+0x153>
c0027c87:	8d 2c c5 08 00 00 00 	lea    ebp,[eax*8+0x8]
c0027c8e:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0027c95:	31 db                	xor    ebx,ebx
c0027c97:	8b 8c 24 a0 02 00 00 	mov    ecx,DWORD PTR [esp+0x2a0]
c0027c9e:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0027ca5:	c1 e0 03             	shl    eax,0x3
c0027ca8:	8d bc 04 98 00 00 00 	lea    edi,[esp+eax*1+0x98]
c0027caf:	01 c1                	add    ecx,eax
c0027cb1:	eb 0d                	jmp    c0027cc0 <__kernel_rem_pio2+0x110>
c0027cb3:	90                   	nop
c0027cb4:	90                   	nop
c0027cb5:	90                   	nop
c0027cb6:	90                   	nop
c0027cb7:	90                   	nop
c0027cb8:	90                   	nop
c0027cb9:	90                   	nop
c0027cba:	90                   	nop
c0027cbb:	90                   	nop
c0027cbc:	90                   	nop
c0027cbd:	90                   	nop
c0027cbe:	90                   	nop
c0027cbf:	90                   	nop
c0027cc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027cc4:	85 c0                	test   eax,eax
c0027cc6:	0f 88 65 04 00 00    	js     c0028131 <__kernel_rem_pio2+0x581>
c0027ccc:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0027cd3:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0027cd6:	d9 ee                	fldz   
c0027cd8:	90                   	nop
c0027cd9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027ce0:	dd 02                	fld    QWORD PTR [edx]
c0027ce2:	83 c0 08             	add    eax,0x8
c0027ce5:	83 ea 08             	sub    edx,0x8
c0027ce8:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c0027ceb:	39 c1                	cmp    ecx,eax
c0027ced:	de c1                	faddp  st(1),st
c0027cef:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027cf3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027cf7:	75 e7                	jne    c0027ce0 <__kernel_rem_pio2+0x130>
c0027cf9:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c0027cfc:	83 c3 08             	add    ebx,0x8
c0027cff:	39 dd                	cmp    ebp,ebx
c0027d01:	75 bd                	jne    c0027cc0 <__kernel_rem_pio2+0x110>
c0027d03:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0027d07:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0027d0b:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
c0027d12:	8d 7c 04 4c          	lea    edi,[esp+eax*1+0x4c]
c0027d16:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0027d1a:	8d 44 04 48          	lea    eax,[esp+eax*1+0x48]
c0027d1e:	8b bc 24 ac 02 00 00 	mov    edi,DWORD PTR [esp+0x2ac]
c0027d25:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0027d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d2d:	c1 e0 02             	shl    eax,0x2
c0027d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0027d34:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0027d3b:	8d 1c f8             	lea    ebx,[eax+edi*8]
c0027d3e:	b8 18 00 00 00       	mov    eax,0x18
c0027d43:	29 e8                	sub    eax,ebp
c0027d45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0027d49:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027d50:	85 f6                	test   esi,esi
c0027d52:	dd 84 f4 e0 01 00 00 	fld    QWORD PTR [esp+esi*8+0x1e0]
c0027d59:	7e 6a                	jle    c0027dc5 <__kernel_rem_pio2+0x215>
c0027d5b:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0027d5f:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c0027d66:	8d 44 f5 f8          	lea    eax,[ebp+esi*8-0x8]
c0027d6a:	8d 54 24 50          	lea    edx,[esp+0x50]
c0027d6e:	0f b7 4c 24 46       	movzx  ecx,WORD PTR [esp+0x46]
c0027d73:	66 81 c9 00 0c       	or     cx,0xc00
c0027d78:	66 89 4c 24 44       	mov    WORD PTR [esp+0x44],cx
c0027d7d:	eb 03                	jmp    c0027d82 <__kernel_rem_pio2+0x1d2>
c0027d7f:	90                   	nop
c0027d80:	89 c8                	mov    eax,ecx
c0027d82:	83 c2 04             	add    edx,0x4
c0027d85:	d9 c0                	fld    st(0)
c0027d87:	d8 0d 9c 03 03 c0    	fmul   DWORD PTR ds:0xc003039c
c0027d8d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0027d90:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027d94:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0027d98:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0027d9c:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0027da0:	d9 c0                	fld    st(0)
c0027da2:	d8 0d 74 f8 02 c0    	fmul   DWORD PTR ds:0xc002f874
c0027da8:	de ea                	fsubp  st(2),st
c0027daa:	d9 c9                	fxch   st(1)
c0027dac:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027db0:	db 5a fc             	fistp  DWORD PTR [edx-0x4]
c0027db3:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0027db7:	39 c5                	cmp    ebp,eax
c0027db9:	dc 00                	fadd   QWORD PTR [eax]
c0027dbb:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027dbf:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027dc3:	75 bb                	jne    c0027d80 <__kernel_rem_pio2+0x1d0>
c0027dc5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0027dc9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027dcc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0027dd0:	e8 f7 f7 ff ff       	call   c00275cc <ldexp>
c0027dd5:	d9 c0                	fld    st(0)
c0027dd7:	db 7c 24 10          	fstp   TBYTE PTR [esp+0x10]
c0027ddb:	d8 0d a0 03 03 c0    	fmul   DWORD PTR ds:0xc00303a0
c0027de1:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027de4:	e8 8b f7 ff ff       	call   c0027574 <floor>
c0027de9:	d9 05 a4 03 03 c0    	fld    DWORD PTR ds:0xc00303a4
c0027def:	de c9                	fmulp  st(1),st
c0027df1:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0027df5:	db 6c 24 10          	fld    TBYTE PTR [esp+0x10]
c0027df9:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c0027dfe:	de e1                	fsubrp st(1),st
c0027e00:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027e04:	66 0d 00 0c          	or     ax,0xc00
c0027e08:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0027e0d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027e11:	85 ff                	test   edi,edi
c0027e13:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027e17:	db 54 24 40          	fist   DWORD PTR [esp+0x40]
c0027e1b:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0027e1f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0027e23:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027e27:	db 44 24 24          	fild   DWORD PTR [esp+0x24]
c0027e2b:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0027e2f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0027e33:	de e9                	fsubp  st(1),st
c0027e35:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027e39:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027e3d:	0f 8e 2d 01 00 00    	jle    c0027f70 <__kernel_rem_pio2+0x3c0>
c0027e43:	8d 7e ff             	lea    edi,[esi-0x1]
c0027e46:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c0027e4b:	8b 44 bc 50          	mov    eax,DWORD PTR [esp+edi*4+0x50]
c0027e4f:	89 c2                	mov    edx,eax
c0027e51:	d3 fa                	sar    edx,cl
c0027e53:	01 d5                	add    ebp,edx
c0027e55:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0027e59:	d3 e2                	shl    edx,cl
c0027e5b:	b9 17 00 00 00       	mov    ecx,0x17
c0027e60:	29 d0                	sub    eax,edx
c0027e62:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c0027e66:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0027e6a:	29 f9                	sub    ecx,edi
c0027e6c:	d3 f8                	sar    eax,cl
c0027e6e:	89 c5                	mov    ebp,eax
c0027e70:	85 ed                	test   ebp,ebp
c0027e72:	0f 8f 0e 01 00 00    	jg     c0027f86 <__kernel_rem_pio2+0x3d6>
c0027e78:	d9 ee                	fldz   
c0027e7a:	d9 c9                	fxch   st(1)
c0027e7c:	db e9                	fucomi st,st(1)
c0027e7e:	dd d9                	fstp   st(1)
c0027e80:	0f 8a a2 01 00 00    	jp     c0028028 <__kernel_rem_pio2+0x478>
c0027e86:	0f 85 9c 01 00 00    	jne    c0028028 <__kernel_rem_pio2+0x478>
c0027e8c:	dd d8                	fstp   st(0)
c0027e8e:	8d 7e ff             	lea    edi,[esi-0x1]
c0027e91:	39 7c 24 28          	cmp    DWORD PTR [esp+0x28],edi
c0027e95:	7f 2a                	jg     c0027ec1 <__kernel_rem_pio2+0x311>
c0027e97:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0027e9b:	8d 44 b4 4c          	lea    eax,[esp+esi*4+0x4c]
c0027e9f:	31 d2                	xor    edx,edx
c0027ea1:	eb 0d                	jmp    c0027eb0 <__kernel_rem_pio2+0x300>
c0027ea3:	90                   	nop
c0027ea4:	90                   	nop
c0027ea5:	90                   	nop
c0027ea6:	90                   	nop
c0027ea7:	90                   	nop
c0027ea8:	90                   	nop
c0027ea9:	90                   	nop
c0027eaa:	90                   	nop
c0027eab:	90                   	nop
c0027eac:	90                   	nop
c0027ead:	90                   	nop
c0027eae:	90                   	nop
c0027eaf:	90                   	nop
c0027eb0:	0b 10                	or     edx,DWORD PTR [eax]
c0027eb2:	83 e8 04             	sub    eax,0x4
c0027eb5:	39 c1                	cmp    ecx,eax
c0027eb7:	75 f7                	jne    c0027eb0 <__kernel_rem_pio2+0x300>
c0027eb9:	85 d2                	test   edx,edx
c0027ebb:	0f 85 85 02 00 00    	jne    c0028146 <__kernel_rem_pio2+0x596>
c0027ec1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027ec5:	8b 4c 84 4c          	mov    ecx,DWORD PTR [esp+eax*4+0x4c]
c0027ec9:	85 c9                	test   ecx,ecx
c0027ecb:	0f 85 48 02 00 00    	jne    c0028119 <__kernel_rem_pio2+0x569>
c0027ed1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0027ed5:	bf 01 00 00 00       	mov    edi,0x1
c0027eda:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027ee0:	83 e8 04             	sub    eax,0x4
c0027ee3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0027ee6:	47                   	inc    edi
c0027ee7:	85 d2                	test   edx,edx
c0027ee9:	74 f5                	je     c0027ee0 <__kernel_rem_pio2+0x330>
c0027eeb:	8d 4e 01             	lea    ecx,[esi+0x1]
c0027eee:	01 f7                	add    edi,esi
c0027ef0:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0027ef7:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c0027efe:	01 c6                	add    esi,eax
c0027f00:	8d b4 f4 a0 00 00 00 	lea    esi,[esp+esi*8+0xa0]
c0027f07:	89 f6                	mov    esi,esi
c0027f09:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027f10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027f14:	db 84 88 c0 f8 02 c0 	fild   DWORD PTR [eax+ecx*4-0x3ffd0740]
c0027f1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027f1f:	85 c0                	test   eax,eax
c0027f21:	dd 1e                	fstp   QWORD PTR [esi]
c0027f23:	78 3b                	js     c0027f60 <__kernel_rem_pio2+0x3b0>
c0027f25:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0027f2c:	d9 ee                	fldz   
c0027f2e:	89 f2                	mov    edx,esi
c0027f30:	dd 02                	fld    QWORD PTR [edx]
c0027f32:	83 c0 08             	add    eax,0x8
c0027f35:	83 ea 08             	sub    edx,0x8
c0027f38:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c0027f3b:	39 c3                	cmp    ebx,eax
c0027f3d:	de c1                	faddp  st(1),st
c0027f3f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027f43:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027f47:	75 e7                	jne    c0027f30 <__kernel_rem_pio2+0x380>
c0027f49:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c0027f4d:	41                   	inc    ecx
c0027f4e:	83 c6 08             	add    esi,0x8
c0027f51:	39 cf                	cmp    edi,ecx
c0027f53:	7d bb                	jge    c0027f10 <__kernel_rem_pio2+0x360>
c0027f55:	89 fe                	mov    esi,edi
c0027f57:	e9 f4 fd ff ff       	jmp    c0027d50 <__kernel_rem_pio2+0x1a0>
c0027f5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027f60:	d9 ee                	fldz   
c0027f62:	83 c6 08             	add    esi,0x8
c0027f65:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c0027f69:	41                   	inc    ecx
c0027f6a:	39 cf                	cmp    edi,ecx
c0027f6c:	7d a2                	jge    c0027f10 <__kernel_rem_pio2+0x360>
c0027f6e:	eb e5                	jmp    c0027f55 <__kernel_rem_pio2+0x3a5>
c0027f70:	0f 85 8a 01 00 00    	jne    c0028100 <__kernel_rem_pio2+0x550>
c0027f76:	8b 6c b4 4c          	mov    ebp,DWORD PTR [esp+esi*4+0x4c]
c0027f7a:	c1 fd 17             	sar    ebp,0x17
c0027f7d:	85 ed                	test   ebp,ebp
c0027f7f:	90                   	nop
c0027f80:	0f 8e f2 fe ff ff    	jle    c0027e78 <__kernel_rem_pio2+0x2c8>
c0027f86:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0027f8a:	85 f6                	test   esi,esi
c0027f8c:	0f 8e d3 04 00 00    	jle    c0028465 <__kernel_rem_pio2+0x8b5>
c0027f92:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0027f96:	85 d2                	test   edx,edx
c0027f98:	0f 85 12 01 00 00    	jne    c00280b0 <__kernel_rem_pio2+0x500>
c0027f9e:	83 fe 01             	cmp    esi,0x1
c0027fa1:	b9 01 00 00 00       	mov    ecx,0x1
c0027fa6:	74 15                	je     c0027fbd <__kernel_rem_pio2+0x40d>
c0027fa8:	8b 54 8c 50          	mov    edx,DWORD PTR [esp+ecx*4+0x50]
c0027fac:	8d 41 01             	lea    eax,[ecx+0x1]
c0027faf:	85 d2                	test   edx,edx
c0027fb1:	0f 85 00 01 00 00    	jne    c00280b7 <__kernel_rem_pio2+0x507>
c0027fb7:	39 c6                	cmp    esi,eax
c0027fb9:	89 c1                	mov    ecx,eax
c0027fbb:	75 eb                	jne    c0027fa8 <__kernel_rem_pio2+0x3f8>
c0027fbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027fc1:	85 c0                	test   eax,eax
c0027fc3:	7e 16                	jle    c0027fdb <__kernel_rem_pio2+0x42b>
c0027fc5:	83 f8 01             	cmp    eax,0x1
c0027fc8:	0f 84 51 04 00 00    	je     c002841f <__kernel_rem_pio2+0x86f>
c0027fce:	83 f8 02             	cmp    eax,0x2
c0027fd1:	75 08                	jne    c0027fdb <__kernel_rem_pio2+0x42b>
c0027fd3:	81 64 b4 4c ff ff 3f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x3fffff
c0027fdb:	83 fd 02             	cmp    ebp,0x2
c0027fde:	0f 85 94 fe ff ff    	jne    c0027e78 <__kernel_rem_pio2+0x2c8>
c0027fe4:	d9 e8                	fld1   
c0027fe6:	85 d2                	test   edx,edx
c0027fe8:	de e1                	fsubrp st(1),st
c0027fea:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027fee:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027ff2:	0f 84 80 fe ff ff    	je     c0027e78 <__kernel_rem_pio2+0x2c8>
c0027ff8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027ffc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0028000:	d9 e8                	fld1   
c0028002:	dd 1c 24             	fstp   QWORD PTR [esp]
c0028005:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028009:	e8 be f5 ff ff       	call   c00275cc <ldexp>
c002800e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0028012:	de e1                	fsubrp st(1),st
c0028014:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028018:	d9 ee                	fldz   
c002801a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002801e:	db e9                	fucomi st,st(1)
c0028020:	dd d9                	fstp   st(1)
c0028022:	0f 8b 5e fe ff ff    	jnp    c0027e86 <__kernel_rem_pio2+0x2d6>
c0028028:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002802c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002802f:	89 d8                	mov    eax,ebx
c0028031:	f7 d8                	neg    eax
c0028033:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028037:	e8 90 f5 ff ff       	call   c00275cc <ldexp>
c002803c:	d9 05 74 f8 02 c0    	fld    DWORD PTR ds:0xc002f874
c0028042:	d9 c9                	fxch   st(1)
c0028044:	db f1                	fcomi  st,st(1)
c0028046:	dd d9                	fstp   st(1)
c0028048:	0f 82 94 04 00 00    	jb     c00284e2 <__kernel_rem_pio2+0x932>
c002804e:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0028052:	83 c3 18             	add    ebx,0x18
c0028055:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0028059:	d9 c0                	fld    st(0)
c002805b:	d8 0d 9c 03 03 c0    	fmul   DWORD PTR ds:0xc003039c
c0028061:	8d 7e 01             	lea    edi,[esi+0x1]
c0028064:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c0028069:	66 0d 00 0c          	or     ax,0xc00
c002806d:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0028072:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0028076:	db 5c 24 40          	fistp  DWORD PTR [esp+0x40]
c002807a:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002807e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0028082:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028086:	db 44 24 1c          	fild   DWORD PTR [esp+0x1c]
c002808a:	d8 0d 74 f8 02 c0    	fmul   DWORD PTR ds:0xc002f874
c0028090:	de e9                	fsubp  st(1),st
c0028092:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0028096:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c002809a:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002809e:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c00280a2:	89 d8                	mov    eax,ebx
c00280a4:	e9 be 00 00 00       	jmp    c0028167 <__kernel_rem_pio2+0x5b7>
c00280a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00280b0:	b8 01 00 00 00       	mov    eax,0x1
c00280b5:	31 c9                	xor    ecx,ecx
c00280b7:	bf 00 00 00 01       	mov    edi,0x1000000
c00280bc:	29 d7                	sub    edi,edx
c00280be:	39 c6                	cmp    esi,eax
c00280c0:	89 7c 8c 50          	mov    DWORD PTR [esp+ecx*4+0x50],edi
c00280c4:	7e 30                	jle    c00280f6 <__kernel_rem_pio2+0x546>
c00280c6:	8b 4c 84 50          	mov    ecx,DWORD PTR [esp+eax*4+0x50]
c00280ca:	ba ff ff ff 00       	mov    edx,0xffffff
c00280cf:	29 ca                	sub    edx,ecx
c00280d1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00280d5:	40                   	inc    eax
c00280d6:	39 c6                	cmp    esi,eax
c00280d8:	7e 1c                	jle    c00280f6 <__kernel_rem_pio2+0x546>
c00280da:	8d 44 84 50          	lea    eax,[esp+eax*4+0x50]
c00280de:	b9 ff ff ff 00       	mov    ecx,0xffffff
c00280e3:	8d 7c b4 50          	lea    edi,[esp+esi*4+0x50]
c00280e7:	89 ca                	mov    edx,ecx
c00280e9:	83 c0 04             	add    eax,0x4
c00280ec:	2b 50 fc             	sub    edx,DWORD PTR [eax-0x4]
c00280ef:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00280f2:	39 c7                	cmp    edi,eax
c00280f4:	75 f1                	jne    c00280e7 <__kernel_rem_pio2+0x537>
c00280f6:	ba 01 00 00 00       	mov    edx,0x1
c00280fb:	e9 bd fe ff ff       	jmp    c0027fbd <__kernel_rem_pio2+0x40d>
c0028100:	d9 05 5c f5 02 c0    	fld    DWORD PTR ds:0xc002f55c
c0028106:	d9 c9                	fxch   st(1)
c0028108:	db f1                	fcomi  st,st(1)
c002810a:	dd d9                	fstp   st(1)
c002810c:	0f 83 2a 03 00 00    	jae    c002843c <__kernel_rem_pio2+0x88c>
c0028112:	31 ed                	xor    ebp,ebp
c0028114:	e9 5f fd ff ff       	jmp    c0027e78 <__kernel_rem_pio2+0x2c8>
c0028119:	8d 4e 01             	lea    ecx,[esi+0x1]
c002811c:	89 cf                	mov    edi,ecx
c002811e:	e9 cd fd ff ff       	jmp    c0027ef0 <__kernel_rem_pio2+0x340>
c0028123:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c002812a:	31 c0                	xor    eax,eax
c002812c:	e9 2e fb ff ff       	jmp    c0027c5f <__kernel_rem_pio2+0xaf>
c0028131:	d9 ee                	fldz   
c0028133:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c0028136:	83 c3 08             	add    ebx,0x8
c0028139:	39 dd                	cmp    ebp,ebx
c002813b:	0f 85 7f fb ff ff    	jne    c0027cc0 <__kernel_rem_pio2+0x110>
c0028141:	e9 bd fb ff ff       	jmp    c0027d03 <__kernel_rem_pio2+0x153>
c0028146:	8b 5c bc 50          	mov    ebx,DWORD PTR [esp+edi*4+0x50]
c002814a:	83 6c 24 24 18       	sub    DWORD PTR [esp+0x24],0x18
c002814f:	85 db                	test   ebx,ebx
c0028151:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0028155:	75 10                	jne    c0028167 <__kernel_rem_pio2+0x5b7>
c0028157:	4f                   	dec    edi
c0028158:	83 e8 18             	sub    eax,0x18
c002815b:	8b 4c bc 50          	mov    ecx,DWORD PTR [esp+edi*4+0x50]
c002815f:	85 c9                	test   ecx,ecx
c0028161:	74 f4                	je     c0028157 <__kernel_rem_pio2+0x5a7>
c0028163:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0028167:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002816b:	d9 e8                	fld1   
c002816d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0028170:	e8 57 f4 ff ff       	call   c00275cc <ldexp>
c0028175:	85 ff                	test   edi,edi
c0028177:	0f 88 d2 03 00 00    	js     c002854f <__kernel_rem_pio2+0x99f>
c002817d:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0028184:	89 f8                	mov    eax,edi
c0028186:	8d 76 00             	lea    esi,[esi+0x0]
c0028189:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0028190:	db 44 84 50          	fild   DWORD PTR [esp+eax*4+0x50]
c0028194:	d8 c9                	fmul   st,st(1)
c0028196:	dd 1c c6             	fstp   QWORD PTR [esi+eax*8]
c0028199:	48                   	dec    eax
c002819a:	d8 0d 9c 03 03 c0    	fmul   DWORD PTR ds:0xc003039c
c00281a0:	83 f8 ff             	cmp    eax,0xffffffff
c00281a3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00281a7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00281ab:	75 e3                	jne    c0028190 <__kernel_rem_pio2+0x5e0>
c00281ad:	dd d8                	fstp   st(0)
c00281af:	8d 04 fd 00 00 00 00 	lea    eax,[edi*8+0x0]
c00281b6:	31 d2                	xor    edx,edx
c00281b8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00281bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00281c0:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c00281c7:	01 f0                	add    eax,esi
c00281c9:	89 6c 24 20          	mov    DWORD PTR [esp+0x20],ebp
c00281cd:	eb 03                	jmp    c00281d2 <__kernel_rem_pio2+0x622>
c00281cf:	90                   	nop
c00281d0:	89 e8                	mov    eax,ebp
c00281d2:	85 db                	test   ebx,ebx
c00281d4:	0f 88 84 02 00 00    	js     c002845e <__kernel_rem_pio2+0x8ae>
c00281da:	d9 05 bc 03 03 c0    	fld    DWORD PTR ds:0xc00303bc
c00281e0:	dc 08                	fmul   QWORD PTR [eax]
c00281e2:	d8 05 98 03 03 c0    	fadd   DWORD PTR ds:0xc0030398
c00281e8:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00281ec:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00281f0:	0f 84 d9 00 00 00    	je     c00282cf <__kernel_rem_pio2+0x71f>
c00281f6:	85 d2                	test   edx,edx
c00281f8:	0f 84 d1 00 00 00    	je     c00282cf <__kernel_rem_pio2+0x71f>
c00281fe:	d9 05 a8 03 03 c0    	fld    DWORD PTR ds:0xc00303a8
c0028204:	83 fb 01             	cmp    ebx,0x1
c0028207:	dc 48 08             	fmul   QWORD PTR [eax+0x8]
c002820a:	de c1                	faddp  st(1),st
c002820c:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028210:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028214:	0f 84 b5 00 00 00    	je     c00282cf <__kernel_rem_pio2+0x71f>
c002821a:	83 fa 01             	cmp    edx,0x1
c002821d:	0f 84 ac 00 00 00    	je     c00282cf <__kernel_rem_pio2+0x71f>
c0028223:	d9 05 ac 03 03 c0    	fld    DWORD PTR ds:0xc00303ac
c0028229:	83 fb 02             	cmp    ebx,0x2
c002822c:	dc 48 10             	fmul   QWORD PTR [eax+0x10]
c002822f:	de c1                	faddp  st(1),st
c0028231:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028235:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028239:	0f 84 90 00 00 00    	je     c00282cf <__kernel_rem_pio2+0x71f>
c002823f:	83 fa 02             	cmp    edx,0x2
c0028242:	0f 84 87 00 00 00    	je     c00282cf <__kernel_rem_pio2+0x71f>
c0028248:	d9 05 b0 03 03 c0    	fld    DWORD PTR ds:0xc00303b0
c002824e:	83 fb 03             	cmp    ebx,0x3
c0028251:	dc 48 18             	fmul   QWORD PTR [eax+0x18]
c0028254:	de c1                	faddp  st(1),st
c0028256:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002825a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002825e:	74 6f                	je     c00282cf <__kernel_rem_pio2+0x71f>
c0028260:	83 fa 03             	cmp    edx,0x3
c0028263:	74 6a                	je     c00282cf <__kernel_rem_pio2+0x71f>
c0028265:	d9 05 b4 03 03 c0    	fld    DWORD PTR ds:0xc00303b4
c002826b:	83 fb 04             	cmp    ebx,0x4
c002826e:	dc 48 20             	fmul   QWORD PTR [eax+0x20]
c0028271:	de c1                	faddp  st(1),st
c0028273:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028277:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002827b:	74 52                	je     c00282cf <__kernel_rem_pio2+0x71f>
c002827d:	83 fa 04             	cmp    edx,0x4
c0028280:	74 4d                	je     c00282cf <__kernel_rem_pio2+0x71f>
c0028282:	d9 05 b8 03 03 c0    	fld    DWORD PTR ds:0xc00303b8
c0028288:	83 fb 05             	cmp    ebx,0x5
c002828b:	dc 48 28             	fmul   QWORD PTR [eax+0x28]
c002828e:	de c1                	faddp  st(1),st
c0028290:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028294:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028298:	74 35                	je     c00282cf <__kernel_rem_pio2+0x71f>
c002829a:	83 fa 05             	cmp    edx,0x5
c002829d:	74 30                	je     c00282cf <__kernel_rem_pio2+0x71f>
c002829f:	dd 05 c0 03 03 c0    	fld    QWORD PTR ds:0xc00303c0
c00282a5:	83 fb 06             	cmp    ebx,0x6
c00282a8:	dc 48 30             	fmul   QWORD PTR [eax+0x30]
c00282ab:	de c1                	faddp  st(1),st
c00282ad:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00282b1:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00282b5:	74 18                	je     c00282cf <__kernel_rem_pio2+0x71f>
c00282b7:	83 fa 06             	cmp    edx,0x6
c00282ba:	74 13                	je     c00282cf <__kernel_rem_pio2+0x71f>
c00282bc:	dd 05 c8 03 03 c0    	fld    QWORD PTR ds:0xc00303c8
c00282c2:	dc 48 38             	fmul   QWORD PTR [eax+0x38]
c00282c5:	de c1                	faddp  st(1),st
c00282c7:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00282cb:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00282cf:	dd 1c d1             	fstp   QWORD PTR [ecx+edx*8]
c00282d2:	42                   	inc    edx
c00282d3:	8d 68 f8             	lea    ebp,[eax-0x8]
c00282d6:	39 c6                	cmp    esi,eax
c00282d8:	0f 85 f2 fe ff ff    	jne    c00281d0 <__kernel_rem_pio2+0x620>
c00282de:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c00282e6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00282ea:	7f 4f                	jg     c002833b <__kernel_rem_pio2+0x78b>
c00282ec:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c00282f3:	85 c0                	test   eax,eax
c00282f5:	0f 8f 71 01 00 00    	jg     c002846c <__kernel_rem_pio2+0x8bc>
c00282fb:	75 2c                	jne    c0028329 <__kernel_rem_pio2+0x779>
c00282fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028301:	d9 ee                	fldz   
c0028303:	01 c8                	add    eax,ecx
c0028305:	eb 02                	jmp    c0028309 <__kernel_rem_pio2+0x759>
c0028307:	89 d0                	mov    eax,edx
c0028309:	39 c8                	cmp    eax,ecx
c002830b:	dc 00                	fadd   QWORD PTR [eax]
c002830d:	8d 50 f8             	lea    edx,[eax-0x8]
c0028310:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028314:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028318:	75 ed                	jne    c0028307 <__kernel_rem_pio2+0x757>
c002831a:	85 ed                	test   ebp,ebp
c002831c:	74 02                	je     c0028320 <__kernel_rem_pio2+0x770>
c002831e:	d9 e0                	fchs   
c0028320:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0028327:	dd 18                	fstp   QWORD PTR [eax]
c0028329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002832d:	81 c4 8c 02 00 00    	add    esp,0x28c
c0028333:	5b                   	pop    ebx
c0028334:	5e                   	pop    esi
c0028335:	83 e0 07             	and    eax,0x7
c0028338:	5f                   	pop    edi
c0028339:	5d                   	pop    ebp
c002833a:	c3                   	ret    
c002833b:	83 bc 24 b0 02 00 00 03 	cmp    DWORD PTR [esp+0x2b0],0x3
c0028343:	75 e4                	jne    c0028329 <__kernel_rem_pio2+0x779>
c0028345:	85 ff                	test   edi,edi
c0028347:	0f 8e 38 02 00 00    	jle    c0028585 <__kernel_rem_pio2+0x9d5>
c002834d:	8d 14 fd 00 00 00 00 	lea    edx,[edi*8+0x0]
c0028354:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c002835b:	dd 84 14 40 01 00 00 	fld    QWORD PTR [esp+edx*1+0x140]
c0028362:	8d 44 11 f8          	lea    eax,[ecx+edx*1-0x8]
c0028366:	eb 02                	jmp    c002836a <__kernel_rem_pio2+0x7ba>
c0028368:	89 d0                	mov    eax,edx
c002836a:	dd 00                	fld    QWORD PTR [eax]
c002836c:	8d 50 f8             	lea    edx,[eax-0x8]
c002836f:	39 c1                	cmp    ecx,eax
c0028371:	d9 c1                	fld    st(1)
c0028373:	d9 c1                	fld    st(1)
c0028375:	de c3                	faddp  st(3),st
c0028377:	d9 ca                	fxch   st(2)
c0028379:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002837d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028381:	d9 c0                	fld    st(0)
c0028383:	dc ea                	fsub   st(2),st
c0028385:	d9 ca                	fxch   st(2)
c0028387:	de c3                	faddp  st(3),st
c0028389:	d9 ca                	fxch   st(2)
c002838b:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c002838e:	d9 c9                	fxch   st(1)
c0028390:	dd 18                	fstp   QWORD PTR [eax]
c0028392:	75 d4                	jne    c0028368 <__kernel_rem_pio2+0x7b8>
c0028394:	dd d8                	fstp   st(0)
c0028396:	83 ff 01             	cmp    edi,0x1
c0028399:	0f 8e e6 01 00 00    	jle    c0028585 <__kernel_rem_pio2+0x9d5>
c002839f:	c1 e7 03             	shl    edi,0x3
c00283a2:	8d 44 39 f8          	lea    eax,[ecx+edi*1-0x8]
c00283a6:	dd 84 3c 40 01 00 00 	fld    QWORD PTR [esp+edi*1+0x140]
c00283ad:	eb 02                	jmp    c00283b1 <__kernel_rem_pio2+0x801>
c00283af:	89 d0                	mov    eax,edx
c00283b1:	dd 00                	fld    QWORD PTR [eax]
c00283b3:	8d 50 f8             	lea    edx,[eax-0x8]
c00283b6:	d9 c1                	fld    st(1)
c00283b8:	39 d1                	cmp    ecx,edx
c00283ba:	d9 c1                	fld    st(1)
c00283bc:	de c3                	faddp  st(3),st
c00283be:	d9 ca                	fxch   st(2)
c00283c0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00283c4:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00283c8:	d9 c0                	fld    st(0)
c00283ca:	dc ea                	fsub   st(2),st
c00283cc:	d9 ca                	fxch   st(2)
c00283ce:	de c3                	faddp  st(3),st
c00283d0:	d9 ca                	fxch   st(2)
c00283d2:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00283d5:	d9 c9                	fxch   st(1)
c00283d7:	dd 18                	fstp   QWORD PTR [eax]
c00283d9:	75 d4                	jne    c00283af <__kernel_rem_pio2+0x7ff>
c00283db:	dd d8                	fstp   st(0)
c00283dd:	d9 ee                	fldz   
c00283df:	01 f9                	add    ecx,edi
c00283e1:	83 e9 08             	sub    ecx,0x8
c00283e4:	dc 41 08             	fadd   QWORD PTR [ecx+0x8]
c00283e7:	39 c8                	cmp    eax,ecx
c00283e9:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00283ed:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00283f1:	75 ee                	jne    c00283e1 <__kernel_rem_pio2+0x831>
c00283f3:	dd 84 24 40 01 00 00 	fld    QWORD PTR [esp+0x140]
c00283fa:	85 ed                	test   ebp,ebp
c00283fc:	dd 84 24 48 01 00 00 	fld    QWORD PTR [esp+0x148]
c0028403:	0f 85 02 01 00 00    	jne    c002850b <__kernel_rem_pio2+0x95b>
c0028409:	d9 c9                	fxch   st(1)
c002840b:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0028412:	dd 18                	fstp   QWORD PTR [eax]
c0028414:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0028417:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c002841a:	e9 0a ff ff ff       	jmp    c0028329 <__kernel_rem_pio2+0x779>
c002841f:	81 64 b4 4c ff ff 7f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x7fffff
c0028427:	e9 af fb ff ff       	jmp    c0027fdb <__kernel_rem_pio2+0x42b>
c002842c:	31 d2                	xor    edx,edx
c002842e:	b8 e8 ff ff ff       	mov    eax,0xffffffe8
c0028433:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0028437:	e9 d3 f7 ff ff       	jmp    c0027c0f <__kernel_rem_pio2+0x5f>
c002843c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0028440:	85 f6                	test   esi,esi
c0028442:	bd 02 00 00 00       	mov    ebp,0x2
c0028447:	0f 8f 45 fb ff ff    	jg     c0027f92 <__kernel_rem_pio2+0x3e2>
c002844d:	d9 e8                	fld1   
c002844f:	de e1                	fsubrp st(1),st
c0028451:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028455:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028459:	e9 1a fa ff ff       	jmp    c0027e78 <__kernel_rem_pio2+0x2c8>
c002845e:	d9 ee                	fldz   
c0028460:	e9 6a fe ff ff       	jmp    c00282cf <__kernel_rem_pio2+0x71f>
c0028465:	31 d2                	xor    edx,edx
c0028467:	e9 51 fb ff ff       	jmp    c0027fbd <__kernel_rem_pio2+0x40d>
c002846c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028470:	d9 ee                	fldz   
c0028472:	01 c8                	add    eax,ecx
c0028474:	eb 02                	jmp    c0028478 <__kernel_rem_pio2+0x8c8>
c0028476:	89 d0                	mov    eax,edx
c0028478:	39 c8                	cmp    eax,ecx
c002847a:	dc 00                	fadd   QWORD PTR [eax]
c002847c:	8d 50 f8             	lea    edx,[eax-0x8]
c002847f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028483:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028487:	75 ed                	jne    c0028476 <__kernel_rem_pio2+0x8c6>
c0028489:	d9 c0                	fld    st(0)
c002848b:	85 ed                	test   ebp,ebp
c002848d:	0f 85 94 00 00 00    	jne    c0028527 <__kernel_rem_pio2+0x977>
c0028493:	d9 c9                	fxch   st(1)
c0028495:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c002849c:	85 ff                	test   edi,edi
c002849e:	dd 18                	fstp   QWORD PTR [eax]
c00284a0:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c00284a7:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00284ab:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00284af:	7e 22                	jle    c00284d3 <__kernel_rem_pio2+0x923>
c00284b1:	8d 84 24 48 01 00 00 	lea    eax,[esp+0x148]
c00284b8:	8d 14 f8             	lea    edx,[eax+edi*8]
c00284bb:	83 c0 08             	add    eax,0x8
c00284be:	dc 40 f8             	fadd   QWORD PTR [eax-0x8]
c00284c1:	39 d0                	cmp    eax,edx
c00284c3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00284c7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00284cb:	75 ee                	jne    c00284bb <__kernel_rem_pio2+0x90b>
c00284cd:	85 ed                	test   ebp,ebp
c00284cf:	74 02                	je     c00284d3 <__kernel_rem_pio2+0x923>
c00284d1:	d9 e0                	fchs   
c00284d3:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00284da:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00284dd:	e9 47 fe ff ff       	jmp    c0028329 <__kernel_rem_pio2+0x779>
c00284e2:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c00284e6:	89 f7                	mov    edi,esi
c00284e8:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c00284ed:	66 0d 00 0c          	or     ax,0xc00
c00284f1:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c00284f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00284fa:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00284fe:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c0028502:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0028506:	e9 5c fc ff ff       	jmp    c0028167 <__kernel_rem_pio2+0x5b7>
c002850b:	d9 c9                	fxch   st(1)
c002850d:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0028514:	d9 e0                	fchs   
c0028516:	dd 18                	fstp   QWORD PTR [eax]
c0028518:	d9 e0                	fchs   
c002851a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c002851d:	d9 e0                	fchs   
c002851f:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0028522:	e9 02 fe ff ff       	jmp    c0028329 <__kernel_rem_pio2+0x779>
c0028527:	d9 c9                	fxch   st(1)
c0028529:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0028530:	d9 e0                	fchs   
c0028532:	85 ff                	test   edi,edi
c0028534:	dd 18                	fstp   QWORD PTR [eax]
c0028536:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c002853d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0028541:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0028545:	0f 8f 66 ff ff ff    	jg     c00284b1 <__kernel_rem_pio2+0x901>
c002854b:	d9 e0                	fchs   
c002854d:	eb 84                	jmp    c00284d3 <__kernel_rem_pio2+0x923>
c002854f:	dd d8                	fstp   st(0)
c0028551:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0028559:	0f 8f dc fd ff ff    	jg     c002833b <__kernel_rem_pio2+0x78b>
c002855f:	8b 94 24 b0 02 00 00 	mov    edx,DWORD PTR [esp+0x2b0]
c0028566:	85 d2                	test   edx,edx
c0028568:	7f 0d                	jg     c0028577 <__kernel_rem_pio2+0x9c7>
c002856a:	0f 85 b9 fd ff ff    	jne    c0028329 <__kernel_rem_pio2+0x779>
c0028570:	d9 ee                	fldz   
c0028572:	e9 a3 fd ff ff       	jmp    c002831a <__kernel_rem_pio2+0x76a>
c0028577:	d9 ee                	fldz   
c0028579:	d9 ee                	fldz   
c002857b:	90                   	nop
c002857c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0028580:	e9 06 ff ff ff       	jmp    c002848b <__kernel_rem_pio2+0x8db>
c0028585:	d9 ee                	fldz   
c0028587:	e9 67 fe ff ff       	jmp    c00283f3 <__kernel_rem_pio2+0x843>
c002858c:	66 90                	xchg   ax,ax
c002858e:	66 90                	xchg   ax,ax

c0028590 <__kernel_sin>:
c0028590:	83 ec 0c             	sub    esp,0xc
c0028593:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0028597:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002859b:	d9 c0                	fld    st(0)
c002859d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00285a1:	d8 c9                	fmul   st,st(1)
c00285a3:	85 c0                	test   eax,eax
c00285a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00285a8:	dd 04 24             	fld    QWORD PTR [esp]
c00285ab:	d9 c1                	fld    st(1)
c00285ad:	d8 c9                	fmul   st,st(1)
c00285af:	dd 1c 24             	fstp   QWORD PTR [esp]
c00285b2:	dd 04 24             	fld    QWORD PTR [esp]
c00285b5:	d9 c1                	fld    st(1)
c00285b7:	d8 ca                	fmul   st,st(2)
c00285b9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00285bc:	dd 04 24             	fld    QWORD PTR [esp]
c00285bf:	d8 ca                	fmul   st,st(2)
c00285c1:	d9 c2                	fld    st(2)
c00285c3:	dc 0d d0 03 03 c0    	fmul   QWORD PTR ds:0xc00303d0
c00285c9:	dc 25 d8 03 03 c0    	fsub   QWORD PTR ds:0xc00303d8
c00285cf:	de c9                	fmulp  st(1),st
c00285d1:	d9 c2                	fld    st(2)
c00285d3:	dc 0d e0 03 03 c0    	fmul   QWORD PTR ds:0xc00303e0
c00285d9:	dc 25 e8 03 03 c0    	fsub   QWORD PTR ds:0xc00303e8
c00285df:	d8 cb                	fmul   st,st(3)
c00285e1:	dc 05 f0 03 03 c0    	fadd   QWORD PTR ds:0xc00303f0
c00285e7:	de c1                	faddp  st(1),st
c00285e9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00285ec:	dd 04 24             	fld    QWORD PTR [esp]
c00285ef:	75 2f                	jne    c0028620 <__kernel_sin+0x90>
c00285f1:	dd dc                	fstp   st(4)
c00285f3:	d9 c9                	fxch   st(1)
c00285f5:	d9 ca                	fxch   st(2)
c00285f7:	d9 cb                	fxch   st(3)
c00285f9:	de ca                	fmulp  st(2),st
c00285fb:	d9 c9                	fxch   st(1)
c00285fd:	dc 25 f8 03 03 c0    	fsub   QWORD PTR ds:0xc00303f8
c0028603:	de c9                	fmulp  st(1),st
c0028605:	de c1                	faddp  st(1),st
c0028607:	dd 1c 24             	fstp   QWORD PTR [esp]
c002860a:	dd 04 24             	fld    QWORD PTR [esp]
c002860d:	83 c4 0c             	add    esp,0xc
c0028610:	c3                   	ret    
c0028611:	eb 0d                	jmp    c0028620 <__kernel_sin+0x90>
c0028613:	90                   	nop
c0028614:	90                   	nop
c0028615:	90                   	nop
c0028616:	90                   	nop
c0028617:	90                   	nop
c0028618:	90                   	nop
c0028619:	90                   	nop
c002861a:	90                   	nop
c002861b:	90                   	nop
c002861c:	90                   	nop
c002861d:	90                   	nop
c002861e:	90                   	nop
c002861f:	90                   	nop
c0028620:	d9 c4                	fld    st(4)
c0028622:	d8 0d 5c f5 02 c0    	fmul   DWORD PTR ds:0xc002f55c
c0028628:	d9 c9                	fxch   st(1)
c002862a:	d8 ca                	fmul   st,st(2)
c002862c:	de e9                	fsubp  st(1),st
c002862e:	de ca                	fmulp  st(2),st
c0028630:	d9 c9                	fxch   st(1)
c0028632:	de e3                	fsubrp st(3),st
c0028634:	dc 0d f8 03 03 c0    	fmul   QWORD PTR ds:0xc00303f8
c002863a:	de c2                	faddp  st(2),st
c002863c:	de e1                	fsubrp st(1),st
c002863e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0028641:	dd 04 24             	fld    QWORD PTR [esp]
c0028644:	83 c4 0c             	add    esp,0xc
c0028647:	c3                   	ret    

Disassembly of section .init:

c0028648 <_init>:
c0028648:	55                   	push   ebp
c0028649:	89 e5                	mov    ebp,esp
c002864b:	e8 a4 7a fd ff       	call   c00000f4 <frame_dummy>
c0028650:	e8 0b c2 ff ff       	call   c0024860 <__do_global_ctors_aux>
c0028655:	5d                   	pop    ebp
c0028656:	c3                   	ret    

Disassembly of section .fini:

c0028657 <_fini>:
c0028657:	55                   	push   ebp
c0028658:	89 e5                	mov    ebp,esp
c002865a:	e8 25 7a fd ff       	call   c0000084 <__do_global_dtors_aux>
c002865f:	5d                   	pop    ebp
c0028660:	c3                   	ret    

Disassembly of section .text._ZN12RootHardware10_getDriverEv:

c0028664 <RootHardware::_getDriver()>:
c0028664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028668:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c002866e:	c3                   	ret    

Disassembly of section .text._ZN12RootHardware7getTypeEv:

c0028670 <RootHardware::getType()>:
c0028670:	b8 04 00 00 00       	mov    eax,0x4
c0028675:	c3                   	ret    

Disassembly of section .text._ZN6DriverC2Ev:

c0028678 <Driver::Driver()>:
c0028678:	ba d4 b1 02 c0       	mov    edx,0xc002b1d4
c002867d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028681:	89 10                	mov    DWORD PTR [eax],edx
c0028683:	90                   	nop
c0028684:	c3                   	ret    

Disassembly of section .text._ZN10RootDriverC2Ev:

c0028688 <RootDriver::RootDriver()>:
c0028688:	83 ec 0c             	sub    esp,0xc
c002868b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868f:	83 ec 0c             	sub    esp,0xc
c0028692:	50                   	push   eax
c0028693:	e8 e0 ff ff ff       	call   c0028678 <Driver::Driver()>
c0028698:	83 c4 10             	add    esp,0x10
c002869b:	ba 6c b2 02 c0       	mov    edx,0xc002b26c
c00286a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a4:	89 10                	mov    DWORD PTR [eax],edx
c00286a6:	90                   	nop
c00286a7:	83 c4 0c             	add    esp,0xc
c00286aa:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorD2Ev:

c00286ac <std::vector<Hardware*>::iterator::~iterator()>:
c00286ac:	90                   	nop
c00286ad:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2ERKS3_:

c00286b0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>:
c00286b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00286b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00286b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286ba:	89 10                	mov    DWORD PTR [eax],edx
c00286bc:	90                   	nop
c00286bd:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratorneERKS3_:

c00286c0 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>:
c00286c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00286c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00286ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00286cc:	39 c2                	cmp    edx,eax
c00286ce:	0f 95 c0             	setne  al
c00286d1:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratordeEv:

c00286d4 <std::vector<Hardware*>::iterator::operator*() const>:
c00286d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00286da:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE8iteratorD2Ev:

c00286dc <std::vector<DevicePortRange>::iterator::~iterator()>:
c00286dc:	90                   	nop
c00286dd:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorI15DevicePortRangeE8iteratorneERKS2_:

c00286e0 <std::vector<DevicePortRange>::iterator::operator!=(std::vector<DevicePortRange>::iterator const&) const>:
c00286e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00286e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00286ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00286ec:	39 c2                	cmp    edx,eax
c00286ee:	0f 95 c0             	setne  al
c00286f1:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorI15DevicePortRangeE8iteratordeEv:

c00286f4 <std::vector<DevicePortRange>::iterator::operator*() const>:
c00286f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00286fa:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeED2Ev:

c00286fc <std::vector<DeviceMemoryRange>::~vector()>:
c00286fc:	83 ec 0c             	sub    esp,0xc
c00286ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028703:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028706:	85 c0                	test   eax,eax
c0028708:	74 1e                	je     c0028728 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c002870a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028711:	85 c0                	test   eax,eax
c0028713:	74 13                	je     c0028728 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c0028715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028719:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002871c:	83 ec 0c             	sub    esp,0xc
c002871f:	50                   	push   eax
c0028720:	e8 f8 59 fe ff       	call   c000e11d <operator delete[](void*)>
c0028725:	83 c4 10             	add    esp,0x10
c0028728:	90                   	nop
c0028729:	83 c4 0c             	add    esp,0xc
c002872c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeED2Ev:

c0028730 <std::vector<DevicePortRange>::~vector()>:
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028737:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002873a:	85 c0                	test   eax,eax
c002873c:	74 1e                	je     c002875c <std::vector<DevicePortRange>::~vector()+0x2c>
c002873e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028742:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028745:	85 c0                	test   eax,eax
c0028747:	74 13                	je     c002875c <std::vector<DevicePortRange>::~vector()+0x2c>
c0028749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028750:	83 ec 0c             	sub    esp,0xc
c0028753:	50                   	push   eax
c0028754:	e8 c4 59 fe ff       	call   c000e11d <operator delete[](void*)>
c0028759:	83 c4 10             	add    esp,0x10
c002875c:	90                   	nop
c002875d:	83 c4 0c             	add    esp,0xc
c0028760:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareED2Ev:

c0028764 <std::vector<Hardware*>::~vector()>:
c0028764:	83 ec 0c             	sub    esp,0xc
c0028767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002876e:	85 c0                	test   eax,eax
c0028770:	74 1e                	je     c0028790 <std::vector<Hardware*>::~vector()+0x2c>
c0028772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028776:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028779:	85 c0                	test   eax,eax
c002877b:	74 13                	je     c0028790 <std::vector<Hardware*>::~vector()+0x2c>
c002877d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028781:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028784:	83 ec 0c             	sub    esp,0xc
c0028787:	50                   	push   eax
c0028788:	e8 90 59 fe ff       	call   c000e11d <operator delete[](void*)>
c002878d:	83 c4 10             	add    esp,0x10
c0028790:	90                   	nop
c0028791:	83 c4 0c             	add    esp,0xc
c0028794:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareD2Ev:

c0028798 <RootHardware::~RootHardware()>:
c0028798:	83 ec 0c             	sub    esp,0xc
c002879b:	ba f0 b1 02 c0       	mov    edx,0xc002b1f0
c00287a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a4:	89 10                	mov    DWORD PTR [eax],edx
c00287a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287aa:	83 ec 0c             	sub    esp,0xc
c00287ad:	50                   	push   eax
c00287ae:	e8 bd ec fd ff       	call   c0007470 <Hardware::~Hardware()>
c00287b3:	83 c4 10             	add    esp,0x10
c00287b6:	90                   	nop
c00287b7:	83 c4 0c             	add    esp,0xc
c00287ba:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareD0Ev:

c00287bc <RootHardware::~RootHardware()>:
c00287bc:	83 ec 0c             	sub    esp,0xc
c00287bf:	83 ec 0c             	sub    esp,0xc
c00287c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287c6:	e8 cd ff ff ff       	call   c0028798 <RootHardware::~RootHardware()>
c00287cb:	83 c4 10             	add    esp,0x10
c00287ce:	83 ec 08             	sub    esp,0x8
c00287d1:	68 8c 00 00 00       	push   0x8c
c00287d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287da:	e8 39 59 fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c00287df:	83 c4 10             	add    esp,0x10
c00287e2:	83 c4 0c             	add    esp,0xc
c00287e5:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeEC2Ev:

c00287e8 <std::vector<DeviceMemoryRange>::vector()>:
c00287e8:	83 ec 1c             	sub    esp,0x1c
c00287eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00287ef:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00287f6:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00287fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028802:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c0028807:	77 07                	ja     c0028810 <std::vector<DeviceMemoryRange>::vector()+0x28>
c0028809:	c1 e0 03             	shl    eax,0x3
c002880c:	eb 0a                	jmp    c0028818 <std::vector<DeviceMemoryRange>::vector()+0x30>
c002880e:	66 90                	xchg   ax,ax
c0028810:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028815:	8d 76 00             	lea    esi,[esi+0x0]
c0028818:	83 ec 0c             	sub    esp,0xc
c002881b:	50                   	push   eax
c002881c:	e8 f2 58 fe ff       	call   c000e113 <operator new[](unsigned long)>
c0028821:	83 c4 10             	add    esp,0x10
c0028824:	89 c2                	mov    edx,eax
c0028826:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002882a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002882d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028831:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028834:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028838:	89 10                	mov    DWORD PTR [eax],edx
c002883a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002883e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028845:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002884c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0028853:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002885b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002885e:	90                   	nop
c002885f:	83 c4 1c             	add    esp,0x1c
c0028862:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeEC2Ev:

c0028864 <std::vector<DevicePortRange>::vector()>:
c0028864:	83 ec 1c             	sub    esp,0x1c
c0028867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002886b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0028872:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c002887a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002887e:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0028883:	77 07                	ja     c002888c <std::vector<DevicePortRange>::vector()+0x28>
c0028885:	c1 e0 02             	shl    eax,0x2
c0028888:	eb 0a                	jmp    c0028894 <std::vector<DevicePortRange>::vector()+0x30>
c002888a:	66 90                	xchg   ax,ax
c002888c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028891:	8d 76 00             	lea    esi,[esi+0x0]
c0028894:	83 ec 0c             	sub    esp,0xc
c0028897:	50                   	push   eax
c0028898:	e8 76 58 fe ff       	call   c000e113 <operator new[](unsigned long)>
c002889d:	83 c4 10             	add    esp,0x10
c00288a0:	89 c2                	mov    edx,eax
c00288a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288ad:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288b4:	89 10                	mov    DWORD PTR [eax],edx
c00288b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288ba:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288c8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00288cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00288d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00288da:	90                   	nop
c00288db:	83 c4 1c             	add    esp,0x1c
c00288de:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareEC2Ev:

c00288e0 <std::vector<Hardware*>::vector()>:
c00288e0:	83 ec 1c             	sub    esp,0x1c
c00288e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288e7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00288ee:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00288f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00288fa:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c00288ff:	77 07                	ja     c0028908 <std::vector<Hardware*>::vector()+0x28>
c0028901:	c1 e0 02             	shl    eax,0x2
c0028904:	eb 0a                	jmp    c0028910 <std::vector<Hardware*>::vector()+0x30>
c0028906:	66 90                	xchg   ax,ax
c0028908:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002890d:	8d 76 00             	lea    esi,[esi+0x0]
c0028910:	83 ec 0c             	sub    esp,0xc
c0028913:	50                   	push   eax
c0028914:	e8 fa 57 fe ff       	call   c000e113 <operator new[](unsigned long)>
c0028919:	83 c4 10             	add    esp,0x10
c002891c:	89 c2                	mov    edx,eax
c002891e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028922:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028929:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002892c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028930:	89 10                	mov    DWORD PTR [eax],edx
c0028932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028936:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002893d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028944:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002894b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002894f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028953:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0028956:	90                   	nop
c0028957:	83 c4 1c             	add    esp,0x1c
c002895a:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareC2Ev:

c002895c <RootHardware::RootHardware()>:
c002895c:	53                   	push   ebx
c002895d:	83 ec 18             	sub    esp,0x18
c0028960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028964:	83 ec 0c             	sub    esp,0xc
c0028967:	50                   	push   eax
c0028968:	e8 7b eb fd ff       	call   c00074e8 <Hardware::Hardware()>
c002896d:	83 c4 10             	add    esp,0x10
c0028970:	ba f0 b1 02 c0       	mov    edx,0xc002b1f0
c0028975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028979:	89 10                	mov    DWORD PTR [eax],edx
c002897b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0028983:	83 ec 0c             	sub    esp,0xc
c0028986:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002898a:	e8 80 7c fe ff       	call   c001060f <malloc>
c002898f:	83 c4 10             	add    esp,0x10
c0028992:	89 c3                	mov    ebx,eax
c0028994:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002899a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00289a1:	83 ec 0c             	sub    esp,0xc
c00289a4:	53                   	push   ebx
c00289a5:	e8 de fc ff ff       	call   c0028688 <RootDriver::RootDriver()>
c00289aa:	83 c4 10             	add    esp,0x10
c00289ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289b1:	89 98 88 00 00 00    	mov    DWORD PTR [eax+0x88],ebx
c00289b7:	90                   	nop
c00289b8:	83 c4 18             	add    esp,0x18
c00289bb:	5b                   	pop    ebx
c00289bc:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2EPS1_:

c00289c0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>:
c00289c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00289c8:	89 10                	mov    DWORD PTR [eax],edx
c00289ca:	90                   	nop
c00289cb:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5beginEv:

c00289cc <std::vector<Hardware*>::begin()>:
c00289cc:	83 ec 0c             	sub    esp,0xc
c00289cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00289d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00289d5:	83 ec 08             	sub    esp,0x8
c00289d8:	50                   	push   eax
c00289d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289dd:	e8 de ff ff ff       	call   c00289c0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c00289e2:	83 c4 10             	add    esp,0x10
c00289e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e9:	83 c4 0c             	add    esp,0xc
c00289ec:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE3endEv:

c00289f0 <std::vector<Hardware*>::end()>:
c00289f0:	83 ec 0c             	sub    esp,0xc
c00289f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00289f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289fa:	83 ec 08             	sub    esp,0x8
c00289fd:	50                   	push   eax
c00289fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a02:	e8 b9 ff ff ff       	call   c00289c0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028a07:	83 c4 10             	add    esp,0x10
c0028a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0e:	83 c4 0c             	add    esp,0xc
c0028a11:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEv:

c0028a14 <std::vector<Hardware*>::iterator::operator++()>:
c0028a14:	83 ec 0c             	sub    esp,0xc
c0028a17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a1d:	8d 50 04             	lea    edx,[eax+0x4]
c0028a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a24:	89 10                	mov    DWORD PTR [eax],edx
c0028a26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a2c:	83 ec 08             	sub    esp,0x8
c0028a2f:	50                   	push   eax
c0028a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a34:	e8 87 ff ff ff       	call   c00289c0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028a39:	83 c4 10             	add    esp,0x10
c0028a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a40:	83 c4 0c             	add    esp,0xc
c0028a43:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE8iteratorC2EPS0_:

c0028a48 <std::vector<DevicePortRange>::iterator::iterator(DevicePortRange*)>:
c0028a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0028a50:	89 10                	mov    DWORD PTR [eax],edx
c0028a52:	90                   	nop
c0028a53:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE5beginEv:

c0028a54 <std::vector<DevicePortRange>::begin()>:
c0028a54:	83 ec 0c             	sub    esp,0xc
c0028a57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a5d:	83 ec 08             	sub    esp,0x8
c0028a60:	50                   	push   eax
c0028a61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a65:	e8 de ff ff ff       	call   c0028a48 <std::vector<DevicePortRange>::iterator::iterator(DevicePortRange*)>
c0028a6a:	83 c4 10             	add    esp,0x10
c0028a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a71:	83 c4 0c             	add    esp,0xc
c0028a74:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE3endEv:

c0028a78 <std::vector<DevicePortRange>::end()>:
c0028a78:	83 ec 0c             	sub    esp,0xc
c0028a7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a82:	83 ec 08             	sub    esp,0x8
c0028a85:	50                   	push   eax
c0028a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a8a:	e8 b9 ff ff ff       	call   c0028a48 <std::vector<DevicePortRange>::iterator::iterator(DevicePortRange*)>
c0028a8f:	83 c4 10             	add    esp,0x10
c0028a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a96:	83 c4 0c             	add    esp,0xc
c0028a99:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE8iteratorppEv:

c0028a9c <std::vector<DevicePortRange>::iterator::operator++()>:
c0028a9c:	83 ec 0c             	sub    esp,0xc
c0028a9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028aa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aa5:	8d 50 04             	lea    edx,[eax+0x4]
c0028aa8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028aac:	89 10                	mov    DWORD PTR [eax],edx
c0028aae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028ab2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ab4:	83 ec 08             	sub    esp,0x8
c0028ab7:	50                   	push   eax
c0028ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028abc:	e8 87 ff ff ff       	call   c0028a48 <std::vector<DevicePortRange>::iterator::iterator(DevicePortRange*)>
c0028ac1:	83 c4 10             	add    esp,0x10
c0028ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac8:	83 c4 0c             	add    esp,0xc
c0028acb:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4findINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c0028ad0 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c0028ad0:	83 ec 1c             	sub    esp,0x1c
c0028ad3:	90                   	nop
c0028ad4:	83 ec 08             	sub    esp,0x8
c0028ad7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028adb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028adf:	e8 dc fb ff ff       	call   c00286c0 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0028ae4:	83 c4 10             	add    esp,0x10
c0028ae7:	0f b6 c0             	movzx  eax,al
c0028aea:	85 c0                	test   eax,eax
c0028aec:	74 62                	je     c0028b50 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x80>
c0028aee:	83 ec 0c             	sub    esp,0xc
c0028af1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028af5:	e8 da fb ff ff       	call   c00286d4 <std::vector<Hardware*>::iterator::operator*() const>
c0028afa:	83 c4 10             	add    esp,0x10
c0028afd:	8b 10                	mov    edx,DWORD PTR [eax]
c0028aff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0028b03:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b05:	39 c2                	cmp    edx,eax
c0028b07:	0f 94 c0             	sete   al
c0028b0a:	0f b6 c0             	movzx  eax,al
c0028b0d:	85 c0                	test   eax,eax
c0028b0f:	74 17                	je     c0028b28 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x58>
c0028b11:	83 ec 08             	sub    esp,0x8
c0028b14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028b18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028b1c:	e8 8f fb ff ff       	call   c00286b0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028b21:	83 c4 10             	add    esp,0x10
c0028b24:	eb 3e                	jmp    c0028b64 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x94>
c0028b26:	66 90                	xchg   ax,ax
c0028b28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028b2c:	83 ec 08             	sub    esp,0x8
c0028b2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028b33:	50                   	push   eax
c0028b34:	e8 db fe ff ff       	call   c0028a14 <std::vector<Hardware*>::iterator::operator++()>
c0028b39:	83 c4 0c             	add    esp,0xc
c0028b3c:	83 ec 0c             	sub    esp,0xc
c0028b3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028b43:	50                   	push   eax
c0028b44:	e8 63 fb ff ff       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0028b49:	83 c4 10             	add    esp,0x10
c0028b4c:	eb 86                	jmp    c0028ad4 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x4>
c0028b4e:	66 90                	xchg   ax,ax
c0028b50:	83 ec 08             	sub    esp,0x8
c0028b53:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028b57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028b5b:	e8 50 fb ff ff       	call   c00286b0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028b60:	83 c4 10             	add    esp,0x10
c0028b63:	90                   	nop
c0028b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b68:	83 c4 1c             	add    esp,0x1c
c0028b6b:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratoraSERKS3_:

c0028b70 <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>:
c0028b70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b74:	8b 10                	mov    edx,DWORD PTR [eax]
c0028b76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b7a:	89 10                	mov    DWORD PTR [eax],edx
c0028b7c:	90                   	nop
c0028b7d:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEi:

c0028b80 <std::vector<Hardware*>::iterator::operator++(int)>:
c0028b80:	83 ec 0c             	sub    esp,0xc
c0028b83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028b87:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b89:	8d 48 04             	lea    ecx,[eax+0x4]
c0028b8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b90:	89 0a                	mov    DWORD PTR [edx],ecx
c0028b92:	83 ec 08             	sub    esp,0x8
c0028b95:	50                   	push   eax
c0028b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b9a:	e8 21 fe ff ff       	call   c00289c0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028b9f:	83 c4 10             	add    esp,0x10
c0028ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba6:	83 c4 0c             	add    esp,0xc
c0028ba9:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4moveIRP8HardwareEONSt16remove_referenceIT_E4typeEOS4_:

c0028bac <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>:
c0028bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bb0:	c3                   	ret    

Disassembly of section .text._ZSt6removeINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c0028bb4 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c0028bb4:	53                   	push   ebx
c0028bb5:	83 ec 28             	sub    esp,0x28
c0028bb8:	83 ec 08             	sub    esp,0x8
c0028bbb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028bbf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0028bc3:	50                   	push   eax
c0028bc4:	e8 e7 fa ff ff       	call   c00286b0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028bc9:	83 c4 10             	add    esp,0x10
c0028bcc:	83 ec 08             	sub    esp,0x8
c0028bcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028bd3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028bd7:	50                   	push   eax
c0028bd8:	e8 d3 fa ff ff       	call   c00286b0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028bdd:	83 c4 10             	add    esp,0x10
c0028be0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028be4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028be8:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028bec:	52                   	push   edx
c0028bed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0028bf1:	52                   	push   edx
c0028bf2:	50                   	push   eax
c0028bf3:	e8 d8 fe ff ff       	call   c0028ad0 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c0028bf8:	83 c4 0c             	add    esp,0xc
c0028bfb:	83 ec 08             	sub    esp,0x8
c0028bfe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028c02:	50                   	push   eax
c0028c03:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028c07:	e8 64 ff ff ff       	call   c0028b70 <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>
c0028c0c:	83 c4 10             	add    esp,0x10
c0028c0f:	83 ec 0c             	sub    esp,0xc
c0028c12:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028c16:	50                   	push   eax
c0028c17:	e8 90 fa ff ff       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0028c1c:	83 c4 10             	add    esp,0x10
c0028c1f:	83 ec 0c             	sub    esp,0xc
c0028c22:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028c26:	50                   	push   eax
c0028c27:	e8 80 fa ff ff       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0028c2c:	83 c4 10             	add    esp,0x10
c0028c2f:	83 ec 0c             	sub    esp,0xc
c0028c32:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0028c36:	50                   	push   eax
c0028c37:	e8 70 fa ff ff       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0028c3c:	83 c4 10             	add    esp,0x10
c0028c3f:	83 ec 08             	sub    esp,0x8
c0028c42:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028c46:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028c4a:	e8 71 fa ff ff       	call   c00286c0 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0028c4f:	83 c4 10             	add    esp,0x10
c0028c52:	0f b6 c0             	movzx  eax,al
c0028c55:	85 c0                	test   eax,eax
c0028c57:	0f 84 ef 00 00 00    	je     c0028d4c <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x198>
c0028c5d:	83 ec 08             	sub    esp,0x8
c0028c60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028c64:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028c68:	50                   	push   eax
c0028c69:	e8 42 fa ff ff       	call   c00286b0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028c6e:	83 c4 10             	add    esp,0x10
c0028c71:	8d 76 00             	lea    esi,[esi+0x0]
c0028c74:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028c78:	83 ec 08             	sub    esp,0x8
c0028c7b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028c7f:	52                   	push   edx
c0028c80:	50                   	push   eax
c0028c81:	e8 8e fd ff ff       	call   c0028a14 <std::vector<Hardware*>::iterator::operator++()>
c0028c86:	83 c4 0c             	add    esp,0xc
c0028c89:	83 ec 08             	sub    esp,0x8
c0028c8c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028c90:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028c94:	50                   	push   eax
c0028c95:	e8 26 fa ff ff       	call   c00286c0 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0028c9a:	83 c4 10             	add    esp,0x10
c0028c9d:	88 c3                	mov    bl,al
c0028c9f:	83 ec 0c             	sub    esp,0xc
c0028ca2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028ca6:	50                   	push   eax
c0028ca7:	e8 00 fa ff ff       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0028cac:	83 c4 10             	add    esp,0x10
c0028caf:	0f b6 c3             	movzx  eax,bl
c0028cb2:	85 c0                	test   eax,eax
c0028cb4:	0f 84 82 00 00 00    	je     c0028d3c <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x188>
c0028cba:	83 ec 0c             	sub    esp,0xc
c0028cbd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028cc1:	50                   	push   eax
c0028cc2:	e8 0d fa ff ff       	call   c00286d4 <std::vector<Hardware*>::iterator::operator*() const>
c0028cc7:	83 c4 10             	add    esp,0x10
c0028cca:	8b 10                	mov    edx,DWORD PTR [eax]
c0028ccc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cd2:	39 c2                	cmp    edx,eax
c0028cd4:	0f 95 c0             	setne  al
c0028cd7:	0f b6 c0             	movzx  eax,al
c0028cda:	85 c0                	test   eax,eax
c0028cdc:	74 96                	je     c0028c74 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xc0>
c0028cde:	83 ec 0c             	sub    esp,0xc
c0028ce1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028ce5:	50                   	push   eax
c0028ce6:	e8 e9 f9 ff ff       	call   c00286d4 <std::vector<Hardware*>::iterator::operator*() const>
c0028ceb:	83 c4 10             	add    esp,0x10
c0028cee:	83 ec 0c             	sub    esp,0xc
c0028cf1:	50                   	push   eax
c0028cf2:	e8 b5 fe ff ff       	call   c0028bac <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>
c0028cf7:	83 c4 10             	add    esp,0x10
c0028cfa:	89 c3                	mov    ebx,eax
c0028cfc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0028d00:	83 ec 04             	sub    esp,0x4
c0028d03:	6a 00                	push   0x0
c0028d05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028d09:	50                   	push   eax
c0028d0a:	e8 71 fe ff ff       	call   c0028b80 <std::vector<Hardware*>::iterator::operator++(int)>
c0028d0f:	83 c4 0c             	add    esp,0xc
c0028d12:	83 ec 0c             	sub    esp,0xc
c0028d15:	8d 44 24 28          	lea    eax,[esp+0x28]
c0028d19:	50                   	push   eax
c0028d1a:	e8 b5 f9 ff ff       	call   c00286d4 <std::vector<Hardware*>::iterator::operator*() const>
c0028d1f:	83 c4 10             	add    esp,0x10
c0028d22:	8b 13                	mov    edx,DWORD PTR [ebx]
c0028d24:	89 10                	mov    DWORD PTR [eax],edx
c0028d26:	83 ec 0c             	sub    esp,0xc
c0028d29:	8d 44 24 28          	lea    eax,[esp+0x28]
c0028d2d:	50                   	push   eax
c0028d2e:	e8 79 f9 ff ff       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0028d33:	83 c4 10             	add    esp,0x10
c0028d36:	e9 39 ff ff ff       	jmp    c0028c74 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xc0>
c0028d3b:	90                   	nop
c0028d3c:	83 ec 0c             	sub    esp,0xc
c0028d3f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028d43:	50                   	push   eax
c0028d44:	e8 63 f9 ff ff       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0028d49:	83 c4 10             	add    esp,0x10
c0028d4c:	83 ec 08             	sub    esp,0x8
c0028d4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028d53:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028d57:	e8 54 f9 ff ff       	call   c00286b0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028d5c:	83 c4 10             	add    esp,0x10
c0028d5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028d63:	83 c4 28             	add    esp,0x28
c0028d66:	5b                   	pop    ebx
c0028d67:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratormiES3_:

c0028d6c <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>:
c0028d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d70:	8b 10                	mov    edx,DWORD PTR [eax]
c0028d72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d76:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d78:	29 c2                	sub    edx,eax
c0028d7a:	89 d0                	mov    eax,edx
c0028d7c:	c1 f8 02             	sar    eax,0x2
c0028d7f:	c3                   	ret    

Disassembly of section .text._ZSt4copyIPP8HardwareS2_ET0_T_S4_S3_:

c0028d80 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>:
c0028d80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d84:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0028d88:	74 1a                	je     c0028da4 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)+0x24>
c0028d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d8e:	8b 10                	mov    edx,DWORD PTR [eax]
c0028d90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028d94:	89 10                	mov    DWORD PTR [eax],edx
c0028d96:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c0028d9b:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0028da0:	eb de                	jmp    c0028d80 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c0028da2:	66 90                	xchg   ax,ax
c0028da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028da8:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE7reserveEm:

c0028dac <std::vector<Hardware*>::reserve(unsigned long)>:
c0028dac:	83 ec 1c             	sub    esp,0x1c
c0028daf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028db3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028db6:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0028dba:	0f 86 d4 00 00 00    	jbe    c0028e94 <std::vector<Hardware*>::reserve(unsigned long)+0xe8>
c0028dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028dc4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028dc7:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0028dcb:	76 17                	jbe    c0028de4 <std::vector<Hardware*>::reserve(unsigned long)+0x38>
c0028dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028dd1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028dd4:	01 c0                	add    eax,eax
c0028dd6:	89 c2                	mov    edx,eax
c0028dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028ddc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0028ddf:	eb df                	jmp    c0028dc0 <std::vector<Hardware*>::reserve(unsigned long)+0x14>
c0028de1:	8d 76 00             	lea    esi,[esi+0x0]
c0028de4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028de8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028deb:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0028df0:	77 06                	ja     c0028df8 <std::vector<Hardware*>::reserve(unsigned long)+0x4c>
c0028df2:	c1 e0 02             	shl    eax,0x2
c0028df5:	eb 09                	jmp    c0028e00 <std::vector<Hardware*>::reserve(unsigned long)+0x54>
c0028df7:	90                   	nop
c0028df8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0028e00:	83 ec 0c             	sub    esp,0xc
c0028e03:	50                   	push   eax
c0028e04:	e8 0a 53 fe ff       	call   c000e113 <operator new[](unsigned long)>
c0028e09:	83 c4 10             	add    esp,0x10
c0028e0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e14:	8b 10                	mov    edx,DWORD PTR [eax]
c0028e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e1d:	39 c2                	cmp    edx,eax
c0028e1f:	74 1f                	je     c0028e40 <std::vector<Hardware*>::reserve(unsigned long)+0x94>
c0028e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e25:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0028e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e2f:	83 ec 04             	sub    esp,0x4
c0028e32:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0028e36:	52                   	push   edx
c0028e37:	50                   	push   eax
c0028e38:	e8 43 ff ff ff       	call   c0028d80 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c0028e3d:	83 c4 10             	add    esp,0x10
c0028e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e47:	85 c0                	test   eax,eax
c0028e49:	74 15                	je     c0028e60 <std::vector<Hardware*>::reserve(unsigned long)+0xb4>
c0028e4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e52:	83 ec 0c             	sub    esp,0xc
c0028e55:	50                   	push   eax
c0028e56:	e8 c2 52 fe ff       	call   c000e11d <operator delete[](void*)>
c0028e5b:	83 c4 10             	add    esp,0x10
c0028e5e:	66 90                	xchg   ax,ax
c0028e60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028e68:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e6f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028e72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e76:	89 10                	mov    DWORD PTR [eax],edx
c0028e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e7c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028e7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028e86:	c1 e0 02             	shl    eax,0x2
c0028e89:	01 c2                	add    edx,eax
c0028e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028e92:	66 90                	xchg   ax,ax
c0028e94:	90                   	nop
c0028e95:	83 c4 1c             	add    esp,0x1c
c0028e98:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE9push_backERKS1_:

c0028e9c <std::vector<Hardware*>::push_back(Hardware* const&)>:
c0028e9c:	83 ec 0c             	sub    esp,0xc
c0028e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0028ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eaa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028ead:	39 c2                	cmp    edx,eax
c0028eaf:	73 2f                	jae    c0028ee0 <std::vector<Hardware*>::push_back(Hardware* const&)+0x44>
c0028eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028eb8:	8d 48 04             	lea    ecx,[eax+0x4]
c0028ebb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0028ebf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0028ec2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ec6:	8b 12                	mov    edx,DWORD PTR [edx]
c0028ec8:	89 10                	mov    DWORD PTR [eax],edx
c0028eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ece:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028ed1:	8d 50 01             	lea    edx,[eax+0x1]
c0028ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028edb:	eb 47                	jmp    c0028f24 <std::vector<Hardware*>::push_back(Hardware* const&)+0x88>
c0028edd:	8d 76 00             	lea    esi,[esi+0x0]
c0028ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028ee7:	01 c0                	add    eax,eax
c0028ee9:	83 ec 08             	sub    esp,0x8
c0028eec:	50                   	push   eax
c0028eed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef1:	e8 b6 fe ff ff       	call   c0028dac <std::vector<Hardware*>::reserve(unsigned long)>
c0028ef6:	83 c4 10             	add    esp,0x10
c0028ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028f00:	8d 50 01             	lea    edx,[eax+0x1]
c0028f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f07:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f11:	8d 48 04             	lea    ecx,[eax+0x4]
c0028f14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0028f18:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0028f1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f1f:	8b 12                	mov    edx,DWORD PTR [edx]
c0028f21:	89 10                	mov    DWORD PTR [eax],edx
c0028f23:	90                   	nop
c0028f24:	90                   	nop
c0028f25:	83 c4 0c             	add    esp,0xc
c0028f28:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5eraseENS2_8iteratorES3_:

c0028f2c <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>:
c0028f2c:	53                   	push   ebx
c0028f2d:	83 ec 28             	sub    esp,0x28
c0028f30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028f34:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f36:	83 ec 08             	sub    esp,0x8
c0028f39:	50                   	push   eax
c0028f3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028f3e:	50                   	push   eax
c0028f3f:	e8 7c fa ff ff       	call   c00289c0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028f44:	83 c4 10             	add    esp,0x10
c0028f47:	83 ec 08             	sub    esp,0x8
c0028f4a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028f4e:	50                   	push   eax
c0028f4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0028f53:	e8 14 fe ff ff       	call   c0028d6c <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0028f58:	83 c4 10             	add    esp,0x10
c0028f5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028f5f:	83 ec 0c             	sub    esp,0xc
c0028f62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028f66:	50                   	push   eax
c0028f67:	e8 40 f7 ff ff       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0028f6c:	83 c4 10             	add    esp,0x10
c0028f6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028f73:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f75:	83 ec 08             	sub    esp,0x8
c0028f78:	50                   	push   eax
c0028f79:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028f7d:	50                   	push   eax
c0028f7e:	e8 3d fa ff ff       	call   c00289c0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028f83:	83 c4 10             	add    esp,0x10
c0028f86:	83 ec 08             	sub    esp,0x8
c0028f89:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028f8d:	50                   	push   eax
c0028f8e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028f92:	e8 d5 fd ff ff       	call   c0028d6c <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0028f97:	83 c4 10             	add    esp,0x10
c0028f9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028f9e:	83 ec 0c             	sub    esp,0xc
c0028fa1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028fa5:	50                   	push   eax
c0028fa6:	e8 01 f7 ff ff       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0028fab:	83 c4 10             	add    esp,0x10
c0028fae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028fb2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fb5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028fb9:	c1 e2 02             	shl    edx,0x2
c0028fbc:	8d 0c 10             	lea    ecx,[eax+edx*1]
c0028fbf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028fc3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028fc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028fca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028fcd:	c1 e0 02             	shl    eax,0x2
c0028fd0:	01 c2                	add    edx,eax
c0028fd2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028fd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fd9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0028fdd:	c1 e3 02             	shl    ebx,0x2
c0028fe0:	01 d8                	add    eax,ebx
c0028fe2:	83 ec 04             	sub    esp,0x4
c0028fe5:	51                   	push   ecx
c0028fe6:	52                   	push   edx
c0028fe7:	50                   	push   eax
c0028fe8:	e8 93 fd ff ff       	call   c0028d80 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c0028fed:	83 c4 10             	add    esp,0x10
c0028ff0:	83 ec 08             	sub    esp,0x8
c0028ff3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028ff7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0028ffb:	50                   	push   eax
c0028ffc:	e8 af f6 ff ff       	call   c00286b0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0029001:	83 c4 10             	add    esp,0x10
c0029004:	83 ec 08             	sub    esp,0x8
c0029007:	8d 44 24 18          	lea    eax,[esp+0x18]
c002900b:	50                   	push   eax
c002900c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0029010:	e8 57 fd ff ff       	call   c0028d6c <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0029015:	83 c4 10             	add    esp,0x10
c0029018:	89 c2                	mov    edx,eax
c002901a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002901e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029021:	29 d0                	sub    eax,edx
c0029023:	89 c2                	mov    edx,eax
c0029025:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029029:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002902c:	83 ec 0c             	sub    esp,0xc
c002902f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029033:	50                   	push   eax
c0029034:	e8 73 f6 ff ff       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0029039:	83 c4 10             	add    esp,0x10
c002903c:	83 ec 08             	sub    esp,0x8
c002903f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0029043:	8d 44 24 20          	lea    eax,[esp+0x20]
c0029047:	50                   	push   eax
c0029048:	e8 63 f6 ff ff       	call   c00286b0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c002904d:	83 c4 10             	add    esp,0x10
c0029050:	83 ec 08             	sub    esp,0x8
c0029053:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029057:	50                   	push   eax
c0029058:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002905c:	e8 0b fd ff ff       	call   c0028d6c <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0029061:	83 c4 10             	add    esp,0x10
c0029064:	89 c2                	mov    edx,eax
c0029066:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002906a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002906d:	c1 e2 02             	shl    edx,0x2
c0029070:	f7 da                	neg    edx
c0029072:	01 c2                	add    edx,eax
c0029074:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029078:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002907b:	83 ec 0c             	sub    esp,0xc
c002907e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0029082:	50                   	push   eax
c0029083:	e8 24 f6 ff ff       	call   c00286ac <std::vector<Hardware*>::iterator::~iterator()>
c0029088:	83 c4 10             	add    esp,0x10
c002908b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002908f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029092:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029096:	c1 e2 02             	shl    edx,0x2
c0029099:	01 d0                	add    eax,edx
c002909b:	83 ec 08             	sub    esp,0x8
c002909e:	50                   	push   eax
c002909f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00290a3:	e8 18 f9 ff ff       	call   c00289c0 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c00290a8:	83 c4 10             	add    esp,0x10
c00290ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00290af:	83 c4 28             	add    esp,0x28
c00290b2:	5b                   	pop    ebx
c00290b3:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4copyIP17DeviceMemoryRangeS1_ET0_T_S3_S2_:

c00290b8 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>:
c00290b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290bc:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00290c0:	74 1e                	je     c00290e0 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)+0x28>
c00290c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00290c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00290cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00290cf:	89 01                	mov    DWORD PTR [ecx],eax
c00290d1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00290d4:	83 44 24 04 08       	add    DWORD PTR [esp+0x4],0x8
c00290d9:	83 44 24 0c 08       	add    DWORD PTR [esp+0xc],0x8
c00290de:	eb d8                	jmp    c00290b8 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c00290e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00290e4:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE7reserveEm:

c00290e8 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>:
c00290e8:	83 ec 1c             	sub    esp,0x1c
c00290eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00290ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00290f2:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00290f6:	0f 86 d4 00 00 00    	jbe    c00291d0 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xe8>
c00290fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029100:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029103:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0029107:	76 17                	jbe    c0029120 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x38>
c0029109:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002910d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029110:	01 c0                	add    eax,eax
c0029112:	89 c2                	mov    edx,eax
c0029114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029118:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002911b:	eb df                	jmp    c00290fc <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x14>
c002911d:	8d 76 00             	lea    esi,[esi+0x0]
c0029120:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029124:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029127:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c002912c:	77 06                	ja     c0029134 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x4c>
c002912e:	c1 e0 03             	shl    eax,0x3
c0029131:	eb 09                	jmp    c002913c <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x54>
c0029133:	90                   	nop
c0029134:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0029139:	8d 76 00             	lea    esi,[esi+0x0]
c002913c:	83 ec 0c             	sub    esp,0xc
c002913f:	50                   	push   eax
c0029140:	e8 ce 4f fe ff       	call   c000e113 <operator new[](unsigned long)>
c0029145:	83 c4 10             	add    esp,0x10
c0029148:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002914c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029150:	8b 10                	mov    edx,DWORD PTR [eax]
c0029152:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029159:	39 c2                	cmp    edx,eax
c002915b:	74 1f                	je     c002917c <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x94>
c002915d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029161:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0029164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029168:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002916b:	83 ec 04             	sub    esp,0x4
c002916e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0029172:	52                   	push   edx
c0029173:	50                   	push   eax
c0029174:	e8 3f ff ff ff       	call   c00290b8 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c0029179:	83 c4 10             	add    esp,0x10
c002917c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029180:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029183:	85 c0                	test   eax,eax
c0029185:	74 15                	je     c002919c <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xb4>
c0029187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002918b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002918e:	83 ec 0c             	sub    esp,0xc
c0029191:	50                   	push   eax
c0029192:	e8 86 4f fe ff       	call   c000e11d <operator delete[](void*)>
c0029197:	83 c4 10             	add    esp,0x10
c002919a:	66 90                	xchg   ax,ax
c002919c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00291a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00291a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00291ab:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00291ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00291b2:	89 10                	mov    DWORD PTR [eax],edx
c00291b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00291b8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00291bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00291bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00291c2:	c1 e0 03             	shl    eax,0x3
c00291c5:	01 c2                	add    edx,eax
c00291c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00291cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291ce:	66 90                	xchg   ax,ax
c00291d0:	90                   	nop
c00291d1:	83 c4 1c             	add    esp,0x1c
c00291d4:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE9push_backERKS0_:

c00291d8 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>:
c00291d8:	83 ec 0c             	sub    esp,0xc
c00291db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00291e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00291e9:	39 c2                	cmp    edx,eax
c00291eb:	73 33                	jae    c0029220 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x48>
c00291ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f1:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00291f4:	8d 51 08             	lea    edx,[ecx+0x8]
c00291f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029202:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0029205:	8b 00                	mov    eax,DWORD PTR [eax]
c0029207:	89 01                	mov    DWORD PTR [ecx],eax
c0029209:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002920c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029210:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029213:	8d 50 01             	lea    edx,[eax+0x1]
c0029216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002921a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002921d:	eb 4d                	jmp    c002926c <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x94>
c002921f:	90                   	nop
c0029220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029224:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029227:	01 c0                	add    eax,eax
c0029229:	83 ec 08             	sub    esp,0x8
c002922c:	50                   	push   eax
c002922d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029231:	e8 b2 fe ff ff       	call   c00290e8 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>
c0029236:	83 c4 10             	add    esp,0x10
c0029239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029240:	8d 50 01             	lea    edx,[eax+0x1]
c0029243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029247:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002924a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924e:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0029251:	8d 51 08             	lea    edx,[ecx+0x8]
c0029254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029258:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002925b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002925f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0029262:	8b 00                	mov    eax,DWORD PTR [eax]
c0029264:	89 01                	mov    DWORD PTR [ecx],eax
c0029266:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0029269:	8d 76 00             	lea    esi,[esi+0x0]
c002926c:	90                   	nop
c002926d:	83 c4 0c             	add    esp,0xc
c0029270:	c3                   	ret    

Disassembly of section .text._ZSt4copyIP15DevicePortRangeS1_ET0_T_S3_S2_:

c0029274 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>:
c0029274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029278:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c002927c:	74 1a                	je     c0029298 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)+0x24>
c002927e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029282:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029286:	8b 12                	mov    edx,DWORD PTR [edx]
c0029288:	89 10                	mov    DWORD PTR [eax],edx
c002928a:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c002928f:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0029294:	eb de                	jmp    c0029274 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c0029296:	66 90                	xchg   ax,ax
c0029298:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002929c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE7reserveEm:

c00292a0 <std::vector<DevicePortRange>::reserve(unsigned long)>:
c00292a0:	83 ec 1c             	sub    esp,0x1c
c00292a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00292a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00292aa:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00292ae:	0f 86 d4 00 00 00    	jbe    c0029388 <std::vector<DevicePortRange>::reserve(unsigned long)+0xe8>
c00292b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00292b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00292bb:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00292bf:	76 17                	jbe    c00292d8 <std::vector<DevicePortRange>::reserve(unsigned long)+0x38>
c00292c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00292c5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00292c8:	01 c0                	add    eax,eax
c00292ca:	89 c2                	mov    edx,eax
c00292cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00292d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00292d3:	eb df                	jmp    c00292b4 <std::vector<DevicePortRange>::reserve(unsigned long)+0x14>
c00292d5:	8d 76 00             	lea    esi,[esi+0x0]
c00292d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00292dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00292df:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c00292e4:	77 06                	ja     c00292ec <std::vector<DevicePortRange>::reserve(unsigned long)+0x4c>
c00292e6:	c1 e0 02             	shl    eax,0x2
c00292e9:	eb 09                	jmp    c00292f4 <std::vector<DevicePortRange>::reserve(unsigned long)+0x54>
c00292eb:	90                   	nop
c00292ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00292f1:	8d 76 00             	lea    esi,[esi+0x0]
c00292f4:	83 ec 0c             	sub    esp,0xc
c00292f7:	50                   	push   eax
c00292f8:	e8 16 4e fe ff       	call   c000e113 <operator new[](unsigned long)>
c00292fd:	83 c4 10             	add    esp,0x10
c0029300:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029308:	8b 10                	mov    edx,DWORD PTR [eax]
c002930a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002930e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029311:	39 c2                	cmp    edx,eax
c0029313:	74 1f                	je     c0029334 <std::vector<DevicePortRange>::reserve(unsigned long)+0x94>
c0029315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029319:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002931c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029320:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029323:	83 ec 04             	sub    esp,0x4
c0029326:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002932a:	52                   	push   edx
c002932b:	50                   	push   eax
c002932c:	e8 43 ff ff ff       	call   c0029274 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c0029331:	83 c4 10             	add    esp,0x10
c0029334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029338:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002933b:	85 c0                	test   eax,eax
c002933d:	74 15                	je     c0029354 <std::vector<DevicePortRange>::reserve(unsigned long)+0xb4>
c002933f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029343:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029346:	83 ec 0c             	sub    esp,0xc
c0029349:	50                   	push   eax
c002934a:	e8 ce 4d fe ff       	call   c000e11d <operator delete[](void*)>
c002934f:	83 c4 10             	add    esp,0x10
c0029352:	66 90                	xchg   ax,ax
c0029354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029358:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002935c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002935f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029363:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0029366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002936a:	89 10                	mov    DWORD PTR [eax],edx
c002936c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029370:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0029373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029377:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002937a:	c1 e0 02             	shl    eax,0x2
c002937d:	01 c2                	add    edx,eax
c002937f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029383:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029386:	66 90                	xchg   ax,ax
c0029388:	90                   	nop
c0029389:	83 c4 1c             	add    esp,0x1c
c002938c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE9push_backERKS0_:

c0029390 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>:
c0029390:	83 ec 0c             	sub    esp,0xc
c0029393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029397:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c002939a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00293a1:	39 c2                	cmp    edx,eax
c00293a3:	73 2f                	jae    c00293d4 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x44>
c00293a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293ac:	8d 48 04             	lea    ecx,[eax+0x4]
c00293af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00293b3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00293b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293ba:	8b 12                	mov    edx,DWORD PTR [edx]
c00293bc:	89 10                	mov    DWORD PTR [eax],edx
c00293be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00293c5:	8d 50 01             	lea    edx,[eax+0x1]
c00293c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293cc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00293cf:	eb 47                	jmp    c0029418 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x88>
c00293d1:	8d 76 00             	lea    esi,[esi+0x0]
c00293d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00293db:	01 c0                	add    eax,eax
c00293dd:	83 ec 08             	sub    esp,0x8
c00293e0:	50                   	push   eax
c00293e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293e5:	e8 b6 fe ff ff       	call   c00292a0 <std::vector<DevicePortRange>::reserve(unsigned long)>
c00293ea:	83 c4 10             	add    esp,0x10
c00293ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00293f4:	8d 50 01             	lea    edx,[eax+0x1]
c00293f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293fb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00293fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029402:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029405:	8d 48 04             	lea    ecx,[eax+0x4]
c0029408:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002940c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c002940f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029413:	8b 12                	mov    edx,DWORD PTR [edx]
c0029415:	89 10                	mov    DWORD PTR [eax],edx
c0029417:	90                   	nop
c0029418:	90                   	nop
c0029419:	83 c4 0c             	add    esp,0xc
c002941c:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware10_getDriverEv:

c0029420 <BusHardware::_getDriver()>:
c0029420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029424:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c002942a:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware7getTypeEv:

c002942c <BusHardware::getType()>:
c002942c:	b8 01 00 00 00       	mov    eax,0x1
c0029431:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareD2Ev:

c0029434 <BusHardware::~BusHardware()>:
c0029434:	83 ec 0c             	sub    esp,0xc
c0029437:	ba 50 b2 02 c0       	mov    edx,0xc002b250
c002943c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029440:	89 10                	mov    DWORD PTR [eax],edx
c0029442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029446:	83 ec 0c             	sub    esp,0xc
c0029449:	50                   	push   eax
c002944a:	e8 21 e0 fd ff       	call   c0007470 <Hardware::~Hardware()>
c002944f:	83 c4 10             	add    esp,0x10
c0029452:	90                   	nop
c0029453:	83 c4 0c             	add    esp,0xc
c0029456:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareD0Ev:

c0029458 <BusHardware::~BusHardware()>:
c0029458:	83 ec 0c             	sub    esp,0xc
c002945b:	83 ec 0c             	sub    esp,0xc
c002945e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029462:	e8 cd ff ff ff       	call   c0029434 <BusHardware::~BusHardware()>
c0029467:	83 c4 10             	add    esp,0x10
c002946a:	83 ec 08             	sub    esp,0x8
c002946d:	68 8c 00 00 00       	push   0x8c
c0029472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029476:	e8 9d 4c fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c002947b:	83 c4 10             	add    esp,0x10
c002947e:	83 c4 0c             	add    esp,0xc
c0029481:	c3                   	ret    

Disassembly of section .text._ZN9BusDriverC2Ev:

c0029484 <BusDriver::BusDriver()>:
c0029484:	83 ec 0c             	sub    esp,0xc
c0029487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002948b:	83 ec 0c             	sub    esp,0xc
c002948e:	50                   	push   eax
c002948f:	e8 e4 f1 ff ff       	call   c0028678 <Driver::Driver()>
c0029494:	83 c4 10             	add    esp,0x10
c0029497:	ba 34 b2 02 c0       	mov    edx,0xc002b234
c002949c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a0:	89 10                	mov    DWORD PTR [eax],edx
c00294a2:	90                   	nop
c00294a3:	83 c4 0c             	add    esp,0xc
c00294a6:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareC2Ev:

c00294a8 <BusHardware::BusHardware()>:
c00294a8:	83 ec 0c             	sub    esp,0xc
c00294ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294af:	83 ec 0c             	sub    esp,0xc
c00294b2:	50                   	push   eax
c00294b3:	e8 30 e0 fd ff       	call   c00074e8 <Hardware::Hardware()>
c00294b8:	83 c4 10             	add    esp,0x10
c00294bb:	ba 50 b2 02 c0       	mov    edx,0xc002b250
c00294c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c4:	89 10                	mov    DWORD PTR [eax],edx
c00294c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ca:	c7 80 88 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x88],0x0
c00294d4:	90                   	nop
c00294d5:	83 c4 0c             	add    esp,0xc
c00294d8:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware9setDriverEP9BusDriver:

c00294dc <BusHardware::setDriver(BusDriver*)>:
c00294dc:	83 ec 0c             	sub    esp,0xc
c00294df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294e7:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c00294ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f1:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c00294f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00294fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00294fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029502:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029508:	89 c2                	mov    edx,eax
c002950a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950e:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029514:	8b 00                	mov    eax,DWORD PTR [eax]
c0029516:	83 c0 04             	add    eax,0x4
c0029519:	8b 00                	mov    eax,DWORD PTR [eax]
c002951b:	83 ec 0c             	sub    esp,0xc
c002951e:	52                   	push   edx
c002951f:	ff d0                	call   eax
c0029521:	83 c4 10             	add    esp,0x10
c0029524:	90                   	nop
c0029525:	83 c4 0c             	add    esp,0xc
c0029528:	c3                   	ret    

Disassembly of section .text._ZN12ISAPnPDriverC2Ev:

c002952c <ISAPnPDriver::ISAPnPDriver()>:
c002952c:	83 ec 0c             	sub    esp,0xc
c002952f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029533:	83 ec 0c             	sub    esp,0xc
c0029536:	50                   	push   eax
c0029537:	e8 48 ff ff ff       	call   c0029484 <BusDriver::BusDriver()>
c002953c:	83 c4 10             	add    esp,0x10
c002953f:	ba 04 dc 02 c0       	mov    edx,0xc002dc04
c0029544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029548:	89 10                	mov    DWORD PTR [eax],edx
c002954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002954e:	66 c7 40 08 79 02    	mov    WORD PTR [eax+0x8],0x279
c0029554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029558:	66 c7 40 0a 79 0a    	mov    WORD PTR [eax+0xa],0xa79
c002955e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029562:	66 c7 40 0c 03 02    	mov    WORD PTR [eax+0xc],0x203
c0029568:	90                   	nop
c0029569:	83 c4 0c             	add    esp,0xc
c002956c:	c3                   	ret    

Disassembly of section .text._ZN10ACPIDriverC2Ev:

c0029570 <ACPIDriver::ACPIDriver()>:
c0029570:	83 ec 0c             	sub    esp,0xc
c0029573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029577:	83 ec 0c             	sub    esp,0xc
c002957a:	50                   	push   eax
c002957b:	e8 04 ff ff ff       	call   c0029484 <BusDriver::BusDriver()>
c0029580:	83 c4 10             	add    esp,0x10
c0029583:	ba 24 d8 02 c0       	mov    edx,0xc002d824
c0029588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958c:	89 10                	mov    DWORD PTR [eax],edx
c002958e:	90                   	nop
c002958f:	83 c4 0c             	add    esp,0xc
c0029592:	c3                   	ret    

Disassembly of section .text._ZN9PCIDriverC2Ev:

c0029594 <PCIDriver::PCIDriver()>:
c0029594:	83 ec 0c             	sub    esp,0xc
c0029597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002959b:	83 ec 0c             	sub    esp,0xc
c002959e:	50                   	push   eax
c002959f:	e8 e0 fe ff ff       	call   c0029484 <BusDriver::BusDriver()>
c00295a4:	83 c4 10             	add    esp,0x10
c00295a7:	ba 94 e7 02 c0       	mov    edx,0xc002e794
c00295ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b0:	89 10                	mov    DWORD PTR [eax],edx
c00295b2:	90                   	nop
c00295b3:	83 c4 0c             	add    esp,0xc
c00295b6:	c3                   	ret    

Disassembly of section .text._ZN9ISADriverC2Ev:

c00295b8 <ISADriver::ISADriver()>:
c00295b8:	83 ec 0c             	sub    esp,0xc
c00295bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295bf:	83 ec 0c             	sub    esp,0xc
c00295c2:	50                   	push   eax
c00295c3:	e8 b0 f0 ff ff       	call   c0028678 <Driver::Driver()>
c00295c8:	83 c4 10             	add    esp,0x10
c00295cb:	ba e4 d9 02 c0       	mov    edx,0xc002d9e4
c00295d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d4:	89 10                	mov    DWORD PTR [eax],edx
c00295d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295da:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295e1:	90                   	nop
c00295e2:	83 c4 0c             	add    esp,0xc
c00295e5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00295e6 <DriverlessDevice::~DriverlessDevice()>:
c00295e6:	ba 3c b7 02 c0       	mov    edx,0xc002b73c
c00295eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295ef:	89 10                	mov    DWORD PTR [eax],edx
c00295f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295f5:	50                   	push   eax
c00295f6:	e8 9b 10 fe ff       	call   c000a696 <Device::~Device()>
c00295fb:	83 c4 04             	add    esp,0x4
c00295fe:	90                   	nop
c00295ff:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0029600 <DriverlessDevice::~DriverlessDevice()>:
c0029600:	83 ec 0c             	sub    esp,0xc
c0029603:	83 ec 0c             	sub    esp,0xc
c0029606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002960a:	e8 d7 ff ff ff       	call   c00295e6 <DriverlessDevice::~DriverlessDevice()>
c002960f:	83 c4 10             	add    esp,0x10
c0029612:	83 ec 08             	sub    esp,0x8
c0029615:	68 58 01 00 00       	push   0x158
c002961a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002961e:	e8 f5 4a fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0029623:	83 c4 10             	add    esp,0x10
c0029626:	83 c4 0c             	add    esp,0xc
c0029629:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002962a <LinkedList<Device>::addElement(Device*)>:
c002962a:	83 ec 0c             	sub    esp,0xc
c002962d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029632:	75 10                	jne    c0029644 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029634:	83 ec 0c             	sub    esp,0xc
c0029637:	68 d0 b6 02 c0       	push   0xc002b6d0
c002963c:	e8 23 74 fe ff       	call   c0010a64 <KePanic(char const*)>
c0029641:	83 c4 10             	add    esp,0x10
c0029644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029648:	8b 00                	mov    eax,DWORD PTR [eax]
c002964a:	85 c0                	test   eax,eax
c002964c:	74 3a                	je     c0029688 <LinkedList<Device>::addElement(Device*)+0x5e>
c002964e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029652:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029655:	85 c0                	test   eax,eax
c0029657:	74 2f                	je     c0029688 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002965d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029660:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029664:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002966a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002966e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029672:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029679:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002967c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029686:	eb 68                	jmp    c00296f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0029688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002968c:	8b 00                	mov    eax,DWORD PTR [eax]
c002968e:	85 c0                	test   eax,eax
c0029690:	75 4e                	jne    c00296e0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0029692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029696:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029699:	85 c0                	test   eax,eax
c002969b:	75 43                	jne    c00296e0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002969d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00296a5:	89 10                	mov    DWORD PTR [eax],edx
c00296a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00296af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00296b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296b9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00296c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00296ca:	85 c0                	test   eax,eax
c00296cc:	74 22                	je     c00296f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00296ce:	83 ec 0c             	sub    esp,0xc
c00296d1:	68 f2 b6 02 c0       	push   0xc002b6f2
c00296d6:	e8 89 73 fe ff       	call   c0010a64 <KePanic(char const*)>
c00296db:	83 c4 10             	add    esp,0x10
c00296de:	eb 10                	jmp    c00296f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00296e0:	83 ec 0c             	sub    esp,0xc
c00296e3:	68 fc b6 02 c0       	push   0xc002b6fc
c00296e8:	e8 77 73 fe ff       	call   c0010a64 <KePanic(char const*)>
c00296ed:	83 c4 10             	add    esp,0x10
c00296f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00296f7:	8d 50 01             	lea    edx,[eax+0x1]
c00296fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029701:	90                   	nop
c0029702:	83 c4 0c             	add    esp,0xc
c0029705:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029706 <LinkedList<Device>::LinkedList()>:
c0029706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002970a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029714:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002971b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002971f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002972a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029734:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002973b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002973f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029746:	90                   	nop
c0029747:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0029748 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0029748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002974c:	8b 00                	mov    eax,DWORD PTR [eax]
c002974e:	85 c0                	test   eax,eax
c0029750:	75 0e                	jne    c0029760 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029759:	85 c0                	test   eax,eax
c002975b:	75 03                	jne    c0029760 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002975d:	b0 01                	mov    al,0x1
c002975f:	c3                   	ret    
c0029760:	b0 00                	mov    al,0x0
c0029762:	90                   	nop
c0029763:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029764 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029768:	8b 00                	mov    eax,DWORD PTR [eax]
c002976a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002976c <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002976c:	83 ec 0c             	sub    esp,0xc
c002976f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029773:	8b 00                	mov    eax,DWORD PTR [eax]
c0029775:	85 c0                	test   eax,eax
c0029777:	75 17                	jne    c0029790 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0029779:	83 ec 0c             	sub    esp,0xc
c002977c:	68 6c b9 02 c0       	push   0xc002b96c
c0029781:	e8 de 72 fe ff       	call   c0010a64 <KePanic(char const*)>
c0029786:	83 c4 10             	add    esp,0x10
c0029789:	e9 96 00 00 00       	jmp    c0029824 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002978e:	66 90                	xchg   ax,ax
c0029790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029794:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029797:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002979a:	85 c0                	test   eax,eax
c002979c:	0f 95 c0             	setne  al
c002979f:	0f b6 c0             	movzx  eax,al
c00297a2:	85 c0                	test   eax,eax
c00297a4:	74 12                	je     c00297b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c00297a6:	83 ec 0c             	sub    esp,0xc
c00297a9:	68 b7 b9 02 c0       	push   0xc002b9b7
c00297ae:	e8 b1 72 fe ff       	call   c0010a64 <KePanic(char const*)>
c00297b3:	83 c4 10             	add    esp,0x10
c00297b6:	66 90                	xchg   ax,ax
c00297b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00297be:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00297c1:	85 c0                	test   eax,eax
c00297c3:	0f 94 c0             	sete   al
c00297c6:	0f b6 c0             	movzx  eax,al
c00297c9:	85 c0                	test   eax,eax
c00297cb:	74 33                	je     c0029800 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c00297cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00297d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00297e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00297e9:	83 f8 01             	cmp    eax,0x1
c00297ec:	74 22                	je     c0029810 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00297ee:	83 ec 0c             	sub    esp,0xc
c00297f1:	68 90 b9 02 c0       	push   0xc002b990
c00297f6:	e8 69 72 fe ff       	call   c0010a64 <KePanic(char const*)>
c00297fb:	83 c4 10             	add    esp,0x10
c00297fe:	eb 10                	jmp    c0029810 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0029800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029804:	8b 00                	mov    eax,DWORD PTR [eax]
c0029806:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002980d:	89 10                	mov    DWORD PTR [eax],edx
c002980f:	90                   	nop
c0029810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029814:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029817:	8d 50 ff             	lea    edx,[eax-0x1]
c002981a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002981e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029821:	8d 76 00             	lea    esi,[esi+0x0]
c0029824:	83 c4 0c             	add    esp,0xc
c0029827:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0029828 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0029828:	83 ec 0c             	sub    esp,0xc
c002982b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029830:	75 12                	jne    c0029844 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0029832:	83 ec 0c             	sub    esp,0xc
c0029835:	68 d0 b6 02 c0       	push   0xc002b6d0
c002983a:	e8 25 72 fe ff       	call   c0010a64 <KePanic(char const*)>
c002983f:	83 c4 10             	add    esp,0x10
c0029842:	66 90                	xchg   ax,ax
c0029844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029848:	8b 00                	mov    eax,DWORD PTR [eax]
c002984a:	85 c0                	test   eax,eax
c002984c:	74 36                	je     c0029884 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002984e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029852:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029855:	85 c0                	test   eax,eax
c0029857:	74 2b                	je     c0029884 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0029859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002985d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029860:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029864:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002986b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002986f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029879:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029880:	eb 6a                	jmp    c00298ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0029882:	66 90                	xchg   ax,ax
c0029884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029888:	8b 00                	mov    eax,DWORD PTR [eax]
c002988a:	85 c0                	test   eax,eax
c002988c:	75 4e                	jne    c00298dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002988e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029892:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029895:	85 c0                	test   eax,eax
c0029897:	75 43                	jne    c00298dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0029899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002989d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00298a1:	89 10                	mov    DWORD PTR [eax],edx
c00298a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00298ab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00298ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00298b5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00298bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00298c3:	85 c0                	test   eax,eax
c00298c5:	74 25                	je     c00298ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00298c7:	83 ec 0c             	sub    esp,0xc
c00298ca:	68 f2 b6 02 c0       	push   0xc002b6f2
c00298cf:	e8 90 71 fe ff       	call   c0010a64 <KePanic(char const*)>
c00298d4:	83 c4 10             	add    esp,0x10
c00298d7:	eb 13                	jmp    c00298ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00298d9:	8d 76 00             	lea    esi,[esi+0x0]
c00298dc:	83 ec 0c             	sub    esp,0xc
c00298df:	68 fc b6 02 c0       	push   0xc002b6fc
c00298e4:	e8 7b 71 fe ff       	call   c0010a64 <KePanic(char const*)>
c00298e9:	83 c4 10             	add    esp,0x10
c00298ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00298f3:	8d 50 01             	lea    edx,[eax+0x1]
c00298f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298fa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00298fd:	90                   	nop
c00298fe:	83 c4 0c             	add    esp,0xc
c0029901:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029904 <ACPI::~ACPI()>:
c0029904:	83 ec 0c             	sub    esp,0xc
c0029907:	ba d4 bd 02 c0       	mov    edx,0xc002bdd4
c002990c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029910:	89 10                	mov    DWORD PTR [eax],edx
c0029912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029916:	83 ec 0c             	sub    esp,0xc
c0029919:	50                   	push   eax
c002991a:	e8 77 0d fe ff       	call   c000a696 <Device::~Device()>
c002991f:	83 c4 10             	add    esp,0x10
c0029922:	90                   	nop
c0029923:	83 c4 0c             	add    esp,0xc
c0029926:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029928 <ACPI::~ACPI()>:
c0029928:	83 ec 0c             	sub    esp,0xc
c002992b:	83 ec 0c             	sub    esp,0xc
c002992e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029932:	e8 cd ff ff ff       	call   c0029904 <ACPI::~ACPI()>
c0029937:	83 c4 10             	add    esp,0x10
c002993a:	83 ec 08             	sub    esp,0x8
c002993d:	68 64 12 00 00       	push   0x1264
c0029942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029946:	e8 cd 47 fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c002994b:	83 c4 10             	add    esp,0x10
c002994e:	83 c4 0c             	add    esp,0xc
c0029951:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0029954 <LinkedList<Device>::~LinkedList()>:
c0029954:	90                   	nop
c0029955:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029958 <LinkedList<Device>::isEmpty()>:
c0029958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002995c:	8b 00                	mov    eax,DWORD PTR [eax]
c002995e:	85 c0                	test   eax,eax
c0029960:	75 0e                	jne    c0029970 <LinkedList<Device>::isEmpty()+0x18>
c0029962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029969:	85 c0                	test   eax,eax
c002996b:	75 03                	jne    c0029970 <LinkedList<Device>::isEmpty()+0x18>
c002996d:	b0 01                	mov    al,0x1
c002996f:	c3                   	ret    
c0029970:	b0 00                	mov    al,0x0
c0029972:	90                   	nop
c0029973:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0029974 <LinkedList<Device>::getFirstElement()>:
c0029974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029978:	8b 00                	mov    eax,DWORD PTR [eax]
c002997a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002997c <LinkedList<Device>::removeFirst()>:
c002997c:	83 ec 0c             	sub    esp,0xc
c002997f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029983:	8b 00                	mov    eax,DWORD PTR [eax]
c0029985:	85 c0                	test   eax,eax
c0029987:	75 17                	jne    c00299a0 <LinkedList<Device>::removeFirst()+0x24>
c0029989:	83 ec 0c             	sub    esp,0xc
c002998c:	68 6c b9 02 c0       	push   0xc002b96c
c0029991:	e8 ce 70 fe ff       	call   c0010a64 <KePanic(char const*)>
c0029996:	83 c4 10             	add    esp,0x10
c0029999:	e9 92 00 00 00       	jmp    c0029a30 <LinkedList<Device>::removeFirst()+0xb4>
c002999e:	66 90                	xchg   ax,ax
c00299a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00299a7:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00299ad:	85 c0                	test   eax,eax
c00299af:	74 13                	je     c00299c4 <LinkedList<Device>::removeFirst()+0x48>
c00299b1:	83 ec 0c             	sub    esp,0xc
c00299b4:	68 b7 b9 02 c0       	push   0xc002b9b7
c00299b9:	e8 a6 70 fe ff       	call   c0010a64 <KePanic(char const*)>
c00299be:	83 c4 10             	add    esp,0x10
c00299c1:	8d 76 00             	lea    esi,[esi+0x0]
c00299c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00299ca:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00299d0:	85 c0                	test   eax,eax
c00299d2:	75 34                	jne    c0029a08 <LinkedList<Device>::removeFirst()+0x8c>
c00299d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00299de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00299e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00299f0:	83 f8 01             	cmp    eax,0x1
c00299f3:	74 27                	je     c0029a1c <LinkedList<Device>::removeFirst()+0xa0>
c00299f5:	83 ec 0c             	sub    esp,0xc
c00299f8:	68 90 b9 02 c0       	push   0xc002b990
c00299fd:	e8 62 70 fe ff       	call   c0010a64 <KePanic(char const*)>
c0029a02:	83 c4 10             	add    esp,0x10
c0029a05:	eb 15                	jmp    c0029a1c <LinkedList<Device>::removeFirst()+0xa0>
c0029a07:	90                   	nop
c0029a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0029a0e:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a18:	89 10                	mov    DWORD PTR [eax],edx
c0029a1a:	66 90                	xchg   ax,ax
c0029a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a20:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029a23:	8d 50 ff             	lea    edx,[eax-0x1]
c0029a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a2a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0029a30:	83 c4 0c             	add    esp,0xc
c0029a33:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0029a34 <Computer::~Computer()>:
c0029a34:	83 ec 0c             	sub    esp,0xc
c0029a37:	ba 40 bf 02 c0       	mov    edx,0xc002bf40
c0029a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a40:	89 10                	mov    DWORD PTR [eax],edx
c0029a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a46:	83 ec 0c             	sub    esp,0xc
c0029a49:	50                   	push   eax
c0029a4a:	e8 47 0c fe ff       	call   c000a696 <Device::~Device()>
c0029a4f:	83 c4 10             	add    esp,0x10
c0029a52:	90                   	nop
c0029a53:	83 c4 0c             	add    esp,0xc
c0029a56:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0029a58 <Computer::~Computer()>:
c0029a58:	83 ec 0c             	sub    esp,0xc
c0029a5b:	83 ec 0c             	sub    esp,0xc
c0029a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a62:	e8 cd ff ff ff       	call   c0029a34 <Computer::~Computer()>
c0029a67:	83 c4 10             	add    esp,0x10
c0029a6a:	83 ec 08             	sub    esp,0x8
c0029a6d:	68 68 01 00 00       	push   0x168
c0029a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a76:	e8 9d 46 fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0029a7b:	83 c4 10             	add    esp,0x10
c0029a7e:	83 c4 0c             	add    esp,0xc
c0029a81:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029a82 <idleCommon()>:
c0029a82:	83 ec 0c             	sub    esp,0xc
c0029a85:	fa                   	cli    
c0029a86:	ff 05 30 73 03 c0    	inc    DWORD PTR ds:0xc0037330
c0029a8c:	e8 6b db fe ff       	call   c00175fc <schedule()>
c0029a91:	f0 ff 0d 30 73 03 c0 	lock dec DWORD PTR ds:0xc0037330
c0029a98:	83 3d 30 73 03 c0 00 	cmp    DWORD PTR ds:0xc0037330,0x0
c0029a9f:	75 01                	jne    c0029aa2 <idleCommon()+0x20>
c0029aa1:	fb                   	sti    
c0029aa2:	83 c4 0c             	add    esp,0xc
c0029aa5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029aa6 <LinkedList<UnixFile>::~LinkedList()>:
c0029aa6:	90                   	nop
c0029aa7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029aa8 <LinkedList<UnixFile>::LinkedList()>:
c0029aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029aac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029ab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ab6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029abd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ac1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029acc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ad6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029add:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ae1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029ae8:	90                   	nop
c0029ae9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0029aea <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0029aea:	83 ec 0c             	sub    esp,0xc
c0029aed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029af2:	75 10                	jne    c0029b04 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029af4:	83 ec 0c             	sub    esp,0xc
c0029af7:	68 d0 b6 02 c0       	push   0xc002b6d0
c0029afc:	e8 63 6f fe ff       	call   c0010a64 <KePanic(char const*)>
c0029b01:	83 c4 10             	add    esp,0x10
c0029b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0029b0a:	85 c0                	test   eax,eax
c0029b0c:	74 34                	je     c0029b42 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029b15:	85 c0                	test   eax,eax
c0029b17:	74 29                	je     c0029b42 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029b20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029b24:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029b2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029b39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029b40:	eb 65                	jmp    c0029ba7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b46:	8b 00                	mov    eax,DWORD PTR [eax]
c0029b48:	85 c0                	test   eax,eax
c0029b4a:	75 4b                	jne    c0029b97 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029b53:	85 c0                	test   eax,eax
c0029b55:	75 40                	jne    c0029b97 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029b5f:	89 10                	mov    DWORD PTR [eax],edx
c0029b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029b69:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029b73:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029b81:	85 c0                	test   eax,eax
c0029b83:	74 22                	je     c0029ba7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029b85:	83 ec 0c             	sub    esp,0xc
c0029b88:	68 f2 b6 02 c0       	push   0xc002b6f2
c0029b8d:	e8 d2 6e fe ff       	call   c0010a64 <KePanic(char const*)>
c0029b92:	83 c4 10             	add    esp,0x10
c0029b95:	eb 10                	jmp    c0029ba7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029b97:	83 ec 0c             	sub    esp,0xc
c0029b9a:	68 fc b6 02 c0       	push   0xc002b6fc
c0029b9f:	e8 c0 6e fe ff       	call   c0010a64 <KePanic(char const*)>
c0029ba4:	83 c4 10             	add    esp,0x10
c0029ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029bae:	8d 50 01             	lea    edx,[eax+0x1]
c0029bb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bb5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029bb8:	90                   	nop
c0029bb9:	83 c4 0c             	add    esp,0xc
c0029bbc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029bbe <LinkedList<UnixFile>::getFirstElement()>:
c0029bbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029bc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0029bc4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029bc6 <LinkedList<UnixFile>::removeFirst()>:
c0029bc6:	83 ec 0c             	sub    esp,0xc
c0029bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0029bcf:	85 c0                	test   eax,eax
c0029bd1:	75 12                	jne    c0029be5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029bd3:	83 ec 0c             	sub    esp,0xc
c0029bd6:	68 6c b9 02 c0       	push   0xc002b96c
c0029bdb:	e8 84 6e fe ff       	call   c0010a64 <KePanic(char const*)>
c0029be0:	83 c4 10             	add    esp,0x10
c0029be3:	eb 7e                	jmp    c0029c63 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029be9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029bec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029bef:	85 c0                	test   eax,eax
c0029bf1:	74 10                	je     c0029c03 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029bf3:	83 ec 0c             	sub    esp,0xc
c0029bf6:	68 b7 b9 02 c0       	push   0xc002b9b7
c0029bfb:	e8 64 6e fe ff       	call   c0010a64 <KePanic(char const*)>
c0029c00:	83 c4 10             	add    esp,0x10
c0029c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c07:	8b 00                	mov    eax,DWORD PTR [eax]
c0029c09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029c0c:	85 c0                	test   eax,eax
c0029c0e:	75 33                	jne    c0029c43 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c1e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c29:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029c2c:	83 f8 01             	cmp    eax,0x1
c0029c2f:	74 21                	je     c0029c52 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029c31:	83 ec 0c             	sub    esp,0xc
c0029c34:	68 90 b9 02 c0       	push   0xc002b990
c0029c39:	e8 26 6e fe ff       	call   c0010a64 <KePanic(char const*)>
c0029c3e:	83 c4 10             	add    esp,0x10
c0029c41:	eb 0f                	jmp    c0029c52 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0029c49:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0029c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c50:	89 10                	mov    DWORD PTR [eax],edx
c0029c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029c59:	8d 50 ff             	lea    edx,[eax-0x1]
c0029c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c60:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029c63:	83 c4 0c             	add    esp,0xc
c0029c66:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0029c68 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0029c68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029c6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029c6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029c70 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029c70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029c74:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029c77:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029c78 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029c78:	90                   	nop
c0029c79:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029c7c <ThreadControlBlock::ThreadControlBlock()>:
c0029c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029c80:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029c87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029c8b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029c96:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029c9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ca1:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0029ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cac:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029cb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cb7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029cbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cbf:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029cc3:	90                   	nop
c0029cc4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0029cc8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0029cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ccc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029cd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029cdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ce1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029ce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cf6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029cfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d01:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029d08:	90                   	nop
c0029d09:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029d0a <IOAPIC::~IOAPIC()>:
c0029d0a:	83 ec 0c             	sub    esp,0xc
c0029d0d:	ba 80 d3 02 c0       	mov    edx,0xc002d380
c0029d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d16:	89 10                	mov    DWORD PTR [eax],edx
c0029d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d1c:	83 ec 0c             	sub    esp,0xc
c0029d1f:	50                   	push   eax
c0029d20:	e8 71 09 fe ff       	call   c000a696 <Device::~Device()>
c0029d25:	83 c4 10             	add    esp,0x10
c0029d28:	90                   	nop
c0029d29:	83 c4 0c             	add    esp,0xc
c0029d2c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029d2e <IOAPIC::~IOAPIC()>:
c0029d2e:	83 ec 0c             	sub    esp,0xc
c0029d31:	83 ec 0c             	sub    esp,0xc
c0029d34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d38:	e8 cd ff ff ff       	call   c0029d0a <IOAPIC::~IOAPIC()>
c0029d3d:	83 c4 10             	add    esp,0x10
c0029d40:	83 ec 08             	sub    esp,0x8
c0029d43:	68 68 01 00 00       	push   0x168
c0029d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d4c:	e8 c7 43 fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0029d51:	83 c4 10             	add    esp,0x10
c0029d54:	83 c4 0c             	add    esp,0xc
c0029d57:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029d58 <CPU::~CPU()>:
c0029d58:	83 ec 0c             	sub    esp,0xc
c0029d5b:	ba 08 d7 02 c0       	mov    edx,0xc002d708
c0029d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d64:	89 10                	mov    DWORD PTR [eax],edx
c0029d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d6a:	83 ec 0c             	sub    esp,0xc
c0029d6d:	50                   	push   eax
c0029d6e:	e8 23 09 fe ff       	call   c000a696 <Device::~Device()>
c0029d73:	83 c4 10             	add    esp,0x10
c0029d76:	90                   	nop
c0029d77:	83 c4 0c             	add    esp,0xc
c0029d7a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029d7c <CPU::~CPU()>:
c0029d7c:	83 ec 0c             	sub    esp,0xc
c0029d7f:	83 ec 0c             	sub    esp,0xc
c0029d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d86:	e8 cd ff ff ff       	call   c0029d58 <CPU::~CPU()>
c0029d8b:	83 c4 10             	add    esp,0x10
c0029d8e:	83 ec 08             	sub    esp,0x8
c0029d91:	68 78 11 00 00       	push   0x1178
c0029d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d9a:	e8 79 43 fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0029d9f:	83 c4 10             	add    esp,0x10
c0029da2:	83 c4 0c             	add    esp,0xc
c0029da5:	c3                   	ret    

Disassembly of section .text._ZN14SerialHardware10_getDriverEv:

c0029da8 <SerialHardware::_getDriver()>:
c0029da8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029dac:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029db2:	c3                   	ret    

Disassembly of section .text._ZN14SerialHardware7getTypeEv:

c0029db4 <SerialHardware::getType()>:
c0029db4:	b8 06 00 00 00       	mov    eax,0x6
c0029db9:	c3                   	ret    

Disassembly of section .text._ZN17LegacyDMAHardware10_getDriverEv:

c0029dbc <LegacyDMAHardware::_getDriver()>:
c0029dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029dc0:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029dc6:	c3                   	ret    

Disassembly of section .text._ZN17LegacyDMAHardware7getTypeEv:

c0029dc8 <LegacyDMAHardware::getType()>:
c0029dc8:	b8 07 00 00 00       	mov    eax,0x7
c0029dcd:	c3                   	ret    

Disassembly of section .text._ZN14SerialHardwareD2Ev:

c0029dd0 <SerialHardware::~SerialHardware()>:
c0029dd0:	83 ec 0c             	sub    esp,0xc
c0029dd3:	ba 90 d9 02 c0       	mov    edx,0xc002d990
c0029dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ddc:	89 10                	mov    DWORD PTR [eax],edx
c0029dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029de2:	83 ec 0c             	sub    esp,0xc
c0029de5:	50                   	push   eax
c0029de6:	e8 85 d6 fd ff       	call   c0007470 <Hardware::~Hardware()>
c0029deb:	83 c4 10             	add    esp,0x10
c0029dee:	90                   	nop
c0029def:	83 c4 0c             	add    esp,0xc
c0029df2:	c3                   	ret    

Disassembly of section .text._ZN14SerialHardwareD0Ev:

c0029df4 <SerialHardware::~SerialHardware()>:
c0029df4:	83 ec 0c             	sub    esp,0xc
c0029df7:	83 ec 0c             	sub    esp,0xc
c0029dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029dfe:	e8 cd ff ff ff       	call   c0029dd0 <SerialHardware::~SerialHardware()>
c0029e03:	83 c4 10             	add    esp,0x10
c0029e06:	83 ec 08             	sub    esp,0x8
c0029e09:	68 8c 00 00 00       	push   0x8c
c0029e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e12:	e8 01 43 fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0029e17:	83 c4 10             	add    esp,0x10
c0029e1a:	83 c4 0c             	add    esp,0xc
c0029e1d:	c3                   	ret    

Disassembly of section .text._ZN17LegacyDMAHardwareD2Ev:

c0029e20 <LegacyDMAHardware::~LegacyDMAHardware()>:
c0029e20:	83 ec 0c             	sub    esp,0xc
c0029e23:	ba c8 d9 02 c0       	mov    edx,0xc002d9c8
c0029e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e2c:	89 10                	mov    DWORD PTR [eax],edx
c0029e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e32:	83 ec 0c             	sub    esp,0xc
c0029e35:	50                   	push   eax
c0029e36:	e8 35 d6 fd ff       	call   c0007470 <Hardware::~Hardware()>
c0029e3b:	83 c4 10             	add    esp,0x10
c0029e3e:	90                   	nop
c0029e3f:	83 c4 0c             	add    esp,0xc
c0029e42:	c3                   	ret    

Disassembly of section .text._ZN17LegacyDMAHardwareD0Ev:

c0029e44 <LegacyDMAHardware::~LegacyDMAHardware()>:
c0029e44:	83 ec 0c             	sub    esp,0xc
c0029e47:	83 ec 0c             	sub    esp,0xc
c0029e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e4e:	e8 cd ff ff ff       	call   c0029e20 <LegacyDMAHardware::~LegacyDMAHardware()>
c0029e53:	83 c4 10             	add    esp,0x10
c0029e56:	83 ec 08             	sub    esp,0x8
c0029e59:	68 8c 00 00 00       	push   0x8c
c0029e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e62:	e8 b1 42 fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c0029e67:	83 c4 10             	add    esp,0x10
c0029e6a:	83 c4 0c             	add    esp,0xc
c0029e6d:	c3                   	ret    

Disassembly of section .text._ZN12SerialDriverC2Ev:

c0029e70 <SerialDriver::SerialDriver()>:
c0029e70:	83 ec 0c             	sub    esp,0xc
c0029e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e77:	83 ec 0c             	sub    esp,0xc
c0029e7a:	50                   	push   eax
c0029e7b:	e8 f8 e7 ff ff       	call   c0028678 <Driver::Driver()>
c0029e80:	83 c4 10             	add    esp,0x10
c0029e83:	ba 00 d9 02 c0       	mov    edx,0xc002d900
c0029e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e8c:	89 10                	mov    DWORD PTR [eax],edx
c0029e8e:	90                   	nop
c0029e8f:	83 c4 0c             	add    esp,0xc
c0029e92:	c3                   	ret    

Disassembly of section .text._ZN14SerialHardwareC2Ev:

c0029e94 <SerialHardware::SerialHardware()>:
c0029e94:	83 ec 0c             	sub    esp,0xc
c0029e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e9b:	83 ec 0c             	sub    esp,0xc
c0029e9e:	50                   	push   eax
c0029e9f:	e8 44 d6 fd ff       	call   c00074e8 <Hardware::Hardware()>
c0029ea4:	83 c4 10             	add    esp,0x10
c0029ea7:	ba 90 d9 02 c0       	mov    edx,0xc002d990
c0029eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029eb0:	89 10                	mov    DWORD PTR [eax],edx
c0029eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029eb6:	c7 80 88 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x88],0x0
c0029ec0:	90                   	nop
c0029ec1:	83 c4 0c             	add    esp,0xc
c0029ec4:	c3                   	ret    

Disassembly of section .text._ZN14SerialHardware9setDriverEP12SerialDriver:

c0029ec8 <SerialHardware::setDriver(SerialDriver*)>:
c0029ec8:	83 ec 0c             	sub    esp,0xc
c0029ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ecf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029ed3:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c0029ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029edd:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029ee3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029ee7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029eee:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029ef4:	89 c2                	mov    edx,eax
c0029ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029efa:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029f00:	8b 00                	mov    eax,DWORD PTR [eax]
c0029f02:	83 c0 04             	add    eax,0x4
c0029f05:	8b 00                	mov    eax,DWORD PTR [eax]
c0029f07:	83 ec 0c             	sub    esp,0xc
c0029f0a:	52                   	push   edx
c0029f0b:	ff d0                	call   eax
c0029f0d:	83 c4 10             	add    esp,0x10
c0029f10:	90                   	nop
c0029f11:	83 c4 0c             	add    esp,0xc
c0029f14:	c3                   	ret    

Disassembly of section .text._ZN9UART16550C2Ev:

c0029f18 <UART16550::UART16550()>:
c0029f18:	83 ec 0c             	sub    esp,0xc
c0029f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f1f:	83 ec 0c             	sub    esp,0xc
c0029f22:	50                   	push   eax
c0029f23:	e8 48 ff ff ff       	call   c0029e70 <SerialDriver::SerialDriver()>
c0029f28:	83 c4 10             	add    esp,0x10
c0029f2b:	ba f0 e8 02 c0       	mov    edx,0xc002e8f0
c0029f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f34:	89 10                	mov    DWORD PTR [eax],edx
c0029f36:	90                   	nop
c0029f37:	83 c4 0c             	add    esp,0xc
c0029f3a:	c3                   	ret    

Disassembly of section .text._ZN15LegacyDMADriverC2Ev:

c0029f3c <LegacyDMADriver::LegacyDMADriver()>:
c0029f3c:	83 ec 0c             	sub    esp,0xc
c0029f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f43:	83 ec 0c             	sub    esp,0xc
c0029f46:	50                   	push   eax
c0029f47:	e8 2c e7 ff ff       	call   c0028678 <Driver::Driver()>
c0029f4c:	83 c4 10             	add    esp,0x10
c0029f4f:	ba ac d9 02 c0       	mov    edx,0xc002d9ac
c0029f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f58:	89 10                	mov    DWORD PTR [eax],edx
c0029f5a:	90                   	nop
c0029f5b:	83 c4 0c             	add    esp,0xc
c0029f5e:	c3                   	ret    

Disassembly of section .text._ZN17LegacyDMAHardwareC2Ev:

c0029f60 <LegacyDMAHardware::LegacyDMAHardware()>:
c0029f60:	83 ec 0c             	sub    esp,0xc
c0029f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f67:	83 ec 0c             	sub    esp,0xc
c0029f6a:	50                   	push   eax
c0029f6b:	e8 78 d5 fd ff       	call   c00074e8 <Hardware::Hardware()>
c0029f70:	83 c4 10             	add    esp,0x10
c0029f73:	ba c8 d9 02 c0       	mov    edx,0xc002d9c8
c0029f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f7c:	89 10                	mov    DWORD PTR [eax],edx
c0029f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f82:	c7 80 88 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x88],0x0
c0029f8c:	90                   	nop
c0029f8d:	83 c4 0c             	add    esp,0xc
c0029f90:	c3                   	ret    

Disassembly of section .text._ZN17LegacyDMAHardware9setDriverEP15LegacyDMADriver:

c0029f94 <LegacyDMAHardware::setDriver(LegacyDMADriver*)>:
c0029f94:	83 ec 0c             	sub    esp,0xc
c0029f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029f9f:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c0029fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fa9:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029faf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029fb3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fba:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029fc0:	89 c2                	mov    edx,eax
c0029fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fc6:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0029fcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0029fce:	83 c0 04             	add    eax,0x4
c0029fd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0029fd3:	83 ec 0c             	sub    esp,0xc
c0029fd6:	52                   	push   edx
c0029fd7:	ff d0                	call   eax
c0029fd9:	83 c4 10             	add    esp,0x10
c0029fdc:	90                   	nop
c0029fdd:	83 c4 0c             	add    esp,0xc
c0029fe0:	c3                   	ret    

Disassembly of section .text._ZN7DMA8237C2Ev:

c0029fe4 <DMA8237::DMA8237()>:
c0029fe4:	83 ec 0c             	sub    esp,0xc
c0029fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029feb:	83 ec 0c             	sub    esp,0xc
c0029fee:	50                   	push   eax
c0029fef:	e8 48 ff ff ff       	call   c0029f3c <LegacyDMADriver::LegacyDMADriver()>
c0029ff4:	83 c4 10             	add    esp,0x10
c0029ff7:	ba e4 d8 02 c0       	mov    edx,0xc002d8e4
c0029ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a000:	89 10                	mov    DWORD PTR [eax],edx
c002a002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a006:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
c002a00a:	90                   	nop
c002a00b:	83 c4 0c             	add    esp,0xc
c002a00e:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware10_getDriverEv:

c002a010 <UnknownHardware::_getDriver()>:
c002a010:	b8 00 00 00 00       	mov    eax,0x0
c002a015:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware7getTypeEv:

c002a018 <UnknownHardware::getType()>:
c002a018:	b8 00 00 00 00       	mov    eax,0x0
c002a01d:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareD2Ev:

c002a020 <UnknownHardware::~UnknownHardware()>:
c002a020:	83 ec 0c             	sub    esp,0xc
c002a023:	ba e8 db 02 c0       	mov    edx,0xc002dbe8
c002a028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a02c:	89 10                	mov    DWORD PTR [eax],edx
c002a02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a032:	83 ec 0c             	sub    esp,0xc
c002a035:	50                   	push   eax
c002a036:	e8 35 d4 fd ff       	call   c0007470 <Hardware::~Hardware()>
c002a03b:	83 c4 10             	add    esp,0x10
c002a03e:	90                   	nop
c002a03f:	83 c4 0c             	add    esp,0xc
c002a042:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareD0Ev:

c002a044 <UnknownHardware::~UnknownHardware()>:
c002a044:	83 ec 0c             	sub    esp,0xc
c002a047:	83 ec 0c             	sub    esp,0xc
c002a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a04e:	e8 cd ff ff ff       	call   c002a020 <UnknownHardware::~UnknownHardware()>
c002a053:	83 c4 10             	add    esp,0x10
c002a056:	83 ec 08             	sub    esp,0x8
c002a059:	68 88 01 00 00       	push   0x188
c002a05e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a062:	e8 b1 40 fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c002a067:	83 c4 10             	add    esp,0x10
c002a06a:	83 c4 0c             	add    esp,0xc
c002a06d:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareC2Ev:

c002a070 <UnknownHardware::UnknownHardware()>:
c002a070:	83 ec 0c             	sub    esp,0xc
c002a073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a077:	83 ec 0c             	sub    esp,0xc
c002a07a:	50                   	push   eax
c002a07b:	e8 68 d4 fd ff       	call   c00074e8 <Hardware::Hardware()>
c002a080:	83 c4 10             	add    esp,0x10
c002a083:	ba e8 db 02 c0       	mov    edx,0xc002dbe8
c002a088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a08c:	89 10                	mov    DWORD PTR [eax],edx
c002a08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a092:	c7 40 70 04 00 00 00 	mov    DWORD PTR [eax+0x70],0x4
c002a099:	90                   	nop
c002a09a:	83 c4 0c             	add    esp,0xc
c002a09d:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware18setISAPnPDetectionEhy:

c002a0a0 <UnknownHardware::setISAPnPDetection(unsigned char, unsigned long long)>:
c002a0a0:	53                   	push   ebx
c002a0a1:	83 ec 10             	sub    esp,0x10
c002a0a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a0a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002a0ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0b0:	89 04 24             	mov    DWORD PTR [esp],eax
c002a0b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a0b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002a0bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a0bf:	c7 40 70 01 00 00 00 	mov    DWORD PTR [eax+0x70],0x1
c002a0c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a0ca:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c002a0ce:	88 50 40             	mov    BYTE PTR [eax+0x40],dl
c002a0d1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002a0d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a0d8:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c002a0db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002a0de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002a0e2:	89 d0                	mov    eax,edx
c002a0e4:	31 d2                	xor    edx,edx
c002a0e6:	89 c1                	mov    ecx,eax
c002a0e8:	89 d3                	mov    ebx,edx
c002a0ea:	89 ca                	mov    edx,ecx
c002a0ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a0f0:	89 50 48             	mov    DWORD PTR [eax+0x48],edx
c002a0f3:	90                   	nop
c002a0f4:	83 c4 10             	add    esp,0x10
c002a0f7:	5b                   	pop    ebx
c002a0f8:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware20getHumanReadableNameEv:

c002a0fc <UnknownHardware::getHumanReadableName()>:
c002a0fc:	83 ec 0c             	sub    esp,0xc
c002a0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a103:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c002a106:	83 f8 02             	cmp    eax,0x2
c002a109:	75 0d                	jne    c002a118 <UnknownHardware::getHumanReadableName()+0x1c>
c002a10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a10f:	05 88 00 00 00       	add    eax,0x88
c002a114:	eb 2a                	jmp    c002a140 <UnknownHardware::getHumanReadableName()+0x44>
c002a116:	66 90                	xchg   ax,ax
c002a118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a11c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c002a11f:	83 f8 01             	cmp    eax,0x1
c002a122:	75 08                	jne    c002a12c <UnknownHardware::getHumanReadableName()+0x30>
c002a124:	b8 c0 db 02 c0       	mov    eax,0xc002dbc0
c002a129:	eb 15                	jmp    c002a140 <UnknownHardware::getHumanReadableName()+0x44>
c002a12b:	90                   	nop
c002a12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a130:	83 ec 0c             	sub    esp,0xc
c002a133:	50                   	push   eax
c002a134:	e8 8f d2 fd ff       	call   c00073c8 <Hardware::getHumanReadableName()>
c002a139:	83 c4 10             	add    esp,0x10
c002a13c:	90                   	nop
c002a13d:	8d 76 00             	lea    esi,[esi+0x0]
c002a140:	83 c4 0c             	add    esp,0xc
c002a143:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareC2E23DevicePCIConnectionInfo:

c002a144 <UnknownHardware::UnknownHardware(DevicePCIConnectionInfo)>:
c002a144:	57                   	push   edi
c002a145:	56                   	push   esi
c002a146:	53                   	push   ebx
c002a147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a14b:	83 ec 0c             	sub    esp,0xc
c002a14e:	50                   	push   eax
c002a14f:	e8 94 d3 fd ff       	call   c00074e8 <Hardware::Hardware()>
c002a154:	83 c4 10             	add    esp,0x10
c002a157:	ba e8 db 02 c0       	mov    edx,0xc002dbe8
c002a15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a160:	89 10                	mov    DWORD PTR [eax],edx
c002a162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a166:	c7 40 70 02 00 00 00 	mov    DWORD PTR [eax+0x70],0x2
c002a16d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a171:	8d 58 40             	lea    ebx,[eax+0x40]
c002a174:	8d 44 24 14          	lea    eax,[esp+0x14]
c002a178:	ba 09 00 00 00       	mov    edx,0x9
c002a17d:	fc                   	cld    
c002a17e:	89 df                	mov    edi,ebx
c002a180:	89 c6                	mov    esi,eax
c002a182:	89 d1                	mov    ecx,edx
c002a184:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a18a:	05 88 00 00 00       	add    eax,0x88
c002a18f:	83 ec 08             	sub    esp,0x8
c002a192:	68 80 e7 02 c0       	push   0xc002e780
c002a197:	50                   	push   eax
c002a198:	e8 a3 64 fd ff       	call   c0000640 <strcpy>
c002a19d:	83 c4 10             	add    esp,0x10
c002a1a0:	83 ec 0c             	sub    esp,0xc
c002a1a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a1a7:	83 ec 24             	sub    esp,0x24
c002a1aa:	89 e2                	mov    edx,esp
c002a1ac:	8d 58 40             	lea    ebx,[eax+0x40]
c002a1af:	b8 09 00 00 00       	mov    eax,0x9
c002a1b4:	89 d7                	mov    edi,edx
c002a1b6:	89 de                	mov    esi,ebx
c002a1b8:	89 c1                	mov    ecx,eax
c002a1ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a1bc:	e8 33 39 ff ff       	call   c001daf4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)>
c002a1c1:	83 c4 30             	add    esp,0x30
c002a1c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a1c8:	81 c2 88 00 00 00    	add    edx,0x88
c002a1ce:	83 ec 08             	sub    esp,0x8
c002a1d1:	50                   	push   eax
c002a1d2:	52                   	push   edx
c002a1d3:	e8 68 66 fd ff       	call   c0000840 <strcat>
c002a1d8:	83 c4 10             	add    esp,0x10
c002a1db:	90                   	nop
c002a1dc:	5b                   	pop    ebx
c002a1dd:	5e                   	pop    esi
c002a1de:	5f                   	pop    edi
c002a1df:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002a1e0 <PCI::~PCI()>:
c002a1e0:	83 ec 0c             	sub    esp,0xc
c002a1e3:	ba 74 ef 02 c0       	mov    edx,0xc002ef74
c002a1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1ec:	89 10                	mov    DWORD PTR [eax],edx
c002a1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1f2:	83 ec 0c             	sub    esp,0xc
c002a1f5:	50                   	push   eax
c002a1f6:	e8 e1 f4 fd ff       	call   c00096dc <Bus::~Bus()>
c002a1fb:	83 c4 10             	add    esp,0x10
c002a1fe:	90                   	nop
c002a1ff:	83 c4 0c             	add    esp,0xc
c002a202:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002a204 <PCI::~PCI()>:
c002a204:	83 ec 0c             	sub    esp,0xc
c002a207:	83 ec 0c             	sub    esp,0xc
c002a20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a20e:	e8 cd ff ff ff       	call   c002a1e0 <PCI::~PCI()>
c002a213:	83 c4 10             	add    esp,0x10
c002a216:	83 ec 08             	sub    esp,0x8
c002a219:	68 5c 01 00 00       	push   0x15c
c002a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a222:	e8 f1 3e fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c002a227:	83 c4 10             	add    esp,0x10
c002a22a:	83 c4 0c             	add    esp,0xc
c002a22d:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002a22e <IDE::~IDE()>:
c002a22e:	83 ec 0c             	sub    esp,0xc
c002a231:	ba c4 f0 02 c0       	mov    edx,0xc002f0c4
c002a236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a23a:	89 10                	mov    DWORD PTR [eax],edx
c002a23c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a240:	83 ec 0c             	sub    esp,0xc
c002a243:	50                   	push   eax
c002a244:	e8 db 08 fe ff       	call   c000ab24 <HardDiskController::~HardDiskController()>
c002a249:	83 c4 10             	add    esp,0x10
c002a24c:	90                   	nop
c002a24d:	83 c4 0c             	add    esp,0xc
c002a250:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002a252 <IDE::~IDE()>:
c002a252:	83 ec 0c             	sub    esp,0xc
c002a255:	83 ec 0c             	sub    esp,0xc
c002a258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a25c:	e8 cd ff ff ff       	call   c002a22e <IDE::~IDE()>
c002a261:	83 c4 10             	add    esp,0x10
c002a264:	83 ec 08             	sub    esp,0x8
c002a267:	68 70 02 00 00       	push   0x270
c002a26c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a270:	e8 a3 3e fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c002a275:	83 c4 10             	add    esp,0x10
c002a278:	83 c4 0c             	add    esp,0xc
c002a27b:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002a27c <SATABus::~SATABus()>:
c002a27c:	83 ec 0c             	sub    esp,0xc
c002a27f:	ba 14 f1 02 c0       	mov    edx,0xc002f114
c002a284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a288:	89 10                	mov    DWORD PTR [eax],edx
c002a28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a28e:	83 ec 0c             	sub    esp,0xc
c002a291:	50                   	push   eax
c002a292:	e8 8d 08 fe ff       	call   c000ab24 <HardDiskController::~HardDiskController()>
c002a297:	83 c4 10             	add    esp,0x10
c002a29a:	90                   	nop
c002a29b:	83 c4 0c             	add    esp,0xc
c002a29e:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002a2a0 <SATABus::~SATABus()>:
c002a2a0:	83 ec 0c             	sub    esp,0xc
c002a2a3:	83 ec 0c             	sub    esp,0xc
c002a2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a2aa:	e8 cd ff ff ff       	call   c002a27c <SATABus::~SATABus()>
c002a2af:	83 c4 10             	add    esp,0x10
c002a2b2:	83 ec 08             	sub    esp,0x8
c002a2b5:	68 64 01 00 00       	push   0x164
c002a2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a2be:	e8 55 3e fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c002a2c3:	83 c4 10             	add    esp,0x10
c002a2c6:	83 c4 0c             	add    esp,0xc
c002a2c9:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002a2ca <ATA::~ATA()>:
c002a2ca:	83 ec 0c             	sub    esp,0xc
c002a2cd:	ba fc f1 02 c0       	mov    edx,0xc002f1fc
c002a2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2d6:	89 10                	mov    DWORD PTR [eax],edx
c002a2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2dc:	83 ec 0c             	sub    esp,0xc
c002a2df:	50                   	push   eax
c002a2e0:	e8 21 09 fe ff       	call   c000ac06 <PhysicalDisk::~PhysicalDisk()>
c002a2e5:	83 c4 10             	add    esp,0x10
c002a2e8:	90                   	nop
c002a2e9:	83 c4 0c             	add    esp,0xc
c002a2ec:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002a2ee <ATA::~ATA()>:
c002a2ee:	83 ec 0c             	sub    esp,0xc
c002a2f1:	83 ec 0c             	sub    esp,0xc
c002a2f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a2f8:	e8 cd ff ff ff       	call   c002a2ca <ATA::~ATA()>
c002a2fd:	83 c4 10             	add    esp,0x10
c002a300:	83 ec 08             	sub    esp,0x8
c002a303:	68 8c 01 00 00       	push   0x18c
c002a308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a30c:	e8 07 3e fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c002a311:	83 c4 10             	add    esp,0x10
c002a314:	83 c4 0c             	add    esp,0xc
c002a317:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002a318 <ATAPI::~ATAPI()>:
c002a318:	83 ec 0c             	sub    esp,0xc
c002a31b:	ba 44 f2 02 c0       	mov    edx,0xc002f244
c002a320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a324:	89 10                	mov    DWORD PTR [eax],edx
c002a326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a32a:	83 ec 0c             	sub    esp,0xc
c002a32d:	50                   	push   eax
c002a32e:	e8 d3 08 fe ff       	call   c000ac06 <PhysicalDisk::~PhysicalDisk()>
c002a333:	83 c4 10             	add    esp,0x10
c002a336:	90                   	nop
c002a337:	83 c4 0c             	add    esp,0xc
c002a33a:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002a33c <ATAPI::~ATAPI()>:
c002a33c:	83 ec 0c             	sub    esp,0xc
c002a33f:	83 ec 0c             	sub    esp,0xc
c002a342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a346:	e8 cd ff ff ff       	call   c002a318 <ATAPI::~ATAPI()>
c002a34b:	83 c4 10             	add    esp,0x10
c002a34e:	83 ec 08             	sub    esp,0x8
c002a351:	68 84 01 00 00       	push   0x184
c002a356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a35a:	e8 b9 3d fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c002a35f:	83 c4 10             	add    esp,0x10
c002a362:	83 c4 0c             	add    esp,0xc
c002a365:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002a366 <SATA::~SATA()>:
c002a366:	83 ec 0c             	sub    esp,0xc
c002a369:	ba 04 f3 02 c0       	mov    edx,0xc002f304
c002a36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a372:	89 10                	mov    DWORD PTR [eax],edx
c002a374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a378:	83 ec 0c             	sub    esp,0xc
c002a37b:	50                   	push   eax
c002a37c:	e8 85 08 fe ff       	call   c000ac06 <PhysicalDisk::~PhysicalDisk()>
c002a381:	83 c4 10             	add    esp,0x10
c002a384:	90                   	nop
c002a385:	83 c4 0c             	add    esp,0xc
c002a388:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002a38a <SATA::~SATA()>:
c002a38a:	83 ec 0c             	sub    esp,0xc
c002a38d:	83 ec 0c             	sub    esp,0xc
c002a390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a394:	e8 cd ff ff ff       	call   c002a366 <SATA::~SATA()>
c002a399:	83 c4 10             	add    esp,0x10
c002a39c:	83 ec 08             	sub    esp,0x8
c002a39f:	68 7c 01 00 00       	push   0x17c
c002a3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a3a8:	e8 6b 3d fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c002a3ad:	83 c4 10             	add    esp,0x10
c002a3b0:	83 c4 0c             	add    esp,0xc
c002a3b3:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002a3b4 <SATAPI::~SATAPI()>:
c002a3b4:	83 ec 0c             	sub    esp,0xc
c002a3b7:	ba 28 f4 02 c0       	mov    edx,0xc002f428
c002a3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3c0:	89 10                	mov    DWORD PTR [eax],edx
c002a3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a3c6:	83 ec 0c             	sub    esp,0xc
c002a3c9:	50                   	push   eax
c002a3ca:	e8 37 08 fe ff       	call   c000ac06 <PhysicalDisk::~PhysicalDisk()>
c002a3cf:	83 c4 10             	add    esp,0x10
c002a3d2:	90                   	nop
c002a3d3:	83 c4 0c             	add    esp,0xc
c002a3d6:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002a3d8 <SATAPI::~SATAPI()>:
c002a3d8:	83 ec 0c             	sub    esp,0xc
c002a3db:	83 ec 0c             	sub    esp,0xc
c002a3de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a3e2:	e8 cd ff ff ff       	call   c002a3b4 <SATAPI::~SATAPI()>
c002a3e7:	83 c4 10             	add    esp,0x10
c002a3ea:	83 ec 08             	sub    esp,0x8
c002a3ed:	68 84 01 00 00       	push   0x184
c002a3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a3f6:	e8 1d 3d fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c002a3fb:	83 c4 10             	add    esp,0x10
c002a3fe:	83 c4 0c             	add    esp,0xc
c002a401:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002a404 <APICTimer::~APICTimer()>:
c002a404:	83 ec 0c             	sub    esp,0xc
c002a407:	ba 7c f4 02 c0       	mov    edx,0xc002f47c
c002a40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a410:	89 10                	mov    DWORD PTR [eax],edx
c002a412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a416:	83 ec 0c             	sub    esp,0xc
c002a419:	50                   	push   eax
c002a41a:	e8 81 19 fe ff       	call   c000bda0 <Timer::~Timer()>
c002a41f:	83 c4 10             	add    esp,0x10
c002a422:	90                   	nop
c002a423:	83 c4 0c             	add    esp,0xc
c002a426:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002a428 <APICTimer::~APICTimer()>:
c002a428:	83 ec 0c             	sub    esp,0xc
c002a42b:	83 ec 0c             	sub    esp,0xc
c002a42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a432:	e8 cd ff ff ff       	call   c002a404 <APICTimer::~APICTimer()>
c002a437:	83 c4 10             	add    esp,0x10
c002a43a:	83 ec 08             	sub    esp,0x8
c002a43d:	68 60 01 00 00       	push   0x160
c002a442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a446:	e8 cd 3c fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c002a44b:	83 c4 10             	add    esp,0x10
c002a44e:	83 c4 0c             	add    esp,0xc
c002a451:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002a454 <PIT::~PIT()>:
c002a454:	83 ec 0c             	sub    esp,0xc
c002a457:	ba cc f4 02 c0       	mov    edx,0xc002f4cc
c002a45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a460:	89 10                	mov    DWORD PTR [eax],edx
c002a462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a466:	83 ec 0c             	sub    esp,0xc
c002a469:	50                   	push   eax
c002a46a:	e8 31 19 fe ff       	call   c000bda0 <Timer::~Timer()>
c002a46f:	83 c4 10             	add    esp,0x10
c002a472:	90                   	nop
c002a473:	83 c4 0c             	add    esp,0xc
c002a476:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002a478 <PIT::~PIT()>:
c002a478:	83 ec 0c             	sub    esp,0xc
c002a47b:	83 ec 0c             	sub    esp,0xc
c002a47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a482:	e8 cd ff ff ff       	call   c002a454 <PIT::~PIT()>
c002a487:	83 c4 10             	add    esp,0x10
c002a48a:	83 ec 08             	sub    esp,0x8
c002a48d:	68 5c 01 00 00       	push   0x15c
c002a492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a496:	e8 7d 3c fe ff       	call   c000e118 <operator delete(void*, unsigned long)>
c002a49b:	83 c4 10             	add    esp,0x10
c002a49e:	83 c4 0c             	add    esp,0xc
c002a4a1:	c3                   	ret    

Disassembly of section userkernel:

c0032000 <KiDefaultSignalHandlerAbort(int)>:
c0032000:	57                   	push   edi
c0032001:	b9 07 00 00 00       	mov    ecx,0x7
c0032006:	56                   	push   esi
c0032007:	be 27 c4 02 c0       	mov    esi,0xc002c427
c003200c:	83 ec 24             	sub    esp,0x24
c003200f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0032013:	fc                   	cld    
c0032014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0032016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003201a:	50                   	push   eax
c003201b:	6a 00                	push   0x0
c003201d:	6a 38                	push   0x38
c003201f:	6a 01                	push   0x1
c0032021:	e8 2c 00 00 00       	call   c0032052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0032026:	83 c4 34             	add    esp,0x34
c0032029:	5e                   	pop    esi
c003202a:	5f                   	pop    edi
c003202b:	c3                   	ret    

c003202c <KiDefaultSignalHandlerTerminate(int)>:
c003202c:	57                   	push   edi
c003202d:	b9 08 00 00 00       	mov    ecx,0x8
c0032032:	56                   	push   esi
c0032033:	be 43 c4 02 c0       	mov    esi,0xc002c443
c0032038:	83 ec 24             	sub    esp,0x24
c003203b:	89 e7                	mov    edi,esp
c003203d:	fc                   	cld    
c003203e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0032040:	54                   	push   esp
c0032041:	6a 00                	push   0x0
c0032043:	6a 37                	push   0x37
c0032045:	6a 01                	push   0x1
c0032047:	e8 06 00 00 00       	call   c0032052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003204c:	83 c4 34             	add    esp,0x34
c003204f:	5e                   	pop    esi
c0032050:	5f                   	pop    edi
c0032051:	c3                   	ret    

c0032052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0032052:	53                   	push   ebx
c0032053:	83 ec 10             	sub    esp,0x10
c0032056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003205a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003205e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0032062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0032066:	cd 60                	int    0x60
c0032068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003206c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0032070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0032074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0032078:	83 c4 10             	add    esp,0x10
c003207b:	5b                   	pop    ebx
c003207c:	c3                   	ret    

Disassembly of section align_previous:

c0033000 <DO_NOT_DELETE()>:
c0033000:	c3                   	ret    
