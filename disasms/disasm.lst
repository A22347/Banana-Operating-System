
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 4f 00 01 00       	call   c001006f <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c0000025:	3d e0 c9 02 c0       	cmp    eax,0xc002c9e0
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e0 c9 02 c0       	push   0xc002c9e0
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c0000051:	2d e0 c9 02 c0       	sub    eax,0xc002c9e0
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e0 c9 02 c0       	push   0xc002c9e0
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb d4 74 02 c0       	mov    ebx,0xc00274d4
c0000097:	81 eb d0 74 02 c0    	sub    ebx,0xc00274d0
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be d0 74 02 c0       	mov    esi,0xc00274d0
c00000a6:	a1 c4 f0 02 c0       	mov    eax,ds:0xc002f0c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 f0 02 c0       	mov    ds:0xc002f0c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 f0 02 c0       	mov    eax,ds:0xc002f0c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e0 c9 02 c0       	push   0xc002c9e0
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f0c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 f0 02 c0       	push   0xc002f0c8
c0000108:	68 e0 c9 02 c0       	push   0xc002c9e0
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 db 61 01 00       	call   c0016488 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 35 46 01 00       	call   c00148fa <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b9 61 01 00       	call   c0016488 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 1a 67 01 00       	call   c0016a08 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 95 6c 01 00       	call   c0016f8c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 31 03 c0 	lgdtd  ds:0xc0033118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 0e f1 00 00       	jmp    c000f48d <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 f0 02 c0       	mov    ds:0xc002f0e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 f0 02 c0    	mov    DWORD PTR ds:0xc002f0e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 e0 74 02 c0 02 	test   BYTE PTR [edx-0x3ffd8b20],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 e0 74 02 c0 01 	test   BYTE PTR [edx-0x3ffd8b20],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 e0 74 02 c0 08 	test   BYTE PTR [edx-0x3ffd8b20],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 e0 74 02 c0 04 	test   BYTE PTR [ecx-0x3ffd8b20],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 e0 74 02 c0 01 	test   BYTE PTR [edx-0x3ffd8b20],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 f1 02 c0    	mov    DWORD PTR ds:0xc002f100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 f1 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd0efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 f1 02 c0    	mov    DWORD PTR ds:0xc002f100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c f1 02 c0    	cmp    DWORD PTR ds:0xc002f12c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f13c
c0000df7:	c7 42 0c 34 f1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002f134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c f1 02 c0    	mov    DWORD PTR ds:0xc002f12c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 f1 02 c0 02 	test   BYTE PTR ds:0xc002f100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 f4 02 c0    	dec    DWORD PTR ds:0xc002f450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 f4 02 c0    	sub    DWORD PTR ds:0xc002f464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 59 ee 00 00       	call   c000fcb9 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 66 ed 00 00       	call   c000fc5b <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 45 ec 00 00       	call   c000fc25 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 40 ec 00 00       	call   c000fc5b <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 ec ea 00 00       	call   c000fc25 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 d2 ea 00 00       	call   c000fc25 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 a8 ea 00 00       	call   c000fc25 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 f1 02 c0    	mov    edi,DWORD PTR ds:0xc002f100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 f1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 f1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 f1 02 c0 	lea    edx,[eax*8-0x3ffd0ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f140
c00012e5:	81 fb 34 f1 02 c0    	cmp    ebx,0xc002f134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 f1 02 c0       	cmp    eax,0xc002f134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 f1 02 c0    	cmp    DWORD PTR ds:0xc002f130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c0001321:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c0001326:	a3 30 f1 02 c0       	mov    ds:0xc002f130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 f1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002f134
c0001334:	c7 40 0c 34 f1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002f134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 f1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002f134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 f0 02 c0 	lea    ebp,[edx*4-0x3ffd0f08]
c0001385:	8b 14 95 00 f1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 f1 02 c0 	lea    ecx,[edx*4-0x3ffd0f00]
c00013a0:	8b 14 95 00 f1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 f4 02 c0 	or     DWORD PTR [edi*4-0x3ffd0bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 f1 02 c0 	lea    eax,[eax*8-0x3ffd0ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,ecx
c000145a:	89 0d 40 f1 02 c0    	mov    DWORD PTR ds:0xc002f140,ecx
c0001460:	c7 41 08 34 f1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002f134
c0001467:	c7 41 0c 34 f1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002f134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c f1 02 c0 	lea    edx,[ecx*8-0x3ffd0ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 f4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 f4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c f1 02 c0 	lea    edx,[eax*4-0x3ffd0ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 f4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,edi
c000152d:	89 3d 40 f1 02 c0    	mov    DWORD PTR ds:0xc002f140,edi
c0001533:	c7 47 08 34 f1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002f134
c000153a:	c7 47 0c 34 f1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002f134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 f1 02 c0    	mov    DWORD PTR ds:0xc002f130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c f1 02 c0       	mov    eax,ds:0xc002f12c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c f1 02 c0    	mov    DWORD PTR ds:0xc002f12c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 f1 02 c0       	mov    edx,0xc002f100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 f4 02 c0    	mov    DWORD PTR ds:0xc002f454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c f1 02 c0    	cmp    DWORD PTR ds:0xc002f12c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c f1 02 c0    	mov    DWORD PTR ds:0xc002f12c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c f4 02 c0    	push   DWORD PTR ds:0xc002f45c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c f4 02 c0       	mov    eax,ds:0xc002f45c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c f1 02 c0 00 	cmp    DWORD PTR ds:0xc002f12c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c f1 02 c0       	mov    eax,ds:0xc002f12c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 f1 02 c0       	mov    eax,0xc002f134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c f4 02 c0       	cmp    eax,0xc002f42c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 f4 02 c0       	mov    eax,ds:0xc002f468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 f1 02 c0       	mov    eax,0xc002f100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 e4 75 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8a1c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 f1 02 c0       	mov    eax,ds:0xc002f100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 f1 02 c0       	mov    ds:0xc002f100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 f4 02 c0    	mov    DWORD PTR ds:0xc002f444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 f4 02 c0    	mov    DWORD PTR ds:0xc002f448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c f4 02 c0    	mov    DWORD PTR ds:0xc002f44c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 f4 02 c0    	mov    DWORD PTR ds:0xc002f454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 20 55 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcaae0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 79 ad 01 00       	jmp    c001cd04 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 20 55 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcaae0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 a3 ad 01 00       	jmp    c001cd44 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 20 55 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcaae0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 c4 ad 01 00       	jmp    c001cd84 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 40 77 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd88c0]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 40 77 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd88c0]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 24 a6 02 c0       	mov    edx,0xc002a624
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba fc 75 02 c0       	mov    edx,0xc00275fc
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 f4 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd0b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 f4 02 c0    	mov    ax,ds:0xc002f480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 f4 02 c0    	mov    ds:0xc002f480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 02 76 02 c0       	mov    eax,0xc0027602
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf c0 76 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd8940]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 0b 76 02 c0       	mov    eax,0xc002760b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 40 77 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd88c0]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 f4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 90 76 02 c0       	mov    eax,0xc0027690
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 80 76 02 c0       	mov    ebx,0xc0027680
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 60 76 02 c0       	mov    eax,0xc0027660
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 70 76 02 c0       	mov    eax,0xc0027670
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 12 76 02 c0       	mov    edx,0xc0027612
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 1e 76 02 c0       	mov    edx,0xc002761e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 32 76 02 c0       	mov    edx,0xc0027632
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 24 9f 00 00       	call   c000fd3b <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 1c 9f 00 00       	call   c000fd4b <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 60 7a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0027a60
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 60 7a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027a60
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 60 78 02 c0       	mov    eax,0xc0027860
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 a0 77 02 c0       	mov    eax,0xc00277a0
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 60 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88a0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 60 7b 02 c0       	push   0xc0027b60
c0006303:	e8 98 73 01 00       	call   c001d6a0 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 6e 7b 02 c0       	push   0xc0027b6e
c000633b:	e8 60 73 01 00       	call   c001d6a0 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 f5 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd0a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 f0 02 c0 	movsx  eax,BYTE PTR ds:0xc002f060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 c9 72 01 00       	call   c001d644 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 f0 02 c0       	mov    eax,0xc002f080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 f0 02 c0       	mov    eax,0xc002f020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 fe 02 c0 00 	cmp    DWORD PTR ds:0xc002feb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 f0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 fe 02 c0    	mov    ebp,DWORD PTR ds:0xc002feb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 7d 7b 02 c0       	push   0xc0027b7d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 fe 02 c0       	mov    ecx,0xc002fe80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 f5 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd0ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 f5 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd0ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 f5 02 c0    	mov    DWORD PTR [edi-0x3ffd0abc],esi
c0006746:	89 87 40 f5 02 c0    	mov    DWORD PTR [edi-0x3ffd0ac0],eax
c000674c:	c7 87 48 f5 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd0ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 f5 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd0a30],0x0
c0006768:	89 87 4c f5 02 c0    	mov    DWORD PTR [edi-0x3ffd0ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 f5 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd0ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 f5 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd0ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 f5 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd0a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 f5 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd0ab8]
c00067e1:	8b 8d 4c f5 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd0ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 f5 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd0ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 f0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 f5 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd0ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 f5 02 c0    	add    DWORD PTR [ebp-0x3ffd0ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 f5 02 c0    	lea    ecx,[ebp-0x3ffd0ac0]
c00068d9:	83 bd 40 f5 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd0ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c f5 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd0ab4]
c0006917:	05 40 f5 02 c0       	add    eax,0xc002f540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 f5 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd0ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 f5 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd0ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 f5 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd0a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 f5 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd0ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 f5 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd0ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 f5 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd0a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c f5 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd0ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 f5 02 c0    	lea    edi,[eax-0x3ffd0ac0]
c00069d6:	83 b8 40 f5 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd0ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 80 7b 02 c0       	push   0xc0027b80
c00069fa:	e8 a1 6c 01 00       	call   c001d6a0 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 b5 6c 01 00       	call   c001d6bc <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 85 7b 02 c0 	mov    DWORD PTR [esp],0xc0027b85
c0006a14:	e8 87 6c 01 00       	call   c001d6a0 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 f5 02 c0    	push   DWORD PTR [ebx-0x3ffd0ac0]
c0006a20:	e8 97 6c 01 00       	call   c001d6bc <iso_kprintfd>
c0006a25:	c7 04 24 8b 7b 02 c0 	mov    DWORD PTR [esp],0xc0027b8b
c0006a2c:	e8 6f 6c 01 00       	call   c001d6a0 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 f5 02 c0    	push   DWORD PTR [ebx-0x3ffd0abc]
c0006a38:	e8 7f 6c 01 00       	call   c001d6bc <iso_kprintfd>
c0006a3d:	c7 04 24 91 7b 02 c0 	mov    DWORD PTR [esp],0xc0027b91
c0006a44:	e8 57 6c 01 00       	call   c001d6a0 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 f5 02 c0    	push   DWORD PTR [ebx-0x3ffd0a30]
c0006a50:	e8 67 6c 01 00       	call   c001d6bc <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 f0 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd0f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 f5 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd0ab8]
c0006ab6:	81 c2 40 f5 02 c0    	add    edx,0xc002f540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 f0 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd0f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 f5 02 c0    	lea    ebp,[eax-0x3ffd0aa8]
c0006b12:	83 3d b4 fe 02 c0 00 	cmp    DWORD PTR ds:0xc002feb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 f5 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd0aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 7d 7b 02 c0       	push   0xc0027b7d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 f5 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd0aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 f5 02 c0    	mov    DWORD PTR [ebx-0x3ffd0ab0],eax
c0006bee:	89 93 54 f5 02 c0    	mov    DWORD PTR [ebx-0x3ffd0aac],edx
c0006bf4:	81 c3 40 f5 02 c0    	add    ebx,0xc002f540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 f5 02 c0       	add    eax,0xc002f550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 9a 7b 02 c0       	push   0xc0027b9a
c0006c19:	e8 82 6a 01 00       	call   c001d6a0 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 f0 02 c0       	mov    ds:0xc002f060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 fe 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002feb4,0x0
c0006c4e:	a1 ac fe 02 c0       	mov    eax,ds:0xc002feac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 f0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 a5 7b 02 c0       	push   0xc0027ba5
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 f0 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd0f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 fe 02 c0       	mov    ds:0xc002feb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 fe 02 c0 00 	cmp    DWORD PTR ds:0xc002feb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac fe 02 c0       	mov    eax,ds:0xc002feac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 f0 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd0f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 ac 7b 02 c0       	push   0xc0027bac
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 f0 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd0f80]
c0006cec:	bf 80 fe 02 c0       	mov    edi,0xc002fe80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 fe 02 c0       	mov    eax,0xc002fe82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 fe 02 c0       	mov    ds:0xc002fea8,eax
c0006d0f:	b8 8a fe 02 c0       	mov    eax,0xc002fe8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 fe 02 c0       	mov    ds:0xc002fea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 b3 7b 02 c0       	push   0xc0027bb3
c0006d30:	e8 6b 69 01 00       	call   c001d6a0 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 be 7b 02 c0       	push   0xc0027bbe
c0006d4b:	e8 50 69 01 00       	call   c001d6a0 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 f5 02 c0       	push   0xc002f540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 f5 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc002f540,0xffffffff
c0006d75:	e8 c1 8f 00 00       	call   c000fd3b <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 fe 02 c0       	mov    ds:0xc002feb0,eax
c0006d86:	e8 b0 8f 00 00       	call   c000fd3b <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 f5 02 c0       	mov    ds:0xc002f520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 9b 8f 00 00       	call   c000fd3b <malloc>
c0006da0:	89 04 9d 80 f0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 82 8f 00 00       	call   c000fd3b <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 f0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 f0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd0f80]
c0006de6:	e8 60 8f 00 00       	call   c000fd4b <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 f0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd0fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 52 8f 00 00       	call   c000fd4b <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 fe 02 c0       	mov    eax,ds:0xc002feb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 38 8f 00 00       	call   c000fd4b <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 f5 02 c0       	mov    eax,ds:0xc002f520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 23 8f 00 00       	call   c000fd4b <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f520,0x0
c0006e35:	c7 05 b0 fe 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002feb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be d0 7b 02 c0       	mov    esi,0xc0027bd0
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 cf 7b 02 c0       	mov    al,ds:0xc0027bcf
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	53                   	push   ebx
c0006ee7:	83 ec 14             	sub    esp,0x14
c0006eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006eee:	6a 10                	push   0x10
c0006ef0:	e8 67 68 00 00       	call   c000d75c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006ef5:	83 c4 10             	add    esp,0x10
c0006ef8:	84 c0                	test   al,al
c0006efa:	75 12                	jne    c0006f0e <Dbg::logc(char)+0x28>
c0006efc:	ba fd 03 00 00       	mov    edx,0x3fd
c0006f01:	ec                   	in     al,dx
c0006f02:	a8 20                	test   al,0x20
c0006f04:	74 fb                	je     c0006f01 <Dbg::logc(char)+0x1b>
c0006f06:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f0b:	88 d8                	mov    al,bl
c0006f0d:	ee                   	out    dx,al
c0006f0e:	83 c4 08             	add    esp,0x8
c0006f11:	5b                   	pop    ebx
c0006f12:	c3                   	ret    

c0006f13 <Dbg::logs(char*)>:
c0006f13:	53                   	push   ebx
c0006f14:	83 ec 08             	sub    esp,0x8
c0006f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	74 16                	je     c0006f38 <Dbg::logs(char*)+0x25>
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	83 c3 01             	add    ebx,0x1
c0006f28:	50                   	push   eax
c0006f29:	e8 b8 ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f2e:	83 c4 10             	add    esp,0x10
c0006f31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f34:	85 c0                	test   eax,eax
c0006f36:	75 ea                	jne    c0006f22 <Dbg::logs(char*)+0xf>
c0006f38:	83 c4 08             	add    esp,0x8
c0006f3b:	5b                   	pop    ebx
c0006f3c:	c3                   	ret    

c0006f3d <Dbg::logWriteInt(unsigned int)>:
c0006f3d:	83 ec 1c             	sub    esp,0x1c
c0006f40:	6a 0a                	push   0xa
c0006f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f46:	50                   	push   eax
c0006f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f4b:	50                   	push   eax
c0006f4c:	e8 f5 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f51:	50                   	push   eax
c0006f52:	e8 bc ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f57:	83 c4 2c             	add    esp,0x2c
c0006f5a:	c3                   	ret    

c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f5b:	83 ec 1c             	sub    esp,0x1c
c0006f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f62:	50                   	push   eax
c0006f63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f67:	50                   	push   eax
c0006f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f6c:	52                   	push   edx
c0006f6d:	e8 d4 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f72:	50                   	push   eax
c0006f73:	e8 9b ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f78:	83 c4 2c             	add    esp,0x2c
c0006f7b:	c3                   	ret    

c0006f7c <Dbg::kprintf(char const*, ...)>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 1c             	sub    esp,0x1c
c0006f83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f87:	85 db                	test   ebx,ebx
c0006f89:	0f 84 4c 01 00 00    	je     c00070db <Dbg::kprintf(char const*, ...)+0x15f>
c0006f8f:	83 ec 0c             	sub    esp,0xc
c0006f92:	6a 10                	push   0x10
c0006f94:	e8 c3 67 00 00       	call   c000d75c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f99:	83 c4 10             	add    esp,0x10
c0006f9c:	84 c0                	test   al,al
c0006f9e:	74 08                	je     c0006fa8 <Dbg::kprintf(char const*, ...)+0x2c>
c0006fa0:	83 c4 1c             	add    esp,0x1c
c0006fa3:	5b                   	pop    ebx
c0006fa4:	5e                   	pop    esi
c0006fa5:	5f                   	pop    edi
c0006fa6:	5d                   	pop    ebp
c0006fa7:	c3                   	ret    
c0006fa8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006fac:	31 ff                	xor    edi,edi
c0006fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fb5:	85 c0                	test   eax,eax
c0006fb7:	74 e7                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0006fb9:	8d 77 01             	lea    esi,[edi+0x1]
c0006fbc:	83 f8 25             	cmp    eax,0x25
c0006fbf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fc2:	75 4c                	jne    c0007010 <Dbg::kprintf(char const*, ...)+0x94>
c0006fc4:	83 c7 02             	add    edi,0x2
c0006fc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fca:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fcd:	83 e8 25             	sub    eax,0x25
c0006fd0:	0f b6 c0             	movzx  eax,al
c0006fd3:	83 f8 53             	cmp    eax,0x53
c0006fd6:	0f 87 e1 00 00 00    	ja     c00070bd <Dbg::kprintf(char const*, ...)+0x141>
c0006fdc:	ff 24 85 18 7c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd83e8]
c0006fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fe7:	83 ec 0c             	sub    esp,0xc
c0006fea:	89 c8                	mov    eax,ecx
c0006fec:	83 c1 04             	add    ecx,0x4
c0006fef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ff5:	50                   	push   eax
c0006ff6:	e8 42 ff ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0006ffb:	83 c4 10             	add    esp,0x10
c0006ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007001:	85 c0                	test   eax,eax
c0007003:	74 9b                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0007005:	8d 77 01             	lea    esi,[edi+0x1]
c0007008:	83 f8 25             	cmp    eax,0x25
c000700b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000700e:	74 b4                	je     c0006fc4 <Dbg::kprintf(char const*, ...)+0x48>
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 f7                	mov    edi,esi
c0007015:	50                   	push   eax
c0007016:	89 ee                	mov    esi,ebp
c0007018:	e8 c9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	eb dc                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c0007022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007026:	83 ec 0c             	sub    esp,0xc
c0007029:	89 c8                	mov    eax,ecx
c000702b:	83 c1 04             	add    ecx,0x4
c000702e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007030:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007034:	55                   	push   ebp
c0007035:	e8 d9 fe ff ff       	call   c0006f13 <Dbg::logs(char*)>
c000703a:	83 c4 10             	add    esp,0x10
c000703d:	eb bf                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	89 d0                	mov    eax,edx
c0007048:	83 c2 04             	add    edx,0x4
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007051:	51                   	push   ecx
c0007052:	e8 e6 fe ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	eb a2                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000705c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007060:	83 ec 0c             	sub    esp,0xc
c0007063:	89 d0                	mov    eax,edx
c0007065:	83 c2 04             	add    edx,0x4
c0007068:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000706b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000706f:	50                   	push   eax
c0007070:	e8 71 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007075:	83 c4 10             	add    esp,0x10
c0007078:	eb 84                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000707a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707e:	89 c8                	mov    eax,ecx
c0007080:	83 c1 04             	add    ecx,0x4
c0007083:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	6a 10                	push   0x10
c000708c:	8b 10                	mov    edx,DWORD PTR [eax]
c000708e:	52                   	push   edx
c000708f:	e8 c7 fe ff ff       	call   c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	e9 62 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000709c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070a0:	89 d0                	mov    eax,edx
c00070a2:	83 c2 08             	add    edx,0x8
c00070a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a9:	eb dc                	jmp    c0007087 <Dbg::kprintf(char const*, ...)+0x10b>
c00070ab:	83 ec 0c             	sub    esp,0xc
c00070ae:	6a 25                	push   0x25
c00070b0:	e8 31 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b5:	83 c4 10             	add    esp,0x10
c00070b8:	e9 41 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 25                	push   0x25
c00070c2:	e8 1f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ce:	e8 13 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	e9 23 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070db:	83 ec 0c             	sub    esp,0xc
c00070de:	68 e0 7b 02 c0       	push   0xc0027be0
c00070e3:	e8 94 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00070e8:	83 c4 10             	add    esp,0x10
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	5b                   	pop    ebx
c00070ef:	5e                   	pop    esi
c00070f0:	5f                   	pop    edi
c00070f1:	5d                   	pop    ebp
c00070f2:	c3                   	ret    
c00070f3:	90                   	nop

c00070f4 <KiUbsanPrintDetails(char const*, void*)>:
c00070f4:	83 ec 1c             	sub    esp,0x1c
c00070f7:	83 ec 08             	sub    esp,0x8
c00070fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070fe:	68 68 7d 02 c0       	push   0xc0027d68
c0007103:	e8 74 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007108:	83 c4 10             	add    esp,0x10
c000710b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000710f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007117:	8b 00                	mov    eax,DWORD PTR [eax]
c0007119:	83 ec 08             	sub    esp,0x8
c000711c:	50                   	push   eax
c000711d:	68 7c 7d 02 c0       	push   0xc0027d7c
c0007122:	e8 55 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007131:	83 ec 08             	sub    esp,0x8
c0007134:	50                   	push   eax
c0007135:	68 86 7d 02 c0       	push   0xc0027d86
c000713a:	e8 3d fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000713f:	83 c4 10             	add    esp,0x10
c0007142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007149:	83 ec 08             	sub    esp,0x8
c000714c:	50                   	push   eax
c000714d:	68 90 7d 02 c0       	push   0xc0027d90
c0007152:	e8 25 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007157:	83 c4 10             	add    esp,0x10
c000715a:	90                   	nop
c000715b:	83 c4 1c             	add    esp,0x1c
c000715e:	c3                   	ret    
c000715f:	90                   	nop

c0007160 <__ubsan_handle_type_mismatch_v1>:
c0007160:	83 ec 0c             	sub    esp,0xc
c0007163:	83 ec 08             	sub    esp,0x8
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	68 d4 7e 02 c0       	push   0xc0027ed4
c000716f:	e8 80 ff ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007174:	83 c4 10             	add    esp,0x10
c0007177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000717c:	75 16                	jne    c0007194 <__ubsan_handle_type_mismatch_v1+0x34>
c000717e:	83 ec 0c             	sub    esp,0xc
c0007181:	68 9a 7d 02 c0       	push   0xc0027d9a
c0007186:	e8 f1 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000718b:	83 c4 10             	add    esp,0x10
c000718e:	e9 91 00 00 00       	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007193:	90                   	nop
c0007194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000719b:	85 c0                	test   eax,eax
c000719d:	74 29                	je     c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c000719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00071a6:	83 e8 01             	sub    eax,0x1
c00071a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00071ad:	75 19                	jne    c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00071af:	83 ec 08             	sub    esp,0x8
c00071b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071b6:	68 f4 7e 02 c0       	push   0xc0027ef4
c00071bb:	e8 bc fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071c0:	83 c4 10             	add    esp,0x10
c00071c3:	eb 5f                	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071c5:	8d 76 00             	lea    esi,[esi+0x0]
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	68 af 7d 02 c0       	push   0xc0027daf
c00071d0:	e8 a7 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071df:	0f b6 c0             	movzx  eax,al
c00071e2:	83 ec 08             	sub    esp,0x8
c00071e5:	50                   	push   eax
c00071e6:	68 c9 7d 02 c0       	push   0xc0027dc9
c00071eb:	e8 8c fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007208:	0f b6 c0             	movzx  eax,al
c000720b:	8b 04 85 00 bf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4100]
c0007212:	51                   	push   ecx
c0007213:	52                   	push   edx
c0007214:	50                   	push   eax
c0007215:	68 1c 7f 02 c0       	push   0xc0027f1c
c000721a:	e8 5d fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	66 90                	xchg   ax,ax
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	68 d4 7e 02 c0       	push   0xc0027ed4
c000722c:	e8 5f 8f 00 00       	call   c0010190 <KePanic(char const*)>
c0007231:	83 c4 10             	add    esp,0x10
c0007234:	90                   	nop
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	c3                   	ret    
c0007239:	8d 76 00             	lea    esi,[esi+0x0]

c000723c <__ubsan_handle_pointer_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 64 7f 02 c0       	push   0xc0027f64
c000724b:	e8 a4 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 64 7f 02 c0       	push   0xc0027f64
c000725b:	e8 30 8f 00 00       	call   c0010190 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_out_of_bounds>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 d4 7d 02 c0       	push   0xc0027dd4
c0007277:	e8 78 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 d4 7d 02 c0       	push   0xc0027dd4
c0007287:	e8 04 8f 00 00       	call   c0010190 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_add_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 f1 7d 02 c0       	push   0xc0027df1
c00072a3:	e8 4c fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 f1 7d 02 c0       	push   0xc0027df1
c00072b3:	e8 d8 8e 00 00       	call   c0010190 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_load_invalid_value>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 84 7f 02 c0       	push   0xc0027f84
c00072cf:	e8 20 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 84 7f 02 c0       	push   0xc0027f84
c00072df:	e8 ac 8e 00 00       	call   c0010190 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_divrem_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 a8 7f 02 c0       	push   0xc0027fa8
c00072fb:	e8 f4 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 a8 7f 02 c0       	push   0xc0027fa8
c000730b:	e8 80 8e 00 00       	call   c0010190 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_mul_overflow>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 0d 7e 02 c0       	push   0xc0027e0d
c0007327:	e8 c8 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 0d 7e 02 c0       	push   0xc0027e0d
c0007337:	e8 54 8e 00 00       	call   c0010190 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_sub_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 29 7e 02 c0       	push   0xc0027e29
c0007353:	e8 9c fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 29 7e 02 c0       	push   0xc0027e29
c0007363:	e8 28 8e 00 00       	call   c0010190 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <__ubsan_handle_shift_out_of_bounds>:
c0007370:	83 ec 0c             	sub    esp,0xc
c0007373:	83 ec 08             	sub    esp,0x8
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	68 c8 7f 02 c0       	push   0xc0027fc8
c000737f:	e8 70 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007384:	83 c4 10             	add    esp,0x10
c0007387:	83 ec 0c             	sub    esp,0xc
c000738a:	68 c8 7f 02 c0       	push   0xc0027fc8
c000738f:	e8 fc 8d 00 00       	call   c0010190 <KePanic(char const*)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	90                   	nop
c0007398:	83 c4 0c             	add    esp,0xc
c000739b:	c3                   	ret    

c000739c <__ubsan_handle_negate_overflow>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	83 ec 08             	sub    esp,0x8
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	68 ec 7f 02 c0       	push   0xc0027fec
c00073ab:	e8 44 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00073b0:	83 c4 10             	add    esp,0x10
c00073b3:	83 ec 0c             	sub    esp,0xc
c00073b6:	68 ec 7f 02 c0       	push   0xc0027fec
c00073bb:	e8 d0 8d 00 00       	call   c0010190 <KePanic(char const*)>
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	90                   	nop
c00073c4:	83 c4 0c             	add    esp,0xc
c00073c7:	c3                   	ret    

c00073c8 <Hardware::registerIRQ(int)>:
c00073c8:	53                   	push   ebx
c00073c9:	31 c9                	xor    ecx,ecx
c00073cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073cf:	0f b6 42 50          	movzx  eax,BYTE PTR [edx+0x50]
c00073d3:	89 c3                	mov    ebx,eax
c00073d5:	0f a3 c8             	bt     eax,ecx
c00073d8:	72 16                	jb     c00073f0 <Hardware::registerIRQ(int)+0x28>
c00073da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00073de:	89 44 8a 40          	mov    DWORD PTR [edx+ecx*4+0x40],eax
c00073e2:	b8 01 00 00 00       	mov    eax,0x1
c00073e7:	d3 e0                	shl    eax,cl
c00073e9:	09 d8                	or     eax,ebx
c00073eb:	88 42 50             	mov    BYTE PTR [edx+0x50],al
c00073ee:	eb 06                	jmp    c00073f6 <Hardware::registerIRQ(int)+0x2e>
c00073f0:	41                   	inc    ecx
c00073f1:	83 f9 04             	cmp    ecx,0x4
c00073f4:	75 df                	jne    c00073d5 <Hardware::registerIRQ(int)+0xd>
c00073f6:	5b                   	pop    ebx
c00073f7:	c3                   	ret    

c00073f8 <Hardware::deregisterIRQ(int)>:
c00073f8:	56                   	push   esi
c00073f9:	31 c9                	xor    ecx,ecx
c00073fb:	53                   	push   ebx
c00073fc:	bb 01 00 00 00       	mov    ebx,0x1
c0007401:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007409:	39 44 8a 40          	cmp    DWORD PTR [edx+ecx*4+0x40],eax
c000740d:	75 0e                	jne    c000741d <Hardware::deregisterIRQ(int)+0x25>
c000740f:	8b 72 50             	mov    esi,DWORD PTR [edx+0x50]
c0007412:	89 d8                	mov    eax,ebx
c0007414:	d3 e0                	shl    eax,cl
c0007416:	f7 d0                	not    eax
c0007418:	21 f0                	and    eax,esi
c000741a:	88 42 50             	mov    BYTE PTR [edx+0x50],al
c000741d:	41                   	inc    ecx
c000741e:	83 f9 04             	cmp    ecx,0x4
c0007421:	75 e2                	jne    c0007405 <Hardware::deregisterIRQ(int)+0xd>
c0007423:	5b                   	pop    ebx
c0007424:	5e                   	pop    esi
c0007425:	c3                   	ret    

c0007426 <Hardware::setHumanReadableName(char const*)>:
c0007426:	83 44 24 04 51       	add    DWORD PTR [esp+0x4],0x51
c000742b:	e9 10 92 ff ff       	jmp    c0000640 <strcpy>

c0007430 <Hardware::~Hardware()>:
c0007430:	83 ec 0c             	sub    esp,0xc
c0007433:	ba 44 80 02 c0       	mov    edx,0xc0028044
c0007438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000743c:	89 10                	mov    DWORD PTR [eax],edx
c000743e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007442:	83 c0 2c             	add    eax,0x2c
c0007445:	83 ec 0c             	sub    esp,0xc
c0007448:	50                   	push   eax
c0007449:	e8 b8 ea 01 00       	call   c0025f06 <std::vector<DevicePortRange>::~vector()>
c000744e:	83 c4 10             	add    esp,0x10
c0007451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007455:	83 c0 18             	add    eax,0x18
c0007458:	83 ec 0c             	sub    esp,0xc
c000745b:	50                   	push   eax
c000745c:	e8 73 ea 01 00       	call   c0025ed4 <std::vector<DeviceMemoryRange>::~vector()>
c0007461:	83 c4 10             	add    esp,0x10
c0007464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007468:	83 c0 04             	add    eax,0x4
c000746b:	83 ec 0c             	sub    esp,0xc
c000746e:	50                   	push   eax
c000746f:	e8 2e ea 01 00       	call   c0025ea2 <std::vector<Hardware*>::~vector()>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	90                   	nop
c0007478:	83 c4 0c             	add    esp,0xc
c000747b:	c3                   	ret    

c000747c <Hardware::~Hardware()>:
c000747c:	83 ec 0c             	sub    esp,0xc
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007486:	e8 a5 ff ff ff       	call   c0007430 <Hardware::~Hardware()>
c000748b:	83 c4 10             	add    esp,0x10
c000748e:	83 ec 08             	sub    esp,0x8
c0007491:	68 d4 00 00 00       	push   0xd4
c0007496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000749a:	e8 b5 63 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000749f:	83 c4 10             	add    esp,0x10
c00074a2:	83 c4 0c             	add    esp,0xc
c00074a5:	c3                   	ret    

c00074a6 <Hardware::Hardware()>:
c00074a6:	83 ec 0c             	sub    esp,0xc
c00074a9:	ba 44 80 02 c0       	mov    edx,0xc0028044
c00074ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074b2:	89 10                	mov    DWORD PTR [eax],edx
c00074b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074b8:	83 c0 04             	add    eax,0x4
c00074bb:	83 ec 0c             	sub    esp,0xc
c00074be:	50                   	push   eax
c00074bf:	e8 84 ea 01 00       	call   c0025f48 <std::vector<Hardware*>::vector()>
c00074c4:	83 c4 10             	add    esp,0x10
c00074c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074cb:	83 c0 18             	add    eax,0x18
c00074ce:	83 ec 0c             	sub    esp,0xc
c00074d1:	50                   	push   eax
c00074d2:	e8 e7 ea 01 00       	call   c0025fbe <std::vector<DeviceMemoryRange>::vector()>
c00074d7:	83 c4 10             	add    esp,0x10
c00074da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074de:	83 c0 2c             	add    eax,0x2c
c00074e1:	83 ec 0c             	sub    esp,0xc
c00074e4:	50                   	push   eax
c00074e5:	e8 4a eb 01 00       	call   c0026034 <std::vector<DevicePortRange>::vector()>
c00074ea:	83 c4 10             	add    esp,0x10
c00074ed:	90                   	nop
c00074ee:	83 c4 0c             	add    esp,0xc
c00074f1:	c3                   	ret    

c00074f2 <Hardware::Hardware(BuiltinDriver)>:
c00074f2:	83 ec 0c             	sub    esp,0xc
c00074f5:	ba 44 80 02 c0       	mov    edx,0xc0028044
c00074fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074fe:	89 10                	mov    DWORD PTR [eax],edx
c0007500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007504:	83 c0 04             	add    eax,0x4
c0007507:	83 ec 0c             	sub    esp,0xc
c000750a:	50                   	push   eax
c000750b:	e8 38 ea 01 00       	call   c0025f48 <std::vector<Hardware*>::vector()>
c0007510:	83 c4 10             	add    esp,0x10
c0007513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007517:	83 c0 18             	add    eax,0x18
c000751a:	83 ec 0c             	sub    esp,0xc
c000751d:	50                   	push   eax
c000751e:	e8 9b ea 01 00       	call   c0025fbe <std::vector<DeviceMemoryRange>::vector()>
c0007523:	83 c4 10             	add    esp,0x10
c0007526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000752a:	83 c0 2c             	add    eax,0x2c
c000752d:	83 ec 0c             	sub    esp,0xc
c0007530:	50                   	push   eax
c0007531:	e8 fe ea 01 00       	call   c0026034 <std::vector<DevicePortRange>::vector()>
c0007536:	83 c4 10             	add    esp,0x10
c0007539:	90                   	nop
c000753a:	83 c4 0c             	add    esp,0xc
c000753d:	c3                   	ret    

c000753e <Hardware::Hardware(char const*)>:
c000753e:	83 ec 0c             	sub    esp,0xc
c0007541:	ba 44 80 02 c0       	mov    edx,0xc0028044
c0007546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000754a:	89 10                	mov    DWORD PTR [eax],edx
c000754c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007550:	83 c0 04             	add    eax,0x4
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	50                   	push   eax
c0007557:	e8 ec e9 01 00       	call   c0025f48 <std::vector<Hardware*>::vector()>
c000755c:	83 c4 10             	add    esp,0x10
c000755f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007563:	83 c0 18             	add    eax,0x18
c0007566:	83 ec 0c             	sub    esp,0xc
c0007569:	50                   	push   eax
c000756a:	e8 4f ea 01 00       	call   c0025fbe <std::vector<DeviceMemoryRange>::vector()>
c000756f:	83 c4 10             	add    esp,0x10
c0007572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007576:	83 c0 2c             	add    eax,0x2c
c0007579:	83 ec 0c             	sub    esp,0xc
c000757c:	50                   	push   eax
c000757d:	e8 b2 ea 01 00       	call   c0026034 <std::vector<DevicePortRange>::vector()>
c0007582:	83 c4 10             	add    esp,0x10
c0007585:	90                   	nop
c0007586:	83 c4 0c             	add    esp,0xc
c0007589:	c3                   	ret    

c000758a <Hardware::detectRecursively()>:
c000758a:	57                   	push   edi
c000758b:	56                   	push   esi
c000758c:	53                   	push   ebx
c000758d:	83 ec 1c             	sub    esp,0x1c
c0007590:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007594:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007596:	53                   	push   ebx
c0007597:	ff 10                	call   DWORD PTR [eax]
c0007599:	83 c4 10             	add    esp,0x10
c000759c:	85 c0                	test   eax,eax
c000759e:	74 0c                	je     c00075ac <Hardware::detectRecursively()+0x22>
c00075a0:	83 ec 0c             	sub    esp,0xc
c00075a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00075a5:	50                   	push   eax
c00075a6:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00075a9:	83 c4 10             	add    esp,0x10
c00075ac:	8d 74 24 04          	lea    esi,[esp+0x4]
c00075b0:	83 c3 04             	add    ebx,0x4
c00075b3:	50                   	push   eax
c00075b4:	50                   	push   eax
c00075b5:	53                   	push   ebx
c00075b6:	56                   	push   esi
c00075b7:	e8 38 eb 01 00       	call   c00260f4 <std::vector<Hardware*>::begin()>
c00075bc:	8d 7c 24 14          	lea    edi,[esp+0x14]
c00075c0:	83 ec 0c             	sub    esp,0xc
c00075c3:	53                   	push   ebx
c00075c4:	57                   	push   edi
c00075c5:	e8 06 eb 01 00       	call   c00260d0 <std::vector<Hardware*>::end()>
c00075ca:	83 c4 1c             	add    esp,0x1c
c00075cd:	50                   	push   eax
c00075ce:	50                   	push   eax
c00075cf:	57                   	push   edi
c00075d0:	56                   	push   esi
c00075d1:	e8 d4 ea 01 00       	call   c00260aa <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00075d6:	83 c4 10             	add    esp,0x10
c00075d9:	84 c0                	test   al,al
c00075db:	74 29                	je     c0007606 <Hardware::detectRecursively()+0x7c>
c00075dd:	83 ec 0c             	sub    esp,0xc
c00075e0:	56                   	push   esi
c00075e1:	e8 d6 ea 01 00       	call   c00260bc <std::vector<Hardware*>::iterator::operator*() const>
c00075e6:	5a                   	pop    edx
c00075e7:	ff 30                	push   DWORD PTR [eax]
c00075e9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00075ed:	e8 98 ff ff ff       	call   c000758a <Hardware::detectRecursively()>
c00075f2:	59                   	pop    ecx
c00075f3:	58                   	pop    eax
c00075f4:	56                   	push   esi
c00075f5:	53                   	push   ebx
c00075f6:	e8 1d eb 01 00       	call   c0026118 <std::vector<Hardware*>::iterator::operator++()>
c00075fb:	53                   	push   ebx
c00075fc:	e8 37 e9 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c0007601:	83 c4 10             	add    esp,0x10
c0007604:	eb c7                	jmp    c00075cd <Hardware::detectRecursively()+0x43>
c0007606:	83 ec 0c             	sub    esp,0xc
c0007609:	57                   	push   edi
c000760a:	e8 29 e9 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c000760f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007612:	e8 21 e9 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c0007617:	83 c4 20             	add    esp,0x20
c000761a:	5b                   	pop    ebx
c000761b:	5e                   	pop    esi
c000761c:	5f                   	pop    edi
c000761d:	c3                   	ret    

c000761e <Hardware::deinitialiseRecursively()>:
c000761e:	55                   	push   ebp
c000761f:	57                   	push   edi
c0007620:	56                   	push   esi
c0007621:	53                   	push   ebx
c0007622:	83 ec 1c             	sub    esp,0x1c
c0007625:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0007629:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c000762d:	8d 6e 04             	lea    ebp,[esi+0x4]
c0007630:	50                   	push   eax
c0007631:	50                   	push   eax
c0007632:	55                   	push   ebp
c0007633:	53                   	push   ebx
c0007634:	e8 bb ea 01 00       	call   c00260f4 <std::vector<Hardware*>::begin()>
c0007639:	8d 7c 24 14          	lea    edi,[esp+0x14]
c000763d:	83 ec 0c             	sub    esp,0xc
c0007640:	55                   	push   ebp
c0007641:	57                   	push   edi
c0007642:	e8 89 ea 01 00       	call   c00260d0 <std::vector<Hardware*>::end()>
c0007647:	83 c4 1c             	add    esp,0x1c
c000764a:	50                   	push   eax
c000764b:	50                   	push   eax
c000764c:	57                   	push   edi
c000764d:	53                   	push   ebx
c000764e:	e8 57 ea 01 00       	call   c00260aa <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	74 29                	je     c0007683 <Hardware::deinitialiseRecursively()+0x65>
c000765a:	83 ec 0c             	sub    esp,0xc
c000765d:	53                   	push   ebx
c000765e:	e8 59 ea 01 00       	call   c00260bc <std::vector<Hardware*>::iterator::operator*() const>
c0007663:	5a                   	pop    edx
c0007664:	ff 30                	push   DWORD PTR [eax]
c0007666:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000766a:	e8 af ff ff ff       	call   c000761e <Hardware::deinitialiseRecursively()>
c000766f:	59                   	pop    ecx
c0007670:	58                   	pop    eax
c0007671:	53                   	push   ebx
c0007672:	55                   	push   ebp
c0007673:	e8 a0 ea 01 00       	call   c0026118 <std::vector<Hardware*>::iterator::operator++()>
c0007678:	55                   	push   ebp
c0007679:	e8 ba e8 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c000767e:	83 c4 10             	add    esp,0x10
c0007681:	eb c7                	jmp    c000764a <Hardware::deinitialiseRecursively()+0x2c>
c0007683:	83 ec 0c             	sub    esp,0xc
c0007686:	57                   	push   edi
c0007687:	e8 ac e8 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c000768c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000768f:	e8 a4 e8 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c0007694:	8b 06                	mov    eax,DWORD PTR [esi]
c0007696:	89 34 24             	mov    DWORD PTR [esp],esi
c0007699:	ff 10                	call   DWORD PTR [eax]
c000769b:	83 c4 10             	add    esp,0x10
c000769e:	85 c0                	test   eax,eax
c00076a0:	74 0c                	je     c00076ae <Hardware::deinitialiseRecursively()+0x90>
c00076a2:	83 ec 0c             	sub    esp,0xc
c00076a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00076a7:	50                   	push   eax
c00076a8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00076ab:	83 c4 10             	add    esp,0x10
c00076ae:	83 c4 1c             	add    esp,0x1c
c00076b1:	5b                   	pop    ebx
c00076b2:	5e                   	pop    esi
c00076b3:	5f                   	pop    edi
c00076b4:	5d                   	pop    ebp
c00076b5:	c3                   	ret    

c00076b6 <Hardware::setPowerStateRecursively(DevicePowerState)>:
c00076b6:	55                   	push   ebp
c00076b7:	57                   	push   edi
c00076b8:	56                   	push   esi
c00076b9:	53                   	push   ebx
c00076ba:	83 ec 1c             	sub    esp,0x1c
c00076bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00076c1:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c00076c5:	8d 7e 04             	lea    edi,[esi+0x4]
c00076c8:	55                   	push   ebp
c00076c9:	55                   	push   ebp
c00076ca:	57                   	push   edi
c00076cb:	53                   	push   ebx
c00076cc:	e8 23 ea 01 00       	call   c00260f4 <std::vector<Hardware*>::begin()>
c00076d1:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00076d5:	83 ec 0c             	sub    esp,0xc
c00076d8:	57                   	push   edi
c00076d9:	55                   	push   ebp
c00076da:	e8 f1 e9 01 00       	call   c00260d0 <std::vector<Hardware*>::end()>
c00076df:	83 c4 1c             	add    esp,0x1c
c00076e2:	51                   	push   ecx
c00076e3:	51                   	push   ecx
c00076e4:	55                   	push   ebp
c00076e5:	53                   	push   ebx
c00076e6:	e8 bf e9 01 00       	call   c00260aa <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00076eb:	83 c4 10             	add    esp,0x10
c00076ee:	84 c0                	test   al,al
c00076f0:	74 2e                	je     c0007720 <Hardware::setPowerStateRecursively(DevicePowerState)+0x6a>
c00076f2:	83 ec 0c             	sub    esp,0xc
c00076f5:	53                   	push   ebx
c00076f6:	e8 c1 e9 01 00       	call   c00260bc <std::vector<Hardware*>::iterator::operator*() const>
c00076fb:	59                   	pop    ecx
c00076fc:	5f                   	pop    edi
c00076fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007701:	ff 30                	push   DWORD PTR [eax]
c0007703:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007707:	e8 aa ff ff ff       	call   c00076b6 <Hardware::setPowerStateRecursively(DevicePowerState)>
c000770c:	58                   	pop    eax
c000770d:	5a                   	pop    edx
c000770e:	53                   	push   ebx
c000770f:	57                   	push   edi
c0007710:	e8 03 ea 01 00       	call   c0026118 <std::vector<Hardware*>::iterator::operator++()>
c0007715:	57                   	push   edi
c0007716:	e8 1d e8 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c000771b:	83 c4 10             	add    esp,0x10
c000771e:	eb c2                	jmp    c00076e2 <Hardware::setPowerStateRecursively(DevicePowerState)+0x2c>
c0007720:	83 ec 0c             	sub    esp,0xc
c0007723:	55                   	push   ebp
c0007724:	e8 0f e8 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c0007729:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000772c:	e8 07 e8 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c0007731:	8b 06                	mov    eax,DWORD PTR [esi]
c0007733:	89 34 24             	mov    DWORD PTR [esp],esi
c0007736:	ff 10                	call   DWORD PTR [eax]
c0007738:	83 c4 10             	add    esp,0x10
c000773b:	85 c0                	test   eax,eax
c000773d:	74 0f                	je     c000774e <Hardware::setPowerStateRecursively(DevicePowerState)+0x98>
c000773f:	52                   	push   edx
c0007740:	52                   	push   edx
c0007741:	8b 10                	mov    edx,DWORD PTR [eax]
c0007743:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007747:	50                   	push   eax
c0007748:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000774b:	83 c4 10             	add    esp,0x10
c000774e:	83 c4 1c             	add    esp,0x1c
c0007751:	5b                   	pop    ebx
c0007752:	5e                   	pop    esi
c0007753:	5f                   	pop    edi
c0007754:	5d                   	pop    ebp
c0007755:	c3                   	ret    

c0007756 <Hardware::addChild(Hardware*)>:
c0007756:	83 ec 14             	sub    esp,0x14
c0007759:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000775d:	50                   	push   eax
c000775e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007762:	83 c0 04             	add    eax,0x4
c0007765:	50                   	push   eax
c0007766:	e8 87 ed 01 00       	call   c00264f2 <std::vector<Hardware*>::push_back(Hardware* const&)>
c000776b:	83 c4 1c             	add    esp,0x1c
c000776e:	c3                   	ret    
c000776f:	90                   	nop

c0007770 <Hardware::removeChild(Hardware*)>:
c0007770:	55                   	push   ebp
c0007771:	57                   	push   edi
c0007772:	56                   	push   esi
c0007773:	53                   	push   ebx
c0007774:	83 ec 2c             	sub    esp,0x2c
c0007777:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000777b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000777f:	8d 58 04             	lea    ebx,[eax+0x4]
c0007782:	50                   	push   eax
c0007783:	50                   	push   eax
c0007784:	53                   	push   ebx
c0007785:	56                   	push   esi
c0007786:	e8 45 e9 01 00       	call   c00260d0 <std::vector<Hardware*>::end()>
c000778b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000778f:	83 ec 0c             	sub    esp,0xc
c0007792:	53                   	push   ebx
c0007793:	57                   	push   edi
c0007794:	e8 37 e9 01 00       	call   c00260d0 <std::vector<Hardware*>::end()>
c0007799:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000779d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00077a0:	55                   	push   ebp
c00077a1:	e8 4e e9 01 00       	call   c00260f4 <std::vector<Hardware*>::begin()>
c00077a6:	8d 44 24 30          	lea    eax,[esp+0x30]
c00077aa:	83 c4 1c             	add    esp,0x1c
c00077ad:	8d 54 24 44          	lea    edx,[esp+0x44]
c00077b1:	52                   	push   edx
c00077b2:	57                   	push   edi
c00077b3:	55                   	push   ebp
c00077b4:	50                   	push   eax
c00077b5:	e8 67 ea 01 00       	call   c0026221 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c00077ba:	8d 54 24 28          	lea    edx,[esp+0x28]
c00077be:	83 c4 0c             	add    esp,0xc
c00077c1:	56                   	push   esi
c00077c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00077c6:	50                   	push   eax
c00077c7:	53                   	push   ebx
c00077c8:	52                   	push   edx
c00077c9:	e8 ae ed 01 00       	call   c002657c <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>
c00077ce:	8d 54 24 28          	lea    edx,[esp+0x28]
c00077d2:	52                   	push   edx
c00077d3:	e8 60 e7 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c00077d8:	5a                   	pop    edx
c00077d9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00077dd:	50                   	push   eax
c00077de:	e8 55 e7 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c00077e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00077e6:	e8 4d e7 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c00077eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00077ee:	e8 45 e7 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c00077f3:	89 34 24             	mov    DWORD PTR [esp],esi
c00077f6:	e8 3d e7 01 00       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c00077fb:	83 c4 3c             	add    esp,0x3c
c00077fe:	5b                   	pop    ebx
c00077ff:	5e                   	pop    esi
c0007800:	5f                   	pop    edi
c0007801:	5d                   	pop    ebp
c0007802:	c3                   	ret    
c0007803:	90                   	nop

c0007804 <Hardware::registerMemoryRange(unsigned long, unsigned long)>:
c0007804:	83 ec 24             	sub    esp,0x24
c0007807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000780b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000780f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007813:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007817:	8d 44 24 10          	lea    eax,[esp+0x10]
c000781b:	50                   	push   eax
c000781c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007820:	83 c0 18             	add    eax,0x18
c0007823:	50                   	push   eax
c0007824:	e8 ed ef 01 00       	call   c0026816 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>
c0007829:	83 c4 2c             	add    esp,0x2c
c000782c:	c3                   	ret    
c000782d:	90                   	nop

c000782e <Hardware::registerPortRange(unsigned short, unsigned char, int)>:
c000782e:	53                   	push   ebx
c000782f:	83 ec 18             	sub    esp,0x18
c0007832:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007836:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000783a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000783e:	83 fa 02             	cmp    edx,0x2
c0007841:	74 25                	je     c0007868 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x3a>
c0007843:	7f 05                	jg     c000784a <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x1c>
c0007845:	31 c0                	xor    eax,eax
c0007847:	4a                   	dec    edx
c0007848:	eb 0d                	jmp    c0007857 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x29>
c000784a:	83 fa 04             	cmp    edx,0x4
c000784d:	74 20                	je     c000786f <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x41>
c000784f:	b8 03 00 00 00       	mov    eax,0x3
c0007854:	83 fa 08             	cmp    edx,0x8
c0007857:	74 1b                	je     c0007874 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x46>
c0007859:	83 ec 0c             	sub    esp,0xc
c000785c:	68 0b 80 02 c0       	push   0xc002800b
c0007861:	e8 2a 89 00 00       	call   c0010190 <KePanic(char const*)>
c0007866:	eb 30                	jmp    c0007898 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x6a>
c0007868:	b8 01 00 00 00       	mov    eax,0x1
c000786d:	eb 05                	jmp    c0007874 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x46>
c000786f:	b8 02 00 00 00       	mov    eax,0x2
c0007874:	c1 e0 06             	shl    eax,0x6
c0007877:	66 89 5c 24 0c       	mov    WORD PTR [esp+0xc],bx
c000787c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0007880:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
c0007884:	50                   	push   eax
c0007885:	50                   	push   eax
c0007886:	8d 44 24 14          	lea    eax,[esp+0x14]
c000788a:	50                   	push   eax
c000788b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000788f:	83 c0 2c             	add    eax,0x2c
c0007892:	50                   	push   eax
c0007893:	e8 1c f1 01 00       	call   c00269b4 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	83 c4 18             	add    esp,0x18
c000789e:	5b                   	pop    ebx
c000789f:	c3                   	ret    

c00078a0 <KiIsHashInTable(unsigned short)>:
c00078a0:	0f b7 d0             	movzx  edx,ax
c00078a3:	83 e0 07             	and    eax,0x7
c00078a6:	c1 fa 03             	sar    edx,0x3
c00078a9:	88 c1                	mov    cl,al
c00078ab:	0f b6 92 00 03 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffcfd00]
c00078b2:	d3 fa                	sar    edx,cl
c00078b4:	89 d0                	mov    eax,edx
c00078b6:	83 e0 01             	and    eax,0x1
c00078b9:	c3                   	ret    

c00078ba <KiSetHashInTable(unsigned short, bool)>:
c00078ba:	56                   	push   esi
c00078bb:	53                   	push   ebx
c00078bc:	0f b7 d8             	movzx  ebx,ax
c00078bf:	83 e0 07             	and    eax,0x7
c00078c2:	c1 fb 03             	sar    ebx,0x3
c00078c5:	89 c1                	mov    ecx,eax
c00078c7:	0f b6 b3 00 03 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffcfd00]
c00078ce:	b8 01 00 00 00       	mov    eax,0x1
c00078d3:	d3 e0                	shl    eax,cl
c00078d5:	84 d2                	test   dl,dl
c00078d7:	74 04                	je     c00078dd <KiSetHashInTable(unsigned short, bool)+0x23>
c00078d9:	09 f0                	or     eax,esi
c00078db:	eb 04                	jmp    c00078e1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00078dd:	f7 d0                	not    eax
c00078df:	21 f0                	and    eax,esi
c00078e1:	88 83 00 03 03 c0    	mov    BYTE PTR [ebx-0x3ffcfd00],al
c00078e7:	5b                   	pop    ebx
c00078e8:	5e                   	pop    esi
c00078e9:	c3                   	ret    

c00078ea <KiFlushSymlinkChanges()>:
c00078ea:	57                   	push   edi
c00078eb:	56                   	push   esi
c00078ec:	53                   	push   ebx
c00078ed:	83 ec 1c             	sub    esp,0x1c
c00078f0:	68 14 01 00 00       	push   0x114
c00078f5:	e8 41 84 00 00       	call   c000fd3b <malloc>
c00078fa:	83 c4 0c             	add    esp,0xc
c00078fd:	89 c3                	mov    ebx,eax
c00078ff:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0007905:	68 54 80 02 c0       	push   0xc0028054
c000790a:	50                   	push   eax
c000790b:	e8 52 0d 00 00       	call   c0008662 <File::File(char const*, Process*)>
c0007910:	83 c4 10             	add    esp,0x10
c0007913:	85 db                	test   ebx,ebx
c0007915:	75 10                	jne    c0007927 <KiFlushSymlinkChanges()+0x3d>
c0007917:	83 ec 0c             	sub    esp,0xc
c000791a:	68 72 80 02 c0       	push   0xc0028072
c000791f:	e8 6c 88 00 00       	call   c0010190 <KePanic(char const*)>
c0007924:	83 c4 10             	add    esp,0x10
c0007927:	50                   	push   eax
c0007928:	50                   	push   eax
c0007929:	6a 06                	push   0x6
c000792b:	53                   	push   ebx
c000792c:	e8 4f 0d 00 00       	call   c0008680 <File::open(FileOpenMode)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	85 c0                	test   eax,eax
c0007936:	74 10                	je     c0007948 <KiFlushSymlinkChanges()+0x5e>
c0007938:	83 ec 0c             	sub    esp,0xc
c000793b:	68 8c 80 02 c0       	push   0xc002808c
c0007940:	e8 4b 88 00 00       	call   c0010190 <KePanic(char const*)>
c0007945:	83 c4 10             	add    esp,0x10
c0007948:	31 f6                	xor    esi,esi
c000794a:	39 35 c0 fe 02 c0    	cmp    DWORD PTR ds:0xc002fec0,esi
c0007950:	7e 70                	jle    c00079c2 <KiFlushSymlinkChanges()+0xd8>
c0007952:	83 ec 0c             	sub    esp,0xc
c0007955:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007957:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000795b:	89 f0                	mov    eax,esi
c000795d:	57                   	push   edi
c000795e:	c1 e0 08             	shl    eax,0x8
c0007961:	05 00 ff 02 c0       	add    eax,0xc002ff00
c0007966:	50                   	push   eax
c0007967:	6a 00                	push   0x0
c0007969:	68 00 01 00 00       	push   0x100
c000796e:	53                   	push   ebx
c000796f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007972:	83 c4 20             	add    esp,0x20
c0007975:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000797d:	74 10                	je     c000798f <KiFlushSymlinkChanges()+0xa5>
c000797f:	83 ec 0c             	sub    esp,0xc
c0007982:	68 a6 80 02 c0       	push   0xc00280a6
c0007987:	e8 04 88 00 00       	call   c0010190 <KePanic(char const*)>
c000798c:	83 c4 10             	add    esp,0x10
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007994:	8d 14 f5 e0 fe 02 c0 	lea    edx,[esi*8-0x3ffd0120]
c000799b:	57                   	push   edi
c000799c:	52                   	push   edx
c000799d:	6a 00                	push   0x0
c000799f:	6a 08                	push   0x8
c00079a1:	53                   	push   ebx
c00079a2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00079a5:	83 c4 20             	add    esp,0x20
c00079a8:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00079ad:	74 10                	je     c00079bf <KiFlushSymlinkChanges()+0xd5>
c00079af:	83 ec 0c             	sub    esp,0xc
c00079b2:	68 c0 80 02 c0       	push   0xc00280c0
c00079b7:	e8 d4 87 00 00       	call   c0010190 <KePanic(char const*)>
c00079bc:	83 c4 10             	add    esp,0x10
c00079bf:	46                   	inc    esi
c00079c0:	eb 88                	jmp    c000794a <KiFlushSymlinkChanges()+0x60>
c00079c2:	83 ec 0c             	sub    esp,0xc
c00079c5:	53                   	push   ebx
c00079c6:	e8 13 0d 00 00       	call   c00086de <File::close()>
c00079cb:	83 c4 10             	add    esp,0x10
c00079ce:	85 db                	test   ebx,ebx
c00079d0:	74 0c                	je     c00079de <KiFlushSymlinkChanges()+0xf4>
c00079d2:	83 ec 0c             	sub    esp,0xc
c00079d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079d7:	53                   	push   ebx
c00079d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00079db:	83 c4 10             	add    esp,0x10
c00079de:	c7 05 c0 fe 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fec0,0x0
c00079e8:	83 c4 10             	add    esp,0x10
c00079eb:	5b                   	pop    ebx
c00079ec:	5e                   	pop    esi
c00079ed:	5f                   	pop    edi
c00079ee:	c3                   	ret    

c00079ef <KiDeinitialiseSymlinks(void*)>:
c00079ef:	e9 f6 fe ff ff       	jmp    c00078ea <KiFlushSymlinkChanges()>

c00079f4 <KiGetSymlinkHash(char const*)>:
c00079f4:	53                   	push   ebx
c00079f5:	89 c3                	mov    ebx,eax
c00079f7:	83 ec 14             	sub    esp,0x14
c00079fa:	50                   	push   eax
c00079fb:	e8 70 8b ff ff       	call   c0000570 <strlen>
c0007a00:	5a                   	pop    edx
c0007a01:	59                   	pop    ecx
c0007a02:	50                   	push   eax
c0007a03:	53                   	push   ebx
c0007a04:	e8 04 6c 00 00       	call   c000e60d <KeCalculateCRC32(unsigned char*, int)>
c0007a09:	83 c4 18             	add    esp,0x18
c0007a0c:	89 c2                	mov    edx,eax
c0007a0e:	5b                   	pop    ebx
c0007a0f:	c1 ea 10             	shr    edx,0x10
c0007a12:	31 d0                	xor    eax,edx
c0007a14:	c3                   	ret    

c0007a15 <KiCreateSymlinkID()>:
c0007a15:	55                   	push   ebp
c0007a16:	57                   	push   edi
c0007a17:	56                   	push   esi
c0007a18:	53                   	push   ebx
c0007a19:	31 db                	xor    ebx,ebx
c0007a1b:	83 ec 1c             	sub    esp,0x1c
c0007a1e:	e8 4d 91 00 00       	call   c0010b70 <KeRand()>
c0007a23:	43                   	inc    ebx
c0007a24:	8b 2d 00 23 03 c0    	mov    ebp,DWORD PTR ds:0xc0032300
c0007a2a:	31 d2                	xor    edx,edx
c0007a2c:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007a2f:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007a33:	89 0d 00 23 03 c0    	mov    DWORD PTR ds:0xc0032300,ecx
c0007a39:	c1 e0 1f             	shl    eax,0x1f
c0007a3c:	89 d7                	mov    edi,edx
c0007a3e:	89 c6                	mov    esi,eax
c0007a40:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007a44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007a4c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007a52:	75 10                	jne    c0007a64 <KiCreateSymlinkID()+0x4f>
c0007a54:	83 ec 0c             	sub    esp,0xc
c0007a57:	68 da 80 02 c0       	push   0xc00280da
c0007a5c:	e8 2f 87 00 00       	call   c0010190 <KePanic(char const*)>
c0007a61:	83 c4 10             	add    esp,0x10
c0007a64:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007a68:	75 04                	jne    c0007a6e <KiCreateSymlinkID()+0x59>
c0007a6a:	39 f5                	cmp    ebp,esi
c0007a6c:	74 b0                	je     c0007a1e <KiCreateSymlinkID()+0x9>
c0007a6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007a76:	31 f0                	xor    eax,esi
c0007a78:	83 c4 1c             	add    esp,0x1c
c0007a7b:	31 fa                	xor    edx,edi
c0007a7d:	5b                   	pop    ebx
c0007a7e:	5e                   	pop    esi
c0007a7f:	5f                   	pop    edi
c0007a80:	5d                   	pop    ebp
c0007a81:	c3                   	ret    

c0007a82 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007a82:	53                   	push   ebx
c0007a83:	83 ec 0c             	sub    esp,0xc
c0007a86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007a8a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007a8e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007a92:	a1 c0 fe 02 c0       	mov    eax,ds:0xc002fec0
c0007a97:	68 00 01 00 00       	push   0x100
c0007a9c:	89 0c c5 e4 fe 02 c0 	mov    DWORD PTR [eax*8-0x3ffd011c],ecx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	89 14 c5 e0 fe 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0120],edx
c0007aac:	c1 e0 08             	shl    eax,0x8
c0007aaf:	05 00 ff 02 c0       	add    eax,0xc002ff00
c0007ab4:	50                   	push   eax
c0007ab5:	e8 36 8a ff ff       	call   c00004f0 <memset>
c0007aba:	58                   	pop    eax
c0007abb:	a1 c0 fe 02 c0       	mov    eax,ds:0xc002fec0
c0007ac0:	5a                   	pop    edx
c0007ac1:	c1 e0 08             	shl    eax,0x8
c0007ac4:	53                   	push   ebx
c0007ac5:	05 00 ff 02 c0       	add    eax,0xc002ff00
c0007aca:	50                   	push   eax
c0007acb:	e8 70 8b ff ff       	call   c0000640 <strcpy>
c0007ad0:	89 d8                	mov    eax,ebx
c0007ad2:	e8 1d ff ff ff       	call   c00079f4 <KiGetSymlinkHash(char const*)>
c0007ad7:	ba 01 00 00 00       	mov    edx,0x1
c0007adc:	0f b7 c0             	movzx  eax,ax
c0007adf:	e8 d6 fd ff ff       	call   c00078ba <KiSetHashInTable(unsigned short, bool)>
c0007ae4:	a1 c0 fe 02 c0       	mov    eax,ds:0xc002fec0
c0007ae9:	83 c4 10             	add    esp,0x10
c0007aec:	40                   	inc    eax
c0007aed:	a3 c0 fe 02 c0       	mov    ds:0xc002fec0,eax
c0007af2:	83 f8 03             	cmp    eax,0x3
c0007af5:	7e 09                	jle    c0007b00 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0007af7:	83 c4 08             	add    esp,0x8
c0007afa:	5b                   	pop    ebx
c0007afb:	e9 ea fd ff ff       	jmp    c00078ea <KiFlushSymlinkChanges()>
c0007b00:	83 c4 08             	add    esp,0x8
c0007b03:	5b                   	pop    ebx
c0007b04:	c3                   	ret    

c0007b05 <KeInitialiseSymlinks()>:
c0007b05:	57                   	push   edi
c0007b06:	56                   	push   esi
c0007b07:	53                   	push   ebx
c0007b08:	81 ec 14 01 00 00    	sub    esp,0x114
c0007b0e:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c0007b18:	68 00 20 00 00       	push   0x2000
c0007b1d:	c7 05 c0 fe 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fec0,0x0
c0007b27:	6a 00                	push   0x0
c0007b29:	68 00 03 03 c0       	push   0xc0030300
c0007b2e:	e8 bd 89 ff ff       	call   c00004f0 <memset>
c0007b33:	59                   	pop    ecx
c0007b34:	5b                   	pop    ebx
c0007b35:	6a 00                	push   0x0
c0007b37:	68 ef 79 00 c0       	push   0xc00079ef
c0007b3c:	e8 ab 5b 00 00       	call   c000d6ec <KeRegisterAtexit(void (*)(void*), void*)>
c0007b41:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007b48:	e8 ee 81 00 00       	call   c000fd3b <malloc>
c0007b4d:	83 c4 0c             	add    esp,0xc
c0007b50:	89 c3                	mov    ebx,eax
c0007b52:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0007b58:	68 54 80 02 c0       	push   0xc0028054
c0007b5d:	50                   	push   eax
c0007b5e:	e8 ff 0a 00 00       	call   c0008662 <File::File(char const*, Process*)>
c0007b63:	83 c4 10             	add    esp,0x10
c0007b66:	85 db                	test   ebx,ebx
c0007b68:	75 10                	jne    c0007b7a <KeInitialiseSymlinks()+0x75>
c0007b6a:	83 ec 0c             	sub    esp,0xc
c0007b6d:	68 e3 80 02 c0       	push   0xc00280e3
c0007b72:	e8 19 86 00 00       	call   c0010190 <KePanic(char const*)>
c0007b77:	83 c4 10             	add    esp,0x10
c0007b7a:	83 ec 0c             	sub    esp,0xc
c0007b7d:	53                   	push   ebx
c0007b7e:	e8 c1 0d 00 00       	call   c0008944 <File::exists()>
c0007b83:	83 c4 10             	add    esp,0x10
c0007b86:	84 c0                	test   al,al
c0007b88:	75 3a                	jne    c0007bc4 <KeInitialiseSymlinks()+0xbf>
c0007b8a:	52                   	push   edx
c0007b8b:	52                   	push   edx
c0007b8c:	6a 12                	push   0x12
c0007b8e:	53                   	push   ebx
c0007b8f:	e8 ec 0a 00 00       	call   c0008680 <File::open(FileOpenMode)>
c0007b94:	83 c4 10             	add    esp,0x10
c0007b97:	85 c0                	test   eax,eax
c0007b99:	74 10                	je     c0007bab <KeInitialiseSymlinks()+0xa6>
c0007b9b:	83 ec 0c             	sub    esp,0xc
c0007b9e:	68 00 81 02 c0       	push   0xc0028100
c0007ba3:	e8 e8 85 00 00       	call   c0010190 <KePanic(char const*)>
c0007ba8:	83 c4 10             	add    esp,0x10
c0007bab:	83 ec 0c             	sub    esp,0xc
c0007bae:	53                   	push   ebx
c0007baf:	e8 2a 0b 00 00       	call   c00086de <File::close()>
c0007bb4:	83 c4 10             	add    esp,0x10
c0007bb7:	85 db                	test   ebx,ebx
c0007bb9:	0f 84 9e 00 00 00    	je     c0007c5d <KeInitialiseSymlinks()+0x158>
c0007bbf:	e9 8d 00 00 00       	jmp    c0007c51 <KeInitialiseSymlinks()+0x14c>
c0007bc4:	50                   	push   eax
c0007bc5:	50                   	push   eax
c0007bc6:	6a 01                	push   0x1
c0007bc8:	53                   	push   ebx
c0007bc9:	e8 b2 0a 00 00       	call   c0008680 <File::open(FileOpenMode)>
c0007bce:	83 c4 10             	add    esp,0x10
c0007bd1:	85 c0                	test   eax,eax
c0007bd3:	74 10                	je     c0007be5 <KeInitialiseSymlinks()+0xe0>
c0007bd5:	83 ec 0c             	sub    esp,0xc
c0007bd8:	68 1d 81 02 c0       	push   0xc002811d
c0007bdd:	e8 ae 85 00 00       	call   c0010190 <KePanic(char const*)>
c0007be2:	83 c4 10             	add    esp,0x10
c0007be5:	83 ec 0c             	sub    esp,0xc
c0007be8:	ff 05 00 23 03 c0    	inc    DWORD PTR ds:0xc0032300
c0007bee:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0007bf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bf4:	57                   	push   edi
c0007bf5:	8d 74 24 20          	lea    esi,[esp+0x20]
c0007bf9:	56                   	push   esi
c0007bfa:	6a 00                	push   0x0
c0007bfc:	68 00 01 00 00       	push   0x100
c0007c01:	53                   	push   ebx
c0007c02:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007c05:	83 c4 20             	add    esp,0x20
c0007c08:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007c10:	75 33                	jne    c0007c45 <KeInitialiseSymlinks()+0x140>
c0007c12:	83 ec 0c             	sub    esp,0xc
c0007c15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007c17:	57                   	push   edi
c0007c18:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007c1c:	52                   	push   edx
c0007c1d:	6a 00                	push   0x0
c0007c1f:	6a 08                	push   0x8
c0007c21:	53                   	push   ebx
c0007c22:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007c25:	83 c4 20             	add    esp,0x20
c0007c28:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007c2d:	75 16                	jne    c0007c45 <KeInitialiseSymlinks()+0x140>
c0007c2f:	89 f0                	mov    eax,esi
c0007c31:	e8 be fd ff ff       	call   c00079f4 <KiGetSymlinkHash(char const*)>
c0007c36:	ba 01 00 00 00       	mov    edx,0x1
c0007c3b:	0f b7 c0             	movzx  eax,ax
c0007c3e:	e8 77 fc ff ff       	call   c00078ba <KiSetHashInTable(unsigned short, bool)>
c0007c43:	eb a0                	jmp    c0007be5 <KeInitialiseSymlinks()+0xe0>
c0007c45:	83 ec 0c             	sub    esp,0xc
c0007c48:	53                   	push   ebx
c0007c49:	e8 90 0a 00 00       	call   c00086de <File::close()>
c0007c4e:	83 c4 10             	add    esp,0x10
c0007c51:	83 ec 0c             	sub    esp,0xc
c0007c54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007c56:	53                   	push   ebx
c0007c57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007c5a:	83 c4 10             	add    esp,0x10
c0007c5d:	81 c4 10 01 00 00    	add    esp,0x110
c0007c63:	5b                   	pop    ebx
c0007c64:	5e                   	pop    esi
c0007c65:	5f                   	pop    edi
c0007c66:	c3                   	ret    

c0007c67 <KiIsSymlinkRegistered(char const*)>:
c0007c67:	55                   	push   ebp
c0007c68:	57                   	push   edi
c0007c69:	56                   	push   esi
c0007c6a:	53                   	push   ebx
c0007c6b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007c71:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007c78:	89 f0                	mov    eax,esi
c0007c7a:	e8 75 fd ff ff       	call   c00079f4 <KiGetSymlinkHash(char const*)>
c0007c7f:	0f b7 c0             	movzx  eax,ax
c0007c82:	e8 19 fc ff ff       	call   c00078a0 <KiIsHashInTable(unsigned short)>
c0007c87:	31 d2                	xor    edx,edx
c0007c89:	88 c1                	mov    cl,al
c0007c8b:	31 c0                	xor    eax,eax
c0007c8d:	84 c9                	test   cl,cl
c0007c8f:	0f 84 31 01 00 00    	je     c0007dc6 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007c95:	31 db                	xor    ebx,ebx
c0007c97:	39 1d c0 fe 02 c0    	cmp    DWORD PTR ds:0xc002fec0,ebx
c0007c9d:	7e 30                	jle    c0007ccf <KiIsSymlinkRegistered(char const*)+0x68>
c0007c9f:	89 d8                	mov    eax,ebx
c0007ca1:	51                   	push   ecx
c0007ca2:	c1 e0 08             	shl    eax,0x8
c0007ca5:	51                   	push   ecx
c0007ca6:	05 00 ff 02 c0       	add    eax,0xc002ff00
c0007cab:	50                   	push   eax
c0007cac:	56                   	push   esi
c0007cad:	e8 9e 8a ff ff       	call   c0000750 <strcmp>
c0007cb2:	83 c4 10             	add    esp,0x10
c0007cb5:	85 c0                	test   eax,eax
c0007cb7:	75 13                	jne    c0007ccc <KiIsSymlinkRegistered(char const*)+0x65>
c0007cb9:	8b 04 dd e0 fe 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd0120]
c0007cc0:	8b 14 dd e4 fe 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd011c]
c0007cc7:	e9 fa 00 00 00       	jmp    c0007dc6 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007ccc:	43                   	inc    ebx
c0007ccd:	eb c8                	jmp    c0007c97 <KiIsSymlinkRegistered(char const*)+0x30>
c0007ccf:	83 ec 0c             	sub    esp,0xc
c0007cd2:	68 14 01 00 00       	push   0x114
c0007cd7:	e8 5f 80 00 00       	call   c000fd3b <malloc>
c0007cdc:	83 c4 0c             	add    esp,0xc
c0007cdf:	89 c3                	mov    ebx,eax
c0007ce1:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0007ce7:	68 54 80 02 c0       	push   0xc0028054
c0007cec:	50                   	push   eax
c0007ced:	e8 70 09 00 00       	call   c0008662 <File::File(char const*, Process*)>
c0007cf2:	83 c4 10             	add    esp,0x10
c0007cf5:	85 db                	test   ebx,ebx
c0007cf7:	75 12                	jne    c0007d0b <KiIsSymlinkRegistered(char const*)+0xa4>
c0007cf9:	83 ec 0c             	sub    esp,0xc
c0007cfc:	68 38 81 02 c0       	push   0xc0028138
c0007d01:	e8 8a 84 00 00       	call   c0010190 <KePanic(char const*)>
c0007d06:	83 c4 10             	add    esp,0x10
c0007d09:	eb 10                	jmp    c0007d1b <KiIsSymlinkRegistered(char const*)+0xb4>
c0007d0b:	83 ec 0c             	sub    esp,0xc
c0007d0e:	53                   	push   ebx
c0007d0f:	e8 30 0c 00 00       	call   c0008944 <File::exists()>
c0007d14:	83 c4 10             	add    esp,0x10
c0007d17:	84 c0                	test   al,al
c0007d19:	74 de                	je     c0007cf9 <KiIsSymlinkRegistered(char const*)+0x92>
c0007d1b:	52                   	push   edx
c0007d1c:	52                   	push   edx
c0007d1d:	6a 01                	push   0x1
c0007d1f:	53                   	push   ebx
c0007d20:	e8 5b 09 00 00       	call   c0008680 <File::open(FileOpenMode)>
c0007d25:	83 c4 10             	add    esp,0x10
c0007d28:	85 c0                	test   eax,eax
c0007d2a:	74 10                	je     c0007d3c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	68 53 81 02 c0       	push   0xc0028153
c0007d34:	e8 57 84 00 00       	call   c0010190 <KePanic(char const*)>
c0007d39:	83 c4 10             	add    esp,0x10
c0007d3c:	83 ec 0c             	sub    esp,0xc
c0007d3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007d41:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007d45:	55                   	push   ebp
c0007d46:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007d4a:	57                   	push   edi
c0007d4b:	6a 00                	push   0x0
c0007d4d:	68 00 01 00 00       	push   0x100
c0007d52:	53                   	push   ebx
c0007d53:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007d56:	83 c4 20             	add    esp,0x20
c0007d59:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007d61:	75 4b                	jne    c0007dae <KiIsSymlinkRegistered(char const*)+0x147>
c0007d63:	83 ec 0c             	sub    esp,0xc
c0007d66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007d68:	55                   	push   ebp
c0007d69:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007d6d:	52                   	push   edx
c0007d6e:	6a 00                	push   0x0
c0007d70:	6a 08                	push   0x8
c0007d72:	53                   	push   ebx
c0007d73:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007d76:	83 c4 20             	add    esp,0x20
c0007d79:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007d7e:	75 2e                	jne    c0007dae <KiIsSymlinkRegistered(char const*)+0x147>
c0007d80:	50                   	push   eax
c0007d81:	50                   	push   eax
c0007d82:	57                   	push   edi
c0007d83:	56                   	push   esi
c0007d84:	e8 c7 89 ff ff       	call   c0000750 <strcmp>
c0007d89:	83 c4 10             	add    esp,0x10
c0007d8c:	85 c0                	test   eax,eax
c0007d8e:	75 ac                	jne    c0007d3c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007d90:	83 ec 0c             	sub    esp,0xc
c0007d93:	53                   	push   ebx
c0007d94:	e8 45 09 00 00       	call   c00086de <File::close()>
c0007d99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007d9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007da1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007da5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007da9:	83 c4 10             	add    esp,0x10
c0007dac:	eb 18                	jmp    c0007dc6 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007dae:	83 ec 0c             	sub    esp,0xc
c0007db1:	53                   	push   ebx
c0007db2:	e8 27 09 00 00       	call   c00086de <File::close()>
c0007db7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007db9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007dbc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	31 c0                	xor    eax,eax
c0007dc4:	31 d2                	xor    edx,edx
c0007dc6:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007dcc:	5b                   	pop    ebx
c0007dcd:	5e                   	pop    esi
c0007dce:	5f                   	pop    edi
c0007dcf:	5d                   	pop    ebp
c0007dd0:	c3                   	ret    

c0007dd1 <KeDereferenceSymlink(char const*, char*)>:
c0007dd1:	55                   	push   ebp
c0007dd2:	57                   	push   edi
c0007dd3:	56                   	push   esi
c0007dd4:	53                   	push   ebx
c0007dd5:	83 ec 48             	sub    esp,0x48
c0007dd8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007ddc:	56                   	push   esi
c0007ddd:	e8 85 fe ff ff       	call   c0007c67 <KiIsSymlinkRegistered(char const*)>
c0007de2:	83 c4 10             	add    esp,0x10
c0007de5:	89 c7                	mov    edi,eax
c0007de7:	89 d0                	mov    eax,edx
c0007de9:	09 f8                	or     eax,edi
c0007deb:	75 07                	jne    c0007df4 <KeDereferenceSymlink(char const*, char*)+0x23>
c0007ded:	31 c0                	xor    eax,eax
c0007def:	e9 7c 01 00 00       	jmp    c0007f70 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007df4:	83 ec 0c             	sub    esp,0xc
c0007df7:	89 d5                	mov    ebp,edx
c0007df9:	68 14 01 00 00       	push   0x114
c0007dfe:	e8 38 7f 00 00       	call   c000fd3b <malloc>
c0007e03:	83 c4 0c             	add    esp,0xc
c0007e06:	89 c3                	mov    ebx,eax
c0007e08:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0007e0e:	56                   	push   esi
c0007e0f:	50                   	push   eax
c0007e10:	e8 4d 08 00 00       	call   c0008662 <File::File(char const*, Process*)>
c0007e15:	83 c4 10             	add    esp,0x10
c0007e18:	85 db                	test   ebx,ebx
c0007e1a:	0f 84 32 01 00 00    	je     c0007f52 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007e20:	56                   	push   esi
c0007e21:	56                   	push   esi
c0007e22:	6a 01                	push   0x1
c0007e24:	53                   	push   ebx
c0007e25:	e8 56 08 00 00       	call   c0008680 <File::open(FileOpenMode)>
c0007e2a:	83 c4 10             	add    esp,0x10
c0007e2d:	85 c0                	test   eax,eax
c0007e2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007e31:	74 09                	je     c0007e3c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007e33:	83 ec 0c             	sub    esp,0xc
c0007e36:	53                   	push   ebx
c0007e37:	e9 10 01 00 00       	jmp    c0007f4c <KeDereferenceSymlink(char const*, char*)+0x17b>
c0007e3c:	83 ec 0c             	sub    esp,0xc
c0007e3f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007e43:	56                   	push   esi
c0007e44:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007e48:	52                   	push   edx
c0007e49:	6a 00                	push   0x0
c0007e4b:	6a 08                	push   0x8
c0007e4d:	53                   	push   ebx
c0007e4e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007e51:	83 c4 20             	add    esp,0x20
c0007e54:	85 c0                	test   eax,eax
c0007e56:	0f 85 e2 00 00 00    	jne    c0007f3e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007e5c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007e61:	0f 85 d7 00 00 00    	jne    c0007f3e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007e67:	83 ec 0c             	sub    esp,0xc
c0007e6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007e6c:	56                   	push   esi
c0007e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007e71:	52                   	push   edx
c0007e72:	6a 00                	push   0x0
c0007e74:	6a 08                	push   0x8
c0007e76:	53                   	push   ebx
c0007e77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007e7a:	83 c4 20             	add    esp,0x20
c0007e7d:	85 c0                	test   eax,eax
c0007e7f:	0f 85 b9 00 00 00    	jne    c0007f3e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007e85:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007e8a:	0f 85 ae 00 00 00    	jne    c0007f3e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007e90:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007e94:	0f 85 53 ff ff ff    	jne    c0007ded <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007e9a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007e9e:	0f 85 49 ff ff ff    	jne    c0007ded <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007ea4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007eac:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007eb4:	51                   	push   ecx
c0007eb5:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007eb9:	50                   	push   eax
c0007eba:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007ebe:	50                   	push   eax
c0007ebf:	53                   	push   ebx
c0007ec0:	e8 bd 0a 00 00       	call   c0008982 <File::stat(unsigned long long*, bool*)>
c0007ec5:	83 c4 10             	add    esp,0x10
c0007ec8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007ecd:	75 6f                	jne    c0007f3e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007ecf:	31 c9                	xor    ecx,ecx
c0007ed1:	bf 0f 00 00 00       	mov    edi,0xf
c0007ed6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007eda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ede:	39 c7                	cmp    edi,eax
c0007ee0:	89 cf                	mov    edi,ecx
c0007ee2:	19 d7                	sbb    edi,edx
c0007ee4:	73 58                	jae    c0007f3e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007ee6:	83 c0 f0             	add    eax,0xfffffff0
c0007ee9:	bf ff 00 00 00       	mov    edi,0xff
c0007eee:	83 d2 ff             	adc    edx,0xffffffff
c0007ef1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ef5:	39 c7                	cmp    edi,eax
c0007ef7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007efb:	19 d1                	sbb    ecx,edx
c0007efd:	72 53                	jb     c0007f52 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007eff:	40                   	inc    eax
c0007f00:	52                   	push   edx
c0007f01:	50                   	push   eax
c0007f02:	6a 00                	push   0x0
c0007f04:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007f08:	e8 e3 85 ff ff       	call   c00004f0 <memset>
c0007f0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007f0f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007f12:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007f16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007f1a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007f1e:	53                   	push   ebx
c0007f1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007f22:	83 c4 20             	add    esp,0x20
c0007f25:	85 c0                	test   eax,eax
c0007f27:	75 15                	jne    c0007f3e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007f29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f2d:	89 c7                	mov    edi,eax
c0007f2f:	c1 ff 1f             	sar    edi,0x1f
c0007f32:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007f36:	75 06                	jne    c0007f3e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007f38:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007f3c:	74 19                	je     c0007f57 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007f3e:	83 ec 0c             	sub    esp,0xc
c0007f41:	53                   	push   ebx
c0007f42:	e8 97 07 00 00       	call   c00086de <File::close()>
c0007f47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007f49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007f4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007f4f:	83 c4 10             	add    esp,0x10
c0007f52:	83 c8 ff             	or     eax,0xffffffff
c0007f55:	eb 19                	jmp    c0007f70 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007f57:	83 ec 0c             	sub    esp,0xc
c0007f5a:	53                   	push   ebx
c0007f5b:	e8 7e 07 00 00       	call   c00086de <File::close()>
c0007f60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007f62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007f65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007f68:	83 c4 10             	add    esp,0x10
c0007f6b:	b8 01 00 00 00       	mov    eax,0x1
c0007f70:	83 c4 3c             	add    esp,0x3c
c0007f73:	5b                   	pop    ebx
c0007f74:	5e                   	pop    esi
c0007f75:	5f                   	pop    edi
c0007f76:	5d                   	pop    ebp
c0007f77:	c3                   	ret    

c0007f78 <KeCreateSymlink(char const*, char const*)>:
c0007f78:	55                   	push   ebp
c0007f79:	57                   	push   edi
c0007f7a:	56                   	push   esi
c0007f7b:	53                   	push   ebx
c0007f7c:	83 ec 38             	sub    esp,0x38
c0007f7f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007f83:	68 14 01 00 00       	push   0x114
c0007f88:	e8 ae 7d 00 00       	call   c000fd3b <malloc>
c0007f8d:	6a 00                	push   0x0
c0007f8f:	89 c3                	mov    ebx,eax
c0007f91:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0007f97:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007f9b:	50                   	push   eax
c0007f9c:	e8 c3 05 00 00       	call   c0008564 <File::File(char const*, Process*, bool)>
c0007fa1:	83 c4 20             	add    esp,0x20
c0007fa4:	b8 01 00 00 00       	mov    eax,0x1
c0007fa9:	85 db                	test   ebx,ebx
c0007fab:	0f 84 fb 00 00 00    	je     c00080ac <KeCreateSymlink(char const*, char const*)+0x134>
c0007fb1:	52                   	push   edx
c0007fb2:	52                   	push   edx
c0007fb3:	6a 12                	push   0x12
c0007fb5:	53                   	push   ebx
c0007fb6:	e8 c5 06 00 00       	call   c0008680 <File::open(FileOpenMode)>
c0007fbb:	83 c4 10             	add    esp,0x10
c0007fbe:	85 c0                	test   eax,eax
c0007fc0:	74 0b                	je     c0007fcd <KeCreateSymlink(char const*, char const*)+0x55>
c0007fc2:	83 ec 0c             	sub    esp,0xc
c0007fc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007fc7:	53                   	push   ebx
c0007fc8:	e9 d4 00 00 00       	jmp    c00080a1 <KeCreateSymlink(char const*, char const*)+0x129>
c0007fcd:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007fd1:	be 6e 81 02 c0       	mov    esi,0xc002816e
c0007fd6:	b9 09 00 00 00       	mov    ecx,0x9
c0007fdb:	fc                   	cld    
c0007fdc:	83 ec 0c             	sub    esp,0xc
c0007fdf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007fe1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007fe5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007fe7:	56                   	push   esi
c0007fe8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007fec:	52                   	push   edx
c0007fed:	6a 00                	push   0x0
c0007fef:	6a 08                	push   0x8
c0007ff1:	53                   	push   ebx
c0007ff2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ff5:	83 c4 20             	add    esp,0x20
c0007ff8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ffd:	0f 85 90 00 00 00    	jne    c0008093 <KeCreateSymlink(char const*, char const*)+0x11b>
c0008003:	85 c0                	test   eax,eax
c0008005:	0f 85 88 00 00 00    	jne    c0008093 <KeCreateSymlink(char const*, char const*)+0x11b>
c000800b:	e8 05 fa ff ff       	call   c0007a15 <KiCreateSymlinkID()>
c0008010:	83 ec 0c             	sub    esp,0xc
c0008013:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008017:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000801b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000801d:	56                   	push   esi
c000801e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0008022:	52                   	push   edx
c0008023:	6a 00                	push   0x0
c0008025:	6a 08                	push   0x8
c0008027:	53                   	push   ebx
c0008028:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000802b:	83 c4 20             	add    esp,0x20
c000802e:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0008033:	75 5e                	jne    c0008093 <KeCreateSymlink(char const*, char const*)+0x11b>
c0008035:	85 c0                	test   eax,eax
c0008037:	75 5a                	jne    c0008093 <KeCreateSymlink(char const*, char const*)+0x11b>
c0008039:	83 ec 0c             	sub    esp,0xc
c000803c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000803e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0008041:	55                   	push   ebp
c0008042:	e8 29 85 ff ff       	call   c0000570 <strlen>
c0008047:	89 34 24             	mov    DWORD PTR [esp],esi
c000804a:	31 d2                	xor    edx,edx
c000804c:	55                   	push   ebp
c000804d:	52                   	push   edx
c000804e:	50                   	push   eax
c000804f:	53                   	push   ebx
c0008050:	ff d7                	call   edi
c0008052:	83 c4 14             	add    esp,0x14
c0008055:	89 c6                	mov    esi,eax
c0008057:	55                   	push   ebp
c0008058:	e8 13 85 ff ff       	call   c0000570 <strlen>
c000805d:	83 c4 10             	add    esp,0x10
c0008060:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0008064:	75 2d                	jne    c0008093 <KeCreateSymlink(char const*, char const*)+0x11b>
c0008066:	85 f6                	test   esi,esi
c0008068:	75 29                	jne    c0008093 <KeCreateSymlink(char const*, char const*)+0x11b>
c000806a:	50                   	push   eax
c000806b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000806f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008073:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0008077:	e8 06 fa ff ff       	call   c0007a82 <KeRegisterSymlink(char const*, unsigned long long)>
c000807c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000807f:	e8 5a 06 00 00       	call   c00086de <File::close()>
c0008084:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008086:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008089:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000808c:	83 c4 10             	add    esp,0x10
c000808f:	31 c0                	xor    eax,eax
c0008091:	eb 19                	jmp    c00080ac <KeCreateSymlink(char const*, char const*)+0x134>
c0008093:	83 ec 0c             	sub    esp,0xc
c0008096:	53                   	push   ebx
c0008097:	e8 42 06 00 00       	call   c00086de <File::close()>
c000809c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000809e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00080a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00080a4:	83 c4 10             	add    esp,0x10
c00080a7:	b8 01 00 00 00       	mov    eax,0x1
c00080ac:	83 c4 2c             	add    esp,0x2c
c00080af:	5b                   	pop    ebx
c00080b0:	5e                   	pop    esi
c00080b1:	5f                   	pop    edi
c00080b2:	5d                   	pop    ebp
c00080b3:	c3                   	ret    

c00080b4 <File::read(unsigned long long, void*, int*)>:
c00080b4:	53                   	push   ebx
c00080b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00080bd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00080c4:	83 f8 19             	cmp    eax,0x19
c00080c7:	77 35                	ja     c00080fe <File::read(unsigned long long, void*, int*)+0x4a>
c00080c9:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c00080d0:	85 c0                	test   eax,eax
c00080d2:	74 2a                	je     c00080fe <File::read(unsigned long long, void*, int*)+0x4a>
c00080d4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00080da:	85 c0                	test   eax,eax
c00080dc:	74 20                	je     c00080fe <File::read(unsigned long long, void*, int*)+0x4a>
c00080de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00080e2:	74 21                	je     c0008105 <File::read(unsigned long long, void*, int*)+0x51>
c00080e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00080e6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00080ea:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00080f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00080f8:	5b                   	pop    ebx
c00080f9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00080fc:	ff e0                	jmp    eax
c00080fe:	b8 0b 00 00 00       	mov    eax,0xb
c0008103:	eb 05                	jmp    c000810a <File::read(unsigned long long, void*, int*)+0x56>
c0008105:	b8 05 00 00 00       	mov    eax,0x5
c000810a:	5b                   	pop    ebx
c000810b:	c3                   	ret    

c000810c <File::write(unsigned long long, void*, int*)>:
c000810c:	53                   	push   ebx
c000810d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008111:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008115:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000811c:	83 f8 19             	cmp    eax,0x19
c000811f:	77 35                	ja     c0008156 <File::write(unsigned long long, void*, int*)+0x4a>
c0008121:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008128:	85 c0                	test   eax,eax
c000812a:	74 2a                	je     c0008156 <File::write(unsigned long long, void*, int*)+0x4a>
c000812c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008132:	85 c0                	test   eax,eax
c0008134:	74 20                	je     c0008156 <File::write(unsigned long long, void*, int*)+0x4a>
c0008136:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000813a:	74 21                	je     c000815d <File::write(unsigned long long, void*, int*)+0x51>
c000813c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000813e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008142:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0008148:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000814c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008150:	5b                   	pop    ebx
c0008151:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0008154:	ff e0                	jmp    eax
c0008156:	b8 0b 00 00 00       	mov    eax,0xb
c000815b:	eb 05                	jmp    c0008162 <File::write(unsigned long long, void*, int*)+0x56>
c000815d:	b8 05 00 00 00       	mov    eax,0x5
c0008162:	5b                   	pop    ebx
c0008163:	c3                   	ret    

c0008164 <Directory::read(unsigned long long, void*, int*)>:
c0008164:	53                   	push   ebx
c0008165:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008169:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000816d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0008174:	83 f8 19             	cmp    eax,0x19
c0008177:	77 35                	ja     c00081ae <Directory::read(unsigned long long, void*, int*)+0x4a>
c0008179:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008180:	85 c0                	test   eax,eax
c0008182:	74 2a                	je     c00081ae <Directory::read(unsigned long long, void*, int*)+0x4a>
c0008184:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000818a:	85 c0                	test   eax,eax
c000818c:	74 20                	je     c00081ae <Directory::read(unsigned long long, void*, int*)+0x4a>
c000818e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008192:	74 21                	je     c00081b5 <Directory::read(unsigned long long, void*, int*)+0x51>
c0008194:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008196:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000819a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00081a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00081a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00081a8:	5b                   	pop    ebx
c00081a9:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c00081ac:	ff e0                	jmp    eax
c00081ae:	b8 0b 00 00 00       	mov    eax,0xb
c00081b3:	eb 05                	jmp    c00081ba <Directory::read(unsigned long long, void*, int*)+0x56>
c00081b5:	b8 05 00 00 00       	mov    eax,0x5
c00081ba:	5b                   	pop    ebx
c00081bb:	c3                   	ret    

c00081bc <Directory::write(unsigned long long, void*, int*)>:
c00081bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081c0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00081c7:	b8 0b 00 00 00       	mov    eax,0xb
c00081cc:	83 fa 19             	cmp    edx,0x19
c00081cf:	77 18                	ja     c00081e9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00081d1:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c00081d8:	85 d2                	test   edx,edx
c00081da:	74 0d                	je     c00081e9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00081dc:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c00081e3:	19 c0                	sbb    eax,eax
c00081e5:	83 e0 0a             	and    eax,0xa
c00081e8:	40                   	inc    eax
c00081e9:	c3                   	ret    

c00081ea <File::isAtty()>:
c00081ea:	31 c0                	xor    eax,eax
c00081ec:	c3                   	ret    
c00081ed:	90                   	nop

c00081ee <Directory::isAtty()>:
c00081ee:	31 c0                	xor    eax,eax
c00081f0:	c3                   	ret    
c00081f1:	90                   	nop

c00081f2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00081f2:	b8 0a 00 00 00       	mov    eax,0xa
c00081f7:	c3                   	ret    

c00081f8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00081f8:	b8 0a 00 00 00       	mov    eax,0xa
c00081fd:	c3                   	ret    

c00081fe <Filesystem::allocateSwapfile(char const*, int)>:
c00081fe:	31 c0                	xor    eax,eax
c0008200:	31 d2                	xor    edx,edx
c0008202:	c3                   	ret    
c0008203:	90                   	nop

c0008204 <File::~File()>:
c0008204:	83 ec 0c             	sub    esp,0xc
c0008207:	ba 44 82 02 c0       	mov    edx,0xc0028244
c000820c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008210:	89 10                	mov    DWORD PTR [eax],edx
c0008212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008216:	83 ec 0c             	sub    esp,0xc
c0008219:	50                   	push   eax
c000821a:	e8 9b b2 00 00       	call   c00134ba <UnixFile::~UnixFile()>
c000821f:	83 c4 10             	add    esp,0x10
c0008222:	90                   	nop
c0008223:	83 c4 0c             	add    esp,0xc
c0008226:	c3                   	ret    
c0008227:	90                   	nop

c0008228 <File::~File()>:
c0008228:	83 ec 0c             	sub    esp,0xc
c000822b:	83 ec 0c             	sub    esp,0xc
c000822e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008232:	e8 cd ff ff ff       	call   c0008204 <File::~File()>
c0008237:	83 c4 10             	add    esp,0x10
c000823a:	83 ec 08             	sub    esp,0x8
c000823d:	68 14 01 00 00       	push   0x114
c0008242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008246:	e8 09 56 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000824b:	83 c4 10             	add    esp,0x10
c000824e:	83 c4 0c             	add    esp,0xc
c0008251:	c3                   	ret    

c0008252 <Directory::~Directory()>:
c0008252:	83 ec 0c             	sub    esp,0xc
c0008255:	ba 60 82 02 c0       	mov    edx,0xc0028260
c000825a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000825e:	89 10                	mov    DWORD PTR [eax],edx
c0008260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008264:	83 ec 0c             	sub    esp,0xc
c0008267:	50                   	push   eax
c0008268:	e8 4d b2 00 00       	call   c00134ba <UnixFile::~UnixFile()>
c000826d:	83 c4 10             	add    esp,0x10
c0008270:	90                   	nop
c0008271:	83 c4 0c             	add    esp,0xc
c0008274:	c3                   	ret    
c0008275:	90                   	nop

c0008276 <Directory::~Directory()>:
c0008276:	83 ec 0c             	sub    esp,0xc
c0008279:	83 ec 0c             	sub    esp,0xc
c000827c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008280:	e8 cd ff ff ff       	call   c0008252 <Directory::~Directory()>
c0008285:	83 c4 10             	add    esp,0x10
c0008288:	83 ec 08             	sub    esp,0x8
c000828b:	68 14 01 00 00       	push   0x114
c0008290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008294:	e8 bb 55 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c0008299:	83 c4 10             	add    esp,0x10
c000829c:	83 c4 0c             	add    esp,0xc
c000829f:	c3                   	ret    

c00082a0 <Filesystem::Filesystem()>:
c00082a0:	ba d8 81 02 c0       	mov    edx,0xc00281d8
c00082a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082a9:	89 10                	mov    DWORD PTR [eax],edx
c00082ab:	8b 15 04 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032304
c00082b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00082b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082bc:	a3 04 23 03 c0       	mov    ds:0xc0032304,eax
c00082c1:	90                   	nop
c00082c2:	c3                   	ret    
c00082c3:	90                   	nop

c00082c4 <Filesystem::~Filesystem()>:
c00082c4:	ba d8 81 02 c0       	mov    edx,0xc00281d8
c00082c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082cd:	89 10                	mov    DWORD PTR [eax],edx
c00082cf:	90                   	nop
c00082d0:	c3                   	ret    
c00082d1:	90                   	nop

c00082d2 <Filesystem::~Filesystem()>:
c00082d2:	83 ec 0c             	sub    esp,0xc
c00082d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00082d9:	e8 e6 ff ff ff       	call   c00082c4 <Filesystem::~Filesystem()>
c00082de:	83 c4 04             	add    esp,0x4
c00082e1:	83 ec 08             	sub    esp,0x8
c00082e4:	6a 08                	push   0x8
c00082e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082ea:	e8 65 55 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c00082ef:	83 c4 10             	add    esp,0x10
c00082f2:	83 c4 0c             	add    esp,0xc
c00082f5:	c3                   	ret    

c00082f6 <Fs::getcwd(Process*, char*, int)>:
c00082f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082fa:	31 c0                	xor    eax,eax
c00082fc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00082ff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0008303:	7d 15                	jge    c000831a <Fs::getcwd(Process*, char*, int)+0x24>
c0008305:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0008309:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0008310:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0008313:	84 c9                	test   cl,cl
c0008315:	74 06                	je     c000831d <Fs::getcwd(Process*, char*, int)+0x27>
c0008317:	40                   	inc    eax
c0008318:	eb e2                	jmp    c00082fc <Fs::getcwd(Process*, char*, int)+0x6>
c000831a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000831d:	31 c0                	xor    eax,eax
c000831f:	c3                   	ret    

c0008320 <Fs::initVFS()>:
c0008320:	83 ec 18             	sub    esp,0x18
c0008323:	6a 08                	push   0x8
c0008325:	e8 11 7a 00 00       	call   c000fd3b <malloc>
c000832a:	89 04 24             	mov    DWORD PTR [esp],eax
c000832d:	e8 6e 4b 01 00       	call   c001cea0 <FAT::FAT()>
c0008332:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0008339:	e8 fd 79 00 00       	call   c000fd3b <malloc>
c000833e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008341:	e8 86 5a 01 00       	call   c001ddcc <ISO9660::ISO9660()>
c0008346:	83 c4 1c             	add    esp,0x1c
c0008349:	c3                   	ret    

c000834a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000834a:	55                   	push   ebp
c000834b:	57                   	push   edi
c000834c:	56                   	push   esi
c000834d:	53                   	push   ebx
c000834e:	81 ec 10 04 00 00    	sub    esp,0x410
c0008354:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000835b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0008362:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000836a:	68 00 04 00 00       	push   0x400
c000836f:	6a 00                	push   0x0
c0008371:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0008375:	57                   	push   edi
c0008376:	e8 75 81 ff ff       	call   c00004f0 <memset>
c000837b:	83 c4 10             	add    esp,0x10
c000837e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0008382:	75 0b                	jne    c000838f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0008384:	50                   	push   eax
c0008385:	50                   	push   eax
c0008386:	55                   	push   ebp
c0008387:	57                   	push   edi
c0008388:	e8 b3 82 ff ff       	call   c0000640 <strcpy>
c000838d:	eb 51                	jmp    c00083e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000838f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0008393:	83 f8 5c             	cmp    eax,0x5c
c0008396:	74 05                	je     c000839d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0008398:	83 f8 2f             	cmp    eax,0x2f
c000839b:	75 1e                	jne    c00083bb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000839d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00083a4:	8a 00                	mov    al,BYTE PTR [eax]
c00083a6:	3c 60                	cmp    al,0x60
c00083a8:	7e 03                	jle    c00083ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c00083aa:	83 e8 20             	sub    eax,0x20
c00083ad:	88 04 24             	mov    BYTE PTR [esp],al
c00083b0:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00083b7:	50                   	push   eax
c00083b8:	50                   	push   eax
c00083b9:	eb 1e                	jmp    c00083d9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c00083bb:	50                   	push   eax
c00083bc:	50                   	push   eax
c00083bd:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c00083c4:	57                   	push   edi
c00083c5:	e8 76 82 ff ff       	call   c0000640 <strcpy>
c00083ca:	58                   	pop    eax
c00083cb:	5a                   	pop    edx
c00083cc:	68 6a 9b 02 c0       	push   0xc0029b6a
c00083d1:	57                   	push   edi
c00083d2:	e8 69 84 ff ff       	call   c0000840 <strcat>
c00083d7:	59                   	pop    ecx
c00083d8:	58                   	pop    eax
c00083d9:	55                   	push   ebp
c00083da:	57                   	push   edi
c00083db:	e8 60 84 ff ff       	call   c0000840 <strcat>
c00083e0:	83 c4 10             	add    esp,0x10
c00083e3:	8a 04 24             	mov    al,BYTE PTR [esp]
c00083e6:	3c 60                	cmp    al,0x60
c00083e8:	7e 03                	jle    c00083ed <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c00083ea:	83 e8 20             	sub    eax,0x20
c00083ed:	88 04 24             	mov    BYTE PTR [esp],al
c00083f0:	88 06                	mov    BYTE PTR [esi],al
c00083f2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00083f9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c00083ff:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0008403:	bf 03 00 00 00       	mov    edi,0x3
c0008408:	b8 03 00 00 00       	mov    eax,0x3
c000840d:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0008411:	89 e9                	mov    ecx,ebp
c0008413:	85 ed                	test   ebp,ebp
c0008415:	0f 84 97 00 00 00    	je     c00084b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000841b:	8d 57 01             	lea    edx,[edi+0x1]
c000841e:	83 fd 5c             	cmp    ebp,0x5c
c0008421:	74 05                	je     c0008428 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0008423:	83 fd 2f             	cmp    ebp,0x2f
c0008426:	75 12                	jne    c000843a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008428:	89 c5                	mov    ebp,eax
c000842a:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000842f:	74 09                	je     c000843a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008431:	40                   	inc    eax
c0008432:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0008436:	89 d7                	mov    edi,edx
c0008438:	eb d3                	jmp    c000840d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000843a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000843f:	0f be e9             	movsx  ebp,cl
c0008442:	75 5e                	jne    c00084a2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0008444:	83 fd 2e             	cmp    ebp,0x2e
c0008447:	75 59                	jne    c00084a2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0008449:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000844d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0008452:	74 18                	je     c000846c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0008454:	83 fd 2e             	cmp    ebp,0x2e
c0008457:	74 53                	je     c00084ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0008459:	89 fa                	mov    edx,edi
c000845b:	42                   	inc    edx
c000845c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0008460:	83 f9 2f             	cmp    ecx,0x2f
c0008463:	74 f6                	je     c000845b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0008465:	83 f9 5c             	cmp    ecx,0x5c
c0008468:	74 f1                	je     c000845b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000846a:	eb ca                	jmp    c0008436 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000846c:	83 fd 2e             	cmp    ebp,0x2e
c000846f:	74 3b                	je     c00084ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0008471:	83 f8 03             	cmp    eax,0x3
c0008474:	74 c0                	je     c0008436 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0008476:	42                   	inc    edx
c0008477:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000847b:	83 f9 5c             	cmp    ecx,0x5c
c000847e:	74 f6                	je     c0008476 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0008480:	83 f9 2f             	cmp    ecx,0x2f
c0008483:	74 f1                	je     c0008476 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0008485:	48                   	dec    eax
c0008486:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000848a:	75 06                	jne    c0008492 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000848c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0008490:	eb f3                	jmp    c0008485 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0008492:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0008496:	74 07                	je     c000849f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0008498:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000849c:	48                   	dec    eax
c000849d:	eb f3                	jmp    c0008492 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000849f:	40                   	inc    eax
c00084a0:	eb 94                	jmp    c0008436 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c00084a2:	83 fd 5c             	cmp    ebp,0x5c
c00084a5:	74 8f                	je     c0008436 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c00084a7:	83 fd 2f             	cmp    ebp,0x2f
c00084aa:	74 8a                	je     c0008436 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c00084ac:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c00084af:	40                   	inc    eax
c00084b0:	eb 84                	jmp    c0008436 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c00084b2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00084b6:	83 ec 0c             	sub    esp,0xc
c00084b9:	56                   	push   esi
c00084ba:	e8 b1 80 ff ff       	call   c0000570 <strlen>
c00084bf:	83 c4 10             	add    esp,0x10
c00084c2:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c00084c7:	74 17                	je     c00084e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c00084c9:	83 ec 0c             	sub    esp,0xc
c00084cc:	56                   	push   esi
c00084cd:	e8 9e 80 ff ff       	call   c0000570 <strlen>
c00084d2:	83 c4 10             	add    esp,0x10
c00084d5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c00084da:	74 04                	je     c00084e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c00084dc:	31 ff                	xor    edi,edi
c00084de:	eb 5c                	jmp    c000853c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c00084e0:	83 ec 0c             	sub    esp,0xc
c00084e3:	56                   	push   esi
c00084e4:	e8 87 80 ff ff       	call   c0000570 <strlen>
c00084e9:	83 c4 10             	add    esp,0x10
c00084ec:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c00084f1:	74 e9                	je     c00084dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c00084f3:	83 ec 0c             	sub    esp,0xc
c00084f6:	56                   	push   esi
c00084f7:	e8 74 80 ff ff       	call   c0000570 <strlen>
c00084fc:	83 c4 10             	add    esp,0x10
c00084ff:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0008504:	eb b0                	jmp    c00084b6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0008506:	52                   	push   edx
c0008507:	52                   	push   edx
c0008508:	56                   	push   esi
c0008509:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000850d:	55                   	push   ebp
c000850e:	e8 2d 81 ff ff       	call   c0000640 <strcpy>
c0008513:	59                   	pop    ecx
c0008514:	58                   	pop    eax
c0008515:	56                   	push   esi
c0008516:	55                   	push   ebp
c0008517:	e8 b5 f8 ff ff       	call   c0007dd1 <KeDereferenceSymlink(char const*, char*)>
c000851c:	83 c4 10             	add    esp,0x10
c000851f:	48                   	dec    eax
c0008520:	75 37                	jne    c0008559 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008522:	50                   	push   eax
c0008523:	56                   	push   esi
c0008524:	55                   	push   ebp
c0008525:	68 77 81 02 c0       	push   0xc0028177
c000852a:	e8 4d ea ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	8d 47 01             	lea    eax,[edi+0x1]
c0008535:	83 ff 14             	cmp    edi,0x14
c0008538:	74 08                	je     c0008542 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000853a:	89 c7                	mov    edi,eax
c000853c:	85 db                	test   ebx,ebx
c000853e:	75 c6                	jne    c0008506 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008540:	eb 17                	jmp    c0008559 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008542:	83 ec 0c             	sub    esp,0xc
c0008545:	bf 15 00 00 00       	mov    edi,0x15
c000854a:	68 92 81 02 c0       	push   0xc0028192
c000854f:	e8 3c 7c 00 00       	call   c0010190 <KePanic(char const*)>
c0008554:	83 c4 10             	add    esp,0x10
c0008557:	eb e3                	jmp    c000853c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008559:	81 c4 0c 04 00 00    	add    esp,0x40c
c000855f:	5b                   	pop    ebx
c0008560:	5e                   	pop    esi
c0008561:	5f                   	pop    edi
c0008562:	5d                   	pop    ebp
c0008563:	c3                   	ret    

c0008564 <File::File(char const*, Process*, bool)>:
c0008564:	83 ec 1c             	sub    esp,0x1c
c0008567:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000856b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000856f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008573:	83 ec 08             	sub    esp,0x8
c0008576:	6a 00                	push   0x0
c0008578:	50                   	push   eax
c0008579:	e8 56 ad 00 00       	call   c00132d4 <UnixFile::UnixFile(int)>
c000857e:	83 c4 10             	add    esp,0x10
c0008581:	ba 44 82 02 c0       	mov    edx,0xc0028244
c0008586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000858a:	89 10                	mov    DWORD PTR [eax],edx
c000858c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008591:	85 c0                	test   eax,eax
c0008593:	74 0f                	je     c00085a4 <File::File(char const*, Process*, bool)+0x40>
c0008595:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000859a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000859e:	74 04                	je     c00085a4 <File::File(char const*, Process*, bool)+0x40>
c00085a0:	b0 01                	mov    al,0x1
c00085a2:	eb 02                	jmp    c00085a6 <File::File(char const*, Process*, bool)+0x42>
c00085a4:	b0 00                	mov    al,0x0
c00085a6:	0f b6 c0             	movzx  eax,al
c00085a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00085ad:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00085b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00085b7:	83 c2 0d             	add    edx,0xd
c00085ba:	50                   	push   eax
c00085bb:	51                   	push   ecx
c00085bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00085c0:	52                   	push   edx
c00085c1:	e8 84 fd ff ff       	call   c000834a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00085c6:	83 c4 10             	add    esp,0x10
c00085c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00085d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00085d4:	83 c2 0d             	add    edx,0xd
c00085d7:	83 ec 04             	sub    esp,0x4
c00085da:	50                   	push   eax
c00085db:	52                   	push   edx
c00085dc:	68 b8 81 02 c0       	push   0xc00281b8
c00085e1:	e8 96 e9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00085e6:	83 c4 10             	add    esp,0x10
c00085e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085ed:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00085f0:	83 e8 41             	sub    eax,0x41
c00085f3:	88 c2                	mov    dl,al
c00085f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085f9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00085ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008603:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008607:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000860b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008611:	0f b6 c0             	movzx  eax,al
c0008614:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c000861b:	85 c0                	test   eax,eax
c000861d:	74 3e                	je     c000865d <File::File(char const*, Process*, bool)+0xf9>
c000861f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008623:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008629:	0f b6 c0             	movzx  eax,al
c000862c:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008633:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008639:	85 c0                	test   eax,eax
c000863b:	75 20                	jne    c000865d <File::File(char const*, Process*, bool)+0xf9>
c000863d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008641:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008647:	0f b6 c0             	movzx  eax,al
c000864a:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008651:	83 ec 0c             	sub    esp,0xc
c0008654:	50                   	push   eax
c0008655:	e8 2e 28 00 00       	call   c000ae88 <LogicalDisk::mount()>
c000865a:	83 c4 10             	add    esp,0x10
c000865d:	90                   	nop
c000865e:	83 c4 1c             	add    esp,0x1c
c0008661:	c3                   	ret    

c0008662 <File::File(char const*, Process*)>:
c0008662:	83 ec 0c             	sub    esp,0xc
c0008665:	6a 01                	push   0x1
c0008667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000866b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000866f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008673:	e8 ec fe ff ff       	call   c0008564 <File::File(char const*, Process*, bool)>
c0008678:	83 c4 10             	add    esp,0x10
c000867b:	90                   	nop
c000867c:	83 c4 0c             	add    esp,0xc
c000867f:	c3                   	ret    

c0008680 <File::open(FileOpenMode)>:
c0008680:	53                   	push   ebx
c0008681:	b8 0b 00 00 00       	mov    eax,0xb
c0008686:	83 ec 08             	sub    esp,0x8
c0008689:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000868d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008694:	83 fa 19             	cmp    edx,0x19
c0008697:	77 40                	ja     c00086d9 <File::open(FileOpenMode)+0x59>
c0008699:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c00086a0:	85 d2                	test   edx,edx
c00086a2:	74 35                	je     c00086d9 <File::open(FileOpenMode)+0x59>
c00086a4:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086aa:	85 d2                	test   edx,edx
c00086ac:	74 2b                	je     c00086d9 <File::open(FileOpenMode)+0x59>
c00086ae:	b8 06 00 00 00       	mov    eax,0x6
c00086b3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00086b7:	75 20                	jne    c00086d9 <File::open(FileOpenMode)+0x59>
c00086b9:	8b 02                	mov    eax,DWORD PTR [edx]
c00086bb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00086c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086c5:	51                   	push   ecx
c00086c6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00086c9:	51                   	push   ecx
c00086ca:	52                   	push   edx
c00086cb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00086ce:	83 c4 10             	add    esp,0x10
c00086d1:	85 c0                	test   eax,eax
c00086d3:	75 04                	jne    c00086d9 <File::open(FileOpenMode)+0x59>
c00086d5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00086d9:	83 c4 08             	add    esp,0x8
c00086dc:	5b                   	pop    ebx
c00086dd:	c3                   	ret    

c00086de <File::close()>:
c00086de:	53                   	push   ebx
c00086df:	b8 0b 00 00 00       	mov    eax,0xb
c00086e4:	83 ec 08             	sub    esp,0x8
c00086e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086eb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00086f2:	83 f9 19             	cmp    ecx,0x19
c00086f5:	77 41                	ja     c0008738 <File::close()+0x5a>
c00086f7:	8b 1c 8d e0 2a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffcd520]
c00086fe:	85 db                	test   ebx,ebx
c0008700:	74 36                	je     c0008738 <File::close()+0x5a>
c0008702:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008709:	74 2d                	je     c0008738 <File::close()+0x5a>
c000870b:	b8 05 00 00 00       	mov    eax,0x5
c0008710:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008714:	74 22                	je     c0008738 <File::close()+0x5a>
c0008716:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000871a:	8b 04 8d e0 2a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffcd520]
c0008721:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008727:	53                   	push   ebx
c0008728:	53                   	push   ebx
c0008729:	8b 08                	mov    ecx,DWORD PTR [eax]
c000872b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008731:	50                   	push   eax
c0008732:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008735:	83 c4 10             	add    esp,0x10
c0008738:	83 c4 08             	add    esp,0x8
c000873b:	5b                   	pop    ebx
c000873c:	c3                   	ret    
c000873d:	90                   	nop

c000873e <File::seek(unsigned long long)>:
c000873e:	56                   	push   esi
c000873f:	53                   	push   ebx
c0008740:	b8 0b 00 00 00       	mov    eax,0xb
c0008745:	51                   	push   ecx
c0008746:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000874a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000874e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008755:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008759:	83 fa 19             	cmp    edx,0x19
c000875c:	77 31                	ja     c000878f <File::seek(unsigned long long)+0x51>
c000875e:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008765:	85 d2                	test   edx,edx
c0008767:	74 26                	je     c000878f <File::seek(unsigned long long)+0x51>
c0008769:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000876f:	85 d2                	test   edx,edx
c0008771:	74 1c                	je     c000878f <File::seek(unsigned long long)+0x51>
c0008773:	b8 05 00 00 00       	mov    eax,0x5
c0008778:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000877c:	74 11                	je     c000878f <File::seek(unsigned long long)+0x51>
c000877e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008780:	53                   	push   ebx
c0008781:	51                   	push   ecx
c0008782:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008788:	52                   	push   edx
c0008789:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000878c:	83 c4 10             	add    esp,0x10
c000878f:	5a                   	pop    edx
c0008790:	5b                   	pop    ebx
c0008791:	5e                   	pop    esi
c0008792:	c3                   	ret    
c0008793:	90                   	nop

c0008794 <File::truncate(unsigned long long)>:
c0008794:	56                   	push   esi
c0008795:	53                   	push   ebx
c0008796:	b8 0b 00 00 00       	mov    eax,0xb
c000879b:	51                   	push   ecx
c000879c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00087a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00087a4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00087ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00087af:	83 fa 19             	cmp    edx,0x19
c00087b2:	77 31                	ja     c00087e5 <File::truncate(unsigned long long)+0x51>
c00087b4:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c00087bb:	85 d2                	test   edx,edx
c00087bd:	74 26                	je     c00087e5 <File::truncate(unsigned long long)+0x51>
c00087bf:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00087c5:	85 d2                	test   edx,edx
c00087c7:	74 1c                	je     c00087e5 <File::truncate(unsigned long long)+0x51>
c00087c9:	b8 05 00 00 00       	mov    eax,0x5
c00087ce:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00087d2:	74 11                	je     c00087e5 <File::truncate(unsigned long long)+0x51>
c00087d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00087d6:	53                   	push   ebx
c00087d7:	51                   	push   ecx
c00087d8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00087de:	52                   	push   edx
c00087df:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00087e2:	83 c4 10             	add    esp,0x10
c00087e5:	5a                   	pop    edx
c00087e6:	5b                   	pop    ebx
c00087e7:	5e                   	pop    esi
c00087e8:	c3                   	ret    
c00087e9:	90                   	nop

c00087ea <File::tell(unsigned long long*)>:
c00087ea:	83 ec 0c             	sub    esp,0xc
c00087ed:	b8 0b 00 00 00       	mov    eax,0xb
c00087f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00087f6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00087fd:	83 fa 19             	cmp    edx,0x19
c0008800:	77 34                	ja     c0008836 <File::tell(unsigned long long*)+0x4c>
c0008802:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008809:	85 d2                	test   edx,edx
c000880b:	74 29                	je     c0008836 <File::tell(unsigned long long*)+0x4c>
c000880d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008813:	85 d2                	test   edx,edx
c0008815:	74 1f                	je     c0008836 <File::tell(unsigned long long*)+0x4c>
c0008817:	b8 05 00 00 00       	mov    eax,0x5
c000881c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008820:	74 14                	je     c0008836 <File::tell(unsigned long long*)+0x4c>
c0008822:	50                   	push   eax
c0008823:	8b 02                	mov    eax,DWORD PTR [edx]
c0008825:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008829:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000882f:	52                   	push   edx
c0008830:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008833:	83 c4 10             	add    esp,0x10
c0008836:	83 c4 0c             	add    esp,0xc
c0008839:	c3                   	ret    

c000883a <File::rewind()>:
c000883a:	83 ec 10             	sub    esp,0x10
c000883d:	6a 00                	push   0x0
c000883f:	6a 00                	push   0x0
c0008841:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008845:	e8 f4 fe ff ff       	call   c000873e <File::seek(unsigned long long)>
c000884a:	83 c4 1c             	add    esp,0x1c
c000884d:	c3                   	ret    

c000884e <File::unlink()>:
c000884e:	83 ec 0c             	sub    esp,0xc
c0008851:	b8 0b 00 00 00       	mov    eax,0xb
c0008856:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000885a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008861:	83 f9 19             	cmp    ecx,0x19
c0008864:	77 2f                	ja     c0008895 <File::unlink()+0x47>
c0008866:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c000886d:	85 c9                	test   ecx,ecx
c000886f:	74 24                	je     c0008895 <File::unlink()+0x47>
c0008871:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008877:	85 c9                	test   ecx,ecx
c0008879:	74 1a                	je     c0008895 <File::unlink()+0x47>
c000887b:	b8 06 00 00 00       	mov    eax,0x6
c0008880:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008884:	75 0f                	jne    c0008895 <File::unlink()+0x47>
c0008886:	83 c2 0d             	add    edx,0xd
c0008889:	50                   	push   eax
c000888a:	50                   	push   eax
c000888b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000888d:	52                   	push   edx
c000888e:	51                   	push   ecx
c000888f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008892:	83 c4 10             	add    esp,0x10
c0008895:	83 c4 0c             	add    esp,0xc
c0008898:	c3                   	ret    
c0008899:	90                   	nop

c000889a <File::rename(char const*)>:
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	b8 0b 00 00 00       	mov    eax,0xb
c00088a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088ad:	83 f9 19             	cmp    ecx,0x19
c00088b0:	77 32                	ja     c00088e4 <File::rename(char const*)+0x4a>
c00088b2:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c00088b9:	85 c9                	test   ecx,ecx
c00088bb:	74 27                	je     c00088e4 <File::rename(char const*)+0x4a>
c00088bd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088c3:	85 c9                	test   ecx,ecx
c00088c5:	74 1d                	je     c00088e4 <File::rename(char const*)+0x4a>
c00088c7:	b8 06 00 00 00       	mov    eax,0x6
c00088cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088d0:	75 12                	jne    c00088e4 <File::rename(char const*)+0x4a>
c00088d2:	83 c2 0d             	add    edx,0xd
c00088d5:	50                   	push   eax
c00088d6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00088dc:	52                   	push   edx
c00088dd:	51                   	push   ecx
c00088de:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00088e1:	83 c4 10             	add    esp,0x10
c00088e4:	83 c4 0c             	add    esp,0xc
c00088e7:	c3                   	ret    

c00088e8 <File::chfatattr(unsigned char, unsigned char)>:
c00088e8:	57                   	push   edi
c00088e9:	b8 0b 00 00 00       	mov    eax,0xb
c00088ee:	56                   	push   esi
c00088ef:	53                   	push   ebx
c00088f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00088f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008903:	83 f9 19             	cmp    ecx,0x19
c0008906:	77 37                	ja     c000893f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008908:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c000890f:	85 c9                	test   ecx,ecx
c0008911:	74 2c                	je     c000893f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008913:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008919:	85 c9                	test   ecx,ecx
c000891b:	74 22                	je     c000893f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000891d:	b8 06 00 00 00       	mov    eax,0x6
c0008922:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008926:	75 17                	jne    c000893f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008928:	8b 39                	mov    edi,DWORD PTR [ecx]
c000892a:	89 f0                	mov    eax,esi
c000892c:	83 c2 0d             	add    edx,0xd
c000892f:	0f b6 f0             	movzx  esi,al
c0008932:	0f b6 db             	movzx  ebx,bl
c0008935:	56                   	push   esi
c0008936:	53                   	push   ebx
c0008937:	52                   	push   edx
c0008938:	51                   	push   ecx
c0008939:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000893c:	83 c4 10             	add    esp,0x10
c000893f:	5b                   	pop    ebx
c0008940:	5e                   	pop    esi
c0008941:	5f                   	pop    edi
c0008942:	c3                   	ret    
c0008943:	90                   	nop

c0008944 <File::exists()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	31 c0                	xor    eax,eax
c0008949:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000894d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008954:	83 f9 19             	cmp    ecx,0x19
c0008957:	77 24                	ja     c000897d <File::exists()+0x39>
c0008959:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008960:	85 c9                	test   ecx,ecx
c0008962:	74 19                	je     c000897d <File::exists()+0x39>
c0008964:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000896a:	85 c9                	test   ecx,ecx
c000896c:	74 0f                	je     c000897d <File::exists()+0x39>
c000896e:	83 c2 0d             	add    edx,0xd
c0008971:	50                   	push   eax
c0008972:	50                   	push   eax
c0008973:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008975:	52                   	push   edx
c0008976:	51                   	push   ecx
c0008977:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000897a:	83 c4 10             	add    esp,0x10
c000897d:	83 c4 0c             	add    esp,0xc
c0008980:	c3                   	ret    
c0008981:	90                   	nop

c0008982 <File::stat(unsigned long long*, bool*)>:
c0008982:	56                   	push   esi
c0008983:	53                   	push   ebx
c0008984:	50                   	push   eax
c0008985:	b8 0b 00 00 00       	mov    eax,0xb
c000898a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000898e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008992:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008999:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000899d:	83 f9 19             	cmp    ecx,0x19
c00089a0:	77 3d                	ja     c00089df <File::stat(unsigned long long*, bool*)+0x5d>
c00089a2:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c00089a9:	85 c9                	test   ecx,ecx
c00089ab:	74 32                	je     c00089df <File::stat(unsigned long long*, bool*)+0x5d>
c00089ad:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00089b3:	85 c9                	test   ecx,ecx
c00089b5:	74 28                	je     c00089df <File::stat(unsigned long long*, bool*)+0x5d>
c00089b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00089b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00089bd:	74 13                	je     c00089d2 <File::stat(unsigned long long*, bool*)+0x50>
c00089bf:	83 ec 04             	sub    esp,0x4
c00089c2:	56                   	push   esi
c00089c3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00089c9:	51                   	push   ecx
c00089ca:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00089cd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00089d0:	eb 0a                	jmp    c00089dc <File::stat(unsigned long long*, bool*)+0x5a>
c00089d2:	53                   	push   ebx
c00089d3:	83 c2 0d             	add    edx,0xd
c00089d6:	56                   	push   esi
c00089d7:	52                   	push   edx
c00089d8:	51                   	push   ecx
c00089d9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00089dc:	83 c4 10             	add    esp,0x10
c00089df:	5a                   	pop    edx
c00089e0:	5b                   	pop    ebx
c00089e1:	5e                   	pop    esi
c00089e2:	c3                   	ret    

c00089e3 <Fs::setcwd(Process*, char*)>:
c00089e3:	55                   	push   ebp
c00089e4:	57                   	push   edi
c00089e5:	56                   	push   esi
c00089e6:	53                   	push   ebx
c00089e7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00089ed:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00089f4:	6a 00                	push   0x0
c00089f6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00089fc:	57                   	push   edi
c00089fd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0008a04:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008a08:	56                   	push   esi
c0008a09:	e8 3c f9 ff ff       	call   c000834a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008a0e:	89 34 24             	mov    DWORD PTR [esp],esi
c0008a11:	e8 5a 7b ff ff       	call   c0000570 <strlen>
c0008a16:	83 c4 10             	add    esp,0x10
c0008a19:	83 f8 02             	cmp    eax,0x2
c0008a1c:	77 15                	ja     c0008a33 <Fs::setcwd(Process*, char*)+0x50>
c0008a1e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008a23:	83 eb 41             	sub    ebx,0x41
c0008a26:	8b 04 9d e0 2a 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcd520]
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 1c                	jne    c0008a4d <Fs::setcwd(Process*, char*)+0x6a>
c0008a31:	eb 2f                	jmp    c0008a62 <Fs::setcwd(Process*, char*)+0x7f>
c0008a33:	83 ec 0c             	sub    esp,0xc
c0008a36:	56                   	push   esi
c0008a37:	e8 34 7b ff ff       	call   c0000570 <strlen>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	83 f8 03             	cmp    eax,0x3
c0008a42:	75 57                	jne    c0008a9b <Fs::setcwd(Process*, char*)+0xb8>
c0008a44:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008a49:	75 50                	jne    c0008a9b <Fs::setcwd(Process*, char*)+0xb8>
c0008a4b:	eb d1                	jmp    c0008a1e <Fs::setcwd(Process*, char*)+0x3b>
c0008a4d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008a54:	75 0c                	jne    c0008a62 <Fs::setcwd(Process*, char*)+0x7f>
c0008a56:	83 ec 0c             	sub    esp,0xc
c0008a59:	50                   	push   eax
c0008a5a:	e8 29 24 00 00       	call   c000ae88 <LogicalDisk::mount()>
c0008a5f:	83 c4 10             	add    esp,0x10
c0008a62:	b8 03 00 00 00       	mov    eax,0x3
c0008a67:	83 fb 19             	cmp    ebx,0x19
c0008a6a:	0f 87 c6 00 00 00    	ja     c0008b36 <Fs::setcwd(Process*, char*)+0x153>
c0008a70:	8b 14 9d e0 2a 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffcd520]
c0008a77:	b8 05 00 00 00       	mov    eax,0x5
c0008a7c:	85 d2                	test   edx,edx
c0008a7e:	0f 84 b2 00 00 00    	je     c0008b36 <Fs::setcwd(Process*, char*)+0x153>
c0008a84:	b8 06 00 00 00       	mov    eax,0x6
c0008a89:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008a90:	0f 85 92 00 00 00    	jne    c0008b28 <Fs::setcwd(Process*, char*)+0x145>
c0008a96:	e9 9b 00 00 00       	jmp    c0008b36 <Fs::setcwd(Process*, char*)+0x153>
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	68 14 01 00 00       	push   0x114
c0008aa3:	e8 93 72 00 00       	call   c000fd3b <malloc>
c0008aa8:	83 c4 0c             	add    esp,0xc
c0008aab:	89 c3                	mov    ebx,eax
c0008aad:	55                   	push   ebp
c0008aae:	56                   	push   esi
c0008aaf:	50                   	push   eax
c0008ab0:	e8 ad fb ff ff       	call   c0008662 <File::File(char const*, Process*)>
c0008ab5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008aba:	83 c4 0c             	add    esp,0xc
c0008abd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008ac1:	50                   	push   eax
c0008ac2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008ac6:	50                   	push   eax
c0008ac7:	53                   	push   ebx
c0008ac8:	e8 b5 fe ff ff       	call   c0008982 <File::stat(unsigned long long*, bool*)>
c0008acd:	83 c4 10             	add    esp,0x10
c0008ad0:	83 f8 02             	cmp    eax,0x2
c0008ad3:	74 27                	je     c0008afc <Fs::setcwd(Process*, char*)+0x119>
c0008ad5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008ada:	75 1c                	jne    c0008af8 <Fs::setcwd(Process*, char*)+0x115>
c0008adc:	b8 02 00 00 00       	mov    eax,0x2
c0008ae1:	85 db                	test   ebx,ebx
c0008ae3:	74 51                	je     c0008b36 <Fs::setcwd(Process*, char*)+0x153>
c0008ae5:	83 ec 0c             	sub    esp,0xc
c0008ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008aea:	53                   	push   ebx
c0008aeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008aee:	83 c4 10             	add    esp,0x10
c0008af1:	b8 02 00 00 00       	mov    eax,0x2
c0008af6:	eb 3e                	jmp    c0008b36 <Fs::setcwd(Process*, char*)+0x153>
c0008af8:	85 c0                	test   eax,eax
c0008afa:	74 1c                	je     c0008b18 <Fs::setcwd(Process*, char*)+0x135>
c0008afc:	b8 01 00 00 00       	mov    eax,0x1
c0008b01:	85 db                	test   ebx,ebx
c0008b03:	74 31                	je     c0008b36 <Fs::setcwd(Process*, char*)+0x153>
c0008b05:	83 ec 0c             	sub    esp,0xc
c0008b08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008b0a:	53                   	push   ebx
c0008b0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008b0e:	83 c4 10             	add    esp,0x10
c0008b11:	b8 01 00 00 00       	mov    eax,0x1
c0008b16:	eb 1e                	jmp    c0008b36 <Fs::setcwd(Process*, char*)+0x153>
c0008b18:	85 db                	test   ebx,ebx
c0008b1a:	74 0c                	je     c0008b28 <Fs::setcwd(Process*, char*)+0x145>
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008b21:	53                   	push   ebx
c0008b22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008b25:	83 c4 10             	add    esp,0x10
c0008b28:	50                   	push   eax
c0008b29:	50                   	push   eax
c0008b2a:	56                   	push   esi
c0008b2b:	57                   	push   edi
c0008b2c:	e8 0f 7b ff ff       	call   c0000640 <strcpy>
c0008b31:	83 c4 10             	add    esp,0x10
c0008b34:	31 c0                	xor    eax,eax
c0008b36:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008b3c:	5b                   	pop    ebx
c0008b3d:	5e                   	pop    esi
c0008b3e:	5f                   	pop    edi
c0008b3f:	5d                   	pop    ebp
c0008b40:	c3                   	ret    
c0008b41:	90                   	nop

c0008b42 <Directory::Directory(char const*, Process*)>:
c0008b42:	83 ec 0c             	sub    esp,0xc
c0008b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b49:	83 ec 08             	sub    esp,0x8
c0008b4c:	6a 00                	push   0x0
c0008b4e:	50                   	push   eax
c0008b4f:	e8 80 a7 00 00       	call   c00132d4 <UnixFile::UnixFile(int)>
c0008b54:	83 c4 10             	add    esp,0x10
c0008b57:	ba 60 82 02 c0       	mov    edx,0xc0028260
c0008b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b60:	89 10                	mov    DWORD PTR [eax],edx
c0008b62:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c0008b67:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008b6b:	0f 95 c0             	setne  al
c0008b6e:	0f b6 c0             	movzx  eax,al
c0008b71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008b75:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008b7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b7f:	83 c2 0d             	add    edx,0xd
c0008b82:	50                   	push   eax
c0008b83:	51                   	push   ecx
c0008b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b88:	52                   	push   edx
c0008b89:	e8 bc f7 ff ff       	call   c000834a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008b8e:	83 c4 10             	add    esp,0x10
c0008b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b95:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008b98:	83 e8 41             	sub    eax,0x41
c0008b9b:	88 c2                	mov    dl,al
c0008b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ba1:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bab:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bb3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008bb9:	0f b6 c0             	movzx  eax,al
c0008bbc:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008bc3:	85 c0                	test   eax,eax
c0008bc5:	74 3e                	je     c0008c05 <Directory::Directory(char const*, Process*)+0xc3>
c0008bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bcb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008bd1:	0f b6 c0             	movzx  eax,al
c0008bd4:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008bdb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008be1:	85 c0                	test   eax,eax
c0008be3:	75 20                	jne    c0008c05 <Directory::Directory(char const*, Process*)+0xc3>
c0008be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008bef:	0f b6 c0             	movzx  eax,al
c0008bf2:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0008bf9:	83 ec 0c             	sub    esp,0xc
c0008bfc:	50                   	push   eax
c0008bfd:	e8 86 22 00 00       	call   c000ae88 <LogicalDisk::mount()>
c0008c02:	83 c4 10             	add    esp,0x10
c0008c05:	90                   	nop
c0008c06:	83 c4 0c             	add    esp,0xc
c0008c09:	c3                   	ret    

c0008c0a <Directory::open()>:
c0008c0a:	53                   	push   ebx
c0008c0b:	b8 0b 00 00 00       	mov    eax,0xb
c0008c10:	83 ec 08             	sub    esp,0x8
c0008c13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008c17:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008c1e:	83 fa 19             	cmp    edx,0x19
c0008c21:	77 3d                	ja     c0008c60 <Directory::open()+0x56>
c0008c23:	8b 14 95 e0 2a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcd520]
c0008c2a:	85 d2                	test   edx,edx
c0008c2c:	74 32                	je     c0008c60 <Directory::open()+0x56>
c0008c2e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008c34:	85 d2                	test   edx,edx
c0008c36:	74 28                	je     c0008c60 <Directory::open()+0x56>
c0008c38:	b8 06 00 00 00       	mov    eax,0x6
c0008c3d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008c41:	75 1d                	jne    c0008c60 <Directory::open()+0x56>
c0008c43:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008c49:	50                   	push   eax
c0008c4a:	8b 02                	mov    eax,DWORD PTR [edx]
c0008c4c:	51                   	push   ecx
c0008c4d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008c50:	51                   	push   ecx
c0008c51:	52                   	push   edx
c0008c52:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008c55:	83 c4 10             	add    esp,0x10
c0008c58:	85 c0                	test   eax,eax
c0008c5a:	75 04                	jne    c0008c60 <Directory::open()+0x56>
c0008c5c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008c60:	83 c4 08             	add    esp,0x8
c0008c63:	5b                   	pop    ebx
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <Directory::close()>:
c0008c66:	53                   	push   ebx
c0008c67:	b8 0b 00 00 00       	mov    eax,0xb
c0008c6c:	83 ec 08             	sub    esp,0x8
c0008c6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c73:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008c7a:	83 f9 19             	cmp    ecx,0x19
c0008c7d:	77 41                	ja     c0008cc0 <Directory::close()+0x5a>
c0008c7f:	8b 1c 8d e0 2a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffcd520]
c0008c86:	85 db                	test   ebx,ebx
c0008c88:	74 36                	je     c0008cc0 <Directory::close()+0x5a>
c0008c8a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008c91:	74 2d                	je     c0008cc0 <Directory::close()+0x5a>
c0008c93:	b8 05 00 00 00       	mov    eax,0x5
c0008c98:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008c9c:	74 22                	je     c0008cc0 <Directory::close()+0x5a>
c0008c9e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008ca2:	8b 04 8d e0 2a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffcd520]
c0008ca9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008caf:	53                   	push   ebx
c0008cb0:	53                   	push   ebx
c0008cb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008cb3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008cb9:	50                   	push   eax
c0008cba:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008cbd:	83 c4 10             	add    esp,0x10
c0008cc0:	83 c4 08             	add    esp,0x8
c0008cc3:	5b                   	pop    ebx
c0008cc4:	c3                   	ret    
c0008cc5:	90                   	nop

c0008cc6 <Directory::unlink()>:
c0008cc6:	83 ec 0c             	sub    esp,0xc
c0008cc9:	b8 0b 00 00 00       	mov    eax,0xb
c0008cce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008cd2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008cd9:	83 f9 19             	cmp    ecx,0x19
c0008cdc:	77 2f                	ja     c0008d0d <Directory::unlink()+0x47>
c0008cde:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008ce5:	85 c9                	test   ecx,ecx
c0008ce7:	74 24                	je     c0008d0d <Directory::unlink()+0x47>
c0008ce9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008cef:	85 c9                	test   ecx,ecx
c0008cf1:	74 1a                	je     c0008d0d <Directory::unlink()+0x47>
c0008cf3:	b8 06 00 00 00       	mov    eax,0x6
c0008cf8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008cfc:	75 0f                	jne    c0008d0d <Directory::unlink()+0x47>
c0008cfe:	83 c2 0d             	add    edx,0xd
c0008d01:	50                   	push   eax
c0008d02:	50                   	push   eax
c0008d03:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008d05:	52                   	push   edx
c0008d06:	51                   	push   ecx
c0008d07:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008d0a:	83 c4 10             	add    esp,0x10
c0008d0d:	83 c4 0c             	add    esp,0xc
c0008d10:	c3                   	ret    
c0008d11:	90                   	nop

c0008d12 <Directory::rename(char const*)>:
c0008d12:	83 ec 0c             	sub    esp,0xc
c0008d15:	b8 0b 00 00 00       	mov    eax,0xb
c0008d1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008d25:	83 f9 19             	cmp    ecx,0x19
c0008d28:	77 32                	ja     c0008d5c <Directory::rename(char const*)+0x4a>
c0008d2a:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008d31:	85 c9                	test   ecx,ecx
c0008d33:	74 27                	je     c0008d5c <Directory::rename(char const*)+0x4a>
c0008d35:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008d3b:	85 c9                	test   ecx,ecx
c0008d3d:	74 1d                	je     c0008d5c <Directory::rename(char const*)+0x4a>
c0008d3f:	b8 06 00 00 00       	mov    eax,0x6
c0008d44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008d48:	75 12                	jne    c0008d5c <Directory::rename(char const*)+0x4a>
c0008d4a:	83 c2 0d             	add    edx,0xd
c0008d4d:	50                   	push   eax
c0008d4e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008d50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d54:	52                   	push   edx
c0008d55:	51                   	push   ecx
c0008d56:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	83 c4 0c             	add    esp,0xc
c0008d5f:	c3                   	ret    

c0008d60 <Directory::exists()>:
c0008d60:	83 ec 0c             	sub    esp,0xc
c0008d63:	31 c0                	xor    eax,eax
c0008d65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d69:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008d70:	83 f9 19             	cmp    ecx,0x19
c0008d73:	77 24                	ja     c0008d99 <Directory::exists()+0x39>
c0008d75:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008d7c:	85 c9                	test   ecx,ecx
c0008d7e:	74 19                	je     c0008d99 <Directory::exists()+0x39>
c0008d80:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008d86:	85 c9                	test   ecx,ecx
c0008d88:	74 0f                	je     c0008d99 <Directory::exists()+0x39>
c0008d8a:	83 c2 0d             	add    edx,0xd
c0008d8d:	50                   	push   eax
c0008d8e:	50                   	push   eax
c0008d8f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008d91:	52                   	push   edx
c0008d92:	51                   	push   ecx
c0008d93:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008d96:	83 c4 10             	add    esp,0x10
c0008d99:	83 c4 0c             	add    esp,0xc
c0008d9c:	c3                   	ret    
c0008d9d:	90                   	nop

c0008d9e <Directory::read(dirent*)>:
c0008d9e:	83 ec 1c             	sub    esp,0x1c
c0008da1:	b8 0b 00 00 00       	mov    eax,0xb
c0008da6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008daa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008db1:	83 f9 19             	cmp    ecx,0x19
c0008db4:	77 30                	ja     c0008de6 <Directory::read(dirent*)+0x48>
c0008db6:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008dbd:	85 c9                	test   ecx,ecx
c0008dbf:	74 25                	je     c0008de6 <Directory::read(dirent*)+0x48>
c0008dc1:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008dc8:	74 1c                	je     c0008de6 <Directory::read(dirent*)+0x48>
c0008dca:	83 ec 0c             	sub    esp,0xc
c0008dcd:	8b 02                	mov    eax,DWORD PTR [edx]
c0008dcf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0008dd3:	51                   	push   ecx
c0008dd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008dd8:	6a 00                	push   0x0
c0008dda:	68 10 01 00 00       	push   0x110
c0008ddf:	52                   	push   edx
c0008de0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008de3:	83 c4 20             	add    esp,0x20
c0008de6:	83 c4 1c             	add    esp,0x1c
c0008de9:	c3                   	ret    

c0008dea <Directory::create()>:
c0008dea:	83 ec 0c             	sub    esp,0xc
c0008ded:	b8 0b 00 00 00       	mov    eax,0xb
c0008df2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008df6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008dfd:	83 f9 19             	cmp    ecx,0x19
c0008e00:	77 2f                	ja     c0008e31 <Directory::create()+0x47>
c0008e02:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0008e09:	85 c9                	test   ecx,ecx
c0008e0b:	74 24                	je     c0008e31 <Directory::create()+0x47>
c0008e0d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008e13:	85 c9                	test   ecx,ecx
c0008e15:	74 1a                	je     c0008e31 <Directory::create()+0x47>
c0008e17:	b8 06 00 00 00       	mov    eax,0x6
c0008e1c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008e20:	75 0f                	jne    c0008e31 <Directory::create()+0x47>
c0008e22:	83 c2 0d             	add    edx,0xd
c0008e25:	50                   	push   eax
c0008e26:	50                   	push   eax
c0008e27:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008e29:	52                   	push   edx
c0008e2a:	51                   	push   ecx
c0008e2b:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008e2e:	83 c4 10             	add    esp,0x10
c0008e31:	83 c4 0c             	add    esp,0xc
c0008e34:	c3                   	ret    
c0008e35:	90                   	nop

c0008e36 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008e36:	b8 0a 00 00 00       	mov    eax,0xa
c0008e3b:	c3                   	ret    

c0008e3c <Bus::Bus(char const*)>:
c0008e3c:	83 ec 0c             	sub    esp,0xc
c0008e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e43:	83 ec 08             	sub    esp,0x8
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	50                   	push   eax
c0008e4b:	e8 3e 12 00 00       	call   c000a08e <Device::Device(char const*)>
c0008e50:	83 c4 10             	add    esp,0x10
c0008e53:	ba 7c 82 02 c0       	mov    edx,0xc002827c
c0008e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e5c:	89 10                	mov    DWORD PTR [eax],edx
c0008e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e62:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008e6c:	90                   	nop
c0008e6d:	83 c4 0c             	add    esp,0xc
c0008e70:	c3                   	ret    
c0008e71:	90                   	nop
c0008e72:	66 90                	xchg   ax,ax

c0008e74 <Bus::~Bus()>:
c0008e74:	83 ec 0c             	sub    esp,0xc
c0008e77:	ba 7c 82 02 c0       	mov    edx,0xc002827c
c0008e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e80:	89 10                	mov    DWORD PTR [eax],edx
c0008e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e86:	83 ec 0c             	sub    esp,0xc
c0008e89:	50                   	push   eax
c0008e8a:	e8 9f 0f 00 00       	call   c0009e2e <Device::~Device()>
c0008e8f:	83 c4 10             	add    esp,0x10
c0008e92:	90                   	nop
c0008e93:	83 c4 0c             	add    esp,0xc
c0008e96:	c3                   	ret    
c0008e97:	90                   	nop

c0008e98 <Bus::~Bus()>:
c0008e98:	83 ec 0c             	sub    esp,0xc
c0008e9b:	83 ec 0c             	sub    esp,0xc
c0008e9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea2:	e8 cd ff ff ff       	call   c0008e74 <Bus::~Bus()>
c0008ea7:	83 c4 10             	add    esp,0x10
c0008eaa:	83 ec 08             	sub    esp,0x8
c0008ead:	68 58 01 00 00       	push   0x158
c0008eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008eb6:	e8 99 49 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	83 c4 0c             	add    esp,0xc
c0008ec1:	c3                   	ret    

c0008ec2 <KeBeepThread(void*)>:
c0008ec2:	83 ec 0c             	sub    esp,0xc
c0008ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ec9:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0008ed0:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0008ed7:	75 01                	jne    c0008eda <KeBeepThread(void*)+0x18>
c0008ed9:	fb                   	sti    
c0008eda:	6b c0 0a             	imul   eax,eax,0xa
c0008edd:	52                   	push   edx
c0008ede:	52                   	push   edx
c0008edf:	99                   	cdq    
c0008ee0:	52                   	push   edx
c0008ee1:	50                   	push   eax
c0008ee2:	e8 35 e0 00 00       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c0008ee7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008eee:	e8 2c 21 01 00       	call   c001b01f <HalMakeBeep(int)>
c0008ef3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008efb:	83 c4 1c             	add    esp,0x1c
c0008efe:	e9 e5 de 00 00       	jmp    c0016de8 <blockTask(TaskState)>

c0008f03 <KeBeep(int, int, bool)>:
c0008f03:	56                   	push   esi
c0008f04:	53                   	push   ebx
c0008f05:	83 ec 10             	sub    esp,0x10
c0008f08:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f14:	e8 06 21 01 00       	call   c001b01f <HalMakeBeep(int)>
c0008f19:	83 c4 10             	add    esp,0x10
c0008f1c:	89 f0                	mov    eax,esi
c0008f1e:	84 c0                	test   al,al
c0008f20:	74 1f                	je     c0008f41 <KeBeep(int, int, bool)+0x3e>
c0008f22:	50                   	push   eax
c0008f23:	50                   	push   eax
c0008f24:	6b c3 0a             	imul   eax,ebx,0xa
c0008f27:	99                   	cdq    
c0008f28:	52                   	push   edx
c0008f29:	50                   	push   eax
c0008f2a:	e8 ed df 00 00       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c0008f2f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008f37:	83 c4 14             	add    esp,0x14
c0008f3a:	5b                   	pop    ebx
c0008f3b:	5e                   	pop    esi
c0008f3c:	e9 de 20 01 00       	jmp    c001b01f <HalMakeBeep(int)>
c0008f41:	68 e6 00 00 00       	push   0xe6
c0008f46:	53                   	push   ebx
c0008f47:	68 c2 8e 00 c0       	push   0xc0008ec2
c0008f4c:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0008f52:	e8 05 db 00 00       	call   c0016a5c <Process::createThread(void (*)(void*), void*, int)>
c0008f57:	83 c4 14             	add    esp,0x14
c0008f5a:	5b                   	pop    ebx
c0008f5b:	5e                   	pop    esi
c0008f5c:	c3                   	ret    
c0008f5d:	90                   	nop

c0008f5e <KeLoadTimezoneStrings()>:
c0008f5e:	55                   	push   ebp
c0008f5f:	89 e5                	mov    ebp,esp
c0008f61:	53                   	push   ebx
c0008f62:	83 ec 44             	sub    esp,0x44
c0008f65:	c6 05 20 23 03 c0 01 	mov    BYTE PTR ds:0xc0032320,0x1
c0008f6c:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008f73:	83 ec 0c             	sub    esp,0xc
c0008f76:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008f79:	e8 bd 6d 00 00       	call   c000fd3b <malloc>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	89 c3                	mov    ebx,eax
c0008f83:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c0008f88:	83 ec 04             	sub    esp,0x4
c0008f8b:	50                   	push   eax
c0008f8c:	68 a0 82 02 c0       	push   0xc00282a0
c0008f91:	53                   	push   ebx
c0008f92:	e8 cb f6 ff ff       	call   c0008662 <File::File(char const*, Process*)>
c0008f97:	83 c4 10             	add    esp,0x10
c0008f9a:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008f9d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008fa1:	75 10                	jne    c0008fb3 <KeLoadTimezoneStrings()+0x55>
c0008fa3:	83 ec 0c             	sub    esp,0xc
c0008fa6:	68 bf 82 02 c0       	push   0xc00282bf
c0008fab:	e8 e0 71 00 00       	call   c0010190 <KePanic(char const*)>
c0008fb0:	83 c4 10             	add    esp,0x10
c0008fb3:	83 ec 08             	sub    esp,0x8
c0008fb6:	6a 01                	push   0x1
c0008fb8:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008fbb:	e8 c0 f6 ff ff       	call   c0008680 <File::open(FileOpenMode)>
c0008fc0:	83 c4 10             	add    esp,0x10
c0008fc3:	83 ec 04             	sub    esp,0x4
c0008fc6:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008fc9:	50                   	push   eax
c0008fca:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008fcd:	50                   	push   eax
c0008fce:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008fd1:	e8 ac f9 ff ff       	call   c0008982 <File::stat(unsigned long long*, bool*)>
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008fdc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008fdf:	83 ec 08             	sub    esp,0x8
c0008fe2:	50                   	push   eax
c0008fe3:	68 d5 82 02 c0       	push   0xc00282d5
c0008fe8:	e8 8f df ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008fed:	83 c4 10             	add    esp,0x10
c0008ff0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008ff3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ff6:	83 c0 01             	add    eax,0x1
c0008ff9:	83 ec 0c             	sub    esp,0xc
c0008ffc:	50                   	push   eax
c0008ffd:	e8 39 6d 00 00       	call   c000fd3b <malloc>
c0009002:	83 c4 10             	add    esp,0x10
c0009005:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009008:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000900b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000900e:	83 ec 04             	sub    esp,0x4
c0009011:	50                   	push   eax
c0009012:	6a 00                	push   0x0
c0009014:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009017:	e8 d4 74 ff ff       	call   c00004f0 <memset>
c000901c:	83 c4 10             	add    esp,0x10
c000901f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009022:	8b 00                	mov    eax,DWORD PTR [eax]
c0009024:	83 c0 0c             	add    eax,0xc
c0009027:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009029:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000902c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000902f:	83 ec 0c             	sub    esp,0xc
c0009032:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0009035:	53                   	push   ebx
c0009036:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009039:	52                   	push   edx
c000903a:	50                   	push   eax
c000903b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000903e:	ff d1                	call   ecx
c0009040:	83 c4 20             	add    esp,0x20
c0009043:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0009046:	83 ec 08             	sub    esp,0x8
c0009049:	50                   	push   eax
c000904a:	68 e5 82 02 c0       	push   0xc00282e5
c000904f:	e8 28 df ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	83 ec 0c             	sub    esp,0xc
c000905a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000905d:	e8 7c f6 ff ff       	call   c00086de <File::close()>
c0009062:	83 c4 10             	add    esp,0x10
c0009065:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0009069:	74 15                	je     c0009080 <KeLoadTimezoneStrings()+0x122>
c000906b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000906e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009070:	83 c0 08             	add    eax,0x8
c0009073:	8b 00                	mov    eax,DWORD PTR [eax]
c0009075:	83 ec 0c             	sub    esp,0xc
c0009078:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000907b:	ff d0                	call   eax
c000907d:	83 c4 10             	add    esp,0x10
c0009080:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009087:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c000908e:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0009095:	7f 3a                	jg     c00090d1 <KeLoadTimezoneStrings()+0x173>
c0009097:	83 ec 0c             	sub    esp,0xc
c000909a:	6a 78                	push   0x78
c000909c:	e8 9a 6c 00 00       	call   c000fd3b <malloc>
c00090a1:	83 c4 10             	add    esp,0x10
c00090a4:	89 c2                	mov    edx,eax
c00090a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00090a9:	89 14 85 40 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdcc0],edx
c00090b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00090b3:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00090ba:	83 ec 08             	sub    esp,0x8
c00090bd:	68 ee 82 02 c0       	push   0xc00282ee
c00090c2:	50                   	push   eax
c00090c3:	e8 78 75 ff ff       	call   c0000640 <strcpy>
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c00090cf:	eb bd                	jmp    c000908e <KeLoadTimezoneStrings()+0x130>
c00090d1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00090d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00090db:	8d 50 01             	lea    edx,[eax+0x1]
c00090de:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00090e1:	89 c2                	mov    edx,eax
c00090e3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00090e6:	01 d0                	add    eax,edx
c00090e8:	8a 00                	mov    al,BYTE PTR [eax]
c00090ea:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c00090ed:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c00090f1:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c00090f4:	0f be c0             	movsx  eax,al
c00090f7:	83 f8 0d             	cmp    eax,0xd
c00090fa:	0f 84 82 01 00 00    	je     c0009282 <KeLoadTimezoneStrings()+0x324>
c0009100:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009103:	0f be c0             	movsx  eax,al
c0009106:	83 f8 09             	cmp    eax,0x9
c0009109:	75 44                	jne    c000914f <KeLoadTimezoneStrings()+0x1f1>
c000910b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000910e:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009115:	83 ec 0c             	sub    esp,0xc
c0009118:	50                   	push   eax
c0009119:	e8 52 74 ff ff       	call   c0000570 <strlen>
c000911e:	83 c4 10             	add    esp,0x10
c0009121:	83 f8 08             	cmp    eax,0x8
c0009124:	0f 96 c0             	setbe  al
c0009127:	0f b6 c0             	movzx  eax,al
c000912a:	85 c0                	test   eax,eax
c000912c:	0f 84 56 01 00 00    	je     c0009288 <KeLoadTimezoneStrings()+0x32a>
c0009132:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009135:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c000913c:	83 ec 08             	sub    esp,0x8
c000913f:	68 ee 82 02 c0       	push   0xc00282ee
c0009144:	50                   	push   eax
c0009145:	e8 f6 76 ff ff       	call   c0000840 <strcat>
c000914a:	83 c4 10             	add    esp,0x10
c000914d:	eb bc                	jmp    c000910b <KeLoadTimezoneStrings()+0x1ad>
c000914f:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009152:	0f be c0             	movsx  eax,al
c0009155:	83 f8 0a             	cmp    eax,0xa
c0009158:	0f 85 9b 00 00 00    	jne    c00091f9 <KeLoadTimezoneStrings()+0x29b>
c000915e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009161:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009168:	83 ec 0c             	sub    esp,0xc
c000916b:	50                   	push   eax
c000916c:	e8 ff 73 ff ff       	call   c0000570 <strlen>
c0009171:	83 c4 10             	add    esp,0x10
c0009174:	83 f8 35             	cmp    eax,0x35
c0009177:	0f 96 c0             	setbe  al
c000917a:	0f b6 c0             	movzx  eax,al
c000917d:	85 c0                	test   eax,eax
c000917f:	74 1d                	je     c000919e <KeLoadTimezoneStrings()+0x240>
c0009181:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009184:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c000918b:	83 ec 08             	sub    esp,0x8
c000918e:	68 ee 82 02 c0       	push   0xc00282ee
c0009193:	50                   	push   eax
c0009194:	e8 a7 76 ff ff       	call   c0000840 <strcat>
c0009199:	83 c4 10             	add    esp,0x10
c000919c:	eb c0                	jmp    c000915e <KeLoadTimezoneStrings()+0x200>
c000919e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c00091a2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00091a5:	89 c2                	mov    edx,eax
c00091a7:	c1 fa 1f             	sar    edx,0x1f
c00091aa:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00091ad:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00091b0:	39 c8                	cmp    eax,ecx
c00091b2:	89 d0                	mov    eax,edx
c00091b4:	19 d8                	sbb    eax,ebx
c00091b6:	0f 82 d2 00 00 00    	jb     c000928e <KeLoadTimezoneStrings()+0x330>
c00091bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00091bf:	a3 24 23 03 c0       	mov    ds:0xc0032324,eax
c00091c4:	83 ec 08             	sub    esp,0x8
c00091c7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00091ca:	68 f0 82 02 c0       	push   0xc00282f0
c00091cf:	e8 a8 dd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00091d4:	83 c4 10             	add    esp,0x10
c00091d7:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c00091dc:	83 ec 08             	sub    esp,0x8
c00091df:	50                   	push   eax
c00091e0:	68 05 83 02 c0       	push   0xc0028305
c00091e5:	e8 92 dd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00091ea:	83 c4 10             	add    esp,0x10
c00091ed:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c00091f4:	e9 9b 00 00 00       	jmp    c0009294 <KeLoadTimezoneStrings()+0x336>
c00091f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00091fc:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009203:	83 ec 0c             	sub    esp,0xc
c0009206:	50                   	push   eax
c0009207:	e8 64 73 ff ff       	call   c0000570 <strlen>
c000920c:	83 c4 10             	add    esp,0x10
c000920f:	83 f8 31             	cmp    eax,0x31
c0009212:	0f 96 c0             	setbe  al
c0009215:	0f b6 c0             	movzx  eax,al
c0009218:	85 c0                	test   eax,eax
c000921a:	74 1f                	je     c000923b <KeLoadTimezoneStrings()+0x2dd>
c000921c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000921f:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009226:	83 ec 08             	sub    esp,0x8
c0009229:	8d 55 c6             	lea    edx,[ebp-0x3a]
c000922c:	52                   	push   edx
c000922d:	50                   	push   eax
c000922e:	e8 0d 76 ff ff       	call   c0000840 <strcat>
c0009233:	83 c4 10             	add    esp,0x10
c0009236:	e9 9d fe ff ff       	jmp    c00090d8 <KeLoadTimezoneStrings()+0x17a>
c000923b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000923e:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009245:	83 ec 0c             	sub    esp,0xc
c0009248:	50                   	push   eax
c0009249:	e8 22 73 ff ff       	call   c0000570 <strlen>
c000924e:	83 c4 10             	add    esp,0x10
c0009251:	83 f8 32             	cmp    eax,0x32
c0009254:	0f 94 c0             	sete   al
c0009257:	0f b6 c0             	movzx  eax,al
c000925a:	85 c0                	test   eax,eax
c000925c:	0f 84 76 fe ff ff    	je     c00090d8 <KeLoadTimezoneStrings()+0x17a>
c0009262:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009265:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c000926c:	83 ec 08             	sub    esp,0x8
c000926f:	68 09 83 02 c0       	push   0xc0028309
c0009274:	50                   	push   eax
c0009275:	e8 c6 75 ff ff       	call   c0000840 <strcat>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	e9 56 fe ff ff       	jmp    c00090d8 <KeLoadTimezoneStrings()+0x17a>
c0009282:	90                   	nop
c0009283:	e9 50 fe ff ff       	jmp    c00090d8 <KeLoadTimezoneStrings()+0x17a>
c0009288:	90                   	nop
c0009289:	e9 4a fe ff ff       	jmp    c00090d8 <KeLoadTimezoneStrings()+0x17a>
c000928e:	90                   	nop
c000928f:	e9 44 fe ff ff       	jmp    c00090d8 <KeLoadTimezoneStrings()+0x17a>
c0009294:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c0009299:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c000929c:	7d 49                	jge    c00092e7 <KeLoadTimezoneStrings()+0x389>
c000929e:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c00092a3:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c00092a6:	0f 9c c0             	setl   al
c00092a9:	0f b6 d0             	movzx  edx,al
c00092ac:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c00092b1:	52                   	push   edx
c00092b2:	50                   	push   eax
c00092b3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00092b6:	68 0e 83 02 c0       	push   0xc002830e
c00092bb:	e8 bc dc ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00092c0:	83 c4 10             	add    esp,0x10
c00092c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00092c6:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c00092cd:	83 ec 04             	sub    esp,0x4
c00092d0:	50                   	push   eax
c00092d1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00092d4:	68 1c 83 02 c0       	push   0xc002831c
c00092d9:	e8 9e dc ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00092de:	83 c4 10             	add    esp,0x10
c00092e1:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c00092e5:	eb ad                	jmp    c0009294 <KeLoadTimezoneStrings()+0x336>
c00092e7:	90                   	nop
c00092e8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00092eb:	c9                   	leave  
c00092ec:	c3                   	ret    

c00092ed <KeGetTimezoneStringFromID(int)>:
c00092ed:	55                   	push   ebp
c00092ee:	89 e5                	mov    ebp,esp
c00092f0:	83 ec 08             	sub    esp,0x8
c00092f3:	83 ec 08             	sub    esp,0x8
c00092f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00092f9:	68 25 83 02 c0       	push   0xc0028325
c00092fe:	e8 79 dc ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009303:	83 c4 10             	add    esp,0x10
c0009306:	a0 20 23 03 c0       	mov    al,ds:0xc0032320
c000930b:	83 f0 01             	xor    eax,0x1
c000930e:	0f b6 c0             	movzx  eax,al
c0009311:	85 c0                	test   eax,eax
c0009313:	74 15                	je     c000932a <KeGetTimezoneStringFromID(int)+0x3d>
c0009315:	e8 44 fc ff ff       	call   c0008f5e <KeLoadTimezoneStrings()>
c000931a:	83 ec 0c             	sub    esp,0xc
c000931d:	68 43 83 02 c0       	push   0xc0028343
c0009322:	e8 55 dc ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009327:	83 c4 10             	add    esp,0x10
c000932a:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c000932f:	83 ec 04             	sub    esp,0x4
c0009332:	50                   	push   eax
c0009333:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009336:	68 54 83 02 c0       	push   0xc0028354
c000933b:	e8 3c dc ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009340:	83 c4 10             	add    esp,0x10
c0009343:	a1 24 23 03 c0       	mov    eax,ds:0xc0032324
c0009348:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c000934b:	7d 06                	jge    c0009353 <KeGetTimezoneStringFromID(int)+0x66>
c000934d:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0009351:	79 07                	jns    c000935a <KeGetTimezoneStringFromID(int)+0x6d>
c0009353:	b8 00 00 00 00       	mov    eax,0x0
c0009358:	eb 2e                	jmp    c0009388 <KeGetTimezoneStringFromID(int)+0x9b>
c000935a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000935d:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009364:	83 c0 01             	add    eax,0x1
c0009367:	83 ec 04             	sub    esp,0x4
c000936a:	50                   	push   eax
c000936b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000936e:	68 67 83 02 c0       	push   0xc0028367
c0009373:	e8 04 dc ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009378:	83 c4 10             	add    esp,0x10
c000937b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000937e:	8b 04 85 40 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdcc0]
c0009385:	83 c0 01             	add    eax,0x1
c0009388:	c9                   	leave  
c0009389:	c3                   	ret    

c000938a <KeUpdateTimezone(char const*)>:
c000938a:	55                   	push   ebp
c000938b:	89 e5                	mov    ebp,esp
c000938d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009390:	8a 00                	mov    al,BYTE PTR [eax]
c0009392:	0f be c0             	movsx  eax,al
c0009395:	83 f8 2b             	cmp    eax,0x2b
c0009398:	74 11                	je     c00093ab <KeUpdateTimezone(char const*)+0x21>
c000939a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000939d:	8a 00                	mov    al,BYTE PTR [eax]
c000939f:	0f be c0             	movsx  eax,al
c00093a2:	83 f8 2d             	cmp    eax,0x2d
c00093a5:	0f 85 be 00 00 00    	jne    c0009469 <KeUpdateTimezone(char const*)+0xdf>
c00093ab:	c6 05 60 26 03 c0 00 	mov    BYTE PTR ds:0xc0032660,0x0
c00093b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093b5:	83 c0 02             	add    eax,0x2
c00093b8:	8a 00                	mov    al,BYTE PTR [eax]
c00093ba:	0f be c0             	movsx  eax,al
c00093bd:	83 f8 2e             	cmp    eax,0x2e
c00093c0:	75 10                	jne    c00093d2 <KeUpdateTimezone(char const*)+0x48>
c00093c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093c5:	83 c0 03             	add    eax,0x3
c00093c8:	8a 00                	mov    al,BYTE PTR [eax]
c00093ca:	0f be c0             	movsx  eax,al
c00093cd:	83 f8 35             	cmp    eax,0x35
c00093d0:	74 20                	je     c00093f2 <KeUpdateTimezone(char const*)+0x68>
c00093d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093d5:	83 c0 03             	add    eax,0x3
c00093d8:	8a 00                	mov    al,BYTE PTR [eax]
c00093da:	0f be c0             	movsx  eax,al
c00093dd:	83 f8 2e             	cmp    eax,0x2e
c00093e0:	75 14                	jne    c00093f6 <KeUpdateTimezone(char const*)+0x6c>
c00093e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00093e5:	83 c0 04             	add    eax,0x4
c00093e8:	8a 00                	mov    al,BYTE PTR [eax]
c00093ea:	0f be c0             	movsx  eax,al
c00093ed:	83 f8 35             	cmp    eax,0x35
c00093f0:	75 04                	jne    c00093f6 <KeUpdateTimezone(char const*)+0x6c>
c00093f2:	b0 01                	mov    al,0x1
c00093f4:	eb 02                	jmp    c00093f8 <KeUpdateTimezone(char const*)+0x6e>
c00093f6:	b0 00                	mov    al,0x0
c00093f8:	a2 61 26 03 c0       	mov    ds:0xc0032661,al
c00093fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009400:	83 c0 01             	add    eax,0x1
c0009403:	8a 00                	mov    al,BYTE PTR [eax]
c0009405:	0f be c0             	movsx  eax,al
c0009408:	83 e8 30             	sub    eax,0x30
c000940b:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c0009410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009413:	83 c0 03             	add    eax,0x3
c0009416:	8a 00                	mov    al,BYTE PTR [eax]
c0009418:	0f be c0             	movsx  eax,al
c000941b:	83 f8 2e             	cmp    eax,0x2e
c000941e:	75 2e                	jne    c000944e <KeUpdateTimezone(char const*)+0xc4>
c0009420:	8b 15 64 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032664
c0009426:	89 d0                	mov    eax,edx
c0009428:	c1 e0 02             	shl    eax,0x2
c000942b:	01 d0                	add    eax,edx
c000942d:	01 c0                	add    eax,eax
c000942f:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c0009434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009437:	83 c0 02             	add    eax,0x2
c000943a:	8a 00                	mov    al,BYTE PTR [eax]
c000943c:	0f be c0             	movsx  eax,al
c000943f:	8d 50 d0             	lea    edx,[eax-0x30]
c0009442:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c0009447:	01 d0                	add    eax,edx
c0009449:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c000944e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009451:	8a 00                	mov    al,BYTE PTR [eax]
c0009453:	0f be c0             	movsx  eax,al
c0009456:	83 f8 2d             	cmp    eax,0x2d
c0009459:	75 26                	jne    c0009481 <KeUpdateTimezone(char const*)+0xf7>
c000945b:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c0009460:	f7 d8                	neg    eax
c0009462:	a3 64 26 03 c0       	mov    ds:0xc0032664,eax
c0009467:	eb 18                	jmp    c0009481 <KeUpdateTimezone(char const*)+0xf7>
c0009469:	c6 05 60 26 03 c0 00 	mov    BYTE PTR ds:0xc0032660,0x0
c0009470:	c6 05 61 26 03 c0 00 	mov    BYTE PTR ds:0xc0032661,0x0
c0009477:	c7 05 64 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032664,0x0
c0009481:	90                   	nop
c0009482:	5d                   	pop    ebp
c0009483:	c3                   	ret    

c0009484 <KeSetTimezone(char const*)>:
c0009484:	55                   	push   ebp
c0009485:	89 e5                	mov    ebp,esp
c0009487:	83 ec 18             	sub    esp,0x18
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	68 74 83 02 c0       	push   0xc0028374
c0009492:	e8 11 44 00 00       	call   c000d8a8 <CmOpen(char const*)>
c0009497:	83 c4 10             	add    esp,0x10
c000949a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000949d:	83 ec 08             	sub    esp,0x8
c00094a0:	68 99 83 02 c0       	push   0xc0028399
c00094a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00094a8:	e8 fb 4f 00 00       	call   c000e4a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00094ad:	83 c4 10             	add    esp,0x10
c00094b0:	83 ec 04             	sub    esp,0x4
c00094b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00094b6:	50                   	push   eax
c00094b7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00094ba:	e8 bb 48 00 00       	call   c000dd7a <CmSetString(Reghive_Tag*, int, char const*)>
c00094bf:	83 c4 10             	add    esp,0x10
c00094c2:	83 ec 0c             	sub    esp,0xc
c00094c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00094c8:	e8 f9 44 00 00       	call   c000d9c6 <CmClose(Reghive_Tag*)>
c00094cd:	83 c4 10             	add    esp,0x10
c00094d0:	83 ec 0c             	sub    esp,0xc
c00094d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00094d6:	e8 af fe ff ff       	call   c000938a <KeUpdateTimezone(char const*)>
c00094db:	83 c4 10             	add    esp,0x10
c00094de:	90                   	nop
c00094df:	c9                   	leave  
c00094e0:	c3                   	ret    

c00094e1 <KeSetTimezone(int)>:
c00094e1:	55                   	push   ebp
c00094e2:	89 e5                	mov    ebp,esp
c00094e4:	83 ec 18             	sub    esp,0x18
c00094e7:	83 ec 0c             	sub    esp,0xc
c00094ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00094ed:	e8 fb fd ff ff       	call   c00092ed <KeGetTimezoneStringFromID(int)>
c00094f2:	83 c4 10             	add    esp,0x10
c00094f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00094f8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00094fc:	74 12                	je     c0009510 <KeSetTimezone(int)+0x2f>
c00094fe:	83 ec 0c             	sub    esp,0xc
c0009501:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009504:	e8 7b ff ff ff       	call   c0009484 <KeSetTimezone(char const*)>
c0009509:	83 c4 10             	add    esp,0x10
c000950c:	b0 01                	mov    al,0x1
c000950e:	eb 02                	jmp    c0009512 <KeSetTimezone(int)+0x31>
c0009510:	b0 00                	mov    al,0x0
c0009512:	c9                   	leave  
c0009513:	c3                   	ret    

c0009514 <KeLoadTimezone()>:
c0009514:	55                   	push   ebp
c0009515:	89 e5                	mov    ebp,esp
c0009517:	81 ec 68 02 00 00    	sub    esp,0x268
c000951d:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0009524:	83 ec 0c             	sub    esp,0xc
c0009527:	68 74 83 02 c0       	push   0xc0028374
c000952c:	e8 77 43 00 00       	call   c000d8a8 <CmOpen(char const*)>
c0009531:	83 c4 10             	add    esp,0x10
c0009534:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009537:	83 ec 08             	sub    esp,0x8
c000953a:	68 99 83 02 c0       	push   0xc0028399
c000953f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009542:	e8 61 4f 00 00       	call   c000e4a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009547:	83 c4 10             	add    esp,0x10
c000954a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000954d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009551:	7e 18                	jle    c000956b <KeLoadTimezone()+0x57>
c0009553:	83 ec 04             	sub    esp,0x4
c0009556:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c000955c:	50                   	push   eax
c000955d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009560:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009563:	e8 b0 44 00 00       	call   c000da18 <CmGetString(Reghive_Tag*, int, char*)>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	83 ec 0c             	sub    esp,0xc
c000956e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009571:	e8 50 44 00 00       	call   c000d9c6 <CmClose(Reghive_Tag*)>
c0009576:	83 c4 10             	add    esp,0x10
c0009579:	83 ec 0c             	sub    esp,0xc
c000957c:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009582:	50                   	push   eax
c0009583:	e8 02 fe ff ff       	call   c000938a <KeUpdateTimezone(char const*)>
c0009588:	83 c4 10             	add    esp,0x10
c000958b:	90                   	nop
c000958c:	c9                   	leave  
c000958d:	c3                   	ret    

c000958e <Clock::Clock(char const*)>:
c000958e:	83 ec 0c             	sub    esp,0xc
c0009591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009595:	83 ec 08             	sub    esp,0x8
c0009598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000959c:	50                   	push   eax
c000959d:	e8 ec 0a 00 00       	call   c000a08e <Device::Device(char const*)>
c00095a2:	83 c4 10             	add    esp,0x10
c00095a5:	ba f8 83 02 c0       	mov    edx,0xc00283f8
c00095aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095ae:	89 10                	mov    DWORD PTR [eax],edx
c00095b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095b4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00095be:	90                   	nop
c00095bf:	83 c4 0c             	add    esp,0xc
c00095c2:	c3                   	ret    
c00095c3:	90                   	nop

c00095c4 <Clock::~Clock()>:
c00095c4:	83 ec 0c             	sub    esp,0xc
c00095c7:	ba f8 83 02 c0       	mov    edx,0xc00283f8
c00095cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095d0:	89 10                	mov    DWORD PTR [eax],edx
c00095d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095d6:	83 ec 0c             	sub    esp,0xc
c00095d9:	50                   	push   eax
c00095da:	e8 4f 08 00 00       	call   c0009e2e <Device::~Device()>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	90                   	nop
c00095e3:	83 c4 0c             	add    esp,0xc
c00095e6:	c3                   	ret    
c00095e7:	90                   	nop

c00095e8 <Clock::~Clock()>:
c00095e8:	83 ec 0c             	sub    esp,0xc
c00095eb:	83 ec 0c             	sub    esp,0xc
c00095ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095f2:	e8 cd ff ff ff       	call   c00095c4 <Clock::~Clock()>
c00095f7:	83 c4 10             	add    esp,0x10
c00095fa:	83 ec 08             	sub    esp,0x8
c00095fd:	68 58 01 00 00       	push   0x158
c0009602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009606:	e8 49 42 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000960b:	83 c4 10             	add    esp,0x10
c000960e:	83 c4 0c             	add    esp,0xc
c0009611:	c3                   	ret    

c0009612 <Clock::timeInSecondsLocal()>:
c0009612:	55                   	push   ebp
c0009613:	89 e5                	mov    ebp,esp
c0009615:	53                   	push   ebx
c0009616:	83 ec 04             	sub    esp,0x4
c0009619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000961c:	8b 00                	mov    eax,DWORD PTR [eax]
c000961e:	83 c0 24             	add    eax,0x24
c0009621:	8b 00                	mov    eax,DWORD PTR [eax]
c0009623:	83 ec 0c             	sub    esp,0xc
c0009626:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009629:	ff d0                	call   eax
c000962b:	83 c4 10             	add    esp,0x10
c000962e:	89 c1                	mov    ecx,eax
c0009630:	89 d3                	mov    ebx,edx
c0009632:	a0 60 26 03 c0       	mov    al,ds:0xc0032660
c0009637:	0f b6 d0             	movzx  edx,al
c000963a:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c000963f:	01 c2                	add    edx,eax
c0009641:	89 d0                	mov    eax,edx
c0009643:	01 c0                	add    eax,eax
c0009645:	01 d0                	add    eax,edx
c0009647:	01 c0                	add    eax,eax
c0009649:	01 d0                	add    eax,edx
c000964b:	c1 e0 05             	shl    eax,0x5
c000964e:	01 d0                	add    eax,edx
c0009650:	c1 e0 04             	shl    eax,0x4
c0009653:	89 c2                	mov    edx,eax
c0009655:	c1 fa 1f             	sar    edx,0x1f
c0009658:	01 c1                	add    ecx,eax
c000965a:	11 d3                	adc    ebx,edx
c000965c:	a0 61 26 03 c0       	mov    al,ds:0xc0032661
c0009661:	0f b6 c0             	movzx  eax,al
c0009664:	85 c0                	test   eax,eax
c0009666:	74 0c                	je     c0009674 <Clock::timeInSecondsLocal()+0x62>
c0009668:	b8 08 07 00 00       	mov    eax,0x708
c000966d:	ba 00 00 00 00       	mov    edx,0x0
c0009672:	eb 0a                	jmp    c000967e <Clock::timeInSecondsLocal()+0x6c>
c0009674:	b8 00 00 00 00       	mov    eax,0x0
c0009679:	ba 00 00 00 00       	mov    edx,0x0
c000967e:	01 c8                	add    eax,ecx
c0009680:	11 da                	adc    edx,ebx
c0009682:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009685:	c9                   	leave  
c0009686:	c3                   	ret    
c0009687:	90                   	nop

c0009688 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009688:	55                   	push   ebp
c0009689:	89 e5                	mov    ebp,esp
c000968b:	56                   	push   esi
c000968c:	53                   	push   ebx
c000968d:	83 ec 10             	sub    esp,0x10
c0009690:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009693:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009696:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009699:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000969c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000969f:	8b 00                	mov    eax,DWORD PTR [eax]
c00096a1:	83 c0 2c             	add    eax,0x2c
c00096a4:	8b 30                	mov    esi,DWORD PTR [eax]
c00096a6:	a0 60 26 03 c0       	mov    al,ds:0xc0032660
c00096ab:	0f b6 d0             	movzx  edx,al
c00096ae:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c00096b3:	01 c2                	add    edx,eax
c00096b5:	89 d0                	mov    eax,edx
c00096b7:	01 c0                	add    eax,eax
c00096b9:	01 d0                	add    eax,edx
c00096bb:	01 c0                	add    eax,eax
c00096bd:	01 d0                	add    eax,edx
c00096bf:	c1 e0 05             	shl    eax,0x5
c00096c2:	01 d0                	add    eax,edx
c00096c4:	c1 e0 04             	shl    eax,0x4
c00096c7:	89 c2                	mov    edx,eax
c00096c9:	c1 fa 1f             	sar    edx,0x1f
c00096cc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096cf:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00096d2:	29 c1                	sub    ecx,eax
c00096d4:	19 d3                	sbb    ebx,edx
c00096d6:	a0 61 26 03 c0       	mov    al,ds:0xc0032661
c00096db:	0f b6 c0             	movzx  eax,al
c00096de:	85 c0                	test   eax,eax
c00096e0:	74 0c                	je     c00096ee <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c00096e2:	b8 08 07 00 00       	mov    eax,0x708
c00096e7:	ba 00 00 00 00       	mov    edx,0x0
c00096ec:	eb 0a                	jmp    c00096f8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c00096ee:	b8 00 00 00 00       	mov    eax,0x0
c00096f3:	ba 00 00 00 00       	mov    edx,0x0
c00096f8:	29 c1                	sub    ecx,eax
c00096fa:	19 d3                	sbb    ebx,edx
c00096fc:	89 c8                	mov    eax,ecx
c00096fe:	89 da                	mov    edx,ebx
c0009700:	83 ec 04             	sub    esp,0x4
c0009703:	52                   	push   edx
c0009704:	50                   	push   eax
c0009705:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009708:	ff d6                	call   esi
c000970a:	83 c4 10             	add    esp,0x10
c000970d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009710:	5b                   	pop    ebx
c0009711:	5e                   	pop    esi
c0009712:	5d                   	pop    ebp
c0009713:	c3                   	ret    

c0009714 <KeDatetimeToSeconds(datetime_t)>:
c0009714:	55                   	push   ebp
c0009715:	89 e5                	mov    ebp,esp
c0009717:	53                   	push   ebx
c0009718:	83 ec 24             	sub    esp,0x24
c000971b:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000971f:	2d 6c 07 00 00       	sub    eax,0x76c
c0009724:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009728:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000972b:	83 e8 01             	sub    eax,0x1
c000972e:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009731:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009738:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000973f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009746:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000974d:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009750:	0f b6 c8             	movzx  ecx,al
c0009753:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009756:	0f b6 d0             	movzx  edx,al
c0009759:	89 d0                	mov    eax,edx
c000975b:	01 c0                	add    eax,eax
c000975d:	01 d0                	add    eax,edx
c000975f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009766:	01 d0                	add    eax,edx
c0009768:	c1 e0 02             	shl    eax,0x2
c000976b:	01 c1                	add    ecx,eax
c000976d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009770:	0f b6 d0             	movzx  edx,al
c0009773:	89 d0                	mov    eax,edx
c0009775:	01 c0                	add    eax,eax
c0009777:	01 d0                	add    eax,edx
c0009779:	01 c0                	add    eax,eax
c000977b:	01 d0                	add    eax,edx
c000977d:	c1 e0 05             	shl    eax,0x5
c0009780:	01 d0                	add    eax,edx
c0009782:	c1 e0 04             	shl    eax,0x4
c0009785:	01 c8                	add    eax,ecx
c0009787:	89 c2                	mov    edx,eax
c0009789:	c1 fa 1f             	sar    edx,0x1f
c000978c:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000978f:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009792:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009795:	0f b6 c0             	movzx  eax,al
c0009798:	83 e8 01             	sub    eax,0x1
c000979b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000979e:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00097a1:	0f b6 c0             	movzx  eax,al
c00097a4:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c00097ab:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00097ae:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00097b1:	0f b6 c0             	movzx  eax,al
c00097b4:	83 f8 01             	cmp    eax,0x1
c00097b7:	76 7c                	jbe    c0009835 <KeDatetimeToSeconds(datetime_t)+0x121>
c00097b9:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00097bd:	0f b7 c0             	movzx  eax,ax
c00097c0:	83 e0 03             	and    eax,0x3
c00097c3:	85 c0                	test   eax,eax
c00097c5:	75 6e                	jne    c0009835 <KeDatetimeToSeconds(datetime_t)+0x121>
c00097c7:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00097cb:	0f b7 c8             	movzx  ecx,ax
c00097ce:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097d3:	89 c8                	mov    eax,ecx
c00097d5:	f7 e2                	mul    edx
c00097d7:	c1 ea 05             	shr    edx,0x5
c00097da:	89 d0                	mov    eax,edx
c00097dc:	c1 e0 02             	shl    eax,0x2
c00097df:	01 d0                	add    eax,edx
c00097e1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097e8:	01 d0                	add    eax,edx
c00097ea:	c1 e0 02             	shl    eax,0x2
c00097ed:	29 c1                	sub    ecx,eax
c00097ef:	89 c8                	mov    eax,ecx
c00097f1:	0f b7 c0             	movzx  eax,ax
c00097f4:	85 c0                	test   eax,eax
c00097f6:	75 39                	jne    c0009831 <KeDatetimeToSeconds(datetime_t)+0x11d>
c00097f8:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00097fc:	0f b7 c0             	movzx  eax,ax
c00097ff:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009805:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000980a:	f7 e9                	imul   ecx
c000980c:	c1 fa 07             	sar    edx,0x7
c000980f:	89 c8                	mov    eax,ecx
c0009811:	c1 f8 1f             	sar    eax,0x1f
c0009814:	29 c2                	sub    edx,eax
c0009816:	89 d0                	mov    eax,edx
c0009818:	c1 e0 02             	shl    eax,0x2
c000981b:	01 d0                	add    eax,edx
c000981d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009824:	01 d0                	add    eax,edx
c0009826:	c1 e0 04             	shl    eax,0x4
c0009829:	29 c1                	sub    ecx,eax
c000982b:	89 ca                	mov    edx,ecx
c000982d:	85 d2                	test   edx,edx
c000982f:	75 04                	jne    c0009835 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009831:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009835:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009839:	0f b7 c0             	movzx  eax,ax
c000983c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000983f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009842:	83 f8 46             	cmp    eax,0x46
c0009845:	0f 9f c0             	setg   al
c0009848:	0f b6 c0             	movzx  eax,al
c000984b:	85 c0                	test   eax,eax
c000984d:	0f 84 a4 00 00 00    	je     c00098f7 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009853:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c000985a:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000985e:	0f b7 d0             	movzx  edx,ax
c0009861:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009864:	39 c2                	cmp    edx,eax
c0009866:	0f 8e b8 01 00 00    	jle    c0009a24 <KeDatetimeToSeconds(datetime_t)+0x310>
c000986c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000986f:	83 e0 03             	and    eax,0x3
c0009872:	85 c0                	test   eax,eax
c0009874:	75 6b                	jne    c00098e1 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009876:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009879:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000987e:	f7 e9                	imul   ecx
c0009880:	c1 fa 05             	sar    edx,0x5
c0009883:	89 c8                	mov    eax,ecx
c0009885:	c1 f8 1f             	sar    eax,0x1f
c0009888:	29 c2                	sub    edx,eax
c000988a:	89 d0                	mov    eax,edx
c000988c:	c1 e0 02             	shl    eax,0x2
c000988f:	01 d0                	add    eax,edx
c0009891:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009898:	01 d0                	add    eax,edx
c000989a:	c1 e0 02             	shl    eax,0x2
c000989d:	29 c1                	sub    ecx,eax
c000989f:	89 ca                	mov    edx,ecx
c00098a1:	85 d2                	test   edx,edx
c00098a3:	75 35                	jne    c00098da <KeDatetimeToSeconds(datetime_t)+0x1c6>
c00098a5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00098a8:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00098ae:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00098b3:	f7 e9                	imul   ecx
c00098b5:	c1 fa 07             	sar    edx,0x7
c00098b8:	89 c8                	mov    eax,ecx
c00098ba:	c1 f8 1f             	sar    eax,0x1f
c00098bd:	29 c2                	sub    edx,eax
c00098bf:	89 d0                	mov    eax,edx
c00098c1:	c1 e0 02             	shl    eax,0x2
c00098c4:	01 d0                	add    eax,edx
c00098c6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00098cd:	01 d0                	add    eax,edx
c00098cf:	c1 e0 04             	shl    eax,0x4
c00098d2:	29 c1                	sub    ecx,eax
c00098d4:	89 ca                	mov    edx,ecx
c00098d6:	85 d2                	test   edx,edx
c00098d8:	75 07                	jne    c00098e1 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c00098da:	b8 6e 01 00 00       	mov    eax,0x16e
c00098df:	eb 05                	jmp    c00098e6 <KeDatetimeToSeconds(datetime_t)+0x1d2>
c00098e1:	b8 6d 01 00 00       	mov    eax,0x16d
c00098e6:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00098e9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00098ec:	83 c0 01             	add    eax,0x1
c00098ef:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00098f2:	e9 63 ff ff ff       	jmp    c000985a <KeDatetimeToSeconds(datetime_t)+0x146>
c00098f7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00098fa:	83 f8 45             	cmp    eax,0x45
c00098fd:	0f 8f 21 01 00 00    	jg     c0009a24 <KeDatetimeToSeconds(datetime_t)+0x310>
c0009903:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c000990a:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000990e:	0f b7 d0             	movzx  edx,ax
c0009911:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009914:	39 c2                	cmp    edx,eax
c0009916:	0f 8d 8b 00 00 00    	jge    c00099a7 <KeDatetimeToSeconds(datetime_t)+0x293>
c000991c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000991f:	83 e0 03             	and    eax,0x3
c0009922:	85 c0                	test   eax,eax
c0009924:	75 6b                	jne    c0009991 <KeDatetimeToSeconds(datetime_t)+0x27d>
c0009926:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009929:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000992e:	f7 e9                	imul   ecx
c0009930:	c1 fa 05             	sar    edx,0x5
c0009933:	89 c8                	mov    eax,ecx
c0009935:	c1 f8 1f             	sar    eax,0x1f
c0009938:	29 c2                	sub    edx,eax
c000993a:	89 d0                	mov    eax,edx
c000993c:	c1 e0 02             	shl    eax,0x2
c000993f:	01 d0                	add    eax,edx
c0009941:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009948:	01 d0                	add    eax,edx
c000994a:	c1 e0 02             	shl    eax,0x2
c000994d:	29 c1                	sub    ecx,eax
c000994f:	89 ca                	mov    edx,ecx
c0009951:	85 d2                	test   edx,edx
c0009953:	75 35                	jne    c000998a <KeDatetimeToSeconds(datetime_t)+0x276>
c0009955:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009958:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000995e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009963:	f7 e9                	imul   ecx
c0009965:	c1 fa 07             	sar    edx,0x7
c0009968:	89 c8                	mov    eax,ecx
c000996a:	c1 f8 1f             	sar    eax,0x1f
c000996d:	29 c2                	sub    edx,eax
c000996f:	89 d0                	mov    eax,edx
c0009971:	c1 e0 02             	shl    eax,0x2
c0009974:	01 d0                	add    eax,edx
c0009976:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000997d:	01 d0                	add    eax,edx
c000997f:	c1 e0 04             	shl    eax,0x4
c0009982:	29 c1                	sub    ecx,eax
c0009984:	89 ca                	mov    edx,ecx
c0009986:	85 d2                	test   edx,edx
c0009988:	75 07                	jne    c0009991 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000998a:	b8 6e 01 00 00       	mov    eax,0x16e
c000998f:	eb 05                	jmp    c0009996 <KeDatetimeToSeconds(datetime_t)+0x282>
c0009991:	b8 6d 01 00 00       	mov    eax,0x16d
c0009996:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009999:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000999c:	83 e8 01             	sub    eax,0x1
c000999f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00099a2:	e9 63 ff ff ff       	jmp    c000990a <KeDatetimeToSeconds(datetime_t)+0x1f6>
c00099a7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00099aa:	83 e0 03             	and    eax,0x3
c00099ad:	85 c0                	test   eax,eax
c00099af:	75 6b                	jne    c0009a1c <KeDatetimeToSeconds(datetime_t)+0x308>
c00099b1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00099b4:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00099b9:	f7 e9                	imul   ecx
c00099bb:	c1 fa 05             	sar    edx,0x5
c00099be:	89 c8                	mov    eax,ecx
c00099c0:	c1 f8 1f             	sar    eax,0x1f
c00099c3:	29 c2                	sub    edx,eax
c00099c5:	89 d0                	mov    eax,edx
c00099c7:	c1 e0 02             	shl    eax,0x2
c00099ca:	01 d0                	add    eax,edx
c00099cc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00099d3:	01 d0                	add    eax,edx
c00099d5:	c1 e0 02             	shl    eax,0x2
c00099d8:	29 c1                	sub    ecx,eax
c00099da:	89 ca                	mov    edx,ecx
c00099dc:	85 d2                	test   edx,edx
c00099de:	75 35                	jne    c0009a15 <KeDatetimeToSeconds(datetime_t)+0x301>
c00099e0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00099e3:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00099e9:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00099ee:	f7 e9                	imul   ecx
c00099f0:	c1 fa 07             	sar    edx,0x7
c00099f3:	89 c8                	mov    eax,ecx
c00099f5:	c1 f8 1f             	sar    eax,0x1f
c00099f8:	29 c2                	sub    edx,eax
c00099fa:	89 d0                	mov    eax,edx
c00099fc:	c1 e0 02             	shl    eax,0x2
c00099ff:	01 d0                	add    eax,edx
c0009a01:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009a08:	01 d0                	add    eax,edx
c0009a0a:	c1 e0 04             	shl    eax,0x4
c0009a0d:	29 c1                	sub    ecx,eax
c0009a0f:	89 ca                	mov    edx,ecx
c0009a11:	85 d2                	test   edx,edx
c0009a13:	75 07                	jne    c0009a1c <KeDatetimeToSeconds(datetime_t)+0x308>
c0009a15:	b8 6e 01 00 00       	mov    eax,0x16e
c0009a1a:	eb 05                	jmp    c0009a21 <KeDatetimeToSeconds(datetime_t)+0x30d>
c0009a1c:	b8 6d 01 00 00       	mov    eax,0x16d
c0009a21:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009a24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009a27:	89 c2                	mov    edx,eax
c0009a29:	c1 fa 1f             	sar    edx,0x1f
c0009a2c:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c0009a32:	6b c8 00             	imul   ecx,eax,0x0
c0009a35:	01 d9                	add    ecx,ebx
c0009a37:	bb 80 51 01 00       	mov    ebx,0x15180
c0009a3c:	f7 e3                	mul    ebx
c0009a3e:	01 d1                	add    ecx,edx
c0009a40:	89 ca                	mov    edx,ecx
c0009a42:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009a45:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009a48:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009a4b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009a4e:	83 c4 24             	add    esp,0x24
c0009a51:	5b                   	pop    ebx
c0009a52:	5d                   	pop    ebp
c0009a53:	c3                   	ret    

c0009a54 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009a54:	55                   	push   ebp
c0009a55:	89 e5                	mov    ebp,esp
c0009a57:	56                   	push   esi
c0009a58:	53                   	push   ebx
c0009a59:	83 ec 20             	sub    esp,0x20
c0009a5c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009a5f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009a62:	e8 ad fc ff ff       	call   c0009714 <KeDatetimeToSeconds(datetime_t)>
c0009a67:	83 c4 08             	add    esp,0x8
c0009a6a:	89 c3                	mov    ebx,eax
c0009a6c:	89 d6                	mov    esi,edx
c0009a6e:	a0 60 26 03 c0       	mov    al,ds:0xc0032660
c0009a73:	0f b6 d0             	movzx  edx,al
c0009a76:	a1 64 26 03 c0       	mov    eax,ds:0xc0032664
c0009a7b:	01 c2                	add    edx,eax
c0009a7d:	89 d0                	mov    eax,edx
c0009a7f:	01 c0                	add    eax,eax
c0009a81:	01 d0                	add    eax,edx
c0009a83:	01 c0                	add    eax,eax
c0009a85:	01 d0                	add    eax,edx
c0009a87:	c1 e0 05             	shl    eax,0x5
c0009a8a:	01 d0                	add    eax,edx
c0009a8c:	c1 e0 04             	shl    eax,0x4
c0009a8f:	89 c2                	mov    edx,eax
c0009a91:	c1 fa 1f             	sar    edx,0x1f
c0009a94:	29 c3                	sub    ebx,eax
c0009a96:	19 d6                	sbb    esi,edx
c0009a98:	a0 61 26 03 c0       	mov    al,ds:0xc0032661
c0009a9d:	0f b6 c0             	movzx  eax,al
c0009aa0:	85 c0                	test   eax,eax
c0009aa2:	74 0c                	je     c0009ab0 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c0009aa4:	b8 08 07 00 00       	mov    eax,0x708
c0009aa9:	ba 00 00 00 00       	mov    edx,0x0
c0009aae:	eb 0a                	jmp    c0009aba <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c0009ab0:	b8 00 00 00 00       	mov    eax,0x0
c0009ab5:	ba 00 00 00 00       	mov    edx,0x0
c0009aba:	29 c3                	sub    ebx,eax
c0009abc:	19 d6                	sbb    esi,edx
c0009abe:	89 d8                	mov    eax,ebx
c0009ac0:	89 f2                	mov    edx,esi
c0009ac2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009ac5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009ac8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009acb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009ace:	89 d0                	mov    eax,edx
c0009ad0:	31 d2                	xor    edx,edx
c0009ad2:	89 c3                	mov    ebx,eax
c0009ad4:	89 d6                	mov    esi,edx
c0009ad6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009ad9:	80 e5 ff             	and    ch,0xff
c0009adc:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009adf:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009ae2:	83 e1 00             	and    ecx,0x0
c0009ae5:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0009ae8:	83 ec 0c             	sub    esp,0xc
c0009aeb:	56                   	push   esi
c0009aec:	53                   	push   ebx
c0009aed:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009af0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0009af3:	68 ae 83 02 c0       	push   0xc00283ae
c0009af8:	e8 7f d4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009afd:	83 c4 20             	add    esp,0x20
c0009b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b03:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b05:	83 c0 2c             	add    eax,0x2c
c0009b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b0a:	83 ec 04             	sub    esp,0x4
c0009b0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009b10:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009b13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009b16:	ff d0                	call   eax
c0009b18:	83 c4 10             	add    esp,0x10
c0009b1b:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009b1e:	5b                   	pop    ebx
c0009b1f:	5e                   	pop    esi
c0009b20:	5d                   	pop    ebp
c0009b21:	c3                   	ret    

c0009b22 <KeSecondsToDatetime(unsigned long long)>:
c0009b22:	55                   	push   ebp
c0009b23:	89 e5                	mov    ebp,esp
c0009b25:	83 ec 48             	sub    esp,0x48
c0009b28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009b2b:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009b2e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009b31:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009b34:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009b37:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009b3a:	6a 00                	push   0x0
c0009b3c:	68 80 51 01 00       	push   0x15180
c0009b41:	52                   	push   edx
c0009b42:	50                   	push   eax
c0009b43:	e8 4c 88 01 00       	call   c0022394 <__udivdi3>
c0009b48:	83 c4 10             	add    esp,0x10
c0009b4b:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009b50:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009b53:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009b56:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009b59:	6a 00                	push   0x0
c0009b5b:	68 80 51 01 00       	push   0x15180
c0009b60:	52                   	push   edx
c0009b61:	50                   	push   eax
c0009b62:	e8 2d 89 01 00       	call   c0022494 <__umoddi3>
c0009b67:	83 c4 10             	add    esp,0x10
c0009b6a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009b6d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009b71:	79 0b                	jns    c0009b7e <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009b73:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c0009b7a:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009b7e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009b81:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009b86:	89 c8                	mov    eax,ecx
c0009b88:	f7 ea                	imul   edx
c0009b8a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009b8d:	c1 f8 0b             	sar    eax,0xb
c0009b90:	89 c2                	mov    edx,eax
c0009b92:	89 c8                	mov    eax,ecx
c0009b94:	c1 f8 1f             	sar    eax,0x1f
c0009b97:	29 c2                	sub    edx,eax
c0009b99:	89 d0                	mov    eax,edx
c0009b9b:	88 c2                	mov    dl,al
c0009b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ba0:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009ba3:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009ba6:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009bab:	89 c8                	mov    eax,ecx
c0009bad:	f7 ea                	imul   edx
c0009baf:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009bb2:	c1 f8 0b             	sar    eax,0xb
c0009bb5:	89 c2                	mov    edx,eax
c0009bb7:	89 c8                	mov    eax,ecx
c0009bb9:	c1 f8 1f             	sar    eax,0x1f
c0009bbc:	29 c2                	sub    edx,eax
c0009bbe:	89 d0                	mov    eax,edx
c0009bc0:	01 c0                	add    eax,eax
c0009bc2:	01 d0                	add    eax,edx
c0009bc4:	01 c0                	add    eax,eax
c0009bc6:	01 d0                	add    eax,edx
c0009bc8:	c1 e0 05             	shl    eax,0x5
c0009bcb:	01 d0                	add    eax,edx
c0009bcd:	c1 e0 04             	shl    eax,0x4
c0009bd0:	29 c1                	sub    ecx,eax
c0009bd2:	89 c8                	mov    eax,ecx
c0009bd4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009bd7:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009bda:	ba 89 88 88 88       	mov    edx,0x88888889
c0009bdf:	89 c8                	mov    eax,ecx
c0009be1:	f7 ea                	imul   edx
c0009be3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009be6:	c1 f8 05             	sar    eax,0x5
c0009be9:	89 c2                	mov    edx,eax
c0009beb:	89 c8                	mov    eax,ecx
c0009bed:	c1 f8 1f             	sar    eax,0x1f
c0009bf0:	29 c2                	sub    edx,eax
c0009bf2:	89 d0                	mov    eax,edx
c0009bf4:	88 c2                	mov    dl,al
c0009bf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bf9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009bfc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009bff:	ba 89 88 88 88       	mov    edx,0x88888889
c0009c04:	89 c8                	mov    eax,ecx
c0009c06:	f7 ea                	imul   edx
c0009c08:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009c0b:	c1 f8 05             	sar    eax,0x5
c0009c0e:	89 c2                	mov    edx,eax
c0009c10:	89 c8                	mov    eax,ecx
c0009c12:	c1 f8 1f             	sar    eax,0x1f
c0009c15:	29 c2                	sub    edx,eax
c0009c17:	89 d0                	mov    eax,edx
c0009c19:	01 c0                	add    eax,eax
c0009c1b:	01 d0                	add    eax,edx
c0009c1d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009c24:	01 d0                	add    eax,edx
c0009c26:	c1 e0 02             	shl    eax,0x2
c0009c29:	29 c1                	sub    ecx,eax
c0009c2b:	89 ca                	mov    edx,ecx
c0009c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c30:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009c33:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009c37:	79 20                	jns    c0009c59 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009c39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009c3c:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009c42:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009c47:	89 c8                	mov    eax,ecx
c0009c49:	f7 ea                	imul   edx
c0009c4b:	c1 fa 0f             	sar    edx,0xf
c0009c4e:	89 c8                	mov    eax,ecx
c0009c50:	c1 f8 1f             	sar    eax,0x1f
c0009c53:	29 c2                	sub    edx,eax
c0009c55:	89 d0                	mov    eax,edx
c0009c57:	eb 18                	jmp    c0009c71 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009c59:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009c5c:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009c61:	89 c8                	mov    eax,ecx
c0009c63:	f7 ea                	imul   edx
c0009c65:	c1 fa 0f             	sar    edx,0xf
c0009c68:	89 c8                	mov    eax,ecx
c0009c6a:	c1 f8 1f             	sar    eax,0x1f
c0009c6d:	29 c2                	sub    edx,eax
c0009c6f:	89 d0                	mov    eax,edx
c0009c71:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009c74:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009c77:	89 d0                	mov    eax,edx
c0009c79:	c1 e0 03             	shl    eax,0x3
c0009c7c:	01 d0                	add    eax,edx
c0009c7e:	c1 e0 04             	shl    eax,0x4
c0009c81:	01 d0                	add    eax,edx
c0009c83:	c1 e0 04             	shl    eax,0x4
c0009c86:	29 d0                	sub    eax,edx
c0009c88:	89 c2                	mov    edx,eax
c0009c8a:	c1 e2 06             	shl    edx,0x6
c0009c8d:	29 c2                	sub    edx,eax
c0009c8f:	89 d0                	mov    eax,edx
c0009c91:	f7 d8                	neg    eax
c0009c93:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009c96:	01 d0                	add    eax,edx
c0009c98:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009c9b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009c9e:	c1 e8 02             	shr    eax,0x2
c0009ca1:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009ca6:	f7 e2                	mul    edx
c0009ca8:	c1 ea 07             	shr    edx,0x7
c0009cab:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009cae:	29 d0                	sub    eax,edx
c0009cb0:	89 c1                	mov    ecx,eax
c0009cb2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009cb5:	c1 e8 02             	shr    eax,0x2
c0009cb8:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c0009cbd:	f7 e2                	mul    edx
c0009cbf:	89 d0                	mov    eax,edx
c0009cc1:	c1 e8 0b             	shr    eax,0xb
c0009cc4:	01 c1                	add    ecx,eax
c0009cc6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009cc9:	c1 e8 04             	shr    eax,0x4
c0009ccc:	ba 41 d6 72 00       	mov    edx,0x72d641
c0009cd1:	f7 e2                	mul    edx
c0009cd3:	89 d0                	mov    eax,edx
c0009cd5:	c1 e8 04             	shr    eax,0x4
c0009cd8:	29 c1                	sub    ecx,eax
c0009cda:	ba 61 f3 19 67       	mov    edx,0x6719f361
c0009cdf:	89 c8                	mov    eax,ecx
c0009ce1:	f7 e2                	mul    edx
c0009ce3:	89 c8                	mov    eax,ecx
c0009ce5:	29 d0                	sub    eax,edx
c0009ce7:	d1 e8                	shr    eax,1
c0009ce9:	01 d0                	add    eax,edx
c0009ceb:	c1 e8 08             	shr    eax,0x8
c0009cee:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0009cf1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009cf4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009cf9:	f7 e2                	mul    edx
c0009cfb:	89 d1                	mov    ecx,edx
c0009cfd:	c1 e9 05             	shr    ecx,0x5
c0009d00:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0009d03:	89 d0                	mov    eax,edx
c0009d05:	c1 e0 03             	shl    eax,0x3
c0009d08:	01 d0                	add    eax,edx
c0009d0a:	c1 e0 03             	shl    eax,0x3
c0009d0d:	01 d0                	add    eax,edx
c0009d0f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009d16:	01 c2                	add    edx,eax
c0009d18:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009d1b:	c1 e8 02             	shr    eax,0x2
c0009d1e:	01 d0                	add    eax,edx
c0009d20:	29 c1                	sub    ecx,eax
c0009d22:	89 ca                	mov    edx,ecx
c0009d24:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009d27:	01 d0                	add    eax,edx
c0009d29:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009d2c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0009d2f:	89 d0                	mov    eax,edx
c0009d31:	c1 e0 02             	shl    eax,0x2
c0009d34:	01 d0                	add    eax,edx
c0009d36:	83 c0 02             	add    eax,0x2
c0009d39:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009d3e:	f7 e2                	mul    edx
c0009d40:	89 d0                	mov    eax,edx
c0009d42:	c1 e8 07             	shr    eax,0x7
c0009d45:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009d48:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009d4b:	89 d0                	mov    eax,edx
c0009d4d:	c1 e0 03             	shl    eax,0x3
c0009d50:	01 d0                	add    eax,edx
c0009d52:	01 c0                	add    eax,eax
c0009d54:	01 d0                	add    eax,edx
c0009d56:	c1 e0 03             	shl    eax,0x3
c0009d59:	01 d0                	add    eax,edx
c0009d5b:	83 c0 02             	add    eax,0x2
c0009d5e:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0009d63:	f7 e2                	mul    edx
c0009d65:	c1 ea 02             	shr    edx,0x2
c0009d68:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009d6b:	29 d0                	sub    eax,edx
c0009d6d:	83 c0 01             	add    eax,0x1
c0009d70:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0009d73:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c0009d77:	77 07                	ja     c0009d80 <KeSecondsToDatetime(unsigned long long)+0x25e>
c0009d79:	b8 02 00 00 00       	mov    eax,0x2
c0009d7e:	eb 05                	jmp    c0009d85 <KeSecondsToDatetime(unsigned long long)+0x263>
c0009d80:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c0009d85:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c0009d88:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009d8b:	89 d0                	mov    eax,edx
c0009d8d:	c1 e0 02             	shl    eax,0x2
c0009d90:	01 d0                	add    eax,edx
c0009d92:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009d99:	01 d0                	add    eax,edx
c0009d9b:	c1 e0 04             	shl    eax,0x4
c0009d9e:	89 c2                	mov    edx,eax
c0009da0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009da3:	01 c2                	add    edx,eax
c0009da5:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009da9:	0f 96 c0             	setbe  al
c0009dac:	0f b6 c0             	movzx  eax,al
c0009daf:	01 d0                	add    eax,edx
c0009db1:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0009db4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0009db7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009dba:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0009dbe:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0009dc1:	83 c0 01             	add    eax,0x1
c0009dc4:	88 c2                	mov    dl,al
c0009dc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009dc9:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009dcc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0009dcf:	88 c2                	mov    dl,al
c0009dd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009dd4:	88 10                	mov    BYTE PTR [eax],dl
c0009dd6:	90                   	nop
c0009dd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009dda:	c9                   	leave  
c0009ddb:	c2 04 00             	ret    0x4

c0009dde <Clock::timeInDatetimeLocal()>:
c0009dde:	55                   	push   ebp
c0009ddf:	89 e5                	mov    ebp,esp
c0009de1:	83 ec 08             	sub    esp,0x8
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009dea:	e8 23 f8 ff ff       	call   c0009612 <Clock::timeInSecondsLocal()>
c0009def:	83 c4 10             	add    esp,0x10
c0009df2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0009df5:	83 ec 04             	sub    esp,0x4
c0009df8:	52                   	push   edx
c0009df9:	50                   	push   eax
c0009dfa:	51                   	push   ecx
c0009dfb:	e8 22 fd ff ff       	call   c0009b22 <KeSecondsToDatetime(unsigned long long)>
c0009e00:	83 c4 0c             	add    esp,0xc
c0009e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009e06:	c9                   	leave  
c0009e07:	c2 04 00             	ret    0x4

c0009e0a <Device::hibernate()>:
c0009e0a:	c3                   	ret    
c0009e0b:	90                   	nop

c0009e0c <Device::wake()>:
c0009e0c:	c3                   	ret    
c0009e0d:	90                   	nop

c0009e0e <Device::detect()>:
c0009e0e:	c3                   	ret    
c0009e0f:	90                   	nop

c0009e10 <Device::disableLegacy()>:
c0009e10:	c3                   	ret    
c0009e11:	90                   	nop

c0009e12 <Device::powerSaving(PowerSavingLevel)>:
c0009e12:	c3                   	ret    
c0009e13:	90                   	nop

c0009e14 <DriverlessDevice::close(int, int, void*)>:
c0009e14:	31 c0                	xor    eax,eax
c0009e16:	c3                   	ret    
c0009e17:	90                   	nop

c0009e18 <DriverlessDevice::detect()>:
c0009e18:	c3                   	ret    
c0009e19:	90                   	nop

c0009e1a <DriverlessDevice::open(int, int, void*)>:
c0009e1a:	83 ec 18             	sub    esp,0x18
c0009e1d:	68 2c 84 02 c0       	push   0xc002842c
c0009e22:	e8 69 63 00 00       	call   c0010190 <KePanic(char const*)>
c0009e27:	83 c8 ff             	or     eax,0xffffffff
c0009e2a:	83 c4 1c             	add    esp,0x1c
c0009e2d:	c3                   	ret    

c0009e2e <Device::~Device()>:
c0009e2e:	ba d0 84 02 c0       	mov    edx,0xc00284d0
c0009e33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009e37:	89 10                	mov    DWORD PTR [eax],edx
c0009e39:	90                   	nop
c0009e3a:	c3                   	ret    
c0009e3b:	90                   	nop

c0009e3c <Device::~Device()>:
c0009e3c:	83 ec 0c             	sub    esp,0xc
c0009e3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009e43:	e8 e6 ff ff ff       	call   c0009e2e <Device::~Device()>
c0009e48:	83 c4 04             	add    esp,0x4
c0009e4b:	83 ec 08             	sub    esp,0x8
c0009e4e:	68 58 01 00 00       	push   0x158
c0009e53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e57:	e8 f8 39 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c0009e5c:	83 c4 10             	add    esp,0x10
c0009e5f:	83 c4 0c             	add    esp,0xc
c0009e62:	c3                   	ret    
c0009e63:	90                   	nop

c0009e64 <Device::findAndLoadDriver()>:
c0009e64:	c7 44 24 04 4a 84 02 c0 	mov    DWORD PTR [esp+0x4],0xc002844a
c0009e6c:	e9 0b d1 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c0009e71:	90                   	nop

c0009e72 <Device::preOpenPCI(PCIDeviceInfo)>:
c0009e72:	57                   	push   edi
c0009e73:	b9 09 00 00 00       	mov    ecx,0x9
c0009e78:	56                   	push   esi
c0009e79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009e7d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0009e81:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0009e8b:	81 c7 18 01 00 00    	add    edi,0x118
c0009e91:	fc                   	cld    
c0009e92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009e94:	5e                   	pop    esi
c0009e95:	5f                   	pop    edi
c0009e96:	c3                   	ret    
c0009e97:	90                   	nop

c0009e98 <Device::preOpenACPI(void*, char*, char*)>:
c0009e98:	57                   	push   edi
c0009e99:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009e9e:	56                   	push   esi
c0009e9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ea3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009ea7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0009eb1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0009eb7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009ebd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009ec1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009ec3:	b9 0e 00 00 00       	mov    ecx,0xe
c0009ec8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009ece:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ed2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009ed4:	5e                   	pop    esi
c0009ed5:	5f                   	pop    edi
c0009ed6:	c3                   	ret    
c0009ed7:	90                   	nop

c0009ed8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009ed8:	53                   	push   ebx
c0009ed9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009edd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009ee1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ee5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009ee9:	0f b6 c0             	movzx  eax,al
c0009eec:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009ef0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009ef8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009efc:	5b                   	pop    ebx
c0009efd:	e9 d3 15 01 00       	jmp    c001b4d5 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009f02 <Device::getParent()>:
c0009f02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009f06:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009f0c:	c3                   	ret    
c0009f0d:	90                   	nop

c0009f0e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009f0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f16:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009f1b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f1f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f27:	e9 0b 17 01 00       	jmp    c001b637 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009f2c <Device::addChild(Device*)>:
c0009f2c:	53                   	push   ebx
c0009f2d:	83 ec 08             	sub    esp,0x8
c0009f30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009f34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009f38:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009f3e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009f44:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009f46:	85 d2                	test   edx,edx
c0009f48:	74 04                	je     c0009f4e <Device::addChild(Device*)+0x22>
c0009f4a:	89 d3                	mov    ebx,edx
c0009f4c:	eb f6                	jmp    c0009f44 <Device::addChild(Device*)+0x18>
c0009f4e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f51:	83 ec 0c             	sub    esp,0xc
c0009f54:	6a 08                	push   0x8
c0009f56:	e8 e0 5d 00 00       	call   c000fd3b <malloc>
c0009f5b:	89 03                	mov    DWORD PTR [ebx],eax
c0009f5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009f63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009f6a:	83 c4 18             	add    esp,0x18
c0009f6d:	5b                   	pop    ebx
c0009f6e:	c3                   	ret    
c0009f6f:	90                   	nop

c0009f70 <Device::removeAllChildren()>:
c0009f70:	56                   	push   esi
c0009f71:	53                   	push   ebx
c0009f72:	52                   	push   edx
c0009f73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009f77:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009f7d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009f80:	74 17                	je     c0009f99 <Device::removeAllChildren()+0x29>
c0009f82:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f85:	85 c0                	test   eax,eax
c0009f87:	74 0c                	je     c0009f95 <Device::removeAllChildren()+0x25>
c0009f89:	83 ec 0c             	sub    esp,0xc
c0009f8c:	8b 10                	mov    edx,DWORD PTR [eax]
c0009f8e:	50                   	push   eax
c0009f8f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009f92:	83 c4 10             	add    esp,0x10
c0009f95:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009f97:	eb e4                	jmp    c0009f7d <Device::removeAllChildren()+0xd>
c0009f99:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009f9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009fa5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009fab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009fb2:	58                   	pop    eax
c0009fb3:	5b                   	pop    ebx
c0009fb4:	5e                   	pop    esi
c0009fb5:	c3                   	ret    

c0009fb6 <Device::hibernateAll()>:
c0009fb6:	53                   	push   ebx
c0009fb7:	83 ec 14             	sub    esp,0x14
c0009fba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009fbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009fc0:	53                   	push   ebx
c0009fc1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009fc4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009fca:	83 c4 10             	add    esp,0x10
c0009fcd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009fd0:	74 0f                	je     c0009fe1 <Device::hibernateAll()+0x2b>
c0009fd2:	83 ec 0c             	sub    esp,0xc
c0009fd5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009fd8:	e8 d9 ff ff ff       	call   c0009fb6 <Device::hibernateAll()>
c0009fdd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009fdf:	eb e9                	jmp    c0009fca <Device::hibernateAll()+0x14>
c0009fe1:	83 c4 08             	add    esp,0x8
c0009fe4:	5b                   	pop    ebx
c0009fe5:	c3                   	ret    

c0009fe6 <Device::wakeAll()>:
c0009fe6:	53                   	push   ebx
c0009fe7:	83 ec 14             	sub    esp,0x14
c0009fea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009fee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ff0:	53                   	push   ebx
c0009ff1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009ff4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ffa:	83 c4 10             	add    esp,0x10
c0009ffd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a000:	74 0f                	je     c000a011 <Device::wakeAll()+0x2b>
c000a002:	83 ec 0c             	sub    esp,0xc
c000a005:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a008:	e8 d9 ff ff ff       	call   c0009fe6 <Device::wakeAll()>
c000a00d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a00f:	eb e9                	jmp    c0009ffa <Device::wakeAll()+0x14>
c000a011:	83 c4 08             	add    esp,0x8
c000a014:	5b                   	pop    ebx
c000a015:	c3                   	ret    

c000a016 <Device::detectAll()>:
c000a016:	53                   	push   ebx
c000a017:	83 ec 14             	sub    esp,0x14
c000a01a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a01e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a020:	53                   	push   ebx
c000a021:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000a024:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a02a:	83 c4 10             	add    esp,0x10
c000a02d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a030:	74 0f                	je     c000a041 <Device::detectAll()+0x2b>
c000a032:	83 ec 0c             	sub    esp,0xc
c000a035:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a038:	e8 d9 ff ff ff       	call   c000a016 <Device::detectAll()>
c000a03d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a03f:	eb e9                	jmp    c000a02a <Device::detectAll()+0x14>
c000a041:	83 c4 08             	add    esp,0x8
c000a044:	5b                   	pop    ebx
c000a045:	c3                   	ret    

c000a046 <Device::disableLegacyAll()>:
c000a046:	c3                   	ret    
c000a047:	90                   	nop

c000a048 <Device::loadDriversForAll()>:
c000a048:	c3                   	ret    
c000a049:	90                   	nop

c000a04a <Device::powerSavingAll(PowerSavingLevel)>:
c000a04a:	56                   	push   esi
c000a04b:	53                   	push   ebx
c000a04c:	83 ec 0c             	sub    esp,0xc
c000a04f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a053:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000a057:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a059:	56                   	push   esi
c000a05a:	53                   	push   ebx
c000a05b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000a05e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a064:	83 c4 10             	add    esp,0x10
c000a067:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a06a:	74 0f                	je     c000a07b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000a06c:	52                   	push   edx
c000a06d:	52                   	push   edx
c000a06e:	56                   	push   esi
c000a06f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a072:	e8 d3 ff ff ff       	call   c000a04a <Device::powerSavingAll(PowerSavingLevel)>
c000a077:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a079:	eb e9                	jmp    c000a064 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000a07b:	58                   	pop    eax
c000a07c:	5b                   	pop    ebx
c000a07d:	5e                   	pop    esi
c000a07e:	c3                   	ret    
c000a07f:	90                   	nop

c000a080 <Device::setName(char const*)>:
c000a080:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000a088:	e9 b3 65 ff ff       	jmp    c0000640 <strcpy>
c000a08d:	90                   	nop

c000a08e <Device::Device(char const*)>:
c000a08e:	83 ec 1c             	sub    esp,0x1c
c000a091:	ba d0 84 02 c0       	mov    edx,0xc00284d0
c000a096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a09a:	89 10                	mov    DWORD PTR [eax],edx
c000a09c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a0a0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000a0aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a0ae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a0b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a0bc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a0c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a0ca:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a0d4:	83 ec 08             	sub    esp,0x8
c000a0d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0df:	e8 9c ff ff ff       	call   c000a080 <Device::setName(char const*)>
c000a0e4:	83 c4 10             	add    esp,0x10
c000a0e7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000a0ef:	83 ec 0c             	sub    esp,0xc
c000a0f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a0f6:	e8 40 5c 00 00       	call   c000fd3b <malloc>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a104:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a10b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000a10f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000a115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a119:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a11f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a129:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a12f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a13a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000a141:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a145:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000a14c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a150:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a15a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a15e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a168:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a16c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a176:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a17a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000a184:	90                   	nop
c000a185:	83 c4 1c             	add    esp,0x1c
c000a188:	c3                   	ret    
c000a189:	90                   	nop

c000a18a <Device::getName()>:
c000a18a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a18e:	05 d0 00 00 00       	add    eax,0xd0
c000a193:	c3                   	ret    

c000a194 <Device::closeAll()>:
c000a194:	53                   	push   ebx
c000a195:	83 ec 08             	sub    esp,0x8
c000a198:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a19c:	53                   	push   ebx
c000a19d:	e8 e8 ff ff ff       	call   c000a18a <Device::getName()>
c000a1a2:	52                   	push   edx
c000a1a3:	50                   	push   eax
c000a1a4:	68 84 84 02 c0       	push   0xc0028484
c000a1a9:	e8 ce cd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000a1ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a1b0:	6a 00                	push   0x0
c000a1b2:	6a 00                	push   0x0
c000a1b4:	6a 00                	push   0x0
c000a1b6:	53                   	push   ebx
c000a1b7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a1ba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a1c0:	83 c4 20             	add    esp,0x20
c000a1c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a1c6:	74 12                	je     c000a1da <Device::closeAll()+0x46>
c000a1c8:	83 ec 0c             	sub    esp,0xc
c000a1cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a1ce:	e8 c1 ff ff ff       	call   c000a194 <Device::closeAll()>
c000a1d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a1d5:	83 c4 10             	add    esp,0x10
c000a1d8:	eb e9                	jmp    c000a1c3 <Device::closeAll()+0x2f>
c000a1da:	83 c4 08             	add    esp,0x8
c000a1dd:	5b                   	pop    ebx
c000a1de:	c3                   	ret    
c000a1df:	90                   	nop

c000a1e0 <DriverlessDevice::DriverlessDevice(char const*)>:
c000a1e0:	83 ec 0c             	sub    esp,0xc
c000a1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e7:	83 ec 08             	sub    esp,0x8
c000a1ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ee:	50                   	push   eax
c000a1ef:	e8 9a fe ff ff       	call   c000a08e <Device::Device(char const*)>
c000a1f4:	83 c4 10             	add    esp,0x10
c000a1f7:	ba fc 84 02 c0       	mov    edx,0xc00284fc
c000a1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a200:	89 10                	mov    DWORD PTR [eax],edx
c000a202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a206:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000a210:	90                   	nop
c000a211:	83 c4 0c             	add    esp,0xc
c000a214:	c3                   	ret    
c000a215:	90                   	nop

c000a216 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000a216:	57                   	push   edi
c000a217:	56                   	push   esi
c000a218:	53                   	push   ebx
c000a219:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a21d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a221:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a225:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000a22b:	75 0c                	jne    c000a239 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000a22d:	52                   	push   edx
c000a22e:	52                   	push   edx
c000a22f:	53                   	push   ebx
c000a230:	56                   	push   esi
c000a231:	e8 4c c8 01 00       	call   c0026a82 <LinkedList<Device>::addElement(Device*)>
c000a236:	83 c4 10             	add    esp,0x10
c000a239:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a23f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a242:	74 12                	je     c000a256 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000a244:	50                   	push   eax
c000a245:	57                   	push   edi
c000a246:	56                   	push   esi
c000a247:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a24a:	e8 c7 ff ff ff       	call   c000a216 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000a24f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a251:	83 c4 10             	add    esp,0x10
c000a254:	eb e9                	jmp    c000a23f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000a256:	5b                   	pop    ebx
c000a257:	5e                   	pop    esi
c000a258:	5f                   	pop    edi
c000a259:	c3                   	ret    

c000a25a <getDevicesOfType(DeviceType)>:
c000a25a:	53                   	push   ebx
c000a25b:	83 ec 14             	sub    esp,0x14
c000a25e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a262:	53                   	push   ebx
c000a263:	e8 f6 c8 01 00       	call   c0026b5e <LinkedList<Device>::LinkedList()>
c000a268:	83 c4 0c             	add    esp,0xc
c000a26b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a26f:	53                   	push   ebx
c000a270:	ff 35 08 31 03 c0    	push   DWORD PTR ds:0xc0033108
c000a276:	e8 9b ff ff ff       	call   c000a216 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000a27b:	89 d8                	mov    eax,ebx
c000a27d:	83 c4 18             	add    esp,0x18
c000a280:	5b                   	pop    ebx
c000a281:	c2 04 00             	ret    0x4

c000a284 <HardDiskController::HardDiskController(char const*)>:
c000a284:	83 ec 0c             	sub    esp,0xc
c000a287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a28b:	83 ec 08             	sub    esp,0x8
c000a28e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a292:	50                   	push   eax
c000a293:	e8 f6 fd ff ff       	call   c000a08e <Device::Device(char const*)>
c000a298:	83 c4 10             	add    esp,0x10
c000a29b:	ba 28 85 02 c0       	mov    edx,0xc0028528
c000a2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2a4:	89 10                	mov    DWORD PTR [eax],edx
c000a2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2aa:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000a2b4:	90                   	nop
c000a2b5:	83 c4 0c             	add    esp,0xc
c000a2b8:	c3                   	ret    
c000a2b9:	90                   	nop
c000a2ba:	66 90                	xchg   ax,ax

c000a2bc <HardDiskController::~HardDiskController()>:
c000a2bc:	83 ec 0c             	sub    esp,0xc
c000a2bf:	ba 28 85 02 c0       	mov    edx,0xc0028528
c000a2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2c8:	89 10                	mov    DWORD PTR [eax],edx
c000a2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2ce:	83 ec 0c             	sub    esp,0xc
c000a2d1:	50                   	push   eax
c000a2d2:	e8 57 fb ff ff       	call   c0009e2e <Device::~Device()>
c000a2d7:	83 c4 10             	add    esp,0x10
c000a2da:	90                   	nop
c000a2db:	83 c4 0c             	add    esp,0xc
c000a2de:	c3                   	ret    
c000a2df:	90                   	nop

c000a2e0 <HardDiskController::~HardDiskController()>:
c000a2e0:	83 ec 0c             	sub    esp,0xc
c000a2e3:	83 ec 0c             	sub    esp,0xc
c000a2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ea:	e8 cd ff ff ff       	call   c000a2bc <HardDiskController::~HardDiskController()>
c000a2ef:	83 c4 10             	add    esp,0x10
c000a2f2:	83 ec 08             	sub    esp,0x8
c000a2f5:	68 58 01 00 00       	push   0x158
c000a2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2fe:	e8 51 35 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000a303:	83 c4 10             	add    esp,0x10
c000a306:	83 c4 0c             	add    esp,0xc
c000a309:	c3                   	ret    

c000a30a <PhysicalDisk::eject()>:
c000a30a:	83 c8 ff             	or     eax,0xffffffff
c000a30d:	c3                   	ret    

c000a30e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000a30e:	83 ec 0c             	sub    esp,0xc
c000a311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a31c:	50                   	push   eax
c000a31d:	e8 6c fd ff ff       	call   c000a08e <Device::Device(char const*)>
c000a322:	83 c4 10             	add    esp,0x10
c000a325:	ba 54 85 02 c0       	mov    edx,0xc0028554
c000a32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a32e:	89 10                	mov    DWORD PTR [eax],edx
c000a330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a334:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a33f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000a346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a34a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000a354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a358:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a35c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000a362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a366:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000a370:	90                   	nop
c000a371:	83 c4 0c             	add    esp,0xc
c000a374:	c3                   	ret    
c000a375:	90                   	nop

c000a376 <PhysicalDisk::startCache()>:
c000a376:	56                   	push   esi
c000a377:	53                   	push   ebx
c000a378:	83 ec 10             	sub    esp,0x10
c000a37b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a37f:	6a 44                	push   0x44
c000a381:	e8 b5 59 00 00       	call   c000fd3b <malloc>
c000a386:	89 c6                	mov    esi,eax
c000a388:	58                   	pop    eax
c000a389:	5a                   	pop    edx
c000a38a:	53                   	push   ebx
c000a38b:	56                   	push   esi
c000a38c:	e8 b7 13 00 00       	call   c000b748 <VCache::VCache(PhysicalDisk*)>
c000a391:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000a397:	83 c4 14             	add    esp,0x14
c000a39a:	5b                   	pop    ebx
c000a39b:	5e                   	pop    esi
c000a39c:	c3                   	ret    
c000a39d:	90                   	nop

c000a39e <PhysicalDisk::~PhysicalDisk()>:
c000a39e:	83 ec 0c             	sub    esp,0xc
c000a3a1:	ba 54 85 02 c0       	mov    edx,0xc0028554
c000a3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3aa:	89 10                	mov    DWORD PTR [eax],edx
c000a3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3b0:	83 ec 0c             	sub    esp,0xc
c000a3b3:	50                   	push   eax
c000a3b4:	e8 75 fa ff ff       	call   c0009e2e <Device::~Device()>
c000a3b9:	83 c4 10             	add    esp,0x10
c000a3bc:	90                   	nop
c000a3bd:	83 c4 0c             	add    esp,0xc
c000a3c0:	c3                   	ret    
c000a3c1:	90                   	nop

c000a3c2 <PhysicalDisk::~PhysicalDisk()>:
c000a3c2:	83 ec 0c             	sub    esp,0xc
c000a3c5:	83 ec 0c             	sub    esp,0xc
c000a3c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3cc:	e8 cd ff ff ff       	call   c000a39e <PhysicalDisk::~PhysicalDisk()>
c000a3d1:	83 c4 10             	add    esp,0x10
c000a3d4:	83 ec 08             	sub    esp,0x8
c000a3d7:	68 6c 01 00 00       	push   0x16c
c000a3dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3e0:	e8 6f 34 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000a3e5:	83 c4 10             	add    esp,0x10
c000a3e8:	83 c4 0c             	add    esp,0xc
c000a3eb:	c3                   	ret    

c000a3ec <startGUI(void*)>:
c000a3ec:	55                   	push   ebp
c000a3ed:	89 e5                	mov    ebp,esp
c000a3ef:	83 ec 08             	sub    esp,0x8
c000a3f2:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000a3fa:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000a3ff:	85 c0                	test   eax,eax
c000a401:	75 01                	jne    c000a404 <startGUI(void*)+0x18>
c000a403:	fb                   	sti    
c000a404:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000a409:	83 ec 04             	sub    esp,0x4
c000a40c:	6a 00                	push   0x0
c000a40e:	50                   	push   eax
c000a40f:	68 84 85 02 c0       	push   0xc0028584
c000a414:	e8 73 bf 00 00       	call   c001638c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a419:	83 c4 10             	add    esp,0x10
c000a41c:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000a421:	83 ec 04             	sub    esp,0x4
c000a424:	6a 00                	push   0x0
c000a426:	50                   	push   eax
c000a427:	68 9e 85 02 c0       	push   0xc002859e
c000a42c:	e8 5b bf 00 00       	call   c001638c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a431:	83 c4 10             	add    esp,0x10
c000a434:	eb fe                	jmp    c000a434 <startGUI(void*)+0x48>

c000a436 <startGUIVESA(void*)>:
c000a436:	55                   	push   ebp
c000a437:	89 e5                	mov    ebp,esp
c000a439:	83 ec 08             	sub    esp,0x8
c000a43c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000a444:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000a449:	85 c0                	test   eax,eax
c000a44b:	75 01                	jne    c000a44e <startGUIVESA(void*)+0x18>
c000a44d:	fb                   	sti    
c000a44e:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000a453:	83 ec 04             	sub    esp,0x4
c000a456:	6a 00                	push   0x0
c000a458:	50                   	push   eax
c000a459:	68 bc 85 02 c0       	push   0xc00285bc
c000a45e:	e8 29 bf 00 00       	call   c001638c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a463:	83 c4 10             	add    esp,0x10
c000a466:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000a46b:	83 ec 04             	sub    esp,0x4
c000a46e:	6a 00                	push   0x0
c000a470:	50                   	push   eax
c000a471:	68 9e 85 02 c0       	push   0xc002859e
c000a476:	e8 11 bf 00 00       	call   c001638c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a47b:	83 c4 10             	add    esp,0x10
c000a47e:	eb fe                	jmp    c000a47e <startGUIVESA(void*)+0x48>

c000a480 <sendKeyToTerminal(unsigned char)>:
c000a480:	55                   	push   ebp
c000a481:	89 e5                	mov    ebp,esp
c000a483:	83 ec 28             	sub    esp,0x28
c000a486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a489:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000a48c:	a1 f4 31 03 c0       	mov    eax,ds:0xc00331f4
c000a491:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000a495:	83 ec 08             	sub    esp,0x8
c000a498:	52                   	push   edx
c000a499:	50                   	push   eax
c000a49a:	e8 a9 89 00 00       	call   c0012e48 <VgaText::receiveKey(unsigned char)>
c000a49f:	83 c4 10             	add    esp,0x10
c000a4a2:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a4a6:	83 f8 0a             	cmp    eax,0xa
c000a4a9:	74 16                	je     c000a4c1 <sendKeyToTerminal(unsigned char)+0x41>
c000a4ab:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a4af:	83 f8 03             	cmp    eax,0x3
c000a4b2:	74 0d                	je     c000a4c1 <sendKeyToTerminal(unsigned char)+0x41>
c000a4b4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a4b8:	83 f8 1c             	cmp    eax,0x1c
c000a4bb:	0f 85 92 00 00 00    	jne    c000a553 <sendKeyToTerminal(unsigned char)+0xd3>
c000a4c1:	fa                   	cli    
c000a4c2:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000a4c7:	83 c0 01             	add    eax,0x1
c000a4ca:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000a4cf:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c000a4d4:	83 c0 01             	add    eax,0x1
c000a4d7:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c000a4dc:	a1 80 26 03 c0       	mov    eax,ds:0xc0032680
c000a4e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a4e4:	c7 05 80 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032680,0x0
c000a4ee:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a4f2:	74 1f                	je     c000a513 <sendKeyToTerminal(unsigned char)+0x93>
c000a4f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a4f7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a4fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a4fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a500:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a503:	83 ec 0c             	sub    esp,0xc
c000a506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a509:	e8 76 cb 00 00       	call   c0017084 <unblockTask(ThreadControlBlock*)>
c000a50e:	83 c4 10             	add    esp,0x10
c000a511:	eb db                	jmp    c000a4ee <sendKeyToTerminal(unsigned char)+0x6e>
c000a513:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c000a518:	83 e8 01             	sub    eax,0x1
c000a51b:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c000a520:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c000a525:	85 c0                	test   eax,eax
c000a527:	75 18                	jne    c000a541 <sendKeyToTerminal(unsigned char)+0xc1>
c000a529:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c000a52e:	85 c0                	test   eax,eax
c000a530:	74 0f                	je     c000a541 <sendKeyToTerminal(unsigned char)+0xc1>
c000a532:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c000a53c:	e8 e7 c7 00 00       	call   c0016d28 <schedule()>
c000a541:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000a549:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000a54e:	85 c0                	test   eax,eax
c000a550:	75 01                	jne    c000a553 <sendKeyToTerminal(unsigned char)+0xd3>
c000a552:	fb                   	sti    
c000a553:	90                   	nop
c000a554:	c9                   	leave  
c000a555:	c3                   	ret    

c000a556 <sendKeyboardToken(KeyboardToken)>:
c000a556:	55                   	push   ebp
c000a557:	89 e5                	mov    ebp,esp
c000a559:	83 ec 18             	sub    esp,0x18
c000a55c:	e8 b4 64 00 00       	call   c0010a15 <KeUserIOReceived()>
c000a561:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a567:	0f b7 c0             	movzx  eax,ax
c000a56a:	83 f2 01             	xor    edx,0x1
c000a56d:	88 90 a0 26 03 c0    	mov    BYTE PTR [eax-0x3ffcd960],dl
c000a573:	a1 88 26 03 c0       	mov    eax,ds:0xc0032688
c000a578:	85 c0                	test   eax,eax
c000a57a:	74 24                	je     c000a5a0 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a57c:	8b 0d 88 26 03 c0    	mov    ecx,DWORD PTR ds:0xc0032688
c000a582:	83 ec 04             	sub    esp,0x4
c000a585:	68 a0 26 03 c0       	push   0xc00326a0
c000a58a:	83 ec 08             	sub    esp,0x8
c000a58d:	89 e2                	mov    edx,esp
c000a58f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a592:	89 02                	mov    DWORD PTR [edx],eax
c000a594:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a597:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a59b:	ff d1                	call   ecx
c000a59d:	83 c4 10             	add    esp,0x10
c000a5a0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a5a4:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a5a7:	0f b6 c0             	movzx  eax,al
c000a5aa:	85 c0                	test   eax,eax
c000a5ac:	0f 84 da 00 00 00    	je     c000a68c <sendKeyboardToken(KeyboardToken)+0x136>
c000a5b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5b5:	0f b7 c0             	movzx  eax,ax
c000a5b8:	3d 18 03 00 00       	cmp    eax,0x318
c000a5bd:	75 06                	jne    c000a5c5 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a5bf:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a5c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5c8:	0f b7 c0             	movzx  eax,ax
c000a5cb:	3d 19 03 00 00       	cmp    eax,0x319
c000a5d0:	75 06                	jne    c000a5d8 <sendKeyboardToken(KeyboardToken)+0x82>
c000a5d2:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a5d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5db:	0f b7 c0             	movzx  eax,ax
c000a5de:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a5e3:	75 06                	jne    c000a5eb <sendKeyboardToken(KeyboardToken)+0x95>
c000a5e5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a5eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5ee:	0f b7 c0             	movzx  eax,ax
c000a5f1:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a5f6:	75 06                	jne    c000a5fe <sendKeyboardToken(KeyboardToken)+0xa8>
c000a5f8:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a5fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a601:	0f b7 c0             	movzx  eax,ax
c000a604:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a609:	75 06                	jne    c000a611 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a60b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a614:	0f b7 c0             	movzx  eax,ax
c000a617:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a61c:	75 06                	jne    c000a624 <sendKeyboardToken(KeyboardToken)+0xce>
c000a61e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a627:	0f b7 c0             	movzx  eax,ax
c000a62a:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a62f:	75 06                	jne    c000a637 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a631:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a63a:	0f b7 c0             	movzx  eax,ax
c000a63d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a642:	75 06                	jne    c000a64a <sendKeyboardToken(KeyboardToken)+0xf4>
c000a644:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a64a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a64d:	0f b7 c0             	movzx  eax,ax
c000a650:	3d 20 03 00 00       	cmp    eax,0x320
c000a655:	75 06                	jne    c000a65d <sendKeyboardToken(KeyboardToken)+0x107>
c000a657:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a660:	0f b7 c0             	movzx  eax,ax
c000a663:	3d 21 03 00 00       	cmp    eax,0x321
c000a668:	75 06                	jne    c000a670 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a66a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a673:	0f b7 c0             	movzx  eax,ax
c000a676:	3d 22 03 00 00       	cmp    eax,0x322
c000a67b:	0f 85 f1 00 00 00    	jne    c000a772 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a681:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a687:	e9 e6 00 00 00       	jmp    c000a772 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a68c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a68f:	0f b7 c0             	movzx  eax,ax
c000a692:	3d 18 03 00 00       	cmp    eax,0x318
c000a697:	75 0a                	jne    c000a6a3 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a699:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a69f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a6a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a6a6:	0f b7 c0             	movzx  eax,ax
c000a6a9:	3d 19 03 00 00       	cmp    eax,0x319
c000a6ae:	75 0a                	jne    c000a6ba <sendKeyboardToken(KeyboardToken)+0x164>
c000a6b0:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a6b6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a6ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a6bd:	0f b7 c0             	movzx  eax,ax
c000a6c0:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a6c5:	75 0a                	jne    c000a6d1 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a6c7:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a6cd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a6d4:	0f b7 c0             	movzx  eax,ax
c000a6d7:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a6dc:	75 0a                	jne    c000a6e8 <sendKeyboardToken(KeyboardToken)+0x192>
c000a6de:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a6e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a6eb:	0f b7 c0             	movzx  eax,ax
c000a6ee:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a6f3:	75 0a                	jne    c000a6ff <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a6f5:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a6fb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a6ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a702:	0f b7 c0             	movzx  eax,ax
c000a705:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a70a:	75 0a                	jne    c000a716 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a70c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a712:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a719:	0f b7 c0             	movzx  eax,ax
c000a71c:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a721:	75 0a                	jne    c000a72d <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a723:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a729:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a72d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a730:	0f b7 c0             	movzx  eax,ax
c000a733:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a738:	75 0a                	jne    c000a744 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a73a:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a740:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a747:	0f b7 c0             	movzx  eax,ax
c000a74a:	3d 20 03 00 00       	cmp    eax,0x320
c000a74f:	75 0a                	jne    c000a75b <sendKeyboardToken(KeyboardToken)+0x205>
c000a751:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a757:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a75b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a75e:	0f b7 c0             	movzx  eax,ax
c000a761:	3d 21 03 00 00       	cmp    eax,0x321
c000a766:	75 0a                	jne    c000a772 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a768:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a76e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a775:	0f b7 c0             	movzx  eax,ax
c000a778:	3d 00 02 00 00       	cmp    eax,0x200
c000a77d:	75 2f                	jne    c000a7ae <sendKeyboardToken(KeyboardToken)+0x258>
c000a77f:	a0 a0 2a 03 c0       	mov    al,ds:0xc0032aa0
c000a784:	83 f0 01             	xor    eax,0x1
c000a787:	0f b6 c0             	movzx  eax,al
c000a78a:	85 c0                	test   eax,eax
c000a78c:	74 20                	je     c000a7ae <sendKeyboardToken(KeyboardToken)+0x258>
c000a78e:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000a793:	6a 01                	push   0x1
c000a795:	6a 00                	push   0x0
c000a797:	68 ec a3 00 c0       	push   0xc000a3ec
c000a79c:	50                   	push   eax
c000a79d:	e8 ba c2 00 00       	call   c0016a5c <Process::createThread(void (*)(void*), void*, int)>
c000a7a2:	83 c4 10             	add    esp,0x10
c000a7a5:	c6 05 a0 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032aa0,0x1
c000a7ac:	eb 3a                	jmp    c000a7e8 <sendKeyboardToken(KeyboardToken)+0x292>
c000a7ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a7b1:	0f b7 c0             	movzx  eax,ax
c000a7b4:	3d 01 02 00 00       	cmp    eax,0x201
c000a7b9:	75 2d                	jne    c000a7e8 <sendKeyboardToken(KeyboardToken)+0x292>
c000a7bb:	a0 a0 2a 03 c0       	mov    al,ds:0xc0032aa0
c000a7c0:	83 f0 01             	xor    eax,0x1
c000a7c3:	0f b6 c0             	movzx  eax,al
c000a7c6:	85 c0                	test   eax,eax
c000a7c8:	74 1e                	je     c000a7e8 <sendKeyboardToken(KeyboardToken)+0x292>
c000a7ca:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000a7cf:	6a 01                	push   0x1
c000a7d1:	6a 00                	push   0x0
c000a7d3:	68 36 a4 00 c0       	push   0xc000a436
c000a7d8:	50                   	push   eax
c000a7d9:	e8 7e c2 00 00       	call   c0016a5c <Process::createThread(void (*)(void*), void*, int)>
c000a7de:	83 c4 10             	add    esp,0x10
c000a7e1:	c6 05 a0 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032aa0,0x1
c000a7e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a7eb:	0f b7 c0             	movzx  eax,ax
c000a7ee:	3d 25 03 00 00       	cmp    eax,0x325
c000a7f3:	75 06                	jne    c000a7fb <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a7f5:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a7fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a7fe:	0f b7 c0             	movzx  eax,ax
c000a801:	3d 24 03 00 00       	cmp    eax,0x324
c000a806:	75 06                	jne    c000a80e <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a808:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a80e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a811:	0f b7 c0             	movzx  eax,ax
c000a814:	3d 23 03 00 00       	cmp    eax,0x323
c000a819:	75 06                	jne    c000a821 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a81b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a824:	0f b7 c0             	movzx  eax,ax
c000a827:	3d 26 03 00 00       	cmp    eax,0x326
c000a82c:	75 06                	jne    c000a834 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a82e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a837:	0f b7 c0             	movzx  eax,ax
c000a83a:	3d 27 03 00 00       	cmp    eax,0x327
c000a83f:	75 06                	jne    c000a847 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a841:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a84a:	0f b7 c0             	movzx  eax,ax
c000a84d:	3d 22 03 00 00       	cmp    eax,0x322
c000a852:	75 06                	jne    c000a85a <sendKeyboardToken(KeyboardToken)+0x304>
c000a854:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a85a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a85e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a861:	83 f0 01             	xor    eax,0x1
c000a864:	0f b6 c0             	movzx  eax,al
c000a867:	85 c0                	test   eax,eax
c000a869:	74 7c                	je     c000a8e7 <sendKeyboardToken(KeyboardToken)+0x391>
c000a86b:	a0 a1 27 03 c0       	mov    al,ds:0xc00327a1
c000a870:	0f b6 c0             	movzx  eax,al
c000a873:	85 c0                	test   eax,eax
c000a875:	74 43                	je     c000a8ba <sendKeyboardToken(KeyboardToken)+0x364>
c000a877:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a87b:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a87f:	85 c0                	test   eax,eax
c000a881:	74 2b                	je     c000a8ae <sendKeyboardToken(KeyboardToken)+0x358>
c000a883:	8b 15 a4 2a 03 c0    	mov    edx,DWORD PTR ds:0xc0032aa4
c000a889:	89 d0                	mov    eax,edx
c000a88b:	c1 e0 02             	shl    eax,0x2
c000a88e:	01 d0                	add    eax,edx
c000a890:	01 c0                	add    eax,eax
c000a892:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c000a897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a89a:	0f b7 c0             	movzx  eax,ax
c000a89d:	8d 50 d0             	lea    edx,[eax-0x30]
c000a8a0:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000a8a5:	01 d0                	add    eax,edx
c000a8a7:	a3 a4 2a 03 c0       	mov    ds:0xc0032aa4,eax
c000a8ac:	eb 71                	jmp    c000a91f <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a8ae:	c7 05 a4 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa4,0x0
c000a8b8:	eb 65                	jmp    c000a91f <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a8ba:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000a8bf:	85 c0                	test   eax,eax
c000a8c1:	74 18                	je     c000a8db <sendKeyboardToken(KeyboardToken)+0x385>
c000a8c3:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000a8c8:	0f b6 c0             	movzx  eax,al
c000a8cb:	83 ec 0c             	sub    esp,0xc
c000a8ce:	50                   	push   eax
c000a8cf:	e8 ac fb ff ff       	call   c000a480 <sendKeyToTerminal(unsigned char)>
c000a8d4:	83 c4 10             	add    esp,0x10
c000a8d7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a8db:	c7 05 a4 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa4,0x0
c000a8e5:	eb 38                	jmp    c000a91f <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a8e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a8ea:	0f b7 c0             	movzx  eax,ax
c000a8ed:	3d 01 01 00 00       	cmp    eax,0x101
c000a8f2:	75 2b                	jne    c000a91f <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a8f4:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000a8f9:	85 c0                	test   eax,eax
c000a8fb:	74 18                	je     c000a915 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a8fd:	a1 a4 2a 03 c0       	mov    eax,ds:0xc0032aa4
c000a902:	0f b6 c0             	movzx  eax,al
c000a905:	83 ec 0c             	sub    esp,0xc
c000a908:	50                   	push   eax
c000a909:	e8 72 fb ff ff       	call   c000a480 <sendKeyToTerminal(unsigned char)>
c000a90e:	83 c4 10             	add    esp,0x10
c000a911:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a915:	c7 05 a4 2a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032aa4,0x0
c000a91f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a922:	83 f0 01             	xor    eax,0x1
c000a925:	0f b6 c0             	movzx  eax,al
c000a928:	85 c0                	test   eax,eax
c000a92a:	74 5a                	je     c000a986 <sendKeyboardToken(KeyboardToken)+0x430>
c000a92c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a92f:	83 f0 01             	xor    eax,0x1
c000a932:	0f b6 c0             	movzx  eax,al
c000a935:	85 c0                	test   eax,eax
c000a937:	74 4d                	je     c000a986 <sendKeyboardToken(KeyboardToken)+0x430>
c000a939:	a0 a0 27 03 c0       	mov    al,ds:0xc00327a0
c000a93e:	83 f0 01             	xor    eax,0x1
c000a941:	0f b6 c0             	movzx  eax,al
c000a944:	85 c0                	test   eax,eax
c000a946:	74 3e                	je     c000a986 <sendKeyboardToken(KeyboardToken)+0x430>
c000a948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a94b:	0f b7 c0             	movzx  eax,ax
c000a94e:	83 f8 1f             	cmp    eax,0x1f
c000a951:	76 0b                	jbe    c000a95e <sendKeyboardToken(KeyboardToken)+0x408>
c000a953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a956:	0f b7 c0             	movzx  eax,ax
c000a959:	83 f8 7e             	cmp    eax,0x7e
c000a95c:	76 16                	jbe    c000a974 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a95e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a961:	0f b7 c0             	movzx  eax,ax
c000a964:	83 f8 0a             	cmp    eax,0xa
c000a967:	74 0b                	je     c000a974 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a96c:	0f b7 c0             	movzx  eax,ax
c000a96f:	83 f8 08             	cmp    eax,0x8
c000a972:	75 12                	jne    c000a986 <sendKeyboardToken(KeyboardToken)+0x430>
c000a974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a977:	0f b6 c0             	movzx  eax,al
c000a97a:	83 ec 0c             	sub    esp,0xc
c000a97d:	50                   	push   eax
c000a97e:	e8 fd fa ff ff       	call   c000a480 <sendKeyToTerminal(unsigned char)>
c000a983:	83 c4 10             	add    esp,0x10
c000a986:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a989:	83 f0 01             	xor    eax,0x1
c000a98c:	0f b6 c0             	movzx  eax,al
c000a98f:	85 c0                	test   eax,eax
c000a991:	74 5d                	je     c000a9f0 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a993:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a996:	83 f0 01             	xor    eax,0x1
c000a999:	0f b6 c0             	movzx  eax,al
c000a99c:	85 c0                	test   eax,eax
c000a99e:	74 50                	je     c000a9f0 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a9a0:	a0 a0 27 03 c0       	mov    al,ds:0xc00327a0
c000a9a5:	0f b6 c0             	movzx  eax,al
c000a9a8:	85 c0                	test   eax,eax
c000a9aa:	74 44                	je     c000a9f0 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a9ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9af:	0f b7 c0             	movzx  eax,ax
c000a9b2:	83 f8 3f             	cmp    eax,0x3f
c000a9b5:	76 39                	jbe    c000a9f0 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a9b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9ba:	0f b7 c0             	movzx  eax,ax
c000a9bd:	83 f8 7f             	cmp    eax,0x7f
c000a9c0:	77 2e                	ja     c000a9f0 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a9c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9c5:	88 c2                	mov    dl,al
c000a9c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9ca:	0f b7 c0             	movzx  eax,ax
c000a9cd:	83 f8 5f             	cmp    eax,0x5f
c000a9d0:	76 04                	jbe    c000a9d6 <sendKeyboardToken(KeyboardToken)+0x480>
c000a9d2:	b0 20                	mov    al,0x20
c000a9d4:	eb 02                	jmp    c000a9d8 <sendKeyboardToken(KeyboardToken)+0x482>
c000a9d6:	b0 00                	mov    al,0x0
c000a9d8:	89 d1                	mov    ecx,edx
c000a9da:	29 c1                	sub    ecx,eax
c000a9dc:	89 c8                	mov    eax,ecx
c000a9de:	83 e8 40             	sub    eax,0x40
c000a9e1:	0f b6 c0             	movzx  eax,al
c000a9e4:	83 ec 0c             	sub    esp,0xc
c000a9e7:	50                   	push   eax
c000a9e8:	e8 93 fa ff ff       	call   c000a480 <sendKeyToTerminal(unsigned char)>
c000a9ed:	83 c4 10             	add    esp,0x10
c000a9f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9f3:	0f b7 c0             	movzx  eax,ax
c000a9f6:	3d 00 03 00 00       	cmp    eax,0x300
c000a9fb:	75 12                	jne    c000aa0f <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a9fd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000aa00:	83 f0 01             	xor    eax,0x1
c000aa03:	0f b6 c0             	movzx  eax,al
c000aa06:	85 c0                	test   eax,eax
c000aa08:	74 05                	je     c000aa0f <sendKeyboardToken(KeyboardToken)+0x4b9>
c000aa0a:	e8 2e 7b 00 00       	call   c001253d <doTerminalCycle()>
c000aa0f:	90                   	nop
c000aa10:	c9                   	leave  
c000aa11:	c3                   	ret    

c000aa12 <clearInternalKeybuffer(VgaText*)>:
c000aa12:	55                   	push   ebp
c000aa13:	89 e5                	mov    ebp,esp
c000aa15:	83 ec 08             	sub    esp,0x8
c000aa18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa1b:	05 02 01 00 00       	add    eax,0x102
c000aa20:	83 ec 0c             	sub    esp,0xc
c000aa23:	50                   	push   eax
c000aa24:	e8 47 5b ff ff       	call   c0000570 <strlen>
c000aa29:	83 c4 10             	add    esp,0x10
c000aa2c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000aa2f:	81 c2 02 01 00 00    	add    edx,0x102
c000aa35:	83 ec 04             	sub    esp,0x4
c000aa38:	50                   	push   eax
c000aa39:	6a 00                	push   0x0
c000aa3b:	52                   	push   edx
c000aa3c:	e8 af 5a ff ff       	call   c00004f0 <memset>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	90                   	nop
c000aa45:	c9                   	leave  
c000aa46:	c3                   	ret    

c000aa47 <readKeyboard(VgaText*, char*, unsigned long)>:
c000aa47:	55                   	push   ebp
c000aa48:	89 e5                	mov    ebp,esp
c000aa4a:	83 ec 18             	sub    esp,0x18
c000aa4d:	a1 88 26 03 c0       	mov    eax,ds:0xc0032688
c000aa52:	85 c0                	test   eax,eax
c000aa54:	74 2a                	je     c000aa80 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000aa56:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000aa5c:	8b 0d 88 26 03 c0    	mov    ecx,DWORD PTR ds:0xc0032688
c000aa62:	83 ec 04             	sub    esp,0x4
c000aa65:	68 a0 26 03 c0       	push   0xc00326a0
c000aa6a:	83 ec 08             	sub    esp,0x8
c000aa6d:	89 e2                	mov    edx,esp
c000aa6f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000aa72:	89 02                	mov    DWORD PTR [edx],eax
c000aa74:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000aa77:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000aa7b:	ff d1                	call   ecx
c000aa7d:	83 c4 10             	add    esp,0x10
c000aa80:	fb                   	sti    
c000aa81:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000aa88:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000aa8c:	0f 84 08 01 00 00    	je     c000ab9a <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000aa92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aa95:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000aa9b:	0f be c0             	movsx  eax,al
c000aa9e:	85 c0                	test   eax,eax
c000aaa0:	75 27                	jne    c000aac9 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000aaa2:	fa                   	cli    
c000aaa3:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000aaa8:	83 c0 01             	add    eax,0x1
c000aaab:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000aab0:	e8 73 c2 00 00       	call   c0016d28 <schedule()>
c000aab5:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000aabd:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000aac2:	85 c0                	test   eax,eax
c000aac4:	75 cc                	jne    c000aa92 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000aac6:	fb                   	sti    
c000aac7:	eb c9                	jmp    c000aa92 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000aac9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000aacc:	8d 50 01             	lea    edx,[eax+0x1]
c000aacf:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000aad2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000aad5:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000aadb:	88 10                	mov    BYTE PTR [eax],dl
c000aadd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aae0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000aae6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000aae9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000aaed:	83 f8 03             	cmp    eax,0x3
c000aaf0:	75 1e                	jne    c000ab10 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000aaf2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000aaf7:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaf9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000aafc:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000ab02:	83 ec 08             	sub    esp,0x8
c000ab05:	6a 02                	push   0x2
c000ab07:	50                   	push   eax
c000ab08:	e8 9e 68 00 00       	call   c00113ab <KeRaiseSignal(SigHandlerBlock*, int)>
c000ab0d:	83 c4 10             	add    esp,0x10
c000ab10:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ab14:	83 f8 1c             	cmp    eax,0x1c
c000ab17:	75 1e                	jne    c000ab37 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000ab19:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ab1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ab23:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000ab29:	83 ec 08             	sub    esp,0x8
c000ab2c:	6a 09                	push   0x9
c000ab2e:	50                   	push   eax
c000ab2f:	e8 77 68 00 00       	call   c00113ab <KeRaiseSignal(SigHandlerBlock*, int)>
c000ab34:	83 c4 10             	add    esp,0x10
c000ab37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab3a:	05 02 01 00 00       	add    eax,0x102
c000ab3f:	83 ec 0c             	sub    esp,0xc
c000ab42:	50                   	push   eax
c000ab43:	e8 28 5a ff ff       	call   c0000570 <strlen>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ab4e:	81 c2 02 01 00 00    	add    edx,0x102
c000ab54:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ab57:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ab5a:	81 c2 02 01 00 00    	add    edx,0x102
c000ab60:	83 ec 04             	sub    esp,0x4
c000ab63:	50                   	push   eax
c000ab64:	51                   	push   ecx
c000ab65:	52                   	push   edx
c000ab66:	e8 65 58 ff ff       	call   c00003d0 <memmove>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000ab72:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000ab76:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ab7a:	83 f8 0a             	cmp    eax,0xa
c000ab7d:	74 16                	je     c000ab95 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000ab7f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ab83:	83 f8 03             	cmp    eax,0x3
c000ab86:	74 0d                	je     c000ab95 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000ab88:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ab8c:	83 f8 1c             	cmp    eax,0x1c
c000ab8f:	0f 85 f3 fe ff ff    	jne    c000aa88 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ab95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ab98:	eb 03                	jmp    c000ab9d <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000ab9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ab9d:	c9                   	leave  
c000ab9e:	c3                   	ret    
c000ab9f:	90                   	nop

c000aba0 <Keyboard::Keyboard(char const*)>:
c000aba0:	83 ec 0c             	sub    esp,0xc
c000aba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba7:	83 ec 08             	sub    esp,0x8
c000abaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abae:	50                   	push   eax
c000abaf:	e8 da f4 ff ff       	call   c000a08e <Device::Device(char const*)>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	ba e0 85 02 c0       	mov    edx,0xc00285e0
c000abbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc0:	89 10                	mov    DWORD PTR [eax],edx
c000abc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000abd0:	c6 05 84 26 03 c0 01 	mov    BYTE PTR ds:0xc0032684,0x1
c000abd7:	90                   	nop
c000abd8:	83 c4 0c             	add    esp,0xc
c000abdb:	c3                   	ret    

c000abdc <Keyboard::~Keyboard()>:
c000abdc:	83 ec 0c             	sub    esp,0xc
c000abdf:	ba e0 85 02 c0       	mov    edx,0xc00285e0
c000abe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe8:	89 10                	mov    DWORD PTR [eax],edx
c000abea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abee:	83 ec 0c             	sub    esp,0xc
c000abf1:	50                   	push   eax
c000abf2:	e8 37 f2 ff ff       	call   c0009e2e <Device::~Device()>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	90                   	nop
c000abfb:	83 c4 0c             	add    esp,0xc
c000abfe:	c3                   	ret    
c000abff:	90                   	nop

c000ac00 <Keyboard::~Keyboard()>:
c000ac00:	83 ec 0c             	sub    esp,0xc
c000ac03:	83 ec 0c             	sub    esp,0xc
c000ac06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac0a:	e8 cd ff ff ff       	call   c000abdc <Keyboard::~Keyboard()>
c000ac0f:	83 c4 10             	add    esp,0x10
c000ac12:	83 ec 08             	sub    esp,0x8
c000ac15:	68 5c 01 00 00       	push   0x15c
c000ac1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1e:	e8 31 2c 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000ac23:	83 c4 10             	add    esp,0x10
c000ac26:	83 c4 0c             	add    esp,0xc
c000ac29:	c3                   	ret    

c000ac2a <LogicalDisk::close(int, int, void*)>:
c000ac2a:	83 c8 ff             	or     eax,0xffffffff
c000ac2d:	c3                   	ret    

c000ac2e <LogicalDisk::~LogicalDisk()>:
c000ac2e:	83 ec 0c             	sub    esp,0xc
c000ac31:	ba 58 86 02 c0       	mov    edx,0xc0028658
c000ac36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac3a:	89 10                	mov    DWORD PTR [eax],edx
c000ac3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac40:	83 ec 0c             	sub    esp,0xc
c000ac43:	50                   	push   eax
c000ac44:	e8 e5 f1 ff ff       	call   c0009e2e <Device::~Device()>
c000ac49:	83 c4 10             	add    esp,0x10
c000ac4c:	90                   	nop
c000ac4d:	83 c4 0c             	add    esp,0xc
c000ac50:	c3                   	ret    
c000ac51:	90                   	nop

c000ac52 <LogicalDisk::~LogicalDisk()>:
c000ac52:	83 ec 0c             	sub    esp,0xc
c000ac55:	83 ec 0c             	sub    esp,0xc
c000ac58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac5c:	e8 cd ff ff ff       	call   c000ac2e <LogicalDisk::~LogicalDisk()>
c000ac61:	83 c4 10             	add    esp,0x10
c000ac64:	83 ec 08             	sub    esp,0x8
c000ac67:	68 78 01 00 00       	push   0x178
c000ac6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac70:	e8 df 2b 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000ac75:	83 c4 10             	add    esp,0x10
c000ac78:	83 c4 0c             	add    esp,0xc
c000ac7b:	c3                   	ret    

c000ac7c <LogicalDisk::open(int, int, void*)>:
c000ac7c:	83 ec 18             	sub    esp,0x18
c000ac7f:	68 0c 86 02 c0       	push   0xc002860c
c000ac84:	e8 07 55 00 00       	call   c0010190 <KePanic(char const*)>
c000ac89:	83 c8 ff             	or     eax,0xffffffff
c000ac8c:	83 c4 1c             	add    esp,0x1c
c000ac8f:	c3                   	ret    

c000ac90 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ac90:	53                   	push   ebx
c000ac91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac9d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000aca3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000aca9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000acaf:	77 10                	ja     c000acc1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000acb1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000acb7:	89 d3                	mov    ebx,edx
c000acb9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000acbf:	72 05                	jb     c000acc6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000acc1:	83 c8 ff             	or     eax,0xffffffff
c000acc4:	89 c2                	mov    edx,eax
c000acc6:	5b                   	pop    ebx
c000acc7:	c3                   	ret    

c000acc8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000acc8:	56                   	push   esi
c000acc9:	83 c8 ff             	or     eax,0xffffffff
c000accc:	53                   	push   ebx
c000accd:	89 c2                	mov    edx,eax
c000accf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000acd3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000acd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acdb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ace1:	77 27                	ja     c000ad0a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ace3:	89 d8                	mov    eax,ebx
c000ace5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000aceb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000acf1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000acf6:	89 c2                	mov    edx,eax
c000acf8:	73 10                	jae    c000ad0a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000acfa:	89 c8                	mov    eax,ecx
c000acfc:	89 da                	mov    edx,ebx
c000acfe:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ad04:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ad0a:	5b                   	pop    ebx
c000ad0b:	5e                   	pop    esi
c000ad0c:	c3                   	ret    
c000ad0d:	90                   	nop

c000ad0e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ad0e:	83 ec 1c             	sub    esp,0x1c
c000ad11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ad15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad25:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ad2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad34:	83 ec 08             	sub    esp,0x8
c000ad37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ad3b:	50                   	push   eax
c000ad3c:	e8 4d f3 ff ff       	call   c000a08e <Device::Device(char const*)>
c000ad41:	83 c4 10             	add    esp,0x10
c000ad44:	ba 58 86 02 c0       	mov    edx,0xc0028658
c000ad49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad4d:	89 10                	mov    DWORD PTR [eax],edx
c000ad4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad53:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ad5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad5e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000ad65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad69:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ad70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad74:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ad7e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ad82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad8a:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ad90:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ad96:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ad9a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ada1:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ada7:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000adad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000adb1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000adb5:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000adbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000adbf:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000adc9:	90                   	nop
c000adca:	83 c4 1c             	add    esp,0x1c
c000adcd:	c3                   	ret    

c000adce <LogicalDisk::assignDriveLetter()>:
c000adce:	55                   	push   ebp
c000adcf:	57                   	push   edi
c000add0:	56                   	push   esi
c000add1:	53                   	push   ebx
c000add2:	83 ec 14             	sub    esp,0x14
c000add5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000add9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000addf:	b0 41                	mov    al,0x41
c000ade1:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000ade7:	84 d2                	test   dl,dl
c000ade9:	75 02                	jne    c000aded <LogicalDisk::assignDriveLetter()+0x1f>
c000adeb:	b0 43                	mov    al,0x43
c000aded:	8b 3d c0 2a 03 c0    	mov    edi,DWORD PTR ds:0xc0032ac0
c000adf3:	0f b6 ca             	movzx  ecx,dl
c000adf6:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000adfa:	0f be e8             	movsx  ebp,al
c000adfd:	8b 3d c4 2a 03 c0    	mov    edi,DWORD PTR ds:0xc0032ac4
c000ae03:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ae07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ae0b:	3c 43                	cmp    al,0x43
c000ae0d:	75 10                	jne    c000ae1f <LogicalDisk::assignDriveLetter()+0x51>
c000ae0f:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ae16:	75 5a                	jne    c000ae72 <LogicalDisk::assignDriveLetter()+0xa4>
c000ae18:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ae1d:	75 53                	jne    c000ae72 <LogicalDisk::assignDriveLetter()+0xa4>
c000ae1f:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ae22:	ba 01 00 00 00       	mov    edx,0x1
c000ae27:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae2a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000ae2d:	d3 e2                	shl    edx,cl
c000ae2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ae33:	89 d7                	mov    edi,edx
c000ae35:	89 d6                	mov    esi,edx
c000ae37:	c1 ff 1f             	sar    edi,0x1f
c000ae3a:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000ae3e:	21 f9                	and    ecx,edi
c000ae40:	09 d1                	or     ecx,edx
c000ae42:	75 2e                	jne    c000ae72 <LogicalDisk::assignDriveLetter()+0xa4>
c000ae44:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000ae48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ae4c:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000ae52:	09 f2                	or     edx,esi
c000ae54:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ae57:	89 15 c0 2a 03 c0    	mov    DWORD PTR ds:0xc0032ac0,edx
c000ae5d:	89 1c b5 e0 2a 03 c0 	mov    DWORD PTR [esi*4-0x3ffcd520],ebx
c000ae64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae68:	09 fa                	or     edx,edi
c000ae6a:	89 15 c4 2a 03 c0    	mov    DWORD PTR ds:0xc0032ac4,edx
c000ae70:	eb 0d                	jmp    c000ae7f <LogicalDisk::assignDriveLetter()+0xb1>
c000ae72:	8d 50 01             	lea    edx,[eax+0x1]
c000ae75:	45                   	inc    ebp
c000ae76:	88 d0                	mov    al,dl
c000ae78:	80 fa 5b             	cmp    dl,0x5b
c000ae7b:	75 8e                	jne    c000ae0b <LogicalDisk::assignDriveLetter()+0x3d>
c000ae7d:	31 c0                	xor    eax,eax
c000ae7f:	83 c4 14             	add    esp,0x14
c000ae82:	5b                   	pop    ebx
c000ae83:	5e                   	pop    esi
c000ae84:	5f                   	pop    edi
c000ae85:	5d                   	pop    ebp
c000ae86:	c3                   	ret    
c000ae87:	90                   	nop

c000ae88 <LogicalDisk::mount()>:
c000ae88:	56                   	push   esi
c000ae89:	53                   	push   ebx
c000ae8a:	53                   	push   ebx
c000ae8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae8f:	8b 1d 04 23 03 c0    	mov    ebx,DWORD PTR ds:0xc0032304
c000ae95:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000ae9f:	85 db                	test   ebx,ebx
c000aea1:	74 27                	je     c000aeca <LogicalDisk::mount()+0x42>
c000aea3:	51                   	push   ecx
c000aea4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000aeab:	8b 13                	mov    edx,DWORD PTR [ebx]
c000aead:	83 e8 41             	sub    eax,0x41
c000aeb0:	50                   	push   eax
c000aeb1:	56                   	push   esi
c000aeb2:	53                   	push   ebx
c000aeb3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000aeb6:	83 c4 10             	add    esp,0x10
c000aeb9:	84 c0                	test   al,al
c000aebb:	74 08                	je     c000aec5 <LogicalDisk::mount()+0x3d>
c000aebd:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000aec3:	eb 07                	jmp    c000aecc <LogicalDisk::mount()+0x44>
c000aec5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000aec8:	eb d5                	jmp    c000ae9f <LogicalDisk::mount()+0x17>
c000aeca:	31 c0                	xor    eax,eax
c000aecc:	5a                   	pop    edx
c000aecd:	5b                   	pop    ebx
c000aece:	5e                   	pop    esi
c000aecf:	c3                   	ret    

c000aed0 <LogicalDisk::unmount()>:
c000aed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aed4:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000aede:	c3                   	ret    
c000aedf:	90                   	nop

c000aee0 <LogicalDisk::eject()>:
c000aee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aee4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000aeea:	8b 10                	mov    edx,DWORD PTR [eax]
c000aeec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aef0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000aef3:	90                   	nop

c000aef4 <LogicalDisk::unassignDriveLetter()>:
c000aef4:	57                   	push   edi
c000aef5:	56                   	push   esi
c000aef6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aefa:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000af01:	85 c9                	test   ecx,ecx
c000af03:	75 0f                	jne    c000af14 <LogicalDisk::unassignDriveLetter()+0x20>
c000af05:	c7 44 24 0c 30 86 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028630
c000af0d:	5e                   	pop    esi
c000af0e:	5f                   	pop    edi
c000af0f:	e9 7c 52 00 00       	jmp    c0010190 <KePanic(char const*)>
c000af14:	83 e9 41             	sub    ecx,0x41
c000af17:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000af1e:	b8 01 00 00 00       	mov    eax,0x1
c000af23:	c7 04 8d e0 2a 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffcd520],0x0
c000af2e:	d3 e0                	shl    eax,cl
c000af30:	89 c7                	mov    edi,eax
c000af32:	f7 d0                	not    eax
c000af34:	c1 ff 1f             	sar    edi,0x1f
c000af37:	21 05 c0 2a 03 c0    	and    DWORD PTR ds:0xc0032ac0,eax
c000af3d:	89 fe                	mov    esi,edi
c000af3f:	f7 d6                	not    esi
c000af41:	21 35 c4 2a 03 c0    	and    DWORD PTR ds:0xc0032ac4,esi
c000af47:	5e                   	pop    esi
c000af48:	5f                   	pop    edi
c000af49:	c3                   	ret    

c000af4a <LogicalDisk::read(unsigned long long, int, void*)>:
c000af4a:	57                   	push   edi
c000af4b:	56                   	push   esi
c000af4c:	53                   	push   ebx
c000af4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000af55:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000af59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000af5d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000af63:	77 41                	ja     c000afa6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000af65:	99                   	cdq    
c000af66:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000af6c:	01 c8                	add    eax,ecx
c000af6e:	11 da                	adc    edx,ebx
c000af70:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000af76:	19 d7                	sbb    edi,edx
c000af78:	72 33                	jb     c000afad <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000af7a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000af80:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000af86:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000af8a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000af8e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000af94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af9e:	5b                   	pop    ebx
c000af9f:	5e                   	pop    esi
c000afa0:	5f                   	pop    edi
c000afa1:	e9 bc 0b 00 00       	jmp    c000bb62 <VCache::read(unsigned long long, int, void*)>
c000afa6:	b8 05 00 00 00       	mov    eax,0x5
c000afab:	eb 05                	jmp    c000afb2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000afad:	b8 07 00 00 00       	mov    eax,0x7
c000afb2:	5b                   	pop    ebx
c000afb3:	5e                   	pop    esi
c000afb4:	5f                   	pop    edi
c000afb5:	c3                   	ret    

c000afb6 <LogicalDisk::write(unsigned long long, int, void*)>:
c000afb6:	57                   	push   edi
c000afb7:	56                   	push   esi
c000afb8:	53                   	push   ebx
c000afb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000afbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000afc1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000afc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000afc9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000afcf:	77 41                	ja     c000b012 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000afd1:	99                   	cdq    
c000afd2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000afd8:	01 c8                	add    eax,ecx
c000afda:	11 da                	adc    edx,ebx
c000afdc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000afe2:	19 d7                	sbb    edi,edx
c000afe4:	72 33                	jb     c000b019 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000afe6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000afec:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aff2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aff6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000affa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b000:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b00a:	5b                   	pop    ebx
c000b00b:	5e                   	pop    esi
c000b00c:	5f                   	pop    edi
c000b00d:	e9 82 09 00 00       	jmp    c000b994 <VCache::write(unsigned long long, int, void*)>
c000b012:	b8 05 00 00 00       	mov    eax,0x5
c000b017:	eb 05                	jmp    c000b01e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000b019:	b8 07 00 00 00       	mov    eax,0x7
c000b01e:	5b                   	pop    ebx
c000b01f:	5e                   	pop    esi
c000b020:	5f                   	pop    edi
c000b021:	c3                   	ret    
c000b022:	66 90                	xchg   ax,ax

c000b024 <Mouse::Mouse(char const*)>:
c000b024:	83 ec 0c             	sub    esp,0xc
c000b027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02b:	83 ec 08             	sub    esp,0x8
c000b02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b032:	50                   	push   eax
c000b033:	e8 56 f0 ff ff       	call   c000a08e <Device::Device(char const*)>
c000b038:	83 c4 10             	add    esp,0x10
c000b03b:	ba 84 86 02 c0       	mov    edx,0xc0028684
c000b040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b044:	89 10                	mov    DWORD PTR [eax],edx
c000b046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000b054:	90                   	nop
c000b055:	83 c4 0c             	add    esp,0xc
c000b058:	c3                   	ret    
c000b059:	90                   	nop
c000b05a:	66 90                	xchg   ax,ax

c000b05c <Mouse::~Mouse()>:
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	ba 84 86 02 c0       	mov    edx,0xc0028684
c000b064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b068:	89 10                	mov    DWORD PTR [eax],edx
c000b06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06e:	83 ec 0c             	sub    esp,0xc
c000b071:	50                   	push   eax
c000b072:	e8 b7 ed ff ff       	call   c0009e2e <Device::~Device()>
c000b077:	83 c4 10             	add    esp,0x10
c000b07a:	90                   	nop
c000b07b:	83 c4 0c             	add    esp,0xc
c000b07e:	c3                   	ret    
c000b07f:	90                   	nop

c000b080 <Mouse::~Mouse()>:
c000b080:	83 ec 0c             	sub    esp,0xc
c000b083:	83 ec 0c             	sub    esp,0xc
c000b086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b08a:	e8 cd ff ff ff       	call   c000b05c <Mouse::~Mouse()>
c000b08f:	83 c4 10             	add    esp,0x10
c000b092:	83 ec 08             	sub    esp,0x8
c000b095:	68 58 01 00 00       	push   0x158
c000b09a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b09e:	e8 b1 27 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000b0a3:	83 c4 10             	add    esp,0x10
c000b0a6:	83 c4 0c             	add    esp,0xc
c000b0a9:	c3                   	ret    

c000b0aa <NIC::getMAC()>:
c000b0aa:	31 c0                	xor    eax,eax
c000b0ac:	31 d2                	xor    edx,edx
c000b0ae:	c3                   	ret    
c000b0af:	90                   	nop

c000b0b0 <NIC::write(int, unsigned char*, int*)>:
c000b0b0:	b8 01 00 00 00       	mov    eax,0x1
c000b0b5:	c3                   	ret    

c000b0b6 <NIC::NIC(char const*)>:
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0bd:	83 ec 08             	sub    esp,0x8
c000b0c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0c4:	50                   	push   eax
c000b0c5:	e8 c4 ef ff ff       	call   c000a08e <Device::Device(char const*)>
c000b0ca:	83 c4 10             	add    esp,0x10
c000b0cd:	ba b0 86 02 c0       	mov    edx,0xc00286b0
c000b0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d6:	89 10                	mov    DWORD PTR [eax],edx
c000b0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0dc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000b0e6:	90                   	nop
c000b0e7:	83 c4 0c             	add    esp,0xc
c000b0ea:	c3                   	ret    
c000b0eb:	90                   	nop

c000b0ec <NIC::~NIC()>:
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	ba b0 86 02 c0       	mov    edx,0xc00286b0
c000b0f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f8:	89 10                	mov    DWORD PTR [eax],edx
c000b0fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fe:	83 ec 0c             	sub    esp,0xc
c000b101:	50                   	push   eax
c000b102:	e8 27 ed ff ff       	call   c0009e2e <Device::~Device()>
c000b107:	83 c4 10             	add    esp,0x10
c000b10a:	90                   	nop
c000b10b:	83 c4 0c             	add    esp,0xc
c000b10e:	c3                   	ret    
c000b10f:	90                   	nop

c000b110 <NIC::~NIC()>:
c000b110:	83 ec 0c             	sub    esp,0xc
c000b113:	83 ec 0c             	sub    esp,0xc
c000b116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b11a:	e8 cd ff ff ff       	call   c000b0ec <NIC::~NIC()>
c000b11f:	83 c4 10             	add    esp,0x10
c000b122:	83 ec 08             	sub    esp,0x8
c000b125:	68 58 01 00 00       	push   0x158
c000b12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b12e:	e8 21 27 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000b133:	83 c4 10             	add    esp,0x10
c000b136:	83 c4 0c             	add    esp,0xc
c000b139:	c3                   	ret    

c000b13a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b13a:	55                   	push   ebp
c000b13b:	57                   	push   edi
c000b13c:	56                   	push   esi
c000b13d:	53                   	push   ebx
c000b13e:	81 ec 28 01 00 00    	sub    esp,0x128
c000b144:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000b14b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000b152:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000b159:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000b160:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b164:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b168:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b16f:	e8 16 f0 ff ff       	call   c000a18a <Device::getName()>
c000b174:	5a                   	pop    edx
c000b175:	59                   	pop    ecx
c000b176:	50                   	push   eax
c000b177:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b17b:	55                   	push   ebp
c000b17c:	e8 bf 54 ff ff       	call   c0000640 <strcpy>
c000b181:	5b                   	pop    ebx
c000b182:	58                   	pop    eax
c000b183:	68 dc 86 02 c0       	push   0xc00286dc
c000b188:	55                   	push   ebp
c000b189:	e8 b2 56 ff ff       	call   c0000840 <strcat>
c000b18e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000b195:	e8 a1 4b 00 00       	call   c000fd3b <malloc>
c000b19a:	83 c4 0c             	add    esp,0xc
c000b19d:	89 c3                	mov    ebx,eax
c000b19f:	57                   	push   edi
c000b1a0:	56                   	push   esi
c000b1a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1a9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000b1b0:	55                   	push   ebp
c000b1b1:	50                   	push   eax
c000b1b2:	e8 57 fb ff ff       	call   c000ad0e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000b1b7:	83 c4 14             	add    esp,0x14
c000b1ba:	53                   	push   ebx
c000b1bb:	e8 0e fc ff ff       	call   c000adce <LogicalDisk::assignDriveLetter()>
c000b1c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b1c3:	e8 c0 fc ff ff       	call   c000ae88 <LogicalDisk::mount()>
c000b1c8:	58                   	pop    eax
c000b1c9:	5a                   	pop    edx
c000b1ca:	53                   	push   ebx
c000b1cb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b1d2:	e8 55 ed ff ff       	call   c0009f2c <Device::addChild(Device*)>
c000b1d7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000b1dd:	5b                   	pop    ebx
c000b1de:	5e                   	pop    esi
c000b1df:	5f                   	pop    edi
c000b1e0:	5d                   	pop    ebp
c000b1e1:	c3                   	ret    

c000b1e2 <createPartitionsForDisk(PhysicalDisk*)>:
c000b1e2:	55                   	push   ebp
c000b1e3:	57                   	push   edi
c000b1e4:	56                   	push   esi
c000b1e5:	53                   	push   ebx
c000b1e6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000b1ec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000b1f3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000b1f9:	3d 00 02 00 00       	cmp    eax,0x200
c000b1fe:	74 27                	je     c000b227 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000b200:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000b206:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000b20c:	83 ec 10             	sub    esp,0x10
c000b20f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000b213:	99                   	cdq    
c000b214:	c1 e6 0a             	shl    esi,0xa
c000b217:	52                   	push   edx
c000b218:	89 fd                	mov    ebp,edi
c000b21a:	50                   	push   eax
c000b21b:	55                   	push   ebp
c000b21c:	56                   	push   esi
c000b21d:	e8 72 71 01 00       	call   c0022394 <__udivdi3>
c000b222:	e9 b9 00 00 00       	jmp    c000b2e0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000b227:	83 ec 0c             	sub    esp,0xc
c000b22a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b22c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000b230:	56                   	push   esi
c000b231:	6a 01                	push   0x1
c000b233:	6a 00                	push   0x0
c000b235:	6a 00                	push   0x0
c000b237:	53                   	push   ebx
c000b238:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b23b:	83 c4 20             	add    esp,0x20
c000b23e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000b246:	75 0a                	jne    c000b252 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000b248:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000b250:	74 2c                	je     c000b27e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000b252:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b258:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b25e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b264:	83 ec 10             	sub    esp,0x10
c000b267:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b26b:	89 f7                	mov    edi,esi
c000b26d:	c1 e0 0a             	shl    eax,0xa
c000b270:	c1 ff 1f             	sar    edi,0x1f
c000b273:	57                   	push   edi
c000b274:	56                   	push   esi
c000b275:	52                   	push   edx
c000b276:	50                   	push   eax
c000b277:	e8 18 71 01 00       	call   c0022394 <__udivdi3>
c000b27c:	eb 62                	jmp    c000b2e0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000b27e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000b285:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000b28c:	89 cf                	mov    edi,ecx
c000b28e:	83 e2 7f             	and    edx,0x7f
c000b291:	83 e7 7f             	and    edi,0x7f
c000b294:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000b29b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000b29e:	83 e0 7f             	and    eax,0x7f
c000b2a1:	8d 14 01             	lea    edx,[ecx+eax*1]
c000b2a4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000b2ab:	83 e0 7f             	and    eax,0x7f
c000b2ae:	01 d0                	add    eax,edx
c000b2b0:	89 c5                	mov    ebp,eax
c000b2b2:	84 c0                	test   al,al
c000b2b4:	74 41                	je     c000b2f7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000b2b6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2bc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b2c2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b2c8:	83 ec 10             	sub    esp,0x10
c000b2cb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b2cf:	89 f7                	mov    edi,esi
c000b2d1:	c1 e0 0a             	shl    eax,0xa
c000b2d4:	c1 ff 1f             	sar    edi,0x1f
c000b2d7:	57                   	push   edi
c000b2d8:	56                   	push   esi
c000b2d9:	52                   	push   edx
c000b2da:	50                   	push   eax
c000b2db:	e8 b4 70 01 00       	call   c0022394 <__udivdi3>
c000b2e0:	83 c4 14             	add    esp,0x14
c000b2e3:	52                   	push   edx
c000b2e4:	50                   	push   eax
c000b2e5:	6a 00                	push   0x0
c000b2e7:	6a 00                	push   0x0
c000b2e9:	53                   	push   ebx
c000b2ea:	e8 4b fe ff ff       	call   c000b13a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000b2ef:	83 c4 20             	add    esp,0x20
c000b2f2:	e9 73 01 00 00       	jmp    c000b46a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000b2f7:	89 f0                	mov    eax,esi
c000b2f9:	31 c9                	xor    ecx,ecx
c000b2fb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000b302:	75 02                	jne    c000b306 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000b304:	89 cd                	mov    ebp,ecx
c000b306:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000b30d:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000b314:	c1 e2 08             	shl    edx,0x8
c000b317:	c1 e6 10             	shl    esi,0x10
c000b31a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000b322:	09 f2                	or     edx,esi
c000b324:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000b32c:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000b333:	83 c0 10             	add    eax,0x10
c000b336:	09 f2                	or     edx,esi
c000b338:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000b33f:	c1 e6 18             	shl    esi,0x18
c000b342:	09 f2                	or     edx,esi
c000b344:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000b34b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000b34f:	c1 e6 10             	shl    esi,0x10
c000b352:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000b359:	c1 e2 08             	shl    edx,0x8
c000b35c:	09 f2                	or     edx,esi
c000b35e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000b365:	09 f2                	or     edx,esi
c000b367:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000b36e:	c1 e6 18             	shl    esi,0x18
c000b371:	09 f2                	or     edx,esi
c000b373:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000b377:	41                   	inc    ecx
c000b378:	83 f9 04             	cmp    ecx,0x4
c000b37b:	0f 85 7a ff ff ff    	jne    c000b2fb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000b381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b385:	83 f0 01             	xor    eax,0x1
c000b388:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000b38c:	75 4f                	jne    c000b3dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000b38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b392:	83 f0 01             	xor    eax,0x1
c000b395:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000b399:	75 42                	jne    c000b3dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000b39b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b3a3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b3ab:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b3b1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b3b7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b3bd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b3c1:	89 f7                	mov    edi,esi
c000b3c3:	c1 e0 0a             	shl    eax,0xa
c000b3c6:	c1 ff 1f             	sar    edi,0x1f
c000b3c9:	57                   	push   edi
c000b3ca:	56                   	push   esi
c000b3cb:	52                   	push   edx
c000b3cc:	50                   	push   eax
c000b3cd:	e8 c2 6f 01 00       	call   c0022394 <__udivdi3>
c000b3d2:	83 c4 10             	add    esp,0x10
c000b3d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b3d9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000b3dd:	89 e8                	mov    eax,ebp
c000b3df:	0f b6 e8             	movzx  ebp,al
c000b3e2:	85 ed                	test   ebp,ebp
c000b3e4:	74 50                	je     c000b436 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000b3e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b3ea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b3ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b3f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000b3f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3fe:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000b402:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000b406:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b40a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b40e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b412:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000b416:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000b41a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000b41e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000b422:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b426:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000b42a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000b42e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000b432:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000b436:	31 ed                	xor    ebp,ebp
c000b438:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000b43c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000b440:	89 f8                	mov    eax,edi
c000b442:	09 f0                	or     eax,esi
c000b444:	74 1e                	je     c000b464 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000b446:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000b44a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000b44e:	89 d1                	mov    ecx,edx
c000b450:	09 c1                	or     ecx,eax
c000b452:	74 10                	je     c000b464 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000b454:	83 ec 0c             	sub    esp,0xc
c000b457:	57                   	push   edi
c000b458:	56                   	push   esi
c000b459:	52                   	push   edx
c000b45a:	50                   	push   eax
c000b45b:	53                   	push   ebx
c000b45c:	e8 d9 fc ff ff       	call   c000b13a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000b461:	83 c4 20             	add    esp,0x20
c000b464:	45                   	inc    ebp
c000b465:	83 fd 04             	cmp    ebp,0x4
c000b468:	75 ce                	jne    c000b438 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000b46a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000b470:	5b                   	pop    ebx
c000b471:	5e                   	pop    esi
c000b472:	5f                   	pop    edi
c000b473:	5d                   	pop    ebp
c000b474:	c3                   	ret    
c000b475:	66 90                	xchg   ax,ax
c000b477:	90                   	nop

c000b478 <Serial::Serial(char const*)>:
c000b478:	83 ec 0c             	sub    esp,0xc
c000b47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47f:	83 ec 08             	sub    esp,0x8
c000b482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b486:	50                   	push   eax
c000b487:	e8 02 ec ff ff       	call   c000a08e <Device::Device(char const*)>
c000b48c:	83 c4 10             	add    esp,0x10
c000b48f:	ba f0 86 02 c0       	mov    edx,0xc00286f0
c000b494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b498:	89 10                	mov    DWORD PTR [eax],edx
c000b49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000b4a8:	90                   	nop
c000b4a9:	83 c4 0c             	add    esp,0xc
c000b4ac:	c3                   	ret    
c000b4ad:	90                   	nop
c000b4ae:	66 90                	xchg   ax,ax

c000b4b0 <Serial::~Serial()>:
c000b4b0:	83 ec 0c             	sub    esp,0xc
c000b4b3:	ba f0 86 02 c0       	mov    edx,0xc00286f0
c000b4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4bc:	89 10                	mov    DWORD PTR [eax],edx
c000b4be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c2:	83 ec 0c             	sub    esp,0xc
c000b4c5:	50                   	push   eax
c000b4c6:	e8 63 e9 ff ff       	call   c0009e2e <Device::~Device()>
c000b4cb:	83 c4 10             	add    esp,0x10
c000b4ce:	90                   	nop
c000b4cf:	83 c4 0c             	add    esp,0xc
c000b4d2:	c3                   	ret    
c000b4d3:	90                   	nop

c000b4d4 <Serial::~Serial()>:
c000b4d4:	83 ec 0c             	sub    esp,0xc
c000b4d7:	83 ec 0c             	sub    esp,0xc
c000b4da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4de:	e8 cd ff ff ff       	call   c000b4b0 <Serial::~Serial()>
c000b4e3:	83 c4 10             	add    esp,0x10
c000b4e6:	83 ec 08             	sub    esp,0x8
c000b4e9:	68 58 01 00 00       	push   0x158
c000b4ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f2:	e8 5d 23 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000b4f7:	83 c4 10             	add    esp,0x10
c000b4fa:	83 c4 0c             	add    esp,0xc
c000b4fd:	c3                   	ret    
c000b4fe:	66 90                	xchg   ax,ax

c000b500 <Timer::Timer(char const*)>:
c000b500:	83 ec 0c             	sub    esp,0xc
c000b503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b507:	83 ec 08             	sub    esp,0x8
c000b50a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b50e:	50                   	push   eax
c000b50f:	e8 7a eb ff ff       	call   c000a08e <Device::Device(char const*)>
c000b514:	83 c4 10             	add    esp,0x10
c000b517:	ba d0 87 02 c0       	mov    edx,0xc00287d0
c000b51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b520:	89 10                	mov    DWORD PTR [eax],edx
c000b522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b526:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b530:	90                   	nop
c000b531:	83 c4 0c             	add    esp,0xc
c000b534:	c3                   	ret    
c000b535:	90                   	nop
c000b536:	66 90                	xchg   ax,ax

c000b538 <Timer::~Timer()>:
c000b538:	83 ec 0c             	sub    esp,0xc
c000b53b:	ba d0 87 02 c0       	mov    edx,0xc00287d0
c000b540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b544:	89 10                	mov    DWORD PTR [eax],edx
c000b546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b54a:	83 ec 0c             	sub    esp,0xc
c000b54d:	50                   	push   eax
c000b54e:	e8 db e8 ff ff       	call   c0009e2e <Device::~Device()>
c000b553:	83 c4 10             	add    esp,0x10
c000b556:	90                   	nop
c000b557:	83 c4 0c             	add    esp,0xc
c000b55a:	c3                   	ret    
c000b55b:	90                   	nop

c000b55c <Timer::~Timer()>:
c000b55c:	83 ec 0c             	sub    esp,0xc
c000b55f:	83 ec 0c             	sub    esp,0xc
c000b562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b566:	e8 cd ff ff ff       	call   c000b538 <Timer::~Timer()>
c000b56b:	83 c4 10             	add    esp,0x10
c000b56e:	83 ec 08             	sub    esp,0x8
c000b571:	68 5c 01 00 00       	push   0x15c
c000b576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b57a:	e8 d5 22 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000b57f:	83 c4 10             	add    esp,0x10
c000b582:	83 c4 0c             	add    esp,0xc
c000b585:	c3                   	ret    

c000b586 <Timer::read()>:
c000b586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b58a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b590:	c3                   	ret    

c000b591 <setupTimer(int)>:
c000b591:	53                   	push   ebx
c000b592:	83 ec 14             	sub    esp,0x14
c000b595:	68 5c 01 00 00       	push   0x15c
c000b59a:	e8 9c 47 00 00       	call   c000fd3b <malloc>
c000b59f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5a2:	89 c3                	mov    ebx,eax
c000b5a4:	e8 97 66 01 00       	call   c0021c40 <PIT::PIT()>
c000b5a9:	58                   	pop    eax
c000b5aa:	5a                   	pop    edx
c000b5ab:	53                   	push   ebx
c000b5ac:	ff 35 08 31 03 c0    	push   DWORD PTR ds:0xc0033108
c000b5b2:	e8 75 e9 ff ff       	call   c0009f2c <Device::addChild(Device*)>
c000b5b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5b9:	6a 00                	push   0x0
c000b5bb:	6a 00                	push   0x0
c000b5bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b5c1:	53                   	push   ebx
c000b5c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	83 c4 28             	add    esp,0x28
c000b5ca:	5b                   	pop    ebx
c000b5cb:	c3                   	ret    

c000b5cc <timerHandler(unsigned int)>:
c000b5cc:	57                   	push   edi
c000b5cd:	31 d2                	xor    edx,edx
c000b5cf:	56                   	push   esi
c000b5d0:	53                   	push   ebx
c000b5d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b5d5:	01 1d 50 2b 03 c0    	add    DWORD PTR ds:0xc0032b50,ebx
c000b5db:	11 15 54 2b 03 c0    	adc    DWORD PTR ds:0xc0032b54,edx
c000b5e1:	80 3d 0d 31 03 c0 00 	cmp    BYTE PTR ds:0xc003310d,0x0
c000b5e8:	75 12                	jne    c000b5fc <timerHandler(unsigned int)+0x30>
c000b5ea:	c7 44 24 10 7f 87 02 c0 	mov    DWORD PTR [esp+0x10],0xc002877f
c000b5f2:	5b                   	pop    ebx
c000b5f3:	5e                   	pop    esi
c000b5f4:	5f                   	pop    edi
c000b5f5:	e9 82 b9 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000b5fa:	66 90                	xchg   ax,ax
c000b5fc:	fa                   	cli    
c000b5fd:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c000b603:	83 ec 0c             	sub    esp,0xc
c000b606:	68 40 33 03 c0       	push   0xc0033340
c000b60b:	e8 90 b5 01 00       	call   c0026ba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b610:	83 c4 10             	add    esp,0x10
c000b613:	84 c0                	test   al,al
c000b615:	0f 85 a9 00 00 00    	jne    c000b6c4 <timerHandler(unsigned int)+0xf8>
c000b61b:	83 ec 0c             	sub    esp,0xc
c000b61e:	68 40 33 03 c0       	push   0xc0033340
c000b623:	e8 94 b5 01 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b628:	83 c4 10             	add    esp,0x10
c000b62b:	89 c6                	mov    esi,eax
c000b62d:	8d 76 00             	lea    esi,[esi+0x0]
c000b630:	83 ec 0c             	sub    esp,0xc
c000b633:	68 40 33 03 c0       	push   0xc0033340
c000b638:	e8 7f b5 01 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b63d:	c7 04 24 40 33 03 c0 	mov    DWORD PTR [esp],0xc0033340
c000b644:	89 c7                	mov    edi,eax
c000b646:	e8 79 b5 01 00       	call   c0026bc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b64b:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b64e:	83 c4 10             	add    esp,0x10
c000b651:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b654:	39 15 50 2b 03 c0    	cmp    DWORD PTR ds:0xc0032b50,edx
c000b65a:	a1 54 2b 03 c0       	mov    eax,ds:0xc0032b54
c000b65f:	19 c8                	sbb    eax,ecx
c000b661:	72 21                	jb     c000b684 <timerHandler(unsigned int)+0xb8>
c000b663:	83 ec 0c             	sub    esp,0xc
c000b666:	57                   	push   edi
c000b667:	e8 18 ba 00 00       	call   c0017084 <unblockTask(ThreadControlBlock*)>
c000b66c:	83 c4 10             	add    esp,0x10
c000b66f:	39 fe                	cmp    esi,edi
c000b671:	75 25                	jne    c000b698 <timerHandler(unsigned int)+0xcc>
c000b673:	83 ec 0c             	sub    esp,0xc
c000b676:	68 40 33 03 c0       	push   0xc0033340
c000b67b:	e8 3c b5 01 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b680:	89 c6                	mov    esi,eax
c000b682:	eb 10                	jmp    c000b694 <timerHandler(unsigned int)+0xc8>
c000b684:	51                   	push   ecx
c000b685:	51                   	push   ecx
c000b686:	57                   	push   edi
c000b687:	68 40 33 03 c0       	push   0xc0033340
c000b68c:	e8 ef b5 01 00       	call   c0026c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b691:	8d 76 00             	lea    esi,[esi+0x0]
c000b694:	83 c4 10             	add    esp,0x10
c000b697:	90                   	nop
c000b698:	83 ec 0c             	sub    esp,0xc
c000b69b:	68 40 33 03 c0       	push   0xc0033340
c000b6a0:	e8 fb b4 01 00       	call   c0026ba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b6a5:	83 c4 10             	add    esp,0x10
c000b6a8:	84 c0                	test   al,al
c000b6aa:	75 18                	jne    c000b6c4 <timerHandler(unsigned int)+0xf8>
c000b6ac:	83 ec 0c             	sub    esp,0xc
c000b6af:	68 40 33 03 c0       	push   0xc0033340
c000b6b4:	e8 03 b5 01 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b6b9:	83 c4 10             	add    esp,0x10
c000b6bc:	39 f0                	cmp    eax,esi
c000b6be:	0f 85 6c ff ff ff    	jne    c000b630 <timerHandler(unsigned int)+0x64>
c000b6c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b6ca:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b6cd:	85 c0                	test   eax,eax
c000b6cf:	74 5f                	je     c000b730 <timerHandler(unsigned int)+0x164>
c000b6d1:	80 3d 0c 31 03 c0 00 	cmp    BYTE PTR ds:0xc003310c,0x0
c000b6d8:	74 56                	je     c000b730 <timerHandler(unsigned int)+0x164>
c000b6da:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b6df:	76 23                	jbe    c000b704 <timerHandler(unsigned int)+0x138>
c000b6e1:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c000b6e5:	75 11                	jne    c000b6f8 <timerHandler(unsigned int)+0x12c>
c000b6e7:	52                   	push   edx
c000b6e8:	52                   	push   edx
c000b6e9:	50                   	push   eax
c000b6ea:	68 95 87 02 c0       	push   0xc0028795
c000b6ef:	e8 88 b8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b6f4:	83 c4 10             	add    esp,0x10
c000b6f7:	90                   	nop
c000b6f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b6fd:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b704:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b70a:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b70d:	39 d8                	cmp    eax,ebx
c000b70f:	73 0b                	jae    c000b71c <timerHandler(unsigned int)+0x150>
c000b711:	c7 42 38 00 00 00 00 	mov    DWORD PTR [edx+0x38],0x0
c000b718:	eb 0e                	jmp    c000b728 <timerHandler(unsigned int)+0x15c>
c000b71a:	66 90                	xchg   ax,ax
c000b71c:	89 c1                	mov    ecx,eax
c000b71e:	29 d9                	sub    ecx,ebx
c000b720:	39 d8                	cmp    eax,ebx
c000b722:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b725:	75 09                	jne    c000b730 <timerHandler(unsigned int)+0x164>
c000b727:	90                   	nop
c000b728:	e8 fb b5 00 00       	call   c0016d28 <schedule()>
c000b72d:	8d 76 00             	lea    esi,[esi+0x0]
c000b730:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c000b737:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000b73e:	75 04                	jne    c000b744 <timerHandler(unsigned int)+0x178>
c000b740:	fb                   	sti    
c000b741:	8d 76 00             	lea    esi,[esi+0x0]
c000b744:	5b                   	pop    ebx
c000b745:	5e                   	pop    esi
c000b746:	5f                   	pop    edi
c000b747:	c3                   	ret    

c000b748 <VCache::VCache(PhysicalDisk*)>:
c000b748:	53                   	push   ebx
c000b749:	83 ec 18             	sub    esp,0x18
c000b74c:	ba 40 88 02 c0       	mov    edx,0xc0028840
c000b751:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b755:	89 10                	mov    DWORD PTR [eax],edx
c000b757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b75b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b762:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b766:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b76d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b771:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b778:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b77f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b783:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b78a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b791:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b795:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b79c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7a0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7a8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b7af:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b7b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7ba:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b7be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7c2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b7c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7ca:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b7ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7d2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b7d9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b7e1:	83 ec 0c             	sub    esp,0xc
c000b7e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b7e8:	e8 4e 45 00 00       	call   c000fd3b <malloc>
c000b7ed:	83 c4 10             	add    esp,0x10
c000b7f0:	89 c3                	mov    ebx,eax
c000b7f2:	83 ec 0c             	sub    esp,0xc
c000b7f5:	53                   	push   ebx
c000b7f6:	e8 75 49 00 00       	call   c0010170 <Mutex::Mutex()>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b802:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b805:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b809:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b80d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b814:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b81b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b81f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b829:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b82c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b830:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b836:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b83c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b840:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b843:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b84a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b84e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b852:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b858:	05 00 01 00 00       	add    eax,0x100
c000b85d:	c1 e0 04             	shl    eax,0x4
c000b860:	83 ec 0c             	sub    esp,0xc
c000b863:	50                   	push   eax
c000b864:	e8 d2 44 00 00       	call   c000fd3b <malloc>
c000b869:	83 c4 10             	add    esp,0x10
c000b86c:	89 c2                	mov    edx,eax
c000b86e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b872:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b879:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b884:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b888:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b88c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b892:	89 d0                	mov    eax,edx
c000b894:	c1 e0 02             	shl    eax,0x2
c000b897:	01 d0                	add    eax,edx
c000b899:	c1 e0 04             	shl    eax,0x4
c000b89c:	83 ec 0c             	sub    esp,0xc
c000b89f:	50                   	push   eax
c000b8a0:	e8 96 44 00 00       	call   c000fd3b <malloc>
c000b8a5:	83 c4 10             	add    esp,0x10
c000b8a8:	89 c2                	mov    edx,eax
c000b8aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b8ae:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b8b1:	90                   	nop
c000b8b2:	83 c4 18             	add    esp,0x18
c000b8b5:	5b                   	pop    ebx
c000b8b6:	c3                   	ret    
c000b8b7:	90                   	nop

c000b8b8 <VCache::invalidateReadBuffer()>:
c000b8b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8bc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b8c2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b8c6:	c3                   	ret    
c000b8c7:	90                   	nop

c000b8c8 <VCache::writeWriteBuffer()>:
c000b8c8:	53                   	push   ebx
c000b8c9:	83 ec 08             	sub    esp,0x8
c000b8cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b8d0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b8d4:	74 1e                	je     c000b8f4 <VCache::writeWriteBuffer()+0x2c>
c000b8d6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b8d9:	83 ec 0c             	sub    esp,0xc
c000b8dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8de:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b8e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b8e4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b8e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ea:	50                   	push   eax
c000b8eb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b8ee:	83 c4 20             	add    esp,0x20
c000b8f1:	8d 76 00             	lea    esi,[esi+0x0]
c000b8f4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b8fb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b902:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b906:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b90d:	83 c4 08             	add    esp,0x8
c000b910:	5b                   	pop    ebx
c000b911:	c3                   	ret    
c000b912:	66 90                	xchg   ax,ax

c000b914 <VCache::~VCache()>:
c000b914:	83 ec 0c             	sub    esp,0xc
c000b917:	ba 40 88 02 c0       	mov    edx,0xc0028840
c000b91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b920:	89 10                	mov    DWORD PTR [eax],edx
c000b922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b926:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b929:	0f b6 c0             	movzx  eax,al
c000b92c:	85 c0                	test   eax,eax
c000b92e:	74 10                	je     c000b940 <VCache::~VCache()+0x2c>
c000b930:	83 ec 0c             	sub    esp,0xc
c000b933:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b937:	e8 8c ff ff ff       	call   c000b8c8 <VCache::writeWriteBuffer()>
c000b93c:	83 c4 10             	add    esp,0x10
c000b93f:	90                   	nop
c000b940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b944:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b947:	83 ec 0c             	sub    esp,0xc
c000b94a:	50                   	push   eax
c000b94b:	e8 fb 43 00 00       	call   c000fd4b <free>
c000b950:	83 c4 10             	add    esp,0x10
c000b953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b957:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b95a:	83 ec 0c             	sub    esp,0xc
c000b95d:	50                   	push   eax
c000b95e:	e8 e8 43 00 00       	call   c000fd4b <free>
c000b963:	83 c4 10             	add    esp,0x10
c000b966:	90                   	nop
c000b967:	83 c4 0c             	add    esp,0xc
c000b96a:	c3                   	ret    
c000b96b:	90                   	nop

c000b96c <VCache::~VCache()>:
c000b96c:	83 ec 0c             	sub    esp,0xc
c000b96f:	83 ec 0c             	sub    esp,0xc
c000b972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b976:	e8 99 ff ff ff       	call   c000b914 <VCache::~VCache()>
c000b97b:	83 c4 10             	add    esp,0x10
c000b97e:	83 ec 08             	sub    esp,0x8
c000b981:	6a 44                	push   0x44
c000b983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b987:	e8 c8 1e 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000b98c:	83 c4 10             	add    esp,0x10
c000b98f:	83 c4 0c             	add    esp,0xc
c000b992:	c3                   	ret    
c000b993:	90                   	nop

c000b994 <VCache::write(unsigned long long, int, void*)>:
c000b994:	55                   	push   ebp
c000b995:	57                   	push   edi
c000b996:	56                   	push   esi
c000b997:	53                   	push   ebx
c000b998:	83 ec 1c             	sub    esp,0x1c
c000b99b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b99f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b9a3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b9a7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b9ab:	e8 64 b0 00 00       	call   c0016a14 <KeDisablePreemption()>
c000b9b0:	b9 00 10 00 00       	mov    ecx,0x1000
c000b9b5:	50                   	push   eax
c000b9b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b9b9:	0f af c3             	imul   eax,ebx
c000b9bc:	05 ff 0f 00 00       	add    eax,0xfff
c000b9c1:	99                   	cdq    
c000b9c2:	f7 f9                	idiv   ecx
c000b9c4:	50                   	push   eax
c000b9c5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b9c9:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000b9cf:	e8 a8 8a 00 00       	call   c001447c <VAS::canLockPages(unsigned long, int)>
c000b9d4:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b9d8:	83 c4 10             	add    esp,0x10
c000b9db:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b9e0:	74 2a                	je     c000ba0c <VCache::write(unsigned long long, int, void*)+0x78>
c000b9e2:	b9 00 10 00 00       	mov    ecx,0x1000
c000b9e7:	50                   	push   eax
c000b9e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b9eb:	0f af c3             	imul   eax,ebx
c000b9ee:	05 ff 0f 00 00       	add    eax,0xfff
c000b9f3:	99                   	cdq    
c000b9f4:	f7 f9                	idiv   ecx
c000b9f6:	50                   	push   eax
c000b9f7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b9fb:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000ba01:	e8 da 8c 00 00       	call   c00146e0 <VAS::lockPages(unsigned long, int)>
c000ba06:	83 c4 10             	add    esp,0x10
c000ba09:	8d 76 00             	lea    esi,[esi+0x0]
c000ba0c:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000ba10:	74 0e                	je     c000ba20 <VCache::write(unsigned long long, int, void*)+0x8c>
c000ba12:	83 ec 0c             	sub    esp,0xc
c000ba15:	55                   	push   ebp
c000ba16:	e8 9d fe ff ff       	call   c000b8b8 <VCache::invalidateReadBuffer()>
c000ba1b:	83 c4 10             	add    esp,0x10
c000ba1e:	66 90                	xchg   ax,ax
c000ba20:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000ba24:	74 72                	je     c000ba98 <VCache::write(unsigned long long, int, void*)+0x104>
c000ba26:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000ba29:	89 c8                	mov    eax,ecx
c000ba2b:	99                   	cdq    
c000ba2c:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000ba2f:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000ba32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba42:	31 f0                	xor    eax,esi
c000ba44:	31 fa                	xor    edx,edi
c000ba46:	09 d0                	or     eax,edx
c000ba48:	75 42                	jne    c000ba8c <VCache::write(unsigned long long, int, void*)+0xf8>
c000ba4a:	83 fb 01             	cmp    ebx,0x1
c000ba4d:	75 3d                	jne    c000ba8c <VCache::write(unsigned long long, int, void*)+0xf8>
c000ba4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba52:	89 cf                	mov    edi,ecx
c000ba54:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba5a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ba5e:	0f af f8             	imul   edi,eax
c000ba61:	89 c1                	mov    ecx,eax
c000ba63:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000ba66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba68:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000ba6b:	40                   	inc    eax
c000ba6c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000ba6f:	83 f8 50             	cmp    eax,0x50
c000ba72:	0f 85 a8 00 00 00    	jne    c000bb20 <VCache::write(unsigned long long, int, void*)+0x18c>
c000ba78:	83 ec 0c             	sub    esp,0xc
c000ba7b:	55                   	push   ebp
c000ba7c:	e8 47 fe ff ff       	call   c000b8c8 <VCache::writeWriteBuffer()>
c000ba81:	83 c4 10             	add    esp,0x10
c000ba84:	e9 97 00 00 00       	jmp    c000bb20 <VCache::write(unsigned long long, int, void*)+0x18c>
c000ba89:	8d 76 00             	lea    esi,[esi+0x0]
c000ba8c:	83 ec 0c             	sub    esp,0xc
c000ba8f:	55                   	push   ebp
c000ba90:	e8 33 fe ff ff       	call   c000b8c8 <VCache::writeWriteBuffer()>
c000ba95:	83 c4 10             	add    esp,0x10
c000ba98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba9b:	83 fb 4f             	cmp    ebx,0x4f
c000ba9e:	7f 20                	jg     c000bac0 <VCache::write(unsigned long long, int, void*)+0x12c>
c000baa0:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000baa3:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000baa6:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000baa9:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000baad:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000bab0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000bab6:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000baba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000babc:	eb 62                	jmp    c000bb20 <VCache::write(unsigned long long, int, void*)+0x18c>
c000babe:	66 90                	xchg   ax,ax
c000bac0:	83 ec 0c             	sub    esp,0xc
c000bac3:	8b 10                	mov    edx,DWORD PTR [eax]
c000bac5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bac9:	53                   	push   ebx
c000baca:	57                   	push   edi
c000bacb:	56                   	push   esi
c000bacc:	50                   	push   eax
c000bacd:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000bad0:	83 c4 20             	add    esp,0x20
c000bad3:	89 c6                	mov    esi,eax
c000bad5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bada:	74 28                	je     c000bb04 <VCache::write(unsigned long long, int, void*)+0x170>
c000badc:	b9 00 10 00 00       	mov    ecx,0x1000
c000bae1:	52                   	push   edx
c000bae2:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000bae6:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000baec:	99                   	cdq    
c000baed:	f7 f9                	idiv   ecx
c000baef:	50                   	push   eax
c000baf0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000baf4:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bafa:	e8 b9 89 00 00       	call   c00144b8 <VAS::unlockPages(unsigned long, int)>
c000baff:	83 c4 10             	add    esp,0x10
c000bb02:	66 90                	xchg   ax,ax
c000bb04:	e8 33 af 00 00       	call   c0016a3c <KeRestorePreemption()>
c000bb09:	85 f6                	test   esi,esi
c000bb0b:	74 4b                	je     c000bb58 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000bb0d:	83 ec 0c             	sub    esp,0xc
c000bb10:	68 f8 87 02 c0       	push   0xc00287f8
c000bb15:	e8 62 b4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	eb 39                	jmp    c000bb58 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000bb1f:	90                   	nop
c000bb20:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb25:	74 29                	je     c000bb50 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000bb27:	b9 00 10 00 00       	mov    ecx,0x1000
c000bb2c:	50                   	push   eax
c000bb2d:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000bb31:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000bb37:	99                   	cdq    
c000bb38:	f7 f9                	idiv   ecx
c000bb3a:	50                   	push   eax
c000bb3b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bb3f:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bb45:	e8 6e 89 00 00       	call   c00144b8 <VAS::unlockPages(unsigned long, int)>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	8d 76 00             	lea    esi,[esi+0x0]
c000bb50:	e8 e7 ae 00 00       	call   c0016a3c <KeRestorePreemption()>
c000bb55:	31 f6                	xor    esi,esi
c000bb57:	90                   	nop
c000bb58:	83 c4 1c             	add    esp,0x1c
c000bb5b:	89 f0                	mov    eax,esi
c000bb5d:	5b                   	pop    ebx
c000bb5e:	5e                   	pop    esi
c000bb5f:	5f                   	pop    edi
c000bb60:	5d                   	pop    ebp
c000bb61:	c3                   	ret    

c000bb62 <VCache::read(unsigned long long, int, void*)>:
c000bb62:	55                   	push   ebp
c000bb63:	57                   	push   edi
c000bb64:	bf 00 10 00 00       	mov    edi,0x1000
c000bb69:	56                   	push   esi
c000bb6a:	53                   	push   ebx
c000bb6b:	83 ec 2c             	sub    esp,0x2c
c000bb6e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bb72:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000bb76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000bb86:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000bb8a:	e8 85 ae 00 00       	call   c0016a14 <KeDisablePreemption()>
c000bb8f:	50                   	push   eax
c000bb90:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb93:	0f af c6             	imul   eax,esi
c000bb96:	05 ff 0f 00 00       	add    eax,0xfff
c000bb9b:	99                   	cdq    
c000bb9c:	f7 ff                	idiv   edi
c000bb9e:	50                   	push   eax
c000bb9f:	55                   	push   ebp
c000bba0:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bba6:	e8 d1 88 00 00       	call   c001447c <VAS::canLockPages(unsigned long, int)>
c000bbab:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000bbaf:	83 c4 10             	add    esp,0x10
c000bbb2:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000bbb7:	74 1f                	je     c000bbd8 <VCache::read(unsigned long long, int, void*)+0x76>
c000bbb9:	50                   	push   eax
c000bbba:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bbbd:	0f af c6             	imul   eax,esi
c000bbc0:	05 ff 0f 00 00       	add    eax,0xfff
c000bbc5:	99                   	cdq    
c000bbc6:	f7 ff                	idiv   edi
c000bbc8:	50                   	push   eax
c000bbc9:	55                   	push   ebp
c000bbca:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bbd0:	e8 0b 8b 00 00       	call   c00146e0 <VAS::lockPages(unsigned long, int)>
c000bbd5:	83 c4 10             	add    esp,0x10
c000bbd8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000bbdc:	74 0e                	je     c000bbec <VCache::read(unsigned long long, int, void*)+0x8a>
c000bbde:	83 ec 0c             	sub    esp,0xc
c000bbe1:	53                   	push   ebx
c000bbe2:	e8 e1 fc ff ff       	call   c000b8c8 <VCache::writeWriteBuffer()>
c000bbe7:	83 c4 10             	add    esp,0x10
c000bbea:	66 90                	xchg   ax,ax
c000bbec:	83 fe 01             	cmp    esi,0x1
c000bbef:	0f 85 ef 00 00 00    	jne    c000bce4 <VCache::read(unsigned long long, int, void*)+0x182>
c000bbf5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000bbf8:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000bbff:	0f 85 df 00 00 00    	jne    c000bce4 <VCache::read(unsigned long long, int, void*)+0x182>
c000bc05:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000bc08:	89 fe                	mov    esi,edi
c000bc0a:	f7 de                	neg    esi
c000bc0c:	89 f0                	mov    eax,esi
c000bc0e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000bc12:	c1 f8 1f             	sar    eax,0x1f
c000bc15:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000bc19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bc1d:	89 f0                	mov    eax,esi
c000bc1f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bc23:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000bc27:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000bc2b:	89 f2                	mov    edx,esi
c000bc2d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000bc32:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000bc36:	74 0c                	je     c000bc44 <VCache::read(unsigned long long, int, void*)+0xe2>
c000bc38:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000bc3b:	75 07                	jne    c000bc44 <VCache::read(unsigned long long, int, void*)+0xe2>
c000bc3d:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000bc40:	74 4e                	je     c000bc90 <VCache::read(unsigned long long, int, void*)+0x12e>
c000bc42:	66 90                	xchg   ax,ax
c000bc44:	83 ec 0c             	sub    esp,0xc
c000bc47:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000bc4b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000bc4e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc51:	8b 31                	mov    esi,DWORD PTR [ecx]
c000bc53:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000bc56:	57                   	push   edi
c000bc57:	52                   	push   edx
c000bc58:	50                   	push   eax
c000bc59:	51                   	push   ecx
c000bc5a:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000bc5d:	83 c4 20             	add    esp,0x20
c000bc60:	89 c7                	mov    edi,eax
c000bc62:	85 c0                	test   eax,eax
c000bc64:	74 2a                	je     c000bc90 <VCache::read(unsigned long long, int, void*)+0x12e>
c000bc66:	83 ec 0c             	sub    esp,0xc
c000bc69:	68 10 88 02 c0       	push   0xc0028810
c000bc6e:	e8 09 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc73:	83 c4 10             	add    esp,0x10
c000bc76:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bc7b:	0f 84 b3 00 00 00    	je     c000bd34 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000bc81:	51                   	push   ecx
c000bc82:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bc85:	05 ff 0f 00 00       	add    eax,0xfff
c000bc8a:	e9 8d 00 00 00       	jmp    c000bd1c <VCache::read(unsigned long long, int, void*)+0x1ba>
c000bc8f:	90                   	nop
c000bc90:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bc93:	89 ef                	mov    edi,ebp
c000bc95:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000bc9b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bc9e:	8d 70 ff             	lea    esi,[eax-0x1]
c000bca1:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000bca5:	0f af f1             	imul   esi,ecx
c000bca8:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000bcab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bcad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bcb2:	74 24                	je     c000bcd8 <VCache::read(unsigned long long, int, void*)+0x176>
c000bcb4:	b9 00 10 00 00       	mov    ecx,0x1000
c000bcb9:	52                   	push   edx
c000bcba:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bcbd:	05 ff 0f 00 00       	add    eax,0xfff
c000bcc2:	99                   	cdq    
c000bcc3:	f7 f9                	idiv   ecx
c000bcc5:	50                   	push   eax
c000bcc6:	55                   	push   ebp
c000bcc7:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bccd:	e8 e6 87 00 00       	call   c00144b8 <VAS::unlockPages(unsigned long, int)>
c000bcd2:	83 c4 10             	add    esp,0x10
c000bcd5:	8d 76 00             	lea    esi,[esi+0x0]
c000bcd8:	e8 5f ad 00 00       	call   c0016a3c <KeRestorePreemption()>
c000bcdd:	31 ff                	xor    edi,edi
c000bcdf:	eb 5b                	jmp    c000bd3c <VCache::read(unsigned long long, int, void*)+0x1da>
c000bce1:	8d 76 00             	lea    esi,[esi+0x0]
c000bce4:	83 ec 0c             	sub    esp,0xc
c000bce7:	53                   	push   ebx
c000bce8:	e8 cb fb ff ff       	call   c000b8b8 <VCache::invalidateReadBuffer()>
c000bced:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bcf0:	8b 10                	mov    edx,DWORD PTR [eax]
c000bcf2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bcf5:	56                   	push   esi
c000bcf6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bcfa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bcfe:	50                   	push   eax
c000bcff:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000bd02:	83 c4 20             	add    esp,0x20
c000bd05:	89 c7                	mov    edi,eax
c000bd07:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000bd0c:	74 26                	je     c000bd34 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000bd0e:	50                   	push   eax
c000bd0f:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000bd13:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000bd19:	8d 76 00             	lea    esi,[esi+0x0]
c000bd1c:	b9 00 10 00 00       	mov    ecx,0x1000
c000bd21:	99                   	cdq    
c000bd22:	f7 f9                	idiv   ecx
c000bd24:	50                   	push   eax
c000bd25:	55                   	push   ebp
c000bd26:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000bd2c:	e8 87 87 00 00       	call   c00144b8 <VAS::unlockPages(unsigned long, int)>
c000bd31:	83 c4 10             	add    esp,0x10
c000bd34:	e8 03 ad 00 00       	call   c0016a3c <KeRestorePreemption()>
c000bd39:	8d 76 00             	lea    esi,[esi+0x0]
c000bd3c:	83 c4 2c             	add    esp,0x2c
c000bd3f:	89 f8                	mov    eax,edi
c000bd41:	5b                   	pop    ebx
c000bd42:	5e                   	pop    esi
c000bd43:	5f                   	pop    edi
c000bd44:	5d                   	pop    ebp
c000bd45:	c3                   	ret    

c000bd46 <Video::putrect(int, int, int, int, unsigned int)>:
c000bd46:	55                   	push   ebp
c000bd47:	57                   	push   edi
c000bd48:	56                   	push   esi
c000bd49:	53                   	push   ebx
c000bd4a:	83 ec 1c             	sub    esp,0x1c
c000bd4d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bd51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd55:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000bd59:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000bd5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bd61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd65:	01 df                	add    edi,ebx
c000bd67:	39 fb                	cmp    ebx,edi
c000bd69:	7d 1f                	jge    c000bd8a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000bd6b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bd6f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000bd73:	7d 12                	jge    c000bd87 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000bd75:	8b 16                	mov    edx,DWORD PTR [esi]
c000bd77:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bd7b:	53                   	push   ebx
c000bd7c:	55                   	push   ebp
c000bd7d:	45                   	inc    ebp
c000bd7e:	56                   	push   esi
c000bd7f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bd82:	83 c4 10             	add    esp,0x10
c000bd85:	eb e8                	jmp    c000bd6f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000bd87:	43                   	inc    ebx
c000bd88:	eb dd                	jmp    c000bd67 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000bd8a:	83 c4 1c             	add    esp,0x1c
c000bd8d:	5b                   	pop    ebx
c000bd8e:	5e                   	pop    esi
c000bd8f:	5f                   	pop    edi
c000bd90:	5d                   	pop    ebp
c000bd91:	c3                   	ret    

c000bd92 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000bd92:	55                   	push   ebp
c000bd93:	57                   	push   edi
c000bd94:	31 ff                	xor    edi,edi
c000bd96:	56                   	push   esi
c000bd97:	53                   	push   ebx
c000bd98:	83 ec 1c             	sub    esp,0x1c
c000bd9b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000bd9f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000bda3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000bdaa:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000bdaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000bdb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bdbb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000bdbe:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000bdc2:	01 f9                	add    ecx,edi
c000bdc4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000bdc8:	7d 2f                	jge    c000bdf9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000bdca:	31 f6                	xor    esi,esi
c000bdcc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bdd0:	01 f2                	add    edx,esi
c000bdd2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000bdd6:	7d 1a                	jge    c000bdf2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000bdd8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bddb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000bdde:	46                   	inc    esi
c000bddf:	51                   	push   ecx
c000bde0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bde4:	52                   	push   edx
c000bde5:	55                   	push   ebp
c000bde6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bde9:	83 c4 10             	add    esp,0x10
c000bdec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bdf0:	eb da                	jmp    c000bdcc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000bdf2:	47                   	inc    edi
c000bdf3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000bdf7:	eb c5                	jmp    c000bdbe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000bdf9:	83 c4 1c             	add    esp,0x1c
c000bdfc:	5b                   	pop    ebx
c000bdfd:	5e                   	pop    esi
c000bdfe:	5f                   	pop    edi
c000bdff:	5d                   	pop    ebp
c000be00:	c3                   	ret    
c000be01:	90                   	nop

c000be02 <Video::blit(unsigned int*, int, int, int, int)>:
c000be02:	55                   	push   ebp
c000be03:	57                   	push   edi
c000be04:	56                   	push   esi
c000be05:	53                   	push   ebx
c000be06:	83 ec 1c             	sub    esp,0x1c
c000be09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000be11:	85 c0                	test   eax,eax
c000be13:	79 02                	jns    c000be17 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000be15:	31 c0                	xor    eax,eax
c000be17:	c1 e0 02             	shl    eax,0x2
c000be1a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000be1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be26:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000be2a:	39 d8                	cmp    eax,ebx
c000be2c:	7e 49                	jle    c000be77 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000be2e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000be34:	7c 41                	jl     c000be77 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000be36:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000be3a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000be3e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000be42:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000be46:	39 f9                	cmp    ecx,edi
c000be48:	7e 22                	jle    c000be6c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000be4a:	83 c5 04             	add    ebp,0x4
c000be4d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000be53:	7c 14                	jl     c000be69 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000be55:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000be57:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000be5a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000be5e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000be62:	56                   	push   esi
c000be63:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000be66:	83 c4 10             	add    esp,0x10
c000be69:	47                   	inc    edi
c000be6a:	eb d2                	jmp    c000be3e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000be6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be70:	43                   	inc    ebx
c000be71:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000be75:	eb ab                	jmp    c000be22 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000be77:	83 c4 1c             	add    esp,0x1c
c000be7a:	5b                   	pop    ebx
c000be7b:	5e                   	pop    esi
c000be7c:	5f                   	pop    edi
c000be7d:	5d                   	pop    ebp
c000be7e:	c3                   	ret    
c000be7f:	90                   	nop

c000be80 <Video::clearScreen(unsigned int)>:
c000be80:	83 ec 14             	sub    esp,0x14
c000be83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be87:	8b 10                	mov    edx,DWORD PTR [eax]
c000be89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be8d:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000be93:	ff b0 58 01 00 00    	push   DWORD PTR [eax+0x158]
c000be99:	6a 00                	push   0x0
c000be9b:	6a 00                	push   0x0
c000be9d:	50                   	push   eax
c000be9e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000bea1:	83 c4 2c             	add    esp,0x2c
c000bea4:	c3                   	ret    
c000bea5:	90                   	nop

c000bea6 <Video::putpixel(int, int, unsigned int)>:
c000bea6:	c7 44 24 04 48 88 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028848
c000beae:	e9 dd 42 00 00       	jmp    c0010190 <KePanic(char const*)>
c000beb3:	90                   	nop

c000beb4 <Video::readPixelApprox(int, int)>:
c000beb4:	83 ec 18             	sub    esp,0x18
c000beb7:	68 69 88 02 c0       	push   0xc0028869
c000bebc:	e8 cf 42 00 00       	call   c0010190 <KePanic(char const*)>
c000bec1:	31 c0                	xor    eax,eax
c000bec3:	83 c4 1c             	add    esp,0x1c
c000bec6:	c3                   	ret    
c000bec7:	90                   	nop

c000bec8 <Video::Video(char const*)>:
c000bec8:	83 ec 0c             	sub    esp,0xc
c000becb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000becf:	83 ec 08             	sub    esp,0x8
c000bed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed6:	50                   	push   eax
c000bed7:	e8 b2 e1 ff ff       	call   c000a08e <Device::Device(char const*)>
c000bedc:	83 c4 10             	add    esp,0x10
c000bedf:	ba 0c 89 02 c0       	mov    edx,0xc002890c
c000bee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bee8:	89 10                	mov    DWORD PTR [eax],edx
c000beea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beee:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000bef8:	90                   	nop
c000bef9:	83 c4 0c             	add    esp,0xc
c000befc:	c3                   	ret    
c000befd:	90                   	nop

c000befe <Video::~Video()>:
c000befe:	83 ec 0c             	sub    esp,0xc
c000bf01:	ba 0c 89 02 c0       	mov    edx,0xc002890c
c000bf06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf0a:	89 10                	mov    DWORD PTR [eax],edx
c000bf0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf10:	83 ec 0c             	sub    esp,0xc
c000bf13:	50                   	push   eax
c000bf14:	e8 15 df ff ff       	call   c0009e2e <Device::~Device()>
c000bf19:	83 c4 10             	add    esp,0x10
c000bf1c:	90                   	nop
c000bf1d:	83 c4 0c             	add    esp,0xc
c000bf20:	c3                   	ret    
c000bf21:	90                   	nop

c000bf22 <Video::~Video()>:
c000bf22:	83 ec 0c             	sub    esp,0xc
c000bf25:	83 ec 0c             	sub    esp,0xc
c000bf28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2c:	e8 cd ff ff ff       	call   c000befe <Video::~Video()>
c000bf31:	83 c4 10             	add    esp,0x10
c000bf34:	83 ec 08             	sub    esp,0x8
c000bf37:	68 64 01 00 00       	push   0x164
c000bf3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf40:	e8 0f 19 00 00       	call   c000d854 <operator delete(void*, unsigned long)>
c000bf45:	83 c4 10             	add    esp,0x10
c000bf48:	83 c4 0c             	add    esp,0xc
c000bf4b:	c3                   	ret    

c000bf4c <Video::isMonochrome()>:
c000bf4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf50:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000bf56:	c3                   	ret    
c000bf57:	90                   	nop

c000bf58 <Video::getWidth()>:
c000bf58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf5c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bf62:	c3                   	ret    
c000bf63:	90                   	nop

c000bf64 <Video::getHeight()>:
c000bf64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf68:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bf6e:	c3                   	ret    
c000bf6f:	90                   	nop

c000bf70 <Video::drawCursor(int, int, unsigned int*, int)>:
c000bf70:	55                   	push   ebp
c000bf71:	57                   	push   edi
c000bf72:	56                   	push   esi
c000bf73:	53                   	push   ebx
c000bf74:	83 ec 2c             	sub    esp,0x2c
c000bf77:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf7b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bf7f:	83 f8 01             	cmp    eax,0x1
c000bf82:	19 c9                	sbb    ecx,ecx
c000bf84:	31 db                	xor    ebx,ebx
c000bf86:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000bf8a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000bf8e:	f7 54 24 14          	not    DWORD PTR [esp+0x14]
c000bf92:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000bf9a:	81 64 24 14 ff ff ff 00 	and    DWORD PTR [esp+0x14],0xffffff
c000bfa2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bfa6:	01 d8                	add    eax,ebx
c000bfa8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfac:	56                   	push   esi
c000bfad:	e8 b2 ff ff ff       	call   c000bf64 <Video::getHeight()>
c000bfb2:	59                   	pop    ecx
c000bfb3:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000bfb7:	0f 8e 81 00 00 00    	jle    c000c03e <Video::drawCursor(int, int, unsigned int*, int)+0xce>
c000bfbd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bfc1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bfc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bfc8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bfcc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000bfd1:	8b ac 98 80 00 00 00 	mov    ebp,DWORD PTR [eax+ebx*4+0x80]
c000bfd8:	75 04                	jne    c000bfde <Video::drawCursor(int, int, unsigned int*, int)+0x6e>
c000bfda:	85 ed                	test   ebp,ebp
c000bfdc:	74 56                	je     c000c034 <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000bfde:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bfe2:	89 f8                	mov    eax,edi
c000bfe4:	83 c0 20             	add    eax,0x20
c000bfe7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bfeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfef:	09 e8                	or     eax,ebp
c000bff1:	74 41                	je     c000c034 <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000bff3:	56                   	push   esi
c000bff4:	e8 5f ff ff ff       	call   c000bf58 <Video::getWidth()>
c000bff9:	5a                   	pop    edx
c000bffa:	39 c7                	cmp    edi,eax
c000bffc:	7d 36                	jge    c000c034 <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000bffe:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c004:	74 08                	je     c000c00e <Video::drawCursor(int, int, unsigned int*, int)+0x9e>
c000c006:	8b 06                	mov    eax,DWORD PTR [esi]
c000c008:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c00c:	eb 0d                	jmp    c000c01b <Video::drawCursor(int, int, unsigned int*, int)+0xab>
c000c00e:	f6 44 24 0c 01       	test   BYTE PTR [esp+0xc],0x1
c000c013:	74 12                	je     c000c027 <Video::drawCursor(int, int, unsigned int*, int)+0xb7>
c000c015:	8b 06                	mov    eax,DWORD PTR [esi]
c000c017:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c01b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c01f:	57                   	push   edi
c000c020:	56                   	push   esi
c000c021:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c024:	83 c4 10             	add    esp,0x10
c000c027:	d1 ed                	shr    ebp,1
c000c029:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c000c02d:	47                   	inc    edi
c000c02e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000c032:	75 b7                	jne    c000bfeb <Video::drawCursor(int, int, unsigned int*, int)+0x7b>
c000c034:	43                   	inc    ebx
c000c035:	83 fb 20             	cmp    ebx,0x20
c000c038:	0f 85 64 ff ff ff    	jne    c000bfa2 <Video::drawCursor(int, int, unsigned int*, int)+0x32>
c000c03e:	83 c4 2c             	add    esp,0x2c
c000c041:	5b                   	pop    ebx
c000c042:	5e                   	pop    esi
c000c043:	5f                   	pop    edi
c000c044:	5d                   	pop    ebp
c000c045:	c3                   	ret    

c000c046 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000c046:	55                   	push   ebp
c000c047:	57                   	push   edi
c000c048:	56                   	push   esi
c000c049:	53                   	push   ebx
c000c04a:	83 ec 48             	sub    esp,0x48
c000c04d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c051:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000c055:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000c059:	c1 e0 08             	shl    eax,0x8
c000c05c:	01 d0                	add    eax,edx
c000c05e:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000c062:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c066:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000c06a:	c1 e0 08             	shl    eax,0x8
c000c06d:	01 d0                	add    eax,edx
c000c06f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c073:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c077:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000c07c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c080:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c084:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000c08b:	50                   	push   eax
c000c08c:	e8 aa 3c 00 00       	call   c000fd3b <malloc>
c000c091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c095:	83 c4 10             	add    esp,0x10
c000c098:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000c09d:	75 10                	jne    c000c0af <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000c09f:	83 ec 0c             	sub    esp,0xc
c000c0a2:	68 94 88 02 c0       	push   0xc0028894
c000c0a7:	e8 e4 40 00 00       	call   c0010190 <KePanic(char const*)>
c000c0ac:	83 c4 10             	add    esp,0x10
c000c0af:	51                   	push   ecx
c000c0b0:	51                   	push   ecx
c000c0b1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c0b5:	50                   	push   eax
c000c0b6:	68 a4 88 02 c0       	push   0xc00288a4
c000c0bb:	e8 bc ae ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c0c0:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000c0c3:	83 e0 20             	and    eax,0x20
c000c0c6:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c0ca:	85 c0                	test   eax,eax
c000c0cc:	5e                   	pop    esi
c000c0cd:	0f 94 c0             	sete   al
c000c0d0:	5f                   	pop    edi
c000c0d1:	0f b6 c0             	movzx  eax,al
c000c0d4:	be 12 00 00 00       	mov    esi,0x12
c000c0d9:	50                   	push   eax
c000c0da:	68 ae 88 02 c0       	push   0xc00288ae
c000c0df:	e8 98 ae ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c0e4:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000c0e8:	83 c4 10             	add    esp,0x10
c000c0eb:	89 d0                	mov    eax,edx
c000c0ed:	85 d2                	test   edx,edx
c000c0ef:	74 11                	je     c000c102 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000c0f1:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000c0f5:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000c0f9:	c1 fe 03             	sar    esi,0x3
c000c0fc:	0f af f1             	imul   esi,ecx
c000c0ff:	83 c6 12             	add    esi,0x12
c000c102:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000c107:	74 07                	je     c000c110 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000c109:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000c10e:	75 12                	jne    c000c122 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000c110:	83 ec 0c             	sub    esp,0xc
c000c113:	68 bc 88 02 c0       	push   0xc00288bc
c000c118:	e8 5f ae ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c11d:	e9 a0 02 00 00       	jmp    c000c3c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000c122:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000c126:	83 f9 02             	cmp    ecx,0x2
c000c129:	74 0e                	je     c000c139 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000c12b:	83 f9 0a             	cmp    ecx,0xa
c000c12e:	0f 84 c8 00 00 00    	je     c000c1fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000c134:	e9 72 02 00 00       	jmp    c000c3ab <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000c139:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c13e:	75 0e                	jne    c000c14e <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000c140:	84 c0                	test   al,al
c000c142:	75 0a                	jne    c000c14e <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000c144:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c147:	83 e8 18             	sub    eax,0x18
c000c14a:	a8 f7                	test   al,0xf7
c000c14c:	74 0d                	je     c000c15b <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000c14e:	83 ec 0c             	sub    esp,0xc
c000c151:	68 d1 88 02 c0       	push   0xc00288d1
c000c156:	e9 58 02 00 00       	jmp    c000c3b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000c15b:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000c160:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c168:	31 c0                	xor    eax,eax
c000c16a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c16e:	89 c7                	mov    edi,eax
c000c170:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c178:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c17d:	75 15                	jne    c000c194 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000c17f:	99                   	cdq    
c000c180:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000c184:	85 d2                	test   edx,edx
c000c186:	75 0c                	jne    c000c194 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000c188:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c18c:	29 c7                	sub    edi,eax
c000c18e:	4f                   	dec    edi
c000c18f:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000c194:	31 d2                	xor    edx,edx
c000c196:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c19a:	75 08                	jne    c000c1a4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000c19c:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000c1a1:	c1 e2 18             	shl    edx,0x18
c000c1a4:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000c1a9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000c1ad:	c1 e1 10             	shl    ecx,0x10
c000c1b0:	8d 47 01             	lea    eax,[edi+0x1]
c000c1b3:	89 cd                	mov    ebp,ecx
c000c1b5:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000c1ba:	c1 e1 08             	shl    ecx,0x8
c000c1bd:	09 e9                	or     ecx,ebp
c000c1bf:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000c1c3:	09 e9                	or     ecx,ebp
c000c1c5:	09 d1                	or     ecx,edx
c000c1c7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c1cb:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000c1ce:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000c1d2:	c1 fa 03             	sar    edx,0x3
c000c1d5:	01 d6                	add    esi,edx
c000c1d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1db:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000c1df:	7e 04                	jle    c000c1e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000c1e1:	89 c7                	mov    edi,eax
c000c1e3:	eb 93                	jmp    c000c178 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000c1e5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c1e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c1ed:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c1f1:	0f 8f 77 ff ff ff    	jg     c000c16e <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000c1f7:	e9 d3 01 00 00       	jmp    c000c3cf <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000c1fc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c201:	75 0e                	jne    c000c211 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000c203:	85 d2                	test   edx,edx
c000c205:	75 0a                	jne    c000c211 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000c207:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c20a:	83 e8 18             	sub    eax,0x18
c000c20d:	a8 f7                	test   al,0xf7
c000c20f:	74 0d                	je     c000c21e <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000c211:	83 ec 0c             	sub    esp,0xc
c000c214:	68 df 88 02 c0       	push   0xc00288df
c000c219:	e9 95 01 00 00       	jmp    c000c3b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000c21e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c226:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c22e:	31 c9                	xor    ecx,ecx
c000c230:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c234:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000c238:	0f 8e 91 01 00 00    	jle    c000c3cf <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000c23e:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000c242:	0f 8d 87 01 00 00    	jge    c000c3cf <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000c248:	8d 46 01             	lea    eax,[esi+0x1]
c000c24b:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000c24f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c253:	83 fd 7f             	cmp    ebp,0x7f
c000c256:	89 e8                	mov    eax,ebp
c000c258:	0f 8e 9d 00 00 00    	jle    c000c2fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000c25e:	83 e0 7f             	and    eax,0x7f
c000c261:	31 d2                	xor    edx,edx
c000c263:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c267:	40                   	inc    eax
c000c268:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c270:	75 0a                	jne    c000c27c <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000c272:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000c277:	89 ea                	mov    edx,ebp
c000c279:	c1 e2 18             	shl    edx,0x18
c000c27c:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000c281:	c1 e0 10             	shl    eax,0x10
c000c284:	89 c7                	mov    edi,eax
c000c286:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000c28b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c28f:	c1 e0 08             	shl    eax,0x8
c000c292:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000c296:	09 f8                	or     eax,edi
c000c298:	31 f6                	xor    esi,esi
c000c29a:	09 c5                	or     ebp,eax
c000c29c:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000c2a1:	09 d5                	or     ebp,edx
c000c2a3:	85 ff                	test   edi,edi
c000c2a5:	75 1d                	jne    c000c2c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000c2a7:	89 c8                	mov    eax,ecx
c000c2a9:	99                   	cdq    
c000c2aa:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000c2ae:	85 d2                	test   edx,edx
c000c2b0:	75 12                	jne    c000c2c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000c2b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2b6:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000c2ba:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c2be:	49                   	dec    ecx
c000c2bf:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000c2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2c8:	8d 51 01             	lea    edx,[ecx+0x1]
c000c2cb:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000c2ce:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000c2d2:	8d 46 01             	lea    eax,[esi+0x1]
c000c2d5:	7e 06                	jle    c000c2dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000c2d7:	89 c6                	mov    esi,eax
c000c2d9:	89 d1                	mov    ecx,edx
c000c2db:	eb c6                	jmp    c000c2a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000c2dd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c2e1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c2e5:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000c2e9:	c1 f8 03             	sar    eax,0x3
c000c2ec:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000c2f0:	89 d1                	mov    ecx,edx
c000c2f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c2f6:	e9 35 ff ff ff       	jmp    c000c230 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000c2fb:	8d 45 01             	lea    eax,[ebp+0x1]
c000c2fe:	31 f6                	xor    esi,esi
c000c300:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c304:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c309:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c30d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c312:	75 1d                	jne    c000c331 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000c314:	89 c8                	mov    eax,ecx
c000c316:	99                   	cdq    
c000c317:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000c31b:	85 d2                	test   edx,edx
c000c31d:	75 12                	jne    c000c331 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000c31f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c323:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000c327:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c32b:	49                   	dec    ecx
c000c32c:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000c331:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000c339:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c33d:	75 10                	jne    c000c34f <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000c33f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c343:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000c348:	c1 e7 18             	shl    edi,0x18
c000c34b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000c34f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c353:	8d 51 01             	lea    edx,[ecx+0x1]
c000c356:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000c35b:	c1 e0 10             	shl    eax,0x10
c000c35e:	89 c7                	mov    edi,eax
c000c360:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c364:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000c369:	c1 e0 08             	shl    eax,0x8
c000c36c:	09 f8                	or     eax,edi
c000c36e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c372:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000c376:	09 f8                	or     eax,edi
c000c378:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c37c:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000c380:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000c383:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c387:	c1 f8 03             	sar    eax,0x3
c000c38a:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000c38e:	8d 46 01             	lea    eax,[esi+0x1]
c000c391:	39 f5                	cmp    ebp,esi
c000c393:	7e 09                	jle    c000c39e <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000c395:	89 c6                	mov    esi,eax
c000c397:	89 d1                	mov    ecx,edx
c000c399:	e9 6f ff ff ff       	jmp    c000c30d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000c39e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c3a2:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000c3a6:	e9 45 ff ff ff       	jmp    c000c2f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000c3ab:	52                   	push   edx
c000c3ac:	52                   	push   edx
c000c3ad:	51                   	push   ecx
c000c3ae:	68 ee 88 02 c0       	push   0xc00288ee
c000c3b3:	e8 c4 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c3b8:	58                   	pop    eax
c000c3b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c3bd:	e8 89 39 00 00       	call   c000fd4b <free>
c000c3c2:	83 c4 10             	add    esp,0x10
c000c3c5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000c3cd:	eb 14                	jmp    c000c3e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000c3cf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c3d3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c3d7:	89 18                	mov    DWORD PTR [eax],ebx
c000c3d9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c3dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c3e1:	89 18                	mov    DWORD PTR [eax],ebx
c000c3e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c3e7:	83 c4 3c             	add    esp,0x3c
c000c3ea:	5b                   	pop    ebx
c000c3eb:	5e                   	pop    esi
c000c3ec:	5f                   	pop    edi
c000c3ed:	5d                   	pop    ebp
c000c3ee:	c3                   	ret    
c000c3ef:	90                   	nop

c000c3f0 <Video::putTGA(int, int, unsigned char*, int)>:
c000c3f0:	55                   	push   ebp
c000c3f1:	57                   	push   edi
c000c3f2:	56                   	push   esi
c000c3f3:	53                   	push   ebx
c000c3f4:	83 ec 28             	sub    esp,0x28
c000c3f7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c3fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000c3ff:	50                   	push   eax
c000c400:	8d 44 24 18          	lea    eax,[esp+0x18]
c000c404:	50                   	push   eax
c000c405:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c409:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c40d:	57                   	push   edi
c000c40e:	e8 33 fc ff ff       	call   c000c046 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000c413:	83 c4 20             	add    esp,0x20
c000c416:	85 c0                	test   eax,eax
c000c418:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c41c:	74 3a                	je     c000c458 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000c41e:	89 c6                	mov    esi,eax
c000c420:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c424:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c428:	39 d8                	cmp    eax,ebx
c000c42a:	7e 2c                	jle    c000c458 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000c42c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c430:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c434:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c438:	39 e8                	cmp    eax,ebp
c000c43a:	7e 19                	jle    c000c455 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000c43c:	83 c6 04             	add    esi,0x4
c000c43f:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000c442:	85 c0                	test   eax,eax
c000c444:	79 0c                	jns    c000c452 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000c446:	8b 17                	mov    edx,DWORD PTR [edi]
c000c448:	50                   	push   eax
c000c449:	53                   	push   ebx
c000c44a:	55                   	push   ebp
c000c44b:	57                   	push   edi
c000c44c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c44f:	83 c4 10             	add    esp,0x10
c000c452:	45                   	inc    ebp
c000c453:	eb db                	jmp    c000c430 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000c455:	43                   	inc    ebx
c000c456:	eb c8                	jmp    c000c420 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000c458:	83 c4 1c             	add    esp,0x1c
c000c45b:	5b                   	pop    ebx
c000c45c:	5e                   	pop    esi
c000c45d:	5f                   	pop    edi
c000c45e:	5d                   	pop    ebp
c000c45f:	c3                   	ret    

c000c460 <ACPI::close(int, int, void*)>:
c000c460:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c465:	c3                   	ret    
c000c466:	66 90                	xchg   ax,ax

c000c468 <loadACPITables(unsigned char*)>:
c000c468:	57                   	push   edi
c000c469:	56                   	push   esi
c000c46a:	53                   	push   ebx
c000c46b:	83 ec 60             	sub    esp,0x60
c000c46e:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000c473:	0f 84 43 02 00 00    	je     c000c6bc <loadACPITables(unsigned char*)+0x254>
c000c479:	a0 80 2d 03 c0       	mov    al,ds:0xc0032d80
c000c47e:	0f b6 c0             	movzx  eax,al
c000c481:	85 c0                	test   eax,eax
c000c483:	74 7b                	je     c000c500 <loadACPITables(unsigned char*)+0x98>
c000c485:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c489:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c48d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c491:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c494:	83 e8 24             	sub    eax,0x24
c000c497:	c1 e8 03             	shr    eax,0x3
c000c49a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c49e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000c4a6:	66 90                	xchg   ax,ax
c000c4a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c4ac:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000c4b0:	0f 8d ba 00 00 00    	jge    c000c570 <loadACPITables(unsigned char*)+0x108>
c000c4b6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c4ba:	83 c0 24             	add    eax,0x24
c000c4bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c4c1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000c4c5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c4c9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c4cd:	c1 e0 03             	shl    eax,0x3
c000c4d0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000c4d4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c4d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c4db:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4dd:	89 c1                	mov    ecx,eax
c000c4df:	a1 60 2b 03 c0       	mov    eax,ds:0xc0032b60
c000c4e4:	8d 50 01             	lea    edx,[eax+0x1]
c000c4e7:	89 15 60 2b 03 c0    	mov    DWORD PTR ds:0xc0032b60,edx
c000c4ed:	89 ca                	mov    edx,ecx
c000c4ef:	89 14 c5 84 2b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd47c],edx
c000c4f6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c4fb:	eb ab                	jmp    c000c4a8 <loadACPITables(unsigned char*)+0x40>
c000c4fd:	8d 76 00             	lea    esi,[esi+0x0]
c000c500:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c504:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c508:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c50c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c50f:	83 e8 24             	sub    eax,0x24
c000c512:	c1 e8 02             	shr    eax,0x2
c000c515:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c519:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c521:	8d 76 00             	lea    esi,[esi+0x0]
c000c524:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c528:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c52c:	7d 42                	jge    c000c570 <loadACPITables(unsigned char*)+0x108>
c000c52e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c532:	83 c0 24             	add    eax,0x24
c000c535:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c539:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c53d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c541:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c545:	c1 e0 02             	shl    eax,0x2
c000c548:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c54c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c550:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c552:	a1 60 2b 03 c0       	mov    eax,ds:0xc0032b60
c000c557:	8d 50 01             	lea    edx,[eax+0x1]
c000c55a:	89 15 60 2b 03 c0    	mov    DWORD PTR ds:0xc0032b60,edx
c000c560:	89 ca                	mov    edx,ecx
c000c562:	89 14 c5 84 2b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd47c],edx
c000c569:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c56e:	eb b4                	jmp    c000c524 <loadACPITables(unsigned char*)+0xbc>
c000c570:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c578:	a1 60 2b 03 c0       	mov    eax,ds:0xc0032b60
c000c57d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c581:	0f 8d 39 01 00 00    	jge    c000c6c0 <loadACPITables(unsigned char*)+0x258>
c000c587:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c58b:	8b 04 c5 84 2b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcd47c]
c000c592:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c596:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c59a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c59e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5a2:	25 ff 0f 00 00       	and    eax,0xfff
c000c5a7:	89 c6                	mov    esi,eax
c000c5a9:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c000c5af:	83 ec 0c             	sub    esp,0xc
c000c5b2:	6a 01                	push   0x1
c000c5b4:	e8 6e 71 00 00       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c000c5b9:	83 c4 10             	add    esp,0x10
c000c5bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c5c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c5c6:	83 ec 0c             	sub    esp,0xc
c000c5c9:	6a 01                	push   0x1
c000c5cb:	6a 01                	push   0x1
c000c5cd:	50                   	push   eax
c000c5ce:	52                   	push   edx
c000c5cf:	53                   	push   ebx
c000c5d0:	e8 1f 7a 00 00       	call   c0013ff4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c5d5:	83 c4 20             	add    esp,0x20
c000c5d8:	09 f0                	or     eax,esi
c000c5da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c5de:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c5e2:	c1 e0 03             	shl    eax,0x3
c000c5e5:	05 80 2b 03 c0       	add    eax,0xc0032b80
c000c5ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5f6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c5fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c606:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c60a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c60e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c612:	89 c6                	mov    esi,eax
c000c614:	89 d7                	mov    edi,edx
c000c616:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c618:	89 c8                	mov    eax,ecx
c000c61a:	89 fa                	mov    edx,edi
c000c61c:	89 f3                	mov    ebx,esi
c000c61e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c622:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c626:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c62a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c62e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c631:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c635:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c639:	05 00 10 00 00       	add    eax,0x1000
c000c63e:	c1 e8 0c             	shr    eax,0xc
c000c641:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c649:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c64d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c651:	25 ff 0f 00 00       	and    eax,0xfff
c000c656:	89 c6                	mov    esi,eax
c000c658:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c000c65e:	83 ec 0c             	sub    esp,0xc
c000c661:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c665:	e8 bd 70 00 00       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c000c66a:	83 c4 10             	add    esp,0x10
c000c66d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c671:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c677:	83 ec 0c             	sub    esp,0xc
c000c67a:	6a 01                	push   0x1
c000c67c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c680:	50                   	push   eax
c000c681:	52                   	push   edx
c000c682:	53                   	push   ebx
c000c683:	e8 6c 79 00 00       	call   c0013ff4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c688:	83 c4 20             	add    esp,0x20
c000c68b:	09 f0                	or     eax,esi
c000c68d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c695:	83 ec 0c             	sub    esp,0xc
c000c698:	50                   	push   eax
c000c699:	e8 91 73 00 00       	call   c0013a2f <Virt::freeKernelVirtualPages(unsigned long)>
c000c69e:	83 c4 10             	add    esp,0x10
c000c6a1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c6a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c6a9:	89 14 c5 84 2b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd47c],edx
c000c6b0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c6b5:	e9 be fe ff ff       	jmp    c000c578 <loadACPITables(unsigned char*)+0x110>
c000c6ba:	66 90                	xchg   ax,ax
c000c6bc:	90                   	nop
c000c6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000c6c0:	83 c4 60             	add    esp,0x60
c000c6c3:	5b                   	pop    ebx
c000c6c4:	5e                   	pop    esi
c000c6c5:	5f                   	pop    edi
c000c6c6:	c3                   	ret    
c000c6c7:	90                   	nop

c000c6c8 <findRSDT(unsigned char*)>:
c000c6c8:	57                   	push   edi
c000c6c9:	56                   	push   esi
c000c6ca:	53                   	push   ebx
c000c6cb:	83 ec 50             	sub    esp,0x50
c000c6ce:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000c6d3:	85 c0                	test   eax,eax
c000c6d5:	75 0d                	jne    c000c6e4 <findRSDT(unsigned char*)+0x1c>
c000c6d7:	b8 00 00 00 00       	mov    eax,0x0
c000c6dc:	e9 2b 01 00 00       	jmp    c000c80c <findRSDT(unsigned char*)+0x144>
c000c6e1:	8d 76 00             	lea    esi,[esi+0x0]
c000c6e4:	89 e0                	mov    eax,esp
c000c6e6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6ea:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6ee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6f2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c6fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c702:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c706:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c70a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c70e:	89 c6                	mov    esi,eax
c000c710:	89 d7                	mov    edi,edx
c000c712:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c714:	89 c8                	mov    eax,ecx
c000c716:	89 fa                	mov    edx,edi
c000c718:	89 f3                	mov    ebx,esi
c000c71a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c71e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c722:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c726:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c72a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c72e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c736:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c73a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c73e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c746:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c74a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c74e:	25 ff 0f 00 00       	and    eax,0xfff
c000c753:	89 c6                	mov    esi,eax
c000c755:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c000c75b:	83 ec 0c             	sub    esp,0xc
c000c75e:	6a 02                	push   0x2
c000c760:	e8 c2 6f 00 00       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c000c765:	83 c4 10             	add    esp,0x10
c000c768:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c76c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c772:	83 ec 0c             	sub    esp,0xc
c000c775:	6a 01                	push   0x1
c000c777:	6a 02                	push   0x2
c000c779:	50                   	push   eax
c000c77a:	52                   	push   edx
c000c77b:	53                   	push   ebx
c000c77c:	e8 73 78 00 00       	call   c0013ff4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c781:	83 c4 20             	add    esp,0x20
c000c784:	09 f0                	or     eax,esi
c000c786:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c78a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c78e:	25 ff 0f 00 00       	and    eax,0xfff
c000c793:	89 c6                	mov    esi,eax
c000c795:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c000c79b:	83 ec 0c             	sub    esp,0xc
c000c79e:	6a 02                	push   0x2
c000c7a0:	e8 82 6f 00 00       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c000c7a5:	83 c4 10             	add    esp,0x10
c000c7a8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c7ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c7b2:	83 ec 0c             	sub    esp,0xc
c000c7b5:	6a 01                	push   0x1
c000c7b7:	6a 02                	push   0x2
c000c7b9:	50                   	push   eax
c000c7ba:	52                   	push   edx
c000c7bb:	53                   	push   ebx
c000c7bc:	e8 33 78 00 00       	call   c0013ff4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c7c1:	83 c4 20             	add    esp,0x20
c000c7c4:	09 f0                	or     eax,esi
c000c7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c7ca:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c7cf:	85 c0                	test   eax,eax
c000c7d1:	75 11                	jne    c000c7e4 <findRSDT(unsigned char*)+0x11c>
c000c7d3:	c6 05 80 2d 03 c0 00 	mov    BYTE PTR ds:0xc0032d80,0x0
c000c7da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7de:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c7e2:	eb 24                	jmp    c000c808 <findRSDT(unsigned char*)+0x140>
c000c7e4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c7e9:	83 f8 02             	cmp    eax,0x2
c000c7ec:	75 12                	jne    c000c800 <findRSDT(unsigned char*)+0x138>
c000c7ee:	c6 05 80 2d 03 c0 01 	mov    BYTE PTR ds:0xc0032d80,0x1
c000c7f5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c7f9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c7fd:	eb 09                	jmp    c000c808 <findRSDT(unsigned char*)+0x140>
c000c7ff:	90                   	nop
c000c800:	b8 00 00 00 00       	mov    eax,0x0
c000c805:	eb 05                	jmp    c000c80c <findRSDT(unsigned char*)+0x144>
c000c807:	90                   	nop
c000c808:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c80c:	83 c4 50             	add    esp,0x50
c000c80f:	5b                   	pop    ebx
c000c810:	5e                   	pop    esi
c000c811:	5f                   	pop    edi
c000c812:	c3                   	ret    
c000c813:	90                   	nop

c000c814 <findDataTable(unsigned char*, char*)>:
c000c814:	83 ec 1c             	sub    esp,0x1c
c000c817:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c81c:	75 0a                	jne    c000c828 <findDataTable(unsigned char*, char*)+0x14>
c000c81e:	b8 00 00 00 00       	mov    eax,0x0
c000c823:	eb 5f                	jmp    c000c884 <findDataTable(unsigned char*, char*)+0x70>
c000c825:	8d 76 00             	lea    esi,[esi+0x0]
c000c828:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c830:	a1 60 2b 03 c0       	mov    eax,ds:0xc0032b60
c000c835:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c839:	7d 41                	jge    c000c87c <findDataTable(unsigned char*, char*)+0x68>
c000c83b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c83f:	c1 e0 03             	shl    eax,0x3
c000c842:	05 80 2b 03 c0       	add    eax,0xc0032b80
c000c847:	83 ec 04             	sub    esp,0x4
c000c84a:	6a 04                	push   0x4
c000c84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c850:	50                   	push   eax
c000c851:	e8 2a 3b ff ff       	call   c0000380 <memcmp>
c000c856:	83 c4 10             	add    esp,0x10
c000c859:	85 c0                	test   eax,eax
c000c85b:	0f 94 c0             	sete   al
c000c85e:	0f b6 c0             	movzx  eax,al
c000c861:	85 c0                	test   eax,eax
c000c863:	74 0f                	je     c000c874 <findDataTable(unsigned char*, char*)+0x60>
c000c865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c869:	8b 04 c5 84 2b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcd47c]
c000c870:	eb 12                	jmp    c000c884 <findDataTable(unsigned char*, char*)+0x70>
c000c872:	66 90                	xchg   ax,ax
c000c874:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c879:	eb b5                	jmp    c000c830 <findDataTable(unsigned char*, char*)+0x1c>
c000c87b:	90                   	nop
c000c87c:	b8 00 00 00 00       	mov    eax,0x0
c000c881:	8d 76 00             	lea    esi,[esi+0x0]
c000c884:	83 c4 1c             	add    esp,0x1c
c000c887:	c3                   	ret    

c000c888 <scanMADT()>:
c000c888:	53                   	push   ebx
c000c889:	83 ec 38             	sub    esp,0x38
c000c88c:	c7 05 88 2d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032d88,0x0
c000c896:	c7 05 84 2d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032d84,0x0
c000c8a0:	83 ec 0c             	sub    esp,0xc
c000c8a3:	68 50 89 02 c0       	push   0xc0028950
c000c8a8:	e8 cf a6 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c8ad:	83 c4 10             	add    esp,0x10
c000c8b0:	e8 25 dd 00 00       	call   c001a5da <HalFindRSDP()>
c000c8b5:	a3 88 2d 03 c0       	mov    ds:0xc0032d88,eax
c000c8ba:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000c8bf:	85 c0                	test   eax,eax
c000c8c1:	0f 84 59 04 00 00    	je     c000cd20 <scanMADT()+0x498>
c000c8c7:	83 ec 0c             	sub    esp,0xc
c000c8ca:	68 5e 89 02 c0       	push   0xc002895e
c000c8cf:	e8 a8 a6 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000c8dc:	83 ec 0c             	sub    esp,0xc
c000c8df:	50                   	push   eax
c000c8e0:	e8 e3 fd ff ff       	call   c000c6c8 <findRSDT(unsigned char*)>
c000c8e5:	83 c4 10             	add    esp,0x10
c000c8e8:	a3 84 2d 03 c0       	mov    ds:0xc0032d84,eax
c000c8ed:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000c8f2:	85 c0                	test   eax,eax
c000c8f4:	0f 84 2a 04 00 00    	je     c000cd24 <scanMADT()+0x49c>
c000c8fa:	8b 15 84 2d 03 c0    	mov    edx,DWORD PTR ds:0xc0032d84
c000c900:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000c905:	83 ec 04             	sub    esp,0x4
c000c908:	52                   	push   edx
c000c909:	50                   	push   eax
c000c90a:	68 08 8b 02 c0       	push   0xc0028b08
c000c90f:	e8 68 a6 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000c91c:	83 ec 0c             	sub    esp,0xc
c000c91f:	50                   	push   eax
c000c920:	e8 43 fb ff ff       	call   c000c468 <loadACPITables(unsigned char*)>
c000c925:	83 c4 10             	add    esp,0x10
c000c928:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000c92d:	83 ec 08             	sub    esp,0x8
c000c930:	68 6d 89 02 c0       	push   0xc002896d
c000c935:	50                   	push   eax
c000c936:	e8 d9 fe ff ff       	call   c000c814 <findDataTable(unsigned char*, char*)>
c000c93b:	83 c4 10             	add    esp,0x10
c000c93e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c942:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c947:	0f 84 db 03 00 00    	je     c000cd28 <scanMADT()+0x4a0>
c000c94d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c955:	8d 76 00             	lea    esi,[esi+0x0]
c000c958:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c95c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c95f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c963:	0f 87 c7 03 00 00    	ja     c000cd30 <scanMADT()+0x4a8>
c000c969:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c971:	0f 87 b9 03 00 00    	ja     c000cd30 <scanMADT()+0x4a8>
c000c977:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c97b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c97f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c983:	8d 50 01             	lea    edx,[eax+0x1]
c000c986:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c98a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c98e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c992:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c996:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c99a:	8d 50 01             	lea    edx,[eax+0x1]
c000c99d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c9a5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c9a9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c9ad:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c9b2:	83 f8 02             	cmp    eax,0x2
c000c9b5:	0f 86 71 03 00 00    	jbe    c000cd2c <scanMADT()+0x4a4>
c000c9bb:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c9c0:	85 c0                	test   eax,eax
c000c9c2:	75 58                	jne    c000ca1c <scanMADT()+0x194>
c000c9c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9c8:	8d 50 01             	lea    edx,[eax+0x1]
c000c9cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9cf:	8a 15 80 2f 03 c0    	mov    dl,BYTE PTR ds:0xc0032f80
c000c9d5:	0f b6 d2             	movzx  edx,dl
c000c9d8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c9dc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c9e0:	88 82 c0 2f 03 c0    	mov    BYTE PTR [edx-0x3ffcd040],al
c000c9e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9ea:	8d 50 01             	lea    edx,[eax+0x1]
c000c9ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9f1:	8a 15 80 2f 03 c0    	mov    dl,BYTE PTR ds:0xc0032f80
c000c9f7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c9fa:	88 0d 80 2f 03 c0    	mov    BYTE PTR ds:0xc0032f80,cl
c000ca00:	0f b6 d2             	movzx  edx,dl
c000ca03:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ca07:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ca0b:	88 82 a0 2f 03 c0    	mov    BYTE PTR [edx-0x3ffcd060],al
c000ca11:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ca16:	e9 f1 02 00 00       	jmp    c000cd0c <scanMADT()+0x484>
c000ca1b:	90                   	nop
c000ca1c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ca21:	83 f8 01             	cmp    eax,0x1
c000ca24:	0f 85 32 01 00 00    	jne    c000cb5c <scanMADT()+0x2d4>
c000ca2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca2e:	8d 50 01             	lea    edx,[eax+0x1]
c000ca31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca35:	8a 15 40 2e 03 c0    	mov    dl,BYTE PTR ds:0xc0032e40
c000ca3b:	0f b6 d2             	movzx  edx,dl
c000ca3e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ca42:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ca46:	88 82 60 2e 03 c0    	mov    BYTE PTR [edx-0x3ffcd1a0],al
c000ca4c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ca51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca59:	01 d0                	add    eax,edx
c000ca5b:	83 c0 2c             	add    eax,0x2c
c000ca5e:	8a 00                	mov    al,BYTE PTR [eax]
c000ca60:	0f b6 d0             	movzx  edx,al
c000ca63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca67:	8d 48 01             	lea    ecx,[eax+0x1]
c000ca6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca6e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ca72:	0f b6 c0             	movzx  eax,al
c000ca75:	c1 e0 08             	shl    eax,0x8
c000ca78:	89 d1                	mov    ecx,edx
c000ca7a:	09 c1                	or     ecx,eax
c000ca7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca80:	8d 50 02             	lea    edx,[eax+0x2]
c000ca83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca87:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ca8b:	0f b6 c0             	movzx  eax,al
c000ca8e:	c1 e0 10             	shl    eax,0x10
c000ca91:	09 c1                	or     ecx,eax
c000ca93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca97:	8d 50 03             	lea    edx,[eax+0x3]
c000ca9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca9e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000caa2:	0f b6 c0             	movzx  eax,al
c000caa5:	c1 e0 18             	shl    eax,0x18
c000caa8:	09 c1                	or     ecx,eax
c000caaa:	89 ca                	mov    edx,ecx
c000caac:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c000cab1:	0f b6 c0             	movzx  eax,al
c000cab4:	89 14 85 80 2e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd180],edx
c000cabb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000cac0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cac4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cac8:	01 d0                	add    eax,edx
c000caca:	83 c0 2c             	add    eax,0x2c
c000cacd:	8a 00                	mov    al,BYTE PTR [eax]
c000cacf:	0f b6 d0             	movzx  edx,al
c000cad2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cad6:	8d 48 01             	lea    ecx,[eax+0x1]
c000cad9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cadd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cae1:	0f b6 c0             	movzx  eax,al
c000cae4:	c1 e0 08             	shl    eax,0x8
c000cae7:	89 d1                	mov    ecx,edx
c000cae9:	09 c1                	or     ecx,eax
c000caeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000caef:	8d 50 02             	lea    edx,[eax+0x2]
c000caf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000caf6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cafa:	0f b6 c0             	movzx  eax,al
c000cafd:	c1 e0 10             	shl    eax,0x10
c000cb00:	09 c1                	or     ecx,eax
c000cb02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb06:	8d 50 03             	lea    edx,[eax+0x3]
c000cb09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cb0d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cb11:	0f b6 c0             	movzx  eax,al
c000cb14:	c1 e0 18             	shl    eax,0x18
c000cb17:	09 c1                	or     ecx,eax
c000cb19:	89 ca                	mov    edx,ecx
c000cb1b:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c000cb20:	0f b6 c0             	movzx  eax,al
c000cb23:	89 14 85 00 2f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd100],edx
c000cb2a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000cb2f:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c000cb34:	83 c0 01             	add    eax,0x1
c000cb37:	a2 40 2e 03 c0       	mov    ds:0xc0032e40,al
c000cb3c:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c000cb41:	0f b6 c0             	movzx  eax,al
c000cb44:	83 ec 08             	sub    esp,0x8
c000cb47:	50                   	push   eax
c000cb48:	68 72 89 02 c0       	push   0xc0028972
c000cb4d:	e8 2a a4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000cb52:	83 c4 10             	add    esp,0x10
c000cb55:	e9 b2 01 00 00       	jmp    c000cd0c <scanMADT()+0x484>
c000cb5a:	66 90                	xchg   ax,ax
c000cb5c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cb61:	83 f8 02             	cmp    eax,0x2
c000cb64:	0f 85 ea 00 00 00    	jne    c000cc54 <scanMADT()+0x3cc>
c000cb6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb6e:	8d 50 01             	lea    edx,[eax+0x1]
c000cb71:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb79:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cb7d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000cb81:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb85:	8d 50 01             	lea    edx,[eax+0x1]
c000cb88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb90:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cb94:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000cb98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cba0:	01 d0                	add    eax,edx
c000cba2:	83 c0 2c             	add    eax,0x2c
c000cba5:	8a 00                	mov    al,BYTE PTR [eax]
c000cba7:	0f b6 d0             	movzx  edx,al
c000cbaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cbae:	8d 48 01             	lea    ecx,[eax+0x1]
c000cbb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbb5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cbb9:	0f b6 c0             	movzx  eax,al
c000cbbc:	c1 e0 08             	shl    eax,0x8
c000cbbf:	89 d1                	mov    ecx,edx
c000cbc1:	09 c1                	or     ecx,eax
c000cbc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cbc7:	8d 50 02             	lea    edx,[eax+0x2]
c000cbca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbce:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cbd2:	0f b6 c0             	movzx  eax,al
c000cbd5:	c1 e0 10             	shl    eax,0x10
c000cbd8:	09 c1                	or     ecx,eax
c000cbda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cbde:	8d 50 03             	lea    edx,[eax+0x3]
c000cbe1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbe5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000cbe9:	0f b6 c0             	movzx  eax,al
c000cbec:	c1 e0 18             	shl    eax,0x18
c000cbef:	09 c8                	or     eax,ecx
c000cbf1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cbf5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000cbfa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cbfe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc02:	01 d0                	add    eax,edx
c000cc04:	83 c0 2c             	add    eax,0x2c
c000cc07:	8a 00                	mov    al,BYTE PTR [eax]
c000cc09:	0f b6 c0             	movzx  eax,al
c000cc0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cc10:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cc13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cc17:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000cc1b:	0f b6 d2             	movzx  edx,dl
c000cc1e:	c1 e2 08             	shl    edx,0x8
c000cc21:	09 d0                	or     eax,edx
c000cc23:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000cc28:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000cc2d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000cc32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cc36:	88 90 28 bf 02 c0    	mov    BYTE PTR [eax-0x3ffd40d8],dl
c000cc3c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000cc41:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000cc46:	66 89 84 12 20 2e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcd1e0],ax
c000cc4e:	e9 b9 00 00 00       	jmp    c000cd0c <scanMADT()+0x484>
c000cc53:	90                   	nop
c000cc54:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cc59:	83 f8 04             	cmp    eax,0x4
c000cc5c:	0f 85 9a 00 00 00    	jne    c000ccfc <scanMADT()+0x474>
c000cc62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc66:	8d 50 01             	lea    edx,[eax+0x1]
c000cc69:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cc71:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cc75:	0f b6 c0             	movzx  eax,al
c000cc78:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cc7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cc80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc84:	01 d0                	add    eax,edx
c000cc86:	83 c0 2c             	add    eax,0x2c
c000cc89:	8a 00                	mov    al,BYTE PTR [eax]
c000cc8b:	0f b6 d0             	movzx  edx,al
c000cc8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc92:	8d 48 01             	lea    ecx,[eax+0x1]
c000cc95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cc99:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000cc9d:	0f b6 c0             	movzx  eax,al
c000cca0:	c1 e0 08             	shl    eax,0x8
c000cca3:	09 d0                	or     eax,edx
c000cca5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cca9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ccae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ccb2:	8d 50 01             	lea    edx,[eax+0x1]
c000ccb5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ccbd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ccc1:	0f b6 c0             	movzx  eax,al
c000ccc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ccc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cccc:	c1 e0 08             	shl    eax,0x8
c000cccf:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ccd3:	89 c1                	mov    ecx,eax
c000ccd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ccd9:	c1 e0 18             	shl    eax,0x18
c000ccdc:	89 c3                	mov    ebx,eax
c000ccde:	a1 8c 2d 03 c0       	mov    eax,ds:0xc0032d8c
c000cce3:	8d 50 01             	lea    edx,[eax+0x1]
c000cce6:	89 15 8c 2d 03 c0    	mov    DWORD PTR ds:0xc0032d8c,edx
c000ccec:	09 d9                	or     ecx,ebx
c000ccee:	89 ca                	mov    edx,ecx
c000ccf0:	89 14 85 a0 2d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd260],edx
c000ccf7:	eb 13                	jmp    c000cd0c <scanMADT()+0x484>
c000ccf9:	8d 76 00             	lea    esi,[esi+0x0]
c000ccfc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cd01:	83 f8 05             	cmp    eax,0x5
c000cd04:	75 06                	jne    c000cd0c <scanMADT()+0x484>
c000cd06:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000cd0b:	90                   	nop
c000cd0c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000cd11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cd15:	01 d0                	add    eax,edx
c000cd17:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cd1b:	e9 38 fc ff ff       	jmp    c000c958 <scanMADT()+0xd0>
c000cd20:	90                   	nop
c000cd21:	eb 0d                	jmp    c000cd30 <scanMADT()+0x4a8>
c000cd23:	90                   	nop
c000cd24:	90                   	nop
c000cd25:	eb 09                	jmp    c000cd30 <scanMADT()+0x4a8>
c000cd27:	90                   	nop
c000cd28:	90                   	nop
c000cd29:	eb 05                	jmp    c000cd30 <scanMADT()+0x4a8>
c000cd2b:	90                   	nop
c000cd2c:	90                   	nop
c000cd2d:	8d 76 00             	lea    esi,[esi+0x0]
c000cd30:	83 c4 38             	add    esp,0x38
c000cd33:	5b                   	pop    ebx
c000cd34:	c3                   	ret    
c000cd35:	90                   	nop
c000cd36:	66 90                	xchg   ax,ax

c000cd38 <ACPI::ACPI()>:
c000cd38:	83 ec 0c             	sub    esp,0xc
c000cd3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3f:	83 ec 08             	sub    esp,0x8
c000cd42:	68 8e 89 02 c0       	push   0xc002898e
c000cd47:	50                   	push   eax
c000cd48:	e8 41 d3 ff ff       	call   c000a08e <Device::Device(char const*)>
c000cd4d:	83 c4 10             	add    esp,0x10
c000cd50:	ba ac 8b 02 c0       	mov    edx,0xc0028bac
c000cd55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd59:	89 10                	mov    DWORD PTR [eax],edx
c000cd5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd5f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000cd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd6a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000cd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd78:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000cd82:	90                   	nop
c000cd83:	83 c4 0c             	add    esp,0xc
c000cd86:	c3                   	ret    
c000cd87:	90                   	nop

c000cd88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000cd88:	83 ec 2c             	sub    esp,0x2c
c000cd8b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cd8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cd93:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cd97:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000cd9b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000cda0:	88 d0                	mov    al,dl
c000cda2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000cda6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000cdab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cdb3:	90                   	nop
c000cdb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cdb8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000cdbe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000cdc2:	0f 8d b0 00 00 00    	jge    c000ce78 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000cdc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cdcc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdd0:	83 c2 2a             	add    edx,0x2a
c000cdd3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000cdd7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000cddc:	0f b7 c0             	movzx  eax,ax
c000cddf:	39 c2                	cmp    edx,eax
c000cde1:	0f 85 85 00 00 00    	jne    c000ce6c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000cde7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cdeb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdef:	83 c2 2a             	add    edx,0x2a
c000cdf2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000cdf6:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000cdfb:	0f b6 c0             	movzx  eax,al
c000cdfe:	39 c2                	cmp    edx,eax
c000ce00:	75 6a                	jne    c000ce6c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ce02:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ce07:	85 c0                	test   eax,eax
c000ce09:	74 3d                	je     c000ce48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000ce0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ce0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce13:	83 c2 2a             	add    edx,0x2a
c000ce16:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ce1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ce1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce21:	39 c2                	cmp    edx,eax
c000ce23:	74 13                	je     c000ce38 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000ce25:	83 ec 0c             	sub    esp,0xc
c000ce28:	68 2c 8b 02 c0       	push   0xc0028b2c
c000ce2d:	e8 5e 33 00 00       	call   c0010190 <KePanic(char const*)>
c000ce32:	83 c4 10             	add    esp,0x10
c000ce35:	8d 76 00             	lea    esi,[esi+0x0]
c000ce38:	83 ec 0c             	sub    esp,0xc
c000ce3b:	68 93 89 02 c0       	push   0xc0028993
c000ce40:	e8 4b 33 00 00       	call   c0010190 <KePanic(char const*)>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ce4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ce50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce54:	83 c2 2a             	add    edx,0x2a
c000ce57:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ce5b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ce5d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ce60:	89 01                	mov    DWORD PTR [ecx],eax
c000ce62:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ce65:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ce6a:	66 90                	xchg   ax,ax
c000ce6c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ce71:	e9 3e ff ff ff       	jmp    c000cdb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ce76:	66 90                	xchg   ax,ax
c000ce78:	90                   	nop
c000ce79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ce7d:	83 c4 2c             	add    esp,0x2c
c000ce80:	c2 04 00             	ret    0x4
c000ce83:	90                   	nop

c000ce84 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ce84:	83 ec 1c             	sub    esp,0x1c
c000ce87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce8b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ce8f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ce93:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ce98:	88 c8                	mov    al,cl
c000ce9a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ce9e:	88 d0                	mov    al,dl
c000cea0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000cea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cea8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ceae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ceb2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ceb5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ceb9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000cebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cec1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000cec7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cecb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000cece:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ced2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ced7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cedb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000cee1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000cee5:	83 c0 01             	add    eax,0x1
c000cee8:	88 c1                	mov    cl,al
c000ceea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ceee:	83 c2 2a             	add    edx,0x2a
c000cef1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000cef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cef9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ceff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf03:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000cf06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cf0a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000cf0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf12:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000cf18:	8d 50 01             	lea    edx,[eax+0x1]
c000cf1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf1f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000cf25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf29:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000cf2f:	3d 00 02 00 00       	cmp    eax,0x200
c000cf34:	75 12                	jne    c000cf48 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000cf36:	83 ec 0c             	sub    esp,0xc
c000cf39:	68 a2 89 02 c0       	push   0xc00289a2
c000cf3e:	e8 4d 32 00 00       	call   c0010190 <KePanic(char const*)>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	66 90                	xchg   ax,ax
c000cf48:	90                   	nop
c000cf49:	83 c4 1c             	add    esp,0x1c
c000cf4c:	c3                   	ret    
c000cf4d:	90                   	nop
c000cf4e:	66 90                	xchg   ax,ax

c000cf50 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000cf50:	b8 00 00 00 00       	mov    eax,0x0
c000cf55:	c3                   	ret    
c000cf56:	66 90                	xchg   ax,ax

c000cf58 <ACPI::detectPCI()>:
c000cf58:	53                   	push   ebx
c000cf59:	83 ec 28             	sub    esp,0x28
c000cf5c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000cf61:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000cf66:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000cf6b:	83 ec 08             	sub    esp,0x8
c000cf6e:	68 bf 89 02 c0       	push   0xc00289bf
c000cf73:	50                   	push   eax
c000cf74:	e8 9b f8 ff ff       	call   c000c814 <findDataTable(unsigned char*, char*)>
c000cf79:	83 c4 10             	add    esp,0x10
c000cf7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf80:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000cf85:	74 0d                	je     c000cf94 <ACPI::detectPCI()+0x3c>
c000cf87:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cf8c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cf91:	8d 76 00             	lea    esi,[esi+0x0]
c000cf94:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000cf9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cfa0:	8a 00                	mov    al,BYTE PTR [eax]
c000cfa2:	0f b6 c0             	movzx  eax,al
c000cfa5:	83 f8 01             	cmp    eax,0x1
c000cfa8:	75 0e                	jne    c000cfb8 <ACPI::detectPCI()+0x60>
c000cfaa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cfaf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cfb4:	eb 2e                	jmp    c000cfe4 <ACPI::detectPCI()+0x8c>
c000cfb6:	66 90                	xchg   ax,ax
c000cfb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cfbc:	8a 00                	mov    al,BYTE PTR [eax]
c000cfbe:	0f b6 c0             	movzx  eax,al
c000cfc1:	83 f8 02             	cmp    eax,0x2
c000cfc4:	75 1e                	jne    c000cfe4 <ACPI::detectPCI()+0x8c>
c000cfc6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cfcb:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cfd0:	85 c0                	test   eax,eax
c000cfd2:	74 10                	je     c000cfe4 <ACPI::detectPCI()+0x8c>
c000cfd4:	83 ec 0c             	sub    esp,0xc
c000cfd7:	68 5c 8b 02 c0       	push   0xc0028b5c
c000cfdc:	e8 af 31 00 00       	call   c0010190 <KePanic(char const*)>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cfe8:	83 f0 01             	xor    eax,0x1
c000cfeb:	0f b6 c0             	movzx  eax,al
c000cfee:	85 c0                	test   eax,eax
c000cff0:	74 46                	je     c000d038 <ACPI::detectPCI()+0xe0>
c000cff2:	e8 39 31 ff ff       	call   c0000130 <manualPCIProbe>
c000cff7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cffb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000d000:	75 0e                	jne    c000d010 <ACPI::detectPCI()+0xb8>
c000d002:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d007:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d00c:	eb 2a                	jmp    c000d038 <ACPI::detectPCI()+0xe0>
c000d00e:	66 90                	xchg   ax,ax
c000d010:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000d015:	75 21                	jne    c000d038 <ACPI::detectPCI()+0xe0>
c000d017:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d01c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d021:	85 c0                	test   eax,eax
c000d023:	74 13                	je     c000d038 <ACPI::detectPCI()+0xe0>
c000d025:	83 ec 0c             	sub    esp,0xc
c000d028:	68 5c 8b 02 c0       	push   0xc0028b5c
c000d02d:	e8 5e 31 00 00       	call   c0010190 <KePanic(char const*)>
c000d032:	83 c4 10             	add    esp,0x10
c000d035:	8d 76 00             	lea    esi,[esi+0x0]
c000d038:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d03d:	85 c0                	test   eax,eax
c000d03f:	0f 84 87 00 00 00    	je     c000d0cc <ACPI::detectPCI()+0x174>
c000d045:	83 ec 0c             	sub    esp,0xc
c000d048:	68 c4 89 02 c0       	push   0xc00289c4
c000d04d:	e8 57 07 00 00       	call   c000d7a9 <KeSetBootMessage(char const*)>
c000d052:	83 c4 10             	add    esp,0x10
c000d055:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d05d:	83 ec 0c             	sub    esp,0xc
c000d060:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d064:	e8 d2 2c 00 00       	call   c000fd3b <malloc>
c000d069:	83 c4 10             	add    esp,0x10
c000d06c:	89 c3                	mov    ebx,eax
c000d06e:	83 ec 0c             	sub    esp,0xc
c000d071:	53                   	push   ebx
c000d072:	e8 31 14 01 00       	call   c001e4a8 <PCI::PCI()>
c000d077:	83 c4 10             	add    esp,0x10
c000d07a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d07e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d082:	83 ec 08             	sub    esp,0x8
c000d085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d089:	50                   	push   eax
c000d08a:	e8 9d ce ff ff       	call   c0009f2c <Device::addChild(Device*)>
c000d08f:	83 c4 10             	add    esp,0x10
c000d092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d096:	8b 00                	mov    eax,DWORD PTR [eax]
c000d098:	83 c0 08             	add    eax,0x8
c000d09b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d09d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000d0a2:	85 d2                	test   edx,edx
c000d0a4:	74 0a                	je     c000d0b0 <ACPI::detectPCI()+0x158>
c000d0a6:	ba 01 00 00 00       	mov    edx,0x1
c000d0ab:	eb 0b                	jmp    c000d0b8 <ACPI::detectPCI()+0x160>
c000d0ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d0b0:	ba 02 00 00 00       	mov    edx,0x2
c000d0b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d0b8:	6a 00                	push   0x0
c000d0ba:	6a 00                	push   0x0
c000d0bc:	52                   	push   edx
c000d0bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d0c1:	ff d0                	call   eax
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	e9 91 00 00 00       	jmp    c000d15c <ACPI::detectPCI()+0x204>
c000d0cb:	90                   	nop
c000d0cc:	83 ec 0c             	sub    esp,0xc
c000d0cf:	68 dc 89 02 c0       	push   0xc00289dc
c000d0d4:	e8 d0 06 00 00       	call   c000d7a9 <KeSetBootMessage(char const*)>
c000d0d9:	83 c4 10             	add    esp,0x10
c000d0dc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000d0e3:	83 ec 0c             	sub    esp,0xc
c000d0e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d0ea:	e8 4c 2c 00 00       	call   c000fd3b <malloc>
c000d0ef:	83 c4 10             	add    esp,0x10
c000d0f2:	89 c3                	mov    ebx,eax
c000d0f4:	83 ec 0c             	sub    esp,0xc
c000d0f7:	53                   	push   ebx
c000d0f8:	e8 b1 1f 01 00       	call   c001f0ae <IDE::IDE()>
c000d0fd:	83 c4 10             	add    esp,0x10
c000d100:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000d104:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d108:	83 ec 08             	sub    esp,0x8
c000d10b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d10f:	50                   	push   eax
c000d110:	e8 17 ce ff ff       	call   c0009f2c <Device::addChild(Device*)>
c000d115:	83 c4 10             	add    esp,0x10
c000d118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d11c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000d126:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d12a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000d133:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d137:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000d140:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d144:	8b 00                	mov    eax,DWORD PTR [eax]
c000d146:	83 c0 08             	add    eax,0x8
c000d149:	8b 00                	mov    eax,DWORD PTR [eax]
c000d14b:	6a 00                	push   0x0
c000d14d:	6a 00                	push   0x0
c000d14f:	6a 00                	push   0x0
c000d151:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d155:	ff d0                	call   eax
c000d157:	83 c4 10             	add    esp,0x10
c000d15a:	66 90                	xchg   ax,ax
c000d15c:	90                   	nop
c000d15d:	83 c4 28             	add    esp,0x28
c000d160:	5b                   	pop    ebx
c000d161:	c3                   	ret    
c000d162:	66 90                	xchg   ax,ax

c000d164 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000d164:	83 ec 0c             	sub    esp,0xc
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	68 f1 89 02 c0       	push   0xc00289f1
c000d16f:	e8 1c 30 00 00       	call   c0010190 <KePanic(char const*)>
c000d174:	83 c4 10             	add    esp,0x10
c000d177:	90                   	nop
c000d178:	83 c4 0c             	add    esp,0xc
c000d17b:	c3                   	ret    

c000d17c <ACPI::open(int, int, void*)>:
c000d17c:	57                   	push   edi
c000d17d:	56                   	push   esi
c000d17e:	53                   	push   ebx
c000d17f:	81 ec 70 01 00 00    	sub    esp,0x170
c000d185:	83 ec 0c             	sub    esp,0xc
c000d188:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d18f:	e8 c4 fd ff ff       	call   c000cf58 <ACPI::detectPCI()>
c000d194:	83 c4 10             	add    esp,0x10
c000d197:	83 ec 0c             	sub    esp,0xc
c000d19a:	68 84 8b 02 c0       	push   0xc0028b84
c000d19f:	e8 05 06 00 00       	call   c000d7a9 <KeSetBootMessage(char const*)>
c000d1a4:	83 c4 10             	add    esp,0x10
c000d1a7:	b8 4c 05 00 00       	mov    eax,0x54c
c000d1ac:	8a 00                	mov    al,BYTE PTR [eax]
c000d1ae:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000d1b5:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000d1bd:	83 f8 01             	cmp    eax,0x1
c000d1c0:	75 12                	jne    c000d1d4 <ACPI::open(int, int, void*)+0x58>
c000d1c2:	83 ec 0c             	sub    esp,0xc
c000d1c5:	68 02 8a 02 c0       	push   0xc0028a02
c000d1ca:	e8 0a 8a 00 00       	call   c0015bd9 <Thr::loadKernelSymbolTable(char const*)>
c000d1cf:	83 c4 10             	add    esp,0x10
c000d1d2:	eb 34                	jmp    c000d208 <ACPI::open(int, int, void*)+0x8c>
c000d1d4:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000d1dc:	3d bb 00 00 00       	cmp    eax,0xbb
c000d1e1:	75 15                	jne    c000d1f8 <ACPI::open(int, int, void*)+0x7c>
c000d1e3:	83 ec 0c             	sub    esp,0xc
c000d1e6:	68 20 8a 02 c0       	push   0xc0028a20
c000d1eb:	e8 e9 89 00 00       	call   c0015bd9 <Thr::loadKernelSymbolTable(char const*)>
c000d1f0:	83 c4 10             	add    esp,0x10
c000d1f3:	eb 13                	jmp    c000d208 <ACPI::open(int, int, void*)+0x8c>
c000d1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d1f8:	83 ec 0c             	sub    esp,0xc
c000d1fb:	68 3e 8a 02 c0       	push   0xc0028a3e
c000d200:	e8 8b 2f 00 00       	call   c0010190 <KePanic(char const*)>
c000d205:	83 c4 10             	add    esp,0x10
c000d208:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000d210:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000d21b:	83 ec 0c             	sub    esp,0xc
c000d21e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d225:	e8 11 2b 00 00       	call   c000fd3b <malloc>
c000d22a:	83 c4 10             	add    esp,0x10
c000d22d:	89 c3                	mov    ebx,eax
c000d22f:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000d234:	83 ec 04             	sub    esp,0x4
c000d237:	50                   	push   eax
c000d238:	68 58 8a 02 c0       	push   0xc0028a58
c000d23d:	53                   	push   ebx
c000d23e:	e8 1f b4 ff ff       	call   c0008662 <File::File(char const*, Process*)>
c000d243:	83 c4 10             	add    esp,0x10
c000d246:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000d24d:	83 ec 08             	sub    esp,0x8
c000d250:	6a 01                	push   0x1
c000d252:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000d259:	e8 22 b4 ff ff       	call   c0008680 <File::open(FileOpenMode)>
c000d25e:	83 c4 10             	add    esp,0x10
c000d261:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000d268:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000d270:	75 16                	jne    c000d288 <ACPI::open(int, int, void*)+0x10c>
c000d272:	83 ec 0c             	sub    esp,0xc
c000d275:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000d27c:	e8 5d b4 ff ff       	call   c00086de <File::close()>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	eb 0a                	jmp    c000d290 <ACPI::open(int, int, void*)+0x114>
c000d286:	66 90                	xchg   ax,ax
c000d288:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000d290:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000d298:	74 1e                	je     c000d2b8 <ACPI::open(int, int, void*)+0x13c>
c000d29a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000d2a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2a3:	83 c0 08             	add    eax,0x8
c000d2a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000d2b2:	ff d0                	call   eax
c000d2b4:	83 c4 10             	add    esp,0x10
c000d2b7:	90                   	nop
c000d2b8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000d2bf:	83 f0 01             	xor    eax,0x1
c000d2c2:	0f b6 c0             	movzx  eax,al
c000d2c5:	85 c0                	test   eax,eax
c000d2c7:	74 2f                	je     c000d2f8 <ACPI::open(int, int, void*)+0x17c>
c000d2c9:	83 ec 0c             	sub    esp,0xc
c000d2cc:	68 76 8a 02 c0       	push   0xc0028a76
c000d2d1:	e8 d3 04 00 00       	call   c000d7a9 <KeSetBootMessage(char const*)>
c000d2d6:	83 c4 10             	add    esp,0x10
c000d2d9:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000d2e4:	83 ec 0c             	sub    esp,0xc
c000d2e7:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000d2ee:	e8 63 66 00 00       	call   c0013956 <Virt::setupPageSwapping(int)>
c000d2f3:	83 c4 10             	add    esp,0x10
c000d2f6:	66 90                	xchg   ax,ax
c000d2f8:	83 ec 0c             	sub    esp,0xc
c000d2fb:	68 91 8a 02 c0       	push   0xc0028a91
c000d300:	e8 a4 04 00 00       	call   c000d7a9 <KeSetBootMessage(char const*)>
c000d305:	83 c4 10             	add    esp,0x10
c000d308:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000d30f:	83 ec 08             	sub    esp,0x8
c000d312:	6a 13                	push   0x13
c000d314:	50                   	push   eax
c000d315:	e8 40 cf ff ff       	call   c000a25a <getDevicesOfType(DeviceType)>
c000d31a:	83 c4 0c             	add    esp,0xc
c000d31d:	8d 76 00             	lea    esi,[esi+0x0]
c000d320:	83 ec 0c             	sub    esp,0xc
c000d323:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000d32a:	50                   	push   eax
c000d32b:	e8 80 9a 01 00       	call   c0026db0 <LinkedList<Device>::isEmpty()>
c000d330:	83 c4 10             	add    esp,0x10
c000d333:	83 f0 01             	xor    eax,0x1
c000d336:	0f b6 c0             	movzx  eax,al
c000d339:	85 c0                	test   eax,eax
c000d33b:	0f 84 3b 01 00 00    	je     c000d47c <ACPI::open(int, int, void*)+0x300>
c000d341:	83 ec 0c             	sub    esp,0xc
c000d344:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000d34b:	50                   	push   eax
c000d34c:	e8 7b 9a 01 00       	call   c0026dcc <LinkedList<Device>::getFirstElement()>
c000d351:	83 c4 10             	add    esp,0x10
c000d354:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000d35b:	83 ec 0c             	sub    esp,0xc
c000d35e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000d365:	50                   	push   eax
c000d366:	e8 69 9a 01 00       	call   c0026dd4 <LinkedList<Device>::removeFirst()>
c000d36b:	83 c4 10             	add    esp,0x10
c000d36e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000d375:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000d37c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000d383:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000d387:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000d38d:	ba 09 00 00 00       	mov    edx,0x9
c000d392:	fc                   	cld    
c000d393:	89 c7                	mov    edi,eax
c000d395:	89 de                	mov    esi,ebx
c000d397:	89 d1                	mov    ecx,edx
c000d399:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d39b:	83 ec 08             	sub    esp,0x8
c000d39e:	8d 44 24 38          	lea    eax,[esp+0x38]
c000d3a2:	50                   	push   eax
c000d3a3:	83 ec 24             	sub    esp,0x24
c000d3a6:	89 e0                	mov    eax,esp
c000d3a8:	89 c3                	mov    ebx,eax
c000d3aa:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000d3ae:	ba 09 00 00 00       	mov    edx,0x9
c000d3b3:	89 df                	mov    edi,ebx
c000d3b5:	89 c6                	mov    esi,eax
c000d3b7:	89 d1                	mov    ecx,edx
c000d3b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d3bb:	e8 d2 15 01 00       	call   c001e992 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000d3c0:	83 c4 30             	add    esp,0x30
c000d3c3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000d3ca:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000d3d2:	0f 84 48 ff ff ff    	je     c000d320 <ACPI::open(int, int, void*)+0x1a4>
c000d3d8:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000d3e3:	83 ec 0c             	sub    esp,0xc
c000d3e6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d3ed:	e8 49 29 00 00       	call   c000fd3b <malloc>
c000d3f2:	83 c4 10             	add    esp,0x10
c000d3f5:	89 c3                	mov    ebx,eax
c000d3f7:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000d3fc:	83 ec 04             	sub    esp,0x4
c000d3ff:	50                   	push   eax
c000d400:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000d407:	53                   	push   ebx
c000d408:	e8 55 b2 ff ff       	call   c0008662 <File::File(char const*, Process*)>
c000d40d:	83 c4 10             	add    esp,0x10
c000d410:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000d417:	83 ec 0c             	sub    esp,0xc
c000d41a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000d421:	e8 1e b5 ff ff       	call   c0008944 <File::exists()>
c000d426:	83 c4 10             	add    esp,0x10
c000d429:	0f b6 c0             	movzx  eax,al
c000d42c:	85 c0                	test   eax,eax
c000d42e:	74 1c                	je     c000d44c <ACPI::open(int, int, void*)+0x2d0>
c000d430:	83 ec 04             	sub    esp,0x4
c000d433:	6a 00                	push   0x0
c000d435:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000d43c:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000d443:	e8 44 8f 00 00       	call   c001638c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d448:	83 c4 10             	add    esp,0x10
c000d44b:	90                   	nop
c000d44c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000d454:	0f 84 c6 fe ff ff    	je     c000d320 <ACPI::open(int, int, void*)+0x1a4>
c000d45a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000d461:	8b 00                	mov    eax,DWORD PTR [eax]
c000d463:	83 c0 08             	add    eax,0x8
c000d466:	8b 00                	mov    eax,DWORD PTR [eax]
c000d468:	83 ec 0c             	sub    esp,0xc
c000d46b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000d472:	ff d0                	call   eax
c000d474:	83 c4 10             	add    esp,0x10
c000d477:	e9 a4 fe ff ff       	jmp    c000d320 <ACPI::open(int, int, void*)+0x1a4>
c000d47c:	83 ec 0c             	sub    esp,0xc
c000d47f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000d486:	50                   	push   eax
c000d487:	e8 20 99 01 00       	call   c0026dac <LinkedList<Device>::~LinkedList()>
c000d48c:	83 c4 10             	add    esp,0x10
c000d48f:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000d494:	83 ec 04             	sub    esp,0x4
c000d497:	6a 00                	push   0x0
c000d499:	50                   	push   eax
c000d49a:	68 ab 8a 02 c0       	push   0xc0028aab
c000d49f:	e8 e8 8e 00 00       	call   c001638c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d4a4:	83 c4 10             	add    esp,0x10
c000d4a7:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000d4ac:	85 c0                	test   eax,eax
c000d4ae:	0f 84 1c 01 00 00    	je     c000d5d0 <ACPI::open(int, int, void*)+0x454>
c000d4b4:	a1 88 2d 03 c0       	mov    eax,ds:0xc0032d88
c000d4b9:	85 c0                	test   eax,eax
c000d4bb:	0f 84 0f 01 00 00    	je     c000d5d0 <ACPI::open(int, int, void*)+0x454>
c000d4c1:	83 ec 0c             	sub    esp,0xc
c000d4c4:	68 c8 8a 02 c0       	push   0xc0028ac8
c000d4c9:	e8 db 02 00 00       	call   c000d7a9 <KeSetBootMessage(char const*)>
c000d4ce:	83 c4 10             	add    esp,0x10
c000d4d1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000d4dc:	83 ec 0c             	sub    esp,0xc
c000d4df:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000d4e6:	e8 50 28 00 00       	call   c000fd3b <malloc>
c000d4eb:	83 c4 10             	add    esp,0x10
c000d4ee:	89 c3                	mov    ebx,eax
c000d4f0:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000d4f5:	83 ec 04             	sub    esp,0x4
c000d4f8:	50                   	push   eax
c000d4f9:	68 e5 8a 02 c0       	push   0xc0028ae5
c000d4fe:	53                   	push   ebx
c000d4ff:	e8 5e b1 ff ff       	call   c0008662 <File::File(char const*, Process*)>
c000d504:	83 c4 10             	add    esp,0x10
c000d507:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000d50e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d516:	74 20                	je     c000d538 <ACPI::open(int, int, void*)+0x3bc>
c000d518:	83 ec 0c             	sub    esp,0xc
c000d51b:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d522:	e8 1d b4 ff ff       	call   c0008944 <File::exists()>
c000d527:	83 c4 10             	add    esp,0x10
c000d52a:	0f b6 c0             	movzx  eax,al
c000d52d:	85 c0                	test   eax,eax
c000d52f:	74 07                	je     c000d538 <ACPI::open(int, int, void*)+0x3bc>
c000d531:	b0 01                	mov    al,0x1
c000d533:	eb 07                	jmp    c000d53c <ACPI::open(int, int, void*)+0x3c0>
c000d535:	8d 76 00             	lea    esi,[esi+0x0]
c000d538:	b0 00                	mov    al,0x0
c000d53a:	66 90                	xchg   ax,ax
c000d53c:	0f b6 c0             	movzx  eax,al
c000d53f:	85 c0                	test   eax,eax
c000d541:	74 19                	je     c000d55c <ACPI::open(int, int, void*)+0x3e0>
c000d543:	83 ec 04             	sub    esp,0x4
c000d546:	6a 00                	push   0x0
c000d548:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000d54f:	68 e5 8a 02 c0       	push   0xc0028ae5
c000d554:	e8 33 8e 00 00       	call   c001638c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d559:	83 c4 10             	add    esp,0x10
c000d55c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d564:	74 2a                	je     c000d590 <ACPI::open(int, int, void*)+0x414>
c000d566:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d56e:	74 20                	je     c000d590 <ACPI::open(int, int, void*)+0x414>
c000d570:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d577:	8b 00                	mov    eax,DWORD PTR [eax]
c000d579:	83 c0 08             	add    eax,0x8
c000d57c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d57e:	83 ec 0c             	sub    esp,0xc
c000d581:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d588:	ff d0                	call   eax
c000d58a:	83 c4 10             	add    esp,0x10
c000d58d:	8d 76 00             	lea    esi,[esi+0x0]
c000d590:	a1 84 2d 03 c0       	mov    eax,ds:0xc0032d84
c000d595:	83 ec 08             	sub    esp,0x8
c000d598:	68 02 8b 02 c0       	push   0xc0028b02
c000d59d:	50                   	push   eax
c000d59e:	e8 71 f2 ff ff       	call   c000c814 <findDataTable(unsigned char*, char*)>
c000d5a3:	83 c4 10             	add    esp,0x10
c000d5a6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d5ad:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d5b5:	74 19                	je     c000d5d0 <ACPI::open(int, int, void*)+0x454>
c000d5b7:	83 ec 08             	sub    esp,0x8
c000d5ba:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d5c1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d5c8:	e8 97 fb ff ff       	call   c000d164 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d5cd:	83 c4 10             	add    esp,0x10
c000d5d0:	b8 00 00 00 00       	mov    eax,0x0
c000d5d5:	81 c4 70 01 00 00    	add    esp,0x170
c000d5db:	5b                   	pop    ebx
c000d5dc:	5e                   	pop    esi
c000d5dd:	5f                   	pop    edi
c000d5de:	c3                   	ret    
c000d5df:	90                   	nop

c000d5e0 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d5e0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d5e6:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d5ed:	89 c2                	mov    edx,eax
c000d5ef:	c1 fa 1f             	sar    edx,0x1f
c000d5f2:	83 ec 04             	sub    esp,0x4
c000d5f5:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d5f9:	51                   	push   ecx
c000d5fa:	52                   	push   edx
c000d5fb:	50                   	push   eax
c000d5fc:	e8 2f 25 00 00       	call   c000fb30 <KeItoa(long long, char*)>
c000d601:	83 c4 10             	add    esp,0x10
c000d604:	83 ec 08             	sub    esp,0x8
c000d607:	68 d0 8b 02 c0       	push   0xc0028bd0
c000d60c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d610:	50                   	push   eax
c000d611:	e8 2a 30 ff ff       	call   c0000640 <strcpy>
c000d616:	83 c4 10             	add    esp,0x10
c000d619:	83 ec 08             	sub    esp,0x8
c000d61c:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d623:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d627:	50                   	push   eax
c000d628:	e8 13 32 ff ff       	call   c0000840 <strcat>
c000d62d:	83 c4 10             	add    esp,0x10
c000d630:	83 ec 08             	sub    esp,0x8
c000d633:	68 de 8b 02 c0       	push   0xc0028bde
c000d638:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d63c:	50                   	push   eax
c000d63d:	e8 fe 31 ff ff       	call   c0000840 <strcat>
c000d642:	83 c4 10             	add    esp,0x10
c000d645:	83 ec 08             	sub    esp,0x8
c000d648:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d64f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d653:	50                   	push   eax
c000d654:	e8 e7 31 ff ff       	call   c0000840 <strcat>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	83 ec 08             	sub    esp,0x8
c000d65f:	68 e1 8b 02 c0       	push   0xc0028be1
c000d664:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d668:	50                   	push   eax
c000d669:	e8 d2 31 ff ff       	call   c0000840 <strcat>
c000d66e:	83 c4 10             	add    esp,0x10
c000d671:	83 ec 08             	sub    esp,0x8
c000d674:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d67b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d67f:	50                   	push   eax
c000d680:	e8 bb 31 ff ff       	call   c0000840 <strcat>
c000d685:	83 c4 10             	add    esp,0x10
c000d688:	83 ec 08             	sub    esp,0x8
c000d68b:	68 e1 8b 02 c0       	push   0xc0028be1
c000d690:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d694:	50                   	push   eax
c000d695:	e8 a6 31 ff ff       	call   c0000840 <strcat>
c000d69a:	83 c4 10             	add    esp,0x10
c000d69d:	83 ec 08             	sub    esp,0x8
c000d6a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d6a4:	50                   	push   eax
c000d6a5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d6a9:	50                   	push   eax
c000d6aa:	e8 91 31 ff ff       	call   c0000840 <strcat>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	83 ec 0c             	sub    esp,0xc
c000d6b5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d6b9:	50                   	push   eax
c000d6ba:	e8 d1 2a 00 00       	call   c0010190 <KePanic(char const*)>
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	90                   	nop
c000d6c3:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d6c9:	c3                   	ret    

c000d6ca <KeInitialiseAtexit()>:
c000d6ca:	83 ec 10             	sub    esp,0x10
c000d6cd:	c7 05 e0 2f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032fe0,0x0
c000d6d7:	68 80 00 00 00       	push   0x80
c000d6dc:	6a 00                	push   0x0
c000d6de:	68 80 30 03 c0       	push   0xc0033080
c000d6e3:	e8 08 2e ff ff       	call   c00004f0 <memset>
c000d6e8:	83 c4 1c             	add    esp,0x1c
c000d6eb:	c3                   	ret    

c000d6ec <KeRegisterAtexit(void (*)(void*), void*)>:
c000d6ec:	a1 e0 2f 03 c0       	mov    eax,ds:0xc0032fe0
c000d6f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6f5:	89 14 85 80 30 03 c0 	mov    DWORD PTR [eax*4-0x3ffccf80],edx
c000d6fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d700:	89 14 85 00 30 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd000],edx
c000d707:	40                   	inc    eax
c000d708:	a3 e0 2f 03 c0       	mov    ds:0xc0032fe0,eax
c000d70d:	83 f8 1f             	cmp    eax,0x1f
c000d710:	7e 0d                	jle    c000d71f <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d712:	c7 44 24 04 e3 8b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028be3
c000d71a:	e9 71 2a 00 00       	jmp    c0010190 <KePanic(char const*)>
c000d71f:	c3                   	ret    

c000d720 <KeExecuteAtexit()>:
c000d720:	53                   	push   ebx
c000d721:	31 db                	xor    ebx,ebx
c000d723:	83 ec 08             	sub    esp,0x8
c000d726:	39 1d e0 2f 03 c0    	cmp    DWORD PTR ds:0xc0032fe0,ebx
c000d72c:	7e 28                	jle    c000d756 <KeExecuteAtexit()+0x36>
c000d72e:	8b 04 9d 80 30 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffccf80]
c000d735:	85 c0                	test   eax,eax
c000d737:	74 1a                	je     c000d753 <KeExecuteAtexit()+0x33>
c000d739:	83 ec 0c             	sub    esp,0xc
c000d73c:	ff 34 9d 00 30 03 c0 	push   DWORD PTR [ebx*4-0x3ffcd000]
c000d743:	ff d0                	call   eax
c000d745:	c7 04 9d 80 30 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffccf80],0x0
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	43                   	inc    ebx
c000d754:	eb d0                	jmp    c000d726 <KeExecuteAtexit()+0x6>
c000d756:	83 c4 08             	add    esp,0x8
c000d759:	5b                   	pop    ebx
c000d75a:	c3                   	ret    
c000d75b:	90                   	nop

c000d75c <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d75c:	8b 15 00 31 03 c0    	mov    edx,DWORD PTR ds:0xc0033100
c000d762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d766:	21 d0                	and    eax,edx
c000d768:	0f 95 c0             	setne  al
c000d76b:	c3                   	ret    

c000d76c <KeInitialiseBootConfigurationFlags()>:
c000d76c:	b8 00 05 00 00       	mov    eax,0x500
c000d771:	8b 00                	mov    eax,DWORD PTR [eax]
c000d773:	a3 00 31 03 c0       	mov    ds:0xc0033100,eax
c000d778:	90                   	nop
c000d779:	c3                   	ret    

c000d77a <KeDisplaySplashScreen()>:
c000d77a:	53                   	push   ebx
c000d77b:	bb 01 00 00 00       	mov    ebx,0x1
c000d780:	83 ec 08             	sub    esp,0x8
c000d783:	43                   	inc    ebx
c000d784:	0f be 83 fa 8b 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffd7406]
c000d78b:	85 c0                	test   eax,eax
c000d78d:	74 15                	je     c000d7a4 <KeDisplaySplashScreen()+0x2a>
c000d78f:	83 ec 0c             	sub    esp,0xc
c000d792:	6a 01                	push   0x1
c000d794:	53                   	push   ebx
c000d795:	6a 00                	push   0x0
c000d797:	6a 0f                	push   0xf
c000d799:	50                   	push   eax
c000d79a:	e8 e9 e8 00 00       	call   c001c088 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d79f:	83 c4 20             	add    esp,0x20
c000d7a2:	eb df                	jmp    c000d783 <KeDisplaySplashScreen()+0x9>
c000d7a4:	83 c4 08             	add    esp,0x8
c000d7a7:	5b                   	pop    ebx
c000d7a8:	c3                   	ret    

c000d7a9 <KeSetBootMessage(char const*)>:
c000d7a9:	57                   	push   edi
c000d7aa:	56                   	push   esi
c000d7ab:	53                   	push   ebx
c000d7ac:	31 db                	xor    ebx,ebx
c000d7ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d7b2:	83 ec 0c             	sub    esp,0xc
c000d7b5:	6a 14                	push   0x14
c000d7b7:	53                   	push   ebx
c000d7b8:	43                   	inc    ebx
c000d7b9:	6a 00                	push   0x0
c000d7bb:	6a 00                	push   0x0
c000d7bd:	6a 20                	push   0x20
c000d7bf:	e8 c4 e8 00 00       	call   c001c088 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d7c4:	83 c4 20             	add    esp,0x20
c000d7c7:	83 fb 50             	cmp    ebx,0x50
c000d7ca:	75 e6                	jne    c000d7b2 <KeSetBootMessage(char const*)+0x9>
c000d7cc:	83 ec 0c             	sub    esp,0xc
c000d7cf:	56                   	push   esi
c000d7d0:	e8 9b 2d ff ff       	call   c0000570 <strlen>
c000d7d5:	83 c4 10             	add    esp,0x10
c000d7d8:	29 c3                	sub    ebx,eax
c000d7da:	d1 eb                	shr    ebx,1
c000d7dc:	89 df                	mov    edi,ebx
c000d7de:	89 f0                	mov    eax,esi
c000d7e0:	29 d8                	sub    eax,ebx
c000d7e2:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000d7e6:	85 c0                	test   eax,eax
c000d7e8:	74 16                	je     c000d800 <KeSetBootMessage(char const*)+0x57>
c000d7ea:	83 ec 0c             	sub    esp,0xc
c000d7ed:	6a 14                	push   0x14
c000d7ef:	57                   	push   edi
c000d7f0:	47                   	inc    edi
c000d7f1:	6a 00                	push   0x0
c000d7f3:	6a 07                	push   0x7
c000d7f5:	50                   	push   eax
c000d7f6:	e8 8d e8 00 00       	call   c001c088 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d7fb:	83 c4 20             	add    esp,0x20
c000d7fe:	eb de                	jmp    c000d7de <KeSetBootMessage(char const*)+0x35>
c000d800:	5b                   	pop    ebx
c000d801:	5e                   	pop    esi
c000d802:	5f                   	pop    edi
c000d803:	c3                   	ret    

c000d804 <__cxa_atexit>:
c000d804:	31 c0                	xor    eax,eax
c000d806:	c3                   	ret    

c000d807 <__cxa_finalize>:
c000d807:	c3                   	ret    

c000d808 <__stack_chk_fail>:
c000d808:	55                   	push   ebp
c000d809:	89 e5                	mov    ebp,esp
c000d80b:	83 ec 10             	sub    esp,0x10
c000d80e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d811:	68 0f 8c 02 c0       	push   0xc0028c0f
c000d816:	e8 61 97 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d81b:	58                   	pop    eax
c000d81c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d81f:	5a                   	pop    edx
c000d820:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d823:	68 0f 8c 02 c0       	push   0xc0028c0f
c000d828:	e8 4f 97 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d82d:	c7 04 24 17 8c 02 c0 	mov    DWORD PTR [esp],0xc0028c17
c000d834:	e8 57 29 00 00       	call   c0010190 <KePanic(char const*)>
c000d839:	83 c4 10             	add    esp,0x10
c000d83c:	c9                   	leave  
c000d83d:	c3                   	ret    

c000d83e <__cxa_pure_virtual>:
c000d83e:	83 ec 18             	sub    esp,0x18
c000d841:	68 2f 8c 02 c0       	push   0xc0028c2f
c000d846:	e8 45 29 00 00       	call   c0010190 <KePanic(char const*)>
c000d84b:	83 c4 1c             	add    esp,0x1c
c000d84e:	c3                   	ret    

c000d84f <operator new[](unsigned long)>:
c000d84f:	e9 e7 24 00 00       	jmp    c000fd3b <malloc>

c000d854 <operator delete(void*, unsigned long)>:
c000d854:	e9 02 25 00 00       	jmp    c000fd5b <rfree>

c000d859 <operator delete[](void*)>:
c000d859:	e9 fd 24 00 00       	jmp    c000fd5b <rfree>

c000d85e <operator delete[](void*, unsigned long)>:
c000d85e:	e9 f8 24 00 00       	jmp    c000fd5b <rfree>
c000d863:	90                   	nop

c000d864 <CUnlockScheduler>:
c000d864:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000d86c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000d871:	85 c0                	test   eax,eax
c000d873:	75 03                	jne    c000d878 <CUnlockScheduler+0x14>
c000d875:	fb                   	sti    
c000d876:	66 90                	xchg   ax,ax
c000d878:	90                   	nop
c000d879:	c3                   	ret    
c000d87a:	66 90                	xchg   ax,ax

c000d87c <CLockScheduler>:
c000d87c:	fa                   	cli    
c000d87d:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000d882:	83 c0 01             	add    eax,0x1
c000d885:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000d88a:	90                   	nop
c000d88b:	c3                   	ret    

c000d88c <CPrintf>:
c000d88c:	83 ec 0c             	sub    esp,0xc
c000d88f:	83 ec 08             	sub    esp,0x8
c000d892:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d896:	68 42 8c 02 c0       	push   0xc0028c42
c000d89b:	e8 dc 96 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d8a0:	83 c4 10             	add    esp,0x10
c000d8a3:	90                   	nop
c000d8a4:	83 c4 0c             	add    esp,0xc
c000d8a7:	c3                   	ret    

c000d8a8 <CmOpen(char const*)>:
c000d8a8:	57                   	push   edi
c000d8a9:	56                   	push   esi
c000d8aa:	53                   	push   ebx
c000d8ab:	83 ec 1c             	sub    esp,0x1c
c000d8ae:	6a 30                	push   0x30
c000d8b0:	e8 86 24 00 00       	call   c000fd3b <malloc>
c000d8b5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d8bc:	89 c3                	mov    ebx,eax
c000d8be:	e8 78 24 00 00       	call   c000fd3b <malloc>
c000d8c3:	83 c4 0c             	add    esp,0xc
c000d8c6:	89 c6                	mov    esi,eax
c000d8c8:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c000d8ce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8d2:	50                   	push   eax
c000d8d3:	e8 8a ad ff ff       	call   c0008662 <File::File(char const*, Process*)>
c000d8d8:	83 c4 0c             	add    esp,0xc
c000d8db:	89 33                	mov    DWORD PTR [ebx],esi
c000d8dd:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d8e1:	50                   	push   eax
c000d8e2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d8e6:	50                   	push   eax
c000d8e7:	56                   	push   esi
c000d8e8:	e8 95 b0 ff ff       	call   c0008982 <File::stat(unsigned long long*, bool*)>
c000d8ed:	5a                   	pop    edx
c000d8ee:	59                   	pop    ecx
c000d8ef:	6a 01                	push   0x1
c000d8f1:	ff 33                	push   DWORD PTR [ebx]
c000d8f3:	e8 88 ad ff ff       	call   c0008680 <File::open(FileOpenMode)>
c000d8f8:	5e                   	pop    esi
c000d8f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8fd:	e8 39 24 00 00       	call   c000fd3b <malloc>
c000d902:	5a                   	pop    edx
c000d903:	89 c7                	mov    edi,eax
c000d905:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d909:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d90b:	8b 10                	mov    edx,DWORD PTR [eax]
c000d90d:	56                   	push   esi
c000d90e:	57                   	push   edi
c000d90f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d913:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d917:	50                   	push   eax
c000d918:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d91b:	83 c4 14             	add    esp,0x14
c000d91e:	ff 33                	push   DWORD PTR [ebx]
c000d920:	e8 b9 ad ff ff       	call   c00086de <File::close()>
c000d925:	59                   	pop    ecx
c000d926:	58                   	pop    eax
c000d927:	6a 13                	push   0x13
c000d929:	ff 33                	push   DWORD PTR [ebx]
c000d92b:	e8 50 ad ff ff       	call   c0008680 <File::open(FileOpenMode)>
c000d930:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d932:	8b 10                	mov    edx,DWORD PTR [eax]
c000d934:	89 34 24             	mov    DWORD PTR [esp],esi
c000d937:	57                   	push   edi
c000d938:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d93c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d940:	50                   	push   eax
c000d941:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d944:	83 c4 14             	add    esp,0x14
c000d947:	57                   	push   edi
c000d948:	e8 fe 23 00 00       	call   c000fd4b <free>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d953:	75 10                	jne    c000d965 <CmOpen(char const*)+0xbd>
c000d955:	83 ec 0c             	sub    esp,0xc
c000d958:	68 45 8c 02 c0       	push   0xc0028c45
c000d95d:	e8 2e 28 00 00       	call   c0010190 <KePanic(char const*)>
c000d962:	83 c4 10             	add    esp,0x10
c000d965:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d968:	50                   	push   eax
c000d969:	6a 00                	push   0x0
c000d96b:	6a 00                	push   0x0
c000d96d:	ff 33                	push   DWORD PTR [ebx]
c000d96f:	e8 ca ad ff ff       	call   c000873e <File::seek(unsigned long long)>
c000d974:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d976:	8b 10                	mov    edx,DWORD PTR [eax]
c000d978:	89 34 24             	mov    DWORD PTR [esp],esi
c000d97b:	57                   	push   edi
c000d97c:	6a 00                	push   0x0
c000d97e:	6a 2b                	push   0x2b
c000d980:	50                   	push   eax
c000d981:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d984:	83 c4 1c             	add    esp,0x1c
c000d987:	6a 00                	push   0x0
c000d989:	6a 00                	push   0x0
c000d98b:	ff 33                	push   DWORD PTR [ebx]
c000d98d:	e8 ac ad ff ff       	call   c000873e <File::seek(unsigned long long)>
c000d992:	83 c4 0c             	add    esp,0xc
c000d995:	6a 08                	push   0x8
c000d997:	68 67 8c 02 c0       	push   0xc0028c67
c000d99c:	57                   	push   edi
c000d99d:	e8 de 29 ff ff       	call   c0000380 <memcmp>
c000d9a2:	83 c4 10             	add    esp,0x10
c000d9a5:	85 c0                	test   eax,eax
c000d9a7:	74 10                	je     c000d9b9 <CmOpen(char const*)+0x111>
c000d9a9:	83 ec 0c             	sub    esp,0xc
c000d9ac:	68 70 8c 02 c0       	push   0xc0028c70
c000d9b1:	e8 da 27 00 00       	call   c0010190 <KePanic(char const*)>
c000d9b6:	83 c4 10             	add    esp,0x10
c000d9b9:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d9bd:	89 d8                	mov    eax,ebx
c000d9bf:	83 c4 10             	add    esp,0x10
c000d9c2:	5b                   	pop    ebx
c000d9c3:	5e                   	pop    esi
c000d9c4:	5f                   	pop    edi
c000d9c5:	c3                   	ret    

c000d9c6 <CmClose(Reghive_Tag*)>:
c000d9c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9ca:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d9ce:	74 0b                	je     c000d9db <CmClose(Reghive_Tag*)+0x15>
c000d9d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d9d6:	e9 03 ad ff ff       	jmp    c00086de <File::close()>
c000d9db:	c3                   	ret    

c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d9dc:	53                   	push   ebx
c000d9dd:	83 ec 18             	sub    esp,0x18
c000d9e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d9e4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d9e8:	74 29                	je     c000da13 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d9ea:	50                   	push   eax
c000d9eb:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d9f0:	99                   	cdq    
c000d9f1:	52                   	push   edx
c000d9f2:	50                   	push   eax
c000d9f3:	ff 33                	push   DWORD PTR [ebx]
c000d9f5:	e8 44 ad ff ff       	call   c000873e <File::seek(unsigned long long)>
c000d9fa:	5a                   	pop    edx
c000d9fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d9fd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000da01:	8b 10                	mov    edx,DWORD PTR [eax]
c000da03:	51                   	push   ecx
c000da04:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000da08:	6a 00                	push   0x0
c000da0a:	6a 2b                	push   0x2b
c000da0c:	50                   	push   eax
c000da0d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000da10:	83 c4 20             	add    esp,0x20
c000da13:	83 c4 18             	add    esp,0x18
c000da16:	5b                   	pop    ebx
c000da17:	c3                   	ret    

c000da18 <CmGetString(Reghive_Tag*, int, char*)>:
c000da18:	55                   	push   ebp
c000da19:	57                   	push   edi
c000da1a:	56                   	push   esi
c000da1b:	53                   	push   ebx
c000da1c:	31 db                	xor    ebx,ebx
c000da1e:	83 ec 70             	sub    esp,0x70
c000da21:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000da28:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000da2c:	50                   	push   eax
c000da2d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000da34:	55                   	push   ebp
c000da35:	e8 a2 ff ff ff       	call   c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da3a:	83 c4 10             	add    esp,0x10
c000da3d:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000da42:	c1 e0 08             	shl    eax,0x8
c000da45:	89 c2                	mov    edx,eax
c000da47:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000da4c:	09 d0                	or     eax,edx
c000da4e:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000da53:	c1 e0 08             	shl    eax,0x8
c000da56:	09 d0                	or     eax,edx
c000da58:	74 25                	je     c000da7f <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000da5a:	6b fb 0d             	imul   edi,ebx,0xd
c000da5d:	52                   	push   edx
c000da5e:	8d 54 24 39          	lea    edx,[esp+0x39]
c000da62:	52                   	push   edx
c000da63:	50                   	push   eax
c000da64:	55                   	push   ebp
c000da65:	e8 72 ff ff ff       	call   c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da6a:	8d 74 24 49          	lea    esi,[esp+0x49]
c000da6e:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000da75:	b9 27 00 00 00       	mov    ecx,0x27
c000da7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da7c:	83 c4 10             	add    esp,0x10
c000da7f:	83 c3 03             	add    ebx,0x3
c000da82:	83 fb 15             	cmp    ebx,0x15
c000da85:	75 b6                	jne    c000da3d <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000da87:	83 c4 6c             	add    esp,0x6c
c000da8a:	5b                   	pop    ebx
c000da8b:	5e                   	pop    esi
c000da8c:	5f                   	pop    edi
c000da8d:	5d                   	pop    ebp
c000da8e:	c3                   	ret    

c000da8f <CmEnterDirectory(Reghive_Tag*, int)>:
c000da8f:	83 ec 40             	sub    esp,0x40
c000da92:	8d 44 24 09          	lea    eax,[esp+0x9]
c000da96:	50                   	push   eax
c000da97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da9b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da9f:	e8 38 ff ff ff       	call   c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000daa4:	83 c4 10             	add    esp,0x10
c000daa7:	83 c8 ff             	or     eax,0xffffffff
c000daaa:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000daaf:	75 19                	jne    c000daca <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000dab1:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000dab6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000dabb:	c1 e0 08             	shl    eax,0x8
c000dabe:	09 c2                	or     edx,eax
c000dac0:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000dac5:	c1 e0 10             	shl    eax,0x10
c000dac8:	09 d0                	or     eax,edx
c000daca:	83 c4 3c             	add    esp,0x3c
c000dacd:	c3                   	ret    

c000dace <CmGetNext(Reghive_Tag*, int)>:
c000dace:	83 ec 40             	sub    esp,0x40
c000dad1:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dad5:	50                   	push   eax
c000dad6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dada:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dade:	e8 f9 fe ff ff       	call   c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dae3:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000dae8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000daed:	c1 e0 08             	shl    eax,0x8
c000daf0:	09 c2                	or     edx,eax
c000daf2:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000daf7:	83 c4 4c             	add    esp,0x4c
c000dafa:	c1 e0 10             	shl    eax,0x10
c000dafd:	09 d0                	or     eax,edx
c000daff:	c3                   	ret    

c000db00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000db00:	53                   	push   ebx
c000db01:	83 ec 18             	sub    esp,0x18
c000db04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000db08:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000db0c:	74 29                	je     c000db37 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000db0e:	50                   	push   eax
c000db0f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000db14:	99                   	cdq    
c000db15:	52                   	push   edx
c000db16:	50                   	push   eax
c000db17:	ff 33                	push   DWORD PTR [ebx]
c000db19:	e8 20 ac ff ff       	call   c000873e <File::seek(unsigned long long)>
c000db1e:	5a                   	pop    edx
c000db1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db21:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000db25:	8b 10                	mov    edx,DWORD PTR [eax]
c000db27:	51                   	push   ecx
c000db28:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000db2c:	6a 00                	push   0x0
c000db2e:	6a 2b                	push   0x2b
c000db30:	50                   	push   eax
c000db31:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000db34:	83 c4 20             	add    esp,0x20
c000db37:	83 c4 18             	add    esp,0x18
c000db3a:	5b                   	pop    ebx
c000db3b:	c3                   	ret    

c000db3c <CmFreeExtent(Reghive_Tag*, int)>:
c000db3c:	53                   	push   ebx
c000db3d:	83 ec 3c             	sub    esp,0x3c
c000db40:	6a 2b                	push   0x2b
c000db42:	6a 00                	push   0x0
c000db44:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000db48:	53                   	push   ebx
c000db49:	e8 a2 29 ff ff       	call   c00004f0 <memset>
c000db4e:	83 c4 0c             	add    esp,0xc
c000db51:	53                   	push   ebx
c000db52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db5a:	e8 a1 ff ff ff       	call   c000db00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000db5f:	83 c4 48             	add    esp,0x48
c000db62:	5b                   	pop    ebx
c000db63:	c3                   	ret    

c000db64 <CmUpdateHeader(Reghive_Tag*)>:
c000db64:	83 ec 0c             	sub    esp,0xc
c000db67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000db6f:	74 10                	je     c000db81 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000db71:	52                   	push   edx
c000db72:	8d 50 05             	lea    edx,[eax+0x5]
c000db75:	52                   	push   edx
c000db76:	6a 00                	push   0x0
c000db78:	50                   	push   eax
c000db79:	e8 82 ff ff ff       	call   c000db00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000db7e:	83 c4 10             	add    esp,0x10
c000db81:	83 c4 0c             	add    esp,0xc
c000db84:	c3                   	ret    

c000db85 <CmExpand(Reghive_Tag*, int)>:
c000db85:	57                   	push   edi
c000db86:	56                   	push   esi
c000db87:	83 ce ff             	or     esi,0xffffffff
c000db8a:	53                   	push   ebx
c000db8b:	83 ec 30             	sub    esp,0x30
c000db8e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000db92:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000db96:	74 5f                	je     c000dbf7 <CmExpand(Reghive_Tag*, int)+0x72>
c000db98:	31 d2                	xor    edx,edx
c000db9a:	31 f6                	xor    esi,esi
c000db9c:	50                   	push   eax
c000db9d:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000dba1:	52                   	push   edx
c000dba2:	50                   	push   eax
c000dba3:	ff 33                	push   DWORD PTR [ebx]
c000dba5:	e8 94 ab ff ff       	call   c000873e <File::seek(unsigned long long)>
c000dbaa:	83 c4 0c             	add    esp,0xc
c000dbad:	6a 2b                	push   0x2b
c000dbaf:	6a 00                	push   0x0
c000dbb1:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000dbb5:	57                   	push   edi
c000dbb6:	e8 35 29 ff ff       	call   c00004f0 <memset>
c000dbbb:	83 c4 10             	add    esp,0x10
c000dbbe:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000dbc2:	7d 1b                	jge    c000dbdf <CmExpand(Reghive_Tag*, int)+0x5a>
c000dbc4:	83 ec 0c             	sub    esp,0xc
c000dbc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbc9:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000dbcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbcf:	46                   	inc    esi
c000dbd0:	51                   	push   ecx
c000dbd1:	57                   	push   edi
c000dbd2:	6a 00                	push   0x0
c000dbd4:	6a 2b                	push   0x2b
c000dbd6:	50                   	push   eax
c000dbd7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000dbda:	83 c4 20             	add    esp,0x20
c000dbdd:	eb df                	jmp    c000dbbe <CmExpand(Reghive_Tag*, int)+0x39>
c000dbdf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000dbe3:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000dbe6:	83 ec 0c             	sub    esp,0xc
c000dbe9:	01 f2                	add    edx,esi
c000dbeb:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000dbee:	53                   	push   ebx
c000dbef:	e8 70 ff ff ff       	call   c000db64 <CmUpdateHeader(Reghive_Tag*)>
c000dbf4:	83 c4 10             	add    esp,0x10
c000dbf7:	83 c4 30             	add    esp,0x30
c000dbfa:	89 f0                	mov    eax,esi
c000dbfc:	5b                   	pop    ebx
c000dbfd:	5e                   	pop    esi
c000dbfe:	5f                   	pop    edi
c000dbff:	c3                   	ret    

c000dc00 <CmFindUnusedExtent(Reghive_Tag*)>:
c000dc00:	55                   	push   ebp
c000dc01:	57                   	push   edi
c000dc02:	56                   	push   esi
c000dc03:	53                   	push   ebx
c000dc04:	83 cb ff             	or     ebx,0xffffffff
c000dc07:	83 ec 1c             	sub    esp,0x1c
c000dc0a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000dc0e:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000dc12:	74 68                	je     c000dc7c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000dc14:	be 2b 00 00 00       	mov    esi,0x2b
c000dc19:	51                   	push   ecx
c000dc1a:	31 ff                	xor    edi,edi
c000dc1c:	6a 00                	push   0x0
c000dc1e:	31 db                	xor    ebx,ebx
c000dc20:	6a 00                	push   0x0
c000dc22:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dc25:	e8 14 ab ff ff       	call   c000873e <File::seek(unsigned long long)>
c000dc2a:	83 c4 10             	add    esp,0x10
c000dc2d:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000dc30:	76 3b                	jbe    c000dc6d <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000dc32:	83 ec 0c             	sub    esp,0xc
c000dc35:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc38:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000dc3c:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc3e:	51                   	push   ecx
c000dc3f:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000dc43:	51                   	push   ecx
c000dc44:	6a 00                	push   0x0
c000dc46:	6a 01                	push   0x1
c000dc48:	50                   	push   eax
c000dc49:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dc4c:	83 c4 20             	add    esp,0x20
c000dc4f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000dc54:	74 26                	je     c000dc7c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000dc56:	43                   	inc    ebx
c000dc57:	52                   	push   edx
c000dc58:	57                   	push   edi
c000dc59:	56                   	push   esi
c000dc5a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dc5d:	e8 dc aa ff ff       	call   c000873e <File::seek(unsigned long long)>
c000dc62:	83 c6 2b             	add    esi,0x2b
c000dc65:	83 d7 00             	adc    edi,0x0
c000dc68:	83 c4 10             	add    esp,0x10
c000dc6b:	eb c0                	jmp    c000dc2d <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000dc6d:	50                   	push   eax
c000dc6e:	50                   	push   eax
c000dc6f:	6a 40                	push   0x40
c000dc71:	55                   	push   ebp
c000dc72:	e8 0e ff ff ff       	call   c000db85 <CmExpand(Reghive_Tag*, int)>
c000dc77:	83 c4 10             	add    esp,0x10
c000dc7a:	89 c3                	mov    ebx,eax
c000dc7c:	83 c4 1c             	add    esp,0x1c
c000dc7f:	89 d8                	mov    eax,ebx
c000dc81:	5b                   	pop    ebx
c000dc82:	5e                   	pop    esi
c000dc83:	5f                   	pop    edi
c000dc84:	5d                   	pop    ebp
c000dc85:	c3                   	ret    

c000dc86 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000dc86:	55                   	push   ebp
c000dc87:	57                   	push   edi
c000dc88:	56                   	push   esi
c000dc89:	53                   	push   ebx
c000dc8a:	81 ec 88 00 00 00    	sub    esp,0x88
c000dc90:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000dc97:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000dc9e:	e8 5d ff ff ff       	call   c000dc00 <CmFindUnusedExtent(Reghive_Tag*)>
c000dca3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dca7:	83 c4 0c             	add    esp,0xc
c000dcaa:	6a 2b                	push   0x2b
c000dcac:	6a 00                	push   0x0
c000dcae:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000dcb2:	55                   	push   ebp
c000dcb3:	e8 38 28 ff ff       	call   c00004f0 <memset>
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	85 db                	test   ebx,ebx
c000dcbd:	74 12                	je     c000dcd1 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000dcbf:	51                   	push   ecx
c000dcc0:	55                   	push   ebp
c000dcc1:	53                   	push   ebx
c000dcc2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000dcc9:	e8 0e fd ff ff       	call   c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dcce:	83 c4 10             	add    esp,0x10
c000dcd1:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000dcd5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000dcdc:	b9 2b 00 00 00       	mov    ecx,0x2b
c000dce1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dce3:	85 db                	test   ebx,ebx
c000dce5:	74 49                	je     c000dd30 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000dce7:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000dcec:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000dcf1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dcf5:	c1 e0 08             	shl    eax,0x8
c000dcf8:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000dcfe:	09 c8                	or     eax,ecx
c000dd00:	74 11                	je     c000dd13 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000dd02:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000dd06:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000dd0a:	c1 e8 10             	shr    eax,0x10
c000dd0d:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000dd11:	eb 0f                	jmp    c000dd22 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000dd13:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000dd18:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000dd1d:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000dd22:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000dd26:	c1 ea 08             	shr    edx,0x8
c000dd29:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000dd2e:	eb 0f                	jmp    c000dd3f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000dd30:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000dd35:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000dd3a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000dd3f:	52                   	push   edx
c000dd40:	8d 44 24 49          	lea    eax,[esp+0x49]
c000dd44:	50                   	push   eax
c000dd45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd49:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000dd50:	e8 ab fd ff ff       	call   c000db00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dd55:	83 c4 10             	add    esp,0x10
c000dd58:	85 db                	test   ebx,ebx
c000dd5a:	74 12                	je     c000dd6e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000dd5c:	50                   	push   eax
c000dd5d:	55                   	push   ebp
c000dd5e:	53                   	push   ebx
c000dd5f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000dd66:	e8 95 fd ff ff       	call   c000db00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dd6b:	83 c4 10             	add    esp,0x10
c000dd6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd72:	83 c4 7c             	add    esp,0x7c
c000dd75:	5b                   	pop    ebx
c000dd76:	5e                   	pop    esi
c000dd77:	5f                   	pop    edi
c000dd78:	5d                   	pop    ebp
c000dd79:	c3                   	ret    

c000dd7a <CmSetString(Reghive_Tag*, int, char const*)>:
c000dd7a:	55                   	push   ebp
c000dd7b:	57                   	push   edi
c000dd7c:	56                   	push   esi
c000dd7d:	53                   	push   ebx
c000dd7e:	bb 27 00 00 00       	mov    ebx,0x27
c000dd83:	81 ec 88 00 00 00    	sub    esp,0x88
c000dd89:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000dd90:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000dd97:	e8 d4 27 ff ff       	call   c0000570 <strlen>
c000dd9c:	8d 48 26             	lea    ecx,[eax+0x26]
c000dd9f:	89 c8                	mov    eax,ecx
c000dda1:	99                   	cdq    
c000dda2:	f7 fb                	idiv   ebx
c000dda4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000ddb1:	7e 10                	jle    c000ddc3 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000ddb3:	83 ec 0c             	sub    esp,0xc
c000ddb6:	68 8b 8c 02 c0       	push   0xc0028c8b
c000ddbb:	e8 d0 23 00 00       	call   c0010190 <KePanic(char const*)>
c000ddc0:	83 c4 10             	add    esp,0x10
c000ddc3:	31 ff                	xor    edi,edi
c000ddc5:	50                   	push   eax
c000ddc6:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000ddca:	53                   	push   ebx
c000ddcb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ddd2:	56                   	push   esi
c000ddd3:	e8 04 fc ff ff       	call   c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ddd8:	83 c4 10             	add    esp,0x10
c000dddb:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000dddf:	89 d0                	mov    eax,edx
c000dde1:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000dde5:	c1 e0 08             	shl    eax,0x8
c000dde8:	09 c2                	or     edx,eax
c000ddea:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000ddee:	c1 e2 08             	shl    edx,0x8
c000ddf1:	09 c2                	or     edx,eax
c000ddf3:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ddf7:	7e 76                	jle    c000de6f <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000ddf9:	85 d2                	test   edx,edx
c000ddfb:	75 25                	jne    c000de22 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000ddfd:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000de02:	8d 44 24 45          	lea    eax,[esp+0x45]
c000de06:	50                   	push   eax
c000de07:	6a 00                	push   0x0
c000de09:	6a 00                	push   0x0
c000de0b:	56                   	push   esi
c000de0c:	e8 75 fe ff ff       	call   c000dc86 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de11:	83 c4 10             	add    esp,0x10
c000de14:	89 c2                	mov    edx,eax
c000de16:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000de19:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000de1c:	c1 f8 10             	sar    eax,0x10
c000de1f:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000de22:	55                   	push   ebp
c000de23:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000de27:	55                   	push   ebp
c000de28:	52                   	push   edx
c000de29:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000de2d:	56                   	push   esi
c000de2e:	e8 a9 fb ff ff       	call   c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de33:	83 c4 0c             	add    esp,0xc
c000de36:	6a 27                	push   0x27
c000de38:	6a 00                	push   0x0
c000de3a:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000de3e:	51                   	push   ecx
c000de3f:	e8 ac 26 ff ff       	call   c00004f0 <memset>
c000de44:	83 c4 0c             	add    esp,0xc
c000de47:	6b c7 27             	imul   eax,edi,0x27
c000de4a:	6a 27                	push   0x27
c000de4c:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000de53:	50                   	push   eax
c000de54:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000de58:	51                   	push   ecx
c000de59:	e8 22 28 ff ff       	call   c0000680 <strncpy>
c000de5e:	83 c4 0c             	add    esp,0xc
c000de61:	55                   	push   ebp
c000de62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000de66:	52                   	push   edx
c000de67:	56                   	push   esi
c000de68:	e8 93 fc ff ff       	call   c000db00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000de6d:	eb 19                	jmp    c000de88 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000de6f:	85 d2                	test   edx,edx
c000de71:	74 18                	je     c000de8b <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000de73:	51                   	push   ecx
c000de74:	51                   	push   ecx
c000de75:	52                   	push   edx
c000de76:	56                   	push   esi
c000de77:	e8 c0 fc ff ff       	call   c000db3c <CmFreeExtent(Reghive_Tag*, int)>
c000de7c:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000de80:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000de84:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000de88:	83 c4 10             	add    esp,0x10
c000de8b:	47                   	inc    edi
c000de8c:	83 c3 03             	add    ebx,0x3
c000de8f:	83 ff 07             	cmp    edi,0x7
c000de92:	0f 85 43 ff ff ff    	jne    c000dddb <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000de98:	50                   	push   eax
c000de99:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000de9d:	50                   	push   eax
c000de9e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000dea5:	56                   	push   esi
c000dea6:	e8 55 fc ff ff       	call   c000db00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000deab:	81 c4 8c 00 00 00    	add    esp,0x8c
c000deb1:	5b                   	pop    ebx
c000deb2:	5e                   	pop    esi
c000deb3:	5f                   	pop    edi
c000deb4:	5d                   	pop    ebp
c000deb5:	c3                   	ret    

c000deb6 <CmGetMatch(char*, char*, bool, bool*)>:
c000deb6:	56                   	push   esi
c000deb7:	53                   	push   ebx
c000deb8:	50                   	push   eax
c000deb9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000debd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000dec2:	74 25                	je     c000dee9 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000dec4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000dec7:	31 db                	xor    ebx,ebx
c000dec9:	50                   	push   eax
c000deca:	50                   	push   eax
c000decb:	8d 04 9d 40 bf 02 c0 	lea    eax,[ebx*4-0x3ffd40c0]
c000ded2:	50                   	push   eax
c000ded3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ded7:	e8 74 28 ff ff       	call   c0000750 <strcmp>
c000dedc:	83 c4 10             	add    esp,0x10
c000dedf:	85 c0                	test   eax,eax
c000dee1:	74 2e                	je     c000df11 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000dee3:	43                   	inc    ebx
c000dee4:	83 fb 3f             	cmp    ebx,0x3f
c000dee7:	75 e0                	jne    c000dec9 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000dee9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000deec:	31 db                	xor    ebx,ebx
c000deee:	8d 04 9d 40 bf 02 c0 	lea    eax,[ebx*4-0x3ffd40c0]
c000def5:	51                   	push   ecx
c000def6:	51                   	push   ecx
c000def7:	50                   	push   eax
c000def8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000defc:	e8 4f 28 ff ff       	call   c0000750 <strcmp>
c000df01:	83 c4 10             	add    esp,0x10
c000df04:	85 c0                	test   eax,eax
c000df06:	74 09                	je     c000df11 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000df08:	43                   	inc    ebx
c000df09:	83 fb 3f             	cmp    ebx,0x3f
c000df0c:	75 e0                	jne    c000deee <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000df0e:	83 cb ff             	or     ebx,0xffffffff
c000df11:	89 d8                	mov    eax,ebx
c000df13:	5a                   	pop    edx
c000df14:	5b                   	pop    ebx
c000df15:	5e                   	pop    esi
c000df16:	c3                   	ret    

c000df17 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000df17:	55                   	push   ebp
c000df18:	31 c0                	xor    eax,eax
c000df1a:	57                   	push   edi
c000df1b:	56                   	push   esi
c000df1c:	53                   	push   ebx
c000df1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000df21:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000df25:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000df27:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000df2b:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000df2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000df32:	83 fd 1f             	cmp    ebp,0x1f
c000df35:	7f 0b                	jg     c000df42 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000df37:	0f b6 c2             	movzx  eax,dl
c000df3a:	d3 e0                	shl    eax,cl
c000df3c:	09 07                	or     DWORD PTR [edi],eax
c000df3e:	b0 01                	mov    al,0x1
c000df40:	01 33                	add    DWORD PTR [ebx],esi
c000df42:	5b                   	pop    ebx
c000df43:	5e                   	pop    esi
c000df44:	5f                   	pop    edi
c000df45:	5d                   	pop    ebp
c000df46:	c3                   	ret    

c000df47 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000df47:	57                   	push   edi
c000df48:	56                   	push   esi
c000df49:	53                   	push   ebx
c000df4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000df4e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000df52:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000df56:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000df5a:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000df5c:	7c 17                	jl     c000df75 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000df5e:	8b 17                	mov    edx,DWORD PTR [edi]
c000df60:	b8 01 00 00 00       	mov    eax,0x1
c000df65:	d3 e0                	shl    eax,cl
c000df67:	48                   	dec    eax
c000df68:	21 d0                	and    eax,edx
c000df6a:	d3 ea                	shr    edx,cl
c000df6c:	89 17                	mov    DWORD PTR [edi],edx
c000df6e:	29 0b                	sub    DWORD PTR [ebx],ecx
c000df70:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000df73:	eb 05                	jmp    c000df7a <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000df75:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000df78:	31 c0                	xor    eax,eax
c000df7a:	5b                   	pop    ebx
c000df7b:	5e                   	pop    esi
c000df7c:	5f                   	pop    edi
c000df7d:	c3                   	ret    

c000df7e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000df7e:	83 ec 40             	sub    esp,0x40
c000df81:	8d 44 24 09          	lea    eax,[esp+0x9]
c000df85:	50                   	push   eax
c000df86:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000df8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000df8e:	e8 49 fa ff ff       	call   c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000df93:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df97:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000df9b:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000df9f:	89 10                	mov    DWORD PTR [eax],edx
c000dfa1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000dfa4:	83 c4 4c             	add    esp,0x4c
c000dfa7:	c3                   	ret    

c000dfa8 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000dfa8:	55                   	push   ebp
c000dfa9:	57                   	push   edi
c000dfaa:	56                   	push   esi
c000dfab:	53                   	push   ebx
c000dfac:	83 ec 40             	sub    esp,0x40
c000dfaf:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000dfb3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000dfb7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000dfbb:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000dfbf:	53                   	push   ebx
c000dfc0:	56                   	push   esi
c000dfc1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dfc5:	e8 12 fa ff ff       	call   c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dfca:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000dfce:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000dfd2:	83 c4 0c             	add    esp,0xc
c000dfd5:	53                   	push   ebx
c000dfd6:	56                   	push   esi
c000dfd7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dfdb:	e8 20 fb ff ff       	call   c000db00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dfe0:	83 c4 4c             	add    esp,0x4c
c000dfe3:	5b                   	pop    ebx
c000dfe4:	5e                   	pop    esi
c000dfe5:	5f                   	pop    edi
c000dfe6:	5d                   	pop    ebp
c000dfe7:	c3                   	ret    

c000dfe8 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000dfe8:	55                   	push   ebp
c000dfe9:	57                   	push   edi
c000dfea:	56                   	push   esi
c000dfeb:	31 f6                	xor    esi,esi
c000dfed:	53                   	push   ebx
c000dfee:	31 db                	xor    ebx,ebx
c000dff0:	83 ec 40             	sub    esp,0x40
c000dff3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dffb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e003:	6a 12                	push   0x12
c000e005:	68 ee 00 00 00       	push   0xee
c000e00a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e00e:	e8 dd 24 ff ff       	call   c00004f0 <memset>
c000e013:	83 c4 10             	add    esp,0x10
c000e016:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000e01a:	6a 08                	push   0x8
c000e01c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e020:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000e024:	50                   	push   eax
c000e025:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e029:	55                   	push   ebp
c000e02a:	57                   	push   edi
c000e02b:	e8 e7 fe ff ff       	call   c000df17 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e030:	83 c4 10             	add    esp,0x10
c000e033:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e037:	50                   	push   eax
c000e038:	6a 06                	push   0x6
c000e03a:	55                   	push   ebp
c000e03b:	57                   	push   edi
c000e03c:	e8 06 ff ff ff       	call   c000df47 <CmGetShift(unsigned int*, int*, int, bool*)>
c000e041:	83 c4 10             	add    esp,0x10
c000e044:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e049:	74 07                	je     c000e052 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000e04b:	46                   	inc    esi
c000e04c:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000e050:	eb e1                	jmp    c000e033 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000e052:	43                   	inc    ebx
c000e053:	83 fb 12             	cmp    ebx,0x12
c000e056:	75 c2                	jne    c000e01a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000e058:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e05c:	31 db                	xor    ebx,ebx
c000e05e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000e061:	50                   	push   eax
c000e062:	50                   	push   eax
c000e063:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000e068:	43                   	inc    ebx
c000e069:	8d 04 85 40 bf 02 c0 	lea    eax,[eax*4-0x3ffd40c0]
c000e070:	50                   	push   eax
c000e071:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e075:	e8 c6 27 ff ff       	call   c0000840 <strcat>
c000e07a:	83 c4 10             	add    esp,0x10
c000e07d:	83 fb 18             	cmp    ebx,0x18
c000e080:	75 df                	jne    c000e061 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000e082:	83 c4 3c             	add    esp,0x3c
c000e085:	31 c0                	xor    eax,eax
c000e087:	5b                   	pop    ebx
c000e088:	5e                   	pop    esi
c000e089:	5f                   	pop    edi
c000e08a:	5d                   	pop    ebp
c000e08b:	c3                   	ret    

c000e08c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000e08c:	83 ec 40             	sub    esp,0x40
c000e08f:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e093:	50                   	push   eax
c000e094:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e098:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e09c:	e8 3b f9 ff ff       	call   c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e0a1:	58                   	pop    eax
c000e0a2:	5a                   	pop    edx
c000e0a3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000e0a7:	8d 44 24 15          	lea    eax,[esp+0x15]
c000e0ab:	50                   	push   eax
c000e0ac:	e8 37 ff ff ff       	call   c000dfe8 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000e0b1:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000e0b6:	83 c4 4c             	add    esp,0x4c
c000e0b9:	c3                   	ret    

c000e0ba <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000e0ba:	55                   	push   ebp
c000e0bb:	57                   	push   edi
c000e0bc:	56                   	push   esi
c000e0bd:	53                   	push   ebx
c000e0be:	31 db                	xor    ebx,ebx
c000e0c0:	83 ec 70             	sub    esp,0x70
c000e0c3:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000e0ca:	6a 30                	push   0x30
c000e0cc:	6a 00                	push   0x0
c000e0ce:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e0d2:	56                   	push   esi
c000e0d3:	e8 18 24 ff ff       	call   c00004f0 <memset>
c000e0d8:	83 c4 10             	add    esp,0x10
c000e0db:	83 ec 0c             	sub    esp,0xc
c000e0de:	57                   	push   edi
c000e0df:	e8 8c 24 ff ff       	call   c0000570 <strlen>
c000e0e4:	83 c4 10             	add    esp,0x10
c000e0e7:	39 d8                	cmp    eax,ebx
c000e0e9:	76 16                	jbe    c000e101 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000e0eb:	83 ec 0c             	sub    esp,0xc
c000e0ee:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000e0f2:	50                   	push   eax
c000e0f3:	e8 38 28 ff ff       	call   c0000930 <toupper>
c000e0f8:	83 c4 10             	add    esp,0x10
c000e0fb:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000e0fe:	43                   	inc    ebx
c000e0ff:	eb da                	jmp    c000e0db <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000e101:	31 f6                	xor    esi,esi
c000e103:	52                   	push   edx
c000e104:	31 ff                	xor    edi,edi
c000e106:	6a 18                	push   0x18
c000e108:	6a 3f                	push   0x3f
c000e10a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e10e:	50                   	push   eax
c000e10f:	e8 dc 23 ff ff       	call   c00004f0 <memset>
c000e114:	83 c4 10             	add    esp,0x10
c000e117:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000e11b:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000e11f:	84 c0                	test   al,al
c000e121:	0f 84 b0 00 00 00    	je     c000e1d7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000e127:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000e12b:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000e130:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000e134:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000e139:	8d 6e 01             	lea    ebp,[esi+0x1]
c000e13c:	83 ec 0c             	sub    esp,0xc
c000e13f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000e143:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000e147:	53                   	push   ebx
c000e148:	e8 23 24 ff ff       	call   c0000570 <strlen>
c000e14d:	83 c4 10             	add    esp,0x10
c000e150:	85 c0                	test   eax,eax
c000e152:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e156:	74 0b                	je     c000e163 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000e158:	50                   	push   eax
c000e159:	6a 01                	push   0x1
c000e15b:	53                   	push   ebx
c000e15c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000e160:	50                   	push   eax
c000e161:	eb 0a                	jmp    c000e16d <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000e163:	50                   	push   eax
c000e164:	6a 00                	push   0x0
c000e166:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000e16a:	50                   	push   eax
c000e16b:	6a 00                	push   0x0
c000e16d:	e8 44 fd ff ff       	call   c000deb6 <CmGetMatch(char*, char*, bool, bool*)>
c000e172:	83 c4 10             	add    esp,0x10
c000e175:	83 f8 ff             	cmp    eax,0xffffffff
c000e178:	75 1a                	jne    c000e194 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000e17a:	83 ec 0c             	sub    esp,0xc
c000e17d:	68 a0 8c 02 c0       	push   0xc0028ca0
c000e182:	e8 09 20 00 00       	call   c0010190 <KePanic(char const*)>
c000e187:	83 c4 10             	add    esp,0x10
c000e18a:	b8 02 00 00 00       	mov    eax,0x2
c000e18f:	e9 bc 00 00 00       	jmp    c000e250 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000e194:	83 ff 18             	cmp    edi,0x18
c000e197:	75 1a                	jne    c000e1b3 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000e199:	83 ec 0c             	sub    esp,0xc
c000e19c:	68 b5 8c 02 c0       	push   0xc0028cb5
c000e1a1:	e8 ea 1f 00 00       	call   c0010190 <KePanic(char const*)>
c000e1a6:	83 c4 10             	add    esp,0x10
c000e1a9:	b8 01 00 00 00       	mov    eax,0x1
c000e1ae:	e9 9d 00 00 00       	jmp    c000e250 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000e1b3:	47                   	inc    edi
c000e1b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e1b9:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000e1bd:	74 02                	je     c000e1c1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000e1bf:	89 ee                	mov    esi,ebp
c000e1c1:	83 ec 0c             	sub    esp,0xc
c000e1c4:	53                   	push   ebx
c000e1c5:	e8 a6 23 ff ff       	call   c0000570 <strlen>
c000e1ca:	83 c4 10             	add    esp,0x10
c000e1cd:	85 c0                	test   eax,eax
c000e1cf:	74 06                	je     c000e1d7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000e1d1:	46                   	inc    esi
c000e1d2:	e9 40 ff ff ff       	jmp    c000e117 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000e1d7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e1df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e1e7:	31 f6                	xor    esi,esi
c000e1e9:	50                   	push   eax
c000e1ea:	31 ff                	xor    edi,edi
c000e1ec:	6a 12                	push   0x12
c000e1ee:	68 ee 00 00 00       	push   0xee
c000e1f3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000e1fa:	e8 f1 22 ff ff       	call   c00004f0 <memset>
c000e1ff:	83 c4 10             	add    esp,0x10
c000e202:	83 fe 17             	cmp    esi,0x17
c000e205:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000e209:	7e 26                	jle    c000e231 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000e20b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e20f:	50                   	push   eax
c000e210:	6a 08                	push   0x8
c000e212:	55                   	push   ebp
c000e213:	53                   	push   ebx
c000e214:	e8 2e fd ff ff       	call   c000df47 <CmGetShift(unsigned int*, int*, int, bool*)>
c000e219:	83 c4 10             	add    esp,0x10
c000e21c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e221:	74 26                	je     c000e249 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000e223:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000e22a:	4e                   	dec    esi
c000e22b:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000e22e:	47                   	inc    edi
c000e22f:	eb 1c                	jmp    c000e24d <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000e231:	6a 06                	push   0x6
c000e233:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000e238:	50                   	push   eax
c000e239:	55                   	push   ebp
c000e23a:	53                   	push   ebx
c000e23b:	e8 d7 fc ff ff       	call   c000df17 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e240:	83 c4 10             	add    esp,0x10
c000e243:	84 c0                	test   al,al
c000e245:	75 06                	jne    c000e24d <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000e247:	eb c2                	jmp    c000e20b <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000e249:	31 c0                	xor    eax,eax
c000e24b:	eb 03                	jmp    c000e250 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000e24d:	46                   	inc    esi
c000e24e:	eb b2                	jmp    c000e202 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000e250:	83 c4 6c             	add    esp,0x6c
c000e253:	5b                   	pop    ebx
c000e254:	5e                   	pop    esi
c000e255:	5f                   	pop    edi
c000e256:	5d                   	pop    ebp
c000e257:	c3                   	ret    

c000e258 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000e258:	53                   	push   ebx
c000e259:	83 ec 3c             	sub    esp,0x3c
c000e25c:	6a 2b                	push   0x2b
c000e25e:	6a 00                	push   0x0
c000e260:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e264:	53                   	push   ebx
c000e265:	e8 86 22 ff ff       	call   c00004f0 <memset>
c000e26a:	58                   	pop    eax
c000e26b:	5a                   	pop    edx
c000e26c:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e270:	50                   	push   eax
c000e271:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e275:	e8 40 fe ff ff       	call   c000e0ba <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e27a:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000e27f:	83 c4 0c             	add    esp,0xc
c000e282:	6a 15                	push   0x15
c000e284:	6a 00                	push   0x0
c000e286:	8d 44 24 27          	lea    eax,[esp+0x27]
c000e28a:	50                   	push   eax
c000e28b:	e8 60 22 ff ff       	call   c00004f0 <memset>
c000e290:	53                   	push   ebx
c000e291:	6a 00                	push   0x0
c000e293:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e297:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e29b:	e8 e6 f9 ff ff       	call   c000dc86 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e2a0:	83 c4 58             	add    esp,0x58
c000e2a3:	5b                   	pop    ebx
c000e2a4:	c3                   	ret    

c000e2a5 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000e2a5:	56                   	push   esi
c000e2a6:	53                   	push   ebx
c000e2a7:	83 ec 48             	sub    esp,0x48
c000e2aa:	6a 12                	push   0x12
c000e2ac:	68 ff 00 00 00       	push   0xff
c000e2b1:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000e2b5:	56                   	push   esi
c000e2b6:	e8 35 22 ff ff       	call   c00004f0 <memset>
c000e2bb:	5a                   	pop    edx
c000e2bc:	59                   	pop    ecx
c000e2bd:	56                   	push   esi
c000e2be:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000e2c2:	e8 f3 fd ff ff       	call   c000e0ba <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e2c7:	83 c4 10             	add    esp,0x10
c000e2ca:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000e2ce:	85 db                	test   ebx,ebx
c000e2d0:	74 42                	je     c000e314 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000e2d2:	50                   	push   eax
c000e2d3:	8d 44 24 19          	lea    eax,[esp+0x19]
c000e2d7:	50                   	push   eax
c000e2d8:	53                   	push   ebx
c000e2d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e2dd:	e8 fa f6 ff ff       	call   c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e2e2:	83 c4 0c             	add    esp,0xc
c000e2e5:	6a 12                	push   0x12
c000e2e7:	8d 44 24 21          	lea    eax,[esp+0x21]
c000e2eb:	50                   	push   eax
c000e2ec:	56                   	push   esi
c000e2ed:	e8 8e 20 ff ff       	call   c0000380 <memcmp>
c000e2f2:	83 c4 10             	add    esp,0x10
c000e2f5:	85 c0                	test   eax,eax
c000e2f7:	74 1e                	je     c000e317 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000e2f9:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000e2fe:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000e303:	c1 e3 08             	shl    ebx,0x8
c000e306:	09 d8                	or     eax,ebx
c000e308:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000e30d:	c1 e3 10             	shl    ebx,0x10
c000e310:	09 c3                	or     ebx,eax
c000e312:	eb ba                	jmp    c000e2ce <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000e314:	83 cb ff             	or     ebx,0xffffffff
c000e317:	89 d8                	mov    eax,ebx
c000e319:	83 c4 44             	add    esp,0x44
c000e31c:	5b                   	pop    ebx
c000e31d:	5e                   	pop    esi
c000e31e:	c3                   	ret    

c000e31f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000e31f:	57                   	push   edi
c000e320:	56                   	push   esi
c000e321:	53                   	push   ebx
c000e322:	83 ec 34             	sub    esp,0x34
c000e325:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000e329:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000e32d:	6a 2b                	push   0x2b
c000e32f:	6a 00                	push   0x0
c000e331:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e335:	53                   	push   ebx
c000e336:	e8 b5 21 ff ff       	call   c00004f0 <memset>
c000e33b:	58                   	pop    eax
c000e33c:	5a                   	pop    edx
c000e33d:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e341:	50                   	push   eax
c000e342:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e346:	e8 6f fd ff ff       	call   c000e0ba <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e34b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e34f:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000e353:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000e357:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000e35b:	53                   	push   ebx
c000e35c:	6a 00                	push   0x0
c000e35e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e362:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e366:	e8 1b f9 ff ff       	call   c000dc86 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e36b:	83 c4 50             	add    esp,0x50
c000e36e:	5b                   	pop    ebx
c000e36f:	5e                   	pop    esi
c000e370:	5f                   	pop    edi
c000e371:	c3                   	ret    

c000e372 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000e372:	55                   	push   ebp
c000e373:	57                   	push   edi
c000e374:	56                   	push   esi
c000e375:	53                   	push   ebx
c000e376:	83 ec 40             	sub    esp,0x40
c000e379:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000e37d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000e381:	6a 2b                	push   0x2b
c000e383:	6a 00                	push   0x0
c000e385:	8d 74 24 11          	lea    esi,[esp+0x11]
c000e389:	56                   	push   esi
c000e38a:	e8 61 21 ff ff       	call   c00004f0 <memset>
c000e38f:	5f                   	pop    edi
c000e390:	89 ef                	mov    edi,ebp
c000e392:	58                   	pop    eax
c000e393:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e397:	50                   	push   eax
c000e398:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000e39c:	e8 19 fd ff ff       	call   c000e0ba <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e3a1:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000e3a6:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000e3ab:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000e3b0:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000e3b5:	83 c4 10             	add    esp,0x10
c000e3b8:	85 ed                	test   ebp,ebp
c000e3ba:	74 14                	je     c000e3d0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000e3bc:	51                   	push   ecx
c000e3bd:	51                   	push   ecx
c000e3be:	57                   	push   edi
c000e3bf:	53                   	push   ebx
c000e3c0:	e8 09 f7 ff ff       	call   c000dace <CmGetNext(Reghive_Tag*, int)>
c000e3c5:	83 c4 10             	add    esp,0x10
c000e3c8:	85 c0                	test   eax,eax
c000e3ca:	74 04                	je     c000e3d0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000e3cc:	89 c7                	mov    edi,eax
c000e3ce:	eb e8                	jmp    c000e3b8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000e3d0:	56                   	push   esi
c000e3d1:	6a 00                	push   0x0
c000e3d3:	57                   	push   edi
c000e3d4:	53                   	push   ebx
c000e3d5:	e8 ac f8 ff ff       	call   c000dc86 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e3da:	83 c4 0c             	add    esp,0xc
c000e3dd:	89 c7                	mov    edi,eax
c000e3df:	56                   	push   esi
c000e3e0:	50                   	push   eax
c000e3e1:	53                   	push   ebx
c000e3e2:	e8 f5 f5 ff ff       	call   c000d9dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e3e7:	58                   	pop    eax
c000e3e8:	5a                   	pop    edx
c000e3e9:	6a 6c                	push   0x6c
c000e3eb:	6a 00                	push   0x0
c000e3ed:	6a 00                	push   0x0
c000e3ef:	68 c6 8c 02 c0       	push   0xc0028cc6
c000e3f4:	57                   	push   edi
c000e3f5:	53                   	push   ebx
c000e3f6:	e8 24 ff ff ff       	call   c000e31f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000e3fb:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000e3ff:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000e403:	c1 e8 10             	shr    eax,0x10
c000e406:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000e40a:	83 c4 1c             	add    esp,0x1c
c000e40d:	56                   	push   esi
c000e40e:	57                   	push   edi
c000e40f:	53                   	push   ebx
c000e410:	e8 eb f6 ff ff       	call   c000db00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e415:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000e41a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000e41f:	c1 e0 08             	shl    eax,0x8
c000e422:	09 c2                	or     edx,eax
c000e424:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000e429:	83 c4 4c             	add    esp,0x4c
c000e42c:	c1 e0 10             	shl    eax,0x10
c000e42f:	5b                   	pop    ebx
c000e430:	09 d0                	or     eax,edx
c000e432:	5e                   	pop    esi
c000e433:	5f                   	pop    edi
c000e434:	5d                   	pop    ebp
c000e435:	c3                   	ret    

c000e436 <zStrtok(char*, char const*)>:
c000e436:	55                   	push   ebp
c000e437:	57                   	push   edi
c000e438:	56                   	push   esi
c000e439:	53                   	push   ebx
c000e43a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e43e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e442:	85 db                	test   ebx,ebx
c000e444:	74 2f                	je     c000e475 <zStrtok(char*, char const*)+0x3f>
c000e446:	85 c0                	test   eax,eax
c000e448:	75 09                	jne    c000e453 <zStrtok(char*, char const*)+0x1d>
c000e44a:	a1 04 31 03 c0       	mov    eax,ds:0xc0033104
c000e44f:	85 c0                	test   eax,eax
c000e451:	74 50                	je     c000e4a3 <zStrtok(char*, char const*)+0x6d>
c000e453:	31 c9                	xor    ecx,ecx
c000e455:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000e459:	74 03                	je     c000e45e <zStrtok(char*, char const*)+0x28>
c000e45b:	41                   	inc    ecx
c000e45c:	eb f7                	jmp    c000e455 <zStrtok(char*, char const*)+0x1f>
c000e45e:	31 d2                	xor    edx,edx
c000e460:	39 ca                	cmp    edx,ecx
c000e462:	74 15                	je     c000e479 <zStrtok(char*, char const*)+0x43>
c000e464:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000e468:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000e46b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000e46e:	39 ee                	cmp    esi,ebp
c000e470:	74 13                	je     c000e485 <zStrtok(char*, char const*)+0x4f>
c000e472:	42                   	inc    edx
c000e473:	eb eb                	jmp    c000e460 <zStrtok(char*, char const*)+0x2a>
c000e475:	31 c0                	xor    eax,eax
c000e477:	eb 2a                	jmp    c000e4a3 <zStrtok(char*, char const*)+0x6d>
c000e479:	c7 05 04 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033104,0x0
c000e483:	eb 1e                	jmp    c000e4a3 <zStrtok(char*, char const*)+0x6d>
c000e485:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000e488:	39 ce                	cmp    esi,ecx
c000e48a:	75 0a                	jne    c000e496 <zStrtok(char*, char const*)+0x60>
c000e48c:	40                   	inc    eax
c000e48d:	a3 04 31 03 c0       	mov    ds:0xc0033104,eax
c000e492:	89 d8                	mov    eax,ebx
c000e494:	eb 0d                	jmp    c000e4a3 <zStrtok(char*, char const*)+0x6d>
c000e496:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000e49a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000e49d:	89 15 04 31 03 c0    	mov    DWORD PTR ds:0xc0033104,edx
c000e4a3:	5b                   	pop    ebx
c000e4a4:	5e                   	pop    esi
c000e4a5:	5f                   	pop    edi
c000e4a6:	5d                   	pop    ebp
c000e4a7:	c3                   	ret    

c000e4a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000e4a8:	57                   	push   edi
c000e4a9:	56                   	push   esi
c000e4aa:	53                   	push   ebx
c000e4ab:	81 ec 08 01 00 00    	sub    esp,0x108
c000e4b1:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000e4b8:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000e4bf:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e4c3:	53                   	push   ebx
c000e4c4:	e8 77 21 ff ff       	call   c0000640 <strcpy>
c000e4c9:	59                   	pop    ecx
c000e4ca:	5e                   	pop    esi
c000e4cb:	68 6a 9b 02 c0       	push   0xc0029b6a
c000e4d0:	53                   	push   ebx
c000e4d1:	bb 01 00 00 00       	mov    ebx,0x1
c000e4d6:	e8 5b ff ff ff       	call   c000e436 <zStrtok(char*, char const*)>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	85 c0                	test   eax,eax
c000e4e0:	74 3b                	je     c000e51d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e4e2:	52                   	push   edx
c000e4e3:	50                   	push   eax
c000e4e4:	6a 01                	push   0x1
c000e4e6:	57                   	push   edi
c000e4e7:	e8 b9 fd ff ff       	call   c000e2a5 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000e4ec:	59                   	pop    ecx
c000e4ed:	89 c3                	mov    ebx,eax
c000e4ef:	5e                   	pop    esi
c000e4f0:	68 6a 9b 02 c0       	push   0xc0029b6a
c000e4f5:	6a 00                	push   0x0
c000e4f7:	e8 3a ff ff ff       	call   c000e436 <zStrtok(char*, char const*)>
c000e4fc:	83 c4 10             	add    esp,0x10
c000e4ff:	89 c6                	mov    esi,eax
c000e501:	85 c0                	test   eax,eax
c000e503:	74 18                	je     c000e51d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e505:	52                   	push   edx
c000e506:	52                   	push   edx
c000e507:	53                   	push   ebx
c000e508:	57                   	push   edi
c000e509:	e8 81 f5 ff ff       	call   c000da8f <CmEnterDirectory(Reghive_Tag*, int)>
c000e50e:	83 c4 10             	add    esp,0x10
c000e511:	89 c3                	mov    ebx,eax
c000e513:	83 f8 ff             	cmp    eax,0xffffffff
c000e516:	74 05                	je     c000e51d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e518:	50                   	push   eax
c000e519:	56                   	push   esi
c000e51a:	53                   	push   ebx
c000e51b:	eb c9                	jmp    c000e4e6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e51d:	81 c4 00 01 00 00    	add    esp,0x100
c000e523:	89 d8                	mov    eax,ebx
c000e525:	5b                   	pop    ebx
c000e526:	5e                   	pop    esi
c000e527:	5f                   	pop    edi
c000e528:	c3                   	ret    
c000e529:	90                   	nop

c000e52a <Computer::close(int, int, void*)>:
c000e52a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e52f:	c3                   	ret    

c000e530 <Computer::Computer()>:
c000e530:	83 ec 0c             	sub    esp,0xc
c000e533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e537:	83 ec 08             	sub    esp,0x8
c000e53a:	68 cc 8c 02 c0       	push   0xc0028ccc
c000e53f:	50                   	push   eax
c000e540:	e8 49 bb ff ff       	call   c000a08e <Device::Device(char const*)>
c000e545:	83 c4 10             	add    esp,0x10
c000e548:	ba 24 8d 02 c0       	mov    edx,0xc0028d24
c000e54d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e551:	89 10                	mov    DWORD PTR [eax],edx
c000e553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e557:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e565:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e56f:	90                   	nop
c000e570:	83 c4 0c             	add    esp,0xc
c000e573:	c3                   	ret    

c000e574 <Computer::open(int, int, void*)>:
c000e574:	56                   	push   esi
c000e575:	53                   	push   ebx
c000e576:	83 ec 04             	sub    esp,0x4
c000e579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e57d:	39 1d 08 31 03 c0    	cmp    DWORD PTR ds:0xc0033108,ebx
c000e583:	74 10                	je     c000e595 <Computer::open(int, int, void*)+0x21>
c000e585:	83 ec 0c             	sub    esp,0xc
c000e588:	68 f0 8c 02 c0       	push   0xc0028cf0
c000e58d:	e8 fe 1b 00 00       	call   c0010190 <KePanic(char const*)>
c000e592:	83 c4 10             	add    esp,0x10
c000e595:	83 ec 0c             	sub    esp,0xc
c000e598:	68 78 11 00 00       	push   0x1178
c000e59d:	e8 99 17 00 00       	call   c000fd3b <malloc>
c000e5a2:	89 04 24             	mov    DWORD PTR [esp],eax
c000e5a5:	89 c6                	mov    esi,eax
c000e5a7:	e8 dc ca 00 00       	call   c001b088 <CPU::CPU()>
c000e5ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5b0:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e5b6:	50                   	push   eax
c000e5b7:	6a 00                	push   0x0
c000e5b9:	6a 00                	push   0x0
c000e5bb:	56                   	push   esi
c000e5bc:	e8 a9 cc 00 00       	call   c001b26a <CPU::open(int, int, void*)>
c000e5c1:	83 c4 14             	add    esp,0x14
c000e5c4:	68 d5 8c 02 c0       	push   0xc0028cd5
c000e5c9:	e8 db f1 ff ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c000e5ce:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e5d5:	e8 61 17 00 00       	call   c000fd3b <malloc>
c000e5da:	89 04 24             	mov    DWORD PTR [esp],eax
c000e5dd:	89 c6                	mov    esi,eax
c000e5df:	e8 54 e7 ff ff       	call   c000cd38 <ACPI::ACPI()>
c000e5e4:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e5ea:	5a                   	pop    edx
c000e5eb:	59                   	pop    ecx
c000e5ec:	56                   	push   esi
c000e5ed:	53                   	push   ebx
c000e5ee:	e8 39 b9 ff ff       	call   c0009f2c <Device::addChild(Device*)>
c000e5f3:	5e                   	pop    esi
c000e5f4:	58                   	pop    eax
c000e5f5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e5fb:	50                   	push   eax
c000e5fc:	53                   	push   ebx
c000e5fd:	e8 2a b9 ff ff       	call   c0009f2c <Device::addChild(Device*)>
c000e602:	83 c4 14             	add    esp,0x14
c000e605:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e60a:	5b                   	pop    ebx
c000e60b:	5e                   	pop    esi
c000e60c:	c3                   	ret    

c000e60d <KeCalculateCRC32(unsigned char*, int)>:
c000e60d:	53                   	push   ebx
c000e60e:	83 c8 ff             	or     eax,0xffffffff
c000e611:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e615:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e619:	01 cb                	add    ebx,ecx
c000e61b:	39 d9                	cmp    ecx,ebx
c000e61d:	74 15                	je     c000e634 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e61f:	41                   	inc    ecx
c000e620:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e623:	31 c2                	xor    edx,eax
c000e625:	c1 e8 08             	shr    eax,0x8
c000e628:	0f b6 d2             	movzx  edx,dl
c000e62b:	33 04 95 40 c0 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd3fc0]
c000e632:	eb e7                	jmp    c000e61b <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e634:	f7 d0                	not    eax
c000e636:	5b                   	pop    ebx
c000e637:	c3                   	ret    

c000e638 <EnvVarContainer::getEnv(char const*)>:
c000e638:	57                   	push   edi
c000e639:	56                   	push   esi
c000e63a:	53                   	push   ebx
c000e63b:	31 db                	xor    ebx,ebx
c000e63d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e641:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e643:	7e 2b                	jle    c000e670 <EnvVarContainer::getEnv(char const*)+0x38>
c000e645:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e64c:	50                   	push   eax
c000e64d:	50                   	push   eax
c000e64e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e651:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e654:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e658:	e8 f3 20 ff ff       	call   c0000750 <strcmp>
c000e65d:	83 c4 10             	add    esp,0x10
c000e660:	85 c0                	test   eax,eax
c000e662:	75 09                	jne    c000e66d <EnvVarContainer::getEnv(char const*)+0x35>
c000e664:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e667:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e66b:	eb 05                	jmp    c000e672 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e66d:	43                   	inc    ebx
c000e66e:	eb d1                	jmp    c000e641 <EnvVarContainer::getEnv(char const*)+0x9>
c000e670:	31 c0                	xor    eax,eax
c000e672:	5b                   	pop    ebx
c000e673:	5e                   	pop    esi
c000e674:	5f                   	pop    edi
c000e675:	c3                   	ret    

c000e676 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e676:	55                   	push   ebp
c000e677:	57                   	push   edi
c000e678:	56                   	push   esi
c000e679:	53                   	push   ebx
c000e67a:	83 ec 28             	sub    esp,0x28
c000e67d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e681:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e685:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e689:	56                   	push   esi
c000e68a:	e8 e1 1e ff ff       	call   c0000570 <strlen>
c000e68f:	40                   	inc    eax
c000e690:	89 04 24             	mov    DWORD PTR [esp],eax
c000e693:	e8 a3 16 00 00       	call   c000fd3b <malloc>
c000e698:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e69b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e69f:	e8 cc 1e ff ff       	call   c0000570 <strlen>
c000e6a4:	40                   	inc    eax
c000e6a5:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6a8:	e8 8e 16 00 00       	call   c000fd3b <malloc>
c000e6ad:	89 34 24             	mov    DWORD PTR [esp],esi
c000e6b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e6b4:	e8 b7 1e ff ff       	call   c0000570 <strlen>
c000e6b9:	83 c4 0c             	add    esp,0xc
c000e6bc:	40                   	inc    eax
c000e6bd:	50                   	push   eax
c000e6be:	6a 00                	push   0x0
c000e6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6c4:	e8 27 1e ff ff       	call   c00004f0 <memset>
c000e6c9:	89 34 24             	mov    DWORD PTR [esp],esi
c000e6cc:	e8 9f 1e ff ff       	call   c0000570 <strlen>
c000e6d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e6d5:	8d 48 01             	lea    ecx,[eax+0x1]
c000e6d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e6dd:	89 de                	mov    esi,ebx
c000e6df:	e8 8c 1e ff ff       	call   c0000570 <strlen>
c000e6e4:	83 c4 0c             	add    esp,0xc
c000e6e7:	40                   	inc    eax
c000e6e8:	50                   	push   eax
c000e6e9:	6a 00                	push   0x0
c000e6eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6ef:	e8 fc 1d ff ff       	call   c00004f0 <memset>
c000e6f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e6f7:	e8 74 1e ff ff       	call   c0000570 <strlen>
c000e6fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e700:	8d 48 01             	lea    ecx,[eax+0x1]
c000e703:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e705:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e708:	40                   	inc    eax
c000e709:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e70c:	c1 e0 03             	shl    eax,0x3
c000e70f:	5a                   	pop    edx
c000e710:	59                   	pop    ecx
c000e711:	50                   	push   eax
c000e712:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e715:	e8 0d 16 00 00       	call   c000fd27 <realloc>
c000e71a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e71e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e721:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e724:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e728:	b9 08 00 00 00       	mov    ecx,0x8
c000e72d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e72f:	83 c4 2c             	add    esp,0x2c
c000e732:	5b                   	pop    ebx
c000e733:	5e                   	pop    esi
c000e734:	5f                   	pop    edi
c000e735:	5d                   	pop    ebp
c000e736:	c3                   	ret    
c000e737:	90                   	nop

c000e738 <EnvVarContainer::deleteEnv(char const*)>:
c000e738:	c3                   	ret    
c000e739:	90                   	nop

c000e73a <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e73a:	55                   	push   ebp
c000e73b:	57                   	push   edi
c000e73c:	56                   	push   esi
c000e73d:	53                   	push   ebx
c000e73e:	81 ec 38 01 00 00    	sub    esp,0x138
c000e744:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e74b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e752:	68 14 01 00 00       	push   0x114
c000e757:	e8 df 15 00 00       	call   c000fd3b <malloc>
c000e75c:	83 c4 0c             	add    esp,0xc
c000e75f:	89 c3                	mov    ebx,eax
c000e761:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e764:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e76b:	50                   	push   eax
c000e76c:	e8 f1 9e ff ff       	call   c0008662 <File::File(char const*, Process*)>
c000e771:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e774:	e8 cb a1 ff ff       	call   c0008944 <File::exists()>
c000e779:	83 c4 10             	add    esp,0x10
c000e77c:	84 c0                	test   al,al
c000e77e:	75 31                	jne    c000e7b1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e780:	50                   	push   eax
c000e781:	50                   	push   eax
c000e782:	6a 12                	push   0x12
c000e784:	53                   	push   ebx
c000e785:	e8 f6 9e ff ff       	call   c0008680 <File::open(FileOpenMode)>
c000e78a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e78c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e78f:	89 34 24             	mov    DWORD PTR [esp],esi
c000e792:	e8 d9 1d ff ff       	call   c0000570 <strlen>
c000e797:	5a                   	pop    edx
c000e798:	31 d2                	xor    edx,edx
c000e79a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e79e:	51                   	push   ecx
c000e79f:	56                   	push   esi
c000e7a0:	52                   	push   edx
c000e7a1:	50                   	push   eax
c000e7a2:	53                   	push   ebx
c000e7a3:	ff d7                	call   edi
c000e7a5:	83 c4 14             	add    esp,0x14
c000e7a8:	53                   	push   ebx
c000e7a9:	e8 30 9f ff ff       	call   c00086de <File::close()>
c000e7ae:	83 c4 10             	add    esp,0x10
c000e7b1:	56                   	push   esi
c000e7b2:	31 f6                	xor    esi,esi
c000e7b4:	68 00 01 00 00       	push   0x100
c000e7b9:	6a 00                	push   0x0
c000e7bb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e7bf:	50                   	push   eax
c000e7c0:	e8 2b 1d ff ff       	call   c00004f0 <memset>
c000e7c5:	5f                   	pop    edi
c000e7c6:	58                   	pop    eax
c000e7c7:	6a 01                	push   0x1
c000e7c9:	53                   	push   ebx
c000e7ca:	e8 b1 9e ff ff       	call   c0008680 <File::open(FileOpenMode)>
c000e7cf:	83 c4 10             	add    esp,0x10
c000e7d2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e7da:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e7e2:	83 ec 0c             	sub    esp,0xc
c000e7e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e7e7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e7eb:	51                   	push   ecx
c000e7ec:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e7f0:	52                   	push   edx
c000e7f1:	6a 00                	push   0x0
c000e7f3:	6a 01                	push   0x1
c000e7f5:	53                   	push   ebx
c000e7f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e7f9:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e7fe:	83 c4 20             	add    esp,0x20
c000e801:	89 c2                	mov    edx,eax
c000e803:	85 c0                	test   eax,eax
c000e805:	0f 84 36 01 00 00    	je     c000e941 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e80b:	83 f8 0d             	cmp    eax,0xd
c000e80e:	0f 84 22 01 00 00    	je     c000e936 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e814:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e819:	0f 84 f0 00 00 00    	je     c000e90f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e81f:	83 f8 0a             	cmp    eax,0xa
c000e822:	74 13                	je     c000e837 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e824:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e829:	74 0c                	je     c000e837 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e82b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e831:	0f 8e f6 00 00 00    	jle    c000e92d <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e83b:	83 ec 0c             	sub    esp,0xc
c000e83e:	8d 78 01             	lea    edi,[eax+0x1]
c000e841:	57                   	push   edi
c000e842:	e8 f4 14 00 00       	call   c000fd3b <malloc>
c000e847:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e84b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e84f:	8d 56 04             	lea    edx,[esi+0x4]
c000e852:	89 14 24             	mov    DWORD PTR [esp],edx
c000e855:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e859:	e8 dd 14 00 00       	call   c000fd3b <malloc>
c000e85e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e862:	83 c4 0c             	add    esp,0xc
c000e865:	57                   	push   edi
c000e866:	6a 00                	push   0x0
c000e868:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e86c:	e8 7f 1c ff ff       	call   c00004f0 <memset>
c000e871:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e875:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e879:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e87d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e87f:	83 c4 0c             	add    esp,0xc
c000e882:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e886:	52                   	push   edx
c000e887:	6a 00                	push   0x0
c000e889:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e88d:	e8 5e 1c ff ff       	call   c00004f0 <memset>
c000e892:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e896:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e89a:	89 34 24             	mov    DWORD PTR [esp],esi
c000e89d:	e8 ce 1c ff ff       	call   c0000570 <strlen>
c000e8a2:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e8a6:	89 c1                	mov    ecx,eax
c000e8a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e8ad:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e8b0:	40                   	inc    eax
c000e8b1:	83 c4 10             	add    esp,0x10
c000e8b4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e8b7:	85 d2                	test   edx,edx
c000e8b9:	75 0c                	jne    c000e8c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e8bb:	83 ec 0c             	sub    esp,0xc
c000e8be:	6a 08                	push   0x8
c000e8c0:	e8 76 14 00 00       	call   c000fd3b <malloc>
c000e8c5:	eb 0c                	jmp    c000e8d3 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e8c7:	c1 e0 03             	shl    eax,0x3
c000e8ca:	51                   	push   ecx
c000e8cb:	51                   	push   ecx
c000e8cc:	50                   	push   eax
c000e8cd:	52                   	push   edx
c000e8ce:	e8 54 14 00 00       	call   c000fd27 <realloc>
c000e8d3:	83 c4 10             	add    esp,0x10
c000e8d6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e8d9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e8dc:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e8df:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e8e3:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e8e7:	b9 08 00 00 00       	mov    ecx,0x8
c000e8ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8ee:	31 f6                	xor    esi,esi
c000e8f0:	50                   	push   eax
c000e8f1:	68 00 01 00 00       	push   0x100
c000e8f6:	6a 00                	push   0x0
c000e8f8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e8fc:	50                   	push   eax
c000e8fd:	e8 ee 1b ff ff       	call   c00004f0 <memset>
c000e902:	83 c4 10             	add    esp,0x10
c000e905:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e90d:	eb 27                	jmp    c000e936 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e90f:	83 f8 3d             	cmp    eax,0x3d
c000e912:	74 1e                	je     c000e932 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e914:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e91a:	7f 07                	jg     c000e923 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e91c:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e920:	46                   	inc    esi
c000e921:	eb 13                	jmp    c000e936 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e923:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e92b:	eb 09                	jmp    c000e936 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e92d:	83 f8 3d             	cmp    eax,0x3d
c000e930:	75 ea                	jne    c000e91c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e932:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e936:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e93b:	0f 85 99 fe ff ff    	jne    c000e7da <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e941:	83 ec 0c             	sub    esp,0xc
c000e944:	53                   	push   ebx
c000e945:	e8 94 9d ff ff       	call   c00086de <File::close()>
c000e94a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e94c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e94f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e952:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e958:	5b                   	pop    ebx
c000e959:	5e                   	pop    esi
c000e95a:	5f                   	pop    edi
c000e95b:	5d                   	pop    ebp
c000e95c:	c3                   	ret    
c000e95d:	90                   	nop

c000e95e <EnvVarContainer::__loadSystem()>:
c000e95e:	83 ec 10             	sub    esp,0x10
c000e961:	68 40 c4 02 c0       	push   0xc002c440
c000e966:	68 48 8d 02 c0       	push   0xc0028d48
c000e96b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96f:	e8 c6 fd ff ff       	call   c000e73a <EnvVarContainer::loadFrom(char const*, char const*)>
c000e974:	83 c4 1c             	add    esp,0x1c
c000e977:	c3                   	ret    

c000e978 <EnvVarContainer::__loadUser()>:
c000e978:	c3                   	ret    
c000e979:	90                   	nop

c000e97a <EnvVarContainer::EnvVarContainer(Process*)>:
c000e97a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e97e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e988:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e98c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e98f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e993:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e99a:	90                   	nop
c000e99b:	c3                   	ret    

c000e99c <EnvVarContainer::~EnvVarContainer()>:
c000e99c:	83 ec 0c             	sub    esp,0xc
c000e99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9a6:	85 c0                	test   eax,eax
c000e9a8:	74 1d                	je     c000e9c7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9b0:	85 c0                	test   eax,eax
c000e9b2:	74 13                	je     c000e9c7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9bb:	83 ec 0c             	sub    esp,0xc
c000e9be:	50                   	push   eax
c000e9bf:	e8 87 13 00 00       	call   c000fd4b <free>
c000e9c4:	83 c4 10             	add    esp,0x10
c000e9c7:	90                   	nop
c000e9c8:	83 c4 0c             	add    esp,0xc
c000e9cb:	c3                   	ret    

c000e9cc <KeGetEnv(Process*, char const*)>:
c000e9cc:	53                   	push   ebx
c000e9cd:	83 ec 08             	sub    esp,0x8
c000e9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e9d8:	39 05 58 33 03 c0    	cmp    DWORD PTR ds:0xc0033358,eax
c000e9de:	74 04                	je     c000e9e4 <KeGetEnv(Process*, char const*)+0x18>
c000e9e0:	85 c0                	test   eax,eax
c000e9e2:	75 0b                	jne    c000e9ef <KeGetEnv(Process*, char const*)+0x23>
c000e9e4:	a1 10 31 03 c0       	mov    eax,ds:0xc0033110
c000e9e9:	85 c0                	test   eax,eax
c000e9eb:	75 19                	jne    c000ea06 <KeGetEnv(Process*, char const*)+0x3a>
c000e9ed:	eb 27                	jmp    c000ea16 <KeGetEnv(Process*, char const*)+0x4a>
c000e9ef:	52                   	push   edx
c000e9f0:	52                   	push   edx
c000e9f1:	53                   	push   ebx
c000e9f2:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e9f8:	e8 3b fc ff ff       	call   c000e638 <EnvVarContainer::getEnv(char const*)>
c000e9fd:	83 c4 10             	add    esp,0x10
c000ea00:	85 c0                	test   eax,eax
c000ea02:	75 28                	jne    c000ea2c <KeGetEnv(Process*, char const*)+0x60>
c000ea04:	eb de                	jmp    c000e9e4 <KeGetEnv(Process*, char const*)+0x18>
c000ea06:	52                   	push   edx
c000ea07:	52                   	push   edx
c000ea08:	53                   	push   ebx
c000ea09:	50                   	push   eax
c000ea0a:	e8 29 fc ff ff       	call   c000e638 <EnvVarContainer::getEnv(char const*)>
c000ea0f:	83 c4 10             	add    esp,0x10
c000ea12:	85 c0                	test   eax,eax
c000ea14:	75 16                	jne    c000ea2c <KeGetEnv(Process*, char const*)+0x60>
c000ea16:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ea1a:	a1 14 31 03 c0       	mov    eax,ds:0xc0033114
c000ea1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea23:	83 c4 08             	add    esp,0x8
c000ea26:	5b                   	pop    ebx
c000ea27:	e9 0c fc ff ff       	jmp    c000e638 <EnvVarContainer::getEnv(char const*)>
c000ea2c:	83 c4 08             	add    esp,0x8
c000ea2f:	5b                   	pop    ebx
c000ea30:	c3                   	ret    

c000ea31 <KeSetEnvSystem(char const*, char const*)>:
c000ea31:	83 ec 10             	sub    esp,0x10
c000ea34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea3c:	ff 35 14 31 03 c0    	push   DWORD PTR ds:0xc0033114
c000ea42:	e8 2f fc ff ff       	call   c000e676 <EnvVarContainer::setEnv(char const*, char const*)>
c000ea47:	83 c4 1c             	add    esp,0x1c
c000ea4a:	c3                   	ret    

c000ea4b <KeSetEnvUser(char const*, char const*)>:
c000ea4b:	a1 10 31 03 c0       	mov    eax,ds:0xc0033110
c000ea50:	85 c0                	test   eax,eax
c000ea52:	74 15                	je     c000ea69 <KeSetEnvUser(char const*, char const*)+0x1e>
c000ea54:	83 ec 10             	sub    esp,0x10
c000ea57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea5f:	50                   	push   eax
c000ea60:	e8 11 fc ff ff       	call   c000e676 <EnvVarContainer::setEnv(char const*, char const*)>
c000ea65:	83 c4 1c             	add    esp,0x1c
c000ea68:	c3                   	ret    
c000ea69:	c3                   	ret    

c000ea6a <KeSetEnvProcess(Process*, char const*, char const*)>:
c000ea6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ea6e:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000ea74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ea78:	e9 f9 fb ff ff       	jmp    c000e676 <EnvVarContainer::setEnv(char const*, char const*)>

c000ea7d <KeDeleteEnvSystem(char const*)>:
c000ea7d:	c3                   	ret    

c000ea7e <KeDeleteEnvUser(char const*)>:
c000ea7e:	c3                   	ret    

c000ea7f <KeDeleteEnvProcess(Process*, char const*)>:
c000ea7f:	c3                   	ret    

c000ea80 <KeNewProcessEnv(Process*)>:
c000ea80:	83 ec 28             	sub    esp,0x28
c000ea83:	6a 0c                	push   0xc
c000ea85:	e8 b1 12 00 00       	call   c000fd3b <malloc>
c000ea8a:	5a                   	pop    edx
c000ea8b:	59                   	pop    ecx
c000ea8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea90:	50                   	push   eax
c000ea91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea95:	e8 e0 fe ff ff       	call   c000e97a <EnvVarContainer::EnvVarContainer(Process*)>
c000ea9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea9e:	83 c4 2c             	add    esp,0x2c
c000eaa1:	c3                   	ret    

c000eaa2 <KeCopyProcessEnv(Process*, Process*)>:
c000eaa2:	57                   	push   edi
c000eaa3:	56                   	push   esi
c000eaa4:	53                   	push   ebx
c000eaa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaa9:	83 ec 0c             	sub    esp,0xc
c000eaac:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000eab2:	6a 0c                	push   0xc
c000eab4:	e8 82 12 00 00       	call   c000fd3b <malloc>
c000eab9:	89 c3                	mov    ebx,eax
c000eabb:	58                   	pop    eax
c000eabc:	5a                   	pop    edx
c000eabd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eac1:	53                   	push   ebx
c000eac2:	e8 b3 fe ff ff       	call   c000e97a <EnvVarContainer::EnvVarContainer(Process*)>
c000eac7:	8b 07                	mov    eax,DWORD PTR [edi]
c000eac9:	89 03                	mov    DWORD PTR [ebx],eax
c000eacb:	c1 e0 03             	shl    eax,0x3
c000eace:	89 04 24             	mov    DWORD PTR [esp],eax
c000ead1:	e8 65 12 00 00       	call   c000fd3b <malloc>
c000ead6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ead9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eadb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000eade:	c1 e1 03             	shl    ecx,0x3
c000eae1:	89 c7                	mov    edi,eax
c000eae3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eae5:	83 c4 10             	add    esp,0x10
c000eae8:	89 d8                	mov    eax,ebx
c000eaea:	5b                   	pop    ebx
c000eaeb:	5e                   	pop    esi
c000eaec:	5f                   	pop    edi
c000eaed:	c3                   	ret    

c000eaee <KeLoadSystemEnv()>:
c000eaee:	53                   	push   ebx
c000eaef:	83 ec 14             	sub    esp,0x14
c000eaf2:	6a 0c                	push   0xc
c000eaf4:	e8 42 12 00 00       	call   c000fd3b <malloc>
c000eaf9:	89 c3                	mov    ebx,eax
c000eafb:	58                   	pop    eax
c000eafc:	5a                   	pop    edx
c000eafd:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c000eb03:	53                   	push   ebx
c000eb04:	e8 71 fe ff ff       	call   c000e97a <EnvVarContainer::EnvVarContainer(Process*)>
c000eb09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb0c:	89 1d 14 31 03 c0    	mov    DWORD PTR ds:0xc0033114,ebx
c000eb12:	e8 47 fe ff ff       	call   c000e95e <EnvVarContainer::__loadSystem()>
c000eb17:	83 c4 18             	add    esp,0x18
c000eb1a:	5b                   	pop    ebx
c000eb1b:	c3                   	ret    

c000eb1c <KeLoadUserEnv()>:
c000eb1c:	53                   	push   ebx
c000eb1d:	83 ec 14             	sub    esp,0x14
c000eb20:	6a 0c                	push   0xc
c000eb22:	e8 14 12 00 00       	call   c000fd3b <malloc>
c000eb27:	89 c3                	mov    ebx,eax
c000eb29:	58                   	pop    eax
c000eb2a:	5a                   	pop    edx
c000eb2b:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c000eb31:	53                   	push   ebx
c000eb32:	e8 43 fe ff ff       	call   c000e97a <EnvVarContainer::EnvVarContainer(Process*)>
c000eb37:	89 1d 10 31 03 c0    	mov    DWORD PTR ds:0xc0033110,ebx
c000eb3d:	83 c4 18             	add    esp,0x18
c000eb40:	5b                   	pop    ebx
c000eb41:	c3                   	ret    

c000eb42 <KeFlushEnv()>:
c000eb42:	c3                   	ret    

c000eb43 <KeGetProcessTotalEnvCount(Process*)>:
c000eb43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb47:	8b 15 10 31 03 c0    	mov    edx,DWORD PTR ds:0xc0033110
c000eb4d:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000eb53:	a1 14 31 03 c0       	mov    eax,ds:0xc0033114
c000eb58:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb5a:	03 01                	add    eax,DWORD PTR [ecx]
c000eb5c:	85 d2                	test   edx,edx
c000eb5e:	74 02                	je     c000eb62 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000eb60:	03 02                	add    eax,DWORD PTR [edx]
c000eb62:	c3                   	ret    

c000eb63 <KeGetProcessEnvPair(Process*, int)>:
c000eb63:	57                   	push   edi
c000eb64:	56                   	push   esi
c000eb65:	8b 35 10 31 03 c0    	mov    esi,DWORD PTR ds:0xc0033110
c000eb6b:	53                   	push   ebx
c000eb6c:	85 f6                	test   esi,esi
c000eb6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb76:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000eb7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb80:	8b 01                	mov    eax,DWORD PTR [ecx]
c000eb82:	75 16                	jne    c000eb9a <KeGetProcessEnvPair(Process*, int)+0x37>
c000eb84:	39 c2                	cmp    edx,eax
c000eb86:	7c 16                	jl     c000eb9e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000eb88:	8b 0d 14 31 03 c0    	mov    ecx,DWORD PTR ds:0xc0033114
c000eb8e:	8b 31                	mov    esi,DWORD PTR [ecx]
c000eb90:	01 c6                	add    esi,eax
c000eb92:	39 d6                	cmp    esi,edx
c000eb94:	7e 3c                	jle    c000ebd2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000eb96:	29 c2                	sub    edx,eax
c000eb98:	eb 04                	jmp    c000eb9e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000eb9a:	39 c2                	cmp    edx,eax
c000eb9c:	7d 05                	jge    c000eba3 <KeGetProcessEnvPair(Process*, int)+0x40>
c000eb9e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000eba1:	eb 20                	jmp    c000ebc3 <KeGetProcessEnvPair(Process*, int)+0x60>
c000eba3:	8b 3e                	mov    edi,DWORD PTR [esi]
c000eba5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000eba8:	39 d1                	cmp    ecx,edx
c000ebaa:	7e 04                	jle    c000ebb0 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000ebac:	29 c2                	sub    edx,eax
c000ebae:	eb 10                	jmp    c000ebc0 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000ebb0:	8b 35 14 31 03 c0    	mov    esi,DWORD PTR ds:0xc0033114
c000ebb6:	03 0e                	add    ecx,DWORD PTR [esi]
c000ebb8:	39 d1                	cmp    ecx,edx
c000ebba:	7e 16                	jle    c000ebd2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000ebbc:	29 c2                	sub    edx,eax
c000ebbe:	29 fa                	sub    edx,edi
c000ebc0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ebc3:	8d 14 d0             	lea    edx,[eax+edx*8]
c000ebc6:	8b 02                	mov    eax,DWORD PTR [edx]
c000ebc8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ebcb:	89 03                	mov    DWORD PTR [ebx],eax
c000ebcd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000ebd0:	eb 1d                	jmp    c000ebef <KeGetProcessEnvPair(Process*, int)+0x8c>
c000ebd2:	83 ec 0c             	sub    esp,0xc
c000ebd5:	68 6a 8d 02 c0       	push   0xc0028d6a
c000ebda:	e8 b1 15 00 00       	call   c0010190 <KePanic(char const*)>
c000ebdf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000ebe5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000ebec:	83 c4 10             	add    esp,0x10
c000ebef:	89 d8                	mov    eax,ebx
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	5f                   	pop    edi
c000ebf4:	c2 04 00             	ret    0x4
c000ebf7:	90                   	nop

c000ebf8 <KeDisplayProgramFault(char const*)>:
c000ebf8:	83 ec 0c             	sub    esp,0xc
c000ebfb:	83 ec 0c             	sub    esp,0xc
c000ebfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec02:	e8 75 83 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ec07:	83 c4 10             	add    esp,0x10
c000ec0a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ec0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ec14:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ec1a:	85 c0                	test   eax,eax
c000ec1c:	74 22                	je     c000ec40 <KeDisplayProgramFault(char const*)+0x48>
c000ec1e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ec23:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec25:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ec28:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ec2e:	6a 04                	push   0x4
c000ec30:	6a 0f                	push   0xf
c000ec32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec36:	50                   	push   eax
c000ec37:	e8 32 3f 00 00       	call   c0012b6e <VgaText::puts(char const*, VgaColour, VgaColour)>
c000ec3c:	83 c4 10             	add    esp,0x10
c000ec3f:	90                   	nop
c000ec40:	90                   	nop
c000ec41:	83 c4 0c             	add    esp,0xc
c000ec44:	c3                   	ret    
c000ec45:	8d 76 00             	lea    esi,[esi+0x0]

c000ec48 <KeGeneralProtectionFault(void*, void*)>:
c000ec48:	83 ec 0c             	sub    esp,0xc
c000ec4b:	83 ec 08             	sub    esp,0x8
c000ec4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec56:	e8 54 b9 00 00       	call   c001a5af <HalHandleGeneralProtectionFault(void*, void*)>
c000ec5b:	83 c4 10             	add    esp,0x10
c000ec5e:	0f b6 c0             	movzx  eax,al
c000ec61:	85 c0                	test   eax,eax
c000ec63:	75 2f                	jne    c000ec94 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000ec65:	83 ec 0c             	sub    esp,0xc
c000ec68:	68 84 8d 02 c0       	push   0xc0028d84
c000ec6d:	e8 86 ff ff ff       	call   c000ebf8 <KeDisplayProgramFault(char const*)>
c000ec72:	83 c4 10             	add    esp,0x10
c000ec75:	83 ec 0c             	sub    esp,0xc
c000ec78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec7c:	e8 a7 ba 00 00       	call   c001a728 <HalDisplayDebugInfo(void*)>
c000ec81:	83 c4 10             	add    esp,0x10
c000ec84:	83 ec 0c             	sub    esp,0xc
c000ec87:	6a 7e                	push   0x7e
c000ec89:	e8 9a 88 00 00       	call   c0017528 <KeTerminateCurrentThread(int)>
c000ec8e:	83 c4 10             	add    esp,0x10
c000ec91:	eb 05                	jmp    c000ec98 <KeGeneralProtectionFault(void*, void*)+0x50>
c000ec93:	90                   	nop
c000ec94:	90                   	nop
c000ec95:	8d 76 00             	lea    esi,[esi+0x0]
c000ec98:	83 c4 0c             	add    esp,0xc
c000ec9b:	c3                   	ret    

c000ec9c <KePageFault(void*, void*)>:
c000ec9c:	83 ec 0c             	sub    esp,0xc
c000ec9f:	83 ec 08             	sub    esp,0x8
c000eca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecaa:	e8 08 ba 00 00       	call   c001a6b7 <HalHandlePageFault(void*, void*)>
c000ecaf:	83 c4 10             	add    esp,0x10
c000ecb2:	0f b6 c0             	movzx  eax,al
c000ecb5:	85 c0                	test   eax,eax
c000ecb7:	75 2f                	jne    c000ece8 <KePageFault(void*, void*)+0x4c>
c000ecb9:	83 ec 0c             	sub    esp,0xc
c000ecbc:	68 9d 8d 02 c0       	push   0xc0028d9d
c000ecc1:	e8 32 ff ff ff       	call   c000ebf8 <KeDisplayProgramFault(char const*)>
c000ecc6:	83 c4 10             	add    esp,0x10
c000ecc9:	83 ec 0c             	sub    esp,0xc
c000eccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecd0:	e8 53 ba 00 00       	call   c001a728 <HalDisplayDebugInfo(void*)>
c000ecd5:	83 c4 10             	add    esp,0x10
c000ecd8:	83 ec 0c             	sub    esp,0xc
c000ecdb:	6a 7f                	push   0x7f
c000ecdd:	e8 46 88 00 00       	call   c0017528 <KeTerminateCurrentThread(int)>
c000ece2:	83 c4 10             	add    esp,0x10
c000ece5:	eb 05                	jmp    c000ecec <KePageFault(void*, void*)+0x50>
c000ece7:	90                   	nop
c000ece8:	90                   	nop
c000ece9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecec:	83 c4 0c             	add    esp,0xc
c000ecef:	c3                   	ret    

c000ecf0 <KeOpcodeFault(void*, void*)>:
c000ecf0:	83 ec 0c             	sub    esp,0xc
c000ecf3:	83 ec 08             	sub    esp,0x8
c000ecf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecfe:	e8 e3 b9 00 00       	call   c001a6e6 <HalHandleOpcodeFault(void*, void*)>
c000ed03:	83 c4 10             	add    esp,0x10
c000ed06:	0f b6 c0             	movzx  eax,al
c000ed09:	85 c0                	test   eax,eax
c000ed0b:	75 2f                	jne    c000ed3c <KeOpcodeFault(void*, void*)+0x4c>
c000ed0d:	83 ec 0c             	sub    esp,0xc
c000ed10:	68 a8 8d 02 c0       	push   0xc0028da8
c000ed15:	e8 de fe ff ff       	call   c000ebf8 <KeDisplayProgramFault(char const*)>
c000ed1a:	83 c4 10             	add    esp,0x10
c000ed1d:	83 ec 0c             	sub    esp,0xc
c000ed20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed24:	e8 ff b9 00 00       	call   c001a728 <HalDisplayDebugInfo(void*)>
c000ed29:	83 c4 10             	add    esp,0x10
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	6a 7c                	push   0x7c
c000ed31:	e8 f2 87 00 00       	call   c0017528 <KeTerminateCurrentThread(int)>
c000ed36:	83 c4 10             	add    esp,0x10
c000ed39:	eb 05                	jmp    c000ed40 <KeOpcodeFault(void*, void*)+0x50>
c000ed3b:	90                   	nop
c000ed3c:	90                   	nop
c000ed3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed40:	83 c4 0c             	add    esp,0xc
c000ed43:	c3                   	ret    

c000ed44 <KeOtherFault(void*, void*)>:
c000ed44:	83 ec 0c             	sub    esp,0xc
c000ed47:	83 ec 0c             	sub    esp,0xc
c000ed4a:	68 c4 8d 02 c0       	push   0xc0028dc4
c000ed4f:	e8 a4 fe ff ff       	call   c000ebf8 <KeDisplayProgramFault(char const*)>
c000ed54:	83 c4 10             	add    esp,0x10
c000ed57:	83 ec 0c             	sub    esp,0xc
c000ed5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed5e:	e8 c5 b9 00 00       	call   c001a728 <HalDisplayDebugInfo(void*)>
c000ed63:	83 c4 10             	add    esp,0x10
c000ed66:	83 ec 0c             	sub    esp,0xc
c000ed69:	6a 7d                	push   0x7d
c000ed6b:	e8 b8 87 00 00       	call   c0017528 <KeTerminateCurrentThread(int)>
c000ed70:	83 c4 10             	add    esp,0x10
c000ed73:	90                   	nop
c000ed74:	83 c4 0c             	add    esp,0xc
c000ed77:	c3                   	ret    

c000ed78 <KeNonMaskableInterrupt(void*, void*)>:
c000ed78:	83 ec 0c             	sub    esp,0xc
c000ed7b:	e8 36 bd 00 00       	call   c001aab6 <HalReceivedNMI()>
c000ed80:	90                   	nop
c000ed81:	83 c4 0c             	add    esp,0xc
c000ed84:	c3                   	ret    
c000ed85:	8d 76 00             	lea    esi,[esi+0x0]

c000ed88 <KeDoubleFault(void*, void*)>:
c000ed88:	83 ec 0c             	sub    esp,0xc
c000ed8b:	83 ec 0c             	sub    esp,0xc
c000ed8e:	68 b5 8d 02 c0       	push   0xc0028db5
c000ed93:	e8 f8 13 00 00       	call   c0010190 <KePanic(char const*)>
c000ed98:	83 c4 10             	add    esp,0x10
c000ed9b:	90                   	nop
c000ed9c:	83 c4 0c             	add    esp,0xc
c000ed9f:	c3                   	ret    

c000eda0 <GDTEntry::setBase(unsigned int)>:
c000eda0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eda4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eda8:	89 c1                	mov    ecx,eax
c000edaa:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000edae:	c1 e9 10             	shr    ecx,0x10
c000edb1:	c1 e8 18             	shr    eax,0x18
c000edb4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000edb7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edba:	c3                   	ret    
c000edbb:	90                   	nop

c000edbc <GDTEntry::setLimit(unsigned int)>:
c000edbc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edc4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edc7:	66 89 01             	mov    WORD PTR [ecx],ax
c000edca:	83 e2 f0             	and    edx,0xfffffff0
c000edcd:	c1 e8 10             	shr    eax,0x10
c000edd0:	83 e0 0f             	and    eax,0xf
c000edd3:	09 d0                	or     eax,edx
c000edd5:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edd8:	c3                   	ret    
c000edd9:	90                   	nop

c000edda <GDT::GDT()>:
c000edda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edde:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ede8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edee:	90                   	nop
c000edef:	c3                   	ret    

c000edf0 <GDT::addEntry(GDTEntry)>:
c000edf0:	53                   	push   ebx
c000edf1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000edf5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edf9:	8b 02                	mov    eax,DWORD PTR [edx]
c000edfb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edff:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ee03:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ee07:	8d 48 01             	lea    ecx,[eax+0x1]
c000ee0a:	c1 e0 03             	shl    eax,0x3
c000ee0d:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee0f:	5b                   	pop    ebx
c000ee10:	c3                   	ret    
c000ee11:	90                   	nop

c000ee12 <GDT::getNumberOfEntries()>:
c000ee12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee16:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee18:	c3                   	ret    
c000ee19:	90                   	nop

c000ee1a <GDT::flush()>:
c000ee1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee1e:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee20:	83 c0 04             	add    eax,0x4
c000ee23:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee2a:	a3 1a 31 03 c0       	mov    ds:0xc003311a,eax
c000ee2f:	66 89 15 18 31 03 c0 	mov    WORD PTR ds:0xc0033118,dx
c000ee36:	e9 1f 15 ff ff       	jmp    c000035a <loadGDT>
c000ee3b:	90                   	nop

c000ee3c <GDT::setup()>:
c000ee3c:	57                   	push   edi
c000ee3d:	56                   	push   esi
c000ee3e:	53                   	push   ebx
c000ee3f:	83 ec 30             	sub    esp,0x30
c000ee42:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ee46:	6a 00                	push   0x0
c000ee48:	8d 74 24 14          	lea    esi,[esp+0x14]
c000ee4c:	56                   	push   esi
c000ee4d:	e8 4e ff ff ff       	call   c000eda0 <GDTEntry::setBase(unsigned int)>
c000ee52:	6a 00                	push   0x0
c000ee54:	56                   	push   esi
c000ee55:	e8 62 ff ff ff       	call   c000edbc <GDTEntry::setLimit(unsigned int)>
c000ee5a:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ee62:	6a 00                	push   0x0
c000ee64:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ee68:	56                   	push   esi
c000ee69:	e8 32 ff ff ff       	call   c000eda0 <GDTEntry::setBase(unsigned int)>
c000ee6e:	68 ff ff ff 00       	push   0xffffff
c000ee73:	56                   	push   esi
c000ee74:	e8 43 ff ff ff       	call   c000edbc <GDTEntry::setLimit(unsigned int)>
c000ee79:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ee7d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee81:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ee85:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ee89:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee8e:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee93:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee97:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ee9b:	89 f8                	mov    eax,edi
c000ee9d:	89 fa                	mov    edx,edi
c000ee9f:	80 e4 f7             	and    ah,0xf7
c000eea2:	80 ce 60             	or     dh,0x60
c000eea5:	89 c7                	mov    edi,eax
c000eea7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000eeab:	80 cc 60             	or     ah,0x60
c000eeae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000eeb2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eeb6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000eeba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eebe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eec2:	83 c4 20             	add    esp,0x20
c000eec5:	6a 00                	push   0x0
c000eec7:	8d 44 24 24          	lea    eax,[esp+0x24]
c000eecb:	50                   	push   eax
c000eecc:	e8 cf fe ff ff       	call   c000eda0 <GDTEntry::setBase(unsigned int)>
c000eed1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000eed5:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000eed9:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000eedd:	83 e0 3f             	and    eax,0x3f
c000eee0:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000eee4:	6a 00                	push   0x0
c000eee6:	8d 44 24 34          	lea    eax,[esp+0x34]
c000eeea:	50                   	push   eax
c000eeeb:	e8 b0 fe ff ff       	call   c000eda0 <GDTEntry::setBase(unsigned int)>
c000eef0:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000eef4:	83 e0 3f             	and    eax,0x3f
c000eef7:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000eefb:	83 c4 0c             	add    esp,0xc
c000eefe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef06:	53                   	push   ebx
c000ef07:	e8 e4 fe ff ff       	call   c000edf0 <GDT::addEntry(GDTEntry)>
c000ef0c:	83 c4 0c             	add    esp,0xc
c000ef0f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef17:	53                   	push   ebx
c000ef18:	e8 d3 fe ff ff       	call   c000edf0 <GDT::addEntry(GDTEntry)>
c000ef1d:	83 c4 0c             	add    esp,0xc
c000ef20:	57                   	push   edi
c000ef21:	56                   	push   esi
c000ef22:	53                   	push   ebx
c000ef23:	e8 c8 fe ff ff       	call   c000edf0 <GDT::addEntry(GDTEntry)>
c000ef28:	83 c4 0c             	add    esp,0xc
c000ef2b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef2f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef33:	53                   	push   ebx
c000ef34:	e8 b7 fe ff ff       	call   c000edf0 <GDT::addEntry(GDTEntry)>
c000ef39:	83 c4 0c             	add    esp,0xc
c000ef3c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ef40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ef44:	53                   	push   ebx
c000ef45:	e8 a6 fe ff ff       	call   c000edf0 <GDT::addEntry(GDTEntry)>
c000ef4a:	83 c4 0c             	add    esp,0xc
c000ef4d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef51:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef55:	53                   	push   ebx
c000ef56:	e8 95 fe ff ff       	call   c000edf0 <GDT::addEntry(GDTEntry)>
c000ef5b:	83 c4 0c             	add    esp,0xc
c000ef5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef62:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef66:	53                   	push   ebx
c000ef67:	e8 84 fe ff ff       	call   c000edf0 <GDT::addEntry(GDTEntry)>
c000ef6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef6f:	e8 a6 fe ff ff       	call   c000ee1a <GDT::flush()>
c000ef74:	83 c4 40             	add    esp,0x40
c000ef77:	5b                   	pop    ebx
c000ef78:	5e                   	pop    esi
c000ef79:	5f                   	pop    edi
c000ef7a:	c3                   	ret    

c000ef7b <idleFunction(void*)>:
c000ef7b:	83 ec 0c             	sub    esp,0xc
c000ef7e:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c000ef85:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000ef8c:	75 01                	jne    c000ef8f <idleFunction(void*)+0x14>
c000ef8e:	fb                   	sti    
c000ef8f:	e8 bd bb 00 00       	call   c001ab51 <HalSystemIdle()>
c000ef94:	e8 41 7f 01 00       	call   c0026eda <idleCommon()>
c000ef99:	eb f4                	jmp    c000ef8f <idleFunction(void*)+0x14>
c000ef9b:	90                   	nop

c000ef9c <IDTEntry::IDTEntry(bool)>:
c000ef9c:	53                   	push   ebx
c000ef9d:	83 ec 04             	sub    esp,0x4
c000efa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efa4:	88 04 24             	mov    BYTE PTR [esp],al
c000efa7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efab:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efb5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efbd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efc0:	83 e2 f0             	and    edx,0xfffffff0
c000efc3:	83 ca 0e             	or     edx,0xe
c000efc6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efcd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efd0:	83 e2 ef             	and    edx,0xffffffef
c000efd3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000efda:	85 c0                	test   eax,eax
c000efdc:	74 06                	je     c000efe4 <IDTEntry::IDTEntry(bool)+0x48>
c000efde:	b2 03                	mov    dl,0x3
c000efe0:	eb 06                	jmp    c000efe8 <IDTEntry::IDTEntry(bool)+0x4c>
c000efe2:	66 90                	xchg   ax,ax
c000efe4:	b2 00                	mov    dl,0x0
c000efe6:	66 90                	xchg   ax,ax
c000efe8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efec:	83 e2 03             	and    edx,0x3
c000efef:	89 d3                	mov    ebx,edx
c000eff1:	c1 e3 05             	shl    ebx,0x5
c000eff4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eff7:	83 e2 9f             	and    edx,0xffffff9f
c000effa:	88 d1                	mov    cl,dl
c000effc:	88 da                	mov    dl,bl
c000effe:	09 ca                	or     edx,ecx
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f007:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f00a:	83 ca 80             	or     edx,0xffffff80
c000f00d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f010:	90                   	nop
c000f011:	83 c4 04             	add    esp,0x4
c000f014:	5b                   	pop    ebx
c000f015:	c3                   	ret    

c000f016 <IDTEntry::setOffset(unsigned int)>:
c000f016:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f01a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f01e:	66 89 02             	mov    WORD PTR [edx],ax
c000f021:	c1 e8 10             	shr    eax,0x10
c000f024:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f028:	c3                   	ret    
c000f029:	90                   	nop
c000f02a:	66 90                	xchg   ax,ax

c000f02c <IDT::IDT()>:
c000f02c:	90                   	nop
c000f02d:	c3                   	ret    

c000f02e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f032:	83 c0 30             	add    eax,0x30
c000f035:	c3                   	ret    

c000f036 <IDT::addEntry(IDTEntry, int)>:
c000f036:	53                   	push   ebx
c000f037:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f03b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f03f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f043:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f047:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f04a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f04e:	5b                   	pop    ebx
c000f04f:	c3                   	ret    

c000f050 <IDT::addEntry(int, void (*)(), bool)>:
c000f050:	53                   	push   ebx
c000f051:	83 ec 10             	sub    esp,0x10
c000f054:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f059:	50                   	push   eax
c000f05a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f05e:	53                   	push   ebx
c000f05f:	e8 38 ff ff ff       	call   c000ef9c <IDTEntry::IDTEntry(bool)>
c000f064:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f068:	53                   	push   ebx
c000f069:	e8 a8 ff ff ff       	call   c000f016 <IDTEntry::setOffset(unsigned int)>
c000f06e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f072:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f076:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f07a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f07e:	e8 b3 ff ff ff       	call   c000f036 <IDT::addEntry(IDTEntry, int)>
c000f083:	83 c4 30             	add    esp,0x30
c000f086:	5b                   	pop    ebx
c000f087:	c3                   	ret    

c000f088 <IDT::flush()>:
c000f088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f08c:	66 c7 05 20 31 03 c0 ff 07 	mov    WORD PTR ds:0xc0033120,0x7ff
c000f095:	a3 22 31 03 c0       	mov    ds:0xc0033122,eax
c000f09a:	0f 01 1d 20 31 03 c0 	lidtd  ds:0xc0033120
c000f0a1:	c3                   	ret    

c000f0a2 <IDT::setup()>:
c000f0a2:	57                   	push   edi
c000f0a3:	56                   	push   esi
c000f0a4:	53                   	push   ebx
c000f0a5:	83 ec 10             	sub    esp,0x10
c000f0a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f0ac:	6a 00                	push   0x0
c000f0ae:	68 40 1d 02 c0       	push   0xc0021d40
c000f0b3:	6a 00                	push   0x0
c000f0b5:	53                   	push   ebx
c000f0b6:	e8 95 ff ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f0bb:	6a 00                	push   0x0
c000f0bd:	68 50 1d 02 c0       	push   0xc0021d50
c000f0c2:	6a 01                	push   0x1
c000f0c4:	53                   	push   ebx
c000f0c5:	e8 86 ff ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f0ca:	83 c4 20             	add    esp,0x20
c000f0cd:	6a 00                	push   0x0
c000f0cf:	68 5a 1d 02 c0       	push   0xc0021d5a
c000f0d4:	6a 02                	push   0x2
c000f0d6:	53                   	push   ebx
c000f0d7:	e8 74 ff ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f0dc:	6a 00                	push   0x0
c000f0de:	68 64 1d 02 c0       	push   0xc0021d64
c000f0e3:	6a 03                	push   0x3
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 65 ff ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f0eb:	83 c4 20             	add    esp,0x20
c000f0ee:	6a 00                	push   0x0
c000f0f0:	68 6e 1d 02 c0       	push   0xc0021d6e
c000f0f5:	6a 04                	push   0x4
c000f0f7:	53                   	push   ebx
c000f0f8:	e8 53 ff ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f0fd:	6a 00                	push   0x0
c000f0ff:	68 78 1d 02 c0       	push   0xc0021d78
c000f104:	6a 05                	push   0x5
c000f106:	53                   	push   ebx
c000f107:	e8 44 ff ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f10c:	83 c4 20             	add    esp,0x20
c000f10f:	6a 00                	push   0x0
c000f111:	68 82 1d 02 c0       	push   0xc0021d82
c000f116:	6a 06                	push   0x6
c000f118:	53                   	push   ebx
c000f119:	e8 32 ff ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f11e:	6a 00                	push   0x0
c000f120:	68 8c 1d 02 c0       	push   0xc0021d8c
c000f125:	6a 07                	push   0x7
c000f127:	53                   	push   ebx
c000f128:	e8 23 ff ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f12d:	83 c4 20             	add    esp,0x20
c000f130:	6a 00                	push   0x0
c000f132:	68 96 1d 02 c0       	push   0xc0021d96
c000f137:	6a 08                	push   0x8
c000f139:	53                   	push   ebx
c000f13a:	e8 11 ff ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f13f:	6a 00                	push   0x0
c000f141:	68 9e 1d 02 c0       	push   0xc0021d9e
c000f146:	6a 09                	push   0x9
c000f148:	53                   	push   ebx
c000f149:	e8 02 ff ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f14e:	83 c4 20             	add    esp,0x20
c000f151:	6a 00                	push   0x0
c000f153:	68 a8 1d 02 c0       	push   0xc0021da8
c000f158:	6a 0a                	push   0xa
c000f15a:	53                   	push   ebx
c000f15b:	e8 f0 fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f160:	6a 00                	push   0x0
c000f162:	68 b0 1d 02 c0       	push   0xc0021db0
c000f167:	6a 0b                	push   0xb
c000f169:	53                   	push   ebx
c000f16a:	e8 e1 fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f16f:	83 c4 20             	add    esp,0x20
c000f172:	6a 00                	push   0x0
c000f174:	68 b8 1d 02 c0       	push   0xc0021db8
c000f179:	6a 0c                	push   0xc
c000f17b:	53                   	push   ebx
c000f17c:	e8 cf fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f181:	6a 00                	push   0x0
c000f183:	68 c0 1d 02 c0       	push   0xc0021dc0
c000f188:	6a 0d                	push   0xd
c000f18a:	53                   	push   ebx
c000f18b:	e8 c0 fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f190:	83 c4 20             	add    esp,0x20
c000f193:	6a 00                	push   0x0
c000f195:	68 da 1d 02 c0       	push   0xc0021dda
c000f19a:	6a 0e                	push   0xe
c000f19c:	53                   	push   ebx
c000f19d:	e8 ae fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f1a2:	6a 00                	push   0x0
c000f1a4:	68 e2 1d 02 c0       	push   0xc0021de2
c000f1a9:	6a 0f                	push   0xf
c000f1ab:	53                   	push   ebx
c000f1ac:	e8 9f fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f1b1:	83 c4 20             	add    esp,0x20
c000f1b4:	6a 00                	push   0x0
c000f1b6:	68 ec 1d 02 c0       	push   0xc0021dec
c000f1bb:	6a 10                	push   0x10
c000f1bd:	53                   	push   ebx
c000f1be:	e8 8d fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f1c3:	6a 00                	push   0x0
c000f1c5:	68 f6 1d 02 c0       	push   0xc0021df6
c000f1ca:	6a 11                	push   0x11
c000f1cc:	53                   	push   ebx
c000f1cd:	e8 7e fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f1d2:	83 c4 20             	add    esp,0x20
c000f1d5:	6a 00                	push   0x0
c000f1d7:	68 00 1e 02 c0       	push   0xc0021e00
c000f1dc:	6a 12                	push   0x12
c000f1de:	53                   	push   ebx
c000f1df:	e8 6c fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f1e4:	6a 01                	push   0x1
c000f1e6:	68 9a 1e 02 c0       	push   0xc0021e9a
c000f1eb:	6a 60                	push   0x60
c000f1ed:	53                   	push   ebx
c000f1ee:	e8 5d fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f1f3:	83 c4 20             	add    esp,0x20
c000f1f6:	6a 00                	push   0x0
c000f1f8:	68 a1 1e 02 c0       	push   0xc0021ea1
c000f1fd:	6a 20                	push   0x20
c000f1ff:	53                   	push   ebx
c000f200:	e8 4b fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f205:	6a 00                	push   0x0
c000f207:	68 8c 1e 02 c0       	push   0xc0021e8c
c000f20c:	6a 21                	push   0x21
c000f20e:	53                   	push   ebx
c000f20f:	e8 3c fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f214:	83 c4 20             	add    esp,0x20
c000f217:	6a 00                	push   0x0
c000f219:	68 93 1e 02 c0       	push   0xc0021e93
c000f21e:	6a 22                	push   0x22
c000f220:	53                   	push   ebx
c000f221:	e8 2a fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f226:	6a 00                	push   0x0
c000f228:	68 0a 1e 02 c0       	push   0xc0021e0a
c000f22d:	6a 23                	push   0x23
c000f22f:	53                   	push   ebx
c000f230:	e8 1b fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f235:	83 c4 20             	add    esp,0x20
c000f238:	6a 00                	push   0x0
c000f23a:	68 14 1e 02 c0       	push   0xc0021e14
c000f23f:	6a 24                	push   0x24
c000f241:	53                   	push   ebx
c000f242:	e8 09 fe ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f247:	6a 00                	push   0x0
c000f249:	68 1e 1e 02 c0       	push   0xc0021e1e
c000f24e:	6a 25                	push   0x25
c000f250:	53                   	push   ebx
c000f251:	e8 fa fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f256:	83 c4 20             	add    esp,0x20
c000f259:	6a 00                	push   0x0
c000f25b:	68 28 1e 02 c0       	push   0xc0021e28
c000f260:	6a 26                	push   0x26
c000f262:	53                   	push   ebx
c000f263:	e8 e8 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f268:	6a 00                	push   0x0
c000f26a:	68 32 1e 02 c0       	push   0xc0021e32
c000f26f:	6a 27                	push   0x27
c000f271:	53                   	push   ebx
c000f272:	e8 d9 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f277:	83 c4 20             	add    esp,0x20
c000f27a:	6a 00                	push   0x0
c000f27c:	68 3c 1e 02 c0       	push   0xc0021e3c
c000f281:	6a 28                	push   0x28
c000f283:	53                   	push   ebx
c000f284:	e8 c7 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f289:	6a 00                	push   0x0
c000f28b:	68 46 1e 02 c0       	push   0xc0021e46
c000f290:	6a 29                	push   0x29
c000f292:	53                   	push   ebx
c000f293:	e8 b8 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f298:	83 c4 20             	add    esp,0x20
c000f29b:	6a 00                	push   0x0
c000f29d:	68 50 1e 02 c0       	push   0xc0021e50
c000f2a2:	6a 2a                	push   0x2a
c000f2a4:	53                   	push   ebx
c000f2a5:	e8 a6 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f2aa:	6a 00                	push   0x0
c000f2ac:	68 5a 1e 02 c0       	push   0xc0021e5a
c000f2b1:	6a 2b                	push   0x2b
c000f2b3:	53                   	push   ebx
c000f2b4:	e8 97 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f2b9:	83 c4 20             	add    esp,0x20
c000f2bc:	6a 00                	push   0x0
c000f2be:	68 64 1e 02 c0       	push   0xc0021e64
c000f2c3:	6a 2c                	push   0x2c
c000f2c5:	53                   	push   ebx
c000f2c6:	e8 85 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f2cb:	6a 00                	push   0x0
c000f2cd:	68 6e 1e 02 c0       	push   0xc0021e6e
c000f2d2:	6a 2d                	push   0x2d
c000f2d4:	53                   	push   ebx
c000f2d5:	e8 76 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f2da:	83 c4 20             	add    esp,0x20
c000f2dd:	6a 00                	push   0x0
c000f2df:	68 78 1e 02 c0       	push   0xc0021e78
c000f2e4:	6a 2e                	push   0x2e
c000f2e6:	53                   	push   ebx
c000f2e7:	e8 64 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f2ec:	6a 00                	push   0x0
c000f2ee:	68 82 1e 02 c0       	push   0xc0021e82
c000f2f3:	6a 2f                	push   0x2f
c000f2f5:	53                   	push   ebx
c000f2f6:	e8 55 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f2fb:	83 c4 20             	add    esp,0x20
c000f2fe:	6a 00                	push   0x0
c000f300:	68 a8 1f 02 c0       	push   0xc0021fa8
c000f305:	6a 30                	push   0x30
c000f307:	53                   	push   ebx
c000f308:	e8 43 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f30d:	6a 00                	push   0x0
c000f30f:	68 b2 1f 02 c0       	push   0xc0021fb2
c000f314:	6a 31                	push   0x31
c000f316:	53                   	push   ebx
c000f317:	e8 34 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f31c:	83 c4 20             	add    esp,0x20
c000f31f:	6a 00                	push   0x0
c000f321:	68 bc 1f 02 c0       	push   0xc0021fbc
c000f326:	6a 32                	push   0x32
c000f328:	53                   	push   ebx
c000f329:	e8 22 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f32e:	6a 00                	push   0x0
c000f330:	68 c6 1f 02 c0       	push   0xc0021fc6
c000f335:	6a 33                	push   0x33
c000f337:	53                   	push   ebx
c000f338:	e8 13 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f33d:	83 c4 20             	add    esp,0x20
c000f340:	6a 00                	push   0x0
c000f342:	68 d0 1f 02 c0       	push   0xc0021fd0
c000f347:	6a 34                	push   0x34
c000f349:	53                   	push   ebx
c000f34a:	e8 01 fd ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f34f:	6a 00                	push   0x0
c000f351:	68 da 1f 02 c0       	push   0xc0021fda
c000f356:	6a 35                	push   0x35
c000f358:	53                   	push   ebx
c000f359:	e8 f2 fc ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f35e:	83 c4 20             	add    esp,0x20
c000f361:	6a 00                	push   0x0
c000f363:	68 e4 1f 02 c0       	push   0xc0021fe4
c000f368:	6a 36                	push   0x36
c000f36a:	53                   	push   ebx
c000f36b:	e8 e0 fc ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f370:	6a 00                	push   0x0
c000f372:	68 ee 1f 02 c0       	push   0xc0021fee
c000f377:	6a 37                	push   0x37
c000f379:	53                   	push   ebx
c000f37a:	e8 d1 fc ff ff       	call   c000f050 <IDT::addEntry(int, void (*)(), bool)>
c000f37f:	83 c4 1c             	add    esp,0x1c
c000f382:	6a 03                	push   0x3
c000f384:	6a 02                	push   0x2
c000f386:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000f38c:	e8 7d 4b 00 00       	call   c0013f0e <VAS::allocatePages(int, int)>
c000f391:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f398:	89 c6                	mov    esi,eax
c000f39a:	e8 9c 09 00 00       	call   c000fd3b <malloc>
c000f39f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f3a5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3a8:	89 c7                	mov    edi,eax
c000f3aa:	e8 29 3c 00 00       	call   c0012fd8 <TSS::TSS()>
c000f3af:	83 c4 0c             	add    esp,0xc
c000f3b2:	68 96 1d 02 c0       	push   0xc0021d96
c000f3b7:	56                   	push   esi
c000f3b8:	57                   	push   edi
c000f3b9:	e8 5e 3c 00 00       	call   c001301c <TSS::setup(unsigned long, unsigned long)>
c000f3be:	89 c6                	mov    esi,eax
c000f3c0:	58                   	pop    eax
c000f3c1:	5a                   	pop    edx
c000f3c2:	6a 00                	push   0x0
c000f3c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3c8:	50                   	push   eax
c000f3c9:	e8 ce fb ff ff       	call   c000ef9c <IDTEntry::IDTEntry(bool)>
c000f3ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3d2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3d7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3de:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3e8:	80 ce 05             	or     dh,0x5
c000f3eb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3f6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3fc:	e8 87 fc ff ff       	call   c000f088 <IDT::flush()>
c000f401:	83 c4 20             	add    esp,0x20
c000f404:	5b                   	pop    ebx
c000f405:	5e                   	pop    esi
c000f406:	5f                   	pop    edi
c000f407:	c3                   	ret    

c000f408 <CPU::current()>:
c000f408:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c000f40d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f413:	c3                   	ret    

c000f414 <operator new(unsigned long)>:
c000f414:	e9 22 09 00 00       	jmp    c000fd3b <malloc>

c000f419 <operator delete(void*)>:
c000f419:	e9 3d 09 00 00       	jmp    c000fd5b <rfree>

c000f41e <disableIRQs()>:
c000f41e:	fa                   	cli    
c000f41f:	c3                   	ret    

c000f420 <enableIRQs()>:
c000f420:	fb                   	sti    
c000f421:	c3                   	ret    

c000f422 <lockScheduler()>:
c000f422:	fa                   	cli    
c000f423:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c000f429:	c3                   	ret    

c000f42a <unlockScheduler()>:
c000f42a:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c000f431:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000f438:	75 01                	jne    c000f43b <unlockScheduler()+0x11>
c000f43a:	fb                   	sti    
c000f43b:	c3                   	ret    

c000f43c <lockStuff()>:
c000f43c:	fa                   	cli    
c000f43d:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c000f443:	ff 05 2c 33 03 c0    	inc    DWORD PTR ds:0xc003332c
c000f449:	c3                   	ret    

c000f44a <unlockStuff()>:
c000f44a:	83 ec 0c             	sub    esp,0xc
c000f44d:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c000f452:	48                   	dec    eax
c000f453:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c000f458:	75 18                	jne    c000f472 <unlockStuff()+0x28>
c000f45a:	83 3d 28 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033328,0x0
c000f461:	74 0f                	je     c000f472 <unlockStuff()+0x28>
c000f463:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c000f46d:	e8 b6 78 00 00       	call   c0016d28 <schedule()>
c000f472:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c000f479:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000f480:	75 01                	jne    c000f483 <unlockStuff()+0x39>
c000f482:	fb                   	sti    
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <Virt::getAKernelVAS()>:
c000f487:	a1 90 32 03 c0       	mov    eax,ds:0xc0033290
c000f48c:	c3                   	ret    

c000f48d <__not_memcpy>:
c000f48d:	57                   	push   edi
c000f48e:	56                   	push   esi
c000f48f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f493:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f497:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f49b:	89 c7                	mov    edi,eax
c000f49d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f49f:	5e                   	pop    esi
c000f4a0:	5f                   	pop    edi
c000f4a1:	c3                   	ret    

c000f4a2 <KeFormatDate(char*, int, int, int, int, bool)>:
c000f4a2:	55                   	push   ebp
c000f4a3:	b9 0a 00 00 00       	mov    ecx,0xa
c000f4a8:	57                   	push   edi
c000f4a9:	56                   	push   esi
c000f4aa:	53                   	push   ebx
c000f4ab:	bb e8 03 00 00       	mov    ebx,0x3e8
c000f4b0:	81 ec ac 00 00 00    	sub    esp,0xac
c000f4b6:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f4bd:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f4c2:	99                   	cdq    
c000f4c3:	f7 f9                	idiv   ecx
c000f4c5:	89 d5                	mov    ebp,edx
c000f4c7:	99                   	cdq    
c000f4c8:	f7 f9                	idiv   ecx
c000f4ca:	8d 42 30             	lea    eax,[edx+0x30]
c000f4cd:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f4d1:	8d 45 30             	lea    eax,[ebp+0x30]
c000f4d4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f4d8:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f4df:	99                   	cdq    
c000f4e0:	f7 fb                	idiv   ebx
c000f4e2:	bb 64 00 00 00       	mov    ebx,0x64
c000f4e7:	99                   	cdq    
c000f4e8:	f7 f9                	idiv   ecx
c000f4ea:	8d 42 30             	lea    eax,[edx+0x30]
c000f4ed:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f4f1:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f4f8:	99                   	cdq    
c000f4f9:	f7 fb                	idiv   ebx
c000f4fb:	31 db                	xor    ebx,ebx
c000f4fd:	99                   	cdq    
c000f4fe:	f7 f9                	idiv   ecx
c000f500:	8d 42 30             	lea    eax,[edx+0x30]
c000f503:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f507:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f50f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f513:	0f be 8b 44 31 03 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffccebc]
c000f51a:	83 f9 59             	cmp    ecx,0x59
c000f51d:	74 1c                	je     c000f53b <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f51f:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f526:	83 f9 4d             	cmp    ecx,0x4d
c000f529:	0f 84 e3 00 00 00    	je     c000f612 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f52f:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f536:	e9 d7 00 00 00       	jmp    c000f612 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f53b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f540:	74 27                	je     c000f569 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f542:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f546:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f54b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f54f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f553:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f557:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f55b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f55f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f563:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f567:	eb 15                	jmp    c000f57e <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f569:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f56d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f571:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f575:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f579:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f57e:	50                   	push   eax
c000f57f:	50                   	push   eax
c000f580:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f584:	57                   	push   edi
c000f585:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f589:	56                   	push   esi
c000f58a:	e8 b1 12 ff ff       	call   c0000840 <strcat>
c000f58f:	83 c4 10             	add    esp,0x10
c000f592:	83 fb 02             	cmp    ebx,0x2
c000f595:	74 1a                	je     c000f5b1 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f597:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f59c:	a1 48 31 03 c0       	mov    eax,ds:0xc0033148
c000f5a1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f5a5:	55                   	push   ebp
c000f5a6:	55                   	push   ebp
c000f5a7:	57                   	push   edi
c000f5a8:	56                   	push   esi
c000f5a9:	e8 92 12 ff ff       	call   c0000840 <strcat>
c000f5ae:	83 c4 10             	add    esp,0x10
c000f5b1:	43                   	inc    ebx
c000f5b2:	83 fb 03             	cmp    ebx,0x3
c000f5b5:	0f 85 58 ff ff ff    	jne    c000f513 <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f5bb:	51                   	push   ecx
c000f5bc:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f5c3:	6a 00                	push   0x0
c000f5c5:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f5cc:	e8 1f 0f ff ff       	call   c00004f0 <memset>
c000f5d1:	89 34 24             	mov    DWORD PTR [esp],esi
c000f5d4:	e8 97 0f ff ff       	call   c0000570 <strlen>
c000f5d9:	83 c4 10             	add    esp,0x10
c000f5dc:	40                   	inc    eax
c000f5dd:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f5e4:	72 17                	jb     c000f5fd <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f5e6:	52                   	push   edx
c000f5e7:	52                   	push   edx
c000f5e8:	56                   	push   esi
c000f5e9:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f5f0:	e8 4b 10 ff ff       	call   c0000640 <strcpy>
c000f5f5:	83 c4 10             	add    esp,0x10
c000f5f8:	e9 8a 00 00 00       	jmp    c000f687 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f5fd:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f604:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f60b:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f610:	eb 75                	jmp    c000f687 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f612:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f616:	89 ef                	mov    edi,ebp
c000f618:	50                   	push   eax
c000f619:	c1 ff 1f             	sar    edi,0x1f
c000f61c:	50                   	push   eax
c000f61d:	57                   	push   edi
c000f61e:	55                   	push   ebp
c000f61f:	e8 70 04 00 00       	call   c000fa94 <KeGetDigitsInNumber(long long)>
c000f624:	83 c4 10             	add    esp,0x10
c000f627:	48                   	dec    eax
c000f628:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f62c:	75 1c                	jne    c000f64a <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f62e:	83 f9 44             	cmp    ecx,0x44
c000f631:	75 09                	jne    c000f63c <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f633:	80 3d 60 31 03 c0 00 	cmp    BYTE PTR ds:0xc0033160,0x0
c000f63a:	eb 0c                	jmp    c000f648 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f63c:	83 f9 4d             	cmp    ecx,0x4d
c000f63f:	75 2b                	jne    c000f66c <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f641:	80 3d 61 31 03 c0 00 	cmp    BYTE PTR ds:0xc0033161,0x0
c000f648:	74 22                	je     c000f66c <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f64a:	89 e8                	mov    eax,ebp
c000f64c:	b9 0a 00 00 00       	mov    ecx,0xa
c000f651:	99                   	cdq    
c000f652:	f7 f9                	idiv   ecx
c000f654:	89 d5                	mov    ebp,edx
c000f656:	99                   	cdq    
c000f657:	f7 f9                	idiv   ecx
c000f659:	83 c2 30             	add    edx,0x30
c000f65c:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f660:	8d 55 30             	lea    edx,[ebp+0x30]
c000f663:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f667:	e9 0d ff ff ff       	jmp    c000f579 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f66c:	89 e8                	mov    eax,ebp
c000f66e:	b9 0a 00 00 00       	mov    ecx,0xa
c000f673:	99                   	cdq    
c000f674:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f679:	f7 f9                	idiv   ecx
c000f67b:	83 c2 30             	add    edx,0x30
c000f67e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f682:	e9 f7 fe ff ff       	jmp    c000f57e <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f687:	81 c4 ac 00 00 00    	add    esp,0xac
c000f68d:	5b                   	pop    ebx
c000f68e:	5e                   	pop    esi
c000f68f:	5f                   	pop    edi
c000f690:	5d                   	pop    ebp
c000f691:	c3                   	ret    

c000f692 <KeFormatShortDate(char*, int, int, int, int)>:
c000f692:	83 ec 14             	sub    esp,0x14
c000f695:	6a 00                	push   0x0
c000f697:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f69b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f69f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6ab:	e8 f2 fd ff ff       	call   c000f4a2 <KeFormatDate(char*, int, int, int, int, bool)>
c000f6b0:	83 c4 2c             	add    esp,0x2c
c000f6b3:	c3                   	ret    

c000f6b4 <KeFormatLongDate(char*, int, int, int, int)>:
c000f6b4:	83 ec 14             	sub    esp,0x14
c000f6b7:	6a 01                	push   0x1
c000f6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6cd:	e8 d0 fd ff ff       	call   c000f4a2 <KeFormatDate(char*, int, int, int, int, bool)>
c000f6d2:	83 c4 2c             	add    esp,0x2c
c000f6d5:	c3                   	ret    

c000f6d6 <KeSetLocale(klocale_t)>:
c000f6d6:	57                   	push   edi
c000f6d7:	b9 09 00 00 00       	mov    ecx,0x9
c000f6dc:	56                   	push   esi
c000f6dd:	bf 40 31 03 c0       	mov    edi,0xc0033140
c000f6e2:	fc                   	cld    
c000f6e3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f6e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f6e9:	5e                   	pop    esi
c000f6ea:	5f                   	pop    edi
c000f6eb:	c3                   	ret    

c000f6ec <KeInitialiseLocale()>:
c000f6ec:	57                   	push   edi
c000f6ed:	56                   	push   esi
c000f6ee:	83 ec 3c             	sub    esp,0x3c
c000f6f1:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f6f9:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f701:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f709:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f711:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f718:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f720:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f728:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f72f:	68 ec 8d 02 c0       	push   0xc0028dec
c000f734:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f738:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f73c:	50                   	push   eax
c000f73d:	e8 fe 0e ff ff       	call   c0000640 <strcpy>
c000f742:	83 ec 20             	sub    esp,0x20
c000f745:	b9 09 00 00 00       	mov    ecx,0x9
c000f74a:	fc                   	cld    
c000f74b:	89 e7                	mov    edi,esp
c000f74d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f74f:	e8 82 ff ff ff       	call   c000f6d6 <KeSetLocale(klocale_t)>
c000f754:	83 c4 64             	add    esp,0x64
c000f757:	5e                   	pop    esi
c000f758:	5f                   	pop    edi
c000f759:	c3                   	ret    

c000f75a <KeFormatCurrency(char*, int, long long, long long)>:
c000f75a:	c3                   	ret    

c000f75b <KeFormatCurrency(char*, int, double)>:
c000f75b:	c3                   	ret    

c000f75c <KeFormatNumber(char*, long long, long long)>:
c000f75c:	c3                   	ret    

c000f75d <KeFormatNumber(char*, double)>:
c000f75d:	c3                   	ret    
c000f75e:	66 90                	xchg   ax,ax

c000f760 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f760:	55                   	push   ebp
c000f761:	57                   	push   edi
c000f762:	56                   	push   esi
c000f763:	53                   	push   ebx
c000f764:	83 ec 5c             	sub    esp,0x5c
c000f767:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f76b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f76f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f773:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f777:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f77b:	bb cf 7b 02 c0       	mov    ebx,0xc0027bcf
c000f780:	bd 11 00 00 00       	mov    ebp,0x11
c000f785:	89 d0                	mov    eax,edx
c000f787:	83 e0 01             	and    eax,0x1
c000f78a:	74 10                	je     c000f79c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f78c:	8a 03                	mov    al,BYTE PTR [ebx]
c000f78e:	88 02                	mov    BYTE PTR [edx],al
c000f790:	8d 52 01             	lea    edx,[edx+0x1]
c000f793:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f796:	83 ed 01             	sub    ebp,0x1
c000f799:	8d 76 00             	lea    esi,[esi+0x0]
c000f79c:	89 d0                	mov    eax,edx
c000f79e:	83 e0 02             	and    eax,0x2
c000f7a1:	74 11                	je     c000f7b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f7a3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f7a6:	66 89 02             	mov    WORD PTR [edx],ax
c000f7a9:	8d 52 02             	lea    edx,[edx+0x2]
c000f7ac:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f7af:	83 ed 02             	sub    ebp,0x2
c000f7b2:	66 90                	xchg   ax,ax
c000f7b4:	89 e8                	mov    eax,ebp
c000f7b6:	c1 e8 02             	shr    eax,0x2
c000f7b9:	fc                   	cld    
c000f7ba:	89 d7                	mov    edi,edx
c000f7bc:	89 de                	mov    esi,ebx
c000f7be:	89 c1                	mov    ecx,eax
c000f7c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f7c2:	89 f3                	mov    ebx,esi
c000f7c4:	89 fa                	mov    edx,edi
c000f7c6:	b9 00 00 00 00       	mov    ecx,0x0
c000f7cb:	89 e8                	mov    eax,ebp
c000f7cd:	83 e0 02             	and    eax,0x2
c000f7d0:	74 0e                	je     c000f7e0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f7d2:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f7d6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f7da:	8d 41 02             	lea    eax,[ecx+0x2]
c000f7dd:	89 c1                	mov    ecx,eax
c000f7df:	90                   	nop
c000f7e0:	89 e8                	mov    eax,ebp
c000f7e2:	83 e0 01             	and    eax,0x1
c000f7e5:	74 09                	je     c000f7f0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f7e7:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f7ea:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f7f0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f7f4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f7f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f7fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f800:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f804:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f808:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f80d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f811:	89 c2                	mov    edx,eax
c000f813:	c1 fa 1f             	sar    edx,0x1f
c000f816:	52                   	push   edx
c000f817:	50                   	push   eax
c000f818:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f81c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f820:	e8 6f 2b 01 00       	call   c0022394 <__udivdi3>
c000f825:	83 c4 10             	add    esp,0x10
c000f828:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f82c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f830:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f834:	80 f4 00             	xor    ah,0x0
c000f837:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f83b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f83f:	80 f4 00             	xor    ah,0x0
c000f842:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f846:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f84a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f84e:	89 f8                	mov    eax,edi
c000f850:	09 f0                	or     eax,esi
c000f852:	74 04                	je     c000f858 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f854:	eb b2                	jmp    c000f808 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f856:	66 90                	xchg   ax,ax
c000f858:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f85c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f85f:	90                   	nop
c000f860:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f864:	89 c1                	mov    ecx,eax
c000f866:	89 c3                	mov    ebx,eax
c000f868:	c1 fb 1f             	sar    ebx,0x1f
c000f86b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f86f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f873:	53                   	push   ebx
c000f874:	51                   	push   ecx
c000f875:	52                   	push   edx
c000f876:	50                   	push   eax
c000f877:	e8 18 2c 01 00       	call   c0022494 <__umoddi3>
c000f87c:	83 c4 10             	add    esp,0x10
c000f87f:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f884:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f888:	01 c8                	add    eax,ecx
c000f88a:	8a 10                	mov    dl,BYTE PTR [eax]
c000f88c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f890:	88 10                	mov    BYTE PTR [eax],dl
c000f892:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f896:	89 c2                	mov    edx,eax
c000f898:	c1 fa 1f             	sar    edx,0x1f
c000f89b:	52                   	push   edx
c000f89c:	50                   	push   eax
c000f89d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f8a5:	e8 ea 2a 01 00       	call   c0022394 <__udivdi3>
c000f8aa:	83 c4 10             	add    esp,0x10
c000f8ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f8b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f8b9:	80 f4 00             	xor    ah,0x0
c000f8bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8c4:	80 f4 00             	xor    ah,0x0
c000f8c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f8cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8d3:	89 f8                	mov    eax,edi
c000f8d5:	09 f0                	or     eax,esi
c000f8d7:	74 03                	je     c000f8dc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f8d9:	eb 85                	jmp    c000f860 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f8db:	90                   	nop
c000f8dc:	90                   	nop
c000f8dd:	83 c4 5c             	add    esp,0x5c
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    
c000f8e5:	8d 76 00             	lea    esi,[esi+0x0]

c000f8e8 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	57                   	push   edi
c000f8ea:	56                   	push   esi
c000f8eb:	53                   	push   ebx
c000f8ec:	83 ec 5c             	sub    esp,0x5c
c000f8ef:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f8f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8f7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f8fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f8ff:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f903:	bb cf 7b 02 c0       	mov    ebx,0xc0027bcf
c000f908:	bd 11 00 00 00       	mov    ebp,0x11
c000f90d:	89 d0                	mov    eax,edx
c000f90f:	83 e0 01             	and    eax,0x1
c000f912:	74 10                	je     c000f924 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f914:	8a 03                	mov    al,BYTE PTR [ebx]
c000f916:	88 02                	mov    BYTE PTR [edx],al
c000f918:	8d 52 01             	lea    edx,[edx+0x1]
c000f91b:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f91e:	83 ed 01             	sub    ebp,0x1
c000f921:	8d 76 00             	lea    esi,[esi+0x0]
c000f924:	89 d0                	mov    eax,edx
c000f926:	83 e0 02             	and    eax,0x2
c000f929:	74 11                	je     c000f93c <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f92b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f92e:	66 89 02             	mov    WORD PTR [edx],ax
c000f931:	8d 52 02             	lea    edx,[edx+0x2]
c000f934:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f937:	83 ed 02             	sub    ebp,0x2
c000f93a:	66 90                	xchg   ax,ax
c000f93c:	89 e8                	mov    eax,ebp
c000f93e:	c1 e8 02             	shr    eax,0x2
c000f941:	fc                   	cld    
c000f942:	89 d7                	mov    edi,edx
c000f944:	89 de                	mov    esi,ebx
c000f946:	89 c1                	mov    ecx,eax
c000f948:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f94a:	89 f3                	mov    ebx,esi
c000f94c:	89 fa                	mov    edx,edi
c000f94e:	b9 00 00 00 00       	mov    ecx,0x0
c000f953:	89 e8                	mov    eax,ebp
c000f955:	83 e0 02             	and    eax,0x2
c000f958:	74 0e                	je     c000f968 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f95a:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f95e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f962:	8d 41 02             	lea    eax,[ecx+0x2]
c000f965:	89 c1                	mov    ecx,eax
c000f967:	90                   	nop
c000f968:	89 e8                	mov    eax,ebp
c000f96a:	83 e0 01             	and    eax,0x1
c000f96d:	74 09                	je     c000f978 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f96f:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f972:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f975:	8d 76 00             	lea    esi,[esi+0x0]
c000f978:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f97c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f980:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f985:	79 1d                	jns    c000f9a4 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f987:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f98b:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f990:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f994:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f998:	8d 50 01             	lea    edx,[eax+0x1]
c000f99b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f99f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f9a2:	66 90                	xchg   ax,ax
c000f9a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f9a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f9ac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f9b0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f9b4:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f9b9:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f9bd:	89 c2                	mov    edx,eax
c000f9bf:	c1 fa 1f             	sar    edx,0x1f
c000f9c2:	52                   	push   edx
c000f9c3:	50                   	push   eax
c000f9c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f9c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f9cc:	e8 c3 29 01 00       	call   c0022394 <__udivdi3>
c000f9d1:	83 c4 10             	add    esp,0x10
c000f9d4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f9d8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f9dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9e0:	80 f4 00             	xor    ah,0x0
c000f9e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f9e7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f9eb:	80 f4 00             	xor    ah,0x0
c000f9ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9f2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f9f6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f9fa:	89 f8                	mov    eax,edi
c000f9fc:	09 f0                	or     eax,esi
c000f9fe:	74 04                	je     c000fa04 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000fa00:	eb b2                	jmp    c000f9b4 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000fa02:	66 90                	xchg   ax,ax
c000fa04:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fa08:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fa0b:	90                   	nop
c000fa0c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fa10:	89 c1                	mov    ecx,eax
c000fa12:	89 c3                	mov    ebx,eax
c000fa14:	c1 fb 1f             	sar    ebx,0x1f
c000fa17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fa1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fa1f:	53                   	push   ebx
c000fa20:	51                   	push   ecx
c000fa21:	52                   	push   edx
c000fa22:	50                   	push   eax
c000fa23:	e8 ec 27 01 00       	call   c0022214 <__moddi3>
c000fa28:	83 c4 10             	add    esp,0x10
c000fa2b:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000fa30:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000fa34:	01 c8                	add    eax,ecx
c000fa36:	8a 10                	mov    dl,BYTE PTR [eax]
c000fa38:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fa3c:	88 10                	mov    BYTE PTR [eax],dl
c000fa3e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fa42:	89 c2                	mov    edx,eax
c000fa44:	c1 fa 1f             	sar    edx,0x1f
c000fa47:	52                   	push   edx
c000fa48:	50                   	push   eax
c000fa49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fa4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fa51:	e8 72 26 01 00       	call   c00220c8 <__divdi3>
c000fa56:	83 c4 10             	add    esp,0x10
c000fa59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa5d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fa61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fa65:	80 f4 00             	xor    ah,0x0
c000fa68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fa6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa70:	80 f4 00             	xor    ah,0x0
c000fa73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fa77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa7b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fa7f:	89 f8                	mov    eax,edi
c000fa81:	09 f0                	or     eax,esi
c000fa83:	74 03                	je     c000fa88 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000fa85:	eb 85                	jmp    c000fa0c <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000fa87:	90                   	nop
c000fa88:	90                   	nop
c000fa89:	83 c4 5c             	add    esp,0x5c
c000fa8c:	5b                   	pop    ebx
c000fa8d:	5e                   	pop    esi
c000fa8e:	5f                   	pop    edi
c000fa8f:	5d                   	pop    ebp
c000fa90:	c3                   	ret    
c000fa91:	8d 76 00             	lea    esi,[esi+0x0]

c000fa94 <KeGetDigitsInNumber(long long)>:
c000fa94:	56                   	push   esi
c000fa95:	53                   	push   ebx
c000fa96:	83 ec 24             	sub    esp,0x24
c000fa99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000faa1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000faa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000faa9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000fab1:	8d 76 00             	lea    esi,[esi+0x0]
c000fab4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fab8:	80 f4 00             	xor    ah,0x0
c000fabb:	89 c3                	mov    ebx,eax
c000fabd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fac1:	80 f4 00             	xor    ah,0x0
c000fac4:	89 c6                	mov    esi,eax
c000fac6:	89 f0                	mov    eax,esi
c000fac8:	09 d8                	or     eax,ebx
c000faca:	74 28                	je     c000faf4 <KeGetDigitsInNumber(long long)+0x60>
c000facc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fad0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fad4:	6a 00                	push   0x0
c000fad6:	6a 0a                	push   0xa
c000fad8:	52                   	push   edx
c000fad9:	50                   	push   eax
c000fada:	e8 e9 25 01 00       	call   c00220c8 <__divdi3>
c000fadf:	83 c4 10             	add    esp,0x10
c000fae2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000faea:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000faef:	eb c3                	jmp    c000fab4 <KeGetDigitsInNumber(long long)+0x20>
c000faf1:	8d 76 00             	lea    esi,[esi+0x0]
c000faf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000faf8:	83 c4 24             	add    esp,0x24
c000fafb:	5b                   	pop    ebx
c000fafc:	5e                   	pop    esi
c000fafd:	c3                   	ret    
c000fafe:	66 90                	xchg   ax,ax

c000fb00 <KeItoa(unsigned long long, char*)>:
c000fb00:	83 ec 1c             	sub    esp,0x1c
c000fb03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb13:	6a 0a                	push   0xa
c000fb15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb21:	e8 3a fc ff ff       	call   c000f760 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fb26:	83 c4 10             	add    esp,0x10
c000fb29:	90                   	nop
c000fb2a:	83 c4 1c             	add    esp,0x1c
c000fb2d:	c3                   	ret    
c000fb2e:	66 90                	xchg   ax,ax

c000fb30 <KeItoa(long long, char*)>:
c000fb30:	83 ec 1c             	sub    esp,0x1c
c000fb33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb43:	6a 0a                	push   0xa
c000fb45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb51:	e8 92 fd ff ff       	call   c000f8e8 <KeBasedSignedIntegerToString(long long, char*, int)>
c000fb56:	83 c4 10             	add    esp,0x10
c000fb59:	90                   	nop
c000fb5a:	83 c4 1c             	add    esp,0x1c
c000fb5d:	c3                   	ret    
c000fb5e:	66 90                	xchg   ax,ax

c000fb60 <KeXtoa(unsigned long long, char*)>:
c000fb60:	83 ec 1c             	sub    esp,0x1c
c000fb63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb73:	6a 10                	push   0x10
c000fb75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb81:	e8 da fb ff ff       	call   c000f760 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fb86:	83 c4 10             	add    esp,0x10
c000fb89:	90                   	nop
c000fb8a:	83 c4 1c             	add    esp,0x1c
c000fb8d:	c3                   	ret    

c000fb8e <sbrk>:
c000fb8e:	55                   	push   ebp
c000fb8f:	57                   	push   edi
c000fb90:	56                   	push   esi
c000fb91:	53                   	push   ebx
c000fb92:	83 ec 1c             	sub    esp,0x1c
c000fb95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb99:	85 c0                	test   eax,eax
c000fb9b:	74 61                	je     c000fbfe <sbrk+0x70>
c000fb9d:	78 66                	js     c000fc05 <sbrk+0x77>
c000fb9f:	8b 15 90 c4 02 c0    	mov    edx,DWORD PTR ds:0xc002c490
c000fba5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fba9:	05 ff 0f 00 00       	add    eax,0xfff
c000fbae:	89 c5                	mov    ebp,eax
c000fbb0:	78 6b                	js     c000fc1d <sbrk+0x8f>
c000fbb2:	c1 fd 0c             	sar    ebp,0xc
c000fbb5:	bb 00 00 00 00       	mov    ebx,0x0
c000fbba:	8b 35 90 32 03 c0    	mov    esi,DWORD PTR ds:0xc0033290
c000fbc0:	8b 3d 90 c4 02 c0    	mov    edi,DWORD PTR ds:0xc002c490
c000fbc6:	e8 b9 07 00 00       	call   c0010384 <Phys::allocatePage()>
c000fbcb:	68 01 04 00 00       	push   0x401
c000fbd0:	57                   	push   edi
c000fbd1:	50                   	push   eax
c000fbd2:	56                   	push   esi
c000fbd3:	e8 32 42 00 00       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c000fbd8:	81 05 90 c4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c490,0x1000
c000fbe2:	83 c3 01             	add    ebx,0x1
c000fbe5:	83 c4 10             	add    esp,0x10
c000fbe8:	39 dd                	cmp    ebp,ebx
c000fbea:	75 ce                	jne    c000fbba <sbrk+0x2c>
c000fbec:	0f 20 d8             	mov    eax,cr3
c000fbef:	0f 22 d8             	mov    cr3,eax
c000fbf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbf6:	83 c4 1c             	add    esp,0x1c
c000fbf9:	5b                   	pop    ebx
c000fbfa:	5e                   	pop    esi
c000fbfb:	5f                   	pop    edi
c000fbfc:	5d                   	pop    ebp
c000fbfd:	c3                   	ret    
c000fbfe:	a1 90 c4 02 c0       	mov    eax,ds:0xc002c490
c000fc03:	eb f1                	jmp    c000fbf6 <sbrk+0x68>
c000fc05:	83 ec 08             	sub    esp,0x8
c000fc08:	50                   	push   eax
c000fc09:	68 f0 8d 02 c0       	push   0xc0028df0
c000fc0e:	e8 69 73 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000fc13:	83 c4 10             	add    esp,0x10
c000fc16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fc1b:	eb d9                	jmp    c000fbf6 <sbrk+0x68>
c000fc1d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000fc23:	eb 8d                	jmp    c000fbb2 <sbrk+0x24>

c000fc25 <sbrk_thunk>:
c000fc25:	83 ec 0c             	sub    esp,0xc
c000fc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc2c:	3d ff bf 00 00       	cmp    eax,0xbfff
c000fc31:	7f 10                	jg     c000fc43 <sbrk_thunk+0x1e>
c000fc33:	83 ec 0c             	sub    esp,0xc
c000fc36:	50                   	push   eax
c000fc37:	e8 52 ff ff ff       	call   c000fb8e <sbrk>
c000fc3c:	83 c4 10             	add    esp,0x10
c000fc3f:	83 c4 0c             	add    esp,0xc
c000fc42:	c3                   	ret    
c000fc43:	83 ec 08             	sub    esp,0x8
c000fc46:	50                   	push   eax
c000fc47:	68 20 8e 02 c0       	push   0xc0028e20
c000fc4c:	e8 2b 73 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000fc51:	83 c4 10             	add    esp,0x10
c000fc54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fc59:	eb e4                	jmp    c000fc3f <sbrk_thunk+0x1a>

c000fc5b <mmap>:
c000fc5b:	55                   	push   ebp
c000fc5c:	57                   	push   edi
c000fc5d:	56                   	push   esi
c000fc5e:	53                   	push   ebx
c000fc5f:	83 ec 18             	sub    esp,0x18
c000fc62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc66:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fc6c:	89 fb                	mov    ebx,edi
c000fc6e:	c1 eb 0c             	shr    ebx,0xc
c000fc71:	53                   	push   ebx
c000fc72:	e8 b0 3a 00 00       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c000fc77:	89 c5                	mov    ebp,eax
c000fc79:	83 c4 10             	add    esp,0x10
c000fc7c:	85 db                	test   ebx,ebx
c000fc7e:	7e 2f                	jle    c000fcaf <mmap+0x54>
c000fc80:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fc86:	01 c7                	add    edi,eax
c000fc88:	89 c3                	mov    ebx,eax
c000fc8a:	8b 35 90 32 03 c0    	mov    esi,DWORD PTR ds:0xc0033290
c000fc90:	e8 ef 06 00 00       	call   c0010384 <Phys::allocatePage()>
c000fc95:	68 01 04 00 00       	push   0x401
c000fc9a:	53                   	push   ebx
c000fc9b:	50                   	push   eax
c000fc9c:	56                   	push   esi
c000fc9d:	e8 68 41 00 00       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c000fca2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fca8:	83 c4 10             	add    esp,0x10
c000fcab:	39 fb                	cmp    ebx,edi
c000fcad:	75 db                	jne    c000fc8a <mmap+0x2f>
c000fcaf:	89 e8                	mov    eax,ebp
c000fcb1:	83 c4 0c             	add    esp,0xc
c000fcb4:	5b                   	pop    ebx
c000fcb5:	5e                   	pop    esi
c000fcb6:	5f                   	pop    edi
c000fcb7:	5d                   	pop    ebp
c000fcb8:	c3                   	ret    

c000fcb9 <munmap>:
c000fcb9:	83 ec 18             	sub    esp,0x18
c000fcbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcc0:	e8 6a 3d 00 00       	call   c0013a2f <Virt::freeKernelVirtualPages(unsigned long)>
c000fcc5:	b8 00 00 00 00       	mov    eax,0x0
c000fcca:	83 c4 1c             	add    esp,0x1c
c000fccd:	c3                   	ret    

c000fcce <liballoc_lock()>:
c000fcce:	fa                   	cli    
c000fccf:	83 05 30 33 03 c0 01 	add    DWORD PTR ds:0xc0033330,0x1
c000fcd6:	b8 00 00 00 00       	mov    eax,0x0
c000fcdb:	c3                   	ret    

c000fcdc <liballoc_unlock()>:
c000fcdc:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000fce4:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c000fceb:	75 01                	jne    c000fcee <liballoc_unlock()+0x12>
c000fced:	fb                   	sti    
c000fcee:	b8 00 00 00 00       	mov    eax,0x0
c000fcf3:	c3                   	ret    

c000fcf4 <liballoc_alloc(int)>:
c000fcf4:	83 ec 10             	sub    esp,0x10
c000fcf7:	6a 01                	push   0x1
c000fcf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcfd:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000fd03:	e8 06 42 00 00       	call   c0013f0e <VAS::allocatePages(int, int)>
c000fd08:	83 c4 1c             	add    esp,0x1c
c000fd0b:	c3                   	ret    

c000fd0c <liballoc_free(void*, int)>:
c000fd0c:	83 ec 14             	sub    esp,0x14
c000fd0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd13:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c000fd19:	e8 4e 3e 00 00       	call   c0013b6c <VAS::freeAllocatedPages(unsigned long)>
c000fd1e:	b8 00 00 00 00       	mov    eax,0x0
c000fd23:	83 c4 1c             	add    esp,0x1c
c000fd26:	c3                   	ret    

c000fd27 <realloc>:
c000fd27:	83 ec 14             	sub    esp,0x14
c000fd2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd32:	e8 20 1a ff ff       	call   c0001757 <dlrealloc>
c000fd37:	83 c4 1c             	add    esp,0x1c
c000fd3a:	c3                   	ret    

c000fd3b <malloc>:
c000fd3b:	83 ec 18             	sub    esp,0x18
c000fd3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd42:	e8 d3 14 ff ff       	call   c000121a <dlmalloc>
c000fd47:	83 c4 1c             	add    esp,0x1c
c000fd4a:	c3                   	ret    

c000fd4b <free>:
c000fd4b:	83 ec 18             	sub    esp,0x18
c000fd4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd52:	e8 fc 0f ff ff       	call   c0000d53 <dlfree>
c000fd57:	83 c4 1c             	add    esp,0x1c
c000fd5a:	c3                   	ret    

c000fd5b <rfree>:
c000fd5b:	83 ec 18             	sub    esp,0x18
c000fd5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd62:	e8 ec 0f ff ff       	call   c0000d53 <dlfree>
c000fd67:	83 c4 1c             	add    esp,0x1c
c000fd6a:	c3                   	ret    

c000fd6b <calloc>:
c000fd6b:	56                   	push   esi
c000fd6c:	53                   	push   ebx
c000fd6d:	83 ec 10             	sub    esp,0x10
c000fd70:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fd74:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fd79:	53                   	push   ebx
c000fd7a:	e8 bc ff ff ff       	call   c000fd3b <malloc>
c000fd7f:	89 c6                	mov    esi,eax
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	53                   	push   ebx
c000fd85:	6a 00                	push   0x0
c000fd87:	50                   	push   eax
c000fd88:	e8 63 07 ff ff       	call   c00004f0 <memset>
c000fd8d:	89 f0                	mov    eax,esi
c000fd8f:	83 c4 14             	add    esp,0x14
c000fd92:	5b                   	pop    ebx
c000fd93:	5e                   	pop    esi
c000fd94:	c3                   	ret    
c000fd95:	66 90                	xchg   ax,ax
c000fd97:	90                   	nop

c000fd98 <KeMailboxTryPost(Mailbox*, void*)>:
c000fd98:	83 ec 10             	sub    esp,0x10
c000fd9b:	fa                   	cli    
c000fd9c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000fda1:	83 c0 01             	add    eax,0x1
c000fda4:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000fda9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fdae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdb5:	85 c0                	test   eax,eax
c000fdb7:	75 23                	jne    c000fddc <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fdb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdbd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fdc1:	89 10                	mov    DWORD PTR [eax],edx
c000fdc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdca:	8d 50 01             	lea    edx,[eax+0x1]
c000fdcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdd1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fdd4:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fdd9:	8d 76 00             	lea    esi,[esi+0x0]
c000fddc:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000fde4:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000fde9:	85 c0                	test   eax,eax
c000fdeb:	75 03                	jne    c000fdf0 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fded:	fb                   	sti    
c000fdee:	66 90                	xchg   ax,ax
c000fdf0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fdf4:	83 c4 10             	add    esp,0x10
c000fdf7:	c3                   	ret    

c000fdf8 <KeMailboxTryGet(Mailbox*, void**)>:
c000fdf8:	83 ec 10             	sub    esp,0x10
c000fdfb:	fa                   	cli    
c000fdfc:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000fe01:	83 c0 01             	add    eax,0x1
c000fe04:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000fe09:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fe0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe15:	83 f8 01             	cmp    eax,0x1
c000fe18:	75 22                	jne    c000fe3c <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fe1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe1e:	8b 10                	mov    edx,DWORD PTR [eax]
c000fe20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fe24:	89 10                	mov    DWORD PTR [eax],edx
c000fe26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe2d:	8d 50 ff             	lea    edx,[eax-0x1]
c000fe30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fe37:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fe3c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000fe44:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000fe49:	85 c0                	test   eax,eax
c000fe4b:	75 03                	jne    c000fe50 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fe4d:	fb                   	sti    
c000fe4e:	66 90                	xchg   ax,ax
c000fe50:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe54:	83 c4 10             	add    esp,0x10
c000fe57:	c3                   	ret    

c000fe58 <KeMailboxCreate()>:
c000fe58:	83 ec 1c             	sub    esp,0x1c
c000fe5b:	83 ec 0c             	sub    esp,0xc
c000fe5e:	6a 08                	push   0x8
c000fe60:	e8 d6 fe ff ff       	call   c000fd3b <malloc>
c000fe65:	83 c4 10             	add    esp,0x10
c000fe68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe85:	83 c4 1c             	add    esp,0x1c
c000fe88:	c3                   	ret    
c000fe89:	8d 76 00             	lea    esi,[esi+0x0]

c000fe8c <KeMailboxPost(Mailbox*, void*)>:
c000fe8c:	83 ec 1c             	sub    esp,0x1c
c000fe8f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fe94:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe9c:	e8 f7 fe ff ff       	call   c000fd98 <KeMailboxTryPost(Mailbox*, void*)>
c000fea1:	83 c4 08             	add    esp,0x8
c000fea4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fea8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000feac:	83 f0 01             	xor    eax,0x1
c000feaf:	0f b6 c0             	movzx  eax,al
c000feb2:	85 c0                	test   eax,eax
c000feb4:	74 26                	je     c000fedc <KeMailboxPost(Mailbox*, void*)+0x50>
c000feb6:	fa                   	cli    
c000feb7:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000febc:	83 c0 01             	add    eax,0x1
c000febf:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000fec4:	e8 5f 6e 00 00       	call   c0016d28 <schedule()>
c000fec9:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000fed1:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000fed6:	85 c0                	test   eax,eax
c000fed8:	75 02                	jne    c000fedc <KeMailboxPost(Mailbox*, void*)+0x50>
c000feda:	fb                   	sti    
c000fedb:	90                   	nop
c000fedc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fee1:	85 c0                	test   eax,eax
c000fee3:	75 03                	jne    c000fee8 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fee5:	eb ad                	jmp    c000fe94 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fee7:	90                   	nop
c000fee8:	90                   	nop
c000fee9:	83 c4 1c             	add    esp,0x1c
c000feec:	c3                   	ret    
c000feed:	8d 76 00             	lea    esi,[esi+0x0]

c000fef0 <KeMailboxGet(Mailbox*, void**)>:
c000fef0:	83 ec 1c             	sub    esp,0x1c
c000fef3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fef8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fefc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ff00:	e8 f3 fe ff ff       	call   c000fdf8 <KeMailboxTryGet(Mailbox*, void**)>
c000ff05:	83 c4 08             	add    esp,0x8
c000ff08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ff0c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ff10:	83 f0 01             	xor    eax,0x1
c000ff13:	0f b6 c0             	movzx  eax,al
c000ff16:	85 c0                	test   eax,eax
c000ff18:	74 26                	je     c000ff40 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ff1a:	fa                   	cli    
c000ff1b:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000ff20:	83 c0 01             	add    eax,0x1
c000ff23:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c000ff28:	e8 fb 6d 00 00       	call   c0016d28 <schedule()>
c000ff2d:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c000ff35:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c000ff3a:	85 c0                	test   eax,eax
c000ff3c:	75 02                	jne    c000ff40 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ff3e:	fb                   	sti    
c000ff3f:	90                   	nop
c000ff40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ff45:	85 c0                	test   eax,eax
c000ff47:	75 03                	jne    c000ff4c <KeMailboxGet(Mailbox*, void**)+0x5c>
c000ff49:	eb ad                	jmp    c000fef8 <KeMailboxGet(Mailbox*, void**)+0x8>
c000ff4b:	90                   	nop
c000ff4c:	90                   	nop
c000ff4d:	83 c4 1c             	add    esp,0x1c
c000ff50:	c3                   	ret    
c000ff51:	8d 76 00             	lea    esi,[esi+0x0]

c000ff54 <KeMailboxDestroy(Mailbox*)>:
c000ff54:	83 ec 0c             	sub    esp,0xc
c000ff57:	83 ec 0c             	sub    esp,0xc
c000ff5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff5e:	e8 e8 fd ff ff       	call   c000fd4b <free>
c000ff63:	83 c4 10             	add    esp,0x10
c000ff66:	90                   	nop
c000ff67:	83 c4 0c             	add    esp,0xc
c000ff6a:	c3                   	ret    

c000ff6b <KeFirstTask()>:
c000ff6b:	53                   	push   ebx
c000ff6c:	83 ec 08             	sub    esp,0x8
c000ff6f:	fb                   	sti    
c000ff70:	e8 7a a5 00 00       	call   c001a4ef <HalEnableNMI()>
c000ff75:	83 ec 0c             	sub    esp,0xc
c000ff78:	68 2f 8e 02 c0       	push   0xc0028e2f
c000ff7d:	e8 27 d8 ff ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c000ff82:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000ff89:	e8 ad fd ff ff       	call   c000fd3b <malloc>
c000ff8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ff95:	89 c3                	mov    ebx,eax
c000ff97:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c000ff9c:	50                   	push   eax
c000ff9d:	68 48 8e 02 c0       	push   0xc0028e48
c000ffa2:	6a 01                	push   0x1
c000ffa4:	53                   	push   ebx
c000ffa5:	e8 72 68 00 00       	call   c001681c <Process::Process(bool, char const*, Process*, char**)>
c000ffaa:	83 c4 20             	add    esp,0x20
c000ffad:	68 ff 00 00 00       	push   0xff
c000ffb2:	6a 00                	push   0x0
c000ffb4:	68 7b ef 00 c0       	push   0xc000ef7b
c000ffb9:	53                   	push   ebx
c000ffba:	e8 9d 6a 00 00       	call   c0016a5c <Process::createThread(void (*)(void*), void*, int)>
c000ffbf:	8b 15 58 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033358
c000ffc5:	6a 7a                	push   0x7a
c000ffc7:	6a 00                	push   0x0
c000ffc9:	68 10 74 01 c0       	push   0xc0017410
c000ffce:	52                   	push   edx
c000ffcf:	e8 88 6a 00 00       	call   c0016a5c <Process::createThread(void (*)(void*), void*, int)>
c000ffd4:	83 c4 14             	add    esp,0x14
c000ffd7:	a3 10 33 03 c0       	mov    ds:0xc0033310,eax
c000ffdc:	68 d0 8e 02 c0       	push   0xc0028ed0
c000ffe1:	e8 c3 d7 ff ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c000ffe6:	c6 05 0d 31 03 c0 01 	mov    BYTE PTR ds:0xc003310d,0x1
c000ffed:	e8 e9 0b 00 00       	call   c0010bdb <KeInitRand()>
c000fff2:	e8 9f 78 00 00       	call   c0017896 <Vm::initialise8086()>
c000fff7:	e8 24 83 ff ff       	call   c0008320 <Fs::initVFS()>
c000fffc:	c7 04 24 91 8a 02 c0 	mov    DWORD PTR [esp],0xc0028a91
c0010003:	e8 a1 d7 ff ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c0010008:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001000d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0010013:	8b 10                	mov    edx,DWORD PTR [eax]
c0010015:	6a 00                	push   0x0
c0010017:	6a 00                	push   0x0
c0010019:	6a 00                	push   0x0
c001001b:	50                   	push   eax
c001001c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001001f:	83 c4 14             	add    esp,0x14
c0010022:	68 d0 8e 02 c0       	push   0xc0028ed0
c0010027:	e8 7d d7 ff ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001002c:	e8 d4 7a ff ff       	call   c0007b05 <KeInitialiseSymlinks()>
c0010031:	e8 b8 ea ff ff       	call   c000eaee <KeLoadSystemEnv()>
c0010036:	e8 e5 09 00 00       	call   c0010a20 <KeSetupPowerManager()>
c001003b:	c7 04 24 55 8e 02 c0 	mov    DWORD PTR [esp],0xc0028e55
c0010042:	e8 62 d7 ff ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c0010047:	83 c4 0c             	add    esp,0xc
c001004a:	8b 0d 08 31 03 c0    	mov    ecx,DWORD PTR ds:0xc0033108
c0010050:	6a 00                	push   0x0
c0010052:	51                   	push   ecx
c0010053:	68 66 8e 02 c0       	push   0xc0028e66
c0010058:	e8 2f 63 00 00       	call   c001638c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c001005d:	83 c4 10             	add    esp,0x10
c0010060:	83 ec 0c             	sub    esp,0xc
c0010063:	6a 02                	push   0x2
c0010065:	e8 7e 6d 00 00       	call   c0016de8 <blockTask(TaskState)>
c001006a:	83 c4 10             	add    esp,0x10
c001006d:	eb f1                	jmp    c0010060 <KeFirstTask()+0xf5>

c001006f <KeEntryPoint>:
c001006f:	57                   	push   edi
c0010070:	bf f9 03 00 00       	mov    edi,0x3f9
c0010075:	56                   	push   esi
c0010076:	31 f6                	xor    esi,esi
c0010078:	53                   	push   ebx
c0010079:	83 ec 20             	sub    esp,0x20
c001007c:	e8 eb d6 ff ff       	call   c000d76c <KeInitialiseBootConfigurationFlags()>
c0010081:	89 f0                	mov    eax,esi
c0010083:	89 fa                	mov    edx,edi
c0010085:	ee                   	out    dx,al
c0010086:	bb fb 03 00 00       	mov    ebx,0x3fb
c001008b:	b0 80                	mov    al,0x80
c001008d:	89 da                	mov    edx,ebx
c001008f:	ee                   	out    dx,al
c0010090:	b1 03                	mov    cl,0x3
c0010092:	ba f8 03 00 00       	mov    edx,0x3f8
c0010097:	88 c8                	mov    al,cl
c0010099:	ee                   	out    dx,al
c001009a:	89 f0                	mov    eax,esi
c001009c:	89 fa                	mov    edx,edi
c001009e:	ee                   	out    dx,al
c001009f:	88 c8                	mov    al,cl
c00100a1:	89 da                	mov    edx,ebx
c00100a3:	ee                   	out    dx,al
c00100a4:	b0 c7                	mov    al,0xc7
c00100a6:	ba fa 03 00 00       	mov    edx,0x3fa
c00100ab:	ee                   	out    dx,al
c00100ac:	b0 0b                	mov    al,0xb
c00100ae:	ba fc 03 00 00       	mov    edx,0x3fc
c00100b3:	ee                   	out    dx,al
c00100b4:	83 ec 0c             	sub    esp,0xc
c00100b7:	68 82 8e 02 c0       	push   0xc0028e82
c00100bc:	e8 bb 6e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00100c1:	e8 b4 d6 ff ff       	call   c000d77a <KeDisplaySplashScreen()>
c00100c6:	a1 24 05 00 00       	mov    eax,ds:0x524
c00100cb:	05 ff 0f 00 00       	add    eax,0xfff
c00100d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00100d8:	e8 41 04 00 00       	call   c001051e <Phys::physicalMemorySetup(unsigned int)>
c00100dd:	e8 23 38 00 00       	call   c0013905 <Virt::virtualMemorySetup()>
c00100e2:	e8 e3 d5 ff ff       	call   c000d6ca <KeInitialiseAtexit()>
c00100e7:	58                   	pop    eax
c00100e8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00100ec:	53                   	push   ebx
c00100ed:	e8 fa 3a 00 00       	call   c0013bec <VAS::VAS()>
c00100f2:	89 1d 90 32 03 c0    	mov    DWORD PTR ds:0xc0033290,ebx
c00100f8:	e8 8b 5d 01 00       	call   c0025e88 <_init>
c00100fd:	c7 04 24 99 8e 02 c0 	mov    DWORD PTR [esp],0xc0028e99
c0010104:	e8 a0 d6 ff ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c0010109:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c0010110:	e8 26 fc ff ff       	call   c000fd3b <malloc>
c0010115:	89 04 24             	mov    DWORD PTR [esp],eax
c0010118:	89 c6                	mov    esi,eax
c001011a:	e8 11 e4 ff ff       	call   c000e530 <Computer::Computer()>
c001011f:	8b 15 90 32 03 c0    	mov    edx,DWORD PTR ds:0xc0033290
c0010125:	89 35 08 31 03 c0    	mov    DWORD PTR ds:0xc0033108,esi
c001012b:	52                   	push   edx
c001012c:	6a 00                	push   0x0
c001012e:	6a 00                	push   0x0
c0010130:	56                   	push   esi
c0010131:	e8 3e e4 ff ff       	call   c000e574 <Computer::open(int, int, void*)>
c0010136:	83 c4 14             	add    esp,0x14
c0010139:	68 f4 8e 02 c0       	push   0xc0028ef4
c001013e:	e8 66 d6 ff ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c0010143:	e8 2d ab 00 00       	call   c001ac75 <HalInitialiseCoprocessor()>
c0010148:	c7 04 24 b3 8e 02 c0 	mov    DWORD PTR [esp],0xc0028eb3
c001014f:	e8 55 d6 ff ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c0010154:	c7 04 24 6b ff 00 c0 	mov    DWORD PTR [esp],0xc000ff6b
c001015b:	e8 80 6a 00 00       	call   c0016be0 <setupMultitasking(void (*)())>
c0010160:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010163:	e8 3a 3b 00 00       	call   c0013ca2 <VAS::~VAS()>
c0010168:	83 c4 30             	add    esp,0x30
c001016b:	5b                   	pop    ebx
c001016c:	5e                   	pop    esi
c001016d:	5f                   	pop    edi
c001016e:	c3                   	ret    
c001016f:	90                   	nop

c0010170 <Mutex::Mutex()>:
c0010170:	83 ec 0c             	sub    esp,0xc
c0010173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010177:	83 ec 08             	sub    esp,0x8
c001017a:	6a 01                	push   0x1
c001017c:	50                   	push   eax
c001017d:	e8 fa 0c 00 00       	call   c0010e7c <Semaphore::Semaphore(int)>
c0010182:	83 c4 10             	add    esp,0x10
c0010185:	90                   	nop
c0010186:	83 c4 0c             	add    esp,0xc
c0010189:	c3                   	ret    

c001018a <KeIsKernelInPanic()>:
c001018a:	a0 64 31 03 c0       	mov    al,ds:0xc0033164
c001018f:	c3                   	ret    

c0010190 <KePanic(char const*)>:
c0010190:	c6 05 64 31 03 c0 01 	mov    BYTE PTR ds:0xc0033164,0x1
c0010197:	e9 77 ab 00 00       	jmp    c001ad13 <HalPanic(char const*)>

c001019c <Phys::allocateDMA(unsigned long)>:
c001019c:	55                   	push   ebp
c001019d:	31 ed                	xor    ebp,ebp
c001019f:	57                   	push   edi
c00101a0:	56                   	push   esi
c00101a1:	53                   	push   ebx
c00101a2:	31 db                	xor    ebx,ebx
c00101a4:	83 ec 1c             	sub    esp,0x1c
c00101a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101ab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00101b3:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00101b9:	31 c0                	xor    eax,eax
c00101bb:	c1 ef 0c             	shr    edi,0xc
c00101be:	eb 1b                	jmp    c00101db <Phys::allocateDMA(unsigned long)+0x3f>
c00101c0:	85 c0                	test   eax,eax
c00101c2:	75 06                	jne    c00101ca <Phys::allocateDMA(unsigned long)+0x2e>
c00101c4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00101c8:	89 dd                	mov    ebp,ebx
c00101ca:	8d 70 01             	lea    esi,[eax+0x1]
c00101cd:	39 f7                	cmp    edi,esi
c00101cf:	74 37                	je     c0010208 <Phys::allocateDMA(unsigned long)+0x6c>
c00101d1:	89 f0                	mov    eax,esi
c00101d3:	83 c3 01             	add    ebx,0x1
c00101d6:	83 fb 0f             	cmp    ebx,0xf
c00101d9:	7f 13                	jg     c00101ee <Phys::allocateDMA(unsigned long)+0x52>
c00101db:	80 bb 80 31 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffcce80],0x0
c00101e2:	74 dc                	je     c00101c0 <Phys::allocateDMA(unsigned long)+0x24>
c00101e4:	31 c0                	xor    eax,eax
c00101e6:	83 c3 01             	add    ebx,0x1
c00101e9:	83 fb 0f             	cmp    ebx,0xf
c00101ec:	7e ed                	jle    c00101db <Phys::allocateDMA(unsigned long)+0x3f>
c00101ee:	83 ec 0c             	sub    esp,0xc
c00101f1:	68 18 8f 02 c0       	push   0xc0028f18
c00101f6:	e8 95 ff ff ff       	call   c0010190 <KePanic(char const*)>
c00101fb:	83 c4 10             	add    esp,0x10
c00101fe:	31 c0                	xor    eax,eax
c0010200:	83 c4 1c             	add    esp,0x1c
c0010203:	5b                   	pop    ebx
c0010204:	5e                   	pop    esi
c0010205:	5f                   	pop    edi
c0010206:	5d                   	pop    ebp
c0010207:	c3                   	ret    
c0010208:	89 e9                	mov    ecx,ebp
c001020a:	c1 f9 04             	sar    ecx,0x4
c001020d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010211:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0010215:	89 ca                	mov    edx,ecx
c0010217:	83 ea 01             	sub    edx,0x1
c001021a:	79 03                	jns    c001021f <Phys::allocateDMA(unsigned long)+0x83>
c001021c:	8d 51 0e             	lea    edx,[ecx+0xe]
c001021f:	c1 fa 04             	sar    edx,0x4
c0010222:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0010226:	74 08                	je     c0010230 <Phys::allocateDMA(unsigned long)+0x94>
c0010228:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001022c:	31 c0                	xor    eax,eax
c001022e:	eb b6                	jmp    c00101e6 <Phys::allocateDMA(unsigned long)+0x4a>
c0010230:	85 f6                	test   esi,esi
c0010232:	74 17                	je     c001024b <Phys::allocateDMA(unsigned long)+0xaf>
c0010234:	8d 95 80 31 03 c0    	lea    edx,[ebp-0x3ffcce80]
c001023a:	8d 84 05 81 31 03 c0 	lea    eax,[ebp+eax*1-0x3ffcce7f]
c0010241:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0010244:	83 c2 01             	add    edx,0x1
c0010247:	39 d0                	cmp    eax,edx
c0010249:	75 f6                	jne    c0010241 <Phys::allocateDMA(unsigned long)+0xa5>
c001024b:	a1 78 31 03 c0       	mov    eax,ds:0xc0033178
c0010250:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010254:	01 f8                	add    eax,edi
c0010256:	85 d2                	test   edx,edx
c0010258:	a3 78 31 03 c0       	mov    ds:0xc0033178,eax
c001025d:	74 17                	je     c0010276 <Phys::allocateDMA(unsigned long)+0xda>
c001025f:	83 ec 0c             	sub    esp,0xc
c0010262:	68 18 8f 02 c0       	push   0xc0028f18
c0010267:	e8 24 ff ff ff       	call   c0010190 <KePanic(char const*)>
c001026c:	83 c4 10             	add    esp,0x10
c001026f:	89 f0                	mov    eax,esi
c0010271:	e9 5d ff ff ff       	jmp    c00101d3 <Phys::allocateDMA(unsigned long)+0x37>
c0010276:	c1 e5 0c             	shl    ebp,0xc
c0010279:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c001027f:	e9 7c ff ff ff       	jmp    c0010200 <Phys::allocateDMA(unsigned long)+0x64>

c0010284 <Phys::freeDMA(unsigned long, unsigned long)>:
c0010284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010288:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c001028e:	a1 78 31 03 c0       	mov    eax,ds:0xc0033178
c0010293:	c1 ea 0c             	shr    edx,0xc
c0010296:	29 d0                	sub    eax,edx
c0010298:	a3 78 31 03 c0       	mov    ds:0xc0033178,eax
c001029d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102a1:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00102a6:	c1 e8 0c             	shr    eax,0xc
c00102a9:	85 d2                	test   edx,edx
c00102ab:	74 11                	je     c00102be <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00102ad:	05 80 31 03 c0       	add    eax,0xc0033180
c00102b2:	01 c2                	add    edx,eax
c00102b4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00102b7:	83 c0 01             	add    eax,0x1
c00102ba:	39 d0                	cmp    eax,edx
c00102bc:	75 f6                	jne    c00102b4 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00102be:	c3                   	ret    

c00102bf <Phys::setPageState(unsigned long, bool)>:
c00102bf:	57                   	push   edi
c00102c0:	56                   	push   esi
c00102c1:	8b 35 f8 c4 02 c0    	mov    esi,DWORD PTR ds:0xc002c4f8
c00102c7:	53                   	push   ebx
c00102c8:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c00102cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d5:	0f b6 c0             	movzx  eax,al
c00102d8:	89 ca                	mov    edx,ecx
c00102da:	83 e1 07             	and    ecx,0x7
c00102dd:	c1 ea 03             	shr    edx,0x3
c00102e0:	d3 c3                	rol    ebx,cl
c00102e2:	01 d6                	add    esi,edx
c00102e4:	d3 e0                	shl    eax,cl
c00102e6:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c00102e9:	21 fb                	and    ebx,edi
c00102eb:	88 1e                	mov    BYTE PTR [esi],bl
c00102ed:	8b 1d f8 c4 02 c0    	mov    ebx,DWORD PTR ds:0xc002c4f8
c00102f3:	01 da                	add    edx,ebx
c00102f5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00102f7:	09 c8                	or     eax,ecx
c00102f9:	88 02                	mov    BYTE PTR [edx],al
c00102fb:	5b                   	pop    ebx
c00102fc:	5e                   	pop    esi
c00102fd:	5f                   	pop    edi
c00102fe:	c3                   	ret    

c00102ff <Phys::getPageState(unsigned long)>:
c00102ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010303:	8b 15 f8 c4 02 c0    	mov    edx,DWORD PTR ds:0xc002c4f8
c0010309:	89 c8                	mov    eax,ecx
c001030b:	83 e1 07             	and    ecx,0x7
c001030e:	c1 e8 03             	shr    eax,0x3
c0010311:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0010315:	d3 f8                	sar    eax,cl
c0010317:	83 e0 01             	and    eax,0x1
c001031a:	c3                   	ret    

c001031b <Phys::freePage(unsigned long)>:
c001031b:	53                   	push   ebx
c001031c:	83 ec 08             	sub    esp,0x8
c001031f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010323:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0010329:	81 fa ff ff 00 00    	cmp    edx,0xffff
c001032f:	76 41                	jbe    c0010372 <Phys::freePage(unsigned long)+0x57>
c0010331:	c1 e8 0c             	shr    eax,0xc
c0010334:	50                   	push   eax
c0010335:	89 c3                	mov    ebx,eax
c0010337:	e8 c3 ff ff ff       	call   c00102ff <Phys::getPageState(unsigned long)>
c001033c:	5a                   	pop    edx
c001033d:	84 c0                	test   al,al
c001033f:	74 20                	je     c0010361 <Phys::freePage(unsigned long)+0x46>
c0010341:	83 ec 08             	sub    esp,0x8
c0010344:	a1 78 31 03 c0       	mov    eax,ds:0xc0033178
c0010349:	6a 00                	push   0x0
c001034b:	83 e8 01             	sub    eax,0x1
c001034e:	53                   	push   ebx
c001034f:	a3 78 31 03 c0       	mov    ds:0xc0033178,eax
c0010354:	e8 66 ff ff ff       	call   c00102bf <Phys::setPageState(unsigned long, bool)>
c0010359:	83 c4 10             	add    esp,0x10
c001035c:	83 c4 08             	add    esp,0x8
c001035f:	5b                   	pop    ebx
c0010360:	c3                   	ret    
c0010361:	c7 44 24 10 2a 8f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028f2a
c0010369:	83 c4 08             	add    esp,0x8
c001036c:	5b                   	pop    ebx
c001036d:	e9 1e fe ff ff       	jmp    c0010190 <KePanic(char const*)>
c0010372:	68 00 10 00 00       	push   0x1000
c0010377:	50                   	push   eax
c0010378:	e8 07 ff ff ff       	call   c0010284 <Phys::freeDMA(unsigned long, unsigned long)>
c001037d:	59                   	pop    ecx
c001037e:	5b                   	pop    ebx
c001037f:	83 c4 08             	add    esp,0x8
c0010382:	5b                   	pop    ebx
c0010383:	c3                   	ret    

c0010384 <Phys::allocatePage()>:
c0010384:	56                   	push   esi
c0010385:	53                   	push   ebx
c0010386:	83 ec 14             	sub    esp,0x14
c0010389:	8b 35 6c 31 03 c0    	mov    esi,DWORD PTR ds:0xc003316c
c001038f:	89 f3                	mov    ebx,esi
c0010391:	eb 18                	jmp    c00103ab <Phys::allocatePage()+0x27>
c0010393:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010399:	75 0c                	jne    c00103a7 <Phys::allocatePage()+0x23>
c001039b:	c7 05 6c 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003316c,0x0
c00103a5:	31 db                	xor    ebx,ebx
c00103a7:	39 de                	cmp    esi,ebx
c00103a9:	74 5b                	je     c0010406 <Phys::allocatePage()+0x82>
c00103ab:	53                   	push   ebx
c00103ac:	e8 4e ff ff ff       	call   c00102ff <Phys::getPageState(unsigned long)>
c00103b1:	59                   	pop    ecx
c00103b2:	84 c0                	test   al,al
c00103b4:	74 29                	je     c00103df <Phys::allocatePage()+0x5b>
c00103b6:	83 c3 01             	add    ebx,0x1
c00103b9:	89 1d 6c 31 03 c0    	mov    DWORD PTR ds:0xc003316c,ebx
c00103bf:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00103c5:	76 cc                	jbe    c0010393 <Phys::allocatePage()+0xf>
c00103c7:	83 ec 0c             	sub    esp,0xc
c00103ca:	68 40 8f 02 c0       	push   0xc0028f40
c00103cf:	e8 bc fd ff ff       	call   c0010190 <KePanic(char const*)>
c00103d4:	8b 1d 6c 31 03 c0    	mov    ebx,DWORD PTR ds:0xc003316c
c00103da:	83 c4 10             	add    esp,0x10
c00103dd:	eb b4                	jmp    c0010393 <Phys::allocatePage()+0xf>
c00103df:	6a 01                	push   0x1
c00103e1:	53                   	push   ebx
c00103e2:	e8 d8 fe ff ff       	call   c00102bf <Phys::setPageState(unsigned long, bool)>
c00103e7:	8b 1d 78 31 03 c0    	mov    ebx,DWORD PTR ds:0xc0033178
c00103ed:	a1 6c 31 03 c0       	mov    eax,ds:0xc003316c
c00103f2:	83 c3 01             	add    ebx,0x1
c00103f5:	5e                   	pop    esi
c00103f6:	89 1d 78 31 03 c0    	mov    DWORD PTR ds:0xc0033178,ebx
c00103fc:	c1 e0 0c             	shl    eax,0xc
c00103ff:	5a                   	pop    edx
c0010400:	83 c4 14             	add    esp,0x14
c0010403:	5b                   	pop    ebx
c0010404:	5e                   	pop    esi
c0010405:	c3                   	ret    
c0010406:	83 ec 0c             	sub    esp,0xc
c0010409:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001040e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010411:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0010417:	51                   	push   ecx
c0010418:	e8 9f 43 00 00       	call   c00147bc <VAS::scanForEviction()>
c001041d:	83 c4 10             	add    esp,0x10
c0010420:	85 c0                	test   eax,eax
c0010422:	75 1b                	jne    c001043f <Phys::allocatePage()+0xbb>
c0010424:	83 ec 0c             	sub    esp,0xc
c0010427:	68 88 8f 02 c0       	push   0xc0028f88
c001042c:	e8 5f fd ff ff       	call   c0010190 <KePanic(char const*)>
c0010431:	8b 1d 6c 31 03 c0    	mov    ebx,DWORD PTR ds:0xc003316c
c0010437:	83 c4 10             	add    esp,0x10
c001043a:	e9 6c ff ff ff       	jmp    c00103ab <Phys::allocatePage()+0x27>
c001043f:	83 ec 08             	sub    esp,0x8
c0010442:	8b 15 78 31 03 c0    	mov    edx,DWORD PTR ds:0xc0033178
c0010448:	6a 01                	push   0x1
c001044a:	83 c2 01             	add    edx,0x1
c001044d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010451:	89 15 78 31 03 c0    	mov    DWORD PTR ds:0xc0033178,edx
c0010457:	89 c2                	mov    edx,eax
c0010459:	c1 ea 0c             	shr    edx,0xc
c001045c:	52                   	push   edx
c001045d:	e8 5d fe ff ff       	call   c00102bf <Phys::setPageState(unsigned long, bool)>
c0010462:	83 c4 10             	add    esp,0x10
c0010465:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010469:	eb 95                	jmp    c0010400 <Phys::allocatePage()+0x7c>

c001046b <Phys::allocateContiguousPages(int)>:
c001046b:	57                   	push   edi
c001046c:	56                   	push   esi
c001046d:	53                   	push   ebx
c001046e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010472:	fa                   	cli    
c0010473:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0010479:	83 ec 0c             	sub    esp,0xc
c001047c:	83 c2 01             	add    edx,0x1
c001047f:	68 b8 8f 02 c0       	push   0xc0028fb8
c0010484:	89 15 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,edx
c001048a:	31 db                	xor    ebx,ebx
c001048c:	e8 eb 6a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010491:	83 c4 10             	add    esp,0x10
c0010494:	85 db                	test   ebx,ebx
c0010496:	75 11                	jne    c00104a9 <Phys::allocateContiguousPages(int)+0x3e>
c0010498:	e8 e7 fe ff ff       	call   c0010384 <Phys::allocatePage()>
c001049d:	83 ff 01             	cmp    edi,0x1
c00104a0:	89 c6                	mov    esi,eax
c00104a2:	74 21                	je     c00104c5 <Phys::allocateContiguousPages(int)+0x5a>
c00104a4:	bb 01 00 00 00       	mov    ebx,0x1
c00104a9:	e8 d6 fe ff ff       	call   c0010384 <Phys::allocatePage()>
c00104ae:	89 da                	mov    edx,ebx
c00104b0:	c1 e2 0c             	shl    edx,0xc
c00104b3:	01 f2                	add    edx,esi
c00104b5:	39 c2                	cmp    edx,eax
c00104b7:	74 24                	je     c00104dd <Phys::allocateContiguousPages(int)+0x72>
c00104b9:	bb 01 00 00 00       	mov    ebx,0x1
c00104be:	89 c6                	mov    esi,eax
c00104c0:	83 ff 01             	cmp    edi,0x1
c00104c3:	75 e4                	jne    c00104a9 <Phys::allocateContiguousPages(int)+0x3e>
c00104c5:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00104cd:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00104d2:	85 c0                	test   eax,eax
c00104d4:	75 01                	jne    c00104d7 <Phys::allocateContiguousPages(int)+0x6c>
c00104d6:	fb                   	sti    
c00104d7:	89 f0                	mov    eax,esi
c00104d9:	5b                   	pop    ebx
c00104da:	5e                   	pop    esi
c00104db:	5f                   	pop    edi
c00104dc:	c3                   	ret    
c00104dd:	83 c3 01             	add    ebx,0x1
c00104e0:	39 fb                	cmp    ebx,edi
c00104e2:	75 b0                	jne    c0010494 <Phys::allocateContiguousPages(int)+0x29>
c00104e4:	eb df                	jmp    c00104c5 <Phys::allocateContiguousPages(int)+0x5a>

c00104e6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00104e6:	56                   	push   esi
c00104e7:	53                   	push   ebx
c00104e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104ec:	39 1d 70 31 03 c0    	cmp    DWORD PTR ds:0xc0033170,ebx
c00104f2:	73 06                	jae    c00104fa <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00104f4:	89 1d 70 31 03 c0    	mov    DWORD PTR ds:0xc0033170,ebx
c00104fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104fe:	c1 eb 0c             	shr    ebx,0xc
c0010501:	c1 e8 0c             	shr    eax,0xc
c0010504:	39 d8                	cmp    eax,ebx
c0010506:	73 13                	jae    c001051b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010508:	6a 00                	push   0x0
c001050a:	8d 70 01             	lea    esi,[eax+0x1]
c001050d:	50                   	push   eax
c001050e:	e8 ac fd ff ff       	call   c00102bf <Phys::setPageState(unsigned long, bool)>
c0010513:	5a                   	pop    edx
c0010514:	89 f0                	mov    eax,esi
c0010516:	59                   	pop    ecx
c0010517:	39 f3                	cmp    ebx,esi
c0010519:	75 ed                	jne    c0010508 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001051b:	5b                   	pop    ebx
c001051c:	5e                   	pop    esi
c001051d:	c3                   	ret    

c001051e <Phys::physicalMemorySetup(unsigned int)>:
c001051e:	55                   	push   ebp
c001051f:	57                   	push   edi
c0010520:	56                   	push   esi
c0010521:	53                   	push   ebx
c0010522:	83 ec 40             	sub    esp,0x40
c0010525:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0010529:	6a 10                	push   0x10
c001052b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0010531:	6a 00                	push   0x0
c0010533:	68 80 31 03 c0       	push   0xc0033180
c0010538:	e8 b3 ff fe ff       	call   c00004f0 <memset>
c001053d:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c0010543:	31 db                	xor    ebx,ebx
c0010545:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010549:	5a                   	pop    edx
c001054a:	59                   	pop    ecx
c001054b:	50                   	push   eax
c001054c:	68 45 8f 02 c0       	push   0xc0028f45
c0010551:	e8 26 6a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010556:	83 c4 10             	add    esp,0x10
c0010559:	83 ec 08             	sub    esp,0x8
c001055c:	6a 01                	push   0x1
c001055e:	53                   	push   ebx
c001055f:	83 c3 01             	add    ebx,0x1
c0010562:	e8 58 fd ff ff       	call   c00102bf <Phys::setPageState(unsigned long, bool)>
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010570:	75 e7                	jne    c0010559 <Phys::physicalMemorySetup(unsigned int)+0x3b>
c0010572:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0010579:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010580:	c1 e0 08             	shl    eax,0x8
c0010583:	09 c2                	or     edx,eax
c0010585:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0010589:	0f 84 b5 01 00 00    	je     c0010744 <Phys::physicalMemorySetup(unsigned int)+0x226>
c001058f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010593:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001059b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00105a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00105a4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00105ac:	eb 1c                	jmp    c00105ca <Phys::physicalMemorySetup(unsigned int)+0xac>
c00105ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105b2:	83 c3 18             	add    ebx,0x18
c00105b5:	83 c0 01             	add    eax,0x1
c00105b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00105bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105c0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00105c4:	0f 84 5d 01 00 00    	je     c0010727 <Phys::physicalMemorySetup(unsigned int)+0x209>
c00105ca:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00105cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00105d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00105d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00105d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00105db:	8b 33                	mov    esi,DWORD PTR [ebx]
c00105dd:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00105e0:	01 f0                	add    eax,esi
c00105e2:	55                   	push   ebp
c00105e3:	11 fa                	adc    edx,edi
c00105e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00105e9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00105ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105f1:	50                   	push   eax
c00105f2:	56                   	push   esi
c00105f3:	68 18 90 02 c0       	push   0xc0029018
c00105f8:	e8 7f 69 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00105fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010601:	83 c4 10             	add    esp,0x10
c0010604:	09 f8                	or     eax,edi
c0010606:	0f 85 1b 01 00 00    	jne    c0010727 <Phys::physicalMemorySetup(unsigned int)+0x209>
c001060c:	83 fd 01             	cmp    ebp,0x1
c001060f:	75 9d                	jne    c00105ae <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010611:	ba 00 00 08 00       	mov    edx,0x80000
c0010616:	89 c1                	mov    ecx,eax
c0010618:	39 f2                	cmp    edx,esi
c001061a:	19 f9                	sbb    ecx,edi
c001061c:	0f 82 ab 00 00 00    	jb     c00106cd <Phys::physicalMemorySetup(unsigned int)+0x1af>
c0010622:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010626:	89 c1                	mov    ecx,eax
c0010628:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001062c:	0f 83 9b 00 00 00    	jae    c00106cd <Phys::physicalMemorySetup(unsigned int)+0x1af>
c0010632:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010637:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001063b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001063f:	39 fa                	cmp    edx,edi
c0010641:	19 e8                	sbb    eax,ebp
c0010643:	0f 82 e6 00 00 00    	jb     c001072f <Phys::physicalMemorySetup(unsigned int)+0x211>
c0010649:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001064d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010651:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010657:	ba ff 1f 00 00       	mov    edx,0x1fff
c001065c:	83 d5 ff             	adc    ebp,0xffffffff
c001065f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010663:	31 c0                	xor    eax,eax
c0010665:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010669:	39 fa                	cmp    edx,edi
c001066b:	89 c1                	mov    ecx,eax
c001066d:	19 e9                	sbb    ecx,ebp
c001066f:	0f 83 39 ff ff ff    	jae    c00105ae <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010675:	be 00 00 08 00       	mov    esi,0x80000
c001067a:	83 ec 04             	sub    esp,0x4
c001067d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010681:	57                   	push   edi
c0010682:	56                   	push   esi
c0010683:	68 3c 90 02 c0       	push   0xc002903c
c0010688:	e8 ef 68 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001068d:	5a                   	pop    edx
c001068e:	59                   	pop    ecx
c001068f:	57                   	push   edi
c0010690:	56                   	push   esi
c0010691:	e8 50 fe ff ff       	call   c00104e6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010696:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001069a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001069e:	8b 35 7c 31 03 c0    	mov    esi,DWORD PTR ds:0xc003317c
c00106a4:	83 c4 0c             	add    esp,0xc
c00106a7:	0f ac d0 0c          	shrd   eax,edx,0xc
c00106ab:	01 f0                	add    eax,esi
c00106ad:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00106b4:	a3 7c 31 03 c0       	mov    ds:0xc003317c,eax
c00106b9:	52                   	push   edx
c00106ba:	50                   	push   eax
c00106bb:	68 6b 8f 02 c0       	push   0xc0028f6b
c00106c0:	e8 b7 68 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00106c5:	83 c4 10             	add    esp,0x10
c00106c8:	e9 e1 fe ff ff       	jmp    c00105ae <Phys::physicalMemorySetup(unsigned int)+0x90>
c00106cd:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00106d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00106d9:	39 ea                	cmp    edx,ebp
c00106db:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00106df:	0f 82 c9 fe ff ff    	jb     c00105ae <Phys::physicalMemorySetup(unsigned int)+0x90>
c00106e5:	ba ff 1f 00 00       	mov    edx,0x1fff
c00106ea:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00106ee:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00106f2:	0f 83 b6 fe ff ff    	jae    c00105ae <Phys::physicalMemorySetup(unsigned int)+0x90>
c00106f8:	39 ee                	cmp    esi,ebp
c00106fa:	89 f8                	mov    eax,edi
c00106fc:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010700:	0f 83 74 ff ff ff    	jae    c001067a <Phys::physicalMemorySetup(unsigned int)+0x15c>
c0010706:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001070a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001070e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010712:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010716:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001071a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001071e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010722:	e9 53 ff ff ff       	jmp    c001067a <Phys::physicalMemorySetup(unsigned int)+0x15c>
c0010727:	83 c4 3c             	add    esp,0x3c
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	5f                   	pop    edi
c001072d:	5d                   	pop    ebp
c001072e:	c3                   	ret    
c001072f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010737:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001073f:	e9 05 ff ff ff       	jmp    c0010649 <Phys::physicalMemorySetup(unsigned int)+0x12b>
c0010744:	c7 44 24 50 5d 8f 02 c0 	mov    DWORD PTR [esp+0x50],0xc0028f5d
c001074c:	83 c4 3c             	add    esp,0x3c
c001074f:	5b                   	pop    ebx
c0010750:	5e                   	pop    esi
c0010751:	5f                   	pop    edi
c0010752:	5d                   	pop    ebp
c0010753:	e9 38 fa ff ff       	jmp    c0010190 <KePanic(char const*)>

c0010758 <Pipe::isAtty()>:
c0010758:	31 c0                	xor    eax,eax
c001075a:	c3                   	ret    
c001075b:	90                   	nop

c001075c <Pipe::~Pipe()>:
c001075c:	83 ec 0c             	sub    esp,0xc
c001075f:	ba a8 90 02 c0       	mov    edx,0xc00290a8
c0010764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010768:	89 10                	mov    DWORD PTR [eax],edx
c001076a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001076e:	83 ec 0c             	sub    esp,0xc
c0010771:	50                   	push   eax
c0010772:	e8 43 2d 00 00       	call   c00134ba <UnixFile::~UnixFile()>
c0010777:	83 c4 10             	add    esp,0x10
c001077a:	90                   	nop
c001077b:	83 c4 0c             	add    esp,0xc
c001077e:	c3                   	ret    
c001077f:	90                   	nop

c0010780 <Pipe::~Pipe()>:
c0010780:	83 ec 0c             	sub    esp,0xc
c0010783:	83 ec 0c             	sub    esp,0xc
c0010786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001078a:	e8 cd ff ff ff       	call   c001075c <Pipe::~Pipe()>
c001078f:	83 c4 10             	add    esp,0x10
c0010792:	83 ec 08             	sub    esp,0x8
c0010795:	6a 20                	push   0x20
c0010797:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001079b:	e8 b4 d0 ff ff       	call   c000d854 <operator delete(void*, unsigned long)>
c00107a0:	83 c4 10             	add    esp,0x10
c00107a3:	83 c4 0c             	add    esp,0xc
c00107a6:	c3                   	ret    
c00107a7:	90                   	nop

c00107a8 <Pipe::write(unsigned long long, void*, int*)>:
c00107a8:	55                   	push   ebp
c00107a9:	57                   	push   edi
c00107aa:	56                   	push   esi
c00107ab:	53                   	push   ebx
c00107ac:	83 ec 1c             	sub    esp,0x1c
c00107af:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00107b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00107b7:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00107ba:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00107be:	89 04 24             	mov    DWORD PTR [esp],eax
c00107c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00107c5:	89 d8                	mov    eax,ebx
c00107c7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00107ca:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00107ce:	89 d6                	mov    esi,edx
c00107d0:	89 d7                	mov    edi,edx
c00107d2:	c1 ff 1f             	sar    edi,0x1f
c00107d5:	03 34 24             	add    esi,DWORD PTR [esp]
c00107d8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00107dc:	c1 f8 1f             	sar    eax,0x1f
c00107df:	39 f3                	cmp    ebx,esi
c00107e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107e9:	19 f8                	sbb    eax,edi
c00107eb:	b8 01 00 00 00       	mov    eax,0x1
c00107f0:	72 6e                	jb     c0010860 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00107f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00107f5:	01 d0                	add    eax,edx
c00107f7:	99                   	cdq    
c00107f8:	f7 fb                	idiv   ebx
c00107fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107fe:	29 d3                	sub    ebx,edx
c0010800:	89 d7                	mov    edi,edx
c0010802:	89 de                	mov    esi,ebx
c0010804:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010807:	c1 fb 1f             	sar    ebx,0x1f
c001080a:	39 f2                	cmp    edx,esi
c001080c:	19 d8                	sbb    eax,ebx
c001080e:	b8 00 00 00 00       	mov    eax,0x0
c0010813:	72 04                	jb     c0010819 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010815:	89 d0                	mov    eax,edx
c0010817:	29 f0                	sub    eax,esi
c0010819:	89 d3                	mov    ebx,edx
c001081b:	29 c3                	sub    ebx,eax
c001081d:	74 0b                	je     c001082a <Pipe::write(unsigned long long, void*, int*)+0x82>
c001081f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010822:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010826:	89 d9                	mov    ecx,ebx
c0010828:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001082a:	85 c0                	test   eax,eax
c001082c:	74 0d                	je     c001083b <Pipe::write(unsigned long long, void*, int*)+0x93>
c001082e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010832:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010835:	89 de                	mov    esi,ebx
c0010837:	89 c1                	mov    ecx,eax
c0010839:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001083b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c001083e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010843:	75 10                	jne    c0010855 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010845:	83 ec 0c             	sub    esp,0xc
c0010848:	68 65 90 02 c0       	push   0xc0029065
c001084d:	e8 3e f9 ff ff       	call   c0010190 <KePanic(char const*)>
c0010852:	83 c4 10             	add    esp,0x10
c0010855:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010859:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001085c:	89 08                	mov    DWORD PTR [eax],ecx
c001085e:	31 c0                	xor    eax,eax
c0010860:	83 c4 1c             	add    esp,0x1c
c0010863:	5b                   	pop    ebx
c0010864:	5e                   	pop    esi
c0010865:	5f                   	pop    edi
c0010866:	5d                   	pop    ebp
c0010867:	c3                   	ret    

c0010868 <Pipe::read(unsigned long long, void*, int*)>:
c0010868:	55                   	push   ebp
c0010869:	57                   	push   edi
c001086a:	56                   	push   esi
c001086b:	53                   	push   ebx
c001086c:	83 ec 1c             	sub    esp,0x1c
c001086f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010873:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010877:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001087b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001087e:	89 c8                	mov    eax,ecx
c0010880:	99                   	cdq    
c0010881:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010885:	74 27                	je     c00108ae <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010887:	39 f9                	cmp    ecx,edi
c0010889:	89 d1                	mov    ecx,edx
c001088b:	19 f1                	sbb    ecx,esi
c001088d:	73 1f                	jae    c00108ae <Pipe::read(unsigned long long, void*, int*)+0x46>
c001088f:	fa                   	cli    
c0010890:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0010896:	e8 8d 64 00 00       	call   c0016d28 <schedule()>
c001089b:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c00108a2:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c00108a9:	75 d0                	jne    c001087b <Pipe::read(unsigned long long, void*, int*)+0x13>
c00108ab:	fb                   	sti    
c00108ac:	eb cd                	jmp    c001087b <Pipe::read(unsigned long long, void*, int*)+0x13>
c00108ae:	39 f8                	cmp    eax,edi
c00108b0:	89 d1                	mov    ecx,edx
c00108b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00108b5:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00108b9:	19 f1                	sbb    ecx,esi
c00108bb:	73 07                	jae    c00108c4 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c00108bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00108c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00108c4:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00108c7:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00108ca:	29 f7                	sub    edi,esi
c00108cc:	89 f8                	mov    eax,edi
c00108ce:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00108d2:	99                   	cdq    
c00108d3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00108d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108da:	19 d0                	sbb    eax,edx
c00108dc:	73 07                	jae    c00108e5 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c00108de:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00108e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00108e5:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00108e8:	89 ea                	mov    edx,ebp
c00108ea:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00108ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00108f3:	74 0d                	je     c0010902 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c00108f5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108f8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00108fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010900:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010902:	85 d2                	test   edx,edx
c0010904:	74 11                	je     c0010917 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010906:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001090a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001090d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010911:	89 d1                	mov    ecx,edx
c0010913:	89 c7                	mov    edi,eax
c0010915:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010917:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001091a:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001091d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010920:	99                   	cdq    
c0010921:	89 f7                	mov    edi,esi
c0010923:	03 04 24             	add    eax,DWORD PTR [esp]
c0010926:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001092a:	c1 ff 1f             	sar    edi,0x1f
c001092d:	57                   	push   edi
c001092e:	56                   	push   esi
c001092f:	52                   	push   edx
c0010930:	50                   	push   eax
c0010931:	e8 5e 1b 01 00       	call   c0022494 <__umoddi3>
c0010936:	83 c4 10             	add    esp,0x10
c0010939:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001093c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010941:	75 10                	jne    c0010953 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010943:	83 ec 0c             	sub    esp,0xc
c0010946:	68 82 90 02 c0       	push   0xc0029082
c001094b:	e8 40 f8 ff ff       	call   c0010190 <KePanic(char const*)>
c0010950:	83 c4 10             	add    esp,0x10
c0010953:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010957:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001095a:	89 10                	mov    DWORD PTR [eax],edx
c001095c:	83 c4 1c             	add    esp,0x1c
c001095f:	31 c0                	xor    eax,eax
c0010961:	5b                   	pop    ebx
c0010962:	5e                   	pop    esi
c0010963:	5f                   	pop    edi
c0010964:	5d                   	pop    ebp
c0010965:	c3                   	ret    

c0010966 <Pipe::Pipe(int)>:
c0010966:	83 ec 0c             	sub    esp,0xc
c0010969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096d:	83 ec 08             	sub    esp,0x8
c0010970:	6a 00                	push   0x0
c0010972:	50                   	push   eax
c0010973:	e8 5c 29 00 00       	call   c00132d4 <UnixFile::UnixFile(int)>
c0010978:	83 c4 10             	add    esp,0x10
c001097b:	ba a8 90 02 c0       	mov    edx,0xc00290a8
c0010980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010984:	89 10                	mov    DWORD PTR [eax],edx
c0010986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001098e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010995:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001099c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00109a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109ab:	83 ec 0c             	sub    esp,0xc
c00109ae:	50                   	push   eax
c00109af:	e8 87 f3 ff ff       	call   c000fd3b <malloc>
c00109b4:	83 c4 10             	add    esp,0x10
c00109b7:	89 c2                	mov    edx,eax
c00109b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00109c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00109c8:	90                   	nop
c00109c9:	83 c4 0c             	add    esp,0xc
c00109cc:	c3                   	ret    

c00109cd <KePowerThread(void*)>:
c00109cd:	83 ec 0c             	sub    esp,0xc
c00109d0:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c00109d7:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c00109de:	75 01                	jne    c00109e1 <KePowerThread(void*)+0x14>
c00109e0:	fb                   	sti    
c00109e1:	c6 05 ac 31 03 c0 00 	mov    BYTE PTR ds:0xc00331ac,0x0
c00109e8:	50                   	push   eax
c00109e9:	50                   	push   eax
c00109ea:	6a 00                	push   0x0
c00109ec:	6a 0a                	push   0xa
c00109ee:	e8 41 65 00 00       	call   c0016f34 <sleep(unsigned long long)>
c00109f3:	83 05 e4 31 03 c0 0a 	add    DWORD PTR ds:0xc00331e4,0xa
c00109fa:	83 c4 10             	add    esp,0x10
c00109fd:	eb e2                	jmp    c00109e1 <KePowerThread(void*)+0x14>

c00109ff <KeChangePowerSettings(PowerSettings)>:
c00109ff:	57                   	push   edi
c0010a00:	b9 09 00 00 00       	mov    ecx,0x9
c0010a05:	56                   	push   esi
c0010a06:	bf c0 31 03 c0       	mov    edi,0xc00331c0
c0010a0b:	fc                   	cld    
c0010a0c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010a10:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010a12:	5e                   	pop    esi
c0010a13:	5f                   	pop    edi
c0010a14:	c3                   	ret    

c0010a15 <KeUserIOReceived()>:
c0010a15:	c7 05 e4 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331e4,0x0
c0010a1f:	c3                   	ret    

c0010a20 <KeSetupPowerManager()>:
c0010a20:	83 ec 0c             	sub    esp,0xc
c0010a23:	c7 05 e4 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331e4,0x0
c0010a2d:	68 f0 00 00 00       	push   0xf0
c0010a32:	c6 05 ac 31 03 c0 00 	mov    BYTE PTR ds:0xc00331ac,0x0
c0010a39:	6a 00                	push   0x0
c0010a3b:	68 cd 09 01 c0       	push   0xc00109cd
c0010a40:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0010a46:	e8 11 60 00 00       	call   c0016a5c <Process::createThread(void (*)(void*), void*, int)>
c0010a4b:	c7 05 c0 31 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00331c0,0x2
c0010a55:	c7 05 c4 31 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00331c4,0x1
c0010a5f:	c7 05 c8 31 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00331c8,0x3
c0010a69:	c7 05 cc 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331cc,0x0
c0010a73:	c7 05 d8 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331d8,0x0
c0010a7d:	c7 05 d0 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331d0,0x0
c0010a87:	c7 05 dc 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331dc,0x0
c0010a91:	c7 05 d4 31 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00331d4,0x3c
c0010a9b:	c7 05 e0 31 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00331e0,0x3c
c0010aa5:	83 c4 1c             	add    esp,0x1c
c0010aa8:	c3                   	ret    

c0010aa9 <KePrepareShutdown()>:
c0010aa9:	83 ec 0c             	sub    esp,0xc
c0010aac:	e8 6f cc ff ff       	call   c000d720 <KeExecuteAtexit()>
c0010ab1:	83 ec 0c             	sub    esp,0xc
c0010ab4:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0010ab9:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c0010abf:	e8 d0 96 ff ff       	call   c000a194 <Device::closeAll()>
c0010ac4:	83 c4 1c             	add    esp,0x1c
c0010ac7:	c3                   	ret    

c0010ac8 <KeRegisterShutdownHandler(void (*)())>:
c0010ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010acc:	a3 a8 31 03 c0       	mov    ds:0xc00331a8,eax
c0010ad1:	c3                   	ret    

c0010ad2 <KeRegisterRestartHandler(void (*)())>:
c0010ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ad6:	a3 a4 31 03 c0       	mov    ds:0xc00331a4,eax
c0010adb:	c3                   	ret    

c0010adc <KeRegisterSleepHandler(void (*)())>:
c0010adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ae0:	a3 a0 31 03 c0       	mov    ds:0xc00331a0,eax
c0010ae5:	c3                   	ret    

c0010ae6 <KeShutdown()>:
c0010ae6:	83 ec 0c             	sub    esp,0xc
c0010ae9:	e8 bb ff ff ff       	call   c0010aa9 <KePrepareShutdown()>
c0010aee:	a1 a8 31 03 c0       	mov    eax,ds:0xc00331a8
c0010af3:	85 c0                	test   eax,eax
c0010af5:	74 04                	je     c0010afb <KeShutdown()+0x15>
c0010af7:	ff d0                	call   eax
c0010af9:	eb 10                	jmp    c0010b0b <KeShutdown()+0x25>
c0010afb:	83 ec 0c             	sub    esp,0xc
c0010afe:	68 bc 90 02 c0       	push   0xc00290bc
c0010b03:	e8 88 f6 ff ff       	call   c0010190 <KePanic(char const*)>
c0010b08:	83 c4 10             	add    esp,0x10
c0010b0b:	83 ec 0c             	sub    esp,0xc
c0010b0e:	68 dd 90 02 c0       	push   0xc00290dd
c0010b13:	e8 78 f6 ff ff       	call   c0010190 <KePanic(char const*)>
c0010b18:	83 c4 1c             	add    esp,0x1c
c0010b1b:	c3                   	ret    

c0010b1c <KeSleep()>:
c0010b1c:	a1 a0 31 03 c0       	mov    eax,ds:0xc00331a0
c0010b21:	85 c0                	test   eax,eax
c0010b23:	74 02                	je     c0010b27 <KeSleep()+0xb>
c0010b25:	ff e0                	jmp    eax
c0010b27:	c3                   	ret    

c0010b28 <KeHandlePowerButton()>:
c0010b28:	a1 c0 31 03 c0       	mov    eax,ds:0xc00331c0
c0010b2d:	83 f8 02             	cmp    eax,0x2
c0010b30:	75 02                	jne    c0010b34 <KeHandlePowerButton()+0xc>
c0010b32:	eb b2                	jmp    c0010ae6 <KeShutdown()>
c0010b34:	48                   	dec    eax
c0010b35:	75 02                	jne    c0010b39 <KeHandlePowerButton()+0x11>
c0010b37:	eb e3                	jmp    c0010b1c <KeSleep()>
c0010b39:	c3                   	ret    

c0010b3a <KeHandleSleepButton()>:
c0010b3a:	a1 c4 31 03 c0       	mov    eax,ds:0xc00331c4
c0010b3f:	83 f8 02             	cmp    eax,0x2
c0010b42:	75 02                	jne    c0010b46 <KeHandleSleepButton()+0xc>
c0010b44:	eb a0                	jmp    c0010ae6 <KeShutdown()>
c0010b46:	48                   	dec    eax
c0010b47:	75 02                	jne    c0010b4b <KeHandleSleepButton()+0x11>
c0010b49:	eb d1                	jmp    c0010b1c <KeSleep()>
c0010b4b:	c3                   	ret    

c0010b4c <KeRestart()>:
c0010b4c:	83 ec 0c             	sub    esp,0xc
c0010b4f:	e8 55 ff ff ff       	call   c0010aa9 <KePrepareShutdown()>
c0010b54:	a1 a4 31 03 c0       	mov    eax,ds:0xc00331a4
c0010b59:	85 c0                	test   eax,eax
c0010b5b:	74 02                	je     c0010b5f <KeRestart()+0x13>
c0010b5d:	ff d0                	call   eax
c0010b5f:	83 ec 0c             	sub    esp,0xc
c0010b62:	68 01 91 02 c0       	push   0xc0029101
c0010b67:	e8 24 f6 ff ff       	call   c0010190 <KePanic(char const*)>
c0010b6c:	83 c4 1c             	add    esp,0x1c
c0010b6f:	c3                   	ret    

c0010b70 <KeRand()>:
c0010b70:	69 05 e8 31 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00331e8,0x2875
c0010b7a:	69 0d ec 31 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00331ec,0xa2e7b175
c0010b84:	53                   	push   ebx
c0010b85:	01 c1                	add    ecx,eax
c0010b87:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010b8c:	f7 25 e8 31 03 c0    	mul    DWORD PTR ds:0xc00331e8
c0010b92:	01 ca                	add    edx,ecx
c0010b94:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010b99:	83 d2 00             	adc    edx,0x0
c0010b9c:	a3 e8 31 03 c0       	mov    ds:0xc00331e8,eax
c0010ba1:	0f b7 da             	movzx  ebx,dx
c0010ba4:	89 da                	mov    edx,ebx
c0010ba6:	89 1d ec 31 03 c0    	mov    DWORD PTR ds:0xc00331ec,ebx
c0010bac:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010bb0:	5b                   	pop    ebx
c0010bb1:	c3                   	ret    

c0010bb2 <KeSeedRand(unsigned int)>:
c0010bb2:	53                   	push   ebx
c0010bb3:	83 ec 08             	sub    esp,0x8
c0010bb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bba:	e8 9a a4 00 00       	call   c001b059 <HalGetRand()>
c0010bbf:	c7 05 ec 31 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00331ec,0x0
c0010bc9:	31 d8                	xor    eax,ebx
c0010bcb:	a3 e8 31 03 c0       	mov    ds:0xc00331e8,eax
c0010bd0:	e8 9b ff ff ff       	call   c0010b70 <KeRand()>
c0010bd5:	83 c4 08             	add    esp,0x8
c0010bd8:	5b                   	pop    ebx
c0010bd9:	eb 95                	jmp    c0010b70 <KeRand()>

c0010bdb <KeInitRand()>:
c0010bdb:	83 ec 0c             	sub    esp,0xc
c0010bde:	e8 44 a2 00 00       	call   c001ae27 <HalQueryPerformanceCounter()>
c0010be3:	0f 20 da             	mov    edx,cr3
c0010be6:	0f 22 da             	mov    cr3,edx
c0010be9:	0f 20 da             	mov    edx,cr3
c0010bec:	0f 22 da             	mov    cr3,edx
c0010bef:	0f 20 da             	mov    edx,cr3
c0010bf2:	0f 22 da             	mov    cr3,edx
c0010bf5:	0f 20 da             	mov    edx,cr3
c0010bf8:	0f 22 da             	mov    cr3,edx
c0010bfb:	83 ec 0c             	sub    esp,0xc
c0010bfe:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010c03:	50                   	push   eax
c0010c04:	e8 a9 ff ff ff       	call   c0010bb2 <KeSeedRand(unsigned int)>
c0010c09:	83 c4 1c             	add    esp,0x1c
c0010c0c:	c3                   	ret    
c0010c0d:	66 90                	xchg   ax,ax
c0010c0f:	90                   	nop

c0010c10 <KeResolveCompatibilitySymbol(char*)>:
c0010c10:	83 ec 0c             	sub    esp,0xc
c0010c13:	83 ec 08             	sub    esp,0x8
c0010c16:	68 10 91 02 c0       	push   0xc0029110
c0010c1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c1f:	e8 2c fb fe ff       	call   c0000750 <strcmp>
c0010c24:	83 c4 10             	add    esp,0x10
c0010c27:	85 c0                	test   eax,eax
c0010c29:	0f 94 c0             	sete   al
c0010c2c:	0f b6 c0             	movzx  eax,al
c0010c2f:	85 c0                	test   eax,eax
c0010c31:	74 0d                	je     c0010c40 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010c33:	b8 08 31 03 c0       	mov    eax,0xc0033108
c0010c38:	e9 3b 02 00 00       	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c40:	83 ec 08             	sub    esp,0x8
c0010c43:	68 19 91 02 c0       	push   0xc0029119
c0010c48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c4c:	e8 ff fa fe ff       	call   c0000750 <strcmp>
c0010c51:	83 c4 10             	add    esp,0x10
c0010c54:	85 c0                	test   eax,eax
c0010c56:	0f 94 c0             	sete   al
c0010c59:	0f b6 c0             	movzx  eax,al
c0010c5c:	85 c0                	test   eax,eax
c0010c5e:	74 0c                	je     c0010c6c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010c60:	b8 94 23 02 c0       	mov    eax,0xc0022394
c0010c65:	e9 0e 02 00 00       	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010c6a:	66 90                	xchg   ax,ax
c0010c6c:	83 ec 08             	sub    esp,0x8
c0010c6f:	68 23 91 02 c0       	push   0xc0029123
c0010c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c78:	e8 d3 fa fe ff       	call   c0000750 <strcmp>
c0010c7d:	83 c4 10             	add    esp,0x10
c0010c80:	85 c0                	test   eax,eax
c0010c82:	0f 94 c0             	sete   al
c0010c85:	0f b6 c0             	movzx  eax,al
c0010c88:	85 c0                	test   eax,eax
c0010c8a:	74 0c                	je     c0010c98 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010c8c:	b8 08 31 03 c0       	mov    eax,0xc0033108
c0010c91:	e9 e2 01 00 00       	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010c96:	66 90                	xchg   ax,ax
c0010c98:	83 ec 08             	sub    esp,0x8
c0010c9b:	68 36 91 02 c0       	push   0xc0029136
c0010ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ca4:	e8 a7 fa fe ff       	call   c0000750 <strcmp>
c0010ca9:	83 c4 10             	add    esp,0x10
c0010cac:	85 c0                	test   eax,eax
c0010cae:	0f 94 c0             	sete   al
c0010cb1:	0f b6 c0             	movzx  eax,al
c0010cb4:	85 c0                	test   eax,eax
c0010cb6:	74 0c                	je     c0010cc4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010cb8:	b8 c8 20 02 c0       	mov    eax,0xc00220c8
c0010cbd:	e9 b6 01 00 00       	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010cc2:	66 90                	xchg   ax,ax
c0010cc4:	83 ec 08             	sub    esp,0x8
c0010cc7:	68 3f 91 02 c0       	push   0xc002913f
c0010ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cd0:	e8 7b fa fe ff       	call   c0000750 <strcmp>
c0010cd5:	83 c4 10             	add    esp,0x10
c0010cd8:	85 c0                	test   eax,eax
c0010cda:	0f 94 c0             	sete   al
c0010cdd:	0f b6 c0             	movzx  eax,al
c0010ce0:	85 c0                	test   eax,eax
c0010ce2:	74 0c                	je     c0010cf0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010ce4:	b8 90 01 01 c0       	mov    eax,0xc0010190
c0010ce9:	e9 8a 01 00 00       	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010cee:	66 90                	xchg   ax,ax
c0010cf0:	83 ec 08             	sub    esp,0x8
c0010cf3:	68 52 91 02 c0       	push   0xc0029152
c0010cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cfc:	e8 4f fa fe ff       	call   c0000750 <strcmp>
c0010d01:	83 c4 10             	add    esp,0x10
c0010d04:	85 c0                	test   eax,eax
c0010d06:	0f 94 c0             	sete   al
c0010d09:	0f b6 c0             	movzx  eax,al
c0010d0c:	85 c0                	test   eax,eax
c0010d0e:	74 0c                	je     c0010d1c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010d10:	b8 a9 d7 00 c0       	mov    eax,0xc000d7a9
c0010d15:	e9 5e 01 00 00       	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010d1a:	66 90                	xchg   ax,ax
c0010d1c:	83 ec 08             	sub    esp,0x8
c0010d1f:	68 6f 91 02 c0       	push   0xc002916f
c0010d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d28:	e8 23 fa fe ff       	call   c0000750 <strcmp>
c0010d2d:	83 c4 10             	add    esp,0x10
c0010d30:	85 c0                	test   eax,eax
c0010d32:	0f 94 c0             	sete   al
c0010d35:	0f b6 c0             	movzx  eax,al
c0010d38:	85 c0                	test   eax,eax
c0010d3a:	74 0c                	je     c0010d48 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010d3c:	b8 94 24 02 c0       	mov    eax,0xc0022494
c0010d41:	e9 32 01 00 00       	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010d46:	66 90                	xchg   ax,ax
c0010d48:	83 ec 08             	sub    esp,0x8
c0010d4b:	68 79 91 02 c0       	push   0xc0029179
c0010d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d54:	e8 f7 f9 fe ff       	call   c0000750 <strcmp>
c0010d59:	83 c4 10             	add    esp,0x10
c0010d5c:	85 c0                	test   eax,eax
c0010d5e:	0f 94 c0             	sete   al
c0010d61:	0f b6 c0             	movzx  eax,al
c0010d64:	85 c0                	test   eax,eax
c0010d66:	74 0c                	je     c0010d74 <KeResolveCompatibilitySymbol(char*)+0x164>
c0010d68:	b8 14 22 02 c0       	mov    eax,0xc0022214
c0010d6d:	e9 06 01 00 00       	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010d72:	66 90                	xchg   ax,ax
c0010d74:	83 ec 08             	sub    esp,0x8
c0010d77:	68 82 91 02 c0       	push   0xc0029182
c0010d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d80:	e8 cb f9 fe ff       	call   c0000750 <strcmp>
c0010d85:	83 c4 10             	add    esp,0x10
c0010d88:	85 c0                	test   eax,eax
c0010d8a:	0f 94 c0             	sete   al
c0010d8d:	0f b6 c0             	movzx  eax,al
c0010d90:	85 c0                	test   eax,eax
c0010d92:	74 0c                	je     c0010da0 <KeResolveCompatibilitySymbol(char*)+0x190>
c0010d94:	b8 0c 31 03 c0       	mov    eax,0xc003310c
c0010d99:	e9 da 00 00 00       	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010d9e:	66 90                	xchg   ax,ax
c0010da0:	83 ec 08             	sub    esp,0x8
c0010da3:	68 9a 91 02 c0       	push   0xc002919a
c0010da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dac:	e8 9f f9 fe ff       	call   c0000750 <strcmp>
c0010db1:	83 c4 10             	add    esp,0x10
c0010db4:	85 c0                	test   eax,eax
c0010db6:	0f 94 c0             	sete   al
c0010db9:	0f b6 c0             	movzx  eax,al
c0010dbc:	85 c0                	test   eax,eax
c0010dbe:	74 0c                	je     c0010dcc <KeResolveCompatibilitySymbol(char*)+0x1bc>
c0010dc0:	b8 0c 31 03 c0       	mov    eax,0xc003310c
c0010dc5:	e9 ae 00 00 00       	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010dca:	66 90                	xchg   ax,ax
c0010dcc:	83 ec 08             	sub    esp,0x8
c0010dcf:	68 a7 91 02 c0       	push   0xc00291a7
c0010dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd8:	e8 73 f9 fe ff       	call   c0000750 <strcmp>
c0010ddd:	83 c4 10             	add    esp,0x10
c0010de0:	85 c0                	test   eax,eax
c0010de2:	0f 94 c0             	sete   al
c0010de5:	0f b6 c0             	movzx  eax,al
c0010de8:	85 c0                	test   eax,eax
c0010dea:	74 0c                	je     c0010df8 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c0010dec:	b8 0d 31 03 c0       	mov    eax,0xc003310d
c0010df1:	e9 82 00 00 00       	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010df6:	66 90                	xchg   ax,ax
c0010df8:	83 ec 08             	sub    esp,0x8
c0010dfb:	68 b4 91 02 c0       	push   0xc00291b4
c0010e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e04:	e8 47 f9 fe ff       	call   c0000750 <strcmp>
c0010e09:	83 c4 10             	add    esp,0x10
c0010e0c:	85 c0                	test   eax,eax
c0010e0e:	0f 94 c0             	sete   al
c0010e11:	0f b6 c0             	movzx  eax,al
c0010e14:	85 c0                	test   eax,eax
c0010e16:	74 08                	je     c0010e20 <KeResolveCompatibilitySymbol(char*)+0x210>
c0010e18:	b8 0c 31 03 c0       	mov    eax,0xc003310c
c0010e1d:	eb 59                	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010e1f:	90                   	nop
c0010e20:	83 ec 08             	sub    esp,0x8
c0010e23:	68 c5 91 02 c0       	push   0xc00291c5
c0010e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e2c:	e8 1f f9 fe ff       	call   c0000750 <strcmp>
c0010e31:	83 c4 10             	add    esp,0x10
c0010e34:	85 c0                	test   eax,eax
c0010e36:	0f 94 c0             	sete   al
c0010e39:	0f b6 c0             	movzx  eax,al
c0010e3c:	85 c0                	test   eax,eax
c0010e3e:	74 08                	je     c0010e48 <KeResolveCompatibilitySymbol(char*)+0x238>
c0010e40:	b8 0d 31 03 c0       	mov    eax,0xc003310d
c0010e45:	eb 31                	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010e47:	90                   	nop
c0010e48:	83 ec 08             	sub    esp,0x8
c0010e4b:	68 d6 91 02 c0       	push   0xc00291d6
c0010e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e54:	e8 f7 f8 fe ff       	call   c0000750 <strcmp>
c0010e59:	83 c4 10             	add    esp,0x10
c0010e5c:	85 c0                	test   eax,eax
c0010e5e:	0f 94 c0             	sete   al
c0010e61:	0f b6 c0             	movzx  eax,al
c0010e64:	85 c0                	test   eax,eax
c0010e66:	74 08                	je     c0010e70 <KeResolveCompatibilitySymbol(char*)+0x260>
c0010e68:	b8 28 75 01 c0       	mov    eax,0xc0017528
c0010e6d:	eb 09                	jmp    c0010e78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010e6f:	90                   	nop
c0010e70:	b8 00 00 00 00       	mov    eax,0x0
c0010e75:	8d 76 00             	lea    esi,[esi+0x0]
c0010e78:	83 c4 0c             	add    esp,0xc
c0010e7b:	c3                   	ret    

c0010e7c <Semaphore::Semaphore(int)>:
c0010e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e84:	89 10                	mov    DWORD PTR [eax],edx
c0010e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e8a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010e91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ea0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010ea7:	90                   	nop
c0010ea8:	c3                   	ret    
c0010ea9:	90                   	nop
c0010eaa:	66 90                	xchg   ax,ax

c0010eac <Semaphore::tryAcquire()>:
c0010eac:	83 ec 0c             	sub    esp,0xc
c0010eaf:	fa                   	cli    
c0010eb0:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0010eb5:	83 c0 01             	add    eax,0x1
c0010eb8:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0010ebd:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0010ec2:	83 c0 01             	add    eax,0x1
c0010ec5:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0010eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ece:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ed5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ed7:	39 c2                	cmp    edx,eax
c0010ed9:	7d 59                	jge    c0010f34 <Semaphore::tryAcquire()+0x88>
c0010edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010edf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010ee2:	8d 50 01             	lea    edx,[eax+0x1]
c0010ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ee9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010eec:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0010ef1:	83 e8 01             	sub    eax,0x1
c0010ef4:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0010ef9:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0010efe:	85 c0                	test   eax,eax
c0010f00:	75 1a                	jne    c0010f1c <Semaphore::tryAcquire()+0x70>
c0010f02:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c0010f07:	85 c0                	test   eax,eax
c0010f09:	74 11                	je     c0010f1c <Semaphore::tryAcquire()+0x70>
c0010f0b:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c0010f15:	e8 0e 5e 00 00       	call   c0016d28 <schedule()>
c0010f1a:	66 90                	xchg   ax,ax
c0010f1c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0010f24:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0010f29:	85 c0                	test   eax,eax
c0010f2b:	75 03                	jne    c0010f30 <Semaphore::tryAcquire()+0x84>
c0010f2d:	fb                   	sti    
c0010f2e:	66 90                	xchg   ax,ax
c0010f30:	b0 01                	mov    al,0x1
c0010f32:	eb 48                	jmp    c0010f7c <Semaphore::tryAcquire()+0xd0>
c0010f34:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0010f39:	83 e8 01             	sub    eax,0x1
c0010f3c:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0010f41:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0010f46:	85 c0                	test   eax,eax
c0010f48:	75 1a                	jne    c0010f64 <Semaphore::tryAcquire()+0xb8>
c0010f4a:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c0010f4f:	85 c0                	test   eax,eax
c0010f51:	74 11                	je     c0010f64 <Semaphore::tryAcquire()+0xb8>
c0010f53:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c0010f5d:	e8 c6 5d 00 00       	call   c0016d28 <schedule()>
c0010f62:	66 90                	xchg   ax,ax
c0010f64:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0010f6c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0010f71:	85 c0                	test   eax,eax
c0010f73:	75 03                	jne    c0010f78 <Semaphore::tryAcquire()+0xcc>
c0010f75:	fb                   	sti    
c0010f76:	66 90                	xchg   ax,ax
c0010f78:	b0 00                	mov    al,0x0
c0010f7a:	66 90                	xchg   ax,ax
c0010f7c:	83 c4 0c             	add    esp,0xc
c0010f7f:	c3                   	ret    

c0010f80 <Semaphore::assertLocked(char const*)>:
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	fa                   	cli    
c0010f84:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0010f89:	83 c0 01             	add    eax,0x1
c0010f8c:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0010f91:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0010f96:	83 c0 01             	add    eax,0x1
c0010f99:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0010f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fab:	39 c2                	cmp    edx,eax
c0010fad:	7d 11                	jge    c0010fc0 <Semaphore::assertLocked(char const*)+0x40>
c0010faf:	83 ec 0c             	sub    esp,0xc
c0010fb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010fb6:	e8 d5 f1 ff ff       	call   c0010190 <KePanic(char const*)>
c0010fbb:	83 c4 10             	add    esp,0x10
c0010fbe:	66 90                	xchg   ax,ax
c0010fc0:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0010fc5:	83 e8 01             	sub    eax,0x1
c0010fc8:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0010fcd:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0010fd2:	85 c0                	test   eax,eax
c0010fd4:	75 1a                	jne    c0010ff0 <Semaphore::assertLocked(char const*)+0x70>
c0010fd6:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c0010fdb:	85 c0                	test   eax,eax
c0010fdd:	74 11                	je     c0010ff0 <Semaphore::assertLocked(char const*)+0x70>
c0010fdf:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c0010fe9:	e8 3a 5d 00 00       	call   c0016d28 <schedule()>
c0010fee:	66 90                	xchg   ax,ax
c0010ff0:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0010ff8:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0010ffd:	85 c0                	test   eax,eax
c0010fff:	75 03                	jne    c0011004 <Semaphore::assertLocked(char const*)+0x84>
c0011001:	fb                   	sti    
c0011002:	66 90                	xchg   ax,ax
c0011004:	90                   	nop
c0011005:	83 c4 0c             	add    esp,0xc
c0011008:	c3                   	ret    
c0011009:	90                   	nop
c001100a:	66 90                	xchg   ax,ax

c001100c <Semaphore::acquire(int)>:
c001100c:	83 ec 1c             	sub    esp,0x1c
c001100f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011014:	0f 84 ae 00 00 00    	je     c00110c8 <Semaphore::acquire(int)+0xbc>
c001101a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011022:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0011027:	90                   	nop
c0011028:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c001102d:	85 c0                	test   eax,eax
c001102f:	0f 84 87 00 00 00    	je     c00110bc <Semaphore::acquire(int)+0xb0>
c0011035:	83 ec 0c             	sub    esp,0xc
c0011038:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001103c:	e8 6b fe ff ff       	call   c0010eac <Semaphore::tryAcquire()>
c0011041:	83 c4 10             	add    esp,0x10
c0011044:	83 f0 01             	xor    eax,0x1
c0011047:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001104b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001104f:	83 f0 01             	xor    eax,0x1
c0011052:	0f b6 c0             	movzx  eax,al
c0011055:	85 c0                	test   eax,eax
c0011057:	75 5f                	jne    c00110b8 <Semaphore::acquire(int)+0xac>
c0011059:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c001105e:	7f 34                	jg     c0011094 <Semaphore::acquire(int)+0x88>
c0011060:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011064:	89 d0                	mov    eax,edx
c0011066:	c1 e0 02             	shl    eax,0x2
c0011069:	01 d0                	add    eax,edx
c001106b:	01 c0                	add    eax,eax
c001106d:	89 c2                	mov    edx,eax
c001106f:	c1 fa 1f             	sar    edx,0x1f
c0011072:	83 ec 08             	sub    esp,0x8
c0011075:	52                   	push   edx
c0011076:	50                   	push   eax
c0011077:	e8 a0 5e 00 00       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c001107c:	83 c4 10             	add    esp,0x10
c001107f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011083:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0011087:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001108f:	eb 97                	jmp    c0011028 <Semaphore::acquire(int)+0x1c>
c0011091:	8d 76 00             	lea    esi,[esi+0x0]
c0011094:	83 ec 08             	sub    esp,0x8
c0011097:	6a 00                	push   0x0
c0011099:	68 90 01 00 00       	push   0x190
c001109e:	e8 79 5e 00 00       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c00110a3:	83 c4 10             	add    esp,0x10
c00110a6:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c00110ab:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c00110b0:	e9 73 ff ff ff       	jmp    c0011028 <Semaphore::acquire(int)+0x1c>
c00110b5:	8d 76 00             	lea    esi,[esi+0x0]
c00110b8:	90                   	nop
c00110b9:	8d 76 00             	lea    esi,[esi+0x0]
c00110bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110c0:	e9 fb 00 00 00       	jmp    c00111c0 <Semaphore::acquire(int)+0x1b4>
c00110c5:	8d 76 00             	lea    esi,[esi+0x0]
c00110c8:	fa                   	cli    
c00110c9:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00110ce:	83 c0 01             	add    eax,0x1
c00110d1:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00110d6:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00110db:	83 c0 01             	add    eax,0x1
c00110de:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c00110e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110e7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00110ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00110f0:	39 c2                	cmp    edx,eax
c00110f2:	7d 14                	jge    c0011108 <Semaphore::acquire(int)+0xfc>
c00110f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110fb:	8d 50 01             	lea    edx,[eax+0x1]
c00110fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011102:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011105:	eb 6d                	jmp    c0011174 <Semaphore::acquire(int)+0x168>
c0011107:	90                   	nop
c0011108:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001110d:	8b 00                	mov    eax,DWORD PTR [eax]
c001110f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0011116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001111a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001111d:	85 c0                	test   eax,eax
c001111f:	75 13                	jne    c0011134 <Semaphore::acquire(int)+0x128>
c0011121:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011126:	8b 10                	mov    edx,DWORD PTR [eax]
c0011128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001112c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001112f:	eb 17                	jmp    c0011148 <Semaphore::acquire(int)+0x13c>
c0011131:	8d 76 00             	lea    esi,[esi+0x0]
c0011134:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0011139:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001113d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011140:	8b 12                	mov    edx,DWORD PTR [edx]
c0011142:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011145:	8d 76 00             	lea    esi,[esi+0x0]
c0011148:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001114d:	8b 10                	mov    edx,DWORD PTR [eax]
c001114f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011153:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011156:	83 ec 0c             	sub    esp,0xc
c0011159:	68 ec 91 02 c0       	push   0xc00291ec
c001115e:	e8 19 5e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011163:	83 c4 10             	add    esp,0x10
c0011166:	83 ec 0c             	sub    esp,0xc
c0011169:	6a 05                	push   0x5
c001116b:	e8 78 5c 00 00       	call   c0016de8 <blockTask(TaskState)>
c0011170:	83 c4 10             	add    esp,0x10
c0011173:	90                   	nop
c0011174:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011179:	83 e8 01             	sub    eax,0x1
c001117c:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0011181:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0011186:	85 c0                	test   eax,eax
c0011188:	75 1a                	jne    c00111a4 <Semaphore::acquire(int)+0x198>
c001118a:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c001118f:	85 c0                	test   eax,eax
c0011191:	74 11                	je     c00111a4 <Semaphore::acquire(int)+0x198>
c0011193:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c001119d:	e8 86 5b 00 00       	call   c0016d28 <schedule()>
c00111a2:	66 90                	xchg   ax,ax
c00111a4:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00111ac:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00111b1:	85 c0                	test   eax,eax
c00111b3:	75 03                	jne    c00111b8 <Semaphore::acquire(int)+0x1ac>
c00111b5:	fb                   	sti    
c00111b6:	66 90                	xchg   ax,ax
c00111b8:	b8 00 00 00 00       	mov    eax,0x0
c00111bd:	8d 76 00             	lea    esi,[esi+0x0]
c00111c0:	83 c4 1c             	add    esp,0x1c
c00111c3:	c3                   	ret    

c00111c4 <Semaphore::acquire()>:
c00111c4:	83 ec 0c             	sub    esp,0xc
c00111c7:	83 ec 08             	sub    esp,0x8
c00111ca:	6a 00                	push   0x0
c00111cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111d0:	e8 37 fe ff ff       	call   c001100c <Semaphore::acquire(int)>
c00111d5:	83 c4 10             	add    esp,0x10
c00111d8:	90                   	nop
c00111d9:	83 c4 0c             	add    esp,0xc
c00111dc:	c3                   	ret    
c00111dd:	90                   	nop
c00111de:	66 90                	xchg   ax,ax

c00111e0 <Semaphore::release()>:
c00111e0:	83 ec 1c             	sub    esp,0x1c
c00111e3:	fa                   	cli    
c00111e4:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00111e9:	83 c0 01             	add    eax,0x1
c00111ec:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00111f1:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00111f6:	83 c0 01             	add    eax,0x1
c00111f9:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c00111fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011202:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011205:	85 c0                	test   eax,eax
c0011207:	74 2b                	je     c0011234 <Semaphore::release()+0x54>
c0011209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001120d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011210:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011214:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011218:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001121b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001121f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011222:	83 ec 0c             	sub    esp,0xc
c0011225:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011229:	e8 56 5e 00 00       	call   c0017084 <unblockTask(ThreadControlBlock*)>
c001122e:	83 c4 10             	add    esp,0x10
c0011231:	eb 15                	jmp    c0011248 <Semaphore::release()+0x68>
c0011233:	90                   	nop
c0011234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011238:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001123b:	8d 50 ff             	lea    edx,[eax-0x1]
c001123e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011242:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011245:	8d 76 00             	lea    esi,[esi+0x0]
c0011248:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c001124d:	83 e8 01             	sub    eax,0x1
c0011250:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0011255:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c001125a:	85 c0                	test   eax,eax
c001125c:	75 1a                	jne    c0011278 <Semaphore::release()+0x98>
c001125e:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c0011263:	85 c0                	test   eax,eax
c0011265:	74 11                	je     c0011278 <Semaphore::release()+0x98>
c0011267:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c0011271:	e8 b2 5a 00 00       	call   c0016d28 <schedule()>
c0011276:	66 90                	xchg   ax,ax
c0011278:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0011280:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0011285:	85 c0                	test   eax,eax
c0011287:	75 03                	jne    c001128c <Semaphore::release()+0xac>
c0011289:	fb                   	sti    
c001128a:	66 90                	xchg   ax,ax
c001128c:	90                   	nop
c001128d:	83 c4 1c             	add    esp,0x1c
c0011290:	c3                   	ret    

c0011291 <KiSigKill(int)>:
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	6a 00                	push   0x0
c0011296:	6a 00                	push   0x0
c0011298:	6a ff                	push   0xffffffff
c001129a:	6a 01                	push   0x1
c001129c:	e8 b1 cd 01 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00112a1:	83 c4 1c             	add    esp,0x1c
c00112a4:	c3                   	ret    

c00112a5 <KiDefaultSignalHandlerIgnore(int)>:
c00112a5:	c3                   	ret    

c00112a6 <KiDefaultSignalHandlerPause(int)>:
c00112a6:	57                   	push   edi
c00112a7:	b9 07 00 00 00       	mov    ecx,0x7
c00112ac:	56                   	push   esi
c00112ad:	be 47 92 02 c0       	mov    esi,0xc0029247
c00112b2:	83 ec 24             	sub    esp,0x24
c00112b5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00112b9:	fc                   	cld    
c00112ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00112bc:	8d 44 24 04          	lea    eax,[esp+0x4]
c00112c0:	50                   	push   eax
c00112c1:	6a 00                	push   0x0
c00112c3:	6a 00                	push   0x0
c00112c5:	6a 27                	push   0x27
c00112c7:	e8 86 cd 01 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00112cc:	83 c4 34             	add    esp,0x34
c00112cf:	5e                   	pop    esi
c00112d0:	5f                   	pop    edi
c00112d1:	c3                   	ret    

c00112d2 <KiDefaultSignalHandlerResume(int)>:
c00112d2:	57                   	push   edi
c00112d3:	b9 1d 00 00 00       	mov    ecx,0x1d
c00112d8:	56                   	push   esi
c00112d9:	be 63 92 02 c0       	mov    esi,0xc0029263
c00112de:	83 ec 24             	sub    esp,0x24
c00112e1:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00112e5:	fc                   	cld    
c00112e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112e8:	8d 44 24 03          	lea    eax,[esp+0x3]
c00112ec:	50                   	push   eax
c00112ed:	6a 00                	push   0x0
c00112ef:	6a 00                	push   0x0
c00112f1:	6a 27                	push   0x27
c00112f3:	e8 5a cd 01 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00112f8:	83 c4 34             	add    esp,0x34
c00112fb:	5e                   	pop    esi
c00112fc:	5f                   	pop    edi
c00112fd:	c3                   	ret    

c00112fe <KeDeinitSignals(SigHandlerBlock*)>:
c00112fe:	e9 48 ea ff ff       	jmp    c000fd4b <free>

c0011303 <KeInitSignals()>:
c0011303:	53                   	push   ebx
c0011304:	83 ec 14             	sub    esp,0x14
c0011307:	68 c8 00 00 00       	push   0xc8
c001130c:	e8 2a ea ff ff       	call   c000fd3b <malloc>
c0011311:	83 c4 0c             	add    esp,0xc
c0011314:	89 c3                	mov    ebx,eax
c0011316:	6a 04                	push   0x4
c0011318:	6a 00                	push   0x0
c001131a:	50                   	push   eax
c001131b:	e8 d0 f1 fe ff       	call   c00004f0 <memset>
c0011320:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c001132a:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0011334:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001133b:	83 c4 0c             	add    esp,0xc
c001133e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0011344:	6a 20                	push   0x20
c0011346:	6a 00                	push   0x0
c0011348:	50                   	push   eax
c0011349:	e8 a2 f1 fe ff       	call   c00004f0 <memset>
c001134e:	83 c4 0c             	add    esp,0xc
c0011351:	6a 44                	push   0x44
c0011353:	6a 00                	push   0x0
c0011355:	53                   	push   ebx
c0011356:	e8 95 f1 fe ff       	call   c00004f0 <memset>
c001135b:	83 c4 0c             	add    esp,0xc
c001135e:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0011364:	6a 11                	push   0x11
c0011366:	6a 00                	push   0x0
c0011368:	50                   	push   eax
c0011369:	e8 82 f1 fe ff       	call   c00004f0 <memset>
c001136e:	89 d8                	mov    eax,ebx
c0011370:	83 c4 18             	add    esp,0x18
c0011373:	5b                   	pop    ebx
c0011374:	c3                   	ret    

c0011375 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011375:	53                   	push   ebx
c0011376:	b8 01 00 00 00       	mov    eax,0x1
c001137b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001137f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011383:	83 f9 10             	cmp    ecx,0x10
c0011386:	7f 21                	jg     c00113a9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011388:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001138b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001138f:	89 03                	mov    DWORD PTR [ebx],eax
c0011391:	b8 01 00 00 00       	mov    eax,0x1
c0011396:	d3 e0                	shl    eax,cl
c0011398:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001139c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001139f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00113a7:	31 c0                	xor    eax,eax
c00113a9:	5b                   	pop    ebx
c00113aa:	c3                   	ret    

c00113ab <KeRaiseSignal(SigHandlerBlock*, int)>:
c00113ab:	55                   	push   ebp
c00113ac:	57                   	push   edi
c00113ad:	bf 08 00 00 00       	mov    edi,0x8
c00113b2:	56                   	push   esi
c00113b3:	53                   	push   ebx
c00113b4:	83 ec 14             	sub    esp,0x14
c00113b7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00113bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00113bf:	68 80 92 02 c0       	push   0xc0029280
c00113c4:	e8 b3 5b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00113c9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00113d0:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00113d6:	83 c4 10             	add    esp,0x10
c00113d9:	31 c9                	xor    ecx,ecx
c00113db:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00113df:	99                   	cdq    
c00113e0:	f7 ff                	idiv   edi
c00113e2:	8d 42 24             	lea    eax,[edx+0x24]
c00113e5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00113e9:	85 f6                	test   esi,esi
c00113eb:	75 1a                	jne    c0011407 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c00113ed:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113f1:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c00113f5:	50                   	push   eax
c00113f6:	50                   	push   eax
c00113f7:	52                   	push   edx
c00113f8:	68 96 92 02 c0       	push   0xc0029296
c00113fd:	e8 7a 5b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011402:	83 c4 10             	add    esp,0x10
c0011405:	eb 1b                	jmp    c0011422 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0011407:	41                   	inc    ecx
c0011408:	83 f9 08             	cmp    ecx,0x8
c001140b:	75 ce                	jne    c00113db <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c001140d:	83 ec 0c             	sub    esp,0xc
c0011410:	be 01 00 00 00       	mov    esi,0x1
c0011415:	68 b7 92 02 c0       	push   0xc00292b7
c001141a:	e8 5d 5b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	83 c4 0c             	add    esp,0xc
c0011425:	89 f0                	mov    eax,esi
c0011427:	5b                   	pop    ebx
c0011428:	5e                   	pop    esi
c0011429:	5f                   	pop    edi
c001142a:	5d                   	pop    ebp
c001142b:	c3                   	ret    

c001142c <KeCheckSignal(SigHandlerBlock*, int*)>:
c001142c:	55                   	push   ebp
c001142d:	57                   	push   edi
c001142e:	56                   	push   esi
c001142f:	53                   	push   ebx
c0011430:	83 ec 1c             	sub    esp,0x1c
c0011433:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011437:	85 db                	test   ebx,ebx
c0011439:	0f 84 e0 00 00 00    	je     c001151f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001143f:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011446:	0f 84 d3 00 00 00    	je     c001151f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001144c:	31 c9                	xor    ecx,ecx
c001144e:	bf 08 00 00 00       	mov    edi,0x8
c0011453:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011459:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001145c:	99                   	cdq    
c001145d:	f7 ff                	idiv   edi
c001145f:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011466:	85 ed                	test   ebp,ebp
c0011468:	0f 84 d2 00 00 00    	je     c0011540 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c001146e:	89 e9                	mov    ecx,ebp
c0011470:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011476:	bf 01 00 00 00       	mov    edi,0x1
c001147b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001147f:	d3 e7                	shl    edi,cl
c0011481:	31 c9                	xor    ecx,ecx
c0011483:	b8 01 00 00 00       	mov    eax,0x1
c0011488:	d3 e0                	shl    eax,cl
c001148a:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c001148e:	74 0a                	je     c001149a <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0011490:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011494:	0f 85 85 00 00 00    	jne    c001151f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001149a:	41                   	inc    ecx
c001149b:	83 f9 11             	cmp    ecx,0x11
c001149e:	75 e3                	jne    c0011483 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c00114a0:	46                   	inc    esi
c00114a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114a5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00114ab:	09 f8                	or     eax,edi
c00114ad:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00114b8:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00114be:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00114c5:	31 c0                	xor    eax,eax
c00114c7:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00114cf:	74 09                	je     c00114da <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c00114d1:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00114d8:	eb 06                	jmp    c00114e0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c00114da:	40                   	inc    eax
c00114db:	83 f8 08             	cmp    eax,0x8
c00114de:	75 e7                	jne    c00114c7 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c00114e0:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00114e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00114e7:	83 fd 09             	cmp    ebp,0x9
c00114ea:	89 2a                	mov    DWORD PTR [edx],ebp
c00114ec:	75 14                	jne    c0011502 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c00114ee:	83 ec 0c             	sub    esp,0xc
c00114f1:	68 c8 92 02 c0       	push   0xc00292c8
c00114f6:	e8 81 5a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00114fb:	b8 91 12 01 c0       	mov    eax,0xc0011291
c0011500:	eb 39                	jmp    c001153b <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011502:	83 f8 01             	cmp    eax,0x1
c0011505:	75 1c                	jne    c0011523 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011507:	83 ec 0c             	sub    esp,0xc
c001150a:	f7 d7                	not    edi
c001150c:	68 d2 92 02 c0       	push   0xc00292d2
c0011511:	e8 66 5a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011516:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001151c:	83 c4 10             	add    esp,0x10
c001151f:	31 c0                	xor    eax,eax
c0011521:	eb 30                	jmp    c0011553 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011523:	85 c0                	test   eax,eax
c0011525:	75 2c                	jne    c0011553 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011527:	83 ec 0c             	sub    esp,0xc
c001152a:	68 df 92 02 c0       	push   0xc00292df
c001152f:	e8 48 5a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011534:	8b 04 ad 00 c5 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd3b00]
c001153b:	83 c4 10             	add    esp,0x10
c001153e:	eb 13                	jmp    c0011553 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011540:	46                   	inc    esi
c0011541:	41                   	inc    ecx
c0011542:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011548:	83 f9 08             	cmp    ecx,0x8
c001154b:	0f 85 02 ff ff ff    	jne    c0011453 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011551:	eb cc                	jmp    c001151f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011553:	83 c4 1c             	add    esp,0x1c
c0011556:	5b                   	pop    ebx
c0011557:	5e                   	pop    esi
c0011558:	5f                   	pop    edi
c0011559:	5d                   	pop    ebp
c001155a:	c3                   	ret    

c001155b <KiCheckSignalZ>:
c001155b:	80 3d 0c 31 03 c0 00 	cmp    BYTE PTR ds:0xc003310c,0x0
c0011562:	74 43                	je     c00115a7 <KiCheckSignalZ+0x4c>
c0011564:	83 ec 24             	sub    esp,0x24
c0011567:	8d 44 24 14          	lea    eax,[esp+0x14]
c001156b:	50                   	push   eax
c001156c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011571:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011574:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001157a:	e8 ad fe ff ff       	call   c001142c <KeCheckSignal(SigHandlerBlock*, int*)>
c001157f:	83 c4 10             	add    esp,0x10
c0011582:	31 d2                	xor    edx,edx
c0011584:	85 c0                	test   eax,eax
c0011586:	74 19                	je     c00115a1 <KiCheckSignalZ+0x46>
c0011588:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001158e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011591:	89 02                	mov    DWORD PTR [edx],eax
c0011593:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001159a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001159e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00115a1:	89 d0                	mov    eax,edx
c00115a3:	83 c4 1c             	add    esp,0x1c
c00115a6:	c3                   	ret    
c00115a7:	31 d2                	xor    edx,edx
c00115a9:	89 d0                	mov    eax,edx
c00115ab:	c3                   	ret    

c00115ac <KeCompleteSignal(SigHandlerBlock*, int)>:
c00115ac:	56                   	push   esi
c00115ad:	53                   	push   ebx
c00115ae:	bb 01 00 00 00       	mov    ebx,0x1
c00115b3:	52                   	push   edx
c00115b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00115b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00115bc:	d3 e3                	shl    ebx,cl
c00115be:	83 f9 10             	cmp    ecx,0x10
c00115c1:	7f 08                	jg     c00115cb <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00115c3:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00115c9:	75 10                	jne    c00115db <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00115cb:	83 ec 0c             	sub    esp,0xc
c00115ce:	68 02 93 02 c0       	push   0xc0029302
c00115d3:	e8 b8 eb ff ff       	call   c0010190 <KePanic(char const*)>
c00115d8:	83 c4 10             	add    esp,0x10
c00115db:	f7 d3                	not    ebx
c00115dd:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00115e3:	58                   	pop    eax
c00115e4:	5b                   	pop    ebx
c00115e5:	5e                   	pop    esi
c00115e6:	c3                   	ret    

c00115e7 <KiFinishSignalZ>:
c00115e7:	53                   	push   ebx
c00115e8:	83 ec 08             	sub    esp,0x8
c00115eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00115f7:	83 fa 08             	cmp    edx,0x8
c00115fa:	75 0c                	jne    c0011608 <KiFinishSignalZ+0x21>
c00115fc:	83 ec 0c             	sub    esp,0xc
c00115ff:	50                   	push   eax
c0011600:	e8 7f 5a 00 00       	call   c0017084 <unblockTask(ThreadControlBlock*)>
c0011605:	83 c4 10             	add    esp,0x10
c0011608:	50                   	push   eax
c0011609:	50                   	push   eax
c001160a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001160d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011612:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011615:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001161b:	e8 8c ff ff ff       	call   c00115ac <KeCompleteSignal(SigHandlerBlock*, int)>
c0011620:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011626:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001162d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011634:	83 c4 18             	add    esp,0x18
c0011637:	5b                   	pop    ebx
c0011638:	c3                   	ret    

c0011639 <SysSeekDir(regs*)>:
c0011639:	31 c0                	xor    eax,eax
c001163b:	31 d2                	xor    edx,edx
c001163d:	c3                   	ret    

c001163e <SysTellDir(regs*)>:
c001163e:	31 c0                	xor    eax,eax
c0011640:	31 d2                	xor    edx,edx
c0011642:	c3                   	ret    

c0011643 <SysVerify(regs*)>:
c0011643:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011647:	31 d2                	xor    edx,edx
c0011649:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001164c:	c3                   	ret    

c001164d <SysGetArgc(regs*)>:
c001164d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011652:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011655:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c001165b:	89 c2                	mov    edx,eax
c001165d:	c1 fa 1f             	sar    edx,0x1f
c0011660:	c3                   	ret    

c0011661 <SysTTYName(regs*)>:
c0011661:	b8 01 00 00 00       	mov    eax,0x1
c0011666:	31 d2                	xor    edx,edx
c0011668:	c3                   	ret    

c0011669 <SysFormatDisk(regs*)>:
c0011669:	56                   	push   esi
c001166a:	53                   	push   ebx
c001166b:	83 ec 04             	sub    esp,0x4
c001166e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011672:	8b 1d 04 23 03 c0    	mov    ebx,DWORD PTR ds:0xc0032304
c0011678:	eb 28                	jmp    c00116a2 <SysFormatDisk(regs*)+0x39>
c001167a:	83 ec 0c             	sub    esp,0xc
c001167d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011680:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011683:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011685:	51                   	push   ecx
c0011686:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011689:	51                   	push   ecx
c001168a:	50                   	push   eax
c001168b:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c0011692:	50                   	push   eax
c0011693:	53                   	push   ebx
c0011694:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011697:	83 c4 20             	add    esp,0x20
c001169a:	83 f8 08             	cmp    eax,0x8
c001169d:	75 14                	jne    c00116b3 <SysFormatDisk(regs*)+0x4a>
c001169f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00116a2:	85 db                	test   ebx,ebx
c00116a4:	75 d4                	jne    c001167a <SysFormatDisk(regs*)+0x11>
c00116a6:	83 c4 04             	add    esp,0x4
c00116a9:	b8 03 00 00 00       	mov    eax,0x3
c00116ae:	31 d2                	xor    edx,edx
c00116b0:	5b                   	pop    ebx
c00116b1:	5e                   	pop    esi
c00116b2:	c3                   	ret    
c00116b3:	85 c0                	test   eax,eax
c00116b5:	74 1f                	je     c00116d6 <SysFormatDisk(regs*)+0x6d>
c00116b7:	83 f8 09             	cmp    eax,0x9
c00116ba:	74 0d                	je     c00116c9 <SysFormatDisk(regs*)+0x60>
c00116bc:	83 c4 04             	add    esp,0x4
c00116bf:	b8 02 00 00 00       	mov    eax,0x2
c00116c4:	31 d2                	xor    edx,edx
c00116c6:	5b                   	pop    ebx
c00116c7:	5e                   	pop    esi
c00116c8:	c3                   	ret    
c00116c9:	83 c4 04             	add    esp,0x4
c00116cc:	b8 01 00 00 00       	mov    eax,0x1
c00116d1:	31 d2                	xor    edx,edx
c00116d3:	5b                   	pop    ebx
c00116d4:	5e                   	pop    esi
c00116d5:	c3                   	ret    
c00116d6:	83 c4 04             	add    esp,0x4
c00116d9:	31 c0                	xor    eax,eax
c00116db:	31 d2                	xor    edx,edx
c00116dd:	5b                   	pop    ebx
c00116de:	5e                   	pop    esi
c00116df:	c3                   	ret    

c00116e0 <SysSetDiskVolumeLabel(regs*)>:
c00116e0:	56                   	push   esi
c00116e1:	53                   	push   ebx
c00116e2:	83 ec 04             	sub    esp,0x4
c00116e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00116e9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00116ec:	83 f8 19             	cmp    eax,0x19
c00116ef:	77 33                	ja     c0011724 <SysSetDiskVolumeLabel(regs*)+0x44>
c00116f1:	8b 0c 85 e0 2a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd520]
c00116f8:	85 c9                	test   ecx,ecx
c00116fa:	74 28                	je     c0011724 <SysSetDiskVolumeLabel(regs*)+0x44>
c00116fc:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00116ff:	85 db                	test   ebx,ebx
c0011701:	74 21                	je     c0011724 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011703:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011709:	85 d2                	test   edx,edx
c001170b:	74 17                	je     c0011724 <SysSetDiskVolumeLabel(regs*)+0x44>
c001170d:	8b 32                	mov    esi,DWORD PTR [edx]
c001170f:	53                   	push   ebx
c0011710:	50                   	push   eax
c0011711:	51                   	push   ecx
c0011712:	52                   	push   edx
c0011713:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011716:	83 c4 10             	add    esp,0x10
c0011719:	89 c2                	mov    edx,eax
c001171b:	83 c4 04             	add    esp,0x4
c001171e:	c1 fa 1f             	sar    edx,0x1f
c0011721:	5b                   	pop    ebx
c0011722:	5e                   	pop    esi
c0011723:	c3                   	ret    
c0011724:	83 c4 04             	add    esp,0x4
c0011727:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001172c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011731:	5b                   	pop    ebx
c0011732:	5e                   	pop    esi
c0011733:	c3                   	ret    

c0011734 <SysGetDiskVolumeLabel(regs*)>:
c0011734:	57                   	push   edi
c0011735:	56                   	push   esi
c0011736:	53                   	push   ebx
c0011737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001173b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001173e:	83 fa 19             	cmp    edx,0x19
c0011741:	77 3c                	ja     c001177f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011743:	8b 0c 95 e0 2a 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffcd520]
c001174a:	85 c9                	test   ecx,ecx
c001174c:	74 31                	je     c001177f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001174e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011751:	85 db                	test   ebx,ebx
c0011753:	74 2a                	je     c001177f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011755:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011758:	85 f6                	test   esi,esi
c001175a:	74 23                	je     c001177f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001175c:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011762:	85 c0                	test   eax,eax
c0011764:	74 19                	je     c001177f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011766:	83 ec 0c             	sub    esp,0xc
c0011769:	8b 38                	mov    edi,DWORD PTR [eax]
c001176b:	56                   	push   esi
c001176c:	53                   	push   ebx
c001176d:	52                   	push   edx
c001176e:	51                   	push   ecx
c001176f:	50                   	push   eax
c0011770:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011773:	83 c4 20             	add    esp,0x20
c0011776:	89 c2                	mov    edx,eax
c0011778:	5b                   	pop    ebx
c0011779:	c1 fa 1f             	sar    edx,0x1f
c001177c:	5e                   	pop    esi
c001177d:	5f                   	pop    edi
c001177e:	c3                   	ret    
c001177f:	5b                   	pop    ebx
c0011780:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011785:	ba ff ff ff ff       	mov    edx,0xffffffff
c001178a:	5e                   	pop    esi
c001178b:	5f                   	pop    edi
c001178c:	c3                   	ret    

c001178d <SysRealpath(regs*)>:
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011794:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011797:	85 d2                	test   edx,edx
c0011799:	74 07                	je     c00117a2 <SysRealpath(regs*)+0x15>
c001179b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001179e:	85 c0                	test   eax,eax
c00117a0:	75 0b                	jne    c00117ad <SysRealpath(regs*)+0x20>
c00117a2:	b8 01 00 00 00       	mov    eax,0x1
c00117a7:	31 d2                	xor    edx,edx
c00117a9:	83 c4 0c             	add    esp,0xc
c00117ac:	c3                   	ret    
c00117ad:	6a 00                	push   0x0
c00117af:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00117b5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00117b8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00117be:	51                   	push   ecx
c00117bf:	52                   	push   edx
c00117c0:	50                   	push   eax
c00117c1:	e8 84 6b ff ff       	call   c000834a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00117c6:	83 c4 10             	add    esp,0x10
c00117c9:	31 c0                	xor    eax,eax
c00117cb:	31 d2                	xor    edx,edx
c00117cd:	83 c4 0c             	add    esp,0xc
c00117d0:	c3                   	ret    

c00117d1 <SysReadDir(regs*)>:
c00117d1:	53                   	push   ebx
c00117d2:	83 ec 18             	sub    esp,0x18
c00117d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00117d9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00117dc:	83 f8 02             	cmp    eax,0x2
c00117df:	76 61                	jbe    c0011842 <SysReadDir(regs*)+0x71>
c00117e1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00117e8:	77 49                	ja     c0011833 <SysReadDir(regs*)+0x62>
c00117ea:	83 ec 0c             	sub    esp,0xc
c00117ed:	50                   	push   eax
c00117ee:	e8 d6 1d 00 00       	call   c00135c9 <KeGetFileFromDescriptor(int)>
c00117f3:	83 c4 10             	add    esp,0x10
c00117f6:	85 c0                	test   eax,eax
c00117f8:	74 39                	je     c0011833 <SysReadDir(regs*)+0x62>
c00117fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011802:	83 ec 0c             	sub    esp,0xc
c0011805:	8b 10                	mov    edx,DWORD PTR [eax]
c0011807:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001180b:	51                   	push   ecx
c001180c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001180f:	51                   	push   ecx
c0011810:	6a 00                	push   0x0
c0011812:	68 10 01 00 00       	push   0x110
c0011817:	50                   	push   eax
c0011818:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001181b:	83 c4 20             	add    esp,0x20
c001181e:	85 c0                	test   eax,eax
c0011820:	74 29                	je     c001184b <SysReadDir(regs*)+0x7a>
c0011822:	83 f8 07             	cmp    eax,0x7
c0011825:	74 1b                	je     c0011842 <SysReadDir(regs*)+0x71>
c0011827:	b8 02 00 00 00       	mov    eax,0x2
c001182c:	31 d2                	xor    edx,edx
c001182e:	83 c4 18             	add    esp,0x18
c0011831:	5b                   	pop    ebx
c0011832:	c3                   	ret    
c0011833:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011838:	ba ff ff ff ff       	mov    edx,0xffffffff
c001183d:	83 c4 18             	add    esp,0x18
c0011840:	5b                   	pop    ebx
c0011841:	c3                   	ret    
c0011842:	b8 01 00 00 00       	mov    eax,0x1
c0011847:	31 d2                	xor    edx,edx
c0011849:	eb e3                	jmp    c001182e <SysReadDir(regs*)+0x5d>
c001184b:	31 c0                	xor    eax,eax
c001184d:	31 d2                	xor    edx,edx
c001184f:	eb dd                	jmp    c001182e <SysReadDir(regs*)+0x5d>

c0011851 <SysIsATTY(regs*)>:
c0011851:	83 ec 0c             	sub    esp,0xc
c0011854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011858:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001185b:	83 f8 02             	cmp    eax,0x2
c001185e:	76 07                	jbe    c0011867 <SysIsATTY(regs*)+0x16>
c0011860:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011865:	75 26                	jne    c001188d <SysIsATTY(regs*)+0x3c>
c0011867:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001186c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001186f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011875:	85 c0                	test   eax,eax
c0011877:	74 24                	je     c001189d <SysIsATTY(regs*)+0x4c>
c0011879:	83 ec 0c             	sub    esp,0xc
c001187c:	8b 10                	mov    edx,DWORD PTR [eax]
c001187e:	50                   	push   eax
c001187f:	ff 12                	call   DWORD PTR [edx]
c0011881:	31 d2                	xor    edx,edx
c0011883:	0f b6 c0             	movzx  eax,al
c0011886:	83 c4 10             	add    esp,0x10
c0011889:	83 c4 0c             	add    esp,0xc
c001188c:	c3                   	ret    
c001188d:	83 ec 0c             	sub    esp,0xc
c0011890:	50                   	push   eax
c0011891:	e8 33 1d 00 00       	call   c00135c9 <KeGetFileFromDescriptor(int)>
c0011896:	83 c4 10             	add    esp,0x10
c0011899:	85 c0                	test   eax,eax
c001189b:	75 dc                	jne    c0011879 <SysIsATTY(regs*)+0x28>
c001189d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118a7:	83 c4 0c             	add    esp,0xc
c00118aa:	c3                   	ret    

c00118ab <SysSeek(regs*)>:
c00118ab:	53                   	push   ebx
c00118ac:	83 ec 08             	sub    esp,0x8
c00118af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00118b6:	8d 50 fd             	lea    edx,[eax-0x3]
c00118b9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00118bf:	77 39                	ja     c00118fa <SysSeek(regs*)+0x4f>
c00118c1:	83 ec 0c             	sub    esp,0xc
c00118c4:	50                   	push   eax
c00118c5:	e8 ff 1c 00 00       	call   c00135c9 <KeGetFileFromDescriptor(int)>
c00118ca:	83 c4 10             	add    esp,0x10
c00118cd:	85 c0                	test   eax,eax
c00118cf:	74 29                	je     c00118fa <SysSeek(regs*)+0x4f>
c00118d1:	83 ec 04             	sub    esp,0x4
c00118d4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00118d7:	31 db                	xor    ebx,ebx
c00118d9:	53                   	push   ebx
c00118da:	51                   	push   ecx
c00118db:	50                   	push   eax
c00118dc:	e8 5d 6e ff ff       	call   c000873e <File::seek(unsigned long long)>
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	85 c0                	test   eax,eax
c00118e6:	0f 95 c0             	setne  al
c00118e9:	31 d2                	xor    edx,edx
c00118eb:	0f b6 c0             	movzx  eax,al
c00118ee:	f7 d8                	neg    eax
c00118f0:	83 d2 00             	adc    edx,0x0
c00118f3:	83 c4 08             	add    esp,0x8
c00118f6:	f7 da                	neg    edx
c00118f8:	5b                   	pop    ebx
c00118f9:	c3                   	ret    
c00118fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011904:	83 c4 08             	add    esp,0x8
c0011907:	5b                   	pop    ebx
c0011908:	c3                   	ret    

c0011909 <SysTell(regs*)>:
c0011909:	53                   	push   ebx
c001190a:	83 ec 08             	sub    esp,0x8
c001190d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011911:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011914:	83 f8 02             	cmp    eax,0x2
c0011917:	76 56                	jbe    c001196f <SysTell(regs*)+0x66>
c0011919:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001191e:	76 19                	jbe    c0011939 <SysTell(regs*)+0x30>
c0011920:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011923:	31 d2                	xor    edx,edx
c0011925:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001192b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011932:	31 c0                	xor    eax,eax
c0011934:	83 c4 08             	add    esp,0x8
c0011937:	5b                   	pop    ebx
c0011938:	c3                   	ret    
c0011939:	83 ec 0c             	sub    esp,0xc
c001193c:	50                   	push   eax
c001193d:	e8 87 1c 00 00       	call   c00135c9 <KeGetFileFromDescriptor(int)>
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	85 c0                	test   eax,eax
c0011947:	74 26                	je     c001196f <SysTell(regs*)+0x66>
c0011949:	83 ec 08             	sub    esp,0x8
c001194c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001194f:	52                   	push   edx
c0011950:	50                   	push   eax
c0011951:	e8 94 6e ff ff       	call   c00087ea <File::tell(unsigned long long*)>
c0011956:	83 c4 10             	add    esp,0x10
c0011959:	85 c0                	test   eax,eax
c001195b:	0f 95 c0             	setne  al
c001195e:	31 d2                	xor    edx,edx
c0011960:	0f b6 c0             	movzx  eax,al
c0011963:	f7 d8                	neg    eax
c0011965:	83 d2 00             	adc    edx,0x0
c0011968:	83 c4 08             	add    esp,0x8
c001196b:	f7 da                	neg    edx
c001196d:	5b                   	pop    ebx
c001196e:	c3                   	ret    
c001196f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011974:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011979:	83 c4 08             	add    esp,0x8
c001197c:	5b                   	pop    ebx
c001197d:	c3                   	ret    

c001197e <SysSize(regs*)>:
c001197e:	53                   	push   ebx
c001197f:	83 ec 18             	sub    esp,0x18
c0011982:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011986:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011989:	83 f8 02             	cmp    eax,0x2
c001198c:	76 5b                	jbe    c00119e9 <SysSize(regs*)+0x6b>
c001198e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011993:	76 19                	jbe    c00119ae <SysSize(regs*)+0x30>
c0011995:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011998:	31 d2                	xor    edx,edx
c001199a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00119a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119a7:	31 c0                	xor    eax,eax
c00119a9:	83 c4 18             	add    esp,0x18
c00119ac:	5b                   	pop    ebx
c00119ad:	c3                   	ret    
c00119ae:	83 ec 0c             	sub    esp,0xc
c00119b1:	50                   	push   eax
c00119b2:	e8 12 1c 00 00       	call   c00135c9 <KeGetFileFromDescriptor(int)>
c00119b7:	83 c4 10             	add    esp,0x10
c00119ba:	85 c0                	test   eax,eax
c00119bc:	74 2b                	je     c00119e9 <SysSize(regs*)+0x6b>
c00119be:	83 ec 04             	sub    esp,0x4
c00119c1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00119c5:	52                   	push   edx
c00119c6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00119c9:	52                   	push   edx
c00119ca:	50                   	push   eax
c00119cb:	e8 b2 6f ff ff       	call   c0008982 <File::stat(unsigned long long*, bool*)>
c00119d0:	83 c4 10             	add    esp,0x10
c00119d3:	85 c0                	test   eax,eax
c00119d5:	0f 95 c0             	setne  al
c00119d8:	31 d2                	xor    edx,edx
c00119da:	0f b6 c0             	movzx  eax,al
c00119dd:	f7 d8                	neg    eax
c00119df:	83 d2 00             	adc    edx,0x0
c00119e2:	83 c4 18             	add    esp,0x18
c00119e5:	f7 da                	neg    edx
c00119e7:	5b                   	pop    ebx
c00119e8:	c3                   	ret    
c00119e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119f3:	83 c4 18             	add    esp,0x18
c00119f6:	5b                   	pop    ebx
c00119f7:	c3                   	ret    

c00119f8 <SysSizeFromFilename(regs*)>:
c00119f8:	55                   	push   ebp
c00119f9:	57                   	push   edi
c00119fa:	56                   	push   esi
c00119fb:	53                   	push   ebx
c00119fc:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011a02:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011a09:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a0c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a0f:	85 f6                	test   esi,esi
c0011a11:	74 34                	je     c0011a47 <SysSizeFromFilename(regs*)+0x4f>
c0011a13:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011a19:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a1c:	83 f8 02             	cmp    eax,0x2
c0011a1f:	76 2d                	jbe    c0011a4e <SysSizeFromFilename(regs*)+0x56>
c0011a21:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011a26:	76 3b                	jbe    c0011a63 <SysSizeFromFilename(regs*)+0x6b>
c0011a28:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011a2b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011a31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a38:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011a3e:	31 c0                	xor    eax,eax
c0011a40:	5b                   	pop    ebx
c0011a41:	31 d2                	xor    edx,edx
c0011a43:	5e                   	pop    esi
c0011a44:	5f                   	pop    edi
c0011a45:	5d                   	pop    ebp
c0011a46:	c3                   	ret    
c0011a47:	89 f8                	mov    eax,edi
c0011a49:	83 f8 02             	cmp    eax,0x2
c0011a4c:	77 d3                	ja     c0011a21 <SysSizeFromFilename(regs*)+0x29>
c0011a4e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011a54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a59:	5b                   	pop    ebx
c0011a5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a5f:	5e                   	pop    esi
c0011a60:	5f                   	pop    edi
c0011a61:	5d                   	pop    ebp
c0011a62:	c3                   	ret    
c0011a63:	83 ec 0c             	sub    esp,0xc
c0011a66:	68 14 01 00 00       	push   0x114
c0011a6b:	e8 cb e2 ff ff       	call   c000fd3b <malloc>
c0011a70:	6a 01                	push   0x1
c0011a72:	89 c5                	mov    ebp,eax
c0011a74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a79:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a7c:	50                   	push   eax
c0011a7d:	57                   	push   edi
c0011a7e:	55                   	push   ebp
c0011a7f:	e8 e0 6a ff ff       	call   c0008564 <File::File(char const*, Process*, bool)>
c0011a84:	83 c4 20             	add    esp,0x20
c0011a87:	85 ed                	test   ebp,ebp
c0011a89:	74 c3                	je     c0011a4e <SysSizeFromFilename(regs*)+0x56>
c0011a8b:	83 ec 04             	sub    esp,0x4
c0011a8e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011a92:	50                   	push   eax
c0011a93:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011a96:	51                   	push   ecx
c0011a97:	55                   	push   ebp
c0011a98:	e8 e5 6e ff ff       	call   c0008982 <File::stat(unsigned long long*, bool*)>
c0011a9d:	89 c3                	mov    ebx,eax
c0011a9f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011aa2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011aa5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011aa8:	83 c4 10             	add    esp,0x10
c0011aab:	85 db                	test   ebx,ebx
c0011aad:	75 9f                	jne    c0011a4e <SysSizeFromFilename(regs*)+0x56>
c0011aaf:	6a 00                	push   0x0
c0011ab1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ab6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ab9:	05 0c 01 00 00       	add    eax,0x10c
c0011abe:	50                   	push   eax
c0011abf:	57                   	push   edi
c0011ac0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011ac7:	53                   	push   ebx
c0011ac8:	e8 7d 68 ff ff       	call   c000834a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011acd:	58                   	pop    eax
c0011ace:	5a                   	pop    edx
c0011acf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011ad3:	50                   	push   eax
c0011ad4:	53                   	push   ebx
c0011ad5:	e8 f7 62 ff ff       	call   c0007dd1 <KeDereferenceSymlink(char const*, char*)>
c0011ada:	83 c4 10             	add    esp,0x10
c0011add:	83 f8 01             	cmp    eax,0x1
c0011ae0:	74 1a                	je     c0011afc <SysSizeFromFilename(regs*)+0x104>
c0011ae2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011ae7:	74 26                	je     c0011b0f <SysSizeFromFilename(regs*)+0x117>
c0011ae9:	85 f6                	test   esi,esi
c0011aeb:	0f 84 47 ff ff ff    	je     c0011a38 <SysSizeFromFilename(regs*)+0x40>
c0011af1:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011af7:	e9 3c ff ff ff       	jmp    c0011a38 <SysSizeFromFilename(regs*)+0x40>
c0011afc:	85 f6                	test   esi,esi
c0011afe:	0f 84 34 ff ff ff    	je     c0011a38 <SysSizeFromFilename(regs*)+0x40>
c0011b04:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011b0a:	e9 29 ff ff ff       	jmp    c0011a38 <SysSizeFromFilename(regs*)+0x40>
c0011b0f:	85 f6                	test   esi,esi
c0011b11:	0f 84 21 ff ff ff    	je     c0011a38 <SysSizeFromFilename(regs*)+0x40>
c0011b17:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011b1d:	e9 16 ff ff ff       	jmp    c0011a38 <SysSizeFromFilename(regs*)+0x40>

c0011b22 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011b22:	55                   	push   ebp
c0011b23:	57                   	push   edi
c0011b24:	56                   	push   esi
c0011b25:	53                   	push   ebx
c0011b26:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011b2c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011b33:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b36:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b39:	85 f6                	test   esi,esi
c0011b3b:	74 34                	je     c0011b71 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0011b3d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011b43:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b46:	83 f8 02             	cmp    eax,0x2
c0011b49:	76 2d                	jbe    c0011b78 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011b4b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011b50:	76 3b                	jbe    c0011b8d <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0011b52:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011b55:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011b5b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011b62:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011b68:	31 c0                	xor    eax,eax
c0011b6a:	5b                   	pop    ebx
c0011b6b:	31 d2                	xor    edx,edx
c0011b6d:	5e                   	pop    esi
c0011b6e:	5f                   	pop    edi
c0011b6f:	5d                   	pop    ebp
c0011b70:	c3                   	ret    
c0011b71:	89 f8                	mov    eax,edi
c0011b73:	83 f8 02             	cmp    eax,0x2
c0011b76:	77 d3                	ja     c0011b4b <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011b78:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011b7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b83:	5b                   	pop    ebx
c0011b84:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b89:	5e                   	pop    esi
c0011b8a:	5f                   	pop    edi
c0011b8b:	5d                   	pop    ebp
c0011b8c:	c3                   	ret    
c0011b8d:	83 ec 0c             	sub    esp,0xc
c0011b90:	68 14 01 00 00       	push   0x114
c0011b95:	e8 a1 e1 ff ff       	call   c000fd3b <malloc>
c0011b9a:	6a 00                	push   0x0
c0011b9c:	89 c5                	mov    ebp,eax
c0011b9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ba3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ba6:	50                   	push   eax
c0011ba7:	57                   	push   edi
c0011ba8:	55                   	push   ebp
c0011ba9:	e8 b6 69 ff ff       	call   c0008564 <File::File(char const*, Process*, bool)>
c0011bae:	83 c4 20             	add    esp,0x20
c0011bb1:	85 ed                	test   ebp,ebp
c0011bb3:	74 c3                	je     c0011b78 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011bb5:	83 ec 04             	sub    esp,0x4
c0011bb8:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011bbc:	50                   	push   eax
c0011bbd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011bc0:	51                   	push   ecx
c0011bc1:	55                   	push   ebp
c0011bc2:	e8 bb 6d ff ff       	call   c0008982 <File::stat(unsigned long long*, bool*)>
c0011bc7:	89 c3                	mov    ebx,eax
c0011bc9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011bcc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011bcf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bd2:	83 c4 10             	add    esp,0x10
c0011bd5:	85 db                	test   ebx,ebx
c0011bd7:	75 9f                	jne    c0011b78 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011bd9:	6a 00                	push   0x0
c0011bdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011be3:	05 0c 01 00 00       	add    eax,0x10c
c0011be8:	50                   	push   eax
c0011be9:	57                   	push   edi
c0011bea:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011bf1:	53                   	push   ebx
c0011bf2:	e8 53 67 ff ff       	call   c000834a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011bf7:	58                   	pop    eax
c0011bf8:	5a                   	pop    edx
c0011bf9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011bfd:	50                   	push   eax
c0011bfe:	53                   	push   ebx
c0011bff:	e8 cd 61 ff ff       	call   c0007dd1 <KeDereferenceSymlink(char const*, char*)>
c0011c04:	83 c4 10             	add    esp,0x10
c0011c07:	83 f8 01             	cmp    eax,0x1
c0011c0a:	74 1a                	je     c0011c26 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c0011c0c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011c11:	74 26                	je     c0011c39 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c0011c13:	85 f6                	test   esi,esi
c0011c15:	0f 84 47 ff ff ff    	je     c0011b62 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011c1b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011c21:	e9 3c ff ff ff       	jmp    c0011b62 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011c26:	85 f6                	test   esi,esi
c0011c28:	0f 84 34 ff ff ff    	je     c0011b62 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011c2e:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011c34:	e9 29 ff ff ff       	jmp    c0011b62 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011c39:	85 f6                	test   esi,esi
c0011c3b:	0f 84 21 ff ff ff    	je     c0011b62 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011c41:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011c47:	e9 16 ff ff ff       	jmp    c0011b62 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0011c4c <SysClose(regs*)>:
c0011c4c:	53                   	push   ebx
c0011c4d:	83 ec 08             	sub    esp,0x8
c0011c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c54:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c57:	83 f8 02             	cmp    eax,0x2
c0011c5a:	76 41                	jbe    c0011c9d <SysClose(regs*)+0x51>
c0011c5c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011c62:	83 fa 01             	cmp    edx,0x1
c0011c65:	76 2d                	jbe    c0011c94 <SysClose(regs*)+0x48>
c0011c67:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c6c:	77 2f                	ja     c0011c9d <SysClose(regs*)+0x51>
c0011c6e:	83 ec 0c             	sub    esp,0xc
c0011c71:	50                   	push   eax
c0011c72:	e8 52 19 00 00       	call   c00135c9 <KeGetFileFromDescriptor(int)>
c0011c77:	83 c4 10             	add    esp,0x10
c0011c7a:	89 c3                	mov    ebx,eax
c0011c7c:	85 c0                	test   eax,eax
c0011c7e:	74 1d                	je     c0011c9d <SysClose(regs*)+0x51>
c0011c80:	83 ec 0c             	sub    esp,0xc
c0011c83:	50                   	push   eax
c0011c84:	e8 55 6a ff ff       	call   c00086de <File::close()>
c0011c89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011c8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011c91:	83 c4 10             	add    esp,0x10
c0011c94:	31 c0                	xor    eax,eax
c0011c96:	31 d2                	xor    edx,edx
c0011c98:	83 c4 08             	add    esp,0x8
c0011c9b:	5b                   	pop    ebx
c0011c9c:	c3                   	ret    
c0011c9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ca2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ca7:	83 c4 08             	add    esp,0x8
c0011caa:	5b                   	pop    ebx
c0011cab:	c3                   	ret    

c0011cac <SysOpenDir(regs*)>:
c0011cac:	56                   	push   esi
c0011cad:	53                   	push   ebx
c0011cae:	83 ec 04             	sub    esp,0x4
c0011cb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cb5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011cb8:	85 c9                	test   ecx,ecx
c0011cba:	74 5d                	je     c0011d19 <SysOpenDir(regs*)+0x6d>
c0011cbc:	83 ec 0c             	sub    esp,0xc
c0011cbf:	68 14 01 00 00       	push   0x114
c0011cc4:	e8 72 e0 ff ff       	call   c000fd3b <malloc>
c0011cc9:	83 c4 0c             	add    esp,0xc
c0011ccc:	89 c6                	mov    esi,eax
c0011cce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cd3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011cd6:	50                   	push   eax
c0011cd7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011cda:	52                   	push   edx
c0011cdb:	56                   	push   esi
c0011cdc:	e8 61 6e ff ff       	call   c0008b42 <Directory::Directory(char const*, Process*)>
c0011ce1:	83 c4 10             	add    esp,0x10
c0011ce4:	85 f6                	test   esi,esi
c0011ce6:	74 31                	je     c0011d19 <SysOpenDir(regs*)+0x6d>
c0011ce8:	83 ec 0c             	sub    esp,0xc
c0011ceb:	56                   	push   esi
c0011cec:	e8 19 6f ff ff       	call   c0008c0a <Directory::open()>
c0011cf1:	83 c4 10             	add    esp,0x10
c0011cf4:	85 c0                	test   eax,eax
c0011cf6:	75 21                	jne    c0011d19 <SysOpenDir(regs*)+0x6d>
c0011cf8:	83 ec 0c             	sub    esp,0xc
c0011cfb:	56                   	push   esi
c0011cfc:	e8 cb 15 00 00       	call   c00132cc <UnixFile::getFileDescriptor()>
c0011d01:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	89 02                	mov    DWORD PTR [edx],eax
c0011d09:	c1 f8 1f             	sar    eax,0x1f
c0011d0c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011d0f:	83 c4 04             	add    esp,0x4
c0011d12:	31 c0                	xor    eax,eax
c0011d14:	31 d2                	xor    edx,edx
c0011d16:	5b                   	pop    ebx
c0011d17:	5e                   	pop    esi
c0011d18:	c3                   	ret    
c0011d19:	83 c4 04             	add    esp,0x4
c0011d1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d21:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d26:	5b                   	pop    ebx
c0011d27:	5e                   	pop    esi
c0011d28:	c3                   	ret    

c0011d29 <SysMakeDir(regs*)>:
c0011d29:	56                   	push   esi
c0011d2a:	53                   	push   ebx
c0011d2b:	83 ec 10             	sub    esp,0x10
c0011d2e:	68 14 01 00 00       	push   0x114
c0011d33:	e8 03 e0 ff ff       	call   c000fd3b <malloc>
c0011d38:	83 c4 0c             	add    esp,0xc
c0011d3b:	89 c3                	mov    ebx,eax
c0011d3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d45:	50                   	push   eax
c0011d46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d4a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011d4d:	52                   	push   edx
c0011d4e:	53                   	push   ebx
c0011d4f:	e8 ee 6d ff ff       	call   c0008b42 <Directory::Directory(char const*, Process*)>
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	85 db                	test   ebx,ebx
c0011d59:	74 2c                	je     c0011d87 <SysMakeDir(regs*)+0x5e>
c0011d5b:	83 ec 0c             	sub    esp,0xc
c0011d5e:	53                   	push   ebx
c0011d5f:	e8 86 70 ff ff       	call   c0008dea <Directory::create()>
c0011d64:	89 c6                	mov    esi,eax
c0011d66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011d6b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d6e:	83 c4 10             	add    esp,0x10
c0011d71:	31 c0                	xor    eax,eax
c0011d73:	85 f6                	test   esi,esi
c0011d75:	0f 95 c0             	setne  al
c0011d78:	31 d2                	xor    edx,edx
c0011d7a:	f7 d8                	neg    eax
c0011d7c:	83 d2 00             	adc    edx,0x0
c0011d7f:	83 c4 04             	add    esp,0x4
c0011d82:	f7 da                	neg    edx
c0011d84:	5b                   	pop    ebx
c0011d85:	5e                   	pop    esi
c0011d86:	c3                   	ret    
c0011d87:	83 c4 04             	add    esp,0x4
c0011d8a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d94:	5b                   	pop    ebx
c0011d95:	5e                   	pop    esi
c0011d96:	c3                   	ret    

c0011d97 <SysCloseDir(regs*)>:
c0011d97:	53                   	push   ebx
c0011d98:	83 ec 08             	sub    esp,0x8
c0011d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011da2:	8d 50 fd             	lea    edx,[eax-0x3]
c0011da5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011dab:	77 2f                	ja     c0011ddc <SysCloseDir(regs*)+0x45>
c0011dad:	83 ec 0c             	sub    esp,0xc
c0011db0:	50                   	push   eax
c0011db1:	e8 13 18 00 00       	call   c00135c9 <KeGetFileFromDescriptor(int)>
c0011db6:	83 c4 10             	add    esp,0x10
c0011db9:	89 c3                	mov    ebx,eax
c0011dbb:	85 c0                	test   eax,eax
c0011dbd:	74 1d                	je     c0011ddc <SysCloseDir(regs*)+0x45>
c0011dbf:	83 ec 0c             	sub    esp,0xc
c0011dc2:	50                   	push   eax
c0011dc3:	e8 9e 6e ff ff       	call   c0008c66 <Directory::close()>
c0011dc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011dca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011dcd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011dd0:	83 c4 10             	add    esp,0x10
c0011dd3:	31 c0                	xor    eax,eax
c0011dd5:	31 d2                	xor    edx,edx
c0011dd7:	83 c4 08             	add    esp,0x8
c0011dda:	5b                   	pop    ebx
c0011ddb:	c3                   	ret    
c0011ddc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011de1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011de6:	83 c4 08             	add    esp,0x8
c0011de9:	5b                   	pop    ebx
c0011dea:	c3                   	ret    

c0011deb <SysWait(regs*)>:
c0011deb:	83 ec 10             	sub    esp,0x10
c0011dee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011df2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011df5:	52                   	push   edx
c0011df6:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011df9:	51                   	push   ecx
c0011dfa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011dfd:	50                   	push   eax
c0011dfe:	e8 21 50 00 00       	call   c0016e24 <waitTask(int, int*, int)>
c0011e03:	83 c4 1c             	add    esp,0x1c
c0011e06:	89 c2                	mov    edx,eax
c0011e08:	c1 fa 1f             	sar    edx,0x1f
c0011e0b:	c3                   	ret    

c0011e0c <SysNotImpl(regs*)>:
c0011e0c:	83 ec 18             	sub    esp,0x18
c0011e0f:	68 13 93 02 c0       	push   0xc0029313
c0011e14:	e8 77 e3 ff ff       	call   c0010190 <KePanic(char const*)>
c0011e19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e23:	83 c4 1c             	add    esp,0x1c
c0011e26:	c3                   	ret    

c0011e27 <SysPanic(regs*)>:
c0011e27:	83 ec 18             	sub    esp,0x18
c0011e2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e2e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011e31:	50                   	push   eax
c0011e32:	e8 59 e3 ff ff       	call   c0010190 <KePanic(char const*)>
c0011e37:	b8 01 00 00 00       	mov    eax,0x1
c0011e3c:	31 d2                	xor    edx,edx
c0011e3e:	83 c4 1c             	add    esp,0x1c
c0011e41:	c3                   	ret    

c0011e42 <SysRmdir(regs*)>:
c0011e42:	56                   	push   esi
c0011e43:	53                   	push   ebx
c0011e44:	83 ec 20             	sub    esp,0x20
c0011e47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e4b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011e4e:	68 14 01 00 00       	push   0x114
c0011e53:	e8 e3 de ff ff       	call   c000fd3b <malloc>
c0011e58:	6a 00                	push   0x0
c0011e5a:	89 c3                	mov    ebx,eax
c0011e5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e61:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e64:	50                   	push   eax
c0011e65:	56                   	push   esi
c0011e66:	53                   	push   ebx
c0011e67:	e8 f8 66 ff ff       	call   c0008564 <File::File(char const*, Process*, bool)>
c0011e6c:	83 c4 14             	add    esp,0x14
c0011e6f:	53                   	push   ebx
c0011e70:	e8 d9 69 ff ff       	call   c000884e <File::unlink()>
c0011e75:	83 c4 10             	add    esp,0x10
c0011e78:	85 db                	test   ebx,ebx
c0011e7a:	74 14                	je     c0011e90 <SysRmdir(regs*)+0x4e>
c0011e7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e80:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011e82:	83 ec 0c             	sub    esp,0xc
c0011e85:	53                   	push   ebx
c0011e86:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011e89:	83 c4 10             	add    esp,0x10
c0011e8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e90:	85 c0                	test   eax,eax
c0011e92:	0f 95 c0             	setne  al
c0011e95:	31 d2                	xor    edx,edx
c0011e97:	0f b6 c0             	movzx  eax,al
c0011e9a:	f7 d8                	neg    eax
c0011e9c:	83 d2 00             	adc    edx,0x0
c0011e9f:	83 c4 14             	add    esp,0x14
c0011ea2:	f7 da                	neg    edx
c0011ea4:	5b                   	pop    ebx
c0011ea5:	5e                   	pop    esi
c0011ea6:	c3                   	ret    

c0011ea7 <SysUnlink(regs*)>:
c0011ea7:	56                   	push   esi
c0011ea8:	53                   	push   ebx
c0011ea9:	83 ec 20             	sub    esp,0x20
c0011eac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eb0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011eb3:	68 14 01 00 00       	push   0x114
c0011eb8:	e8 7e de ff ff       	call   c000fd3b <malloc>
c0011ebd:	6a 00                	push   0x0
c0011ebf:	89 c3                	mov    ebx,eax
c0011ec1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ec6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ec9:	50                   	push   eax
c0011eca:	56                   	push   esi
c0011ecb:	53                   	push   ebx
c0011ecc:	e8 93 66 ff ff       	call   c0008564 <File::File(char const*, Process*, bool)>
c0011ed1:	83 c4 14             	add    esp,0x14
c0011ed4:	53                   	push   ebx
c0011ed5:	e8 74 69 ff ff       	call   c000884e <File::unlink()>
c0011eda:	83 c4 10             	add    esp,0x10
c0011edd:	85 db                	test   ebx,ebx
c0011edf:	74 14                	je     c0011ef5 <SysUnlink(regs*)+0x4e>
c0011ee1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ee5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011ee7:	83 ec 0c             	sub    esp,0xc
c0011eea:	53                   	push   ebx
c0011eeb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011eee:	83 c4 10             	add    esp,0x10
c0011ef1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ef5:	85 c0                	test   eax,eax
c0011ef7:	0f 95 c0             	setne  al
c0011efa:	31 d2                	xor    edx,edx
c0011efc:	0f b6 c0             	movzx  eax,al
c0011eff:	f7 d8                	neg    eax
c0011f01:	83 d2 00             	adc    edx,0x0
c0011f04:	83 c4 14             	add    esp,0x14
c0011f07:	f7 da                	neg    edx
c0011f09:	5b                   	pop    ebx
c0011f0a:	5e                   	pop    esi
c0011f0b:	c3                   	ret    

c0011f0c <SysGetArgv(regs*)>:
c0011f0c:	83 ec 0c             	sub    esp,0xc
c0011f0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011f13:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011f16:	85 c0                	test   eax,eax
c0011f18:	78 2c                	js     c0011f46 <SysGetArgv(regs*)+0x3a>
c0011f1a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011f20:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011f23:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011f29:	7d 1b                	jge    c0011f46 <SysGetArgv(regs*)+0x3a>
c0011f2b:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011f32:	85 c0                	test   eax,eax
c0011f34:	74 18                	je     c0011f4e <SysGetArgv(regs*)+0x42>
c0011f36:	83 ec 08             	sub    esp,0x8
c0011f39:	50                   	push   eax
c0011f3a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011f3d:	50                   	push   eax
c0011f3e:	e8 fd e6 fe ff       	call   c0000640 <strcpy>
c0011f43:	83 c4 10             	add    esp,0x10
c0011f46:	31 c0                	xor    eax,eax
c0011f48:	31 d2                	xor    edx,edx
c0011f4a:	83 c4 0c             	add    esp,0xc
c0011f4d:	c3                   	ret    
c0011f4e:	b8 01 00 00 00       	mov    eax,0x1
c0011f53:	31 d2                	xor    edx,edx
c0011f55:	83 c4 0c             	add    esp,0xc
c0011f58:	c3                   	ret    

c0011f59 <SysUSleep(regs*)>:
c0011f59:	83 ec 1c             	sub    esp,0x1c
c0011f5c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011f60:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011f63:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011f66:	6a 00                	push   0x0
c0011f68:	6a 64                	push   0x64
c0011f6a:	52                   	push   edx
c0011f6b:	50                   	push   eax
c0011f6c:	e8 23 04 01 00       	call   c0022394 <__udivdi3>
c0011f71:	83 c4 18             	add    esp,0x18
c0011f74:	52                   	push   edx
c0011f75:	50                   	push   eax
c0011f76:	e8 a1 4f 00 00       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c0011f7b:	31 c0                	xor    eax,eax
c0011f7d:	31 d2                	xor    edx,edx
c0011f7f:	83 c4 1c             	add    esp,0x1c
c0011f82:	c3                   	ret    

c0011f83 <SysSpawn(regs*)>:
c0011f83:	56                   	push   esi
c0011f84:	53                   	push   ebx
c0011f85:	83 ec 04             	sub    esp,0x4
c0011f88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f8c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011f8f:	85 f6                	test   esi,esi
c0011f91:	75 0a                	jne    c0011f9d <SysSpawn(regs*)+0x1a>
c0011f93:	83 c4 04             	add    esp,0x4
c0011f96:	31 c0                	xor    eax,eax
c0011f98:	31 d2                	xor    edx,edx
c0011f9a:	5b                   	pop    ebx
c0011f9b:	5e                   	pop    esi
c0011f9c:	c3                   	ret    
c0011f9d:	83 ec 0c             	sub    esp,0xc
c0011fa0:	68 c4 07 00 00       	push   0x7c4
c0011fa5:	e8 91 dd ff ff       	call   c000fd3b <malloc>
c0011faa:	83 c4 10             	add    esp,0x10
c0011fad:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011fb0:	89 c6                	mov    esi,eax
c0011fb2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011fb5:	85 c9                	test   ecx,ecx
c0011fb7:	74 39                	je     c0011ff2 <SysSpawn(regs*)+0x6f>
c0011fb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fbe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011fc1:	52                   	push   edx
c0011fc2:	50                   	push   eax
c0011fc3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011fc6:	50                   	push   eax
c0011fc7:	56                   	push   esi
c0011fc8:	e8 17 46 00 00       	call   c00165e4 <Process::Process(char const*, Process*, char**)>
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011fd7:	75 ba                	jne    c0011f93 <SysSpawn(regs*)+0x10>
c0011fd9:	83 ec 0c             	sub    esp,0xc
c0011fdc:	56                   	push   esi
c0011fdd:	e8 de 4b 00 00       	call   c0016bc0 <Process::createUserThread()>
c0011fe2:	8b 06                	mov    eax,DWORD PTR [esi]
c0011fe4:	83 c4 10             	add    esp,0x10
c0011fe7:	89 c2                	mov    edx,eax
c0011fe9:	83 c4 04             	add    esp,0x4
c0011fec:	c1 fa 1f             	sar    edx,0x1f
c0011fef:	5b                   	pop    ebx
c0011ff0:	5e                   	pop    esi
c0011ff1:	c3                   	ret    
c0011ff2:	31 c0                	xor    eax,eax
c0011ff4:	eb cb                	jmp    c0011fc1 <SysSpawn(regs*)+0x3e>

c0011ff6 <SysGetEnv(regs*)>:
c0011ff6:	57                   	push   edi
c0011ff7:	56                   	push   esi
c0011ff8:	53                   	push   ebx
c0011ff9:	83 ec 1c             	sub    esp,0x1c
c0011ffc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012000:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012005:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012008:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001200b:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c001200e:	51                   	push   ecx
c001200f:	e8 2f cb ff ff       	call   c000eb43 <KeGetProcessTotalEnvCount(Process*)>
c0012014:	83 c4 10             	add    esp,0x10
c0012017:	39 c7                	cmp    edi,eax
c0012019:	7c 14                	jl     c001202f <SysGetEnv(regs*)+0x39>
c001201b:	85 f6                	test   esi,esi
c001201d:	75 0b                	jne    c001202a <SysGetEnv(regs*)+0x34>
c001201f:	83 c4 10             	add    esp,0x10
c0012022:	31 c0                	xor    eax,eax
c0012024:	5b                   	pop    ebx
c0012025:	31 d2                	xor    edx,edx
c0012027:	5e                   	pop    esi
c0012028:	5f                   	pop    edi
c0012029:	c3                   	ret    
c001202a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001202d:	eb f0                	jmp    c001201f <SysGetEnv(regs*)+0x29>
c001202f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012033:	83 ec 04             	sub    esp,0x4
c0012036:	57                   	push   edi
c0012037:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001203d:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0012040:	57                   	push   edi
c0012041:	50                   	push   eax
c0012042:	e8 1c cb ff ff       	call   c000eb63 <KeGetProcessEnvPair(Process*, int)>
c0012047:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001204a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001204e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012052:	83 c4 0c             	add    esp,0xc
c0012055:	85 d2                	test   edx,edx
c0012057:	75 23                	jne    c001207c <SysGetEnv(regs*)+0x86>
c0012059:	83 ec 0c             	sub    esp,0xc
c001205c:	50                   	push   eax
c001205d:	e8 0e e5 fe ff       	call   c0000570 <strlen>
c0012062:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012065:	89 c3                	mov    ebx,eax
c0012067:	e8 04 e5 fe ff       	call   c0000570 <strlen>
c001206c:	83 c4 10             	add    esp,0x10
c001206f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012073:	83 c4 10             	add    esp,0x10
c0012076:	31 d2                	xor    edx,edx
c0012078:	5b                   	pop    ebx
c0012079:	5e                   	pop    esi
c001207a:	5f                   	pop    edi
c001207b:	c3                   	ret    
c001207c:	83 ec 08             	sub    esp,0x8
c001207f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012082:	50                   	push   eax
c0012083:	56                   	push   esi
c0012084:	e8 b7 e5 fe ff       	call   c0000640 <strcpy>
c0012089:	58                   	pop    eax
c001208a:	5a                   	pop    edx
c001208b:	68 2d 93 02 c0       	push   0xc002932d
c0012090:	56                   	push   esi
c0012091:	e8 aa e7 fe ff       	call   c0000840 <strcat>
c0012096:	59                   	pop    ecx
c0012097:	5b                   	pop    ebx
c0012098:	57                   	push   edi
c0012099:	56                   	push   esi
c001209a:	e8 a1 e7 fe ff       	call   c0000840 <strcat>
c001209f:	83 c4 10             	add    esp,0x10
c00120a2:	e9 78 ff ff ff       	jmp    c001201f <SysGetEnv(regs*)+0x29>

c00120a7 <SysSetFatAttrib(regs*)>:
c00120a7:	57                   	push   edi
c00120a8:	56                   	push   esi
c00120a9:	53                   	push   ebx
c00120aa:	83 ec 1c             	sub    esp,0x1c
c00120ad:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00120b1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00120b4:	68 14 01 00 00       	push   0x114
c00120b9:	e8 7d dc ff ff       	call   c000fd3b <malloc>
c00120be:	83 c4 0c             	add    esp,0xc
c00120c1:	89 c3                	mov    ebx,eax
c00120c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120cb:	50                   	push   eax
c00120cc:	57                   	push   edi
c00120cd:	53                   	push   ebx
c00120ce:	e8 8f 65 ff ff       	call   c0008662 <File::File(char const*, Process*)>
c00120d3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00120d6:	83 c4 0c             	add    esp,0xc
c00120d9:	0f b6 d4             	movzx  edx,ah
c00120dc:	0f b6 c0             	movzx  eax,al
c00120df:	52                   	push   edx
c00120e0:	50                   	push   eax
c00120e1:	53                   	push   ebx
c00120e2:	e8 01 68 ff ff       	call   c00088e8 <File::chfatattr(unsigned char, unsigned char)>
c00120e7:	83 c4 10             	add    esp,0x10
c00120ea:	85 db                	test   ebx,ebx
c00120ec:	74 14                	je     c0012102 <SysSetFatAttrib(regs*)+0x5b>
c00120ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120f2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00120f4:	83 ec 0c             	sub    esp,0xc
c00120f7:	53                   	push   ebx
c00120f8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00120fb:	83 c4 10             	add    esp,0x10
c00120fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012102:	85 c0                	test   eax,eax
c0012104:	0f 95 c0             	setne  al
c0012107:	31 d2                	xor    edx,edx
c0012109:	0f b6 c0             	movzx  eax,al
c001210c:	f7 d8                	neg    eax
c001210e:	83 d2 00             	adc    edx,0x0
c0012111:	83 c4 10             	add    esp,0x10
c0012114:	f7 da                	neg    edx
c0012116:	5b                   	pop    ebx
c0012117:	5e                   	pop    esi
c0012118:	5f                   	pop    edi
c0012119:	c3                   	ret    

c001211a <SysShutdown(regs*)>:
c001211a:	83 ec 1c             	sub    esp,0x1c
c001211d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012121:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012124:	85 c9                	test   ecx,ecx
c0012126:	74 18                	je     c0012140 <SysShutdown(regs*)+0x26>
c0012128:	83 f9 01             	cmp    ecx,0x1
c001212b:	74 26                	je     c0012153 <SysShutdown(regs*)+0x39>
c001212d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012132:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012137:	83 f9 02             	cmp    ecx,0x2
c001213a:	74 24                	je     c0012160 <SysShutdown(regs*)+0x46>
c001213c:	83 c4 1c             	add    esp,0x1c
c001213f:	c3                   	ret    
c0012140:	e8 a1 e9 ff ff       	call   c0010ae6 <KeShutdown()>
c0012145:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001214a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001214f:	83 c4 1c             	add    esp,0x1c
c0012152:	c3                   	ret    
c0012153:	e8 c4 e9 ff ff       	call   c0010b1c <KeSleep()>
c0012158:	31 c0                	xor    eax,eax
c001215a:	31 d2                	xor    edx,edx
c001215c:	83 c4 1c             	add    esp,0x1c
c001215f:	c3                   	ret    
c0012160:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012164:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012168:	e8 df e9 ff ff       	call   c0010b4c <KeRestart()>
c001216d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012171:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012175:	eb c5                	jmp    c001213c <SysShutdown(regs*)+0x22>

c0012177 <SysPipe(regs*)>:
c0012177:	57                   	push   edi
c0012178:	56                   	push   esi
c0012179:	53                   	push   ebx
c001217a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001217e:	83 ec 0c             	sub    esp,0xc
c0012181:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012184:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012187:	6a 20                	push   0x20
c0012189:	e8 ad db ff ff       	call   c000fd3b <malloc>
c001218e:	89 c3                	mov    ebx,eax
c0012190:	58                   	pop    eax
c0012191:	5a                   	pop    edx
c0012192:	68 00 50 00 00       	push   0x5000
c0012197:	53                   	push   ebx
c0012198:	e8 c9 e7 ff ff       	call   c0010966 <Pipe::Pipe(int)>
c001219d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121a0:	e8 27 11 00 00       	call   c00132cc <UnixFile::getFileDescriptor()>
c00121a5:	89 07                	mov    DWORD PTR [edi],eax
c00121a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121aa:	e8 1d 11 00 00       	call   c00132cc <UnixFile::getFileDescriptor()>
c00121af:	83 c4 10             	add    esp,0x10
c00121b2:	89 06                	mov    DWORD PTR [esi],eax
c00121b4:	31 d2                	xor    edx,edx
c00121b6:	5b                   	pop    ebx
c00121b7:	31 c0                	xor    eax,eax
c00121b9:	5e                   	pop    esi
c00121ba:	5f                   	pop    edi
c00121bb:	c3                   	ret    

c00121bc <SysGetUnixTime(regs*)>:
c00121bc:	57                   	push   edi
c00121bd:	56                   	push   esi
c00121be:	53                   	push   ebx
c00121bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00121c3:	83 ec 08             	sub    esp,0x8
c00121c6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00121c9:	52                   	push   edx
c00121ca:	68 2f 93 02 c0       	push   0xc002932f
c00121cf:	e8 a8 4d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00121d4:	83 c4 10             	add    esp,0x10
c00121d7:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c00121db:	74 3d                	je     c001221a <SysGetUnixTime(regs*)+0x5e>
c00121dd:	83 ec 0c             	sub    esp,0xc
c00121e0:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00121e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00121eb:	50                   	push   eax
c00121ec:	e8 21 74 ff ff       	call   c0009612 <Clock::timeInSecondsLocal()>
c00121f1:	83 c4 0c             	add    esp,0xc
c00121f4:	52                   	push   edx
c00121f5:	50                   	push   eax
c00121f6:	68 43 93 02 c0       	push   0xc0029343
c00121fb:	e8 7c 4d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012200:	83 c4 10             	add    esp,0x10
c0012203:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0012208:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001220e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012212:	5b                   	pop    ebx
c0012213:	5e                   	pop    esi
c0012214:	5f                   	pop    edi
c0012215:	e9 f8 73 ff ff       	jmp    c0009612 <Clock::timeInSecondsLocal()>
c001221a:	8b 35 50 2b 03 c0    	mov    esi,DWORD PTR ds:0xc0032b50
c0012220:	8b 3d 54 2b 03 c0    	mov    edi,DWORD PTR ds:0xc0032b54
c0012226:	89 f0                	mov    eax,esi
c0012228:	89 fa                	mov    edx,edi
c001222a:	01 f0                	add    eax,esi
c001222c:	11 fa                	adc    edx,edi
c001222e:	01 f0                	add    eax,esi
c0012230:	11 fa                	adc    edx,edi
c0012232:	89 c1                	mov    ecx,eax
c0012234:	89 d3                	mov    ebx,edx
c0012236:	0f a4 cb 05          	shld   ebx,ecx,0x5
c001223a:	c1 e1 05             	shl    ecx,0x5
c001223d:	01 c8                	add    eax,ecx
c001223f:	11 da                	adc    edx,ebx
c0012241:	01 f0                	add    eax,esi
c0012243:	5b                   	pop    ebx
c0012244:	11 fa                	adc    edx,edi
c0012246:	5e                   	pop    esi
c0012247:	5f                   	pop    edi
c0012248:	c3                   	ret    

c0012249 <string_ends_with(char const*, char const*)>:
c0012249:	57                   	push   edi
c001224a:	56                   	push   esi
c001224b:	53                   	push   ebx
c001224c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012250:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012254:	83 ec 0c             	sub    esp,0xc
c0012257:	53                   	push   ebx
c0012258:	e8 13 e3 fe ff       	call   c0000570 <strlen>
c001225d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012260:	89 c6                	mov    esi,eax
c0012262:	e8 09 e3 fe ff       	call   c0000570 <strlen>
c0012267:	83 c4 10             	add    esp,0x10
c001226a:	39 c6                	cmp    esi,eax
c001226c:	7d 06                	jge    c0012274 <string_ends_with(char const*, char const*)+0x2b>
c001226e:	5b                   	pop    ebx
c001226f:	31 c0                	xor    eax,eax
c0012271:	5e                   	pop    esi
c0012272:	5f                   	pop    edi
c0012273:	c3                   	ret    
c0012274:	83 ec 08             	sub    esp,0x8
c0012277:	29 c6                	sub    esi,eax
c0012279:	57                   	push   edi
c001227a:	01 f3                	add    ebx,esi
c001227c:	53                   	push   ebx
c001227d:	e8 ce e4 fe ff       	call   c0000750 <strcmp>
c0012282:	83 c4 10             	add    esp,0x10
c0012285:	85 c0                	test   eax,eax
c0012287:	5b                   	pop    ebx
c0012288:	0f 94 c0             	sete   al
c001228b:	5e                   	pop    esi
c001228c:	0f b6 c0             	movzx  eax,al
c001228f:	5f                   	pop    edi
c0012290:	c3                   	ret    

c0012291 <SysOpen(regs*)>:
c0012291:	56                   	push   esi
c0012292:	53                   	push   ebx
c0012293:	81 ec 04 01 00 00    	sub    esp,0x104
c0012299:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00122a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122a3:	85 c0                	test   eax,eax
c00122a5:	0f 84 bc 01 00 00    	je     c0012467 <SysOpen(regs*)+0x1d6>
c00122ab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00122ae:	85 c0                	test   eax,eax
c00122b0:	0f 84 b1 01 00 00    	je     c0012467 <SysOpen(regs*)+0x1d6>
c00122b6:	6a 00                	push   0x0
c00122b8:	68 4a 93 02 c0       	push   0xc002934a
c00122bd:	50                   	push   eax
c00122be:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00122c2:	56                   	push   esi
c00122c3:	e8 82 60 ff ff       	call   c000834a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00122cb:	e8 a0 e2 fe ff       	call   c0000570 <strlen>
c00122d0:	83 c4 10             	add    esp,0x10
c00122d3:	83 e8 01             	sub    eax,0x1
c00122d6:	74 21                	je     c00122f9 <SysOpen(regs*)+0x68>
c00122d8:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00122dc:	eb 12                	jmp    c00122f0 <SysOpen(regs*)+0x5f>
c00122de:	83 fa 3a             	cmp    edx,0x3a
c00122e1:	74 12                	je     c00122f5 <SysOpen(regs*)+0x64>
c00122e3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00122e7:	83 e8 01             	sub    eax,0x1
c00122ea:	74 0d                	je     c00122f9 <SysOpen(regs*)+0x68>
c00122ec:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00122f0:	83 fa 2e             	cmp    edx,0x2e
c00122f3:	75 e9                	jne    c00122de <SysOpen(regs*)+0x4d>
c00122f5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00122f9:	83 ec 08             	sub    esp,0x8
c00122fc:	68 4e 93 02 c0       	push   0xc002934e
c0012301:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012304:	50                   	push   eax
c0012305:	e8 3f ff ff ff       	call   c0012249 <string_ends_with(char const*, char const*)>
c001230a:	83 c4 10             	add    esp,0x10
c001230d:	85 c0                	test   eax,eax
c001230f:	74 1d                	je     c001232e <SysOpen(regs*)+0x9d>
c0012311:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012314:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001231a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012321:	81 c4 04 01 00 00    	add    esp,0x104
c0012327:	31 c0                	xor    eax,eax
c0012329:	31 d2                	xor    edx,edx
c001232b:	5b                   	pop    ebx
c001232c:	5e                   	pop    esi
c001232d:	c3                   	ret    
c001232e:	83 ec 08             	sub    esp,0x8
c0012331:	68 53 93 02 c0       	push   0xc0029353
c0012336:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012339:	50                   	push   eax
c001233a:	e8 0a ff ff ff       	call   c0012249 <string_ends_with(char const*, char const*)>
c001233f:	83 c4 10             	add    esp,0x10
c0012342:	85 c0                	test   eax,eax
c0012344:	75 cb                	jne    c0012311 <SysOpen(regs*)+0x80>
c0012346:	83 ec 08             	sub    esp,0x8
c0012349:	68 4f 93 02 c0       	push   0xc002934f
c001234e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012351:	50                   	push   eax
c0012352:	e8 f9 e3 fe ff       	call   c0000750 <strcmp>
c0012357:	83 c4 10             	add    esp,0x10
c001235a:	85 c0                	test   eax,eax
c001235c:	74 b3                	je     c0012311 <SysOpen(regs*)+0x80>
c001235e:	83 ec 08             	sub    esp,0x8
c0012361:	68 4e 93 02 c0       	push   0xc002934e
c0012366:	56                   	push   esi
c0012367:	e8 dd fe ff ff       	call   c0012249 <string_ends_with(char const*, char const*)>
c001236c:	83 c4 10             	add    esp,0x10
c001236f:	85 c0                	test   eax,eax
c0012371:	75 9e                	jne    c0012311 <SysOpen(regs*)+0x80>
c0012373:	83 ec 08             	sub    esp,0x8
c0012376:	68 58 93 02 c0       	push   0xc0029358
c001237b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001237e:	50                   	push   eax
c001237f:	e8 c5 fe ff ff       	call   c0012249 <string_ends_with(char const*, char const*)>
c0012384:	83 c4 10             	add    esp,0x10
c0012387:	85 c0                	test   eax,eax
c0012389:	0f 85 eb 00 00 00    	jne    c001247a <SysOpen(regs*)+0x1e9>
c001238f:	83 ec 08             	sub    esp,0x8
c0012392:	68 5d 93 02 c0       	push   0xc002935d
c0012397:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001239a:	50                   	push   eax
c001239b:	e8 a9 fe ff ff       	call   c0012249 <string_ends_with(char const*, char const*)>
c00123a0:	83 c4 10             	add    esp,0x10
c00123a3:	85 c0                	test   eax,eax
c00123a5:	0f 85 cf 00 00 00    	jne    c001247a <SysOpen(regs*)+0x1e9>
c00123ab:	83 ec 08             	sub    esp,0x8
c00123ae:	68 59 93 02 c0       	push   0xc0029359
c00123b3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00123b6:	51                   	push   ecx
c00123b7:	e8 94 e3 fe ff       	call   c0000750 <strcmp>
c00123bc:	83 c4 10             	add    esp,0x10
c00123bf:	85 c0                	test   eax,eax
c00123c1:	0f 84 b3 00 00 00    	je     c001247a <SysOpen(regs*)+0x1e9>
c00123c7:	83 ec 08             	sub    esp,0x8
c00123ca:	68 58 93 02 c0       	push   0xc0029358
c00123cf:	56                   	push   esi
c00123d0:	e8 74 fe ff ff       	call   c0012249 <string_ends_with(char const*, char const*)>
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	85 c0                	test   eax,eax
c00123da:	0f 85 9a 00 00 00    	jne    c001247a <SysOpen(regs*)+0x1e9>
c00123e0:	83 ec 0c             	sub    esp,0xc
c00123e3:	68 14 01 00 00       	push   0x114
c00123e8:	e8 4e d9 ff ff       	call   c000fd3b <malloc>
c00123ed:	83 c4 0c             	add    esp,0xc
c00123f0:	89 c6                	mov    esi,eax
c00123f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00123fa:	50                   	push   eax
c00123fb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123fe:	52                   	push   edx
c00123ff:	56                   	push   esi
c0012400:	e8 5d 62 ff ff       	call   c0008662 <File::File(char const*, Process*)>
c0012405:	83 c4 10             	add    esp,0x10
c0012408:	85 f6                	test   esi,esi
c001240a:	74 5b                	je     c0012467 <SysOpen(regs*)+0x1d6>
c001240c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001240f:	0f b6 c2             	movzx  eax,dl
c0012412:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012415:	89 d0                	mov    eax,edx
c0012417:	83 e0 01             	and    eax,0x1
c001241a:	f6 c2 02             	test   dl,0x2
c001241d:	74 03                	je     c0012422 <SysOpen(regs*)+0x191>
c001241f:	83 c8 02             	or     eax,0x2
c0012422:	f6 c2 04             	test   dl,0x4
c0012425:	74 03                	je     c001242a <SysOpen(regs*)+0x199>
c0012427:	83 c8 04             	or     eax,0x4
c001242a:	f6 c2 08             	test   dl,0x8
c001242d:	74 03                	je     c0012432 <SysOpen(regs*)+0x1a1>
c001242f:	83 c8 0a             	or     eax,0xa
c0012432:	80 e2 10             	and    dl,0x10
c0012435:	74 03                	je     c001243a <SysOpen(regs*)+0x1a9>
c0012437:	83 c8 12             	or     eax,0x12
c001243a:	83 ec 08             	sub    esp,0x8
c001243d:	50                   	push   eax
c001243e:	56                   	push   esi
c001243f:	e8 3c 62 ff ff       	call   c0008680 <File::open(FileOpenMode)>
c0012444:	83 c4 10             	add    esp,0x10
c0012447:	85 c0                	test   eax,eax
c0012449:	75 1c                	jne    c0012467 <SysOpen(regs*)+0x1d6>
c001244b:	83 ec 0c             	sub    esp,0xc
c001244e:	56                   	push   esi
c001244f:	e8 78 0e 00 00       	call   c00132cc <UnixFile::getFileDescriptor()>
c0012454:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	89 02                	mov    DWORD PTR [edx],eax
c001245c:	c1 f8 1f             	sar    eax,0x1f
c001245f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012462:	e9 ba fe ff ff       	jmp    c0012321 <SysOpen(regs*)+0x90>
c0012467:	81 c4 04 01 00 00    	add    esp,0x104
c001246d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012472:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012477:	5b                   	pop    ebx
c0012478:	5e                   	pop    esi
c0012479:	c3                   	ret    
c001247a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001247d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012483:	e9 92 fe ff ff       	jmp    c001231a <SysOpen(regs*)+0x89>

c0012488 <KeSystemCall(regs*, void*)>:
c0012488:	53                   	push   ebx
c0012489:	83 ec 08             	sub    esp,0x8
c001248c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012490:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012493:	83 f8 48             	cmp    eax,0x48
c0012496:	77 16                	ja     c00124ae <KeSystemCall(regs*, void*)+0x26>
c0012498:	8b 14 85 60 c5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3aa0]
c001249f:	85 d2                	test   edx,edx
c00124a1:	74 0b                	je     c00124ae <KeSystemCall(regs*, void*)+0x26>
c00124a3:	83 ec 0c             	sub    esp,0xc
c00124a6:	53                   	push   ebx
c00124a7:	ff d2                	call   edx
c00124a9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00124ac:	eb 0d                	jmp    c00124bb <KeSystemCall(regs*, void*)+0x33>
c00124ae:	52                   	push   edx
c00124af:	52                   	push   edx
c00124b0:	50                   	push   eax
c00124b1:	68 62 93 02 c0       	push   0xc0029362
c00124b6:	e8 c1 4a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00124bb:	83 c4 10             	add    esp,0x10
c00124be:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00124c3:	31 d2                	xor    edx,edx
c00124c5:	83 c4 08             	add    esp,0x8
c00124c8:	5b                   	pop    ebx
c00124c9:	c3                   	ret    

c00124ca <VgaText::isAtty()>:
c00124ca:	b0 01                	mov    al,0x1
c00124cc:	c3                   	ret    
c00124cd:	90                   	nop

c00124ce <VgaText::~VgaText()>:
c00124ce:	83 ec 0c             	sub    esp,0xc
c00124d1:	ba cc 93 02 c0       	mov    edx,0xc00293cc
c00124d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124da:	89 10                	mov    DWORD PTR [eax],edx
c00124dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	50                   	push   eax
c00124e4:	e8 d1 0f 00 00       	call   c00134ba <UnixFile::~UnixFile()>
c00124e9:	83 c4 10             	add    esp,0x10
c00124ec:	90                   	nop
c00124ed:	83 c4 0c             	add    esp,0xc
c00124f0:	c3                   	ret    
c00124f1:	90                   	nop

c00124f2 <VgaText::~VgaText()>:
c00124f2:	83 ec 0c             	sub    esp,0xc
c00124f5:	83 ec 0c             	sub    esp,0xc
c00124f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124fc:	e8 cd ff ff ff       	call   c00124ce <VgaText::~VgaText()>
c0012501:	83 c4 10             	add    esp,0x10
c0012504:	83 ec 08             	sub    esp,0x8
c0012507:	68 84 01 00 00       	push   0x184
c001250c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012510:	e8 3f b3 ff ff       	call   c000d854 <operator delete(void*, unsigned long)>
c0012515:	83 c4 10             	add    esp,0x10
c0012518:	83 c4 0c             	add    esp,0xc
c001251b:	c3                   	ret    

c001251c <VgaText::read(unsigned long long, void*, int*)>:
c001251c:	83 ec 10             	sub    esp,0x10
c001251f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012523:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001252b:	e8 17 85 ff ff       	call   c000aa47 <readKeyboard(VgaText*, char*, unsigned long)>
c0012530:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012534:	89 02                	mov    DWORD PTR [edx],eax
c0012536:	31 c0                	xor    eax,eax
c0012538:	83 c4 1c             	add    esp,0x1c
c001253b:	c3                   	ret    

c001253c <setTerminalScrollLock(bool)>:
c001253c:	c3                   	ret    

c001253d <doTerminalCycle()>:
c001253d:	c3                   	ret    

c001253e <addToTerminalCycle(VgaText*)>:
c001253e:	c3                   	ret    

c001253f <scrollTerminalScrollLock(int)>:
c001253f:	c3                   	ret    

c0012540 <VgaText::updateTitle()>:
c0012540:	c3                   	ret    
c0012541:	90                   	nop

c0012542 <VgaText::load()>:
c0012542:	c3                   	ret    
c0012543:	90                   	nop

c0012544 <VgaText::updateCursor()>:
c0012544:	83 ec 14             	sub    esp,0x14
c0012547:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001254b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001254e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012551:	e8 96 9b 00 00       	call   c001c0ec <HalConsoleCursorUpdate(int, int)>
c0012556:	83 c4 1c             	add    esp,0x1c
c0012559:	c3                   	ret    

c001255a <VgaText::doANSI_SGR(int)>:
c001255a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001255e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012562:	85 d2                	test   edx,edx
c0012564:	75 0b                	jne    c0012571 <VgaText::doANSI_SGR(int)+0x17>
c0012566:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012569:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001256c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001256f:	eb 59                	jmp    c00125ca <VgaText::doANSI_SGR(int)+0x70>
c0012571:	83 fa 07             	cmp    edx,0x7
c0012574:	75 0b                	jne    c0012581 <VgaText::doANSI_SGR(int)+0x27>
c0012576:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012579:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001257c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001257f:	eb 49                	jmp    c00125ca <VgaText::doANSI_SGR(int)+0x70>
c0012581:	83 fa 1b             	cmp    edx,0x1b
c0012584:	74 e0                	je     c0012566 <VgaText::doANSI_SGR(int)+0xc>
c0012586:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012589:	83 f9 07             	cmp    ecx,0x7
c001258c:	77 09                	ja     c0012597 <VgaText::doANSI_SGR(int)+0x3d>
c001258e:	8b 14 8d c0 c6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3940]
c0012595:	eb 20                	jmp    c00125b7 <VgaText::doANSI_SGR(int)+0x5d>
c0012597:	8d 4a d8             	lea    ecx,[edx-0x28]
c001259a:	83 f9 07             	cmp    ecx,0x7
c001259d:	77 09                	ja     c00125a8 <VgaText::doANSI_SGR(int)+0x4e>
c001259f:	8b 14 8d c0 c6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3940]
c00125a6:	eb 22                	jmp    c00125ca <VgaText::doANSI_SGR(int)+0x70>
c00125a8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00125ab:	83 f9 07             	cmp    ecx,0x7
c00125ae:	77 0b                	ja     c00125bb <VgaText::doANSI_SGR(int)+0x61>
c00125b0:	8b 14 95 78 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3a88]
c00125b7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00125ba:	c3                   	ret    
c00125bb:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00125be:	83 f9 07             	cmp    ecx,0x7
c00125c1:	77 0a                	ja     c00125cd <VgaText::doANSI_SGR(int)+0x73>
c00125c3:	8b 14 95 50 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3ab0]
c00125ca:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00125cd:	c3                   	ret    

c00125ce <VgaText::setDefaultBgColour(VgaColour)>:
c00125ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00125d6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00125d9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00125dc:	c3                   	ret    
c00125dd:	90                   	nop

c00125de <VgaText::setDefaultFgColour(VgaColour)>:
c00125de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00125e6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00125e9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00125ec:	c3                   	ret    
c00125ed:	90                   	nop

c00125ee <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00125ee:	53                   	push   ebx
c00125ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00125f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00125fb:	51                   	push   ecx
c00125fc:	e8 cd ff ff ff       	call   c00125ce <VgaText::setDefaultBgColour(VgaColour)>
c0012601:	58                   	pop    eax
c0012602:	5a                   	pop    edx
c0012603:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012607:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001260b:	5b                   	pop    ebx
c001260c:	eb d0                	jmp    c00125de <VgaText::setDefaultFgColour(VgaColour)>

c001260e <VgaText::setTitleTextColour(VgaColour)>:
c001260e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012612:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012616:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012619:	c3                   	ret    

c001261a <VgaText::setTitleColour(VgaColour)>:
c001261a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001261e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012622:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012625:	c3                   	ret    

c0012626 <VgaText::setTitle(char*)>:
c0012626:	c3                   	ret    
c0012627:	90                   	nop

c0012628 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001262c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012631:	83 e0 0f             	and    eax,0xf
c0012634:	c1 e2 04             	shl    edx,0x4
c0012637:	09 d0                	or     eax,edx
c0012639:	c3                   	ret    

c001263a <VgaText::scrollScreen()>:
c001263a:	55                   	push   ebp
c001263b:	57                   	push   edi
c001263c:	56                   	push   esi
c001263d:	be 01 00 00 00       	mov    esi,0x1
c0012642:	53                   	push   ebx
c0012643:	83 ec 0c             	sub    esp,0xc
c0012646:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001264a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001264d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012653:	31 ff                	xor    edi,edi
c0012655:	01 e9                	add    ecx,ebp
c0012657:	8a 01                	mov    al,BYTE PTR [ecx]
c0012659:	83 fe 18             	cmp    esi,0x18
c001265c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012662:	75 20                	jne    c0012684 <VgaText::scrollScreen()+0x4a>
c0012664:	f7 c7 01 00 00 00    	test   edi,0x1
c001266a:	74 15                	je     c0012681 <VgaText::scrollScreen()+0x47>
c001266c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012670:	50                   	push   eax
c0012671:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012675:	50                   	push   eax
c0012676:	e8 ad ff ff ff       	call   c0012628 <VgaText::combineColours(unsigned char, unsigned char)>
c001267b:	5a                   	pop    edx
c001267c:	5a                   	pop    edx
c001267d:	88 01                	mov    BYTE PTR [ecx],al
c001267f:	eb 03                	jmp    c0012684 <VgaText::scrollScreen()+0x4a>
c0012681:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012684:	47                   	inc    edi
c0012685:	41                   	inc    ecx
c0012686:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001268c:	75 c9                	jne    c0012657 <VgaText::scrollScreen()+0x1d>
c001268e:	46                   	inc    esi
c001268f:	83 fe 19             	cmp    esi,0x19
c0012692:	75 b9                	jne    c001264d <VgaText::scrollScreen()+0x13>
c0012694:	39 1d f4 31 03 c0    	cmp    DWORD PTR ds:0xc00331f4,ebx
c001269a:	75 1f                	jne    c00126bb <VgaText::scrollScreen()+0x81>
c001269c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00126a0:	74 05                	je     c00126a7 <VgaText::scrollScreen()+0x6d>
c00126a2:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00126a5:	eb 14                	jmp    c00126bb <VgaText::scrollScreen()+0x81>
c00126a7:	50                   	push   eax
c00126a8:	50                   	push   eax
c00126a9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00126ad:	50                   	push   eax
c00126ae:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00126b2:	50                   	push   eax
c00126b3:	e8 c8 98 00 00       	call   c001bf80 <HalConsoleScroll(int, int)>
c00126b8:	83 c4 10             	add    esp,0x10
c00126bb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00126bf:	83 c4 0c             	add    esp,0xc
c00126c2:	5b                   	pop    ebx
c00126c3:	5e                   	pop    esi
c00126c4:	5f                   	pop    edi
c00126c5:	5d                   	pop    ebp
c00126c6:	e9 79 fe ff ff       	jmp    c0012544 <VgaText::updateCursor()>
c00126cb:	90                   	nop

c00126cc <VgaText::combineCharAndColour(char, unsigned char)>:
c00126cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00126d1:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00126d6:	c1 e0 08             	shl    eax,0x8
c00126d9:	09 d0                	or     eax,edx
c00126db:	c3                   	ret    

c00126dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00126dc:	55                   	push   ebp
c00126dd:	57                   	push   edi
c00126de:	56                   	push   esi
c00126df:	53                   	push   ebx
c00126e0:	83 ec 1c             	sub    esp,0x1c
c00126e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00126e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00126eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00126ef:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c00126f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00126fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126fe:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012702:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012706:	85 ed                	test   ebp,ebp
c0012708:	75 14                	jne    c001271e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c001270a:	c7 44 24 30 76 93 02 c0 	mov    DWORD PTR [esp+0x30],0xc0029376
c0012712:	83 c4 1c             	add    esp,0x1c
c0012715:	5b                   	pop    ebx
c0012716:	5e                   	pop    esi
c0012717:	5f                   	pop    edi
c0012718:	5d                   	pop    ebp
c0012719:	e9 72 da ff ff       	jmp    c0010190 <KePanic(char const*)>
c001271e:	50                   	push   eax
c001271f:	50                   	push   eax
c0012720:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012725:	50                   	push   eax
c0012726:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001272b:	50                   	push   eax
c001272c:	e8 f7 fe ff ff       	call   c0012628 <VgaText::combineColours(unsigned char, unsigned char)>
c0012731:	5a                   	pop    edx
c0012732:	0f be c9             	movsx  ecx,cl
c0012735:	5a                   	pop    edx
c0012736:	0f b6 c0             	movzx  eax,al
c0012739:	50                   	push   eax
c001273a:	51                   	push   ecx
c001273b:	e8 8c ff ff ff       	call   c00126cc <VgaText::combineCharAndColour(char, unsigned char)>
c0012740:	6b d6 50             	imul   edx,esi,0x50
c0012743:	83 c4 10             	add    esp,0x10
c0012746:	01 da                	add    edx,ebx
c0012748:	0f b7 d2             	movzx  edx,dx
c001274b:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012750:	39 3d f4 31 03 c0    	cmp    DWORD PTR ds:0xc00331f4,edi
c0012756:	75 28                	jne    c0012780 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012758:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001275c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012760:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012764:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012768:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001276c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012770:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012774:	83 c4 1c             	add    esp,0x1c
c0012777:	5b                   	pop    ebx
c0012778:	5e                   	pop    esi
c0012779:	5f                   	pop    edi
c001277a:	5d                   	pop    ebp
c001277b:	e9 08 99 00 00       	jmp    c001c088 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012780:	83 c4 1c             	add    esp,0x1c
c0012783:	5b                   	pop    ebx
c0012784:	5e                   	pop    esi
c0012785:	5f                   	pop    edi
c0012786:	5d                   	pop    ebp
c0012787:	c3                   	ret    

c0012788 <VgaText::getCursorX()>:
c0012788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001278c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001278f:	c3                   	ret    

c0012790 <VgaText::getCursorY()>:
c0012790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012794:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012797:	c3                   	ret    

c0012798 <VgaText::setCursor(int, int)>:
c0012798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001279c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127a0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00127a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00127aa:	e9 95 fd ff ff       	jmp    c0012544 <VgaText::updateCursor()>

c00127af <setActiveTerminal(VgaText*)>:
c00127af:	53                   	push   ebx
c00127b0:	83 ec 08             	sub    esp,0x8
c00127b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127b7:	85 db                	test   ebx,ebx
c00127b9:	75 11                	jne    c00127cc <setActiveTerminal(VgaText*)+0x1d>
c00127bb:	c7 44 24 10 86 93 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029386
c00127c3:	83 c4 08             	add    esp,0x8
c00127c6:	5b                   	pop    ebx
c00127c7:	e9 c4 d9 ff ff       	jmp    c0010190 <KePanic(char const*)>
c00127cc:	a1 f4 31 03 c0       	mov    eax,ds:0xc00331f4
c00127d1:	85 c0                	test   eax,eax
c00127d3:	74 0c                	je     c00127e1 <setActiveTerminal(VgaText*)+0x32>
c00127d5:	83 ec 0c             	sub    esp,0xc
c00127d8:	50                   	push   eax
c00127d9:	e8 66 fd ff ff       	call   c0012544 <VgaText::updateCursor()>
c00127de:	83 c4 10             	add    esp,0x10
c00127e1:	89 1d f4 31 03 c0    	mov    DWORD PTR ds:0xc00331f4,ebx
c00127e7:	50                   	push   eax
c00127e8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00127eb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00127ee:	53                   	push   ebx
c00127ef:	e8 a4 ff ff ff       	call   c0012798 <VgaText::setCursor(int, int)>
c00127f4:	83 c4 18             	add    esp,0x18
c00127f7:	5b                   	pop    ebx
c00127f8:	c3                   	ret    
c00127f9:	90                   	nop

c00127fa <VgaText::clearScreen()>:
c00127fa:	57                   	push   edi
c00127fb:	56                   	push   esi
c00127fc:	31 f6                	xor    esi,esi
c00127fe:	53                   	push   ebx
c00127ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012803:	52                   	push   edx
c0012804:	6a 00                	push   0x0
c0012806:	6a 00                	push   0x0
c0012808:	53                   	push   ebx
c0012809:	e8 8a ff ff ff       	call   c0012798 <VgaText::setCursor(int, int)>
c001280e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012815:	83 c4 10             	add    esp,0x10
c0012818:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001281b:	7e 20                	jle    c001283d <VgaText::clearScreen()+0x43>
c001281d:	31 ff                	xor    edi,edi
c001281f:	50                   	push   eax
c0012820:	50                   	push   eax
c0012821:	56                   	push   esi
c0012822:	57                   	push   edi
c0012823:	47                   	inc    edi
c0012824:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012827:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001282a:	6a 20                	push   0x20
c001282c:	53                   	push   ebx
c001282d:	e8 aa fe ff ff       	call   c00126dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012832:	83 c4 20             	add    esp,0x20
c0012835:	83 ff 50             	cmp    edi,0x50
c0012838:	75 e5                	jne    c001281f <VgaText::clearScreen()+0x25>
c001283a:	46                   	inc    esi
c001283b:	eb db                	jmp    c0012818 <VgaText::clearScreen()+0x1e>
c001283d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012844:	5b                   	pop    ebx
c0012845:	5e                   	pop    esi
c0012846:	5f                   	pop    edi
c0012847:	c3                   	ret    

c0012848 <VgaText::setCursorX(int)>:
c0012848:	83 ec 10             	sub    esp,0x10
c001284b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001284f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012856:	50                   	push   eax
c0012857:	e8 3c ff ff ff       	call   c0012798 <VgaText::setCursor(int, int)>
c001285c:	83 c4 1c             	add    esp,0x1c
c001285f:	c3                   	ret    

c0012860 <VgaText::setCursorY(int)>:
c0012860:	83 ec 10             	sub    esp,0x10
c0012863:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012867:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001286b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001286e:	50                   	push   eax
c001286f:	e8 24 ff ff ff       	call   c0012798 <VgaText::setCursor(int, int)>
c0012874:	83 c4 1c             	add    esp,0x1c
c0012877:	c3                   	ret    

c0012878 <VgaText::incrementCursor(bool)>:
c0012878:	56                   	push   esi
c0012879:	53                   	push   ebx
c001287a:	51                   	push   ecx
c001287b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001287f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012886:	40                   	inc    eax
c0012887:	83 f8 50             	cmp    eax,0x50
c001288a:	74 05                	je     c0012891 <VgaText::incrementCursor(bool)+0x19>
c001288c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001288f:	eb 24                	jmp    c00128b5 <VgaText::incrementCursor(bool)+0x3d>
c0012891:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012894:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001289b:	8d 50 01             	lea    edx,[eax+0x1]
c001289e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00128a1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00128a4:	75 0f                	jne    c00128b5 <VgaText::incrementCursor(bool)+0x3d>
c00128a6:	83 ec 0c             	sub    esp,0xc
c00128a9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00128ac:	53                   	push   ebx
c00128ad:	e8 88 fd ff ff       	call   c001263a <VgaText::scrollScreen()>
c00128b2:	83 c4 10             	add    esp,0x10
c00128b5:	89 f0                	mov    eax,esi
c00128b7:	84 c0                	test   al,al
c00128b9:	74 0c                	je     c00128c7 <VgaText::incrementCursor(bool)+0x4f>
c00128bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128bf:	5a                   	pop    edx
c00128c0:	5b                   	pop    ebx
c00128c1:	5e                   	pop    esi
c00128c2:	e9 7d fc ff ff       	jmp    c0012544 <VgaText::updateCursor()>
c00128c7:	58                   	pop    eax
c00128c8:	5b                   	pop    ebx
c00128c9:	5e                   	pop    esi
c00128ca:	c3                   	ret    
c00128cb:	90                   	nop

c00128cc <VgaText::decrementCursor(bool)>:
c00128cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00128d4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00128d7:	85 c0                	test   eax,eax
c00128d9:	74 04                	je     c00128df <VgaText::decrementCursor(bool)+0x13>
c00128db:	48                   	dec    eax
c00128dc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00128df:	84 c9                	test   cl,cl
c00128e1:	74 09                	je     c00128ec <VgaText::decrementCursor(bool)+0x20>
c00128e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00128e7:	e9 58 fc ff ff       	jmp    c0012544 <VgaText::updateCursor()>
c00128ec:	c3                   	ret    
c00128ed:	90                   	nop

c00128ee <VgaText::putchar(char, VgaColour, VgaColour)>:
c00128ee:	53                   	push   ebx
c00128ef:	83 ec 08             	sub    esp,0x8
c00128f2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00128f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00128fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012903:	83 f8 07             	cmp    eax,0x7
c0012906:	75 21                	jne    c0012929 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012908:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012910:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012918:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012920:	83 c4 08             	add    esp,0x8
c0012923:	5b                   	pop    ebx
c0012924:	e9 da 65 ff ff       	jmp    c0008f03 <KeBeep(int, int, bool)>
c0012929:	83 f8 0d             	cmp    eax,0xd
c001292c:	75 09                	jne    c0012937 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001292e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012935:	eb 2d                	jmp    c0012964 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012937:	83 f8 0a             	cmp    eax,0xa
c001293a:	75 31                	jne    c001296d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001293c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001293f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012946:	8d 50 01             	lea    edx,[eax+0x1]
c0012949:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001294c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001294f:	75 0f                	jne    c0012960 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012951:	83 ec 0c             	sub    esp,0xc
c0012954:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012957:	53                   	push   ebx
c0012958:	e8 dd fc ff ff       	call   c001263a <VgaText::scrollScreen()>
c001295d:	83 c4 10             	add    esp,0x10
c0012960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012964:	83 c4 08             	add    esp,0x8
c0012967:	5b                   	pop    ebx
c0012968:	e9 d7 fb ff ff       	jmp    c0012544 <VgaText::updateCursor()>
c001296d:	83 f8 08             	cmp    eax,0x8
c0012970:	75 25                	jne    c0012997 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012972:	50                   	push   eax
c0012973:	50                   	push   eax
c0012974:	6a 01                	push   0x1
c0012976:	53                   	push   ebx
c0012977:	e8 50 ff ff ff       	call   c00128cc <VgaText::decrementCursor(bool)>
c001297c:	5a                   	pop    edx
c001297d:	59                   	pop    ecx
c001297e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012981:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012984:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012987:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001298a:	6a 20                	push   0x20
c001298c:	53                   	push   ebx
c001298d:	e8 4a fd ff ff       	call   c00126dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012992:	83 c4 28             	add    esp,0x28
c0012995:	5b                   	pop    ebx
c0012996:	c3                   	ret    
c0012997:	83 ec 08             	sub    esp,0x8
c001299a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001299d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00129a0:	51                   	push   ecx
c00129a1:	52                   	push   edx
c00129a2:	50                   	push   eax
c00129a3:	53                   	push   ebx
c00129a4:	e8 33 fd ff ff       	call   c00126dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00129a9:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00129ad:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00129b5:	83 c4 28             	add    esp,0x28
c00129b8:	5b                   	pop    ebx
c00129b9:	e9 ba fe ff ff       	jmp    c0012878 <VgaText::incrementCursor(bool)>

c00129be <VgaText::putchar(char)>:
c00129be:	57                   	push   edi
c00129bf:	56                   	push   esi
c00129c0:	53                   	push   ebx
c00129c1:	83 ec 10             	sub    esp,0x10
c00129c4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00129c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00129cc:	89 f8                	mov    eax,edi
c00129ce:	0f be c0             	movsx  eax,al
c00129d1:	83 f8 5b             	cmp    eax,0x5b
c00129d4:	75 18                	jne    c00129ee <VgaText::putchar(char)+0x30>
c00129d6:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00129da:	74 20                	je     c00129fc <VgaText::putchar(char)+0x3e>
c00129dc:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00129e2:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00129e9:	e9 c1 00 00 00       	jmp    c0012aaf <VgaText::putchar(char)+0xf1>
c00129ee:	83 f8 1b             	cmp    eax,0x1b
c00129f1:	75 09                	jne    c00129fc <VgaText::putchar(char)+0x3e>
c00129f3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00129f7:	e9 b3 00 00 00       	jmp    c0012aaf <VgaText::putchar(char)+0xf1>
c00129fc:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00129ff:	84 c9                	test   cl,cl
c0012a01:	0f 84 98 00 00 00    	je     c0012a9f <VgaText::putchar(char)+0xe1>
c0012a07:	8d 77 c0             	lea    esi,[edi-0x40]
c0012a0a:	89 f2                	mov    edx,esi
c0012a0c:	80 fa 3e             	cmp    dl,0x3e
c0012a0f:	77 78                	ja     c0012a89 <VgaText::putchar(char)+0xcb>
c0012a11:	83 f8 6d             	cmp    eax,0x6d
c0012a14:	75 47                	jne    c0012a5d <VgaText::putchar(char)+0x9f>
c0012a16:	31 f6                	xor    esi,esi
c0012a18:	31 d2                	xor    edx,edx
c0012a1a:	31 c0                	xor    eax,eax
c0012a1c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012a1f:	7e 2d                	jle    c0012a4e <VgaText::putchar(char)+0x90>
c0012a21:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012a26:	83 fa 3b             	cmp    edx,0x3b
c0012a29:	75 17                	jne    c0012a42 <VgaText::putchar(char)+0x84>
c0012a2b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0012a2f:	50                   	push   eax
c0012a30:	53                   	push   ebx
c0012a31:	e8 24 fb ff ff       	call   c001255a <VgaText::doANSI_SGR(int)>
c0012a36:	59                   	pop    ecx
c0012a37:	31 d2                	xor    edx,edx
c0012a39:	5f                   	pop    edi
c0012a3a:	31 c0                	xor    eax,eax
c0012a3c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012a40:	eb 09                	jmp    c0012a4b <VgaText::putchar(char)+0x8d>
c0012a42:	6b c0 0a             	imul   eax,eax,0xa
c0012a45:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012a49:	88 ca                	mov    dl,cl
c0012a4b:	46                   	inc    esi
c0012a4c:	eb ce                	jmp    c0012a1c <VgaText::putchar(char)+0x5e>
c0012a4e:	84 d2                	test   dl,dl
c0012a50:	74 2f                	je     c0012a81 <VgaText::putchar(char)+0xc3>
c0012a52:	50                   	push   eax
c0012a53:	53                   	push   ebx
c0012a54:	e8 01 fb ff ff       	call   c001255a <VgaText::doANSI_SGR(int)>
c0012a59:	58                   	pop    eax
c0012a5a:	5a                   	pop    edx
c0012a5b:	eb 24                	jmp    c0012a81 <VgaText::putchar(char)+0xc3>
c0012a5d:	83 f8 4a             	cmp    eax,0x4a
c0012a60:	75 1f                	jne    c0012a81 <VgaText::putchar(char)+0xc3>
c0012a62:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012a66:	75 19                	jne    c0012a81 <VgaText::putchar(char)+0xc3>
c0012a68:	83 ec 0c             	sub    esp,0xc
c0012a6b:	53                   	push   ebx
c0012a6c:	e8 89 fd ff ff       	call   c00127fa <VgaText::clearScreen()>
c0012a71:	83 c4 0c             	add    esp,0xc
c0012a74:	6a 00                	push   0x0
c0012a76:	6a 00                	push   0x0
c0012a78:	53                   	push   ebx
c0012a79:	e8 1a fd ff ff       	call   c0012798 <VgaText::setCursor(int, int)>
c0012a7e:	83 c4 10             	add    esp,0x10
c0012a81:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012a87:	eb 26                	jmp    c0012aaf <VgaText::putchar(char)+0xf1>
c0012a89:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012a8c:	83 f8 0e             	cmp    eax,0xe
c0012a8f:	7f 1e                	jg     c0012aaf <VgaText::putchar(char)+0xf1>
c0012a91:	8d 48 01             	lea    ecx,[eax+0x1]
c0012a94:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012a97:	89 f9                	mov    ecx,edi
c0012a99:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0012a9d:	eb 10                	jmp    c0012aaf <VgaText::putchar(char)+0xf1>
c0012a9f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012aa2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012aa5:	50                   	push   eax
c0012aa6:	53                   	push   ebx
c0012aa7:	e8 42 fe ff ff       	call   c00128ee <VgaText::putchar(char, VgaColour, VgaColour)>
c0012aac:	83 c4 10             	add    esp,0x10
c0012aaf:	83 c4 10             	add    esp,0x10
c0012ab2:	5b                   	pop    ebx
c0012ab3:	5e                   	pop    esi
c0012ab4:	5f                   	pop    edi
c0012ab5:	c3                   	ret    

c0012ab6 <VgaText::putx(unsigned int)>:
c0012ab6:	57                   	push   edi
c0012ab7:	b9 11 00 00 00       	mov    ecx,0x11
c0012abc:	56                   	push   esi
c0012abd:	be cf 7b 02 c0       	mov    esi,0xc0027bcf
c0012ac2:	53                   	push   ebx
c0012ac3:	83 ec 20             	sub    esp,0x20
c0012ac6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012aca:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012ace:	fc                   	cld    
c0012acf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ad1:	be 08 00 00 00       	mov    esi,0x8
c0012ad6:	50                   	push   eax
c0012ad7:	50                   	push   eax
c0012ad8:	89 d8                	mov    eax,ebx
c0012ada:	c1 e3 04             	shl    ebx,0x4
c0012add:	c1 e8 1c             	shr    eax,0x1c
c0012ae0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0012ae5:	50                   	push   eax
c0012ae6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012aea:	e8 cf fe ff ff       	call   c00129be <VgaText::putchar(char)>
c0012aef:	83 c4 10             	add    esp,0x10
c0012af2:	4e                   	dec    esi
c0012af3:	75 e1                	jne    c0012ad6 <VgaText::putx(unsigned int)+0x20>
c0012af5:	83 c4 20             	add    esp,0x20
c0012af8:	5b                   	pop    ebx
c0012af9:	5e                   	pop    esi
c0012afa:	5f                   	pop    edi
c0012afb:	c3                   	ret    

c0012afc <VgaText::puts(char const*)>:
c0012afc:	53                   	push   ebx
c0012afd:	83 ec 08             	sub    esp,0x8
c0012b00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012b04:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012b07:	85 c0                	test   eax,eax
c0012b09:	74 12                	je     c0012b1d <VgaText::puts(char const*)+0x21>
c0012b0b:	43                   	inc    ebx
c0012b0c:	51                   	push   ecx
c0012b0d:	51                   	push   ecx
c0012b0e:	50                   	push   eax
c0012b0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b13:	e8 a6 fe ff ff       	call   c00129be <VgaText::putchar(char)>
c0012b18:	83 c4 10             	add    esp,0x10
c0012b1b:	eb e7                	jmp    c0012b04 <VgaText::puts(char const*)+0x8>
c0012b1d:	83 c4 08             	add    esp,0x8
c0012b20:	5b                   	pop    ebx
c0012b21:	c3                   	ret    

c0012b22 <VgaText::write(unsigned long long, void*, int*)>:
c0012b22:	55                   	push   ebp
c0012b23:	57                   	push   edi
c0012b24:	56                   	push   esi
c0012b25:	53                   	push   ebx
c0012b26:	83 ec 0c             	sub    esp,0xc
c0012b29:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012b2d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012b31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012b35:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012b3c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012b3f:	39 eb                	cmp    ebx,ebp
c0012b41:	74 13                	je     c0012b56 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012b43:	43                   	inc    ebx
c0012b44:	50                   	push   eax
c0012b45:	50                   	push   eax
c0012b46:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012b4a:	50                   	push   eax
c0012b4b:	56                   	push   esi
c0012b4c:	e8 6d fe ff ff       	call   c00129be <VgaText::putchar(char)>
c0012b51:	83 c4 10             	add    esp,0x10
c0012b54:	eb e9                	jmp    c0012b3f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012b56:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012b5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b61:	89 38                	mov    DWORD PTR [eax],edi
c0012b63:	83 c4 0c             	add    esp,0xc
c0012b66:	31 c0                	xor    eax,eax
c0012b68:	5b                   	pop    ebx
c0012b69:	5e                   	pop    esi
c0012b6a:	5f                   	pop    edi
c0012b6b:	5d                   	pop    ebp
c0012b6c:	c3                   	ret    
c0012b6d:	90                   	nop

c0012b6e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012b6e:	55                   	push   ebp
c0012b6f:	57                   	push   edi
c0012b70:	56                   	push   esi
c0012b71:	53                   	push   ebx
c0012b72:	83 ec 1c             	sub    esp,0x1c
c0012b75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012b79:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012b7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b81:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012b84:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b88:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012b8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b90:	85 db                	test   ebx,ebx
c0012b92:	75 14                	jne    c0012ba8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c0012b94:	c7 44 24 30 94 93 02 c0 	mov    DWORD PTR [esp+0x30],0xc0029394
c0012b9c:	83 c4 1c             	add    esp,0x1c
c0012b9f:	5b                   	pop    ebx
c0012ba0:	5e                   	pop    esi
c0012ba1:	5f                   	pop    edi
c0012ba2:	5d                   	pop    ebp
c0012ba3:	e9 e8 d5 ff ff       	jmp    c0010190 <KePanic(char const*)>
c0012ba8:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0012baf:	50                   	push   eax
c0012bb0:	50                   	push   eax
c0012bb1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012bb6:	50                   	push   eax
c0012bb7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012bbc:	50                   	push   eax
c0012bbd:	e8 66 fa ff ff       	call   c0012628 <VgaText::combineColours(unsigned char, unsigned char)>
c0012bc2:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012bc6:	83 c4 10             	add    esp,0x10
c0012bc9:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012bcc:	0f b6 e8             	movzx  ebp,al
c0012bcf:	0f b7 c9             	movzx  ecx,cx
c0012bd2:	01 c9                	add    ecx,ecx
c0012bd4:	01 cb                	add    ebx,ecx
c0012bd6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012bd9:	85 c0                	test   eax,eax
c0012bdb:	0f 84 ef 00 00 00    	je     c0012cd0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012be1:	83 f8 0d             	cmp    eax,0xd
c0012be4:	75 0c                	jne    c0012bf2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0012be6:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012bed:	e9 d8 00 00 00       	jmp    c0012cca <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012bf2:	83 f8 0a             	cmp    eax,0xa
c0012bf5:	75 44                	jne    c0012c3b <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012bf7:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012bfa:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012c01:	8d 48 01             	lea    ecx,[eax+0x1]
c0012c04:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012c07:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012c0a:	75 0f                	jne    c0012c1b <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012c0c:	83 ec 0c             	sub    esp,0xc
c0012c0f:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012c12:	57                   	push   edi
c0012c13:	e8 22 fa ff ff       	call   c001263a <VgaText::scrollScreen()>
c0012c18:	83 c4 10             	add    esp,0x10
c0012c1b:	83 ec 0c             	sub    esp,0xc
c0012c1e:	57                   	push   edi
c0012c1f:	e8 20 f9 ff ff       	call   c0012544 <VgaText::updateCursor()>
c0012c24:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012c28:	83 c4 10             	add    esp,0x10
c0012c2b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012c2e:	0f b7 db             	movzx  ebx,bx
c0012c31:	01 db                	add    ebx,ebx
c0012c33:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012c36:	e9 8f 00 00 00       	jmp    c0012cca <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012c3b:	83 f8 08             	cmp    eax,0x8
c0012c3e:	75 34                	jne    c0012c74 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012c40:	51                   	push   ecx
c0012c41:	51                   	push   ecx
c0012c42:	6a 01                	push   0x1
c0012c44:	57                   	push   edi
c0012c45:	e8 82 fc ff ff       	call   c00128cc <VgaText::decrementCursor(bool)>
c0012c4a:	5b                   	pop    ebx
c0012c4b:	58                   	pop    eax
c0012c4c:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012c4f:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012c52:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012c55:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012c58:	6a 20                	push   0x20
c0012c5a:	57                   	push   edi
c0012c5b:	e8 7c fa ff ff       	call   c00126dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012c60:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012c64:	83 c4 20             	add    esp,0x20
c0012c67:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012c6a:	0f b7 db             	movzx  ebx,bx
c0012c6d:	01 db                	add    ebx,ebx
c0012c6f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012c72:	eb 56                	jmp    c0012cca <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012c74:	52                   	push   edx
c0012c75:	52                   	push   edx
c0012c76:	55                   	push   ebp
c0012c77:	50                   	push   eax
c0012c78:	e8 4f fa ff ff       	call   c00126cc <VgaText::combineCharAndColour(char, unsigned char)>
c0012c7d:	83 c4 10             	add    esp,0x10
c0012c80:	66 89 03             	mov    WORD PTR [ebx],ax
c0012c83:	39 3d f4 31 03 c0    	cmp    DWORD PTR ds:0xc00331f4,edi
c0012c89:	75 1d                	jne    c0012ca8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012c8b:	83 ec 0c             	sub    esp,0xc
c0012c8e:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012c91:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012c94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c9c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012c9f:	50                   	push   eax
c0012ca0:	e8 e3 93 00 00       	call   c001c088 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012ca5:	83 c4 20             	add    esp,0x20
c0012ca8:	83 c3 02             	add    ebx,0x2
c0012cab:	50                   	push   eax
c0012cac:	50                   	push   eax
c0012cad:	6a 00                	push   0x0
c0012caf:	57                   	push   edi
c0012cb0:	e8 c3 fb ff ff       	call   c0012878 <VgaText::incrementCursor(bool)>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012cbc:	75 0c                	jne    c0012cca <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012cbe:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012cc2:	0f b7 db             	movzx  ebx,bx
c0012cc5:	01 db                	add    ebx,ebx
c0012cc7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012cca:	46                   	inc    esi
c0012ccb:	e9 06 ff ff ff       	jmp    c0012bd6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012cd0:	83 ec 0c             	sub    esp,0xc
c0012cd3:	57                   	push   edi
c0012cd4:	e8 6b f8 ff ff       	call   c0012544 <VgaText::updateCursor()>
c0012cd9:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012ce0:	83 c4 2c             	add    esp,0x2c
c0012ce3:	5b                   	pop    ebx
c0012ce4:	5e                   	pop    esi
c0012ce5:	5f                   	pop    edi
c0012ce6:	5d                   	pop    ebp
c0012ce7:	c3                   	ret    

c0012ce8 <VgaText::VgaText(char const*)>:
c0012ce8:	56                   	push   esi
c0012ce9:	53                   	push   ebx
c0012cea:	83 ec 04             	sub    esp,0x4
c0012ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf1:	83 ec 08             	sub    esp,0x8
c0012cf4:	6a 00                	push   0x0
c0012cf6:	50                   	push   eax
c0012cf7:	e8 d8 05 00 00       	call   c00132d4 <UnixFile::UnixFile(int)>
c0012cfc:	83 c4 10             	add    esp,0x10
c0012cff:	ba cc 93 02 c0       	mov    edx,0xc00293cc
c0012d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d08:	89 10                	mov    DWORD PTR [eax],edx
c0012d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d0e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d19:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d24:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d2c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d34:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d3f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d4a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d55:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	68 a4 93 02 c0       	push   0xc00293a4
c0012d64:	e8 13 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012d69:	83 c4 10             	add    esp,0x10
c0012d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d70:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012d77:	83 ec 0c             	sub    esp,0xc
c0012d7a:	6a 01                	push   0x1
c0012d7c:	e8 a6 09 00 00       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c0012d81:	83 c4 10             	add    esp,0x10
c0012d84:	89 c2                	mov    edx,eax
c0012d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012d8d:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c0012d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012d9a:	89 c6                	mov    esi,eax
c0012d9c:	e8 e3 d5 ff ff       	call   c0010384 <Phys::allocatePage()>
c0012da1:	68 05 0c 00 00       	push   0xc05
c0012da6:	56                   	push   esi
c0012da7:	50                   	push   eax
c0012da8:	53                   	push   ebx
c0012da9:	e8 5c 10 00 00       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012dae:	83 c4 10             	add    esp,0x10
c0012db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012db8:	83 ec 04             	sub    esp,0x4
c0012dbb:	68 a0 0f 00 00       	push   0xfa0
c0012dc0:	6a 00                	push   0x0
c0012dc2:	50                   	push   eax
c0012dc3:	e8 28 d7 fe ff       	call   c00004f0 <memset>
c0012dc8:	83 c4 10             	add    esp,0x10
c0012dcb:	83 ec 04             	sub    esp,0x4
c0012dce:	6a 00                	push   0x0
c0012dd0:	6a 07                	push   0x7
c0012dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dd6:	e8 13 f8 ff ff       	call   c00125ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012ddb:	83 c4 10             	add    esp,0x10
c0012dde:	83 ec 04             	sub    esp,0x4
c0012de1:	6a 00                	push   0x0
c0012de3:	6a 00                	push   0x0
c0012de5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012de9:	e8 aa f9 ff ff       	call   c0012798 <VgaText::setCursor(int, int)>
c0012dee:	83 c4 10             	add    esp,0x10
c0012df1:	83 ec 0c             	sub    esp,0xc
c0012df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012df8:	e8 fd f9 ff ff       	call   c00127fa <VgaText::clearScreen()>
c0012dfd:	83 c4 10             	add    esp,0x10
c0012e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e04:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e0c:	05 82 00 00 00       	add    eax,0x82
c0012e11:	83 ec 04             	sub    esp,0x4
c0012e14:	68 80 00 00 00       	push   0x80
c0012e19:	6a 00                	push   0x0
c0012e1b:	50                   	push   eax
c0012e1c:	e8 cf d6 fe ff       	call   c00004f0 <memset>
c0012e21:	83 c4 10             	add    esp,0x10
c0012e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e28:	05 02 01 00 00       	add    eax,0x102
c0012e2d:	83 ec 04             	sub    esp,0x4
c0012e30:	68 80 00 00 00       	push   0x80
c0012e35:	6a 00                	push   0x0
c0012e37:	50                   	push   eax
c0012e38:	e8 b3 d6 fe ff       	call   c00004f0 <memset>
c0012e3d:	83 c4 10             	add    esp,0x10
c0012e40:	90                   	nop
c0012e41:	83 c4 04             	add    esp,0x4
c0012e44:	5b                   	pop    ebx
c0012e45:	5e                   	pop    esi
c0012e46:	c3                   	ret    
c0012e47:	90                   	nop

c0012e48 <VgaText::receiveKey(unsigned char)>:
c0012e48:	55                   	push   ebp
c0012e49:	57                   	push   edi
c0012e4a:	56                   	push   esi
c0012e4b:	53                   	push   ebx
c0012e4c:	83 ec 2c             	sub    esp,0x2c
c0012e4f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012e53:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012e57:	89 ef                	mov    edi,ebp
c0012e59:	81 e7 ff 00 00 00    	and    edi,0xff
c0012e5f:	0f 84 66 01 00 00    	je     c0012fcb <VgaText::receiveKey(unsigned char)+0x183>
c0012e65:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012e6b:	83 ff 08             	cmp    edi,0x8
c0012e6e:	75 73                	jne    c0012ee3 <VgaText::receiveKey(unsigned char)+0x9b>
c0012e70:	83 ec 0c             	sub    esp,0xc
c0012e73:	56                   	push   esi
c0012e74:	e8 f7 d6 fe ff       	call   c0000570 <strlen>
c0012e79:	83 c4 10             	add    esp,0x10
c0012e7c:	85 c0                	test   eax,eax
c0012e7e:	0f 84 02 01 00 00    	je     c0012f86 <VgaText::receiveKey(unsigned char)+0x13e>
c0012e84:	50                   	push   eax
c0012e85:	50                   	push   eax
c0012e86:	6a 08                	push   0x8
c0012e88:	53                   	push   ebx
c0012e89:	e8 30 fb ff ff       	call   c00129be <VgaText::putchar(char)>
c0012e8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e91:	e8 da d6 fe ff       	call   c0000570 <strlen>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012ea1:	83 fa 0d             	cmp    edx,0xd
c0012ea4:	89 d0                	mov    eax,edx
c0012ea6:	0f 95 c1             	setne  cl
c0012ea9:	83 fa 1f             	cmp    edx,0x1f
c0012eac:	0f 9e c2             	setle  dl
c0012eaf:	0f b6 d2             	movzx  edx,dl
c0012eb2:	85 ca                	test   edx,ecx
c0012eb4:	74 17                	je     c0012ecd <VgaText::receiveKey(unsigned char)+0x85>
c0012eb6:	83 e8 08             	sub    eax,0x8
c0012eb9:	3c 02                	cmp    al,0x2
c0012ebb:	76 10                	jbe    c0012ecd <VgaText::receiveKey(unsigned char)+0x85>
c0012ebd:	55                   	push   ebp
c0012ebe:	55                   	push   ebp
c0012ebf:	68 b7 93 02 c0       	push   0xc00293b7
c0012ec4:	53                   	push   ebx
c0012ec5:	e8 32 fc ff ff       	call   c0012afc <VgaText::puts(char const*)>
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	83 ec 0c             	sub    esp,0xc
c0012ed0:	56                   	push   esi
c0012ed1:	e8 9a d6 fe ff       	call   c0000570 <strlen>
c0012ed6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012ede:	e9 a0 00 00 00       	jmp    c0012f83 <VgaText::receiveKey(unsigned char)+0x13b>
c0012ee3:	83 ec 0c             	sub    esp,0xc
c0012ee6:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012eec:	50                   	push   eax
c0012eed:	e8 7e d6 fe ff       	call   c0000570 <strlen>
c0012ef2:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ef5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ef9:	e8 72 d6 fe ff       	call   c0000570 <strlen>
c0012efe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012f09:	3d 80 00 00 00       	cmp    eax,0x80
c0012f0e:	0f 87 b7 00 00 00    	ja     c0012fcb <VgaText::receiveKey(unsigned char)+0x183>
c0012f14:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012f17:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012f1a:	3c 1e                	cmp    al,0x1e
c0012f1c:	0f 96 c0             	setbe  al
c0012f1f:	80 fa 01             	cmp    dl,0x1
c0012f22:	0f 97 c2             	seta   dl
c0012f25:	0f b6 d2             	movzx  edx,dl
c0012f28:	85 c2                	test   edx,eax
c0012f2a:	74 2e                	je     c0012f5a <VgaText::receiveKey(unsigned char)+0x112>
c0012f2c:	83 ff 0d             	cmp    edi,0xd
c0012f2f:	74 29                	je     c0012f5a <VgaText::receiveKey(unsigned char)+0x112>
c0012f31:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012f34:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012f37:	68 bd 93 02 c0       	push   0xc00293bd
c0012f3c:	53                   	push   ebx
c0012f3d:	e8 2c fc ff ff       	call   c0012b6e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012f42:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012f45:	8d 45 40             	lea    eax,[ebp+0x40]
c0012f48:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012f4b:	0f b6 c0             	movzx  eax,al
c0012f4e:	50                   	push   eax
c0012f4f:	53                   	push   ebx
c0012f50:	e8 99 f9 ff ff       	call   c00128ee <VgaText::putchar(char, VgaColour, VgaColour)>
c0012f55:	83 c4 20             	add    esp,0x20
c0012f58:	eb 11                	jmp    c0012f6b <VgaText::receiveKey(unsigned char)+0x123>
c0012f5a:	89 e8                	mov    eax,ebp
c0012f5c:	51                   	push   ecx
c0012f5d:	0f be c0             	movsx  eax,al
c0012f60:	51                   	push   ecx
c0012f61:	50                   	push   eax
c0012f62:	53                   	push   ebx
c0012f63:	e8 56 fa ff ff       	call   c00129be <VgaText::putchar(char)>
c0012f68:	83 c4 10             	add    esp,0x10
c0012f6b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012f70:	89 e8                	mov    eax,ebp
c0012f72:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012f76:	52                   	push   edx
c0012f77:	52                   	push   edx
c0012f78:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012f7c:	50                   	push   eax
c0012f7d:	56                   	push   esi
c0012f7e:	e8 bd d8 fe ff       	call   c0000840 <strcat>
c0012f83:	83 c4 10             	add    esp,0x10
c0012f86:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012f8c:	b0 01                	mov    al,0x1
c0012f8e:	83 ff 1c             	cmp    edi,0x1c
c0012f91:	77 0e                	ja     c0012fa1 <VgaText::receiveKey(unsigned char)+0x159>
c0012f93:	b8 08 04 00 10       	mov    eax,0x10000408
c0012f98:	89 f9                	mov    ecx,edi
c0012f9a:	d3 e8                	shr    eax,cl
c0012f9c:	f7 d0                	not    eax
c0012f9e:	83 e0 01             	and    eax,0x1
c0012fa1:	84 c0                	test   al,al
c0012fa3:	74 04                	je     c0012fa9 <VgaText::receiveKey(unsigned char)+0x161>
c0012fa5:	84 d2                	test   dl,dl
c0012fa7:	74 22                	je     c0012fcb <VgaText::receiveKey(unsigned char)+0x183>
c0012fa9:	81 c3 02 01 00 00    	add    ebx,0x102
c0012faf:	50                   	push   eax
c0012fb0:	50                   	push   eax
c0012fb1:	56                   	push   esi
c0012fb2:	53                   	push   ebx
c0012fb3:	e8 88 d8 fe ff       	call   c0000840 <strcat>
c0012fb8:	83 c4 0c             	add    esp,0xc
c0012fbb:	68 80 00 00 00       	push   0x80
c0012fc0:	6a 00                	push   0x0
c0012fc2:	56                   	push   esi
c0012fc3:	e8 28 d5 fe ff       	call   c00004f0 <memset>
c0012fc8:	83 c4 10             	add    esp,0x10
c0012fcb:	83 c4 2c             	add    esp,0x2c
c0012fce:	5b                   	pop    ebx
c0012fcf:	5e                   	pop    esi
c0012fd0:	5f                   	pop    edi
c0012fd1:	5d                   	pop    ebp
c0012fd2:	c3                   	ret    
c0012fd3:	90                   	nop

c0012fd4 <VgaText::doUpdate()>:
c0012fd4:	c3                   	ret    
c0012fd5:	66 90                	xchg   ax,ax
c0012fd7:	90                   	nop

c0012fd8 <TSS::TSS()>:
c0012fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012fe3:	90                   	nop
c0012fe4:	c3                   	ret    
c0012fe5:	90                   	nop
c0012fe6:	66 90                	xchg   ax,ax

c0012fe8 <TSS::setESP(unsigned long)>:
c0012fe8:	55                   	push   ebp
c0012fe9:	89 e5                	mov    ebp,esp
c0012feb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012fee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ff1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012ff4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ff7:	90                   	nop
c0012ff8:	5d                   	pop    ebp
c0012ff9:	c3                   	ret    
c0012ffa:	66 90                	xchg   ax,ax

c0012ffc <TSS::flush()>:
c0012ffc:	55                   	push   ebp
c0012ffd:	89 e5                	mov    ebp,esp
c0012fff:	83 ec 10             	sub    esp,0x10
c0013002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013005:	8b 00                	mov    eax,DWORD PTR [eax]
c0013007:	83 c8 03             	or     eax,0x3
c001300a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001300e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0013012:	66 89 d0             	mov    ax,dx
c0013015:	0f 00 d8             	ltr    ax
c0013018:	90                   	nop
c0013019:	c9                   	leave  
c001301a:	c3                   	ret    
c001301b:	90                   	nop

c001301c <TSS::setup(unsigned long, unsigned long)>:
c001301c:	55                   	push   ebp
c001301d:	89 e5                	mov    ebp,esp
c001301f:	83 ec 18             	sub    esp,0x18
c0013022:	83 ec 0c             	sub    esp,0xc
c0013025:	6a 68                	push   0x68
c0013027:	e8 0f cd ff ff       	call   c000fd3b <malloc>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	89 c2                	mov    edx,eax
c0013031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013034:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001303a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001303d:	83 ec 08             	sub    esp,0x8
c0013040:	50                   	push   eax
c0013041:	68 e0 93 02 c0       	push   0xc00293e0
c0013046:	e8 31 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001304b:	83 c4 10             	add    esp,0x10
c001304e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013051:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013054:	83 ec 04             	sub    esp,0x4
c0013057:	6a 68                	push   0x68
c0013059:	6a 00                	push   0x0
c001305b:	50                   	push   eax
c001305c:	e8 8f d4 fe ff       	call   c00004f0 <memset>
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013067:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001306a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0013070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013073:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013076:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001307c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001307f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013082:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0013085:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001308b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001308e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0013094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001309a:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00130a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00130a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130a6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00130ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00130af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130b2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00130b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00130bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130be:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00130c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00130c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130ca:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00130d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00130d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130d6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00130d9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00130dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00130df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130e2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00130e5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00130e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00130eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130ee:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00130f5:	83 ec 0c             	sub    esp,0xc
c00130f8:	68 f7 93 02 c0       	push   0xc00293f7
c00130fd:	e8 7a 3e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013102:	83 c4 10             	add    esp,0x10
c0013105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001310b:	0f 20 da             	mov    edx,cr3
c001310e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0013111:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0013114:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0013117:	83 ec 0c             	sub    esp,0xc
c001311a:	68 fa 93 02 c0       	push   0xc00293fa
c001311f:	e8 58 3e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013124:	83 c4 10             	add    esp,0x10
c0013127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001312a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001312d:	83 ec 08             	sub    esp,0x8
c0013130:	50                   	push   eax
c0013131:	8d 45 ec             	lea    eax,[ebp-0x14]
c0013134:	50                   	push   eax
c0013135:	e8 66 bc ff ff       	call   c000eda0 <GDTEntry::setBase(unsigned int)>
c001313a:	83 c4 10             	add    esp,0x10
c001313d:	83 ec 08             	sub    esp,0x8
c0013140:	6a 68                	push   0x68
c0013142:	8d 45 ec             	lea    eax,[ebp-0x14]
c0013145:	50                   	push   eax
c0013146:	e8 71 bc ff ff       	call   c000edbc <GDTEntry::setLimit(unsigned int)>
c001314b:	83 c4 10             	add    esp,0x10
c001314e:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0013152:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0013155:	83 e0 0f             	and    eax,0xf
c0013158:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001315b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001315e:	83 c8 40             	or     eax,0x40
c0013161:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0013164:	83 ec 0c             	sub    esp,0xc
c0013167:	68 fd 93 02 c0       	push   0xc00293fd
c001316c:	e8 0b 3e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013171:	83 c4 10             	add    esp,0x10
c0013174:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0013179:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001317f:	83 ec 08             	sub    esp,0x8
c0013182:	50                   	push   eax
c0013183:	68 00 94 02 c0       	push   0xc0029400
c0013188:	e8 ef 3d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001318d:	83 c4 10             	add    esp,0x10
c0013190:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c0013195:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001319b:	05 64 01 00 00       	add    eax,0x164
c00131a0:	83 ec 04             	sub    esp,0x4
c00131a3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00131a6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00131a9:	50                   	push   eax
c00131aa:	e8 41 bc ff ff       	call   c000edf0 <GDT::addEntry(GDTEntry)>
c00131af:	83 c4 10             	add    esp,0x10
c00131b2:	89 c2                	mov    edx,eax
c00131b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00131b7:	89 10                	mov    DWORD PTR [eax],edx
c00131b9:	83 ec 0c             	sub    esp,0xc
c00131bc:	68 15 94 02 c0       	push   0xc0029415
c00131c1:	e8 b6 3d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00131c6:	83 c4 10             	add    esp,0x10
c00131c9:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00131ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00131d4:	05 64 01 00 00       	add    eax,0x164
c00131d9:	83 ec 0c             	sub    esp,0xc
c00131dc:	50                   	push   eax
c00131dd:	e8 38 bc ff ff       	call   c000ee1a <GDT::flush()>
c00131e2:	83 c4 10             	add    esp,0x10
c00131e5:	83 ec 0c             	sub    esp,0xc
c00131e8:	68 18 94 02 c0       	push   0xc0029418
c00131ed:	e8 8a 3d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00131f2:	83 c4 10             	add    esp,0x10
c00131f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00131f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00131fa:	c9                   	leave  
c00131fb:	c3                   	ret    

c00131fc <ReservedFilename::read(unsigned long long, void*, int*)>:
c00131fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013200:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013204:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013207:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001320c:	75 08                	jne    c0013216 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001320e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0013214:	eb 38                	jmp    c001324e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0013216:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001321b:	75 17                	jne    c0013234 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001321d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013222:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013225:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001322b:	8b 10                	mov    edx,DWORD PTR [eax]
c001322d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013231:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0013234:	89 c1                	mov    ecx,eax
c0013236:	83 e1 fd             	and    ecx,0xfffffffd
c0013239:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001323f:	74 cd                	je     c001320e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0013241:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013246:	83 e0 ef             	and    eax,0xffffffef
c0013249:	83 f8 08             	cmp    eax,0x8
c001324c:	76 c0                	jbe    c001320e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001324e:	31 c0                	xor    eax,eax
c0013250:	c3                   	ret    
c0013251:	90                   	nop

c0013252 <ReservedFilename::isAtty()>:
c0013252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013256:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013259:	31 c0                	xor    eax,eax
c001325b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0013261:	74 09                	je     c001326c <ReservedFilename::isAtty()+0x1a>
c0013263:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0013269:	0f 94 c0             	sete   al
c001326c:	c3                   	ret    
c001326d:	90                   	nop

c001326e <ReservedFilename::write(unsigned long long, void*, int*)>:
c001326e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013272:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013276:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013279:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001327d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0013282:	75 08                	jne    c001328c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0013284:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001328a:	eb 3d                	jmp    c00132c9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001328c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013291:	75 17                	jne    c00132aa <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0013293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013298:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001329b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00132a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00132a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00132a7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00132aa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00132af:	75 04                	jne    c00132b5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00132b1:	89 0a                	mov    DWORD PTR [edx],ecx
c00132b3:	eb 14                	jmp    c00132c9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00132b5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00132ba:	74 c8                	je     c0013284 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00132bc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00132c1:	83 e0 ef             	and    eax,0xffffffef
c00132c4:	83 f8 08             	cmp    eax,0x8
c00132c7:	76 bb                	jbe    c0013284 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00132c9:	31 c0                	xor    eax,eax
c00132cb:	c3                   	ret    

c00132cc <UnixFile::getFileDescriptor()>:
c00132cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00132d3:	c3                   	ret    

c00132d4 <UnixFile::UnixFile(int)>:
c00132d4:	53                   	push   ebx
c00132d5:	83 ec 28             	sub    esp,0x28
c00132d8:	ba 44 94 02 c0       	mov    edx,0xc0029444
c00132dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132e1:	89 10                	mov    DWORD PTR [eax],edx
c00132e3:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00132eb:	0f 8f 90 01 00 00    	jg     c0013481 <UnixFile::UnixFile(int)+0x1ad>
c00132f1:	a1 00 c7 02 c0       	mov    eax,ds:0xc002c700
c00132f6:	8d 50 01             	lea    edx,[eax+0x1]
c00132f9:	89 15 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,edx
c00132ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013303:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013306:	83 ec 08             	sub    esp,0x8
c0013309:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001330d:	68 78 32 03 c0       	push   0xc0033278
c0013312:	e8 2b 3c 01 00       	call   c0026f42 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013317:	83 c4 10             	add    esp,0x10
c001331a:	a0 74 32 03 c0       	mov    al,ds:0xc0033274
c001331f:	83 f0 01             	xor    eax,0x1
c0013322:	0f b6 c0             	movzx  eax,al
c0013325:	85 c0                	test   eax,eax
c0013327:	0f 84 55 01 00 00    	je     c0013482 <UnixFile::UnixFile(int)+0x1ae>
c001332d:	c6 05 74 32 03 c0 01 	mov    BYTE PTR ds:0xc0033274,0x1
c0013334:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001333c:	83 ec 0c             	sub    esp,0xc
c001333f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013343:	e8 f3 c9 ff ff       	call   c000fd3b <malloc>
c0013348:	83 c4 10             	add    esp,0x10
c001334b:	89 c3                	mov    ebx,eax
c001334d:	83 ec 08             	sub    esp,0x8
c0013350:	68 03 ff ff 0f       	push   0xfffff03
c0013355:	53                   	push   ebx
c0013356:	e8 2d 01 00 00       	call   c0013488 <ReservedFilename::ReservedFilename(int)>
c001335b:	83 c4 10             	add    esp,0x10
c001335e:	89 1d 6c 32 03 c0    	mov    DWORD PTR ds:0xc003326c,ebx
c0013364:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001336c:	83 ec 0c             	sub    esp,0xc
c001336f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013373:	e8 c3 c9 ff ff       	call   c000fd3b <malloc>
c0013378:	83 c4 10             	add    esp,0x10
c001337b:	89 c3                	mov    ebx,eax
c001337d:	83 ec 08             	sub    esp,0x8
c0013380:	68 01 ff ff 0f       	push   0xfffff01
c0013385:	53                   	push   ebx
c0013386:	e8 fd 00 00 00       	call   c0013488 <ReservedFilename::ReservedFilename(int)>
c001338b:	83 c4 10             	add    esp,0x10
c001338e:	89 1d 70 32 03 c0    	mov    DWORD PTR ds:0xc0033270,ebx
c0013394:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001339c:	83 ec 0c             	sub    esp,0xc
c001339f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00133a3:	e8 93 c9 ff ff       	call   c000fd3b <malloc>
c00133a8:	83 c4 10             	add    esp,0x10
c00133ab:	89 c3                	mov    ebx,eax
c00133ad:	83 ec 08             	sub    esp,0x8
c00133b0:	68 00 ff ff 0f       	push   0xfffff00
c00133b5:	53                   	push   ebx
c00133b6:	e8 cd 00 00 00       	call   c0013488 <ReservedFilename::ReservedFilename(int)>
c00133bb:	83 c4 10             	add    esp,0x10
c00133be:	89 1d 64 32 03 c0    	mov    DWORD PTR ds:0xc0033264,ebx
c00133c4:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00133cc:	83 ec 0c             	sub    esp,0xc
c00133cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00133d3:	e8 63 c9 ff ff       	call   c000fd3b <malloc>
c00133d8:	83 c4 10             	add    esp,0x10
c00133db:	89 c3                	mov    ebx,eax
c00133dd:	83 ec 08             	sub    esp,0x8
c00133e0:	68 02 ff ff 0f       	push   0xfffff02
c00133e5:	53                   	push   ebx
c00133e6:	e8 9d 00 00 00       	call   c0013488 <ReservedFilename::ReservedFilename(int)>
c00133eb:	83 c4 10             	add    esp,0x10
c00133ee:	89 1d 68 32 03 c0    	mov    DWORD PTR ds:0xc0033268,ebx
c00133f4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00133fc:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013401:	7f 7f                	jg     c0013482 <UnixFile::UnixFile(int)+0x1ae>
c0013403:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001340b:	83 ec 0c             	sub    esp,0xc
c001340e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013412:	e8 24 c9 ff ff       	call   c000fd3b <malloc>
c0013417:	83 c4 10             	add    esp,0x10
c001341a:	89 c3                	mov    ebx,eax
c001341c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013420:	05 10 ff ff 0f       	add    eax,0xfffff10
c0013425:	83 ec 08             	sub    esp,0x8
c0013428:	50                   	push   eax
c0013429:	53                   	push   ebx
c001342a:	e8 59 00 00 00       	call   c0013488 <ReservedFilename::ReservedFilename(int)>
c001342f:	83 c4 10             	add    esp,0x10
c0013432:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013436:	89 1c 85 40 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccdc0],ebx
c001343d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0013445:	83 ec 0c             	sub    esp,0xc
c0013448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001344c:	e8 ea c8 ff ff       	call   c000fd3b <malloc>
c0013451:	83 c4 10             	add    esp,0x10
c0013454:	89 c3                	mov    ebx,eax
c0013456:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001345a:	05 20 ff ff 0f       	add    eax,0xfffff20
c001345f:	83 ec 08             	sub    esp,0x8
c0013462:	50                   	push   eax
c0013463:	53                   	push   ebx
c0013464:	e8 1f 00 00 00       	call   c0013488 <ReservedFilename::ReservedFilename(int)>
c0013469:	83 c4 10             	add    esp,0x10
c001346c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013470:	89 1c 85 00 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce00],ebx
c0013477:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001347c:	e9 7b ff ff ff       	jmp    c00133fc <UnixFile::UnixFile(int)+0x128>
c0013481:	90                   	nop
c0013482:	83 c4 28             	add    esp,0x28
c0013485:	5b                   	pop    ebx
c0013486:	c3                   	ret    
c0013487:	90                   	nop

c0013488 <ReservedFilename::ReservedFilename(int)>:
c0013488:	83 ec 0c             	sub    esp,0xc
c001348b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001348f:	83 ec 08             	sub    esp,0x8
c0013492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013496:	50                   	push   eax
c0013497:	e8 38 fe ff ff       	call   c00132d4 <UnixFile::UnixFile(int)>
c001349c:	83 c4 10             	add    esp,0x10
c001349f:	ba 60 94 02 c0       	mov    edx,0xc0029460
c00134a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a8:	89 10                	mov    DWORD PTR [eax],edx
c00134aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00134b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00134b5:	90                   	nop
c00134b6:	83 c4 0c             	add    esp,0xc
c00134b9:	c3                   	ret    

c00134ba <UnixFile::~UnixFile()>:
c00134ba:	83 ec 1c             	sub    esp,0x1c
c00134bd:	ba 44 94 02 c0       	mov    edx,0xc0029444
c00134c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134c6:	89 10                	mov    DWORD PTR [eax],edx
c00134c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00134cf:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00134d4:	7f 76                	jg     c001354c <UnixFile::~UnixFile()+0x92>
c00134d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00134de:	83 ec 0c             	sub    esp,0xc
c00134e1:	68 78 32 03 c0       	push   0xc0033278
c00134e6:	e8 2b 3b 01 00       	call   c0027016 <LinkedList<UnixFile>::getFirstElement()>
c00134eb:	83 c4 10             	add    esp,0x10
c00134ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00134f2:	83 ec 0c             	sub    esp,0xc
c00134f5:	68 78 32 03 c0       	push   0xc0033278
c00134fa:	e8 1f 3b 01 00       	call   c002701e <LinkedList<UnixFile>::removeFirst()>
c00134ff:	83 c4 10             	add    esp,0x10
c0013502:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013506:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001350a:	74 43                	je     c001354f <UnixFile::~UnixFile()+0x95>
c001350c:	83 ec 08             	sub    esp,0x8
c001350f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013513:	68 78 32 03 c0       	push   0xc0033278
c0013518:	e8 25 3a 01 00       	call   c0026f42 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001351d:	83 c4 10             	add    esp,0x10
c0013520:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013524:	8d 50 01             	lea    edx,[eax+0x1]
c0013527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001352b:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013530:	0f 94 c0             	sete   al
c0013533:	0f b6 c0             	movzx  eax,al
c0013536:	85 c0                	test   eax,eax
c0013538:	74 a4                	je     c00134de <UnixFile::~UnixFile()+0x24>
c001353a:	83 ec 0c             	sub    esp,0xc
c001353d:	68 1c 94 02 c0       	push   0xc002941c
c0013542:	e8 49 cc ff ff       	call   c0010190 <KePanic(char const*)>
c0013547:	83 c4 10             	add    esp,0x10
c001354a:	eb 92                	jmp    c00134de <UnixFile::~UnixFile()+0x24>
c001354c:	90                   	nop
c001354d:	eb 01                	jmp    c0013550 <UnixFile::~UnixFile()+0x96>
c001354f:	90                   	nop
c0013550:	90                   	nop
c0013551:	83 c4 1c             	add    esp,0x1c
c0013554:	c3                   	ret    
c0013555:	90                   	nop

c0013556 <UnixFile::~UnixFile()>:
c0013556:	83 ec 0c             	sub    esp,0xc
c0013559:	83 ec 0c             	sub    esp,0xc
c001355c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013560:	e8 55 ff ff ff       	call   c00134ba <UnixFile::~UnixFile()>
c0013565:	83 c4 10             	add    esp,0x10
c0013568:	83 ec 08             	sub    esp,0x8
c001356b:	6a 0c                	push   0xc
c001356d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013571:	e8 de a2 ff ff       	call   c000d854 <operator delete(void*, unsigned long)>
c0013576:	83 c4 10             	add    esp,0x10
c0013579:	83 c4 0c             	add    esp,0xc
c001357c:	c3                   	ret    
c001357d:	90                   	nop

c001357e <ReservedFilename::~ReservedFilename()>:
c001357e:	83 ec 0c             	sub    esp,0xc
c0013581:	ba 60 94 02 c0       	mov    edx,0xc0029460
c0013586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001358a:	89 10                	mov    DWORD PTR [eax],edx
c001358c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	50                   	push   eax
c0013594:	e8 21 ff ff ff       	call   c00134ba <UnixFile::~UnixFile()>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	90                   	nop
c001359d:	83 c4 0c             	add    esp,0xc
c00135a0:	c3                   	ret    
c00135a1:	90                   	nop

c00135a2 <ReservedFilename::~ReservedFilename()>:
c00135a2:	83 ec 0c             	sub    esp,0xc
c00135a5:	83 ec 0c             	sub    esp,0xc
c00135a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135ac:	e8 cd ff ff ff       	call   c001357e <ReservedFilename::~ReservedFilename()>
c00135b1:	83 c4 10             	add    esp,0x10
c00135b4:	83 ec 08             	sub    esp,0x8
c00135b7:	6a 0c                	push   0xc
c00135b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135bd:	e8 92 a2 ff ff       	call   c000d854 <operator delete(void*, unsigned long)>
c00135c2:	83 c4 10             	add    esp,0x10
c00135c5:	83 c4 0c             	add    esp,0xc
c00135c8:	c3                   	ret    

c00135c9 <KeGetFileFromDescriptor(int)>:
c00135c9:	53                   	push   ebx
c00135ca:	83 ec 08             	sub    esp,0x8
c00135cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00135d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00135dd:	7f 30                	jg     c001360f <KeGetFileFromDescriptor(int)+0x46>
c00135df:	83 ec 0c             	sub    esp,0xc
c00135e2:	68 78 32 03 c0       	push   0xc0033278
c00135e7:	e8 2a 3a 01 00       	call   c0027016 <LinkedList<UnixFile>::getFirstElement()>
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	8d 50 ff             	lea    edx,[eax-0x1]
c00135f2:	83 fa fd             	cmp    edx,0xfffffffd
c00135f5:	76 04                	jbe    c00135fb <KeGetFileFromDescriptor(int)+0x32>
c00135f7:	31 c0                	xor    eax,eax
c00135f9:	eb 6e                	jmp    c0013669 <KeGetFileFromDescriptor(int)+0xa0>
c00135fb:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00135fe:	74 69                	je     c0013669 <KeGetFileFromDescriptor(int)+0xa0>
c0013600:	52                   	push   edx
c0013601:	52                   	push   edx
c0013602:	50                   	push   eax
c0013603:	68 78 32 03 c0       	push   0xc0033278
c0013608:	e8 b3 3a 01 00       	call   c00270c0 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001360d:	eb dd                	jmp    c00135ec <KeGetFileFromDescriptor(int)+0x23>
c001360f:	a1 6c 32 03 c0       	mov    eax,ds:0xc003326c
c0013614:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001361a:	74 4d                	je     c0013669 <KeGetFileFromDescriptor(int)+0xa0>
c001361c:	a1 70 32 03 c0       	mov    eax,ds:0xc0033270
c0013621:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0013627:	74 40                	je     c0013669 <KeGetFileFromDescriptor(int)+0xa0>
c0013629:	a1 68 32 03 c0       	mov    eax,ds:0xc0033268
c001362e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0013634:	74 33                	je     c0013669 <KeGetFileFromDescriptor(int)+0xa0>
c0013636:	a1 64 32 03 c0       	mov    eax,ds:0xc0033264
c001363b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013641:	74 26                	je     c0013669 <KeGetFileFromDescriptor(int)+0xa0>
c0013643:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013649:	83 f8 08             	cmp    eax,0x8
c001364c:	77 09                	ja     c0013657 <KeGetFileFromDescriptor(int)+0x8e>
c001364e:	8b 04 85 40 32 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccdc0]
c0013655:	eb 12                	jmp    c0013669 <KeGetFileFromDescriptor(int)+0xa0>
c0013657:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001365d:	83 fb 08             	cmp    ebx,0x8
c0013660:	77 95                	ja     c00135f7 <KeGetFileFromDescriptor(int)+0x2e>
c0013662:	8b 04 9d 00 32 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcce00]
c0013669:	83 c4 08             	add    esp,0x8
c001366c:	5b                   	pop    ebx
c001366d:	c3                   	ret    

c001366e <__static_initialization_and_destruction_0(int, int)>:
c001366e:	83 ec 0c             	sub    esp,0xc
c0013671:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013676:	75 34                	jne    c00136ac <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013678:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013680:	75 2a                	jne    c00136ac <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013682:	83 ec 0c             	sub    esp,0xc
c0013685:	68 78 32 03 c0       	push   0xc0033278
c001368a:	e8 71 38 01 00       	call   c0026f00 <LinkedList<UnixFile>::LinkedList()>
c001368f:	83 c4 10             	add    esp,0x10
c0013692:	83 ec 04             	sub    esp,0x4
c0013695:	68 e0 be 02 c0       	push   0xc002bee0
c001369a:	68 78 32 03 c0       	push   0xc0033278
c001369f:	68 fe 6e 02 c0       	push   0xc0026efe
c00136a4:	e8 5b a1 ff ff       	call   c000d804 <__cxa_atexit>
c00136a9:	83 c4 10             	add    esp,0x10
c00136ac:	90                   	nop
c00136ad:	83 c4 0c             	add    esp,0xc
c00136b0:	c3                   	ret    

c00136b1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00136b1:	83 ec 0c             	sub    esp,0xc
c00136b4:	83 ec 08             	sub    esp,0x8
c00136b7:	68 ff ff 00 00       	push   0xffff
c00136bc:	6a 01                	push   0x1
c00136be:	e8 ab ff ff ff       	call   c001366e <__static_initialization_and_destruction_0(int, int)>
c00136c3:	83 c4 10             	add    esp,0x10
c00136c6:	83 c4 0c             	add    esp,0xc
c00136c9:	c3                   	ret    

c00136ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00136ca:	53                   	push   ebx
c00136cb:	8b 15 08 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c708
c00136d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00136d9:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00136df:	89 d8                	mov    eax,ebx
c00136e1:	d1 e8                	shr    eax,1
c00136e3:	01 d0                	add    eax,edx
c00136e5:	80 e3 01             	and    bl,0x1
c00136e8:	8a 10                	mov    dl,BYTE PTR [eax]
c00136ea:	75 09                	jne    c00136f5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00136ec:	83 e2 f0             	and    edx,0xfffffff0
c00136ef:	09 ca                	or     edx,ecx
c00136f1:	88 10                	mov    BYTE PTR [eax],dl
c00136f3:	5b                   	pop    ebx
c00136f4:	c3                   	ret    
c00136f5:	83 e2 0f             	and    edx,0xf
c00136f8:	0f b6 c9             	movzx  ecx,cl
c00136fb:	c1 e1 04             	shl    ecx,0x4
c00136fe:	09 ca                	or     edx,ecx
c0013700:	88 10                	mov    BYTE PTR [eax],dl
c0013702:	5b                   	pop    ebx
c0013703:	c3                   	ret    

c0013704 <Virt::getPageState(unsigned long)>:
c0013704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013708:	8b 0d 08 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c708
c001370e:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013714:	89 d0                	mov    eax,edx
c0013716:	d1 e8                	shr    eax,1
c0013718:	80 e2 01             	and    dl,0x1
c001371b:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001371e:	74 03                	je     c0013723 <Virt::getPageState(unsigned long)+0x1f>
c0013720:	c1 e8 04             	shr    eax,0x4
c0013723:	83 e0 0f             	and    eax,0xf
c0013726:	c3                   	ret    

c0013727 <Virt::allocateKernelVirtualPages(int)>:
c0013727:	55                   	push   ebp
c0013728:	31 ed                	xor    ebp,ebp
c001372a:	57                   	push   edi
c001372b:	31 ff                	xor    edi,edi
c001372d:	56                   	push   esi
c001372e:	53                   	push   ebx
c001372f:	31 db                	xor    ebx,ebx
c0013731:	83 ec 0c             	sub    esp,0xc
c0013734:	8b 35 04 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c704
c001373a:	56                   	push   esi
c001373b:	e8 c4 ff ff ff       	call   c0013704 <Virt::getPageState(unsigned long)>
c0013740:	5a                   	pop    edx
c0013741:	84 c0                	test   al,al
c0013743:	75 41                	jne    c0013786 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0013745:	85 db                	test   ebx,ebx
c0013747:	75 02                	jne    c001374b <Virt::allocateKernelVirtualPages(int)+0x24>
c0013749:	89 f5                	mov    ebp,esi
c001374b:	83 c3 01             	add    ebx,0x1
c001374e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013752:	74 5f                	je     c00137b3 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0013754:	83 c6 01             	add    esi,0x1
c0013757:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c001375d:	76 34                	jbe    c0013793 <Virt::allocateKernelVirtualPages(int)+0x6c>
c001375f:	c7 05 04 c7 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c704,0xc8000
c0013769:	f7 c7 01 00 00 00    	test   edi,0x1
c001376f:	75 2a                	jne    c001379b <Virt::allocateKernelVirtualPages(int)+0x74>
c0013771:	be 00 80 0c 00       	mov    esi,0xc8000
c0013776:	bf 01 00 00 00       	mov    edi,0x1
c001377b:	56                   	push   esi
c001377c:	e8 83 ff ff ff       	call   c0013704 <Virt::getPageState(unsigned long)>
c0013781:	5a                   	pop    edx
c0013782:	84 c0                	test   al,al
c0013784:	74 bf                	je     c0013745 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0013786:	31 db                	xor    ebx,ebx
c0013788:	83 c6 01             	add    esi,0x1
c001378b:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013791:	77 cc                	ja     c001375f <Virt::allocateKernelVirtualPages(int)+0x38>
c0013793:	89 35 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,esi
c0013799:	eb 9f                	jmp    c001373a <Virt::allocateKernelVirtualPages(int)+0x13>
c001379b:	83 ec 0c             	sub    esp,0xc
c001379e:	68 74 94 02 c0       	push   0xc0029474
c00137a3:	e8 e8 c9 ff ff       	call   c0010190 <KePanic(char const*)>
c00137a8:	8b 35 04 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c704
c00137ae:	83 c4 10             	add    esp,0x10
c00137b1:	eb 87                	jmp    c001373a <Virt::allocateKernelVirtualPages(int)+0x13>
c00137b3:	89 2d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,ebp
c00137b9:	83 fb 01             	cmp    ebx,0x1
c00137bc:	74 6f                	je     c001382d <Virt::allocateKernelVirtualPages(int)+0x106>
c00137be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00137c2:	85 c9                	test   ecx,ecx
c00137c4:	74 49                	je     c001380f <Virt::allocateKernelVirtualPages(int)+0xe8>
c00137c6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00137ca:	89 e8                	mov    eax,ebp
c00137cc:	31 db                	xor    ebx,ebx
c00137ce:	8d 79 ff             	lea    edi,[ecx-0x1]
c00137d1:	eb 18                	jmp    c00137eb <Virt::allocateKernelVirtualPages(int)+0xc4>
c00137d3:	6a 01                	push   0x1
c00137d5:	83 c3 01             	add    ebx,0x1
c00137d8:	50                   	push   eax
c00137d9:	e8 ec fe ff ff       	call   c00136ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00137de:	58                   	pop    eax
c00137df:	5a                   	pop    edx
c00137e0:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00137e4:	74 29                	je     c001380f <Virt::allocateKernelVirtualPages(int)+0xe8>
c00137e6:	a1 04 c7 02 c0       	mov    eax,ds:0xc002c704
c00137eb:	8d 50 01             	lea    edx,[eax+0x1]
c00137ee:	85 db                	test   ebx,ebx
c00137f0:	89 15 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edx
c00137f6:	74 24                	je     c001381c <Virt::allocateKernelVirtualPages(int)+0xf5>
c00137f8:	39 df                	cmp    edi,ebx
c00137fa:	75 d7                	jne    c00137d3 <Virt::allocateKernelVirtualPages(int)+0xac>
c00137fc:	6a 03                	push   0x3
c00137fe:	83 c3 01             	add    ebx,0x1
c0013801:	50                   	push   eax
c0013802:	e8 c3 fe ff ff       	call   c00136ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013807:	59                   	pop    ecx
c0013808:	5e                   	pop    esi
c0013809:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001380d:	75 d7                	jne    c00137e6 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001380f:	83 c4 0c             	add    esp,0xc
c0013812:	89 e8                	mov    eax,ebp
c0013814:	5b                   	pop    ebx
c0013815:	c1 e0 0c             	shl    eax,0xc
c0013818:	5e                   	pop    esi
c0013819:	5f                   	pop    edi
c001381a:	5d                   	pop    ebp
c001381b:	c3                   	ret    
c001381c:	6a 02                	push   0x2
c001381e:	bb 01 00 00 00       	mov    ebx,0x1
c0013823:	50                   	push   eax
c0013824:	e8 a1 fe ff ff       	call   c00136ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013829:	58                   	pop    eax
c001382a:	5a                   	pop    edx
c001382b:	eb b9                	jmp    c00137e6 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001382d:	6a 04                	push   0x4
c001382f:	8d 45 01             	lea    eax,[ebp+0x1]
c0013832:	55                   	push   ebp
c0013833:	a3 04 c7 02 c0       	mov    ds:0xc002c704,eax
c0013838:	e8 8d fe ff ff       	call   c00136ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001383d:	5b                   	pop    ebx
c001383e:	89 e8                	mov    eax,ebp
c0013840:	5e                   	pop    esi
c0013841:	c1 e0 0c             	shl    eax,0xc
c0013844:	83 c4 0c             	add    esp,0xc
c0013847:	5b                   	pop    ebx
c0013848:	5e                   	pop    esi
c0013849:	5f                   	pop    edi
c001384a:	5d                   	pop    ebp
c001384b:	c3                   	ret    

c001384c <Virt::freeSwapfilePage(unsigned long)>:
c001384c:	53                   	push   ebx
c001384d:	8b 15 8c 32 03 c0    	mov    edx,DWORD PTR ds:0xc003328c
c0013853:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013857:	b8 01 00 00 00       	mov    eax,0x1
c001385c:	89 cb                	mov    ebx,ecx
c001385e:	d3 e0                	shl    eax,cl
c0013860:	c1 eb 05             	shr    ebx,0x5
c0013863:	f7 d0                	not    eax
c0013865:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013868:	21 c1                	and    ecx,eax
c001386a:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001386d:	5b                   	pop    ebx
c001386e:	c3                   	ret    

c001386f <Virt::swapIDToSector(unsigned long)>:
c001386f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013873:	8b 15 0c c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c70c
c0013879:	8b 0d 14 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c714
c001387f:	0f af c2             	imul   eax,edx
c0013882:	01 c8                	add    eax,ecx
c0013884:	c3                   	ret    

c0013885 <Virt::allocateSwapfilePage()>:
c0013885:	55                   	push   ebp
c0013886:	31 d2                	xor    edx,edx
c0013888:	57                   	push   edi
c0013889:	56                   	push   esi
c001388a:	53                   	push   ebx
c001388b:	83 ec 0c             	sub    esp,0xc
c001388e:	8b 0d 0c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c70c
c0013894:	a1 10 c7 02 c0       	mov    eax,ds:0xc002c710
c0013899:	f7 f1                	div    ecx
c001389b:	39 0d 10 c7 02 c0    	cmp    DWORD PTR ds:0xc002c710,ecx
c00138a1:	72 2f                	jb     c00138d2 <Virt::allocateSwapfilePage()+0x4d>
c00138a3:	8b 35 8c 32 03 c0    	mov    esi,DWORD PTR ds:0xc003328c
c00138a9:	8b 16                	mov    edx,DWORD PTR [esi]
c00138ab:	f6 c2 01             	test   dl,0x1
c00138ae:	74 3e                	je     c00138ee <Virt::allocateSwapfilePage()+0x69>
c00138b0:	31 c9                	xor    ecx,ecx
c00138b2:	bf 01 00 00 00       	mov    edi,0x1
c00138b7:	eb 12                	jmp    c00138cb <Virt::allocateSwapfilePage()+0x46>
c00138b9:	89 fd                	mov    ebp,edi
c00138bb:	89 ca                	mov    edx,ecx
c00138bd:	d3 e5                	shl    ebp,cl
c00138bf:	c1 ea 05             	shr    edx,0x5
c00138c2:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00138c5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00138c7:	85 ea                	test   edx,ebp
c00138c9:	74 2c                	je     c00138f7 <Virt::allocateSwapfilePage()+0x72>
c00138cb:	83 c1 01             	add    ecx,0x1
c00138ce:	39 c8                	cmp    eax,ecx
c00138d0:	77 e7                	ja     c00138b9 <Virt::allocateSwapfilePage()+0x34>
c00138d2:	83 ec 0c             	sub    esp,0xc
c00138d5:	68 87 97 02 c0       	push   0xc0029787
c00138da:	e8 b1 c8 ff ff       	call   c0010190 <KePanic(char const*)>
c00138df:	83 c4 10             	add    esp,0x10
c00138e2:	31 c9                	xor    ecx,ecx
c00138e4:	83 c4 0c             	add    esp,0xc
c00138e7:	89 c8                	mov    eax,ecx
c00138e9:	5b                   	pop    ebx
c00138ea:	5e                   	pop    esi
c00138eb:	5f                   	pop    edi
c00138ec:	5d                   	pop    ebp
c00138ed:	c3                   	ret    
c00138ee:	89 f3                	mov    ebx,esi
c00138f0:	bd 01 00 00 00       	mov    ebp,0x1
c00138f5:	31 c9                	xor    ecx,ecx
c00138f7:	09 ea                	or     edx,ebp
c00138f9:	89 c8                	mov    eax,ecx
c00138fb:	89 13                	mov    DWORD PTR [ebx],edx
c00138fd:	83 c4 0c             	add    esp,0xc
c0013900:	5b                   	pop    ebx
c0013901:	5e                   	pop    esi
c0013902:	5f                   	pop    edi
c0013903:	5d                   	pop    ebp
c0013904:	c3                   	ret    

c0013905 <Virt::virtualMemorySetup()>:
c0013905:	53                   	push   ebx
c0013906:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001390b:	6a 0f                	push   0xf
c001390d:	53                   	push   ebx
c001390e:	83 c3 01             	add    ebx,0x1
c0013911:	e8 b4 fd ff ff       	call   c00136ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013916:	58                   	pop    eax
c0013917:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001391d:	5a                   	pop    edx
c001391e:	75 eb                	jne    c001390b <Virt::virtualMemorySetup()+0x6>
c0013920:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013925:	6a 00                	push   0x0
c0013927:	53                   	push   ebx
c0013928:	83 c3 01             	add    ebx,0x1
c001392b:	e8 9a fd ff ff       	call   c00136ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013930:	59                   	pop    ecx
c0013931:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013937:	58                   	pop    eax
c0013938:	75 eb                	jne    c0013925 <Virt::virtualMemorySetup()+0x20>
c001393a:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001393f:	6a 0f                	push   0xf
c0013941:	53                   	push   ebx
c0013942:	83 c3 01             	add    ebx,0x1
c0013945:	e8 80 fd ff ff       	call   c00136ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001394a:	58                   	pop    eax
c001394b:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013951:	5a                   	pop    edx
c0013952:	75 eb                	jne    c001393f <Virt::virtualMemorySetup()+0x3a>
c0013954:	5b                   	pop    ebx
c0013955:	c3                   	ret    

c0013956 <Virt::setupPageSwapping(int)>:
c0013956:	53                   	push   ebx
c0013957:	83 ec 0c             	sub    esp,0xc
c001395a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001395e:	a1 e8 2a 03 c0       	mov    eax,ds:0xc0032ae8
c0013963:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013969:	8b 10                	mov    edx,DWORD PTR [eax]
c001396b:	53                   	push   ebx
c001396c:	c1 e3 0b             	shl    ebx,0xb
c001396f:	68 9e 97 02 c0       	push   0xc002979e
c0013974:	50                   	push   eax
c0013975:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013978:	89 1d 10 c7 02 c0    	mov    DWORD PTR ds:0xc002c710,ebx
c001397e:	c6 05 18 c7 02 c0 43 	mov    BYTE PTR ds:0xc002c718,0x43
c0013985:	c1 eb 08             	shr    ebx,0x8
c0013988:	a3 14 c7 02 c0       	mov    ds:0xc002c714,eax
c001398d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013990:	c7 05 0c c7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c70c,0x8
c001399a:	e8 9c c3 ff ff       	call   c000fd3b <malloc>
c001399f:	83 c4 0c             	add    esp,0xc
c00139a2:	89 c1                	mov    ecx,eax
c00139a4:	a3 8c 32 03 c0       	mov    ds:0xc003328c,eax
c00139a9:	31 d2                	xor    edx,edx
c00139ab:	a1 10 c7 02 c0       	mov    eax,ds:0xc002c710
c00139b0:	f7 35 0c c7 02 c0    	div    DWORD PTR ds:0xc002c70c
c00139b6:	c1 e8 05             	shr    eax,0x5
c00139b9:	50                   	push   eax
c00139ba:	6a 00                	push   0x0
c00139bc:	51                   	push   ecx
c00139bd:	e8 2e cb fe ff       	call   c00004f0 <memset>
c00139c2:	83 c4 18             	add    esp,0x18
c00139c5:	5b                   	pop    ebx
c00139c6:	c3                   	ret    
c00139c7:	90                   	nop

c00139c8 <VAS::setCPUSpecific(unsigned long)>:
c00139c8:	c3                   	ret    
c00139c9:	90                   	nop

c00139ca <VAS::VAS(VAS*)>:
c00139ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139d9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00139e0:	90                   	nop
c00139e1:	c3                   	ret    

c00139e2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00139e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139e6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00139eb:	89 c2                	mov    edx,eax
c00139ed:	c1 e8 0a             	shr    eax,0xa
c00139f0:	c1 ea 16             	shr    edx,0x16
c00139f3:	83 f9 01             	cmp    ecx,0x1
c00139f6:	19 c9                	sbb    ecx,ecx
c00139f8:	c1 e2 0c             	shl    edx,0xc
c00139fb:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013a01:	25 fc 0f 00 00       	and    eax,0xffc
c0013a06:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0013a0d:	01 d0                	add    eax,edx
c0013a0f:	c3                   	ret    

c0013a10 <VAS::getPageTableEntry(unsigned long)>:
c0013a10:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013a14:	89 ca                	mov    edx,ecx
c0013a16:	c1 e9 0a             	shr    ecx,0xa
c0013a19:	c1 ea 16             	shr    edx,0x16
c0013a1c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013a22:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013a28:	c1 e0 0c             	shl    eax,0xc
c0013a2b:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013a2e:	c3                   	ret    

c0013a2f <Virt::freeKernelVirtualPages(unsigned long)>:
c0013a2f:	55                   	push   ebp
c0013a30:	57                   	push   edi
c0013a31:	bf 01 00 00 00       	mov    edi,0x1
c0013a36:	56                   	push   esi
c0013a37:	53                   	push   ebx
c0013a38:	83 ec 1c             	sub    esp,0x1c
c0013a3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a3f:	c1 ee 0c             	shr    esi,0xc
c0013a42:	eb 48                	jmp    c0013a8c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013a44:	83 ec 08             	sub    esp,0x8
c0013a47:	a1 90 32 03 c0       	mov    eax,ds:0xc0033290
c0013a4c:	55                   	push   ebp
c0013a4d:	50                   	push   eax
c0013a4e:	e8 bd ff ff ff       	call   c0013a10 <VAS::getPageTableEntry(unsigned long)>
c0013a53:	83 c4 10             	add    esp,0x10
c0013a56:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a58:	f6 c6 04             	test   dh,0x4
c0013a5b:	75 70                	jne    c0013acd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013a5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a63:	83 fb 04             	cmp    ebx,0x4
c0013a66:	0f 84 8a 00 00 00    	je     c0013af6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013a6c:	83 fb 02             	cmp    ebx,0x2
c0013a6f:	0f 84 9a 00 00 00    	je     c0013b0f <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013a75:	83 fb 03             	cmp    ebx,0x3
c0013a78:	0f 84 be 00 00 00    	je     c0013b3c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013a7e:	83 fb 01             	cmp    ebx,0x1
c0013a81:	0f 84 a2 00 00 00    	je     c0013b29 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013a87:	83 c6 01             	add    esi,0x1
c0013a8a:	31 ff                	xor    edi,edi
c0013a8c:	56                   	push   esi
c0013a8d:	89 f5                	mov    ebp,esi
c0013a8f:	e8 70 fc ff ff       	call   c0013704 <Virt::getPageState(unsigned long)>
c0013a94:	c1 e5 0c             	shl    ebp,0xc
c0013a97:	0f b6 d8             	movzx  ebx,al
c0013a9a:	5a                   	pop    edx
c0013a9b:	85 db                	test   ebx,ebx
c0013a9d:	75 a5                	jne    c0013a44 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013a9f:	83 ec 0c             	sub    esp,0xc
c0013aa2:	68 b5 97 02 c0       	push   0xc00297b5
c0013aa7:	e8 e4 c6 ff ff       	call   c0010190 <KePanic(char const*)>
c0013aac:	5a                   	pop    edx
c0013aad:	59                   	pop    ecx
c0013aae:	55                   	push   ebp
c0013aaf:	8b 2d 90 32 03 c0    	mov    ebp,DWORD PTR ds:0xc0033290
c0013ab5:	55                   	push   ebp
c0013ab6:	e8 55 ff ff ff       	call   c0013a10 <VAS::getPageTableEntry(unsigned long)>
c0013abb:	83 c4 10             	add    esp,0x10
c0013abe:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ac0:	f6 c6 04             	test   dh,0x4
c0013ac3:	75 08                	jne    c0013acd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013ac5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013acb:	eb ba                	jmp    c0013a87 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013acd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ad1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013ad7:	83 ec 0c             	sub    esp,0xc
c0013ada:	52                   	push   edx
c0013adb:	e8 3b c8 ff ff       	call   c001031b <Phys::freePage(unsigned long)>
c0013ae0:	83 c4 10             	add    esp,0x10
c0013ae3:	83 fb 04             	cmp    ebx,0x4
c0013ae6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013aea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013af0:	0f 85 76 ff ff ff    	jne    c0013a6c <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0013af6:	83 e7 01             	and    edi,0x1
c0013af9:	75 46                	jne    c0013b41 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0013afb:	c7 44 24 30 94 94 02 c0 	mov    DWORD PTR [esp+0x30],0xc0029494
c0013b03:	83 c4 1c             	add    esp,0x1c
c0013b06:	5b                   	pop    ebx
c0013b07:	5e                   	pop    esi
c0013b08:	5f                   	pop    edi
c0013b09:	5d                   	pop    ebp
c0013b0a:	e9 81 c6 ff ff       	jmp    c0010190 <KePanic(char const*)>
c0013b0f:	83 e7 01             	and    edi,0x1
c0013b12:	75 15                	jne    c0013b29 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013b14:	83 ec 0c             	sub    esp,0xc
c0013b17:	68 d1 97 02 c0       	push   0xc00297d1
c0013b1c:	e8 6f c6 ff ff       	call   c0010190 <KePanic(char const*)>
c0013b21:	83 c4 10             	add    esp,0x10
c0013b24:	e9 5e ff ff ff       	jmp    c0013a87 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013b29:	83 ec 08             	sub    esp,0x8
c0013b2c:	6a 00                	push   0x0
c0013b2e:	56                   	push   esi
c0013b2f:	e8 96 fb ff ff       	call   c00136ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013b34:	83 c4 10             	add    esp,0x10
c0013b37:	e9 4b ff ff ff       	jmp    c0013a87 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013b3c:	83 e7 01             	and    edi,0x1
c0013b3f:	75 16                	jne    c0013b57 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013b41:	83 ec 08             	sub    esp,0x8
c0013b44:	6a 00                	push   0x0
c0013b46:	56                   	push   esi
c0013b47:	e8 7e fb ff ff       	call   c00136ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013b4c:	83 c4 10             	add    esp,0x10
c0013b4f:	83 c4 1c             	add    esp,0x1c
c0013b52:	5b                   	pop    ebx
c0013b53:	5e                   	pop    esi
c0013b54:	5f                   	pop    edi
c0013b55:	5d                   	pop    ebp
c0013b56:	c3                   	ret    
c0013b57:	c7 44 24 30 ed 97 02 c0 	mov    DWORD PTR [esp+0x30],0xc00297ed
c0013b5f:	83 c4 1c             	add    esp,0x1c
c0013b62:	5b                   	pop    ebx
c0013b63:	5e                   	pop    esi
c0013b64:	5f                   	pop    edi
c0013b65:	5d                   	pop    ebp
c0013b66:	e9 25 c6 ff ff       	jmp    c0010190 <KePanic(char const*)>
c0013b6b:	90                   	nop

c0013b6c <VAS::freeAllocatedPages(unsigned long)>:
c0013b6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013b74:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013b78:	74 09                	je     c0013b83 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013b7a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013b7e:	e9 ac fe ff ff       	jmp    c0013a2f <Virt::freeKernelVirtualPages(unsigned long)>
c0013b83:	c7 44 24 04 b8 94 02 c0 	mov    DWORD PTR [esp+0x4],0xc00294b8
c0013b8b:	e9 ec 33 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c0013b90 <VAS::virtualToPhysical(unsigned long)>:
c0013b90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b94:	50                   	push   eax
c0013b95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013b99:	52                   	push   edx
c0013b9a:	e8 71 fe ff ff       	call   c0013a10 <VAS::getPageTableEntry(unsigned long)>
c0013b9f:	59                   	pop    ecx
c0013ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ba2:	5a                   	pop    edx
c0013ba3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ba8:	c3                   	ret    
c0013ba9:	90                   	nop

c0013baa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013baa:	55                   	push   ebp
c0013bab:	57                   	push   edi
c0013bac:	56                   	push   esi
c0013bad:	53                   	push   ebx
c0013bae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bb2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013bb6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013bba:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013bbe:	85 db                	test   ebx,ebx
c0013bc0:	7e 24                	jle    c0013be6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013bc2:	c1 e3 0c             	shl    ebx,0xc
c0013bc5:	01 f3                	add    ebx,esi
c0013bc7:	56                   	push   esi
c0013bc8:	81 c6 00 10 00 00    	add    esi,0x1000
c0013bce:	55                   	push   ebp
c0013bcf:	e8 3c fe ff ff       	call   c0013a10 <VAS::getPageTableEntry(unsigned long)>
c0013bd4:	5a                   	pop    edx
c0013bd5:	59                   	pop    ecx
c0013bd6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013bd8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013bdc:	21 f9                	and    ecx,edi
c0013bde:	09 d1                	or     ecx,edx
c0013be0:	39 f3                	cmp    ebx,esi
c0013be2:	89 08                	mov    DWORD PTR [eax],ecx
c0013be4:	75 e1                	jne    c0013bc7 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0013be6:	5b                   	pop    ebx
c0013be7:	5e                   	pop    esi
c0013be8:	5f                   	pop    edi
c0013be9:	5d                   	pop    ebp
c0013bea:	c3                   	ret    
c0013beb:	90                   	nop

c0013bec <VAS::VAS()>:
c0013bec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bf0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bfb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013c02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c06:	a3 90 32 03 c0       	mov    ds:0xc0033290,eax
c0013c0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c0f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013c13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c17:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0013c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c1e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013c25:	ba 7d e0 02 c0       	mov    edx,0xc002e07d
c0013c2a:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0013c2f:	29 c2                	sub    edx,eax
c0013c31:	89 d0                	mov    eax,edx
c0013c33:	05 ff 0f 00 00       	add    eax,0xfff
c0013c38:	c1 e8 0c             	shr    eax,0xc
c0013c3b:	89 c2                	mov    edx,eax
c0013c3d:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0013c42:	6a 04                	push   0x4
c0013c44:	6a ff                	push   0xffffffff
c0013c46:	52                   	push   edx
c0013c47:	50                   	push   eax
c0013c48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013c4c:	e8 59 ff ff ff       	call   c0013baa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013c51:	83 c4 14             	add    esp,0x14
c0013c54:	90                   	nop
c0013c55:	c3                   	ret    

c0013c56 <VAS::setToWriteCombining(unsigned long, int)>:
c0013c56:	a1 24 34 03 c0       	mov    eax,ds:0xc0033424
c0013c5b:	50                   	push   eax
c0013c5c:	6a ff                	push   0xffffffff
c0013c5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c62:	52                   	push   edx
c0013c63:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013c67:	51                   	push   ecx
c0013c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c6c:	50                   	push   eax
c0013c6d:	e8 38 ff ff ff       	call   c0013baa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013c72:	83 c4 14             	add    esp,0x14
c0013c75:	c3                   	ret    

c0013c76 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013c76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c7a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013c7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c81:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013c84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013c89:	83 f8 01             	cmp    eax,0x1
c0013c8c:	19 c0                	sbb    eax,eax
c0013c8e:	83 ca 03             	or     edx,0x3
c0013c91:	83 e0 fc             	and    eax,0xfffffffc
c0013c94:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013c9b:	0f 20 d8             	mov    eax,cr3
c0013c9e:	0f 22 d8             	mov    cr3,eax
c0013ca1:	c3                   	ret    

c0013ca2 <VAS::~VAS()>:
c0013ca2:	83 ec 2c             	sub    esp,0x2c
c0013ca5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013cad:	fa                   	cli    
c0013cae:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0013cb3:	83 c0 01             	add    eax,0x1
c0013cb6:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0013cbb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013cc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cc2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013cc5:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013ccb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013ccf:	6a 01                	push   0x1
c0013cd1:	50                   	push   eax
c0013cd2:	e8 9f ff ff ff       	call   c0013c76 <VAS::mapOtherVASIn(bool, VAS*)>
c0013cd7:	83 c4 0c             	add    esp,0xc
c0013cda:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013ce2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013cea:	0f 8f d8 00 00 00    	jg     c0013dc8 <VAS::~VAS()+0x126>
c0013cf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cf4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cf7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013cfb:	c1 e2 02             	shl    edx,0x2
c0013cfe:	01 d0                	add    eax,edx
c0013d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0a:	83 e0 01             	and    eax,0x1
c0013d0d:	0f 84 ab 00 00 00    	je     c0013dbe <VAS::~VAS()+0x11c>
c0013d13:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013d1b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013d23:	7f 74                	jg     c0013d99 <VAS::~VAS()+0xf7>
c0013d25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d29:	c1 e0 0a             	shl    eax,0xa
c0013d2c:	89 c2                	mov    edx,eax
c0013d2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d32:	01 d0                	add    eax,edx
c0013d34:	c1 e0 0c             	shl    eax,0xc
c0013d37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d3b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013d40:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013d45:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013d4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013d4f:	6a 01                	push   0x1
c0013d51:	50                   	push   eax
c0013d52:	e8 8b fc ff ff       	call   c00139e2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013d57:	83 c4 0c             	add    esp,0xc
c0013d5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d62:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d6c:	25 01 04 00 00       	and    eax,0x401
c0013d71:	3d 01 04 00 00       	cmp    eax,0x401
c0013d76:	75 1a                	jne    c0013d92 <VAS::~VAS()+0xf0>
c0013d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013d81:	83 ec 0c             	sub    esp,0xc
c0013d84:	50                   	push   eax
c0013d85:	e8 91 c5 ff ff       	call   c001031b <Phys::freePage(unsigned long)>
c0013d8a:	83 c4 10             	add    esp,0x10
c0013d8d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013d92:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013d97:	eb 82                	jmp    c0013d1b <VAS::~VAS()+0x79>
c0013d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d9d:	25 00 04 00 00       	and    eax,0x400
c0013da2:	74 1a                	je     c0013dbe <VAS::~VAS()+0x11c>
c0013da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013dad:	83 ec 0c             	sub    esp,0xc
c0013db0:	50                   	push   eax
c0013db1:	e8 65 c5 ff ff       	call   c001031b <Phys::freePage(unsigned long)>
c0013db6:	83 c4 10             	add    esp,0x10
c0013db9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013dbe:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013dc3:	e9 1a ff ff ff       	jmp    c0013ce2 <VAS::~VAS()+0x40>
c0013dc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dcc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013dcf:	83 ec 0c             	sub    esp,0xc
c0013dd2:	50                   	push   eax
c0013dd3:	e8 57 fc ff ff       	call   c0013a2f <Virt::freeKernelVirtualPages(unsigned long)>
c0013dd8:	83 c4 10             	add    esp,0x10
c0013ddb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ddf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013de2:	83 ec 0c             	sub    esp,0xc
c0013de5:	50                   	push   eax
c0013de6:	e8 30 c5 ff ff       	call   c001031b <Phys::freePage(unsigned long)>
c0013deb:	83 c4 10             	add    esp,0x10
c0013dee:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013df3:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0013dfb:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0013e00:	85 c0                	test   eax,eax
c0013e02:	75 01                	jne    c0013e05 <VAS::~VAS()+0x163>
c0013e04:	fb                   	sti    
c0013e05:	90                   	nop
c0013e06:	83 c4 2c             	add    esp,0x2c
c0013e09:	c3                   	ret    

c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013e0a:	55                   	push   ebp
c0013e0b:	57                   	push   edi
c0013e0c:	56                   	push   esi
c0013e0d:	53                   	push   ebx
c0013e0e:	83 ec 1c             	sub    esp,0x1c
c0013e11:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013e15:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013e19:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013e1f:	77 08                	ja     c0013e29 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013e21:	0f 20 d8             	mov    eax,cr3
c0013e24:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013e27:	75 49                	jne    c0013e72 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013e29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e2d:	09 d8                	or     eax,ebx
c0013e2f:	a9 ff 0f 00 00       	test   eax,0xfff
c0013e34:	75 59                	jne    c0013e8f <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013e36:	89 de                	mov    esi,ebx
c0013e38:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013e3b:	c1 ee 16             	shr    esi,0x16
c0013e3e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013e45:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013e49:	74 56                	je     c0013ea1 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013e4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e4f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013e53:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013e59:	c1 eb 0a             	shr    ebx,0xa
c0013e5c:	c1 e6 0c             	shl    esi,0xc
c0013e5f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013e65:	09 d0                	or     eax,edx
c0013e67:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013e6a:	83 c4 1c             	add    esp,0x1c
c0013e6d:	5b                   	pop    ebx
c0013e6e:	5e                   	pop    esi
c0013e6f:	5f                   	pop    edi
c0013e70:	5d                   	pop    ebp
c0013e71:	c3                   	ret    
c0013e72:	83 ec 0c             	sub    esp,0xc
c0013e75:	68 dc 94 02 c0       	push   0xc00294dc
c0013e7a:	e8 fd 30 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013e7f:	83 c4 10             	add    esp,0x10
c0013e82:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e86:	09 d8                	or     eax,ebx
c0013e88:	a9 ff 0f 00 00       	test   eax,0xfff
c0013e8d:	74 a7                	je     c0013e36 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013e8f:	83 ec 0c             	sub    esp,0xc
c0013e92:	68 44 95 02 c0       	push   0xc0029544
c0013e97:	e8 f4 c2 ff ff       	call   c0010190 <KePanic(char const*)>
c0013e9c:	83 c4 10             	add    esp,0x10
c0013e9f:	eb 95                	jmp    c0013e36 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013ea1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ea5:	e8 da c4 ff ff       	call   c0010384 <Phys::allocatePage()>
c0013eaa:	83 ec 0c             	sub    esp,0xc
c0013ead:	89 c5                	mov    ebp,eax
c0013eaf:	8b 0d 90 32 03 c0    	mov    ecx,DWORD PTR ds:0xc0033290
c0013eb5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013eb9:	6a 01                	push   0x1
c0013ebb:	e8 67 f8 ff ff       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c0013ec0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013ec7:	6a 01                	push   0x1
c0013ec9:	50                   	push   eax
c0013eca:	55                   	push   ebp
c0013ecb:	81 cd 07 04 00 00    	or     ebp,0x407
c0013ed1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013ed5:	51                   	push   ecx
c0013ed6:	e8 19 01 00 00       	call   c0013ff4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013edb:	83 c4 1c             	add    esp,0x1c
c0013ede:	68 00 10 00 00       	push   0x1000
c0013ee3:	6a 00                	push   0x0
c0013ee5:	50                   	push   eax
c0013ee6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013eea:	e8 01 c6 fe ff       	call   c00004f0 <memset>
c0013eef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ef3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013ef6:	e8 34 fb ff ff       	call   c0013a2f <Virt::freeKernelVirtualPages(unsigned long)>
c0013efb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013eff:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013f02:	83 c4 10             	add    esp,0x10
c0013f05:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013f08:	e9 3e ff ff ff       	jmp    c0013e4b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013f0d:	90                   	nop

c0013f0e <VAS::allocatePages(int, int)>:
c0013f0e:	55                   	push   ebp
c0013f0f:	57                   	push   edi
c0013f10:	56                   	push   esi
c0013f11:	53                   	push   ebx
c0013f12:	83 ec 1c             	sub    esp,0x1c
c0013f15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f19:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013f1d:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013f21:	75 71                	jne    c0013f94 <VAS::allocatePages(int, int)+0x86>
c0013f23:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013f26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f2a:	85 c0                	test   eax,eax
c0013f2c:	74 4d                	je     c0013f7b <VAS::allocatePages(int, int)+0x6d>
c0013f2e:	89 dd                	mov    ebp,ebx
c0013f30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f34:	c1 e5 0c             	shl    ebp,0xc
c0013f37:	01 c5                	add    ebp,eax
c0013f39:	85 db                	test   ebx,ebx
c0013f3b:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013f3e:	7e 29                	jle    c0013f69 <VAS::allocatePages(int, int)+0x5b>
c0013f40:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013f44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013f48:	81 cf 00 04 00 00    	or     edi,0x400
c0013f4e:	e8 31 c4 ff ff       	call   c0010384 <Phys::allocatePage()>
c0013f53:	57                   	push   edi
c0013f54:	53                   	push   ebx
c0013f55:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013f5b:	50                   	push   eax
c0013f5c:	56                   	push   esi
c0013f5d:	e8 a8 fe ff ff       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013f62:	83 c4 10             	add    esp,0x10
c0013f65:	39 dd                	cmp    ebp,ebx
c0013f67:	75 e5                	jne    c0013f4e <VAS::allocatePages(int, int)+0x40>
c0013f69:	0f 20 d8             	mov    eax,cr3
c0013f6c:	0f 22 d8             	mov    cr3,eax
c0013f6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f73:	83 c4 1c             	add    esp,0x1c
c0013f76:	5b                   	pop    ebx
c0013f77:	5e                   	pop    esi
c0013f78:	5f                   	pop    edi
c0013f79:	5d                   	pop    ebp
c0013f7a:	c3                   	ret    
c0013f7b:	83 ec 0c             	sub    esp,0xc
c0013f7e:	68 68 95 02 c0       	push   0xc0029568
c0013f83:	e8 08 c2 ff ff       	call   c0010190 <KePanic(char const*)>
c0013f88:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013f8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f8f:	83 c4 10             	add    esp,0x10
c0013f92:	eb 9a                	jmp    c0013f2e <VAS::allocatePages(int, int)+0x20>
c0013f94:	83 ec 0c             	sub    esp,0xc
c0013f97:	53                   	push   ebx
c0013f98:	e8 8a f7 ff ff       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c0013f9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013fa1:	83 c4 10             	add    esp,0x10
c0013fa4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013fa9:	77 37                	ja     c0013fe2 <VAS::allocatePages(int, int)+0xd4>
c0013fab:	85 db                	test   ebx,ebx
c0013fad:	7e ba                	jle    c0013f69 <VAS::allocatePages(int, int)+0x5b>
c0013faf:	c1 e3 0c             	shl    ebx,0xc
c0013fb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fb6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013fba:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013fbd:	81 cf 00 04 00 00    	or     edi,0x400
c0013fc3:	89 c3                	mov    ebx,eax
c0013fc5:	e8 ba c3 ff ff       	call   c0010384 <Phys::allocatePage()>
c0013fca:	57                   	push   edi
c0013fcb:	53                   	push   ebx
c0013fcc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013fd2:	50                   	push   eax
c0013fd3:	56                   	push   esi
c0013fd4:	e8 31 fe ff ff       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013fd9:	83 c4 10             	add    esp,0x10
c0013fdc:	39 dd                	cmp    ebp,ebx
c0013fde:	75 e5                	jne    c0013fc5 <VAS::allocatePages(int, int)+0xb7>
c0013fe0:	eb 87                	jmp    c0013f69 <VAS::allocatePages(int, int)+0x5b>
c0013fe2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013fe6:	a1 28 34 03 c0       	mov    eax,ds:0xc0033428
c0013feb:	09 c2                	or     edx,eax
c0013fed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013ff1:	eb b8                	jmp    c0013fab <VAS::allocatePages(int, int)+0x9d>
c0013ff3:	90                   	nop

c0013ff4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013ff4:	55                   	push   ebp
c0013ff5:	57                   	push   edi
c0013ff6:	56                   	push   esi
c0013ff7:	53                   	push   ebx
c0013ff8:	83 ec 0c             	sub    esp,0xc
c0013ffb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013fff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0014003:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014007:	85 db                	test   ebx,ebx
c0014009:	7e 2f                	jle    c001403a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c001400b:	c1 e3 0c             	shl    ebx,0xc
c001400e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014012:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0014016:	01 d3                	add    ebx,edx
c0014018:	55                   	push   ebp
c0014019:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001401d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014021:	29 c2                	sub    edx,eax
c0014023:	01 f2                	add    edx,esi
c0014025:	52                   	push   edx
c0014026:	56                   	push   esi
c0014027:	81 c6 00 10 00 00    	add    esi,0x1000
c001402d:	57                   	push   edi
c001402e:	e8 d7 fd ff ff       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0014033:	83 c4 10             	add    esp,0x10
c0014036:	39 de                	cmp    esi,ebx
c0014038:	75 de                	jne    c0014018 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c001403a:	0f 20 d8             	mov    eax,cr3
c001403d:	0f 22 d8             	mov    cr3,eax
c0014040:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014044:	83 c4 0c             	add    esp,0xc
c0014047:	5b                   	pop    ebx
c0014048:	5e                   	pop    esi
c0014049:	5f                   	pop    edi
c001404a:	5d                   	pop    ebp
c001404b:	c3                   	ret    

c001404c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001404c:	55                   	push   ebp
c001404d:	57                   	push   edi
c001404e:	56                   	push   esi
c001404f:	53                   	push   ebx
c0014050:	83 ec 1c             	sub    esp,0x1c
c0014053:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014057:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001405b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001405f:	09 f8                	or     eax,edi
c0014061:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014065:	a9 ff 0f 00 00       	test   eax,0xfff
c001406a:	75 4f                	jne    c00140bb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c001406c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0014070:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0014073:	c1 eb 16             	shr    ebx,0x16
c0014076:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c001407d:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0014081:	74 52                	je     c00140d5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0014083:	0f b6 f2             	movzx  esi,dl
c0014086:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001408a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001408e:	c1 e8 0a             	shr    eax,0xa
c0014091:	83 fe 01             	cmp    esi,0x1
c0014094:	19 d2                	sbb    edx,edx
c0014096:	c1 e3 0c             	shl    ebx,0xc
c0014099:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001409f:	25 fc 0f 00 00       	and    eax,0xffc
c00140a4:	01 d8                	add    eax,ebx
c00140a6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00140aa:	09 d9                	or     ecx,ebx
c00140ac:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00140b3:	83 c4 1c             	add    esp,0x1c
c00140b6:	5b                   	pop    ebx
c00140b7:	5e                   	pop    esi
c00140b8:	5f                   	pop    edi
c00140b9:	5d                   	pop    ebp
c00140ba:	c3                   	ret    
c00140bb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00140bf:	83 ec 0c             	sub    esp,0xc
c00140c2:	68 94 95 02 c0       	push   0xc0029594
c00140c7:	e8 c4 c0 ff ff       	call   c0010190 <KePanic(char const*)>
c00140cc:	83 c4 10             	add    esp,0x10
c00140cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140d3:	eb 97                	jmp    c001406c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c00140d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00140d9:	e8 a6 c2 ff ff       	call   c0010384 <Phys::allocatePage()>
c00140de:	83 ec 0c             	sub    esp,0xc
c00140e1:	89 c5                	mov    ebp,eax
c00140e3:	8b 0d 90 32 03 c0    	mov    ecx,DWORD PTR ds:0xc0033290
c00140e9:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00140ed:	6a 01                	push   0x1
c00140ef:	e8 33 f6 ff ff       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c00140f4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00140fb:	6a 01                	push   0x1
c00140fd:	50                   	push   eax
c00140fe:	55                   	push   ebp
c00140ff:	81 cd 07 04 00 00    	or     ebp,0x407
c0014105:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014109:	51                   	push   ecx
c001410a:	e8 e5 fe ff ff       	call   c0013ff4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001410f:	83 c4 1c             	add    esp,0x1c
c0014112:	68 00 10 00 00       	push   0x1000
c0014117:	6a 00                	push   0x0
c0014119:	50                   	push   eax
c001411a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001411e:	e8 cd c3 fe ff       	call   c00004f0 <memset>
c0014123:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014127:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001412a:	e8 00 f9 ff ff       	call   c0013a2f <Virt::freeKernelVirtualPages(unsigned long)>
c001412f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0014132:	83 c4 10             	add    esp,0x10
c0014135:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0014138:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001413c:	e9 42 ff ff ff       	jmp    c0014083 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0014141:	90                   	nop

c0014142 <VAS::VAS(bool)>:
c0014142:	53                   	push   ebx
c0014143:	83 ec 28             	sub    esp,0x28
c0014146:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001414a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001414e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014152:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001415d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014164:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014168:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001416c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001416f:	e8 10 c2 ff ff       	call   c0010384 <Phys::allocatePage()>
c0014174:	89 c2                	mov    edx,eax
c0014176:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001417a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001417d:	8b 1d 90 32 03 c0    	mov    ebx,DWORD PTR ds:0xc0033290
c0014183:	83 ec 0c             	sub    esp,0xc
c0014186:	6a 01                	push   0x1
c0014188:	e8 9a f5 ff ff       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c001418d:	83 c4 10             	add    esp,0x10
c0014190:	89 c2                	mov    edx,eax
c0014192:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014196:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014199:	83 ec 0c             	sub    esp,0xc
c001419c:	6a 03                	push   0x3
c001419e:	6a 01                	push   0x1
c00141a0:	52                   	push   edx
c00141a1:	50                   	push   eax
c00141a2:	53                   	push   ebx
c00141a3:	e8 4c fe ff ff       	call   c0013ff4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00141a8:	83 c4 20             	add    esp,0x20
c00141ab:	89 c2                	mov    edx,eax
c00141ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141b1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00141b4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00141bc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00141c4:	7f 1d                	jg     c00141e3 <VAS::VAS(bool)+0xa1>
c00141c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00141cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00141d1:	c1 e2 02             	shl    edx,0x2
c00141d4:	01 d0                	add    eax,edx
c00141d6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00141dc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00141e1:	eb d9                	jmp    c00141bc <VAS::VAS(bool)+0x7a>
c00141e3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00141eb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00141f3:	7f 59                	jg     c001424e <VAS::VAS(bool)+0x10c>
c00141f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141f9:	2d 00 02 00 00       	sub    eax,0x200
c00141fe:	c1 e0 0c             	shl    eax,0xc
c0014201:	89 c2                	mov    edx,eax
c0014203:	a1 28 34 03 c0       	mov    eax,ds:0xc0033428
c0014208:	89 d1                	mov    ecx,edx
c001420a:	09 c1                	or     ecx,eax
c001420c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014210:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014213:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014217:	c1 e2 02             	shl    edx,0x2
c001421a:	01 d0                	add    eax,edx
c001421c:	83 c9 05             	or     ecx,0x5
c001421f:	89 ca                	mov    edx,ecx
c0014221:	89 10                	mov    DWORD PTR [eax],edx
c0014223:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014227:	2d 40 03 00 00       	sub    eax,0x340
c001422c:	83 f8 7f             	cmp    eax,0x7f
c001422f:	77 16                	ja     c0014247 <VAS::VAS(bool)+0x105>
c0014231:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014235:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014238:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001423c:	c1 e2 02             	shl    edx,0x2
c001423f:	01 d0                	add    eax,edx
c0014241:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014247:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001424c:	eb 9d                	jmp    c00141eb <VAS::VAS(bool)+0xa9>
c001424e:	8b 15 28 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033428
c0014254:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014258:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001425b:	05 20 0c 00 00       	add    eax,0xc20
c0014260:	81 ca 03 40 00 00    	or     edx,0x4003
c0014266:	89 10                	mov    DWORD PTR [eax],edx
c0014268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001426c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001426f:	a1 28 34 03 c0       	mov    eax,ds:0xc0033428
c0014274:	09 c2                	or     edx,eax
c0014276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001427a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001427d:	05 fc 0f 00 00       	add    eax,0xffc
c0014282:	83 ca 03             	or     edx,0x3
c0014285:	89 10                	mov    DWORD PTR [eax],edx
c0014287:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001428c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014292:	83 ec 0c             	sub    esp,0xc
c0014295:	50                   	push   eax
c0014296:	e8 ef 5e ff ff       	call   c000a18a <Device::getName()>
c001429b:	83 c4 10             	add    esp,0x10
c001429e:	83 ec 08             	sub    esp,0x8
c00142a1:	68 07 98 02 c0       	push   0xc0029807
c00142a6:	50                   	push   eax
c00142a7:	e8 a4 c4 fe ff       	call   c0000750 <strcmp>
c00142ac:	83 c4 10             	add    esp,0x10
c00142af:	85 c0                	test   eax,eax
c00142b1:	0f 94 c0             	sete   al
c00142b4:	0f b6 c0             	movzx  eax,al
c00142b7:	85 c0                	test   eax,eax
c00142b9:	74 68                	je     c0014323 <VAS::VAS(bool)+0x1e1>
c00142bb:	fa                   	cli    
c00142bc:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00142c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00142c7:	05 68 09 00 00       	add    eax,0x968
c00142cc:	83 ec 0c             	sub    esp,0xc
c00142cf:	50                   	push   eax
c00142d0:	e8 59 ad ff ff       	call   c000f02e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00142d5:	83 c4 10             	add    esp,0x10
c00142d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00142dd:	89 c3                	mov    ebx,eax
c00142df:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00142e4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00142ea:	05 68 09 00 00       	add    eax,0x968
c00142ef:	83 ec 0c             	sub    esp,0xc
c00142f2:	50                   	push   eax
c00142f3:	e8 36 ad ff ff       	call   c000f02e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00142f8:	83 c4 10             	add    esp,0x10
c00142fb:	83 ec 08             	sub    esp,0x8
c00142fe:	50                   	push   eax
c00142ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014303:	e8 08 f7 ff ff       	call   c0013a10 <VAS::getPageTableEntry(unsigned long)>
c0014308:	83 c4 10             	add    esp,0x10
c001430b:	8b 00                	mov    eax,DWORD PTR [eax]
c001430d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014312:	6a 11                	push   0x11
c0014314:	53                   	push   ebx
c0014315:	50                   	push   eax
c0014316:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001431a:	e8 eb fa ff ff       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c001431f:	83 c4 10             	add    esp,0x10
c0014322:	fb                   	sti    
c0014323:	90                   	nop
c0014324:	83 c4 28             	add    esp,0x28
c0014327:	5b                   	pop    ebx
c0014328:	c3                   	ret    
c0014329:	90                   	nop

c001432a <VAS::evict(unsigned long)>:
c001432a:	55                   	push   ebp
c001432b:	57                   	push   edi
c001432c:	56                   	push   esi
c001432d:	53                   	push   ebx
c001432e:	83 ec 24             	sub    esp,0x24
c0014331:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014335:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014339:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001433d:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0014342:	50                   	push   eax
c0014343:	68 15 98 02 c0       	push   0xc0029815
c0014348:	e8 2f 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001434d:	e8 33 f5 ff ff       	call   c0013885 <Virt::allocateSwapfilePage()>
c0014352:	83 c4 10             	add    esp,0x10
c0014355:	89 c7                	mov    edi,eax
c0014357:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c001435c:	85 c0                	test   eax,eax
c001435e:	7e 40                	jle    c00143a0 <VAS::evict(unsigned long)+0x76>
c0014360:	89 ee                	mov    esi,ebp
c0014362:	31 db                	xor    ebx,ebx
c0014364:	83 ec 0c             	sub    esp,0xc
c0014367:	57                   	push   edi
c0014368:	e8 02 f5 ff ff       	call   c001386f <Virt::swapIDToSector(unsigned long)>
c001436d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014370:	01 d8                	add    eax,ebx
c0014372:	6a 01                	push   0x1
c0014374:	31 d2                	xor    edx,edx
c0014376:	83 c3 01             	add    ebx,0x1
c0014379:	52                   	push   edx
c001437a:	81 c6 00 02 00 00    	add    esi,0x200
c0014380:	50                   	push   eax
c0014381:	0f be 05 18 c7 02 c0 	movsx  eax,BYTE PTR ds:0xc002c718
c0014388:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001438f:	50                   	push   eax
c0014390:	e8 21 6c ff ff       	call   c000afb6 <LogicalDisk::write(unsigned long long, int, void*)>
c0014395:	83 c4 20             	add    esp,0x20
c0014398:	39 1d 0c c7 02 c0    	cmp    DWORD PTR ds:0xc002c70c,ebx
c001439e:	7f c4                	jg     c0014364 <VAS::evict(unsigned long)+0x3a>
c00143a0:	83 ec 08             	sub    esp,0x8
c00143a3:	c1 e7 0c             	shl    edi,0xc
c00143a6:	55                   	push   ebp
c00143a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143ab:	50                   	push   eax
c00143ac:	e8 5f f6 ff ff       	call   c0013a10 <VAS::getPageTableEntry(unsigned long)>
c00143b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00143b3:	89 d3                	mov    ebx,edx
c00143b5:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00143bb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00143c1:	09 d7                	or     edi,edx
c00143c3:	89 38                	mov    DWORD PTR [eax],edi
c00143c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143c8:	8b 15 88 32 03 c0    	mov    edx,DWORD PTR ds:0xc0033288
c00143ce:	83 c2 01             	add    edx,0x1
c00143d1:	89 15 88 32 03 c0    	mov    DWORD PTR ds:0xc0033288,edx
c00143d7:	e8 3f bf ff ff       	call   c001031b <Phys::freePage(unsigned long)>
c00143dc:	0f 20 d8             	mov    eax,cr3
c00143df:	0f 22 d8             	mov    cr3,eax
c00143e2:	8b 0d 88 32 03 c0    	mov    ecx,DWORD PTR ds:0xc0033288
c00143e8:	51                   	push   ecx
c00143e9:	55                   	push   ebp
c00143ea:	53                   	push   ebx
c00143eb:	68 b8 95 02 c0       	push   0xc00295b8
c00143f0:	e8 87 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143f5:	83 c4 18             	add    esp,0x18
c00143f8:	a1 84 32 03 c0       	mov    eax,ds:0xc0033284
c00143fd:	50                   	push   eax
c00143fe:	8d 50 01             	lea    edx,[eax+0x1]
c0014401:	68 2a 98 02 c0       	push   0xc002982a
c0014406:	89 15 84 32 03 c0    	mov    DWORD PTR ds:0xc0033284,edx
c001440c:	e8 6b 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014411:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0014416:	c7 44 24 40 3c 98 02 c0 	mov    DWORD PTR [esp+0x40],0xc002983c
c001441e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014422:	83 c4 2c             	add    esp,0x2c
c0014425:	5b                   	pop    ebx
c0014426:	5e                   	pop    esi
c0014427:	5f                   	pop    edi
c0014428:	5d                   	pop    ebp
c0014429:	e9 4e 2b ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c001442e <VAS::canLockPage(unsigned long)>:
c001442e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014432:	50                   	push   eax
c0014433:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014437:	52                   	push   edx
c0014438:	e8 d3 f5 ff ff       	call   c0013a10 <VAS::getPageTableEntry(unsigned long)>
c001443d:	59                   	pop    ecx
c001443e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014440:	5a                   	pop    edx
c0014441:	c1 e8 0b             	shr    eax,0xb
c0014444:	83 e0 01             	and    eax,0x1
c0014447:	c3                   	ret    

c0014448 <VAS::unlockPage(unsigned long)>:
c0014448:	83 ec 0c             	sub    esp,0xc
c001444b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001444f:	50                   	push   eax
c0014450:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014454:	52                   	push   edx
c0014455:	e8 b6 f5 ff ff       	call   c0013a10 <VAS::getPageTableEntry(unsigned long)>
c001445a:	59                   	pop    ecx
c001445b:	5a                   	pop    edx
c001445c:	8b 10                	mov    edx,DWORD PTR [eax]
c001445e:	f6 c6 08             	test   dh,0x8
c0014461:	75 09                	jne    c001446c <VAS::unlockPage(unsigned long)+0x24>
c0014463:	80 ce 08             	or     dh,0x8
c0014466:	89 10                	mov    DWORD PTR [eax],edx
c0014468:	83 c4 0c             	add    esp,0xc
c001446b:	c3                   	ret    
c001446c:	c7 44 24 10 ec 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295ec
c0014474:	83 c4 0c             	add    esp,0xc
c0014477:	e9 14 bd ff ff       	jmp    c0010190 <KePanic(char const*)>

c001447c <VAS::canLockPages(unsigned long, int)>:
c001447c:	55                   	push   ebp
c001447d:	57                   	push   edi
c001447e:	56                   	push   esi
c001447f:	53                   	push   ebx
c0014480:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014484:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014488:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001448c:	85 ff                	test   edi,edi
c001448e:	7e 23                	jle    c00144b3 <VAS::canLockPages(unsigned long, int)+0x37>
c0014490:	31 f6                	xor    esi,esi
c0014492:	eb 0d                	jmp    c00144a1 <VAS::canLockPages(unsigned long, int)+0x25>
c0014494:	81 c3 00 10 00 00    	add    ebx,0x1000
c001449a:	83 c6 01             	add    esi,0x1
c001449d:	39 f7                	cmp    edi,esi
c001449f:	74 0d                	je     c00144ae <VAS::canLockPages(unsigned long, int)+0x32>
c00144a1:	53                   	push   ebx
c00144a2:	55                   	push   ebp
c00144a3:	e8 86 ff ff ff       	call   c001442e <VAS::canLockPage(unsigned long)>
c00144a8:	5a                   	pop    edx
c00144a9:	84 c0                	test   al,al
c00144ab:	59                   	pop    ecx
c00144ac:	75 e6                	jne    c0014494 <VAS::canLockPages(unsigned long, int)+0x18>
c00144ae:	5b                   	pop    ebx
c00144af:	5e                   	pop    esi
c00144b0:	5f                   	pop    edi
c00144b1:	5d                   	pop    ebp
c00144b2:	c3                   	ret    
c00144b3:	b0 01                	mov    al,0x1
c00144b5:	eb f7                	jmp    c00144ae <VAS::canLockPages(unsigned long, int)+0x32>
c00144b7:	90                   	nop

c00144b8 <VAS::unlockPages(unsigned long, int)>:
c00144b8:	55                   	push   ebp
c00144b9:	57                   	push   edi
c00144ba:	56                   	push   esi
c00144bb:	53                   	push   ebx
c00144bc:	83 ec 0c             	sub    esp,0xc
c00144bf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00144c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00144c7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00144cb:	85 ff                	test   edi,edi
c00144cd:	7e 1c                	jle    c00144eb <VAS::unlockPages(unsigned long, int)+0x33>
c00144cf:	31 f6                	xor    esi,esi
c00144d1:	83 ec 08             	sub    esp,0x8
c00144d4:	83 c6 01             	add    esi,0x1
c00144d7:	53                   	push   ebx
c00144d8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00144de:	55                   	push   ebp
c00144df:	e8 64 ff ff ff       	call   c0014448 <VAS::unlockPage(unsigned long)>
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	39 f7                	cmp    edi,esi
c00144e9:	75 e6                	jne    c00144d1 <VAS::unlockPages(unsigned long, int)+0x19>
c00144eb:	83 c4 0c             	add    esp,0xc
c00144ee:	5b                   	pop    ebx
c00144ef:	5e                   	pop    esi
c00144f0:	5f                   	pop    edi
c00144f1:	5d                   	pop    ebp
c00144f2:	c3                   	ret    
c00144f3:	90                   	nop

c00144f4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00144f4:	55                   	push   ebp
c00144f5:	57                   	push   edi
c00144f6:	56                   	push   esi
c00144f7:	53                   	push   ebx
c00144f8:	81 ec 0c 10 00 00    	sub    esp,0x100c
c00144fe:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0014505:	89 c5                	mov    ebp,eax
c0014507:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c001450d:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0014512:	77 11                	ja     c0014525 <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0014514:	85 ed                	test   ebp,ebp
c0014516:	75 1d                	jne    c0014535 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0014518:	31 c0                	xor    eax,eax
c001451a:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014520:	5b                   	pop    ebx
c0014521:	5e                   	pop    esi
c0014522:	5f                   	pop    edi
c0014523:	5d                   	pop    ebp
c0014524:	c3                   	ret    
c0014525:	83 ec 0c             	sub    esp,0xc
c0014528:	68 51 98 02 c0       	push   0xc0029851
c001452d:	e8 5e bc ff ff       	call   c0010190 <KePanic(char const*)>
c0014532:	83 c4 10             	add    esp,0x10
c0014535:	83 ec 08             	sub    esp,0x8
c0014538:	55                   	push   ebp
c0014539:	8b 9c 24 2c 10 00 00 	mov    ebx,DWORD PTR [esp+0x102c]
c0014540:	53                   	push   ebx
c0014541:	e8 ca f4 ff ff       	call   c0013a10 <VAS::getPageTableEntry(unsigned long)>
c0014546:	83 c4 10             	add    esp,0x10
c0014549:	89 c3                	mov    ebx,eax
c001454b:	85 c0                	test   eax,eax
c001454d:	74 c9                	je     c0014518 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c001454f:	8b 38                	mov    edi,DWORD PTR [eax]
c0014551:	f7 c7 00 02 00 00    	test   edi,0x200
c0014557:	0f 85 b3 00 00 00    	jne    c0014610 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c001455d:	89 f8                	mov    eax,edi
c001455f:	25 01 04 00 00       	and    eax,0x401
c0014564:	3d 00 04 00 00       	cmp    eax,0x400
c0014569:	75 ad                	jne    c0014518 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c001456b:	e8 14 be ff ff       	call   c0010384 <Phys::allocatePage()>
c0014570:	c1 ef 0c             	shr    edi,0xc
c0014573:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014575:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001457b:	09 c2                	or     edx,eax
c001457d:	81 ca 01 08 00 00    	or     edx,0x801
c0014583:	89 13                	mov    DWORD PTR [ebx],edx
c0014585:	8b 15 0c c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c70c
c001458b:	85 d2                	test   edx,edx
c001458d:	7e 4d                	jle    c00145dc <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c001458f:	89 ee                	mov    esi,ebp
c0014591:	31 db                	xor    ebx,ebx
c0014593:	83 ec 08             	sub    esp,0x8
c0014596:	56                   	push   esi
c0014597:	68 78 98 02 c0       	push   0xc0029878
c001459c:	e8 db 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00145a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145a4:	e8 c6 f2 ff ff       	call   c001386f <Virt::swapIDToSector(unsigned long)>
c00145a9:	89 34 24             	mov    DWORD PTR [esp],esi
c00145ac:	01 d8                	add    eax,ebx
c00145ae:	6a 01                	push   0x1
c00145b0:	31 d2                	xor    edx,edx
c00145b2:	83 c3 01             	add    ebx,0x1
c00145b5:	52                   	push   edx
c00145b6:	81 c6 00 02 00 00    	add    esi,0x200
c00145bc:	50                   	push   eax
c00145bd:	0f be 05 18 c7 02 c0 	movsx  eax,BYTE PTR ds:0xc002c718
c00145c4:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c00145cb:	50                   	push   eax
c00145cc:	e8 79 69 ff ff       	call   c000af4a <LogicalDisk::read(unsigned long long, int, void*)>
c00145d1:	83 c4 20             	add    esp,0x20
c00145d4:	39 1d 0c c7 02 c0    	cmp    DWORD PTR ds:0xc002c70c,ebx
c00145da:	7f b7                	jg     c0014593 <VAS::tryLoadBackOffDisk(unsigned long)+0x9f>
c00145dc:	83 ec 04             	sub    esp,0x4
c00145df:	a1 88 32 03 c0       	mov    eax,ds:0xc0033288
c00145e4:	83 e8 01             	sub    eax,0x1
c00145e7:	50                   	push   eax
c00145e8:	a3 88 32 03 c0       	mov    ds:0xc0033288,eax
c00145ed:	55                   	push   ebp
c00145ee:	68 63 98 02 c0       	push   0xc0029863
c00145f3:	e8 84 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00145f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145fb:	e8 4c f2 ff ff       	call   c001384c <Virt::freeSwapfilePage(unsigned long)>
c0014600:	0f 20 d8             	mov    eax,cr3
c0014603:	0f 22 d8             	mov    cr3,eax
c0014606:	b0 01                	mov    al,0x1
c0014608:	83 c4 10             	add    esp,0x10
c001460b:	e9 0a ff ff ff       	jmp    c001451a <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c0014610:	83 ec 0c             	sub    esp,0xc
c0014613:	68 1c 96 02 c0       	push   0xc002961c
c0014618:	e8 5f 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001461d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001461f:	e8 60 bd ff ff       	call   c0010384 <Phys::allocatePage()>
c0014624:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001462a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001462c:	83 c9 01             	or     ecx,0x1
c001462f:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014631:	0f 20 da             	mov    edx,cr3
c0014634:	0f 22 da             	mov    cr3,edx
c0014637:	ba 00 10 00 00       	mov    edx,0x1000
c001463c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014640:	89 d1                	mov    ecx,edx
c0014642:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014644:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014646:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c001464c:	09 c8                	or     eax,ecx
c001464e:	83 c8 02             	or     eax,0x2
c0014651:	89 03                	mov    DWORD PTR [ebx],eax
c0014653:	0f 20 d8             	mov    eax,cr3
c0014656:	0f 22 d8             	mov    cr3,eax
c0014659:	8d 74 24 10          	lea    esi,[esp+0x10]
c001465d:	89 ef                	mov    edi,ebp
c001465f:	89 d1                	mov    ecx,edx
c0014661:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014663:	b0 01                	mov    al,0x1
c0014665:	83 c4 10             	add    esp,0x10
c0014668:	e9 ad fe ff ff       	jmp    c001451a <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c001466d:	90                   	nop

c001466e <VAS::lockPage(unsigned long)>:
c001466e:	56                   	push   esi
c001466f:	53                   	push   ebx
c0014670:	83 ec 04             	sub    esp,0x4
c0014673:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014677:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001467b:	50                   	push   eax
c001467c:	56                   	push   esi
c001467d:	e8 8e f3 ff ff       	call   c0013a10 <VAS::getPageTableEntry(unsigned long)>
c0014682:	5a                   	pop    edx
c0014683:	89 c3                	mov    ebx,eax
c0014685:	59                   	pop    ecx
c0014686:	8b 00                	mov    eax,DWORD PTR [eax]
c0014688:	a8 01                	test   al,0x1
c001468a:	74 10                	je     c001469c <VAS::lockPage(unsigned long)+0x2e>
c001468c:	f6 c4 08             	test   ah,0x8
c001468f:	74 28                	je     c00146b9 <VAS::lockPage(unsigned long)+0x4b>
c0014691:	80 e4 f7             	and    ah,0xf7
c0014694:	89 03                	mov    DWORD PTR [ebx],eax
c0014696:	83 c4 04             	add    esp,0x4
c0014699:	5b                   	pop    ebx
c001469a:	5e                   	pop    esi
c001469b:	c3                   	ret    
c001469c:	83 ec 08             	sub    esp,0x8
c001469f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00146a4:	50                   	push   eax
c00146a5:	56                   	push   esi
c00146a6:	e8 49 fe ff ff       	call   c00144f4 <VAS::tryLoadBackOffDisk(unsigned long)>
c00146ab:	83 c4 10             	add    esp,0x10
c00146ae:	84 c0                	test   al,al
c00146b0:	74 19                	je     c00146cb <VAS::lockPage(unsigned long)+0x5d>
c00146b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146b4:	f6 c4 08             	test   ah,0x8
c00146b7:	75 d8                	jne    c0014691 <VAS::lockPage(unsigned long)+0x23>
c00146b9:	c7 44 24 10 ec 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295ec
c00146c1:	83 c4 04             	add    esp,0x4
c00146c4:	5b                   	pop    ebx
c00146c5:	5e                   	pop    esi
c00146c6:	e9 c5 ba ff ff       	jmp    c0010190 <KePanic(char const*)>
c00146cb:	83 ec 0c             	sub    esp,0xc
c00146ce:	68 3c 96 02 c0       	push   0xc002963c
c00146d3:	e8 b8 ba ff ff       	call   c0010190 <KePanic(char const*)>
c00146d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146da:	83 c4 10             	add    esp,0x10
c00146dd:	eb ad                	jmp    c001468c <VAS::lockPage(unsigned long)+0x1e>
c00146df:	90                   	nop

c00146e0 <VAS::lockPages(unsigned long, int)>:
c00146e0:	55                   	push   ebp
c00146e1:	57                   	push   edi
c00146e2:	56                   	push   esi
c00146e3:	53                   	push   ebx
c00146e4:	83 ec 0c             	sub    esp,0xc
c00146e7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00146eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00146ef:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00146f3:	85 ff                	test   edi,edi
c00146f5:	7e 1c                	jle    c0014713 <VAS::lockPages(unsigned long, int)+0x33>
c00146f7:	31 f6                	xor    esi,esi
c00146f9:	83 ec 08             	sub    esp,0x8
c00146fc:	83 c6 01             	add    esi,0x1
c00146ff:	53                   	push   ebx
c0014700:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014706:	55                   	push   ebp
c0014707:	e8 62 ff ff ff       	call   c001466e <VAS::lockPage(unsigned long)>
c001470c:	83 c4 10             	add    esp,0x10
c001470f:	39 f7                	cmp    edi,esi
c0014711:	75 e6                	jne    c00146f9 <VAS::lockPages(unsigned long, int)+0x19>
c0014713:	83 c4 0c             	add    esp,0xc
c0014716:	5b                   	pop    ebx
c0014717:	5e                   	pop    esi
c0014718:	5f                   	pop    edi
c0014719:	5d                   	pop    ebp
c001471a:	c3                   	ret    
c001471b:	90                   	nop

c001471c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c001471c:	55                   	push   ebp
c001471d:	57                   	push   edi
c001471e:	56                   	push   esi
c001471f:	53                   	push   ebx
c0014720:	83 ec 28             	sub    esp,0x28
c0014723:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0014727:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001472b:	50                   	push   eax
c001472c:	e8 f6 ef ff ff       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c0014731:	83 c4 0c             	add    esp,0xc
c0014734:	89 c5                	mov    ebp,eax
c0014736:	6a 07                	push   0x7
c0014738:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001473c:	52                   	push   edx
c001473d:	56                   	push   esi
c001473e:	e8 cb f7 ff ff       	call   c0013f0e <VAS::allocatePages(int, int)>
c0014743:	83 c4 10             	add    esp,0x10
c0014746:	89 c7                	mov    edi,eax
c0014748:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001474c:	85 c9                	test   ecx,ecx
c001474e:	74 2f                	je     c001477f <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014750:	31 db                	xor    ebx,ebx
c0014752:	e8 2d bc ff ff       	call   c0010384 <Phys::allocatePage()>
c0014757:	83 c3 01             	add    ebx,0x1
c001475a:	6a 03                	push   0x3
c001475c:	55                   	push   ebp
c001475d:	50                   	push   eax
c001475e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014762:	56                   	push   esi
c0014763:	e8 a2 f6 ff ff       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0014768:	6a 07                	push   0x7
c001476a:	57                   	push   edi
c001476b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001476f:	50                   	push   eax
c0014770:	56                   	push   esi
c0014771:	e8 94 f6 ff ff       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0014776:	83 c4 20             	add    esp,0x20
c0014779:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c001477d:	75 d3                	jne    c0014752 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c001477f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014783:	89 28                	mov    DWORD PTR [eax],ebp
c0014785:	83 c4 1c             	add    esp,0x1c
c0014788:	89 f8                	mov    eax,edi
c001478a:	5b                   	pop    ebx
c001478b:	5e                   	pop    esi
c001478c:	5f                   	pop    edi
c001478d:	5d                   	pop    ebp
c001478e:	c3                   	ret    
c001478f:	90                   	nop

c0014790 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014790:	53                   	push   ebx
c0014791:	83 ec 14             	sub    esp,0x14
c0014794:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014798:	68 6c 96 02 c0       	push   0xc002966c
c001479d:	e8 da 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147a2:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c00147a9:	e8 ce 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00147b2:	83 c4 18             	add    esp,0x18
c00147b5:	5b                   	pop    ebx
c00147b6:	e9 74 f2 ff ff       	jmp    c0013a2f <Virt::freeKernelVirtualPages(unsigned long)>
c00147bb:	90                   	nop

c00147bc <VAS::scanForEviction()>:
c00147bc:	57                   	push   edi
c00147bd:	56                   	push   esi
c00147be:	31 f6                	xor    esi,esi
c00147c0:	53                   	push   ebx
c00147c1:	83 ec 18             	sub    esp,0x18
c00147c4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00147c8:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00147cd:	50                   	push   eax
c00147ce:	68 48 97 02 c0       	push   0xc0029748
c00147d3:	e8 a4 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147d8:	c7 04 24 91 98 02 c0 	mov    DWORD PTR [esp],0xc0029891
c00147df:	e8 98 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147e4:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00147e7:	83 c4 10             	add    esp,0x10
c00147ea:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00147f0:	75 0e                	jne    c0014800 <VAS::scanForEviction()+0x44>
c00147f2:	89 da                	mov    edx,ebx
c00147f4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00147f7:	c1 ea 16             	shr    edx,0x16
c00147fa:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00147fe:	74 5b                	je     c001485b <VAS::scanForEviction()+0x9f>
c0014800:	83 ec 08             	sub    esp,0x8
c0014803:	53                   	push   ebx
c0014804:	57                   	push   edi
c0014805:	e8 06 f2 ff ff       	call   c0013a10 <VAS::getPageTableEntry(unsigned long)>
c001480a:	83 c4 10             	add    esp,0x10
c001480d:	8b 10                	mov    edx,DWORD PTR [eax]
c001480f:	89 d1                	mov    ecx,edx
c0014811:	c1 e9 0c             	shr    ecx,0xc
c0014814:	74 10                	je     c0014826 <VAS::scanForEviction()+0x6a>
c0014816:	89 d1                	mov    ecx,edx
c0014818:	81 e1 00 0c 00 00    	and    ecx,0xc00
c001481e:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0014824:	74 40                	je     c0014866 <VAS::scanForEviction()+0xaa>
c0014826:	81 c3 00 10 00 00    	add    ebx,0x1000
c001482c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014832:	76 2d                	jbe    c0014861 <VAS::scanForEviction()+0xa5>
c0014834:	83 c6 01             	add    esi,0x1
c0014837:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c001483e:	83 fe 03             	cmp    esi,0x3
c0014841:	74 37                	je     c001487a <VAS::scanForEviction()+0xbe>
c0014843:	31 db                	xor    ebx,ebx
c0014845:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001484b:	75 b3                	jne    c0014800 <VAS::scanForEviction()+0x44>
c001484d:	89 da                	mov    edx,ebx
c001484f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014852:	c1 ea 16             	shr    edx,0x16
c0014855:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014859:	75 a5                	jne    c0014800 <VAS::scanForEviction()+0x44>
c001485b:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014861:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014864:	eb 84                	jmp    c00147ea <VAS::scanForEviction()+0x2e>
c0014866:	f6 c2 01             	test   dl,0x1
c0014869:	74 bb                	je     c0014826 <VAS::scanForEviction()+0x6a>
c001486b:	f6 c2 20             	test   dl,0x20
c001486e:	74 13                	je     c0014883 <VAS::scanForEviction()+0xc7>
c0014870:	83 e2 df             	and    edx,0xffffffdf
c0014873:	89 10                	mov    DWORD PTR [eax],edx
c0014875:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014878:	eb ac                	jmp    c0014826 <VAS::scanForEviction()+0x6a>
c001487a:	83 c4 10             	add    esp,0x10
c001487d:	31 c0                	xor    eax,eax
c001487f:	5b                   	pop    ebx
c0014880:	5e                   	pop    esi
c0014881:	5f                   	pop    edi
c0014882:	c3                   	ret    
c0014883:	83 ec 08             	sub    esp,0x8
c0014886:	89 d0                	mov    eax,edx
c0014888:	25 00 f0 ff ff       	and    eax,0xfffff000
c001488d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014891:	53                   	push   ebx
c0014892:	68 ad 98 02 c0       	push   0xc00298ad
c0014897:	e8 e0 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001489c:	58                   	pop    eax
c001489d:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00148a0:	5a                   	pop    edx
c00148a1:	51                   	push   ecx
c00148a2:	57                   	push   edi
c00148a3:	e8 82 fa ff ff       	call   c001432a <VAS::evict(unsigned long)>
c00148a8:	5b                   	pop    ebx
c00148a9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00148ac:	5e                   	pop    esi
c00148ad:	50                   	push   eax
c00148ae:	68 c1 98 02 c0       	push   0xc00298c1
c00148b3:	e8 c4 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00148b8:	58                   	pop    eax
c00148b9:	5a                   	pop    edx
c00148ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148be:	50                   	push   eax
c00148bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00148c3:	68 d4 98 02 c0       	push   0xc00298d4
c00148c8:	e8 af 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00148cd:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00148d0:	81 c1 00 10 00 00    	add    ecx,0x1000
c00148d6:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00148d9:	8b 3d 30 33 03 c0    	mov    edi,DWORD PTR ds:0xc0033330
c00148df:	5b                   	pop    ebx
c00148e0:	5e                   	pop    esi
c00148e1:	57                   	push   edi
c00148e2:	68 68 97 02 c0       	push   0xc0029768
c00148e7:	e8 90 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00148ec:	83 c4 10             	add    esp,0x10
c00148ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148f3:	83 c4 10             	add    esp,0x10
c00148f6:	5b                   	pop    ebx
c00148f7:	5e                   	pop    esi
c00148f8:	5f                   	pop    edi
c00148f9:	c3                   	ret    

c00148fa <mapVASFirstTime>:
c00148fa:	55                   	push   ebp
c00148fb:	57                   	push   edi
c00148fc:	56                   	push   esi
c00148fd:	53                   	push   ebx
c00148fe:	83 ec 0c             	sub    esp,0xc
c0014901:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014906:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014909:	83 fa 01             	cmp    edx,0x1
c001490c:	0f 84 cb 00 00 00    	je     c00149dd <mapVASFirstTime+0xe3>
c0014912:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014915:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014918:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001491d:	c1 e5 15             	shl    ebp,0x15
c0014920:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014925:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c001492b:	29 eb                	sub    ebx,ebp
c001492d:	29 ef                	sub    edi,ebp
c001492f:	e8 50 ba ff ff       	call   c0010384 <Phys::allocatePage()>
c0014934:	83 ec 0c             	sub    esp,0xc
c0014937:	68 03 04 00 00       	push   0x403
c001493c:	6a 01                	push   0x1
c001493e:	53                   	push   ebx
c001493f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014945:	50                   	push   eax
c0014946:	56                   	push   esi
c0014947:	e8 a8 f6 ff ff       	call   c0013ff4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001494c:	83 c4 20             	add    esp,0x20
c001494f:	39 fb                	cmp    ebx,edi
c0014951:	75 dc                	jne    c001492f <mapVASFirstTime+0x35>
c0014953:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014958:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001495d:	29 eb                	sub    ebx,ebp
c001495f:	29 ef                	sub    edi,ebp
c0014961:	e8 1e ba ff ff       	call   c0010384 <Phys::allocatePage()>
c0014966:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001496a:	83 fa 01             	cmp    edx,0x1
c001496d:	19 d2                	sbb    edx,edx
c001496f:	83 ec 0c             	sub    esp,0xc
c0014972:	83 e2 04             	and    edx,0x4
c0014975:	81 c2 03 04 00 00    	add    edx,0x403
c001497b:	52                   	push   edx
c001497c:	6a 01                	push   0x1
c001497e:	53                   	push   ebx
c001497f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014985:	50                   	push   eax
c0014986:	56                   	push   esi
c0014987:	e8 68 f6 ff ff       	call   c0013ff4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001498c:	83 c4 20             	add    esp,0x20
c001498f:	39 df                	cmp    edi,ebx
c0014991:	75 ce                	jne    c0014961 <mapVASFirstTime+0x67>
c0014993:	83 ec 0c             	sub    esp,0xc
c0014996:	bb 7c f0 02 c0       	mov    ebx,0xc002f07c
c001499b:	6a 04                	push   0x4
c001499d:	81 eb 00 e0 02 c0    	sub    ebx,0xc002e000
c00149a3:	6a ff                	push   0xffffffff
c00149a5:	c1 eb 0c             	shr    ebx,0xc
c00149a8:	53                   	push   ebx
c00149a9:	68 00 e0 02 c0       	push   0xc002e000
c00149ae:	56                   	push   esi
c00149af:	e8 f6 f1 ff ff       	call   c0013baa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00149b4:	83 c4 14             	add    esp,0x14
c00149b7:	a1 90 32 03 c0       	mov    eax,ds:0xc0033290
c00149bc:	6a 04                	push   0x4
c00149be:	6a ff                	push   0xffffffff
c00149c0:	53                   	push   ebx
c00149c1:	68 00 e0 02 c0       	push   0xc002e000
c00149c6:	50                   	push   eax
c00149c7:	e8 de f1 ff ff       	call   c0013baa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00149cc:	0f 20 d8             	mov    eax,cr3
c00149cf:	0f 22 d8             	mov    cr3,eax
c00149d2:	83 c4 20             	add    esp,0x20
c00149d5:	83 c4 0c             	add    esp,0xc
c00149d8:	5b                   	pop    ebx
c00149d9:	5e                   	pop    esi
c00149da:	5f                   	pop    edi
c00149db:	5d                   	pop    ebp
c00149dc:	c3                   	ret    
c00149dd:	83 ec 0c             	sub    esp,0xc
c00149e0:	68 e1 98 02 c0       	push   0xc00298e1
c00149e5:	e8 92 25 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00149ea:	83 c4 10             	add    esp,0x10
c00149ed:	83 c4 0c             	add    esp,0xc
c00149f0:	5b                   	pop    ebx
c00149f1:	5e                   	pop    esi
c00149f2:	5f                   	pop    edi
c00149f3:	5d                   	pop    ebp
c00149f4:	c3                   	ret    

c00149f5 <SysAlarm(regs*)>:
c00149f5:	53                   	push   ebx
c00149f6:	83 ec 10             	sub    esp,0x10
c00149f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00149fd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014a00:	68 fa 98 02 c0       	push   0xc00298fa
c0014a05:	e8 72 25 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014a0a:	83 c4 0c             	add    esp,0xc
c0014a0d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a10:	31 d2                	xor    edx,edx
c0014a12:	52                   	push   edx
c0014a13:	50                   	push   eax
c0014a14:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014a1a:	e8 ad 09 00 00       	call   c00153cc <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014a1f:	83 c4 18             	add    esp,0x18
c0014a22:	5b                   	pop    ebx
c0014a23:	c3                   	ret    

c0014a24 <SysEject(regs*)>:
c0014a24:	83 ec 0c             	sub    esp,0xc
c0014a27:	83 ca ff             	or     edx,0xffffffff
c0014a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a2e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014a31:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014a36:	83 e9 41             	sub    ecx,0x41
c0014a39:	83 f9 19             	cmp    ecx,0x19
c0014a3c:	77 18                	ja     c0014a56 <SysEject(regs*)+0x32>
c0014a3e:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c0014a45:	85 c9                	test   ecx,ecx
c0014a47:	74 0d                	je     c0014a56 <SysEject(regs*)+0x32>
c0014a49:	83 ec 0c             	sub    esp,0xc
c0014a4c:	51                   	push   ecx
c0014a4d:	e8 8e 64 ff ff       	call   c000aee0 <LogicalDisk::eject()>
c0014a52:	83 c4 10             	add    esp,0x10
c0014a55:	99                   	cdq    
c0014a56:	83 c4 0c             	add    esp,0xc
c0014a59:	c3                   	ret    

c0014a5a <SysExit(regs*)>:
c0014a5a:	83 ec 18             	sub    esp,0x18
c0014a5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a61:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a64:	e8 bf 2a 00 00       	call   c0017528 <KeTerminateCurrentThread(int)>
c0014a69:	83 c8 ff             	or     eax,0xffffffff
c0014a6c:	83 c4 1c             	add    esp,0x1c
c0014a6f:	89 c2                	mov    edx,eax
c0014a71:	c3                   	ret    

c0014a72 <SysGetCwd(regs*)>:
c0014a72:	83 ec 10             	sub    esp,0x10
c0014a75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a79:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014a7c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a84:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014a87:	e8 6a 38 ff ff       	call   c00082f6 <Fs::getcwd(Process*, char*, int)>
c0014a8c:	83 c4 1c             	add    esp,0x1c
c0014a8f:	99                   	cdq    
c0014a90:	c3                   	ret    

c0014a91 <SysGetPID(regs*)>:
c0014a91:	83 ec 14             	sub    esp,0x14
c0014a94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a99:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a9c:	ff 30                	push   DWORD PTR [eax]
c0014a9e:	68 0f 99 02 c0       	push   0xc002990f
c0014aa3:	e8 d4 24 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014aa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ab0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ab2:	83 c4 1c             	add    esp,0x1c
c0014ab5:	99                   	cdq    
c0014ab6:	c3                   	ret    

c0014ab7 <SysGetRAMData(regs*)>:
c0014ab7:	8b 0d 7c 31 03 c0    	mov    ecx,DWORD PTR ds:0xc003317c
c0014abd:	a1 88 32 03 c0       	mov    eax,ds:0xc0033288
c0014ac2:	03 05 78 31 03 c0    	add    eax,DWORD PTR ds:0xc0033178
c0014ac8:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0014ace:	99                   	cdq    
c0014acf:	f7 f9                	idiv   ecx
c0014ad1:	c1 e0 18             	shl    eax,0x18
c0014ad4:	09 c8                	or     eax,ecx
c0014ad6:	99                   	cdq    
c0014ad7:	c3                   	ret    

c0014ad8 <SysGetVGAPtr(regs*)>:
c0014ad8:	55                   	push   ebp
c0014ad9:	57                   	push   edi
c0014ada:	56                   	push   esi
c0014adb:	53                   	push   ebx
c0014adc:	83 ec 1c             	sub    esp,0x1c
c0014adf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014ae3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014ae6:	83 f8 ff             	cmp    eax,0xffffffff
c0014ae9:	74 23                	je     c0014b0e <SysGetVGAPtr(regs*)+0x36>
c0014aeb:	83 ec 0c             	sub    esp,0xc
c0014aee:	50                   	push   eax
c0014aef:	e8 e0 24 00 00       	call   c0016fd4 <KeProcessFromPID(int)>
c0014af4:	31 d2                	xor    edx,edx
c0014af6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014afa:	83 c4 10             	add    esp,0x10
c0014afd:	b8 01 00 00 00       	mov    eax,0x1
c0014b02:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014b07:	75 11                	jne    c0014b1a <SysGetVGAPtr(regs*)+0x42>
c0014b09:	e9 80 00 00 00       	jmp    c0014b8e <SysGetVGAPtr(regs*)+0xb6>
c0014b0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b1e:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014b22:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014b28:	74 0c                	je     c0014b36 <SysGetVGAPtr(regs*)+0x5e>
c0014b2a:	83 ec 0c             	sub    esp,0xc
c0014b2d:	55                   	push   ebp
c0014b2e:	e8 7c dc ff ff       	call   c00127af <setActiveTerminal(VgaText*)>
c0014b33:	83 c4 10             	add    esp,0x10
c0014b36:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014b39:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014b3c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014b41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b43:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014b46:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b49:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014b4f:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014b52:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b55:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014b5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b5f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014b62:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014b69:	c1 e8 07             	shr    eax,0x7
c0014b6c:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014b72:	50                   	push   eax
c0014b73:	50                   	push   eax
c0014b74:	68 1e 99 02 c0       	push   0xc002991e
c0014b79:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b7c:	05 ac 0f 00 00       	add    eax,0xfac
c0014b81:	50                   	push   eax
c0014b82:	e8 b9 ba fe ff       	call   c0000640 <strcpy>
c0014b87:	83 c4 10             	add    esp,0x10
c0014b8a:	31 c0                	xor    eax,eax
c0014b8c:	31 d2                	xor    edx,edx
c0014b8e:	83 c4 1c             	add    esp,0x1c
c0014b91:	5b                   	pop    ebx
c0014b92:	5e                   	pop    esi
c0014b93:	5f                   	pop    edi
c0014b94:	5d                   	pop    ebp
c0014b95:	c3                   	ret    
c0014b96:	66 90                	xchg   ax,ax

c0014b98 <SysKill(regs*)>:
c0014b98:	53                   	push   ebx
c0014b99:	83 ec 08             	sub    esp,0x8
c0014b9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ba0:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014ba4:	75 16                	jne    c0014bbc <SysKill(regs*)+0x24>
c0014ba6:	83 ec 0c             	sub    esp,0xc
c0014ba9:	68 28 99 02 c0       	push   0xc0029928
c0014bae:	e8 dd b5 ff ff       	call   c0010190 <KePanic(char const*)>
c0014bb3:	83 c4 10             	add    esp,0x10
c0014bb6:	e9 89 00 00 00       	jmp    c0014c44 <SysKill(regs*)+0xac>
c0014bbb:	90                   	nop
c0014bbc:	83 ec 0c             	sub    esp,0xc
c0014bbf:	68 4c 33 03 c0       	push   0xc003334c
c0014bc4:	e8 f3 1f 01 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bcc:	83 c4 10             	add    esp,0x10
c0014bcf:	85 c0                	test   eax,eax
c0014bd1:	74 19                	je     c0014bec <SysKill(regs*)+0x54>
c0014bd3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014bd6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014bd9:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014bdb:	74 33                	je     c0014c10 <SysKill(regs*)+0x78>
c0014bdd:	52                   	push   edx
c0014bde:	52                   	push   edx
c0014bdf:	50                   	push   eax
c0014be0:	68 4c 33 03 c0       	push   0xc003334c
c0014be5:	e8 de 24 01 00       	call   c00270c8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014bea:	eb e0                	jmp    c0014bcc <SysKill(regs*)+0x34>
c0014bec:	83 ec 0c             	sub    esp,0xc
c0014bef:	68 40 33 03 c0       	push   0xc0033340
c0014bf4:	e8 c3 1f 01 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bfc:	83 c4 10             	add    esp,0x10
c0014bff:	85 c0                	test   eax,eax
c0014c01:	74 41                	je     c0014c44 <SysKill(regs*)+0xac>
c0014c03:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014c06:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014c09:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014c0b:	75 27                	jne    c0014c34 <SysKill(regs*)+0x9c>
c0014c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c10:	51                   	push   ecx
c0014c11:	51                   	push   ecx
c0014c12:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c1a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c1d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014c23:	e8 83 c7 ff ff       	call   c00113ab <KeRaiseSignal(SigHandlerBlock*, int)>
c0014c28:	83 c4 10             	add    esp,0x10
c0014c2b:	31 c0                	xor    eax,eax
c0014c2d:	31 d2                	xor    edx,edx
c0014c2f:	eb 1b                	jmp    c0014c4c <SysKill(regs*)+0xb4>
c0014c31:	8d 76 00             	lea    esi,[esi+0x0]
c0014c34:	52                   	push   edx
c0014c35:	52                   	push   edx
c0014c36:	50                   	push   eax
c0014c37:	68 40 33 03 c0       	push   0xc0033340
c0014c3c:	e8 87 24 01 00       	call   c00270c8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014c41:	eb b9                	jmp    c0014bfc <SysKill(regs*)+0x64>
c0014c43:	90                   	nop
c0014c44:	83 c8 ff             	or     eax,0xffffffff
c0014c47:	89 c2                	mov    edx,eax
c0014c49:	8d 76 00             	lea    esi,[esi+0x0]
c0014c4c:	83 c4 08             	add    esp,0x8
c0014c4f:	5b                   	pop    ebx
c0014c50:	c3                   	ret    

c0014c51 <SysLoadDLL(regs*)>:
c0014c51:	56                   	push   esi
c0014c52:	31 d2                	xor    edx,edx
c0014c54:	53                   	push   ebx
c0014c55:	b8 01 00 00 00       	mov    eax,0x1
c0014c5a:	53                   	push   ebx
c0014c5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c5f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014c63:	0f 84 82 00 00 00    	je     c0014ceb <SysLoadDLL(regs*)+0x9a>
c0014c69:	83 ec 0c             	sub    esp,0xc
c0014c6c:	68 14 01 00 00       	push   0x114
c0014c71:	e8 c5 b0 ff ff       	call   c000fd3b <malloc>
c0014c76:	83 c4 0c             	add    esp,0xc
c0014c79:	89 c3                	mov    ebx,eax
c0014c7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c80:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014c83:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c86:	53                   	push   ebx
c0014c87:	e8 d6 39 ff ff       	call   c0008662 <File::File(char const*, Process*)>
c0014c8c:	83 c4 10             	add    esp,0x10
c0014c8f:	31 d2                	xor    edx,edx
c0014c91:	b8 02 00 00 00       	mov    eax,0x2
c0014c96:	85 db                	test   ebx,ebx
c0014c98:	74 51                	je     c0014ceb <SysLoadDLL(regs*)+0x9a>
c0014c9a:	83 ec 0c             	sub    esp,0xc
c0014c9d:	53                   	push   ebx
c0014c9e:	e8 a1 3c ff ff       	call   c0008944 <File::exists()>
c0014ca3:	83 c4 10             	add    esp,0x10
c0014ca6:	84 c0                	test   al,al
c0014ca8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014caa:	75 11                	jne    c0014cbd <SysLoadDLL(regs*)+0x6c>
c0014cac:	83 ec 0c             	sub    esp,0xc
c0014caf:	53                   	push   ebx
c0014cb0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014cb3:	83 c4 10             	add    esp,0x10
c0014cb6:	b8 03 00 00 00       	mov    eax,0x3
c0014cbb:	eb 2c                	jmp    c0014ce9 <SysLoadDLL(regs*)+0x98>
c0014cbd:	83 ec 0c             	sub    esp,0xc
c0014cc0:	53                   	push   ebx
c0014cc1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014cc4:	83 c4 0c             	add    esp,0xc
c0014cc7:	6a 00                	push   0x0
c0014cc9:	ff 35 08 31 03 c0    	push   DWORD PTR ds:0xc0033108
c0014ccf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014cd2:	e8 b5 16 00 00       	call   c001638c <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0014cd7:	83 c4 10             	add    esp,0x10
c0014cda:	88 c1                	mov    cl,al
c0014cdc:	31 d2                	xor    edx,edx
c0014cde:	31 c0                	xor    eax,eax
c0014ce0:	84 c9                	test   cl,cl
c0014ce2:	75 07                	jne    c0014ceb <SysLoadDLL(regs*)+0x9a>
c0014ce4:	b8 04 00 00 00       	mov    eax,0x4
c0014ce9:	31 d2                	xor    edx,edx
c0014ceb:	59                   	pop    ecx
c0014cec:	5b                   	pop    ebx
c0014ced:	5e                   	pop    esi
c0014cee:	c3                   	ret    

c0014cef <SysPause(regs*)>:
c0014cef:	83 ec 18             	sub    esp,0x18
c0014cf2:	6a 08                	push   0x8
c0014cf4:	e8 ef 20 00 00       	call   c0016de8 <blockTask(TaskState)>
c0014cf9:	31 c0                	xor    eax,eax
c0014cfb:	31 d2                	xor    edx,edx
c0014cfd:	83 c4 1c             	add    esp,0x1c
c0014d00:	c3                   	ret    

c0014d01 <SysPthreadCreate(regs*)>:
c0014d01:	83 ec 18             	sub    esp,0x18
c0014d04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d09:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014d0c:	e8 af 1e 00 00       	call   c0016bc0 <Process::createUserThread()>
c0014d11:	31 c0                	xor    eax,eax
c0014d13:	31 d2                	xor    edx,edx
c0014d15:	83 c4 1c             	add    esp,0x1c
c0014d18:	c3                   	ret    

c0014d19 <SysPthreadGetTID(regs*)>:
c0014d19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014d21:	99                   	cdq    
c0014d22:	c3                   	ret    

c0014d23 <SysInternalPthreadGetContext(regs*)>:
c0014d23:	31 c0                	xor    eax,eax
c0014d25:	31 d2                	xor    edx,edx
c0014d27:	c3                   	ret    

c0014d28 <SysInternalPthreadGetStartLocation(regs*)>:
c0014d28:	31 c0                	xor    eax,eax
c0014d2a:	31 d2                	xor    edx,edx
c0014d2c:	c3                   	ret    

c0014d2d <SysPthreadJoin(regs*)>:
c0014d2d:	31 c0                	xor    eax,eax
c0014d2f:	31 d2                	xor    edx,edx
c0014d31:	c3                   	ret    

c0014d32 <SysPthreadExit(regs*)>:
c0014d32:	83 ec 18             	sub    esp,0x18
c0014d35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d39:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d3c:	e8 e7 27 00 00       	call   c0017528 <KeTerminateCurrentThread(int)>
c0014d41:	83 c8 ff             	or     eax,0xffffffff
c0014d44:	83 c4 1c             	add    esp,0x1c
c0014d47:	89 c2                	mov    edx,eax
c0014d49:	c3                   	ret    

c0014d4a <SysRead(regs*)>:
c0014d4a:	57                   	push   edi
c0014d4b:	56                   	push   esi
c0014d4c:	53                   	push   ebx
c0014d4d:	83 ec 10             	sub    esp,0x10
c0014d50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014d54:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014d57:	83 f8 02             	cmp    eax,0x2
c0014d5a:	77 10                	ja     c0014d6c <SysRead(regs*)+0x22>
c0014d5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d61:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d64:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014d6a:	eb 0e                	jmp    c0014d7a <SysRead(regs*)+0x30>
c0014d6c:	83 ec 0c             	sub    esp,0xc
c0014d6f:	50                   	push   eax
c0014d70:	e8 54 e8 ff ff       	call   c00135c9 <KeGetFileFromDescriptor(int)>
c0014d75:	83 c4 10             	add    esp,0x10
c0014d78:	89 c1                	mov    ecx,eax
c0014d7a:	83 c8 ff             	or     eax,0xffffffff
c0014d7d:	85 c9                	test   ecx,ecx
c0014d7f:	89 c2                	mov    edx,eax
c0014d81:	74 28                	je     c0014dab <SysRead(regs*)+0x61>
c0014d83:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d8b:	31 ff                	xor    edi,edi
c0014d8d:	83 ec 0c             	sub    esp,0xc
c0014d90:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014d92:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014d96:	52                   	push   edx
c0014d97:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d9a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014d9d:	57                   	push   edi
c0014d9e:	56                   	push   esi
c0014d9f:	51                   	push   ecx
c0014da0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014da3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014da7:	83 c4 20             	add    esp,0x20
c0014daa:	99                   	cdq    
c0014dab:	83 c4 10             	add    esp,0x10
c0014dae:	5b                   	pop    ebx
c0014daf:	5e                   	pop    esi
c0014db0:	5f                   	pop    edi
c0014db1:	c3                   	ret    

c0014db2 <SysRegisterSignal(regs*)>:
c0014db2:	83 ec 18             	sub    esp,0x18
c0014db5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014db9:	6a 00                	push   0x0
c0014dbb:	6a 00                	push   0x0
c0014dbd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014dc0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014dc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dc8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dcb:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014dd1:	e8 9f c5 ff ff       	call   c0011375 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014dd6:	83 c4 2c             	add    esp,0x2c
c0014dd9:	99                   	cdq    
c0014dda:	c3                   	ret    

c0014ddb <SysRegistryGetTypeFromPath(regs*)>:
c0014ddb:	53                   	push   ebx
c0014ddc:	81 ec 40 01 00 00    	sub    esp,0x140
c0014de2:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014de9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014dec:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014def:	e8 b4 96 ff ff       	call   c000e4a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014df4:	83 c4 10             	add    esp,0x10
c0014df7:	89 c1                	mov    ecx,eax
c0014df9:	85 c0                	test   eax,eax
c0014dfb:	74 15                	je     c0014e12 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014dfd:	50                   	push   eax
c0014dfe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014e02:	50                   	push   eax
c0014e03:	51                   	push   ecx
c0014e04:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e07:	e8 80 92 ff ff       	call   c000e08c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014e0c:	83 c4 10             	add    esp,0x10
c0014e0f:	99                   	cdq    
c0014e10:	eb 05                	jmp    c0014e17 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014e12:	83 c8 ff             	or     eax,0xffffffff
c0014e15:	89 c2                	mov    edx,eax
c0014e17:	81 c4 38 01 00 00    	add    esp,0x138
c0014e1d:	5b                   	pop    ebx
c0014e1e:	c3                   	ret    

c0014e1f <SysRegistryReadExtent(regs*)>:
c0014e1f:	83 ec 1c             	sub    esp,0x1c
c0014e22:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e26:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014e29:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014e2c:	85 c0                	test   eax,eax
c0014e2e:	79 1f                	jns    c0014e4f <SysRegistryReadExtent(regs*)+0x30>
c0014e30:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014e35:	52                   	push   edx
c0014e36:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014e3a:	52                   	push   edx
c0014e3b:	50                   	push   eax
c0014e3c:	51                   	push   ecx
c0014e3d:	e8 3c 91 ff ff       	call   c000df7e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014e42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014e4a:	83 c4 10             	add    esp,0x10
c0014e4d:	eb 14                	jmp    c0014e63 <SysRegistryReadExtent(regs*)+0x44>
c0014e4f:	83 ec 04             	sub    esp,0x4
c0014e52:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014e55:	50                   	push   eax
c0014e56:	51                   	push   ecx
c0014e57:	e8 bc 8b ff ff       	call   c000da18 <CmGetString(Reghive_Tag*, int, char*)>
c0014e5c:	83 c4 10             	add    esp,0x10
c0014e5f:	31 c0                	xor    eax,eax
c0014e61:	31 d2                	xor    edx,edx
c0014e63:	83 c4 1c             	add    esp,0x1c
c0014e66:	c3                   	ret    

c0014e67 <SysRegistryPathToExtentLookup(regs*)>:
c0014e67:	83 ec 14             	sub    esp,0x14
c0014e6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e6e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014e71:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e74:	e8 2f 96 ff ff       	call   c000e4a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014e79:	83 c4 1c             	add    esp,0x1c
c0014e7c:	99                   	cdq    
c0014e7d:	c3                   	ret    

c0014e7e <SysRegistryEnterDirectory(regs*)>:
c0014e7e:	83 ec 14             	sub    esp,0x14
c0014e81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e85:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014e88:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e8b:	e8 ff 8b ff ff       	call   c000da8f <CmEnterDirectory(Reghive_Tag*, int)>
c0014e90:	83 c4 1c             	add    esp,0x1c
c0014e93:	99                   	cdq    
c0014e94:	c3                   	ret    

c0014e95 <SysRegistryGetNext(regs*)>:
c0014e95:	83 ec 14             	sub    esp,0x14
c0014e98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e9c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014e9f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ea2:	e8 27 8c ff ff       	call   c000dace <CmGetNext(Reghive_Tag*, int)>
c0014ea7:	83 c4 1c             	add    esp,0x1c
c0014eaa:	99                   	cdq    
c0014eab:	c3                   	ret    

c0014eac <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014eac:	57                   	push   edi
c0014ead:	56                   	push   esi
c0014eae:	53                   	push   ebx
c0014eaf:	81 ec 34 01 00 00    	sub    esp,0x134
c0014eb5:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014ebc:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014ec0:	57                   	push   edi
c0014ec1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014ec4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014ec7:	e8 c0 91 ff ff       	call   c000e08c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014ecc:	89 c3                	mov    ebx,eax
c0014ece:	58                   	pop    eax
c0014ecf:	5a                   	pop    edx
c0014ed0:	57                   	push   edi
c0014ed1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014ed4:	e8 67 b7 fe ff       	call   c0000640 <strcpy>
c0014ed9:	89 d8                	mov    eax,ebx
c0014edb:	81 c4 40 01 00 00    	add    esp,0x140
c0014ee1:	99                   	cdq    
c0014ee2:	5b                   	pop    ebx
c0014ee3:	5e                   	pop    esi
c0014ee4:	5f                   	pop    edi
c0014ee5:	c3                   	ret    

c0014ee6 <SysRegistryOpen(regs*)>:
c0014ee6:	83 ec 18             	sub    esp,0x18
c0014ee9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014eed:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014ef0:	e8 b3 89 ff ff       	call   c000d8a8 <CmOpen(char const*)>
c0014ef5:	83 c4 1c             	add    esp,0x1c
c0014ef8:	99                   	cdq    
c0014ef9:	c3                   	ret    

c0014efa <SysRegistryClose(regs*)>:
c0014efa:	83 ec 18             	sub    esp,0x18
c0014efd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f01:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014f04:	e8 bd 8a ff ff       	call   c000d9c6 <CmClose(Reghive_Tag*)>
c0014f09:	31 c0                	xor    eax,eax
c0014f0b:	31 d2                	xor    edx,edx
c0014f0d:	83 c4 1c             	add    esp,0x1c
c0014f10:	c3                   	ret    

c0014f11 <SysRegistryEasyReadString(regs*)>:
c0014f11:	57                   	push   edi
c0014f12:	56                   	push   esi
c0014f13:	53                   	push   ebx
c0014f14:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f18:	83 ec 0c             	sub    esp,0xc
c0014f1b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014f1e:	e8 85 89 ff ff       	call   c000d8a8 <CmOpen(char const*)>
c0014f23:	5a                   	pop    edx
c0014f24:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014f27:	59                   	pop    ecx
c0014f28:	89 c3                	mov    ebx,eax
c0014f2a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014f2d:	50                   	push   eax
c0014f2e:	e8 75 95 ff ff       	call   c000e4a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014f33:	83 c4 10             	add    esp,0x10
c0014f36:	89 c1                	mov    ecx,eax
c0014f38:	b8 01 00 00 00       	mov    eax,0x1
c0014f3d:	85 c9                	test   ecx,ecx
c0014f3f:	7e 16                	jle    c0014f57 <SysRegistryEasyReadString(regs*)+0x46>
c0014f41:	50                   	push   eax
c0014f42:	57                   	push   edi
c0014f43:	51                   	push   ecx
c0014f44:	53                   	push   ebx
c0014f45:	e8 ce 8a ff ff       	call   c000da18 <CmGetString(Reghive_Tag*, int, char*)>
c0014f4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f4d:	e8 74 8a ff ff       	call   c000d9c6 <CmClose(Reghive_Tag*)>
c0014f52:	83 c4 10             	add    esp,0x10
c0014f55:	31 c0                	xor    eax,eax
c0014f57:	5b                   	pop    ebx
c0014f58:	31 d2                	xor    edx,edx
c0014f5a:	5e                   	pop    esi
c0014f5b:	5f                   	pop    edi
c0014f5c:	c3                   	ret    

c0014f5d <SysRegistryEasyReadInteger(regs*)>:
c0014f5d:	56                   	push   esi
c0014f5e:	53                   	push   ebx
c0014f5f:	83 ec 10             	sub    esp,0x10
c0014f62:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014f66:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014f69:	e8 3a 89 ff ff       	call   c000d8a8 <CmOpen(char const*)>
c0014f6e:	5a                   	pop    edx
c0014f6f:	89 c3                	mov    ebx,eax
c0014f71:	59                   	pop    ecx
c0014f72:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014f75:	50                   	push   eax
c0014f76:	e8 2d 95 ff ff       	call   c000e4a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014f7b:	83 c4 10             	add    esp,0x10
c0014f7e:	89 c1                	mov    ecx,eax
c0014f80:	b8 01 00 00 00       	mov    eax,0x1
c0014f85:	85 c9                	test   ecx,ecx
c0014f87:	7e 18                	jle    c0014fa1 <SysRegistryEasyReadInteger(regs*)+0x44>
c0014f89:	50                   	push   eax
c0014f8a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014f8d:	51                   	push   ecx
c0014f8e:	53                   	push   ebx
c0014f8f:	e8 ea 8f ff ff       	call   c000df7e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014f94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f97:	e8 2a 8a ff ff       	call   c000d9c6 <CmClose(Reghive_Tag*)>
c0014f9c:	83 c4 10             	add    esp,0x10
c0014f9f:	31 c0                	xor    eax,eax
c0014fa1:	59                   	pop    ecx
c0014fa2:	31 d2                	xor    edx,edx
c0014fa4:	5b                   	pop    ebx
c0014fa5:	5e                   	pop    esi
c0014fa6:	c3                   	ret    

c0014fa7 <SysSbrk(regs*)>:
c0014fa7:	56                   	push   esi
c0014fa8:	53                   	push   ebx
c0014fa9:	50                   	push   eax
c0014faa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014faf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014fb3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fb6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014fb9:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014fbf:	85 db                	test   ebx,ebx
c0014fc1:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014fc4:	74 02                	je     c0014fc8 <SysSbrk(regs*)+0x21>
c0014fc6:	79 06                	jns    c0014fce <SysSbrk(regs*)+0x27>
c0014fc8:	89 f0                	mov    eax,esi
c0014fca:	31 d2                	xor    edx,edx
c0014fcc:	eb 2a                	jmp    c0014ff8 <SysSbrk(regs*)+0x51>
c0014fce:	83 c8 ff             	or     eax,0xffffffff
c0014fd1:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014fd7:	89 c2                	mov    edx,eax
c0014fd9:	77 1d                	ja     c0014ff8 <SysSbrk(regs*)+0x51>
c0014fdb:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014fe1:	50                   	push   eax
c0014fe2:	c1 ea 0c             	shr    edx,0xc
c0014fe5:	68 07 0c 00 00       	push   0xc07
c0014fea:	52                   	push   edx
c0014feb:	51                   	push   ecx
c0014fec:	e8 1d ef ff ff       	call   c0013f0e <VAS::allocatePages(int, int)>
c0014ff1:	89 f0                	mov    eax,esi
c0014ff3:	31 d2                	xor    edx,edx
c0014ff5:	83 c4 10             	add    esp,0x10
c0014ff8:	59                   	pop    ecx
c0014ff9:	5b                   	pop    ebx
c0014ffa:	5e                   	pop    esi
c0014ffb:	c3                   	ret    

c0014ffc <SysSetCwd(regs*)>:
c0014ffc:	83 ec 14             	sub    esp,0x14
c0014fff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015003:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015006:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001500b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001500e:	e8 d0 39 ff ff       	call   c00089e3 <Fs::setcwd(Process*, char*)>
c0015013:	83 c4 1c             	add    esp,0x1c
c0015016:	99                   	cdq    
c0015017:	c3                   	ret    

c0015018 <SysSetTime(regs*)>:
c0015018:	55                   	push   ebp
c0015019:	31 d2                	xor    edx,edx
c001501b:	57                   	push   edi
c001501c:	56                   	push   esi
c001501d:	be 18 00 00 00       	mov    esi,0x18
c0015022:	53                   	push   ebx
c0015023:	bb 3c 00 00 00       	mov    ebx,0x3c
c0015028:	83 ec 20             	sub    esp,0x20
c001502b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001502f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015032:	f7 f3                	div    ebx
c0015034:	89 d7                	mov    edi,edx
c0015036:	31 d2                	xor    edx,edx
c0015038:	f7 f3                	div    ebx
c001503a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001503d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015041:	bb 10 0e 00 00       	mov    ebx,0xe10
c0015046:	31 d2                	xor    edx,edx
c0015048:	f7 f3                	div    ebx
c001504a:	31 d2                	xor    edx,edx
c001504c:	f7 f6                	div    esi
c001504e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0015051:	89 d5                	mov    ebp,edx
c0015053:	89 c3                	mov    ebx,eax
c0015055:	be 0c 00 00 00       	mov    esi,0xc
c001505a:	83 e3 1f             	and    ebx,0x1f
c001505d:	c1 e8 05             	shr    eax,0x5
c0015060:	43                   	inc    ebx
c0015061:	31 d2                	xor    edx,edx
c0015063:	f7 f6                	div    esi
c0015065:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015069:	57                   	push   edi
c001506a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001506e:	55                   	push   ebp
c001506f:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0015073:	56                   	push   esi
c0015074:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015078:	53                   	push   ebx
c0015079:	68 49 99 02 c0       	push   0xc0029949
c001507e:	e8 f9 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015083:	83 c4 1c             	add    esp,0x1c
c0015086:	57                   	push   edi
c0015087:	c1 e7 10             	shl    edi,0x10
c001508a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001508e:	55                   	push   ebp
c001508f:	56                   	push   esi
c0015090:	c1 e6 10             	shl    esi,0x10
c0015093:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015097:	53                   	push   ebx
c0015098:	68 6b 99 02 c0       	push   0xc002996b
c001509d:	e8 da 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00150a2:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00150a7:	31 d2                	xor    edx,edx
c00150a9:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
c00150af:	31 c0                	xor    eax,eax
c00150b1:	88 d8                	mov    al,bl
c00150b3:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c00150b7:	0f b7 d8             	movzx  ebx,ax
c00150ba:	09 f3                	or     ebx,esi
c00150bc:	89 d8                	mov    eax,ebx
c00150be:	89 eb                	mov    ebx,ebp
c00150c0:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c00150c4:	88 da                	mov    dl,bl
c00150c6:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c00150ca:	83 c4 1c             	add    esp,0x1c
c00150cd:	89 d6                	mov    esi,edx
c00150cf:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c00150d5:	09 fe                	or     esi,edi
c00150d7:	56                   	push   esi
c00150d8:	50                   	push   eax
c00150d9:	51                   	push   ecx
c00150da:	e8 75 49 ff ff       	call   c0009a54 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00150df:	83 c4 2c             	add    esp,0x2c
c00150e2:	83 f0 01             	xor    eax,0x1
c00150e5:	5b                   	pop    ebx
c00150e6:	0f b6 c0             	movzx  eax,al
c00150e9:	5e                   	pop    esi
c00150ea:	31 d2                	xor    edx,edx
c00150ec:	5f                   	pop    edi
c00150ed:	5d                   	pop    ebp
c00150ee:	c3                   	ret    

c00150ef <SysSymlink(regs*)>:
c00150ef:	56                   	push   esi
c00150f0:	83 c8 ff             	or     eax,0xffffffff
c00150f3:	53                   	push   ebx
c00150f4:	89 c2                	mov    edx,eax
c00150f6:	81 ec 34 02 00 00    	sub    esp,0x234
c00150fc:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0015103:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015107:	74 50                	je     c0015159 <SysSymlink(regs*)+0x6a>
c0015109:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001510c:	85 c9                	test   ecx,ecx
c001510e:	74 49                	je     c0015159 <SysSymlink(regs*)+0x6a>
c0015110:	6a 01                	push   0x1
c0015112:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015117:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001511a:	05 0c 01 00 00       	add    eax,0x10c
c001511f:	50                   	push   eax
c0015120:	51                   	push   ecx
c0015121:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015125:	56                   	push   esi
c0015126:	e8 1f 32 ff ff       	call   c000834a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001512b:	6a 01                	push   0x1
c001512d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015132:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015135:	05 0c 01 00 00       	add    eax,0x10c
c001513a:	50                   	push   eax
c001513b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001513e:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0015145:	53                   	push   ebx
c0015146:	e8 ff 31 ff ff       	call   c000834a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001514b:	83 c4 18             	add    esp,0x18
c001514e:	56                   	push   esi
c001514f:	53                   	push   ebx
c0015150:	e8 23 2e ff ff       	call   c0007f78 <KeCreateSymlink(char const*, char const*)>
c0015155:	83 c4 10             	add    esp,0x10
c0015158:	99                   	cdq    
c0015159:	81 c4 34 02 00 00    	add    esp,0x234
c001515f:	5b                   	pop    ebx
c0015160:	5e                   	pop    esi
c0015161:	c3                   	ret    

c0015162 <SysTimezone(regs*)>:
c0015162:	83 ec 0c             	sub    esp,0xc
c0015165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015169:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001516d:	75 17                	jne    c0015186 <SysTimezone(regs*)+0x24>
c001516f:	83 ec 0c             	sub    esp,0xc
c0015172:	68 8d 99 02 c0       	push   0xc002998d
c0015177:	e8 00 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001517c:	83 c8 ff             	or     eax,0xffffffff
c001517f:	83 c4 10             	add    esp,0x10
c0015182:	89 c2                	mov    edx,eax
c0015184:	eb 16                	jmp    c001519c <SysTimezone(regs*)+0x3a>
c0015186:	83 ec 0c             	sub    esp,0xc
c0015189:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001518c:	e8 50 43 ff ff       	call   c00094e1 <KeSetTimezone(int)>
c0015191:	31 d2                	xor    edx,edx
c0015193:	83 f0 01             	xor    eax,0x1
c0015196:	83 c4 10             	add    esp,0x10
c0015199:	0f b6 c0             	movzx  eax,al
c001519c:	83 c4 0c             	add    esp,0xc
c001519f:	c3                   	ret    

c00151a0 <SysTruncate(regs*)>:
c00151a0:	55                   	push   ebp
c00151a1:	57                   	push   edi
c00151a2:	31 ff                	xor    edi,edi
c00151a4:	56                   	push   esi
c00151a5:	53                   	push   ebx
c00151a6:	83 ec 0c             	sub    esp,0xc
c00151a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151ad:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00151b0:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00151b3:	89 ce                	mov    esi,ecx
c00151b5:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00151b9:	0f 84 9a 00 00 00    	je     c0015259 <SysTruncate(regs*)+0xb9>
c00151bf:	83 ec 0c             	sub    esp,0xc
c00151c2:	68 14 01 00 00       	push   0x114
c00151c7:	e8 6f ab ff ff       	call   c000fd3b <malloc>
c00151cc:	83 c4 0c             	add    esp,0xc
c00151cf:	89 c3                	mov    ebx,eax
c00151d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151d6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00151d9:	55                   	push   ebp
c00151da:	53                   	push   ebx
c00151db:	e8 82 34 ff ff       	call   c0008662 <File::File(char const*, Process*)>
c00151e0:	83 c4 10             	add    esp,0x10
c00151e3:	31 d2                	xor    edx,edx
c00151e5:	b8 03 00 00 00       	mov    eax,0x3
c00151ea:	85 db                	test   ebx,ebx
c00151ec:	0f 84 a2 00 00 00    	je     c0015294 <SysTruncate(regs*)+0xf4>
c00151f2:	51                   	push   ecx
c00151f3:	51                   	push   ecx
c00151f4:	6a 02                	push   0x2
c00151f6:	53                   	push   ebx
c00151f7:	e8 84 34 ff ff       	call   c0008680 <File::open(FileOpenMode)>
c00151fc:	83 c4 10             	add    esp,0x10
c00151ff:	85 c0                	test   eax,eax
c0015201:	74 13                	je     c0015216 <SysTruncate(regs*)+0x76>
c0015203:	83 ec 0c             	sub    esp,0xc
c0015206:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015208:	53                   	push   ebx
c0015209:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	b8 04 00 00 00       	mov    eax,0x4
c0015214:	eb 7c                	jmp    c0015292 <SysTruncate(regs*)+0xf2>
c0015216:	52                   	push   edx
c0015217:	57                   	push   edi
c0015218:	56                   	push   esi
c0015219:	53                   	push   ebx
c001521a:	e8 75 35 ff ff       	call   c0008794 <File::truncate(unsigned long long)>
c001521f:	83 c4 10             	add    esp,0x10
c0015222:	85 c0                	test   eax,eax
c0015224:	74 1b                	je     c0015241 <SysTruncate(regs*)+0xa1>
c0015226:	83 ec 0c             	sub    esp,0xc
c0015229:	53                   	push   ebx
c001522a:	e8 af 34 ff ff       	call   c00086de <File::close()>
c001522f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015231:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015234:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015237:	83 c4 10             	add    esp,0x10
c001523a:	b8 05 00 00 00       	mov    eax,0x5
c001523f:	eb 51                	jmp    c0015292 <SysTruncate(regs*)+0xf2>
c0015241:	83 ec 0c             	sub    esp,0xc
c0015244:	53                   	push   ebx
c0015245:	e8 94 34 ff ff       	call   c00086de <File::close()>
c001524a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001524c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001524f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015252:	83 c4 10             	add    esp,0x10
c0015255:	31 c0                	xor    eax,eax
c0015257:	eb 39                	jmp    c0015292 <SysTruncate(regs*)+0xf2>
c0015259:	31 d2                	xor    edx,edx
c001525b:	b8 01 00 00 00       	mov    eax,0x1
c0015260:	83 fd 02             	cmp    ebp,0x2
c0015263:	7e 2f                	jle    c0015294 <SysTruncate(regs*)+0xf4>
c0015265:	83 ec 0c             	sub    esp,0xc
c0015268:	51                   	push   ecx
c0015269:	e8 5b e3 ff ff       	call   c00135c9 <KeGetFileFromDescriptor(int)>
c001526e:	83 c4 10             	add    esp,0x10
c0015271:	89 c1                	mov    ecx,eax
c0015273:	31 d2                	xor    edx,edx
c0015275:	b8 02 00 00 00       	mov    eax,0x2
c001527a:	85 c9                	test   ecx,ecx
c001527c:	74 16                	je     c0015294 <SysTruncate(regs*)+0xf4>
c001527e:	50                   	push   eax
c001527f:	57                   	push   edi
c0015280:	56                   	push   esi
c0015281:	51                   	push   ecx
c0015282:	e8 0d 35 ff ff       	call   c0008794 <File::truncate(unsigned long long)>
c0015287:	83 c4 10             	add    esp,0x10
c001528a:	85 c0                	test   eax,eax
c001528c:	0f 95 c0             	setne  al
c001528f:	0f b6 c0             	movzx  eax,al
c0015292:	31 d2                	xor    edx,edx
c0015294:	83 c4 0c             	add    esp,0xc
c0015297:	5b                   	pop    ebx
c0015298:	5e                   	pop    esi
c0015299:	5f                   	pop    edi
c001529a:	5d                   	pop    ebp
c001529b:	c3                   	ret    

c001529c <SysWrite(regs*)>:
c001529c:	57                   	push   edi
c001529d:	56                   	push   esi
c001529e:	53                   	push   ebx
c001529f:	83 ec 10             	sub    esp,0x10
c00152a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00152a6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00152a9:	83 f8 02             	cmp    eax,0x2
c00152ac:	77 10                	ja     c00152be <SysWrite(regs*)+0x22>
c00152ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152b6:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c00152bc:	eb 0e                	jmp    c00152cc <SysWrite(regs*)+0x30>
c00152be:	83 ec 0c             	sub    esp,0xc
c00152c1:	50                   	push   eax
c00152c2:	e8 02 e3 ff ff       	call   c00135c9 <KeGetFileFromDescriptor(int)>
c00152c7:	83 c4 10             	add    esp,0x10
c00152ca:	89 c1                	mov    ecx,eax
c00152cc:	83 c8 ff             	or     eax,0xffffffff
c00152cf:	85 c9                	test   ecx,ecx
c00152d1:	89 c2                	mov    edx,eax
c00152d3:	74 28                	je     c00152fd <SysWrite(regs*)+0x61>
c00152d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00152dd:	31 ff                	xor    edi,edi
c00152df:	83 ec 0c             	sub    esp,0xc
c00152e2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00152e4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00152e8:	52                   	push   edx
c00152e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00152ec:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00152ef:	57                   	push   edi
c00152f0:	56                   	push   esi
c00152f1:	51                   	push   ecx
c00152f2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00152f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00152f9:	83 c4 20             	add    esp,0x20
c00152fc:	99                   	cdq    
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	5b                   	pop    ebx
c0015301:	5e                   	pop    esi
c0015302:	5f                   	pop    edi
c0015303:	c3                   	ret    

c0015304 <SysWsbe(regs*)>:
c0015304:	55                   	push   ebp
c0015305:	57                   	push   edi
c0015306:	56                   	push   esi
c0015307:	53                   	push   ebx
c0015308:	83 ec 3c             	sub    esp,0x3c
c001530b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001530f:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0015316:	75 2d                	jne    c0015345 <SysWsbe(regs*)+0x41>
c0015318:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c001531f:	75 24                	jne    c0015345 <SysWsbe(regs*)+0x41>
c0015321:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0015328:	75 1b                	jne    c0015345 <SysWsbe(regs*)+0x41>
c001532a:	6a 01                	push   0x1
c001532c:	6a 00                	push   0x0
c001532e:	68 36 a4 00 c0       	push   0xc000a436
c0015333:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0015339:	e8 1e 17 00 00       	call   c0016a5c <Process::createThread(void (*)(void*), void*, int)>
c001533e:	83 c4 10             	add    esp,0x10
c0015341:	31 c0                	xor    eax,eax
c0015343:	eb 52                	jmp    c0015397 <SysWsbe(regs*)+0x93>
c0015345:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015349:	be a2 99 02 c0       	mov    esi,0xc00299a2
c001534e:	b9 0b 00 00 00       	mov    ecx,0xb
c0015353:	fc                   	cld    
c0015354:	83 ec 0c             	sub    esp,0xc
c0015357:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015359:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001535d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015362:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015365:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c001536b:	8b 06                	mov    eax,DWORD PTR [esi]
c001536d:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0015370:	57                   	push   edi
c0015371:	e8 fa b1 fe ff       	call   c0000570 <strlen>
c0015376:	5a                   	pop    edx
c0015377:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001537b:	52                   	push   edx
c001537c:	31 d2                	xor    edx,edx
c001537e:	57                   	push   edi
c001537f:	52                   	push   edx
c0015380:	50                   	push   eax
c0015381:	56                   	push   esi
c0015382:	ff d5                	call   ebp
c0015384:	83 c4 14             	add    esp,0x14
c0015387:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001538a:	e8 99 21 00 00       	call   c0017528 <KeTerminateCurrentThread(int)>
c001538f:	83 c4 10             	add    esp,0x10
c0015392:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015397:	83 c4 3c             	add    esp,0x3c
c001539a:	31 d2                	xor    edx,edx
c001539c:	5b                   	pop    ebx
c001539d:	5e                   	pop    esi
c001539e:	5f                   	pop    edi
c001539f:	5d                   	pop    ebp
c00153a0:	c3                   	ret    

c00153a1 <SysYield(regs*)>:
c00153a1:	83 ec 0c             	sub    esp,0xc
c00153a4:	fa                   	cli    
c00153a5:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c00153ab:	e8 78 19 00 00       	call   c0016d28 <schedule()>
c00153b0:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c00153b7:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c00153be:	75 01                	jne    c00153c1 <SysYield(regs*)+0x20>
c00153c0:	fb                   	sti    
c00153c1:	31 c0                	xor    eax,eax
c00153c3:	31 d2                	xor    edx,edx
c00153c5:	83 c4 0c             	add    esp,0xc
c00153c8:	c3                   	ret    
c00153c9:	66 90                	xchg   ax,ax
c00153cb:	90                   	nop

c00153cc <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c00153cc:	55                   	push   ebp
c00153cd:	57                   	push   edi
c00153ce:	56                   	push   esi
c00153cf:	53                   	push   ebx
c00153d0:	83 ec 2c             	sub    esp,0x2c
c00153d3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00153d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00153db:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00153df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00153e3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00153e7:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c00153ea:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c00153ee:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c00153f2:	c1 e0 08             	shl    eax,0x8
c00153f5:	09 c1                	or     ecx,eax
c00153f7:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c00153fb:	c1 e0 10             	shl    eax,0x10
c00153fe:	09 c1                	or     ecx,eax
c0015400:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015404:	83 e0 7f             	and    eax,0x7f
c0015407:	c1 e0 18             	shl    eax,0x18
c001540a:	09 c8                	or     eax,ecx
c001540c:	89 c5                	mov    ebp,eax
c001540e:	89 f8                	mov    eax,edi
c0015410:	80 f4 00             	xor    ah,0x0
c0015413:	89 c3                	mov    ebx,eax
c0015415:	89 e8                	mov    eax,ebp
c0015417:	80 f4 00             	xor    ah,0x0
c001541a:	89 c6                	mov    esi,eax
c001541c:	89 f0                	mov    eax,esi
c001541e:	09 d8                	or     eax,ebx
c0015420:	74 42                	je     c0015464 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0015422:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015426:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0015429:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c001542d:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015431:	c1 e0 08             	shl    eax,0x8
c0015434:	09 c6                	or     esi,eax
c0015436:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c001543a:	c1 e0 10             	shl    eax,0x10
c001543d:	09 c6                	or     esi,eax
c001543f:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015443:	83 e0 7f             	and    eax,0x7f
c0015446:	c1 e0 18             	shl    eax,0x18
c0015449:	09 f0                	or     eax,esi
c001544b:	89 c3                	mov    ebx,eax
c001544d:	a1 50 2b 03 c0       	mov    eax,ds:0xc0032b50
c0015452:	8b 15 54 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032b54
c0015458:	29 c1                	sub    ecx,eax
c001545a:	19 d3                	sbb    ebx,edx
c001545c:	89 c8                	mov    eax,ecx
c001545e:	89 da                	mov    edx,ebx
c0015460:	eb 0e                	jmp    c0015470 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0015462:	66 90                	xchg   ax,ax
c0015464:	b8 00 00 00 00       	mov    eax,0x0
c0015469:	ba 00 00 00 00       	mov    edx,0x0
c001546e:	66 90                	xchg   ax,ax
c0015470:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015474:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001547c:	80 f4 00             	xor    ah,0x0
c001547f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015483:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015487:	80 f4 00             	xor    ah,0x0
c001548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001548e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015492:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0015496:	89 e8                	mov    eax,ebp
c0015498:	09 f8                	or     eax,edi
c001549a:	74 30                	je     c00154cc <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c001549c:	8b 0d 50 2b 03 c0    	mov    ecx,DWORD PTR ds:0xc0032b50
c00154a2:	8b 1d 54 2b 03 c0    	mov    ebx,DWORD PTR ds:0xc0032b54
c00154a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00154b0:	01 c8                	add    eax,ecx
c00154b2:	11 da                	adc    edx,ebx
c00154b4:	89 c6                	mov    esi,eax
c00154b6:	83 e6 ff             	and    esi,0xffffffff
c00154b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00154bc:	89 d0                	mov    eax,edx
c00154be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00154c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154c7:	eb 13                	jmp    c00154dc <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c00154c9:	8d 76 00             	lea    esi,[esi+0x0]
c00154cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00154d3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00154db:	90                   	nop
c00154dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154e0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00154e3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00154e7:	89 cf                	mov    edi,ecx
c00154e9:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c00154ec:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00154ef:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00154f3:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00154f8:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c00154fb:	83 e1 00             	and    ecx,0x0
c00154fe:	09 ca                	or     edx,ecx
c0015500:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015503:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015507:	c1 ea 08             	shr    edx,0x8
c001550a:	0f b6 d2             	movzx  edx,dl
c001550d:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c0015510:	83 e1 00             	and    ecx,0x0
c0015513:	09 ca                	or     edx,ecx
c0015515:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015518:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001551c:	c1 ea 10             	shr    edx,0x10
c001551f:	0f b6 d2             	movzx  edx,dl
c0015522:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c0015525:	83 e1 00             	and    ecx,0x0
c0015528:	09 ca                	or     edx,ecx
c001552a:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c001552d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015531:	c1 ea 18             	shr    edx,0x18
c0015534:	83 e2 7f             	and    edx,0x7f
c0015537:	89 d3                	mov    ebx,edx
c0015539:	83 e3 7f             	and    ebx,0x7f
c001553c:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c001553f:	83 e2 80             	and    edx,0xffffff80
c0015542:	88 d1                	mov    cl,dl
c0015544:	88 da                	mov    dl,bl
c0015546:	09 ca                	or     edx,ecx
c0015548:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001554b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001554f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015553:	83 c4 2c             	add    esp,0x2c
c0015556:	5b                   	pop    ebx
c0015557:	5e                   	pop    esi
c0015558:	5f                   	pop    edi
c0015559:	5d                   	pop    ebp
c001555a:	c3                   	ret    
c001555b:	90                   	nop

c001555c <KeCheckAlarm(ThreadControlBlock*)>:
c001555c:	55                   	push   ebp
c001555d:	57                   	push   edi
c001555e:	56                   	push   esi
c001555f:	53                   	push   ebx
c0015560:	83 ec 0c             	sub    esp,0xc
c0015563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015567:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c001556a:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c001556e:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c0015572:	c1 e5 08             	shl    ebp,0x8
c0015575:	09 fd                	or     ebp,edi
c0015577:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c001557b:	c1 e7 10             	shl    edi,0x10
c001557e:	09 ef                	or     edi,ebp
c0015580:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0015584:	83 e0 7f             	and    eax,0x7f
c0015587:	c1 e0 18             	shl    eax,0x18
c001558a:	09 f8                	or     eax,edi
c001558c:	89 c1                	mov    ecx,eax
c001558e:	89 d0                	mov    eax,edx
c0015590:	80 f4 00             	xor    ah,0x0
c0015593:	89 c3                	mov    ebx,eax
c0015595:	89 c8                	mov    eax,ecx
c0015597:	80 f4 00             	xor    ah,0x0
c001559a:	89 c6                	mov    esi,eax
c001559c:	89 f0                	mov    eax,esi
c001559e:	09 d8                	or     eax,ebx
c00155a0:	0f 84 9e 00 00 00    	je     c0015644 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00155a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00155aa:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c00155ad:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c00155b1:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c00155b5:	c1 e6 08             	shl    esi,0x8
c00155b8:	09 de                	or     esi,ebx
c00155ba:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c00155be:	c1 e3 10             	shl    ebx,0x10
c00155c1:	09 f3                	or     ebx,esi
c00155c3:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c00155c7:	83 e1 7f             	and    ecx,0x7f
c00155ca:	c1 e1 18             	shl    ecx,0x18
c00155cd:	09 d9                	or     ecx,ebx
c00155cf:	89 ca                	mov    edx,ecx
c00155d1:	89 c1                	mov    ecx,eax
c00155d3:	89 d3                	mov    ebx,edx
c00155d5:	a1 50 2b 03 c0       	mov    eax,ds:0xc0032b50
c00155da:	8b 15 54 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032b54
c00155e0:	39 c8                	cmp    eax,ecx
c00155e2:	89 d0                	mov    eax,edx
c00155e4:	19 d8                	sbb    eax,ebx
c00155e6:	72 5c                	jb     c0015644 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00155e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155ec:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c00155f3:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c00155f6:	83 e2 00             	and    edx,0x0
c00155f9:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c00155fc:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c00155ff:	83 e2 00             	and    edx,0x0
c0015602:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015605:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015608:	83 e2 00             	and    edx,0x0
c001560b:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c001560e:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015611:	83 e2 80             	and    edx,0xffffff80
c0015614:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015617:	83 ec 0c             	sub    esp,0xc
c001561a:	68 ce 99 02 c0       	push   0xc00299ce
c001561f:	e8 58 19 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015624:	83 c4 10             	add    esp,0x10
c0015627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001562b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001562e:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015634:	83 ec 08             	sub    esp,0x8
c0015637:	6a 0e                	push   0xe
c0015639:	50                   	push   eax
c001563a:	e8 6c bd ff ff       	call   c00113ab <KeRaiseSignal(SigHandlerBlock*, int)>
c001563f:	83 c4 10             	add    esp,0x10
c0015642:	66 90                	xchg   ax,ax
c0015644:	90                   	nop
c0015645:	83 c4 0c             	add    esp,0xc
c0015648:	5b                   	pop    ebx
c0015649:	5e                   	pop    esi
c001564a:	5f                   	pop    edi
c001564b:	5d                   	pop    ebp
c001564c:	c3                   	ret    

c001564d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001564d:	55                   	push   ebp
c001564e:	57                   	push   edi
c001564f:	56                   	push   esi
c0015650:	53                   	push   ebx
c0015651:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015657:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001565f:	0f 95 c0             	setne  al
c0015662:	31 d2                	xor    edx,edx
c0015664:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001566c:	0f 94 c2             	sete   dl
c001566f:	85 c2                	test   edx,eax
c0015671:	74 34                	je     c00156a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015673:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001567e:	74 27                	je     c00156a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015680:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015687:	05 00 10 00 00       	add    eax,0x1000
c001568c:	89 c1                	mov    ecx,eax
c001568e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015693:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0015699:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00156a0:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00156a7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00156ae:	83 ec 0c             	sub    esp,0xc
c00156b1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00156b7:	6a 01                	push   0x1
c00156b9:	e8 69 e0 ff ff       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c00156be:	83 c4 10             	add    esp,0x10
c00156c1:	89 c3                	mov    ebx,eax
c00156c3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00156c9:	0f 86 26 01 00 00    	jbe    c00157f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00156cf:	c1 ee 0c             	shr    esi,0xc
c00156d2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00156d9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00156dd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00156e5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00156ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00156f0:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00156f7:	29 ef                	sub    edi,ebp
c00156f9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00156fd:	0f 83 f9 00 00 00    	jae    c00157fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0015703:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015709:	76 05                	jbe    c0015710 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001570b:	bf 00 10 00 00       	mov    edi,0x1000
c0015710:	83 ec 0c             	sub    esp,0xc
c0015713:	31 d2                	xor    edx,edx
c0015715:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001571c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001571e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015722:	50                   	push   eax
c0015723:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015727:	56                   	push   esi
c0015728:	52                   	push   edx
c0015729:	57                   	push   edi
c001572a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015731:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015734:	83 c4 20             	add    esp,0x20
c0015737:	85 c0                	test   eax,eax
c0015739:	75 06                	jne    c0015741 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001573b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001573f:	74 13                	je     c0015754 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015741:	83 ec 0c             	sub    esp,0xc
c0015744:	53                   	push   ebx
c0015745:	e8 e5 e2 ff ff       	call   c0013a2f <Virt::freeKernelVirtualPages(unsigned long)>
c001574a:	83 c4 10             	add    esp,0x10
c001574d:	31 c0                	xor    eax,eax
c001574f:	e9 80 01 00 00       	jmp    c00158d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0015754:	fa                   	cli    
c0015755:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c001575b:	e8 24 ac ff ff       	call   c0010384 <Phys::allocatePage()>
c0015760:	6a 07                	push   0x7
c0015762:	89 c7                	mov    edi,eax
c0015764:	53                   	push   ebx
c0015765:	50                   	push   eax
c0015766:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001576b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001576e:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015774:	e8 91 e6 ff ff       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015779:	83 c4 0c             	add    esp,0xc
c001577c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015783:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015789:	6a 00                	push   0x0
c001578b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015790:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015793:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015799:	e8 d8 e4 ff ff       	call   c0013c76 <VAS::mapOtherVASIn(bool, VAS*)>
c001579e:	58                   	pop    eax
c001579f:	5a                   	pop    edx
c00157a0:	68 07 0c 00 00       	push   0xc07
c00157a5:	55                   	push   ebp
c00157a6:	57                   	push   edi
c00157a7:	89 df                	mov    edi,ebx
c00157a9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00157b0:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00157b6:	6a 00                	push   0x0
c00157b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157c0:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00157c6:	e8 81 e8 ff ff       	call   c001404c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00157cb:	b9 00 10 00 00       	mov    ecx,0x1000
c00157d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00157d2:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c00157d9:	83 c4 20             	add    esp,0x20
c00157dc:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c00157e3:	75 01                	jne    c00157e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c00157e5:	fb                   	sti    
c00157e6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00157ec:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00157f0:	e9 f0 fe ff ff       	jmp    c00156e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00157f5:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00157fc:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015803:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015809:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001580f:	0f 86 b1 00 00 00    	jbe    c00158c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015815:	fa                   	cli    
c0015816:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c001581c:	c1 ee 0c             	shr    esi,0xc
c001581f:	51                   	push   ecx
c0015820:	31 ff                	xor    edi,edi
c0015822:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015829:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001582f:	6a 00                	push   0x0
c0015831:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015836:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015839:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001583f:	e8 32 e4 ff ff       	call   c0013c76 <VAS::mapOtherVASIn(bool, VAS*)>
c0015844:	83 c4 10             	add    esp,0x10
c0015847:	e8 38 ab ff ff       	call   c0010384 <Phys::allocatePage()>
c001584c:	47                   	inc    edi
c001584d:	6a 07                	push   0x7
c001584f:	53                   	push   ebx
c0015850:	50                   	push   eax
c0015851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015855:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001585b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001585e:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015864:	e8 a1 e5 ff ff       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015869:	58                   	pop    eax
c001586a:	5a                   	pop    edx
c001586b:	68 07 0c 00 00       	push   0xc07
c0015870:	55                   	push   ebp
c0015871:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015877:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001587b:	50                   	push   eax
c001587c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015883:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015889:	6a 00                	push   0x0
c001588b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015890:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015893:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015899:	e8 ae e7 ff ff       	call   c001404c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001589e:	83 c4 1c             	add    esp,0x1c
c00158a1:	68 00 10 00 00       	push   0x1000
c00158a6:	6a 00                	push   0x0
c00158a8:	53                   	push   ebx
c00158a9:	e8 42 ac fe ff       	call   c00004f0 <memset>
c00158ae:	83 c4 10             	add    esp,0x10
c00158b1:	39 fe                	cmp    esi,edi
c00158b3:	77 92                	ja     c0015847 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c00158b5:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c00158bc:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c00158c3:	75 01                	jne    c00158c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00158c5:	fb                   	sti    
c00158c6:	83 ec 0c             	sub    esp,0xc
c00158c9:	53                   	push   ebx
c00158ca:	e8 60 e1 ff ff       	call   c0013a2f <Virt::freeKernelVirtualPages(unsigned long)>
c00158cf:	83 c4 10             	add    esp,0x10
c00158d2:	b0 01                	mov    al,0x1
c00158d4:	81 c4 2c 10 00 00    	add    esp,0x102c
c00158da:	5b                   	pop    ebx
c00158db:	5e                   	pop    esi
c00158dc:	5f                   	pop    edi
c00158dd:	5d                   	pop    ebp
c00158de:	c3                   	ret    

c00158df <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00158df:	55                   	push   ebp
c00158e0:	57                   	push   edi
c00158e1:	56                   	push   esi
c00158e2:	53                   	push   ebx
c00158e3:	83 ec 68             	sub    esp,0x68
c00158e6:	68 14 01 00 00       	push   0x114
c00158eb:	e8 4b a4 ff ff       	call   c000fd3b <malloc>
c00158f0:	83 c4 0c             	add    esp,0xc
c00158f3:	89 c6                	mov    esi,eax
c00158f5:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00158f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00158fd:	50                   	push   eax
c00158fe:	e8 5f 2d ff ff       	call   c0008662 <File::File(char const*, Process*)>
c0015903:	5b                   	pop    ebx
c0015904:	5f                   	pop    edi
c0015905:	6a 01                	push   0x1
c0015907:	56                   	push   esi
c0015908:	e8 73 2d ff ff       	call   c0008680 <File::open(FileOpenMode)>
c001590d:	83 c4 10             	add    esp,0x10
c0015910:	85 c0                	test   eax,eax
c0015912:	0f 85 c6 01 00 00    	jne    c0015ade <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015918:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015920:	83 ec 0c             	sub    esp,0xc
c0015923:	6a 34                	push   0x34
c0015925:	e8 11 a4 ff ff       	call   c000fd3b <malloc>
c001592a:	59                   	pop    ecx
c001592b:	89 c3                	mov    ebx,eax
c001592d:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0015931:	8b 06                	mov    eax,DWORD PTR [esi]
c0015933:	57                   	push   edi
c0015934:	53                   	push   ebx
c0015935:	6a 00                	push   0x0
c0015937:	6a 34                	push   0x34
c0015939:	56                   	push   esi
c001593a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001593d:	83 c4 20             	add    esp,0x20
c0015940:	85 c0                	test   eax,eax
c0015942:	0f 85 96 01 00 00    	jne    c0015ade <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015948:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001594e:	0f 85 8a 01 00 00    	jne    c0015ade <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015954:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015957:	85 c0                	test   eax,eax
c0015959:	0f 84 7f 01 00 00    	je     c0015ade <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001595f:	52                   	push   edx
c0015960:	31 d2                	xor    edx,edx
c0015962:	52                   	push   edx
c0015963:	50                   	push   eax
c0015964:	56                   	push   esi
c0015965:	e8 d4 2d ff ff       	call   c000873e <File::seek(unsigned long long)>
c001596a:	83 c4 10             	add    esp,0x10
c001596d:	85 c0                	test   eax,eax
c001596f:	0f 85 69 01 00 00    	jne    c0015ade <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015975:	83 ec 0c             	sub    esp,0xc
c0015978:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001597b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001597f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015983:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015987:	0f af c2             	imul   eax,edx
c001598a:	50                   	push   eax
c001598b:	e8 ab a3 ff ff       	call   c000fd3b <malloc>
c0015990:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015992:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015996:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015999:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001599d:	31 ff                	xor    edi,edi
c001599f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00159a3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00159a7:	0f af c2             	imul   eax,edx
c00159aa:	99                   	cdq    
c00159ab:	52                   	push   edx
c00159ac:	50                   	push   eax
c00159ad:	56                   	push   esi
c00159ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00159b1:	83 c4 20             	add    esp,0x20
c00159b4:	0f b7 c7             	movzx  eax,di
c00159b7:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c00159bb:	73 71                	jae    c0015a2e <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00159bd:	6b c0 28             	imul   eax,eax,0x28
c00159c0:	55                   	push   ebp
c00159c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00159c5:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c00159c9:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00159cc:	6b d2 28             	imul   edx,edx,0x28
c00159cf:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00159d3:	31 d2                	xor    edx,edx
c00159d5:	52                   	push   edx
c00159d6:	50                   	push   eax
c00159d7:	56                   	push   esi
c00159d8:	e8 61 2d ff ff       	call   c000873e <File::seek(unsigned long long)>
c00159dd:	83 c4 0c             	add    esp,0xc
c00159e0:	6a 20                	push   0x20
c00159e2:	6a 00                	push   0x0
c00159e4:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c00159e8:	55                   	push   ebp
c00159e9:	e8 02 ab fe ff       	call   c00004f0 <memset>
c00159ee:	58                   	pop    eax
c00159ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00159f1:	8d 54 24 38          	lea    edx,[esp+0x38]
c00159f5:	52                   	push   edx
c00159f6:	55                   	push   ebp
c00159f7:	6a 00                	push   0x0
c00159f9:	6a 1f                	push   0x1f
c00159fb:	56                   	push   esi
c00159fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00159ff:	83 c4 18             	add    esp,0x18
c0015a02:	55                   	push   ebp
c0015a03:	68 df 99 02 c0       	push   0xc00299df
c0015a08:	e8 43 ad fe ff       	call   c0000750 <strcmp>
c0015a0d:	83 c4 10             	add    esp,0x10
c0015a10:	85 c0                	test   eax,eax
c0015a12:	75 17                	jne    c0015a2b <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015a14:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015a18:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015a1c:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015a22:	83 c8 80             	or     eax,0xffffff80
c0015a25:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c0015a2b:	47                   	inc    edi
c0015a2c:	eb 86                	jmp    c00159b4 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015a2e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015a31:	85 c0                	test   eax,eax
c0015a33:	0f 84 a5 00 00 00    	je     c0015ade <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015a39:	31 d2                	xor    edx,edx
c0015a3b:	57                   	push   edi
c0015a3c:	52                   	push   edx
c0015a3d:	50                   	push   eax
c0015a3e:	56                   	push   esi
c0015a3f:	e8 fa 2c ff ff       	call   c000873e <File::seek(unsigned long long)>
c0015a44:	83 c4 10             	add    esp,0x10
c0015a47:	85 c0                	test   eax,eax
c0015a49:	0f 85 8f 00 00 00    	jne    c0015ade <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015a4f:	83 ec 0c             	sub    esp,0xc
c0015a52:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015a56:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015a5a:	31 ed                	xor    ebp,ebp
c0015a5c:	0f af c2             	imul   eax,edx
c0015a5f:	50                   	push   eax
c0015a60:	e8 d6 a2 ff ff       	call   c000fd3b <malloc>
c0015a65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015a69:	59                   	pop    ecx
c0015a6a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015a6c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015a70:	50                   	push   eax
c0015a71:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015a75:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015a79:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015a7d:	0f af c2             	imul   eax,edx
c0015a80:	99                   	cdq    
c0015a81:	52                   	push   edx
c0015a82:	50                   	push   eax
c0015a83:	56                   	push   esi
c0015a84:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a87:	83 c4 20             	add    esp,0x20
c0015a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015a92:	0f b7 fd             	movzx  edi,bp
c0015a95:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0015a99:	0f 83 80 00 00 00    	jae    c0015b1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x240>
c0015a9f:	c1 e7 05             	shl    edi,0x5
c0015aa2:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c0015aa6:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015aa9:	75 6e                	jne    c0015b19 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c0015aab:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0015aae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015ab2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015ab5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015ab9:	52                   	push   edx
c0015aba:	31 d2                	xor    edx,edx
c0015abc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015abf:	52                   	push   edx
c0015ac0:	50                   	push   eax
c0015ac1:	56                   	push   esi
c0015ac2:	e8 77 2c ff ff       	call   c000873e <File::seek(unsigned long long)>
c0015ac7:	83 c4 10             	add    esp,0x10
c0015aca:	85 c0                	test   eax,eax
c0015acc:	74 17                	je     c0015ae5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x206>
c0015ace:	83 ec 0c             	sub    esp,0xc
c0015ad1:	68 ee 99 02 c0       	push   0xc00299ee
c0015ad6:	e8 a1 14 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015adb:	83 c4 10             	add    esp,0x10
c0015ade:	31 c0                	xor    eax,eax
c0015ae0:	e9 8a 00 00 00       	jmp    c0015b6f <Thr::loadProgramIntoMemory(Process*, char const*)+0x290>
c0015ae5:	83 ec 0c             	sub    esp,0xc
c0015ae8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015aeb:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015aee:	50                   	push   eax
c0015aef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015af3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015af7:	56                   	push   esi
c0015af8:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015aff:	e8 49 fb ff ff       	call   c001564d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015b04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015b08:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015b0c:	83 c4 20             	add    esp,0x20
c0015b0f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0015b13:	73 04                	jae    c0015b19 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c0015b15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b19:	45                   	inc    ebp
c0015b1a:	e9 73 ff ff ff       	jmp    c0015a92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015b1f:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015b23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015b27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b2b:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0015b31:	83 ec 0c             	sub    esp,0xc
c0015b34:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015b3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015b3f:	05 00 10 00 00       	add    eax,0x1000
c0015b44:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b4b:	e8 fb a1 ff ff       	call   c000fd4b <free>
c0015b50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b53:	e8 f3 a1 ff ff       	call   c000fd4b <free>
c0015b58:	58                   	pop    eax
c0015b59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b5d:	e8 e9 a1 ff ff       	call   c000fd4b <free>
c0015b62:	89 34 24             	mov    DWORD PTR [esp],esi
c0015b65:	e8 74 2b ff ff       	call   c00086de <File::close()>
c0015b6a:	83 c4 10             	add    esp,0x10
c0015b6d:	b0 01                	mov    al,0x1
c0015b6f:	83 c4 5c             	add    esp,0x5c
c0015b72:	5b                   	pop    ebx
c0015b73:	5e                   	pop    esi
c0015b74:	5f                   	pop    edi
c0015b75:	5d                   	pop    ebp
c0015b76:	c3                   	ret    

c0015b77 <Thr::runtimeReferenceHelper()>:
c0015b77:	83 ec 18             	sub    esp,0x18
c0015b7a:	68 f6 99 02 c0       	push   0xc00299f6
c0015b7f:	e8 f8 13 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015b84:	fa                   	cli    
c0015b85:	83 c4 10             	add    esp,0x10
c0015b88:	eb fe                	jmp    c0015b88 <Thr::runtimeReferenceHelper()+0x11>

c0015b8a <Thr::getAddressOfKernelSymbol(char const*)>:
c0015b8a:	57                   	push   edi
c0015b8b:	56                   	push   esi
c0015b8c:	53                   	push   ebx
c0015b8d:	31 db                	xor    ebx,ebx
c0015b8f:	39 1d 00 33 03 c0    	cmp    DWORD PTR ds:0xc0033300,ebx
c0015b95:	7e 3c                	jle    c0015bd3 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015b97:	8b 34 9d e0 32 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffccd20]
c0015b9e:	31 ff                	xor    edi,edi
c0015ba0:	39 3c 9d a0 32 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffccd60],edi
c0015ba7:	7e 27                	jle    c0015bd0 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015ba9:	50                   	push   eax
c0015baa:	50                   	push   eax
c0015bab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015baf:	8b 06                	mov    eax,DWORD PTR [esi]
c0015bb1:	03 04 9d c0 32 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffccd40]
c0015bb8:	50                   	push   eax
c0015bb9:	e8 92 ab fe ff       	call   c0000750 <strcmp>
c0015bbe:	83 c4 10             	add    esp,0x10
c0015bc1:	85 c0                	test   eax,eax
c0015bc3:	75 05                	jne    c0015bca <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015bc5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015bc8:	eb 0b                	jmp    c0015bd5 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015bca:	83 c6 10             	add    esi,0x10
c0015bcd:	47                   	inc    edi
c0015bce:	eb d0                	jmp    c0015ba0 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015bd0:	43                   	inc    ebx
c0015bd1:	eb bc                	jmp    c0015b8f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015bd3:	31 c0                	xor    eax,eax
c0015bd5:	5b                   	pop    ebx
c0015bd6:	5e                   	pop    esi
c0015bd7:	5f                   	pop    edi
c0015bd8:	c3                   	ret    

c0015bd9 <Thr::loadKernelSymbolTable(char const*)>:
c0015bd9:	55                   	push   ebp
c0015bda:	57                   	push   edi
c0015bdb:	56                   	push   esi
c0015bdc:	53                   	push   ebx
c0015bdd:	83 ec 68             	sub    esp,0x68
c0015be0:	8b 35 58 33 03 c0    	mov    esi,DWORD PTR ds:0xc0033358
c0015be6:	68 14 01 00 00       	push   0x114
c0015beb:	e8 4b a1 ff ff       	call   c000fd3b <malloc>
c0015bf0:	83 c4 0c             	add    esp,0xc
c0015bf3:	89 c3                	mov    ebx,eax
c0015bf5:	56                   	push   esi
c0015bf6:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015bfa:	50                   	push   eax
c0015bfb:	e8 62 2a ff ff       	call   c0008662 <File::File(char const*, Process*)>
c0015c00:	5e                   	pop    esi
c0015c01:	5f                   	pop    edi
c0015c02:	6a 01                	push   0x1
c0015c04:	53                   	push   ebx
c0015c05:	e8 76 2a ff ff       	call   c0008680 <File::open(FileOpenMode)>
c0015c0a:	83 c4 10             	add    esp,0x10
c0015c0d:	85 c0                	test   eax,eax
c0015c0f:	74 0a                	je     c0015c1b <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015c11:	83 ec 0c             	sub    esp,0xc
c0015c14:	68 18 9a 02 c0       	push   0xc0029a18
c0015c19:	eb 34                	jmp    c0015c4f <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015c1b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015c23:	83 ec 0c             	sub    esp,0xc
c0015c26:	6a 34                	push   0x34
c0015c28:	e8 0e a1 ff ff       	call   c000fd3b <malloc>
c0015c2d:	59                   	pop    ecx
c0015c2e:	89 c7                	mov    edi,eax
c0015c30:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015c34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c36:	56                   	push   esi
c0015c37:	57                   	push   edi
c0015c38:	6a 00                	push   0x0
c0015c3a:	6a 34                	push   0x34
c0015c3c:	53                   	push   ebx
c0015c3d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c40:	83 c4 20             	add    esp,0x20
c0015c43:	85 c0                	test   eax,eax
c0015c45:	74 17                	je     c0015c5e <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015c47:	83 ec 0c             	sub    esp,0xc
c0015c4a:	68 2f 9a 02 c0       	push   0xc0029a2f
c0015c4f:	e8 3c a5 ff ff       	call   c0010190 <KePanic(char const*)>
c0015c54:	83 c4 10             	add    esp,0x10
c0015c57:	31 c0                	xor    eax,eax
c0015c59:	e9 31 02 00 00       	jmp    c0015e8f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015c5e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015c64:	75 e1                	jne    c0015c47 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015c66:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015c69:	85 c0                	test   eax,eax
c0015c6b:	74 da                	je     c0015c47 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015c6d:	52                   	push   edx
c0015c6e:	31 d2                	xor    edx,edx
c0015c70:	52                   	push   edx
c0015c71:	50                   	push   eax
c0015c72:	53                   	push   ebx
c0015c73:	e8 c6 2a ff ff       	call   c000873e <File::seek(unsigned long long)>
c0015c78:	83 c4 10             	add    esp,0x10
c0015c7b:	85 c0                	test   eax,eax
c0015c7d:	75 c8                	jne    c0015c47 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015c7f:	83 ec 0c             	sub    esp,0xc
c0015c82:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015c86:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015c8a:	31 ed                	xor    ebp,ebp
c0015c8c:	0f af c2             	imul   eax,edx
c0015c8f:	50                   	push   eax
c0015c90:	e8 a6 a0 ff ff       	call   c000fd3b <malloc>
c0015c95:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015c97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0015c9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ca2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015ca6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015caa:	0f af c2             	imul   eax,edx
c0015cad:	99                   	cdq    
c0015cae:	52                   	push   edx
c0015caf:	50                   	push   eax
c0015cb0:	53                   	push   ebx
c0015cb1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015cb4:	83 c4 20             	add    esp,0x20
c0015cb7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015cbf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015cc7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015ccf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015cd7:	0f b7 f5             	movzx  esi,bp
c0015cda:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015cde:	0f 83 a7 00 00 00    	jae    c0015d8b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015ce4:	6b f6 28             	imul   esi,esi,0x28
c0015ce7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015ceb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015cee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015cf2:	50                   	push   eax
c0015cf3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015cf7:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015cfb:	8b 16                	mov    edx,DWORD PTR [esi]
c0015cfd:	6b c0 28             	imul   eax,eax,0x28
c0015d00:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015d04:	89 d0                	mov    eax,edx
c0015d06:	31 d2                	xor    edx,edx
c0015d08:	52                   	push   edx
c0015d09:	50                   	push   eax
c0015d0a:	53                   	push   ebx
c0015d0b:	e8 2e 2a ff ff       	call   c000873e <File::seek(unsigned long long)>
c0015d10:	83 c4 0c             	add    esp,0xc
c0015d13:	6a 20                	push   0x20
c0015d15:	6a 00                	push   0x0
c0015d17:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015d1b:	52                   	push   edx
c0015d1c:	e8 cf a7 fe ff       	call   c00004f0 <memset>
c0015d21:	58                   	pop    eax
c0015d22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d24:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015d28:	51                   	push   ecx
c0015d29:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015d2d:	52                   	push   edx
c0015d2e:	6a 00                	push   0x0
c0015d30:	6a 1f                	push   0x1f
c0015d32:	53                   	push   ebx
c0015d33:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d36:	83 c4 18             	add    esp,0x18
c0015d39:	68 46 9a 02 c0       	push   0xc0029a46
c0015d3e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015d42:	52                   	push   edx
c0015d43:	e8 08 aa fe ff       	call   c0000750 <strcmp>
c0015d48:	83 c4 10             	add    esp,0x10
c0015d4b:	85 c0                	test   eax,eax
c0015d4d:	75 0f                	jne    c0015d5e <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015d4f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015d52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d5e:	50                   	push   eax
c0015d5f:	50                   	push   eax
c0015d60:	68 4e 9a 02 c0       	push   0xc0029a4e
c0015d65:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015d69:	50                   	push   eax
c0015d6a:	e8 e1 a9 fe ff       	call   c0000750 <strcmp>
c0015d6f:	83 c4 10             	add    esp,0x10
c0015d72:	85 c0                	test   eax,eax
c0015d74:	75 0f                	jne    c0015d85 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015d76:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015d79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015d7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d85:	45                   	inc    ebp
c0015d86:	e9 4c ff ff ff       	jmp    c0015cd7 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015d8b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015d90:	75 10                	jne    c0015da2 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015d92:	83 ec 0c             	sub    esp,0xc
c0015d95:	68 56 9a 02 c0       	push   0xc0029a56
c0015d9a:	e8 f1 a3 ff ff       	call   c0010190 <KePanic(char const*)>
c0015d9f:	83 c4 10             	add    esp,0x10
c0015da2:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015da7:	75 10                	jne    c0015db9 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015da9:	83 ec 0c             	sub    esp,0xc
c0015dac:	68 56 9a 02 c0       	push   0xc0029a56
c0015db1:	e8 da a3 ff ff       	call   c0010190 <KePanic(char const*)>
c0015db6:	83 c4 10             	add    esp,0x10
c0015db9:	31 d2                	xor    edx,edx
c0015dbb:	50                   	push   eax
c0015dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dc0:	52                   	push   edx
c0015dc1:	50                   	push   eax
c0015dc2:	53                   	push   ebx
c0015dc3:	e8 76 29 ff ff       	call   c000873e <File::seek(unsigned long long)>
c0015dc8:	5a                   	pop    edx
c0015dc9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015dcd:	e8 69 9f ff ff       	call   c000fd3b <malloc>
c0015dd2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015dd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015dda:	31 c9                	xor    ecx,ecx
c0015ddc:	5e                   	pop    esi
c0015ddd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ddf:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015de3:	55                   	push   ebp
c0015de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015de8:	51                   	push   ecx
c0015de9:	52                   	push   edx
c0015dea:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015dee:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015df2:	53                   	push   ebx
c0015df3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015df6:	83 c4 14             	add    esp,0x14
c0015df9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015dfd:	e8 39 9f ff ff       	call   c000fd3b <malloc>
c0015e02:	89 c6                	mov    esi,eax
c0015e04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e06:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e09:	56                   	push   esi
c0015e0a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015e0e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015e12:	51                   	push   ecx
c0015e13:	52                   	push   edx
c0015e14:	53                   	push   ebx
c0015e15:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015e1c:	8b 15 00 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033300
c0015e22:	83 c4 1c             	add    esp,0x1c
c0015e25:	c1 e8 04             	shr    eax,0x4
c0015e28:	89 04 95 a0 32 03 c0 	mov    DWORD PTR [edx*4-0x3ffccd60],eax
c0015e2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015e33:	31 d2                	xor    edx,edx
c0015e35:	52                   	push   edx
c0015e36:	50                   	push   eax
c0015e37:	53                   	push   ebx
c0015e38:	e8 01 29 ff ff       	call   c000873e <File::seek(unsigned long long)>
c0015e3d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015e3f:	31 d2                	xor    edx,edx
c0015e41:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e44:	56                   	push   esi
c0015e45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e49:	52                   	push   edx
c0015e4a:	50                   	push   eax
c0015e4b:	53                   	push   ebx
c0015e4c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e4f:	83 c4 14             	add    esp,0x14
c0015e52:	53                   	push   ebx
c0015e53:	e8 86 28 ff ff       	call   c00086de <File::close()>
c0015e58:	5d                   	pop    ebp
c0015e59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e5d:	e8 e9 9e ff ff       	call   c000fd4b <free>
c0015e62:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015e65:	e8 e1 9e ff ff       	call   c000fd4b <free>
c0015e6a:	a1 00 33 03 c0       	mov    eax,ds:0xc0033300
c0015e6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015e73:	8d 50 01             	lea    edx,[eax+0x1]
c0015e76:	89 0c 85 e0 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccd20],ecx
c0015e7d:	89 34 85 c0 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccd40],esi
c0015e84:	89 15 00 33 03 c0    	mov    DWORD PTR ds:0xc0033300,edx
c0015e8a:	83 c4 10             	add    esp,0x10
c0015e8d:	b0 01                	mov    al,0x1
c0015e8f:	83 c4 5c             	add    esp,0x5c
c0015e92:	5b                   	pop    ebx
c0015e93:	5e                   	pop    esi
c0015e94:	5f                   	pop    edi
c0015e95:	5d                   	pop    ebp
c0015e96:	c3                   	ret    

c0015e97 <KeIsELFValid(Elf32_Ehdr*)>:
c0015e97:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e9b:	31 c0                	xor    eax,eax
c0015e9d:	80 3a 7f             	cmp    BYTE PTR [edx],0x7f
c0015ea0:	75 13                	jne    c0015eb5 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0015ea2:	80 7a 01 45          	cmp    BYTE PTR [edx+0x1],0x45
c0015ea6:	75 0d                	jne    c0015eb5 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0015ea8:	80 7a 02 4c          	cmp    BYTE PTR [edx+0x2],0x4c
c0015eac:	75 07                	jne    c0015eb5 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0015eae:	80 7a 03 46          	cmp    BYTE PTR [edx+0x3],0x46
c0015eb2:	0f 94 c0             	sete   al
c0015eb5:	c3                   	ret    

c0015eb6 <KeGetELFSectionHeader(unsigned char*, int)>:
c0015eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eba:	6b 54 24 08 28       	imul   edx,DWORD PTR [esp+0x8],0x28
c0015ebf:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
c0015ec2:	01 d0                	add    eax,edx
c0015ec4:	c3                   	ret    

c0015ec5 <KeGetELFProgramHeader(unsigned char*, int)>:
c0015ec5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ec9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ecd:	c1 e0 05             	shl    eax,0x5
c0015ed0:	03 42 1c             	add    eax,DWORD PTR [edx+0x1c]
c0015ed3:	01 d0                	add    eax,edx
c0015ed5:	c3                   	ret    

c0015ed6 <KeLookupELFString(unsigned char*, int)>:
c0015ed6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015eda:	31 c0                	xor    eax,eax
c0015edc:	0f b7 51 32          	movzx  edx,WORD PTR [ecx+0x32]
c0015ee0:	85 d2                	test   edx,edx
c0015ee2:	74 14                	je     c0015ef8 <KeLookupELFString(unsigned char*, int)+0x22>
c0015ee4:	52                   	push   edx
c0015ee5:	51                   	push   ecx
c0015ee6:	e8 cb ff ff ff       	call   c0015eb6 <KeGetELFSectionHeader(unsigned char*, int)>
c0015eeb:	5a                   	pop    edx
c0015eec:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c0015eef:	5a                   	pop    edx
c0015ef0:	89 c8                	mov    eax,ecx
c0015ef2:	74 04                	je     c0015ef8 <KeLookupELFString(unsigned char*, int)+0x22>
c0015ef4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0015ef8:	c3                   	ret    

c0015ef9 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>:
c0015ef9:	55                   	push   ebp
c0015efa:	57                   	push   edi
c0015efb:	56                   	push   esi
c0015efc:	53                   	push   ebx
c0015efd:	31 db                	xor    ebx,ebx
c0015eff:	83 ec 1c             	sub    esp,0x1c
c0015f02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f06:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015f09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f0d:	89 c5                	mov    ebp,eax
c0015f0f:	0f b6 44 24 34       	movzx  eax,BYTE PTR [esp+0x34]
c0015f14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f1c:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c0015f20:	39 d8                	cmp    eax,ebx
c0015f22:	0f 8e 81 00 00 00    	jle    c0015fa9 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xb0>
c0015f28:	53                   	push   ebx
c0015f29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015f2d:	e8 93 ff ff ff       	call   c0015ec5 <KeGetELFProgramHeader(unsigned char*, int)>
c0015f32:	5a                   	pop    edx
c0015f33:	83 38 01             	cmp    DWORD PTR [eax],0x1
c0015f36:	59                   	pop    ecx
c0015f37:	75 6a                	jne    c0015fa3 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c0015f39:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0015f3c:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0015f3f:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
c0015f42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015f45:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015f49:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015f4e:	75 22                	jne    c0015f72 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x79>
c0015f50:	83 ec 0c             	sub    esp,0xc
c0015f53:	68 70 9a 02 c0       	push   0xc0029a70
c0015f58:	e8 33 a2 ff ff       	call   c0010190 <KePanic(char const*)>
c0015f5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f61:	01 f2                	add    edx,esi
c0015f63:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0015f67:	83 c4 10             	add    esp,0x10
c0015f6a:	39 d5                	cmp    ebp,edx
c0015f6c:	73 35                	jae    c0015fa3 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c0015f6e:	89 d5                	mov    ebp,edx
c0015f70:	eb 31                	jmp    c0015fa3 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c0015f72:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015f76:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015f79:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0015f7d:	01 f2                	add    edx,esi
c0015f7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015f83:	89 d7                	mov    edi,edx
c0015f85:	03 70 04             	add    esi,DWORD PTR [eax+0x4]
c0015f88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015f8a:	50                   	push   eax
c0015f8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f8f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0015f93:	50                   	push   eax
c0015f94:	6a 00                	push   0x0
c0015f96:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0015f9a:	52                   	push   edx
c0015f9b:	e8 50 a5 fe ff       	call   c00004f0 <memset>
c0015fa0:	83 c4 10             	add    esp,0x10
c0015fa3:	43                   	inc    ebx
c0015fa4:	e9 6f ff ff ff       	jmp    c0015f18 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x1f>
c0015fa9:	83 c4 1c             	add    esp,0x1c
c0015fac:	89 e8                	mov    eax,ebp
c0015fae:	5b                   	pop    ebx
c0015faf:	5e                   	pop    esi
c0015fb0:	5f                   	pop    edi
c0015fb1:	5d                   	pop    ebp
c0015fb2:	c3                   	ret    

c0015fb3 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>:
c0015fb3:	57                   	push   edi
c0015fb4:	56                   	push   esi
c0015fb5:	53                   	push   ebx
c0015fb6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015fba:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015fbe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015fc6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015fc9:	85 db                	test   ebx,ebx
c0015fcb:	74 04                	je     c0015fd1 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0015fcd:	85 c0                	test   eax,eax
c0015fcf:	75 05                	jne    c0015fd6 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x23>
c0015fd1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0015fd4:	eb 5c                	jmp    c0016032 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x7f>
c0015fd6:	50                   	push   eax
c0015fd7:	51                   	push   ecx
c0015fd8:	e8 d9 fe ff ff       	call   c0015eb6 <KeGetELFSectionHeader(unsigned char*, int)>
c0015fdd:	5f                   	pop    edi
c0015fde:	89 c7                	mov    edi,eax
c0015fe0:	5a                   	pop    edx
c0015fe1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015fe4:	31 d2                	xor    edx,edx
c0015fe6:	f7 77 24             	div    DWORD PTR [edi+0x24]
c0015fe9:	39 c3                	cmp    ebx,eax
c0015feb:	73 e4                	jae    c0015fd1 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0015fed:	c1 e3 04             	shl    ebx,0x4
c0015ff0:	03 5f 10             	add    ebx,DWORD PTR [edi+0x10]
c0015ff3:	01 cb                	add    ebx,ecx
c0015ff5:	0f b7 53 0e          	movzx  edx,WORD PTR [ebx+0xe]
c0015ff9:	85 d2                	test   edx,edx
c0015ffb:	75 39                	jne    c0016036 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x83>
c0015ffd:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0016000:	51                   	push   ecx
c0016001:	e8 b0 fe ff ff       	call   c0015eb6 <KeGetELFSectionHeader(unsigned char*, int)>
c0016006:	52                   	push   edx
c0016007:	03 0b                	add    ecx,DWORD PTR [ebx]
c0016009:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c001600c:	51                   	push   ecx
c001600d:	e8 78 fb ff ff       	call   c0015b8a <Thr::getAddressOfKernelSymbol(char const*)>
c0016012:	83 c4 10             	add    esp,0x10
c0016015:	85 c0                	test   eax,eax
c0016017:	75 32                	jne    c001604b <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0016019:	f6 43 0c 20          	test   BYTE PTR [ebx+0xc],0x20
c001601d:	75 03                	jne    c0016022 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x6f>
c001601f:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0016022:	83 ec 0c             	sub    esp,0xc
c0016025:	68 99 9a 02 c0       	push   0xc0029a99
c001602a:	e8 4d 0f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001602f:	83 c4 10             	add    esp,0x10
c0016032:	31 c0                	xor    eax,eax
c0016034:	eb 15                	jmp    c001604b <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0016036:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016039:	81 fa f1 ff 00 00    	cmp    edx,0xfff1
c001603f:	74 0a                	je     c001604b <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0016041:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016045:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0016049:	01 d0                	add    eax,edx
c001604b:	5b                   	pop    ebx
c001604c:	5e                   	pop    esi
c001604d:	5f                   	pop    edi
c001604e:	c3                   	ret    

c001604f <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>:
c001604f:	55                   	push   ebp
c0016050:	57                   	push   edi
c0016051:	56                   	push   esi
c0016052:	53                   	push   ebx
c0016053:	83 ec 1c             	sub    esp,0x1c
c0016056:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001605a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001605e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016062:	8b 69 18             	mov    ebp,DWORD PTR [ecx+0x18]
c0016065:	8b 1e                	mov    ebx,DWORD PTR [esi]
c0016067:	29 ef                	sub    edi,ebp
c0016069:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001606c:	01 fb                	add    ebx,edi
c001606e:	c1 ea 08             	shr    edx,0x8
c0016071:	74 2d                	je     c00160a0 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x51>
c0016073:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016078:	50                   	push   eax
c0016079:	50                   	push   eax
c001607a:	55                   	push   ebp
c001607b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001607f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0016083:	50                   	push   eax
c0016084:	52                   	push   edx
c0016085:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016089:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001608c:	51                   	push   ecx
c001608d:	e8 21 ff ff ff       	call   c0015fb3 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>
c0016092:	83 c4 20             	add    esp,0x20
c0016095:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001609a:	74 06                	je     c00160a2 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x53>
c001609c:	31 c0                	xor    eax,eax
c001609e:	eb 27                	jmp    c00160c7 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c00160a0:	31 c0                	xor    eax,eax
c00160a2:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c00160a6:	83 fa 01             	cmp    edx,0x1
c00160a9:	75 04                	jne    c00160af <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x60>
c00160ab:	01 03                	add    DWORD PTR [ebx],eax
c00160ad:	eb 16                	jmp    c00160c5 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c00160af:	83 fa 02             	cmp    edx,0x2
c00160b2:	75 08                	jne    c00160bc <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x6d>
c00160b4:	03 03                	add    eax,DWORD PTR [ebx]
c00160b6:	29 d8                	sub    eax,ebx
c00160b8:	89 03                	mov    DWORD PTR [ebx],eax
c00160ba:	eb 09                	jmp    c00160c5 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c00160bc:	31 c0                	xor    eax,eax
c00160be:	83 fa 08             	cmp    edx,0x8
c00160c1:	75 04                	jne    c00160c7 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c00160c3:	01 3b                	add    DWORD PTR [ebx],edi
c00160c5:	b0 01                	mov    al,0x1
c00160c7:	83 c4 1c             	add    esp,0x1c
c00160ca:	5b                   	pop    ebx
c00160cb:	5e                   	pop    esi
c00160cc:	5f                   	pop    edi
c00160cd:	5d                   	pop    ebp
c00160ce:	c3                   	ret    

c00160cf <KePerformRelocations(unsigned char*, unsigned long)>:
c00160cf:	55                   	push   ebp
c00160d0:	31 ed                	xor    ebp,ebp
c00160d2:	57                   	push   edi
c00160d3:	56                   	push   esi
c00160d4:	53                   	push   ebx
c00160d5:	83 ec 1c             	sub    esp,0x1c
c00160d8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00160dc:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c00160e0:	39 e8                	cmp    eax,ebp
c00160e2:	0f 8e 92 00 00 00    	jle    c001617a <KePerformRelocations(unsigned char*, unsigned long)+0xab>
c00160e8:	55                   	push   ebp
c00160e9:	56                   	push   esi
c00160ea:	e8 c7 fd ff ff       	call   c0015eb6 <KeGetELFSectionHeader(unsigned char*, int)>
c00160ef:	5a                   	pop    edx
c00160f0:	89 c3                	mov    ebx,eax
c00160f2:	59                   	pop    ecx
c00160f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00160f6:	83 f8 09             	cmp    eax,0x9
c00160f9:	75 64                	jne    c001615f <KePerformRelocations(unsigned char*, unsigned long)+0x90>
c00160fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00160fe:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0016101:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016105:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016108:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001610c:	ff 33                	push   DWORD PTR [ebx]
c001610e:	56                   	push   esi
c001610f:	e8 c2 fd ff ff       	call   c0015ed6 <KeLookupELFString(unsigned char*, int)>
c0016114:	68 ba 9a 02 c0       	push   0xc0029aba
c0016119:	50                   	push   eax
c001611a:	e8 31 a6 fe ff       	call   c0000750 <strcmp>
c001611f:	83 c4 10             	add    esp,0x10
c0016122:	89 c1                	mov    ecx,eax
c0016124:	85 c0                	test   eax,eax
c0016126:	75 4c                	jne    c0016174 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0016128:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001612c:	31 d2                	xor    edx,edx
c001612e:	01 f7                	add    edi,esi
c0016130:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0016134:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016138:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c001613c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016140:	7d 32                	jge    c0016174 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0016142:	57                   	push   edi
c0016143:	83 c7 08             	add    edi,0x8
c0016146:	53                   	push   ebx
c0016147:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001614b:	56                   	push   esi
c001614c:	e8 fe fe ff ff       	call   c001604f <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>
c0016151:	83 c4 10             	add    esp,0x10
c0016154:	84 c0                	test   al,al
c0016156:	74 24                	je     c001617c <KePerformRelocations(unsigned char*, unsigned long)+0xad>
c0016158:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001615c:	41                   	inc    ecx
c001615d:	eb d9                	jmp    c0016138 <KePerformRelocations(unsigned char*, unsigned long)+0x69>
c001615f:	83 f8 04             	cmp    eax,0x4
c0016162:	75 10                	jne    c0016174 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0016164:	83 ec 0c             	sub    esp,0xc
c0016167:	68 c3 9a 02 c0       	push   0xc0029ac3
c001616c:	e8 1f a0 ff ff       	call   c0010190 <KePanic(char const*)>
c0016171:	83 c4 10             	add    esp,0x10
c0016174:	45                   	inc    ebp
c0016175:	e9 62 ff ff ff       	jmp    c00160dc <KePerformRelocations(unsigned char*, unsigned long)+0xd>
c001617a:	b0 01                	mov    al,0x1
c001617c:	83 c4 1c             	add    esp,0x1c
c001617f:	5b                   	pop    ebx
c0016180:	5e                   	pop    esi
c0016181:	5f                   	pop    edi
c0016182:	5d                   	pop    ebp
c0016183:	c3                   	ret    

c0016184 <KeLoadELF(unsigned char*, bool, unsigned long)>:
c0016184:	57                   	push   edi
c0016185:	56                   	push   esi
c0016186:	53                   	push   ebx
c0016187:	83 ec 10             	sub    esp,0x10
c001618a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001618e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016192:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016196:	53                   	push   ebx
c0016197:	e8 fb fc ff ff       	call   c0015e97 <KeIsELFValid(Elf32_Ehdr*)>
c001619c:	59                   	pop    ecx
c001619d:	84 c0                	test   al,al
c001619f:	75 04                	jne    c00161a5 <KeLoadELF(unsigned char*, bool, unsigned long)+0x21>
c00161a1:	31 c0                	xor    eax,eax
c00161a3:	eb 4d                	jmp    c00161f2 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c00161a5:	81 e6 ff 00 00 00    	and    esi,0xff
c00161ab:	74 07                	je     c00161b4 <KeLoadELF(unsigned char*, bool, unsigned long)+0x30>
c00161ad:	66 83 7b 30 00       	cmp    WORD PTR [ebx+0x30],0x0
c00161b2:	74 ed                	je     c00161a1 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c00161b4:	66 83 7b 2c 00       	cmp    WORD PTR [ebx+0x2c],0x0
c00161b9:	74 e6                	je     c00161a1 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c00161bb:	52                   	push   edx
c00161bc:	57                   	push   edi
c00161bd:	56                   	push   esi
c00161be:	53                   	push   ebx
c00161bf:	e8 35 fd ff ff       	call   c0015ef9 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>
c00161c4:	59                   	pop    ecx
c00161c5:	5a                   	pop    edx
c00161c6:	50                   	push   eax
c00161c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00161cb:	68 e4 9a 02 c0       	push   0xc0029ae4
c00161d0:	e8 a7 0d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00161d5:	83 c4 10             	add    esp,0x10
c00161d8:	85 f6                	test   esi,esi
c00161da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00161de:	74 12                	je     c00161f2 <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c00161e0:	50                   	push   eax
c00161e1:	50                   	push   eax
c00161e2:	57                   	push   edi
c00161e3:	53                   	push   ebx
c00161e4:	e8 e6 fe ff ff       	call   c00160cf <KePerformRelocations(unsigned char*, unsigned long)>
c00161e9:	83 c4 10             	add    esp,0x10
c00161ec:	84 c0                	test   al,al
c00161ee:	74 b1                	je     c00161a1 <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c00161f0:	89 f8                	mov    eax,edi
c00161f2:	83 c4 10             	add    esp,0x10
c00161f5:	5b                   	pop    ebx
c00161f6:	5e                   	pop    esi
c00161f7:	5f                   	pop    edi
c00161f8:	c3                   	ret    

c00161f9 <KeLoadDriver(char const*)>:
c00161f9:	57                   	push   edi
c00161fa:	56                   	push   esi
c00161fb:	53                   	push   ebx
c00161fc:	83 ec 28             	sub    esp,0x28
c00161ff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016203:	57                   	push   edi
c0016204:	68 08 9b 02 c0       	push   0xc0029b08
c0016209:	e8 6e 0d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001620e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016215:	e8 21 9b ff ff       	call   c000fd3b <malloc>
c001621a:	83 c4 0c             	add    esp,0xc
c001621d:	89 c3                	mov    ebx,eax
c001621f:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c0016225:	57                   	push   edi
c0016226:	50                   	push   eax
c0016227:	e8 36 24 ff ff       	call   c0008662 <File::File(char const*, Process*)>
c001622c:	83 c4 10             	add    esp,0x10
c001622f:	85 db                	test   ebx,ebx
c0016231:	0f 84 20 01 00 00    	je     c0016357 <KeLoadDriver(char const*)+0x15e>
c0016237:	50                   	push   eax
c0016238:	8d 44 24 17          	lea    eax,[esp+0x17]
c001623c:	50                   	push   eax
c001623d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016241:	50                   	push   eax
c0016242:	53                   	push   ebx
c0016243:	e8 3a 27 ff ff       	call   c0008982 <File::stat(unsigned long long*, bool*)>
c0016248:	83 c4 10             	add    esp,0x10
c001624b:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016250:	0f 85 01 01 00 00    	jne    c0016357 <KeLoadDriver(char const*)+0x15e>
c0016256:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001625a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001625e:	89 d1                	mov    ecx,edx
c0016260:	09 c1                	or     ecx,eax
c0016262:	0f 84 ef 00 00 00    	je     c0016357 <KeLoadDriver(char const*)+0x15e>
c0016268:	05 ff 0f 00 00       	add    eax,0xfff
c001626d:	83 d2 00             	adc    edx,0x0
c0016270:	51                   	push   ecx
c0016271:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016275:	6a 03                	push   0x3
c0016277:	50                   	push   eax
c0016278:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c001627e:	e8 8b dc ff ff       	call   c0013f0e <VAS::allocatePages(int, int)>
c0016283:	83 c4 0c             	add    esp,0xc
c0016286:	89 c6                	mov    esi,eax
c0016288:	50                   	push   eax
c0016289:	57                   	push   edi
c001628a:	68 1e 9b 02 c0       	push   0xc0029b1e
c001628f:	e8 e8 0c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016294:	5f                   	pop    edi
c0016295:	58                   	pop    eax
c0016296:	6a 01                	push   0x1
c0016298:	53                   	push   ebx
c0016299:	e8 e2 23 ff ff       	call   c0008680 <File::open(FileOpenMode)>
c001629e:	83 c4 10             	add    esp,0x10
c00162a1:	85 c0                	test   eax,eax
c00162a3:	74 11                	je     c00162b6 <KeLoadDriver(char const*)+0xbd>
c00162a5:	83 ec 0c             	sub    esp,0xc
c00162a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162aa:	53                   	push   ebx
c00162ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162ae:	83 c4 10             	add    esp,0x10
c00162b1:	e9 a1 00 00 00       	jmp    c0016357 <KeLoadDriver(char const*)+0x15e>
c00162b6:	83 ec 0c             	sub    esp,0xc
c00162b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00162bd:	e8 79 9a ff ff       	call   c000fd3b <malloc>
c00162c2:	5a                   	pop    edx
c00162c3:	89 c7                	mov    edi,eax
c00162c5:	8d 54 24 20          	lea    edx,[esp+0x20]
c00162c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162cb:	52                   	push   edx
c00162cc:	57                   	push   edi
c00162cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00162d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00162d5:	53                   	push   ebx
c00162d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00162d9:	83 c4 14             	add    esp,0x14
c00162dc:	53                   	push   ebx
c00162dd:	31 db                	xor    ebx,ebx
c00162df:	e8 fa 23 ff ff       	call   c00086de <File::close()>
c00162e4:	83 c4 0c             	add    esp,0xc
c00162e7:	56                   	push   esi
c00162e8:	6a 01                	push   0x1
c00162ea:	57                   	push   edi
c00162eb:	e8 94 fe ff ff       	call   c0016184 <KeLoadELF(unsigned char*, bool, unsigned long)>
c00162f0:	83 c4 10             	add    esp,0x10
c00162f3:	89 c7                	mov    edi,eax
c00162f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00162fd:	05 ff 0f 00 00       	add    eax,0xfff
c0016302:	83 d2 00             	adc    edx,0x0
c0016305:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016309:	c1 ea 0c             	shr    edx,0xc
c001630c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016310:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016314:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0016318:	ba 00 00 00 00       	mov    edx,0x0
c001631d:	89 d0                	mov    eax,edx
c001631f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0016323:	73 34                	jae    c0016359 <KeLoadDriver(char const*)+0x160>
c0016325:	50                   	push   eax
c0016326:	50                   	push   eax
c0016327:	89 d8                	mov    eax,ebx
c0016329:	c1 e0 0c             	shl    eax,0xc
c001632c:	01 f0                	add    eax,esi
c001632e:	50                   	push   eax
c001632f:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c0016335:	e8 d6 d6 ff ff       	call   c0013a10 <VAS::getPageTableEntry(unsigned long)>
c001633a:	83 c4 10             	add    esp,0x10
c001633d:	8b 00                	mov    eax,DWORD PTR [eax]
c001633f:	a8 60                	test   al,0x60
c0016341:	75 11                	jne    c0016354 <KeLoadDriver(char const*)+0x15b>
c0016343:	83 ec 0c             	sub    esp,0xc
c0016346:	25 00 f0 ff ff       	and    eax,0xfffff000
c001634b:	50                   	push   eax
c001634c:	e8 ca 9f ff ff       	call   c001031b <Phys::freePage(unsigned long)>
c0016351:	83 c4 10             	add    esp,0x10
c0016354:	43                   	inc    ebx
c0016355:	eb 9e                	jmp    c00162f5 <KeLoadDriver(char const*)+0xfc>
c0016357:	31 ff                	xor    edi,edi
c0016359:	83 c4 20             	add    esp,0x20
c001635c:	89 f8                	mov    eax,edi
c001635e:	5b                   	pop    ebx
c001635f:	5e                   	pop    esi
c0016360:	5f                   	pop    edi
c0016361:	c3                   	ret    

c0016362 <KeExecuteDriver(unsigned long, void*)>:
c0016362:	56                   	push   esi
c0016363:	53                   	push   ebx
c0016364:	51                   	push   ecx
c0016365:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016369:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001636d:	85 db                	test   ebx,ebx
c001636f:	75 10                	jne    c0016381 <KeExecuteDriver(unsigned long, void*)+0x1f>
c0016371:	83 ec 0c             	sub    esp,0xc
c0016374:	68 2a 9b 02 c0       	push   0xc0029b2a
c0016379:	e8 12 9e ff ff       	call   c0010190 <KePanic(char const*)>
c001637e:	83 c4 10             	add    esp,0x10
c0016381:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0016385:	89 d8                	mov    eax,ebx
c0016387:	5a                   	pop    edx
c0016388:	5b                   	pop    ebx
c0016389:	5e                   	pop    esi
c001638a:	ff e0                	jmp    eax

c001638c <KeLoadAndExecuteDriver(char const*, void*, bool)>:
c001638c:	57                   	push   edi
c001638d:	56                   	push   esi
c001638e:	53                   	push   ebx
c001638f:	81 ec 0c 01 00 00    	sub    esp,0x10c
c0016395:	8b b4 24 1c 01 00 00 	mov    esi,DWORD PTR [esp+0x11c]
c001639c:	8b bc 24 24 01 00 00 	mov    edi,DWORD PTR [esp+0x124]
c00163a3:	56                   	push   esi
c00163a4:	e8 50 fe ff ff       	call   c00161f9 <KeLoadDriver(char const*)>
c00163a9:	83 c4 10             	add    esp,0x10
c00163ac:	85 c0                	test   eax,eax
c00163ae:	74 16                	je     c00163c6 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x3a>
c00163b0:	53                   	push   ebx
c00163b1:	53                   	push   ebx
c00163b2:	b3 01                	mov    bl,0x1
c00163b4:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00163bb:	50                   	push   eax
c00163bc:	e8 a1 ff ff ff       	call   c0016362 <KeExecuteDriver(unsigned long, void*)>
c00163c1:	83 c4 10             	add    esp,0x10
c00163c4:	eb 2d                	jmp    c00163f3 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c00163c6:	89 fb                	mov    ebx,edi
c00163c8:	84 db                	test   bl,bl
c00163ca:	74 27                	je     c00163f3 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c00163cc:	50                   	push   eax
c00163cd:	50                   	push   eax
c00163ce:	68 54 9b 02 c0       	push   0xc0029b54
c00163d3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00163d7:	53                   	push   ebx
c00163d8:	e8 63 a2 fe ff       	call   c0000640 <strcpy>
c00163dd:	5a                   	pop    edx
c00163de:	59                   	pop    ecx
c00163df:	56                   	push   esi
c00163e0:	53                   	push   ebx
c00163e1:	e8 5a a4 fe ff       	call   c0000840 <strcat>
c00163e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163e9:	e8 a2 9d ff ff       	call   c0010190 <KePanic(char const*)>
c00163ee:	31 db                	xor    ebx,ebx
c00163f0:	83 c4 10             	add    esp,0x10
c00163f3:	81 c4 00 01 00 00    	add    esp,0x100
c00163f9:	88 d8                	mov    al,bl
c00163fb:	5b                   	pop    ebx
c00163fc:	5e                   	pop    esi
c00163fd:	5f                   	pop    edi
c00163fe:	c3                   	ret    

c00163ff <KeProcessExec(Process*, char const*)>:
c00163ff:	56                   	push   esi
c0016400:	53                   	push   ebx
c0016401:	83 ec 04             	sub    esp,0x4
c0016404:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016408:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c001640e:	85 f6                	test   esi,esi
c0016410:	74 16                	je     c0016428 <KeProcessExec(Process*, char const*)+0x29>
c0016412:	83 ec 0c             	sub    esp,0xc
c0016415:	56                   	push   esi
c0016416:	e8 87 d8 ff ff       	call   c0013ca2 <VAS::~VAS()>
c001641b:	58                   	pop    eax
c001641c:	5a                   	pop    edx
c001641d:	6a 14                	push   0x14
c001641f:	56                   	push   esi
c0016420:	e8 2f 74 ff ff       	call   c000d854 <operator delete(void*, unsigned long)>
c0016425:	83 c4 10             	add    esp,0x10
c0016428:	83 ec 0c             	sub    esp,0xc
c001642b:	6a 14                	push   0x14
c001642d:	e8 09 99 ff ff       	call   c000fd3b <malloc>
c0016432:	89 c6                	mov    esi,eax
c0016434:	58                   	pop    eax
c0016435:	5a                   	pop    edx
c0016436:	6a 00                	push   0x0
c0016438:	56                   	push   esi
c0016439:	e8 04 dd ff ff       	call   c0014142 <VAS::VAS(bool)>
c001643e:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0016444:	59                   	pop    ecx
c0016445:	5e                   	pop    esi
c0016446:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001644a:	50                   	push   eax
c001644b:	53                   	push   ebx
c001644c:	e8 8e f4 ff ff       	call   c00158df <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016451:	83 c4 14             	add    esp,0x14
c0016454:	31 c0                	xor    eax,eax
c0016456:	5b                   	pop    ebx
c0016457:	5e                   	pop    esi
c0016458:	c3                   	ret    
c0016459:	66 90                	xchg   ax,ax
c001645b:	90                   	nop

c001645c <userModeEntryPoint(void*)>:
c001645c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0016464:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0016469:	85 c0                	test   eax,eax
c001646b:	75 03                	jne    c0016470 <userModeEntryPoint(void*)+0x14>
c001646d:	fb                   	sti    
c001646e:	66 90                	xchg   ax,ax
c0016470:	fb                   	sti    
c0016471:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016476:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016479:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c001647f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016483:	e9 b7 9d fe ff       	jmp    c000023f <goToUsermode>

c0016488 <changeTSS>:
c0016488:	83 ec 14             	sub    esp,0x14
c001648b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016490:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0016493:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016498:	c1 e2 15             	shl    edx,0x15
c001649b:	29 d0                	sub    eax,edx
c001649d:	50                   	push   eax
c001649e:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c00164a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00164a9:	05 68 11 00 00       	add    eax,0x1168
c00164ae:	50                   	push   eax
c00164af:	e8 34 cb ff ff       	call   c0012fe8 <TSS::setESP(unsigned long)>
c00164b4:	83 c4 1c             	add    esp,0x1c
c00164b7:	c3                   	ret    

c00164b8 <switchToThread(ThreadControlBlock*)>:
c00164b8:	57                   	push   edi
c00164b9:	8b 0d 2c 33 03 c0    	mov    ecx,DWORD PTR ds:0xc003332c
c00164bf:	56                   	push   esi
c00164c0:	85 c9                	test   ecx,ecx
c00164c2:	53                   	push   ebx
c00164c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164c7:	0f 85 9b 00 00 00    	jne    c0016568 <switchToThread(ThreadControlBlock*)+0xb0>
c00164cd:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c00164d1:	81 fa ff 00 00 00    	cmp    edx,0xff
c00164d7:	0f 84 87 00 00 00    	je     c0016564 <switchToThread(ThreadControlBlock*)+0xac>
c00164dd:	b8 00 04 00 00       	mov    eax,0x400
c00164e2:	29 d0                	sub    eax,edx
c00164e4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00164e7:	d1 f8                	sar    eax,1
c00164e9:	01 d0                	add    eax,edx
c00164eb:	90                   	nop
c00164ec:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00164ef:	e8 33 49 00 00       	call   c001ae27 <HalQueryPerformanceCounter()>
c00164f4:	a3 70 33 03 c0       	mov    ds:0xc0033370,eax
c00164f9:	89 15 74 33 03 c0    	mov    DWORD PTR ds:0xc0033374,edx
c00164ff:	89 c6                	mov    esi,eax
c0016501:	89 d7                	mov    edi,edx
c0016503:	2b 35 60 33 03 c0    	sub    esi,DWORD PTR ds:0xc0033360
c0016509:	a3 60 33 03 c0       	mov    ds:0xc0033360,eax
c001650e:	1b 3d 64 33 03 c0    	sbb    edi,DWORD PTR ds:0xc0033364
c0016514:	89 35 68 33 03 c0    	mov    DWORD PTR ds:0xc0033368,esi
c001651a:	89 3d 6c 33 03 c0    	mov    DWORD PTR ds:0xc003336c,edi
c0016520:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016526:	89 15 64 33 03 c0    	mov    DWORD PTR ds:0xc0033364,edx
c001652c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001652f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016532:	01 c6                	add    esi,eax
c0016534:	11 d7                	adc    edi,edx
c0016536:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016539:	83 ec 0c             	sub    esp,0xc
c001653c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001653f:	53                   	push   ebx
c0016540:	e8 32 9d fe ff       	call   c0000277 <switchToThreadASM>
c0016545:	0f 20 c0             	mov    eax,cr0
c0016548:	83 c8 08             	or     eax,0x8
c001654b:	0f 22 c0             	mov    cr0,eax
c001654e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016553:	83 c4 10             	add    esp,0x10
c0016556:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001655a:	5b                   	pop    ebx
c001655b:	5e                   	pop    esi
c001655c:	5f                   	pop    edi
c001655d:	e9 fa ef ff ff       	jmp    c001555c <KeCheckAlarm(ThreadControlBlock*)>
c0016562:	66 90                	xchg   ax,ax
c0016564:	31 c0                	xor    eax,eax
c0016566:	eb 84                	jmp    c00164ec <switchToThread(ThreadControlBlock*)+0x34>
c0016568:	5b                   	pop    ebx
c0016569:	c7 05 28 33 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x1
c0016573:	5e                   	pop    esi
c0016574:	5f                   	pop    edi
c0016575:	c3                   	ret    
c0016576:	66 90                	xchg   ax,ax

c0016578 <Process::addArgs(char**)>:
c0016578:	57                   	push   edi
c0016579:	56                   	push   esi
c001657a:	53                   	push   ebx
c001657b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001657f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016583:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c001658d:	85 ff                	test   edi,edi
c001658f:	74 4f                	je     c00165e0 <Process::addArgs(char**)+0x68>
c0016591:	8b 07                	mov    eax,DWORD PTR [edi]
c0016593:	85 c0                	test   eax,eax
c0016595:	74 49                	je     c00165e0 <Process::addArgs(char**)+0x68>
c0016597:	31 db                	xor    ebx,ebx
c0016599:	8d 76 00             	lea    esi,[esi+0x0]
c001659c:	83 ec 0c             	sub    esp,0xc
c001659f:	50                   	push   eax
c00165a0:	e8 cb 9f fe ff       	call   c0000570 <strlen>
c00165a5:	83 c0 01             	add    eax,0x1
c00165a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00165ab:	e8 8b 97 ff ff       	call   c000fd3b <malloc>
c00165b0:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c00165b7:	5a                   	pop    edx
c00165b8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00165bb:	59                   	pop    ecx
c00165bc:	83 c3 01             	add    ebx,0x1
c00165bf:	52                   	push   edx
c00165c0:	50                   	push   eax
c00165c1:	e8 7a a0 fe ff       	call   c0000640 <strcpy>
c00165c6:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c00165cc:	83 c4 10             	add    esp,0x10
c00165cf:	83 c1 01             	add    ecx,0x1
c00165d2:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c00165d8:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00165db:	85 c0                	test   eax,eax
c00165dd:	75 bd                	jne    c001659c <Process::addArgs(char**)+0x24>
c00165df:	90                   	nop
c00165e0:	5b                   	pop    ebx
c00165e1:	5e                   	pop    esi
c00165e2:	5f                   	pop    edi
c00165e3:	c3                   	ret    

c00165e4 <Process::Process(char const*, Process*, char**)>:
c00165e4:	56                   	push   esi
c00165e5:	53                   	push   ebx
c00165e6:	83 ec 14             	sub    esp,0x14
c00165e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ed:	05 0c 02 00 00       	add    eax,0x20c
c00165f2:	bb 07 00 00 00       	mov    ebx,0x7
c00165f7:	89 c6                	mov    esi,eax
c00165f9:	8d 76 00             	lea    esi,[esi+0x0]
c00165fc:	85 db                	test   ebx,ebx
c00165fe:	78 14                	js     c0016614 <Process::Process(char const*, Process*, char**)+0x30>
c0016600:	83 ec 0c             	sub    esp,0xc
c0016603:	56                   	push   esi
c0016604:	e8 cb 0a 01 00       	call   c00270d4 <ThreadControlBlock::ThreadControlBlock()>
c0016609:	83 c4 10             	add    esp,0x10
c001660c:	83 c6 73             	add    esi,0x73
c001660f:	83 eb 01             	sub    ebx,0x1
c0016612:	eb e8                	jmp    c00165fc <Process::Process(char const*, Process*, char**)+0x18>
c0016614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016618:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c001661f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016623:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001662a:	83 ec 0c             	sub    esp,0xc
c001662d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016631:	e8 4a 84 ff ff       	call   c000ea80 <KeNewProcessEnv(Process*)>
c0016636:	83 c4 10             	add    esp,0x10
c0016639:	89 c2                	mov    edx,eax
c001663b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663f:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016649:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016652:	a1 1c c7 02 c0       	mov    eax,ds:0xc002c71c
c0016657:	8d 50 01             	lea    edx,[eax+0x1]
c001665a:	89 15 1c c7 02 c0    	mov    DWORD PTR ds:0xc002c71c,edx
c0016660:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016664:	89 02                	mov    DWORD PTR [edx],eax
c0016666:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001666e:	83 ec 0c             	sub    esp,0xc
c0016671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016675:	e8 c1 96 ff ff       	call   c000fd3b <malloc>
c001667a:	83 c4 10             	add    esp,0x10
c001667d:	89 c3                	mov    ebx,eax
c001667f:	83 ec 08             	sub    esp,0x8
c0016682:	6a 00                	push   0x0
c0016684:	53                   	push   ebx
c0016685:	e8 b8 da ff ff       	call   c0014142 <VAS::VAS(bool)>
c001668a:	83 c4 10             	add    esp,0x10
c001668d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016691:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001669b:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00166a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166ad:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00166b3:	e8 4b ac ff ff       	call   c0011303 <KeInitSignals()>
c00166b8:	89 c2                	mov    edx,eax
c00166ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166be:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c00166c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166c8:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00166ce:	85 c0                	test   eax,eax
c00166d0:	74 42                	je     c0016714 <Process::Process(char const*, Process*, char**)+0x130>
c00166d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166d6:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00166dc:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00166e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e6:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c00166ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166f0:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00166f6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00166fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016700:	05 0c 01 00 00       	add    eax,0x10c
c0016705:	83 ec 08             	sub    esp,0x8
c0016708:	52                   	push   edx
c0016709:	50                   	push   eax
c001670a:	e8 31 9f fe ff       	call   c0000640 <strcpy>
c001670f:	83 c4 10             	add    esp,0x10
c0016712:	eb 7c                	jmp    c0016790 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016714:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001671c:	83 ec 0c             	sub    esp,0xc
c001671f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016723:	e8 13 96 ff ff       	call   c000fd3b <malloc>
c0016728:	83 c4 10             	add    esp,0x10
c001672b:	89 c3                	mov    ebx,eax
c001672d:	83 ec 08             	sub    esp,0x8
c0016730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016734:	53                   	push   ebx
c0016735:	e8 ae c5 ff ff       	call   c0012ce8 <VgaText::VgaText(char const*)>
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016741:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016747:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001674b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016751:	83 ec 0c             	sub    esp,0xc
c0016754:	50                   	push   eax
c0016755:	e8 e4 bd ff ff       	call   c001253e <addToTerminalCycle(VgaText*)>
c001675a:	83 c4 10             	add    esp,0x10
c001675d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016761:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016767:	83 ec 0c             	sub    esp,0xc
c001676a:	50                   	push   eax
c001676b:	e8 3f c0 ff ff       	call   c00127af <setActiveTerminal(VgaText*)>
c0016770:	83 c4 10             	add    esp,0x10
c0016773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016777:	05 0c 01 00 00       	add    eax,0x10c
c001677c:	83 ec 08             	sub    esp,0x8
c001677f:	68 68 9b 02 c0       	push   0xc0029b68
c0016784:	50                   	push   eax
c0016785:	e8 b6 9e fe ff       	call   c0000640 <strcpy>
c001678a:	83 c4 10             	add    esp,0x10
c001678d:	8d 76 00             	lea    esi,[esi+0x0]
c0016790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016794:	83 c0 0c             	add    eax,0xc
c0016797:	83 ec 08             	sub    esp,0x8
c001679a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001679e:	50                   	push   eax
c001679f:	e8 9c 9e fe ff       	call   c0000640 <strcpy>
c00167a4:	83 c4 10             	add    esp,0x10
c00167a7:	83 ec 08             	sub    esp,0x8
c00167aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00167ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167b2:	e8 c1 fd ff ff       	call   c0016578 <Process::addArgs(char**)>
c00167b7:	83 c4 10             	add    esp,0x10
c00167ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167be:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c00167c4:	83 e2 7f             	and    edx,0x7f
c00167c7:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c00167cd:	83 ec 08             	sub    esp,0x8
c00167d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167d8:	e8 02 f1 ff ff       	call   c00158df <Thr::loadProgramIntoMemory(Process*, char const*)>
c00167dd:	83 c4 10             	add    esp,0x10
c00167e0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00167e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00167e8:	83 f0 01             	xor    eax,0x1
c00167eb:	88 c2                	mov    dl,al
c00167ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f1:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c00167f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00167fd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016802:	52                   	push   edx
c0016803:	50                   	push   eax
c0016804:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016808:	68 d4 9b 02 c0       	push   0xc0029bd4
c001680d:	e8 6a 07 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016812:	83 c4 10             	add    esp,0x10
c0016815:	90                   	nop
c0016816:	83 c4 14             	add    esp,0x14
c0016819:	5b                   	pop    ebx
c001681a:	5e                   	pop    esi
c001681b:	c3                   	ret    

c001681c <Process::Process(bool, char const*, Process*, char**)>:
c001681c:	56                   	push   esi
c001681d:	53                   	push   ebx
c001681e:	83 ec 24             	sub    esp,0x24
c0016821:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016825:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016829:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001682d:	05 0c 02 00 00       	add    eax,0x20c
c0016832:	bb 07 00 00 00       	mov    ebx,0x7
c0016837:	89 c6                	mov    esi,eax
c0016839:	8d 76 00             	lea    esi,[esi+0x0]
c001683c:	85 db                	test   ebx,ebx
c001683e:	78 14                	js     c0016854 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016840:	83 ec 0c             	sub    esp,0xc
c0016843:	56                   	push   esi
c0016844:	e8 8b 08 01 00       	call   c00270d4 <ThreadControlBlock::ThreadControlBlock()>
c0016849:	83 c4 10             	add    esp,0x10
c001684c:	83 c6 73             	add    esi,0x73
c001684f:	83 eb 01             	sub    ebx,0x1
c0016852:	eb e8                	jmp    c001683c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016854:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016858:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c001685f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016863:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001686a:	83 ec 0c             	sub    esp,0xc
c001686d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016871:	e8 0a 82 ff ff       	call   c000ea80 <KeNewProcessEnv(Process*)>
c0016876:	83 c4 10             	add    esp,0x10
c0016879:	89 c2                	mov    edx,eax
c001687b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001687f:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016885:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016889:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016892:	a1 1c c7 02 c0       	mov    eax,ds:0xc002c71c
c0016897:	8d 50 01             	lea    edx,[eax+0x1]
c001689a:	89 15 1c c7 02 c0    	mov    DWORD PTR ds:0xc002c71c,edx
c00168a0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168a4:	89 02                	mov    DWORD PTR [edx],eax
c00168a6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00168ae:	83 ec 0c             	sub    esp,0xc
c00168b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00168b5:	e8 81 94 ff ff       	call   c000fd3b <malloc>
c00168ba:	83 c4 10             	add    esp,0x10
c00168bd:	89 c3                	mov    ebx,eax
c00168bf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00168c4:	83 ec 08             	sub    esp,0x8
c00168c7:	50                   	push   eax
c00168c8:	53                   	push   ebx
c00168c9:	e8 74 d8 ff ff       	call   c0014142 <VAS::VAS(bool)>
c00168ce:	83 c4 10             	add    esp,0x10
c00168d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168d5:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00168db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168df:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00168e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168ed:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00168f1:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00168f7:	e8 07 aa ff ff       	call   c0011303 <KeInitSignals()>
c00168fc:	89 c2                	mov    edx,eax
c00168fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016902:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016908:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001690c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016912:	85 c0                	test   eax,eax
c0016914:	74 42                	je     c0016958 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016916:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001691a:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016920:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016926:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001692a:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016930:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016934:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001693a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016940:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016944:	05 0c 01 00 00       	add    eax,0x10c
c0016949:	83 ec 08             	sub    esp,0x8
c001694c:	52                   	push   edx
c001694d:	50                   	push   eax
c001694e:	e8 ed 9c fe ff       	call   c0000640 <strcpy>
c0016953:	83 c4 10             	add    esp,0x10
c0016956:	eb 7c                	jmp    c00169d4 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016958:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016960:	83 ec 0c             	sub    esp,0xc
c0016963:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016967:	e8 cf 93 ff ff       	call   c000fd3b <malloc>
c001696c:	83 c4 10             	add    esp,0x10
c001696f:	89 c3                	mov    ebx,eax
c0016971:	83 ec 08             	sub    esp,0x8
c0016974:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016978:	53                   	push   ebx
c0016979:	e8 6a c3 ff ff       	call   c0012ce8 <VgaText::VgaText(char const*)>
c001697e:	83 c4 10             	add    esp,0x10
c0016981:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016985:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c001698b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001698f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016995:	83 ec 0c             	sub    esp,0xc
c0016998:	50                   	push   eax
c0016999:	e8 a0 bb ff ff       	call   c001253e <addToTerminalCycle(VgaText*)>
c001699e:	83 c4 10             	add    esp,0x10
c00169a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169a5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00169ab:	83 ec 0c             	sub    esp,0xc
c00169ae:	50                   	push   eax
c00169af:	e8 fb bd ff ff       	call   c00127af <setActiveTerminal(VgaText*)>
c00169b4:	83 c4 10             	add    esp,0x10
c00169b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169bb:	05 0c 01 00 00       	add    eax,0x10c
c00169c0:	83 ec 08             	sub    esp,0x8
c00169c3:	68 68 9b 02 c0       	push   0xc0029b68
c00169c8:	50                   	push   eax
c00169c9:	e8 72 9c fe ff       	call   c0000640 <strcpy>
c00169ce:	83 c4 10             	add    esp,0x10
c00169d1:	8d 76 00             	lea    esi,[esi+0x0]
c00169d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169d8:	83 c0 0c             	add    eax,0xc
c00169db:	83 ec 08             	sub    esp,0x8
c00169de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169e2:	50                   	push   eax
c00169e3:	e8 58 9c fe ff       	call   c0000640 <strcpy>
c00169e8:	83 c4 10             	add    esp,0x10
c00169eb:	83 ec 08             	sub    esp,0x8
c00169ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00169f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00169f6:	e8 7d fb ff ff       	call   c0016578 <Process::addArgs(char**)>
c00169fb:	83 c4 10             	add    esp,0x10
c00169fe:	90                   	nop
c00169ff:	83 c4 24             	add    esp,0x24
c0016a02:	5b                   	pop    ebx
c0016a03:	5e                   	pop    esi
c0016a04:	c3                   	ret    
c0016a05:	8d 76 00             	lea    esi,[esi+0x0]

c0016a08 <taskStartupFunction>:
c0016a08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a0d:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016a10:	c3                   	ret    
c0016a11:	8d 76 00             	lea    esi,[esi+0x0]

c0016a14 <KeDisablePreemption()>:
c0016a14:	a1 0c 33 03 c0       	mov    eax,ds:0xc003330c
c0016a19:	85 c0                	test   eax,eax
c0016a1b:	75 13                	jne    c0016a30 <KeDisablePreemption()+0x1c>
c0016a1d:	8a 15 0c 31 03 c0    	mov    dl,BYTE PTR ds:0xc003310c
c0016a23:	c6 05 0c 31 03 c0 00 	mov    BYTE PTR ds:0xc003310c,0x0
c0016a2a:	88 15 08 33 03 c0    	mov    BYTE PTR ds:0xc0033308,dl
c0016a30:	83 c0 01             	add    eax,0x1
c0016a33:	a3 0c 33 03 c0       	mov    ds:0xc003330c,eax
c0016a38:	c3                   	ret    
c0016a39:	8d 76 00             	lea    esi,[esi+0x0]

c0016a3c <KeRestorePreemption()>:
c0016a3c:	a1 0c 33 03 c0       	mov    eax,ds:0xc003330c
c0016a41:	83 e8 01             	sub    eax,0x1
c0016a44:	a3 0c 33 03 c0       	mov    ds:0xc003330c,eax
c0016a49:	75 0d                	jne    c0016a58 <KeRestorePreemption()+0x1c>
c0016a4b:	a0 08 33 03 c0       	mov    al,ds:0xc0033308
c0016a50:	a2 0c 31 03 c0       	mov    ds:0xc003310c,al
c0016a55:	8d 76 00             	lea    esi,[esi+0x0]
c0016a58:	c3                   	ret    
c0016a59:	90                   	nop
c0016a5a:	66 90                	xchg   ax,ax

c0016a5c <Process::createThread(void (*)(void*), void*, int)>:
c0016a5c:	55                   	push   ebp
c0016a5d:	31 c9                	xor    ecx,ecx
c0016a5f:	57                   	push   edi
c0016a60:	56                   	push   esi
c0016a61:	53                   	push   ebx
c0016a62:	83 ec 0c             	sub    esp,0xc
c0016a65:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016a69:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016a70:	89 f2                	mov    edx,esi
c0016a72:	66 90                	xchg   ax,ax
c0016a74:	0f b7 c2             	movzx  eax,dx
c0016a77:	80 e2 01             	and    dl,0x1
c0016a7a:	74 18                	je     c0016a94 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016a7c:	d1 f8                	sar    eax,1
c0016a7e:	83 c1 01             	add    ecx,0x1
c0016a81:	89 c2                	mov    edx,eax
c0016a83:	83 f9 10             	cmp    ecx,0x10
c0016a86:	75 ec                	jne    c0016a74 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016a88:	83 c4 0c             	add    esp,0xc
c0016a8b:	31 db                	xor    ebx,ebx
c0016a8d:	89 d8                	mov    eax,ebx
c0016a8f:	5b                   	pop    ebx
c0016a90:	5e                   	pop    esi
c0016a91:	5f                   	pop    edi
c0016a92:	5d                   	pop    ebp
c0016a93:	c3                   	ret    
c0016a94:	b8 01 00 00 00       	mov    eax,0x1
c0016a99:	d3 e0                	shl    eax,cl
c0016a9b:	09 c6                	or     esi,eax
c0016a9d:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016aa0:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016aa7:	01 c0                	add    eax,eax
c0016aa9:	01 c8                	add    eax,ecx
c0016aab:	01 c0                	add    eax,eax
c0016aad:	01 c8                	add    eax,ecx
c0016aaf:	8d 04 80             	lea    eax,[eax+eax*4]
c0016ab2:	01 d8                	add    eax,ebx
c0016ab4:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016abb:	75 0b                	jne    c0016ac8 <Process::createThread(void (*)(void*), void*, int)+0x6c>
c0016abd:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016ac7:	90                   	nop
c0016ac8:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016ace:	83 ec 0c             	sub    esp,0xc
c0016ad1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016ad4:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016ad7:	01 c0                	add    eax,eax
c0016ad9:	01 c8                	add    eax,ecx
c0016adb:	01 c0                	add    eax,eax
c0016add:	01 c8                	add    eax,ecx
c0016adf:	8d 3c 80             	lea    edi,[eax+eax*4]
c0016ae2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016ae5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016aeb:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016af1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016af5:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016afb:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016b01:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016b07:	89 ca                	mov    edx,ecx
c0016b09:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016b10:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016b14:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016b1e:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016b28:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016b2f:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016b36:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016b3d:	f7 da                	neg    edx
c0016b3f:	c1 e2 15             	shl    edx,0x15
c0016b42:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016b48:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016b4e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016b52:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016b5c:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016b62:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016b68:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016b6e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016b78:	83 e2 80             	and    edx,0xffffff80
c0016b7b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016b85:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016b8b:	68 00 01 00 00       	push   0x100
c0016b90:	e8 a6 91 ff ff       	call   c000fd3b <malloc>
c0016b95:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016b98:	58                   	pop    eax
c0016b99:	5a                   	pop    edx
c0016b9a:	53                   	push   ebx
c0016b9b:	68 6c 9b 02 c0       	push   0xc0029b6c
c0016ba0:	e8 d7 03 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016ba5:	59                   	pop    ecx
c0016ba6:	5e                   	pop    esi
c0016ba7:	53                   	push   ebx
c0016ba8:	68 4c 33 03 c0       	push   0xc003334c
c0016bad:	e8 ce 00 01 00       	call   c0026c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016bb2:	89 d8                	mov    eax,ebx
c0016bb4:	83 c4 10             	add    esp,0x10
c0016bb7:	83 c4 0c             	add    esp,0xc
c0016bba:	5b                   	pop    ebx
c0016bbb:	5e                   	pop    esi
c0016bbc:	5f                   	pop    edi
c0016bbd:	5d                   	pop    ebp
c0016bbe:	c3                   	ret    
c0016bbf:	90                   	nop

c0016bc0 <Process::createUserThread()>:
c0016bc0:	83 ec 0c             	sub    esp,0xc
c0016bc3:	68 80 00 00 00       	push   0x80
c0016bc8:	6a 00                	push   0x0
c0016bca:	68 5c 64 01 c0       	push   0xc001645c
c0016bcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bd3:	50                   	push   eax
c0016bd4:	e8 83 fe ff ff       	call   c0016a5c <Process::createThread(void (*)(void*), void*, int)>
c0016bd9:	83 c4 1c             	add    esp,0x1c
c0016bdc:	c3                   	ret    
c0016bdd:	8d 76 00             	lea    esi,[esi+0x0]

c0016be0 <setupMultitasking(void (*)())>:
c0016be0:	56                   	push   esi
c0016be1:	53                   	push   ebx
c0016be2:	83 ec 04             	sub    esp,0x4
c0016be5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016be9:	eb 11                	jmp    c0016bfc <setupMultitasking(void (*)())+0x1c>
c0016beb:	90                   	nop
c0016bec:	83 ec 0c             	sub    esp,0xc
c0016bef:	68 4c 33 03 c0       	push   0xc003334c
c0016bf4:	e8 cb ff 00 00       	call   c0026bc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016bf9:	83 c4 10             	add    esp,0x10
c0016bfc:	83 ec 0c             	sub    esp,0xc
c0016bff:	68 4c 33 03 c0       	push   0xc003334c
c0016c04:	e8 97 ff 00 00       	call   c0026ba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	84 c0                	test   al,al
c0016c0e:	74 dc                	je     c0016bec <setupMultitasking(void (*)())+0xc>
c0016c10:	83 ec 0c             	sub    esp,0xc
c0016c13:	68 c4 07 00 00       	push   0x7c4
c0016c18:	e8 1e 91 ff ff       	call   c000fd3b <malloc>
c0016c1d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016c24:	89 c3                	mov    ebx,eax
c0016c26:	6a 00                	push   0x0
c0016c28:	68 80 9b 02 c0       	push   0xc0029b80
c0016c2d:	6a 01                	push   0x1
c0016c2f:	50                   	push   eax
c0016c30:	e8 e7 fb ff ff       	call   c001681c <Process::Process(bool, char const*, Process*, char**)>
c0016c35:	83 c4 14             	add    esp,0x14
c0016c38:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016c3e:	89 1d 58 33 03 c0    	mov    DWORD PTR ds:0xc0033358,ebx
c0016c44:	50                   	push   eax
c0016c45:	e8 65 bb ff ff       	call   c00127af <setActiveTerminal(VgaText*)>
c0016c4a:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016c51:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016c5b:	83 c8 01             	or     eax,0x1
c0016c5e:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016c65:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016c6b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016c6e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016c78:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016c7e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016c84:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016c8e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016c98:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016ca2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016ca8:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016cb2:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016cb8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016cc2:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016cc9:	e8 6d 90 ff ff       	call   c000fd3b <malloc>
c0016cce:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016cd8:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016cde:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c0016ce5:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c0016cec:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c0016cf3:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0016cfa:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016d00:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016d06:	5a                   	pop    edx
c0016d07:	59                   	pop    ecx
c0016d08:	68 68 9b 02 c0       	push   0xc0029b68
c0016d0d:	50                   	push   eax
c0016d0e:	e8 2d 99 fe ff       	call   c0000640 <strcpy>
c0016d13:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016d1a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016d1e:	83 c4 14             	add    esp,0x14
c0016d21:	5b                   	pop    ebx
c0016d22:	5e                   	pop    esi
c0016d23:	e9 41 95 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0016d28 <schedule()>:
c0016d28:	8b 15 2c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003332c
c0016d2e:	85 d2                	test   edx,edx
c0016d30:	74 0e                	je     c0016d40 <schedule()+0x18>
c0016d32:	c7 05 28 33 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x1
c0016d3c:	c3                   	ret    
c0016d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d40:	53                   	push   ebx
c0016d41:	83 ec 14             	sub    esp,0x14
c0016d44:	68 4c 33 03 c0       	push   0xc003334c
c0016d49:	e8 52 fe 00 00       	call   c0026ba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d4e:	83 c4 10             	add    esp,0x10
c0016d51:	84 c0                	test   al,al
c0016d53:	75 3f                	jne    c0016d94 <schedule()+0x6c>
c0016d55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d5a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016d5d:	83 fa 01             	cmp    edx,0x1
c0016d60:	74 3a                	je     c0016d9c <schedule()+0x74>
c0016d62:	66 90                	xchg   ax,ax
c0016d64:	83 ec 0c             	sub    esp,0xc
c0016d67:	68 4c 33 03 c0       	push   0xc003334c
c0016d6c:	e8 4b fe 00 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d71:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c0016d78:	89 c3                	mov    ebx,eax
c0016d7a:	e8 45 fe 00 00       	call   c0026bc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016d7f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016d86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d89:	e8 2a f7 ff ff       	call   c00164b8 <switchToThread(ThreadControlBlock*)>
c0016d8e:	83 c4 10             	add    esp,0x10
c0016d91:	8d 76 00             	lea    esi,[esi+0x0]
c0016d94:	83 c4 08             	add    esp,0x8
c0016d97:	5b                   	pop    ebx
c0016d98:	c3                   	ret    
c0016d99:	8d 76 00             	lea    esi,[esi+0x0]
c0016d9c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016da3:	83 ec 08             	sub    esp,0x8
c0016da6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dab:	50                   	push   eax
c0016dac:	68 4c 33 03 c0       	push   0xc003334c
c0016db1:	e8 ca fe 00 00       	call   c0026c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	eb a9                	jmp    c0016d64 <schedule()+0x3c>
c0016dbb:	90                   	nop

c0016dbc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016dbc:	83 ec 0c             	sub    esp,0xc
c0016dbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016dc8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016dcb:	e8 58 ff ff ff       	call   c0016d28 <schedule()>
c0016dd0:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0016dd8:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0016ddd:	85 c0                	test   eax,eax
c0016ddf:	75 03                	jne    c0016de4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016de1:	fb                   	sti    
c0016de2:	66 90                	xchg   ax,ax
c0016de4:	83 c4 0c             	add    esp,0xc
c0016de7:	c3                   	ret    

c0016de8 <blockTask(TaskState)>:
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	fa                   	cli    
c0016dec:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0016df1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016df5:	83 c0 01             	add    eax,0x1
c0016df8:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0016dfd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e02:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016e05:	e8 1e ff ff ff       	call   c0016d28 <schedule()>
c0016e0a:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0016e12:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0016e18:	85 d2                	test   edx,edx
c0016e1a:	75 04                	jne    c0016e20 <blockTask(TaskState)+0x38>
c0016e1c:	fb                   	sti    
c0016e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e20:	83 c4 0c             	add    esp,0xc
c0016e23:	c3                   	ret    

c0016e24 <waitTask(int, int*, int)>:
c0016e24:	83 ec 18             	sub    esp,0x18
c0016e27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e30:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016e33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e3c:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0016e3f:	6a 07                	push   0x7
c0016e41:	e8 a2 ff ff ff       	call   c0016de8 <blockTask(TaskState)>
c0016e46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e4b:	83 c4 10             	add    esp,0x10
c0016e4e:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0016e51:	85 d2                	test   edx,edx
c0016e53:	74 0b                	je     c0016e60 <waitTask(int, int*, int)+0x3c>
c0016e55:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0016e58:	89 02                	mov    DWORD PTR [edx],eax
c0016e5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e5f:	90                   	nop
c0016e60:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0016e63:	83 c4 0c             	add    esp,0xc
c0016e66:	c3                   	ret    
c0016e67:	90                   	nop

c0016e68 <milliTenthSleepUntil(unsigned long long)>:
c0016e68:	83 ec 0c             	sub    esp,0xc
c0016e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016e73:	3b 05 50 2b 03 c0    	cmp    eax,DWORD PTR ds:0xc0032b50
c0016e79:	89 d1                	mov    ecx,edx
c0016e7b:	1b 0d 54 2b 03 c0    	sbb    ecx,DWORD PTR ds:0xc0032b54
c0016e81:	73 05                	jae    c0016e88 <milliTenthSleepUntil(unsigned long long)+0x20>
c0016e83:	90                   	nop
c0016e84:	83 c4 0c             	add    esp,0xc
c0016e87:	c3                   	ret    
c0016e88:	fa                   	cli    
c0016e89:	8b 0d 30 33 03 c0    	mov    ecx,DWORD PTR ds:0xc0033330
c0016e8f:	83 ec 08             	sub    esp,0x8
c0016e92:	83 c1 01             	add    ecx,0x1
c0016e95:	89 0d 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,ecx
c0016e9b:	8b 0d 2c 33 03 c0    	mov    ecx,DWORD PTR ds:0xc003332c
c0016ea1:	83 c1 01             	add    ecx,0x1
c0016ea4:	89 0d 2c 33 03 c0    	mov    DWORD PTR ds:0xc003332c,ecx
c0016eaa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016eb0:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0016eb3:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0016eb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ebb:	50                   	push   eax
c0016ebc:	68 40 33 03 c0       	push   0xc0033340
c0016ec1:	e8 ba fd 00 00       	call   c0026c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ec6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016ecd:	e8 16 ff ff ff       	call   c0016de8 <blockTask(TaskState)>
c0016ed2:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c0016ed7:	83 c4 10             	add    esp,0x10
c0016eda:	83 e8 01             	sub    eax,0x1
c0016edd:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0016ee2:	85 c0                	test   eax,eax
c0016ee4:	75 0a                	jne    c0016ef0 <milliTenthSleepUntil(unsigned long long)+0x88>
c0016ee6:	8b 15 28 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033328
c0016eec:	85 d2                	test   edx,edx
c0016eee:	75 18                	jne    c0016f08 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0016ef0:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0016ef8:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0016efd:	85 c0                	test   eax,eax
c0016eff:	75 83                	jne    c0016e84 <milliTenthSleepUntil(unsigned long long)+0x1c>
c0016f01:	fb                   	sti    
c0016f02:	83 c4 0c             	add    esp,0xc
c0016f05:	c3                   	ret    
c0016f06:	66 90                	xchg   ax,ax
c0016f08:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c0016f12:	e8 11 fe ff ff       	call   c0016d28 <schedule()>
c0016f17:	eb d7                	jmp    c0016ef0 <milliTenthSleepUntil(unsigned long long)+0x88>
c0016f19:	8d 76 00             	lea    esi,[esi+0x0]

c0016f1c <milliTenthSleep(unsigned long long)>:
c0016f1c:	a1 50 2b 03 c0       	mov    eax,ds:0xc0032b50
c0016f21:	8b 15 54 2b 03 c0    	mov    edx,DWORD PTR ds:0xc0032b54
c0016f27:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0016f2b:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0016f2f:	e9 34 ff ff ff       	jmp    c0016e68 <milliTenthSleepUntil(unsigned long long)>

c0016f34 <sleep(unsigned long long)>:
c0016f34:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0016f3c:	b8 10 27 00 00       	mov    eax,0x2710
c0016f41:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0016f45:	01 ca                	add    edx,ecx
c0016f47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016f4f:	eb cb                	jmp    c0016f1c <milliTenthSleep(unsigned long long)>
c0016f51:	8d 76 00             	lea    esi,[esi+0x0]

c0016f54 <sleep(unsigned int)>:
c0016f54:	83 ec 14             	sub    esp,0x14
c0016f57:	b8 10 27 00 00       	mov    eax,0x2710
c0016f5c:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0016f60:	52                   	push   edx
c0016f61:	50                   	push   eax
c0016f62:	e8 b5 ff ff ff       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c0016f67:	83 c4 1c             	add    esp,0x1c
c0016f6a:	c3                   	ret    
c0016f6b:	90                   	nop

c0016f6c <milliTenthSleep(unsigned int)>:
c0016f6c:	83 ec 14             	sub    esp,0x14
c0016f6f:	31 d2                	xor    edx,edx
c0016f71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016f75:	03 05 50 2b 03 c0    	add    eax,DWORD PTR ds:0xc0032b50
c0016f7b:	13 15 54 2b 03 c0    	adc    edx,DWORD PTR ds:0xc0032b54
c0016f81:	52                   	push   edx
c0016f82:	50                   	push   eax
c0016f83:	e8 e0 fe ff ff       	call   c0016e68 <milliTenthSleepUntil(unsigned long long)>
c0016f88:	83 c4 1c             	add    esp,0x1c
c0016f8b:	c3                   	ret    

c0016f8c <taskReturned>:
c0016f8c:	83 ec 18             	sub    esp,0x18
c0016f8f:	68 08 9c 02 c0       	push   0xc0029c08
c0016f94:	e8 f7 91 ff ff       	call   c0010190 <KePanic(char const*)>
c0016f99:	83 c4 10             	add    esp,0x10
c0016f9c:	83 ec 0c             	sub    esp,0xc
c0016f9f:	6a 02                	push   0x2
c0016fa1:	e8 42 fe ff ff       	call   c0016de8 <blockTask(TaskState)>
c0016fa6:	fa                   	cli    
c0016fa7:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0016fac:	83 c0 01             	add    eax,0x1
c0016faf:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0016fb4:	e8 6f fd ff ff       	call   c0016d28 <schedule()>
c0016fb9:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0016fc1:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0016fc7:	83 c4 10             	add    esp,0x10
c0016fca:	85 d2                	test   edx,edx
c0016fcc:	75 ce                	jne    c0016f9c <taskReturned+0x10>
c0016fce:	fb                   	sti    
c0016fcf:	eb cb                	jmp    c0016f9c <taskReturned+0x10>
c0016fd1:	8d 76 00             	lea    esi,[esi+0x0]

c0016fd4 <KeProcessFromPID(int)>:
c0016fd4:	57                   	push   edi
c0016fd5:	56                   	push   esi
c0016fd6:	53                   	push   ebx
c0016fd7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fdb:	fa                   	cli    
c0016fdc:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0016fe1:	83 ec 0c             	sub    esp,0xc
c0016fe4:	83 c0 01             	add    eax,0x1
c0016fe7:	68 4c 33 03 c0       	push   0xc003334c
c0016fec:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0016ff1:	e8 c6 fb 00 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ff6:	83 c4 10             	add    esp,0x10
c0016ff9:	89 c7                	mov    edi,eax
c0016ffb:	eb 17                	jmp    c0017014 <KeProcessFromPID(int)+0x40>
c0016ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0017000:	83 ec 0c             	sub    esp,0xc
c0017003:	68 4c 33 03 c0       	push   0xc003334c
c0017008:	e8 af fb 00 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001700d:	83 c4 10             	add    esp,0x10
c0017010:	39 f8                	cmp    eax,edi
c0017012:	74 50                	je     c0017064 <KeProcessFromPID(int)+0x90>
c0017014:	83 ec 0c             	sub    esp,0xc
c0017017:	68 4c 33 03 c0       	push   0xc003334c
c001701c:	e8 9b fb 00 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017021:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c0017028:	89 c3                	mov    ebx,eax
c001702a:	e8 95 fb 00 00       	call   c0026bc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001702f:	59                   	pop    ecx
c0017030:	58                   	pop    eax
c0017031:	53                   	push   ebx
c0017032:	68 4c 33 03 c0       	push   0xc003334c
c0017037:	e8 44 fc 00 00       	call   c0026c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001703c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001703f:	83 c4 10             	add    esp,0x10
c0017042:	39 30                	cmp    DWORD PTR [eax],esi
c0017044:	75 ba                	jne    c0017000 <KeProcessFromPID(int)+0x2c>
c0017046:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001704e:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0017054:	85 d2                	test   edx,edx
c0017056:	74 08                	je     c0017060 <KeProcessFromPID(int)+0x8c>
c0017058:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001705b:	5b                   	pop    ebx
c001705c:	5e                   	pop    esi
c001705d:	5f                   	pop    edi
c001705e:	c3                   	ret    
c001705f:	90                   	nop
c0017060:	fb                   	sti    
c0017061:	eb f5                	jmp    c0017058 <KeProcessFromPID(int)+0x84>
c0017063:	90                   	nop
c0017064:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001706c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017071:	85 c0                	test   eax,eax
c0017073:	75 07                	jne    c001707c <KeProcessFromPID(int)+0xa8>
c0017075:	fb                   	sti    
c0017076:	31 c0                	xor    eax,eax
c0017078:	5b                   	pop    ebx
c0017079:	5e                   	pop    esi
c001707a:	5f                   	pop    edi
c001707b:	c3                   	ret    
c001707c:	5b                   	pop    ebx
c001707d:	31 c0                	xor    eax,eax
c001707f:	5e                   	pop    esi
c0017080:	5f                   	pop    edi
c0017081:	c3                   	ret    
c0017082:	66 90                	xchg   ax,ax

c0017084 <unblockTask(ThreadControlBlock*)>:
c0017084:	53                   	push   ebx
c0017085:	83 ec 08             	sub    esp,0x8
c0017088:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001708c:	fa                   	cli    
c001708d:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0017093:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017096:	83 c2 01             	add    edx,0x1
c0017099:	85 c0                	test   eax,eax
c001709b:	89 15 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,edx
c00170a1:	74 6d                	je     c0017110 <unblockTask(ThreadControlBlock*)+0x8c>
c00170a3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00170a6:	83 f8 01             	cmp    eax,0x1
c00170a9:	74 39                	je     c00170e4 <unblockTask(ThreadControlBlock*)+0x60>
c00170ab:	83 ec 0c             	sub    esp,0xc
c00170ae:	68 4c 33 03 c0       	push   0xc003334c
c00170b3:	e8 04 fb 00 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00170b8:	83 c4 10             	add    esp,0x10
c00170bb:	85 c0                	test   eax,eax
c00170bd:	75 1d                	jne    c00170dc <unblockTask(ThreadControlBlock*)+0x58>
c00170bf:	eb 63                	jmp    c0017124 <unblockTask(ThreadControlBlock*)+0xa0>
c00170c1:	8d 76 00             	lea    esi,[esi+0x0]
c00170c4:	83 ec 08             	sub    esp,0x8
c00170c7:	50                   	push   eax
c00170c8:	68 4c 33 03 c0       	push   0xc003334c
c00170cd:	e8 f6 ff 00 00       	call   c00270c8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00170d2:	83 c4 10             	add    esp,0x10
c00170d5:	85 c0                	test   eax,eax
c00170d7:	74 4b                	je     c0017124 <unblockTask(ThreadControlBlock*)+0xa0>
c00170d9:	8d 76 00             	lea    esi,[esi+0x0]
c00170dc:	39 c3                	cmp    ebx,eax
c00170de:	75 e4                	jne    c00170c4 <unblockTask(ThreadControlBlock*)+0x40>
c00170e0:	eb 12                	jmp    c00170f4 <unblockTask(ThreadControlBlock*)+0x70>
c00170e2:	66 90                	xchg   ax,ax
c00170e4:	83 ec 0c             	sub    esp,0xc
c00170e7:	68 9e 9b 02 c0       	push   0xc0029b9e
c00170ec:	e8 8b fe fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00170f1:	83 c4 10             	add    esp,0x10
c00170f4:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00170fc:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017101:	85 c0                	test   eax,eax
c0017103:	75 03                	jne    c0017108 <unblockTask(ThreadControlBlock*)+0x84>
c0017105:	fb                   	sti    
c0017106:	66 90                	xchg   ax,ax
c0017108:	83 c4 08             	add    esp,0x8
c001710b:	5b                   	pop    ebx
c001710c:	c3                   	ret    
c001710d:	8d 76 00             	lea    esi,[esi+0x0]
c0017110:	83 ec 0c             	sub    esp,0xc
c0017113:	68 87 9b 02 c0       	push   0xc0029b87
c0017118:	e8 5f fe fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001711d:	83 c4 10             	add    esp,0x10
c0017120:	eb d2                	jmp    c00170f4 <unblockTask(ThreadControlBlock*)+0x70>
c0017122:	66 90                	xchg   ax,ax
c0017124:	83 ec 08             	sub    esp,0x8
c0017127:	53                   	push   ebx
c0017128:	68 4c 33 03 c0       	push   0xc003334c
c001712d:	e8 4e fb 00 00       	call   c0026c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017132:	83 c4 10             	add    esp,0x10
c0017135:	eb bd                	jmp    c00170f4 <unblockTask(ThreadControlBlock*)+0x70>
c0017137:	90                   	nop

c0017138 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017138:	55                   	push   ebp
c0017139:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001713e:	57                   	push   edi
c001713f:	56                   	push   esi
c0017140:	53                   	push   ebx
c0017141:	83 ec 1c             	sub    esp,0x1c
c0017144:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017148:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001714b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001714e:	d3 c0                	rol    eax,cl
c0017150:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c0017157:	21 c8                	and    eax,ecx
c0017159:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017160:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017163:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c001716b:	0f 85 b7 01 00 00    	jne    c0017328 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017171:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0017177:	85 ed                	test   ebp,ebp
c0017179:	7e 29                	jle    c00171a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c001717b:	31 f6                	xor    esi,esi
c001717d:	8d 76 00             	lea    esi,[esi+0x0]
c0017180:	83 ec 0c             	sub    esp,0xc
c0017183:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c001718a:	83 c6 01             	add    esi,0x1
c001718d:	57                   	push   edi
c001718e:	e8 b8 8b ff ff       	call   c000fd4b <free>
c0017193:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017196:	83 c4 10             	add    esp,0x10
c0017199:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c001719f:	7f df                	jg     c0017180 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c00171a1:	8d 76 00             	lea    esi,[esi+0x0]
c00171a4:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00171ae:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00171b1:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c00171b7:	89 f7                	mov    edi,esi
c00171b9:	85 ed                	test   ebp,ebp
c00171bb:	74 1b                	je     c00171d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00171bd:	83 ec 0c             	sub    esp,0xc
c00171c0:	55                   	push   ebp
c00171c1:	e8 d6 77 ff ff       	call   c000e99c <EnvVarContainer::~EnvVarContainer()>
c00171c6:	59                   	pop    ecx
c00171c7:	5e                   	pop    esi
c00171c8:	6a 0c                	push   0xc
c00171ca:	55                   	push   ebp
c00171cb:	e8 84 66 ff ff       	call   c000d854 <operator delete(void*, unsigned long)>
c00171d0:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00171d3:	83 c4 10             	add    esp,0x10
c00171d6:	89 f7                	mov    edi,esi
c00171d8:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00171de:	85 c0                	test   eax,eax
c00171e0:	0f 84 b6 00 00 00    	je     c001729c <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00171e6:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00171e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00171ed:	31 c9                	xor    ecx,ecx
c00171ef:	eb 17                	jmp    c0017208 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00171f1:	8d 76 00             	lea    esi,[esi+0x0]
c00171f4:	83 c1 01             	add    ecx,0x1
c00171f7:	83 f9 10             	cmp    ecx,0x10
c00171fa:	0f 84 9c 00 00 00    	je     c001729c <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c0017200:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017206:	66 90                	xchg   ax,ax
c0017208:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c001720f:	d3 fa                	sar    edx,cl
c0017211:	80 e2 01             	and    dl,0x1
c0017214:	74 de                	je     c00171f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017216:	8d 14 89             	lea    edx,[ecx+ecx*4]
c0017219:	01 d2                	add    edx,edx
c001721b:	01 ca                	add    edx,ecx
c001721d:	01 d2                	add    edx,edx
c001721f:	01 ca                	add    edx,ecx
c0017221:	8d 14 92             	lea    edx,[edx+edx*4]
c0017224:	01 d0                	add    eax,edx
c0017226:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001722c:	83 fd 07             	cmp    ebp,0x7
c001722f:	75 c3                	jne    c00171f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017231:	05 40 02 00 00       	add    eax,0x240
c0017236:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017239:	83 fd ff             	cmp    ebp,0xffffffff
c001723c:	0f 8c ee 00 00 00    	jl     c0017330 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0017242:	0f 84 ac 01 00 00    	je     c00173f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0017248:	85 ed                	test   ebp,ebp
c001724a:	0f 84 90 01 00 00    	je     c00173e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c0017250:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0017252:	75 a0                	jne    c00171f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017254:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001725a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001725e:	01 d0                	add    eax,edx
c0017260:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017264:	83 ec 0c             	sub    esp,0xc
c0017267:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001726d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017270:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017276:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001727d:	50                   	push   eax
c001727e:	e8 01 fe ff ff       	call   c0017084 <unblockTask(ThreadControlBlock*)>
c0017283:	83 c4 10             	add    esp,0x10
c0017286:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017289:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001728d:	89 f7                	mov    edi,esi
c001728f:	83 c1 01             	add    ecx,0x1
c0017292:	83 f9 10             	cmp    ecx,0x10
c0017295:	0f 85 65 ff ff ff    	jne    c0017200 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001729b:	90                   	nop
c001729c:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c00172a2:	85 c0                	test   eax,eax
c00172a4:	74 62                	je     c0017308 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c00172a6:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c00172ac:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c00172b2:	74 54                	je     c0017308 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c00172b4:	83 ec 0c             	sub    esp,0xc
c00172b7:	68 4c 33 03 c0       	push   0xc003334c
c00172bc:	e8 fb f8 00 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00172c1:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c00172c8:	89 c7                	mov    edi,eax
c00172ca:	e8 d1 f8 00 00       	call   c0026ba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00172cf:	83 c4 10             	add    esp,0x10
c00172d2:	84 c0                	test   al,al
c00172d4:	0f 84 ce 00 00 00    	je     c00173a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c00172da:	66 90                	xchg   ax,ax
c00172dc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172df:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00172e5:	85 d2                	test   edx,edx
c00172e7:	74 0f                	je     c00172f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00172e9:	83 ec 0c             	sub    esp,0xc
c00172ec:	8b 02                	mov    eax,DWORD PTR [edx]
c00172ee:	52                   	push   edx
c00172ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00172f2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172f5:	83 c4 10             	add    esp,0x10
c00172f8:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c0017302:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0017305:	8d 76 00             	lea    esi,[esi+0x0]
c0017308:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c001730e:	85 db                	test   ebx,ebx
c0017310:	74 16                	je     c0017328 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017312:	83 ec 0c             	sub    esp,0xc
c0017315:	53                   	push   ebx
c0017316:	e8 87 c9 ff ff       	call   c0013ca2 <VAS::~VAS()>
c001731b:	58                   	pop    eax
c001731c:	5a                   	pop    edx
c001731d:	6a 14                	push   0x14
c001731f:	53                   	push   ebx
c0017320:	e8 2f 65 ff ff       	call   c000d854 <operator delete(void*, unsigned long)>
c0017325:	83 c4 10             	add    esp,0x10
c0017328:	83 c4 1c             	add    esp,0x1c
c001732b:	5b                   	pop    ebx
c001732c:	5e                   	pop    esi
c001732d:	5f                   	pop    edi
c001732e:	5d                   	pop    ebp
c001732f:	c3                   	ret    
c0017330:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017334:	83 ec 0c             	sub    esp,0xc
c0017337:	68 3c 9c 02 c0       	push   0xc0029c3c
c001733c:	e8 4f 8e ff ff       	call   c0010190 <KePanic(char const*)>
c0017341:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017344:	83 c4 10             	add    esp,0x10
c0017347:	89 f7                	mov    edi,esi
c0017349:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001734d:	e9 a2 fe ff ff       	jmp    c00171f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017352:	66 90                	xchg   ax,ax
c0017354:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001735a:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017360:	75 1e                	jne    c0017380 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0017362:	83 ec 0c             	sub    esp,0xc
c0017365:	68 a4 9c 02 c0       	push   0xc0029ca4
c001736a:	e8 0d fc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001736f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017376:	e8 6d fa ff ff       	call   c0016de8 <blockTask(TaskState)>
c001737b:	83 c4 10             	add    esp,0x10
c001737e:	66 90                	xchg   ax,ax
c0017380:	83 ec 08             	sub    esp,0x8
c0017383:	56                   	push   esi
c0017384:	68 4c 33 03 c0       	push   0xc003334c
c0017389:	e8 f2 f8 00 00       	call   c0026c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001738e:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c0017395:	e8 22 f8 00 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001739a:	83 c4 10             	add    esp,0x10
c001739d:	39 f8                	cmp    eax,edi
c001739f:	0f 84 37 ff ff ff    	je     c00172dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c00173a5:	8d 76 00             	lea    esi,[esi+0x0]
c00173a8:	83 ec 0c             	sub    esp,0xc
c00173ab:	68 4c 33 03 c0       	push   0xc003334c
c00173b0:	e8 07 f8 00 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173b5:	c7 04 24 4c 33 03 c0 	mov    DWORD PTR [esp],0xc003334c
c00173bc:	89 c6                	mov    esi,eax
c00173be:	e8 01 f8 00 00       	call   c0026bc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00173c3:	83 c4 10             	add    esp,0x10
c00173c6:	39 f3                	cmp    ebx,esi
c00173c8:	74 b6                	je     c0017380 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00173ca:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00173cd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173d0:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00173d6:	75 a8                	jne    c0017380 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00173d8:	e9 77 ff ff ff       	jmp    c0017354 <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c00173dd:	8d 76 00             	lea    esi,[esi+0x0]
c00173e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00173e4:	83 ec 0c             	sub    esp,0xc
c00173e7:	68 70 9c 02 c0       	push   0xc0029c70
c00173ec:	e9 4b ff ff ff       	jmp    c001733c <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c00173f1:	8d 76 00             	lea    esi,[esi+0x0]
c00173f4:	8b 36                	mov    esi,DWORD PTR [esi]
c00173f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00173fa:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00173fd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017400:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0017406:	01 d7                	add    edi,edx
c0017408:	89 f8                	mov    eax,edi
c001740a:	e9 51 fe ff ff       	jmp    c0017260 <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c001740f:	90                   	nop

c0017410 <cleanerTaskFunction(void*)>:
c0017410:	53                   	push   ebx
c0017411:	83 ec 08             	sub    esp,0x8
c0017414:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001741c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017421:	85 c0                	test   eax,eax
c0017423:	75 03                	jne    c0017428 <cleanerTaskFunction(void*)+0x18>
c0017425:	fb                   	sti    
c0017426:	66 90                	xchg   ax,ax
c0017428:	fa                   	cli    
c0017429:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001742e:	83 c0 01             	add    eax,0x1
c0017431:	80 3d 14 33 03 c0 00 	cmp    BYTE PTR ds:0xc0033314,0x0
c0017438:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c001743d:	0f 85 c9 00 00 00    	jne    c001750c <cleanerTaskFunction(void*)+0xfc>
c0017443:	83 ec 0c             	sub    esp,0xc
c0017446:	6a 02                	push   0x2
c0017448:	e8 6f f9 ff ff       	call   c0016dbc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001744d:	83 c4 10             	add    esp,0x10
c0017450:	c6 05 14 33 03 c0 00 	mov    BYTE PTR ds:0xc0033314,0x0
c0017457:	fa                   	cli    
c0017458:	8b 0d 30 33 03 c0    	mov    ecx,DWORD PTR ds:0xc0033330
c001745e:	8b 1d 2c 33 03 c0    	mov    ebx,DWORD PTR ds:0xc003332c
c0017464:	83 c1 01             	add    ecx,0x1
c0017467:	83 c3 01             	add    ebx,0x1
c001746a:	89 0d 30 33 03 c0    	mov    DWORD PTR ds:0xc0033330,ecx
c0017470:	89 1d 2c 33 03 c0    	mov    DWORD PTR ds:0xc003332c,ebx
c0017476:	fa                   	cli    
c0017477:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001747c:	83 c0 01             	add    eax,0x1
c001747f:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017484:	eb 2a                	jmp    c00174b0 <cleanerTaskFunction(void*)+0xa0>
c0017486:	66 90                	xchg   ax,ax
c0017488:	83 ec 0c             	sub    esp,0xc
c001748b:	68 34 33 03 c0       	push   0xc0033334
c0017490:	e8 27 f7 00 00       	call   c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017495:	c7 04 24 34 33 03 c0 	mov    DWORD PTR [esp],0xc0033334
c001749c:	89 c3                	mov    ebx,eax
c001749e:	e8 21 f7 00 00       	call   c0026bc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00174a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00174a6:	e8 8d fc ff ff       	call   c0017138 <cleanupTerminatedTask(ThreadControlBlock*)>
c00174ab:	83 c4 10             	add    esp,0x10
c00174ae:	66 90                	xchg   ax,ax
c00174b0:	83 ec 0c             	sub    esp,0xc
c00174b3:	68 34 33 03 c0       	push   0xc0033334
c00174b8:	e8 e3 f6 00 00       	call   c0026ba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00174bd:	83 c4 10             	add    esp,0x10
c00174c0:	84 c0                	test   al,al
c00174c2:	74 c4                	je     c0017488 <cleanerTaskFunction(void*)+0x78>
c00174c4:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00174cc:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c00174d2:	85 d2                	test   edx,edx
c00174d4:	75 02                	jne    c00174d8 <cleanerTaskFunction(void*)+0xc8>
c00174d6:	fb                   	sti    
c00174d7:	90                   	nop
c00174d8:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00174dd:	83 e8 01             	sub    eax,0x1
c00174e0:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c00174e5:	0f 85 29 ff ff ff    	jne    c0017414 <cleanerTaskFunction(void*)+0x4>
c00174eb:	a1 28 33 03 c0       	mov    eax,ds:0xc0033328
c00174f0:	85 c0                	test   eax,eax
c00174f2:	0f 84 1c ff ff ff    	je     c0017414 <cleanerTaskFunction(void*)+0x4>
c00174f8:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c0017502:	e8 21 f8 ff ff       	call   c0016d28 <schedule()>
c0017507:	e9 08 ff ff ff       	jmp    c0017414 <cleanerTaskFunction(void*)+0x4>
c001750c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017514:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017519:	85 c0                	test   eax,eax
c001751b:	0f 85 2f ff ff ff    	jne    c0017450 <cleanerTaskFunction(void*)+0x40>
c0017521:	fb                   	sti    
c0017522:	e9 29 ff ff ff       	jmp    c0017450 <cleanerTaskFunction(void*)+0x40>
c0017527:	90                   	nop

c0017528 <KeTerminateCurrentThread(int)>:
c0017528:	83 ec 14             	sub    esp,0x14
c001752b:	fa                   	cli    
c001752c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017531:	83 c0 01             	add    eax,0x1
c0017534:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017539:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c001753e:	83 c0 01             	add    eax,0x1
c0017541:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c0017546:	fa                   	cli    
c0017547:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001754c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017550:	83 c0 01             	add    eax,0x1
c0017553:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017558:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001755d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017560:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017565:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017568:	50                   	push   eax
c0017569:	68 34 33 03 c0       	push   0xc0033334
c001756e:	e8 0d f7 00 00       	call   c0026c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017573:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017578:	83 c4 10             	add    esp,0x10
c001757b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017582:	a1 10 33 03 c0       	mov    eax,ds:0xc0033310
c0017587:	85 c0                	test   eax,eax
c0017589:	0f 84 81 00 00 00    	je     c0017610 <KeTerminateCurrentThread(int)+0xe8>
c001758f:	83 ec 0c             	sub    esp,0xc
c0017592:	c6 05 14 33 03 c0 01 	mov    BYTE PTR ds:0xc0033314,0x1
c0017599:	50                   	push   eax
c001759a:	e8 e5 fa ff ff       	call   c0017084 <unblockTask(ThreadControlBlock*)>
c001759f:	83 c4 10             	add    esp,0x10
c00175a2:	66 90                	xchg   ax,ax
c00175a4:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00175ac:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00175b1:	85 c0                	test   eax,eax
c00175b3:	75 03                	jne    c00175b8 <KeTerminateCurrentThread(int)+0x90>
c00175b5:	fb                   	sti    
c00175b6:	66 90                	xchg   ax,ax
c00175b8:	a1 2c 33 03 c0       	mov    eax,ds:0xc003332c
c00175bd:	83 e8 01             	sub    eax,0x1
c00175c0:	a3 2c 33 03 c0       	mov    ds:0xc003332c,eax
c00175c5:	75 09                	jne    c00175d0 <KeTerminateCurrentThread(int)+0xa8>
c00175c7:	83 3d 28 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033328,0x0
c00175ce:	75 54                	jne    c0017624 <KeTerminateCurrentThread(int)+0xfc>
c00175d0:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c00175d8:	8b 0d 30 33 03 c0    	mov    ecx,DWORD PTR ds:0xc0033330
c00175de:	85 c9                	test   ecx,ecx
c00175e0:	75 06                	jne    c00175e8 <KeTerminateCurrentThread(int)+0xc0>
c00175e2:	66 90                	xchg   ax,ax
c00175e4:	fb                   	sti    
c00175e5:	8d 76 00             	lea    esi,[esi+0x0]
c00175e8:	fa                   	cli    
c00175e9:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00175ee:	83 c0 01             	add    eax,0x1
c00175f1:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00175f6:	e8 2d f7 ff ff       	call   c0016d28 <schedule()>
c00175fb:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017603:	8b 15 30 33 03 c0    	mov    edx,DWORD PTR ds:0xc0033330
c0017609:	85 d2                	test   edx,edx
c001760b:	75 db                	jne    c00175e8 <KeTerminateCurrentThread(int)+0xc0>
c001760d:	eb d5                	jmp    c00175e4 <KeTerminateCurrentThread(int)+0xbc>
c001760f:	90                   	nop
c0017610:	83 ec 0c             	sub    esp,0xc
c0017613:	68 b5 9b 02 c0       	push   0xc0029bb5
c0017618:	e8 5f f9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001761d:	83 c4 10             	add    esp,0x10
c0017620:	eb 82                	jmp    c00175a4 <KeTerminateCurrentThread(int)+0x7c>
c0017622:	66 90                	xchg   ax,ax
c0017624:	c7 05 28 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033328,0x0
c001762e:	e8 f5 f6 ff ff       	call   c0016d28 <schedule()>
c0017633:	eb 9b                	jmp    c00175d0 <KeTerminateCurrentThread(int)+0xa8>
c0017635:	8d 76 00             	lea    esi,[esi+0x0]

c0017638 <__static_initialization_and_destruction_0(int, int)>:
c0017638:	83 ec 0c             	sub    esp,0xc
c001763b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017640:	0f 85 8e 00 00 00    	jne    c00176d4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017646:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001764e:	0f 85 80 00 00 00    	jne    c00176d4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017654:	83 ec 0c             	sub    esp,0xc
c0017657:	68 4c 33 03 c0       	push   0xc003334c
c001765c:	e8 bf fa 00 00       	call   c0027120 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017661:	83 c4 10             	add    esp,0x10
c0017664:	83 ec 04             	sub    esp,0x4
c0017667:	68 e0 be 02 c0       	push   0xc002bee0
c001766c:	68 4c 33 03 c0       	push   0xc003334c
c0017671:	68 d0 70 02 c0       	push   0xc00270d0
c0017676:	e8 89 61 ff ff       	call   c000d804 <__cxa_atexit>
c001767b:	83 c4 10             	add    esp,0x10
c001767e:	83 ec 0c             	sub    esp,0xc
c0017681:	68 40 33 03 c0       	push   0xc0033340
c0017686:	e8 95 fa 00 00       	call   c0027120 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001768b:	83 c4 10             	add    esp,0x10
c001768e:	83 ec 04             	sub    esp,0x4
c0017691:	68 e0 be 02 c0       	push   0xc002bee0
c0017696:	68 40 33 03 c0       	push   0xc0033340
c001769b:	68 d0 70 02 c0       	push   0xc00270d0
c00176a0:	e8 5f 61 ff ff       	call   c000d804 <__cxa_atexit>
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	83 ec 0c             	sub    esp,0xc
c00176ab:	68 34 33 03 c0       	push   0xc0033334
c00176b0:	e8 6b fa 00 00       	call   c0027120 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00176b5:	83 c4 10             	add    esp,0x10
c00176b8:	83 ec 04             	sub    esp,0x4
c00176bb:	68 e0 be 02 c0       	push   0xc002bee0
c00176c0:	68 34 33 03 c0       	push   0xc0033334
c00176c5:	68 d0 70 02 c0       	push   0xc00270d0
c00176ca:	e8 35 61 ff ff       	call   c000d804 <__cxa_atexit>
c00176cf:	83 c4 10             	add    esp,0x10
c00176d2:	66 90                	xchg   ax,ax
c00176d4:	90                   	nop
c00176d5:	83 c4 0c             	add    esp,0xc
c00176d8:	c3                   	ret    
c00176d9:	8d 76 00             	lea    esi,[esi+0x0]

c00176dc <_GLOBAL__sub_I_keNextPID>:
c00176dc:	83 ec 0c             	sub    esp,0xc
c00176df:	83 ec 08             	sub    esp,0x8
c00176e2:	68 ff ff 00 00       	push   0xffff
c00176e7:	6a 01                	push   0x1
c00176e9:	e8 4a ff ff ff       	call   c0017638 <__static_initialization_and_destruction_0(int, int)>
c00176ee:	83 c4 10             	add    esp,0x10
c00176f1:	83 c4 0c             	add    esp,0xc
c00176f4:	c3                   	ret    

c00176f5 <Vm::inbv(unsigned short)>:
c00176f5:	55                   	push   ebp
c00176f6:	89 e5                	mov    ebp,esp
c00176f8:	83 ec 14             	sub    esp,0x14
c00176fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00176fe:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017702:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017706:	3d fe fe 00 00       	cmp    eax,0xfefe
c001770b:	75 07                	jne    c0017714 <Vm::inbv(unsigned short)+0x1f>
c001770d:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c0017712:	eb 16                	jmp    c001772a <Vm::inbv(unsigned short)+0x35>
c0017714:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017718:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001771c:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0017720:	89 c2                	mov    edx,eax
c0017722:	ec                   	in     al,dx
c0017723:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0017726:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017729:	90                   	nop
c001772a:	c9                   	leave  
c001772b:	c3                   	ret    

c001772c <Vm::outbv(unsigned short, unsigned char)>:
c001772c:	55                   	push   ebp
c001772d:	89 e5                	mov    ebp,esp
c001772f:	83 ec 18             	sub    esp,0x18
c0017732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017735:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017738:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c001773c:	88 d0                	mov    al,dl
c001773e:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0017741:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017745:	3d fe fe 00 00       	cmp    eax,0xfefe
c001774a:	75 2d                	jne    c0017779 <Vm::outbv(unsigned short, unsigned char)+0x4d>
c001774c:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c0017751:	8d 50 01             	lea    edx,[eax+0x1]
c0017754:	89 15 90 33 03 c0    	mov    DWORD PTR ds:0xc0033390,edx
c001775a:	8a 55 e8             	mov    dl,BYTE PTR [ebp-0x18]
c001775d:	88 90 a0 33 03 c0    	mov    BYTE PTR [eax-0x3ffccc60],dl
c0017763:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c0017768:	83 f8 20             	cmp    eax,0x20
c001776b:	75 23                	jne    c0017790 <Vm::outbv(unsigned short, unsigned char)+0x64>
c001776d:	c7 05 90 33 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0033390,0x1f
c0017777:	eb 17                	jmp    c0017790 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017779:	0f b6 55 e8          	movzx  edx,BYTE PTR [ebp-0x18]
c001777d:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017781:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017785:	88 55 fd             	mov    BYTE PTR [ebp-0x3],dl
c0017788:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001778b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001778f:	ee                   	out    dx,al
c0017790:	90                   	nop
c0017791:	c9                   	leave  
c0017792:	c3                   	ret    

c0017793 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017793:	55                   	push   ebp
c0017794:	89 e5                	mov    ebp,esp
c0017796:	83 ec 08             	sub    esp,0x8
c0017799:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001779c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001779f:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
c00177a3:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
c00177a7:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
c00177ab:	c1 e0 04             	shl    eax,0x4
c00177ae:	89 c2                	mov    edx,eax
c00177b0:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
c00177b4:	01 d0                	add    eax,edx
c00177b6:	c9                   	leave  
c00177b7:	c3                   	ret    

c00177b8 <Vm::getSegment(unsigned int)>:
c00177b8:	55                   	push   ebp
c00177b9:	89 e5                	mov    ebp,esp
c00177bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177be:	c1 e8 10             	shr    eax,0x10
c00177c1:	5d                   	pop    ebp
c00177c2:	c3                   	ret    

c00177c3 <Vm::getOffset(unsigned int)>:
c00177c3:	55                   	push   ebp
c00177c4:	89 e5                	mov    ebp,esp
c00177c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177c9:	5d                   	pop    ebp
c00177ca:	c3                   	ret    

c00177cb <Vm::mainloop2()>:
c00177cb:	55                   	push   ebp
c00177cc:	89 e5                	mov    ebp,esp
c00177ce:	53                   	push   ebx
c00177cf:	83 ec 04             	sub    esp,0x4
c00177d2:	fa                   	cli    
c00177d3:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00177d8:	83 c0 01             	add    eax,0x1
c00177db:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00177e0:	c6 05 89 33 03 c0 01 	mov    BYTE PTR ds:0xc0033389,0x1
c00177e7:	83 ec 0c             	sub    esp,0xc
c00177ea:	6a 02                	push   0x2
c00177ec:	e8 cb f5 ff ff       	call   c0016dbc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00177f1:	83 c4 10             	add    esp,0x10
c00177f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00177f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00177fb:	66 8b 40 5f          	mov    ax,WORD PTR [eax+0x5f]
c00177ff:	0f b7 d8             	movzx  ebx,ax
c0017802:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017807:	8b 00                	mov    eax,DWORD PTR [eax]
c0017809:	66 8b 40 5d          	mov    ax,WORD PTR [eax+0x5d]
c001780d:	0f b7 c8             	movzx  ecx,ax
c0017810:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017815:	8b 00                	mov    eax,DWORD PTR [eax]
c0017817:	66 8b 40 5b          	mov    ax,WORD PTR [eax+0x5b]
c001781b:	0f b7 d0             	movzx  edx,ax
c001781e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017823:	8b 00                	mov    eax,DWORD PTR [eax]
c0017825:	66 8b 40 59          	mov    ax,WORD PTR [eax+0x59]
c0017829:	0f b7 c0             	movzx  eax,ax
c001782c:	53                   	push   ebx
c001782d:	51                   	push   ecx
c001782e:	52                   	push   edx
c001782f:	50                   	push   eax
c0017830:	e8 da 89 fe ff       	call   c000020f <goToVM86>
c0017835:	83 c4 10             	add    esp,0x10
c0017838:	90                   	nop
c0017839:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001783c:	c9                   	leave  
c001783d:	c3                   	ret    

c001783e <Vm::mainVm8086Loop(void*)>:
c001783e:	55                   	push   ebp
c001783f:	89 e5                	mov    ebp,esp
c0017841:	83 ec 08             	sub    esp,0x8
c0017844:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001784c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017851:	85 c0                	test   eax,eax
c0017853:	75 01                	jne    c0017856 <Vm::mainVm8086Loop(void*)+0x18>
c0017855:	fb                   	sti    
c0017856:	e8 70 ff ff ff       	call   c00177cb <Vm::mainloop2()>
c001785b:	90                   	nop
c001785c:	c9                   	leave  
c001785d:	c3                   	ret    

c001785e <Vm::mainloop3(unsigned long)>:
c001785e:	55                   	push   ebp
c001785f:	89 e5                	mov    ebp,esp
c0017861:	83 ec 08             	sub    esp,0x8
c0017864:	fa                   	cli    
c0017865:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001786a:	83 c0 01             	add    eax,0x1
c001786d:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017872:	c6 05 88 33 03 c0 01 	mov    BYTE PTR ds:0xc0033388,0x1
c0017879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001787c:	a3 84 33 03 c0       	mov    ds:0xc0033384,eax
c0017881:	83 ec 0c             	sub    esp,0xc
c0017884:	6a 02                	push   0x2
c0017886:	e8 31 f5 ff ff       	call   c0016dbc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001788b:	83 c4 10             	add    esp,0x10
c001788e:	e8 38 ff ff ff       	call   c00177cb <Vm::mainloop2()>
c0017893:	90                   	nop
c0017894:	c9                   	leave  
c0017895:	c3                   	ret    

c0017896 <Vm::initialise8086()>:
c0017896:	55                   	push   ebp
c0017897:	89 e5                	mov    ebp,esp
c0017899:	83 ec 08             	sub    esp,0x8
c001789c:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c00178a1:	68 80 00 00 00       	push   0x80
c00178a6:	6a 00                	push   0x0
c00178a8:	68 3e 78 01 c0       	push   0xc001783e
c00178ad:	50                   	push   eax
c00178ae:	e8 a9 f1 ff ff       	call   c0016a5c <Process::createThread(void (*)(void*), void*, int)>
c00178b3:	83 c4 10             	add    esp,0x10
c00178b6:	a3 8c 33 03 c0       	mov    ds:0xc003338c,eax
c00178bb:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c00178c0:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00178c6:	83 ec 0c             	sub    esp,0xc
c00178c9:	6a 07                	push   0x7
c00178cb:	68 10 01 00 00       	push   0x110
c00178d0:	6a 00                	push   0x0
c00178d2:	6a 00                	push   0x0
c00178d4:	50                   	push   eax
c00178d5:	e8 1a c7 ff ff       	call   c0013ff4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00178da:	83 c4 20             	add    esp,0x20
c00178dd:	90                   	nop
c00178de:	c9                   	leave  
c00178df:	c3                   	ret    

c00178e0 <Vm::finish8086()>:
c00178e0:	55                   	push   ebp
c00178e1:	89 e5                	mov    ebp,esp
c00178e3:	83 ec 18             	sub    esp,0x18
c00178e6:	fa                   	cli    
c00178e7:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00178ec:	83 c0 01             	add    eax,0x1
c00178ef:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00178f4:	a0 88 33 03 c0       	mov    al,ds:0xc0033388
c00178f9:	0f b6 c0             	movzx  eax,al
c00178fc:	85 c0                	test   eax,eax
c00178fe:	75 19                	jne    c0017919 <Vm::finish8086()+0x39>
c0017900:	e8 23 f4 ff ff       	call   c0016d28 <schedule()>
c0017905:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001790d:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017912:	85 c0                	test   eax,eax
c0017914:	75 d0                	jne    c00178e6 <Vm::finish8086()+0x6>
c0017916:	fb                   	sti    
c0017917:	eb cd                	jmp    c00178e6 <Vm::finish8086()+0x6>
c0017919:	90                   	nop
c001791a:	a1 84 33 03 c0       	mov    eax,ds:0xc0033384
c001791f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017922:	c6 05 88 33 03 c0 00 	mov    BYTE PTR ds:0xc0033388,0x0
c0017929:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c001792e:	83 ec 0c             	sub    esp,0xc
c0017931:	50                   	push   eax
c0017932:	e8 4d f7 ff ff       	call   c0017084 <unblockTask(ThreadControlBlock*)>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017942:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017947:	85 c0                	test   eax,eax
c0017949:	75 01                	jne    c001794c <Vm::finish8086()+0x6c>
c001794b:	fb                   	sti    
c001794c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001794f:	c9                   	leave  
c0017950:	c3                   	ret    

c0017951 <Vm::getOutput8086(unsigned char*)>:
c0017951:	55                   	push   ebp
c0017952:	89 e5                	mov    ebp,esp
c0017954:	57                   	push   edi
c0017955:	56                   	push   esi
c0017956:	53                   	push   ebx
c0017957:	83 ec 20             	sub    esp,0x20
c001795a:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c001795f:	89 c2                	mov    edx,eax
c0017961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017964:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0017967:	c7 45 e8 a0 33 03 c0 	mov    DWORD PTR [ebp-0x18],0xc00333a0
c001796e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0017971:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017974:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017977:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001797a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001797d:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0017980:	89 c6                	mov    esi,eax
c0017982:	89 d7                	mov    edi,edx
c0017984:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017986:	89 c8                	mov    eax,ecx
c0017988:	89 fa                	mov    edx,edi
c001798a:	89 f3                	mov    ebx,esi
c001798c:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c001798f:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0017992:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017995:	a1 90 33 03 c0       	mov    eax,ds:0xc0033390
c001799a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001799d:	c7 05 90 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033390,0x0
c00179a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00179aa:	83 c4 20             	add    esp,0x20
c00179ad:	5b                   	pop    ebx
c00179ae:	5e                   	pop    esi
c00179af:	5f                   	pop    edi
c00179b0:	5d                   	pop    ebp
c00179b1:	c3                   	ret    

c00179b2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00179b2:	55                   	push   ebp
c00179b3:	89 e5                	mov    ebp,esp
c00179b5:	57                   	push   edi
c00179b6:	56                   	push   esi
c00179b7:	53                   	push   ebx
c00179b8:	83 ec 3c             	sub    esp,0x3c
c00179bb:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00179be:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00179c1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00179c4:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00179c7:	66 89 5d c4          	mov    WORD PTR [ebp-0x3c],bx
c00179cb:	66 89 4d c0          	mov    WORD PTR [ebp-0x40],cx
c00179cf:	66 89 55 bc          	mov    WORD PTR [ebp-0x44],dx
c00179d3:	66 89 45 b8          	mov    WORD PTR [ebp-0x48],ax
c00179d7:	a0 80 33 03 c0       	mov    al,ds:0xc0033380
c00179dc:	83 f0 01             	xor    eax,0x1
c00179df:	0f b6 c0             	movzx  eax,al
c00179e2:	85 c0                	test   eax,eax
c00179e4:	74 07                	je     c00179ed <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c00179e6:	c6 05 80 33 03 c0 01 	mov    BYTE PTR ds:0xc0033380,0x1
c00179ed:	fa                   	cli    
c00179ee:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c00179f3:	83 c0 01             	add    eax,0x1
c00179f6:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c00179fb:	a0 89 33 03 c0       	mov    al,ds:0xc0033389
c0017a00:	0f b6 c0             	movzx  eax,al
c0017a03:	85 c0                	test   eax,eax
c0017a05:	75 19                	jne    c0017a20 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x6e>
c0017a07:	e8 1c f3 ff ff       	call   c0016d28 <schedule()>
c0017a0c:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017a14:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017a19:	85 c0                	test   eax,eax
c0017a1b:	75 d0                	jne    c00179ed <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017a1d:	fb                   	sti    
c0017a1e:	eb cd                	jmp    c00179ed <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017a20:	90                   	nop
c0017a21:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017a27:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0017a2a:	66 89 42 59          	mov    WORD PTR [edx+0x59],ax
c0017a2e:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017a34:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0017a37:	66 89 42 5b          	mov    WORD PTR [edx+0x5b],ax
c0017a3b:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017a41:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0017a44:	66 89 42 5d          	mov    WORD PTR [edx+0x5d],ax
c0017a48:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017a4e:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c0017a51:	66 89 42 5f          	mov    WORD PTR [edx+0x5f],ax
c0017a55:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017a5a:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017a5e:	c7 05 90 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033390,0x0
c0017a68:	83 ec 04             	sub    esp,0x4
c0017a6b:	6a 20                	push   0x20
c0017a6d:	6a 00                	push   0x0
c0017a6f:	68 a0 33 03 c0       	push   0xc00333a0
c0017a74:	e8 77 8a fe ff       	call   c00004f0 <memset>
c0017a79:	83 c4 10             	add    esp,0x10
c0017a7c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0017a7f:	0f b7 55 c4          	movzx  edx,WORD PTR [ebp-0x3c]
c0017a83:	0f b7 45 c0          	movzx  eax,WORD PTR [ebp-0x40]
c0017a87:	83 ec 08             	sub    esp,0x8
c0017a8a:	52                   	push   edx
c0017a8b:	50                   	push   eax
c0017a8c:	e8 02 fd ff ff       	call   c0017793 <Vm::realToLinear(unsigned short, unsigned short)>
c0017a91:	83 c4 10             	add    esp,0x10
c0017a94:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0017a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a9a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017a9d:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0017aa0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017aa3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0017aa6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017aa9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0017aac:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0017aaf:	89 c6                	mov    esi,eax
c0017ab1:	89 d7                	mov    edi,edx
c0017ab3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017ab5:	89 c8                	mov    eax,ecx
c0017ab7:	89 fa                	mov    edx,edi
c0017ab9:	89 f3                	mov    ebx,esi
c0017abb:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0017abe:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0017ac1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0017ac4:	c6 05 89 33 03 c0 00 	mov    BYTE PTR ds:0xc0033389,0x0
c0017acb:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017ad3:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017ad8:	85 c0                	test   eax,eax
c0017ada:	75 01                	jne    c0017add <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x12b>
c0017adc:	fb                   	sti    
c0017add:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017ae2:	83 ec 0c             	sub    esp,0xc
c0017ae5:	50                   	push   eax
c0017ae6:	e8 99 f5 ff ff       	call   c0017084 <unblockTask(ThreadControlBlock*)>
c0017aeb:	83 c4 10             	add    esp,0x10
c0017aee:	b0 01                	mov    al,0x1
c0017af0:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017af3:	5b                   	pop    ebx
c0017af4:	5e                   	pop    esi
c0017af5:	5f                   	pop    edi
c0017af6:	5d                   	pop    ebp
c0017af7:	c3                   	ret    

c0017af8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017af8:	55                   	push   ebp
c0017af9:	89 e5                	mov    ebp,esp
c0017afb:	56                   	push   esi
c0017afc:	53                   	push   ebx
c0017afd:	83 ec 30             	sub    esp,0x30
c0017b00:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0017b03:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017b06:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017b09:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017b0c:	66 89 5d d4          	mov    WORD PTR [ebp-0x2c],bx
c0017b10:	66 89 4d d0          	mov    WORD PTR [ebp-0x30],cx
c0017b14:	66 89 55 cc          	mov    WORD PTR [ebp-0x34],dx
c0017b18:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0017b1c:	a0 80 33 03 c0       	mov    al,ds:0xc0033380
c0017b21:	83 f0 01             	xor    eax,0x1
c0017b24:	0f b6 c0             	movzx  eax,al
c0017b27:	85 c0                	test   eax,eax
c0017b29:	74 07                	je     c0017b32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3a>
c0017b2b:	c6 05 80 33 03 c0 01 	mov    BYTE PTR ds:0xc0033380,0x1
c0017b32:	83 ec 08             	sub    esp,0x8
c0017b35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017b38:	68 cc 9c 02 c0       	push   0xc0029ccc
c0017b3d:	e8 3a f4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017b42:	83 c4 10             	add    esp,0x10
c0017b45:	fa                   	cli    
c0017b46:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017b4b:	83 c0 01             	add    eax,0x1
c0017b4e:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c0017b53:	a0 89 33 03 c0       	mov    al,ds:0xc0033389
c0017b58:	0f b6 c0             	movzx  eax,al
c0017b5b:	85 c0                	test   eax,eax
c0017b5d:	75 19                	jne    c0017b78 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x80>
c0017b5f:	e8 c4 f1 ff ff       	call   c0016d28 <schedule()>
c0017b64:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017b6c:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017b71:	85 c0                	test   eax,eax
c0017b73:	75 d0                	jne    c0017b45 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0017b75:	fb                   	sti    
c0017b76:	eb cd                	jmp    c0017b45 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0017b78:	90                   	nop
c0017b79:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017b7f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017b82:	66 89 42 59          	mov    WORD PTR [edx+0x59],ax
c0017b86:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017b8c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017b8f:	66 89 42 5b          	mov    WORD PTR [edx+0x5b],ax
c0017b93:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017b99:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
c0017b9c:	66 89 42 5d          	mov    WORD PTR [edx+0x5d],ax
c0017ba0:	8b 15 8c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003338c
c0017ba6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0017ba9:	66 89 42 5f          	mov    WORD PTR [edx+0x5f],ax
c0017bad:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017bb2:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017bb6:	c7 05 90 33 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033390,0x0
c0017bc0:	83 ec 04             	sub    esp,0x4
c0017bc3:	6a 20                	push   0x20
c0017bc5:	6a 00                	push   0x0
c0017bc7:	68 a0 33 03 c0       	push   0xc00333a0
c0017bcc:	e8 1f 89 fe ff       	call   c00004f0 <memset>
c0017bd1:	83 c4 10             	add    esp,0x10
c0017bd4:	c7 45 ec 14 01 00 00 	mov    DWORD PTR [ebp-0x14],0x114
c0017bdb:	83 ec 0c             	sub    esp,0xc
c0017bde:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017be1:	e8 55 81 ff ff       	call   c000fd3b <malloc>
c0017be6:	83 c4 10             	add    esp,0x10
c0017be9:	89 c3                	mov    ebx,eax
c0017beb:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c0017bf0:	83 ec 04             	sub    esp,0x4
c0017bf3:	50                   	push   eax
c0017bf4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017bf7:	53                   	push   ebx
c0017bf8:	e8 65 0a ff ff       	call   c0008662 <File::File(char const*, Process*)>
c0017bfd:	83 c4 10             	add    esp,0x10
c0017c00:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0017c03:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0017c07:	75 29                	jne    c0017c32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13a>
c0017c09:	83 ec 0c             	sub    esp,0xc
c0017c0c:	68 ee 9c 02 c0       	push   0xc0029cee
c0017c11:	e8 7a 85 ff ff       	call   c0010190 <KePanic(char const*)>
c0017c16:	83 c4 10             	add    esp,0x10
c0017c19:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017c21:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017c26:	85 c0                	test   eax,eax
c0017c28:	75 01                	jne    c0017c2b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x133>
c0017c2a:	fb                   	sti    
c0017c2b:	b0 00                	mov    al,0x0
c0017c2d:	e9 fb 00 00 00       	jmp    c0017d2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c0017c32:	83 ec 04             	sub    esp,0x4
c0017c35:	8d 45 df             	lea    eax,[ebp-0x21]
c0017c38:	50                   	push   eax
c0017c39:	8d 45 e0             	lea    eax,[ebp-0x20]
c0017c3c:	50                   	push   eax
c0017c3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017c40:	e8 3d 0d ff ff       	call   c0008982 <File::stat(unsigned long long*, bool*)>
c0017c45:	83 c4 10             	add    esp,0x10
c0017c48:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0017c4b:	0f b6 c0             	movzx  eax,al
c0017c4e:	85 c0                	test   eax,eax
c0017c50:	74 29                	je     c0017c7b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0017c52:	83 ec 0c             	sub    esp,0xc
c0017c55:	68 02 9d 02 c0       	push   0xc0029d02
c0017c5a:	e8 31 85 ff ff       	call   c0010190 <KePanic(char const*)>
c0017c5f:	83 c4 10             	add    esp,0x10
c0017c62:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017c6a:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017c6f:	85 c0                	test   eax,eax
c0017c71:	75 01                	jne    c0017c74 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17c>
c0017c73:	fb                   	sti    
c0017c74:	b0 00                	mov    al,0x0
c0017c76:	e9 b2 00 00 00       	jmp    c0017d2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c0017c7b:	83 ec 08             	sub    esp,0x8
c0017c7e:	6a 01                	push   0x1
c0017c80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017c83:	e8 f8 09 ff ff       	call   c0008680 <File::open(FileOpenMode)>
c0017c88:	83 c4 10             	add    esp,0x10
c0017c8b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0017c8e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0017c92:	74 26                	je     c0017cba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1c2>
c0017c94:	83 ec 0c             	sub    esp,0xc
c0017c97:	68 1b 9d 02 c0       	push   0xc0029d1b
c0017c9c:	e8 ef 84 ff ff       	call   c0010190 <KePanic(char const*)>
c0017ca1:	83 c4 10             	add    esp,0x10
c0017ca4:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017cac:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017cb1:	85 c0                	test   eax,eax
c0017cb3:	75 01                	jne    c0017cb6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1be>
c0017cb5:	fb                   	sti    
c0017cb6:	b0 00                	mov    al,0x0
c0017cb8:	eb 73                	jmp    c0017d2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c0017cba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cbf:	83 c0 0c             	add    eax,0xc
c0017cc2:	8b 18                	mov    ebx,DWORD PTR [eax]
c0017cc4:	0f b7 55 d4          	movzx  edx,WORD PTR [ebp-0x2c]
c0017cc8:	0f b7 45 d0          	movzx  eax,WORD PTR [ebp-0x30]
c0017ccc:	83 ec 08             	sub    esp,0x8
c0017ccf:	52                   	push   edx
c0017cd0:	50                   	push   eax
c0017cd1:	e8 bd fa ff ff       	call   c0017793 <Vm::realToLinear(unsigned short, unsigned short)>
c0017cd6:	83 c4 10             	add    esp,0x10
c0017cd9:	89 c6                	mov    esi,eax
c0017cdb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017cde:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0017ce1:	83 ec 0c             	sub    esp,0xc
c0017ce4:	8d 4d d8             	lea    ecx,[ebp-0x28]
c0017ce7:	51                   	push   ecx
c0017ce8:	56                   	push   esi
c0017ce9:	52                   	push   edx
c0017cea:	50                   	push   eax
c0017ceb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017cee:	ff d3                	call   ebx
c0017cf0:	83 c4 20             	add    esp,0x20
c0017cf3:	83 ec 0c             	sub    esp,0xc
c0017cf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017cf9:	e8 e0 09 ff ff       	call   c00086de <File::close()>
c0017cfe:	83 c4 10             	add    esp,0x10
c0017d01:	c6 05 89 33 03 c0 00 	mov    BYTE PTR ds:0xc0033389,0x0
c0017d08:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c0017d10:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0017d15:	85 c0                	test   eax,eax
c0017d17:	75 01                	jne    c0017d1a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x222>
c0017d19:	fb                   	sti    
c0017d1a:	a1 8c 33 03 c0       	mov    eax,ds:0xc003338c
c0017d1f:	83 ec 0c             	sub    esp,0xc
c0017d22:	50                   	push   eax
c0017d23:	e8 5c f3 ff ff       	call   c0017084 <unblockTask(ThreadControlBlock*)>
c0017d28:	83 c4 10             	add    esp,0x10
c0017d2b:	b0 01                	mov    al,0x1
c0017d2d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0017d30:	5b                   	pop    ebx
c0017d31:	5e                   	pop    esi
c0017d32:	5d                   	pop    ebp
c0017d33:	c3                   	ret    

c0017d34 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017d34:	55                   	push   ebp
c0017d35:	89 e5                	mov    ebp,esp
c0017d37:	83 ec 68             	sub    esp,0x68
c0017d3a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0017d3d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017d40:	66 89 55 9c          	mov    WORD PTR [ebp-0x64],dx
c0017d44:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0017d48:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c0017d4f:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
c0017d52:	83 e8 06             	sub    eax,0x6
c0017d55:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0017d59:	0f b7 55 98          	movzx  edx,WORD PTR [ebp-0x68]
c0017d5d:	0f b7 45 9c          	movzx  eax,WORD PTR [ebp-0x64]
c0017d61:	52                   	push   edx
c0017d62:	50                   	push   eax
c0017d63:	e8 2b fa ff ff       	call   c0017793 <Vm::realToLinear(unsigned short, unsigned short)>
c0017d68:	83 c4 08             	add    esp,0x8
c0017d6b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0017d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d71:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017d74:	83 e8 06             	sub    eax,0x6
c0017d77:	0f b7 d0             	movzx  edx,ax
c0017d7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d7d:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017d80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d83:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d86:	83 c0 02             	add    eax,0x2
c0017d89:	0f b7 c0             	movzx  eax,ax
c0017d8c:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017d8f:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c0017d92:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
c0017d96:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0017d99:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017d9c:	66 8b 45 da          	mov    ax,WORD PTR [ebp-0x26]
c0017da0:	88 c2                	mov    dl,al
c0017da2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017da5:	88 10                	mov    BYTE PTR [eax],dl
c0017da7:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
c0017dab:	c1 e8 08             	shr    eax,0x8
c0017dae:	89 c2                	mov    edx,eax
c0017db0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017db3:	83 c0 01             	add    eax,0x1
c0017db6:	88 10                	mov    BYTE PTR [eax],dl
c0017db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dbb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dbe:	0f b7 c0             	movzx  eax,ax
c0017dc1:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017dc4:	83 c2 02             	add    edx,0x2
c0017dc7:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
c0017dca:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c0017dce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0017dd1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017dd4:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c0017dd8:	88 c2                	mov    dl,al
c0017dda:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017ddd:	88 10                	mov    BYTE PTR [eax],dl
c0017ddf:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c0017de3:	c1 e8 08             	shr    eax,0x8
c0017de6:	89 c2                	mov    edx,eax
c0017de8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0017deb:	83 c0 01             	add    eax,0x1
c0017dee:	88 10                	mov    BYTE PTR [eax],dl
c0017df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017df3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017df6:	0f b7 c0             	movzx  eax,ax
c0017df9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017dfc:	83 c2 04             	add    edx,0x4
c0017dff:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017e02:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
c0017e06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017e09:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0017e0c:	66 8b 45 f2          	mov    ax,WORD PTR [ebp-0xe]
c0017e10:	88 c2                	mov    dl,al
c0017e12:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017e15:	88 10                	mov    BYTE PTR [eax],dl
c0017e17:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
c0017e1b:	c1 e8 08             	shr    eax,0x8
c0017e1e:	89 c2                	mov    edx,eax
c0017e20:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017e23:	83 c0 01             	add    eax,0x1
c0017e26:	88 10                	mov    BYTE PTR [eax],dl
c0017e28:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e2f:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017e32:	0f b6 c0             	movzx  eax,al
c0017e35:	85 c0                	test   eax,eax
c0017e37:	74 5e                	je     c0017e97 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x163>
c0017e39:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0017e3c:	83 c0 04             	add    eax,0x4
c0017e3f:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0017e42:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0017e45:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0017e48:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0017e4b:	8a 00                	mov    al,BYTE PTR [eax]
c0017e4d:	0f b6 c0             	movzx  eax,al
c0017e50:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0017e53:	83 c2 01             	add    edx,0x1
c0017e56:	8a 12                	mov    dl,BYTE PTR [edx]
c0017e58:	0f b6 d2             	movzx  edx,dl
c0017e5b:	c1 e2 08             	shl    edx,0x8
c0017e5e:	09 d0                	or     eax,edx
c0017e60:	80 cc 02             	or     ah,0x2
c0017e63:	0f b7 c0             	movzx  eax,ax
c0017e66:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017e69:	83 c2 04             	add    edx,0x4
c0017e6c:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0017e6f:	66 89 45 ce          	mov    WORD PTR [ebp-0x32],ax
c0017e73:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017e76:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0017e79:	66 8b 45 ce          	mov    ax,WORD PTR [ebp-0x32]
c0017e7d:	88 c2                	mov    dl,al
c0017e7f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0017e82:	88 10                	mov    BYTE PTR [eax],dl
c0017e84:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
c0017e88:	c1 e8 08             	shr    eax,0x8
c0017e8b:	89 c2                	mov    edx,eax
c0017e8d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0017e90:	83 c0 01             	add    eax,0x1
c0017e93:	88 10                	mov    BYTE PTR [eax],dl
c0017e95:	eb 5e                	jmp    c0017ef5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x1c1>
c0017e97:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0017e9a:	83 c0 04             	add    eax,0x4
c0017e9d:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0017ea0:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0017ea3:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0017ea6:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0017ea9:	8a 00                	mov    al,BYTE PTR [eax]
c0017eab:	0f b6 c0             	movzx  eax,al
c0017eae:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c0017eb1:	83 c2 01             	add    edx,0x1
c0017eb4:	8a 12                	mov    dl,BYTE PTR [edx]
c0017eb6:	0f b6 d2             	movzx  edx,dl
c0017eb9:	c1 e2 08             	shl    edx,0x8
c0017ebc:	09 d0                	or     eax,edx
c0017ebe:	0f b7 c0             	movzx  eax,ax
c0017ec1:	25 ff fd 00 00       	and    eax,0xfdff
c0017ec6:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017ec9:	83 c2 04             	add    edx,0x4
c0017ecc:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
c0017ecf:	66 89 45 ba          	mov    WORD PTR [ebp-0x46],ax
c0017ed3:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0017ed6:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0017ed9:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
c0017edd:	88 c2                	mov    dl,al
c0017edf:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0017ee2:	88 10                	mov    BYTE PTR [eax],dl
c0017ee4:	0f b7 45 ba          	movzx  eax,WORD PTR [ebp-0x46]
c0017ee8:	c1 e8 08             	shr    eax,0x8
c0017eeb:	89 c2                	mov    edx,eax
c0017eed:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0017ef0:	83 c0 01             	add    eax,0x1
c0017ef3:	88 10                	mov    BYTE PTR [eax],dl
c0017ef5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017efa:	8b 00                	mov    eax,DWORD PTR [eax]
c0017efc:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017f00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017f03:	c1 e0 02             	shl    eax,0x2
c0017f06:	8d 50 02             	lea    edx,[eax+0x2]
c0017f09:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0017f0c:	01 d0                	add    eax,edx
c0017f0e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017f11:	0f b7 d0             	movzx  edx,ax
c0017f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f17:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0017f1a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017f1d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017f24:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0017f27:	01 d0                	add    eax,edx
c0017f29:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017f2c:	0f b7 d0             	movzx  edx,ax
c0017f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f32:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f35:	90                   	nop
c0017f36:	c9                   	leave  
c0017f37:	c3                   	ret    

c0017f38 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017f38:	55                   	push   ebp
c0017f39:	89 e5                	mov    ebp,esp
c0017f3b:	83 ec 28             	sub    esp,0x28
c0017f3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017f41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017f44:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017f48:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017f4c:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017f50:	c1 e0 04             	shl    eax,0x4
c0017f53:	89 c2                	mov    edx,eax
c0017f55:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017f59:	01 d0                	add    eax,edx
c0017f5b:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017f60:	7e 10                	jle    c0017f72 <Vm::readByteFromReal(unsigned short, unsigned short)+0x3a>
c0017f62:	83 ec 0c             	sub    esp,0xc
c0017f65:	68 34 9d 02 c0       	push   0xc0029d34
c0017f6a:	e8 21 82 ff ff       	call   c0010190 <KePanic(char const*)>
c0017f6f:	83 c4 10             	add    esp,0x10
c0017f72:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017f76:	c1 e0 04             	shl    eax,0x4
c0017f79:	89 c2                	mov    edx,eax
c0017f7b:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017f7f:	01 d0                	add    eax,edx
c0017f81:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017f84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017f87:	8a 00                	mov    al,BYTE PTR [eax]
c0017f89:	c9                   	leave  
c0017f8a:	c3                   	ret    

c0017f8b <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017f8b:	55                   	push   ebp
c0017f8c:	89 e5                	mov    ebp,esp
c0017f8e:	83 ec 28             	sub    esp,0x28
c0017f91:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017f94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017f97:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017f9b:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017f9f:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017fa3:	c1 e0 04             	shl    eax,0x4
c0017fa6:	89 c2                	mov    edx,eax
c0017fa8:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017fac:	01 d0                	add    eax,edx
c0017fae:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017fb3:	7e 10                	jle    c0017fc5 <Vm::readWordFromReal(unsigned short, unsigned short)+0x3a>
c0017fb5:	83 ec 0c             	sub    esp,0xc
c0017fb8:	68 34 9d 02 c0       	push   0xc0029d34
c0017fbd:	e8 ce 81 ff ff       	call   c0010190 <KePanic(char const*)>
c0017fc2:	83 c4 10             	add    esp,0x10
c0017fc5:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017fc9:	c1 e0 04             	shl    eax,0x4
c0017fcc:	89 c2                	mov    edx,eax
c0017fce:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017fd2:	01 d0                	add    eax,edx
c0017fd4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017fd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017fda:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017fdd:	c9                   	leave  
c0017fde:	c3                   	ret    

c0017fdf <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017fdf:	55                   	push   ebp
c0017fe0:	89 e5                	mov    ebp,esp
c0017fe2:	83 ec 28             	sub    esp,0x28
c0017fe5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017fe8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017feb:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017fef:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017ff3:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017ff7:	c1 e0 04             	shl    eax,0x4
c0017ffa:	89 c2                	mov    edx,eax
c0017ffc:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018000:	01 d0                	add    eax,edx
c0018002:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018007:	7e 10                	jle    c0018019 <Vm::readDwordFromReal(unsigned short, unsigned short)+0x3a>
c0018009:	83 ec 0c             	sub    esp,0xc
c001800c:	68 34 9d 02 c0       	push   0xc0029d34
c0018011:	e8 7a 81 ff ff       	call   c0010190 <KePanic(char const*)>
c0018016:	83 c4 10             	add    esp,0x10
c0018019:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001801d:	c1 e0 04             	shl    eax,0x4
c0018020:	89 c2                	mov    edx,eax
c0018022:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018026:	01 d0                	add    eax,edx
c0018028:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001802b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001802e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018030:	c9                   	leave  
c0018031:	c3                   	ret    

c0018032 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018032:	55                   	push   ebp
c0018033:	89 e5                	mov    ebp,esp
c0018035:	83 ec 28             	sub    esp,0x28
c0018038:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001803b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001803e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0018041:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0018045:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018049:	88 c8                	mov    al,cl
c001804b:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
c001804e:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018052:	c1 e0 04             	shl    eax,0x4
c0018055:	89 c2                	mov    edx,eax
c0018057:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001805b:	01 d0                	add    eax,edx
c001805d:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018062:	7e 10                	jle    c0018074 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)+0x42>
c0018064:	83 ec 0c             	sub    esp,0xc
c0018067:	68 34 9d 02 c0       	push   0xc0029d34
c001806c:	e8 1f 81 ff ff       	call   c0010190 <KePanic(char const*)>
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018078:	c1 e0 04             	shl    eax,0x4
c001807b:	89 c2                	mov    edx,eax
c001807d:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018081:	01 d0                	add    eax,edx
c0018083:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018086:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018089:	8a 55 dc             	mov    dl,BYTE PTR [ebp-0x24]
c001808c:	88 10                	mov    BYTE PTR [eax],dl
c001808e:	90                   	nop
c001808f:	c9                   	leave  
c0018090:	c3                   	ret    

c0018091 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018091:	55                   	push   ebp
c0018092:	89 e5                	mov    ebp,esp
c0018094:	83 ec 28             	sub    esp,0x28
c0018097:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001809a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001809d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00180a0:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
c00180a4:	66 89 55 e0          	mov    WORD PTR [ebp-0x20],dx
c00180a8:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00180ac:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00180b0:	c1 e0 04             	shl    eax,0x4
c00180b3:	89 c2                	mov    edx,eax
c00180b5:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00180b9:	01 d0                	add    eax,edx
c00180bb:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00180c0:	7e 10                	jle    c00180d2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)+0x41>
c00180c2:	83 ec 0c             	sub    esp,0xc
c00180c5:	68 34 9d 02 c0       	push   0xc0029d34
c00180ca:	e8 c1 80 ff ff       	call   c0010190 <KePanic(char const*)>
c00180cf:	83 c4 10             	add    esp,0x10
c00180d2:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00180d6:	c1 e0 04             	shl    eax,0x4
c00180d9:	89 c2                	mov    edx,eax
c00180db:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00180df:	01 d0                	add    eax,edx
c00180e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00180e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00180e7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00180ea:	66 89 02             	mov    WORD PTR [edx],ax
c00180ed:	90                   	nop
c00180ee:	c9                   	leave  
c00180ef:	c3                   	ret    

c00180f0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00180f0:	55                   	push   ebp
c00180f1:	89 e5                	mov    ebp,esp
c00180f3:	83 ec 28             	sub    esp,0x28
c00180f6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00180f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00180fc:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0018100:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018104:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018108:	c1 e0 04             	shl    eax,0x4
c001810b:	89 c2                	mov    edx,eax
c001810d:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018111:	01 d0                	add    eax,edx
c0018113:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0018118:	7e 10                	jle    c001812a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)+0x3a>
c001811a:	83 ec 0c             	sub    esp,0xc
c001811d:	68 34 9d 02 c0       	push   0xc0029d34
c0018122:	e8 69 80 ff ff       	call   c0010190 <KePanic(char const*)>
c0018127:	83 c4 10             	add    esp,0x10
c001812a:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001812e:	c1 e0 04             	shl    eax,0x4
c0018131:	89 c2                	mov    edx,eax
c0018133:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018137:	01 d0                	add    eax,edx
c0018139:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001813c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001813f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0018142:	89 10                	mov    DWORD PTR [eax],edx
c0018144:	90                   	nop
c0018145:	c9                   	leave  
c0018146:	c3                   	ret    

c0018147 <Vm::faultHandler(regs*)>:
c0018147:	55                   	push   ebp
c0018148:	89 e5                	mov    ebp,esp
c001814a:	57                   	push   edi
c001814b:	56                   	push   esi
c001814c:	53                   	push   ebx
c001814d:	81 ec ac 00 00 00    	sub    esp,0xac
c0018153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018156:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018159:	0f b7 d0             	movzx  edx,ax
c001815c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001815f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018162:	0f b7 c0             	movzx  eax,ax
c0018165:	52                   	push   edx
c0018166:	50                   	push   eax
c0018167:	e8 27 f6 ff ff       	call   c0017793 <Vm::realToLinear(unsigned short, unsigned short)>
c001816c:	83 c4 08             	add    esp,0x8
c001816f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018175:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018178:	0f b7 d0             	movzx  edx,ax
c001817b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001817e:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018181:	0f b7 c0             	movzx  eax,ax
c0018184:	52                   	push   edx
c0018185:	50                   	push   eax
c0018186:	e8 08 f6 ff ff       	call   c0017793 <Vm::realToLinear(unsigned short, unsigned short)>
c001818b:	83 c4 08             	add    esp,0x8
c001818e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018194:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018197:	0f b7 d0             	movzx  edx,ax
c001819a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001819d:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c00181a0:	0f b7 c0             	movzx  eax,ax
c00181a3:	52                   	push   edx
c00181a4:	50                   	push   eax
c00181a5:	e8 e9 f5 ff ff       	call   c0017793 <Vm::realToLinear(unsigned short, unsigned short)>
c00181aa:	83 c4 08             	add    esp,0x8
c00181ad:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00181b0:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00181b7:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
c00181bb:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
c00181bf:	c6 45 e1 06          	mov    BYTE PTR [ebp-0x1f],0x6
c00181c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00181c6:	8a 00                	mov    al,BYTE PTR [eax]
c00181c8:	0f b6 c0             	movzx  eax,al
c00181cb:	83 e8 26             	sub    eax,0x26
c00181ce:	3d d5 00 00 00       	cmp    eax,0xd5
c00181d3:	0f 87 f4 0c 00 00    	ja     c0018ecd <Vm::faultHandler(regs*)+0xd86>
c00181d9:	8b 04 85 b4 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd624c]
c00181e0:	ff e0                	jmp    eax
c00181e2:	c6 45 e1 02          	mov    BYTE PTR [ebp-0x1f],0x2
c00181e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00181ec:	8d 50 01             	lea    edx,[eax+0x1]
c00181ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00181f5:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00181f9:	e9 83 0d 00 00       	jmp    c0018f81 <Vm::faultHandler(regs*)+0xe3a>
c00181fe:	c6 45 e1 00          	mov    BYTE PTR [ebp-0x1f],0x0
c0018202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018205:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018208:	8d 50 01             	lea    edx,[eax+0x1]
c001820b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001820e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018211:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018215:	e9 67 0d 00 00       	jmp    c0018f81 <Vm::faultHandler(regs*)+0xe3a>
c001821a:	c6 45 e1 01          	mov    BYTE PTR [ebp-0x1f],0x1
c001821e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018221:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018224:	8d 50 01             	lea    edx,[eax+0x1]
c0018227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001822a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001822d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018231:	e9 4b 0d 00 00       	jmp    c0018f81 <Vm::faultHandler(regs*)+0xe3a>
c0018236:	c6 45 e1 03          	mov    BYTE PTR [ebp-0x1f],0x3
c001823a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001823d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018240:	8d 50 01             	lea    edx,[eax+0x1]
c0018243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018246:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018249:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c001824d:	e9 2f 0d 00 00       	jmp    c0018f81 <Vm::faultHandler(regs*)+0xe3a>
c0018252:	c6 45 e1 04          	mov    BYTE PTR [ebp-0x1f],0x4
c0018256:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018259:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001825c:	8d 50 01             	lea    edx,[eax+0x1]
c001825f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018262:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018265:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018269:	e9 13 0d 00 00       	jmp    c0018f81 <Vm::faultHandler(regs*)+0xe3a>
c001826e:	c6 45 e1 05          	mov    BYTE PTR [ebp-0x1f],0x5
c0018272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018275:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018278:	8d 50 01             	lea    edx,[eax+0x1]
c001827b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018281:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018285:	e9 f7 0c 00 00       	jmp    c0018f81 <Vm::faultHandler(regs*)+0xe3a>
c001828a:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001828e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018291:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018294:	8d 50 01             	lea    edx,[eax+0x1]
c0018297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001829a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001829d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00182a1:	e9 db 0c 00 00       	jmp    c0018f81 <Vm::faultHandler(regs*)+0xe3a>
c00182a6:	c6 45 e2 01          	mov    BYTE PTR [ebp-0x1e],0x1
c00182aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00182b0:	8d 50 01             	lea    edx,[eax+0x1]
c00182b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00182b9:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00182bd:	e9 bf 0c 00 00       	jmp    c0018f81 <Vm::faultHandler(regs*)+0xe3a>
c00182c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182c5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00182c8:	8d 50 01             	lea    edx,[eax+0x1]
c00182cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00182d1:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00182d5:	e9 a7 0c 00 00       	jmp    c0018f81 <Vm::faultHandler(regs*)+0xe3a>
c00182da:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00182de:	85 c0                	test   eax,eax
c00182e0:	74 5b                	je     c001833d <Vm::faultHandler(regs*)+0x1f6>
c00182e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182e5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00182e8:	83 e8 04             	sub    eax,0x4
c00182eb:	0f b7 d0             	movzx  edx,ax
c00182ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182f1:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00182f4:	83 6d d0 04          	sub    DWORD PTR [ebp-0x30],0x4
c00182f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00182fe:	25 ff 0d 00 00       	and    eax,0xdff
c0018303:	89 c2                	mov    edx,eax
c0018305:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018308:	89 10                	mov    DWORD PTR [eax],edx
c001830a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001830f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018311:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0018314:	0f b6 c0             	movzx  eax,al
c0018317:	85 c0                	test   eax,eax
c0018319:	74 11                	je     c001832c <Vm::faultHandler(regs*)+0x1e5>
c001831b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001831e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018320:	80 cc 02             	or     ah,0x2
c0018323:	89 c2                	mov    edx,eax
c0018325:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018328:	89 10                	mov    DWORD PTR [eax],edx
c001832a:	eb 64                	jmp    c0018390 <Vm::faultHandler(regs*)+0x249>
c001832c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001832f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018331:	80 e4 fd             	and    ah,0xfd
c0018334:	89 c2                	mov    edx,eax
c0018336:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018339:	89 10                	mov    DWORD PTR [eax],edx
c001833b:	eb 53                	jmp    c0018390 <Vm::faultHandler(regs*)+0x249>
c001833d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018340:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018343:	83 e8 02             	sub    eax,0x2
c0018346:	0f b7 d0             	movzx  edx,ax
c0018349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001834c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001834f:	83 6d d4 02          	sub    DWORD PTR [ebp-0x2c],0x2
c0018353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018356:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018359:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001835c:	66 89 02             	mov    WORD PTR [edx],ax
c001835f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018364:	8b 00                	mov    eax,DWORD PTR [eax]
c0018366:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0018369:	0f b6 c0             	movzx  eax,al
c001836c:	85 c0                	test   eax,eax
c001836e:	74 11                	je     c0018381 <Vm::faultHandler(regs*)+0x23a>
c0018370:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018373:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018376:	80 cc 02             	or     ah,0x2
c0018379:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001837c:	66 89 02             	mov    WORD PTR [edx],ax
c001837f:	eb 0f                	jmp    c0018390 <Vm::faultHandler(regs*)+0x249>
c0018381:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018384:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018387:	80 e4 fd             	and    ah,0xfd
c001838a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001838d:	66 89 02             	mov    WORD PTR [edx],ax
c0018390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018393:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018396:	8d 50 01             	lea    edx,[eax+0x1]
c0018399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001839c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001839f:	b0 01                	mov    al,0x1
c00183a1:	e9 e0 0b 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c00183a6:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00183aa:	85 c0                	test   eax,eax
c00183ac:	74 46                	je     c00183f4 <Vm::faultHandler(regs*)+0x2ad>
c00183ae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00183b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00183b3:	25 ff 0d 00 00       	and    eax,0xdff
c00183b8:	0d 00 02 02 00       	or     eax,0x20200
c00183bd:	89 c2                	mov    edx,eax
c00183bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183c2:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00183c5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00183c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00183ca:	25 00 02 00 00       	and    eax,0x200
c00183cf:	89 c2                	mov    edx,eax
c00183d1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00183d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00183d8:	85 d2                	test   edx,edx
c00183da:	0f 95 c2             	setne  dl
c00183dd:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c00183e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183e3:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00183e6:	83 c0 04             	add    eax,0x4
c00183e9:	0f b7 d0             	movzx  edx,ax
c00183ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183ef:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00183f2:	eb 47                	jmp    c001843b <Vm::faultHandler(regs*)+0x2f4>
c00183f4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00183f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00183fa:	0f b7 c0             	movzx  eax,ax
c00183fd:	0d 00 02 02 00       	or     eax,0x20200
c0018402:	89 c2                	mov    edx,eax
c0018404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018407:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001840a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001840d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018410:	0f b7 c0             	movzx  eax,ax
c0018413:	25 00 02 00 00       	and    eax,0x200
c0018418:	89 c2                	mov    edx,eax
c001841a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001841f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018421:	85 d2                	test   edx,edx
c0018423:	0f 95 c2             	setne  dl
c0018426:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001842c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001842f:	83 c0 02             	add    eax,0x2
c0018432:	0f b7 d0             	movzx  edx,ax
c0018435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018438:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001843b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001843e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018441:	8d 50 01             	lea    edx,[eax+0x1]
c0018444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018447:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001844a:	b0 01                	mov    al,0x1
c001844c:	e9 35 0b 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018451:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018454:	83 c0 01             	add    eax,0x1
c0018457:	8a 00                	mov    al,BYTE PTR [eax]
c0018459:	0f b6 c0             	movzx  eax,al
c001845c:	3d ee 00 00 00       	cmp    eax,0xee
c0018461:	75 19                	jne    c001847c <Vm::faultHandler(regs*)+0x335>
c0018463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018466:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018469:	83 ec 0c             	sub    esp,0xc
c001846c:	50                   	push   eax
c001846d:	e8 ec f3 ff ff       	call   c001785e <Vm::mainloop3(unsigned long)>
c0018472:	83 c4 10             	add    esp,0x10
c0018475:	b0 01                	mov    al,0x1
c0018477:	e9 0a 0b 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c001847c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001847f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018482:	0f b7 c8             	movzx  ecx,ax
c0018485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018488:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c001848b:	0f b7 d0             	movzx  edx,ax
c001848e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018491:	83 c0 01             	add    eax,0x1
c0018494:	8a 00                	mov    al,BYTE PTR [eax]
c0018496:	0f b6 c0             	movzx  eax,al
c0018499:	83 ec 0c             	sub    esp,0xc
c001849c:	51                   	push   ecx
c001849d:	52                   	push   edx
c001849e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00184a1:	50                   	push   eax
c00184a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00184a5:	e8 8a f8 ff ff       	call   c0017d34 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00184aa:	83 c4 20             	add    esp,0x20
c00184ad:	b0 01                	mov    al,0x1
c00184af:	e9 d2 0a 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c00184b4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00184b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00184bb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00184bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00184c5:	8d 50 01             	lea    edx,[eax+0x1]
c00184c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00184ce:	b0 01                	mov    al,0x1
c00184d0:	e9 b1 0a 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c00184d5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00184da:	8b 00                	mov    eax,DWORD PTR [eax]
c00184dc:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00184e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00184e6:	8d 50 01             	lea    edx,[eax+0x1]
c00184e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00184ef:	b0 01                	mov    al,0x1
c00184f1:	e9 90 0a 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c00184f6:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00184f9:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c00184fc:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c00184ff:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
c0018502:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c0018505:	8a 00                	mov    al,BYTE PTR [eax]
c0018507:	0f b6 c0             	movzx  eax,al
c001850a:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c001850d:	83 c2 01             	add    edx,0x1
c0018510:	8a 12                	mov    dl,BYTE PTR [edx]
c0018512:	0f b6 d2             	movzx  edx,dl
c0018515:	c1 e2 08             	shl    edx,0x8
c0018518:	09 d0                	or     eax,edx
c001851a:	0f b7 d0             	movzx  edx,ax
c001851d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018520:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018523:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018526:	83 c0 02             	add    eax,0x2
c0018529:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c001852c:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c001852f:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0018532:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0018535:	8a 00                	mov    al,BYTE PTR [eax]
c0018537:	0f b6 c0             	movzx  eax,al
c001853a:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c001853d:	83 c2 01             	add    edx,0x1
c0018540:	8a 12                	mov    dl,BYTE PTR [edx]
c0018542:	0f b6 d2             	movzx  edx,dl
c0018545:	c1 e2 08             	shl    edx,0x8
c0018548:	09 d0                	or     eax,edx
c001854a:	0f b7 d0             	movzx  edx,ax
c001854d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018550:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0018553:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018556:	83 c0 04             	add    eax,0x4
c0018559:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
c001855c:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c001855f:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
c0018562:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c0018565:	8a 00                	mov    al,BYTE PTR [eax]
c0018567:	0f b6 c0             	movzx  eax,al
c001856a:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c001856d:	83 c2 01             	add    edx,0x1
c0018570:	8a 12                	mov    dl,BYTE PTR [edx]
c0018572:	0f b6 d2             	movzx  edx,dl
c0018575:	c1 e2 08             	shl    edx,0x8
c0018578:	09 d0                	or     eax,edx
c001857a:	0f b7 c0             	movzx  eax,ax
c001857d:	0d 00 02 02 00       	or     eax,0x20200
c0018582:	89 c2                	mov    edx,eax
c0018584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018587:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001858a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001858d:	83 c0 04             	add    eax,0x4
c0018590:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0018593:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018596:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0018599:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001859c:	8a 00                	mov    al,BYTE PTR [eax]
c001859e:	0f b6 c0             	movzx  eax,al
c00185a1:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c00185a4:	83 c2 01             	add    edx,0x1
c00185a7:	8a 12                	mov    dl,BYTE PTR [edx]
c00185a9:	0f b6 d2             	movzx  edx,dl
c00185ac:	c1 e2 08             	shl    edx,0x8
c00185af:	09 d0                	or     eax,edx
c00185b1:	0f b7 c0             	movzx  eax,ax
c00185b4:	25 00 02 00 00       	and    eax,0x200
c00185b9:	89 c2                	mov    edx,eax
c00185bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00185c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00185c2:	85 d2                	test   edx,edx
c00185c4:	0f 95 c2             	setne  dl
c00185c7:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c00185ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185cd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00185d0:	83 c0 06             	add    eax,0x6
c00185d3:	0f b7 d0             	movzx  edx,ax
c00185d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185d9:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00185dc:	b0 01                	mov    al,0x1
c00185de:	e9 a3 09 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c00185e3:	66 c7 45 ca 00 00    	mov    WORD PTR [ebp-0x36],0x0
c00185e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00185ef:	66 89 45 ca          	mov    WORD PTR [ebp-0x36],ax
c00185f3:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c00185f7:	85 c0                	test   eax,eax
c00185f9:	74 7a                	je     c0018675 <Vm::faultHandler(regs*)+0x52e>
c00185fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018601:	3d ff ff 00 00       	cmp    eax,0xffff
c0018606:	76 6d                	jbe    c0018675 <Vm::faultHandler(regs*)+0x52e>
c0018608:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001860b:	83 c0 05             	add    eax,0x5
c001860e:	8a 00                	mov    al,BYTE PTR [eax]
c0018610:	0f b6 c0             	movzx  eax,al
c0018613:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018619:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001861c:	83 c0 04             	add    eax,0x4
c001861f:	8a 00                	mov    al,BYTE PTR [eax]
c0018621:	0f b6 f8             	movzx  edi,al
c0018624:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018627:	83 c0 03             	add    eax,0x3
c001862a:	8a 00                	mov    al,BYTE PTR [eax]
c001862c:	0f b6 f0             	movzx  esi,al
c001862f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018632:	83 c0 02             	add    eax,0x2
c0018635:	8a 00                	mov    al,BYTE PTR [eax]
c0018637:	0f b6 d8             	movzx  ebx,al
c001863a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001863d:	83 c0 01             	add    eax,0x1
c0018640:	8a 00                	mov    al,BYTE PTR [eax]
c0018642:	0f b6 c8             	movzx  ecx,al
c0018645:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018648:	8a 00                	mov    al,BYTE PTR [eax]
c001864a:	0f b6 d0             	movzx  edx,al
c001864d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018650:	8a 00                	mov    al,BYTE PTR [eax]
c0018652:	0f b6 c0             	movzx  eax,al
c0018655:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c001865b:	57                   	push   edi
c001865c:	56                   	push   esi
c001865d:	53                   	push   ebx
c001865e:	51                   	push   ecx
c001865f:	52                   	push   edx
c0018660:	50                   	push   eax
c0018661:	68 54 9d 02 c0       	push   0xc0029d54
c0018666:	e8 11 e9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001866b:	83 c4 20             	add    esp,0x20
c001866e:	b0 00                	mov    al,0x0
c0018670:	e9 11 09 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018678:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001867b:	0f b7 c0             	movzx  eax,ax
c001867e:	83 ec 0c             	sub    esp,0xc
c0018681:	50                   	push   eax
c0018682:	e8 6e f0 ff ff       	call   c00176f5 <Vm::inbv(unsigned short)>
c0018687:	83 c4 10             	add    esp,0x10
c001868a:	0f b6 c8             	movzx  ecx,al
c001868d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018690:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018693:	0f b7 d0             	movzx  edx,ax
c0018696:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
c001869a:	83 ec 04             	sub    esp,0x4
c001869d:	51                   	push   ecx
c001869e:	52                   	push   edx
c001869f:	50                   	push   eax
c00186a0:	e8 8d f9 ff ff       	call   c0018032 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00186a5:	83 c4 10             	add    esp,0x10
c00186a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00186ae:	25 00 04 00 00       	and    eax,0x400
c00186b3:	85 c0                	test   eax,eax
c00186b5:	74 14                	je     c00186cb <Vm::faultHandler(regs*)+0x584>
c00186b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186ba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00186bd:	83 e8 01             	sub    eax,0x1
c00186c0:	0f b7 d0             	movzx  edx,ax
c00186c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186c6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00186c9:	eb 12                	jmp    c00186dd <Vm::faultHandler(regs*)+0x596>
c00186cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00186d1:	83 c0 01             	add    eax,0x1
c00186d4:	0f b7 d0             	movzx  edx,ax
c00186d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00186dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00186e3:	8d 50 01             	lea    edx,[eax+0x1]
c00186e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186e9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00186ec:	b0 01                	mov    al,0x1
c00186ee:	e9 93 08 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c00186f3:	66 c7 45 c8 00 00    	mov    WORD PTR [ebp-0x38],0x0
c00186f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00186ff:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0018703:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018707:	85 c0                	test   eax,eax
c0018709:	74 7a                	je     c0018785 <Vm::faultHandler(regs*)+0x63e>
c001870b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001870e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018711:	3d ff ff 00 00       	cmp    eax,0xffff
c0018716:	76 6d                	jbe    c0018785 <Vm::faultHandler(regs*)+0x63e>
c0018718:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001871b:	83 c0 05             	add    eax,0x5
c001871e:	8a 00                	mov    al,BYTE PTR [eax]
c0018720:	0f b6 c0             	movzx  eax,al
c0018723:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018729:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001872c:	83 c0 04             	add    eax,0x4
c001872f:	8a 00                	mov    al,BYTE PTR [eax]
c0018731:	0f b6 f8             	movzx  edi,al
c0018734:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018737:	83 c0 03             	add    eax,0x3
c001873a:	8a 00                	mov    al,BYTE PTR [eax]
c001873c:	0f b6 f0             	movzx  esi,al
c001873f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018742:	83 c0 02             	add    eax,0x2
c0018745:	8a 00                	mov    al,BYTE PTR [eax]
c0018747:	0f b6 d8             	movzx  ebx,al
c001874a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001874d:	83 c0 01             	add    eax,0x1
c0018750:	8a 00                	mov    al,BYTE PTR [eax]
c0018752:	0f b6 c8             	movzx  ecx,al
c0018755:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018758:	8a 00                	mov    al,BYTE PTR [eax]
c001875a:	0f b6 d0             	movzx  edx,al
c001875d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018760:	8a 00                	mov    al,BYTE PTR [eax]
c0018762:	0f b6 c0             	movzx  eax,al
c0018765:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c001876b:	57                   	push   edi
c001876c:	56                   	push   esi
c001876d:	53                   	push   ebx
c001876e:	51                   	push   ecx
c001876f:	52                   	push   edx
c0018770:	50                   	push   eax
c0018771:	68 54 9d 02 c0       	push   0xc0029d54
c0018776:	e8 01 e8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001877b:	83 c4 20             	add    esp,0x20
c001877e:	b0 00                	mov    al,0x0
c0018780:	e9 01 08 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018785:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018789:	85 c0                	test   eax,eax
c001878b:	74 6f                	je     c00187fc <Vm::faultHandler(regs*)+0x6b5>
c001878d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018790:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018793:	0f b7 c0             	movzx  eax,ax
c0018796:	66 89 45 a6          	mov    WORD PTR [ebp-0x5a],ax
c001879a:	66 8b 45 a6          	mov    ax,WORD PTR [ebp-0x5a]
c001879e:	89 c2                	mov    edx,eax
c00187a0:	ed                   	in     eax,dx
c00187a1:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
c00187a4:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
c00187a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187aa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00187ad:	0f b7 d0             	movzx  edx,ax
c00187b0:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c00187b4:	83 ec 04             	sub    esp,0x4
c00187b7:	51                   	push   ecx
c00187b8:	52                   	push   edx
c00187b9:	50                   	push   eax
c00187ba:	e8 31 f9 ff ff       	call   c00180f0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00187bf:	83 c4 10             	add    esp,0x10
c00187c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00187c8:	25 00 04 00 00       	and    eax,0x400
c00187cd:	85 c0                	test   eax,eax
c00187cf:	74 17                	je     c00187e8 <Vm::faultHandler(regs*)+0x6a1>
c00187d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00187d7:	83 e8 04             	sub    eax,0x4
c00187da:	0f b7 d0             	movzx  edx,ax
c00187dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187e0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00187e3:	e9 83 00 00 00       	jmp    c001886b <Vm::faultHandler(regs*)+0x724>
c00187e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00187ee:	83 c0 04             	add    eax,0x4
c00187f1:	0f b7 d0             	movzx  edx,ax
c00187f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187f7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00187fa:	eb 6f                	jmp    c001886b <Vm::faultHandler(regs*)+0x724>
c00187fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187ff:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018802:	0f b7 c0             	movzx  eax,ax
c0018805:	66 89 45 9e          	mov    WORD PTR [ebp-0x62],ax
c0018809:	66 8b 45 9e          	mov    ax,WORD PTR [ebp-0x62]
c001880d:	89 c2                	mov    edx,eax
c001880f:	66 ed                	in     ax,dx
c0018811:	66 89 45 9c          	mov    WORD PTR [ebp-0x64],ax
c0018815:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
c0018818:	0f b7 c8             	movzx  ecx,ax
c001881b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001881e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018821:	0f b7 d0             	movzx  edx,ax
c0018824:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018828:	83 ec 04             	sub    esp,0x4
c001882b:	51                   	push   ecx
c001882c:	52                   	push   edx
c001882d:	50                   	push   eax
c001882e:	e8 5e f8 ff ff       	call   c0018091 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018833:	83 c4 10             	add    esp,0x10
c0018836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018839:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001883c:	25 00 04 00 00       	and    eax,0x400
c0018841:	85 c0                	test   eax,eax
c0018843:	74 14                	je     c0018859 <Vm::faultHandler(regs*)+0x712>
c0018845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018848:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001884b:	83 e8 02             	sub    eax,0x2
c001884e:	0f b7 d0             	movzx  edx,ax
c0018851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018854:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018857:	eb 12                	jmp    c001886b <Vm::faultHandler(regs*)+0x724>
c0018859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001885c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001885f:	83 c0 02             	add    eax,0x2
c0018862:	0f b7 d0             	movzx  edx,ax
c0018865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018868:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001886b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001886e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018871:	8d 50 01             	lea    edx,[eax+0x1]
c0018874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018877:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001887a:	b0 01                	mov    al,0x1
c001887c:	e9 05 07 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018881:	66 c7 45 de 00 00    	mov    WORD PTR [ebp-0x22],0x0
c0018887:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c001888b:	83 f8 06             	cmp    eax,0x6
c001888e:	77 4f                	ja     c00188df <Vm::faultHandler(regs*)+0x798>
c0018890:	8b 04 85 0c a1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ef4]
c0018897:	ff e0                	jmp    eax
c0018899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001889c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001889f:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00188a3:	eb 3a                	jmp    c00188df <Vm::faultHandler(regs*)+0x798>
c00188a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00188ab:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00188af:	eb 2e                	jmp    c00188df <Vm::faultHandler(regs*)+0x798>
c00188b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00188b7:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00188bb:	eb 22                	jmp    c00188df <Vm::faultHandler(regs*)+0x798>
c00188bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00188c3:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00188c7:	eb 16                	jmp    c00188df <Vm::faultHandler(regs*)+0x798>
c00188c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00188ce:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00188d2:	eb 0b                	jmp    c00188df <Vm::faultHandler(regs*)+0x798>
c00188d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188d7:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c00188da:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00188de:	90                   	nop
c00188df:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c00188e3:	85 c0                	test   eax,eax
c00188e5:	74 7a                	je     c0018961 <Vm::faultHandler(regs*)+0x81a>
c00188e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188ea:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00188ed:	3d ff ff 00 00       	cmp    eax,0xffff
c00188f2:	76 6d                	jbe    c0018961 <Vm::faultHandler(regs*)+0x81a>
c00188f4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00188f7:	83 c0 05             	add    eax,0x5
c00188fa:	8a 00                	mov    al,BYTE PTR [eax]
c00188fc:	0f b6 c0             	movzx  eax,al
c00188ff:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018905:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018908:	83 c0 04             	add    eax,0x4
c001890b:	8a 00                	mov    al,BYTE PTR [eax]
c001890d:	0f b6 f8             	movzx  edi,al
c0018910:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018913:	83 c0 03             	add    eax,0x3
c0018916:	8a 00                	mov    al,BYTE PTR [eax]
c0018918:	0f b6 f0             	movzx  esi,al
c001891b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001891e:	83 c0 02             	add    eax,0x2
c0018921:	8a 00                	mov    al,BYTE PTR [eax]
c0018923:	0f b6 d8             	movzx  ebx,al
c0018926:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018929:	83 c0 01             	add    eax,0x1
c001892c:	8a 00                	mov    al,BYTE PTR [eax]
c001892e:	0f b6 c8             	movzx  ecx,al
c0018931:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018934:	8a 00                	mov    al,BYTE PTR [eax]
c0018936:	0f b6 d0             	movzx  edx,al
c0018939:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001893c:	8a 00                	mov    al,BYTE PTR [eax]
c001893e:	0f b6 c0             	movzx  eax,al
c0018941:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018947:	57                   	push   edi
c0018948:	56                   	push   esi
c0018949:	53                   	push   ebx
c001894a:	51                   	push   ecx
c001894b:	52                   	push   edx
c001894c:	50                   	push   eax
c001894d:	68 54 9d 02 c0       	push   0xc0029d54
c0018952:	e8 25 e6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018957:	83 c4 20             	add    esp,0x20
c001895a:	b0 00                	mov    al,0x0
c001895c:	e9 25 06 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018964:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018967:	0f b7 d0             	movzx  edx,ax
c001896a:	0f b7 45 de          	movzx  eax,WORD PTR [ebp-0x22]
c001896e:	83 ec 08             	sub    esp,0x8
c0018971:	52                   	push   edx
c0018972:	50                   	push   eax
c0018973:	e8 c0 f5 ff ff       	call   c0017f38 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018978:	83 c4 10             	add    esp,0x10
c001897b:	0f b6 d0             	movzx  edx,al
c001897e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018981:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018984:	0f b7 c0             	movzx  eax,ax
c0018987:	83 ec 08             	sub    esp,0x8
c001898a:	52                   	push   edx
c001898b:	50                   	push   eax
c001898c:	e8 9b ed ff ff       	call   c001772c <Vm::outbv(unsigned short, unsigned char)>
c0018991:	83 c4 10             	add    esp,0x10
c0018994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018997:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001899a:	25 00 04 00 00       	and    eax,0x400
c001899f:	85 c0                	test   eax,eax
c00189a1:	74 14                	je     c00189b7 <Vm::faultHandler(regs*)+0x870>
c00189a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189a6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00189a9:	83 e8 01             	sub    eax,0x1
c00189ac:	0f b7 d0             	movzx  edx,ax
c00189af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189b2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00189b5:	eb 12                	jmp    c00189c9 <Vm::faultHandler(regs*)+0x882>
c00189b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189ba:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00189bd:	83 c0 01             	add    eax,0x1
c00189c0:	0f b7 d0             	movzx  edx,ax
c00189c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189c6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00189c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00189cf:	8d 50 01             	lea    edx,[eax+0x1]
c00189d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189d5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00189d8:	b0 01                	mov    al,0x1
c00189da:	e9 a7 05 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c00189df:	66 c7 45 dc 00 00    	mov    WORD PTR [ebp-0x24],0x0
c00189e5:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c00189e9:	83 f8 06             	cmp    eax,0x6
c00189ec:	77 4f                	ja     c0018a3d <Vm::faultHandler(regs*)+0x8f6>
c00189ee:	8b 04 85 28 a1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ed8]
c00189f5:	ff e0                	jmp    eax
c00189f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00189fd:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018a01:	eb 3a                	jmp    c0018a3d <Vm::faultHandler(regs*)+0x8f6>
c0018a03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a06:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a09:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018a0d:	eb 2e                	jmp    c0018a3d <Vm::faultHandler(regs*)+0x8f6>
c0018a0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018a15:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018a19:	eb 22                	jmp    c0018a3d <Vm::faultHandler(regs*)+0x8f6>
c0018a1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018a21:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018a25:	eb 16                	jmp    c0018a3d <Vm::faultHandler(regs*)+0x8f6>
c0018a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a2c:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018a30:	eb 0b                	jmp    c0018a3d <Vm::faultHandler(regs*)+0x8f6>
c0018a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a35:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018a38:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018a3c:	90                   	nop
c0018a3d:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018a41:	85 c0                	test   eax,eax
c0018a43:	74 7a                	je     c0018abf <Vm::faultHandler(regs*)+0x978>
c0018a45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a48:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018a4b:	3d ff ff 00 00       	cmp    eax,0xffff
c0018a50:	76 6d                	jbe    c0018abf <Vm::faultHandler(regs*)+0x978>
c0018a52:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a55:	83 c0 05             	add    eax,0x5
c0018a58:	8a 00                	mov    al,BYTE PTR [eax]
c0018a5a:	0f b6 c0             	movzx  eax,al
c0018a5d:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018a63:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a66:	83 c0 04             	add    eax,0x4
c0018a69:	8a 00                	mov    al,BYTE PTR [eax]
c0018a6b:	0f b6 f8             	movzx  edi,al
c0018a6e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a71:	83 c0 03             	add    eax,0x3
c0018a74:	8a 00                	mov    al,BYTE PTR [eax]
c0018a76:	0f b6 f0             	movzx  esi,al
c0018a79:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a7c:	83 c0 02             	add    eax,0x2
c0018a7f:	8a 00                	mov    al,BYTE PTR [eax]
c0018a81:	0f b6 d8             	movzx  ebx,al
c0018a84:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a87:	83 c0 01             	add    eax,0x1
c0018a8a:	8a 00                	mov    al,BYTE PTR [eax]
c0018a8c:	0f b6 c8             	movzx  ecx,al
c0018a8f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a92:	8a 00                	mov    al,BYTE PTR [eax]
c0018a94:	0f b6 d0             	movzx  edx,al
c0018a97:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a9a:	8a 00                	mov    al,BYTE PTR [eax]
c0018a9c:	0f b6 c0             	movzx  eax,al
c0018a9f:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018aa5:	57                   	push   edi
c0018aa6:	56                   	push   esi
c0018aa7:	53                   	push   ebx
c0018aa8:	51                   	push   ecx
c0018aa9:	52                   	push   edx
c0018aaa:	50                   	push   eax
c0018aab:	68 54 9d 02 c0       	push   0xc0029d54
c0018ab0:	e8 c7 e4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018ab5:	83 c4 20             	add    esp,0x20
c0018ab8:	b0 00                	mov    al,0x0
c0018aba:	e9 c7 04 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018abf:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018ac3:	85 c0                	test   eax,eax
c0018ac5:	74 6e                	je     c0018b35 <Vm::faultHandler(regs*)+0x9ee>
c0018ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018aca:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018acd:	0f b7 d0             	movzx  edx,ax
c0018ad0:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0018ad4:	83 ec 08             	sub    esp,0x8
c0018ad7:	52                   	push   edx
c0018ad8:	50                   	push   eax
c0018ad9:	e8 01 f5 ff ff       	call   c0017fdf <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018ade:	83 c4 10             	add    esp,0x10
c0018ae1:	89 c2                	mov    edx,eax
c0018ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ae6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018ae9:	0f b7 c0             	movzx  eax,ax
c0018aec:	66 89 45 9a          	mov    WORD PTR [ebp-0x66],ax
c0018af0:	89 55 94             	mov    DWORD PTR [ebp-0x6c],edx
c0018af3:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
c0018af6:	66 8b 55 9a          	mov    dx,WORD PTR [ebp-0x66]
c0018afa:	ef                   	out    dx,eax
c0018afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018afe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018b01:	25 00 04 00 00       	and    eax,0x400
c0018b06:	85 c0                	test   eax,eax
c0018b08:	74 17                	je     c0018b21 <Vm::faultHandler(regs*)+0x9da>
c0018b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b0d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018b10:	83 e8 04             	sub    eax,0x4
c0018b13:	0f b7 d0             	movzx  edx,ax
c0018b16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b19:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018b1c:	e9 80 00 00 00       	jmp    c0018ba1 <Vm::faultHandler(regs*)+0xa5a>
c0018b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018b27:	83 c0 04             	add    eax,0x4
c0018b2a:	0f b7 d0             	movzx  edx,ax
c0018b2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b30:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018b33:	eb 6c                	jmp    c0018ba1 <Vm::faultHandler(regs*)+0xa5a>
c0018b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b38:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018b3b:	0f b7 d0             	movzx  edx,ax
c0018b3e:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0018b42:	83 ec 08             	sub    esp,0x8
c0018b45:	52                   	push   edx
c0018b46:	50                   	push   eax
c0018b47:	e8 3f f4 ff ff       	call   c0017f8b <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018b4c:	83 c4 10             	add    esp,0x10
c0018b4f:	0f b7 c0             	movzx  eax,ax
c0018b52:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018b55:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018b58:	0f b7 d2             	movzx  edx,dx
c0018b5b:	66 89 55 92          	mov    WORD PTR [ebp-0x6e],dx
c0018b5f:	66 89 45 90          	mov    WORD PTR [ebp-0x70],ax
c0018b63:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
c0018b66:	66 8b 55 92          	mov    dx,WORD PTR [ebp-0x6e]
c0018b6a:	66 ef                	out    dx,ax
c0018b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b6f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018b72:	25 00 04 00 00       	and    eax,0x400
c0018b77:	85 c0                	test   eax,eax
c0018b79:	74 14                	je     c0018b8f <Vm::faultHandler(regs*)+0xa48>
c0018b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b7e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018b81:	83 e8 02             	sub    eax,0x2
c0018b84:	0f b7 d0             	movzx  edx,ax
c0018b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b8a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018b8d:	eb 12                	jmp    c0018ba1 <Vm::faultHandler(regs*)+0xa5a>
c0018b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b92:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018b95:	83 c0 02             	add    eax,0x2
c0018b98:	0f b7 d0             	movzx  edx,ax
c0018b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b9e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ba4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ba7:	8d 50 01             	lea    edx,[eax+0x1]
c0018baa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018bb0:	b0 01                	mov    al,0x1
c0018bb2:	e9 cf 03 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bba:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018bbd:	b0 00                	mov    al,0x0
c0018bbf:	89 c2                	mov    edx,eax
c0018bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bc4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018bc7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018bca:	83 c0 01             	add    eax,0x1
c0018bcd:	8a 00                	mov    al,BYTE PTR [eax]
c0018bcf:	0f b6 c0             	movzx  eax,al
c0018bd2:	83 ec 0c             	sub    esp,0xc
c0018bd5:	50                   	push   eax
c0018bd6:	e8 1a eb ff ff       	call   c00176f5 <Vm::inbv(unsigned short)>
c0018bdb:	83 c4 10             	add    esp,0x10
c0018bde:	88 c1                	mov    cl,al
c0018be0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018be3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018be6:	0f b6 c1             	movzx  eax,cl
c0018be9:	09 c2                	or     edx,eax
c0018beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bee:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018bf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bf4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018bf7:	8d 50 02             	lea    edx,[eax+0x2]
c0018bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bfd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018c00:	b0 01                	mov    al,0x1
c0018c02:	e9 7f 03 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018c07:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018c0b:	85 c0                	test   eax,eax
c0018c0d:	74 24                	je     c0018c33 <Vm::faultHandler(regs*)+0xaec>
c0018c0f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018c12:	83 c0 01             	add    eax,0x1
c0018c15:	8a 00                	mov    al,BYTE PTR [eax]
c0018c17:	0f b6 c0             	movzx  eax,al
c0018c1a:	66 89 45 8e          	mov    WORD PTR [ebp-0x72],ax
c0018c1e:	66 8b 45 8e          	mov    ax,WORD PTR [ebp-0x72]
c0018c22:	89 c2                	mov    edx,eax
c0018c24:	ed                   	in     eax,dx
c0018c25:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
c0018c28:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
c0018c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c2e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018c31:	eb 42                	jmp    c0018c75 <Vm::faultHandler(regs*)+0xb2e>
c0018c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c36:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018c39:	25 00 00 ff ff       	and    eax,0xffff0000
c0018c3e:	89 c2                	mov    edx,eax
c0018c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018c46:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018c49:	83 c0 01             	add    eax,0x1
c0018c4c:	8a 00                	mov    al,BYTE PTR [eax]
c0018c4e:	0f b6 c0             	movzx  eax,al
c0018c51:	66 89 45 86          	mov    WORD PTR [ebp-0x7a],ax
c0018c55:	66 8b 45 86          	mov    ax,WORD PTR [ebp-0x7a]
c0018c59:	89 c2                	mov    edx,eax
c0018c5b:	66 ed                	in     ax,dx
c0018c5d:	66 89 45 84          	mov    WORD PTR [ebp-0x7c],ax
c0018c61:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
c0018c64:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018c67:	8b 52 2c             	mov    edx,DWORD PTR [edx+0x2c]
c0018c6a:	0f b7 c0             	movzx  eax,ax
c0018c6d:	09 c2                	or     edx,eax
c0018c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c72:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018c7b:	8d 50 02             	lea    edx,[eax+0x2]
c0018c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018c84:	b0 01                	mov    al,0x1
c0018c86:	e9 fb 02 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c8e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018c91:	0f b6 d0             	movzx  edx,al
c0018c94:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018c97:	83 c0 01             	add    eax,0x1
c0018c9a:	8a 00                	mov    al,BYTE PTR [eax]
c0018c9c:	0f b6 c0             	movzx  eax,al
c0018c9f:	83 ec 08             	sub    esp,0x8
c0018ca2:	52                   	push   edx
c0018ca3:	50                   	push   eax
c0018ca4:	e8 83 ea ff ff       	call   c001772c <Vm::outbv(unsigned short, unsigned char)>
c0018ca9:	83 c4 10             	add    esp,0x10
c0018cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018caf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018cb2:	8d 50 02             	lea    edx,[eax+0x2]
c0018cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cb8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018cbb:	b0 01                	mov    al,0x1
c0018cbd:	e9 c4 02 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018cc2:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018cc6:	85 c0                	test   eax,eax
c0018cc8:	74 28                	je     c0018cf2 <Vm::faultHandler(regs*)+0xbab>
c0018cca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ccd:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018cd0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cd3:	83 c0 01             	add    eax,0x1
c0018cd6:	8a 00                	mov    al,BYTE PTR [eax]
c0018cd8:	0f b6 c0             	movzx  eax,al
c0018cdb:	66 89 45 82          	mov    WORD PTR [ebp-0x7e],ax
c0018cdf:	89 95 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],edx
c0018ce5:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [ebp-0x84]
c0018ceb:	66 8b 55 82          	mov    dx,WORD PTR [ebp-0x7e]
c0018cef:	ef                   	out    dx,eax
c0018cf0:	eb 31                	jmp    c0018d23 <Vm::faultHandler(regs*)+0xbdc>
c0018cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cf5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018cf8:	0f b7 c0             	movzx  eax,ax
c0018cfb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018cfe:	83 c2 01             	add    edx,0x1
c0018d01:	8a 12                	mov    dl,BYTE PTR [edx]
c0018d03:	0f b6 d2             	movzx  edx,dl
c0018d06:	66 89 95 7a ff ff ff 	mov    WORD PTR [ebp-0x86],dx
c0018d0d:	66 89 85 78 ff ff ff 	mov    WORD PTR [ebp-0x88],ax
c0018d14:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [ebp-0x88]
c0018d1a:	66 8b 95 7a ff ff ff 	mov    dx,WORD PTR [ebp-0x86]
c0018d21:	66 ef                	out    dx,ax
c0018d23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d26:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018d29:	8d 50 02             	lea    edx,[eax+0x2]
c0018d2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d2f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018d32:	b0 01                	mov    al,0x1
c0018d34:	e9 4d 02 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d3c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018d3f:	b0 00                	mov    al,0x0
c0018d41:	89 c2                	mov    edx,eax
c0018d43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d46:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d4c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018d4f:	0f b7 c0             	movzx  eax,ax
c0018d52:	83 ec 0c             	sub    esp,0xc
c0018d55:	50                   	push   eax
c0018d56:	e8 9a e9 ff ff       	call   c00176f5 <Vm::inbv(unsigned short)>
c0018d5b:	83 c4 10             	add    esp,0x10
c0018d5e:	88 c1                	mov    cl,al
c0018d60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d63:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018d66:	0f b6 c1             	movzx  eax,cl
c0018d69:	09 c2                	or     edx,eax
c0018d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d6e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018d71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018d77:	8d 50 01             	lea    edx,[eax+0x1]
c0018d7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d7d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018d80:	b0 01                	mov    al,0x1
c0018d82:	e9 ff 01 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018d87:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018d8b:	85 c0                	test   eax,eax
c0018d8d:	74 2e                	je     c0018dbd <Vm::faultHandler(regs*)+0xc76>
c0018d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d92:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018d95:	0f b7 c0             	movzx  eax,ax
c0018d98:	66 89 85 76 ff ff ff 	mov    WORD PTR [ebp-0x8a],ax
c0018d9f:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [ebp-0x8a]
c0018da6:	89 c2                	mov    edx,eax
c0018da8:	ed                   	in     eax,dx
c0018da9:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
c0018daf:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [ebp-0x90]
c0018db5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018db8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018dbb:	eb 4c                	jmp    c0018e09 <Vm::faultHandler(regs*)+0xcc2>
c0018dbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dc0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018dc3:	25 00 00 ff ff       	and    eax,0xffff0000
c0018dc8:	89 c2                	mov    edx,eax
c0018dca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dcd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dd3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018dd6:	0f b7 c0             	movzx  eax,ax
c0018dd9:	66 89 85 6e ff ff ff 	mov    WORD PTR [ebp-0x92],ax
c0018de0:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [ebp-0x92]
c0018de7:	89 c2                	mov    edx,eax
c0018de9:	66 ed                	in     ax,dx
c0018deb:	66 89 85 6c ff ff ff 	mov    WORD PTR [ebp-0x94],ax
c0018df2:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [ebp-0x94]
c0018df8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018dfb:	8b 52 2c             	mov    edx,DWORD PTR [edx+0x2c]
c0018dfe:	0f b7 c0             	movzx  eax,ax
c0018e01:	09 c2                	or     edx,eax
c0018e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e06:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e0c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018e0f:	8d 50 01             	lea    edx,[eax+0x1]
c0018e12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e15:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018e18:	b0 01                	mov    al,0x1
c0018e1a:	e9 67 01 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018e1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e22:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018e25:	0f b6 d0             	movzx  edx,al
c0018e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e2b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018e2e:	0f b7 c0             	movzx  eax,ax
c0018e31:	83 ec 08             	sub    esp,0x8
c0018e34:	52                   	push   edx
c0018e35:	50                   	push   eax
c0018e36:	e8 f1 e8 ff ff       	call   c001772c <Vm::outbv(unsigned short, unsigned char)>
c0018e3b:	83 c4 10             	add    esp,0x10
c0018e3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e41:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018e44:	8d 50 01             	lea    edx,[eax+0x1]
c0018e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e4a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018e4d:	b0 01                	mov    al,0x1
c0018e4f:	e9 32 01 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018e54:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018e58:	85 c0                	test   eax,eax
c0018e5a:	74 2c                	je     c0018e88 <Vm::faultHandler(regs*)+0xd41>
c0018e5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e5f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e65:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018e68:	0f b7 c0             	movzx  eax,ax
c0018e6b:	66 89 85 6a ff ff ff 	mov    WORD PTR [ebp-0x96],ax
c0018e72:	89 95 64 ff ff ff    	mov    DWORD PTR [ebp-0x9c],edx
c0018e78:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
c0018e7e:	66 8b 95 6a ff ff ff 	mov    dx,WORD PTR [ebp-0x96]
c0018e85:	ef                   	out    dx,eax
c0018e86:	eb 2f                	jmp    c0018eb7 <Vm::faultHandler(regs*)+0xd70>
c0018e88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e8b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018e8e:	0f b7 c0             	movzx  eax,ax
c0018e91:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018e94:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0018e97:	0f b7 d2             	movzx  edx,dx
c0018e9a:	66 89 95 62 ff ff ff 	mov    WORD PTR [ebp-0x9e],dx
c0018ea1:	66 89 85 60 ff ff ff 	mov    WORD PTR [ebp-0xa0],ax
c0018ea8:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [ebp-0xa0]
c0018eae:	66 8b 95 62 ff ff ff 	mov    dx,WORD PTR [ebp-0x9e]
c0018eb5:	66 ef                	out    dx,ax
c0018eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018ebd:	8d 50 01             	lea    edx,[eax+0x1]
c0018ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ec3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018ec6:	b0 01                	mov    al,0x1
c0018ec8:	e9 b9 00 00 00       	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018ecd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ed0:	83 c0 05             	add    eax,0x5
c0018ed3:	8a 00                	mov    al,BYTE PTR [eax]
c0018ed5:	0f b6 c0             	movzx  eax,al
c0018ed8:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018ede:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ee1:	83 c0 04             	add    eax,0x4
c0018ee4:	8a 00                	mov    al,BYTE PTR [eax]
c0018ee6:	0f b6 f8             	movzx  edi,al
c0018ee9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018eec:	83 c0 03             	add    eax,0x3
c0018eef:	8a 00                	mov    al,BYTE PTR [eax]
c0018ef1:	0f b6 f0             	movzx  esi,al
c0018ef4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ef7:	83 c0 02             	add    eax,0x2
c0018efa:	8a 00                	mov    al,BYTE PTR [eax]
c0018efc:	0f b6 d8             	movzx  ebx,al
c0018eff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018f02:	83 c0 01             	add    eax,0x1
c0018f05:	8a 00                	mov    al,BYTE PTR [eax]
c0018f07:	0f b6 c8             	movzx  ecx,al
c0018f0a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018f0d:	8a 00                	mov    al,BYTE PTR [eax]
c0018f0f:	0f b6 d0             	movzx  edx,al
c0018f12:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018f15:	8a 00                	mov    al,BYTE PTR [eax]
c0018f17:	0f b6 c0             	movzx  eax,al
c0018f1a:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018f20:	57                   	push   edi
c0018f21:	56                   	push   esi
c0018f22:	53                   	push   ebx
c0018f23:	51                   	push   ecx
c0018f24:	52                   	push   edx
c0018f25:	50                   	push   eax
c0018f26:	68 84 9d 02 c0       	push   0xc0029d84
c0018f2b:	e8 4c e0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018f30:	83 c4 20             	add    esp,0x20
c0018f33:	83 ec 0c             	sub    esp,0xc
c0018f36:	6a 60                	push   0x60
c0018f38:	e8 b8 e7 ff ff       	call   c00176f5 <Vm::inbv(unsigned short)>
c0018f3d:	83 c4 10             	add    esp,0x10
c0018f40:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0018f43:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018f47:	83 f8 1c             	cmp    eax,0x1c
c0018f4a:	74 09                	je     c0018f55 <Vm::faultHandler(regs*)+0xe0e>
c0018f4c:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018f50:	83 f8 5a             	cmp    eax,0x5a
c0018f53:	75 24                	jne    c0018f79 <Vm::faultHandler(regs*)+0xe32>
c0018f55:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018f59:	83 f8 1c             	cmp    eax,0x1c
c0018f5c:	74 09                	je     c0018f67 <Vm::faultHandler(regs*)+0xe20>
c0018f5e:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018f62:	83 f8 5a             	cmp    eax,0x5a
c0018f65:	75 15                	jne    c0018f7c <Vm::faultHandler(regs*)+0xe35>
c0018f67:	83 ec 0c             	sub    esp,0xc
c0018f6a:	6a 60                	push   0x60
c0018f6c:	e8 84 e7 ff ff       	call   c00176f5 <Vm::inbv(unsigned short)>
c0018f71:	83 c4 10             	add    esp,0x10
c0018f74:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0018f77:	eb dc                	jmp    c0018f55 <Vm::faultHandler(regs*)+0xe0e>
c0018f79:	90                   	nop
c0018f7a:	eb b7                	jmp    c0018f33 <Vm::faultHandler(regs*)+0xdec>
c0018f7c:	90                   	nop
c0018f7d:	b0 00                	mov    al,0x0
c0018f7f:	eb 05                	jmp    c0018f86 <Vm::faultHandler(regs*)+0xe3f>
c0018f81:	e9 3d f2 ff ff       	jmp    c00181c3 <Vm::faultHandler(regs*)+0x7c>
c0018f86:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018f89:	5b                   	pop    ebx
c0018f8a:	5e                   	pop    esi
c0018f8b:	5f                   	pop    edi
c0018f8c:	5d                   	pop    ebp
c0018f8d:	c3                   	ret    

c0018f8e <IOAPIC::close(int, int, void*)>:
c0018f8e:	b8 00 00 00 00       	mov    eax,0x0
c0018f93:	c3                   	ret    

c0018f94 <apicGetBase()>:
c0018f94:	55                   	push   ebp
c0018f95:	89 e5                	mov    ebp,esp
c0018f97:	83 ec 18             	sub    esp,0x18
c0018f9a:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0018f9f:	83 e0 08             	and    eax,0x8
c0018fa2:	0f b6 c0             	movzx  eax,al
c0018fa5:	85 c0                	test   eax,eax
c0018fa7:	75 07                	jne    c0018fb0 <apicGetBase()+0x1c>
c0018fa9:	b8 00 00 00 00       	mov    eax,0x0
c0018fae:	eb 1b                	jmp    c0018fcb <apicGetBase()+0x37>
c0018fb0:	83 ec 0c             	sub    esp,0xc
c0018fb3:	6a 1b                	push   0x1b
c0018fb5:	e8 72 15 00 00       	call   c001a52c <x86rdmsr(unsigned int)>
c0018fba:	83 c4 10             	add    esp,0x10
c0018fbd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018fc0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018fc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018fc6:	25 00 00 ff ff       	and    eax,0xffff0000
c0018fcb:	c9                   	leave  
c0018fcc:	c3                   	ret    
c0018fcd:	90                   	nop

c0018fce <IOAPIC::IOAPIC()>:
c0018fce:	83 ec 0c             	sub    esp,0xc
c0018fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fd5:	83 ec 08             	sub    esp,0x8
c0018fd8:	68 44 a1 02 c0       	push   0xc002a144
c0018fdd:	50                   	push   eax
c0018fde:	e8 ab 10 ff ff       	call   c000a08e <Device::Device(char const*)>
c0018fe3:	83 c4 10             	add    esp,0x10
c0018fe6:	ba 64 a1 02 c0       	mov    edx,0xc002a164
c0018feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fef:	89 10                	mov    DWORD PTR [eax],edx
c0018ff1:	90                   	nop
c0018ff2:	83 c4 0c             	add    esp,0xc
c0018ff5:	c3                   	ret    

c0018ff6 <apicOpen()>:
c0018ff6:	55                   	push   ebp
c0018ff7:	89 e5                	mov    ebp,esp
c0018ff9:	53                   	push   ebx
c0018ffa:	83 ec 34             	sub    esp,0x34
c0018ffd:	83 ec 0c             	sub    esp,0xc
c0019000:	68 4c a1 02 c0       	push   0xc002a14c
c0019005:	e8 72 df fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	a0 00 34 03 c0       	mov    al,ds:0xc0033400
c0019012:	83 f0 01             	xor    eax,0x1
c0019015:	0f b6 c0             	movzx  eax,al
c0019018:	85 c0                	test   eax,eax
c001901a:	0f 84 a3 00 00 00    	je     c00190c3 <apicOpen()+0xcd>
c0019020:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0019024:	a0 40 2e 03 c0       	mov    al,ds:0xc0032e40
c0019029:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001902d:	0f b6 c0             	movzx  eax,al
c0019030:	39 c2                	cmp    edx,eax
c0019032:	0f 83 84 00 00 00    	jae    c00190bc <apicOpen()+0xc6>
c0019038:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001903f:	83 ec 0c             	sub    esp,0xc
c0019042:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0019045:	e8 f1 6c ff ff       	call   c000fd3b <malloc>
c001904a:	83 c4 10             	add    esp,0x10
c001904d:	89 c3                	mov    ebx,eax
c001904f:	83 ec 0c             	sub    esp,0xc
c0019052:	53                   	push   ebx
c0019053:	e8 76 ff ff ff       	call   c0018fce <IOAPIC::IOAPIC()>
c0019058:	83 c4 10             	add    esp,0x10
c001905b:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001905e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0019062:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0019065:	89 14 85 e0 33 03 c0 	mov    DWORD PTR [eax*4-0x3ffccc20],edx
c001906c:	a1 c0 33 03 c0       	mov    eax,ds:0xc00333c0
c0019071:	83 c0 01             	add    eax,0x1
c0019074:	a3 c0 33 03 c0       	mov    ds:0xc00333c0,eax
c0019079:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001907e:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0019084:	83 ec 08             	sub    esp,0x8
c0019087:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001908a:	50                   	push   eax
c001908b:	e8 9c 0e ff ff       	call   c0009f2c <Device::addChild(Device*)>
c0019090:	83 c4 10             	add    esp,0x10
c0019093:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0019096:	8b 00                	mov    eax,DWORD PTR [eax]
c0019098:	83 c0 08             	add    eax,0x8
c001909b:	8b 00                	mov    eax,DWORD PTR [eax]
c001909d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00190a1:	6a 00                	push   0x0
c00190a3:	6a 00                	push   0x0
c00190a5:	52                   	push   edx
c00190a6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00190a9:	ff d0                	call   eax
c00190ab:	83 c4 10             	add    esp,0x10
c00190ae:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c00190b1:	83 c0 01             	add    eax,0x1
c00190b4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c00190b7:	e9 68 ff ff ff       	jmp    c0019024 <apicOpen()+0x2e>
c00190bc:	c6 05 00 34 03 c0 01 	mov    BYTE PTR ds:0xc0033400,0x1
c00190c3:	e8 cc fe ff ff       	call   c0018f94 <apicGetBase()>
c00190c8:	05 f0 00 00 00       	add    eax,0xf0
c00190cd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00190d0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00190d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00190d5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00190d8:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c00190df:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c00190e6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00190e9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00190ec:	89 10                	mov    DWORD PTR [eax],edx
c00190ee:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00190f5:	a1 8c 2d 03 c0       	mov    eax,ds:0xc0032d8c
c00190fa:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00190fd:	7d 7c                	jge    c001917b <apicOpen()+0x185>
c00190ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019102:	8b 04 85 a0 2d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd260]
c0019109:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001910c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001910f:	8b 04 85 a0 2d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd260]
c0019116:	c1 e8 08             	shr    eax,0x8
c0019119:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001911d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019120:	8b 04 85 a0 2d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd260]
c0019127:	c1 e8 18             	shr    eax,0x18
c001912a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001912d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0019131:	3d ff 00 00 00       	cmp    eax,0xff
c0019136:	75 3a                	jne    c0019172 <apicOpen()+0x17c>
c0019138:	e8 57 fe ff ff       	call   c0018f94 <apicGetBase()>
c001913d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0019141:	83 fa 01             	cmp    edx,0x1
c0019144:	75 07                	jne    c001914d <apicOpen()+0x157>
c0019146:	ba 60 03 00 00       	mov    edx,0x360
c001914b:	eb 05                	jmp    c0019152 <apicOpen()+0x15c>
c001914d:	ba 50 03 00 00       	mov    edx,0x350
c0019152:	01 d0                	add    eax,edx
c0019154:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0019157:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001915a:	8b 00                	mov    eax,DWORD PTR [eax]
c001915c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001915f:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0019166:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001916a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001916d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0019170:	89 10                	mov    DWORD PTR [eax],edx
c0019172:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0019176:	e9 7a ff ff ff       	jmp    c00190f5 <apicOpen()+0xff>
c001917b:	90                   	nop
c001917c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001917f:	c9                   	leave  
c0019180:	c3                   	ret    
c0019181:	90                   	nop

c0019182 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0019182:	55                   	push   ebp
c0019183:	89 e5                	mov    ebp,esp
c0019185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001918e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0019191:	72 1d                	jb     c00191b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0019193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019196:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001919c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001919f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00191a5:	01 d0                	add    eax,edx
c00191a7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00191aa:	73 04                	jae    c00191b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00191ac:	b0 01                	mov    al,0x1
c00191ae:	eb 02                	jmp    c00191b2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00191b0:	b0 00                	mov    al,0x0
c00191b2:	5d                   	pop    ebp
c00191b3:	c3                   	ret    

c00191b4 <IOAPIC::read(int)>:
c00191b4:	55                   	push   ebp
c00191b5:	89 e5                	mov    ebp,esp
c00191b7:	83 ec 10             	sub    esp,0x10
c00191ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00191c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00191c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00191c9:	0f b6 d0             	movzx  edx,al
c00191cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00191cf:	89 10                	mov    DWORD PTR [eax],edx
c00191d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00191d4:	83 c0 10             	add    eax,0x10
c00191d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00191d9:	c9                   	leave  
c00191da:	c3                   	ret    
c00191db:	90                   	nop

c00191dc <IOAPIC::open(int, int, void*)>:
c00191dc:	55                   	push   ebp
c00191dd:	89 e5                	mov    ebp,esp
c00191df:	57                   	push   edi
c00191e0:	56                   	push   esi
c00191e1:	53                   	push   ebx
c00191e2:	83 ec 04             	sub    esp,0x4
c00191e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191e8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00191eb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00191f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191f4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00191fa:	8b 14 85 80 2e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcd180]
c0019201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019204:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001920a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001920d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019213:	8b 14 85 00 2f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcd100]
c001921a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001921d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019226:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001922c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001922f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0019235:	0f b6 f0             	movzx  esi,al
c0019238:	89 d0                	mov    eax,edx
c001923a:	ba 00 00 00 00       	mov    edx,0x0
c001923f:	89 c7                	mov    edi,eax
c0019241:	83 e7 ff             	and    edi,0xffffffff
c0019244:	89 f9                	mov    ecx,edi
c0019246:	0f b6 da             	movzx  ebx,dl
c0019249:	89 c8                	mov    eax,ecx
c001924b:	89 da                	mov    edx,ebx
c001924d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0019250:	8d 5e 08             	lea    ebx,[esi+0x8]
c0019253:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0019257:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001925b:	83 e0 00             	and    eax,0x0
c001925e:	09 d0                	or     eax,edx
c0019260:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0019264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019267:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001926d:	8d 50 01             	lea    edx,[eax+0x1]
c0019270:	88 d1                	mov    cl,dl
c0019272:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019275:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001927b:	0f b6 d0             	movzx  edx,al
c001927e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019281:	83 c2 08             	add    edx,0x8
c0019284:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0019288:	0f b6 c9             	movzx  ecx,cl
c001928b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0019291:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0019295:	6a 01                	push   0x1
c0019297:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001929a:	e8 15 ff ff ff       	call   c00191b4 <IOAPIC::read(int)>
c001929f:	83 c4 08             	add    esp,0x8
c00192a2:	c1 f8 10             	sar    eax,0x10
c00192a5:	0f b6 c0             	movzx  eax,al
c00192a8:	8d 50 01             	lea    edx,[eax+0x1]
c00192ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192ae:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00192b4:	b8 00 00 00 00       	mov    eax,0x0
c00192b9:	8d 65 f4             	lea    esp,[ebp-0xc]
c00192bc:	5b                   	pop    ebx
c00192bd:	5e                   	pop    esi
c00192be:	5f                   	pop    edi
c00192bf:	5d                   	pop    ebp
c00192c0:	c3                   	ret    
c00192c1:	90                   	nop

c00192c2 <IOAPIC::write(int, int)>:
c00192c2:	55                   	push   ebp
c00192c3:	89 e5                	mov    ebp,esp
c00192c5:	83 ec 10             	sub    esp,0x10
c00192c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192cb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00192d1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00192d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00192d7:	0f b6 d0             	movzx  edx,al
c00192da:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00192dd:	89 10                	mov    DWORD PTR [eax],edx
c00192df:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00192e2:	8d 50 10             	lea    edx,[eax+0x10]
c00192e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00192e8:	89 02                	mov    DWORD PTR [edx],eax
c00192ea:	90                   	nop
c00192eb:	c9                   	leave  
c00192ec:	c3                   	ret    
c00192ed:	90                   	nop

c00192ee <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00192ee:	55                   	push   ebp
c00192ef:	89 e5                	mov    ebp,esp
c00192f1:	53                   	push   ebx
c00192f2:	83 ec 2c             	sub    esp,0x2c
c00192f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00192f8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00192fb:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00192fe:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0019301:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0019304:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0019307:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001930a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001930d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0019310:	88 d8                	mov    al,bl
c0019312:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0019315:	88 c8                	mov    al,cl
c0019317:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001931a:	88 d0                	mov    al,dl
c001931c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001931f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0019323:	83 c0 08             	add    eax,0x8
c0019326:	01 c0                	add    eax,eax
c0019328:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001932b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001932f:	83 c0 08             	add    eax,0x8
c0019332:	01 c0                	add    eax,eax
c0019334:	83 c0 01             	add    eax,0x1
c0019337:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001933a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001933d:	50                   	push   eax
c001933e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019341:	e8 6e fe ff ff       	call   c00191b4 <IOAPIC::read(int)>
c0019346:	83 c4 08             	add    esp,0x8
c0019349:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001934c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0019353:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019356:	c1 e0 18             	shl    eax,0x18
c0019359:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001935c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001935f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0019362:	52                   	push   edx
c0019363:	50                   	push   eax
c0019364:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019367:	e8 56 ff ff ff       	call   c00192c2 <IOAPIC::write(int, int)>
c001936c:	83 c4 0c             	add    esp,0xc
c001936f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019372:	50                   	push   eax
c0019373:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019376:	e8 39 fe ff ff       	call   c00191b4 <IOAPIC::read(int)>
c001937b:	83 c4 08             	add    esp,0x8
c001937e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0019381:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0019388:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001938f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0019396:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001939a:	85 c0                	test   eax,eax
c001939c:	74 09                	je     c00193a7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001939e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00193a5:	eb 07                	jmp    c00193ae <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c00193a7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00193ae:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c00193b2:	85 c0                	test   eax,eax
c00193b4:	74 09                	je     c00193bf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c00193b6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00193bd:	eb 07                	jmp    c00193c6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c00193bf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00193c6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00193cd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00193d1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00193d4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00193d7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00193da:	52                   	push   edx
c00193db:	50                   	push   eax
c00193dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00193df:	e8 de fe ff ff       	call   c00192c2 <IOAPIC::write(int, int)>
c00193e4:	83 c4 0c             	add    esp,0xc
c00193e7:	90                   	nop
c00193e8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00193eb:	c9                   	leave  
c00193ec:	c3                   	ret    
c00193ed:	90                   	nop

c00193ee <noCopro(unsigned long)>:
c00193ee:	c3                   	ret    

c00193ef <HalRestart()>:
c00193ef:	e4 64                	in     al,0x64
c00193f1:	a8 02                	test   al,0x2
c00193f3:	75 fa                	jne    c00193ef <HalRestart()>
c00193f5:	b0 fe                	mov    al,0xfe
c00193f7:	e6 64                	out    0x64,al
c00193f9:	c3                   	ret    

c00193fa <HalShutdown()>:
c00193fa:	c3                   	ret    

c00193fb <HalSleep()>:
c00193fb:	c3                   	ret    

c00193fc <CPU::close(int, int, void*)>:
c00193fc:	31 c0                	xor    eax,eax
c00193fe:	c3                   	ret    

c00193ff <x86ReadCMOS(unsigned char)>:
c00193ff:	83 ec 14             	sub    esp,0x14
c0019402:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019406:	88 04 24             	mov    BYTE PTR [esp],al
c0019409:	a0 2c 34 03 c0       	mov    al,ds:0xc003342c
c001940e:	0f b6 c0             	movzx  eax,al
c0019411:	85 c0                	test   eax,eax
c0019413:	74 04                	je     c0019419 <x86ReadCMOS(unsigned char)+0x1a>
c0019415:	b2 00                	mov    dl,0x0
c0019417:	eb 02                	jmp    c001941b <x86ReadCMOS(unsigned char)+0x1c>
c0019419:	b2 80                	mov    dl,0x80
c001941b:	8a 04 24             	mov    al,BYTE PTR [esp]
c001941e:	09 d0                	or     eax,edx
c0019420:	0f b6 c0             	movzx  eax,al
c0019423:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c001942a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001942e:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019432:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0019437:	ee                   	out    dx,al
c0019438:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c001943f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0019444:	89 c2                	mov    edx,eax
c0019446:	ec                   	in     al,dx
c0019447:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001944b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001944f:	83 c4 14             	add    esp,0x14
c0019452:	c3                   	ret    

c0019453 <x86WriteCMOS(unsigned char, unsigned char)>:
c0019453:	83 ec 18             	sub    esp,0x18
c0019456:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001945a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001945e:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0019462:	88 04 24             	mov    BYTE PTR [esp],al
c0019465:	a0 2c 34 03 c0       	mov    al,ds:0xc003342c
c001946a:	0f b6 c0             	movzx  eax,al
c001946d:	85 c0                	test   eax,eax
c001946f:	74 04                	je     c0019475 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0019471:	b2 00                	mov    dl,0x0
c0019473:	eb 02                	jmp    c0019477 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0019475:	b2 80                	mov    dl,0x80
c0019477:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001947b:	09 d0                	or     eax,edx
c001947d:	0f b6 c0             	movzx  eax,al
c0019480:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0019487:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001948b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001948f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019494:	ee                   	out    dx,al
c0019495:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0019499:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c00194a0:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00194a4:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00194a8:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00194ad:	ee                   	out    dx,al
c00194ae:	90                   	nop
c00194af:	83 c4 18             	add    esp,0x18
c00194b2:	c3                   	ret    

c00194b3 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00194b3:	60                   	pusha  
c00194b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00194bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00194c0:	9c                   	pushf  
c00194c1:	fa                   	cli    
c00194c2:	0f 09                	wbinvd 
c00194c4:	0f 30                	wrmsr  
c00194c6:	9d                   	popf   
c00194c7:	89 c2                	mov    edx,eax
c00194c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194cd:	89 10                	mov    DWORD PTR [eax],edx
c00194cf:	61                   	popa   
c00194d0:	90                   	nop
c00194d1:	c3                   	ret    

c00194d2 <AMD_K6_read_msr(unsigned int, REGS*)>:
c00194d2:	60                   	pusha  
c00194d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194d7:	89 c1                	mov    ecx,eax
c00194d9:	9c                   	pushf  
c00194da:	fa                   	cli    
c00194db:	0f 09                	wbinvd 
c00194dd:	31 c0                	xor    eax,eax
c00194df:	31 d2                	xor    edx,edx
c00194e1:	0f 32                	rdmsr  
c00194e3:	9d                   	popf   
c00194e4:	89 c2                	mov    edx,eax
c00194e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194ea:	89 10                	mov    DWORD PTR [eax],edx
c00194ec:	61                   	popa   
c00194ed:	90                   	nop
c00194ee:	c3                   	ret    

c00194ef <AMD_K6_writeback(int, int, int)>:
c00194ef:	83 ec 20             	sub    esp,0x20
c00194f2:	a1 70 31 03 c0       	mov    eax,ds:0xc0033170
c00194f7:	c1 e8 14             	shr    eax,0x14
c00194fa:	c1 e8 02             	shr    eax,0x2
c00194fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019501:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0019506:	0f 85 9e 00 00 00    	jne    c00195aa <AMD_K6_writeback(int, int, int)+0xbb>
c001950c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019510:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019514:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0019519:	75 19                	jne    c0019534 <AMD_K6_writeback(int, int, int)+0x45>
c001951b:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0019520:	7f 0a                	jg     c001952c <AMD_K6_writeback(int, int, int)+0x3d>
c0019522:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c001952a:	eb 08                	jmp    c0019534 <AMD_K6_writeback(int, int, int)+0x45>
c001952c:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0019534:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0019539:	7c 6e                	jl     c00195a9 <AMD_K6_writeback(int, int, int)+0xba>
c001953b:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0019540:	7e 09                	jle    c001954b <AMD_K6_writeback(int, int, int)+0x5c>
c0019542:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0019547:	74 36                	je     c001957f <AMD_K6_writeback(int, int, int)+0x90>
c0019549:	eb 5e                	jmp    c00195a9 <AMD_K6_writeback(int, int, int)+0xba>
c001954b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001954f:	50                   	push   eax
c0019550:	68 82 00 00 c0       	push   0xc0000082
c0019555:	e8 78 ff ff ff       	call   c00194d2 <AMD_K6_read_msr(unsigned int, REGS*)>
c001955a:	83 c4 08             	add    esp,0x8
c001955d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019561:	01 c0                	add    eax,eax
c0019563:	83 e0 7f             	and    eax,0x7f
c0019566:	89 c2                	mov    edx,eax
c0019568:	8d 44 24 08          	lea    eax,[esp+0x8]
c001956c:	50                   	push   eax
c001956d:	6a 00                	push   0x0
c001956f:	52                   	push   edx
c0019570:	68 82 00 00 c0       	push   0xc0000082
c0019575:	e8 39 ff ff ff       	call   c00194b3 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001957a:	83 c4 10             	add    esp,0x10
c001957d:	eb 2b                	jmp    c00195aa <AMD_K6_writeback(int, int, int)+0xbb>
c001957f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019583:	50                   	push   eax
c0019584:	68 82 00 00 c0       	push   0xc0000082
c0019589:	e8 44 ff ff ff       	call   c00194d2 <AMD_K6_read_msr(unsigned int, REGS*)>
c001958e:	83 c4 08             	add    esp,0x8
c0019591:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019595:	50                   	push   eax
c0019596:	6a 00                	push   0x0
c0019598:	6a 00                	push   0x0
c001959a:	68 82 00 00 c0       	push   0xc0000082
c001959f:	e8 0f ff ff ff       	call   c00194b3 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00195a4:	83 c4 10             	add    esp,0x10
c00195a7:	eb 01                	jmp    c00195aa <AMD_K6_writeback(int, int, int)+0xbb>
c00195a9:	90                   	nop
c00195aa:	90                   	nop
c00195ab:	83 c4 20             	add    esp,0x20
c00195ae:	c3                   	ret    

c00195af <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00195af:	56                   	push   esi
c00195b0:	53                   	push   ebx
c00195b1:	a1 c0 c9 02 c0       	mov    eax,ds:0xc002c9c0
c00195b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00195ba:	75 32                	jne    c00195ee <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00195bc:	8b 15 20 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033420
c00195c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195c6:	89 10                	mov    DWORD PTR [eax],edx
c00195c8:	8b 15 1c 34 03 c0    	mov    edx,DWORD PTR ds:0xc003341c
c00195ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195d2:	89 10                	mov    DWORD PTR [eax],edx
c00195d4:	8b 15 18 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033418
c00195da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195de:	89 10                	mov    DWORD PTR [eax],edx
c00195e0:	8b 15 14 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033414
c00195e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195ea:	89 10                	mov    DWORD PTR [eax],edx
c00195ec:	eb 5c                	jmp    c001964a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c00195ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195f2:	ba 00 00 00 00       	mov    edx,0x0
c00195f7:	89 d1                	mov    ecx,edx
c00195f9:	0f a2                	cpuid  
c00195fb:	89 c6                	mov    esi,eax
c00195fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019601:	89 30                	mov    DWORD PTR [eax],esi
c0019603:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019607:	89 18                	mov    DWORD PTR [eax],ebx
c0019609:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001960d:	89 08                	mov    DWORD PTR [eax],ecx
c001960f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019613:	89 10                	mov    DWORD PTR [eax],edx
c0019615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019619:	a3 c0 c9 02 c0       	mov    ds:0xc002c9c0,eax
c001961e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019622:	8b 00                	mov    eax,DWORD PTR [eax]
c0019624:	a3 20 34 03 c0       	mov    ds:0xc0033420,eax
c0019629:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001962d:	8b 00                	mov    eax,DWORD PTR [eax]
c001962f:	a3 1c 34 03 c0       	mov    ds:0xc003341c,eax
c0019634:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019638:	8b 00                	mov    eax,DWORD PTR [eax]
c001963a:	a3 18 34 03 c0       	mov    ds:0xc0033418,eax
c001963f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019643:	8b 00                	mov    eax,DWORD PTR [eax]
c0019645:	a3 14 34 03 c0       	mov    ds:0xc0033414,eax
c001964a:	5b                   	pop    ebx
c001964b:	5e                   	pop    esi
c001964c:	c3                   	ret    

c001964d <cpuidCheckEDX(unsigned int)>:
c001964d:	83 ec 10             	sub    esp,0x10
c0019650:	89 e0                	mov    eax,esp
c0019652:	50                   	push   eax
c0019653:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019657:	50                   	push   eax
c0019658:	8d 44 24 10          	lea    eax,[esp+0x10]
c001965c:	50                   	push   eax
c001965d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019661:	50                   	push   eax
c0019662:	6a 01                	push   0x1
c0019664:	e8 46 ff ff ff       	call   c00195af <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019669:	83 c4 14             	add    esp,0x14
c001966c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001966f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019673:	0f 95 c0             	setne  al
c0019676:	83 c4 10             	add    esp,0x10
c0019679:	c3                   	ret    

c001967a <cpuidCheckECX(unsigned int)>:
c001967a:	83 ec 10             	sub    esp,0x10
c001967d:	89 e0                	mov    eax,esp
c001967f:	50                   	push   eax
c0019680:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019684:	50                   	push   eax
c0019685:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019689:	50                   	push   eax
c001968a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001968e:	50                   	push   eax
c001968f:	6a 01                	push   0x1
c0019691:	e8 19 ff ff ff       	call   c00195af <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019696:	83 c4 14             	add    esp,0x14
c0019699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001969d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00196a1:	0f 95 c0             	setne  al
c00196a4:	83 c4 10             	add    esp,0x10
c00196a7:	c3                   	ret    

c00196a8 <cpuidCheckExtendedEBX(unsigned int)>:
c00196a8:	83 ec 10             	sub    esp,0x10
c00196ab:	89 e0                	mov    eax,esp
c00196ad:	50                   	push   eax
c00196ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00196b2:	50                   	push   eax
c00196b3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00196b7:	50                   	push   eax
c00196b8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196bc:	50                   	push   eax
c00196bd:	6a 07                	push   0x7
c00196bf:	e8 eb fe ff ff       	call   c00195af <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196c4:	83 c4 14             	add    esp,0x14
c00196c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196cb:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00196cf:	0f 95 c0             	setne  al
c00196d2:	83 c4 10             	add    esp,0x10
c00196d5:	c3                   	ret    

c00196d6 <cpuidCheckExtendedECX(unsigned int)>:
c00196d6:	83 ec 10             	sub    esp,0x10
c00196d9:	89 e0                	mov    eax,esp
c00196db:	50                   	push   eax
c00196dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00196e0:	50                   	push   eax
c00196e1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00196e5:	50                   	push   eax
c00196e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196ea:	50                   	push   eax
c00196eb:	6a 07                	push   0x7
c00196ed:	e8 bd fe ff ff       	call   c00195af <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196f2:	83 c4 14             	add    esp,0x14
c00196f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196f9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00196fd:	0f 95 c0             	setne  al
c0019700:	83 c4 10             	add    esp,0x10
c0019703:	c3                   	ret    

c0019704 <HalDetectFeatures()>:
c0019704:	57                   	push   edi
c0019705:	56                   	push   esi
c0019706:	53                   	push   ebx
c0019707:	81 ec 90 00 00 00    	sub    esp,0x90
c001970d:	83 ec 04             	sub    esp,0x4
c0019710:	6a 08                	push   0x8
c0019712:	6a 00                	push   0x0
c0019714:	68 4c 34 03 c0       	push   0xc003344c
c0019719:	e8 d2 6d fe ff       	call   c00004f0 <memset>
c001971e:	83 c4 10             	add    esp,0x10
c0019721:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019726:	83 c8 04             	or     eax,0x4
c0019729:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001972e:	83 ec 0c             	sub    esp,0xc
c0019731:	68 88 a1 02 c0       	push   0xc002a188
c0019736:	e8 41 d8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001973b:	83 c4 10             	add    esp,0x10
c001973e:	e8 b6 6a fe ff       	call   c00001f9 <detectCPUID>
c0019743:	85 c0                	test   eax,eax
c0019745:	0f 95 c0             	setne  al
c0019748:	83 e0 01             	and    eax,0x1
c001974b:	83 e0 01             	and    eax,0x1
c001974e:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019751:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019756:	83 e0 fd             	and    eax,0xfffffffd
c0019759:	88 c2                	mov    dl,al
c001975b:	88 c8                	mov    al,cl
c001975d:	09 d0                	or     eax,edx
c001975f:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019764:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019769:	83 e0 02             	and    eax,0x2
c001976c:	0f b6 c0             	movzx  eax,al
c001976f:	85 c0                	test   eax,eax
c0019771:	0f 84 84 02 00 00    	je     c00199fb <HalDetectFeatures()+0x2f7>
c0019777:	83 ec 0c             	sub    esp,0xc
c001977a:	6a 20                	push   0x20
c001977c:	e8 cc fe ff ff       	call   c001964d <cpuidCheckEDX(unsigned int)>
c0019781:	83 c4 10             	add    esp,0x10
c0019784:	83 e0 01             	and    eax,0x1
c0019787:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001978e:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019793:	83 e0 f7             	and    eax,0xfffffff7
c0019796:	88 c2                	mov    dl,al
c0019798:	88 c8                	mov    al,cl
c001979a:	09 d0                	or     eax,edx
c001979c:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c00197a1:	83 ec 0c             	sub    esp,0xc
c00197a4:	68 00 00 00 04       	push   0x4000000
c00197a9:	e8 9f fe ff ff       	call   c001964d <cpuidCheckEDX(unsigned int)>
c00197ae:	83 c4 10             	add    esp,0x10
c00197b1:	89 c1                	mov    ecx,eax
c00197b3:	83 e1 01             	and    ecx,0x1
c00197b6:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c00197bb:	83 e0 fe             	and    eax,0xfffffffe
c00197be:	88 c2                	mov    dl,al
c00197c0:	88 c8                	mov    al,cl
c00197c2:	09 d0                	or     eax,edx
c00197c4:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c00197c9:	83 ec 0c             	sub    esp,0xc
c00197cc:	68 80 00 00 00       	push   0x80
c00197d1:	e8 77 fe ff ff       	call   c001964d <cpuidCheckEDX(unsigned int)>
c00197d6:	83 c4 10             	add    esp,0x10
c00197d9:	89 c1                	mov    ecx,eax
c00197db:	c1 e1 07             	shl    ecx,0x7
c00197de:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c00197e3:	83 e0 7f             	and    eax,0x7f
c00197e6:	88 c2                	mov    dl,al
c00197e8:	88 c8                	mov    al,cl
c00197ea:	09 d0                	or     eax,edx
c00197ec:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c00197f1:	83 ec 0c             	sub    esp,0xc
c00197f4:	68 00 00 80 00       	push   0x800000
c00197f9:	e8 4f fe ff ff       	call   c001964d <cpuidCheckEDX(unsigned int)>
c00197fe:	83 c4 10             	add    esp,0x10
c0019801:	83 e0 01             	and    eax,0x1
c0019804:	89 c1                	mov    ecx,eax
c0019806:	c1 e1 05             	shl    ecx,0x5
c0019809:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001980e:	83 e0 df             	and    eax,0xffffffdf
c0019811:	88 c2                	mov    dl,al
c0019813:	88 c8                	mov    al,cl
c0019815:	09 d0                	or     eax,edx
c0019817:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001981c:	83 ec 0c             	sub    esp,0xc
c001981f:	6a 01                	push   0x1
c0019821:	e8 36 3f ff ff       	call   c000d75c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019826:	83 c4 10             	add    esp,0x10
c0019829:	0f b6 c0             	movzx  eax,al
c001982c:	85 c0                	test   eax,eax
c001982e:	75 17                	jne    c0019847 <HalDetectFeatures()+0x143>
c0019830:	83 ec 0c             	sub    esp,0xc
c0019833:	68 00 04 00 00       	push   0x400
c0019838:	e8 1f 3f ff ff       	call   c000d75c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001983d:	83 c4 10             	add    esp,0x10
c0019840:	0f b6 c0             	movzx  eax,al
c0019843:	85 c0                	test   eax,eax
c0019845:	74 04                	je     c001984b <HalDetectFeatures()+0x147>
c0019847:	b0 01                	mov    al,0x1
c0019849:	eb 02                	jmp    c001984d <HalDetectFeatures()+0x149>
c001984b:	b0 00                	mov    al,0x0
c001984d:	0f b6 c0             	movzx  eax,al
c0019850:	85 c0                	test   eax,eax
c0019852:	74 0f                	je     c0019863 <HalDetectFeatures()+0x15f>
c0019854:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019859:	83 e0 fe             	and    eax,0xfffffffe
c001985c:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019861:	eb 28                	jmp    c001988b <HalDetectFeatures()+0x187>
c0019863:	83 ec 0c             	sub    esp,0xc
c0019866:	68 00 02 00 00       	push   0x200
c001986b:	e8 dd fd ff ff       	call   c001964d <cpuidCheckEDX(unsigned int)>
c0019870:	83 c4 10             	add    esp,0x10
c0019873:	89 c1                	mov    ecx,eax
c0019875:	83 e1 01             	and    ecx,0x1
c0019878:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001987d:	83 e0 fe             	and    eax,0xfffffffe
c0019880:	88 c2                	mov    dl,al
c0019882:	88 c8                	mov    al,cl
c0019884:	09 d0                	or     eax,edx
c0019886:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001988b:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019890:	83 e0 01             	and    eax,0x1
c0019893:	0f b6 c0             	movzx  eax,al
c0019896:	85 c0                	test   eax,eax
c0019898:	74 1c                	je     c00198b6 <HalDetectFeatures()+0x1b2>
c001989a:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001989f:	83 e0 08             	and    eax,0x8
c00198a2:	0f b6 c0             	movzx  eax,al
c00198a5:	85 c0                	test   eax,eax
c00198a7:	75 0d                	jne    c00198b6 <HalDetectFeatures()+0x1b2>
c00198a9:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c00198ae:	83 e0 fe             	and    eax,0xfffffffe
c00198b1:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c00198b6:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c00198be:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c00198c6:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c00198ce:	85 c0                	test   eax,eax
c00198d0:	0f 84 ab 00 00 00    	je     c0019981 <HalDetectFeatures()+0x27d>
c00198d6:	83 ec 0c             	sub    esp,0xc
c00198d9:	6a 01                	push   0x1
c00198db:	e8 9a fd ff ff       	call   c001967a <cpuidCheckECX(unsigned int)>
c00198e0:	83 c4 10             	add    esp,0x10
c00198e3:	83 e0 01             	and    eax,0x1
c00198e6:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00198e9:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c00198ee:	83 e0 fd             	and    eax,0xfffffffd
c00198f1:	88 c2                	mov    dl,al
c00198f3:	88 c8                	mov    al,cl
c00198f5:	09 d0                	or     eax,edx
c00198f7:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c00198fc:	83 ec 0c             	sub    esp,0xc
c00198ff:	68 00 02 00 00       	push   0x200
c0019904:	e8 71 fd ff ff       	call   c001967a <cpuidCheckECX(unsigned int)>
c0019909:	83 c4 10             	add    esp,0x10
c001990c:	83 e0 01             	and    eax,0x1
c001990f:	89 c1                	mov    ecx,eax
c0019911:	c1 e1 04             	shl    ecx,0x4
c0019914:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019919:	83 e0 ef             	and    eax,0xffffffef
c001991c:	88 c2                	mov    dl,al
c001991e:	88 c8                	mov    al,cl
c0019920:	09 d0                	or     eax,edx
c0019922:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019927:	83 ec 0c             	sub    esp,0xc
c001992a:	68 00 00 08 00       	push   0x80000
c001992f:	e8 46 fd ff ff       	call   c001967a <cpuidCheckECX(unsigned int)>
c0019934:	83 c4 10             	add    esp,0x10
c0019937:	83 e0 01             	and    eax,0x1
c001993a:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019941:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019946:	83 e0 fb             	and    eax,0xfffffffb
c0019949:	88 c2                	mov    dl,al
c001994b:	88 c8                	mov    al,cl
c001994d:	09 d0                	or     eax,edx
c001994f:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019954:	83 ec 0c             	sub    esp,0xc
c0019957:	68 00 00 10 00       	push   0x100000
c001995c:	e8 19 fd ff ff       	call   c001967a <cpuidCheckECX(unsigned int)>
c0019961:	83 c4 10             	add    esp,0x10
c0019964:	83 e0 01             	and    eax,0x1
c0019967:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001996e:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c0019973:	83 e0 f7             	and    eax,0xfffffff7
c0019976:	88 c2                	mov    dl,al
c0019978:	88 c8                	mov    al,cl
c001997a:	09 d0                	or     eax,edx
c001997c:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c0019981:	83 ec 0c             	sub    esp,0xc
c0019984:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019988:	50                   	push   eax
c0019989:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001998d:	50                   	push   eax
c001998e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019992:	50                   	push   eax
c0019993:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019997:	50                   	push   eax
c0019998:	68 00 00 00 80       	push   0x80000000
c001999d:	e8 0d fc ff ff       	call   c00195af <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199a2:	83 c4 20             	add    esp,0x20
c00199a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00199a9:	3d 00 00 00 80       	cmp    eax,0x80000000
c00199ae:	76 4b                	jbe    c00199fb <HalDetectFeatures()+0x2f7>
c00199b0:	83 ec 0c             	sub    esp,0xc
c00199b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00199b7:	50                   	push   eax
c00199b8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00199bc:	50                   	push   eax
c00199bd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00199c1:	50                   	push   eax
c00199c2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00199c6:	50                   	push   eax
c00199c7:	68 01 00 00 80       	push   0x80000001
c00199cc:	e8 de fb ff ff       	call   c00195af <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199d1:	83 c4 20             	add    esp,0x20
c00199d4:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c00199d9:	83 e0 bf             	and    eax,0xffffffbf
c00199dc:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c00199e1:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c00199e6:	83 e0 fd             	and    eax,0xfffffffd
c00199e9:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c00199ee:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c00199f3:	83 e0 fe             	and    eax,0xfffffffe
c00199f6:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c00199fb:	83 ec 0c             	sub    esp,0xc
c00199fe:	68 00 04 00 00       	push   0x400
c0019a03:	e8 54 3d ff ff       	call   c000d75c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019a08:	83 c4 10             	add    esp,0x10
c0019a0b:	0f b6 c0             	movzx  eax,al
c0019a0e:	85 c0                	test   eax,eax
c0019a10:	74 0d                	je     c0019a1f <HalDetectFeatures()+0x31b>
c0019a12:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019a17:	83 e0 fb             	and    eax,0xfffffffb
c0019a1a:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c0019a1f:	c6 05 48 34 03 c0 01 	mov    BYTE PTR ds:0xc0033448,0x1
c0019a26:	83 ec 04             	sub    esp,0x4
c0019a29:	6a 0d                	push   0xd
c0019a2b:	6a 00                	push   0x0
c0019a2d:	68 30 34 03 c0       	push   0xc0033430
c0019a32:	e8 b9 6a fe ff       	call   c00004f0 <memset>
c0019a37:	83 c4 10             	add    esp,0x10
c0019a3a:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c0019a3f:	83 e0 02             	and    eax,0x2
c0019a42:	0f b6 c0             	movzx  eax,al
c0019a45:	85 c0                	test   eax,eax
c0019a47:	0f 84 16 08 00 00    	je     c001a263 <HalDetectFeatures()+0xb5f>
c0019a4d:	83 ec 0c             	sub    esp,0xc
c0019a50:	6a 10                	push   0x10
c0019a52:	e8 f6 fb ff ff       	call   c001964d <cpuidCheckEDX(unsigned int)>
c0019a57:	83 c4 10             	add    esp,0x10
c0019a5a:	83 e0 01             	and    eax,0x1
c0019a5d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019a64:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019a69:	83 e0 f7             	and    eax,0xfffffff7
c0019a6c:	88 c2                	mov    dl,al
c0019a6e:	88 c8                	mov    al,cl
c0019a70:	09 d0                	or     eax,edx
c0019a72:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019a77:	83 ec 0c             	sub    esp,0xc
c0019a7a:	6a 40                	push   0x40
c0019a7c:	e8 cc fb ff ff       	call   c001964d <cpuidCheckEDX(unsigned int)>
c0019a81:	83 c4 10             	add    esp,0x10
c0019a84:	83 e0 01             	and    eax,0x1
c0019a87:	89 c1                	mov    ecx,eax
c0019a89:	c1 e1 04             	shl    ecx,0x4
c0019a8c:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019a91:	83 e0 ef             	and    eax,0xffffffef
c0019a94:	88 c2                	mov    dl,al
c0019a96:	88 c8                	mov    al,cl
c0019a98:	09 d0                	or     eax,edx
c0019a9a:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019a9f:	83 ec 0c             	sub    esp,0xc
c0019aa2:	6a 08                	push   0x8
c0019aa4:	e8 a4 fb ff ff       	call   c001964d <cpuidCheckEDX(unsigned int)>
c0019aa9:	83 c4 10             	add    esp,0x10
c0019aac:	83 e0 01             	and    eax,0x1
c0019aaf:	89 c1                	mov    ecx,eax
c0019ab1:	c1 e1 05             	shl    ecx,0x5
c0019ab4:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019ab9:	83 e0 df             	and    eax,0xffffffdf
c0019abc:	88 c2                	mov    dl,al
c0019abe:	88 c8                	mov    al,cl
c0019ac0:	09 d0                	or     eax,edx
c0019ac2:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019ac7:	83 ec 0c             	sub    esp,0xc
c0019aca:	68 00 20 00 00       	push   0x2000
c0019acf:	e8 79 fb ff ff       	call   c001964d <cpuidCheckEDX(unsigned int)>
c0019ad4:	83 c4 10             	add    esp,0x10
c0019ad7:	83 e0 01             	and    eax,0x1
c0019ada:	89 c1                	mov    ecx,eax
c0019adc:	c1 e1 06             	shl    ecx,0x6
c0019adf:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019ae4:	83 e0 bf             	and    eax,0xffffffbf
c0019ae7:	88 c2                	mov    dl,al
c0019ae9:	88 c8                	mov    al,cl
c0019aeb:	09 d0                	or     eax,edx
c0019aed:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019af2:	83 ec 0c             	sub    esp,0xc
c0019af5:	68 00 00 01 00       	push   0x10000
c0019afa:	e8 4e fb ff ff       	call   c001964d <cpuidCheckEDX(unsigned int)>
c0019aff:	83 c4 10             	add    esp,0x10
c0019b02:	89 c1                	mov    ecx,eax
c0019b04:	c1 e1 07             	shl    ecx,0x7
c0019b07:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019b0c:	83 e0 7f             	and    eax,0x7f
c0019b0f:	88 c2                	mov    dl,al
c0019b11:	88 c8                	mov    al,cl
c0019b13:	09 d0                	or     eax,edx
c0019b15:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c0019b1a:	83 ec 0c             	sub    esp,0xc
c0019b1d:	6a 01                	push   0x1
c0019b1f:	e8 29 fb ff ff       	call   c001964d <cpuidCheckEDX(unsigned int)>
c0019b24:	83 c4 10             	add    esp,0x10
c0019b27:	83 e0 01             	and    eax,0x1
c0019b2a:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019b31:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c0019b36:	83 e0 f7             	and    eax,0xfffffff7
c0019b39:	88 c2                	mov    dl,al
c0019b3b:	88 c8                	mov    al,cl
c0019b3d:	09 d0                	or     eax,edx
c0019b3f:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c0019b44:	83 ec 0c             	sub    esp,0xc
c0019b47:	68 00 08 00 00       	push   0x800
c0019b4c:	e8 fc fa ff ff       	call   c001964d <cpuidCheckEDX(unsigned int)>
c0019b51:	83 c4 10             	add    esp,0x10
c0019b54:	89 c1                	mov    ecx,eax
c0019b56:	83 e1 01             	and    ecx,0x1
c0019b59:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c0019b5e:	83 e0 fe             	and    eax,0xfffffffe
c0019b61:	88 c2                	mov    dl,al
c0019b63:	88 c8                	mov    al,cl
c0019b65:	09 d0                	or     eax,edx
c0019b67:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c0019b6c:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019b71:	83 e0 40             	and    eax,0x40
c0019b74:	0f b6 c0             	movzx  eax,al
c0019b77:	85 c0                	test   eax,eax
c0019b79:	74 0a                	je     c0019b85 <HalDetectFeatures()+0x481>
c0019b7b:	c7 05 28 34 03 c0 00 01 00 00 	mov    DWORD PTR ds:0xc0033428,0x100
c0019b85:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c0019b8a:	83 e0 80             	and    eax,0xffffff80
c0019b8d:	0f b6 c0             	movzx  eax,al
c0019b90:	85 c0                	test   eax,eax
c0019b92:	74 0a                	je     c0019b9e <HalDetectFeatures()+0x49a>
c0019b94:	c7 05 24 34 03 c0 80 00 00 00 	mov    DWORD PTR ds:0xc0033424,0x80
c0019b9e:	83 ec 0c             	sub    esp,0xc
c0019ba1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ba5:	50                   	push   eax
c0019ba6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019baa:	50                   	push   eax
c0019bab:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019baf:	50                   	push   eax
c0019bb0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019bb4:	50                   	push   eax
c0019bb5:	6a 00                	push   0x0
c0019bb7:	e8 f3 f9 ff ff       	call   c00195af <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019bbc:	83 c4 20             	add    esp,0x20
c0019bbf:	c7 44 24 48 30 34 03 c0 	mov    DWORD PTR [esp+0x48],0xc0033430
c0019bc7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019bcb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019bcf:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019bd7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019bdb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0019bdf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0019be3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0019be7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019beb:	89 c6                	mov    esi,eax
c0019bed:	89 d7                	mov    edi,edx
c0019bef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019bf1:	89 c8                	mov    eax,ecx
c0019bf3:	89 fa                	mov    edx,edi
c0019bf5:	89 f3                	mov    ebx,esi
c0019bf7:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0019bfb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019bff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019c03:	b8 34 34 03 c0       	mov    eax,0xc0033434
c0019c08:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0019c0c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019c10:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0019c14:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0019c1c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0019c20:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0019c24:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0019c28:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0019c2c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0019c30:	89 c6                	mov    esi,eax
c0019c32:	89 d7                	mov    edi,edx
c0019c34:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c36:	89 c8                	mov    eax,ecx
c0019c38:	89 fa                	mov    edx,edi
c0019c3a:	89 f3                	mov    ebx,esi
c0019c3c:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0019c40:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0019c44:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019c48:	b8 38 34 03 c0       	mov    eax,0xc0033438
c0019c4d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0019c54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019c58:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0019c5c:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0019c64:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019c6b:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0019c6f:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019c73:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019c7a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0019c7e:	89 c6                	mov    esi,eax
c0019c80:	89 d7                	mov    edi,edx
c0019c82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c84:	89 c8                	mov    eax,ecx
c0019c86:	89 fa                	mov    edx,edi
c0019c88:	89 f3                	mov    ebx,esi
c0019c8a:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0019c8e:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019c92:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019c96:	83 ec 08             	sub    esp,0x8
c0019c99:	68 9d a1 02 c0       	push   0xc002a19d
c0019c9e:	68 30 34 03 c0       	push   0xc0033430
c0019ca3:	e8 a8 6a fe ff       	call   c0000750 <strcmp>
c0019ca8:	83 c4 10             	add    esp,0x10
c0019cab:	85 c0                	test   eax,eax
c0019cad:	74 19                	je     c0019cc8 <HalDetectFeatures()+0x5c4>
c0019caf:	83 ec 08             	sub    esp,0x8
c0019cb2:	68 aa a1 02 c0       	push   0xc002a1aa
c0019cb7:	68 30 34 03 c0       	push   0xc0033430
c0019cbc:	e8 8f 6a fe ff       	call   c0000750 <strcmp>
c0019cc1:	83 c4 10             	add    esp,0x10
c0019cc4:	85 c0                	test   eax,eax
c0019cc6:	75 04                	jne    c0019ccc <HalDetectFeatures()+0x5c8>
c0019cc8:	b0 01                	mov    al,0x1
c0019cca:	eb 02                	jmp    c0019cce <HalDetectFeatures()+0x5ca>
c0019ccc:	b0 00                	mov    al,0x0
c0019cce:	0f b6 c0             	movzx  eax,al
c0019cd1:	85 c0                	test   eax,eax
c0019cd3:	74 0f                	je     c0019ce4 <HalDetectFeatures()+0x5e0>
c0019cd5:	c7 05 44 34 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x2
c0019cdf:	e9 0d 03 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019ce4:	83 ec 08             	sub    esp,0x8
c0019ce7:	68 b7 a1 02 c0       	push   0xc002a1b7
c0019cec:	68 30 34 03 c0       	push   0xc0033430
c0019cf1:	e8 5a 6a fe ff       	call   c0000750 <strcmp>
c0019cf6:	83 c4 10             	add    esp,0x10
c0019cf9:	85 c0                	test   eax,eax
c0019cfb:	74 19                	je     c0019d16 <HalDetectFeatures()+0x612>
c0019cfd:	83 ec 08             	sub    esp,0x8
c0019d00:	68 c4 a1 02 c0       	push   0xc002a1c4
c0019d05:	68 30 34 03 c0       	push   0xc0033430
c0019d0a:	e8 41 6a fe ff       	call   c0000750 <strcmp>
c0019d0f:	83 c4 10             	add    esp,0x10
c0019d12:	85 c0                	test   eax,eax
c0019d14:	75 04                	jne    c0019d1a <HalDetectFeatures()+0x616>
c0019d16:	b0 01                	mov    al,0x1
c0019d18:	eb 02                	jmp    c0019d1c <HalDetectFeatures()+0x618>
c0019d1a:	b0 00                	mov    al,0x0
c0019d1c:	0f b6 c0             	movzx  eax,al
c0019d1f:	85 c0                	test   eax,eax
c0019d21:	74 0f                	je     c0019d32 <HalDetectFeatures()+0x62e>
c0019d23:	c7 05 44 34 03 c0 04 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x4
c0019d2d:	e9 bf 02 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019d32:	83 ec 08             	sub    esp,0x8
c0019d35:	68 d1 a1 02 c0       	push   0xc002a1d1
c0019d3a:	68 30 34 03 c0       	push   0xc0033430
c0019d3f:	e8 0c 6a fe ff       	call   c0000750 <strcmp>
c0019d44:	83 c4 10             	add    esp,0x10
c0019d47:	85 c0                	test   eax,eax
c0019d49:	74 19                	je     c0019d64 <HalDetectFeatures()+0x660>
c0019d4b:	83 ec 08             	sub    esp,0x8
c0019d4e:	68 de a1 02 c0       	push   0xc002a1de
c0019d53:	68 30 34 03 c0       	push   0xc0033430
c0019d58:	e8 f3 69 fe ff       	call   c0000750 <strcmp>
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	85 c0                	test   eax,eax
c0019d62:	75 04                	jne    c0019d68 <HalDetectFeatures()+0x664>
c0019d64:	b0 01                	mov    al,0x1
c0019d66:	eb 02                	jmp    c0019d6a <HalDetectFeatures()+0x666>
c0019d68:	b0 00                	mov    al,0x0
c0019d6a:	0f b6 c0             	movzx  eax,al
c0019d6d:	85 c0                	test   eax,eax
c0019d6f:	74 0f                	je     c0019d80 <HalDetectFeatures()+0x67c>
c0019d71:	c7 05 44 34 03 c0 05 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x5
c0019d7b:	e9 71 02 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019d80:	83 ec 08             	sub    esp,0x8
c0019d83:	68 eb a1 02 c0       	push   0xc002a1eb
c0019d88:	68 30 34 03 c0       	push   0xc0033430
c0019d8d:	e8 be 69 fe ff       	call   c0000750 <strcmp>
c0019d92:	83 c4 10             	add    esp,0x10
c0019d95:	85 c0                	test   eax,eax
c0019d97:	0f 94 c0             	sete   al
c0019d9a:	0f b6 c0             	movzx  eax,al
c0019d9d:	85 c0                	test   eax,eax
c0019d9f:	74 0f                	je     c0019db0 <HalDetectFeatures()+0x6ac>
c0019da1:	c7 05 44 34 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x1
c0019dab:	e9 41 02 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019db0:	83 ec 08             	sub    esp,0x8
c0019db3:	68 f8 a1 02 c0       	push   0xc002a1f8
c0019db8:	68 30 34 03 c0       	push   0xc0033430
c0019dbd:	e8 8e 69 fe ff       	call   c0000750 <strcmp>
c0019dc2:	83 c4 10             	add    esp,0x10
c0019dc5:	85 c0                	test   eax,eax
c0019dc7:	0f 94 c0             	sete   al
c0019dca:	0f b6 c0             	movzx  eax,al
c0019dcd:	85 c0                	test   eax,eax
c0019dcf:	74 0f                	je     c0019de0 <HalDetectFeatures()+0x6dc>
c0019dd1:	c7 05 44 34 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x3
c0019ddb:	e9 11 02 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019de0:	83 ec 08             	sub    esp,0x8
c0019de3:	68 b7 a1 02 c0       	push   0xc002a1b7
c0019de8:	68 30 34 03 c0       	push   0xc0033430
c0019ded:	e8 5e 69 fe ff       	call   c0000750 <strcmp>
c0019df2:	83 c4 10             	add    esp,0x10
c0019df5:	85 c0                	test   eax,eax
c0019df7:	0f 94 c0             	sete   al
c0019dfa:	0f b6 c0             	movzx  eax,al
c0019dfd:	85 c0                	test   eax,eax
c0019dff:	74 0f                	je     c0019e10 <HalDetectFeatures()+0x70c>
c0019e01:	c7 05 44 34 03 c0 06 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x6
c0019e0b:	e9 e1 01 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019e10:	83 ec 08             	sub    esp,0x8
c0019e13:	68 05 a2 02 c0       	push   0xc002a205
c0019e18:	68 30 34 03 c0       	push   0xc0033430
c0019e1d:	e8 2e 69 fe ff       	call   c0000750 <strcmp>
c0019e22:	83 c4 10             	add    esp,0x10
c0019e25:	85 c0                	test   eax,eax
c0019e27:	0f 94 c0             	sete   al
c0019e2a:	0f b6 c0             	movzx  eax,al
c0019e2d:	85 c0                	test   eax,eax
c0019e2f:	74 0f                	je     c0019e40 <HalDetectFeatures()+0x73c>
c0019e31:	c7 05 44 34 03 c0 07 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x7
c0019e3b:	e9 b1 01 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019e40:	83 ec 08             	sub    esp,0x8
c0019e43:	68 12 a2 02 c0       	push   0xc002a212
c0019e48:	68 30 34 03 c0       	push   0xc0033430
c0019e4d:	e8 fe 68 fe ff       	call   c0000750 <strcmp>
c0019e52:	83 c4 10             	add    esp,0x10
c0019e55:	85 c0                	test   eax,eax
c0019e57:	0f 94 c0             	sete   al
c0019e5a:	0f b6 c0             	movzx  eax,al
c0019e5d:	85 c0                	test   eax,eax
c0019e5f:	74 0f                	je     c0019e70 <HalDetectFeatures()+0x76c>
c0019e61:	c7 05 44 34 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x8
c0019e6b:	e9 81 01 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019e70:	83 ec 08             	sub    esp,0x8
c0019e73:	68 1f a2 02 c0       	push   0xc002a21f
c0019e78:	68 30 34 03 c0       	push   0xc0033430
c0019e7d:	e8 ce 68 fe ff       	call   c0000750 <strcmp>
c0019e82:	83 c4 10             	add    esp,0x10
c0019e85:	85 c0                	test   eax,eax
c0019e87:	0f 94 c0             	sete   al
c0019e8a:	0f b6 c0             	movzx  eax,al
c0019e8d:	85 c0                	test   eax,eax
c0019e8f:	74 0f                	je     c0019ea0 <HalDetectFeatures()+0x79c>
c0019e91:	c7 05 44 34 03 c0 09 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x9
c0019e9b:	e9 51 01 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019ea0:	83 ec 08             	sub    esp,0x8
c0019ea3:	68 2c a2 02 c0       	push   0xc002a22c
c0019ea8:	68 30 34 03 c0       	push   0xc0033430
c0019ead:	e8 9e 68 fe ff       	call   c0000750 <strcmp>
c0019eb2:	83 c4 10             	add    esp,0x10
c0019eb5:	85 c0                	test   eax,eax
c0019eb7:	0f 94 c0             	sete   al
c0019eba:	0f b6 c0             	movzx  eax,al
c0019ebd:	85 c0                	test   eax,eax
c0019ebf:	74 0f                	je     c0019ed0 <HalDetectFeatures()+0x7cc>
c0019ec1:	c7 05 44 34 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xa
c0019ecb:	e9 21 01 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019ed0:	83 ec 08             	sub    esp,0x8
c0019ed3:	68 39 a2 02 c0       	push   0xc002a239
c0019ed8:	68 30 34 03 c0       	push   0xc0033430
c0019edd:	e8 6e 68 fe ff       	call   c0000750 <strcmp>
c0019ee2:	83 c4 10             	add    esp,0x10
c0019ee5:	85 c0                	test   eax,eax
c0019ee7:	0f 94 c0             	sete   al
c0019eea:	0f b6 c0             	movzx  eax,al
c0019eed:	85 c0                	test   eax,eax
c0019eef:	74 0f                	je     c0019f00 <HalDetectFeatures()+0x7fc>
c0019ef1:	c7 05 44 34 03 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xb
c0019efb:	e9 f1 00 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019f00:	83 ec 08             	sub    esp,0x8
c0019f03:	68 46 a2 02 c0       	push   0xc002a246
c0019f08:	68 30 34 03 c0       	push   0xc0033430
c0019f0d:	e8 3e 68 fe ff       	call   c0000750 <strcmp>
c0019f12:	83 c4 10             	add    esp,0x10
c0019f15:	85 c0                	test   eax,eax
c0019f17:	0f 94 c0             	sete   al
c0019f1a:	0f b6 c0             	movzx  eax,al
c0019f1d:	85 c0                	test   eax,eax
c0019f1f:	74 0f                	je     c0019f30 <HalDetectFeatures()+0x82c>
c0019f21:	c7 05 44 34 03 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xc
c0019f2b:	e9 c1 00 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019f30:	83 ec 08             	sub    esp,0x8
c0019f33:	68 53 a2 02 c0       	push   0xc002a253
c0019f38:	68 30 34 03 c0       	push   0xc0033430
c0019f3d:	e8 0e 68 fe ff       	call   c0000750 <strcmp>
c0019f42:	83 c4 10             	add    esp,0x10
c0019f45:	85 c0                	test   eax,eax
c0019f47:	0f 94 c0             	sete   al
c0019f4a:	0f b6 c0             	movzx  eax,al
c0019f4d:	85 c0                	test   eax,eax
c0019f4f:	74 0f                	je     c0019f60 <HalDetectFeatures()+0x85c>
c0019f51:	c7 05 44 34 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xd
c0019f5b:	e9 91 00 00 00       	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019f60:	83 ec 08             	sub    esp,0x8
c0019f63:	68 60 a2 02 c0       	push   0xc002a260
c0019f68:	68 30 34 03 c0       	push   0xc0033430
c0019f6d:	e8 de 67 fe ff       	call   c0000750 <strcmp>
c0019f72:	83 c4 10             	add    esp,0x10
c0019f75:	85 c0                	test   eax,eax
c0019f77:	0f 94 c0             	sete   al
c0019f7a:	0f b6 c0             	movzx  eax,al
c0019f7d:	85 c0                	test   eax,eax
c0019f7f:	74 0c                	je     c0019f8d <HalDetectFeatures()+0x889>
c0019f81:	c7 05 44 34 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xd
c0019f8b:	eb 64                	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019f8d:	83 ec 08             	sub    esp,0x8
c0019f90:	68 6d a2 02 c0       	push   0xc002a26d
c0019f95:	68 30 34 03 c0       	push   0xc0033430
c0019f9a:	e8 b1 67 fe ff       	call   c0000750 <strcmp>
c0019f9f:	83 c4 10             	add    esp,0x10
c0019fa2:	85 c0                	test   eax,eax
c0019fa4:	0f 94 c0             	sete   al
c0019fa7:	0f b6 c0             	movzx  eax,al
c0019faa:	85 c0                	test   eax,eax
c0019fac:	74 0c                	je     c0019fba <HalDetectFeatures()+0x8b6>
c0019fae:	c7 05 44 34 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xd
c0019fb8:	eb 37                	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019fba:	83 ec 08             	sub    esp,0x8
c0019fbd:	68 7a a2 02 c0       	push   0xc002a27a
c0019fc2:	68 30 34 03 c0       	push   0xc0033430
c0019fc7:	e8 84 67 fe ff       	call   c0000750 <strcmp>
c0019fcc:	83 c4 10             	add    esp,0x10
c0019fcf:	85 c0                	test   eax,eax
c0019fd1:	0f 94 c0             	sete   al
c0019fd4:	0f b6 c0             	movzx  eax,al
c0019fd7:	85 c0                	test   eax,eax
c0019fd9:	74 0c                	je     c0019fe7 <HalDetectFeatures()+0x8e3>
c0019fdb:	c7 05 44 34 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0033444,0xd
c0019fe5:	eb 0a                	jmp    c0019ff1 <HalDetectFeatures()+0x8ed>
c0019fe7:	c7 05 44 34 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x0
c0019ff1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ff5:	83 f8 06             	cmp    eax,0x6
c0019ff8:	0f 86 cc 00 00 00    	jbe    c001a0ca <HalDetectFeatures()+0x9c6>
c0019ffe:	83 ec 0c             	sub    esp,0xc
c001a001:	68 80 00 00 00       	push   0x80
c001a006:	e8 9d f6 ff ff       	call   c00196a8 <cpuidCheckExtendedEBX(unsigned int)>
c001a00b:	83 c4 10             	add    esp,0x10
c001a00e:	89 c1                	mov    ecx,eax
c001a010:	83 e1 01             	and    ecx,0x1
c001a013:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a018:	83 e0 fe             	and    eax,0xfffffffe
c001a01b:	88 c2                	mov    dl,al
c001a01d:	88 c8                	mov    al,cl
c001a01f:	09 d0                	or     eax,edx
c001a021:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a026:	83 ec 0c             	sub    esp,0xc
c001a029:	68 00 00 10 00       	push   0x100000
c001a02e:	e8 75 f6 ff ff       	call   c00196a8 <cpuidCheckExtendedEBX(unsigned int)>
c001a033:	83 c4 10             	add    esp,0x10
c001a036:	83 e0 01             	and    eax,0x1
c001a039:	89 c1                	mov    ecx,eax
c001a03b:	c1 e1 06             	shl    ecx,0x6
c001a03e:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a043:	83 e0 bf             	and    eax,0xffffffbf
c001a046:	88 c2                	mov    dl,al
c001a048:	88 c8                	mov    al,cl
c001a04a:	09 d0                	or     eax,edx
c001a04c:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a051:	83 ec 0c             	sub    esp,0xc
c001a054:	68 00 00 04 00       	push   0x40000
c001a059:	e8 4a f6 ff ff       	call   c00196a8 <cpuidCheckExtendedEBX(unsigned int)>
c001a05e:	83 c4 10             	add    esp,0x10
c001a061:	83 e0 01             	and    eax,0x1
c001a064:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001a067:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a06c:	83 e0 fd             	and    eax,0xfffffffd
c001a06f:	88 c2                	mov    dl,al
c001a071:	88 c8                	mov    al,cl
c001a073:	09 d0                	or     eax,edx
c001a075:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a07a:	83 ec 0c             	sub    esp,0xc
c001a07d:	6a 04                	push   0x4
c001a07f:	e8 52 f6 ff ff       	call   c00196d6 <cpuidCheckExtendedECX(unsigned int)>
c001a084:	83 c4 10             	add    esp,0x10
c001a087:	83 e0 01             	and    eax,0x1
c001a08a:	89 c1                	mov    ecx,eax
c001a08c:	c1 e1 05             	shl    ecx,0x5
c001a08f:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a094:	83 e0 df             	and    eax,0xffffffdf
c001a097:	88 c2                	mov    dl,al
c001a099:	88 c8                	mov    al,cl
c001a09b:	09 d0                	or     eax,edx
c001a09d:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a0a2:	83 ec 0c             	sub    esp,0xc
c001a0a5:	6a 20                	push   0x20
c001a0a7:	e8 2a f6 ff ff       	call   c00196d6 <cpuidCheckExtendedECX(unsigned int)>
c001a0ac:	83 c4 10             	add    esp,0x10
c001a0af:	83 e0 01             	and    eax,0x1
c001a0b2:	89 c1                	mov    ecx,eax
c001a0b4:	c1 e1 04             	shl    ecx,0x4
c001a0b7:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a0bc:	83 e0 ef             	and    eax,0xffffffef
c001a0bf:	88 c2                	mov    dl,al
c001a0c1:	88 c8                	mov    al,cl
c001a0c3:	09 d0                	or     eax,edx
c001a0c5:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a0ca:	83 ec 0c             	sub    esp,0xc
c001a0cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a0d1:	50                   	push   eax
c001a0d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a0d6:	50                   	push   eax
c001a0d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0db:	50                   	push   eax
c001a0dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a0e0:	50                   	push   eax
c001a0e1:	6a 01                	push   0x1
c001a0e3:	e8 c7 f4 ff ff       	call   c00195af <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a0e8:	83 c4 20             	add    esp,0x20
c001a0eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0ef:	83 e0 0f             	and    eax,0xf
c001a0f2:	a2 40 34 03 c0       	mov    ds:0xc0033440,al
c001a0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0fb:	c1 e8 04             	shr    eax,0x4
c001a0fe:	83 e0 0f             	and    eax,0xf
c001a101:	a2 3e 34 03 c0       	mov    ds:0xc003343e,al
c001a106:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a10a:	c1 e8 08             	shr    eax,0x8
c001a10d:	83 e0 0f             	and    eax,0xf
c001a110:	a2 3d 34 03 c0       	mov    ds:0xc003343d,al
c001a115:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a119:	c1 e8 0c             	shr    eax,0xc
c001a11c:	83 e0 03             	and    eax,0x3
c001a11f:	a2 3f 34 03 c0       	mov    ds:0xc003343f,al
c001a124:	a0 3d 34 03 c0       	mov    al,ds:0xc003343d
c001a129:	0f b6 c0             	movzx  eax,al
c001a12c:	83 f8 06             	cmp    eax,0x6
c001a12f:	74 0d                	je     c001a13e <HalDetectFeatures()+0xa3a>
c001a131:	a0 3d 34 03 c0       	mov    al,ds:0xc003343d
c001a136:	0f b6 c0             	movzx  eax,al
c001a139:	83 f8 0f             	cmp    eax,0xf
c001a13c:	75 18                	jne    c001a156 <HalDetectFeatures()+0xa52>
c001a13e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a142:	c1 e8 10             	shr    eax,0x10
c001a145:	c1 e0 04             	shl    eax,0x4
c001a148:	88 c2                	mov    dl,al
c001a14a:	a0 3e 34 03 c0       	mov    al,ds:0xc003343e
c001a14f:	09 d0                	or     eax,edx
c001a151:	a2 3e 34 03 c0       	mov    ds:0xc003343e,al
c001a156:	a0 3d 34 03 c0       	mov    al,ds:0xc003343d
c001a15b:	0f b6 c0             	movzx  eax,al
c001a15e:	83 f8 0f             	cmp    eax,0xf
c001a161:	75 15                	jne    c001a178 <HalDetectFeatures()+0xa74>
c001a163:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a167:	c1 e8 14             	shr    eax,0x14
c001a16a:	88 c2                	mov    dl,al
c001a16c:	a0 3d 34 03 c0       	mov    al,ds:0xc003343d
c001a171:	01 d0                	add    eax,edx
c001a173:	a2 3d 34 03 c0       	mov    ds:0xc003343d,al
c001a178:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c001a180:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c001a188:	85 c0                	test   eax,eax
c001a18a:	74 2d                	je     c001a1b9 <HalDetectFeatures()+0xab5>
c001a18c:	83 ec 0c             	sub    esp,0xc
c001a18f:	68 00 00 00 40       	push   0x40000000
c001a194:	e8 e1 f4 ff ff       	call   c001967a <cpuidCheckECX(unsigned int)>
c001a199:	83 c4 10             	add    esp,0x10
c001a19c:	83 e0 01             	and    eax,0x1
c001a19f:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001a1a6:	a0 4e 34 03 c0       	mov    al,ds:0xc003344e
c001a1ab:	83 e0 fb             	and    eax,0xfffffffb
c001a1ae:	88 c2                	mov    dl,al
c001a1b0:	88 c8                	mov    al,cl
c001a1b2:	09 d0                	or     eax,edx
c001a1b4:	a2 4e 34 03 c0       	mov    ds:0xc003344e,al
c001a1b9:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a1be:	83 c8 04             	or     eax,0x4
c001a1c1:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a1c6:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a1cb:	83 c8 08             	or     eax,0x8
c001a1ce:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a1d3:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a1d8:	83 c8 10             	or     eax,0x10
c001a1db:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a1e0:	83 ec 0c             	sub    esp,0xc
c001a1e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1e7:	50                   	push   eax
c001a1e8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a1ec:	50                   	push   eax
c001a1ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1f1:	50                   	push   eax
c001a1f2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1f6:	50                   	push   eax
c001a1f7:	68 00 00 00 80       	push   0x80000000
c001a1fc:	e8 ae f3 ff ff       	call   c00195af <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a201:	83 c4 20             	add    esp,0x20
c001a204:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a208:	3d 00 00 00 80       	cmp    eax,0x80000000
c001a20d:	0f 86 96 01 00 00    	jbe    c001a3a9 <HalDetectFeatures()+0xca5>
c001a213:	83 ec 0c             	sub    esp,0xc
c001a216:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a21a:	50                   	push   eax
c001a21b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a21f:	50                   	push   eax
c001a220:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a224:	50                   	push   eax
c001a225:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a229:	50                   	push   eax
c001a22a:	68 01 00 00 80       	push   0x80000001
c001a22f:	e8 7b f3 ff ff       	call   c00195af <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a234:	83 c4 20             	add    esp,0x20
c001a237:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a23c:	83 e0 7f             	and    eax,0x7f
c001a23f:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a244:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a249:	83 e0 fb             	and    eax,0xfffffffb
c001a24c:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a251:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a256:	83 e0 fd             	and    eax,0xfffffffd
c001a259:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a25e:	e9 46 01 00 00       	jmp    c001a3a9 <HalDetectFeatures()+0xca5>
c001a263:	83 ec 08             	sub    esp,0x8
c001a266:	68 eb a1 02 c0       	push   0xc002a1eb
c001a26b:	68 30 34 03 c0       	push   0xc0033430
c001a270:	e8 cb 63 fe ff       	call   c0000640 <strcpy>
c001a275:	83 c4 10             	add    esp,0x10
c001a278:	c7 05 44 34 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0033444,0x1
c001a282:	e8 3c 5f fe ff       	call   c00001c3 <is486>
c001a287:	85 c0                	test   eax,eax
c001a289:	0f 95 c0             	setne  al
c001a28c:	0f b6 c0             	movzx  eax,al
c001a28f:	85 c0                	test   eax,eax
c001a291:	0f 84 8d 00 00 00    	je     c001a324 <HalDetectFeatures()+0xc20>
c001a297:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a29c:	83 c8 04             	or     eax,0x4
c001a29f:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a2a4:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a2a9:	83 c8 08             	or     eax,0x8
c001a2ac:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a2b1:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a2b6:	83 c8 10             	or     eax,0x10
c001a2b9:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a2be:	0f 20 c0             	mov    eax,cr0
c001a2c1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2c9:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a2d0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2d7:	83 e0 04             	and    eax,0x4
c001a2da:	74 1e                	je     c001a2fa <HalDetectFeatures()+0xbf6>
c001a2dc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2e3:	83 e0 10             	and    eax,0x10
c001a2e6:	75 12                	jne    c001a2fa <HalDetectFeatures()+0xbf6>
c001a2e8:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a2ed:	83 e0 f7             	and    eax,0xfffffff7
c001a2f0:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a2f5:	e9 af 00 00 00       	jmp    c001a3a9 <HalDetectFeatures()+0xca5>
c001a2fa:	e8 9f 5e fe ff       	call   c000019e <hasLegacyFPU>
c001a2ff:	83 e0 01             	and    eax,0x1
c001a302:	83 e0 01             	and    eax,0x1
c001a305:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a30c:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a311:	83 e0 f7             	and    eax,0xfffffff7
c001a314:	88 c2                	mov    dl,al
c001a316:	88 c8                	mov    al,cl
c001a318:	09 d0                	or     eax,edx
c001a31a:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a31f:	e9 85 00 00 00       	jmp    c001a3a9 <HalDetectFeatures()+0xca5>
c001a324:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a329:	83 e0 fb             	and    eax,0xfffffffb
c001a32c:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a331:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a336:	83 e0 f7             	and    eax,0xfffffff7
c001a339:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a33e:	a0 4f 34 03 c0       	mov    al,ds:0xc003344f
c001a343:	83 e0 ef             	and    eax,0xffffffef
c001a346:	a2 4f 34 03 c0       	mov    ds:0xc003344f,al
c001a34b:	0f 20 c0             	mov    eax,cr0
c001a34e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a352:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a356:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c001a35d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a364:	83 e0 04             	and    eax,0x4
c001a367:	74 1b                	je     c001a384 <HalDetectFeatures()+0xc80>
c001a369:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a370:	83 e0 10             	and    eax,0x10
c001a373:	75 0f                	jne    c001a384 <HalDetectFeatures()+0xc80>
c001a375:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a37a:	83 e0 f7             	and    eax,0xfffffff7
c001a37d:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a382:	eb 25                	jmp    c001a3a9 <HalDetectFeatures()+0xca5>
c001a384:	e8 15 5e fe ff       	call   c000019e <hasLegacyFPU>
c001a389:	83 e0 01             	and    eax,0x1
c001a38c:	83 e0 01             	and    eax,0x1
c001a38f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a396:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a39b:	83 e0 f7             	and    eax,0xfffffff7
c001a39e:	88 c2                	mov    dl,al
c001a3a0:	88 c8                	mov    al,cl
c001a3a2:	09 d0                	or     eax,edx
c001a3a4:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a3a9:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a3ae:	83 e0 08             	and    eax,0x8
c001a3b1:	0f b6 c0             	movzx  eax,al
c001a3b4:	85 c0                	test   eax,eax
c001a3b6:	75 25                	jne    c001a3dd <HalDetectFeatures()+0xcd9>
c001a3b8:	e8 e1 5d fe ff       	call   c000019e <hasLegacyFPU>
c001a3bd:	83 e0 01             	and    eax,0x1
c001a3c0:	83 e0 01             	and    eax,0x1
c001a3c3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a3ca:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a3cf:	83 e0 f7             	and    eax,0xfffffff7
c001a3d2:	88 c2                	mov    dl,al
c001a3d4:	88 c8                	mov    al,cl
c001a3d6:	09 d0                	or     eax,edx
c001a3d8:	a2 50 34 03 c0       	mov    ds:0xc0033450,al
c001a3dd:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001a3e2:	83 e0 08             	and    eax,0x8
c001a3e5:	0f b6 c0             	movzx  eax,al
c001a3e8:	85 c0                	test   eax,eax
c001a3ea:	74 0d                	je     c001a3f9 <HalDetectFeatures()+0xcf5>
c001a3ec:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a3f1:	83 c8 10             	or     eax,0x10
c001a3f4:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a3f9:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a3fe:	83 e0 10             	and    eax,0x10
c001a401:	0f b6 c0             	movzx  eax,al
c001a404:	85 c0                	test   eax,eax
c001a406:	75 23                	jne    c001a42b <HalDetectFeatures()+0xd27>
c001a408:	e8 49 7c 00 00       	call   c0022056 <x87Detect>
c001a40d:	83 e0 01             	and    eax,0x1
c001a410:	83 e0 01             	and    eax,0x1
c001a413:	89 c1                	mov    ecx,eax
c001a415:	c1 e1 04             	shl    ecx,0x4
c001a418:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a41d:	83 e0 ef             	and    eax,0xffffffef
c001a420:	88 c2                	mov    dl,al
c001a422:	88 c8                	mov    al,cl
c001a424:	09 d0                	or     eax,edx
c001a426:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a42b:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a430:	83 e0 01             	and    eax,0x1
c001a433:	0f b6 c0             	movzx  eax,al
c001a436:	85 c0                	test   eax,eax
c001a438:	75 2d                	jne    c001a467 <HalDetectFeatures()+0xd63>
c001a43a:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a43f:	83 e0 02             	and    eax,0x2
c001a442:	0f b6 c0             	movzx  eax,al
c001a445:	85 c0                	test   eax,eax
c001a447:	75 1e                	jne    c001a467 <HalDetectFeatures()+0xd63>
c001a449:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a44e:	83 e0 04             	and    eax,0x4
c001a451:	0f b6 c0             	movzx  eax,al
c001a454:	85 c0                	test   eax,eax
c001a456:	75 0f                	jne    c001a467 <HalDetectFeatures()+0xd63>
c001a458:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a45d:	83 e0 08             	and    eax,0x8
c001a460:	0f b6 c0             	movzx  eax,al
c001a463:	85 c0                	test   eax,eax
c001a465:	74 0d                	je     c001a474 <HalDetectFeatures()+0xd70>
c001a467:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a46c:	83 c8 80             	or     eax,0xffffff80
c001a46f:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a474:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a479:	83 e0 10             	and    eax,0x10
c001a47c:	0f b6 c0             	movzx  eax,al
c001a47f:	85 c0                	test   eax,eax
c001a481:	74 2f                	je     c001a4b2 <HalDetectFeatures()+0xdae>
c001a483:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a488:	83 e0 80             	and    eax,0xffffff80
c001a48b:	0f b6 c0             	movzx  eax,al
c001a48e:	85 c0                	test   eax,eax
c001a490:	75 20                	jne    c001a4b2 <HalDetectFeatures()+0xdae>
c001a492:	e8 79 7b 00 00       	call   c0022010 <sseDetect>
c001a497:	83 e0 01             	and    eax,0x1
c001a49a:	89 c1                	mov    ecx,eax
c001a49c:	c1 e1 07             	shl    ecx,0x7
c001a49f:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a4a4:	83 e0 7f             	and    eax,0x7f
c001a4a7:	88 c2                	mov    dl,al
c001a4a9:	88 c8                	mov    al,cl
c001a4ab:	09 d0                	or     eax,edx
c001a4ad:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a4b2:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a4b7:	83 e0 80             	and    eax,0xffffff80
c001a4ba:	0f b6 c0             	movzx  eax,al
c001a4bd:	85 c0                	test   eax,eax
c001a4bf:	74 1c                	je     c001a4dd <HalDetectFeatures()+0xdd9>
c001a4c1:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a4c6:	83 e0 20             	and    eax,0x20
c001a4c9:	0f b6 c0             	movzx  eax,al
c001a4cc:	85 c0                	test   eax,eax
c001a4ce:	75 0d                	jne    c001a4dd <HalDetectFeatures()+0xdd9>
c001a4d0:	a0 4d 34 03 c0       	mov    al,ds:0xc003344d
c001a4d5:	83 e0 df             	and    eax,0xffffffdf
c001a4d8:	a2 4d 34 03 c0       	mov    ds:0xc003344d,al
c001a4dd:	c6 05 48 34 03 c0 00 	mov    BYTE PTR ds:0xc0033448,0x0
c001a4e4:	90                   	nop
c001a4e5:	81 c4 90 00 00 00    	add    esp,0x90
c001a4eb:	5b                   	pop    ebx
c001a4ec:	5e                   	pop    esi
c001a4ed:	5f                   	pop    edi
c001a4ee:	c3                   	ret    

c001a4ef <HalEnableNMI()>:
c001a4ef:	c6 05 2c 34 03 c0 01 	mov    BYTE PTR ds:0xc003342c,0x1
c001a4f6:	6a 10                	push   0x10
c001a4f8:	e8 02 ef ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001a4fd:	83 c4 04             	add    esp,0x4
c001a500:	90                   	nop
c001a501:	c3                   	ret    

c001a502 <HalDisableNMI()>:
c001a502:	c6 05 2c 34 03 c0 00 	mov    BYTE PTR ds:0xc003342c,0x0
c001a509:	6a 10                	push   0x10
c001a50b:	e8 ef ee ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001a510:	83 c4 04             	add    esp,0x4
c001a513:	90                   	nop
c001a514:	c3                   	ret    

c001a515 <HalGetNMIState()>:
c001a515:	a0 2c 34 03 c0       	mov    al,ds:0xc003342c
c001a51a:	c3                   	ret    

c001a51b <HalIsAPICEnabled()>:
c001a51b:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a520:	83 e0 01             	and    eax,0x1
c001a523:	0f b6 c0             	movzx  eax,al
c001a526:	85 c0                	test   eax,eax
c001a528:	0f 95 c0             	setne  al
c001a52b:	c3                   	ret    

c001a52c <x86rdmsr(unsigned int)>:
c001a52c:	83 ec 1c             	sub    esp,0x1c
c001a52f:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a534:	83 e0 08             	and    eax,0x8
c001a537:	0f b6 c0             	movzx  eax,al
c001a53a:	85 c0                	test   eax,eax
c001a53c:	75 10                	jne    c001a54e <x86rdmsr(unsigned int)+0x22>
c001a53e:	83 ec 0c             	sub    esp,0xc
c001a541:	68 86 a2 02 c0       	push   0xc002a286
c001a546:	e8 45 5c ff ff       	call   c0010190 <KePanic(char const*)>
c001a54b:	83 c4 10             	add    esp,0x10
c001a54e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a552:	89 c1                	mov    ecx,eax
c001a554:	0f 32                	rdmsr  
c001a556:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a55a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a55e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a562:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a566:	83 c4 1c             	add    esp,0x1c
c001a569:	c3                   	ret    

c001a56a <x86wrmsr(unsigned int, unsigned long long)>:
c001a56a:	83 ec 1c             	sub    esp,0x1c
c001a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a571:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a575:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a579:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a57d:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a582:	83 e0 08             	and    eax,0x8
c001a585:	0f b6 c0             	movzx  eax,al
c001a588:	85 c0                	test   eax,eax
c001a58a:	75 10                	jne    c001a59c <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001a58c:	83 ec 0c             	sub    esp,0xc
c001a58f:	68 8c a2 02 c0       	push   0xc002a28c
c001a594:	e8 f7 5b ff ff       	call   c0010190 <KePanic(char const*)>
c001a599:	83 c4 10             	add    esp,0x10
c001a59c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001a5a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a5a8:	0f 30                	wrmsr  
c001a5aa:	90                   	nop
c001a5ab:	83 c4 1c             	add    esp,0x1c
c001a5ae:	c3                   	ret    

c001a5af <HalHandleGeneralProtectionFault(void*, void*)>:
c001a5af:	83 ec 0c             	sub    esp,0xc
c001a5b2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a5b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5b9:	8a 40 62             	mov    al,BYTE PTR [eax+0x62]
c001a5bc:	0f b6 c0             	movzx  eax,al
c001a5bf:	85 c0                	test   eax,eax
c001a5c1:	74 11                	je     c001a5d4 <HalHandleGeneralProtectionFault(void*, void*)+0x25>
c001a5c3:	83 ec 0c             	sub    esp,0xc
c001a5c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5ca:	e8 78 db ff ff       	call   c0018147 <Vm::faultHandler(regs*)>
c001a5cf:	83 c4 10             	add    esp,0x10
c001a5d2:	eb 02                	jmp    c001a5d6 <HalHandleGeneralProtectionFault(void*, void*)+0x27>
c001a5d4:	b0 00                	mov    al,0x0
c001a5d6:	83 c4 0c             	add    esp,0xc
c001a5d9:	c3                   	ret    

c001a5da <HalFindRSDP()>:
c001a5da:	83 ec 1c             	sub    esp,0x1c
c001a5dd:	a1 7c 31 03 c0       	mov    eax,ds:0xc003317c
c001a5e2:	3d ff 07 00 00       	cmp    eax,0x7ff
c001a5e7:	7e 17                	jle    c001a600 <HalFindRSDP()+0x26>
c001a5e9:	83 ec 0c             	sub    esp,0xc
c001a5ec:	68 00 04 00 00       	push   0x400
c001a5f1:	e8 66 31 ff ff       	call   c000d75c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a5f6:	83 c4 10             	add    esp,0x10
c001a5f9:	0f b6 c0             	movzx  eax,al
c001a5fc:	85 c0                	test   eax,eax
c001a5fe:	74 04                	je     c001a604 <HalFindRSDP()+0x2a>
c001a600:	b0 01                	mov    al,0x1
c001a602:	eb 02                	jmp    c001a606 <HalFindRSDP()+0x2c>
c001a604:	b0 00                	mov    al,0x0
c001a606:	0f b6 c0             	movzx  eax,al
c001a609:	85 c0                	test   eax,eax
c001a60b:	74 1d                	je     c001a62a <HalFindRSDP()+0x50>
c001a60d:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a612:	83 e0 fb             	and    eax,0xfffffffb
c001a615:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a61a:	83 ec 0c             	sub    esp,0xc
c001a61d:	68 92 a2 02 c0       	push   0xc002a292
c001a622:	e8 55 c9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a627:	83 c4 10             	add    esp,0x10
c001a62a:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a62f:	83 e0 04             	and    eax,0x4
c001a632:	0f b6 c0             	movzx  eax,al
c001a635:	85 c0                	test   eax,eax
c001a637:	75 17                	jne    c001a650 <HalFindRSDP()+0x76>
c001a639:	83 ec 0c             	sub    esp,0xc
c001a63c:	68 a1 a2 02 c0       	push   0xc002a2a1
c001a641:	e8 36 c9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a646:	83 c4 10             	add    esp,0x10
c001a649:	b8 00 00 00 00       	mov    eax,0x0
c001a64e:	eb 63                	jmp    c001a6b3 <HalFindRSDP()+0xd9>
c001a650:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001a658:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001a660:	77 2f                	ja     c001a691 <HalFindRSDP()+0xb7>
c001a662:	83 ec 04             	sub    esp,0x4
c001a665:	6a 08                	push   0x8
c001a667:	68 ab a2 02 c0       	push   0xc002a2ab
c001a66c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a670:	e8 0b 5d fe ff       	call   c0000380 <memcmp>
c001a675:	83 c4 10             	add    esp,0x10
c001a678:	85 c0                	test   eax,eax
c001a67a:	0f 94 c0             	sete   al
c001a67d:	0f b6 c0             	movzx  eax,al
c001a680:	85 c0                	test   eax,eax
c001a682:	74 06                	je     c001a68a <HalFindRSDP()+0xb0>
c001a684:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a688:	eb 29                	jmp    c001a6b3 <HalFindRSDP()+0xd9>
c001a68a:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001a68f:	eb c7                	jmp    c001a658 <HalFindRSDP()+0x7e>
c001a691:	83 ec 0c             	sub    esp,0xc
c001a694:	68 b4 a2 02 c0       	push   0xc002a2b4
c001a699:	e8 de c8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a69e:	83 c4 10             	add    esp,0x10
c001a6a1:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001a6a6:	83 e0 fb             	and    eax,0xfffffffb
c001a6a9:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001a6ae:	b8 00 00 00 00       	mov    eax,0x0
c001a6b3:	83 c4 1c             	add    esp,0x1c
c001a6b6:	c3                   	ret    

c001a6b7 <HalHandlePageFault(void*, void*)>:
c001a6b7:	83 ec 1c             	sub    esp,0x1c
c001a6ba:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a6bf:	8b 00                	mov    eax,DWORD PTR [eax]
c001a6c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6c4:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001a6ca:	0f 20 d2             	mov    edx,cr2
c001a6cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a6d5:	83 ec 08             	sub    esp,0x8
c001a6d8:	52                   	push   edx
c001a6d9:	50                   	push   eax
c001a6da:	e8 15 9e ff ff       	call   c00144f4 <VAS::tryLoadBackOffDisk(unsigned long)>
c001a6df:	83 c4 10             	add    esp,0x10
c001a6e2:	83 c4 1c             	add    esp,0x1c
c001a6e5:	c3                   	ret    

c001a6e6 <HalHandleOpcodeFault(void*, void*)>:
c001a6e6:	83 ec 1c             	sub    esp,0x1c
c001a6e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6f1:	a0 48 34 03 c0       	mov    al,ds:0xc0033448
c001a6f6:	0f b6 c0             	movzx  eax,al
c001a6f9:	85 c0                	test   eax,eax
c001a6fb:	74 25                	je     c001a722 <HalHandleOpcodeFault(void*, void*)+0x3c>
c001a6fd:	83 ec 0c             	sub    esp,0xc
c001a700:	68 c0 a4 02 c0       	push   0xc002a4c0
c001a705:	e8 72 c8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a70a:	83 c4 10             	add    esp,0x10
c001a70d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a711:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a714:	8d 50 19             	lea    edx,[eax+0x19]
c001a717:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a71b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a71e:	b0 01                	mov    al,0x1
c001a720:	eb 02                	jmp    c001a724 <HalHandleOpcodeFault(void*, void*)+0x3e>
c001a722:	b0 00                	mov    al,0x0
c001a724:	83 c4 1c             	add    esp,0x1c
c001a727:	c3                   	ret    

c001a728 <HalDisplayDebugInfo(void*)>:
c001a728:	83 ec 2c             	sub    esp,0x2c
c001a72b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a72f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a733:	0f 20 c0             	mov    eax,cr0
c001a736:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a73a:	0f 20 d0             	mov    eax,cr2
c001a73d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a741:	0f 20 d8             	mov    eax,cr3
c001a744:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a748:	0f 20 e0             	mov    eax,cr4
c001a74b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a74f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a753:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a756:	83 ec 08             	sub    esp,0x8
c001a759:	50                   	push   eax
c001a75a:	68 ce a2 02 c0       	push   0xc002a2ce
c001a75f:	e8 18 c8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a764:	83 c4 10             	add    esp,0x10
c001a767:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a76b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001a76e:	83 ec 08             	sub    esp,0x8
c001a771:	50                   	push   eax
c001a772:	68 bf a2 02 c0       	push   0xc002a2bf
c001a777:	e8 00 c8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a77c:	83 c4 10             	add    esp,0x10
c001a77f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a783:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001a786:	83 ec 08             	sub    esp,0x8
c001a789:	50                   	push   eax
c001a78a:	68 ca a2 02 c0       	push   0xc002a2ca
c001a78f:	e8 e8 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a794:	83 c4 10             	add    esp,0x10
c001a797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a79b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a79e:	83 ec 08             	sub    esp,0x8
c001a7a1:	50                   	push   eax
c001a7a2:	68 d9 a2 02 c0       	push   0xc002a2d9
c001a7a7:	e8 d0 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a7ac:	83 c4 10             	add    esp,0x10
c001a7af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7b3:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001a7b6:	83 ec 08             	sub    esp,0x8
c001a7b9:	50                   	push   eax
c001a7ba:	68 e4 a2 02 c0       	push   0xc002a2e4
c001a7bf:	e8 b8 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a7c4:	83 c4 10             	add    esp,0x10
c001a7c7:	83 ec 08             	sub    esp,0x8
c001a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7ce:	68 ef a2 02 c0       	push   0xc002a2ef
c001a7d3:	e8 a4 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a7d8:	83 c4 10             	add    esp,0x10
c001a7db:	83 ec 08             	sub    esp,0x8
c001a7de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7e2:	68 fa a2 02 c0       	push   0xc002a2fa
c001a7e7:	e8 90 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a7ec:	83 c4 10             	add    esp,0x10
c001a7ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7f3:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a7f6:	c1 e0 05             	shl    eax,0x5
c001a7f9:	8d 90 20 c7 02 c0    	lea    edx,[eax-0x3ffd38e0]
c001a7ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a803:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a806:	83 ec 04             	sub    esp,0x4
c001a809:	52                   	push   edx
c001a80a:	50                   	push   eax
c001a80b:	68 05 a3 02 c0       	push   0xc002a305
c001a810:	e8 67 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a815:	83 c4 10             	add    esp,0x10
c001a818:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a81d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a823:	83 ec 0c             	sub    esp,0xc
c001a826:	50                   	push   eax
c001a827:	e8 83 7f ff ff       	call   c00127af <setActiveTerminal(VgaText*)>
c001a82c:	83 c4 10             	add    esp,0x10
c001a82f:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a834:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a83a:	83 ec 08             	sub    esp,0x8
c001a83d:	68 14 a3 02 c0       	push   0xc002a314
c001a842:	50                   	push   eax
c001a843:	e8 b4 82 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001a848:	83 c4 10             	add    esp,0x10
c001a84b:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a850:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a856:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a85a:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a85d:	83 ec 08             	sub    esp,0x8
c001a860:	52                   	push   edx
c001a861:	50                   	push   eax
c001a862:	e8 4f 82 ff ff       	call   c0012ab6 <VgaText::putx(unsigned int)>
c001a867:	83 c4 10             	add    esp,0x10
c001a86a:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a86f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a875:	83 ec 08             	sub    esp,0x8
c001a878:	68 22 a3 02 c0       	push   0xc002a322
c001a87d:	50                   	push   eax
c001a87e:	e8 79 82 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001a883:	83 c4 10             	add    esp,0x10
c001a886:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a88b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a891:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001a896:	8b 12                	mov    edx,DWORD PTR [edx]
c001a898:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a89b:	83 c2 0c             	add    edx,0xc
c001a89e:	83 ec 08             	sub    esp,0x8
c001a8a1:	52                   	push   edx
c001a8a2:	50                   	push   eax
c001a8a3:	e8 54 82 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001a8a8:	83 c4 10             	add    esp,0x10
c001a8ab:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a8b0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a8b6:	83 ec 08             	sub    esp,0x8
c001a8b9:	68 2b a3 02 c0       	push   0xc002a32b
c001a8be:	50                   	push   eax
c001a8bf:	e8 38 82 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001a8c4:	83 c4 10             	add    esp,0x10
c001a8c7:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a8cc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a8d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8d6:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001a8d9:	83 ec 08             	sub    esp,0x8
c001a8dc:	52                   	push   edx
c001a8dd:	50                   	push   eax
c001a8de:	e8 d3 81 ff ff       	call   c0012ab6 <VgaText::putx(unsigned int)>
c001a8e3:	83 c4 10             	add    esp,0x10
c001a8e6:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a8eb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a8f1:	83 ec 08             	sub    esp,0x8
c001a8f4:	68 33 a3 02 c0       	push   0xc002a333
c001a8f9:	50                   	push   eax
c001a8fa:	e8 fd 81 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001a8ff:	83 c4 10             	add    esp,0x10
c001a902:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a907:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a90d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a911:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001a914:	83 ec 08             	sub    esp,0x8
c001a917:	52                   	push   edx
c001a918:	50                   	push   eax
c001a919:	e8 98 81 ff ff       	call   c0012ab6 <VgaText::putx(unsigned int)>
c001a91e:	83 c4 10             	add    esp,0x10
c001a921:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a926:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a92c:	83 ec 08             	sub    esp,0x8
c001a92f:	68 3b a3 02 c0       	push   0xc002a33b
c001a934:	50                   	push   eax
c001a935:	e8 c2 81 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001a93a:	83 c4 10             	add    esp,0x10
c001a93d:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a942:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a948:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a94c:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001a94f:	83 ec 08             	sub    esp,0x8
c001a952:	52                   	push   edx
c001a953:	50                   	push   eax
c001a954:	e8 5d 81 ff ff       	call   c0012ab6 <VgaText::putx(unsigned int)>
c001a959:	83 c4 10             	add    esp,0x10
c001a95c:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a961:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a967:	83 ec 08             	sub    esp,0x8
c001a96a:	68 43 a3 02 c0       	push   0xc002a343
c001a96f:	50                   	push   eax
c001a970:	e8 87 81 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001a975:	83 c4 10             	add    esp,0x10
c001a978:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a97d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a983:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a987:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a98a:	83 ec 08             	sub    esp,0x8
c001a98d:	52                   	push   edx
c001a98e:	50                   	push   eax
c001a98f:	e8 22 81 ff ff       	call   c0012ab6 <VgaText::putx(unsigned int)>
c001a994:	83 c4 10             	add    esp,0x10
c001a997:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a99c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a9a2:	83 ec 08             	sub    esp,0x8
c001a9a5:	68 4b a3 02 c0       	push   0xc002a34b
c001a9aa:	50                   	push   eax
c001a9ab:	e8 4c 81 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001a9b0:	83 c4 10             	add    esp,0x10
c001a9b3:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a9b8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a9be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9c2:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a9c5:	83 ec 08             	sub    esp,0x8
c001a9c8:	52                   	push   edx
c001a9c9:	50                   	push   eax
c001a9ca:	e8 e7 80 ff ff       	call   c0012ab6 <VgaText::putx(unsigned int)>
c001a9cf:	83 c4 10             	add    esp,0x10
c001a9d2:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a9d7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a9dd:	83 ec 08             	sub    esp,0x8
c001a9e0:	68 53 a3 02 c0       	push   0xc002a353
c001a9e5:	50                   	push   eax
c001a9e6:	e8 11 81 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001a9eb:	83 c4 10             	add    esp,0x10
c001a9ee:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001a9f3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a9f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9fd:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001aa00:	83 ec 08             	sub    esp,0x8
c001aa03:	52                   	push   edx
c001aa04:	50                   	push   eax
c001aa05:	e8 ac 80 ff ff       	call   c0012ab6 <VgaText::putx(unsigned int)>
c001aa0a:	83 c4 10             	add    esp,0x10
c001aa0d:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aa12:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aa18:	83 ec 08             	sub    esp,0x8
c001aa1b:	68 5b a3 02 c0       	push   0xc002a35b
c001aa20:	50                   	push   eax
c001aa21:	e8 d6 80 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001aa26:	83 c4 10             	add    esp,0x10
c001aa29:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aa2e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aa34:	83 ec 08             	sub    esp,0x8
c001aa37:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa3b:	50                   	push   eax
c001aa3c:	e8 75 80 ff ff       	call   c0012ab6 <VgaText::putx(unsigned int)>
c001aa41:	83 c4 10             	add    esp,0x10
c001aa44:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aa49:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aa4f:	83 ec 08             	sub    esp,0x8
c001aa52:	68 64 a3 02 c0       	push   0xc002a364
c001aa57:	50                   	push   eax
c001aa58:	e8 9f 80 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001aa5d:	83 c4 10             	add    esp,0x10
c001aa60:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aa65:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aa6b:	83 ec 08             	sub    esp,0x8
c001aa6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa72:	50                   	push   eax
c001aa73:	e8 3e 80 ff ff       	call   c0012ab6 <VgaText::putx(unsigned int)>
c001aa78:	83 c4 10             	add    esp,0x10
c001aa7b:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aa80:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aa86:	83 ec 08             	sub    esp,0x8
c001aa89:	68 6c a3 02 c0       	push   0xc002a36c
c001aa8e:	50                   	push   eax
c001aa8f:	e8 68 80 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001aa94:	83 c4 10             	add    esp,0x10
c001aa97:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001aa9c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aaa2:	83 ec 08             	sub    esp,0x8
c001aaa5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aaa9:	50                   	push   eax
c001aaaa:	e8 07 80 ff ff       	call   c0012ab6 <VgaText::putx(unsigned int)>
c001aaaf:	83 c4 10             	add    esp,0x10
c001aab2:	fa                   	cli    
c001aab3:	f4                   	hlt    
c001aab4:	eb fe                	jmp    c001aab4 <HalDisplayDebugInfo(void*)+0x38c>

c001aab6 <HalReceivedNMI()>:
c001aab6:	83 ec 1c             	sub    esp,0x1c
c001aab9:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001aac0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aac4:	89 c2                	mov    edx,eax
c001aac6:	ec                   	in     al,dx
c001aac7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001aacb:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001aacf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001aad3:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001aada:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aade:	89 c2                	mov    edx,eax
c001aae0:	ec                   	in     al,dx
c001aae1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001aae5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001aae9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001aaed:	83 ec 0c             	sub    esp,0xc
c001aaf0:	68 74 a3 02 c0       	push   0xc002a374
c001aaf5:	e8 82 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aafa:	83 c4 10             	add    esp,0x10
c001aafd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ab02:	83 e0 10             	and    eax,0x10
c001ab05:	74 10                	je     c001ab17 <HalReceivedNMI()+0x61>
c001ab07:	83 ec 0c             	sub    esp,0xc
c001ab0a:	68 85 a3 02 c0       	push   0xc002a385
c001ab0f:	e8 7c 56 ff ff       	call   c0010190 <KePanic(char const*)>
c001ab14:	83 c4 10             	add    esp,0x10
c001ab17:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ab1c:	83 e0 40             	and    eax,0x40
c001ab1f:	74 10                	je     c001ab31 <HalReceivedNMI()+0x7b>
c001ab21:	83 ec 0c             	sub    esp,0xc
c001ab24:	68 92 a3 02 c0       	push   0xc002a392
c001ab29:	e8 62 56 ff ff       	call   c0010190 <KePanic(char const*)>
c001ab2e:	83 c4 10             	add    esp,0x10
c001ab31:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001ab35:	0f be c0             	movsx  eax,al
c001ab38:	85 c0                	test   eax,eax
c001ab3a:	79 10                	jns    c001ab4c <HalReceivedNMI()+0x96>
c001ab3c:	83 ec 0c             	sub    esp,0xc
c001ab3f:	68 9c a3 02 c0       	push   0xc002a39c
c001ab44:	e8 47 56 ff ff       	call   c0010190 <KePanic(char const*)>
c001ab49:	83 c4 10             	add    esp,0x10
c001ab4c:	90                   	nop
c001ab4d:	83 c4 1c             	add    esp,0x1c
c001ab50:	c3                   	ret    

c001ab51 <HalSystemIdle()>:
c001ab51:	56                   	push   esi
c001ab52:	53                   	push   ebx
c001ab53:	83 ec 14             	sub    esp,0x14
c001ab56:	a0 50 34 03 c0       	mov    al,ds:0xc0033450
c001ab5b:	83 e0 10             	and    eax,0x10
c001ab5e:	0f b6 c0             	movzx  eax,al
c001ab61:	85 c0                	test   eax,eax
c001ab63:	74 43                	je     c001aba8 <HalSystemIdle()+0x57>
c001ab65:	83 ec 0c             	sub    esp,0xc
c001ab68:	68 e1 00 00 00       	push   0xe1
c001ab6d:	e8 ba f9 ff ff       	call   c001a52c <x86rdmsr(unsigned int)>
c001ab72:	83 c4 10             	add    esp,0x10
c001ab75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ab7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab81:	83 e0 02             	and    eax,0x2
c001ab84:	89 c3                	mov    ebx,eax
c001ab86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab8a:	83 e0 00             	and    eax,0x0
c001ab8d:	89 c6                	mov    esi,eax
c001ab8f:	83 ec 04             	sub    esp,0x4
c001ab92:	56                   	push   esi
c001ab93:	53                   	push   ebx
c001ab94:	68 e1 00 00 00       	push   0xe1
c001ab99:	e8 cc f9 ff ff       	call   c001a56a <x86wrmsr(unsigned int, unsigned long long)>
c001ab9e:	83 c4 10             	add    esp,0x10
c001aba1:	e8 ee 55 fe ff       	call   c0000194 <doTPAUSE>
c001aba6:	eb 01                	jmp    c001aba9 <HalSystemIdle()+0x58>
c001aba8:	f4                   	hlt    
c001aba9:	90                   	nop
c001abaa:	83 c4 14             	add    esp,0x14
c001abad:	5b                   	pop    ebx
c001abae:	5e                   	pop    esi
c001abaf:	c3                   	ret    

c001abb0 <i386SaveCoprocessor(void*)>:
c001abb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb4:	83 c0 3f             	add    eax,0x3f
c001abb7:	83 e0 c0             	and    eax,0xffffffc0
c001abba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abbe:	ff 25 10 34 03 c0    	jmp    DWORD PTR ds:0xc0033410

c001abc4 <i386LoadCoprocessor(void*)>:
c001abc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abc8:	83 c0 3f             	add    eax,0x3f
c001abcb:	83 e0 c0             	and    eax,0xffffffc0
c001abce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abd2:	ff 25 0c 34 03 c0    	jmp    DWORD PTR ds:0xc003340c

c001abd8 <x87EmulHandler(regs*, void*)>:
c001abd8:	53                   	push   ebx
c001abd9:	83 ec 08             	sub    esp,0x8
c001abdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abe1:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001abe5:	74 10                	je     c001abf7 <x87EmulHandler(regs*, void*)+0x1f>
c001abe7:	83 ec 0c             	sub    esp,0xc
c001abea:	68 a9 a3 02 c0       	push   0xc002a3a9
c001abef:	e8 9c 55 ff ff       	call   c0010190 <KePanic(char const*)>
c001abf4:	83 c4 10             	add    esp,0x10
c001abf7:	0f 20 c0             	mov    eax,cr0
c001abfa:	a8 08                	test   al,0x8
c001abfc:	74 59                	je     c001ac57 <x87EmulHandler(regs*, void*)+0x7f>
c001abfe:	0f 06                	clts   
c001ac00:	a1 08 34 03 c0       	mov    eax,ds:0xc0033408
c001ac05:	85 c0                	test   eax,eax
c001ac07:	74 0e                	je     c001ac17 <x87EmulHandler(regs*, void*)+0x3f>
c001ac09:	83 ec 0c             	sub    esp,0xc
c001ac0c:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001ac0f:	e8 9c ff ff ff       	call   c001abb0 <i386SaveCoprocessor(void*)>
c001ac14:	83 c4 10             	add    esp,0x10
c001ac17:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001ac1d:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001ac21:	75 12                	jne    c001ac35 <x87EmulHandler(regs*, void*)+0x5d>
c001ac23:	83 ec 0c             	sub    esp,0xc
c001ac26:	68 40 02 00 00       	push   0x240
c001ac2b:	e8 0b 51 ff ff       	call   c000fd3b <malloc>
c001ac30:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001ac33:	eb 10                	jmp    c001ac45 <x87EmulHandler(regs*, void*)+0x6d>
c001ac35:	83 ec 0c             	sub    esp,0xc
c001ac38:	a1 08 34 03 c0       	mov    eax,ds:0xc0033408
c001ac3d:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001ac40:	e8 7f ff ff ff       	call   c001abc4 <i386LoadCoprocessor(void*)>
c001ac45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac4a:	83 c4 10             	add    esp,0x10
c001ac4d:	a3 08 34 03 c0       	mov    ds:0xc0033408,eax
c001ac52:	83 c4 08             	add    esp,0x8
c001ac55:	5b                   	pop    ebx
c001ac56:	c3                   	ret    
c001ac57:	83 ec 0c             	sub    esp,0xc
c001ac5a:	68 bd a3 02 c0       	push   0xc002a3bd
c001ac5f:	e8 18 c3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ac64:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001ac6c:	83 c4 18             	add    esp,0x18
c001ac6f:	5b                   	pop    ebx
c001ac70:	e9 b3 c8 ff ff       	jmp    c0017528 <KeTerminateCurrentThread(int)>

c001ac75 <HalInitialiseCoprocessor()>:
c001ac75:	83 ec 10             	sub    esp,0x10
c001ac78:	c7 05 08 34 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033408,0x0
c001ac82:	6a 00                	push   0x0
c001ac84:	68 d8 ab 01 c0       	push   0xc001abd8
c001ac89:	6a 07                	push   0x7
c001ac8b:	e8 fb 07 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001ac90:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001ac95:	83 c4 10             	add    esp,0x10
c001ac98:	a8 80                	test   al,0x80
c001ac9a:	74 29                	je     c001acc5 <HalInitialiseCoprocessor()+0x50>
c001ac9c:	83 ec 0c             	sub    esp,0xc
c001ac9f:	68 d3 a3 02 c0       	push   0xc002a3d3
c001aca4:	e8 d3 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aca9:	c7 05 10 34 03 c0 28 20 02 c0 	mov    DWORD PTR ds:0xc0033410,0xc0022028
c001acb3:	c7 05 0c 34 03 c0 30 20 02 c0 	mov    DWORD PTR ds:0xc003340c,0xc0022030
c001acbd:	83 c4 1c             	add    esp,0x1c
c001acc0:	e9 73 73 00 00       	jmp    c0022038 <sseInit>
c001acc5:	a8 10                	test   al,0x10
c001acc7:	74 29                	je     c001acf2 <HalInitialiseCoprocessor()+0x7d>
c001acc9:	83 ec 0c             	sub    esp,0xc
c001accc:	68 de a3 02 c0       	push   0xc002a3de
c001acd1:	e8 a6 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001acd6:	c7 05 10 34 03 c0 77 20 02 c0 	mov    DWORD PTR ds:0xc0033410,0xc0022077
c001ace0:	c7 05 0c 34 03 c0 7e 20 02 c0 	mov    DWORD PTR ds:0xc003340c,0xc002207e
c001acea:	83 c4 1c             	add    esp,0x1c
c001aced:	e9 93 73 00 00       	jmp    c0022085 <x87Init>
c001acf2:	c7 05 10 34 03 c0 ee 93 01 c0 	mov    DWORD PTR ds:0xc0033410,0xc00193ee
c001acfc:	c7 05 0c 34 03 c0 ee 93 01 c0 	mov    DWORD PTR ds:0xc003340c,0xc00193ee
c001ad06:	0f 20 c0             	mov    eax,cr0
c001ad09:	83 c8 04             	or     eax,0x4
c001ad0c:	0f 22 c0             	mov    cr0,eax
c001ad0f:	83 c4 0c             	add    esp,0xc
c001ad12:	c3                   	ret    

c001ad13 <HalPanic(char const*)>:
c001ad13:	53                   	push   ebx
c001ad14:	83 ec 10             	sub    esp,0x10
c001ad17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ad1b:	fa                   	cli    
c001ad1c:	53                   	push   ebx
c001ad1d:	68 e9 a3 02 c0       	push   0xc002a3e9
c001ad22:	e8 55 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad27:	a1 04 34 03 c0       	mov    eax,ds:0xc0033404
c001ad2c:	83 c4 10             	add    esp,0x10
c001ad2f:	85 c0                	test   eax,eax
c001ad31:	74 09                	je     c001ad3c <HalPanic(char const*)+0x29>
c001ad33:	83 ec 0c             	sub    esp,0xc
c001ad36:	53                   	push   ebx
c001ad37:	ff d0                	call   eax
c001ad39:	83 c4 10             	add    esp,0x10
c001ad3c:	a1 f4 31 03 c0       	mov    eax,ds:0xc00331f4
c001ad41:	85 c0                	test   eax,eax
c001ad43:	0f 84 dc 00 00 00    	je     c001ae25 <HalPanic(char const*)+0x112>
c001ad49:	52                   	push   edx
c001ad4a:	6a 01                	push   0x1
c001ad4c:	6a 0f                	push   0xf
c001ad4e:	50                   	push   eax
c001ad4f:	e8 9a 78 ff ff       	call   c00125ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001ad54:	59                   	pop    ecx
c001ad55:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001ad5b:	e8 9a 7a ff ff       	call   c00127fa <VgaText::clearScreen()>
c001ad60:	58                   	pop    eax
c001ad61:	5a                   	pop    edx
c001ad62:	68 bc 93 02 c0       	push   0xc00293bc
c001ad67:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001ad6d:	e8 b4 78 ff ff       	call   c0012626 <VgaText::setTitle(char*)>
c001ad72:	83 c4 0c             	add    esp,0xc
c001ad75:	6a 01                	push   0x1
c001ad77:	6a 0f                	push   0xf
c001ad79:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001ad7f:	e8 6a 78 ff ff       	call   c00125ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001ad84:	59                   	pop    ecx
c001ad85:	58                   	pop    eax
c001ad86:	68 02 a4 02 c0       	push   0xc002a402
c001ad8b:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001ad91:	e8 66 7d ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001ad96:	83 c4 0c             	add    esp,0xc
c001ad99:	6a 0f                	push   0xf
c001ad9b:	6a 01                	push   0x1
c001ad9d:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001ada3:	e8 46 78 ff ff       	call   c00125ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001ada8:	58                   	pop    eax
c001ada9:	5a                   	pop    edx
c001adaa:	68 0b a4 02 c0       	push   0xc002a40b
c001adaf:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001adb5:	e8 42 7d ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001adba:	83 c4 0c             	add    esp,0xc
c001adbd:	6a 01                	push   0x1
c001adbf:	6a 0f                	push   0xf
c001adc1:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001adc7:	e8 22 78 ff ff       	call   c00125ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001adcc:	59                   	pop    ecx
c001adcd:	58                   	pop    eax
c001adce:	68 4f a4 02 c0       	push   0xc002a44f
c001add3:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001add9:	e8 1e 7d ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001adde:	58                   	pop    eax
c001addf:	5a                   	pop    edx
c001ade0:	68 18 a4 02 c0       	push   0xc002a418
c001ade5:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001adeb:	e8 0c 7d ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001adf0:	59                   	pop    ecx
c001adf1:	58                   	pop    eax
c001adf2:	68 52 a4 02 c0       	push   0xc002a452
c001adf7:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001adfd:	e8 fa 7c ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001ae02:	58                   	pop    eax
c001ae03:	5a                   	pop    edx
c001ae04:	53                   	push   ebx
c001ae05:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001ae0b:	e8 ec 7c ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001ae10:	59                   	pop    ecx
c001ae11:	5b                   	pop    ebx
c001ae12:	68 4f a4 02 c0       	push   0xc002a44f
c001ae17:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c001ae1d:	e8 da 7c ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001ae22:	83 c4 10             	add    esp,0x10
c001ae25:	eb fe                	jmp    c001ae25 <HalPanic(char const*)+0x112>

c001ae27 <HalQueryPerformanceCounter()>:
c001ae27:	31 c0                	xor    eax,eax
c001ae29:	31 d2                	xor    edx,edx
c001ae2b:	f6 05 4e 34 03 c0 08 	test   BYTE PTR ds:0xc003344e,0x8
c001ae32:	75 02                	jne    c001ae36 <HalQueryPerformanceCounter()+0xf>
c001ae34:	0f 31                	rdtsc  
c001ae36:	c3                   	ret    

c001ae37 <HalInitialise()>:
c001ae37:	53                   	push   ebx
c001ae38:	83 ec 08             	sub    esp,0x8
c001ae3b:	e8 c4 e8 ff ff       	call   c0019704 <HalDetectFeatures()>
c001ae40:	83 ec 0c             	sub    esp,0xc
c001ae43:	68 ef 93 01 c0       	push   0xc00193ef
c001ae48:	e8 85 5c ff ff       	call   c0010ad2 <KeRegisterRestartHandler(void (*)())>
c001ae4d:	c7 04 24 fa 93 01 c0 	mov    DWORD PTR [esp],0xc00193fa
c001ae54:	e8 6f 5c ff ff       	call   c0010ac8 <KeRegisterShutdownHandler(void (*)())>
c001ae59:	c7 04 24 fb 93 01 c0 	mov    DWORD PTR [esp],0xc00193fb
c001ae60:	e8 77 5c ff ff       	call   c0010adc <KeRegisterSleepHandler(void (*)())>
c001ae65:	e8 1e 1a ff ff       	call   c000c888 <scanMADT()>
c001ae6a:	83 c4 10             	add    esp,0x10
c001ae6d:	80 3d 40 2e 03 c0 00 	cmp    BYTE PTR ds:0xc0032e40,0x0
c001ae74:	75 0d                	jne    c001ae83 <HalInitialise()+0x4c>
c001ae76:	a0 4c 34 03 c0       	mov    al,ds:0xc003344c
c001ae7b:	83 e0 fe             	and    eax,0xfffffffe
c001ae7e:	a2 4c 34 03 c0       	mov    ds:0xc003344c,al
c001ae83:	e8 e0 08 00 00       	call   c001b768 <picOpen()>
c001ae88:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001ae8f:	74 0a                	je     c001ae9b <HalInitialise()+0x64>
c001ae91:	e8 22 08 00 00       	call   c001b6b8 <picDisable()>
c001ae96:	e8 5b e1 ff ff       	call   c0018ff6 <apicOpen()>
c001ae9b:	bb 0f 00 00 00       	mov    ebx,0xf
c001aea0:	50                   	push   eax
c001aea1:	6a 00                	push   0x0
c001aea3:	68 78 ed 00 c0       	push   0xc000ed78
c001aea8:	6a 02                	push   0x2
c001aeaa:	e8 dc 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aeaf:	83 c4 0c             	add    esp,0xc
c001aeb2:	6a 00                	push   0x0
c001aeb4:	68 f0 ec 00 c0       	push   0xc000ecf0
c001aeb9:	6a 06                	push   0x6
c001aebb:	e8 cb 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aec0:	83 c4 0c             	add    esp,0xc
c001aec3:	6a 00                	push   0x0
c001aec5:	68 88 ed 00 c0       	push   0xc000ed88
c001aeca:	6a 08                	push   0x8
c001aecc:	e8 ba 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aed1:	83 c4 0c             	add    esp,0xc
c001aed4:	6a 00                	push   0x0
c001aed6:	68 48 ec 00 c0       	push   0xc000ec48
c001aedb:	6a 0d                	push   0xd
c001aedd:	e8 a9 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aee2:	83 c4 0c             	add    esp,0xc
c001aee5:	6a 00                	push   0x0
c001aee7:	68 9c ec 00 c0       	push   0xc000ec9c
c001aeec:	6a 0e                	push   0xe
c001aeee:	e8 98 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aef3:	83 c4 0c             	add    esp,0xc
c001aef6:	6a 00                	push   0x0
c001aef8:	68 44 ed 00 c0       	push   0xc000ed44
c001aefd:	6a 00                	push   0x0
c001aeff:	e8 87 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001af04:	83 c4 0c             	add    esp,0xc
c001af07:	6a 00                	push   0x0
c001af09:	68 44 ed 00 c0       	push   0xc000ed44
c001af0e:	6a 01                	push   0x1
c001af10:	e8 76 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001af15:	83 c4 0c             	add    esp,0xc
c001af18:	6a 00                	push   0x0
c001af1a:	68 44 ed 00 c0       	push   0xc000ed44
c001af1f:	6a 03                	push   0x3
c001af21:	e8 65 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001af26:	83 c4 0c             	add    esp,0xc
c001af29:	6a 00                	push   0x0
c001af2b:	68 44 ed 00 c0       	push   0xc000ed44
c001af30:	6a 04                	push   0x4
c001af32:	e8 54 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001af37:	83 c4 0c             	add    esp,0xc
c001af3a:	6a 00                	push   0x0
c001af3c:	68 44 ed 00 c0       	push   0xc000ed44
c001af41:	6a 05                	push   0x5
c001af43:	e8 43 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001af48:	83 c4 0c             	add    esp,0xc
c001af4b:	6a 00                	push   0x0
c001af4d:	68 44 ed 00 c0       	push   0xc000ed44
c001af52:	6a 00                	push   0x0
c001af54:	e8 32 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001af59:	83 c4 0c             	add    esp,0xc
c001af5c:	6a 00                	push   0x0
c001af5e:	68 44 ed 00 c0       	push   0xc000ed44
c001af63:	6a 01                	push   0x1
c001af65:	e8 21 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001af6a:	83 c4 0c             	add    esp,0xc
c001af6d:	6a 00                	push   0x0
c001af6f:	68 44 ed 00 c0       	push   0xc000ed44
c001af74:	6a 09                	push   0x9
c001af76:	e8 10 05 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001af7b:	83 c4 0c             	add    esp,0xc
c001af7e:	6a 00                	push   0x0
c001af80:	68 44 ed 00 c0       	push   0xc000ed44
c001af85:	6a 0a                	push   0xa
c001af87:	e8 ff 04 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001af8c:	83 c4 0c             	add    esp,0xc
c001af8f:	6a 00                	push   0x0
c001af91:	68 44 ed 00 c0       	push   0xc000ed44
c001af96:	6a 0b                	push   0xb
c001af98:	e8 ee 04 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001af9d:	83 c4 10             	add    esp,0x10
c001afa0:	50                   	push   eax
c001afa1:	6a 00                	push   0x0
c001afa3:	68 44 ed 00 c0       	push   0xc000ed44
c001afa8:	53                   	push   ebx
c001afa9:	43                   	inc    ebx
c001afaa:	e8 dc 04 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001afaf:	83 c4 10             	add    esp,0x10
c001afb2:	83 fb 1e             	cmp    ebx,0x1e
c001afb5:	75 e9                	jne    c001afa0 <HalInitialise()+0x169>
c001afb7:	50                   	push   eax
c001afb8:	6a 00                	push   0x0
c001afba:	68 88 24 01 c0       	push   0xc0012488
c001afbf:	6a 60                	push   0x60
c001afc1:	e8 c5 04 00 00       	call   c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001afc6:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001afcb:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001afd5:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001afdc:	e8 5a 4d ff ff       	call   c000fd3b <malloc>
c001afe1:	89 04 24             	mov    DWORD PTR [esp],eax
c001afe4:	89 c3                	mov    ebx,eax
c001afe6:	e8 eb 0e 00 00       	call   c001bed6 <RTC::RTC()>
c001afeb:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001aff5:	5a                   	pop    edx
c001aff6:	59                   	pop    ecx
c001aff7:	53                   	push   ebx
c001aff8:	ff 35 08 31 03 c0    	push   DWORD PTR ds:0xc0033108
c001affe:	e8 29 ef fe ff       	call   c0009f2c <Device::addChild(Device*)>
c001b003:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b005:	6a 00                	push   0x0
c001b007:	6a 00                	push   0x0
c001b009:	6a 00                	push   0x0
c001b00b:	53                   	push   ebx
c001b00c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b00f:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001b014:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001b01a:	83 c4 28             	add    esp,0x28
c001b01d:	5b                   	pop    ebx
c001b01e:	c3                   	ret    

c001b01f <HalMakeBeep(int)>:
c001b01f:	53                   	push   ebx
c001b020:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b024:	85 db                	test   ebx,ebx
c001b026:	75 07                	jne    c001b02f <HalMakeBeep(int)+0x10>
c001b028:	e4 61                	in     al,0x61
c001b02a:	83 e0 fc             	and    eax,0xfffffffc
c001b02d:	eb 26                	jmp    c001b055 <HalMakeBeep(int)+0x36>
c001b02f:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b034:	99                   	cdq    
c001b035:	f7 fb                	idiv   ebx
c001b037:	89 c1                	mov    ecx,eax
c001b039:	b0 b6                	mov    al,0xb6
c001b03b:	e6 43                	out    0x43,al
c001b03d:	88 c8                	mov    al,cl
c001b03f:	e6 42                	out    0x42,al
c001b041:	89 c8                	mov    eax,ecx
c001b043:	c1 e8 08             	shr    eax,0x8
c001b046:	e6 42                	out    0x42,al
c001b048:	e4 61                	in     al,0x61
c001b04a:	89 c2                	mov    edx,eax
c001b04c:	83 ca 03             	or     edx,0x3
c001b04f:	38 d0                	cmp    al,dl
c001b051:	74 04                	je     c001b057 <HalMakeBeep(int)+0x38>
c001b053:	88 d0                	mov    al,dl
c001b055:	e6 61                	out    0x61,al
c001b057:	5b                   	pop    ebx
c001b058:	c3                   	ret    

c001b059 <HalGetRand()>:
c001b059:	31 c0                	xor    eax,eax
c001b05b:	c3                   	ret    

c001b05c <HalEndOfInterrupt(int)>:
c001b05c:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b063:	74 1d                	je     c001b082 <HalEndOfInterrupt(int)+0x26>
c001b065:	83 ec 18             	sub    esp,0x18
c001b068:	6a 1b                	push   0x1b
c001b06a:	e8 bd f4 ff ff       	call   c001a52c <x86rdmsr(unsigned int)>
c001b06f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b074:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001b07e:	83 c4 1c             	add    esp,0x1c
c001b081:	c3                   	ret    
c001b082:	e9 65 08 00 00       	jmp    c001b8ec <picEOI(int)>
c001b087:	90                   	nop

c001b088 <CPU::CPU()>:
c001b088:	83 ec 0c             	sub    esp,0xc
c001b08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b08f:	83 ec 08             	sub    esp,0x8
c001b092:	68 da a1 02 c0       	push   0xc002a1da
c001b097:	50                   	push   eax
c001b098:	e8 f1 ef fe ff       	call   c000a08e <Device::Device(char const*)>
c001b09d:	83 c4 10             	add    esp,0x10
c001b0a0:	ba ec a4 02 c0       	mov    edx,0xc002a4ec
c001b0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0a9:	89 10                	mov    DWORD PTR [eax],edx
c001b0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0af:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b0b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0bd:	05 64 01 00 00       	add    eax,0x164
c001b0c2:	83 ec 0c             	sub    esp,0xc
c001b0c5:	50                   	push   eax
c001b0c6:	e8 0f 3d ff ff       	call   c000edda <GDT::GDT()>
c001b0cb:	83 c4 10             	add    esp,0x10
c001b0ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0d2:	05 68 09 00 00       	add    eax,0x968
c001b0d7:	83 ec 0c             	sub    esp,0xc
c001b0da:	50                   	push   eax
c001b0db:	e8 4c 3f ff ff       	call   c000f02c <IDT::IDT()>
c001b0e0:	83 c4 10             	add    esp,0x10
c001b0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0e7:	05 68 11 00 00       	add    eax,0x1168
c001b0ec:	83 ec 0c             	sub    esp,0xc
c001b0ef:	50                   	push   eax
c001b0f0:	e8 e3 7e ff ff       	call   c0012fd8 <TSS::TSS()>
c001b0f5:	83 c4 10             	add    esp,0x10
c001b0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0fc:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001b106:	90                   	nop
c001b107:	83 c4 0c             	add    esp,0xc
c001b10a:	c3                   	ret    
c001b10b:	90                   	nop

c001b10c <CPU::setupSMEP()>:
c001b10c:	0f 20 e0             	mov    eax,cr4
c001b10f:	0d 00 00 10 00       	or     eax,0x100000
c001b114:	0f 22 e0             	mov    cr4,eax
c001b117:	c3                   	ret    

c001b118 <CPU::setupUMIP()>:
c001b118:	0f 20 e0             	mov    eax,cr4
c001b11b:	80 cc 08             	or     ah,0x8
c001b11e:	0f 22 e0             	mov    cr4,eax
c001b121:	c3                   	ret    

c001b122 <CPU::setupTSC()>:
c001b122:	0f 20 e0             	mov    eax,cr4
c001b125:	83 c8 04             	or     eax,0x4
c001b128:	0f 22 e0             	mov    cr4,eax
c001b12b:	c3                   	ret    

c001b12c <CPU::setupLargePages()>:
c001b12c:	0f 20 e0             	mov    eax,cr4
c001b12f:	83 c8 10             	or     eax,0x10
c001b132:	0f 22 e0             	mov    cr4,eax
c001b135:	c3                   	ret    

c001b136 <CPU::setupPAT()>:
c001b136:	f6 05 4c 34 03 c0 08 	test   BYTE PTR ds:0xc003344c,0x8
c001b13d:	74 28                	je     c001b167 <CPU::setupPAT()+0x31>
c001b13f:	53                   	push   ebx
c001b140:	83 ec 14             	sub    esp,0x14
c001b143:	68 77 02 00 00       	push   0x277
c001b148:	e8 df f3 ff ff       	call   c001a52c <x86rdmsr(unsigned int)>
c001b14d:	83 c4 0c             	add    esp,0xc
c001b150:	83 e2 f8             	and    edx,0xfffffff8
c001b153:	83 ca 01             	or     edx,0x1
c001b156:	52                   	push   edx
c001b157:	50                   	push   eax
c001b158:	68 77 02 00 00       	push   0x277
c001b15d:	e8 08 f4 ff ff       	call   c001a56a <x86wrmsr(unsigned int, unsigned long long)>
c001b162:	83 c4 18             	add    esp,0x18
c001b165:	5b                   	pop    ebx
c001b166:	c3                   	ret    
c001b167:	c3                   	ret    

c001b168 <CPU::setupMTRR()>:
c001b168:	c3                   	ret    
c001b169:	90                   	nop

c001b16a <CPU::setupGlobalPages()>:
c001b16a:	0f 20 e0             	mov    eax,cr4
c001b16d:	0c 80                	or     al,0x80
c001b16f:	0f 22 e0             	mov    cr4,eax
c001b172:	c3                   	ret    
c001b173:	90                   	nop

c001b174 <CPU::allowUsermodeDataAccess()>:
c001b174:	f6 05 4f 34 03 c0 40 	test   BYTE PTR ds:0xc003344f,0x40
c001b17b:	74 03                	je     c001b180 <CPU::allowUsermodeDataAccess()+0xc>
c001b17d:	0f 01 cb             	stac   
c001b180:	c3                   	ret    
c001b181:	90                   	nop

c001b182 <CPU::prohibitUsermodeDataAccess()>:
c001b182:	f6 05 4f 34 03 c0 40 	test   BYTE PTR ds:0xc003344f,0x40
c001b189:	74 03                	je     c001b18e <CPU::prohibitUsermodeDataAccess()+0xc>
c001b18b:	0f 01 ca             	clac   
c001b18e:	c3                   	ret    
c001b18f:	90                   	nop

c001b190 <CPU::setupSMAP()>:
c001b190:	0f 20 e0             	mov    eax,cr4
c001b193:	0d 00 00 20 00       	or     eax,0x200000
c001b198:	0f 22 e0             	mov    cr4,eax
c001b19b:	eb e5                	jmp    c001b182 <CPU::prohibitUsermodeDataAccess()>
c001b19d:	90                   	nop

c001b19e <CPU::setupFeatures()>:
c001b19e:	53                   	push   ebx
c001b19f:	83 ec 08             	sub    esp,0x8
c001b1a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1a6:	f6 05 4f 34 03 c0 20 	test   BYTE PTR ds:0xc003344f,0x20
c001b1ad:	74 18                	je     c001b1c7 <CPU::setupFeatures()+0x29>
c001b1af:	83 ec 0c             	sub    esp,0xc
c001b1b2:	68 5d a4 02 c0       	push   0xc002a45d
c001b1b7:	e8 c0 bd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b1bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1bf:	e8 54 ff ff ff       	call   c001b118 <CPU::setupUMIP()>
c001b1c4:	83 c4 10             	add    esp,0x10
c001b1c7:	f6 05 4e 34 03 c0 08 	test   BYTE PTR ds:0xc003344e,0x8
c001b1ce:	74 18                	je     c001b1e8 <CPU::setupFeatures()+0x4a>
c001b1d0:	83 ec 0c             	sub    esp,0xc
c001b1d3:	68 67 a4 02 c0       	push   0xc002a467
c001b1d8:	e8 9f bd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b1dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1e0:	e8 3d ff ff ff       	call   c001b122 <CPU::setupTSC()>
c001b1e5:	83 c4 10             	add    esp,0x10
c001b1e8:	f6 05 4e 34 03 c0 20 	test   BYTE PTR ds:0xc003344e,0x20
c001b1ef:	74 18                	je     c001b209 <CPU::setupFeatures()+0x6b>
c001b1f1:	83 ec 0c             	sub    esp,0xc
c001b1f4:	68 70 a4 02 c0       	push   0xc002a470
c001b1f9:	e8 7e bd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b1fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b201:	e8 26 ff ff ff       	call   c001b12c <CPU::setupLargePages()>
c001b206:	83 c4 10             	add    esp,0x10
c001b209:	f6 05 4e 34 03 c0 40 	test   BYTE PTR ds:0xc003344e,0x40
c001b210:	74 18                	je     c001b22a <CPU::setupFeatures()+0x8c>
c001b212:	83 ec 0c             	sub    esp,0xc
c001b215:	68 79 a4 02 c0       	push   0xc002a479
c001b21a:	e8 5d bd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b21f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b222:	e8 43 ff ff ff       	call   c001b16a <CPU::setupGlobalPages()>
c001b227:	83 c4 10             	add    esp,0x10
c001b22a:	f6 05 4e 34 03 c0 80 	test   BYTE PTR ds:0xc003344e,0x80
c001b231:	74 18                	je     c001b24b <CPU::setupFeatures()+0xad>
c001b233:	83 ec 0c             	sub    esp,0xc
c001b236:	68 8b a4 02 c0       	push   0xc002a48b
c001b23b:	e8 3c bd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b240:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b243:	e8 ee fe ff ff       	call   c001b136 <CPU::setupPAT()>
c001b248:	83 c4 10             	add    esp,0x10
c001b24b:	f6 05 50 34 03 c0 04 	test   BYTE PTR ds:0xc0033450,0x4
c001b252:	74 11                	je     c001b265 <CPU::setupFeatures()+0xc7>
c001b254:	c7 44 24 10 94 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a494
c001b25c:	83 c4 08             	add    esp,0x8
c001b25f:	5b                   	pop    ebx
c001b260:	e9 17 bd fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001b265:	83 c4 08             	add    esp,0x8
c001b268:	5b                   	pop    ebx
c001b269:	c3                   	ret    

c001b26a <CPU::open(int, int, void*)>:
c001b26a:	55                   	push   ebp
c001b26b:	57                   	push   edi
c001b26c:	56                   	push   esi
c001b26d:	53                   	push   ebx
c001b26e:	83 ec 18             	sub    esp,0x18
c001b271:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b275:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b279:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b27d:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001b283:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001b289:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001b28f:	50                   	push   eax
c001b290:	e8 a7 3b ff ff       	call   c000ee3c <GDT::setup()>
c001b295:	83 c4 0c             	add    esp,0xc
c001b298:	6a 00                	push   0x0
c001b29a:	68 ef be ad de       	push   0xdeadbeef
c001b29f:	55                   	push   ebp
c001b2a0:	e8 77 7d ff ff       	call   c001301c <TSS::setup(unsigned long, unsigned long)>
c001b2a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b2a8:	e8 4f 7d ff ff       	call   c0012ffc <TSS::flush()>
c001b2ad:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001b2b3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2b6:	e8 e7 3d ff ff       	call   c000f0a2 <IDT::setup()>
c001b2bb:	b8 00 04 00 00       	mov    eax,0x400
c001b2c0:	0f 23 f8             	mov    dr7,eax
c001b2c3:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001b2cd:	e8 b2 50 ff ff       	call   c0010384 <Phys::allocatePage()>
c001b2d2:	83 c4 10             	add    esp,0x10
c001b2d5:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b2db:	85 f6                	test   esi,esi
c001b2dd:	89 38                	mov    DWORD PTR [eax],edi
c001b2df:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b2e5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001b2e8:	74 10                	je     c001b2fa <CPU::open(int, int, void*)+0x90>
c001b2ea:	50                   	push   eax
c001b2eb:	50                   	push   eax
c001b2ec:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b2f2:	56                   	push   esi
c001b2f3:	e8 d0 86 ff ff       	call   c00139c8 <VAS::setCPUSpecific(unsigned long)>
c001b2f8:	eb 0d                	jmp    c001b307 <CPU::open(int, int, void*)+0x9d>
c001b2fa:	83 ec 0c             	sub    esp,0xc
c001b2fd:	68 9e a4 02 c0       	push   0xc002a49e
c001b302:	e8 89 4e ff ff       	call   c0010190 <KePanic(char const*)>
c001b307:	83 c4 10             	add    esp,0x10
c001b30a:	83 ec 0c             	sub    esp,0xc
c001b30d:	68 ac a4 02 c0       	push   0xc002a4ac
c001b312:	e8 92 24 ff ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001b317:	e8 1b fb ff ff       	call   c001ae37 <HalInitialise()>
c001b31c:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001b323:	e8 34 24 ff ff       	call   c000d75c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b328:	0f b6 c0             	movzx  eax,al
c001b32b:	83 f8 01             	cmp    eax,0x1
c001b32e:	19 c0                	sbb    eax,eax
c001b330:	25 aa 00 00 00       	and    eax,0xaa
c001b335:	83 c0 1e             	add    eax,0x1e
c001b338:	89 04 24             	mov    DWORD PTR [esp],eax
c001b33b:	e8 51 02 ff ff       	call   c000b591 <setupTimer(int)>
c001b340:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001b346:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001b34d:	e8 0a 24 ff ff       	call   c000d75c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b352:	83 c4 10             	add    esp,0x10
c001b355:	84 c0                	test   al,al
c001b357:	74 0c                	je     c001b365 <CPU::open(int, int, void*)+0xfb>
c001b359:	83 ec 0c             	sub    esp,0xc
c001b35c:	53                   	push   ebx
c001b35d:	e8 3c fe ff ff       	call   c001b19e <CPU::setupFeatures()>
c001b362:	83 c4 10             	add    esp,0x10
c001b365:	83 c4 0c             	add    esp,0xc
c001b368:	31 c0                	xor    eax,eax
c001b36a:	5b                   	pop    ebx
c001b36b:	5e                   	pop    esi
c001b36c:	5f                   	pop    edi
c001b36d:	5d                   	pop    ebp
c001b36e:	c3                   	ret    

c001b36f <convertLegacyIRQNumber(int)>:
c001b36f:	83 ec 0c             	sub    esp,0xc
c001b372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b376:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b37d:	74 0c                	je     c001b38b <convertLegacyIRQNumber(int)+0x1c>
c001b37f:	83 f8 0f             	cmp    eax,0xf
c001b382:	7f 0b                	jg     c001b38f <convertLegacyIRQNumber(int)+0x20>
c001b384:	0f b6 80 28 bf 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd40d8]
c001b38b:	83 c4 0c             	add    esp,0xc
c001b38e:	c3                   	ret    
c001b38f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b393:	83 ec 0c             	sub    esp,0xc
c001b396:	68 10 a5 02 c0       	push   0xc002a510
c001b39b:	e8 f0 4d ff ff       	call   c0010190 <KePanic(char const*)>
c001b3a0:	83 c4 10             	add    esp,0x10
c001b3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3a7:	83 c4 0c             	add    esp,0xc
c001b3aa:	c3                   	ret    

c001b3ab <KeSetupInterrupts()>:
c001b3ab:	31 c0                	xor    eax,eax
c001b3ad:	c7 80 60 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbba0],0x0
c001b3b7:	c7 80 60 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba0],0x0
c001b3c1:	c7 80 64 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbb9c],0x0
c001b3cb:	c7 80 64 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccb9c],0x0
c001b3d5:	c7 80 68 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbb98],0x0
c001b3df:	c7 80 68 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccb98],0x0
c001b3e9:	c7 80 6c 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbb94],0x0
c001b3f3:	c7 80 6c 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccb94],0x0
c001b3fd:	83 c0 10             	add    eax,0x10
c001b400:	3d 00 10 00 00       	cmp    eax,0x1000
c001b405:	75 a6                	jne    c001b3ad <KeSetupInterrupts()+0x2>
c001b407:	c3                   	ret    

c001b408 <int_handler>:
c001b408:	55                   	push   ebp
c001b409:	57                   	push   edi
c001b40a:	56                   	push   esi
c001b40b:	53                   	push   ebx
c001b40c:	83 ec 0c             	sub    esp,0xc
c001b40f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b413:	eb 02                	jmp    c001b417 <int_handler+0xf>
c001b415:	fa                   	cli    
c001b416:	f4                   	hlt    
c001b417:	e8 6e 4d ff ff       	call   c001018a <KeIsKernelInPanic()>
c001b41c:	84 c0                	test   al,al
c001b41e:	75 f5                	jne    c001b415 <int_handler+0xd>
c001b420:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b423:	8d 46 e0             	lea    eax,[esi-0x20]
c001b426:	83 f8 17             	cmp    eax,0x17
c001b429:	76 40                	jbe    c001b46b <int_handler+0x63>
c001b42b:	c1 e6 04             	shl    esi,0x4
c001b42e:	31 db                	xor    ebx,ebx
c001b430:	8d ae 60 44 03 c0    	lea    ebp,[esi-0x3ffcbba0]
c001b436:	81 c6 60 34 03 c0    	add    esi,0xc0033460
c001b43c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b440:	85 c0                	test   eax,eax
c001b442:	74 13                	je     c001b457 <int_handler+0x4f>
c001b444:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b447:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b44b:	74 2c                	je     c001b479 <int_handler+0x71>
c001b44d:	83 ec 08             	sub    esp,0x8
c001b450:	52                   	push   edx
c001b451:	57                   	push   edi
c001b452:	ff d0                	call   eax
c001b454:	83 c4 10             	add    esp,0x10
c001b457:	83 c3 01             	add    ebx,0x1
c001b45a:	83 fb 04             	cmp    ebx,0x4
c001b45d:	75 dd                	jne    c001b43c <int_handler+0x34>
c001b45f:	83 c4 0c             	add    esp,0xc
c001b462:	31 c0                	xor    eax,eax
c001b464:	5b                   	pop    ebx
c001b465:	31 d2                	xor    edx,edx
c001b467:	5e                   	pop    esi
c001b468:	5f                   	pop    edi
c001b469:	5d                   	pop    ebp
c001b46a:	c3                   	ret    
c001b46b:	83 ec 0c             	sub    esp,0xc
c001b46e:	50                   	push   eax
c001b46f:	e8 e8 fb ff ff       	call   c001b05c <HalEndOfInterrupt(int)>
c001b474:	83 c4 10             	add    esp,0x10
c001b477:	eb b2                	jmp    c001b42b <int_handler+0x23>
c001b479:	83 ec 08             	sub    esp,0x8
c001b47c:	52                   	push   edx
c001b47d:	57                   	push   edi
c001b47e:	ff d0                	call   eax
c001b480:	83 c4 10             	add    esp,0x10
c001b483:	83 c4 0c             	add    esp,0xc
c001b486:	5b                   	pop    ebx
c001b487:	5e                   	pop    esi
c001b488:	5f                   	pop    edi
c001b489:	5d                   	pop    ebp
c001b48a:	c3                   	ret    

c001b48b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001b48b:	56                   	push   esi
c001b48c:	31 c0                	xor    eax,eax
c001b48e:	53                   	push   ebx
c001b48f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b493:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b497:	89 ca                	mov    edx,ecx
c001b499:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b49d:	c1 e2 04             	shl    edx,0x4
c001b4a0:	83 bc 82 60 44 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffcbba0],0x0
c001b4a8:	74 17                	je     c001b4c1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b4aa:	83 c0 01             	add    eax,0x1
c001b4ad:	83 f8 04             	cmp    eax,0x4
c001b4b0:	75 ee                	jne    c001b4a0 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b4b2:	c7 44 24 0c 71 a5 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a571
c001b4ba:	5b                   	pop    ebx
c001b4bb:	5e                   	pop    esi
c001b4bc:	e9 cf 4c ff ff       	jmp    c0010190 <KePanic(char const*)>
c001b4c1:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b4c4:	89 1c 85 60 44 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbba0],ebx
c001b4cb:	89 34 85 60 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccba0],esi
c001b4d2:	5b                   	pop    ebx
c001b4d3:	5e                   	pop    esi
c001b4d4:	c3                   	ret    

c001b4d5 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b4d5:	57                   	push   edi
c001b4d6:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b4dd:	56                   	push   esi
c001b4de:	53                   	push   ebx
c001b4df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b4e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4e7:	74 54                	je     c001b53d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001b4e9:	89 c7                	mov    edi,eax
c001b4eb:	84 c0                	test   al,al
c001b4ed:	74 1d                	je     c001b50c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001b4ef:	83 fe 0f             	cmp    esi,0xf
c001b4f2:	0f 8f d5 00 00 00    	jg     c001b5cd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001b4f8:	0f b6 b6 28 bf 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd40d8]
c001b4ff:	0f b7 bc 36 20 2e 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffcd1e0]
c001b507:	d1 ef                	shr    edi,1
c001b509:	83 e7 01             	and    edi,0x1
c001b50c:	83 ec 08             	sub    esp,0x8
c001b50f:	a1 c0 33 03 c0       	mov    eax,ds:0xc00333c0
c001b514:	31 db                	xor    ebx,ebx
c001b516:	50                   	push   eax
c001b517:	68 7e a5 02 c0       	push   0xc002a57e
c001b51c:	e8 5b ba fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	a1 c0 33 03 c0       	mov    eax,ds:0xc00333c0
c001b529:	85 c0                	test   eax,eax
c001b52b:	7f 55                	jg     c001b582 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001b52d:	83 ec 0c             	sub    esp,0xc
c001b530:	68 95 a5 02 c0       	push   0xc002a595
c001b535:	e8 56 4c ff ff       	call   c0010190 <KePanic(char const*)>
c001b53a:	83 c4 10             	add    esp,0x10
c001b53d:	8d 7e 20             	lea    edi,[esi+0x20]
c001b540:	89 f8                	mov    eax,edi
c001b542:	31 d2                	xor    edx,edx
c001b544:	c1 e0 04             	shl    eax,0x4
c001b547:	8b 8c 90 60 44 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffcbba0]
c001b54e:	85 c9                	test   ecx,ecx
c001b550:	0f 84 8e 00 00 00    	je     c001b5e4 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001b556:	83 c2 01             	add    edx,0x1
c001b559:	83 fa 04             	cmp    edx,0x4
c001b55c:	75 e9                	jne    c001b547 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001b55e:	83 ec 0c             	sub    esp,0xc
c001b561:	68 4c a5 02 c0       	push   0xc002a54c
c001b566:	e8 25 4c ff ff       	call   c0010190 <KePanic(char const*)>
c001b56b:	83 c4 10             	add    esp,0x10
c001b56e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b573:	5b                   	pop    ebx
c001b574:	5e                   	pop    esi
c001b575:	5f                   	pop    edi
c001b576:	c3                   	ret    
c001b577:	83 c3 01             	add    ebx,0x1
c001b57a:	39 1d c0 33 03 c0    	cmp    DWORD PTR ds:0xc00333c0,ebx
c001b580:	7e ab                	jle    c001b52d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001b582:	83 ec 08             	sub    esp,0x8
c001b585:	8b 04 9d e0 33 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffccc20]
c001b58c:	56                   	push   esi
c001b58d:	50                   	push   eax
c001b58e:	e8 ef db ff ff       	call   c0019182 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b593:	83 c4 10             	add    esp,0x10
c001b596:	84 c0                	test   al,al
c001b598:	74 dd                	je     c001b577 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001b59a:	83 ec 04             	sub    esp,0x4
c001b59d:	89 f8                	mov    eax,edi
c001b59f:	8b 1c 9d e0 33 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccc20]
c001b5a6:	0f b6 f8             	movzx  edi,al
c001b5a9:	57                   	push   edi
c001b5aa:	8d 7e 20             	lea    edi,[esi+0x20]
c001b5ad:	6a 00                	push   0x0
c001b5af:	89 f8                	mov    eax,edi
c001b5b1:	0f b6 c0             	movzx  eax,al
c001b5b4:	50                   	push   eax
c001b5b5:	89 f0                	mov    eax,esi
c001b5b7:	6a 00                	push   0x0
c001b5b9:	0f b6 c0             	movzx  eax,al
c001b5bc:	6a 00                	push   0x0
c001b5be:	50                   	push   eax
c001b5bf:	53                   	push   ebx
c001b5c0:	e8 29 dd ff ff       	call   c00192ee <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b5c5:	83 c4 20             	add    esp,0x20
c001b5c8:	e9 73 ff ff ff       	jmp    c001b540 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001b5cd:	83 ec 0c             	sub    esp,0xc
c001b5d0:	31 ff                	xor    edi,edi
c001b5d2:	68 10 a5 02 c0       	push   0xc002a510
c001b5d7:	e8 b4 4b ff ff       	call   c0010190 <KePanic(char const*)>
c001b5dc:	83 c4 10             	add    esp,0x10
c001b5df:	e9 28 ff ff ff       	jmp    c001b50c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001b5e4:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b5e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b5eb:	89 14 85 60 44 03 c0 	mov    DWORD PTR [eax*4-0x3ffcbba0],edx
c001b5f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b5f6:	5b                   	pop    ebx
c001b5f7:	89 14 85 60 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccba0],edx
c001b5fe:	89 f0                	mov    eax,esi
c001b600:	5e                   	pop    esi
c001b601:	5f                   	pop    edi
c001b602:	c3                   	ret    

c001b603 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001b603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b607:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b60b:	c1 e0 04             	shl    eax,0x4
c001b60e:	8d 50 10             	lea    edx,[eax+0x10]
c001b611:	39 88 60 44 03 c0    	cmp    DWORD PTR [eax-0x3ffcbba0],ecx
c001b617:	74 08                	je     c001b621 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b619:	83 c0 04             	add    eax,0x4
c001b61c:	39 d0                	cmp    eax,edx
c001b61e:	75 f1                	jne    c001b611 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b620:	c3                   	ret    
c001b621:	c7 80 60 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbba0],0x0
c001b62b:	c7 80 60 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba0],0x0
c001b635:	eb e2                	jmp    c001b619 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b637 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b637:	53                   	push   ebx
c001b638:	83 ec 08             	sub    esp,0x8
c001b63b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b63f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b644:	74 09                	je     c001b64f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b646:	f6 05 4c 34 03 c0 01 	test   BYTE PTR ds:0xc003344c,0x1
c001b64d:	75 37                	jne    c001b686 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001b64f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b653:	83 c0 20             	add    eax,0x20
c001b656:	c1 e0 04             	shl    eax,0x4
c001b659:	8d 50 10             	lea    edx,[eax+0x10]
c001b65c:	39 98 60 44 03 c0    	cmp    DWORD PTR [eax-0x3ffcbba0],ebx
c001b662:	74 0c                	je     c001b670 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001b664:	83 c0 04             	add    eax,0x4
c001b667:	39 d0                	cmp    eax,edx
c001b669:	75 f1                	jne    c001b65c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001b66b:	83 c4 08             	add    esp,0x8
c001b66e:	5b                   	pop    ebx
c001b66f:	c3                   	ret    
c001b670:	c7 80 60 44 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcbba0],0x0
c001b67a:	c7 80 60 34 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffccba0],0x0
c001b684:	eb de                	jmp    c001b664 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001b686:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001b68b:	7f 11                	jg     c001b69e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001b68d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b691:	0f b6 80 28 bf 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd40d8]
c001b698:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b69c:	eb b1                	jmp    c001b64f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b69e:	83 ec 0c             	sub    esp,0xc
c001b6a1:	68 a2 a5 02 c0       	push   0xc002a5a2
c001b6a6:	e8 e5 4a ff ff       	call   c0010190 <KePanic(char const*)>
c001b6ab:	83 c4 10             	add    esp,0x10
c001b6ae:	eb 9f                	jmp    c001b64f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>

c001b6b0 <picIoWait()>:
c001b6b0:	eb 00                	jmp    c001b6b2 <picIoWait()+0x2>
c001b6b2:	eb 00                	jmp    c001b6b4 <picIoWait()+0x4>
c001b6b4:	90                   	nop
c001b6b5:	c3                   	ret    
c001b6b6:	66 90                	xchg   ax,ax

c001b6b8 <picDisable()>:
c001b6b8:	83 ec 10             	sub    esp,0x10
c001b6bb:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001b6c2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001b6c7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b6cb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b6d0:	ee                   	out    dx,al
c001b6d1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001b6d8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001b6dd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b6e1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001b6e6:	ee                   	out    dx,al
c001b6e7:	90                   	nop
c001b6e8:	83 c4 10             	add    esp,0x10
c001b6eb:	c3                   	ret    

c001b6ec <picGetIRQReg(int)>:
c001b6ec:	83 ec 10             	sub    esp,0x10
c001b6ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6f3:	0f b6 c0             	movzx  eax,al
c001b6f6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b6fd:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001b701:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b705:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b70a:	ee                   	out    dx,al
c001b70b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b70f:	0f b6 c0             	movzx  eax,al
c001b712:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b719:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b71d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b721:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b726:	ee                   	out    dx,al
c001b727:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001b72e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001b733:	89 c2                	mov    edx,eax
c001b735:	ec                   	in     al,dx
c001b736:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b73a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b73e:	0f b6 c0             	movzx  eax,al
c001b741:	c1 e0 08             	shl    eax,0x8
c001b744:	89 c1                	mov    ecx,eax
c001b746:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001b74d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001b752:	89 c2                	mov    edx,eax
c001b754:	ec                   	in     al,dx
c001b755:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001b759:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b75d:	0f b6 c0             	movzx  eax,al
c001b760:	09 c8                	or     eax,ecx
c001b762:	83 c4 10             	add    esp,0x10
c001b765:	c3                   	ret    
c001b766:	66 90                	xchg   ax,ax

c001b768 <picOpen()>:
c001b768:	83 ec 50             	sub    esp,0x50
c001b76b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001b772:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001b777:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b77b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b77f:	ee                   	out    dx,al
c001b780:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001b787:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b78c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b790:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b794:	ee                   	out    dx,al
c001b795:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001b79d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001b7a5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001b7ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b7b0:	89 c2                	mov    edx,eax
c001b7b2:	ec                   	in     al,dx
c001b7b3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001b7b7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b7bb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001b7bf:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001b7c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7ca:	89 c2                	mov    edx,eax
c001b7cc:	ec                   	in     al,dx
c001b7cd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b7d1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b7d5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001b7d9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001b7e0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001b7e5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001b7e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b7ed:	ee                   	out    dx,al
c001b7ee:	e8 bd fe ff ff       	call   c001b6b0 <picIoWait()>
c001b7f3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001b7fa:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001b7ff:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001b803:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b807:	ee                   	out    dx,al
c001b808:	e8 a3 fe ff ff       	call   c001b6b0 <picIoWait()>
c001b80d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b811:	0f b6 c0             	movzx  eax,al
c001b814:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001b81b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001b81f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001b823:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b827:	ee                   	out    dx,al
c001b828:	e8 83 fe ff ff       	call   c001b6b0 <picIoWait()>
c001b82d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b831:	0f b6 c0             	movzx  eax,al
c001b834:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001b83b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b83f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b843:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b847:	ee                   	out    dx,al
c001b848:	e8 63 fe ff ff       	call   c001b6b0 <picIoWait()>
c001b84d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001b854:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001b859:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001b85d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b861:	ee                   	out    dx,al
c001b862:	e8 49 fe ff ff       	call   c001b6b0 <picIoWait()>
c001b867:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001b86e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001b873:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001b877:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b87b:	ee                   	out    dx,al
c001b87c:	e8 2f fe ff ff       	call   c001b6b0 <picIoWait()>
c001b881:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001b888:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001b88d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001b891:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b895:	ee                   	out    dx,al
c001b896:	e8 15 fe ff ff       	call   c001b6b0 <picIoWait()>
c001b89b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001b8a2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001b8a7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001b8ab:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b8af:	ee                   	out    dx,al
c001b8b0:	e8 fb fd ff ff       	call   c001b6b0 <picIoWait()>
c001b8b5:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001b8ba:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001b8c1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001b8c5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001b8c9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001b8cd:	ee                   	out    dx,al
c001b8ce:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001b8d3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001b8da:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b8de:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001b8e2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001b8e6:	ee                   	out    dx,al
c001b8e7:	90                   	nop
c001b8e8:	83 c4 50             	add    esp,0x50
c001b8eb:	c3                   	ret    

c001b8ec <picEOI(int)>:
c001b8ec:	83 ec 10             	sub    esp,0x10
c001b8ef:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b8f4:	75 1e                	jne    c001b914 <picEOI(int)+0x28>
c001b8f6:	6a 0b                	push   0xb
c001b8f8:	e8 ef fd ff ff       	call   c001b6ec <picGetIRQReg(int)>
c001b8fd:	83 c4 04             	add    esp,0x4
c001b900:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001b905:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001b90a:	25 80 00 00 00       	and    eax,0x80
c001b90f:	74 73                	je     c001b984 <picEOI(int)+0x98>
c001b911:	8d 76 00             	lea    esi,[esi+0x0]
c001b914:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001b919:	75 31                	jne    c001b94c <picEOI(int)+0x60>
c001b91b:	6a 0b                	push   0xb
c001b91d:	e8 ca fd ff ff       	call   c001b6ec <picGetIRQReg(int)>
c001b922:	83 c4 04             	add    esp,0x4
c001b925:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001b92a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b92e:	98                   	cwde   
c001b92f:	85 c0                	test   eax,eax
c001b931:	78 19                	js     c001b94c <picEOI(int)+0x60>
c001b933:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001b93a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001b93f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b943:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b948:	ee                   	out    dx,al
c001b949:	eb 3d                	jmp    c001b988 <picEOI(int)+0x9c>
c001b94b:	90                   	nop
c001b94c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b951:	7e 19                	jle    c001b96c <picEOI(int)+0x80>
c001b953:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b95a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001b95f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b963:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b968:	ee                   	out    dx,al
c001b969:	8d 76 00             	lea    esi,[esi+0x0]
c001b96c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b973:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b978:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b97c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b981:	ee                   	out    dx,al
c001b982:	eb 04                	jmp    c001b988 <picEOI(int)+0x9c>
c001b984:	90                   	nop
c001b985:	8d 76 00             	lea    esi,[esi+0x0]
c001b988:	83 c4 10             	add    esp,0x10
c001b98b:	c3                   	ret    

c001b98c <RTC::open(int, int, void*)>:
c001b98c:	31 c0                	xor    eax,eax
c001b98e:	c3                   	ret    
c001b98f:	90                   	nop

c001b990 <RTC::close(int, int, void*)>:
c001b990:	31 c0                	xor    eax,eax
c001b992:	c3                   	ret    
c001b993:	90                   	nop

c001b994 <RTC::timeInSecondsUTC()>:
c001b994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b998:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b99e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b9a4:	c3                   	ret    
c001b9a5:	90                   	nop

c001b9a6 <RTC::timeInDatetimeUTC()>:
c001b9a6:	53                   	push   ebx
c001b9a7:	83 ec 14             	sub    esp,0x14
c001b9aa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b9ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9b2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9b4:	50                   	push   eax
c001b9b5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b9b8:	83 c4 0c             	add    esp,0xc
c001b9bb:	52                   	push   edx
c001b9bc:	50                   	push   eax
c001b9bd:	53                   	push   ebx
c001b9be:	e8 5f e1 fe ff       	call   c0009b22 <KeSecondsToDatetime(unsigned long long)>
c001b9c3:	89 d8                	mov    eax,ebx
c001b9c5:	83 c4 14             	add    esp,0x14
c001b9c8:	5b                   	pop    ebx
c001b9c9:	c2 04 00             	ret    0x4

c001b9cc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b9cc:	56                   	push   esi
c001b9cd:	53                   	push   ebx
c001b9ce:	83 ec 14             	sub    esp,0x14
c001b9d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9d7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b9da:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9de:	52                   	push   edx
c001b9df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b9e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b9e7:	50                   	push   eax
c001b9e8:	e8 35 e1 fe ff       	call   c0009b22 <KeSecondsToDatetime(unsigned long long)>
c001b9ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b9f9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b9fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ba01:	89 f0                	mov    eax,esi
c001ba03:	83 c4 20             	add    esp,0x20
c001ba06:	5b                   	pop    ebx
c001ba07:	5e                   	pop    esi
c001ba08:	ff e0                	jmp    eax

c001ba0a <RTC::~RTC()>:
c001ba0a:	83 ec 0c             	sub    esp,0xc
c001ba0d:	ba cc a5 02 c0       	mov    edx,0xc002a5cc
c001ba12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba16:	89 10                	mov    DWORD PTR [eax],edx
c001ba18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1c:	83 ec 0c             	sub    esp,0xc
c001ba1f:	50                   	push   eax
c001ba20:	e8 9f db fe ff       	call   c00095c4 <Clock::~Clock()>
c001ba25:	83 c4 10             	add    esp,0x10
c001ba28:	90                   	nop
c001ba29:	83 c4 0c             	add    esp,0xc
c001ba2c:	c3                   	ret    
c001ba2d:	90                   	nop

c001ba2e <RTC::~RTC()>:
c001ba2e:	83 ec 0c             	sub    esp,0xc
c001ba31:	83 ec 0c             	sub    esp,0xc
c001ba34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba38:	e8 cd ff ff ff       	call   c001ba0a <RTC::~RTC()>
c001ba3d:	83 c4 10             	add    esp,0x10
c001ba40:	83 ec 08             	sub    esp,0x8
c001ba43:	68 60 01 00 00       	push   0x160
c001ba48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba4c:	e8 03 1e ff ff       	call   c000d854 <operator delete(void*, unsigned long)>
c001ba51:	83 c4 10             	add    esp,0x10
c001ba54:	83 c4 0c             	add    esp,0xc
c001ba57:	c3                   	ret    

c001ba58 <RTC::get_update_in_progress_flag()>:
c001ba58:	83 ec 18             	sub    esp,0x18
c001ba5b:	6a 0a                	push   0xa
c001ba5d:	e8 9d d9 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001ba62:	83 c4 1c             	add    esp,0x1c
c001ba65:	0f b6 c0             	movzx  eax,al
c001ba68:	c1 e8 07             	shr    eax,0x7
c001ba6b:	c3                   	ret    

c001ba6c <RTC::completeRTCRefresh()>:
c001ba6c:	55                   	push   ebp
c001ba6d:	57                   	push   edi
c001ba6e:	56                   	push   esi
c001ba6f:	53                   	push   ebx
c001ba70:	83 ec 3c             	sub    esp,0x3c
c001ba73:	8b 1d 50 2b 03 c0    	mov    ebx,DWORD PTR ds:0xc0032b50
c001ba79:	83 ec 0c             	sub    esp,0xc
c001ba7c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ba80:	e8 d3 ff ff ff       	call   c001ba58 <RTC::get_update_in_progress_flag()>
c001ba85:	83 c4 10             	add    esp,0x10
c001ba88:	84 c0                	test   al,al
c001ba8a:	74 0e                	je     c001ba9a <RTC::completeRTCRefresh()+0x2e>
c001ba8c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001ba92:	3b 05 50 2b 03 c0    	cmp    eax,DWORD PTR ds:0xc0032b50
c001ba98:	73 df                	jae    c001ba79 <RTC::completeRTCRefresh()+0xd>
c001ba9a:	83 ec 0c             	sub    esp,0xc
c001ba9d:	6a 00                	push   0x0
c001ba9f:	e8 5b d9 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001baa4:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001baab:	89 c5                	mov    ebp,eax
c001baad:	e8 4d d9 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bab2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001bab9:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001babd:	e8 3d d9 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bac2:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001bac9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001bacd:	e8 2d d9 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bad2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001bad9:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001badd:	e8 1d d9 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bae2:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001bae9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001baed:	e8 0d d9 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001baf2:	0f b6 c0             	movzx  eax,al
c001baf5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001baf9:	83 c4 10             	add    esp,0x10
c001bafc:	8b 1d 50 2b 03 c0    	mov    ebx,DWORD PTR ds:0xc0032b50
c001bb02:	83 ec 0c             	sub    esp,0xc
c001bb05:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001bb09:	e8 4a ff ff ff       	call   c001ba58 <RTC::get_update_in_progress_flag()>
c001bb0e:	83 c4 10             	add    esp,0x10
c001bb11:	84 c0                	test   al,al
c001bb13:	74 0e                	je     c001bb23 <RTC::completeRTCRefresh()+0xb7>
c001bb15:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001bb1b:	3b 05 50 2b 03 c0    	cmp    eax,DWORD PTR ds:0xc0032b50
c001bb21:	73 df                	jae    c001bb02 <RTC::completeRTCRefresh()+0x96>
c001bb23:	83 ec 0c             	sub    esp,0xc
c001bb26:	6a 00                	push   0x0
c001bb28:	e8 d2 d8 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bb2d:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001bb34:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bb38:	e8 c2 d8 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bb3d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001bb44:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bb48:	e8 b2 d8 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bb4d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001bb54:	88 c3                	mov    bl,al
c001bb56:	e8 a4 d8 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bb5b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001bb62:	89 c6                	mov    esi,eax
c001bb64:	e8 96 d8 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bb69:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001bb70:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bb74:	e8 86 d8 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bb79:	89 e9                	mov    ecx,ebp
c001bb7b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bb7f:	0f b6 f8             	movzx  edi,al
c001bb82:	83 c4 10             	add    esp,0x10
c001bb85:	0f b6 eb             	movzx  ebp,bl
c001bb88:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001bb8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb91:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bb9a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001bb9e:	0f 94 c0             	sete   al
c001bba1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001bba5:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001bba9:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001bbae:	0f 94 c2             	sete   dl
c001bbb1:	21 d0                	and    eax,edx
c001bbb3:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001bbb7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001bbbb:	0f 94 c2             	sete   dl
c001bbbe:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001bbc2:	21 c2                	and    edx,eax
c001bbc4:	89 f0                	mov    eax,esi
c001bbc6:	0f b6 c0             	movzx  eax,al
c001bbc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bbcd:	89 f0                	mov    eax,esi
c001bbcf:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001bbd3:	0f 94 c0             	sete   al
c001bbd6:	21 d0                	and    eax,edx
c001bbd8:	31 d2                	xor    edx,edx
c001bbda:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001bbde:	0f 94 c2             	sete   dl
c001bbe1:	85 c2                	test   edx,eax
c001bbe3:	75 27                	jne    c001bc0c <RTC::completeRTCRefresh()+0x1a0>
c001bbe5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bbe9:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001bbed:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001bbf1:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001bbf5:	89 f0                	mov    eax,esi
c001bbf7:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001bbfb:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001bbff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bc03:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bc07:	e9 f0 fe ff ff       	jmp    c001bafc <RTC::completeRTCRefresh()+0x90>
c001bc0c:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001bc10:	75 d3                	jne    c001bbe5 <RTC::completeRTCRefresh()+0x179>
c001bc12:	83 ec 0c             	sub    esp,0xc
c001bc15:	6a 0b                	push   0xb
c001bc17:	e8 e3 d7 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bc1c:	83 c4 10             	add    esp,0x10
c001bc1f:	a8 04                	test   al,0x4
c001bc21:	75 7a                	jne    c001bc9d <RTC::completeRTCRefresh()+0x231>
c001bc23:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bc27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bc2b:	83 e1 0f             	and    ecx,0xf
c001bc2e:	c1 ea 04             	shr    edx,0x4
c001bc31:	83 e6 0f             	and    esi,0xf
c001bc34:	6b d2 0a             	imul   edx,edx,0xa
c001bc37:	c1 ef 04             	shr    edi,0x4
c001bc3a:	01 d1                	add    ecx,edx
c001bc3c:	6b ff 0a             	imul   edi,edi,0xa
c001bc3f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001bc43:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bc47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bc4b:	c1 ea 04             	shr    edx,0x4
c001bc4e:	83 e1 0f             	and    ecx,0xf
c001bc51:	6b d2 0a             	imul   edx,edx,0xa
c001bc54:	01 d1                	add    ecx,edx
c001bc56:	89 ea                	mov    edx,ebp
c001bc58:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001bc5c:	c1 ea 04             	shr    edx,0x4
c001bc5f:	89 d9                	mov    ecx,ebx
c001bc61:	83 e2 07             	and    edx,0x7
c001bc64:	83 e1 0f             	and    ecx,0xf
c001bc67:	6b d2 0a             	imul   edx,edx,0xa
c001bc6a:	83 e3 80             	and    ebx,0xffffff80
c001bc6d:	01 d1                	add    ecx,edx
c001bc6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bc73:	09 cb                	or     ebx,ecx
c001bc75:	c1 ea 04             	shr    edx,0x4
c001bc78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bc7c:	6b d2 0a             	imul   edx,edx,0xa
c001bc7f:	83 e1 0f             	and    ecx,0xf
c001bc82:	01 d6                	add    esi,edx
c001bc84:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bc88:	c1 ea 04             	shr    edx,0x4
c001bc8b:	6b d2 0a             	imul   edx,edx,0xa
c001bc8e:	01 d1                	add    ecx,edx
c001bc90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc94:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001bc98:	83 e2 0f             	and    edx,0xf
c001bc9b:	01 d7                	add    edi,edx
c001bc9d:	a8 02                	test   al,0x2
c001bc9f:	75 15                	jne    c001bcb6 <RTC::completeRTCRefresh()+0x24a>
c001bca1:	f6 c3 80             	test   bl,0x80
c001bca4:	74 10                	je     c001bcb6 <RTC::completeRTCRefresh()+0x24a>
c001bca6:	83 e3 7f             	and    ebx,0x7f
c001bca9:	b9 18 00 00 00       	mov    ecx,0x18
c001bcae:	8d 43 0c             	lea    eax,[ebx+0xc]
c001bcb1:	99                   	cdq    
c001bcb2:	f7 f9                	idiv   ecx
c001bcb4:	88 d3                	mov    bl,dl
c001bcb6:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001bcbc:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001bcc2:	77 06                	ja     c001bcca <RTC::completeRTCRefresh()+0x25e>
c001bcc4:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001bcca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bccf:	31 c9                	xor    ecx,ecx
c001bcd1:	c1 e0 10             	shl    eax,0x10
c001bcd4:	89 cf                	mov    edi,ecx
c001bcd6:	c1 e5 10             	shl    ebp,0x10
c001bcd9:	31 d2                	xor    edx,edx
c001bcdb:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001bce1:	09 c7                	or     edi,eax
c001bce3:	89 f0                	mov    eax,esi
c001bce5:	89 f9                	mov    ecx,edi
c001bce7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bceb:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001bcef:	88 c2                	mov    dl,al
c001bcf1:	88 d9                	mov    cl,bl
c001bcf3:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001bcf7:	0f b7 c2             	movzx  eax,dx
c001bcfa:	09 e8                	or     eax,ebp
c001bcfc:	89 c2                	mov    edx,eax
c001bcfe:	50                   	push   eax
c001bcff:	50                   	push   eax
c001bd00:	51                   	push   ecx
c001bd01:	52                   	push   edx
c001bd02:	e8 0d da fe ff       	call   c0009714 <KeDatetimeToSeconds(datetime_t)>
c001bd07:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001bd0b:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001bd11:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001bd17:	83 c4 4c             	add    esp,0x4c
c001bd1a:	5b                   	pop    ebx
c001bd1b:	5e                   	pop    esi
c001bd1c:	5f                   	pop    edi
c001bd1d:	5d                   	pop    ebp
c001bd1e:	c3                   	ret    
c001bd1f:	90                   	nop

c001bd20 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001bd20:	55                   	push   ebp
c001bd21:	57                   	push   edi
c001bd22:	56                   	push   esi
c001bd23:	53                   	push   ebx
c001bd24:	83 ec 34             	sub    esp,0x34
c001bd27:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001bd2b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001bd2f:	6a 00                	push   0x0
c001bd31:	89 fb                	mov    ebx,edi
c001bd33:	6a 00                	push   0x0
c001bd35:	e8 19 d7 ff ff       	call   c0019453 <x86WriteCMOS(unsigned char, unsigned char)>
c001bd3a:	5d                   	pop    ebp
c001bd3b:	58                   	pop    eax
c001bd3c:	6a 00                	push   0x0
c001bd3e:	6a 02                	push   0x2
c001bd40:	e8 0e d7 ff ff       	call   c0019453 <x86WriteCMOS(unsigned char, unsigned char)>
c001bd45:	31 d2                	xor    edx,edx
c001bd47:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001bd4e:	89 f9                	mov    ecx,edi
c001bd50:	89 f8                	mov    eax,edi
c001bd52:	c1 e9 10             	shr    ecx,0x10
c001bd55:	0f b6 c4             	movzx  eax,ah
c001bd58:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001bd5c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001bd60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bd64:	b9 64 00 00 00       	mov    ecx,0x64
c001bd69:	89 f0                	mov    eax,esi
c001bd6b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bd6f:	89 f0                	mov    eax,esi
c001bd71:	0f b6 c4             	movzx  eax,ah
c001bd74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd78:	89 f0                	mov    eax,esi
c001bd7a:	c1 e8 10             	shr    eax,0x10
c001bd7d:	f7 f1                	div    ecx
c001bd7f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001bd83:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001bd87:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bd8b:	e8 6f d6 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bd90:	83 c4 10             	add    esp,0x10
c001bd93:	89 c5                	mov    ebp,eax
c001bd95:	a8 04                	test   al,0x4
c001bd97:	75 6e                	jne    c001be07 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001bd99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bd9d:	31 d2                	xor    edx,edx
c001bd9f:	0f b6 c1             	movzx  eax,cl
c001bda2:	b9 0a 00 00 00       	mov    ecx,0xa
c001bda7:	f7 f1                	div    ecx
c001bda9:	c1 e0 04             	shl    eax,0x4
c001bdac:	09 d0                	or     eax,edx
c001bdae:	31 d2                	xor    edx,edx
c001bdb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdb4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bdb9:	f7 f1                	div    ecx
c001bdbb:	c1 e0 04             	shl    eax,0x4
c001bdbe:	09 d0                	or     eax,edx
c001bdc0:	31 d2                	xor    edx,edx
c001bdc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bdc6:	0f b6 c3             	movzx  eax,bl
c001bdc9:	f7 f1                	div    ecx
c001bdcb:	c1 e0 04             	shl    eax,0x4
c001bdce:	09 d0                	or     eax,edx
c001bdd0:	31 d2                	xor    edx,edx
c001bdd2:	89 c3                	mov    ebx,eax
c001bdd4:	89 f0                	mov    eax,esi
c001bdd6:	0f b6 c0             	movzx  eax,al
c001bdd9:	f7 f1                	div    ecx
c001bddb:	c1 e0 04             	shl    eax,0x4
c001bdde:	09 d0                	or     eax,edx
c001bde0:	31 d2                	xor    edx,edx
c001bde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bde6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bdeb:	f7 f1                	div    ecx
c001bded:	c1 e0 04             	shl    eax,0x4
c001bdf0:	09 d0                	or     eax,edx
c001bdf2:	31 d2                	xor    edx,edx
c001bdf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bdf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdfc:	f7 f1                	div    ecx
c001bdfe:	c1 e0 04             	shl    eax,0x4
c001be01:	09 d0                	or     eax,edx
c001be03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001be07:	83 e5 02             	and    ebp,0x2
c001be0a:	75 1e                	jne    c001be2a <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001be0c:	0f b6 c3             	movzx  eax,bl
c001be0f:	83 f8 0b             	cmp    eax,0xb
c001be12:	76 10                	jbe    c001be24 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001be14:	8d 53 f4             	lea    edx,[ebx-0xc]
c001be17:	88 d3                	mov    bl,dl
c001be19:	84 d2                	test   dl,dl
c001be1b:	75 02                	jne    c001be1f <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001be1d:	b3 0c                	mov    bl,0xc
c001be1f:	83 cb 80             	or     ebx,0xffffff80
c001be22:	eb 06                	jmp    c001be2a <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001be24:	85 c0                	test   eax,eax
c001be26:	75 02                	jne    c001be2a <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001be28:	b3 0c                	mov    bl,0xc
c001be2a:	0f b6 db             	movzx  ebx,bl
c001be2d:	50                   	push   eax
c001be2e:	50                   	push   eax
c001be2f:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001be34:	52                   	push   edx
c001be35:	6a 00                	push   0x0
c001be37:	e8 17 d6 ff ff       	call   c0019453 <x86WriteCMOS(unsigned char, unsigned char)>
c001be3c:	5a                   	pop    edx
c001be3d:	59                   	pop    ecx
c001be3e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be43:	50                   	push   eax
c001be44:	6a 02                	push   0x2
c001be46:	e8 08 d6 ff ff       	call   c0019453 <x86WriteCMOS(unsigned char, unsigned char)>
c001be4b:	5e                   	pop    esi
c001be4c:	5f                   	pop    edi
c001be4d:	53                   	push   ebx
c001be4e:	6a 04                	push   0x4
c001be50:	e8 fe d5 ff ff       	call   c0019453 <x86WriteCMOS(unsigned char, unsigned char)>
c001be55:	5d                   	pop    ebp
c001be56:	58                   	pop    eax
c001be57:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001be5c:	52                   	push   edx
c001be5d:	6a 07                	push   0x7
c001be5f:	e8 ef d5 ff ff       	call   c0019453 <x86WriteCMOS(unsigned char, unsigned char)>
c001be64:	58                   	pop    eax
c001be65:	5a                   	pop    edx
c001be66:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001be6b:	50                   	push   eax
c001be6c:	6a 08                	push   0x8
c001be6e:	e8 e0 d5 ff ff       	call   c0019453 <x86WriteCMOS(unsigned char, unsigned char)>
c001be73:	59                   	pop    ecx
c001be74:	5b                   	pop    ebx
c001be75:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001be7a:	55                   	push   ebp
c001be7b:	6a 09                	push   0x9
c001be7d:	e8 d1 d5 ff ff       	call   c0019453 <x86WriteCMOS(unsigned char, unsigned char)>
c001be82:	5e                   	pop    esi
c001be83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001be87:	e8 e0 fb ff ff       	call   c001ba6c <RTC::completeRTCRefresh()>
c001be8c:	83 c4 3c             	add    esp,0x3c
c001be8f:	b0 01                	mov    al,0x1
c001be91:	5b                   	pop    ebx
c001be92:	5e                   	pop    esi
c001be93:	5f                   	pop    edi
c001be94:	5d                   	pop    ebp
c001be95:	c3                   	ret    

c001be96 <rtcIRQHandler(regs*, void*)>:
c001be96:	53                   	push   ebx
c001be97:	83 ec 14             	sub    esp,0x14
c001be9a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be9e:	6a 0c                	push   0xc
c001bea0:	e8 5a d5 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bea5:	83 c4 10             	add    esp,0x10
c001bea8:	a8 80                	test   al,0x80
c001beaa:	74 24                	je     c001bed0 <rtcIRQHandler(regs*, void*)+0x3a>
c001beac:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001beb3:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001beba:	66 ff 05 60 54 03 c0 	inc    WORD PTR ds:0xc0035460
c001bec1:	75 0d                	jne    c001bed0 <rtcIRQHandler(regs*, void*)+0x3a>
c001bec3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001bec7:	83 c4 08             	add    esp,0x8
c001beca:	5b                   	pop    ebx
c001becb:	e9 9c fb ff ff       	jmp    c001ba6c <RTC::completeRTCRefresh()>
c001bed0:	83 c4 08             	add    esp,0x8
c001bed3:	5b                   	pop    ebx
c001bed4:	c3                   	ret    
c001bed5:	90                   	nop

c001bed6 <RTC::RTC()>:
c001bed6:	83 ec 1c             	sub    esp,0x1c
c001bed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bedd:	83 ec 08             	sub    esp,0x8
c001bee0:	68 af a5 02 c0       	push   0xc002a5af
c001bee5:	50                   	push   eax
c001bee6:	e8 a3 d6 fe ff       	call   c000958e <Clock::Clock(char const*)>
c001beeb:	83 c4 10             	add    esp,0x10
c001beee:	ba cc a5 02 c0       	mov    edx,0xc002a5cc
c001bef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bef7:	89 10                	mov    DWORD PTR [eax],edx
c001bef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001befd:	83 ec 0c             	sub    esp,0xc
c001bf00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf04:	6a 01                	push   0x1
c001bf06:	68 96 be 01 c0       	push   0xc001be96
c001bf0b:	6a 08                	push   0x8
c001bf0d:	50                   	push   eax
c001bf0e:	e8 c5 df fe ff       	call   c0009ed8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf13:	83 c4 20             	add    esp,0x20
c001bf16:	89 c2                	mov    edx,eax
c001bf18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf1c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bf22:	fa                   	cli    
c001bf23:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001bf28:	83 c0 01             	add    eax,0x1
c001bf2b:	a3 30 33 03 c0       	mov    ds:0xc0033330,eax
c001bf30:	83 ec 0c             	sub    esp,0xc
c001bf33:	6a 0b                	push   0xb
c001bf35:	e8 c5 d4 ff ff       	call   c00193ff <x86ReadCMOS(unsigned char)>
c001bf3a:	83 c4 10             	add    esp,0x10
c001bf3d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bf41:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bf45:	83 c8 10             	or     eax,0x10
c001bf48:	0f b6 c0             	movzx  eax,al
c001bf4b:	83 ec 08             	sub    esp,0x8
c001bf4e:	50                   	push   eax
c001bf4f:	6a 0b                	push   0xb
c001bf51:	e8 fd d4 ff ff       	call   c0019453 <x86WriteCMOS(unsigned char, unsigned char)>
c001bf56:	83 c4 10             	add    esp,0x10
c001bf59:	83 ec 0c             	sub    esp,0xc
c001bf5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf60:	e8 07 fb ff ff       	call   c001ba6c <RTC::completeRTCRefresh()>
c001bf65:	83 c4 10             	add    esp,0x10
c001bf68:	f0 83 2d 30 33 03 c0 01 	lock sub DWORD PTR ds:0xc0033330,0x1
c001bf70:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c001bf75:	85 c0                	test   eax,eax
c001bf77:	75 01                	jne    c001bf7a <RTC::RTC()+0xa4>
c001bf79:	fb                   	sti    
c001bf7a:	90                   	nop
c001bf7b:	83 c4 1c             	add    esp,0x1c
c001bf7e:	c3                   	ret    
c001bf7f:	90                   	nop

c001bf80 <HalConsoleScroll(int, int)>:
c001bf80:	83 ec 10             	sub    esp,0x10
c001bf83:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001bf8b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001bf93:	90                   	nop
c001bf94:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001bf99:	0f 8f e1 00 00 00    	jg     c001c080 <HalConsoleScroll(int, int)+0x100>
c001bf9f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bfa7:	90                   	nop
c001bfa8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001bfb0:	0f 8f be 00 00 00    	jg     c001c074 <HalConsoleScroll(int, int)+0xf4>
c001bfb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bfba:	89 d0                	mov    eax,edx
c001bfbc:	c1 e0 02             	shl    eax,0x2
c001bfbf:	01 d0                	add    eax,edx
c001bfc1:	c1 e0 05             	shl    eax,0x5
c001bfc4:	89 c2                	mov    edx,eax
c001bfc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfca:	01 d0                	add    eax,edx
c001bfcc:	89 c2                	mov    edx,eax
c001bfce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfd2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001bfd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bfd9:	89 d0                	mov    eax,edx
c001bfdb:	c1 e0 02             	shl    eax,0x2
c001bfde:	01 d0                	add    eax,edx
c001bfe0:	c1 e0 05             	shl    eax,0x5
c001bfe3:	89 c2                	mov    edx,eax
c001bfe5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfe9:	01 d0                	add    eax,edx
c001bfeb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001bff1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bff5:	01 c2                	add    edx,eax
c001bff7:	8a 01                	mov    al,BYTE PTR [ecx]
c001bff9:	88 02                	mov    BYTE PTR [edx],al
c001bffb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c000:	75 66                	jne    c001c068 <HalConsoleScroll(int, int)+0xe8>
c001c002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c006:	83 e0 01             	and    eax,0x1
c001c009:	74 39                	je     c001c044 <HalConsoleScroll(int, int)+0xc4>
c001c00b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c00f:	83 e0 0f             	and    eax,0xf
c001c012:	88 c2                	mov    dl,al
c001c014:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c018:	c1 e0 04             	shl    eax,0x4
c001c01b:	09 d0                	or     eax,edx
c001c01d:	88 c1                	mov    cl,al
c001c01f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c023:	89 d0                	mov    eax,edx
c001c025:	c1 e0 02             	shl    eax,0x2
c001c028:	01 d0                	add    eax,edx
c001c02a:	c1 e0 05             	shl    eax,0x5
c001c02d:	89 c2                	mov    edx,eax
c001c02f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c033:	01 d0                	add    eax,edx
c001c035:	89 c2                	mov    edx,eax
c001c037:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c03b:	01 d0                	add    eax,edx
c001c03d:	88 ca                	mov    dl,cl
c001c03f:	88 10                	mov    BYTE PTR [eax],dl
c001c041:	eb 25                	jmp    c001c068 <HalConsoleScroll(int, int)+0xe8>
c001c043:	90                   	nop
c001c044:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c048:	89 d0                	mov    eax,edx
c001c04a:	c1 e0 02             	shl    eax,0x2
c001c04d:	01 d0                	add    eax,edx
c001c04f:	c1 e0 05             	shl    eax,0x5
c001c052:	89 c2                	mov    edx,eax
c001c054:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c058:	01 d0                	add    eax,edx
c001c05a:	89 c2                	mov    edx,eax
c001c05c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c060:	01 d0                	add    eax,edx
c001c062:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001c065:	8d 76 00             	lea    esi,[esi+0x0]
c001c068:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001c06d:	e9 36 ff ff ff       	jmp    c001bfa8 <HalConsoleScroll(int, int)+0x28>
c001c072:	66 90                	xchg   ax,ax
c001c074:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c079:	e9 16 ff ff ff       	jmp    c001bf94 <HalConsoleScroll(int, int)+0x14>
c001c07e:	66 90                	xchg   ax,ax
c001c080:	90                   	nop
c001c081:	83 c4 10             	add    esp,0x10
c001c084:	c3                   	ret    
c001c085:	8d 76 00             	lea    esi,[esi+0x0]

c001c088 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001c088:	83 ec 14             	sub    esp,0x14
c001c08b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c08f:	88 04 24             	mov    BYTE PTR [esp],al
c001c092:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c095:	0f b6 c0             	movzx  eax,al
c001c098:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c09c:	89 d1                	mov    ecx,edx
c001c09e:	83 e1 0f             	and    ecx,0xf
c001c0a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c0a5:	c1 e2 04             	shl    edx,0x4
c001c0a8:	0f b6 d2             	movzx  edx,dl
c001c0ab:	09 ca                	or     edx,ecx
c001c0ad:	c1 e2 08             	shl    edx,0x8
c001c0b0:	09 d0                	or     eax,edx
c001c0b2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001c0b7:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001c0bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c0c3:	89 d0                	mov    eax,edx
c001c0c5:	c1 e0 02             	shl    eax,0x2
c001c0c8:	01 d0                	add    eax,edx
c001c0ca:	c1 e0 04             	shl    eax,0x4
c001c0cd:	89 c2                	mov    edx,eax
c001c0cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c0d3:	01 d0                	add    eax,edx
c001c0d5:	01 c0                	add    eax,eax
c001c0d7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001c0db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c0df:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001c0e4:	66 89 02             	mov    WORD PTR [edx],ax
c001c0e7:	90                   	nop
c001c0e8:	83 c4 14             	add    esp,0x14
c001c0eb:	c3                   	ret    

c001c0ec <HalConsoleCursorUpdate(int, int)>:
c001c0ec:	83 ec 20             	sub    esp,0x20
c001c0ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c0f3:	89 c2                	mov    edx,eax
c001c0f5:	c1 e2 02             	shl    edx,0x2
c001c0f8:	01 d0                	add    eax,edx
c001c0fa:	c1 e0 04             	shl    eax,0x4
c001c0fd:	89 c2                	mov    edx,eax
c001c0ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c103:	01 d0                	add    eax,edx
c001c105:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001c10a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001c111:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001c116:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c11a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c11e:	ee                   	out    dx,al
c001c11f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c124:	0f b6 c0             	movzx  eax,al
c001c127:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001c12e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c132:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001c136:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c13a:	ee                   	out    dx,al
c001c13b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001c142:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001c147:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001c14b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c14f:	ee                   	out    dx,al
c001c150:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001c155:	c1 e8 08             	shr    eax,0x8
c001c158:	0f b6 c0             	movzx  eax,al
c001c15b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001c162:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001c166:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001c16a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c16e:	ee                   	out    dx,al
c001c16f:	90                   	nop
c001c170:	83 c4 20             	add    esp,0x20
c001c173:	c3                   	ret    

c001c174 <FAT::getName()>:
c001c174:	b8 00 a6 02 c0       	mov    eax,0xc002a600
c001c179:	c3                   	ret    
c001c17a:	66 90                	xchg   ax,ax

c001c17c <FAT::tell(void*, unsigned long long*)>:
c001c17c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c181:	75 09                	jne    c001c18c <FAT::tell(void*, unsigned long long*)+0x10>
c001c183:	b8 04 00 00 00       	mov    eax,0x4
c001c188:	c3                   	ret    
c001c189:	8d 76 00             	lea    esi,[esi+0x0]
c001c18c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c191:	75 09                	jne    c001c19c <FAT::tell(void*, unsigned long long*)+0x20>
c001c193:	b8 04 00 00 00       	mov    eax,0x4
c001c198:	c3                   	ret    
c001c199:	8d 76 00             	lea    esi,[esi+0x0]
c001c19c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1a0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c1a3:	ba 00 00 00 00       	mov    edx,0x0
c001c1a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1ac:	89 01                	mov    DWORD PTR [ecx],eax
c001c1ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c1b1:	b8 00 00 00 00       	mov    eax,0x0
c001c1b6:	c3                   	ret    
c001c1b7:	90                   	nop

c001c1b8 <FAT::stat(void*, unsigned long long*)>:
c001c1b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c1bd:	75 09                	jne    c001c1c8 <FAT::stat(void*, unsigned long long*)+0x10>
c001c1bf:	b8 04 00 00 00       	mov    eax,0x4
c001c1c4:	c3                   	ret    
c001c1c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c1cd:	75 09                	jne    c001c1d8 <FAT::stat(void*, unsigned long long*)+0x20>
c001c1cf:	b8 04 00 00 00       	mov    eax,0x4
c001c1d4:	c3                   	ret    
c001c1d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c1df:	ba 00 00 00 00       	mov    edx,0x0
c001c1e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1e8:	89 01                	mov    DWORD PTR [ecx],eax
c001c1ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c1ed:	b8 00 00 00 00       	mov    eax,0x0
c001c1f2:	c3                   	ret    
c001c1f3:	90                   	nop

c001c1f4 <FAT::~FAT()>:
c001c1f4:	83 ec 0c             	sub    esp,0xc
c001c1f7:	ba 4c a6 02 c0       	mov    edx,0xc002a64c
c001c1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c200:	89 10                	mov    DWORD PTR [eax],edx
c001c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c206:	83 ec 0c             	sub    esp,0xc
c001c209:	50                   	push   eax
c001c20a:	e8 b5 c0 fe ff       	call   c00082c4 <Filesystem::~Filesystem()>
c001c20f:	83 c4 10             	add    esp,0x10
c001c212:	90                   	nop
c001c213:	83 c4 0c             	add    esp,0xc
c001c216:	c3                   	ret    
c001c217:	90                   	nop

c001c218 <FAT::~FAT()>:
c001c218:	83 ec 0c             	sub    esp,0xc
c001c21b:	83 ec 0c             	sub    esp,0xc
c001c21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c222:	e8 cd ff ff ff       	call   c001c1f4 <FAT::~FAT()>
c001c227:	83 c4 10             	add    esp,0x10
c001c22a:	83 ec 08             	sub    esp,0x8
c001c22d:	6a 08                	push   0x8
c001c22f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c233:	e8 1c 16 ff ff       	call   c000d854 <operator delete(void*, unsigned long)>
c001c238:	83 c4 10             	add    esp,0x10
c001c23b:	83 c4 0c             	add    esp,0xc
c001c23e:	c3                   	ret    
c001c23f:	90                   	nop

c001c240 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001c240:	83 ec 1c             	sub    esp,0x1c
c001c243:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001c24a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001c24f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c253:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001c25a:	83 f8 ff             	cmp    eax,0xffffffff
c001c25d:	75 35                	jne    c001c294 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001c25f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c263:	88 c2                	mov    dl,al
c001c265:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001c26a:	01 d0                	add    eax,edx
c001c26c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c270:	8b 15 80 54 03 c0    	mov    edx,DWORD PTR ds:0xc0035480
c001c276:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c27a:	89 14 85 a0 54 03 c0 	mov    DWORD PTR [eax*4-0x3ffcab60],edx
c001c281:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001c286:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c28a:	89 14 85 20 55 03 c0 	mov    DWORD PTR [eax*4-0x3ffcaae0],edx
c001c291:	eb 19                	jmp    c001c2ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001c293:	90                   	nop
c001c294:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001c298:	88 c2                	mov    dl,al
c001c29a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c29e:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001c2a5:	01 d0                	add    eax,edx
c001c2a7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001c2ab:	90                   	nop
c001c2ac:	83 ec 04             	sub    esp,0x4
c001c2af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c2b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c2b7:	8d 44 24 15          	lea    eax,[esp+0x15]
c001c2bb:	50                   	push   eax
c001c2bc:	e8 f7 8e fe ff       	call   c00051b8 <f_getlabel>
c001c2c1:	83 c4 10             	add    esp,0x10
c001c2c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c2cd:	75 09                	jne    c001c2d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001c2cf:	b8 00 00 00 00       	mov    eax,0x0
c001c2d4:	eb 0a                	jmp    c001c2e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001c2d6:	66 90                	xchg   ax,ax
c001c2d8:	b8 01 00 00 00       	mov    eax,0x1
c001c2dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c2e0:	83 c4 1c             	add    esp,0x1c
c001c2e3:	c3                   	ret    

c001c2e4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001c2e4:	57                   	push   edi
c001c2e5:	83 ec 58             	sub    esp,0x58
c001c2e8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001c2f0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c2f4:	b8 00 00 00 00       	mov    eax,0x0
c001c2f9:	b9 0f 00 00 00       	mov    ecx,0xf
c001c2fe:	fc                   	cld    
c001c2ff:	89 d7                	mov    edi,edx
c001c301:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c303:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c307:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001c30e:	83 f8 ff             	cmp    eax,0xffffffff
c001c311:	75 35                	jne    c001c348 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001c313:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c317:	88 c2                	mov    dl,al
c001c319:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001c31e:	01 d0                	add    eax,edx
c001c320:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c324:	8b 15 80 54 03 c0    	mov    edx,DWORD PTR ds:0xc0035480
c001c32a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c32e:	89 14 85 a0 54 03 c0 	mov    DWORD PTR [eax*4-0x3ffcab60],edx
c001c335:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001c33a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001c33e:	89 14 85 20 55 03 c0 	mov    DWORD PTR [eax*4-0x3ffcaae0],edx
c001c345:	eb 19                	jmp    c001c360 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001c347:	90                   	nop
c001c348:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c34c:	88 c2                	mov    dl,al
c001c34e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c352:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001c359:	01 d0                	add    eax,edx
c001c35b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c35f:	90                   	nop
c001c360:	83 ec 08             	sub    esp,0x8
c001c363:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001c367:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c36b:	50                   	push   eax
c001c36c:	e8 cf 44 fe ff       	call   c0000840 <strcat>
c001c371:	83 c4 10             	add    esp,0x10
c001c374:	83 ec 0c             	sub    esp,0xc
c001c377:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c37b:	50                   	push   eax
c001c37c:	e8 88 8f fe ff       	call   c0005309 <f_setlabel>
c001c381:	83 c4 10             	add    esp,0x10
c001c384:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c388:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001c38d:	75 09                	jne    c001c398 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001c38f:	b8 00 00 00 00       	mov    eax,0x0
c001c394:	eb 0a                	jmp    c001c3a0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001c396:	66 90                	xchg   ax,ax
c001c398:	b8 01 00 00 00       	mov    eax,0x1
c001c39d:	8d 76 00             	lea    esi,[esi+0x0]
c001c3a0:	83 c4 58             	add    esp,0x58
c001c3a3:	5f                   	pop    edi
c001c3a4:	c3                   	ret    
c001c3a5:	90                   	nop
c001c3a6:	66 90                	xchg   ax,ax

c001c3a8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001c3a8:	83 ec 2c             	sub    esp,0x2c
c001c3ab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c3b3:	83 ec 08             	sub    esp,0x8
c001c3b6:	68 24 a6 02 c0       	push   0xc002a624
c001c3bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c3bf:	e8 8c 43 fe ff       	call   c0000750 <strcmp>
c001c3c4:	83 c4 10             	add    esp,0x10
c001c3c7:	85 c0                	test   eax,eax
c001c3c9:	0f 94 c0             	sete   al
c001c3cc:	0f b6 c0             	movzx  eax,al
c001c3cf:	85 c0                	test   eax,eax
c001c3d1:	74 0d                	je     c001c3e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001c3d3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001c3db:	e9 c0 00 00 00       	jmp    c001c4a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c3e0:	83 ec 08             	sub    esp,0x8
c001c3e3:	68 16 a6 02 c0       	push   0xc002a616
c001c3e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c3ec:	e8 5f 43 fe ff       	call   c0000750 <strcmp>
c001c3f1:	83 c4 10             	add    esp,0x10
c001c3f4:	85 c0                	test   eax,eax
c001c3f6:	0f 94 c0             	sete   al
c001c3f9:	0f b6 c0             	movzx  eax,al
c001c3fc:	85 c0                	test   eax,eax
c001c3fe:	74 10                	je     c001c410 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001c400:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001c408:	e9 93 00 00 00       	jmp    c001c4a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c40d:	8d 76 00             	lea    esi,[esi+0x0]
c001c410:	83 ec 08             	sub    esp,0x8
c001c413:	68 1c a6 02 c0       	push   0xc002a61c
c001c418:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c41c:	e8 2f 43 fe ff       	call   c0000750 <strcmp>
c001c421:	83 c4 10             	add    esp,0x10
c001c424:	85 c0                	test   eax,eax
c001c426:	0f 94 c0             	sete   al
c001c429:	0f b6 c0             	movzx  eax,al
c001c42c:	85 c0                	test   eax,eax
c001c42e:	74 0c                	je     c001c43c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001c430:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001c438:	eb 66                	jmp    c001c4a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c43a:	66 90                	xchg   ax,ax
c001c43c:	83 ec 08             	sub    esp,0x8
c001c43f:	68 fc 75 02 c0       	push   0xc00275fc
c001c444:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c448:	e8 03 43 fe ff       	call   c0000750 <strcmp>
c001c44d:	83 c4 10             	add    esp,0x10
c001c450:	85 c0                	test   eax,eax
c001c452:	0f 94 c0             	sete   al
c001c455:	0f b6 c0             	movzx  eax,al
c001c458:	85 c0                	test   eax,eax
c001c45a:	74 0c                	je     c001c468 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001c45c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001c464:	eb 3a                	jmp    c001c4a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c466:	66 90                	xchg   ax,ax
c001c468:	83 ec 08             	sub    esp,0x8
c001c46b:	68 22 a6 02 c0       	push   0xc002a622
c001c470:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c474:	e8 d7 42 fe ff       	call   c0000750 <strcmp>
c001c479:	83 c4 10             	add    esp,0x10
c001c47c:	85 c0                	test   eax,eax
c001c47e:	0f 94 c0             	sete   al
c001c481:	0f b6 c0             	movzx  eax,al
c001c484:	85 c0                	test   eax,eax
c001c486:	74 0c                	je     c001c494 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001c488:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001c490:	eb 0e                	jmp    c001c4a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001c492:	66 90                	xchg   ax,ax
c001c494:	b8 08 00 00 00       	mov    eax,0x8
c001c499:	e9 ea 00 00 00       	jmp    c001c588 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c49e:	66 90                	xchg   ax,ax
c001c4a0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001c4a7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001c4ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c4b0:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001c4b7:	83 f8 ff             	cmp    eax,0xffffffff
c001c4ba:	75 34                	jne    c001c4f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001c4bc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001c4c0:	88 c2                	mov    dl,al
c001c4c2:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001c4c7:	01 d0                	add    eax,edx
c001c4c9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001c4cd:	8b 15 80 54 03 c0    	mov    edx,DWORD PTR ds:0xc0035480
c001c4d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c4d7:	89 14 85 a0 54 03 c0 	mov    DWORD PTR [eax*4-0x3ffcab60],edx
c001c4de:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001c4e3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c4e7:	89 14 85 20 55 03 c0 	mov    DWORD PTR [eax*4-0x3ffcaae0],edx
c001c4ee:	eb 18                	jmp    c001c508 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001c4f0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001c4f4:	88 c2                	mov    dl,al
c001c4f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c4fa:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001c501:	01 d0                	add    eax,edx
c001c503:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001c507:	90                   	nop
c001c508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c50c:	88 04 24             	mov    BYTE PTR [esp],al
c001c50f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c513:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c517:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c51f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001c524:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c52c:	83 ec 0c             	sub    esp,0xc
c001c52f:	68 00 20 00 00       	push   0x2000
c001c534:	e8 02 38 ff ff       	call   c000fd3b <malloc>
c001c539:	83 c4 10             	add    esp,0x10
c001c53c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c540:	68 00 20 00 00       	push   0x2000
c001c545:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c549:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c54d:	50                   	push   eax
c001c54e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001c552:	50                   	push   eax
c001c553:	e8 ae 90 fe ff       	call   c0005606 <f_mkfs>
c001c558:	83 c4 10             	add    esp,0x10
c001c55b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c55f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c564:	75 0a                	jne    c001c570 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001c566:	b8 00 00 00 00       	mov    eax,0x0
c001c56b:	eb 1b                	jmp    c001c588 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c56d:	8d 76 00             	lea    esi,[esi+0x0]
c001c570:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001c575:	75 09                	jne    c001c580 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001c577:	b8 09 00 00 00       	mov    eax,0x9
c001c57c:	eb 0a                	jmp    c001c588 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001c57e:	66 90                	xchg   ax,ax
c001c580:	b8 01 00 00 00       	mov    eax,0x1
c001c585:	8d 76 00             	lea    esi,[esi+0x0]
c001c588:	83 c4 2c             	add    esp,0x2c
c001c58b:	c3                   	ret    

c001c58c <FAT::tryMount(LogicalDisk*, int)>:
c001c58c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001c592:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001c597:	83 f8 14             	cmp    eax,0x14
c001c59a:	75 18                	jne    c001c5b4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001c59c:	83 ec 0c             	sub    esp,0xc
c001c59f:	68 28 a6 02 c0       	push   0xc002a628
c001c5a4:	e8 e7 3b ff ff       	call   c0010190 <KePanic(char const*)>
c001c5a9:	83 c4 10             	add    esp,0x10
c001c5ac:	b0 00                	mov    al,0x0
c001c5ae:	e9 ed 01 00 00       	jmp    c001c7a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c5b3:	90                   	nop
c001c5b4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001c5bb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c5c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c5c7:	3d 00 02 00 00       	cmp    eax,0x200
c001c5cc:	74 0a                	je     c001c5d8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001c5ce:	b0 00                	mov    al,0x0
c001c5d0:	e9 cb 01 00 00       	jmp    c001c7a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c5d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5d8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001c5e0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c5e7:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001c5ee:	83 f8 ff             	cmp    eax,0xffffffff
c001c5f1:	74 09                	je     c001c5fc <FAT::tryMount(LogicalDisk*, int)+0x70>
c001c5f3:	b0 01                	mov    al,0x1
c001c5f5:	e9 a6 01 00 00       	jmp    c001c7a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c5fa:	66 90                	xchg   ax,ax
c001c5fc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001c606:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001c60e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001c615:	88 c2                	mov    dl,al
c001c617:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001c61c:	01 d0                	add    eax,edx
c001c61e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001c625:	8b 15 80 54 03 c0    	mov    edx,DWORD PTR ds:0xc0035480
c001c62b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001c632:	89 14 85 a0 54 03 c0 	mov    DWORD PTR [eax*4-0x3ffcab60],edx
c001c639:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001c63e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001c645:	89 14 85 20 55 03 c0 	mov    DWORD PTR [eax*4-0x3ffcaae0],edx
c001c64c:	83 ec 0c             	sub    esp,0xc
c001c64f:	68 34 02 00 00       	push   0x234
c001c654:	e8 e2 36 ff ff       	call   c000fd3b <malloc>
c001c659:	83 c4 10             	add    esp,0x10
c001c65c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001c663:	83 ec 04             	sub    esp,0x4
c001c666:	6a 00                	push   0x0
c001c668:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c66f:	50                   	push   eax
c001c670:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c677:	e8 65 77 fe ff       	call   c0003de1 <f_mount>
c001c67c:	83 c4 10             	add    esp,0x10
c001c67f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c686:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001c68e:	74 1c                	je     c001c6ac <FAT::tryMount(LogicalDisk*, int)+0x120>
c001c690:	83 ec 0c             	sub    esp,0xc
c001c693:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c69a:	e8 bc 36 ff ff       	call   c000fd5b <rfree>
c001c69f:	83 c4 10             	add    esp,0x10
c001c6a2:	b0 00                	mov    al,0x0
c001c6a4:	e9 f7 00 00 00       	jmp    c001c7a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c6a9:	8d 76 00             	lea    esi,[esi+0x0]
c001c6ac:	83 ec 04             	sub    esp,0x4
c001c6af:	68 00 01 00 00       	push   0x100
c001c6b4:	6a 00                	push   0x0
c001c6b6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c6bd:	50                   	push   eax
c001c6be:	e8 2d 3e fe ff       	call   c00004f0 <memset>
c001c6c3:	83 c4 10             	add    esp,0x10
c001c6c6:	83 ec 08             	sub    esp,0x8
c001c6c9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c6d0:	50                   	push   eax
c001c6d1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c6d8:	50                   	push   eax
c001c6d9:	e8 62 41 fe ff       	call   c0000840 <strcat>
c001c6de:	83 c4 10             	add    esp,0x10
c001c6e1:	83 ec 08             	sub    esp,0x8
c001c6e4:	68 36 a6 02 c0       	push   0xc002a636
c001c6e9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c6f0:	50                   	push   eax
c001c6f1:	e8 4a 41 fe ff       	call   c0000840 <strcat>
c001c6f6:	83 c4 10             	add    esp,0x10
c001c6f9:	83 ec 04             	sub    esp,0x4
c001c6fc:	6a 01                	push   0x1
c001c6fe:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001c705:	50                   	push   eax
c001c706:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c70a:	50                   	push   eax
c001c70b:	e8 33 77 fe ff       	call   c0003e43 <f_open>
c001c710:	83 c4 10             	add    esp,0x10
c001c713:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c71a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001c721:	85 c0                	test   eax,eax
c001c723:	74 0b                	je     c001c730 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001c725:	78 31                	js     c001c758 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c727:	83 e8 04             	sub    eax,0x4
c001c72a:	83 f8 01             	cmp    eax,0x1
c001c72d:	77 29                	ja     c001c758 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c72f:	90                   	nop
c001c730:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001c738:	83 ec 0c             	sub    esp,0xc
c001c73b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c73f:	50                   	push   eax
c001c740:	e8 cd 7e fe ff       	call   c0004612 <f_close>
c001c745:	83 c4 10             	add    esp,0x10
c001c748:	90                   	nop
c001c749:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001c751:	85 c0                	test   eax,eax
c001c753:	74 43                	je     c001c798 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001c755:	eb 31                	jmp    c001c788 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001c757:	90                   	nop
c001c758:	83 ec 0c             	sub    esp,0xc
c001c75b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c762:	e8 f4 35 ff ff       	call   c000fd5b <rfree>
c001c767:	83 c4 10             	add    esp,0x10
c001c76a:	83 ec 04             	sub    esp,0x4
c001c76d:	6a 00                	push   0x0
c001c76f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c776:	50                   	push   eax
c001c777:	6a 00                	push   0x0
c001c779:	e8 63 76 fe ff       	call   c0003de1 <f_mount>
c001c77e:	83 c4 10             	add    esp,0x10
c001c781:	b0 00                	mov    al,0x0
c001c783:	eb 1b                	jmp    c001c7a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c785:	8d 76 00             	lea    esi,[esi+0x0]
c001c788:	a1 80 54 03 c0       	mov    eax,ds:0xc0035480
c001c78d:	83 c0 01             	add    eax,0x1
c001c790:	a3 80 54 03 c0       	mov    ds:0xc0035480,eax
c001c795:	8d 76 00             	lea    esi,[esi+0x0]
c001c798:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001c79f:	90                   	nop
c001c7a0:	81 c4 4c 03 00 00    	add    esp,0x34c
c001c7a6:	c3                   	ret    
c001c7a7:	90                   	nop

c001c7a8 <FAT::allocateSwapfile(char const*, int)>:
c001c7a8:	55                   	push   ebp
c001c7a9:	57                   	push   edi
c001c7aa:	56                   	push   esi
c001c7ab:	53                   	push   ebx
c001c7ac:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001c7b2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001c7bd:	83 ec 0c             	sub    esp,0xc
c001c7c0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001c7c7:	e8 6f 35 ff ff       	call   c000fd3b <malloc>
c001c7cc:	83 c4 10             	add    esp,0x10
c001c7cf:	89 c7                	mov    edi,eax
c001c7d1:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001c7d6:	83 ec 04             	sub    esp,0x4
c001c7d9:	50                   	push   eax
c001c7da:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001c7e1:	57                   	push   edi
c001c7e2:	e8 7b be fe ff       	call   c0008662 <File::File(char const*, Process*)>
c001c7e7:	83 c4 10             	add    esp,0x10
c001c7ea:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001c7f1:	83 ec 04             	sub    esp,0x4
c001c7f4:	8d 44 24 13          	lea    eax,[esp+0x13]
c001c7f8:	50                   	push   eax
c001c7f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c7fd:	50                   	push   eax
c001c7fe:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c805:	e8 78 c1 fe ff       	call   c0008982 <File::stat(unsigned long long*, bool*)>
c001c80a:	83 c4 10             	add    esp,0x10
c001c80d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c814:	c1 e0 14             	shl    eax,0x14
c001c817:	89 c7                	mov    edi,eax
c001c819:	89 c5                	mov    ebp,eax
c001c81b:	c1 fd 1f             	sar    ebp,0x1f
c001c81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c822:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c826:	89 f9                	mov    ecx,edi
c001c828:	31 c1                	xor    ecx,eax
c001c82a:	89 cb                	mov    ebx,ecx
c001c82c:	89 e9                	mov    ecx,ebp
c001c82e:	31 d1                	xor    ecx,edx
c001c830:	89 ce                	mov    esi,ecx
c001c832:	89 f0                	mov    eax,esi
c001c834:	09 d8                	or     eax,ebx
c001c836:	0f 84 9c 00 00 00    	je     c001c8d8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001c83c:	83 ec 0c             	sub    esp,0xc
c001c83f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c846:	e8 03 c0 fe ff       	call   c000884e <File::unlink()>
c001c84b:	83 c4 10             	add    esp,0x10
c001c84e:	83 ec 08             	sub    esp,0x8
c001c851:	6a 12                	push   0x12
c001c853:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c85a:	e8 21 be fe ff       	call   c0008680 <File::open(FileOpenMode)>
c001c85f:	83 c4 10             	add    esp,0x10
c001c862:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c869:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c86f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c876:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c87d:	c1 e0 14             	shl    eax,0x14
c001c880:	83 ec 04             	sub    esp,0x4
c001c883:	6a 01                	push   0x1
c001c885:	50                   	push   eax
c001c886:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001c88d:	e8 07 8c fe ff       	call   c0005499 <f_expand>
c001c892:	83 c4 10             	add    esp,0x10
c001c895:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c89c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c89e:	83 c0 10             	add    eax,0x10
c001c8a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8a3:	83 ec 0c             	sub    esp,0xc
c001c8a6:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c8aa:	52                   	push   edx
c001c8ab:	8d 54 24 30          	lea    edx,[esp+0x30]
c001c8af:	52                   	push   edx
c001c8b0:	6a 00                	push   0x0
c001c8b2:	68 00 04 00 00       	push   0x400
c001c8b7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c8be:	ff d0                	call   eax
c001c8c0:	83 c4 20             	add    esp,0x20
c001c8c3:	83 ec 0c             	sub    esp,0xc
c001c8c6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c8cd:	e8 0c be fe ff       	call   c00086de <File::close()>
c001c8d2:	83 c4 10             	add    esp,0x10
c001c8d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8d8:	83 ec 08             	sub    esp,0x8
c001c8db:	6a 01                	push   0x1
c001c8dd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c8e4:	e8 97 bd fe ff       	call   c0008680 <File::open(FileOpenMode)>
c001c8e9:	83 c4 10             	add    esp,0x10
c001c8ec:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c8f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8f5:	83 c0 0c             	add    eax,0xc
c001c8f8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8fa:	83 ec 0c             	sub    esp,0xc
c001c8fd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c901:	52                   	push   edx
c001c902:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001c906:	52                   	push   edx
c001c907:	6a 00                	push   0x0
c001c909:	6a 04                	push   0x4
c001c90b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c912:	ff d0                	call   eax
c001c914:	83 c4 20             	add    esp,0x20
c001c917:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c91e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c924:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c92b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001c932:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001c935:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001c93c:	83 ec 0c             	sub    esp,0xc
c001c93f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c946:	e8 93 bd fe ff       	call   c00086de <File::close()>
c001c94b:	83 c4 10             	add    esp,0x10
c001c94e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001c955:	ba 00 00 00 00       	mov    edx,0x0
c001c95a:	81 c4 3c 04 00 00    	add    esp,0x43c
c001c960:	5b                   	pop    ebx
c001c961:	5e                   	pop    esi
c001c962:	5f                   	pop    edi
c001c963:	5d                   	pop    ebp
c001c964:	c3                   	ret    
c001c965:	90                   	nop
c001c966:	66 90                	xchg   ax,ax

c001c968 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001c968:	57                   	push   edi
c001c969:	56                   	push   esi
c001c96a:	53                   	push   ebx
c001c96b:	81 ec 50 02 00 00    	sub    esp,0x250
c001c971:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001c979:	74 0d                	je     c001c988 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001c97b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001c983:	75 0f                	jne    c001c994 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c985:	8d 76 00             	lea    esi,[esi+0x0]
c001c988:	b8 04 00 00 00       	mov    eax,0x4
c001c98d:	e9 3a 01 00 00       	jmp    c001cacc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c992:	66 90                	xchg   ax,ax
c001c994:	83 ec 08             	sub    esp,0x8
c001c997:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c99e:	50                   	push   eax
c001c99f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c9a6:	e8 34 7f fe ff       	call   c00048df <f_readdir>
c001c9ab:	83 c4 10             	add    esp,0x10
c001c9ae:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c9b5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c9bc:	83 ec 0c             	sub    esp,0xc
c001c9bf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c9c6:	83 c0 16             	add    eax,0x16
c001c9c9:	50                   	push   eax
c001c9ca:	e8 a1 3b fe ff       	call   c0000570 <strlen>
c001c9cf:	83 c4 10             	add    esp,0x10
c001c9d2:	ba 00 00 00 00       	mov    edx,0x0
c001c9d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c9df:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c9e6:	0f b6 c0             	movzx  eax,al
c001c9e9:	83 e0 10             	and    eax,0x10
c001c9ec:	74 0a                	je     c001c9f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c9ee:	b8 02 00 00 00       	mov    eax,0x2
c001c9f3:	eb 0b                	jmp    c001ca00 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c9f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c9f8:	b8 01 00 00 00       	mov    eax,0x1
c001c9fd:	8d 76 00             	lea    esi,[esi+0x0]
c001ca00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca04:	83 ec 08             	sub    esp,0x8
c001ca07:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ca0e:	83 c0 16             	add    eax,0x16
c001ca11:	50                   	push   eax
c001ca12:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ca16:	83 c0 10             	add    eax,0x10
c001ca19:	50                   	push   eax
c001ca1a:	e8 21 3c fe ff       	call   c0000640 <strcpy>
c001ca1f:	83 c4 10             	add    esp,0x10
c001ca22:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ca29:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ca30:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ca34:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ca3b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ca42:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ca49:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ca50:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ca57:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ca5e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ca65:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ca6c:	89 c6                	mov    esi,eax
c001ca6e:	89 d7                	mov    edi,edx
c001ca70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ca72:	89 c8                	mov    eax,ecx
c001ca74:	89 fa                	mov    edx,edi
c001ca76:	89 f3                	mov    ebx,esi
c001ca78:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ca7f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ca86:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ca8d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ca94:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ca9a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001caa1:	0f be c0             	movsx  eax,al
c001caa4:	85 c0                	test   eax,eax
c001caa6:	75 08                	jne    c001cab0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001caa8:	b8 07 00 00 00       	mov    eax,0x7
c001caad:	eb 1d                	jmp    c001cacc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001caaf:	90                   	nop
c001cab0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001cab7:	85 c0                	test   eax,eax
c001cab9:	75 09                	jne    c001cac4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001cabb:	b8 00 00 00 00       	mov    eax,0x0
c001cac0:	eb 0a                	jmp    c001cacc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001cac2:	66 90                	xchg   ax,ax
c001cac4:	b8 01 00 00 00       	mov    eax,0x1
c001cac9:	8d 76 00             	lea    esi,[esi+0x0]
c001cacc:	81 c4 50 02 00 00    	add    esp,0x250
c001cad2:	5b                   	pop    ebx
c001cad3:	5e                   	pop    esi
c001cad4:	5f                   	pop    edi
c001cad5:	c3                   	ret    
c001cad6:	66 90                	xchg   ax,ax

c001cad8 <FAT::read(void*, unsigned long, void*, int*)>:
c001cad8:	83 ec 1c             	sub    esp,0x1c
c001cadb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001cae0:	74 0a                	je     c001caec <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001cae2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001cae7:	75 0b                	jne    c001caf4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001cae9:	8d 76 00             	lea    esi,[esi+0x0]
c001caec:	b8 04 00 00 00       	mov    eax,0x4
c001caf1:	eb 41                	jmp    c001cb34 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001caf3:	90                   	nop
c001caf4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001caf8:	50                   	push   eax
c001caf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cafd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cb01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cb05:	e8 fc 75 fe ff       	call   c0004106 <f_read>
c001cb0a:	83 c4 10             	add    esp,0x10
c001cb0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb15:	89 c2                	mov    edx,eax
c001cb17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb1b:	89 10                	mov    DWORD PTR [eax],edx
c001cb1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb21:	85 c0                	test   eax,eax
c001cb23:	75 07                	jne    c001cb2c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001cb25:	b8 00 00 00 00       	mov    eax,0x0
c001cb2a:	eb 08                	jmp    c001cb34 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001cb2c:	b8 01 00 00 00       	mov    eax,0x1
c001cb31:	8d 76 00             	lea    esi,[esi+0x0]
c001cb34:	83 c4 1c             	add    esp,0x1c
c001cb37:	c3                   	ret    

c001cb38 <FAT::write(void*, unsigned long, void*, int*)>:
c001cb38:	83 ec 1c             	sub    esp,0x1c
c001cb3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001cb40:	74 0a                	je     c001cb4c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001cb42:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001cb47:	75 0b                	jne    c001cb54 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001cb49:	8d 76 00             	lea    esi,[esi+0x0]
c001cb4c:	b8 04 00 00 00       	mov    eax,0x4
c001cb51:	eb 41                	jmp    c001cb94 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001cb53:	90                   	nop
c001cb54:	8d 44 24 08          	lea    eax,[esp+0x8]
c001cb58:	50                   	push   eax
c001cb59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cb61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cb65:	e8 9b 77 fe ff       	call   c0004305 <f_write>
c001cb6a:	83 c4 10             	add    esp,0x10
c001cb6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb75:	89 c2                	mov    edx,eax
c001cb77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb7b:	89 10                	mov    DWORD PTR [eax],edx
c001cb7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb81:	85 c0                	test   eax,eax
c001cb83:	75 07                	jne    c001cb8c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001cb85:	b8 00 00 00 00       	mov    eax,0x0
c001cb8a:	eb 08                	jmp    c001cb94 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001cb8c:	b8 01 00 00 00       	mov    eax,0x1
c001cb91:	8d 76 00             	lea    esi,[esi+0x0]
c001cb94:	83 c4 1c             	add    esp,0x1c
c001cb97:	c3                   	ret    

c001cb98 <FAT::close(void*)>:
c001cb98:	83 ec 1c             	sub    esp,0x1c
c001cb9b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001cba0:	75 0a                	jne    c001cbac <FAT::close(void*)+0x14>
c001cba2:	b8 04 00 00 00       	mov    eax,0x4
c001cba7:	eb 3f                	jmp    c001cbe8 <FAT::close(void*)+0x50>
c001cba9:	8d 76 00             	lea    esi,[esi+0x0]
c001cbac:	83 ec 0c             	sub    esp,0xc
c001cbaf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cbb3:	e8 5a 7a fe ff       	call   c0004612 <f_close>
c001cbb8:	83 c4 10             	add    esp,0x10
c001cbbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbbf:	83 ec 0c             	sub    esp,0xc
c001cbc2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cbc6:	e8 80 31 ff ff       	call   c000fd4b <free>
c001cbcb:	83 c4 10             	add    esp,0x10
c001cbce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbd2:	85 c0                	test   eax,eax
c001cbd4:	75 0a                	jne    c001cbe0 <FAT::close(void*)+0x48>
c001cbd6:	b8 00 00 00 00       	mov    eax,0x0
c001cbdb:	eb 0b                	jmp    c001cbe8 <FAT::close(void*)+0x50>
c001cbdd:	8d 76 00             	lea    esi,[esi+0x0]
c001cbe0:	b8 01 00 00 00       	mov    eax,0x1
c001cbe5:	8d 76 00             	lea    esi,[esi+0x0]
c001cbe8:	83 c4 1c             	add    esp,0x1c
c001cbeb:	c3                   	ret    

c001cbec <FAT::closeDir(void*)>:
c001cbec:	83 ec 1c             	sub    esp,0x1c
c001cbef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001cbf4:	75 0a                	jne    c001cc00 <FAT::closeDir(void*)+0x14>
c001cbf6:	b8 04 00 00 00       	mov    eax,0x4
c001cbfb:	eb 3f                	jmp    c001cc3c <FAT::closeDir(void*)+0x50>
c001cbfd:	8d 76 00             	lea    esi,[esi+0x0]
c001cc00:	83 ec 0c             	sub    esp,0xc
c001cc03:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cc07:	e8 b1 7c fe ff       	call   c00048bd <f_closedir>
c001cc0c:	83 c4 10             	add    esp,0x10
c001cc0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc13:	83 ec 0c             	sub    esp,0xc
c001cc16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cc1a:	e8 2c 31 ff ff       	call   c000fd4b <free>
c001cc1f:	83 c4 10             	add    esp,0x10
c001cc22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc26:	85 c0                	test   eax,eax
c001cc28:	75 0a                	jne    c001cc34 <FAT::closeDir(void*)+0x48>
c001cc2a:	b8 00 00 00 00       	mov    eax,0x0
c001cc2f:	eb 0b                	jmp    c001cc3c <FAT::closeDir(void*)+0x50>
c001cc31:	8d 76 00             	lea    esi,[esi+0x0]
c001cc34:	b8 01 00 00 00       	mov    eax,0x1
c001cc39:	8d 76 00             	lea    esi,[esi+0x0]
c001cc3c:	83 c4 1c             	add    esp,0x1c
c001cc3f:	c3                   	ret    

c001cc40 <FAT::truncate(void*, unsigned long long)>:
c001cc40:	83 ec 2c             	sub    esp,0x2c
c001cc43:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cc47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cc4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc53:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001cc58:	75 0a                	jne    c001cc64 <FAT::truncate(void*, unsigned long long)+0x24>
c001cc5a:	b8 04 00 00 00       	mov    eax,0x4
c001cc5f:	eb 47                	jmp    c001cca8 <FAT::truncate(void*, unsigned long long)+0x68>
c001cc61:	8d 76 00             	lea    esi,[esi+0x0]
c001cc64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc68:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001cc6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc6f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001cc77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc7b:	83 ec 08             	sub    esp,0x8
c001cc7e:	50                   	push   eax
c001cc7f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cc83:	e8 b9 79 fe ff       	call   c0004641 <f_lseek>
c001cc88:	83 c4 10             	add    esp,0x10
c001cc8b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc93:	85 c0                	test   eax,eax
c001cc95:	75 09                	jne    c001cca0 <FAT::truncate(void*, unsigned long long)+0x60>
c001cc97:	b8 00 00 00 00       	mov    eax,0x0
c001cc9c:	eb 0a                	jmp    c001cca8 <FAT::truncate(void*, unsigned long long)+0x68>
c001cc9e:	66 90                	xchg   ax,ax
c001cca0:	b8 01 00 00 00       	mov    eax,0x1
c001cca5:	8d 76 00             	lea    esi,[esi+0x0]
c001cca8:	83 c4 2c             	add    esp,0x2c
c001ccab:	c3                   	ret    

c001ccac <FAT::seek(void*, unsigned long long)>:
c001ccac:	83 ec 2c             	sub    esp,0x2c
c001ccaf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ccb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ccbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccbf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ccc4:	75 0a                	jne    c001ccd0 <FAT::seek(void*, unsigned long long)+0x24>
c001ccc6:	b8 04 00 00 00       	mov    eax,0x4
c001cccb:	eb 33                	jmp    c001cd00 <FAT::seek(void*, unsigned long long)+0x54>
c001cccd:	8d 76 00             	lea    esi,[esi+0x0]
c001ccd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ccd4:	83 ec 08             	sub    esp,0x8
c001ccd7:	50                   	push   eax
c001ccd8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ccdc:	e8 60 79 fe ff       	call   c0004641 <f_lseek>
c001cce1:	83 c4 10             	add    esp,0x10
c001cce4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cce8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ccec:	85 c0                	test   eax,eax
c001ccee:	75 08                	jne    c001ccf8 <FAT::seek(void*, unsigned long long)+0x4c>
c001ccf0:	b8 00 00 00 00       	mov    eax,0x0
c001ccf5:	eb 09                	jmp    c001cd00 <FAT::seek(void*, unsigned long long)+0x54>
c001ccf7:	90                   	nop
c001ccf8:	b8 01 00 00 00       	mov    eax,0x1
c001ccfd:	8d 76 00             	lea    esi,[esi+0x0]
c001cd00:	83 c4 2c             	add    esp,0x2c
c001cd03:	c3                   	ret    

c001cd04 <fatWrapperReadDisk>:
c001cd04:	53                   	push   ebx
c001cd05:	83 ec 18             	sub    esp,0x18
c001cd08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cd10:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cd15:	8b 0c 85 e0 2a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd520]
c001cd1c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd24:	ba 00 00 00 00       	mov    edx,0x0
c001cd29:	83 ec 0c             	sub    esp,0xc
c001cd2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cd30:	53                   	push   ebx
c001cd31:	52                   	push   edx
c001cd32:	50                   	push   eax
c001cd33:	51                   	push   ecx
c001cd34:	e8 11 e2 fe ff       	call   c000af4a <LogicalDisk::read(unsigned long long, int, void*)>
c001cd39:	83 c4 20             	add    esp,0x20
c001cd3c:	83 c4 18             	add    esp,0x18
c001cd3f:	5b                   	pop    ebx
c001cd40:	c3                   	ret    
c001cd41:	8d 76 00             	lea    esi,[esi+0x0]

c001cd44 <fatWrapperWriteDisk>:
c001cd44:	53                   	push   ebx
c001cd45:	83 ec 18             	sub    esp,0x18
c001cd48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd4c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cd50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cd55:	8b 0c 85 e0 2a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd520]
c001cd5c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd64:	ba 00 00 00 00       	mov    edx,0x0
c001cd69:	83 ec 0c             	sub    esp,0xc
c001cd6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cd70:	53                   	push   ebx
c001cd71:	52                   	push   edx
c001cd72:	50                   	push   eax
c001cd73:	51                   	push   ecx
c001cd74:	e8 3d e2 fe ff       	call   c000afb6 <LogicalDisk::write(unsigned long long, int, void*)>
c001cd79:	83 c4 20             	add    esp,0x20
c001cd7c:	83 c4 18             	add    esp,0x18
c001cd7f:	5b                   	pop    ebx
c001cd80:	c3                   	ret    
c001cd81:	8d 76 00             	lea    esi,[esi+0x0]

c001cd84 <fatWrapperIoctl>:
c001cd84:	53                   	push   ebx
c001cd85:	83 ec 28             	sub    esp,0x28
c001cd88:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cd90:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001cd94:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cd98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd9d:	83 f8 02             	cmp    eax,0x2
c001cda0:	75 32                	jne    c001cdd4 <fatWrapperIoctl+0x50>
c001cda2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cda6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cdaa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cdaf:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c001cdb6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001cdbc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cdc2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cdc6:	66 89 02             	mov    WORD PTR [edx],ax
c001cdc9:	b8 00 00 00 00       	mov    eax,0x0
c001cdce:	e9 c5 00 00 00       	jmp    c001ce98 <fatWrapperIoctl+0x114>
c001cdd3:	90                   	nop
c001cdd4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cdd9:	83 f8 01             	cmp    eax,0x1
c001cddc:	75 6a                	jne    c001ce48 <fatWrapperIoctl+0xc4>
c001cdde:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cde2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cde6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cdeb:	8b 04 85 e0 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd520]
c001cdf2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001cdf8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001cdfe:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001ce04:	89 c8                	mov    eax,ecx
c001ce06:	89 da                	mov    edx,ebx
c001ce08:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ce0c:	c1 e0 0a             	shl    eax,0xa
c001ce0f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001ce14:	8b 0c 8d e0 2a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcd520]
c001ce1b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001ce21:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001ce27:	89 cb                	mov    ebx,ecx
c001ce29:	c1 fb 1f             	sar    ebx,0x1f
c001ce2c:	53                   	push   ebx
c001ce2d:	51                   	push   ecx
c001ce2e:	52                   	push   edx
c001ce2f:	50                   	push   eax
c001ce30:	e8 5f 55 00 00       	call   c0022394 <__udivdi3>
c001ce35:	83 c4 10             	add    esp,0x10
c001ce38:	89 c2                	mov    edx,eax
c001ce3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce3e:	89 10                	mov    DWORD PTR [eax],edx
c001ce40:	b8 00 00 00 00       	mov    eax,0x0
c001ce45:	eb 51                	jmp    c001ce98 <fatWrapperIoctl+0x114>
c001ce47:	90                   	nop
c001ce48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce4d:	85 c0                	test   eax,eax
c001ce4f:	75 07                	jne    c001ce58 <fatWrapperIoctl+0xd4>
c001ce51:	b8 00 00 00 00       	mov    eax,0x0
c001ce56:	eb 40                	jmp    c001ce98 <fatWrapperIoctl+0x114>
c001ce58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce5d:	83 f8 03             	cmp    eax,0x3
c001ce60:	75 1a                	jne    c001ce7c <fatWrapperIoctl+0xf8>
c001ce62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ce66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce6e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ce74:	b8 00 00 00 00       	mov    eax,0x0
c001ce79:	eb 1d                	jmp    c001ce98 <fatWrapperIoctl+0x114>
c001ce7b:	90                   	nop
c001ce7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce81:	83 f8 04             	cmp    eax,0x4
c001ce84:	75 0a                	jne    c001ce90 <fatWrapperIoctl+0x10c>
c001ce86:	b8 00 00 00 00       	mov    eax,0x0
c001ce8b:	eb 0b                	jmp    c001ce98 <fatWrapperIoctl+0x114>
c001ce8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ce90:	b8 04 00 00 00       	mov    eax,0x4
c001ce95:	8d 76 00             	lea    esi,[esi+0x0]
c001ce98:	83 c4 28             	add    esp,0x28
c001ce9b:	5b                   	pop    ebx
c001ce9c:	c3                   	ret    
c001ce9d:	90                   	nop
c001ce9e:	66 90                	xchg   ax,ax

c001cea0 <FAT::FAT()>:
c001cea0:	83 ec 1c             	sub    esp,0x1c
c001cea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cea7:	83 ec 0c             	sub    esp,0xc
c001ceaa:	50                   	push   eax
c001ceab:	e8 f0 b3 fe ff       	call   c00082a0 <Filesystem::Filesystem()>
c001ceb0:	83 c4 10             	add    esp,0x10
c001ceb3:	ba 4c a6 02 c0       	mov    edx,0xc002a64c
c001ceb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cebc:	89 10                	mov    DWORD PTR [eax],edx
c001cebe:	c7 05 80 54 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035480,0x0
c001cec8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ced0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001ced5:	7f 19                	jg     c001cef0 <FAT::FAT()+0x50>
c001ced7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cedb:	c7 04 85 a0 54 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcab60],0xffffffff
c001cee6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ceeb:	eb e3                	jmp    c001ced0 <FAT::FAT()+0x30>
c001ceed:	8d 76 00             	lea    esi,[esi+0x0]
c001cef0:	90                   	nop
c001cef1:	83 c4 1c             	add    esp,0x1c
c001cef4:	c3                   	ret    
c001cef5:	90                   	nop
c001cef6:	66 90                	xchg   ax,ax

c001cef8 <FAT::fixFilepath(char*)>:
c001cef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cefc:	8a 00                	mov    al,BYTE PTR [eax]
c001cefe:	0f be c0             	movsx  eax,al
c001cf01:	83 f8 40             	cmp    eax,0x40
c001cf04:	7e 2e                	jle    c001cf34 <FAT::fixFilepath(char*)+0x3c>
c001cf06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf0a:	8a 00                	mov    al,BYTE PTR [eax]
c001cf0c:	83 e8 41             	sub    eax,0x41
c001cf0f:	88 c2                	mov    dl,al
c001cf11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf15:	88 10                	mov    BYTE PTR [eax],dl
c001cf17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf1b:	8a 00                	mov    al,BYTE PTR [eax]
c001cf1d:	0f be c0             	movsx  eax,al
c001cf20:	8b 04 85 a0 54 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcab60]
c001cf27:	83 c0 30             	add    eax,0x30
c001cf2a:	88 c2                	mov    dl,al
c001cf2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf30:	88 10                	mov    BYTE PTR [eax],dl
c001cf32:	66 90                	xchg   ax,ax
c001cf34:	90                   	nop
c001cf35:	c3                   	ret    
c001cf36:	66 90                	xchg   ax,ax

c001cf38 <FAT::open(char const*, void**, FileOpenMode)>:
c001cf38:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cf3e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cf46:	74 0c                	je     c001cf54 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001cf48:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001cf50:	75 0e                	jne    c001cf60 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001cf52:	66 90                	xchg   ax,ax
c001cf54:	b8 04 00 00 00       	mov    eax,0x4
c001cf59:	e9 46 01 00 00       	jmp    c001d0a4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001cf5e:	66 90                	xchg   ax,ax
c001cf60:	83 ec 08             	sub    esp,0x8
c001cf63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cf6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cf6e:	50                   	push   eax
c001cf6f:	e8 cc 36 fe ff       	call   c0000640 <strcpy>
c001cf74:	83 c4 10             	add    esp,0x10
c001cf77:	83 ec 08             	sub    esp,0x8
c001cf7a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cf7e:	50                   	push   eax
c001cf7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cf86:	e8 6d ff ff ff       	call   c001cef8 <FAT::fixFilepath(char*)>
c001cf8b:	83 c4 10             	add    esp,0x10
c001cf8e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001cf96:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cf9d:	83 e0 01             	and    eax,0x1
c001cfa0:	74 12                	je     c001cfb4 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001cfa2:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cfa9:	83 c8 01             	or     eax,0x1
c001cfac:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cfb3:	90                   	nop
c001cfb4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cfbb:	83 e0 04             	and    eax,0x4
c001cfbe:	74 24                	je     c001cfe4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001cfc0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cfc7:	83 c8 30             	or     eax,0x30
c001cfca:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cfd1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cfd8:	83 c8 02             	or     eax,0x2
c001cfdb:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001cfe2:	66 90                	xchg   ax,ax
c001cfe4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001cfeb:	83 e0 02             	and    eax,0x2
c001cfee:	74 14                	je     c001d004 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001cff0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001cff7:	83 c8 02             	or     eax,0x2
c001cffa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001d001:	8d 76 00             	lea    esi,[esi+0x0]
c001d004:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001d00b:	83 e0 08             	and    eax,0x8
c001d00e:	74 14                	je     c001d024 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001d010:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001d017:	83 c8 04             	or     eax,0x4
c001d01a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001d021:	8d 76 00             	lea    esi,[esi+0x0]
c001d024:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001d02b:	83 e0 10             	and    eax,0x10
c001d02e:	74 14                	je     c001d044 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001d030:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001d037:	83 c8 08             	or     eax,0x8
c001d03a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001d041:	8d 76 00             	lea    esi,[esi+0x0]
c001d044:	83 ec 0c             	sub    esp,0xc
c001d047:	68 28 02 00 00       	push   0x228
c001d04c:	e8 ea 2c ff ff       	call   c000fd3b <malloc>
c001d051:	83 c4 10             	add    esp,0x10
c001d054:	89 c2                	mov    edx,eax
c001d056:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001d05d:	89 10                	mov    DWORD PTR [eax],edx
c001d05f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001d067:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001d06e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d070:	83 ec 04             	sub    esp,0x4
c001d073:	52                   	push   edx
c001d074:	8d 54 24 10          	lea    edx,[esp+0x10]
c001d078:	52                   	push   edx
c001d079:	50                   	push   eax
c001d07a:	e8 c4 6d fe ff       	call   c0003e43 <f_open>
c001d07f:	83 c4 10             	add    esp,0x10
c001d082:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001d089:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001d091:	74 09                	je     c001d09c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001d093:	b8 01 00 00 00       	mov    eax,0x1
c001d098:	eb 0a                	jmp    c001d0a4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001d09a:	66 90                	xchg   ax,ax
c001d09c:	b8 00 00 00 00       	mov    eax,0x0
c001d0a1:	8d 76 00             	lea    esi,[esi+0x0]
c001d0a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d0aa:	c3                   	ret    
c001d0ab:	90                   	nop

c001d0ac <FAT::openDir(char const*, void**)>:
c001d0ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d0b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001d0ba:	74 0c                	je     c001d0c8 <FAT::openDir(char const*, void**)+0x1c>
c001d0bc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001d0c4:	75 0e                	jne    c001d0d4 <FAT::openDir(char const*, void**)+0x28>
c001d0c6:	66 90                	xchg   ax,ax
c001d0c8:	b8 04 00 00 00       	mov    eax,0x4
c001d0cd:	e9 82 00 00 00       	jmp    c001d154 <FAT::openDir(char const*, void**)+0xa8>
c001d0d2:	66 90                	xchg   ax,ax
c001d0d4:	83 ec 08             	sub    esp,0x8
c001d0d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d0de:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d0e2:	50                   	push   eax
c001d0e3:	e8 58 35 fe ff       	call   c0000640 <strcpy>
c001d0e8:	83 c4 10             	add    esp,0x10
c001d0eb:	83 ec 08             	sub    esp,0x8
c001d0ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d0f2:	50                   	push   eax
c001d0f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d0fa:	e8 f9 fd ff ff       	call   c001cef8 <FAT::fixFilepath(char*)>
c001d0ff:	83 c4 10             	add    esp,0x10
c001d102:	83 ec 0c             	sub    esp,0xc
c001d105:	6a 30                	push   0x30
c001d107:	e8 2f 2c ff ff       	call   c000fd3b <malloc>
c001d10c:	83 c4 10             	add    esp,0x10
c001d10f:	89 c2                	mov    edx,eax
c001d111:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001d118:	89 10                	mov    DWORD PTR [eax],edx
c001d11a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001d121:	8b 00                	mov    eax,DWORD PTR [eax]
c001d123:	83 ec 08             	sub    esp,0x8
c001d126:	8d 54 24 14          	lea    edx,[esp+0x14]
c001d12a:	52                   	push   edx
c001d12b:	50                   	push   eax
c001d12c:	e8 c1 76 fe ff       	call   c00047f2 <f_opendir>
c001d131:	83 c4 10             	add    esp,0x10
c001d134:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001d13b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001d143:	74 07                	je     c001d14c <FAT::openDir(char const*, void**)+0xa0>
c001d145:	b8 01 00 00 00       	mov    eax,0x1
c001d14a:	eb 08                	jmp    c001d154 <FAT::openDir(char const*, void**)+0xa8>
c001d14c:	b8 00 00 00 00       	mov    eax,0x0
c001d151:	8d 76 00             	lea    esi,[esi+0x0]
c001d154:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d15a:	c3                   	ret    
c001d15b:	90                   	nop

c001d15c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001d15c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001d162:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001d16a:	75 0c                	jne    c001d178 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001d16c:	b8 04 00 00 00       	mov    eax,0x4
c001d171:	e9 d6 00 00 00       	jmp    c001d24c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001d176:	66 90                	xchg   ax,ax
c001d178:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001d180:	75 0a                	jne    c001d18c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001d182:	b8 04 00 00 00       	mov    eax,0x4
c001d187:	e9 c0 00 00 00       	jmp    c001d24c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001d18c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001d194:	75 0a                	jne    c001d1a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001d196:	b8 04 00 00 00       	mov    eax,0x4
c001d19b:	e9 ac 00 00 00       	jmp    c001d24c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001d1a0:	83 ec 08             	sub    esp,0x8
c001d1a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d1aa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001d1b1:	50                   	push   eax
c001d1b2:	e8 89 34 fe ff       	call   c0000640 <strcpy>
c001d1b7:	83 c4 10             	add    esp,0x10
c001d1ba:	83 ec 08             	sub    esp,0x8
c001d1bd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001d1c4:	50                   	push   eax
c001d1c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d1cc:	e8 27 fd ff ff       	call   c001cef8 <FAT::fixFilepath(char*)>
c001d1d1:	83 c4 10             	add    esp,0x10
c001d1d4:	83 ec 08             	sub    esp,0x8
c001d1d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001d1db:	50                   	push   eax
c001d1dc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001d1e3:	50                   	push   eax
c001d1e4:	e8 88 77 fe ff       	call   c0004971 <f_stat>
c001d1e9:	83 c4 10             	add    esp,0x10
c001d1ec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001d1f3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001d1fa:	85 c0                	test   eax,eax
c001d1fc:	74 0a                	je     c001d208 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001d1fe:	83 f8 04             	cmp    eax,0x4
c001d201:	74 39                	je     c001d23c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d203:	eb 3f                	jmp    c001d244 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001d205:	8d 76 00             	lea    esi,[esi+0x0]
c001d208:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d20c:	0f b6 c0             	movzx  eax,al
c001d20f:	83 e0 10             	and    eax,0x10
c001d212:	0f 95 c2             	setne  dl
c001d215:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001d21c:	88 10                	mov    BYTE PTR [eax],dl
c001d21e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d222:	ba 00 00 00 00       	mov    edx,0x0
c001d227:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001d22e:	89 01                	mov    DWORD PTR [ecx],eax
c001d230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001d233:	b8 00 00 00 00       	mov    eax,0x0
c001d238:	eb 12                	jmp    c001d24c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001d23a:	66 90                	xchg   ax,ax
c001d23c:	b8 02 00 00 00       	mov    eax,0x2
c001d241:	eb 09                	jmp    c001d24c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001d243:	90                   	nop
c001d244:	b8 01 00 00 00       	mov    eax,0x1
c001d249:	8d 76 00             	lea    esi,[esi+0x0]
c001d24c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001d252:	c3                   	ret    
c001d253:	90                   	nop

c001d254 <FAT::unlink(char const*)>:
c001d254:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d25a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001d262:	75 08                	jne    c001d26c <FAT::unlink(char const*)+0x18>
c001d264:	b8 04 00 00 00       	mov    eax,0x4
c001d269:	eb 61                	jmp    c001d2cc <FAT::unlink(char const*)+0x78>
c001d26b:	90                   	nop
c001d26c:	83 ec 08             	sub    esp,0x8
c001d26f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d276:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d27a:	50                   	push   eax
c001d27b:	e8 c0 33 fe ff       	call   c0000640 <strcpy>
c001d280:	83 c4 10             	add    esp,0x10
c001d283:	83 ec 08             	sub    esp,0x8
c001d286:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d28a:	50                   	push   eax
c001d28b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d292:	e8 61 fc ff ff       	call   c001cef8 <FAT::fixFilepath(char*)>
c001d297:	83 c4 10             	add    esp,0x10
c001d29a:	83 ec 0c             	sub    esp,0xc
c001d29d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d2a1:	50                   	push   eax
c001d2a2:	e8 3c 79 fe ff       	call   c0004be3 <f_unlink>
c001d2a7:	83 c4 10             	add    esp,0x10
c001d2aa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001d2b1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001d2b8:	85 c0                	test   eax,eax
c001d2ba:	75 08                	jne    c001d2c4 <FAT::unlink(char const*)+0x70>
c001d2bc:	b8 00 00 00 00       	mov    eax,0x0
c001d2c1:	eb 09                	jmp    c001d2cc <FAT::unlink(char const*)+0x78>
c001d2c3:	90                   	nop
c001d2c4:	b8 01 00 00 00       	mov    eax,0x1
c001d2c9:	8d 76 00             	lea    esi,[esi+0x0]
c001d2cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d2d2:	c3                   	ret    
c001d2d3:	90                   	nop

c001d2d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001d2d4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d2da:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001d2e1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001d2e8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001d2ec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d2f0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001d2f8:	75 0a                	jne    c001d304 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001d2fa:	b8 04 00 00 00       	mov    eax,0x4
c001d2ff:	e9 7c 01 00 00       	jmp    c001d480 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001d304:	83 ec 08             	sub    esp,0x8
c001d307:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001d30e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001d312:	50                   	push   eax
c001d313:	e8 28 33 fe ff       	call   c0000640 <strcpy>
c001d318:	83 c4 10             	add    esp,0x10
c001d31b:	83 ec 08             	sub    esp,0x8
c001d31e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d322:	50                   	push   eax
c001d323:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001d32a:	e8 c9 fb ff ff       	call   c001cef8 <FAT::fixFilepath(char*)>
c001d32f:	83 c4 10             	add    esp,0x10
c001d332:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001d33a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001d342:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d347:	83 e0 01             	and    eax,0x1
c001d34a:	74 14                	je     c001d360 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001d34c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d353:	83 c8 01             	or     eax,0x1
c001d356:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d35d:	8d 76 00             	lea    esi,[esi+0x0]
c001d360:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d365:	83 e0 02             	and    eax,0x2
c001d368:	74 12                	je     c001d37c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001d36a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d371:	83 c8 20             	or     eax,0x20
c001d374:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d37b:	90                   	nop
c001d37c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d381:	83 e0 04             	and    eax,0x4
c001d384:	74 12                	je     c001d398 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001d386:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d38d:	83 c8 04             	or     eax,0x4
c001d390:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d397:	90                   	nop
c001d398:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d39d:	83 e0 08             	and    eax,0x8
c001d3a0:	74 12                	je     c001d3b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001d3a2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d3a9:	83 c8 02             	or     eax,0x2
c001d3ac:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001d3b3:	90                   	nop
c001d3b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d3b9:	83 e0 01             	and    eax,0x1
c001d3bc:	74 12                	je     c001d3d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001d3be:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d3c5:	83 c8 01             	or     eax,0x1
c001d3c8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d3cf:	90                   	nop
c001d3d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d3d5:	83 e0 02             	and    eax,0x2
c001d3d8:	74 12                	je     c001d3ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001d3da:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d3e1:	83 c8 20             	or     eax,0x20
c001d3e4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d3eb:	90                   	nop
c001d3ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d3f1:	83 e0 04             	and    eax,0x4
c001d3f4:	74 12                	je     c001d408 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001d3f6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d3fd:	83 c8 04             	or     eax,0x4
c001d400:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d407:	90                   	nop
c001d408:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d40d:	83 e0 08             	and    eax,0x8
c001d410:	74 12                	je     c001d424 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001d412:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001d419:	83 c8 02             	or     eax,0x2
c001d41c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d423:	90                   	nop
c001d424:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001d42b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001d432:	09 d0                	or     eax,edx
c001d434:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001d43b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001d443:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001d44b:	83 ec 04             	sub    esp,0x4
c001d44e:	52                   	push   edx
c001d44f:	50                   	push   eax
c001d450:	8d 44 24 24          	lea    eax,[esp+0x24]
c001d454:	50                   	push   eax
c001d455:	e8 fe 7b fe ff       	call   c0005058 <f_chmod>
c001d45a:	83 c4 10             	add    esp,0x10
c001d45d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001d464:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001d46b:	85 c0                	test   eax,eax
c001d46d:	75 09                	jne    c001d478 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001d46f:	b8 00 00 00 00       	mov    eax,0x0
c001d474:	eb 0a                	jmp    c001d480 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001d476:	66 90                	xchg   ax,ax
c001d478:	b8 01 00 00 00       	mov    eax,0x1
c001d47d:	8d 76 00             	lea    esi,[esi+0x0]
c001d480:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d486:	c3                   	ret    
c001d487:	90                   	nop

c001d488 <FAT::rename(char const*, char const*)>:
c001d488:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001d48e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001d496:	74 0c                	je     c001d4a4 <FAT::rename(char const*, char const*)+0x1c>
c001d498:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001d4a0:	75 0e                	jne    c001d4b0 <FAT::rename(char const*, char const*)+0x28>
c001d4a2:	66 90                	xchg   ax,ax
c001d4a4:	b8 04 00 00 00       	mov    eax,0x4
c001d4a9:	e9 9e 00 00 00       	jmp    c001d54c <FAT::rename(char const*, char const*)+0xc4>
c001d4ae:	66 90                	xchg   ax,ax
c001d4b0:	83 ec 08             	sub    esp,0x8
c001d4b3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001d4ba:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001d4c1:	50                   	push   eax
c001d4c2:	e8 79 31 fe ff       	call   c0000640 <strcpy>
c001d4c7:	83 c4 10             	add    esp,0x10
c001d4ca:	83 ec 08             	sub    esp,0x8
c001d4cd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001d4d4:	50                   	push   eax
c001d4d5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001d4dc:	e8 17 fa ff ff       	call   c001cef8 <FAT::fixFilepath(char*)>
c001d4e1:	83 c4 10             	add    esp,0x10
c001d4e4:	83 ec 08             	sub    esp,0x8
c001d4e7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001d4ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d4f2:	50                   	push   eax
c001d4f3:	e8 48 31 fe ff       	call   c0000640 <strcpy>
c001d4f8:	83 c4 10             	add    esp,0x10
c001d4fb:	83 ec 08             	sub    esp,0x8
c001d4fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d502:	50                   	push   eax
c001d503:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001d50a:	e8 e9 f9 ff ff       	call   c001cef8 <FAT::fixFilepath(char*)>
c001d50f:	83 c4 10             	add    esp,0x10
c001d512:	83 ec 08             	sub    esp,0x8
c001d515:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d519:	50                   	push   eax
c001d51a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001d521:	50                   	push   eax
c001d522:	e8 79 79 fe ff       	call   c0004ea0 <f_rename>
c001d527:	83 c4 10             	add    esp,0x10
c001d52a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001d531:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001d538:	85 c0                	test   eax,eax
c001d53a:	75 08                	jne    c001d544 <FAT::rename(char const*, char const*)+0xbc>
c001d53c:	b8 00 00 00 00       	mov    eax,0x0
c001d541:	eb 09                	jmp    c001d54c <FAT::rename(char const*, char const*)+0xc4>
c001d543:	90                   	nop
c001d544:	b8 01 00 00 00       	mov    eax,0x1
c001d549:	8d 76 00             	lea    esi,[esi+0x0]
c001d54c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d552:	c3                   	ret    
c001d553:	90                   	nop

c001d554 <FAT::mkdir(char const*)>:
c001d554:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d55a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001d562:	75 08                	jne    c001d56c <FAT::mkdir(char const*)+0x18>
c001d564:	b8 04 00 00 00       	mov    eax,0x4
c001d569:	eb 61                	jmp    c001d5cc <FAT::mkdir(char const*)+0x78>
c001d56b:	90                   	nop
c001d56c:	83 ec 08             	sub    esp,0x8
c001d56f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d576:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d57a:	50                   	push   eax
c001d57b:	e8 c0 30 fe ff       	call   c0000640 <strcpy>
c001d580:	83 c4 10             	add    esp,0x10
c001d583:	83 ec 08             	sub    esp,0x8
c001d586:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d58a:	50                   	push   eax
c001d58b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d592:	e8 61 f9 ff ff       	call   c001cef8 <FAT::fixFilepath(char*)>
c001d597:	83 c4 10             	add    esp,0x10
c001d59a:	83 ec 0c             	sub    esp,0xc
c001d59d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d5a1:	50                   	push   eax
c001d5a2:	e8 5e 77 fe ff       	call   c0004d05 <f_mkdir>
c001d5a7:	83 c4 10             	add    esp,0x10
c001d5aa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001d5b1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001d5b8:	85 c0                	test   eax,eax
c001d5ba:	75 08                	jne    c001d5c4 <FAT::mkdir(char const*)+0x70>
c001d5bc:	b8 00 00 00 00       	mov    eax,0x0
c001d5c1:	eb 09                	jmp    c001d5cc <FAT::mkdir(char const*)+0x78>
c001d5c3:	90                   	nop
c001d5c4:	b8 01 00 00 00       	mov    eax,0x1
c001d5c9:	8d 76 00             	lea    esi,[esi+0x0]
c001d5cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d5d2:	c3                   	ret    
c001d5d3:	90                   	nop

c001d5d4 <FAT::exists(char const*)>:
c001d5d4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001d5da:	83 ec 08             	sub    esp,0x8
c001d5dd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d5e4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d5e8:	50                   	push   eax
c001d5e9:	e8 52 30 fe ff       	call   c0000640 <strcpy>
c001d5ee:	83 c4 10             	add    esp,0x10
c001d5f1:	83 ec 08             	sub    esp,0x8
c001d5f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001d5f8:	50                   	push   eax
c001d5f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001d600:	e8 f3 f8 ff ff       	call   c001cef8 <FAT::fixFilepath(char*)>
c001d605:	83 c4 10             	add    esp,0x10
c001d608:	83 ec 08             	sub    esp,0x8
c001d60b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001d612:	50                   	push   eax
c001d613:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d617:	50                   	push   eax
c001d618:	e8 54 73 fe ff       	call   c0004971 <f_stat>
c001d61d:	83 c4 10             	add    esp,0x10
c001d620:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001d627:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001d62e:	85 c0                	test   eax,eax
c001d630:	75 06                	jne    c001d638 <FAT::exists(char const*)+0x64>
c001d632:	b0 01                	mov    al,0x1
c001d634:	eb 06                	jmp    c001d63c <FAT::exists(char const*)+0x68>
c001d636:	66 90                	xchg   ax,ax
c001d638:	b0 00                	mov    al,0x0
c001d63a:	66 90                	xchg   ax,ax
c001d63c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001d642:	c3                   	ret    
c001d643:	90                   	nop

c001d644 <isoReadDiscSectorHelper>:
c001d644:	83 ec 2c             	sub    esp,0x2c
c001d647:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d64b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d64f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d654:	83 e8 41             	sub    eax,0x41
c001d657:	8b 0c 85 e0 2a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd520]
c001d65e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d662:	ba 00 00 00 00       	mov    edx,0x0
c001d667:	83 ec 0c             	sub    esp,0xc
c001d66a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d66e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d672:	52                   	push   edx
c001d673:	50                   	push   eax
c001d674:	51                   	push   ecx
c001d675:	e8 d0 d8 fe ff       	call   c000af4a <LogicalDisk::read(unsigned long long, int, void*)>
c001d67a:	83 c4 20             	add    esp,0x20
c001d67d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d681:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001d686:	74 0c                	je     c001d694 <isoReadDiscSectorHelper+0x50>
c001d688:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d68c:	c1 e0 0b             	shl    eax,0xb
c001d68f:	eb 0b                	jmp    c001d69c <isoReadDiscSectorHelper+0x58>
c001d691:	8d 76 00             	lea    esi,[esi+0x0]
c001d694:	b8 00 00 00 00       	mov    eax,0x0
c001d699:	8d 76 00             	lea    esi,[esi+0x0]
c001d69c:	83 c4 2c             	add    esp,0x2c
c001d69f:	c3                   	ret    

c001d6a0 <iso_kprintf>:
c001d6a0:	83 ec 0c             	sub    esp,0xc
c001d6a3:	83 ec 08             	sub    esp,0x8
c001d6a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6aa:	68 10 a3 02 c0       	push   0xc002a310
c001d6af:	e8 c8 98 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d6b4:	83 c4 10             	add    esp,0x10
c001d6b7:	90                   	nop
c001d6b8:	83 c4 0c             	add    esp,0xc
c001d6bb:	c3                   	ret    

c001d6bc <iso_kprintfd>:
c001d6bc:	83 ec 0c             	sub    esp,0xc
c001d6bf:	83 ec 08             	sub    esp,0x8
c001d6c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6c6:	68 ce 98 02 c0       	push   0xc00298ce
c001d6cb:	e8 ac 98 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d6d0:	83 c4 10             	add    esp,0x10
c001d6d3:	90                   	nop
c001d6d4:	83 c4 0c             	add    esp,0xc
c001d6d7:	c3                   	ret    

c001d6d8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001d6d8:	b8 08 00 00 00       	mov    eax,0x8
c001d6dd:	c3                   	ret    

c001d6de <ISO9660::truncate(void*, unsigned long long)>:
c001d6de:	b8 01 00 00 00       	mov    eax,0x1
c001d6e3:	c3                   	ret    

c001d6e4 <ISO9660::getName()>:
c001d6e4:	b8 b0 a6 02 c0       	mov    eax,0xc002a6b0
c001d6e9:	c3                   	ret    

c001d6ea <ISO9660::closeDir(void*)>:
c001d6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6ee:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6f0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001d6f3:	90                   	nop

c001d6f4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001d6f4:	b8 01 00 00 00       	mov    eax,0x1
c001d6f9:	c3                   	ret    

c001d6fa <ISO9660::unlink(char const*)>:
c001d6fa:	b8 01 00 00 00       	mov    eax,0x1
c001d6ff:	c3                   	ret    

c001d700 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001d700:	b8 03 00 00 00       	mov    eax,0x3
c001d705:	c3                   	ret    

c001d706 <ISO9660::rename(char const*, char const*)>:
c001d706:	b8 01 00 00 00       	mov    eax,0x1
c001d70b:	c3                   	ret    

c001d70c <ISO9660::mkdir(char const*)>:
c001d70c:	b8 01 00 00 00       	mov    eax,0x1
c001d711:	c3                   	ret    

c001d712 <ISO9660::~ISO9660()>:
c001d712:	83 ec 0c             	sub    esp,0xc
c001d715:	ba f0 a7 02 c0       	mov    edx,0xc002a7f0
c001d71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d71e:	89 10                	mov    DWORD PTR [eax],edx
c001d720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d724:	83 ec 0c             	sub    esp,0xc
c001d727:	50                   	push   eax
c001d728:	e8 97 ab fe ff       	call   c00082c4 <Filesystem::~Filesystem()>
c001d72d:	83 c4 10             	add    esp,0x10
c001d730:	90                   	nop
c001d731:	83 c4 0c             	add    esp,0xc
c001d734:	c3                   	ret    
c001d735:	90                   	nop

c001d736 <ISO9660::~ISO9660()>:
c001d736:	83 ec 0c             	sub    esp,0xc
c001d739:	83 ec 0c             	sub    esp,0xc
c001d73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d740:	e8 cd ff ff ff       	call   c001d712 <ISO9660::~ISO9660()>
c001d745:	83 c4 10             	add    esp,0x10
c001d748:	83 ec 08             	sub    esp,0x8
c001d74b:	6a 08                	push   0x8
c001d74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d751:	e8 fe 00 ff ff       	call   c000d854 <operator delete(void*, unsigned long)>
c001d756:	83 c4 10             	add    esp,0x10
c001d759:	83 c4 0c             	add    esp,0xc
c001d75c:	c3                   	ret    
c001d75d:	90                   	nop

c001d75e <ISO9660::exists(char const*)>:
c001d75e:	83 ec 18             	sub    esp,0x18
c001d761:	68 cb a6 02 c0       	push   0xc002a6cb
c001d766:	e8 25 2a ff ff       	call   c0010190 <KePanic(char const*)>
c001d76b:	31 c0                	xor    eax,eax
c001d76d:	83 c4 1c             	add    esp,0x1c
c001d770:	c3                   	ret    
c001d771:	90                   	nop

c001d772 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d772:	56                   	push   esi
c001d773:	53                   	push   ebx
c001d774:	53                   	push   ebx
c001d775:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d779:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d77d:	85 db                	test   ebx,ebx
c001d77f:	0f 84 ca 00 00 00    	je     c001d84f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d785:	85 f6                	test   esi,esi
c001d787:	0f 84 c2 00 00 00    	je     c001d84f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d78d:	b8 03 00 00 00       	mov    eax,0x3
c001d792:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001d797:	0f 85 b7 00 00 00    	jne    c001d854 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d79d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d79f:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001d7a6:	38 0d 80 55 03 c0    	cmp    BYTE PTR ds:0xc0035580,cl
c001d7ac:	74 1b                	je     c001d7c9 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001d7ae:	85 c0                	test   eax,eax
c001d7b0:	74 10                	je     c001d7c2 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001d7b2:	83 ec 0c             	sub    esp,0xc
c001d7b5:	68 e9 a6 02 c0       	push   0xc002a6e9
c001d7ba:	e8 d1 29 ff ff       	call   c0010190 <KePanic(char const*)>
c001d7bf:	83 c4 10             	add    esp,0x10
c001d7c2:	8a 03                	mov    al,BYTE PTR [ebx]
c001d7c4:	a2 80 55 03 c0       	mov    ds:0xc0035580,al
c001d7c9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d7cc:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001d7d3:	85 c0                	test   eax,eax
c001d7d5:	74 09                	je     c001d7e0 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001d7d7:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d7de:	74 48                	je     c001d828 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001d7e0:	83 ec 0c             	sub    esp,0xc
c001d7e3:	68 f9 a6 02 c0       	push   0xc002a6f9
c001d7e8:	e8 8f 97 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d7ed:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d7f0:	83 c4 10             	add    esp,0x10
c001d7f3:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001d7fa:	85 c0                	test   eax,eax
c001d7fc:	74 17                	je     c001d815 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001d7fe:	83 ec 0c             	sub    esp,0xc
c001d801:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d808:	68 19 a7 02 c0       	push   0xc002a719
c001d80d:	e8 6a 97 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d812:	83 c4 10             	add    esp,0x10
c001d815:	83 ec 0c             	sub    esp,0xc
c001d818:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001d81f:	50                   	push   eax
c001d820:	e8 09 94 fe ff       	call   c0006c2e <init_percd>
c001d825:	83 c4 10             	add    esp,0x10
c001d828:	83 c3 03             	add    ebx,0x3
c001d82b:	51                   	push   ecx
c001d82c:	51                   	push   ecx
c001d82d:	6a 00                	push   0x0
c001d82f:	53                   	push   ebx
c001d830:	e8 c0 8e fe ff       	call   c00066f5 <iso_open>
c001d835:	83 c4 10             	add    esp,0x10
c001d838:	89 c2                	mov    edx,eax
c001d83a:	b8 01 00 00 00       	mov    eax,0x1
c001d83f:	83 fa ff             	cmp    edx,0xffffffff
c001d842:	74 10                	je     c001d854 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d844:	83 c2 32             	add    edx,0x32
c001d847:	31 c0                	xor    eax,eax
c001d849:	01 d2                	add    edx,edx
c001d84b:	89 16                	mov    DWORD PTR [esi],edx
c001d84d:	eb 05                	jmp    c001d854 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d84f:	b8 04 00 00 00       	mov    eax,0x4
c001d854:	5a                   	pop    edx
c001d855:	5b                   	pop    ebx
c001d856:	5e                   	pop    esi
c001d857:	c3                   	ret    

c001d858 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001d858:	53                   	push   ebx
c001d859:	83 ec 08             	sub    esp,0x8
c001d85c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d860:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d864:	85 c0                	test   eax,eax
c001d866:	74 2d                	je     c001d895 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d868:	85 db                	test   ebx,ebx
c001d86a:	74 29                	je     c001d895 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d86c:	b9 02 00 00 00       	mov    ecx,0x2
c001d871:	52                   	push   edx
c001d872:	99                   	cdq    
c001d873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d877:	f7 f9                	idiv   ecx
c001d879:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d87d:	83 e8 32             	sub    eax,0x32
c001d880:	50                   	push   eax
c001d881:	e8 17 8f fe ff       	call   c000679d <iso_read>
c001d886:	83 c4 10             	add    esp,0x10
c001d889:	89 03                	mov    DWORD PTR [ebx],eax
c001d88b:	09 d0                	or     eax,edx
c001d88d:	0f 94 c0             	sete   al
c001d890:	0f b6 c0             	movzx  eax,al
c001d893:	eb 05                	jmp    c001d89a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001d895:	b8 04 00 00 00       	mov    eax,0x4
c001d89a:	83 c4 08             	add    esp,0x8
c001d89d:	5b                   	pop    ebx
c001d89e:	c3                   	ret    
c001d89f:	90                   	nop

c001d8a0 <ISO9660::seek(void*, unsigned long long)>:
c001d8a0:	57                   	push   edi
c001d8a1:	56                   	push   esi
c001d8a2:	b8 04 00 00 00       	mov    eax,0x4
c001d8a7:	51                   	push   ecx
c001d8a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d8ac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d8b0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d8b4:	85 d2                	test   edx,edx
c001d8b6:	74 26                	je     c001d8de <ISO9660::seek(void*, unsigned long long)+0x3e>
c001d8b8:	6a 00                	push   0x0
c001d8ba:	b9 02 00 00 00       	mov    ecx,0x2
c001d8bf:	57                   	push   edi
c001d8c0:	89 d0                	mov    eax,edx
c001d8c2:	56                   	push   esi
c001d8c3:	99                   	cdq    
c001d8c4:	f7 f9                	idiv   ecx
c001d8c6:	83 e8 32             	sub    eax,0x32
c001d8c9:	50                   	push   eax
c001d8ca:	e8 e4 8f fe ff       	call   c00068b3 <iso_seek>
c001d8cf:	83 c4 10             	add    esp,0x10
c001d8d2:	31 f0                	xor    eax,esi
c001d8d4:	31 fa                	xor    edx,edi
c001d8d6:	09 d0                	or     eax,edx
c001d8d8:	0f 95 c0             	setne  al
c001d8db:	0f b6 c0             	movzx  eax,al
c001d8de:	5a                   	pop    edx
c001d8df:	5e                   	pop    esi
c001d8e0:	5f                   	pop    edi
c001d8e1:	c3                   	ret    

c001d8e2 <ISO9660::tell(void*, unsigned long long*)>:
c001d8e2:	53                   	push   ebx
c001d8e3:	83 ec 08             	sub    esp,0x8
c001d8e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8ea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d8ee:	85 c0                	test   eax,eax
c001d8f0:	74 24                	je     c001d916 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d8f2:	85 db                	test   ebx,ebx
c001d8f4:	74 20                	je     c001d916 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d8f6:	83 ec 0c             	sub    esp,0xc
c001d8f9:	b9 02 00 00 00       	mov    ecx,0x2
c001d8fe:	99                   	cdq    
c001d8ff:	f7 f9                	idiv   ecx
c001d901:	83 e8 32             	sub    eax,0x32
c001d904:	50                   	push   eax
c001d905:	e8 2d 90 fe ff       	call   c0006937 <iso_tell>
c001d90a:	83 c4 10             	add    esp,0x10
c001d90d:	89 03                	mov    DWORD PTR [ebx],eax
c001d90f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001d912:	31 c0                	xor    eax,eax
c001d914:	eb 05                	jmp    c001d91b <ISO9660::tell(void*, unsigned long long*)+0x39>
c001d916:	b8 04 00 00 00       	mov    eax,0x4
c001d91b:	83 c4 08             	add    esp,0x8
c001d91e:	5b                   	pop    ebx
c001d91f:	c3                   	ret    

c001d920 <ISO9660::stat(void*, unsigned long long*)>:
c001d920:	53                   	push   ebx
c001d921:	83 ec 14             	sub    esp,0x14
c001d924:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d928:	68 3d a7 02 c0       	push   0xc002a73d
c001d92d:	e8 4a 96 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d932:	83 c4 10             	add    esp,0x10
c001d935:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d93a:	74 2c                	je     c001d968 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d93c:	85 db                	test   ebx,ebx
c001d93e:	74 28                	je     c001d968 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d940:	83 ec 0c             	sub    esp,0xc
c001d943:	b9 02 00 00 00       	mov    ecx,0x2
c001d948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d94c:	99                   	cdq    
c001d94d:	f7 f9                	idiv   ecx
c001d94f:	83 e8 32             	sub    eax,0x32
c001d952:	50                   	push   eax
c001d953:	e8 10 90 fe ff       	call   c0006968 <iso_total>
c001d958:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d95f:	89 03                	mov    DWORD PTR [ebx],eax
c001d961:	83 c4 10             	add    esp,0x10
c001d964:	31 c0                	xor    eax,eax
c001d966:	eb 05                	jmp    c001d96d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001d968:	b8 04 00 00 00       	mov    eax,0x4
c001d96d:	83 c4 08             	add    esp,0x8
c001d970:	5b                   	pop    ebx
c001d971:	c3                   	ret    

c001d972 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d972:	55                   	push   ebp
c001d973:	57                   	push   edi
c001d974:	56                   	push   esi
c001d975:	53                   	push   ebx
c001d976:	83 ec 18             	sub    esp,0x18
c001d979:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d97d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d981:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d985:	68 45 a7 02 c0       	push   0xc002a745
c001d98a:	e8 ed 95 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d98f:	83 c4 10             	add    esp,0x10
c001d992:	85 ff                	test   edi,edi
c001d994:	0f 94 c0             	sete   al
c001d997:	85 f6                	test   esi,esi
c001d999:	0f 94 c2             	sete   dl
c001d99c:	09 d0                	or     eax,edx
c001d99e:	a8 01                	test   al,0x1
c001d9a0:	0f 85 dd 00 00 00    	jne    c001da83 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d9a6:	85 db                	test   ebx,ebx
c001d9a8:	0f 84 d5 00 00 00    	je     c001da83 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d9ae:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d9b1:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d9b7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d9be:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001d9c5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d9c7:	38 0d 80 55 03 c0    	cmp    BYTE PTR ds:0xc0035580,cl
c001d9cd:	74 1b                	je     c001d9ea <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d9cf:	85 c0                	test   eax,eax
c001d9d1:	74 10                	je     c001d9e3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d9d3:	83 ec 0c             	sub    esp,0xc
c001d9d6:	68 e9 a6 02 c0       	push   0xc002a6e9
c001d9db:	e8 b0 27 ff ff       	call   c0010190 <KePanic(char const*)>
c001d9e0:	83 c4 10             	add    esp,0x10
c001d9e3:	8a 03                	mov    al,BYTE PTR [ebx]
c001d9e5:	a2 80 55 03 c0       	mov    ds:0xc0035580,al
c001d9ea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d9ed:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001d9f4:	85 c0                	test   eax,eax
c001d9f6:	74 09                	je     c001da01 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d9f8:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d9ff:	74 51                	je     c001da52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001da01:	83 ec 0c             	sub    esp,0xc
c001da04:	68 4d a7 02 c0       	push   0xc002a74d
c001da09:	e8 6e 95 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001da0e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001da11:	83 c4 10             	add    esp,0x10
c001da14:	83 3c 85 dc 29 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffcd624],0x0
c001da1c:	74 21                	je     c001da3f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001da1e:	83 ec 0c             	sub    esp,0xc
c001da21:	68 6d a7 02 c0       	push   0xc002a76d
c001da26:	e8 51 95 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001da2b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001da2e:	83 c4 10             	add    esp,0x10
c001da31:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001da38:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001da3f:	83 ec 0c             	sub    esp,0xc
c001da42:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001da49:	50                   	push   eax
c001da4a:	e8 df 91 fe ff       	call   c0006c2e <init_percd>
c001da4f:	83 c4 10             	add    esp,0x10
c001da52:	83 c3 03             	add    ebx,0x3
c001da55:	52                   	push   edx
c001da56:	52                   	push   edx
c001da57:	6a 00                	push   0x0
c001da59:	53                   	push   ebx
c001da5a:	e8 96 8c fe ff       	call   c00066f5 <iso_open>
c001da5f:	83 c4 10             	add    esp,0x10
c001da62:	89 c5                	mov    ebp,eax
c001da64:	83 f8 ff             	cmp    eax,0xffffffff
c001da67:	75 21                	jne    c001da8a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001da69:	50                   	push   eax
c001da6a:	50                   	push   eax
c001da6b:	6a 01                	push   0x1
c001da6d:	53                   	push   ebx
c001da6e:	e8 82 8c fe ff       	call   c00066f5 <iso_open>
c001da73:	83 c4 10             	add    esp,0x10
c001da76:	ba 02 00 00 00       	mov    edx,0x2
c001da7b:	40                   	inc    eax
c001da7c:	74 2b                	je     c001daa9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001da7e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001da81:	eb 24                	jmp    c001daa7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001da83:	ba 04 00 00 00       	mov    edx,0x4
c001da88:	eb 1f                	jmp    c001daa9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001da8a:	83 ec 0c             	sub    esp,0xc
c001da8d:	50                   	push   eax
c001da8e:	e8 d5 8e fe ff       	call   c0006968 <iso_total>
c001da93:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001da9a:	89 07                	mov    DWORD PTR [edi],eax
c001da9c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001da9f:	e8 db 8c fe ff       	call   c000677f <iso_close>
c001daa4:	83 c4 10             	add    esp,0x10
c001daa7:	31 d2                	xor    edx,edx
c001daa9:	83 c4 0c             	add    esp,0xc
c001daac:	89 d0                	mov    eax,edx
c001daae:	5b                   	pop    ebx
c001daaf:	5e                   	pop    esi
c001dab0:	5f                   	pop    edi
c001dab1:	5d                   	pop    ebp
c001dab2:	c3                   	ret    
c001dab3:	90                   	nop

c001dab4 <ISO9660::close(void*)>:
c001dab4:	83 ec 0c             	sub    esp,0xc
c001dab7:	b8 04 00 00 00       	mov    eax,0x4
c001dabc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dac0:	85 d2                	test   edx,edx
c001dac2:	74 1b                	je     c001dadf <ISO9660::close(void*)+0x2b>
c001dac4:	83 ec 0c             	sub    esp,0xc
c001dac7:	b9 02 00 00 00       	mov    ecx,0x2
c001dacc:	89 d0                	mov    eax,edx
c001dace:	99                   	cdq    
c001dacf:	f7 f9                	idiv   ecx
c001dad1:	83 e8 32             	sub    eax,0x32
c001dad4:	50                   	push   eax
c001dad5:	e8 a5 8c fe ff       	call   c000677f <iso_close>
c001dada:	83 c4 10             	add    esp,0x10
c001dadd:	31 c0                	xor    eax,eax
c001dadf:	83 c4 0c             	add    esp,0xc
c001dae2:	c3                   	ret    
c001dae3:	90                   	nop

c001dae4 <ISO9660::openDir(char const*, void**)>:
c001dae4:	56                   	push   esi
c001dae5:	53                   	push   ebx
c001dae6:	50                   	push   eax
c001dae7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001daeb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001daef:	85 db                	test   ebx,ebx
c001daf1:	0f 84 bd 00 00 00    	je     c001dbb4 <ISO9660::openDir(char const*, void**)+0xd0>
c001daf7:	85 f6                	test   esi,esi
c001daf9:	0f 84 b5 00 00 00    	je     c001dbb4 <ISO9660::openDir(char const*, void**)+0xd0>
c001daff:	8a 13                	mov    dl,BYTE PTR [ebx]
c001db01:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001db08:	38 15 80 55 03 c0    	cmp    BYTE PTR ds:0xc0035580,dl
c001db0e:	74 1b                	je     c001db2b <ISO9660::openDir(char const*, void**)+0x47>
c001db10:	85 c0                	test   eax,eax
c001db12:	74 10                	je     c001db24 <ISO9660::openDir(char const*, void**)+0x40>
c001db14:	83 ec 0c             	sub    esp,0xc
c001db17:	68 e9 a6 02 c0       	push   0xc002a6e9
c001db1c:	e8 6f 26 ff ff       	call   c0010190 <KePanic(char const*)>
c001db21:	83 c4 10             	add    esp,0x10
c001db24:	8a 03                	mov    al,BYTE PTR [ebx]
c001db26:	a2 80 55 03 c0       	mov    ds:0xc0035580,al
c001db2b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001db2e:	8b 04 85 dc 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd624]
c001db35:	85 c0                	test   eax,eax
c001db37:	74 10                	je     c001db49 <ISO9660::openDir(char const*, void**)+0x65>
c001db39:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001db40:	74 1a                	je     c001db5c <ISO9660::openDir(char const*, void**)+0x78>
c001db42:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001db49:	83 ec 0c             	sub    esp,0xc
c001db4c:	0f be 05 80 55 03 c0 	movsx  eax,BYTE PTR ds:0xc0035580
c001db53:	50                   	push   eax
c001db54:	e8 d5 90 fe ff       	call   c0006c2e <init_percd>
c001db59:	83 c4 10             	add    esp,0x10
c001db5c:	83 c3 03             	add    ebx,0x3
c001db5f:	50                   	push   eax
c001db60:	50                   	push   eax
c001db61:	6a 01                	push   0x1
c001db63:	53                   	push   ebx
c001db64:	e8 8c 8b fe ff       	call   c00066f5 <iso_open>
c001db69:	83 c4 10             	add    esp,0x10
c001db6c:	89 c3                	mov    ebx,eax
c001db6e:	83 f8 ff             	cmp    eax,0xffffffff
c001db71:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001db76:	75 1c                	jne    c001db94 <ISO9660::openDir(char const*, void**)+0xb0>
c001db78:	53                   	push   ebx
c001db79:	53                   	push   ebx
c001db7a:	68 91 a7 02 c0       	push   0xc002a791
c001db7f:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001db85:	e8 72 4f ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001db8a:	83 c4 10             	add    esp,0x10
c001db8d:	b8 01 00 00 00       	mov    eax,0x1
c001db92:	eb 25                	jmp    c001dbb9 <ISO9660::openDir(char const*, void**)+0xd5>
c001db94:	01 db                	add    ebx,ebx
c001db96:	51                   	push   ecx
c001db97:	83 c3 65             	add    ebx,0x65
c001db9a:	51                   	push   ecx
c001db9b:	68 a4 a7 02 c0       	push   0xc002a7a4
c001dba0:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001dba6:	e8 51 4f ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001dbab:	89 1e                	mov    DWORD PTR [esi],ebx
c001dbad:	83 c4 10             	add    esp,0x10
c001dbb0:	31 c0                	xor    eax,eax
c001dbb2:	eb 05                	jmp    c001dbb9 <ISO9660::openDir(char const*, void**)+0xd5>
c001dbb4:	b8 04 00 00 00       	mov    eax,0x4
c001dbb9:	5a                   	pop    edx
c001dbba:	5b                   	pop    ebx
c001dbbb:	5e                   	pop    esi
c001dbbc:	c3                   	ret    
c001dbbd:	90                   	nop

c001dbbe <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001dbbe:	55                   	push   ebp
c001dbbf:	57                   	push   edi
c001dbc0:	56                   	push   esi
c001dbc1:	53                   	push   ebx
c001dbc2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001dbc8:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001dbcf:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001dbd6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001dbde:	0f 84 e7 00 00 00    	je     c001dccb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001dbe4:	85 db                	test   ebx,ebx
c001dbe6:	0f 84 df 00 00 00    	je     c001dccb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001dbec:	83 ec 0c             	sub    esp,0xc
c001dbef:	68 b7 a7 02 c0       	push   0xc002a7b7
c001dbf4:	e8 83 93 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001dbf9:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001dc00:	b9 02 00 00 00       	mov    ecx,0x2
c001dc05:	99                   	cdq    
c001dc06:	f7 f9                	idiv   ecx
c001dc08:	83 e8 32             	sub    eax,0x32
c001dc0b:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc0e:	e8 a7 8d fe ff       	call   c00069ba <iso_readdir>
c001dc13:	83 c4 10             	add    esp,0x10
c001dc16:	89 c6                	mov    esi,eax
c001dc18:	85 c0                	test   eax,eax
c001dc1a:	75 37                	jne    c001dc53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001dc1c:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001dc21:	56                   	push   esi
c001dc22:	56                   	push   esi
c001dc23:	68 c2 a7 02 c0       	push   0xc002a7c2
c001dc28:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001dc2e:	e8 c9 4e ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001dc33:	83 c4 0c             	add    esp,0xc
c001dc36:	68 10 01 00 00       	push   0x110
c001dc3b:	6a 00                	push   0x0
c001dc3d:	57                   	push   edi
c001dc3e:	e8 ad 28 fe ff       	call   c00004f0 <memset>
c001dc43:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001dc49:	83 c4 10             	add    esp,0x10
c001dc4c:	b8 01 00 00 00       	mov    eax,0x1
c001dc51:	eb 7d                	jmp    c001dcd0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001dc53:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001dc59:	8d 68 08             	lea    ebp,[eax+0x8]
c001dc5c:	83 ec 0c             	sub    esp,0xc
c001dc5f:	55                   	push   ebp
c001dc60:	e8 0b 29 fe ff       	call   c0000570 <strlen>
c001dc65:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001dc6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dc71:	83 c4 10             	add    esp,0x10
c001dc74:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001dc78:	75 0a                	jne    c001dc84 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001dc7a:	b8 02 00 00 00       	mov    eax,0x2
c001dc7f:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001dc82:	74 05                	je     c001dc89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001dc84:	b8 01 00 00 00       	mov    eax,0x1
c001dc89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc8d:	50                   	push   eax
c001dc8e:	50                   	push   eax
c001dc8f:	55                   	push   ebp
c001dc90:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dc94:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001dc98:	50                   	push   eax
c001dc99:	e8 a2 29 fe ff       	call   c0000640 <strcpy>
c001dc9e:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001dca5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dca7:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001dcad:	5a                   	pop    edx
c001dcae:	a1 58 33 03 c0       	mov    eax,ds:0xc0033358
c001dcb3:	59                   	pop    ecx
c001dcb4:	68 d5 a7 02 c0       	push   0xc002a7d5
c001dcb9:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001dcbf:	e8 38 4e ff ff       	call   c0012afc <VgaText::puts(char const*)>
c001dcc4:	83 c4 10             	add    esp,0x10
c001dcc7:	31 c0                	xor    eax,eax
c001dcc9:	eb 05                	jmp    c001dcd0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001dccb:	b8 04 00 00 00       	mov    eax,0x4
c001dcd0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001dcd6:	5b                   	pop    ebx
c001dcd7:	5e                   	pop    esi
c001dcd8:	5f                   	pop    edi
c001dcd9:	5d                   	pop    ebp
c001dcda:	c3                   	ret    

c001dcdb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001dcdb:	57                   	push   edi
c001dcdc:	56                   	push   esi
c001dcdd:	53                   	push   ebx
c001dcde:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dce2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dce6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dcea:	39 35 84 55 03 c0    	cmp    DWORD PTR ds:0xc0035584,esi
c001dcf0:	0f be cb             	movsx  ecx,bl
c001dcf3:	75 0b                	jne    c001dd00 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001dcf5:	0f be 05 c4 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c9c4
c001dcfc:	39 c8                	cmp    eax,ecx
c001dcfe:	74 47                	je     c001dd47 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001dd00:	83 ec 0c             	sub    esp,0xc
c001dd03:	31 d2                	xor    edx,edx
c001dd05:	68 a0 55 03 c0       	push   0xc00355a0
c001dd0a:	6a 01                	push   0x1
c001dd0c:	52                   	push   edx
c001dd0d:	56                   	push   esi
c001dd0e:	ff 34 8d dc 29 03 c0 	push   DWORD PTR [ecx*4-0x3ffcd624]
c001dd15:	e8 30 d2 fe ff       	call   c000af4a <LogicalDisk::read(unsigned long long, int, void*)>
c001dd1a:	83 c4 20             	add    esp,0x20
c001dd1d:	85 c0                	test   eax,eax
c001dd1f:	75 0e                	jne    c001dd2f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001dd21:	89 35 84 55 03 c0    	mov    DWORD PTR ds:0xc0035584,esi
c001dd27:	88 1d c4 c9 02 c0    	mov    BYTE PTR ds:0xc002c9c4,bl
c001dd2d:	eb 18                	jmp    c001dd47 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001dd2f:	50                   	push   eax
c001dd30:	68 00 08 00 00       	push   0x800
c001dd35:	6a 00                	push   0x0
c001dd37:	57                   	push   edi
c001dd38:	e8 b3 27 fe ff       	call   c00004f0 <memset>
c001dd3d:	83 c4 10             	add    esp,0x10
c001dd40:	b8 01 00 00 00       	mov    eax,0x1
c001dd45:	eb 0e                	jmp    c001dd55 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001dd47:	be a0 55 03 c0       	mov    esi,0xc00355a0
c001dd4c:	b9 00 08 00 00       	mov    ecx,0x800
c001dd51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd53:	31 c0                	xor    eax,eax
c001dd55:	5b                   	pop    ebx
c001dd56:	5e                   	pop    esi
c001dd57:	5f                   	pop    edi
c001dd58:	c3                   	ret    
c001dd59:	90                   	nop

c001dd5a <ISO9660::tryMount(LogicalDisk*, int)>:
c001dd5a:	53                   	push   ebx
c001dd5b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001dd61:	c7 05 84 55 03 c0 ef be ad de 	mov    DWORD PTR ds:0xc0035584,0xdeadbeef
c001dd6b:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001dd72:	8d 58 41             	lea    ebx,[eax+0x41]
c001dd75:	0f be db             	movsx  ebx,bl
c001dd78:	53                   	push   ebx
c001dd79:	8d 44 24 08          	lea    eax,[esp+0x8]
c001dd7d:	50                   	push   eax
c001dd7e:	6a 10                	push   0x10
c001dd80:	e8 56 ff ff ff       	call   c001dcdb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001dd85:	83 c4 10             	add    esp,0x10
c001dd88:	31 d2                	xor    edx,edx
c001dd8a:	85 c0                	test   eax,eax
c001dd8c:	75 33                	jne    c001ddc1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001dd8e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001dd93:	75 2c                	jne    c001ddc1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001dd95:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001dd9a:	75 25                	jne    c001ddc1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001dd9c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001dda1:	75 1e                	jne    c001ddc1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001dda3:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001dda8:	75 17                	jne    c001ddc1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ddaa:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ddaf:	75 10                	jne    c001ddc1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ddb1:	83 ec 0c             	sub    esp,0xc
c001ddb4:	53                   	push   ebx
c001ddb5:	e8 74 8e fe ff       	call   c0006c2e <init_percd>
c001ddba:	83 c4 10             	add    esp,0x10
c001ddbd:	40                   	inc    eax
c001ddbe:	0f 95 c2             	setne  dl
c001ddc1:	88 d0                	mov    al,dl
c001ddc3:	81 c4 08 08 00 00    	add    esp,0x808
c001ddc9:	5b                   	pop    ebx
c001ddca:	c3                   	ret    
c001ddcb:	90                   	nop

c001ddcc <ISO9660::ISO9660()>:
c001ddcc:	83 ec 0c             	sub    esp,0xc
c001ddcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd3:	83 ec 0c             	sub    esp,0xc
c001ddd6:	50                   	push   eax
c001ddd7:	e8 c4 a4 fe ff       	call   c00082a0 <Filesystem::Filesystem()>
c001dddc:	83 c4 10             	add    esp,0x10
c001dddf:	ba f0 a7 02 c0       	mov    edx,0xc002a7f0
c001dde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dde8:	89 10                	mov    DWORD PTR [eax],edx
c001ddea:	e8 51 8f fe ff       	call   c0006d40 <fs_iso9660_init>
c001ddef:	90                   	nop
c001ddf0:	83 c4 0c             	add    esp,0xc
c001ddf3:	c3                   	ret    

c001ddf4 <SoundCard::beginPlayback()>:
c001ddf4:	c7 44 24 04 54 a8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a854
c001ddfc:	e9 8f 23 ff ff       	jmp    c0010190 <KePanic(char const*)>
c001de01:	90                   	nop

c001de02 <SoundCard::stopPlayback()>:
c001de02:	c7 44 24 04 54 a8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a854
c001de0a:	e9 81 23 ff ff       	jmp    c0010190 <KePanic(char const*)>
c001de0f:	90                   	nop

c001de10 <SoundCard::SoundCard(char const*)>:
c001de10:	83 ec 1c             	sub    esp,0x1c
c001de13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de17:	83 ec 08             	sub    esp,0x8
c001de1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de1e:	50                   	push   eax
c001de1f:	e8 6a c2 fe ff       	call   c000a08e <Device::Device(char const*)>
c001de24:	83 c4 10             	add    esp,0x10
c001de27:	ba a0 a8 02 c0       	mov    edx,0xc002a8a0
c001de2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de30:	89 10                	mov    DWORD PTR [eax],edx
c001de32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de36:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001de3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de41:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001de4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de4f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001de59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de5d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001de67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de6b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001de75:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001de7d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001de82:	7f 1a                	jg     c001de9e <SoundCard::SoundCard(char const*)+0x8e>
c001de84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001de8c:	83 c2 54             	add    edx,0x54
c001de8f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001de97:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001de9c:	eb df                	jmp    c001de7d <SoundCard::SoundCard(char const*)+0x6d>
c001de9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dea2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001dea9:	90                   	nop
c001deaa:	83 c4 1c             	add    esp,0x1c
c001dead:	c3                   	ret    

c001deae <SoundCard::~SoundCard()>:
c001deae:	83 ec 0c             	sub    esp,0xc
c001deb1:	ba a0 a8 02 c0       	mov    edx,0xc002a8a0
c001deb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deba:	89 10                	mov    DWORD PTR [eax],edx
c001debc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec0:	83 ec 0c             	sub    esp,0xc
c001dec3:	50                   	push   eax
c001dec4:	e8 65 bf fe ff       	call   c0009e2e <Device::~Device()>
c001dec9:	83 c4 10             	add    esp,0x10
c001decc:	90                   	nop
c001decd:	83 c4 0c             	add    esp,0xc
c001ded0:	c3                   	ret    
c001ded1:	90                   	nop

c001ded2 <SoundCard::~SoundCard()>:
c001ded2:	83 ec 0c             	sub    esp,0xc
c001ded5:	83 ec 0c             	sub    esp,0xc
c001ded8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dedc:	e8 cd ff ff ff       	call   c001deae <SoundCard::~SoundCard()>
c001dee1:	83 c4 10             	add    esp,0x10
c001dee4:	83 ec 08             	sub    esp,0x8
c001dee7:	68 e8 01 00 00       	push   0x1e8
c001deec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001def0:	e8 5f f9 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c001def5:	83 c4 10             	add    esp,0x10
c001def8:	83 c4 0c             	add    esp,0xc
c001defb:	c3                   	ret    

c001defc <SoundCard::configureRates(int, int, int)>:
c001defc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001df00:	31 c0                	xor    eax,eax
c001df02:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001df09:	75 20                	jne    c001df2b <SoundCard::configureRates(int, int, int)+0x2f>
c001df0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001df0f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001df15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df19:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001df1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df23:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001df29:	b0 01                	mov    al,0x1
c001df2b:	c3                   	ret    

c001df2c <SoundCard::getSamples16(int, short*)>:
c001df2c:	55                   	push   ebp
c001df2d:	57                   	push   edi
c001df2e:	31 ff                	xor    edi,edi
c001df30:	56                   	push   esi
c001df31:	53                   	push   ebx
c001df32:	31 db                	xor    ebx,ebx
c001df34:	83 ec 10             	sub    esp,0x10
c001df37:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001df3b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001df3f:	8d 04 36             	lea    eax,[esi+esi*1]
c001df42:	50                   	push   eax
c001df43:	6a 00                	push   0x0
c001df45:	55                   	push   ebp
c001df46:	e8 a5 25 fe ff       	call   c00004f0 <memset>
c001df4b:	83 c4 10             	add    esp,0x10
c001df4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df52:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001df59:	85 c0                	test   eax,eax
c001df5b:	74 1b                	je     c001df78 <SoundCard::getSamples16(int, short*)+0x4c>
c001df5d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001df61:	75 15                	jne    c001df78 <SoundCard::getSamples16(int, short*)+0x4c>
c001df63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001df67:	55                   	push   ebp
c001df68:	56                   	push   esi
c001df69:	50                   	push   eax
c001df6a:	e8 8d 03 00 00       	call   c001e2fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001df6f:	83 c4 10             	add    esp,0x10
c001df72:	39 c7                	cmp    edi,eax
c001df74:	7d 02                	jge    c001df78 <SoundCard::getSamples16(int, short*)+0x4c>
c001df76:	89 c7                	mov    edi,eax
c001df78:	43                   	inc    ebx
c001df79:	83 fb 20             	cmp    ebx,0x20
c001df7c:	75 d0                	jne    c001df4e <SoundCard::getSamples16(int, short*)+0x22>
c001df7e:	83 c4 0c             	add    esp,0xc
c001df81:	89 f8                	mov    eax,edi
c001df83:	5b                   	pop    ebx
c001df84:	5e                   	pop    esi
c001df85:	5f                   	pop    edi
c001df86:	5d                   	pop    ebp
c001df87:	c3                   	ret    

c001df88 <SoundCard::getSamples32(int, int*)>:
c001df88:	55                   	push   ebp
c001df89:	57                   	push   edi
c001df8a:	31 ff                	xor    edi,edi
c001df8c:	56                   	push   esi
c001df8d:	31 f6                	xor    esi,esi
c001df8f:	53                   	push   ebx
c001df90:	83 ec 10             	sub    esp,0x10
c001df93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df97:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001df9b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001df9f:	c1 e0 02             	shl    eax,0x2
c001dfa2:	50                   	push   eax
c001dfa3:	6a 00                	push   0x0
c001dfa5:	55                   	push   ebp
c001dfa6:	e8 45 25 fe ff       	call   c00004f0 <memset>
c001dfab:	83 c4 10             	add    esp,0x10
c001dfae:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001dfb5:	85 c0                	test   eax,eax
c001dfb7:	74 1b                	je     c001dfd4 <SoundCard::getSamples32(int, int*)+0x4c>
c001dfb9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001dfbd:	75 15                	jne    c001dfd4 <SoundCard::getSamples32(int, int*)+0x4c>
c001dfbf:	53                   	push   ebx
c001dfc0:	55                   	push   ebp
c001dfc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfc5:	50                   	push   eax
c001dfc6:	e8 fd 03 00 00       	call   c001e3c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001dfcb:	83 c4 10             	add    esp,0x10
c001dfce:	39 c6                	cmp    esi,eax
c001dfd0:	7d 02                	jge    c001dfd4 <SoundCard::getSamples32(int, int*)+0x4c>
c001dfd2:	89 c6                	mov    esi,eax
c001dfd4:	47                   	inc    edi
c001dfd5:	83 ff 20             	cmp    edi,0x20
c001dfd8:	75 d4                	jne    c001dfae <SoundCard::getSamples32(int, int*)+0x26>
c001dfda:	85 f6                	test   esi,esi
c001dfdc:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001dfe3:	75 0f                	jne    c001dff4 <SoundCard::getSamples32(int, int*)+0x6c>
c001dfe5:	85 c0                	test   eax,eax
c001dfe7:	74 1b                	je     c001e004 <SoundCard::getSamples32(int, int*)+0x7c>
c001dfe9:	83 ec 0c             	sub    esp,0xc
c001dfec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dfee:	53                   	push   ebx
c001dfef:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001dff2:	eb 0d                	jmp    c001e001 <SoundCard::getSamples32(int, int*)+0x79>
c001dff4:	85 c0                	test   eax,eax
c001dff6:	75 0c                	jne    c001e004 <SoundCard::getSamples32(int, int*)+0x7c>
c001dff8:	83 ec 0c             	sub    esp,0xc
c001dffb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dffd:	53                   	push   ebx
c001dffe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001e001:	83 c4 10             	add    esp,0x10
c001e004:	83 c4 0c             	add    esp,0xc
c001e007:	89 f0                	mov    eax,esi
c001e009:	5b                   	pop    ebx
c001e00a:	5e                   	pop    esi
c001e00b:	5f                   	pop    edi
c001e00c:	5d                   	pop    ebp
c001e00d:	c3                   	ret    

c001e00e <SoundCard::addChannel(SoundPort*)>:
c001e00e:	83 ec 0c             	sub    esp,0xc
c001e011:	31 c0                	xor    eax,eax
c001e013:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e017:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001e01f:	74 1b                	je     c001e03c <SoundCard::addChannel(SoundPort*)+0x2e>
c001e021:	40                   	inc    eax
c001e022:	83 f8 20             	cmp    eax,0x20
c001e025:	75 f0                	jne    c001e017 <SoundCard::addChannel(SoundPort*)+0x9>
c001e027:	83 ec 0c             	sub    esp,0xc
c001e02a:	68 79 a8 02 c0       	push   0xc002a879
c001e02f:	e8 5c 21 ff ff       	call   c0010190 <KePanic(char const*)>
c001e034:	83 c4 10             	add    esp,0x10
c001e037:	83 c8 ff             	or     eax,0xffffffff
c001e03a:	eb 0b                	jmp    c001e047 <SoundCard::addChannel(SoundPort*)+0x39>
c001e03c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e040:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001e047:	83 c4 0c             	add    esp,0xc
c001e04a:	c3                   	ret    
c001e04b:	90                   	nop

c001e04c <SoundCard::removeChannel(int)>:
c001e04c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e054:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001e05f:	c3                   	ret    

c001e060 <SoundPort::SoundPort(int, int, int, int)>:
c001e060:	83 ec 0c             	sub    esp,0xc
c001e063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e067:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e072:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001e076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e07a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e07e:	89 10                	mov    DWORD PTR [eax],edx
c001e080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e084:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e088:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e08f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e093:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e096:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001e09b:	75 13                	jne    c001e0b0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001e09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0a3:	05 a0 0f 00 00       	add    eax,0xfa0
c001e0a8:	01 c0                	add    eax,eax
c001e0aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e0ae:	66 90                	xchg   ax,ax
c001e0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e0b8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001e0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0bf:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001e0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e0cd:	c1 e0 02             	shl    eax,0x2
c001e0d0:	83 ec 0c             	sub    esp,0xc
c001e0d3:	50                   	push   eax
c001e0d4:	e8 62 1c ff ff       	call   c000fd3b <malloc>
c001e0d9:	83 c4 10             	add    esp,0x10
c001e0dc:	89 c2                	mov    edx,eax
c001e0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0e2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e0e5:	90                   	nop
c001e0e6:	83 c4 0c             	add    esp,0xc
c001e0e9:	c3                   	ret    
c001e0ea:	66 90                	xchg   ax,ax

c001e0ec <SoundPort::~SoundPort()>:
c001e0ec:	83 ec 0c             	sub    esp,0xc
c001e0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e0f6:	85 c0                	test   eax,eax
c001e0f8:	74 1e                	je     c001e118 <SoundPort::~SoundPort()+0x2c>
c001e0fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0fe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e101:	83 ec 0c             	sub    esp,0xc
c001e104:	50                   	push   eax
c001e105:	e8 41 1c ff ff       	call   c000fd4b <free>
c001e10a:	83 c4 10             	add    esp,0x10
c001e10d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e111:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e118:	90                   	nop
c001e119:	83 c4 0c             	add    esp,0xc
c001e11c:	c3                   	ret    
c001e11d:	90                   	nop
c001e11e:	66 90                	xchg   ax,ax

c001e120 <SoundPort::unpause()>:
c001e120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e124:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001e128:	c3                   	ret    
c001e129:	90                   	nop
c001e12a:	66 90                	xchg   ax,ax

c001e12c <SoundPort::pause()>:
c001e12c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e130:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001e134:	c3                   	ret    
c001e135:	90                   	nop
c001e136:	66 90                	xchg   ax,ax

c001e138 <SoundPort::getBufferUsed()>:
c001e138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e13c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001e13f:	c3                   	ret    

c001e140 <SoundPort::getBufferSize()>:
c001e140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e144:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e147:	c3                   	ret    

c001e148 <SoundPort::buffer8(signed char*, int)>:
c001e148:	55                   	push   ebp
c001e149:	57                   	push   edi
c001e14a:	56                   	push   esi
c001e14b:	53                   	push   ebx
c001e14c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e150:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001e154:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001e157:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001e15a:	74 70                	je     c001e1cc <SoundPort::buffer8(signed char*, int)+0x84>
c001e15c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e160:	85 c9                	test   ecx,ecx
c001e162:	7e 68                	jle    c001e1cc <SoundPort::buffer8(signed char*, int)+0x84>
c001e164:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001e168:	8d 48 01             	lea    ecx,[eax+0x1]
c001e16b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001e16e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001e171:	89 f1                	mov    ecx,esi
c001e173:	c1 e1 18             	shl    ecx,0x18
c001e176:	29 f1                	sub    ecx,esi
c001e178:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001e17b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e17e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e181:	74 51                	je     c001e1d4 <SoundPort::buffer8(signed char*, int)+0x8c>
c001e183:	31 ff                	xor    edi,edi
c001e185:	eb 25                	jmp    c001e1ac <SoundPort::buffer8(signed char*, int)+0x64>
c001e187:	90                   	nop
c001e188:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001e18d:	8d 59 01             	lea    ebx,[ecx+0x1]
c001e190:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001e193:	89 f3                	mov    ebx,esi
c001e195:	c1 e3 18             	shl    ebx,0x18
c001e198:	29 f3                	sub    ebx,esi
c001e19a:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001e19d:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001e1a0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e1a3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e1a6:	74 1c                	je     c001e1c4 <SoundPort::buffer8(signed char*, int)+0x7c>
c001e1a8:	89 c7                	mov    edi,eax
c001e1aa:	66 90                	xchg   ax,ax
c001e1ac:	8d 47 01             	lea    eax,[edi+0x1]
c001e1af:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001e1b3:	75 d3                	jne    c001e188 <SoundPort::buffer8(signed char*, int)+0x40>
c001e1b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e1b9:	8d 76 00             	lea    esi,[esi+0x0]
c001e1bc:	5b                   	pop    ebx
c001e1bd:	5e                   	pop    esi
c001e1be:	5f                   	pop    edi
c001e1bf:	5d                   	pop    ebp
c001e1c0:	c3                   	ret    
c001e1c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e1c4:	5b                   	pop    ebx
c001e1c5:	8d 47 02             	lea    eax,[edi+0x2]
c001e1c8:	5e                   	pop    esi
c001e1c9:	5f                   	pop    edi
c001e1ca:	5d                   	pop    ebp
c001e1cb:	c3                   	ret    
c001e1cc:	5b                   	pop    ebx
c001e1cd:	31 c0                	xor    eax,eax
c001e1cf:	5e                   	pop    esi
c001e1d0:	5f                   	pop    edi
c001e1d1:	5d                   	pop    ebp
c001e1d2:	c3                   	ret    
c001e1d3:	90                   	nop
c001e1d4:	b8 01 00 00 00       	mov    eax,0x1
c001e1d9:	eb e1                	jmp    c001e1bc <SoundPort::buffer8(signed char*, int)+0x74>
c001e1db:	90                   	nop

c001e1dc <SoundPort::buffer16(short*, int)>:
c001e1dc:	55                   	push   ebp
c001e1dd:	57                   	push   edi
c001e1de:	56                   	push   esi
c001e1df:	53                   	push   ebx
c001e1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1e4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001e1e8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001e1eb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001e1ee:	74 70                	je     c001e260 <SoundPort::buffer16(short*, int)+0x84>
c001e1f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e1f4:	85 c9                	test   ecx,ecx
c001e1f6:	7e 68                	jle    c001e260 <SoundPort::buffer16(short*, int)+0x84>
c001e1f8:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001e1fc:	8d 48 01             	lea    ecx,[eax+0x1]
c001e1ff:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001e202:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001e205:	89 f1                	mov    ecx,esi
c001e207:	c1 e1 10             	shl    ecx,0x10
c001e20a:	29 f1                	sub    ecx,esi
c001e20c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001e20f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e212:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e215:	74 51                	je     c001e268 <SoundPort::buffer16(short*, int)+0x8c>
c001e217:	31 ff                	xor    edi,edi
c001e219:	eb 25                	jmp    c001e240 <SoundPort::buffer16(short*, int)+0x64>
c001e21b:	90                   	nop
c001e21c:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001e221:	8d 59 01             	lea    ebx,[ecx+0x1]
c001e224:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001e227:	89 f3                	mov    ebx,esi
c001e229:	c1 e3 10             	shl    ebx,0x10
c001e22c:	29 f3                	sub    ebx,esi
c001e22e:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001e231:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001e234:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e237:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e23a:	74 1c                	je     c001e258 <SoundPort::buffer16(short*, int)+0x7c>
c001e23c:	89 c7                	mov    edi,eax
c001e23e:	66 90                	xchg   ax,ax
c001e240:	8d 47 01             	lea    eax,[edi+0x1]
c001e243:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001e247:	75 d3                	jne    c001e21c <SoundPort::buffer16(short*, int)+0x40>
c001e249:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e24d:	8d 76 00             	lea    esi,[esi+0x0]
c001e250:	5b                   	pop    ebx
c001e251:	5e                   	pop    esi
c001e252:	5f                   	pop    edi
c001e253:	5d                   	pop    ebp
c001e254:	c3                   	ret    
c001e255:	8d 76 00             	lea    esi,[esi+0x0]
c001e258:	5b                   	pop    ebx
c001e259:	8d 47 02             	lea    eax,[edi+0x2]
c001e25c:	5e                   	pop    esi
c001e25d:	5f                   	pop    edi
c001e25e:	5d                   	pop    ebp
c001e25f:	c3                   	ret    
c001e260:	5b                   	pop    ebx
c001e261:	31 c0                	xor    eax,eax
c001e263:	5e                   	pop    esi
c001e264:	5f                   	pop    edi
c001e265:	5d                   	pop    ebp
c001e266:	c3                   	ret    
c001e267:	90                   	nop
c001e268:	b8 01 00 00 00       	mov    eax,0x1
c001e26d:	eb e1                	jmp    c001e250 <SoundPort::buffer16(short*, int)+0x74>
c001e26f:	90                   	nop

c001e270 <SoundPort::buffer32(int*, int)>:
c001e270:	55                   	push   ebp
c001e271:	57                   	push   edi
c001e272:	56                   	push   esi
c001e273:	53                   	push   ebx
c001e274:	83 ec 04             	sub    esp,0x4
c001e277:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e27b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e27f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e282:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e286:	89 04 24             	mov    DWORD PTR [esp],eax
c001e289:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e28c:	74 5a                	je     c001e2e8 <SoundPort::buffer32(int*, int)+0x78>
c001e28e:	85 c0                	test   eax,eax
c001e290:	7e 56                	jle    c001e2e8 <SoundPort::buffer32(int*, int)+0x78>
c001e292:	8d 71 01             	lea    esi,[ecx+0x1]
c001e295:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001e298:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001e29b:	8b 37                	mov    esi,DWORD PTR [edi]
c001e29d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001e2a0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e2a3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e2a6:	74 4c                	je     c001e2f4 <SoundPort::buffer32(int*, int)+0x84>
c001e2a8:	31 f6                	xor    esi,esi
c001e2aa:	eb 1c                	jmp    c001e2c8 <SoundPort::buffer32(int*, int)+0x58>
c001e2ac:	8d 69 01             	lea    ebp,[ecx+0x1]
c001e2af:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001e2b2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001e2b5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001e2b8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001e2bc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001e2bf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001e2c2:	74 18                	je     c001e2dc <SoundPort::buffer32(int*, int)+0x6c>
c001e2c4:	89 de                	mov    esi,ebx
c001e2c6:	66 90                	xchg   ax,ax
c001e2c8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001e2cb:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001e2ce:	75 dc                	jne    c001e2ac <SoundPort::buffer32(int*, int)+0x3c>
c001e2d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e2d3:	90                   	nop
c001e2d4:	83 c4 04             	add    esp,0x4
c001e2d7:	5b                   	pop    ebx
c001e2d8:	5e                   	pop    esi
c001e2d9:	5f                   	pop    edi
c001e2da:	5d                   	pop    ebp
c001e2db:	c3                   	ret    
c001e2dc:	83 c4 04             	add    esp,0x4
c001e2df:	8d 46 02             	lea    eax,[esi+0x2]
c001e2e2:	5b                   	pop    ebx
c001e2e3:	5e                   	pop    esi
c001e2e4:	5f                   	pop    edi
c001e2e5:	5d                   	pop    ebp
c001e2e6:	c3                   	ret    
c001e2e7:	90                   	nop
c001e2e8:	83 c4 04             	add    esp,0x4
c001e2eb:	31 c0                	xor    eax,eax
c001e2ed:	5b                   	pop    ebx
c001e2ee:	5e                   	pop    esi
c001e2ef:	5f                   	pop    edi
c001e2f0:	5d                   	pop    ebp
c001e2f1:	c3                   	ret    
c001e2f2:	66 90                	xchg   ax,ax
c001e2f4:	b8 01 00 00 00       	mov    eax,0x1
c001e2f9:	eb d9                	jmp    c001e2d4 <SoundPort::buffer32(int*, int)+0x64>
c001e2fb:	90                   	nop

c001e2fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001e2fc:	57                   	push   edi
c001e2fd:	56                   	push   esi
c001e2fe:	53                   	push   ebx
c001e2ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e303:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001e307:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001e30d:	39 03                	cmp    DWORD PTR [ebx],eax
c001e30f:	74 13                	je     c001e324 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001e311:	83 ec 0c             	sub    esp,0xc
c001e314:	68 cc a8 02 c0       	push   0xc002a8cc
c001e319:	e8 72 1e ff ff       	call   c0010190 <KePanic(char const*)>
c001e31e:	83 c4 10             	add    esp,0x10
c001e321:	8d 76 00             	lea    esi,[esi+0x0]
c001e324:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001e32a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001e32d:	74 11                	je     c001e340 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001e32f:	83 ec 0c             	sub    esp,0xc
c001e332:	68 0b a9 02 c0       	push   0xc002a90b
c001e337:	e8 54 1e ff ff       	call   c0010190 <KePanic(char const*)>
c001e33c:	83 c4 10             	add    esp,0x10
c001e33f:	90                   	nop
c001e340:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001e346:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001e349:	74 11                	je     c001e35c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001e34b:	83 ec 0c             	sub    esp,0xc
c001e34e:	68 0b a9 02 c0       	push   0xc002a90b
c001e353:	e8 38 1e ff ff       	call   c0010190 <KePanic(char const*)>
c001e358:	83 c4 10             	add    esp,0x10
c001e35b:	90                   	nop
c001e35c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001e35f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001e363:	7e 07                	jle    c001e36c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001e365:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e369:	8d 76 00             	lea    esi,[esi+0x0]
c001e36c:	85 f6                	test   esi,esi
c001e36e:	7e 2c                	jle    c001e39c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001e370:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e374:	8d 3c 36             	lea    edi,[esi+esi*1]
c001e377:	31 c9                	xor    ecx,ecx
c001e379:	01 d7                	add    edi,edx
c001e37b:	90                   	nop
c001e37c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001e37f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001e382:	85 c0                	test   eax,eax
c001e384:	79 06                	jns    c001e38c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001e386:	05 ff 7f 00 00       	add    eax,0x7fff
c001e38b:	90                   	nop
c001e38c:	c1 f8 0f             	sar    eax,0xf
c001e38f:	83 c1 04             	add    ecx,0x4
c001e392:	66 01 02             	add    WORD PTR [edx],ax
c001e395:	83 c2 02             	add    edx,0x2
c001e398:	39 d7                	cmp    edi,edx
c001e39a:	75 e0                	jne    c001e37c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001e39c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001e39f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001e3a2:	83 ec 04             	sub    esp,0x4
c001e3a5:	29 f0                	sub    eax,esi
c001e3a7:	c1 e0 02             	shl    eax,0x2
c001e3aa:	50                   	push   eax
c001e3ab:	8d 04 b2             	lea    eax,[edx+esi*4]
c001e3ae:	50                   	push   eax
c001e3af:	52                   	push   edx
c001e3b0:	e8 1b 20 fe ff       	call   c00003d0 <memmove>
c001e3b5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001e3b8:	83 c4 10             	add    esp,0x10
c001e3bb:	29 f0                	sub    eax,esi
c001e3bd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001e3c0:	89 f0                	mov    eax,esi
c001e3c2:	5b                   	pop    ebx
c001e3c3:	5e                   	pop    esi
c001e3c4:	5f                   	pop    edi
c001e3c5:	c3                   	ret    
c001e3c6:	66 90                	xchg   ax,ax

c001e3c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001e3c8:	57                   	push   edi
c001e3c9:	56                   	push   esi
c001e3ca:	53                   	push   ebx
c001e3cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e3cf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e3d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e3d7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001e3dd:	39 06                	cmp    DWORD PTR [esi],eax
c001e3df:	74 13                	je     c001e3f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001e3e1:	83 ec 0c             	sub    esp,0xc
c001e3e4:	68 ec a8 02 c0       	push   0xc002a8ec
c001e3e9:	e8 a2 1d ff ff       	call   c0010190 <KePanic(char const*)>
c001e3ee:	83 c4 10             	add    esp,0x10
c001e3f1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3f4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001e3fa:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001e3fd:	74 11                	je     c001e410 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001e3ff:	83 ec 0c             	sub    esp,0xc
c001e402:	68 27 a9 02 c0       	push   0xc002a927
c001e407:	e8 84 1d ff ff       	call   c0010190 <KePanic(char const*)>
c001e40c:	83 c4 10             	add    esp,0x10
c001e40f:	90                   	nop
c001e410:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001e416:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001e419:	74 11                	je     c001e42c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001e41b:	83 ec 0c             	sub    esp,0xc
c001e41e:	68 27 a9 02 c0       	push   0xc002a927
c001e423:	e8 68 1d ff ff       	call   c0010190 <KePanic(char const*)>
c001e428:	83 c4 10             	add    esp,0x10
c001e42b:	90                   	nop
c001e42c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001e42f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001e433:	7e 07                	jle    c001e43c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001e435:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e439:	8d 76 00             	lea    esi,[esi+0x0]
c001e43c:	85 ff                	test   edi,edi
c001e43e:	7e 1c                	jle    c001e45c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001e440:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001e447:	31 c0                	xor    eax,eax
c001e449:	8d 76 00             	lea    esi,[esi+0x0]
c001e44c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001e44f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001e452:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001e455:	83 c0 04             	add    eax,0x4
c001e458:	39 c1                	cmp    ecx,eax
c001e45a:	75 f0                	jne    c001e44c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001e45c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001e45f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001e462:	83 ec 04             	sub    esp,0x4
c001e465:	29 f8                	sub    eax,edi
c001e467:	c1 e0 02             	shl    eax,0x2
c001e46a:	50                   	push   eax
c001e46b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001e46e:	50                   	push   eax
c001e46f:	52                   	push   edx
c001e470:	e8 5b 1f fe ff       	call   c00003d0 <memmove>
c001e475:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001e478:	83 c4 10             	add    esp,0x10
c001e47b:	29 f8                	sub    eax,edi
c001e47d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001e480:	89 f8                	mov    eax,edi
c001e482:	5b                   	pop    ebx
c001e483:	5e                   	pop    esi
c001e484:	5f                   	pop    edi
c001e485:	c3                   	ret    

c001e486 <PCI::open(int, int, void*)>:
c001e486:	83 ec 18             	sub    esp,0x18
c001e489:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e48d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e491:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e497:	8b 10                	mov    edx,DWORD PTR [eax]
c001e499:	50                   	push   eax
c001e49a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001e49d:	31 c0                	xor    eax,eax
c001e49f:	83 c4 1c             	add    esp,0x1c
c001e4a2:	c3                   	ret    
c001e4a3:	90                   	nop

c001e4a4 <PCI::close(int, int, void*)>:
c001e4a4:	31 c0                	xor    eax,eax
c001e4a6:	c3                   	ret    
c001e4a7:	90                   	nop

c001e4a8 <PCI::PCI()>:
c001e4a8:	83 ec 0c             	sub    esp,0xc
c001e4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4af:	83 ec 08             	sub    esp,0x8
c001e4b2:	68 43 a9 02 c0       	push   0xc002a943
c001e4b7:	50                   	push   eax
c001e4b8:	e8 7f a9 fe ff       	call   c0008e3c <Bus::Bus(char const*)>
c001e4bd:	83 c4 10             	add    esp,0x10
c001e4c0:	ba 50 aa 02 c0       	mov    edx,0xc002aa50
c001e4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4c9:	89 10                	mov    DWORD PTR [eax],edx
c001e4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4cf:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001e4d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4dd:	a3 a0 5d 03 c0       	mov    ds:0xc0035da0,eax
c001e4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e4ec:	0f b6 d0             	movzx  edx,al
c001e4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f3:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001e4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4fe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e504:	0f b6 d0             	movzx  edx,al
c001e507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e50b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001e510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e514:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e51a:	8d 50 01             	lea    edx,[eax+0x1]
c001e51d:	88 d1                	mov    cl,dl
c001e51f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e523:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e529:	0f b6 d0             	movzx  edx,al
c001e52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e530:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e534:	83 c9 c0             	or     ecx,0xffffffc0
c001e537:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e53b:	90                   	nop
c001e53c:	83 c4 0c             	add    esp,0xc
c001e53f:	c3                   	ret    

c001e540 <PCI::readBAR8(unsigned int, int)>:
c001e540:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e544:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e548:	f6 c2 01             	test   dl,0x1
c001e54b:	74 07                	je     c001e554 <PCI::readBAR8(unsigned int, int)+0x14>
c001e54d:	83 e2 fc             	and    edx,0xfffffffc
c001e550:	01 c2                	add    edx,eax
c001e552:	ec                   	in     al,dx
c001e553:	c3                   	ret    
c001e554:	83 e2 f0             	and    edx,0xfffffff0
c001e557:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001e55a:	c3                   	ret    
c001e55b:	90                   	nop

c001e55c <PCI::readBAR16(unsigned int, int)>:
c001e55c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e564:	f6 c2 01             	test   dl,0x1
c001e567:	74 08                	je     c001e571 <PCI::readBAR16(unsigned int, int)+0x15>
c001e569:	83 e2 fc             	and    edx,0xfffffffc
c001e56c:	01 c2                	add    edx,eax
c001e56e:	66 ed                	in     ax,dx
c001e570:	c3                   	ret    
c001e571:	83 e2 f0             	and    edx,0xfffffff0
c001e574:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001e578:	c3                   	ret    
c001e579:	90                   	nop

c001e57a <PCI::readBAR32(unsigned int, int)>:
c001e57a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e57e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e582:	f6 c2 01             	test   dl,0x1
c001e585:	74 07                	je     c001e58e <PCI::readBAR32(unsigned int, int)+0x14>
c001e587:	83 e2 fc             	and    edx,0xfffffffc
c001e58a:	01 c2                	add    edx,eax
c001e58c:	ed                   	in     eax,dx
c001e58d:	c3                   	ret    
c001e58e:	83 e2 f0             	and    edx,0xfffffff0
c001e591:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001e594:	c3                   	ret    
c001e595:	90                   	nop

c001e596 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001e596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e59a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e59e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5a2:	f6 c2 01             	test   dl,0x1
c001e5a5:	74 07                	je     c001e5ae <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001e5a7:	83 e2 fc             	and    edx,0xfffffffc
c001e5aa:	01 ca                	add    edx,ecx
c001e5ac:	ee                   	out    dx,al
c001e5ad:	c3                   	ret    
c001e5ae:	83 e2 f0             	and    edx,0xfffffff0
c001e5b1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001e5b4:	c3                   	ret    
c001e5b5:	90                   	nop

c001e5b6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001e5b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e5ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5c2:	f6 c2 01             	test   dl,0x1
c001e5c5:	74 08                	je     c001e5cf <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001e5c7:	83 e2 fc             	and    edx,0xfffffffc
c001e5ca:	01 ca                	add    edx,ecx
c001e5cc:	66 ef                	out    dx,ax
c001e5ce:	c3                   	ret    
c001e5cf:	83 e2 f0             	and    edx,0xfffffff0
c001e5d2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001e5d6:	c3                   	ret    
c001e5d7:	90                   	nop

c001e5d8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001e5d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e5dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5e4:	f6 c2 01             	test   dl,0x1
c001e5e7:	74 07                	je     c001e5f0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001e5e9:	83 e2 fc             	and    edx,0xfffffffc
c001e5ec:	01 ca                	add    edx,ecx
c001e5ee:	ef                   	out    dx,eax
c001e5ef:	c3                   	ret    
c001e5f0:	83 e2 f0             	and    edx,0xfffffff0
c001e5f3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001e5f6:	c3                   	ret    
c001e5f7:	90                   	nop

c001e5f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e5f8:	55                   	push   ebp
c001e5f9:	57                   	push   edi
c001e5fa:	56                   	push   esi
c001e5fb:	53                   	push   ebx
c001e5fc:	83 ec 0c             	sub    esp,0xc
c001e5ff:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001e604:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001e608:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001e60c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e610:	83 fe 07             	cmp    esi,0x7
c001e613:	76 10                	jbe    c001e625 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001e615:	83 ec 0c             	sub    esp,0xc
c001e618:	68 4b a9 02 c0       	push   0xc002a94b
c001e61d:	e8 6e 1b ff ff       	call   c0010190 <KePanic(char const*)>
c001e622:	83 c4 10             	add    esp,0x10
c001e625:	0f b6 db             	movzx  ebx,bl
c001e628:	83 fb 0f             	cmp    ebx,0xf
c001e62b:	76 10                	jbe    c001e63d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001e62d:	83 ec 0c             	sub    esp,0xc
c001e630:	68 7b a9 02 c0       	push   0xc002a97b
c001e635:	e8 56 1b ff ff       	call   c0010190 <KePanic(char const*)>
c001e63a:	83 c4 10             	add    esp,0x10
c001e63d:	8d 04 36             	lea    eax,[esi+esi*1]
c001e640:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e645:	83 c8 f0             	or     eax,0xfffffff0
c001e648:	ee                   	out    dx,al
c001e649:	ba fa 0c 00 00       	mov    edx,0xcfa
c001e64e:	89 e8                	mov    eax,ebp
c001e650:	ee                   	out    dx,al
c001e651:	83 c4 0c             	add    esp,0xc
c001e654:	89 d8                	mov    eax,ebx
c001e656:	89 f9                	mov    ecx,edi
c001e658:	c1 e0 08             	shl    eax,0x8
c001e65b:	0f b6 d9             	movzx  ebx,cl
c001e65e:	83 e3 fc             	and    ebx,0xfffffffc
c001e661:	09 d8                	or     eax,ebx
c001e663:	5b                   	pop    ebx
c001e664:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001e669:	5e                   	pop    esi
c001e66a:	5f                   	pop    edi
c001e66b:	5d                   	pop    ebp
c001e66c:	c3                   	ret    
c001e66d:	90                   	nop

c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e66e:	57                   	push   edi
c001e66f:	56                   	push   esi
c001e670:	53                   	push   ebx
c001e671:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e675:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e679:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001e67f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e683:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e687:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e68b:	83 ff 01             	cmp    edi,0x1
c001e68e:	75 3f                	jne    c001e6cf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001e690:	89 de                	mov    esi,ebx
c001e692:	0f b6 c0             	movzx  eax,al
c001e695:	81 e6 fc 00 00 00    	and    esi,0xfc
c001e69b:	c1 e0 10             	shl    eax,0x10
c001e69e:	0f b6 c9             	movzx  ecx,cl
c001e6a1:	09 f0                	or     eax,esi
c001e6a3:	c1 e1 08             	shl    ecx,0x8
c001e6a6:	0f b6 d2             	movzx  edx,dl
c001e6a9:	09 c8                	or     eax,ecx
c001e6ab:	c1 e2 0b             	shl    edx,0xb
c001e6ae:	09 d0                	or     eax,edx
c001e6b0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e6b5:	0d 00 00 00 80       	or     eax,0x80000000
c001e6ba:	ef                   	out    dx,eax
c001e6bb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e6c0:	ed                   	in     eax,dx
c001e6c1:	83 e3 02             	and    ebx,0x2
c001e6c4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e6cb:	d3 e8                	shr    eax,cl
c001e6cd:	eb 44                	jmp    c001e713 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e6cf:	83 ff 02             	cmp    edi,0x2
c001e6d2:	75 2d                	jne    c001e701 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001e6d4:	83 ec 0c             	sub    esp,0xc
c001e6d7:	0f b6 c9             	movzx  ecx,cl
c001e6da:	0f b6 d2             	movzx  edx,dl
c001e6dd:	0f b6 fb             	movzx  edi,bl
c001e6e0:	0f b6 c0             	movzx  eax,al
c001e6e3:	57                   	push   edi
c001e6e4:	51                   	push   ecx
c001e6e5:	52                   	push   edx
c001e6e6:	50                   	push   eax
c001e6e7:	56                   	push   esi
c001e6e8:	e8 0b ff ff ff       	call   c001e5f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e6ed:	89 c2                	mov    edx,eax
c001e6ef:	ed                   	in     eax,dx
c001e6f0:	83 e3 02             	and    ebx,0x2
c001e6f3:	83 c4 20             	add    esp,0x20
c001e6f6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e6fd:	d3 e8                	shr    eax,cl
c001e6ff:	eb 12                	jmp    c001e713 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e701:	83 ec 0c             	sub    esp,0xc
c001e704:	68 ab a9 02 c0       	push   0xc002a9ab
c001e709:	e8 82 1a ff ff       	call   c0010190 <KePanic(char const*)>
c001e70e:	83 c4 10             	add    esp,0x10
c001e711:	31 c0                	xor    eax,eax
c001e713:	5b                   	pop    ebx
c001e714:	5e                   	pop    esi
c001e715:	5f                   	pop    edi
c001e716:	c3                   	ret    
c001e717:	90                   	nop

c001e718 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001e718:	83 ec 18             	sub    esp,0x18
c001e71b:	6a 00                	push   0x0
c001e71d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e722:	50                   	push   eax
c001e723:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e728:	50                   	push   eax
c001e729:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e72e:	50                   	push   eax
c001e72f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e733:	e8 36 ff ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e738:	83 c4 2c             	add    esp,0x2c
c001e73b:	c3                   	ret    

c001e73c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001e73c:	83 ec 18             	sub    esp,0x18
c001e73f:	6a 0e                	push   0xe
c001e741:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e746:	50                   	push   eax
c001e747:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e74c:	50                   	push   eax
c001e74d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e752:	50                   	push   eax
c001e753:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e757:	e8 12 ff ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e75c:	83 c4 2c             	add    esp,0x2c
c001e75f:	0f b6 c0             	movzx  eax,al
c001e762:	c3                   	ret    
c001e763:	90                   	nop

c001e764 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001e764:	55                   	push   ebp
c001e765:	57                   	push   edi
c001e766:	56                   	push   esi
c001e767:	53                   	push   ebx
c001e768:	83 ec 18             	sub    esp,0x18
c001e76b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001e770:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001e775:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001e77a:	6a 0a                	push   0xa
c001e77c:	56                   	push   esi
c001e77d:	55                   	push   ebp
c001e77e:	57                   	push   edi
c001e77f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e783:	e8 e6 fe ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e788:	83 c4 14             	add    esp,0x14
c001e78b:	89 c3                	mov    ebx,eax
c001e78d:	6a 0a                	push   0xa
c001e78f:	0f b6 db             	movzx  ebx,bl
c001e792:	56                   	push   esi
c001e793:	55                   	push   ebp
c001e794:	57                   	push   edi
c001e795:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e799:	e8 d0 fe ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e79e:	83 c4 2c             	add    esp,0x2c
c001e7a1:	25 00 ff 00 00       	and    eax,0xff00
c001e7a6:	09 d8                	or     eax,ebx
c001e7a8:	5b                   	pop    ebx
c001e7a9:	5e                   	pop    esi
c001e7aa:	5f                   	pop    edi
c001e7ab:	5d                   	pop    ebp
c001e7ac:	c3                   	ret    
c001e7ad:	90                   	nop

c001e7ae <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001e7ae:	83 ec 18             	sub    esp,0x18
c001e7b1:	6a 08                	push   0x8
c001e7b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e7b8:	50                   	push   eax
c001e7b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e7be:	50                   	push   eax
c001e7bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e7c4:	50                   	push   eax
c001e7c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e7c9:	e8 a0 fe ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e7ce:	83 c4 2c             	add    esp,0x2c
c001e7d1:	0f b6 c4             	movzx  eax,ah
c001e7d4:	c3                   	ret    
c001e7d5:	90                   	nop

c001e7d6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001e7d6:	83 ec 18             	sub    esp,0x18
c001e7d9:	6a 08                	push   0x8
c001e7db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e7e0:	50                   	push   eax
c001e7e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e7e6:	50                   	push   eax
c001e7e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e7ec:	50                   	push   eax
c001e7ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e7f1:	e8 78 fe ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e7f6:	83 c4 2c             	add    esp,0x2c
c001e7f9:	c3                   	ret    

c001e7fa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001e7fa:	83 ec 18             	sub    esp,0x18
c001e7fd:	6a 3c                	push   0x3c
c001e7ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e804:	50                   	push   eax
c001e805:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e80a:	50                   	push   eax
c001e80b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e810:	50                   	push   eax
c001e811:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e815:	e8 54 fe ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e81a:	83 c4 2c             	add    esp,0x2c
c001e81d:	c3                   	ret    

c001e81e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001e81e:	83 ec 18             	sub    esp,0x18
c001e821:	6a 18                	push   0x18
c001e823:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e828:	50                   	push   eax
c001e829:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e82e:	50                   	push   eax
c001e82f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e834:	50                   	push   eax
c001e835:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e839:	e8 30 fe ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e83e:	83 c4 2c             	add    esp,0x2c
c001e841:	0f b6 c4             	movzx  eax,ah
c001e844:	c3                   	ret    
c001e845:	90                   	nop

c001e846 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e846:	55                   	push   ebp
c001e847:	57                   	push   edi
c001e848:	56                   	push   esi
c001e849:	53                   	push   ebx
c001e84a:	83 ec 28             	sub    esp,0x28
c001e84d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e851:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001e856:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001e85b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001e860:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001e867:	8d 43 12             	lea    eax,[ebx+0x12]
c001e86a:	83 c3 10             	add    ebx,0x10
c001e86d:	0f b6 c0             	movzx  eax,al
c001e870:	0f b6 db             	movzx  ebx,bl
c001e873:	50                   	push   eax
c001e874:	51                   	push   ecx
c001e875:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001e879:	57                   	push   edi
c001e87a:	55                   	push   ebp
c001e87b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e87f:	e8 ea fd ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e884:	83 c4 14             	add    esp,0x14
c001e887:	89 c6                	mov    esi,eax
c001e889:	53                   	push   ebx
c001e88a:	c1 e6 10             	shl    esi,0x10
c001e88d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e891:	51                   	push   ecx
c001e892:	57                   	push   edi
c001e893:	55                   	push   ebp
c001e894:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e898:	e8 d1 fd ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e89d:	83 c4 3c             	add    esp,0x3c
c001e8a0:	0f b7 c0             	movzx  eax,ax
c001e8a3:	5b                   	pop    ebx
c001e8a4:	09 f0                	or     eax,esi
c001e8a6:	5e                   	pop    esi
c001e8a7:	5f                   	pop    edi
c001e8a8:	5d                   	pop    ebp
c001e8a9:	c3                   	ret    

c001e8aa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e8aa:	55                   	push   ebp
c001e8ab:	57                   	push   edi
c001e8ac:	56                   	push   esi
c001e8ad:	53                   	push   ebx
c001e8ae:	83 ec 0c             	sub    esp,0xc
c001e8b1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e8b5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e8b9:	89 f5                	mov    ebp,esi
c001e8bb:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001e8c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e8c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e8c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e8cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e8d1:	83 f9 01             	cmp    ecx,0x1
c001e8d4:	75 5d                	jne    c001e933 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001e8d6:	0f b6 c8             	movzx  ecx,al
c001e8d9:	0f b6 d2             	movzx  edx,dl
c001e8dc:	c1 e1 10             	shl    ecx,0x10
c001e8df:	c1 e2 0b             	shl    edx,0xb
c001e8e2:	89 f0                	mov    eax,esi
c001e8e4:	25 fc 00 00 00       	and    eax,0xfc
c001e8e9:	09 c1                	or     ecx,eax
c001e8eb:	89 e8                	mov    eax,ebp
c001e8ed:	0f b6 c0             	movzx  eax,al
c001e8f0:	c1 e0 08             	shl    eax,0x8
c001e8f3:	09 c1                	or     ecx,eax
c001e8f5:	09 d1                	or     ecx,edx
c001e8f7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e8fc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e902:	89 c8                	mov    eax,ecx
c001e904:	ef                   	out    dx,eax
c001e905:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e90a:	ed                   	in     eax,dx
c001e90b:	0f b7 db             	movzx  ebx,bx
c001e90e:	83 e6 02             	and    esi,0x2
c001e911:	74 0a                	je     c001e91d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e913:	0f b7 d0             	movzx  edx,ax
c001e916:	c1 e3 10             	shl    ebx,0x10
c001e919:	09 d3                	or     ebx,edx
c001e91b:	eb 05                	jmp    c001e922 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e91d:	66 31 c0             	xor    ax,ax
c001e920:	09 c3                	or     ebx,eax
c001e922:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e927:	89 c8                	mov    eax,ecx
c001e929:	ef                   	out    dx,eax
c001e92a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e92f:	89 d8                	mov    eax,ebx
c001e931:	eb 41                	jmp    c001e974 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e933:	83 f9 02             	cmp    ecx,0x2
c001e936:	75 45                	jne    c001e97d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e938:	83 ec 0c             	sub    esp,0xc
c001e93b:	0f b6 d2             	movzx  edx,dl
c001e93e:	89 f1                	mov    ecx,esi
c001e940:	0f b6 c0             	movzx  eax,al
c001e943:	0f b6 f1             	movzx  esi,cl
c001e946:	89 e9                	mov    ecx,ebp
c001e948:	56                   	push   esi
c001e949:	0f b6 c9             	movzx  ecx,cl
c001e94c:	51                   	push   ecx
c001e94d:	52                   	push   edx
c001e94e:	50                   	push   eax
c001e94f:	57                   	push   edi
c001e950:	e8 a3 fc ff ff       	call   c001e5f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e955:	89 c2                	mov    edx,eax
c001e957:	ed                   	in     eax,dx
c001e958:	83 c4 20             	add    esp,0x20
c001e95b:	0f b7 db             	movzx  ebx,bx
c001e95e:	f6 c2 02             	test   dl,0x2
c001e961:	74 0c                	je     c001e96f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e963:	0f b7 c8             	movzx  ecx,ax
c001e966:	89 d8                	mov    eax,ebx
c001e968:	c1 e0 10             	shl    eax,0x10
c001e96b:	09 c8                	or     eax,ecx
c001e96d:	eb 05                	jmp    c001e974 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e96f:	66 31 c0             	xor    ax,ax
c001e972:	09 d8                	or     eax,ebx
c001e974:	ef                   	out    dx,eax
c001e975:	83 c4 0c             	add    esp,0xc
c001e978:	5b                   	pop    ebx
c001e979:	5e                   	pop    esi
c001e97a:	5f                   	pop    edi
c001e97b:	5d                   	pop    ebp
c001e97c:	c3                   	ret    
c001e97d:	c7 44 24 20 ab a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a9ab
c001e985:	83 c4 0c             	add    esp,0xc
c001e988:	5b                   	pop    ebx
c001e989:	5e                   	pop    esi
c001e98a:	5f                   	pop    edi
c001e98b:	5d                   	pop    ebp
c001e98c:	e9 ff 17 ff ff       	jmp    c0010190 <KePanic(char const*)>
c001e991:	90                   	nop

c001e992 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e992:	55                   	push   ebp
c001e993:	57                   	push   edi
c001e994:	56                   	push   esi
c001e995:	53                   	push   ebx
c001e996:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e99c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001e9a3:	80 3d ac 5d 03 c0 00 	cmp    BYTE PTR ds:0xc0035dac,0x0
c001e9aa:	0f 85 bd 00 00 00    	jne    c001ea6d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	68 14 01 00 00       	push   0x114
c001e9b8:	e8 7e 13 ff ff       	call   c000fd3b <malloc>
c001e9bd:	83 c4 0c             	add    esp,0xc
c001e9c0:	89 c3                	mov    ebx,eax
c001e9c2:	ff 35 58 33 03 c0    	push   DWORD PTR ds:0xc0033358
c001e9c8:	68 b1 a9 02 c0       	push   0xc002a9b1
c001e9cd:	50                   	push   eax
c001e9ce:	e8 8f 9c fe ff       	call   c0008662 <File::File(char const*, Process*)>
c001e9d3:	83 c4 10             	add    esp,0x10
c001e9d6:	85 db                	test   ebx,ebx
c001e9d8:	0f 84 67 02 00 00    	je     c001ec45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e9de:	56                   	push   esi
c001e9df:	56                   	push   esi
c001e9e0:	6a 01                	push   0x1
c001e9e2:	53                   	push   ebx
c001e9e3:	e8 98 9c fe ff       	call   c0008680 <File::open(FileOpenMode)>
c001e9e8:	83 c4 10             	add    esp,0x10
c001e9eb:	85 c0                	test   eax,eax
c001e9ed:	0f 85 52 02 00 00    	jne    c001ec45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e9f3:	52                   	push   edx
c001e9f4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e9f8:	50                   	push   eax
c001e9f9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e9fd:	50                   	push   eax
c001e9fe:	53                   	push   ebx
c001e9ff:	e8 7e 9f fe ff       	call   c0008982 <File::stat(unsigned long long*, bool*)>
c001ea04:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ea08:	40                   	inc    eax
c001ea09:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea0c:	e8 2a 13 ff ff       	call   c000fd3b <malloc>
c001ea11:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001ea15:	a3 a8 5d 03 c0       	mov    ds:0xc0035da8,eax
c001ea1a:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001ea1e:	59                   	pop    ecx
c001ea1f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ea21:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001ea25:	51                   	push   ecx
c001ea26:	50                   	push   eax
c001ea27:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ea2b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ea2f:	53                   	push   ebx
c001ea30:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ea33:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001ea37:	83 c4 20             	add    esp,0x20
c001ea3a:	89 c8                	mov    eax,ecx
c001ea3c:	99                   	cdq    
c001ea3d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001ea41:	0f 85 fe 01 00 00    	jne    c001ec45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001ea47:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001ea4b:	0f 85 f4 01 00 00    	jne    c001ec45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001ea51:	83 ec 0c             	sub    esp,0xc
c001ea54:	53                   	push   ebx
c001ea55:	e8 84 9c fe ff       	call   c00086de <File::close()>
c001ea5a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ea5e:	c6 05 ac 5d 03 c0 01 	mov    BYTE PTR ds:0xc0035dac,0x1
c001ea65:	a3 a4 5d 03 c0       	mov    ds:0xc0035da4,eax
c001ea6a:	83 c4 10             	add    esp,0x10
c001ea6d:	a1 a4 5d 03 c0       	mov    eax,ds:0xc0035da4
c001ea72:	8b 1d a8 5d 03 c0    	mov    ebx,DWORD PTR ds:0xc0035da8
c001ea78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ea7c:	31 f6                	xor    esi,esi
c001ea7e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001ea86:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001ea8d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001ea92:	31 c9                	xor    ecx,ecx
c001ea94:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001ea9c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001eaa1:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001eaa9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001eaad:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001eab5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001eab9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001eabd:	0f 8e 82 01 00 00    	jle    c001ec45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001eac3:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001eac6:	d4 40                	aam    0x40
c001eac8:	d5 39                	aad    0x39
c001eaca:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001eace:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001ead2:	d4 40                	aam    0x40
c001ead4:	d5 39                	aad    0x39
c001ead6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001eada:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001eade:	d4 40                	aam    0x40
c001eae0:	d5 39                	aad    0x39
c001eae2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001eae6:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001eaea:	d4 40                	aam    0x40
c001eaec:	d5 39                	aad    0x39
c001eaee:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001eaf2:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001eaf6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001eafa:	3c 56                	cmp    al,0x56
c001eafc:	74 43                	je     c001eb41 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001eafe:	d4 40                	aam    0x40
c001eb00:	d5 39                	aad    0x39
c001eb02:	8d 48 d0             	lea    ecx,[eax-0x30]
c001eb05:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001eb09:	0f b6 c9             	movzx  ecx,cl
c001eb0c:	c1 e1 04             	shl    ecx,0x4
c001eb0f:	d4 40                	aam    0x40
c001eb11:	d5 39                	aad    0x39
c001eb13:	83 e8 30             	sub    eax,0x30
c001eb16:	0f b6 c0             	movzx  eax,al
c001eb19:	09 c1                	or     ecx,eax
c001eb1b:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001eb1f:	c1 e1 04             	shl    ecx,0x4
c001eb22:	d4 40                	aam    0x40
c001eb24:	d5 39                	aad    0x39
c001eb26:	83 e8 30             	sub    eax,0x30
c001eb29:	0f b6 c0             	movzx  eax,al
c001eb2c:	09 c1                	or     ecx,eax
c001eb2e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001eb32:	c1 e1 04             	shl    ecx,0x4
c001eb35:	d4 40                	aam    0x40
c001eb37:	d5 39                	aad    0x39
c001eb39:	83 e8 30             	sub    eax,0x30
c001eb3c:	0f b6 c0             	movzx  eax,al
c001eb3f:	09 c1                	or     ecx,eax
c001eb41:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001eb45:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001eb49:	3c 58                	cmp    al,0x58
c001eb4b:	74 47                	je     c001eb94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001eb4d:	d4 40                	aam    0x40
c001eb4f:	d5 39                	aad    0x39
c001eb51:	8d 50 d0             	lea    edx,[eax-0x30]
c001eb54:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001eb58:	0f b6 d2             	movzx  edx,dl
c001eb5b:	c1 e2 04             	shl    edx,0x4
c001eb5e:	d4 40                	aam    0x40
c001eb60:	d5 39                	aad    0x39
c001eb62:	83 e8 30             	sub    eax,0x30
c001eb65:	0f b6 c0             	movzx  eax,al
c001eb68:	09 c2                	or     edx,eax
c001eb6a:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001eb6e:	c1 e2 04             	shl    edx,0x4
c001eb71:	d4 40                	aam    0x40
c001eb73:	d5 39                	aad    0x39
c001eb75:	83 e8 30             	sub    eax,0x30
c001eb78:	0f b6 c0             	movzx  eax,al
c001eb7b:	09 c2                	or     edx,eax
c001eb7d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001eb81:	c1 e2 04             	shl    edx,0x4
c001eb84:	d4 40                	aam    0x40
c001eb86:	d5 39                	aad    0x39
c001eb88:	83 e8 30             	sub    eax,0x30
c001eb8b:	0f b6 c0             	movzx  eax,al
c001eb8e:	09 c2                	or     edx,eax
c001eb90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001eb94:	83 c6 10             	add    esi,0x10
c001eb97:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001eb9b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001eb9f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001eba3:	83 fa 0a             	cmp    edx,0xa
c001eba6:	74 0b                	je     c001ebb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001eba8:	47                   	inc    edi
c001eba9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001ebad:	75 19                	jne    c001ebc8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001ebaf:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001ebb3:	31 c0                	xor    eax,eax
c001ebb5:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001ebba:	0f 94 c0             	sete   al
c001ebbd:	01 c6                	add    esi,eax
c001ebbf:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001ebc4:	75 0b                	jne    c001ebd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001ebc6:	eb 14                	jmp    c001ebdc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001ebc8:	46                   	inc    esi
c001ebc9:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001ebcc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001ebcf:	eb ca                	jmp    c001eb9b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001ebd1:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001ebd6:	0f 85 dd fe ff ff    	jne    c001eab9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ebdc:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001ebe1:	74 10                	je     c001ebf3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001ebe3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001ebe8:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001ebed:	0f 85 c6 fe ff ff    	jne    c001eab9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ebf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ebf7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ebfb:	83 e8 30             	sub    eax,0x30
c001ebfe:	83 ef 30             	sub    edi,0x30
c001ec01:	c1 e0 04             	shl    eax,0x4
c001ec04:	09 f8                	or     eax,edi
c001ec06:	0f b6 c0             	movzx  eax,al
c001ec09:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001ec0d:	0f 85 a6 fe ff ff    	jne    c001eab9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ec13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001ec1b:	83 e8 30             	sub    eax,0x30
c001ec1e:	83 ef 30             	sub    edi,0x30
c001ec21:	c1 e0 04             	shl    eax,0x4
c001ec24:	09 f8                	or     eax,edi
c001ec26:	0f b6 c0             	movzx  eax,al
c001ec29:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001ec2d:	0f 85 86 fe ff ff    	jne    c001eab9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ec33:	50                   	push   eax
c001ec34:	50                   	push   eax
c001ec35:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ec39:	50                   	push   eax
c001ec3a:	55                   	push   ebp
c001ec3b:	e8 00 1a fe ff       	call   c0000640 <strcpy>
c001ec40:	83 c4 10             	add    esp,0x10
c001ec43:	eb 06                	jmp    c001ec4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001ec45:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001ec49:	31 ed                	xor    ebp,ebp
c001ec4b:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ec51:	89 e8                	mov    eax,ebp
c001ec53:	5b                   	pop    ebx
c001ec54:	5e                   	pop    esi
c001ec55:	5f                   	pop    edi
c001ec56:	5d                   	pop    ebp
c001ec57:	c3                   	ret    

c001ec58 <PCI::checkBus(unsigned char)>:
c001ec58:	56                   	push   esi
c001ec59:	53                   	push   ebx
c001ec5a:	31 db                	xor    ebx,ebx
c001ec5c:	51                   	push   ecx
c001ec5d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ec62:	52                   	push   edx
c001ec63:	53                   	push   ebx
c001ec64:	43                   	inc    ebx
c001ec65:	56                   	push   esi
c001ec66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec6a:	e8 6f 03 00 00       	call   c001efde <PCI::checkDevice(unsigned char, unsigned char)>
c001ec6f:	83 c4 10             	add    esp,0x10
c001ec72:	83 fb 20             	cmp    ebx,0x20
c001ec75:	75 eb                	jne    c001ec62 <PCI::checkBus(unsigned char)+0xa>
c001ec77:	58                   	pop    eax
c001ec78:	5b                   	pop    ebx
c001ec79:	5e                   	pop    esi
c001ec7a:	c3                   	ret    
c001ec7b:	90                   	nop

c001ec7c <PCI::foundDevice(PCIDeviceInfo)>:
c001ec7c:	55                   	push   ebp
c001ec7d:	57                   	push   edi
c001ec7e:	56                   	push   esi
c001ec7f:	53                   	push   ebx
c001ec80:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001ec86:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001ec8e:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001ec95:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec9a:	0f 84 b7 01 00 00    	je     c001ee57 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001eca0:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001eca8:	66 81 fb 06 04       	cmp    bx,0x406
c001ecad:	75 32                	jne    c001ece1 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001ecaf:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001ecb7:	50                   	push   eax
c001ecb8:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001ecc0:	50                   	push   eax
c001ecc1:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001ecc9:	50                   	push   eax
c001ecca:	55                   	push   ebp
c001eccb:	e8 4e fb ff ff       	call   c001e81e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ecd0:	59                   	pop    ecx
c001ecd1:	0f b6 c0             	movzx  eax,al
c001ecd4:	5b                   	pop    ebx
c001ecd5:	50                   	push   eax
c001ecd6:	55                   	push   ebp
c001ecd7:	e8 7c ff ff ff       	call   c001ec58 <PCI::checkBus(unsigned char)>
c001ecdc:	e9 16 01 00 00       	jmp    c001edf7 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001ece1:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001ece8:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001ecee:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001ecf2:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001ecf9:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001ed01:	85 c0                	test   eax,eax
c001ed03:	74 36                	je     c001ed3b <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001ed05:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ed08:	85 d2                	test   edx,edx
c001ed0a:	74 2b                	je     c001ed37 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001ed0c:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001ed12:	31 f9                	xor    ecx,edi
c001ed14:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001ed1a:	75 1b                	jne    c001ed37 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001ed1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed20:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001ed26:	75 0f                	jne    c001ed37 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001ed28:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001ed2f:	39 f2                	cmp    edx,esi
c001ed31:	0f 84 20 01 00 00    	je     c001ee57 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001ed37:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed39:	eb c6                	jmp    c001ed01 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001ed3b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ed3f:	be e4 a9 02 c0       	mov    esi,0xc002a9e4
c001ed44:	b9 07 00 00 00       	mov    ecx,0x7
c001ed49:	fc                   	cld    
c001ed4a:	31 d2                	xor    edx,edx
c001ed4c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ed4e:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001ed55:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ed59:	b9 12 00 00 00       	mov    ecx,0x12
c001ed5e:	83 ec 0c             	sub    esp,0xc
c001ed61:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ed63:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001ed6b:	b9 0a 00 00 00       	mov    ecx,0xa
c001ed70:	f7 f1                	div    ecx
c001ed72:	83 c0 30             	add    eax,0x30
c001ed75:	83 c2 30             	add    edx,0x30
c001ed78:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001ed7c:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001ed80:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001ed88:	31 d2                	xor    edx,edx
c001ed8a:	f7 f1                	div    ecx
c001ed8c:	83 c0 30             	add    eax,0x30
c001ed8f:	83 c2 30             	add    edx,0x30
c001ed92:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001ed96:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001ed9a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ed9e:	50                   	push   eax
c001ed9f:	e8 05 ea fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001eda4:	83 c4 10             	add    esp,0x10
c001eda7:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001edad:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001edb4:	75 46                	jne    c001edfc <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001edb6:	83 ec 0c             	sub    esp,0xc
c001edb9:	68 64 01 00 00       	push   0x164
c001edbe:	e8 78 0f ff ff       	call   c000fd3b <malloc>
c001edc3:	89 c3                	mov    ebx,eax
c001edc5:	89 04 24             	mov    DWORD PTR [esp],eax
c001edc8:	e8 3b 11 00 00       	call   c001ff08 <SATABus::SATABus()>
c001edcd:	58                   	pop    eax
c001edce:	5a                   	pop    edx
c001edcf:	53                   	push   ebx
c001edd0:	55                   	push   ebp
c001edd1:	e8 56 b1 fe ff       	call   c0009f2c <Device::addChild(Device*)>
c001edd6:	83 ec 1c             	sub    esp,0x1c
c001edd9:	b9 09 00 00 00       	mov    ecx,0x9
c001edde:	89 e7                	mov    edi,esp
c001ede0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ede2:	53                   	push   ebx
c001ede3:	e8 8a b0 fe ff       	call   c0009e72 <Device::preOpenPCI(PCIDeviceInfo)>
c001ede8:	83 c4 30             	add    esp,0x30
c001edeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eded:	6a 00                	push   0x0
c001edef:	6a 00                	push   0x0
c001edf1:	6a 00                	push   0x0
c001edf3:	53                   	push   ebx
c001edf4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001edf7:	83 c4 10             	add    esp,0x10
c001edfa:	eb 5b                	jmp    c001ee57 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001edfc:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ee02:	75 19                	jne    c001ee1d <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001ee04:	83 ec 0c             	sub    esp,0xc
c001ee07:	68 70 02 00 00       	push   0x270
c001ee0c:	e8 2a 0f ff ff       	call   c000fd3b <malloc>
c001ee11:	89 c3                	mov    ebx,eax
c001ee13:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee16:	e8 93 02 00 00       	call   c001f0ae <IDE::IDE()>
c001ee1b:	eb b0                	jmp    c001edcd <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001ee1d:	83 ec 0c             	sub    esp,0xc
c001ee20:	68 58 01 00 00       	push   0x158
c001ee25:	e8 11 0f ff ff       	call   c000fd3b <malloc>
c001ee2a:	89 c3                	mov    ebx,eax
c001ee2c:	58                   	pop    eax
c001ee2d:	5a                   	pop    edx
c001ee2e:	68 ca a9 02 c0       	push   0xc002a9ca
c001ee33:	53                   	push   ebx
c001ee34:	e8 a7 b3 fe ff       	call   c000a1e0 <DriverlessDevice::DriverlessDevice(char const*)>
c001ee39:	59                   	pop    ecx
c001ee3a:	5f                   	pop    edi
c001ee3b:	53                   	push   ebx
c001ee3c:	55                   	push   ebp
c001ee3d:	e8 ea b0 fe ff       	call   c0009f2c <Device::addChild(Device*)>
c001ee42:	83 ec 1c             	sub    esp,0x1c
c001ee45:	b9 09 00 00 00       	mov    ecx,0x9
c001ee4a:	89 e7                	mov    edi,esp
c001ee4c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ee4e:	53                   	push   ebx
c001ee4f:	e8 1e b0 fe ff       	call   c0009e72 <Device::preOpenPCI(PCIDeviceInfo)>
c001ee54:	83 c4 30             	add    esp,0x30
c001ee57:	81 c4 8c 00 00 00    	add    esp,0x8c
c001ee5d:	5b                   	pop    ebx
c001ee5e:	5e                   	pop    esi
c001ee5f:	5f                   	pop    edi
c001ee60:	5d                   	pop    ebp
c001ee61:	c3                   	ret    

c001ee62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ee62:	55                   	push   ebp
c001ee63:	57                   	push   edi
c001ee64:	56                   	push   esi
c001ee65:	53                   	push   ebx
c001ee66:	83 ec 68             	sub    esp,0x68
c001ee69:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ee6d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ee74:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ee78:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ee7f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ee84:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ee88:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ee8f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001ee94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ee98:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001ee9d:	6a 0c                	push   0xc
c001ee9f:	57                   	push   edi
c001eea0:	53                   	push   ebx
c001eea1:	56                   	push   esi
c001eea2:	55                   	push   ebp
c001eea3:	e8 c6 f7 ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001eea8:	83 c4 20             	add    esp,0x20
c001eeab:	57                   	push   edi
c001eeac:	53                   	push   ebx
c001eead:	56                   	push   esi
c001eeae:	55                   	push   ebp
c001eeaf:	e8 b0 f8 ff ff       	call   c001e764 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001eeb4:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001eeb9:	57                   	push   edi
c001eeba:	53                   	push   ebx
c001eebb:	56                   	push   esi
c001eebc:	55                   	push   ebp
c001eebd:	e8 38 f9 ff ff       	call   c001e7fa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001eec2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001eec6:	83 c4 14             	add    esp,0x14
c001eec9:	6a 3c                	push   0x3c
c001eecb:	57                   	push   edi
c001eecc:	53                   	push   ebx
c001eecd:	56                   	push   esi
c001eece:	55                   	push   ebp
c001eecf:	e8 9a f7 ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001eed4:	0f b6 c4             	movzx  eax,ah
c001eed7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001eedb:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001eedf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001eee3:	a1 08 31 03 c0       	mov    eax,ds:0xc0033108
c001eee8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001eeee:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001eef4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001eef8:	83 c4 20             	add    esp,0x20
c001eefb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001ef00:	74 30                	je     c001ef32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ef02:	31 c0                	xor    eax,eax
c001ef04:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ef08:	7e 28                	jle    c001ef32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ef0a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001ef12:	39 cb                	cmp    ebx,ecx
c001ef14:	75 19                	jne    c001ef2f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ef16:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001ef1e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001ef22:	75 0b                	jne    c001ef2f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ef24:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001ef2b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001ef2f:	40                   	inc    eax
c001ef30:	eb d2                	jmp    c001ef04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001ef32:	31 d2                	xor    edx,edx
c001ef34:	83 ec 0c             	sub    esp,0xc
c001ef37:	57                   	push   edi
c001ef38:	53                   	push   ebx
c001ef39:	56                   	push   esi
c001ef3a:	52                   	push   edx
c001ef3b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ef3f:	55                   	push   ebp
c001ef40:	e8 01 f9 ff ff       	call   c001e846 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ef45:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ef49:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ef4d:	42                   	inc    edx
c001ef4e:	83 c4 20             	add    esp,0x20
c001ef51:	83 fa 06             	cmp    edx,0x6
c001ef54:	75 de                	jne    c001ef34 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001ef56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ef5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef5e:	c1 e2 08             	shl    edx,0x8
c001ef61:	83 ec 0c             	sub    esp,0xc
c001ef64:	0f b6 c4             	movzx  eax,ah
c001ef67:	09 d0                	or     eax,edx
c001ef69:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ef6e:	6a 02                	push   0x2
c001ef70:	57                   	push   edi
c001ef71:	53                   	push   ebx
c001ef72:	56                   	push   esi
c001ef73:	55                   	push   ebp
c001ef74:	e8 f5 f6 ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ef79:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ef7e:	83 c4 20             	add    esp,0x20
c001ef81:	57                   	push   edi
c001ef82:	53                   	push   ebx
c001ef83:	56                   	push   esi
c001ef84:	55                   	push   ebp
c001ef85:	e8 24 f8 ff ff       	call   c001e7ae <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ef8a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ef8e:	57                   	push   edi
c001ef8f:	53                   	push   ebx
c001ef90:	56                   	push   esi
c001ef91:	55                   	push   ebp
c001ef92:	e8 81 f7 ff ff       	call   c001e718 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ef97:	b9 09 00 00 00       	mov    ecx,0x9
c001ef9c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001efa1:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001efa5:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001efa9:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001efad:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001efb1:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001efb5:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001efb9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001efbd:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001efc1:	83 ec 0c             	sub    esp,0xc
c001efc4:	fc                   	cld    
c001efc5:	89 e7                	mov    edi,esp
c001efc7:	8d 74 24 58          	lea    esi,[esp+0x58]
c001efcb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001efcd:	55                   	push   ebp
c001efce:	e8 a9 fc ff ff       	call   c001ec7c <PCI::foundDevice(PCIDeviceInfo)>
c001efd3:	81 c4 8c 00 00 00    	add    esp,0x8c
c001efd9:	5b                   	pop    ebx
c001efda:	5e                   	pop    esi
c001efdb:	5f                   	pop    edi
c001efdc:	5d                   	pop    ebp
c001efdd:	c3                   	ret    

c001efde <PCI::checkDevice(unsigned char, unsigned char)>:
c001efde:	55                   	push   ebp
c001efdf:	57                   	push   edi
c001efe0:	56                   	push   esi
c001efe1:	53                   	push   ebx
c001efe2:	83 ec 0c             	sub    esp,0xc
c001efe5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001efe9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001efee:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001eff3:	6a 00                	push   0x0
c001eff5:	56                   	push   esi
c001eff6:	57                   	push   edi
c001eff7:	55                   	push   ebp
c001eff8:	e8 1b f7 ff ff       	call   c001e718 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001effd:	6a 00                	push   0x0
c001efff:	56                   	push   esi
c001f000:	57                   	push   edi
c001f001:	55                   	push   ebp
c001f002:	e8 5b fe ff ff       	call   c001ee62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001f007:	83 c4 20             	add    esp,0x20
c001f00a:	6a 00                	push   0x0
c001f00c:	56                   	push   esi
c001f00d:	57                   	push   edi
c001f00e:	55                   	push   ebp
c001f00f:	e8 28 f7 ff ff       	call   c001e73c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001f014:	83 c4 10             	add    esp,0x10
c001f017:	a8 80                	test   al,0x80
c001f019:	74 2d                	je     c001f048 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001f01b:	bb 01 00 00 00       	mov    ebx,0x1
c001f020:	53                   	push   ebx
c001f021:	56                   	push   esi
c001f022:	57                   	push   edi
c001f023:	55                   	push   ebp
c001f024:	e8 ef f6 ff ff       	call   c001e718 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001f029:	83 c4 10             	add    esp,0x10
c001f02c:	0f b7 c0             	movzx  eax,ax
c001f02f:	3d ff ff 00 00       	cmp    eax,0xffff
c001f034:	74 0c                	je     c001f042 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001f036:	53                   	push   ebx
c001f037:	56                   	push   esi
c001f038:	57                   	push   edi
c001f039:	55                   	push   ebp
c001f03a:	e8 23 fe ff ff       	call   c001ee62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001f03f:	83 c4 10             	add    esp,0x10
c001f042:	43                   	inc    ebx
c001f043:	83 fb 08             	cmp    ebx,0x8
c001f046:	75 d8                	jne    c001f020 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001f048:	83 c4 0c             	add    esp,0xc
c001f04b:	5b                   	pop    ebx
c001f04c:	5e                   	pop    esi
c001f04d:	5f                   	pop    edi
c001f04e:	5d                   	pop    ebp
c001f04f:	c3                   	ret    

c001f050 <PCI::detect()>:
c001f050:	56                   	push   esi
c001f051:	53                   	push   ebx
c001f052:	53                   	push   ebx
c001f053:	31 db                	xor    ebx,ebx
c001f055:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f059:	6a 00                	push   0x0
c001f05b:	6a 00                	push   0x0
c001f05d:	6a 00                	push   0x0
c001f05f:	56                   	push   esi
c001f060:	e8 d7 f6 ff ff       	call   c001e73c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001f065:	83 c4 10             	add    esp,0x10
c001f068:	a8 80                	test   al,0x80
c001f06a:	75 21                	jne    c001f08d <PCI::detect()+0x3d>
c001f06c:	51                   	push   ecx
c001f06d:	51                   	push   ecx
c001f06e:	6a 00                	push   0x0
c001f070:	56                   	push   esi
c001f071:	e8 e2 fb ff ff       	call   c001ec58 <PCI::checkBus(unsigned char)>
c001f076:	83 c4 10             	add    esp,0x10
c001f079:	eb 2a                	jmp    c001f0a5 <PCI::detect()+0x55>
c001f07b:	52                   	push   edx
c001f07c:	52                   	push   edx
c001f07d:	53                   	push   ebx
c001f07e:	43                   	inc    ebx
c001f07f:	56                   	push   esi
c001f080:	e8 d3 fb ff ff       	call   c001ec58 <PCI::checkBus(unsigned char)>
c001f085:	83 c4 10             	add    esp,0x10
c001f088:	83 fb 08             	cmp    ebx,0x8
c001f08b:	74 18                	je     c001f0a5 <PCI::detect()+0x55>
c001f08d:	53                   	push   ebx
c001f08e:	6a 00                	push   0x0
c001f090:	6a 00                	push   0x0
c001f092:	56                   	push   esi
c001f093:	e8 80 f6 ff ff       	call   c001e718 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001f098:	83 c4 10             	add    esp,0x10
c001f09b:	0f b7 c0             	movzx  eax,ax
c001f09e:	3d ff ff 00 00       	cmp    eax,0xffff
c001f0a3:	74 d6                	je     c001f07b <PCI::detect()+0x2b>
c001f0a5:	58                   	pop    eax
c001f0a6:	5b                   	pop    ebx
c001f0a7:	5e                   	pop    esi
c001f0a8:	c3                   	ret    
c001f0a9:	90                   	nop

c001f0aa <IDE::close(int, int, void*)>:
c001f0aa:	83 c8 ff             	or     eax,0xffffffff
c001f0ad:	c3                   	ret    

c001f0ae <IDE::IDE()>:
c001f0ae:	83 ec 0c             	sub    esp,0xc
c001f0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b5:	83 ec 08             	sub    esp,0x8
c001f0b8:	68 74 aa 02 c0       	push   0xc002aa74
c001f0bd:	50                   	push   eax
c001f0be:	e8 c1 b1 fe ff       	call   c000a284 <HardDiskController::HardDiskController(char const*)>
c001f0c3:	83 c4 10             	add    esp,0x10
c001f0c6:	ba a0 ab 02 c0       	mov    edx,0xc002aba0
c001f0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0cf:	89 10                	mov    DWORD PTR [eax],edx
c001f0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001f0dc:	90                   	nop
c001f0dd:	83 c4 0c             	add    esp,0xc
c001f0e0:	c3                   	ret    
c001f0e1:	90                   	nop

c001f0e2 <IDE::prepareInterrupt(unsigned char)>:
c001f0e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f0e7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f0eb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001f0f3:	c3                   	ret    

c001f0f4 <selectDrive(unsigned char, unsigned char)>:
c001f0f4:	c3                   	ret    
c001f0f5:	90                   	nop

c001f0f6 <IDE::getBase(unsigned char)>:
c001f0f6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001f0fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ff:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001f107:	c3                   	ret    

c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001f108:	55                   	push   ebp
c001f109:	57                   	push   edi
c001f10a:	56                   	push   esi
c001f10b:	53                   	push   ebx
c001f10c:	83 ec 1c             	sub    esp,0x1c
c001f10f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f113:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f117:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001f11a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001f11e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f122:	80 f9 03             	cmp    cl,0x3
c001f125:	77 4f                	ja     c001f176 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001f127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f12b:	0f b6 fa             	movzx  edi,dl
c001f12e:	0f b6 db             	movzx  ebx,bl
c001f131:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001f134:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001f139:	80 ca 80             	or     dl,0x80
c001f13c:	52                   	push   edx
c001f13d:	6a 0c                	push   0xc
c001f13f:	57                   	push   edi
c001f140:	56                   	push   esi
c001f141:	e8 c2 ff ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f146:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f14b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f14f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001f153:	ee                   	out    dx,al
c001f154:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f159:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001f15d:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f161:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f165:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f16d:	83 c4 2c             	add    esp,0x2c
c001f170:	5b                   	pop    ebx
c001f171:	5e                   	pop    esi
c001f172:	5f                   	pop    edi
c001f173:	5d                   	pop    ebp
c001f174:	eb 92                	jmp    c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f176:	0f b6 cb             	movzx  ecx,bl
c001f179:	83 f9 07             	cmp    ecx,0x7
c001f17c:	77 12                	ja     c001f190 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001f17e:	0f b6 d2             	movzx  edx,dl
c001f181:	0f b6 db             	movzx  ebx,bl
c001f184:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001f18c:	01 da                	add    edx,ebx
c001f18e:	eb 2f                	jmp    c001f1bf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001f190:	83 f9 0d             	cmp    ecx,0xd
c001f193:	77 13                	ja     c001f1a8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001f195:	0f b6 d2             	movzx  edx,dl
c001f198:	0f b6 db             	movzx  ebx,bl
c001f19b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001f1a2:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001f1a6:	eb 17                	jmp    c001f1bf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001f1a8:	83 f9 15             	cmp    ecx,0x15
c001f1ab:	77 13                	ja     c001f1c0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001f1ad:	0f b6 d2             	movzx  edx,dl
c001f1b0:	0f b6 db             	movzx  ebx,bl
c001f1b3:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001f1bb:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001f1bf:	ee                   	out    dx,al
c001f1c0:	83 c4 1c             	add    esp,0x1c
c001f1c3:	5b                   	pop    ebx
c001f1c4:	5e                   	pop    esi
c001f1c5:	5f                   	pop    edi
c001f1c6:	5d                   	pop    ebp
c001f1c7:	c3                   	ret    

c001f1c8 <IDE::read(unsigned char, unsigned char)>:
c001f1c8:	55                   	push   ebp
c001f1c9:	57                   	push   edi
c001f1ca:	56                   	push   esi
c001f1cb:	53                   	push   ebx
c001f1cc:	83 ec 1c             	sub    esp,0x1c
c001f1cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f1d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f1d7:	8d 43 f8             	lea    eax,[ebx-0x8]
c001f1da:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001f1de:	3c 03                	cmp    al,0x3
c001f1e0:	77 40                	ja     c001f222 <IDE::read(unsigned char, unsigned char)+0x5a>
c001f1e2:	0f b6 f9             	movzx  edi,cl
c001f1e5:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001f1e8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f1ed:	0c 80                	or     al,0x80
c001f1ef:	50                   	push   eax
c001f1f0:	6a 0c                	push   0xc
c001f1f2:	57                   	push   edi
c001f1f3:	56                   	push   esi
c001f1f4:	e8 0f ff ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1f9:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f1fe:	0f b6 d3             	movzx  edx,bl
c001f201:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f205:	ec                   	in     al,dx
c001f206:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f20a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001f20f:	52                   	push   edx
c001f210:	6a 0c                	push   0xc
c001f212:	57                   	push   edi
c001f213:	56                   	push   esi
c001f214:	e8 ef fe ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f219:	83 c4 20             	add    esp,0x20
c001f21c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001f220:	eb 4c                	jmp    c001f26e <IDE::read(unsigned char, unsigned char)+0xa6>
c001f222:	0f b6 d3             	movzx  edx,bl
c001f225:	83 fa 07             	cmp    edx,0x7
c001f228:	77 12                	ja     c001f23c <IDE::read(unsigned char, unsigned char)+0x74>
c001f22a:	0f b6 c9             	movzx  ecx,cl
c001f22d:	0f b6 d3             	movzx  edx,bl
c001f230:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001f238:	01 c2                	add    edx,eax
c001f23a:	eb 31                	jmp    c001f26d <IDE::read(unsigned char, unsigned char)+0xa5>
c001f23c:	83 fa 0d             	cmp    edx,0xd
c001f23f:	77 13                	ja     c001f254 <IDE::read(unsigned char, unsigned char)+0x8c>
c001f241:	0f b6 c9             	movzx  ecx,cl
c001f244:	0f b6 d3             	movzx  edx,bl
c001f247:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001f24e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f252:	eb 19                	jmp    c001f26d <IDE::read(unsigned char, unsigned char)+0xa5>
c001f254:	31 c0                	xor    eax,eax
c001f256:	83 fa 15             	cmp    edx,0x15
c001f259:	77 13                	ja     c001f26e <IDE::read(unsigned char, unsigned char)+0xa6>
c001f25b:	0f b6 c9             	movzx  ecx,cl
c001f25e:	0f b6 d3             	movzx  edx,bl
c001f261:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001f269:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f26d:	ec                   	in     al,dx
c001f26e:	83 c4 1c             	add    esp,0x1c
c001f271:	5b                   	pop    ebx
c001f272:	5e                   	pop    esi
c001f273:	5f                   	pop    edi
c001f274:	5d                   	pop    ebp
c001f275:	c3                   	ret    

c001f276 <IDE::waitInterrupt(unsigned char)>:
c001f276:	55                   	push   ebp
c001f277:	57                   	push   edi
c001f278:	56                   	push   esi
c001f279:	53                   	push   ebx
c001f27a:	31 db                	xor    ebx,ebx
c001f27c:	83 ec 0c             	sub    esp,0xc
c001f27f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001f283:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001f288:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001f290:	89 e8                	mov    eax,ebp
c001f292:	84 c0                	test   al,al
c001f294:	75 31                	jne    c001f2c7 <IDE::waitInterrupt(unsigned char)+0x51>
c001f296:	52                   	push   edx
c001f297:	6a 0c                	push   0xc
c001f299:	56                   	push   esi
c001f29a:	57                   	push   edi
c001f29b:	e8 28 ff ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001f2a0:	83 c4 10             	add    esp,0x10
c001f2a3:	a8 01                	test   al,0x1
c001f2a5:	75 28                	jne    c001f2cf <IDE::waitInterrupt(unsigned char)+0x59>
c001f2a7:	f6 c3 04             	test   bl,0x4
c001f2aa:	75 13                	jne    c001f2bf <IDE::waitInterrupt(unsigned char)+0x49>
c001f2ac:	83 fb 32             	cmp    ebx,0x32
c001f2af:	7e 0e                	jle    c001f2bf <IDE::waitInterrupt(unsigned char)+0x49>
c001f2b1:	50                   	push   eax
c001f2b2:	50                   	push   eax
c001f2b3:	6a 00                	push   0x0
c001f2b5:	6a 64                	push   0x64
c001f2b7:	e8 60 7c ff ff       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c001f2bc:	83 c4 10             	add    esp,0x10
c001f2bf:	83 fb 3c             	cmp    ebx,0x3c
c001f2c2:	74 0b                	je     c001f2cf <IDE::waitInterrupt(unsigned char)+0x59>
c001f2c4:	43                   	inc    ebx
c001f2c5:	eb c1                	jmp    c001f288 <IDE::waitInterrupt(unsigned char)+0x12>
c001f2c7:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001f2cf:	83 c4 0c             	add    esp,0xc
c001f2d2:	89 e8                	mov    eax,ebp
c001f2d4:	5b                   	pop    ebx
c001f2d5:	5e                   	pop    esi
c001f2d6:	5f                   	pop    edi
c001f2d7:	5d                   	pop    ebp
c001f2d8:	c3                   	ret    

c001f2d9 <ideChannel0IRQHandler(regs*, void*)>:
c001f2d9:	83 ec 10             	sub    esp,0x10
c001f2dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f2e0:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001f2e7:	6a 07                	push   0x7
c001f2e9:	6a 00                	push   0x0
c001f2eb:	50                   	push   eax
c001f2ec:	e8 d7 fe ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001f2f1:	83 c4 1c             	add    esp,0x1c
c001f2f4:	c3                   	ret    

c001f2f5 <ideChannel1IRQHandler(regs*, void*)>:
c001f2f5:	83 ec 10             	sub    esp,0x10
c001f2f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f2fc:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001f303:	6a 07                	push   0x7
c001f305:	6a 01                	push   0x1
c001f307:	50                   	push   eax
c001f308:	e8 bb fe ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001f30d:	83 c4 1c             	add    esp,0x1c
c001f310:	c3                   	ret    
c001f311:	90                   	nop

c001f312 <IDE::enableIRQs(unsigned char, bool)>:
c001f312:	57                   	push   edi
c001f313:	b8 02 00 00 00       	mov    eax,0x2
c001f318:	56                   	push   esi
c001f319:	53                   	push   ebx
c001f31a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f31e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f322:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001f327:	74 02                	je     c001f32b <IDE::enableIRQs(unsigned char, bool)+0x19>
c001f329:	31 c0                	xor    eax,eax
c001f32b:	0f b6 db             	movzx  ebx,bl
c001f32e:	bf 04 00 00 00       	mov    edi,0x4
c001f333:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001f33a:	50                   	push   eax
c001f33b:	6a 0c                	push   0xc
c001f33d:	53                   	push   ebx
c001f33e:	56                   	push   esi
c001f33f:	e8 c4 fd ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f344:	83 c4 10             	add    esp,0x10
c001f347:	50                   	push   eax
c001f348:	6a 0c                	push   0xc
c001f34a:	53                   	push   ebx
c001f34b:	56                   	push   esi
c001f34c:	e8 77 fe ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001f351:	83 c4 10             	add    esp,0x10
c001f354:	4f                   	dec    edi
c001f355:	75 f0                	jne    c001f347 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001f357:	5b                   	pop    ebx
c001f358:	5e                   	pop    esi
c001f359:	5f                   	pop    edi
c001f35a:	c3                   	ret    
c001f35b:	90                   	nop

c001f35c <IDE::open(int, int, void*)>:
c001f35c:	57                   	push   edi
c001f35d:	56                   	push   esi
c001f35e:	53                   	push   ebx
c001f35f:	83 ec 10             	sub    esp,0x10
c001f362:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f366:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001f36f:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001f378:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001f37f:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001f386:	0f 85 84 02 00 00    	jne    c001f610 <IDE::open(int, int, void*)+0x2b4>
c001f38c:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001f392:	a8 70                	test   al,0x70
c001f394:	75 44                	jne    c001f3da <IDE::open(int, int, void*)+0x7e>
c001f396:	ba 20 84 00 00       	mov    edx,0x8420
c001f39b:	0f a3 c2             	bt     edx,eax
c001f39e:	73 3a                	jae    c001f3da <IDE::open(int, int, void*)+0x7e>
c001f3a0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001f3a6:	83 ec 0c             	sub    esp,0xc
c001f3a9:	83 e0 fc             	and    eax,0xfffffffc
c001f3ac:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f3b3:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001f3b9:	83 e0 fc             	and    eax,0xfffffffc
c001f3bc:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f3c3:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001f3c9:	83 e0 fc             	and    eax,0xfffffffc
c001f3cc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f3d3:	68 36 81 02 c0       	push   0xc0028136
c001f3d8:	eb 60                	jmp    c001f43a <IDE::open(int, int, void*)+0xde>
c001f3da:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001f3e4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001f3ee:	be 64 00 00 00       	mov    esi,0x64
c001f3f3:	57                   	push   edi
c001f3f4:	57                   	push   edi
c001f3f5:	68 8c aa 02 c0       	push   0xc002aa8c
c001f3fa:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001f3fe:	57                   	push   edi
c001f3ff:	e8 3c 12 fe ff       	call   c0000640 <strcpy>
c001f404:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001f40b:	31 d2                	xor    edx,edx
c001f40d:	89 c8                	mov    eax,ecx
c001f40f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f412:	f7 f6                	div    esi
c001f414:	be 0a 00 00 00       	mov    esi,0xa
c001f419:	83 c0 30             	add    eax,0x30
c001f41c:	31 d2                	xor    edx,edx
c001f41e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f422:	89 c8                	mov    eax,ecx
c001f424:	f7 f6                	div    esi
c001f426:	89 d1                	mov    ecx,edx
c001f428:	31 d2                	xor    edx,edx
c001f42a:	83 c1 30             	add    ecx,0x30
c001f42d:	f7 f6                	div    esi
c001f42f:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001f433:	83 c2 30             	add    edx,0x30
c001f436:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001f43a:	e8 6a e3 fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f43f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f444:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f44b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f452:	c1 e1 10             	shl    ecx,0x10
c001f455:	c1 e0 0b             	shl    eax,0xb
c001f458:	83 c4 10             	add    esp,0x10
c001f45b:	09 c1                	or     ecx,eax
c001f45d:	89 fa                	mov    edx,edi
c001f45f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f466:	c1 e0 08             	shl    eax,0x8
c001f469:	09 c1                	or     ecx,eax
c001f46b:	89 c8                	mov    eax,ecx
c001f46d:	0d 08 00 00 80       	or     eax,0x80000008
c001f472:	ef                   	out    dx,eax
c001f473:	be fc 0c 00 00       	mov    esi,0xcfc
c001f478:	89 f2                	mov    edx,esi
c001f47a:	ed                   	in     eax,dx
c001f47b:	c1 e8 10             	shr    eax,0x10
c001f47e:	3d ff ff 00 00       	cmp    eax,0xffff
c001f483:	0f 84 e5 00 00 00    	je     c001f56e <IDE::open(int, int, void*)+0x212>
c001f489:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f48f:	89 fa                	mov    edx,edi
c001f491:	89 c8                	mov    eax,ecx
c001f493:	ef                   	out    dx,eax
c001f494:	b0 fe                	mov    al,0xfe
c001f496:	89 f2                	mov    edx,esi
c001f498:	ee                   	out    dx,al
c001f499:	89 c8                	mov    eax,ecx
c001f49b:	89 fa                	mov    edx,edi
c001f49d:	ef                   	out    dx,eax
c001f49e:	89 f2                	mov    edx,esi
c001f4a0:	ed                   	in     eax,dx
c001f4a1:	3c fe                	cmp    al,0xfe
c001f4a3:	0f 85 85 00 00 00    	jne    c001f52e <IDE::open(int, int, void*)+0x1d2>
c001f4a9:	83 ec 0c             	sub    esp,0xc
c001f4ac:	68 6c 81 02 c0       	push   0xc002816c
c001f4b1:	e8 f3 e2 fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f4b6:	c7 04 24 92 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa92
c001f4bd:	e8 ba 7a fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f4c2:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001f4cc:	c7 04 24 48 84 02 c0 	mov    DWORD PTR [esp],0xc0028448
c001f4d3:	e8 d1 e2 fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f4d8:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f4df:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f4e6:	c1 e1 10             	shl    ecx,0x10
c001f4e9:	c1 e0 08             	shl    eax,0x8
c001f4ec:	89 fa                	mov    edx,edi
c001f4ee:	09 c1                	or     ecx,eax
c001f4f0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f4f7:	c1 e0 0b             	shl    eax,0xb
c001f4fa:	09 c1                	or     ecx,eax
c001f4fc:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f502:	89 c8                	mov    eax,ecx
c001f504:	ef                   	out    dx,eax
c001f505:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001f50b:	89 f2                	mov    edx,esi
c001f50d:	ee                   	out    dx,al
c001f50e:	89 c8                	mov    eax,ecx
c001f510:	89 fa                	mov    edx,edi
c001f512:	ef                   	out    dx,eax
c001f513:	89 f2                	mov    edx,esi
c001f515:	ed                   	in     eax,dx
c001f516:	0f b6 c0             	movzx  eax,al
c001f519:	83 c4 10             	add    esp,0x10
c001f51c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001f522:	74 5a                	je     c001f57e <IDE::open(int, int, void*)+0x222>
c001f524:	83 ec 0c             	sub    esp,0xc
c001f527:	68 a7 aa 02 c0       	push   0xc002aaa7
c001f52c:	eb 48                	jmp    c001f576 <IDE::open(int, int, void*)+0x21a>
c001f52e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001f537:	75 2b                	jne    c001f564 <IDE::open(int, int, void*)+0x208>
c001f539:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001f540:	3d 80 00 00 00       	cmp    eax,0x80
c001f545:	74 07                	je     c001f54e <IDE::open(int, int, void*)+0x1f2>
c001f547:	3d 8a 00 00 00       	cmp    eax,0x8a
c001f54c:	75 16                	jne    c001f564 <IDE::open(int, int, void*)+0x208>
c001f54e:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f555:	83 ec 0c             	sub    esp,0xc
c001f558:	68 de 7b 02 c0       	push   0xc0027bde
c001f55d:	e8 47 e2 fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f562:	eb 17                	jmp    c001f57b <IDE::open(int, int, void*)+0x21f>
c001f564:	83 ec 0c             	sub    esp,0xc
c001f567:	68 af aa 02 c0       	push   0xc002aaaf
c001f56c:	eb 08                	jmp    c001f576 <IDE::open(int, int, void*)+0x21a>
c001f56e:	83 ec 0c             	sub    esp,0xc
c001f571:	68 e0 aa 02 c0       	push   0xc002aae0
c001f576:	e8 15 0c ff ff       	call   c0010190 <KePanic(char const*)>
c001f57b:	83 c4 10             	add    esp,0x10
c001f57e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001f585:	0f 84 bf 00 00 00    	je     c001f64a <IDE::open(int, int, void*)+0x2ee>
c001f58b:	83 ec 0c             	sub    esp,0xc
c001f58e:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f594:	83 e0 fc             	and    eax,0xfffffffc
c001f597:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f59e:	83 c0 08             	add    eax,0x8
c001f5a1:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f5a8:	68 0a ab 02 c0       	push   0xc002ab0a
c001f5ad:	e8 ca 79 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f5b2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f5b9:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f5c0:	50                   	push   eax
c001f5c1:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f5c8:	50                   	push   eax
c001f5c9:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f5d0:	50                   	push   eax
c001f5d1:	ff 35 a0 5d 03 c0    	push   DWORD PTR ds:0xc0035da0
c001f5d7:	e8 92 f0 ff ff       	call   c001e66e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f5dc:	83 c4 18             	add    esp,0x18
c001f5df:	83 c8 07             	or     eax,0x7
c001f5e2:	0f b7 c0             	movzx  eax,ax
c001f5e5:	50                   	push   eax
c001f5e6:	6a 04                	push   0x4
c001f5e8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f5ef:	50                   	push   eax
c001f5f0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f5f7:	50                   	push   eax
c001f5f8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f5ff:	50                   	push   eax
c001f600:	ff 35 a0 5d 03 c0    	push   DWORD PTR ds:0xc0035da0
c001f606:	e8 9f f2 ff ff       	call   c001e8aa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001f60b:	83 c4 20             	add    esp,0x20
c001f60e:	eb 3a                	jmp    c001f64a <IDE::open(int, int, void*)+0x2ee>
c001f610:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f616:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f61d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f624:	05 06 02 00 00       	add    eax,0x206
c001f629:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f630:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f637:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f63e:	05 06 02 00 00       	add    eax,0x206
c001f643:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f64a:	83 ec 0c             	sub    esp,0xc
c001f64d:	68 00 8a 02 c0       	push   0xc0028a00
c001f652:	e8 52 e1 fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f657:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f65d:	83 c4 10             	add    esp,0x10
c001f660:	89 c2                	mov    edx,eax
c001f662:	83 e2 0f             	and    edx,0xf
c001f665:	83 fa 08             	cmp    edx,0x8
c001f668:	75 0a                	jne    c001f674 <IDE::open(int, int, void*)+0x318>
c001f66a:	83 e8 02             	sub    eax,0x2
c001f66d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f674:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f67a:	89 c2                	mov    edx,eax
c001f67c:	83 e2 0f             	and    edx,0xf
c001f67f:	83 fa 08             	cmp    edx,0x8
c001f682:	75 0a                	jne    c001f68e <IDE::open(int, int, void*)+0x332>
c001f684:	83 e8 02             	sub    eax,0x2
c001f687:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f68e:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f695:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f69c:	89 d0                	mov    eax,edx
c001f69e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f6a1:	8d 7a 01             	lea    edi,[edx+0x1]
c001f6a4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f6a8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f6ac:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f6b0:	83 e1 3f             	and    ecx,0x3f
c001f6b3:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f6b7:	89 f9                	mov    ecx,edi
c001f6b9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f6c0:	0f b6 c9             	movzx  ecx,cl
c001f6c3:	8d 78 02             	lea    edi,[eax+0x2]
c001f6c6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f6c9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f6cd:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f6d1:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f6d5:	83 e2 3f             	and    edx,0x3f
c001f6d8:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f6dc:	89 f9                	mov    ecx,edi
c001f6de:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f6e4:	0f b6 d1             	movzx  edx,cl
c001f6e7:	8d 78 03             	lea    edi,[eax+0x3]
c001f6ea:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f6ed:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f6f1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f6f5:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f6f9:	83 e1 3f             	and    ecx,0x3f
c001f6fc:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f700:	89 fa                	mov    edx,edi
c001f702:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f708:	0f b6 ca             	movzx  ecx,dl
c001f70b:	8d 78 04             	lea    edi,[eax+0x4]
c001f70e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f711:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f715:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f719:	89 fa                	mov    edx,edi
c001f71b:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f721:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f725:	83 e2 3f             	and    edx,0x3f
c001f728:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f72c:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f733:	66 85 f6             	test   si,si
c001f736:	74 24                	je     c001f75c <IDE::open(int, int, void*)+0x400>
c001f738:	89 f9                	mov    ecx,edi
c001f73a:	83 c0 05             	add    eax,0x5
c001f73d:	0f b6 d1             	movzx  edx,cl
c001f740:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f743:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f747:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f74b:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f751:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001f755:	83 e0 3f             	and    eax,0x3f
c001f758:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001f75c:	83 ec 0c             	sub    esp,0xc
c001f75f:	68 38 80 02 c0       	push   0xc0028038
c001f764:	e8 40 e0 fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f769:	58                   	pop    eax
c001f76a:	5a                   	pop    edx
c001f76b:	6a 00                	push   0x0
c001f76d:	53                   	push   ebx
c001f76e:	e8 6f f9 ff ff       	call   c001f0e2 <IDE::prepareInterrupt(unsigned char)>
c001f773:	59                   	pop    ecx
c001f774:	5e                   	pop    esi
c001f775:	6a 01                	push   0x1
c001f777:	53                   	push   ebx
c001f778:	e8 65 f9 ff ff       	call   c001f0e2 <IDE::prepareInterrupt(unsigned char)>
c001f77d:	c7 04 24 90 a3 02 c0 	mov    DWORD PTR [esp],0xc002a390
c001f784:	e8 20 e0 fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f789:	83 c4 0c             	add    esp,0xc
c001f78c:	6a 00                	push   0x0
c001f78e:	6a 00                	push   0x0
c001f790:	53                   	push   ebx
c001f791:	e8 7c fb ff ff       	call   c001f312 <IDE::enableIRQs(unsigned char, bool)>
c001f796:	83 c4 0c             	add    esp,0xc
c001f799:	6a 00                	push   0x0
c001f79b:	6a 01                	push   0x1
c001f79d:	53                   	push   ebx
c001f79e:	e8 6f fb ff ff       	call   c001f312 <IDE::enableIRQs(unsigned char, bool)>
c001f7a3:	c7 04 24 22 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab22
c001f7aa:	e8 fa df fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f7af:	83 c4 10             	add    esp,0x10
c001f7b2:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f7b9:	74 3c                	je     c001f7f7 <IDE::open(int, int, void*)+0x49b>
c001f7bb:	83 ec 0c             	sub    esp,0xc
c001f7be:	53                   	push   ebx
c001f7bf:	6a 01                	push   0x1
c001f7c1:	68 d9 f2 01 c0       	push   0xc001f2d9
c001f7c6:	6a 0e                	push   0xe
c001f7c8:	53                   	push   ebx
c001f7c9:	e8 0a a7 fe ff       	call   c0009ed8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f7ce:	83 c4 14             	add    esp,0x14
c001f7d1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f7d7:	53                   	push   ebx
c001f7d8:	6a 01                	push   0x1
c001f7da:	68 f5 f2 01 c0       	push   0xc001f2f5
c001f7df:	6a 0f                	push   0xf
c001f7e1:	53                   	push   ebx
c001f7e2:	e8 f1 a6 fe ff       	call   c0009ed8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f7e7:	83 c4 14             	add    esp,0x14
c001f7ea:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f7f0:	68 4e 86 02 c0       	push   0xc002864e
c001f7f5:	eb 40                	jmp    c001f837 <IDE::open(int, int, void*)+0x4db>
c001f7f7:	83 ec 0c             	sub    esp,0xc
c001f7fa:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f804:	53                   	push   ebx
c001f805:	6a 00                	push   0x0
c001f807:	68 d9 f2 01 c0       	push   0xc001f2d9
c001f80c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f812:	53                   	push   ebx
c001f813:	e8 c0 a6 fe ff       	call   c0009ed8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f818:	83 c4 14             	add    esp,0x14
c001f81b:	53                   	push   ebx
c001f81c:	6a 00                	push   0x0
c001f81e:	68 f5 f2 01 c0       	push   0xc001f2f5
c001f823:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f829:	53                   	push   ebx
c001f82a:	e8 a9 a6 fe ff       	call   c0009ed8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f82f:	83 c4 14             	add    esp,0x14
c001f832:	68 92 93 02 c0       	push   0xc0029392
c001f837:	e8 6d df fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f83c:	83 c4 10             	add    esp,0x10
c001f83f:	83 ec 0c             	sub    esp,0xc
c001f842:	68 24 ab 02 c0       	push   0xc002ab24
c001f847:	e8 5d df fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f84c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f84e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f851:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f854:	c7 04 24 05 98 02 c0 	mov    DWORD PTR [esp],0xc0029805
c001f85b:	e8 49 df fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f860:	83 c4 0c             	add    esp,0xc
c001f863:	6a 07                	push   0x7
c001f865:	6a 00                	push   0x0
c001f867:	53                   	push   ebx
c001f868:	e8 5b f9 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001f86d:	83 c4 0c             	add    esp,0xc
c001f870:	6a 07                	push   0x7
c001f872:	6a 01                	push   0x1
c001f874:	53                   	push   ebx
c001f875:	e8 4e f9 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001f87a:	c7 04 24 9c 90 02 c0 	mov    DWORD PTR [esp],0xc002909c
c001f881:	e8 23 df fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f886:	83 c4 0c             	add    esp,0xc
c001f889:	6a 01                	push   0x1
c001f88b:	6a 00                	push   0x0
c001f88d:	53                   	push   ebx
c001f88e:	e8 7f fa ff ff       	call   c001f312 <IDE::enableIRQs(unsigned char, bool)>
c001f893:	83 c4 0c             	add    esp,0xc
c001f896:	6a 01                	push   0x1
c001f898:	6a 01                	push   0x1
c001f89a:	53                   	push   ebx
c001f89b:	e8 72 fa ff ff       	call   c001f312 <IDE::enableIRQs(unsigned char, bool)>
c001f8a0:	c7 04 24 27 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab27
c001f8a7:	e8 fd de fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f8ac:	83 c4 20             	add    esp,0x20
c001f8af:	31 c0                	xor    eax,eax
c001f8b1:	5b                   	pop    ebx
c001f8b2:	5e                   	pop    esi
c001f8b3:	5f                   	pop    edi
c001f8b4:	c3                   	ret    
c001f8b5:	90                   	nop

c001f8b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f8b6:	55                   	push   ebp
c001f8b7:	57                   	push   edi
c001f8b8:	56                   	push   esi
c001f8b9:	53                   	push   ebx
c001f8ba:	83 ec 1c             	sub    esp,0x1c
c001f8bd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f8c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f8c5:	8d 42 f8             	lea    eax,[edx-0x8]
c001f8c8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8cc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f8d0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f8d4:	3c 03                	cmp    al,0x3
c001f8d6:	77 5a                	ja     c001f932 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001f8d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f8dc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f8e0:	0f b6 db             	movzx  ebx,bl
c001f8e3:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f8e6:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f8eb:	0c 80                	or     al,0x80
c001f8ed:	50                   	push   eax
c001f8ee:	6a 0c                	push   0xc
c001f8f0:	53                   	push   ebx
c001f8f1:	56                   	push   esi
c001f8f2:	e8 11 f8 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8f7:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f8fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f900:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f904:	0f b6 d2             	movzx  edx,dl
c001f907:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f90b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f90d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f912:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f916:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f91a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f91e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f926:	83 c4 2c             	add    esp,0x2c
c001f929:	5b                   	pop    ebx
c001f92a:	5e                   	pop    esi
c001f92b:	5f                   	pop    edi
c001f92c:	5d                   	pop    ebp
c001f92d:	e9 d6 f7 ff ff       	jmp    c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f932:	0f b6 c2             	movzx  eax,dl
c001f935:	83 f8 07             	cmp    eax,0x7
c001f938:	77 12                	ja     c001f94c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001f93a:	0f b6 c2             	movzx  eax,dl
c001f93d:	0f b6 db             	movzx  ebx,bl
c001f940:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001f948:	01 c2                	add    edx,eax
c001f94a:	eb 2f                	jmp    c001f97b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f94c:	83 f8 0d             	cmp    eax,0xd
c001f94f:	77 13                	ja     c001f964 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001f951:	0f b6 db             	movzx  ebx,bl
c001f954:	0f b6 d2             	movzx  edx,dl
c001f957:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001f95e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f962:	eb 17                	jmp    c001f97b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f964:	83 f8 15             	cmp    eax,0x15
c001f967:	77 14                	ja     c001f97d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001f969:	0f b6 db             	movzx  ebx,bl
c001f96c:	0f b6 d2             	movzx  edx,dl
c001f96f:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001f977:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f97b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f97d:	83 c4 1c             	add    esp,0x1c
c001f980:	5b                   	pop    ebx
c001f981:	5e                   	pop    esi
c001f982:	5f                   	pop    edi
c001f983:	5d                   	pop    ebp
c001f984:	c3                   	ret    
c001f985:	90                   	nop

c001f986 <IDE::detect()>:
c001f986:	55                   	push   ebp
c001f987:	57                   	push   edi
c001f988:	56                   	push   esi
c001f989:	53                   	push   ebx
c001f98a:	81 ec 28 02 00 00    	sub    esp,0x228
c001f990:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f997:	68 29 ab 02 c0       	push   0xc002ab29
c001f99c:	e8 08 de fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f9a1:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f9a7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f9ab:	83 c4 10             	add    esp,0x10
c001f9ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f9b3:	0f 85 2f 04 00 00    	jne    c001fde8 <IDE::detect()+0x462>
c001f9b9:	83 ec 0c             	sub    esp,0xc
c001f9bc:	31 f6                	xor    esi,esi
c001f9be:	68 2c ab 02 c0       	push   0xc002ab2c
c001f9c3:	31 ff                	xor    edi,edi
c001f9c5:	e8 df dd fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f9ca:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f9d1:	83 c4 10             	add    esp,0x10
c001f9d4:	83 ec 0c             	sub    esp,0xc
c001f9d7:	68 2f ab 02 c0       	push   0xc002ab2f
c001f9dc:	e8 c8 dd fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f9e1:	83 c4 10             	add    esp,0x10
c001f9e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9eb:	83 ec 0c             	sub    esp,0xc
c001f9ee:	31 ed                	xor    ebp,ebp
c001f9f0:	68 32 ab 02 c0       	push   0xc002ab32
c001f9f5:	e8 af dd fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001f9fa:	89 f8                	mov    eax,edi
c001f9fc:	c1 e0 06             	shl    eax,0x6
c001f9ff:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001fa07:	c7 04 24 35 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab35
c001fa0e:	e8 96 dd fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fa13:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fa17:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001fa1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1f:	c1 e0 04             	shl    eax,0x4
c001fa22:	83 c8 a0             	or     eax,0xffffffa0
c001fa25:	0f b6 c0             	movzx  eax,al
c001fa28:	50                   	push   eax
c001fa29:	6a 06                	push   0x6
c001fa2b:	56                   	push   esi
c001fa2c:	53                   	push   ebx
c001fa2d:	e8 d6 f6 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa32:	83 c4 1c             	add    esp,0x1c
c001fa35:	6a 0c                	push   0xc
c001fa37:	56                   	push   esi
c001fa38:	53                   	push   ebx
c001fa39:	e8 8a f7 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001fa3e:	83 c4 0c             	add    esp,0xc
c001fa41:	6a 0c                	push   0xc
c001fa43:	56                   	push   esi
c001fa44:	53                   	push   ebx
c001fa45:	e8 7e f7 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001fa4a:	83 c4 0c             	add    esp,0xc
c001fa4d:	6a 0c                	push   0xc
c001fa4f:	56                   	push   esi
c001fa50:	53                   	push   ebx
c001fa51:	e8 72 f7 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001fa56:	83 c4 0c             	add    esp,0xc
c001fa59:	6a 0c                	push   0xc
c001fa5b:	56                   	push   esi
c001fa5c:	53                   	push   ebx
c001fa5d:	e8 66 f7 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001fa62:	c7 04 24 38 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab38
c001fa69:	e8 3b dd fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fa6e:	68 ec 00 00 00       	push   0xec
c001fa73:	6a 07                	push   0x7
c001fa75:	56                   	push   esi
c001fa76:	53                   	push   ebx
c001fa77:	e8 8c f6 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa7c:	83 c4 1c             	add    esp,0x1c
c001fa7f:	6a 0c                	push   0xc
c001fa81:	56                   	push   esi
c001fa82:	53                   	push   ebx
c001fa83:	e8 40 f7 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001fa88:	83 c4 0c             	add    esp,0xc
c001fa8b:	6a 0c                	push   0xc
c001fa8d:	56                   	push   esi
c001fa8e:	53                   	push   ebx
c001fa8f:	e8 34 f7 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001fa94:	83 c4 0c             	add    esp,0xc
c001fa97:	6a 0c                	push   0xc
c001fa99:	56                   	push   esi
c001fa9a:	53                   	push   ebx
c001fa9b:	e8 28 f7 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001faa0:	83 c4 0c             	add    esp,0xc
c001faa3:	6a 0c                	push   0xc
c001faa5:	56                   	push   esi
c001faa6:	53                   	push   ebx
c001faa7:	e8 1c f7 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001faac:	c7 04 24 3b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab3b
c001fab3:	e8 f1 dc fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fab8:	83 c4 0c             	add    esp,0xc
c001fabb:	6a 0c                	push   0xc
c001fabd:	56                   	push   esi
c001fabe:	53                   	push   ebx
c001fabf:	e8 04 f7 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001fac4:	83 c4 10             	add    esp,0x10
c001fac7:	84 c0                	test   al,al
c001fac9:	75 1f                	jne    c001faea <IDE::detect()+0x164>
c001facb:	83 ec 0c             	sub    esp,0xc
c001face:	68 3e ab 02 c0       	push   0xc002ab3e
c001fad3:	e8 d1 dc fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fad8:	e9 e9 02 00 00       	jmp    c001fdc6 <IDE::detect()+0x440>
c001fadd:	a8 80                	test   al,0x80
c001fadf:	74 21                	je     c001fb02 <IDE::detect()+0x17c>
c001fae1:	45                   	inc    ebp
c001fae2:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001fae8:	7f 1e                	jg     c001fb08 <IDE::detect()+0x182>
c001faea:	50                   	push   eax
c001faeb:	6a 0c                	push   0xc
c001faed:	56                   	push   esi
c001faee:	53                   	push   ebx
c001faef:	e8 d4 f6 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001faf4:	83 c4 10             	add    esp,0x10
c001faf7:	a8 01                	test   al,0x1
c001faf9:	74 e2                	je     c001fadd <IDE::detect()+0x157>
c001fafb:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001fb00:	eb 23                	jmp    c001fb25 <IDE::detect()+0x19f>
c001fb02:	a8 08                	test   al,0x8
c001fb04:	74 db                	je     c001fae1 <IDE::detect()+0x15b>
c001fb06:	eb 18                	jmp    c001fb20 <IDE::detect()+0x19a>
c001fb08:	50                   	push   eax
c001fb09:	50                   	push   eax
c001fb0a:	6a 00                	push   0x0
c001fb0c:	6a 32                	push   0x32
c001fb0e:	e8 09 74 ff ff       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c001fb13:	83 c4 10             	add    esp,0x10
c001fb16:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001fb1c:	75 cc                	jne    c001faea <IDE::detect()+0x164>
c001fb1e:	eb db                	jmp    c001fafb <IDE::detect()+0x175>
c001fb20:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001fb25:	83 ec 0c             	sub    esp,0xc
c001fb28:	68 41 ab 02 c0       	push   0xc002ab41
c001fb2d:	e8 77 dc fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fb32:	83 c4 10             	add    esp,0x10
c001fb35:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001fb3a:	74 5f                	je     c001fb9b <IDE::detect()+0x215>
c001fb3c:	51                   	push   ecx
c001fb3d:	6a 04                	push   0x4
c001fb3f:	56                   	push   esi
c001fb40:	53                   	push   ebx
c001fb41:	e8 82 f6 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001fb46:	83 c4 0c             	add    esp,0xc
c001fb49:	89 c5                	mov    ebp,eax
c001fb4b:	6a 05                	push   0x5
c001fb4d:	56                   	push   esi
c001fb4e:	53                   	push   ebx
c001fb4f:	e8 74 f6 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001fb54:	83 c4 10             	add    esp,0x10
c001fb57:	89 e9                	mov    ecx,ebp
c001fb59:	0f b6 c0             	movzx  eax,al
c001fb5c:	0f b6 e9             	movzx  ebp,cl
c001fb5f:	83 fd 14             	cmp    ebp,0x14
c001fb62:	75 07                	jne    c001fb6b <IDE::detect()+0x1e5>
c001fb64:	3d eb 00 00 00       	cmp    eax,0xeb
c001fb69:	eb 0e                	jmp    c001fb79 <IDE::detect()+0x1f3>
c001fb6b:	3d 96 00 00 00       	cmp    eax,0x96
c001fb70:	0f 85 53 02 00 00    	jne    c001fdc9 <IDE::detect()+0x443>
c001fb76:	83 fd 69             	cmp    ebp,0x69
c001fb79:	0f 85 4a 02 00 00    	jne    c001fdc9 <IDE::detect()+0x443>
c001fb7f:	68 a1 00 00 00       	push   0xa1
c001fb84:	6a 07                	push   0x7
c001fb86:	56                   	push   esi
c001fb87:	53                   	push   ebx
c001fb88:	e8 7b f5 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb8d:	58                   	pop    eax
c001fb8e:	5a                   	pop    edx
c001fb8f:	6a 00                	push   0x0
c001fb91:	6a 0a                	push   0xa
c001fb93:	e8 84 73 ff ff       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c001fb98:	83 c4 10             	add    esp,0x10
c001fb9b:	83 ec 0c             	sub    esp,0xc
c001fb9e:	89 fd                	mov    ebp,edi
c001fba0:	68 44 ab 02 c0       	push   0xc002ab44
c001fba5:	c1 e5 06             	shl    ebp,0x6
c001fba8:	e8 fc db fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fbad:	01 dd                	add    ebp,ebx
c001fbaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c001fbb3:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001fbba:	52                   	push   edx
c001fbbb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001fbbf:	6a 00                	push   0x0
c001fbc1:	56                   	push   esi
c001fbc2:	53                   	push   ebx
c001fbc3:	e8 ee fc ff ff       	call   c001f8b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001fbc8:	83 c4 14             	add    esp,0x14
c001fbcb:	68 48 ab 02 c0       	push   0xc002ab48
c001fbd0:	e8 d4 db fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fbd5:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001fbda:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001fbe1:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001fbe8:	89 f0                	mov    eax,esi
c001fbea:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001fbf0:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001fbf4:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001fbfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fbfe:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001fc05:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001fc0d:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001fc14:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001fc1c:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001fc22:	c7 04 24 4c ab 02 c0 	mov    DWORD PTR [esp],0xc002ab4c
c001fc29:	e8 7b db fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fc2e:	83 c4 10             	add    esp,0x10
c001fc31:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001fc38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fc3c:	74 09                	je     c001fc47 <IDE::detect()+0x2c1>
c001fc3e:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001fc45:	eb 07                	jmp    c001fc4e <IDE::detect()+0x2c8>
c001fc47:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001fc4e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fc52:	89 f8                	mov    eax,edi
c001fc54:	83 ec 0c             	sub    esp,0xc
c001fc57:	c1 e0 06             	shl    eax,0x6
c001fc5a:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001fc5d:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001fc63:	68 50 ab 02 c0       	push   0xc002ab50
c001fc68:	e8 3c db fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fc6d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001fc71:	89 e8                	mov    eax,ebp
c001fc73:	83 c4 10             	add    esp,0x10
c001fc76:	8d 6a 28             	lea    ebp,[edx+0x28]
c001fc79:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001fc7c:	83 c0 02             	add    eax,0x2
c001fc7f:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001fc85:	83 c2 02             	add    edx,0x2
c001fc88:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001fc8b:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001fc91:	39 d5                	cmp    ebp,edx
c001fc93:	75 e4                	jne    c001fc79 <IDE::detect()+0x2f3>
c001fc95:	89 f8                	mov    eax,edi
c001fc97:	c1 e0 06             	shl    eax,0x6
c001fc9a:	01 d8                	add    eax,ebx
c001fc9c:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001fca3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001fcaa:	c1 ea 09             	shr    edx,0x9
c001fcad:	83 e2 01             	and    edx,0x1
c001fcb0:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001fcb7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001fcbd:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001fcc1:	74 0c                	je     c001fccf <IDE::detect()+0x349>
c001fcc3:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001fccc:	0f 95 c2             	setne  dl
c001fccf:	83 ec 0c             	sub    esp,0xc
c001fcd2:	89 fd                	mov    ebp,edi
c001fcd4:	c1 e5 06             	shl    ebp,0x6
c001fcd7:	01 dd                	add    ebp,ebx
c001fcd9:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001fcdf:	68 54 ab 02 c0       	push   0xc002ab54
c001fce4:	e8 c0 da fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fce9:	83 c4 10             	add    esp,0x10
c001fcec:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001fcf1:	75 66                	jne    c001fd59 <IDE::detect()+0x3d3>
c001fcf3:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001fcfa:	0f 84 b8 00 00 00    	je     c001fdb8 <IDE::detect()+0x432>
c001fd00:	83 ec 0c             	sub    esp,0xc
c001fd03:	68 58 ab 02 c0       	push   0xc002ab58
c001fd08:	e8 9c da fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fd0d:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001fd14:	e8 22 00 ff ff       	call   c000fd3b <malloc>
c001fd19:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd1c:	89 c5                	mov    ebp,eax
c001fd1e:	e8 43 05 00 00       	call   c0020266 <ATA::ATA()>
c001fd23:	c7 04 24 5c ab 02 c0 	mov    DWORD PTR [esp],0xc002ab5c
c001fd2a:	e8 7a da fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fd2f:	59                   	pop    ecx
c001fd30:	58                   	pop    eax
c001fd31:	55                   	push   ebp
c001fd32:	53                   	push   ebx
c001fd33:	e8 f4 a1 fe ff       	call   c0009f2c <Device::addChild(Device*)>
c001fd38:	c7 04 24 61 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab61
c001fd3f:	e8 65 da fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fd44:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fd47:	53                   	push   ebx
c001fd48:	57                   	push   edi
c001fd49:	6a 00                	push   0x0
c001fd4b:	55                   	push   ebp
c001fd4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fd4f:	83 c4 14             	add    esp,0x14
c001fd52:	68 66 ab 02 c0       	push   0xc002ab66
c001fd57:	eb 57                	jmp    c001fdb0 <IDE::detect()+0x42a>
c001fd59:	83 ec 0c             	sub    esp,0xc
c001fd5c:	68 6b ab 02 c0       	push   0xc002ab6b
c001fd61:	e8 43 da fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fd66:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fd6d:	e8 c9 ff fe ff       	call   c000fd3b <malloc>
c001fd72:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd75:	89 c5                	mov    ebp,eax
c001fd77:	e8 98 0c 00 00       	call   c0020a14 <ATAPI::ATAPI()>
c001fd7c:	c7 04 24 71 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab71
c001fd83:	e8 21 da fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fd88:	58                   	pop    eax
c001fd89:	5a                   	pop    edx
c001fd8a:	55                   	push   ebp
c001fd8b:	53                   	push   ebx
c001fd8c:	e8 9b a1 fe ff       	call   c0009f2c <Device::addChild(Device*)>
c001fd91:	c7 04 24 78 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab78
c001fd98:	e8 0c da fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fd9d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fda0:	53                   	push   ebx
c001fda1:	57                   	push   edi
c001fda2:	6a 00                	push   0x0
c001fda4:	55                   	push   ebp
c001fda5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fda8:	83 c4 14             	add    esp,0x14
c001fdab:	68 7f ab 02 c0       	push   0xc002ab7f
c001fdb0:	e8 f4 d9 fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fdb5:	83 c4 10             	add    esp,0x10
c001fdb8:	83 ec 0c             	sub    esp,0xc
c001fdbb:	47                   	inc    edi
c001fdbc:	68 86 ab 02 c0       	push   0xc002ab86
c001fdc1:	e8 e3 d9 fe ff       	call   c000d7a9 <KeSetBootMessage(char const*)>
c001fdc6:	83 c4 10             	add    esp,0x10
c001fdc9:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001fdcd:	74 0c                	je     c001fddb <IDE::detect()+0x455>
c001fdcf:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001fdd6:	e9 10 fc ff ff       	jmp    c001f9eb <IDE::detect()+0x65>
c001fddb:	4e                   	dec    esi
c001fddc:	74 0a                	je     c001fde8 <IDE::detect()+0x462>
c001fdde:	be 01 00 00 00       	mov    esi,0x1
c001fde3:	e9 ec fb ff ff       	jmp    c001f9d4 <IDE::detect()+0x4e>
c001fde8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001fdee:	5b                   	pop    ebx
c001fdef:	5e                   	pop    esi
c001fdf0:	5f                   	pop    edi
c001fdf1:	5d                   	pop    ebp
c001fdf2:	c3                   	ret    
c001fdf3:	90                   	nop

c001fdf4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001fdf4:	55                   	push   ebp
c001fdf5:	57                   	push   edi
c001fdf6:	56                   	push   esi
c001fdf7:	53                   	push   ebx
c001fdf8:	83 ec 1c             	sub    esp,0x1c
c001fdfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fdff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fe03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe07:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fe0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fe0f:	88 c3                	mov    bl,al
c001fe11:	25 ff 00 00 00       	and    eax,0xff
c001fe16:	0f 84 88 00 00 00    	je     c001fea4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fe1c:	83 ec 0c             	sub    esp,0xc
c001fe1f:	89 c7                	mov    edi,eax
c001fe21:	68 8a ab 02 c0       	push   0xc002ab8a
c001fe26:	e8 51 71 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001fe2b:	83 c4 10             	add    esp,0x10
c001fe2e:	83 ff 01             	cmp    edi,0x1
c001fe31:	74 6b                	je     c001fe9e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001fe33:	83 ff 02             	cmp    edi,0x2
c001fe36:	75 58                	jne    c001fe90 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001fe38:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001fe3d:	01 ff                	add    edi,edi
c001fe3f:	50                   	push   eax
c001fe40:	09 fe                	or     esi,edi
c001fe42:	6a 01                	push   0x1
c001fe44:	89 f0                	mov    eax,esi
c001fe46:	0f b6 f0             	movzx  esi,al
c001fe49:	c1 e6 06             	shl    esi,0x6
c001fe4c:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001fe54:	50                   	push   eax
c001fe55:	55                   	push   ebp
c001fe56:	e8 6d f3 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001fe5b:	83 c4 10             	add    esp,0x10
c001fe5e:	a8 01                	test   al,0x1
c001fe60:	74 02                	je     c001fe64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001fe62:	b3 07                	mov    bl,0x7
c001fe64:	a8 02                	test   al,0x2
c001fe66:	74 02                	je     c001fe6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001fe68:	b3 03                	mov    bl,0x3
c001fe6a:	a8 04                	test   al,0x4
c001fe6c:	74 02                	je     c001fe70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001fe6e:	b3 14                	mov    bl,0x14
c001fe70:	a8 08                	test   al,0x8
c001fe72:	74 02                	je     c001fe76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001fe74:	b3 03                	mov    bl,0x3
c001fe76:	a8 10                	test   al,0x10
c001fe78:	74 02                	je     c001fe7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001fe7a:	b3 15                	mov    bl,0x15
c001fe7c:	a8 20                	test   al,0x20
c001fe7e:	74 02                	je     c001fe82 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001fe80:	b3 03                	mov    bl,0x3
c001fe82:	a8 40                	test   al,0x40
c001fe84:	74 02                	je     c001fe88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001fe86:	b3 16                	mov    bl,0x16
c001fe88:	a8 80                	test   al,0x80
c001fe8a:	74 18                	je     c001fea4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fe8c:	b3 0d                	mov    bl,0xd
c001fe8e:	eb 14                	jmp    c001fea4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fe90:	83 ff 03             	cmp    edi,0x3
c001fe93:	74 0d                	je     c001fea2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001fe95:	83 ff 04             	cmp    edi,0x4
c001fe98:	75 0a                	jne    c001fea4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fe9a:	b3 08                	mov    bl,0x8
c001fe9c:	eb 06                	jmp    c001fea4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fe9e:	b3 13                	mov    bl,0x13
c001fea0:	eb 02                	jmp    c001fea4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001fea2:	b3 17                	mov    bl,0x17
c001fea4:	83 c4 1c             	add    esp,0x1c
c001fea7:	88 d8                	mov    al,bl
c001fea9:	5b                   	pop    ebx
c001feaa:	5e                   	pop    esi
c001feab:	5f                   	pop    edi
c001feac:	5d                   	pop    ebp
c001fead:	c3                   	ret    

c001feae <IDE::polling(unsigned char, unsigned int)>:
c001feae:	57                   	push   edi
c001feaf:	56                   	push   esi
c001feb0:	53                   	push   ebx
c001feb1:	bb 04 00 00 00       	mov    ebx,0x4
c001feb6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001feba:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001febf:	52                   	push   edx
c001fec0:	6a 0c                	push   0xc
c001fec2:	56                   	push   esi
c001fec3:	57                   	push   edi
c001fec4:	e8 ff f2 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001fec9:	83 c4 10             	add    esp,0x10
c001fecc:	4b                   	dec    ebx
c001fecd:	75 f0                	jne    c001febf <IDE::polling(unsigned char, unsigned int)+0x11>
c001fecf:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fed4:	50                   	push   eax
c001fed5:	6a 0c                	push   0xc
c001fed7:	56                   	push   esi
c001fed8:	57                   	push   edi
c001fed9:	e8 ea f2 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c001fede:	83 c4 10             	add    esp,0x10
c001fee1:	a8 01                	test   al,0x1
c001fee3:	75 17                	jne    c001fefc <IDE::polling(unsigned char, unsigned int)+0x4e>
c001fee5:	a8 20                	test   al,0x20
c001fee7:	75 0f                	jne    c001fef8 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001fee9:	4b                   	dec    ebx
c001feea:	74 10                	je     c001fefc <IDE::polling(unsigned char, unsigned int)+0x4e>
c001feec:	a8 80                	test   al,0x80
c001feee:	75 e4                	jne    c001fed4 <IDE::polling(unsigned char, unsigned int)+0x26>
c001fef0:	a8 08                	test   al,0x8
c001fef2:	74 e0                	je     c001fed4 <IDE::polling(unsigned char, unsigned int)+0x26>
c001fef4:	31 c0                	xor    eax,eax
c001fef6:	eb 06                	jmp    c001fefe <IDE::polling(unsigned char, unsigned int)+0x50>
c001fef8:	b0 01                	mov    al,0x1
c001fefa:	eb 02                	jmp    c001fefe <IDE::polling(unsigned char, unsigned int)+0x50>
c001fefc:	b0 02                	mov    al,0x2
c001fefe:	5b                   	pop    ebx
c001feff:	5e                   	pop    esi
c001ff00:	5f                   	pop    edi
c001ff01:	c3                   	ret    

c001ff02 <SATABus::close(int, int, void*)>:
c001ff02:	31 c0                	xor    eax,eax
c001ff04:	c3                   	ret    
c001ff05:	90                   	nop

c001ff06 <SATABus::detect()>:
c001ff06:	c3                   	ret    
c001ff07:	90                   	nop

c001ff08 <SATABus::SATABus()>:
c001ff08:	83 ec 0c             	sub    esp,0xc
c001ff0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0f:	83 ec 08             	sub    esp,0x8
c001ff12:	68 c4 ab 02 c0       	push   0xc002abc4
c001ff17:	50                   	push   eax
c001ff18:	e8 67 a3 fe ff       	call   c000a284 <HardDiskController::HardDiskController(char const*)>
c001ff1d:	83 c4 10             	add    esp,0x10
c001ff20:	ba f0 ab 02 c0       	mov    edx,0xc002abf0
c001ff25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff29:	89 10                	mov    DWORD PTR [eax],edx
c001ff2b:	83 ec 0c             	sub    esp,0xc
c001ff2e:	6a 50                	push   0x50
c001ff30:	e8 36 05 ff ff       	call   c001046b <Phys::allocateContiguousPages(int)>
c001ff35:	83 c4 10             	add    esp,0x10
c001ff38:	89 c2                	mov    edx,eax
c001ff3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ff44:	83 ec 0c             	sub    esp,0xc
c001ff47:	6a 50                	push   0x50
c001ff49:	e8 d9 37 ff ff       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c001ff4e:	83 c4 10             	add    esp,0x10
c001ff51:	89 c2                	mov    edx,eax
c001ff53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ff5d:	a1 90 32 03 c0       	mov    eax,ds:0xc0033290
c001ff62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff66:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ff6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff70:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ff76:	83 ec 0c             	sub    esp,0xc
c001ff79:	6a 03                	push   0x3
c001ff7b:	6a 50                	push   0x50
c001ff7d:	51                   	push   ecx
c001ff7e:	52                   	push   edx
c001ff7f:	50                   	push   eax
c001ff80:	e8 6f 40 ff ff       	call   c0013ff4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ff85:	83 c4 20             	add    esp,0x20
c001ff88:	90                   	nop
c001ff89:	83 c4 0c             	add    esp,0xc
c001ff8c:	c3                   	ret    
c001ff8d:	90                   	nop

c001ff8e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ff8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff92:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ff95:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ff98:	09 c2                	or     edx,eax
c001ff9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ffa4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ffa6:	31 c0                	xor    eax,eax
c001ffa8:	c1 e9 08             	shr    ecx,0x8
c001ffab:	83 e1 0f             	and    ecx,0xf
c001ffae:	39 c8                	cmp    eax,ecx
c001ffb0:	74 0a                	je     c001ffbc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ffb2:	f6 c2 01             	test   dl,0x1
c001ffb5:	74 08                	je     c001ffbf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ffb7:	d1 ea                	shr    edx,1
c001ffb9:	40                   	inc    eax
c001ffba:	eb f2                	jmp    c001ffae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ffbc:	83 c8 ff             	or     eax,0xffffffff
c001ffbf:	c3                   	ret    

c001ffc0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ffc0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ffc4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ffc7:	89 c2                	mov    edx,eax
c001ffc9:	c1 ea 08             	shr    edx,0x8
c001ffcc:	83 e2 0f             	and    edx,0xf
c001ffcf:	4a                   	dec    edx
c001ffd0:	75 32                	jne    c0020004 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ffd2:	83 e0 0f             	and    eax,0xf
c001ffd5:	83 f8 03             	cmp    eax,0x3
c001ffd8:	75 2a                	jne    c0020004 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ffda:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ffdd:	b8 02 00 00 00       	mov    eax,0x2
c001ffe2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ffe8:	74 1c                	je     c0020006 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ffea:	b8 04 00 00 00       	mov    eax,0x4
c001ffef:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001fff5:	74 0f                	je     c0020006 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001fff7:	31 c0                	xor    eax,eax
c001fff9:	83 fa 03             	cmp    edx,0x3
c001fffc:	0f 94 c0             	sete   al
c001ffff:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0020003:	c3                   	ret    
c0020004:	31 c0                	xor    eax,eax
c0020006:	c3                   	ret    
c0020007:	90                   	nop

c0020008 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0020008:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002000c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002000f:	0f ba e2 0f          	bt     edx,0xf
c0020013:	72 f7                	jb     c002000c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0020015:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020018:	83 ca 10             	or     edx,0x10
c002001b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002001e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020021:	83 ca 01             	or     edx,0x1
c0020024:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0020027:	c3                   	ret    

c0020028 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0020028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002002c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002002f:	83 e2 fe             	and    edx,0xfffffffe
c0020032:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0020035:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020038:	83 e2 ef             	and    edx,0xffffffef
c002003b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002003e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020041:	0f ba e2 0e          	bt     edx,0xe
c0020045:	72 f7                	jb     c002003e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0020047:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002004a:	0f ba e2 0f          	bt     edx,0xf
c002004e:	72 ee                	jb     c002003e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0020050:	c3                   	ret    
c0020051:	90                   	nop

c0020052 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0020052:	55                   	push   ebp
c0020053:	57                   	push   edi
c0020054:	56                   	push   esi
c0020055:	53                   	push   ebx
c0020056:	83 ec 1c             	sub    esp,0x1c
c0020059:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002005d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020061:	53                   	push   ebx
c0020062:	56                   	push   esi
c0020063:	e8 c0 ff ff ff       	call   c0020028 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020068:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002006c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0020072:	83 ec 0c             	sub    esp,0xc
c0020075:	c1 e5 0a             	shl    ebp,0xa
c0020078:	01 e8                	add    eax,ebp
c002007a:	89 03                	mov    DWORD PTR [ebx],eax
c002007c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002007e:	68 00 04 00 00       	push   0x400
c0020083:	6a 00                	push   0x0
c0020085:	50                   	push   eax
c0020086:	e8 65 04 fe ff       	call   c00004f0 <memset>
c002008b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0020091:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020095:	01 e8                	add    eax,ebp
c0020097:	83 c4 1c             	add    esp,0x1c
c002009a:	89 03                	mov    DWORD PTR [ebx],eax
c002009c:	c1 e2 08             	shl    edx,0x8
c002009f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00200a6:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c00200ac:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00200b2:	01 f8                	add    eax,edi
c00200b4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00200b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00200ba:	68 00 01 00 00       	push   0x100
c00200bf:	6a 00                	push   0x0
c00200c1:	50                   	push   eax
c00200c2:	e8 29 04 fe ff       	call   c00004f0 <memset>
c00200c7:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c00200cd:	01 fa                	add    edx,edi
c00200cf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00200d3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00200d6:	c1 e7 0d             	shl    edi,0xd
c00200d9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00200e0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00200e6:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00200ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00200f0:	31 ff                	xor    edi,edi
c00200f2:	83 c4 10             	add    esp,0x10
c00200f5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00200fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00200ff:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0020105:	83 c5 20             	add    ebp,0x20
c0020108:	01 f8                	add    eax,edi
c002010a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002010d:	52                   	push   edx
c002010e:	68 00 01 00 00       	push   0x100
c0020113:	6a 00                	push   0x0
c0020115:	50                   	push   eax
c0020116:	e8 d5 03 fe ff       	call   c00004f0 <memset>
c002011b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002011f:	83 c4 10             	add    esp,0x10
c0020122:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0020128:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002012f:	01 f8                	add    eax,edi
c0020131:	81 c7 00 01 00 00    	add    edi,0x100
c0020137:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002013a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0020140:	75 b3                	jne    c00200f5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0020142:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0020149:	50                   	push   eax
c002014a:	50                   	push   eax
c002014b:	53                   	push   ebx
c002014c:	56                   	push   esi
c002014d:	e8 b6 fe ff ff       	call   c0020008 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020152:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0020159:	83 c4 2c             	add    esp,0x2c
c002015c:	5b                   	pop    ebx
c002015d:	5e                   	pop    esi
c002015e:	5f                   	pop    edi
c002015f:	5d                   	pop    ebp
c0020160:	c3                   	ret    
c0020161:	90                   	nop

c0020162 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0020162:	55                   	push   ebp
c0020163:	57                   	push   edi
c0020164:	56                   	push   esi
c0020165:	53                   	push   ebx
c0020166:	31 db                	xor    ebx,ebx
c0020168:	83 ec 0c             	sub    esp,0xc
c002016b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002016f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020173:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0020176:	f7 c7 01 00 00 00    	test   edi,0x1
c002017c:	74 7a                	je     c00201f8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002017e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020182:	89 d8                	mov    eax,ebx
c0020184:	c1 e0 07             	shl    eax,0x7
c0020187:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002018e:	55                   	push   ebp
c002018f:	56                   	push   esi
c0020190:	e8 2b fe ff ff       	call   c001ffc0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0020195:	5a                   	pop    edx
c0020196:	83 f8 01             	cmp    eax,0x1
c0020199:	59                   	pop    ecx
c002019a:	75 21                	jne    c00201bd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002019c:	50                   	push   eax
c002019d:	53                   	push   ebx
c002019e:	55                   	push   ebp
c002019f:	56                   	push   esi
c00201a0:	e8 ad fe ff ff       	call   c0020052 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00201a5:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00201ac:	e8 8a fb fe ff       	call   c000fd3b <malloc>
c00201b1:	89 c5                	mov    ebp,eax
c00201b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00201b6:	e8 25 0f 00 00       	call   c00210e0 <SATA::SATA()>
c00201bb:	eb 24                	jmp    c00201e1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00201bd:	83 f8 04             	cmp    eax,0x4
c00201c0:	75 36                	jne    c00201f8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00201c2:	51                   	push   ecx
c00201c3:	53                   	push   ebx
c00201c4:	55                   	push   ebp
c00201c5:	56                   	push   esi
c00201c6:	e8 87 fe ff ff       	call   c0020052 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00201cb:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c00201d2:	e8 64 fb fe ff       	call   c000fd3b <malloc>
c00201d7:	89 c5                	mov    ebp,eax
c00201d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00201dc:	e8 97 12 00 00       	call   c0021478 <SATAPI::SATAPI()>
c00201e1:	58                   	pop    eax
c00201e2:	5a                   	pop    edx
c00201e3:	55                   	push   ebp
c00201e4:	56                   	push   esi
c00201e5:	e8 42 9d fe ff       	call   c0009f2c <Device::addChild(Device*)>
c00201ea:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00201ed:	56                   	push   esi
c00201ee:	6a 00                	push   0x0
c00201f0:	53                   	push   ebx
c00201f1:	55                   	push   ebp
c00201f2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00201f5:	83 c4 20             	add    esp,0x20
c00201f8:	d1 ef                	shr    edi,1
c00201fa:	43                   	inc    ebx
c00201fb:	83 fb 20             	cmp    ebx,0x20
c00201fe:	0f 85 72 ff ff ff    	jne    c0020176 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0020204:	83 c4 0c             	add    esp,0xc
c0020207:	5b                   	pop    ebx
c0020208:	5e                   	pop    esi
c0020209:	5f                   	pop    edi
c002020a:	5d                   	pop    ebp
c002020b:	c3                   	ret    

c002020c <SATABus::open(int, int, void*)>:
c002020c:	53                   	push   ebx
c002020d:	83 ec 08             	sub    esp,0x8
c0020210:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020214:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002021a:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020220:	e8 ef 67 ff ff       	call   c0016a14 <KeDisablePreemption()>
c0020225:	52                   	push   edx
c0020226:	52                   	push   edx
c0020227:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002022d:	53                   	push   ebx
c002022e:	e8 2f ff ff ff       	call   c0020162 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0020233:	e8 04 68 ff ff       	call   c0016a3c <KeRestorePreemption()>
c0020238:	31 c0                	xor    eax,eax
c002023a:	83 c4 18             	add    esp,0x18
c002023d:	5b                   	pop    ebx
c002023e:	c3                   	ret    
c002023f:	90                   	nop

c0020240 <ATA::close(int, int, void*)>:
c0020240:	83 ec 0c             	sub    esp,0xc
c0020243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020247:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002024d:	85 c0                	test   eax,eax
c002024f:	74 0c                	je     c002025d <ATA::close(int, int, void*)+0x1d>
c0020251:	83 ec 0c             	sub    esp,0xc
c0020254:	8b 10                	mov    edx,DWORD PTR [eax]
c0020256:	50                   	push   eax
c0020257:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002025a:	83 c4 10             	add    esp,0x10
c002025d:	31 c0                	xor    eax,eax
c002025f:	83 c4 0c             	add    esp,0xc
c0020262:	c3                   	ret    
c0020263:	90                   	nop

c0020264 <ATA::powerSaving(PowerSavingLevel)>:
c0020264:	c3                   	ret    
c0020265:	90                   	nop

c0020266 <ATA::ATA()>:
c0020266:	83 ec 0c             	sub    esp,0xc
c0020269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026d:	83 ec 04             	sub    esp,0x4
c0020270:	68 00 02 00 00       	push   0x200
c0020275:	68 71 ad 02 c0       	push   0xc002ad71
c002027a:	50                   	push   eax
c002027b:	e8 8e a0 fe ff       	call   c000a30e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020280:	83 c4 10             	add    esp,0x10
c0020283:	ba d8 ac 02 c0       	mov    edx,0xc002acd8
c0020288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028c:	89 10                	mov    DWORD PTR [eax],edx
c002028e:	90                   	nop
c002028f:	83 c4 0c             	add    esp,0xc
c0020292:	c3                   	ret    
c0020293:	90                   	nop

c0020294 <ATA::flush(bool)>:
c0020294:	53                   	push   ebx
c0020295:	83 ec 08             	sub    esp,0x8
c0020298:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002029c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202a1:	83 f8 01             	cmp    eax,0x1
c00202a4:	19 c0                	sbb    eax,eax
c00202a6:	83 e0 fd             	and    eax,0xfffffffd
c00202a9:	05 ea 00 00 00       	add    eax,0xea
c00202ae:	50                   	push   eax
c00202af:	6a 07                	push   0x7
c00202b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202b8:	50                   	push   eax
c00202b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202bf:	e8 44 ee ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202c4:	83 c4 0c             	add    esp,0xc
c00202c7:	6a 00                	push   0x0
c00202c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202d0:	50                   	push   eax
c00202d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202d7:	e8 d2 fb ff ff       	call   c001feae <IDE::polling(unsigned char, unsigned int)>
c00202dc:	83 c4 18             	add    esp,0x18
c00202df:	5b                   	pop    ebx
c00202e0:	c3                   	ret    
c00202e1:	90                   	nop

c00202e2 <ATA::readyForCommand()>:
c00202e2:	56                   	push   esi
c00202e3:	53                   	push   ebx
c00202e4:	31 db                	xor    ebx,ebx
c00202e6:	50                   	push   eax
c00202e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00202eb:	50                   	push   eax
c00202ec:	6a 0c                	push   0xc
c00202ee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00202f5:	50                   	push   eax
c00202f6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00202fc:	e8 c7 ee ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c0020301:	83 c4 10             	add    esp,0x10
c0020304:	a8 88                	test   al,0x88
c0020306:	74 20                	je     c0020328 <ATA::readyForCommand()+0x46>
c0020308:	43                   	inc    ebx
c0020309:	83 fb 63             	cmp    ebx,0x63
c002030c:	7e dd                	jle    c00202eb <ATA::readyForCommand()+0x9>
c002030e:	51                   	push   ecx
c002030f:	51                   	push   ecx
c0020310:	6a 00                	push   0x0
c0020312:	6a 0a                	push   0xa
c0020314:	e8 03 6c ff ff       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c0020319:	83 c4 10             	add    esp,0x10
c002031c:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0020322:	75 c7                	jne    c00202eb <ATA::readyForCommand()+0x9>
c0020324:	31 c0                	xor    eax,eax
c0020326:	eb 02                	jmp    c002032a <ATA::readyForCommand()+0x48>
c0020328:	b0 01                	mov    al,0x1
c002032a:	5a                   	pop    edx
c002032b:	5b                   	pop    ebx
c002032c:	5e                   	pop    esi
c002032d:	c3                   	ret    

c002032e <ATA::access(unsigned long long, int, void*, bool)>:
c002032e:	55                   	push   ebp
c002032f:	57                   	push   edi
c0020330:	56                   	push   esi
c0020331:	53                   	push   ebx
c0020332:	83 ec 2c             	sub    esp,0x2c
c0020335:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020339:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002033d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020341:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020345:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0020349:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002034d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020351:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002035b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020361:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020365:	c1 e0 06             	shl    eax,0x6
c0020368:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0020370:	74 5d                	je     c00203cf <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0020372:	89 fa                	mov    edx,edi
c0020374:	89 f0                	mov    eax,esi
c0020376:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002037a:	c1 ea 1c             	shr    edx,0x1c
c002037d:	89 d1                	mov    ecx,edx
c002037f:	09 c1                	or     ecx,eax
c0020381:	74 25                	je     c00203a8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0020383:	31 ed                	xor    ebp,ebp
c0020385:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002038c:	89 fa                	mov    edx,edi
c002038e:	89 f0                	mov    eax,esi
c0020390:	0f ad d0             	shrd   eax,edx,cl
c0020393:	d3 ea                	shr    edx,cl
c0020395:	f6 c1 20             	test   cl,0x20
c0020398:	74 02                	je     c002039c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002039a:	89 d0                	mov    eax,edx
c002039c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00203a0:	45                   	inc    ebp
c00203a1:	83 fd 06             	cmp    ebp,0x6
c00203a4:	75 df                	jne    c0020385 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00203a6:	eb 76                	jmp    c002041e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00203a8:	89 f0                	mov    eax,esi
c00203aa:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00203af:	89 fa                	mov    edx,edi
c00203b1:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00203b8:	0f ac d0 10          	shrd   eax,edx,0x10
c00203bc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00203c1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00203c5:	c1 ee 18             	shr    esi,0x18
c00203c8:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00203cd:	eb 56                	jmp    c0020425 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00203cf:	6a 00                	push   0x0
c00203d1:	6a 3f                	push   0x3f
c00203d3:	57                   	push   edi
c00203d4:	56                   	push   esi
c00203d5:	e8 ba 20 00 00       	call   c0022494 <__umoddi3>
c00203da:	83 c4 10             	add    esp,0x10
c00203dd:	40                   	inc    eax
c00203de:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00203e2:	6a 00                	push   0x0
c00203e4:	68 f0 03 00 00       	push   0x3f0
c00203e9:	57                   	push   edi
c00203ea:	56                   	push   esi
c00203eb:	e8 a4 1f 00 00       	call   c0022394 <__udivdi3>
c00203f0:	83 c4 10             	add    esp,0x10
c00203f3:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00203f8:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00203ff:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0020404:	6a 00                	push   0x0
c0020406:	6a 3f                	push   0x3f
c0020408:	57                   	push   edi
c0020409:	56                   	push   esi
c002040a:	e8 85 1f 00 00       	call   c0022394 <__udivdi3>
c002040f:	83 c4 10             	add    esp,0x10
c0020412:	83 e0 0f             	and    eax,0xf
c0020415:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002041a:	89 c6                	mov    esi,eax
c002041c:	eb 07                	jmp    c0020425 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002041e:	31 f6                	xor    esi,esi
c0020420:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0020425:	55                   	push   ebp
c0020426:	6a 00                	push   0x0
c0020428:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002042f:	50                   	push   eax
c0020430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020434:	e8 d9 ee ff ff       	call   c001f312 <IDE::enableIRQs(unsigned char, bool)>
c0020439:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002043c:	e8 a1 fe ff ff       	call   c00202e2 <ATA::readyForCommand()>
c0020441:	83 c4 10             	add    esp,0x10
c0020444:	84 c0                	test   al,al
c0020446:	75 0a                	jne    c0020452 <ATA::access(unsigned long long, int, void*, bool)+0x124>
c0020448:	be 01 00 00 00       	mov    esi,0x1
c002044d:	e9 c2 02 00 00       	jmp    c0020714 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c0020452:	fa                   	cli    
c0020453:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0020459:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002045f:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c0020464:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002046a:	75 0a                	jne    c0020476 <ATA::access(unsigned long long, int, void*, bool)+0x148>
c002046c:	c1 e0 04             	shl    eax,0x4
c002046f:	09 c6                	or     esi,eax
c0020471:	83 ce a0             	or     esi,0xffffffa0
c0020474:	eb 08                	jmp    c002047e <ATA::access(unsigned long long, int, void*, bool)+0x150>
c0020476:	c1 e0 04             	shl    eax,0x4
c0020479:	09 c6                	or     esi,eax
c002047b:	83 ce e0             	or     esi,0xffffffe0
c002047e:	89 f0                	mov    eax,esi
c0020480:	0f b6 d2             	movzx  edx,dl
c0020483:	0f b6 f0             	movzx  esi,al
c0020486:	56                   	push   esi
c0020487:	6a 06                	push   0x6
c0020489:	52                   	push   edx
c002048a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020490:	e8 73 ec ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020495:	83 c4 10             	add    esp,0x10
c0020498:	6a 00                	push   0x0
c002049a:	6a 01                	push   0x1
c002049c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00204a3:	50                   	push   eax
c00204a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00204aa:	e8 59 ec ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204af:	83 c4 10             	add    esp,0x10
c00204b2:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00204b7:	83 f8 02             	cmp    eax,0x2
c00204ba:	75 6e                	jne    c002052a <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c00204bc:	6a 00                	push   0x0
c00204be:	6a 08                	push   0x8
c00204c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00204c7:	50                   	push   eax
c00204c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00204ce:	e8 35 ec ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204d3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00204d8:	50                   	push   eax
c00204d9:	6a 09                	push   0x9
c00204db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00204e2:	50                   	push   eax
c00204e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00204e9:	e8 1a ec ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204ee:	83 c4 20             	add    esp,0x20
c00204f1:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00204f6:	50                   	push   eax
c00204f7:	6a 0a                	push   0xa
c00204f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020500:	50                   	push   eax
c0020501:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020507:	e8 fc eb ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002050c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0020511:	50                   	push   eax
c0020512:	6a 0b                	push   0xb
c0020514:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002051b:	50                   	push   eax
c002051c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020522:	e8 e1 eb ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020527:	83 c4 20             	add    esp,0x20
c002052a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002052f:	50                   	push   eax
c0020530:	6a 02                	push   0x2
c0020532:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020539:	50                   	push   eax
c002053a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020540:	e8 c3 eb ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020545:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002054a:	50                   	push   eax
c002054b:	6a 03                	push   0x3
c002054d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020554:	50                   	push   eax
c0020555:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002055b:	e8 a8 eb ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020560:	83 c4 20             	add    esp,0x20
c0020563:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0020568:	50                   	push   eax
c0020569:	6a 04                	push   0x4
c002056b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020572:	50                   	push   eax
c0020573:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020579:	e8 8a eb ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002057e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020583:	50                   	push   eax
c0020584:	6a 05                	push   0x5
c0020586:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002058d:	50                   	push   eax
c002058e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020594:	e8 6f eb ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020599:	83 c4 20             	add    esp,0x20
c002059c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00205a1:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00205a6:	74 13                	je     c00205bb <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c00205a8:	83 f8 02             	cmp    eax,0x2
c00205ab:	74 20                	je     c00205cd <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c00205ad:	48                   	dec    eax
c00205ae:	0f 85 94 fe ff ff    	jne    c0020448 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c00205b4:	b8 30 00 00 00       	mov    eax,0x30
c00205b9:	eb 1e                	jmp    c00205d9 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c00205bb:	83 f8 02             	cmp    eax,0x2
c00205be:	74 14                	je     c00205d4 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c00205c0:	48                   	dec    eax
c00205c1:	b8 20 00 00 00       	mov    eax,0x20
c00205c6:	74 11                	je     c00205d9 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c00205c8:	e9 7b fe ff ff       	jmp    c0020448 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c00205cd:	b8 34 00 00 00       	mov    eax,0x34
c00205d2:	eb 05                	jmp    c00205d9 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c00205d4:	b8 24 00 00 00       	mov    eax,0x24
c00205d9:	50                   	push   eax
c00205da:	6a 07                	push   0x7
c00205dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00205e3:	50                   	push   eax
c00205e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00205ea:	e8 19 eb ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00205ef:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c00205f6:	83 c4 10             	add    esp,0x10
c00205f9:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0020600:	75 01                	jne    c0020603 <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c0020602:	fb                   	sti    
c0020603:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0020607:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002060c:	85 f6                	test   esi,esi
c002060e:	0f 84 dd 00 00 00    	je     c00206f1 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020614:	57                   	push   edi
c0020615:	6a 01                	push   0x1
c0020617:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002061e:	50                   	push   eax
c002061f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020625:	e8 84 f8 ff ff       	call   c001feae <IDE::polling(unsigned char, unsigned int)>
c002062a:	83 c4 10             	add    esp,0x10
c002062d:	0f b6 c0             	movzx  eax,al
c0020630:	85 c0                	test   eax,eax
c0020632:	74 23                	je     c0020657 <ATA::access(unsigned long long, int, void*, bool)+0x329>
c0020634:	50                   	push   eax
c0020635:	89 c6                	mov    esi,eax
c0020637:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002063e:	50                   	push   eax
c002063f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020646:	50                   	push   eax
c0020647:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002064d:	e8 a2 f7 ff ff       	call   c001fdf4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020652:	e9 ba 00 00 00       	jmp    c0020711 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c0020657:	85 ed                	test   ebp,ebp
c0020659:	74 49                	je     c00206a4 <ATA::access(unsigned long long, int, void*, bool)+0x376>
c002065b:	fa                   	cli    
c002065c:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0020662:	31 c9                	xor    ecx,ecx
c0020664:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020668:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002066c:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c0020670:	51                   	push   ecx
c0020671:	51                   	push   ecx
c0020672:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020679:	50                   	push   eax
c002067a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020680:	e8 71 ea ff ff       	call   c001f0f6 <IDE::getBase(unsigned char)>
c0020685:	89 c2                	mov    edx,eax
c0020687:	89 f8                	mov    eax,edi
c0020689:	66 ef                	out    dx,ax
c002068b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002068f:	83 c4 10             	add    esp,0x10
c0020692:	41                   	inc    ecx
c0020693:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0020699:	75 c9                	jne    c0020664 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c002069b:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c00206a2:	eb 35                	jmp    c00206d9 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c00206a4:	fa                   	cli    
c00206a5:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c00206ab:	52                   	push   edx
c00206ac:	52                   	push   edx
c00206ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00206b4:	50                   	push   eax
c00206b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00206bb:	e8 36 ea ff ff       	call   c001f0f6 <IDE::getBase(unsigned char)>
c00206c0:	b9 00 01 00 00       	mov    ecx,0x100
c00206c5:	89 c2                	mov    edx,eax
c00206c7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00206cb:	fc                   	cld    
c00206cc:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00206cf:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c00206d6:	83 c4 10             	add    esp,0x10
c00206d9:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c00206e0:	75 01                	jne    c00206e3 <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c00206e2:	fb                   	sti    
c00206e3:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00206eb:	4e                   	dec    esi
c00206ec:	e9 1b ff ff ff       	jmp    c002060c <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c00206f1:	31 f6                	xor    esi,esi
c00206f3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00206f8:	74 1a                	je     c0020714 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c00206fa:	50                   	push   eax
c00206fb:	50                   	push   eax
c00206fc:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0020701:	83 f8 02             	cmp    eax,0x2
c0020704:	0f 94 c0             	sete   al
c0020707:	0f b6 c0             	movzx  eax,al
c002070a:	50                   	push   eax
c002070b:	53                   	push   ebx
c002070c:	e8 83 fb ff ff       	call   c0020294 <ATA::flush(bool)>
c0020711:	83 c4 10             	add    esp,0x10
c0020714:	83 c4 2c             	add    esp,0x2c
c0020717:	89 f0                	mov    eax,esi
c0020719:	5b                   	pop    ebx
c002071a:	5e                   	pop    esi
c002071b:	5f                   	pop    edi
c002071c:	5d                   	pop    ebp
c002071d:	c3                   	ret    

c002071e <ATA::read(unsigned long long, int, void*)>:
c002071e:	57                   	push   edi
c002071f:	b8 04 00 00 00       	mov    eax,0x4
c0020724:	56                   	push   esi
c0020725:	53                   	push   ebx
c0020726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002072a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002072e:	8d 7a ff             	lea    edi,[edx-0x1]
c0020731:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020735:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020739:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002073f:	77 25                	ja     c0020766 <ATA::read(unsigned long long, int, void*)+0x48>
c0020741:	b8 06 00 00 00       	mov    eax,0x6
c0020746:	85 f6                	test   esi,esi
c0020748:	74 1c                	je     c0020766 <ATA::read(unsigned long long, int, void*)+0x48>
c002074a:	50                   	push   eax
c002074b:	50                   	push   eax
c002074c:	6a 00                	push   0x0
c002074e:	56                   	push   esi
c002074f:	52                   	push   edx
c0020750:	53                   	push   ebx
c0020751:	51                   	push   ecx
c0020752:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020756:	e8 d3 fb ff ff       	call   c002032e <ATA::access(unsigned long long, int, void*, bool)>
c002075b:	83 c4 20             	add    esp,0x20
c002075e:	85 c0                	test   eax,eax
c0020760:	0f 95 c0             	setne  al
c0020763:	0f b6 c0             	movzx  eax,al
c0020766:	5b                   	pop    ebx
c0020767:	5e                   	pop    esi
c0020768:	5f                   	pop    edi
c0020769:	c3                   	ret    

c002076a <ATA::write(unsigned long long, int, void*)>:
c002076a:	57                   	push   edi
c002076b:	b8 04 00 00 00       	mov    eax,0x4
c0020770:	56                   	push   esi
c0020771:	53                   	push   ebx
c0020772:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020776:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002077a:	8d 7a ff             	lea    edi,[edx-0x1]
c002077d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020781:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020785:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002078b:	77 25                	ja     c00207b2 <ATA::write(unsigned long long, int, void*)+0x48>
c002078d:	b8 06 00 00 00       	mov    eax,0x6
c0020792:	85 f6                	test   esi,esi
c0020794:	74 1c                	je     c00207b2 <ATA::write(unsigned long long, int, void*)+0x48>
c0020796:	50                   	push   eax
c0020797:	50                   	push   eax
c0020798:	6a 01                	push   0x1
c002079a:	56                   	push   esi
c002079b:	52                   	push   edx
c002079c:	53                   	push   ebx
c002079d:	51                   	push   ecx
c002079e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00207a2:	e8 87 fb ff ff       	call   c002032e <ATA::access(unsigned long long, int, void*, bool)>
c00207a7:	83 c4 20             	add    esp,0x20
c00207aa:	85 c0                	test   eax,eax
c00207ac:	0f 95 c0             	setne  al
c00207af:	0f b6 c0             	movzx  eax,al
c00207b2:	5b                   	pop    ebx
c00207b3:	5e                   	pop    esi
c00207b4:	5f                   	pop    edi
c00207b5:	c3                   	ret    

c00207b6 <ATA::detectCHS()>:
c00207b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00207ba:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00207c0:	c1 e0 06             	shl    eax,0x6
c00207c3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00207c9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00207d3:	c7 44 24 04 14 ac 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ac14
c00207db:	e9 b0 f9 fe ff       	jmp    c0010190 <KePanic(char const*)>

c00207e0 <ATA::open(int, int, void*)>:
c00207e0:	53                   	push   ebx
c00207e1:	83 ec 08             	sub    esp,0x8
c00207e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00207e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00207ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00207f0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00207f6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00207fc:	c1 e0 06             	shl    eax,0x6
c00207ff:	01 d0                	add    eax,edx
c0020801:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0020808:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002080e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0020815:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002081f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0020825:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002082c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0020833:	75 0c                	jne    c0020841 <ATA::open(int, int, void*)+0x61>
c0020835:	83 ec 0c             	sub    esp,0xc
c0020838:	53                   	push   ebx
c0020839:	e8 78 ff ff ff       	call   c00207b6 <ATA::detectCHS()>
c002083e:	83 c4 10             	add    esp,0x10
c0020841:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020847:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002084d:	c1 e0 06             	shl    eax,0x6
c0020850:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0020857:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020861:	d1 e8                	shr    eax,1
c0020863:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020869:	6a 04                	push   0x4
c002086b:	6a 0c                	push   0xc
c002086d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020874:	50                   	push   eax
c0020875:	52                   	push   edx
c0020876:	e8 8d e8 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002087b:	90                   	nop
c002087c:	90                   	nop
c002087d:	6a 00                	push   0x0
c002087f:	6a 0c                	push   0xc
c0020881:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020888:	50                   	push   eax
c0020889:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002088f:	e8 74 e8 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020894:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002089a:	83 c4 20             	add    esp,0x20
c002089d:	c1 e0 06             	shl    eax,0x6
c00208a0:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c00208a6:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c00208ad:	0f 84 00 01 00 00    	je     c00209b3 <ATA::open(int, int, void*)+0x1d3>
c00208b3:	83 ec 0c             	sub    esp,0xc
c00208b6:	6a 08                	push   0x8
c00208b8:	e8 ae fb fe ff       	call   c001046b <Phys::allocateContiguousPages(int)>
c00208bd:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00208c3:	c7 04 24 26 ac 02 c0 	mov    DWORD PTR [esp],0xc002ac26
c00208ca:	e8 ad 66 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00208cf:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00208d6:	e8 4c 2e ff ff       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c00208db:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00208e1:	6a 03                	push   0x3
c00208e3:	50                   	push   eax
c00208e4:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00208ea:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c00208f0:	e8 15 35 ff ff       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c00208f5:	83 c4 20             	add    esp,0x20
c00208f8:	e8 87 fa fe ff       	call   c0010384 <Phys::allocatePage()>
c00208fd:	83 ec 0c             	sub    esp,0xc
c0020900:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c0020906:	6a 01                	push   0x1
c0020908:	e8 1a 2e ff ff       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c002090d:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c0020913:	6a 03                	push   0x3
c0020915:	50                   	push   eax
c0020916:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c002091c:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c0020922:	e8 e3 34 ff ff       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0020927:	83 c4 14             	add    esp,0x14
c002092a:	68 5f ac 02 c0       	push   0xc002ac5f
c002092f:	e8 48 66 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020934:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c002093b:	50                   	push   eax
c002093c:	6a 12                	push   0x12
c002093e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020945:	50                   	push   eax
c0020946:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002094c:	e8 b7 e7 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020951:	83 c4 20             	add    esp,0x20
c0020954:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c002095a:	0f b6 c4             	movzx  eax,ah
c002095d:	50                   	push   eax
c002095e:	6a 13                	push   0x13
c0020960:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020967:	50                   	push   eax
c0020968:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002096e:	e8 95 e7 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020973:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c002097a:	50                   	push   eax
c002097b:	6a 14                	push   0x14
c002097d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020984:	50                   	push   eax
c0020985:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002098b:	e8 78 e7 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020990:	83 c4 20             	add    esp,0x20
c0020993:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c002099a:	50                   	push   eax
c002099b:	6a 15                	push   0x15
c002099d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00209a4:	50                   	push   eax
c00209a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00209ab:	e8 58 e7 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00209b0:	83 c4 10             	add    esp,0x10
c00209b3:	83 ec 0c             	sub    esp,0xc
c00209b6:	53                   	push   ebx
c00209b7:	e8 ba 99 fe ff       	call   c000a376 <PhysicalDisk::startCache()>
c00209bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00209bf:	e8 1e a8 fe ff       	call   c000b1e2 <createPartitionsForDisk(PhysicalDisk*)>
c00209c4:	31 c0                	xor    eax,eax
c00209c6:	83 c4 18             	add    esp,0x18
c00209c9:	5b                   	pop    ebx
c00209ca:	c3                   	ret    

c00209cb <combineCharAndColour(char, unsigned char)>:
c00209cb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00209d0:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c00209d6:	c1 e0 08             	shl    eax,0x8
c00209d9:	09 d0                	or     eax,edx
c00209db:	c3                   	ret    

c00209dc <combineColours(unsigned char, unsigned char)>:
c00209dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00209e1:	c1 e0 04             	shl    eax,0x4
c00209e4:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c00209e8:	c3                   	ret    
c00209e9:	90                   	nop

c00209ea <ATAPI::write(unsigned long long, int, void*)>:
c00209ea:	b8 03 00 00 00       	mov    eax,0x3
c00209ef:	c3                   	ret    

c00209f0 <ATAPI::close(int, int, void*)>:
c00209f0:	83 ec 0c             	sub    esp,0xc
c00209f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00209fd:	85 c0                	test   eax,eax
c00209ff:	74 0c                	je     c0020a0d <ATAPI::close(int, int, void*)+0x1d>
c0020a01:	83 ec 0c             	sub    esp,0xc
c0020a04:	8b 10                	mov    edx,DWORD PTR [eax]
c0020a06:	50                   	push   eax
c0020a07:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020a0a:	83 c4 10             	add    esp,0x10
c0020a0d:	31 c0                	xor    eax,eax
c0020a0f:	83 c4 0c             	add    esp,0xc
c0020a12:	c3                   	ret    
c0020a13:	90                   	nop

c0020a14 <ATAPI::ATAPI()>:
c0020a14:	83 ec 0c             	sub    esp,0xc
c0020a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a1b:	83 ec 04             	sub    esp,0x4
c0020a1e:	68 00 08 00 00       	push   0x800
c0020a23:	68 11 ae 02 c0       	push   0xc002ae11
c0020a28:	50                   	push   eax
c0020a29:	e8 e0 98 fe ff       	call   c000a30e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020a2e:	83 c4 10             	add    esp,0x10
c0020a31:	ba 20 ad 02 c0       	mov    edx,0xc002ad20
c0020a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a3a:	89 10                	mov    DWORD PTR [eax],edx
c0020a3c:	90                   	nop
c0020a3d:	83 c4 0c             	add    esp,0xc
c0020a40:	c3                   	ret    
c0020a41:	90                   	nop

c0020a42 <ATAPI::readyForCommand()>:
c0020a42:	56                   	push   esi
c0020a43:	53                   	push   ebx
c0020a44:	31 db                	xor    ebx,ebx
c0020a46:	50                   	push   eax
c0020a47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020a4b:	50                   	push   eax
c0020a4c:	6a 0c                	push   0xc
c0020a4e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020a55:	50                   	push   eax
c0020a56:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020a5c:	e8 67 e7 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c0020a61:	83 c4 10             	add    esp,0x10
c0020a64:	a8 88                	test   al,0x88
c0020a66:	74 26                	je     c0020a8e <ATAPI::readyForCommand()+0x4c>
c0020a68:	43                   	inc    ebx
c0020a69:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0020a6f:	7e da                	jle    c0020a4b <ATAPI::readyForCommand()+0x9>
c0020a71:	51                   	push   ecx
c0020a72:	51                   	push   ecx
c0020a73:	6a 00                	push   0x0
c0020a75:	68 5e 01 00 00       	push   0x15e
c0020a7a:	e8 9d 64 ff ff       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c0020a7f:	83 c4 10             	add    esp,0x10
c0020a82:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0020a88:	75 c1                	jne    c0020a4b <ATAPI::readyForCommand()+0x9>
c0020a8a:	31 c0                	xor    eax,eax
c0020a8c:	eb 02                	jmp    c0020a90 <ATAPI::readyForCommand()+0x4e>
c0020a8e:	b0 01                	mov    al,0x1
c0020a90:	5a                   	pop    edx
c0020a91:	5b                   	pop    ebx
c0020a92:	5e                   	pop    esi
c0020a93:	c3                   	ret    

c0020a94 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020a94:	55                   	push   ebp
c0020a95:	57                   	push   edi
c0020a96:	56                   	push   esi
c0020a97:	53                   	push   ebx
c0020a98:	83 ec 20             	sub    esp,0x20
c0020a9b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020a9f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0020aa3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020aa7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020aab:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020aaf:	6a 01                	push   0x1
c0020ab1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020ab8:	50                   	push   eax
c0020ab9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020abf:	e8 4e e8 ff ff       	call   c001f312 <IDE::enableIRQs(unsigned char, bool)>
c0020ac4:	5e                   	pop    esi
c0020ac5:	58                   	pop    eax
c0020ac6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020acd:	50                   	push   eax
c0020ace:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020ad4:	e8 09 e6 ff ff       	call   c001f0e2 <IDE::prepareInterrupt(unsigned char)>
c0020ad9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020adc:	e8 61 ff ff ff       	call   c0020a42 <ATAPI::readyForCommand()>
c0020ae1:	83 c4 10             	add    esp,0x10
c0020ae4:	84 c0                	test   al,al
c0020ae6:	75 0a                	jne    c0020af2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020ae8:	bb 01 00 00 00       	mov    ebx,0x1
c0020aed:	e9 60 02 00 00       	jmp    c0020d52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020af2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0020af8:	c1 e0 04             	shl    eax,0x4
c0020afb:	0f b6 c0             	movzx  eax,al
c0020afe:	50                   	push   eax
c0020aff:	6a 06                	push   0x6
c0020b01:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020b08:	50                   	push   eax
c0020b09:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020b0f:	e8 f4 e5 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020b14:	6a 00                	push   0x0
c0020b16:	6a 01                	push   0x1
c0020b18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020b1f:	50                   	push   eax
c0020b20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020b26:	e8 dd e5 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020b2b:	83 c4 20             	add    esp,0x20
c0020b2e:	0f b6 c3             	movzx  eax,bl
c0020b31:	0f b6 df             	movzx  ebx,bh
c0020b34:	50                   	push   eax
c0020b35:	6a 04                	push   0x4
c0020b37:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020b3e:	50                   	push   eax
c0020b3f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020b45:	e8 be e5 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020b4a:	53                   	push   ebx
c0020b4b:	6a 05                	push   0x5
c0020b4d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020b54:	50                   	push   eax
c0020b55:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020b5b:	e8 a8 e5 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020b60:	83 c4 20             	add    esp,0x20
c0020b63:	68 a0 00 00 00       	push   0xa0
c0020b68:	6a 07                	push   0x7
c0020b6a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020b71:	50                   	push   eax
c0020b72:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020b78:	e8 8b e5 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020b7d:	83 c4 0c             	add    esp,0xc
c0020b80:	6a 01                	push   0x1
c0020b82:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020b89:	50                   	push   eax
c0020b8a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020b90:	e8 19 f3 ff ff       	call   c001feae <IDE::polling(unsigned char, unsigned int)>
c0020b95:	83 c4 10             	add    esp,0x10
c0020b98:	0f b6 d8             	movzx  ebx,al
c0020b9b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c0020ba1:	85 db                	test   ebx,ebx
c0020ba3:	74 20                	je     c0020bc5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0020ba5:	53                   	push   ebx
c0020ba6:	0f b6 c0             	movzx  eax,al
c0020ba9:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c0020bb0:	52                   	push   edx
c0020bb1:	50                   	push   eax
c0020bb2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020bb8:	e8 37 f2 ff ff       	call   c001fdf4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020bbd:	83 c4 10             	add    esp,0x10
c0020bc0:	e9 8d 01 00 00       	jmp    c0020d52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020bc5:	0f b6 c0             	movzx  eax,al
c0020bc8:	53                   	push   ebx
c0020bc9:	53                   	push   ebx
c0020bca:	50                   	push   eax
c0020bcb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020bd1:	e8 20 e5 ff ff       	call   c001f0f6 <IDE::getBase(unsigned char)>
c0020bd6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020bda:	b9 06 00 00 00       	mov    ecx,0x6
c0020bdf:	89 c2                	mov    edx,eax
c0020be1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020be4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020be8:	83 c4 10             	add    esp,0x10
c0020beb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0020bf0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020bf4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020bfa:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020c01:	85 db                	test   ebx,ebx
c0020c03:	0f 84 ec 00 00 00    	je     c0020cf5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c0020c09:	51                   	push   ecx
c0020c0a:	51                   	push   ecx
c0020c0b:	52                   	push   edx
c0020c0c:	50                   	push   eax
c0020c0d:	e8 64 e6 ff ff       	call   c001f276 <IDE::waitInterrupt(unsigned char)>
c0020c12:	83 c4 10             	add    esp,0x10
c0020c15:	84 c0                	test   al,al
c0020c17:	0f 84 cb fe ff ff    	je     c0020ae8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020c1d:	56                   	push   esi
c0020c1e:	56                   	push   esi
c0020c1f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020c26:	50                   	push   eax
c0020c27:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020c2d:	e8 b0 e4 ff ff       	call   c001f0e2 <IDE::prepareInterrupt(unsigned char)>
c0020c32:	83 c4 0c             	add    esp,0xc
c0020c35:	6a 04                	push   0x4
c0020c37:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020c3e:	50                   	push   eax
c0020c3f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020c45:	e8 7e e5 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c0020c4a:	83 c4 0c             	add    esp,0xc
c0020c4d:	89 c6                	mov    esi,eax
c0020c4f:	6a 05                	push   0x5
c0020c51:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020c58:	50                   	push   eax
c0020c59:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020c5f:	e8 64 e5 ff ff       	call   c001f1c8 <IDE::read(unsigned char, unsigned char)>
c0020c64:	89 f1                	mov    ecx,esi
c0020c66:	0f b6 c0             	movzx  eax,al
c0020c69:	0f b6 f1             	movzx  esi,cl
c0020c6c:	c1 e0 08             	shl    eax,0x8
c0020c6f:	09 c6                	or     esi,eax
c0020c71:	d1 fe                	sar    esi,1
c0020c73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0020c77:	83 c4 10             	add    esp,0x10
c0020c7a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020c7f:	74 41                	je     c0020cc2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c0020c81:	31 c9                	xor    ecx,ecx
c0020c83:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020c89:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020c90:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020c94:	75 0a                	jne    c0020ca0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c0020c96:	01 c9                	add    ecx,ecx
c0020c98:	01 cd                	add    ebp,ecx
c0020c9a:	4b                   	dec    ebx
c0020c9b:	e9 54 ff ff ff       	jmp    c0020bf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c0020ca0:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020ca5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020ca9:	51                   	push   ecx
c0020caa:	51                   	push   ecx
c0020cab:	52                   	push   edx
c0020cac:	50                   	push   eax
c0020cad:	e8 44 e4 ff ff       	call   c001f0f6 <IDE::getBase(unsigned char)>
c0020cb2:	89 c2                	mov    edx,eax
c0020cb4:	89 f0                	mov    eax,esi
c0020cb6:	66 ef                	out    dx,ax
c0020cb8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020cbc:	83 c4 10             	add    esp,0x10
c0020cbf:	41                   	inc    ecx
c0020cc0:	eb c1                	jmp    c0020c83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c0020cc2:	31 f6                	xor    esi,esi
c0020cc4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020cca:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020cd1:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020cd5:	75 06                	jne    c0020cdd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c0020cd7:	01 f6                	add    esi,esi
c0020cd9:	01 f5                	add    ebp,esi
c0020cdb:	eb bd                	jmp    c0020c9a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c0020cdd:	51                   	push   ecx
c0020cde:	51                   	push   ecx
c0020cdf:	52                   	push   edx
c0020ce0:	50                   	push   eax
c0020ce1:	e8 10 e4 ff ff       	call   c001f0f6 <IDE::getBase(unsigned char)>
c0020ce6:	89 c2                	mov    edx,eax
c0020ce8:	66 ed                	in     ax,dx
c0020cea:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0020cef:	83 c4 10             	add    esp,0x10
c0020cf2:	46                   	inc    esi
c0020cf3:	eb cf                	jmp    c0020cc4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c0020cf5:	51                   	push   ecx
c0020cf6:	51                   	push   ecx
c0020cf7:	52                   	push   edx
c0020cf8:	50                   	push   eax
c0020cf9:	e8 78 e5 ff ff       	call   c001f276 <IDE::waitInterrupt(unsigned char)>
c0020cfe:	83 c4 10             	add    esp,0x10
c0020d01:	84 c0                	test   al,al
c0020d03:	0f 84 df fd ff ff    	je     c0020ae8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020d09:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020d0e:	52                   	push   edx
c0020d0f:	52                   	push   edx
c0020d10:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020d17:	50                   	push   eax
c0020d18:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020d1e:	e8 bf e3 ff ff       	call   c001f0e2 <IDE::prepareInterrupt(unsigned char)>
c0020d23:	83 c4 10             	add    esp,0x10
c0020d26:	50                   	push   eax
c0020d27:	50                   	push   eax
c0020d28:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020d2f:	50                   	push   eax
c0020d30:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020d36:	e8 bb e3 ff ff       	call   c001f0f6 <IDE::getBase(unsigned char)>
c0020d3b:	8d 50 07             	lea    edx,[eax+0x7]
c0020d3e:	ec                   	in     al,dx
c0020d3f:	83 c4 10             	add    esp,0x10
c0020d42:	a8 88                	test   al,0x88
c0020d44:	74 0a                	je     c0020d50 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c0020d46:	4b                   	dec    ebx
c0020d47:	75 dd                	jne    c0020d26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c0020d49:	bb 02 00 00 00       	mov    ebx,0x2
c0020d4e:	eb 02                	jmp    c0020d52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020d50:	31 db                	xor    ebx,ebx
c0020d52:	83 c4 1c             	add    esp,0x1c
c0020d55:	89 d8                	mov    eax,ebx
c0020d57:	5b                   	pop    ebx
c0020d58:	5e                   	pop    esi
c0020d59:	5f                   	pop    edi
c0020d5a:	5d                   	pop    ebp
c0020d5b:	c3                   	ret    

c0020d5c <ATAPI::diskRemoved()>:
c0020d5c:	53                   	push   ebx
c0020d5d:	83 ec 14             	sub    esp,0x14
c0020d60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020d64:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020d6b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020d71:	e8 5a a1 fe ff       	call   c000aed0 <LogicalDisk::unmount()>
c0020d76:	58                   	pop    eax
c0020d77:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020d7d:	e8 46 ab fe ff       	call   c000b8c8 <VCache::writeWriteBuffer()>
c0020d82:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020d88:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d8c:	83 c4 18             	add    esp,0x18
c0020d8f:	5b                   	pop    ebx
c0020d90:	e9 23 ab fe ff       	jmp    c000b8b8 <VCache::invalidateReadBuffer()>
c0020d95:	90                   	nop

c0020d96 <ATAPI::eject()>:
c0020d96:	57                   	push   edi
c0020d97:	b9 03 00 00 00       	mov    ecx,0x3
c0020d9c:	53                   	push   ebx
c0020d9d:	83 ec 14             	sub    esp,0x14
c0020da0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020da4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020da8:	fc                   	cld    
c0020da9:	31 c0                	xor    eax,eax
c0020dab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020dad:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020db2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020db7:	50                   	push   eax
c0020db8:	50                   	push   eax
c0020db9:	6a 00                	push   0x0
c0020dbb:	6a 00                	push   0x0
c0020dbd:	6a 00                	push   0x0
c0020dbf:	6a 02                	push   0x2
c0020dc1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020dc5:	50                   	push   eax
c0020dc6:	53                   	push   ebx
c0020dc7:	e8 c8 fc ff ff       	call   c0020a94 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020dcc:	83 c4 14             	add    esp,0x14
c0020dcf:	53                   	push   ebx
c0020dd0:	e8 87 ff ff ff       	call   c0020d5c <ATAPI::diskRemoved()>
c0020dd5:	83 c4 24             	add    esp,0x24
c0020dd8:	31 c0                	xor    eax,eax
c0020dda:	5b                   	pop    ebx
c0020ddb:	5f                   	pop    edi
c0020ddc:	c3                   	ret    
c0020ddd:	90                   	nop

c0020dde <ATAPI::diskInserted()>:
c0020dde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020de2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020de9:	c3                   	ret    

c0020dea <ATAPI::detectMedia()>:
c0020dea:	56                   	push   esi
c0020deb:	53                   	push   ebx
c0020dec:	83 ec 28             	sub    esp,0x28
c0020def:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020df3:	6a 0c                	push   0xc
c0020df5:	6a 00                	push   0x0
c0020df7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020dfb:	56                   	push   esi
c0020dfc:	e8 ef f6 fd ff       	call   c00004f0 <memset>
c0020e01:	58                   	pop    eax
c0020e02:	5a                   	pop    edx
c0020e03:	6a 00                	push   0x0
c0020e05:	6a 00                	push   0x0
c0020e07:	6a 00                	push   0x0
c0020e09:	6a 00                	push   0x0
c0020e0b:	56                   	push   esi
c0020e0c:	53                   	push   ebx
c0020e0d:	e8 82 fc ff ff       	call   c0020a94 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020e12:	83 c4 1c             	add    esp,0x1c
c0020e15:	6a 0c                	push   0xc
c0020e17:	6a 00                	push   0x0
c0020e19:	56                   	push   esi
c0020e1a:	e8 d1 f6 fd ff       	call   c00004f0 <memset>
c0020e1f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020e24:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020e29:	59                   	pop    ecx
c0020e2a:	58                   	pop    eax
c0020e2b:	6a 01                	push   0x1
c0020e2d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020e31:	50                   	push   eax
c0020e32:	6a 00                	push   0x0
c0020e34:	6a 12                	push   0x12
c0020e36:	56                   	push   esi
c0020e37:	53                   	push   ebx
c0020e38:	e8 57 fc ff ff       	call   c0020a94 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020e3d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020e41:	83 c4 20             	add    esp,0x20
c0020e44:	83 e0 7f             	and    eax,0x7f
c0020e47:	83 f8 70             	cmp    eax,0x70
c0020e4a:	74 15                	je     c0020e61 <ATAPI::detectMedia()+0x77>
c0020e4c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020e53:	75 0c                	jne    c0020e61 <ATAPI::detectMedia()+0x77>
c0020e55:	83 ec 0c             	sub    esp,0xc
c0020e58:	53                   	push   ebx
c0020e59:	e8 80 ff ff ff       	call   c0020dde <ATAPI::diskInserted()>
c0020e5e:	83 c4 10             	add    esp,0x10
c0020e61:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020e65:	83 e0 0f             	and    eax,0xf
c0020e68:	83 f8 02             	cmp    eax,0x2
c0020e6b:	75 1b                	jne    c0020e88 <ATAPI::detectMedia()+0x9e>
c0020e6d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020e72:	75 2d                	jne    c0020ea1 <ATAPI::detectMedia()+0xb7>
c0020e74:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020e7b:	74 24                	je     c0020ea1 <ATAPI::detectMedia()+0xb7>
c0020e7d:	83 ec 0c             	sub    esp,0xc
c0020e80:	53                   	push   ebx
c0020e81:	e8 d6 fe ff ff       	call   c0020d5c <ATAPI::diskRemoved()>
c0020e86:	eb 16                	jmp    c0020e9e <ATAPI::detectMedia()+0xb4>
c0020e88:	85 c0                	test   eax,eax
c0020e8a:	75 15                	jne    c0020ea1 <ATAPI::detectMedia()+0xb7>
c0020e8c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020e93:	75 0c                	jne    c0020ea1 <ATAPI::detectMedia()+0xb7>
c0020e95:	83 ec 0c             	sub    esp,0xc
c0020e98:	53                   	push   ebx
c0020e99:	e8 40 ff ff ff       	call   c0020dde <ATAPI::diskInserted()>
c0020e9e:	83 c4 10             	add    esp,0x10
c0020ea1:	83 c4 24             	add    esp,0x24
c0020ea4:	5b                   	pop    ebx
c0020ea5:	5e                   	pop    esi
c0020ea6:	c3                   	ret    
c0020ea7:	90                   	nop

c0020ea8 <ATAPI::open(int, int, void*)>:
c0020ea8:	56                   	push   esi
c0020ea9:	53                   	push   ebx
c0020eaa:	50                   	push   eax
c0020eab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020eb3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020eb7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020ebd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020ec3:	c1 e0 06             	shl    eax,0x6
c0020ec6:	01 d0                	add    eax,edx
c0020ec8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0020ecf:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020ed5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020edc:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020ee6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020eec:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020ef3:	6a 04                	push   0x4
c0020ef5:	6a 0c                	push   0xc
c0020ef7:	51                   	push   ecx
c0020ef8:	52                   	push   edx
c0020ef9:	e8 0a e2 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020efe:	90                   	nop
c0020eff:	90                   	nop
c0020f00:	6a 00                	push   0x0
c0020f02:	6a 0c                	push   0xc
c0020f04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020f0b:	50                   	push   eax
c0020f0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020f12:	e8 f1 e1 ff ff       	call   c001f108 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f17:	83 c4 14             	add    esp,0x14
c0020f1a:	68 78 01 00 00       	push   0x178
c0020f1f:	e8 17 ee fe ff       	call   c000fd3b <malloc>
c0020f24:	83 c4 0c             	add    esp,0xc
c0020f27:	89 c6                	mov    esi,eax
c0020f29:	6a 00                	push   0x0
c0020f2b:	68 ff ff ff 7f       	push   0x7fffffff
c0020f30:	6a 00                	push   0x0
c0020f32:	6a 00                	push   0x0
c0020f34:	53                   	push   ebx
c0020f35:	68 c3 ae 02 c0       	push   0xc002aec3
c0020f3a:	50                   	push   eax
c0020f3b:	e8 ce 9d fe ff       	call   c000ad0e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020f40:	83 c4 14             	add    esp,0x14
c0020f43:	56                   	push   esi
c0020f44:	e8 85 9e fe ff       	call   c000adce <LogicalDisk::assignDriveLetter()>
c0020f49:	5a                   	pop    edx
c0020f4a:	0f be c0             	movsx  eax,al
c0020f4d:	59                   	pop    ecx
c0020f4e:	50                   	push   eax
c0020f4f:	68 08 ad 02 c0       	push   0xc002ad08
c0020f54:	e8 23 60 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020f59:	58                   	pop    eax
c0020f5a:	5a                   	pop    edx
c0020f5b:	56                   	push   esi
c0020f5c:	53                   	push   ebx
c0020f5d:	e8 ca 8f fe ff       	call   c0009f2c <Device::addChild(Device*)>
c0020f62:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020f68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020f6b:	e8 06 94 fe ff       	call   c000a376 <PhysicalDisk::startCache()>
c0020f70:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020f77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020f7a:	e8 6b fe ff ff       	call   c0020dea <ATAPI::detectMedia()>
c0020f7f:	83 c4 14             	add    esp,0x14
c0020f82:	31 c0                	xor    eax,eax
c0020f84:	5b                   	pop    ebx
c0020f85:	5e                   	pop    esi
c0020f86:	c3                   	ret    
c0020f87:	90                   	nop

c0020f88 <ATAPI::read(unsigned long long, int, void*)>:
c0020f88:	55                   	push   ebp
c0020f89:	57                   	push   edi
c0020f8a:	56                   	push   esi
c0020f8b:	53                   	push   ebx
c0020f8c:	83 ec 1c             	sub    esp,0x1c
c0020f8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020f93:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020f97:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020f9b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020fa2:	74 3c                	je     c0020fe0 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0020fa4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020fa8:	b9 03 00 00 00       	mov    ecx,0x3
c0020fad:	fc                   	cld    
c0020fae:	31 c0                	xor    eax,eax
c0020fb0:	0f ce                	bswap  esi
c0020fb2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020fb4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020fb9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020fbd:	89 e8                	mov    eax,ebp
c0020fbf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020fc3:	50                   	push   eax
c0020fc4:	50                   	push   eax
c0020fc5:	55                   	push   ebp
c0020fc6:	c1 e5 0b             	shl    ebp,0xb
c0020fc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020fcd:	6a 00                	push   0x0
c0020fcf:	55                   	push   ebp
c0020fd0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fd4:	50                   	push   eax
c0020fd5:	53                   	push   ebx
c0020fd6:	e8 b9 fa ff ff       	call   c0020a94 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020fdb:	83 c4 20             	add    esp,0x20
c0020fde:	eb 1a                	jmp    c0020ffa <ATAPI::read(unsigned long long, int, void*)+0x72>
c0020fe0:	83 ec 0c             	sub    esp,0xc
c0020fe3:	53                   	push   ebx
c0020fe4:	e8 01 fe ff ff       	call   c0020dea <ATAPI::detectMedia()>
c0020fe9:	83 c4 10             	add    esp,0x10
c0020fec:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020ff3:	75 af                	jne    c0020fa4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020ff5:	b8 02 00 00 00       	mov    eax,0x2
c0020ffa:	83 c4 1c             	add    esp,0x1c
c0020ffd:	5b                   	pop    ebx
c0020ffe:	5e                   	pop    esi
c0020fff:	5f                   	pop    edi
c0021000:	5d                   	pop    ebp
c0021001:	c3                   	ret    

c0021002 <SATA::close(int, int, void*)>:
c0021002:	83 ec 0c             	sub    esp,0xc
c0021005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021009:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002100f:	85 c0                	test   eax,eax
c0021011:	74 0c                	je     c002101f <SATA::close(int, int, void*)+0x1d>
c0021013:	83 ec 0c             	sub    esp,0xc
c0021016:	8b 10                	mov    edx,DWORD PTR [eax]
c0021018:	50                   	push   eax
c0021019:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002101c:	83 c4 10             	add    esp,0x10
c002101f:	31 c0                	xor    eax,eax
c0021021:	83 c4 0c             	add    esp,0xc
c0021024:	c3                   	ret    
c0021025:	90                   	nop

c0021026 <SATA::powerSaving(PowerSavingLevel)>:
c0021026:	c3                   	ret    
c0021027:	90                   	nop

c0021028 <SATA::open(int, int, void*)>:
c0021028:	56                   	push   esi
c0021029:	53                   	push   ebx
c002102a:	83 ec 10             	sub    esp,0x10
c002102d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021031:	68 50 ad 02 c0       	push   0xc002ad50
c0021036:	e8 41 5f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002103b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002103f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0021049:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002104f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021059:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002105d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021067:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002106d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0021074:	e8 0b f3 fe ff       	call   c0010384 <Phys::allocatePage()>
c0021079:	89 c6                	mov    esi,eax
c002107b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021081:	81 c6 00 10 00 00    	add    esi,0x1000
c0021087:	e8 f8 f2 fe ff       	call   c0010384 <Phys::allocatePage()>
c002108c:	83 c4 10             	add    esp,0x10
c002108f:	39 c6                	cmp    esi,eax
c0021091:	74 10                	je     c00210a3 <SATA::open(int, int, void*)+0x7b>
c0021093:	83 ec 0c             	sub    esp,0xc
c0021096:	68 5c ad 02 c0       	push   0xc002ad5c
c002109b:	e8 f0 f0 fe ff       	call   c0010190 <KePanic(char const*)>
c00210a0:	83 c4 10             	add    esp,0x10
c00210a3:	83 ec 0c             	sub    esp,0xc
c00210a6:	6a 02                	push   0x2
c00210a8:	e8 7a 26 ff ff       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c00210ad:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00210b3:	6a 03                	push   0x3
c00210b5:	50                   	push   eax
c00210b6:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00210bc:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c00210c2:	e8 43 2d ff ff       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c00210c7:	83 c4 14             	add    esp,0x14
c00210ca:	53                   	push   ebx
c00210cb:	e8 a6 92 fe ff       	call   c000a376 <PhysicalDisk::startCache()>
c00210d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00210d3:	e8 0a a1 fe ff       	call   c000b1e2 <createPartitionsForDisk(PhysicalDisk*)>
c00210d8:	83 c4 14             	add    esp,0x14
c00210db:	31 c0                	xor    eax,eax
c00210dd:	5b                   	pop    ebx
c00210de:	5e                   	pop    esi
c00210df:	c3                   	ret    

c00210e0 <SATA::SATA()>:
c00210e0:	83 ec 0c             	sub    esp,0xc
c00210e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210e7:	83 ec 04             	sub    esp,0x4
c00210ea:	68 00 02 00 00       	push   0x200
c00210ef:	68 70 ad 02 c0       	push   0xc002ad70
c00210f4:	50                   	push   eax
c00210f5:	e8 14 92 fe ff       	call   c000a30e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00210fa:	83 c4 10             	add    esp,0x10
c00210fd:	ba e0 ad 02 c0       	mov    edx,0xc002ade0
c0021102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021106:	89 10                	mov    DWORD PTR [eax],edx
c0021108:	90                   	nop
c0021109:	83 c4 0c             	add    esp,0xc
c002110c:	c3                   	ret    
c002110d:	90                   	nop

c002110e <SATA::access(unsigned long long, int, void*, bool)>:
c002110e:	55                   	push   ebp
c002110f:	57                   	push   edi
c0021110:	56                   	push   esi
c0021111:	53                   	push   ebx
c0021112:	83 ec 2c             	sub    esp,0x2c
c0021115:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021119:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002111d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021121:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021125:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0021129:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002112d:	fa                   	cli    
c002112e:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0021134:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0021139:	7e 10                	jle    c002114b <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002113b:	83 ec 0c             	sub    esp,0xc
c002113e:	68 80 ad 02 c0       	push   0xc002ad80
c0021143:	e8 48 f0 fe ff       	call   c0010190 <KePanic(char const*)>
c0021148:	83 c4 10             	add    esp,0x10
c002114b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021151:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0021157:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002115d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021161:	89 d0                	mov    eax,edx
c0021163:	c1 e0 07             	shl    eax,0x7
c0021166:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002116a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0021174:	51                   	push   ecx
c0021175:	8d 42 02             	lea    eax,[edx+0x2]
c0021178:	51                   	push   ecx
c0021179:	c1 e0 07             	shl    eax,0x7
c002117c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021180:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021184:	50                   	push   eax
c0021185:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002118b:	e8 fe ed ff ff       	call   c001ff8e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021190:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021194:	83 c4 10             	add    esp,0x10
c0021197:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002119c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00211a0:	0f 84 a4 01 00 00    	je     c002134a <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c00211a6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00211aa:	c1 e0 09             	shl    eax,0x9
c00211ad:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00211b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00211b6:	74 0e                	je     c00211c6 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c00211b8:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00211be:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00211c2:	89 c1                	mov    ecx,eax
c00211c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211c6:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00211cc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00211d0:	8d 42 02             	lea    eax,[edx+0x2]
c00211d3:	c1 e0 07             	shl    eax,0x7
c00211d6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00211da:	8b 00                	mov    eax,DWORD PTR [eax]
c00211dc:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00211e2:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00211e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00211ec:	c1 e1 05             	shl    ecx,0x5
c00211ef:	01 c8                	add    eax,ecx
c00211f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00211f5:	83 e1 01             	and    ecx,0x1
c00211f8:	89 ce                	mov    esi,ecx
c00211fa:	8a 08                	mov    cl,BYTE PTR [eax]
c00211fc:	c1 e6 06             	shl    esi,0x6
c00211ff:	83 e1 bf             	and    ecx,0xffffffbf
c0021202:	09 f1                	or     ecx,esi
c0021204:	88 08                	mov    BYTE PTR [eax],cl
c0021206:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021208:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002120e:	81 c9 05 00 01 00    	or     ecx,0x10005
c0021214:	89 08                	mov    DWORD PTR [eax],ecx
c0021216:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002121c:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0021222:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0021228:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002122b:	50                   	push   eax
c002122c:	68 90 00 00 00       	push   0x90
c0021231:	6a 00                	push   0x0
c0021233:	56                   	push   esi
c0021234:	e8 b7 f2 fd ff       	call   c00004f0 <memset>
c0021239:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002123f:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0021245:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021249:	83 c4 10             	add    esp,0x10
c002124c:	48                   	dec    eax
c002124d:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021252:	89 c1                	mov    ecx,eax
c0021254:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002125a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002125f:	09 c8                	or     eax,ecx
c0021261:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0021267:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002126d:	83 c8 80             	or     eax,0xffffff80
c0021270:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0021276:	66 8b 06             	mov    ax,WORD PTR [esi]
c0021279:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002127d:	25 00 7f 00 00       	and    eax,0x7f00
c0021282:	0d 27 80 ff ff       	or     eax,0xffff8027
c0021287:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002128c:	66 89 06             	mov    WORD PTR [esi],ax
c002128f:	b0 35                	mov    al,0x35
c0021291:	75 02                	jne    c0021295 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c0021293:	b0 25                	mov    al,0x25
c0021295:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0021298:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002129c:	89 e8                	mov    eax,ebp
c002129e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00212a2:	c1 e8 10             	shr    eax,0x10
c00212a5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00212a8:	89 e8                	mov    eax,ebp
c00212aa:	c1 e8 18             	shr    eax,0x18
c00212ad:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00212b0:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00212b4:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00212b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00212bb:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00212be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00212c2:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00212c6:	89 d6                	mov    esi,edx
c00212c8:	31 c0                	xor    eax,eax
c00212ca:	c1 e6 07             	shl    esi,0x7
c00212cd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00212d1:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00212d7:	80 e1 88             	and    cl,0x88
c00212da:	74 0a                	je     c00212e6 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c00212dc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00212e1:	74 0a                	je     c00212ed <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00212e3:	40                   	inc    eax
c00212e4:	eb eb                	jmp    c00212d1 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c00212e6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00212eb:	75 0a                	jne    c00212f7 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c00212ed:	83 ec 0c             	sub    esp,0xc
c00212f0:	68 b9 ad 02 c0       	push   0xc002adb9
c00212f5:	eb 36                	jmp    c002132d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c00212f7:	b8 01 00 00 00       	mov    eax,0x1
c00212fc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021300:	c1 e2 07             	shl    edx,0x7
c0021303:	d3 e0                	shl    eax,cl
c0021305:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0021309:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002130f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0021315:	85 c8                	test   eax,ecx
c0021317:	74 25                	je     c002133e <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0021319:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002131f:	0f ba e1 1e          	bt     ecx,0x1e
c0021323:	73 ea                	jae    c002130f <SATA::access(unsigned long long, int, void*, bool)+0x201>
c0021325:	83 ec 0c             	sub    esp,0xc
c0021328:	68 c7 ad 02 c0       	push   0xc002adc7
c002132d:	e8 4a 5c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021332:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0021339:	83 c4 10             	add    esp,0x10
c002133c:	eb 13                	jmp    c0021351 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c002133e:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0021344:	0f ba e0 1e          	bt     eax,0x1e
c0021348:	73 18                	jae    c0021362 <SATA::access(unsigned long long, int, void*, bool)+0x254>
c002134a:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0021351:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0021358:	75 01                	jne    c002135b <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002135a:	fb                   	sti    
c002135b:	b8 01 00 00 00       	mov    eax,0x1
c0021360:	eb 2c                	jmp    c002138e <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0021362:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0021367:	75 10                	jne    c0021379 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c0021369:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002136f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0021373:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021377:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021379:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0021380:	a1 30 33 03 c0       	mov    eax,ds:0xc0033330
c0021385:	85 c0                	test   eax,eax
c0021387:	75 03                	jne    c002138c <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0021389:	fb                   	sti    
c002138a:	eb 02                	jmp    c002138e <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002138c:	31 c0                	xor    eax,eax
c002138e:	83 c4 2c             	add    esp,0x2c
c0021391:	5b                   	pop    ebx
c0021392:	5e                   	pop    esi
c0021393:	5f                   	pop    edi
c0021394:	5d                   	pop    ebp
c0021395:	c3                   	ret    

c0021396 <SATA::read(unsigned long long, int, void*)>:
c0021396:	57                   	push   edi
c0021397:	b8 04 00 00 00       	mov    eax,0x4
c002139c:	56                   	push   esi
c002139d:	53                   	push   ebx
c002139e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00213a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00213a6:	8d 7a ff             	lea    edi,[edx-0x1]
c00213a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00213ad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00213b1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00213b7:	77 25                	ja     c00213de <SATA::read(unsigned long long, int, void*)+0x48>
c00213b9:	b8 06 00 00 00       	mov    eax,0x6
c00213be:	85 f6                	test   esi,esi
c00213c0:	74 1c                	je     c00213de <SATA::read(unsigned long long, int, void*)+0x48>
c00213c2:	50                   	push   eax
c00213c3:	50                   	push   eax
c00213c4:	6a 00                	push   0x0
c00213c6:	56                   	push   esi
c00213c7:	52                   	push   edx
c00213c8:	53                   	push   ebx
c00213c9:	51                   	push   ecx
c00213ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00213ce:	e8 3b fd ff ff       	call   c002110e <SATA::access(unsigned long long, int, void*, bool)>
c00213d3:	83 c4 20             	add    esp,0x20
c00213d6:	85 c0                	test   eax,eax
c00213d8:	0f 95 c0             	setne  al
c00213db:	0f b6 c0             	movzx  eax,al
c00213de:	5b                   	pop    ebx
c00213df:	5e                   	pop    esi
c00213e0:	5f                   	pop    edi
c00213e1:	c3                   	ret    

c00213e2 <SATA::write(unsigned long long, int, void*)>:
c00213e2:	55                   	push   ebp
c00213e3:	b8 04 00 00 00       	mov    eax,0x4
c00213e8:	57                   	push   edi
c00213e9:	56                   	push   esi
c00213ea:	53                   	push   ebx
c00213eb:	83 ec 0c             	sub    esp,0xc
c00213ee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00213f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00213f6:	8d 73 ff             	lea    esi,[ebx-0x1]
c00213f9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00213fd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021401:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0021407:	77 3d                	ja     c0021446 <SATA::write(unsigned long long, int, void*)+0x64>
c0021409:	b8 06 00 00 00       	mov    eax,0x6
c002140e:	85 ed                	test   ebp,ebp
c0021410:	74 34                	je     c0021446 <SATA::write(unsigned long long, int, void*)+0x64>
c0021412:	c1 e3 09             	shl    ebx,0x9
c0021415:	01 eb                	add    ebx,ebp
c0021417:	89 d6                	mov    esi,edx
c0021419:	89 cf                	mov    edi,ecx
c002141b:	83 c6 01             	add    esi,0x1
c002141e:	83 d7 00             	adc    edi,0x0
c0021421:	50                   	push   eax
c0021422:	50                   	push   eax
c0021423:	6a 01                	push   0x1
c0021425:	55                   	push   ebp
c0021426:	81 c5 00 02 00 00    	add    ebp,0x200
c002142c:	6a 01                	push   0x1
c002142e:	51                   	push   ecx
c002142f:	52                   	push   edx
c0021430:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021434:	e8 d5 fc ff ff       	call   c002110e <SATA::access(unsigned long long, int, void*, bool)>
c0021439:	83 c4 20             	add    esp,0x20
c002143c:	89 f2                	mov    edx,esi
c002143e:	89 f9                	mov    ecx,edi
c0021440:	39 dd                	cmp    ebp,ebx
c0021442:	75 d3                	jne    c0021417 <SATA::write(unsigned long long, int, void*)+0x35>
c0021444:	31 c0                	xor    eax,eax
c0021446:	83 c4 0c             	add    esp,0xc
c0021449:	5b                   	pop    ebx
c002144a:	5e                   	pop    esi
c002144b:	5f                   	pop    edi
c002144c:	5d                   	pop    ebp
c002144d:	c3                   	ret    

c002144e <SATAPI::write(unsigned long long, int, void*)>:
c002144e:	b8 03 00 00 00       	mov    eax,0x3
c0021453:	c3                   	ret    

c0021454 <SATAPI::close(int, int, void*)>:
c0021454:	83 ec 0c             	sub    esp,0xc
c0021457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002145b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021461:	85 c0                	test   eax,eax
c0021463:	74 0c                	je     c0021471 <SATAPI::close(int, int, void*)+0x1d>
c0021465:	83 ec 0c             	sub    esp,0xc
c0021468:	8b 10                	mov    edx,DWORD PTR [eax]
c002146a:	50                   	push   eax
c002146b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002146e:	83 c4 10             	add    esp,0x10
c0021471:	31 c0                	xor    eax,eax
c0021473:	83 c4 0c             	add    esp,0xc
c0021476:	c3                   	ret    
c0021477:	90                   	nop

c0021478 <SATAPI::SATAPI()>:
c0021478:	83 ec 0c             	sub    esp,0xc
c002147b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002147f:	83 ec 04             	sub    esp,0x4
c0021482:	68 00 08 00 00       	push   0x800
c0021487:	68 10 ae 02 c0       	push   0xc002ae10
c002148c:	50                   	push   eax
c002148d:	e8 7c 8e fe ff       	call   c000a30e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021492:	83 c4 10             	add    esp,0x10
c0021495:	ba 04 af 02 c0       	mov    edx,0xc002af04
c002149a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002149e:	89 10                	mov    DWORD PTR [eax],edx
c00214a0:	90                   	nop
c00214a1:	83 c4 0c             	add    esp,0xc
c00214a4:	c3                   	ret    
c00214a5:	90                   	nop

c00214a6 <SATAPI::diskRemoved()>:
c00214a6:	c3                   	ret    
c00214a7:	90                   	nop

c00214a8 <SATAPI::diskInserted()>:
c00214a8:	83 ec 18             	sub    esp,0x18
c00214ab:	68 1c ae 02 c0       	push   0xc002ae1c
c00214b0:	e8 c7 5a fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00214b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214b9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00214c0:	83 c4 1c             	add    esp,0x1c
c00214c3:	c3                   	ret    

c00214c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00214c4:	55                   	push   ebp
c00214c5:	57                   	push   edi
c00214c6:	56                   	push   esi
c00214c7:	53                   	push   ebx
c00214c8:	83 ec 34             	sub    esp,0x34
c00214cb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00214cf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00214d3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00214d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00214db:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00214df:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00214e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00214eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00214ef:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00214f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00214f9:	83 c0 02             	add    eax,0x2
c00214fc:	c1 e0 07             	shl    eax,0x7
c00214ff:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021503:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021507:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002150b:	c1 e0 07             	shl    eax,0x7
c002150e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0021512:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021516:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0021520:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021524:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002152a:	e8 5f ea ff ff       	call   c001ff8e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002152f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021533:	83 c4 10             	add    esp,0x10
c0021536:	b8 01 00 00 00       	mov    eax,0x1
c002153b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0021540:	0f 84 57 02 00 00    	je     c002179d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0021546:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002154c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021550:	8b 00                	mov    eax,DWORD PTR [eax]
c0021552:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0021558:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002155e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021562:	c1 e1 05             	shl    ecx,0x5
c0021565:	01 c8                	add    eax,ecx
c0021567:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021569:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002156f:	81 c9 25 00 01 00    	or     ecx,0x10025
c0021575:	89 08                	mov    DWORD PTR [eax],ecx
c0021577:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002157d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0021583:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0021589:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002158c:	8d 7b 40             	lea    edi,[ebx+0x40]
c002158f:	50                   	push   eax
c0021590:	68 90 00 00 00       	push   0x90
c0021595:	6a 00                	push   0x0
c0021597:	53                   	push   ebx
c0021598:	e8 53 ef fd ff       	call   c00004f0 <memset>
c002159d:	b9 0c 00 00 00       	mov    ecx,0xc
c00215a2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00215a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00215a8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00215ae:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00215b2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00215b8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00215bc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00215c0:	48                   	dec    eax
c00215c1:	25 ff ff 3f 00       	and    eax,0x3fffff
c00215c6:	89 c1                	mov    ecx,eax
c00215c8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00215ce:	25 00 00 c0 ff       	and    eax,0xffc00000
c00215d3:	09 c8                	or     eax,ecx
c00215d5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00215db:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c00215e1:	83 c8 80             	or     eax,0xffffff80
c00215e4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c00215ea:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00215ed:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00215f1:	25 00 7f 00 00       	and    eax,0x7f00
c00215f6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00215fa:	0d 27 80 ff ff       	or     eax,0xffff8027
c00215ff:	66 89 03             	mov    WORD PTR [ebx],ax
c0021602:	89 d0                	mov    eax,edx
c0021604:	c1 ea 18             	shr    edx,0x18
c0021607:	c1 e8 10             	shr    eax,0x10
c002160a:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002160d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0021610:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0021614:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0021617:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002161b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002161e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0021622:	83 c4 10             	add    esp,0x10
c0021625:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0021629:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002162d:	31 c0                	xor    eax,eax
c002162f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0021635:	80 e1 88             	and    cl,0x88
c0021638:	74 0a                	je     c0021644 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002163a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002163f:	74 0a                	je     c002164b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c0021641:	40                   	inc    eax
c0021642:	eb eb                	jmp    c002162f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0021644:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021649:	75 43                	jne    c002168e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002164b:	83 ec 0c             	sub    esp,0xc
c002164e:	68 34 ae 02 c0       	push   0xc002ae34
c0021653:	e8 24 59 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021658:	58                   	pop    eax
c0021659:	5a                   	pop    edx
c002165a:	68 49 ae 02 c0       	push   0xc002ae49
c002165f:	ff 35 f4 31 03 c0    	push   DWORD PTR ds:0xc00331f4
c0021665:	e8 92 14 ff ff       	call   c0012afc <VgaText::puts(char const*)>
c002166a:	59                   	pop    ecx
c002166b:	5b                   	pop    ebx
c002166c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021670:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021676:	e8 ad e9 ff ff       	call   c0020028 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002167b:	5e                   	pop    esi
c002167c:	5f                   	pop    edi
c002167d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021681:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021687:	e8 7c e9 ff ff       	call   c0020008 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002168c:	eb 48                	jmp    c00216d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002168e:	be 01 00 00 00       	mov    esi,0x1
c0021693:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021697:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002169b:	d3 e6                	shl    esi,cl
c002169d:	c1 e7 07             	shl    edi,0x7
c00216a0:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c00216a6:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c00216ab:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00216af:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c00216b5:	85 c6                	test   esi,eax
c00216b7:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00216bd:	0f 84 a7 00 00 00    	je     c002176a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c00216c3:	0f ba e0 1e          	bt     eax,0x1e
c00216c7:	73 1a                	jae    c00216e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c00216c9:	83 ec 0c             	sub    esp,0xc
c00216cc:	68 5b ae 02 c0       	push   0xc002ae5b
c00216d1:	e8 a6 58 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00216d6:	83 c4 10             	add    esp,0x10
c00216d9:	b8 01 00 00 00       	mov    eax,0x1
c00216de:	e9 ba 00 00 00       	jmp    c002179d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c00216e3:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c00216e9:	83 f8 0d             	cmp    eax,0xd
c00216ec:	77 0b                	ja     c00216f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c00216ee:	50                   	push   eax
c00216ef:	50                   	push   eax
c00216f0:	6a 00                	push   0x0
c00216f2:	68 c8 00 00 00       	push   0xc8
c00216f7:	eb 2a                	jmp    c0021723 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c00216f9:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c00216ff:	83 f8 0d             	cmp    eax,0xd
c0021702:	77 0b                	ja     c002170f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c0021704:	51                   	push   ecx
c0021705:	51                   	push   ecx
c0021706:	6a 00                	push   0x0
c0021708:	68 58 02 00 00       	push   0x258
c002170d:	eb 14                	jmp    c0021723 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c002170f:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c0021715:	83 f8 06             	cmp    eax,0x6
c0021718:	77 11                	ja     c002172b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c002171a:	52                   	push   edx
c002171b:	52                   	push   edx
c002171c:	6a 00                	push   0x0
c002171e:	68 dc 05 00 00       	push   0x5dc
c0021723:	e8 f4 57 ff ff       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c0021728:	83 c4 10             	add    esp,0x10
c002172b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002172f:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0021732:	75 06                	jne    c002173a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c0021734:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0021738:	74 16                	je     c0021750 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c002173a:	83 fb 06             	cmp    ebx,0x6
c002173d:	77 11                	ja     c0021750 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c002173f:	50                   	push   eax
c0021740:	50                   	push   eax
c0021741:	6a 00                	push   0x0
c0021743:	68 c4 09 00 00       	push   0x9c4
c0021748:	e8 cf 57 ff ff       	call   c0016f1c <milliTenthSleep(unsigned long long)>
c002174d:	83 c4 10             	add    esp,0x10
c0021750:	43                   	inc    ebx
c0021751:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c0021757:	0f 85 52 ff ff ff    	jne    c00216af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002175d:	83 ec 0c             	sub    esp,0xc
c0021760:	68 6e ae 02 c0       	push   0xc002ae6e
c0021765:	e9 67 ff ff ff       	jmp    c00216d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002176a:	0f ba e0 1e          	bt     eax,0x1e
c002176e:	73 0d                	jae    c002177d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c0021770:	83 ec 0c             	sub    esp,0xc
c0021773:	68 82 ae 02 c0       	push   0xc002ae82
c0021778:	e9 54 ff ff ff       	jmp    c00216d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002177d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021782:	74 17                	je     c002179b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0021784:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0021789:	74 10                	je     c002179b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c002178b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0021791:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021795:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021799:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002179b:	31 c0                	xor    eax,eax
c002179d:	83 c4 2c             	add    esp,0x2c
c00217a0:	5b                   	pop    ebx
c00217a1:	5e                   	pop    esi
c00217a2:	5f                   	pop    edi
c00217a3:	5d                   	pop    ebp
c00217a4:	c3                   	ret    
c00217a5:	90                   	nop

c00217a6 <SATAPI::eject()>:
c00217a6:	57                   	push   edi
c00217a7:	b9 03 00 00 00       	mov    ecx,0x3
c00217ac:	83 ec 18             	sub    esp,0x18
c00217af:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00217b3:	fc                   	cld    
c00217b4:	31 c0                	xor    eax,eax
c00217b6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00217b8:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00217bd:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00217c2:	50                   	push   eax
c00217c3:	6a 00                	push   0x0
c00217c5:	6a 00                	push   0x0
c00217c7:	6a 00                	push   0x0
c00217c9:	6a 00                	push   0x0
c00217cb:	6a 02                	push   0x2
c00217cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217d1:	50                   	push   eax
c00217d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00217d6:	e8 e9 fc ff ff       	call   c00214c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00217db:	31 c0                	xor    eax,eax
c00217dd:	83 c4 38             	add    esp,0x38
c00217e0:	5f                   	pop    edi
c00217e1:	c3                   	ret    

c00217e2 <SATAPI::detectMedia()>:
c00217e2:	53                   	push   ebx
c00217e3:	83 ec 14             	sub    esp,0x14
c00217e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00217ea:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00217f0:	e8 d3 a0 fe ff       	call   c000b8c8 <VCache::writeWriteBuffer()>
c00217f5:	59                   	pop    ecx
c00217f6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00217fc:	e8 b7 a0 fe ff       	call   c000b8b8 <VCache::invalidateReadBuffer()>
c0021801:	c7 04 24 97 ae 02 c0 	mov    DWORD PTR [esp],0xc002ae97
c0021808:	e8 6f 57 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002180d:	83 c4 10             	add    esp,0x10
c0021810:	31 c0                	xor    eax,eax
c0021812:	8b 14 85 e0 2a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcd520]
c0021819:	85 d2                	test   edx,edx
c002181b:	74 0f                	je     c002182c <SATAPI::detectMedia()+0x4a>
c002181d:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0021823:	75 07                	jne    c002182c <SATAPI::detectMedia()+0x4a>
c0021825:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002182c:	40                   	inc    eax
c002182d:	83 f8 1a             	cmp    eax,0x1a
c0021830:	75 e0                	jne    c0021812 <SATAPI::detectMedia()+0x30>
c0021832:	83 c4 08             	add    esp,0x8
c0021835:	5b                   	pop    ebx
c0021836:	c3                   	ret    
c0021837:	90                   	nop

c0021838 <SATAPI::open(int, int, void*)>:
c0021838:	56                   	push   esi
c0021839:	53                   	push   ebx
c002183a:	51                   	push   ecx
c002183b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002183f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021843:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002184d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0021853:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002185d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021861:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002186b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021871:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0021878:	e8 07 eb fe ff       	call   c0010384 <Phys::allocatePage()>
c002187d:	89 c6                	mov    esi,eax
c002187f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021885:	81 c6 00 10 00 00    	add    esi,0x1000
c002188b:	e8 f4 ea fe ff       	call   c0010384 <Phys::allocatePage()>
c0021890:	39 c6                	cmp    esi,eax
c0021892:	74 10                	je     c00218a4 <SATAPI::open(int, int, void*)+0x6c>
c0021894:	83 ec 0c             	sub    esp,0xc
c0021897:	68 ac ae 02 c0       	push   0xc002aeac
c002189c:	e8 ef e8 fe ff       	call   c0010190 <KePanic(char const*)>
c00218a1:	83 c4 10             	add    esp,0x10
c00218a4:	83 ec 0c             	sub    esp,0xc
c00218a7:	6a 02                	push   0x2
c00218a9:	e8 79 1e ff ff       	call   c0013727 <Virt::allocateKernelVirtualPages(int)>
c00218ae:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00218b4:	6a 03                	push   0x3
c00218b6:	50                   	push   eax
c00218b7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00218bd:	ff 35 90 32 03 c0    	push   DWORD PTR ds:0xc0033290
c00218c3:	e8 42 25 ff ff       	call   c0013e0a <VAS::mapPage(unsigned long, unsigned long, int)>
c00218c8:	83 c4 14             	add    esp,0x14
c00218cb:	68 78 01 00 00       	push   0x178
c00218d0:	e8 66 e4 fe ff       	call   c000fd3b <malloc>
c00218d5:	83 c4 0c             	add    esp,0xc
c00218d8:	89 c6                	mov    esi,eax
c00218da:	6a 00                	push   0x0
c00218dc:	68 ff ff ff 7f       	push   0x7fffffff
c00218e1:	6a 00                	push   0x0
c00218e3:	6a 00                	push   0x0
c00218e5:	53                   	push   ebx
c00218e6:	68 c2 ae 02 c0       	push   0xc002aec2
c00218eb:	50                   	push   eax
c00218ec:	e8 1d 94 fe ff       	call   c000ad0e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00218f1:	83 c4 14             	add    esp,0x14
c00218f4:	56                   	push   esi
c00218f5:	e8 d4 94 fe ff       	call   c000adce <LogicalDisk::assignDriveLetter()>
c00218fa:	5a                   	pop    edx
c00218fb:	0f be c0             	movsx  eax,al
c00218fe:	59                   	pop    ecx
c00218ff:	50                   	push   eax
c0021900:	68 08 ad 02 c0       	push   0xc002ad08
c0021905:	e8 72 56 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002190a:	58                   	pop    eax
c002190b:	5a                   	pop    edx
c002190c:	56                   	push   esi
c002190d:	53                   	push   ebx
c002190e:	e8 19 86 fe ff       	call   c0009f2c <Device::addChild(Device*)>
c0021913:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021919:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002191c:	e8 55 8a fe ff       	call   c000a376 <PhysicalDisk::startCache()>
c0021921:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021928:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002192b:	e8 b2 fe ff ff       	call   c00217e2 <SATAPI::detectMedia()>
c0021930:	83 c4 14             	add    esp,0x14
c0021933:	31 c0                	xor    eax,eax
c0021935:	5b                   	pop    ebx
c0021936:	5e                   	pop    esi
c0021937:	c3                   	ret    

c0021938 <SATAPI::read(unsigned long long, int, void*)>:
c0021938:	57                   	push   edi
c0021939:	56                   	push   esi
c002193a:	53                   	push   ebx
c002193b:	83 ec 30             	sub    esp,0x30
c002193e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0021942:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0021946:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002194a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002194e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021952:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021956:	83 fe 04             	cmp    esi,0x4
c0021959:	7e 10                	jle    c002196b <SATAPI::read(unsigned long long, int, void*)+0x33>
c002195b:	83 ec 0c             	sub    esp,0xc
c002195e:	68 d0 ae 02 c0       	push   0xc002aed0
c0021963:	e8 28 e8 fe ff       	call   c0010190 <KePanic(char const*)>
c0021968:	83 c4 10             	add    esp,0x10
c002196b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0021971:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0021977:	51                   	push   ecx
c0021978:	50                   	push   eax
c0021979:	83 c0 02             	add    eax,0x2
c002197c:	c1 e0 07             	shl    eax,0x7
c002197f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0021985:	50                   	push   eax
c0021986:	52                   	push   edx
c0021987:	e8 c6 e6 ff ff       	call   c0020052 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002198c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0021990:	b9 03 00 00 00       	mov    ecx,0x3
c0021995:	fc                   	cld    
c0021996:	31 c0                	xor    eax,eax
c0021998:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002199a:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002199f:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00219a4:	83 c4 0c             	add    esp,0xc
c00219a7:	6a 00                	push   0x0
c00219a9:	6a 00                	push   0x0
c00219ab:	6a 00                	push   0x0
c00219ad:	6a 00                	push   0x0
c00219af:	6a 02                	push   0x2
c00219b1:	8d 44 24 30          	lea    eax,[esp+0x30]
c00219b5:	50                   	push   eax
c00219b6:	53                   	push   ebx
c00219b7:	e8 08 fb ff ff       	call   c00214c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00219bc:	83 c4 20             	add    esp,0x20
c00219bf:	85 c0                	test   eax,eax
c00219c1:	75 44                	jne    c0021a07 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c00219c3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00219c7:	b9 03 00 00 00       	mov    ecx,0x3
c00219cc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00219ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219d2:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c00219d7:	0f c8                	bswap  eax
c00219d9:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c00219dd:	89 f0                	mov    eax,esi
c00219df:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00219e3:	50                   	push   eax
c00219e4:	56                   	push   esi
c00219e5:	c1 e6 0b             	shl    esi,0xb
c00219e8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00219ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00219f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00219f4:	56                   	push   esi
c00219f5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00219f9:	50                   	push   eax
c00219fa:	53                   	push   ebx
c00219fb:	e8 c4 fa ff ff       	call   c00214c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021a00:	83 c4 20             	add    esp,0x20
c0021a03:	85 c0                	test   eax,eax
c0021a05:	74 14                	je     c0021a1b <SATAPI::read(unsigned long long, int, void*)+0xe3>
c0021a07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a0b:	83 ec 0c             	sub    esp,0xc
c0021a0e:	53                   	push   ebx
c0021a0f:	e8 ce fd ff ff       	call   c00217e2 <SATAPI::detectMedia()>
c0021a14:	83 c4 10             	add    esp,0x10
c0021a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a1b:	83 c4 30             	add    esp,0x30
c0021a1e:	5b                   	pop    ebx
c0021a1f:	5e                   	pop    esi
c0021a20:	5f                   	pop    edi
c0021a21:	c3                   	ret    
c0021a22:	66 90                	xchg   ax,ax

c0021a24 <APICTimer::close(int, int, void*)>:
c0021a24:	b8 00 00 00 00       	mov    eax,0x0
c0021a29:	c3                   	ret    
c0021a2a:	66 90                	xchg   ax,ax

c0021a2c <apicTimerHandler(regs*, void*)>:
c0021a2c:	83 ec 0c             	sub    esp,0xc
c0021a2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a33:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021a35:	b8 10 27 00 00       	mov    eax,0x2710
c0021a3a:	ba 00 00 00 00       	mov    edx,0x0
c0021a3f:	f7 f1                	div    ecx
c0021a41:	83 ec 0c             	sub    esp,0xc
c0021a44:	50                   	push   eax
c0021a45:	e8 82 9b fe ff       	call   c000b5cc <timerHandler(unsigned int)>
c0021a4a:	83 c4 10             	add    esp,0x10
c0021a4d:	90                   	nop
c0021a4e:	83 c4 0c             	add    esp,0xc
c0021a51:	c3                   	ret    
c0021a52:	66 90                	xchg   ax,ax

c0021a54 <APICTimer::open(int, int, void*)>:
c0021a54:	83 ec 0c             	sub    esp,0xc
c0021a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a5d:	83 c0 24             	add    eax,0x24
c0021a60:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a62:	83 ec 08             	sub    esp,0x8
c0021a65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a6d:	ff d0                	call   eax
c0021a6f:	83 c4 10             	add    esp,0x10
c0021a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021a7a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021a88:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0021a8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021a92:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021a98:	83 ec 0c             	sub    esp,0xc
c0021a9b:	51                   	push   ecx
c0021a9c:	6a 01                	push   0x1
c0021a9e:	68 2c 1a 02 c0       	push   0xc0021a2c
c0021aa3:	52                   	push   edx
c0021aa4:	50                   	push   eax
c0021aa5:	e8 2e 84 fe ff       	call   c0009ed8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021aaa:	83 c4 20             	add    esp,0x20
c0021aad:	89 c2                	mov    edx,eax
c0021aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021ab9:	b8 00 00 00 00       	mov    eax,0x0
c0021abe:	83 c4 0c             	add    esp,0xc
c0021ac1:	c3                   	ret    
c0021ac2:	66 90                	xchg   ax,ax

c0021ac4 <APICTimer::write(int)>:
c0021ac4:	83 ec 0c             	sub    esp,0xc
c0021ac7:	83 ec 0c             	sub    esp,0xc
c0021aca:	68 34 af 02 c0       	push   0xc002af34
c0021acf:	e8 bc e6 fe ff       	call   c0010190 <KePanic(char const*)>
c0021ad4:	83 c4 10             	add    esp,0x10
c0021ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021adb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021adf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021ae5:	90                   	nop
c0021ae6:	83 c4 0c             	add    esp,0xc
c0021ae9:	c3                   	ret    
c0021aea:	66 90                	xchg   ax,ax

c0021aec <APICTimer::APICTimer()>:
c0021aec:	83 ec 0c             	sub    esp,0xc
c0021aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021af3:	83 ec 08             	sub    esp,0x8
c0021af6:	68 44 af 02 c0       	push   0xc002af44
c0021afb:	50                   	push   eax
c0021afc:	e8 ff 99 fe ff       	call   c000b500 <Timer::Timer(char const*)>
c0021b01:	83 c4 10             	add    esp,0x10
c0021b04:	ba 58 af 02 c0       	mov    edx,0xc002af58
c0021b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b0d:	89 10                	mov    DWORD PTR [eax],edx
c0021b0f:	90                   	nop
c0021b10:	83 c4 0c             	add    esp,0xc
c0021b13:	c3                   	ret    

c0021b14 <PIT::write(int)>:
c0021b14:	83 ec 10             	sub    esp,0x10
c0021b17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021b1f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021b25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021b29:	a3 b8 5d 03 c0       	mov    ds:0xc0035db8,eax
c0021b2e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0021b33:	89 c2                	mov    edx,eax
c0021b35:	c1 fa 1f             	sar    edx,0x1f
c0021b38:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021b3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021b40:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0021b47:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021b4c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021b50:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021b55:	ee                   	out    dx,al
c0021b56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b5a:	0f b6 c0             	movzx  eax,al
c0021b5d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021b64:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021b68:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021b6c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0021b71:	ee                   	out    dx,al
c0021b72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b76:	c1 f8 08             	sar    eax,0x8
c0021b79:	0f b6 c0             	movzx  eax,al
c0021b7c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0021b83:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021b87:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021b8b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021b90:	ee                   	out    dx,al
c0021b91:	90                   	nop
c0021b92:	83 c4 10             	add    esp,0x10
c0021b95:	c3                   	ret    
c0021b96:	66 90                	xchg   ax,ax

c0021b98 <pitHandler(regs*, void*)>:
c0021b98:	83 ec 0c             	sub    esp,0xc
c0021b9b:	8b 0d b8 5d 03 c0    	mov    ecx,DWORD PTR ds:0xc0035db8
c0021ba1:	b8 10 27 00 00       	mov    eax,0x2710
c0021ba6:	89 c2                	mov    edx,eax
c0021ba8:	c1 fa 1f             	sar    edx,0x1f
c0021bab:	f7 f9                	idiv   ecx
c0021bad:	83 ec 0c             	sub    esp,0xc
c0021bb0:	50                   	push   eax
c0021bb1:	e8 16 9a fe ff       	call   c000b5cc <timerHandler(unsigned int)>
c0021bb6:	83 c4 10             	add    esp,0x10
c0021bb9:	90                   	nop
c0021bba:	83 c4 0c             	add    esp,0xc
c0021bbd:	c3                   	ret    
c0021bbe:	66 90                	xchg   ax,ax

c0021bc0 <PIT::open(int, int, void*)>:
c0021bc0:	83 ec 0c             	sub    esp,0xc
c0021bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bc9:	83 c0 24             	add    eax,0x24
c0021bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bce:	83 ec 08             	sub    esp,0x8
c0021bd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bd9:	ff d0                	call   eax
c0021bdb:	83 c4 10             	add    esp,0x10
c0021bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be2:	83 ec 0c             	sub    esp,0xc
c0021be5:	6a 00                	push   0x0
c0021be7:	6a 01                	push   0x1
c0021be9:	68 98 1b 02 c0       	push   0xc0021b98
c0021bee:	6a 00                	push   0x0
c0021bf0:	50                   	push   eax
c0021bf1:	e8 e2 82 fe ff       	call   c0009ed8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021bf6:	83 c4 20             	add    esp,0x20
c0021bf9:	89 c2                	mov    edx,eax
c0021bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bff:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021c05:	b8 00 00 00 00       	mov    eax,0x0
c0021c0a:	83 c4 0c             	add    esp,0xc
c0021c0d:	c3                   	ret    
c0021c0e:	66 90                	xchg   ax,ax

c0021c10 <PIT::close(int, int, void*)>:
c0021c10:	83 ec 0c             	sub    esp,0xc
c0021c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c17:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c25:	6a 01                	push   0x1
c0021c27:	68 98 1b 02 c0       	push   0xc0021b98
c0021c2c:	6a 00                	push   0x0
c0021c2e:	50                   	push   eax
c0021c2f:	e8 da 82 fe ff       	call   c0009f0e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021c34:	83 c4 10             	add    esp,0x10
c0021c37:	b8 00 00 00 00       	mov    eax,0x0
c0021c3c:	83 c4 0c             	add    esp,0xc
c0021c3f:	c3                   	ret    

c0021c40 <PIT::PIT()>:
c0021c40:	83 ec 0c             	sub    esp,0xc
c0021c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c47:	83 ec 08             	sub    esp,0x8
c0021c4a:	68 80 af 02 c0       	push   0xc002af80
c0021c4f:	50                   	push   eax
c0021c50:	e8 ab 98 fe ff       	call   c000b500 <Timer::Timer(char const*)>
c0021c55:	83 c4 10             	add    esp,0x10
c0021c58:	ba a8 af 02 c0       	mov    edx,0xc002afa8
c0021c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c61:	89 10                	mov    DWORD PTR [eax],edx
c0021c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c6d:	0f b6 d0             	movzx  edx,al
c0021c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c74:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c85:	0f b6 d0             	movzx  edx,al
c0021c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c8c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0021c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0021c9e:	88 d1                	mov    cl,dl
c0021ca0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021ca4:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021caa:	0f b6 d0             	movzx  edx,al
c0021cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021cb5:	83 e1 3f             	and    ecx,0x3f
c0021cb8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021cbc:	90                   	nop
c0021cbd:	83 c4 0c             	add    esp,0xc
c0021cc0:	c3                   	ret    
c0021cc1:	66 90                	xchg   ax,ax
c0021cc3:	66 90                	xchg   ax,ax
c0021cc5:	66 90                	xchg   ax,ax
c0021cc7:	66 90                	xchg   ax,ax
c0021cc9:	66 90                	xchg   ax,ax
c0021ccb:	66 90                	xchg   ax,ax
c0021ccd:	66 90                	xchg   ax,ax
c0021ccf:	90                   	nop

c0021cd0 <avxDetect>:
c0021cd0:	b8 01 00 00 00       	mov    eax,0x1
c0021cd5:	0f a2                	cpuid  
c0021cd7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0021cdd:	74 15                	je     c0021cf4 <avxDetect.noAVX>
c0021cdf:	b8 01 00 00 00       	mov    eax,0x1
c0021ce4:	0f a2                	cpuid  
c0021ce6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0021cec:	74 06                	je     c0021cf4 <avxDetect.noAVX>
c0021cee:	b8 01 00 00 00       	mov    eax,0x1
c0021cf3:	c3                   	ret    

c0021cf4 <avxDetect.noAVX>:
c0021cf4:	b8 00 00 00 00       	mov    eax,0x0
c0021cf9:	c3                   	ret    

c0021cfa <avxSave>:
c0021cfa:	53                   	push   ebx
c0021cfb:	52                   	push   edx
c0021cfc:	31 c0                	xor    eax,eax
c0021cfe:	48                   	dec    eax
c0021cff:	89 c2                	mov    edx,eax
c0021d01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021d05:	0f ae 23             	xsave  [ebx]
c0021d08:	5a                   	pop    edx
c0021d09:	5b                   	pop    ebx
c0021d0a:	c3                   	ret    

c0021d0b <avxLoad>:
c0021d0b:	53                   	push   ebx
c0021d0c:	52                   	push   edx
c0021d0d:	31 c0                	xor    eax,eax
c0021d0f:	48                   	dec    eax
c0021d10:	89 c2                	mov    edx,eax
c0021d12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021d16:	0f ae 2b             	xrstor [ebx]
c0021d19:	5a                   	pop    edx
c0021d1a:	5b                   	pop    ebx
c0021d1b:	c3                   	ret    

c0021d1c <avxInit>:
c0021d1c:	e8 17 03 00 00       	call   c0022038 <sseInit>
c0021d21:	50                   	push   eax
c0021d22:	51                   	push   ecx
c0021d23:	0f 20 e0             	mov    eax,cr4
c0021d26:	0d 00 00 04 00       	or     eax,0x40000
c0021d2b:	0f 22 e0             	mov    cr4,eax
c0021d2e:	31 c9                	xor    ecx,ecx
c0021d30:	0f 01 d0             	xgetbv 
c0021d33:	0d 07 00 00 00       	or     eax,0x7
c0021d38:	0f 01 d1             	xsetbv 
c0021d3b:	59                   	pop    ecx
c0021d3c:	58                   	pop    eax
c0021d3d:	c3                   	ret    

c0021d3e <avxClose>:
c0021d3e:	c3                   	ret    
c0021d3f:	90                   	nop

c0021d40 <isr0>:
c0021d40:	fa                   	cli    
c0021d41:	68 00 00 00 00       	push   0x0
c0021d46:	68 00 00 00 00       	push   0x0
c0021d4b:	e9 56 01 00 00       	jmp    c0021ea6 <int_common_stub>

c0021d50 <isr1>:
c0021d50:	fa                   	cli    
c0021d51:	6a 00                	push   0x0
c0021d53:	6a 01                	push   0x1
c0021d55:	e9 4c 01 00 00       	jmp    c0021ea6 <int_common_stub>

c0021d5a <isr2>:
c0021d5a:	fa                   	cli    
c0021d5b:	6a 00                	push   0x0
c0021d5d:	6a 02                	push   0x2
c0021d5f:	e9 42 01 00 00       	jmp    c0021ea6 <int_common_stub>

c0021d64 <isr3>:
c0021d64:	fa                   	cli    
c0021d65:	6a 00                	push   0x0
c0021d67:	6a 03                	push   0x3
c0021d69:	e9 38 01 00 00       	jmp    c0021ea6 <int_common_stub>

c0021d6e <isr4>:
c0021d6e:	fa                   	cli    
c0021d6f:	6a 00                	push   0x0
c0021d71:	6a 04                	push   0x4
c0021d73:	e9 2e 01 00 00       	jmp    c0021ea6 <int_common_stub>

c0021d78 <isr5>:
c0021d78:	fa                   	cli    
c0021d79:	6a 00                	push   0x0
c0021d7b:	6a 05                	push   0x5
c0021d7d:	e9 24 01 00 00       	jmp    c0021ea6 <int_common_stub>

c0021d82 <isr6>:
c0021d82:	fa                   	cli    
c0021d83:	6a 00                	push   0x0
c0021d85:	6a 06                	push   0x6
c0021d87:	e9 1a 01 00 00       	jmp    c0021ea6 <int_common_stub>

c0021d8c <isr7>:
c0021d8c:	fa                   	cli    
c0021d8d:	6a 00                	push   0x0
c0021d8f:	6a 07                	push   0x7
c0021d91:	e9 10 01 00 00       	jmp    c0021ea6 <int_common_stub>

c0021d96 <isr8>:
c0021d96:	fa                   	cli    
c0021d97:	6a 08                	push   0x8
c0021d99:	e9 08 01 00 00       	jmp    c0021ea6 <int_common_stub>

c0021d9e <isr9>:
c0021d9e:	fa                   	cli    
c0021d9f:	6a 00                	push   0x0
c0021da1:	6a 09                	push   0x9
c0021da3:	e9 fe 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021da8 <isr10>:
c0021da8:	fa                   	cli    
c0021da9:	6a 0a                	push   0xa
c0021dab:	e9 f6 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021db0 <isr11>:
c0021db0:	fa                   	cli    
c0021db1:	6a 0b                	push   0xb
c0021db3:	e9 ee 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021db8 <isr12>:
c0021db8:	fa                   	cli    
c0021db9:	6a 0c                	push   0xc
c0021dbb:	e9 e6 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021dc0 <isr13>:
c0021dc0:	fa                   	cli    
c0021dc1:	6a 0d                	push   0xd
c0021dc3:	53                   	push   ebx
c0021dc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021dc8:	81 fb 6b 1f 02 c0    	cmp    ebx,0xc0021f6b
c0021dce:	5b                   	pop    ebx
c0021dcf:	0f 84 98 01 00 00    	je     c0021f6d <finishSignal2>
c0021dd5:	e9 cc 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021dda <isr14>:
c0021dda:	fa                   	cli    
c0021ddb:	6a 0e                	push   0xe
c0021ddd:	e9 c4 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021de2 <isr15>:
c0021de2:	fa                   	cli    
c0021de3:	6a 00                	push   0x0
c0021de5:	6a 0f                	push   0xf
c0021de7:	e9 ba 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021dec <isr16>:
c0021dec:	fa                   	cli    
c0021ded:	6a 00                	push   0x0
c0021def:	6a 10                	push   0x10
c0021df1:	e9 b0 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021df6 <isr17>:
c0021df6:	fa                   	cli    
c0021df7:	6a 00                	push   0x0
c0021df9:	6a 11                	push   0x11
c0021dfb:	e9 a6 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e00 <isr18>:
c0021e00:	fa                   	cli    
c0021e01:	6a 00                	push   0x0
c0021e03:	6a 12                	push   0x12
c0021e05:	e9 9c 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e0a <irq3>:
c0021e0a:	fa                   	cli    
c0021e0b:	6a 00                	push   0x0
c0021e0d:	6a 23                	push   0x23
c0021e0f:	e9 92 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e14 <irq4>:
c0021e14:	fa                   	cli    
c0021e15:	6a 00                	push   0x0
c0021e17:	6a 24                	push   0x24
c0021e19:	e9 88 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e1e <irq5>:
c0021e1e:	fa                   	cli    
c0021e1f:	6a 00                	push   0x0
c0021e21:	6a 25                	push   0x25
c0021e23:	e9 7e 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e28 <irq6>:
c0021e28:	fa                   	cli    
c0021e29:	6a 00                	push   0x0
c0021e2b:	6a 26                	push   0x26
c0021e2d:	e9 74 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e32 <irq7>:
c0021e32:	fa                   	cli    
c0021e33:	6a 00                	push   0x0
c0021e35:	6a 27                	push   0x27
c0021e37:	e9 6a 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e3c <irq8>:
c0021e3c:	fa                   	cli    
c0021e3d:	6a 00                	push   0x0
c0021e3f:	6a 28                	push   0x28
c0021e41:	e9 60 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e46 <irq9>:
c0021e46:	fa                   	cli    
c0021e47:	6a 00                	push   0x0
c0021e49:	6a 29                	push   0x29
c0021e4b:	e9 56 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e50 <irq10>:
c0021e50:	fa                   	cli    
c0021e51:	6a 00                	push   0x0
c0021e53:	6a 2a                	push   0x2a
c0021e55:	e9 4c 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e5a <irq11>:
c0021e5a:	fa                   	cli    
c0021e5b:	6a 00                	push   0x0
c0021e5d:	6a 2b                	push   0x2b
c0021e5f:	e9 42 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e64 <irq12>:
c0021e64:	fa                   	cli    
c0021e65:	6a 00                	push   0x0
c0021e67:	6a 2c                	push   0x2c
c0021e69:	e9 38 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e6e <irq13>:
c0021e6e:	fa                   	cli    
c0021e6f:	6a 00                	push   0x0
c0021e71:	6a 2d                	push   0x2d
c0021e73:	e9 2e 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e78 <irq14>:
c0021e78:	fa                   	cli    
c0021e79:	6a 00                	push   0x0
c0021e7b:	6a 2e                	push   0x2e
c0021e7d:	e9 24 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e82 <irq15>:
c0021e82:	fa                   	cli    
c0021e83:	6a 00                	push   0x0
c0021e85:	6a 2f                	push   0x2f
c0021e87:	e9 1a 00 00 00       	jmp    c0021ea6 <int_common_stub>

c0021e8c <irq1>:
c0021e8c:	fa                   	cli    
c0021e8d:	6a 00                	push   0x0
c0021e8f:	6a 21                	push   0x21
c0021e91:	eb 13                	jmp    c0021ea6 <int_common_stub>

c0021e93 <irq2>:
c0021e93:	fa                   	cli    
c0021e94:	6a 00                	push   0x0
c0021e96:	6a 22                	push   0x22
c0021e98:	eb 0c                	jmp    c0021ea6 <int_common_stub>

c0021e9a <isr96>:
c0021e9a:	6a 00                	push   0x0
c0021e9c:	6a 60                	push   0x60
c0021e9e:	fb                   	sti    
c0021e9f:	eb 05                	jmp    c0021ea6 <int_common_stub>

c0021ea1 <irq0>:
c0021ea1:	fa                   	cli    
c0021ea2:	6a 00                	push   0x0
c0021ea4:	6a 20                	push   0x20

c0021ea6 <int_common_stub>:
c0021ea6:	60                   	pusha  
c0021ea7:	1e                   	push   ds
c0021ea8:	06                   	push   es
c0021ea9:	0f a0                	push   fs
c0021eab:	0f a8                	push   gs
c0021ead:	66 b8 10 00          	mov    ax,0x10
c0021eb1:	66 8e d8             	mov    ds,ax
c0021eb4:	66 8e c0             	mov    es,ax
c0021eb7:	66 8e e0             	mov    fs,ax
c0021eba:	66 8e e8             	mov    gs,ax
c0021ebd:	54                   	push   esp
c0021ebe:	fc                   	cld    
c0021ebf:	e8 44 95 ff ff       	call   c001b408 <int_handler>
c0021ec4:	81 c4 04 00 00 00    	add    esp,0x4
c0021eca:	e8 8c f6 fe ff       	call   c001155b <KiCheckSignalZ>
c0021ecf:	85 c0                	test   eax,eax
c0021ed1:	75 0e                	jne    c0021ee1 <doSignals>
c0021ed3:	0f a9                	pop    gs
c0021ed5:	0f a1                	pop    fs
c0021ed7:	07                   	pop    es
c0021ed8:	1f                   	pop    ds
c0021ed9:	61                   	popa   
c0021eda:	81 c4 08 00 00 00    	add    esp,0x8
c0021ee0:	cf                   	iret   

c0021ee1 <doSignals>:
c0021ee1:	0f a9                	pop    gs
c0021ee3:	0f a1                	pop    fs
c0021ee5:	07                   	pop    es
c0021ee6:	1f                   	pop    ds
c0021ee7:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021eec:	61                   	popa   
c0021eed:	53                   	push   ebx
c0021eee:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c0021ef4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021ef7:	5b                   	pop    ebx
c0021ef8:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021efd:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c0021f00:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c0021f03:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021f06:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021f09:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021f0c:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021f0f:	81 c4 08 00 00 00    	add    esp,0x8
c0021f15:	5e                   	pop    esi
c0021f16:	5b                   	pop    ebx
c0021f17:	59                   	pop    ecx
c0021f18:	5a                   	pop    edx
c0021f19:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021f1c:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021f1f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021f22:	52                   	push   edx
c0021f23:	51                   	push   ecx
c0021f24:	53                   	push   ebx
c0021f25:	56                   	push   esi
c0021f26:	81 ec 08 00 00 00    	sub    esp,0x8
c0021f2c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021f2f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0021f32:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0021f35:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021f38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021f3b:	60                   	pusha  
c0021f3c:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c0021f42:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0021f45:	89 e3                	mov    ebx,esp
c0021f47:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021f4a:	52                   	push   edx
c0021f4b:	68 6b 1f 02 c0       	push   0xc0021f6b
c0021f50:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c0021f53:	89 dc                	mov    esp,ebx
c0021f55:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021f58:	68 23 00 00 00       	push   0x23
c0021f5d:	51                   	push   ecx
c0021f5e:	68 02 02 00 00       	push   0x202
c0021f63:	68 1b 00 00 00       	push   0x1b
c0021f68:	ff 36                	push   DWORD PTR [esi]
c0021f6a:	cf                   	iret   

c0021f6b <finishSignal>:
c0021f6b:	cd 0f                	int    0xf

c0021f6d <finishSignal2>:
c0021f6d:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c0021f73:	e8 6f f6 fe ff       	call   c00115e7 <KiFinishSignalZ>
c0021f78:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021f7e:	68 23 00 00 00       	push   0x23
c0021f83:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021f86:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021f89:	68 1b 00 00 00       	push   0x1b
c0021f8e:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c0021f91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021f94:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021f97:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021f9a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021f9d:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c0021fa0:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0021fa3:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021fa6:	cf                   	iret   
c0021fa7:	90                   	nop

c0021fa8 <irq16>:
c0021fa8:	fa                   	cli    
c0021fa9:	6a 00                	push   0x0
c0021fab:	6a 30                	push   0x30
c0021fad:	e9 f4 fe ff ff       	jmp    c0021ea6 <int_common_stub>

c0021fb2 <irq17>:
c0021fb2:	fa                   	cli    
c0021fb3:	6a 00                	push   0x0
c0021fb5:	6a 31                	push   0x31
c0021fb7:	e9 ea fe ff ff       	jmp    c0021ea6 <int_common_stub>

c0021fbc <irq18>:
c0021fbc:	fa                   	cli    
c0021fbd:	6a 00                	push   0x0
c0021fbf:	6a 32                	push   0x32
c0021fc1:	e9 e0 fe ff ff       	jmp    c0021ea6 <int_common_stub>

c0021fc6 <irq19>:
c0021fc6:	fa                   	cli    
c0021fc7:	6a 00                	push   0x0
c0021fc9:	6a 33                	push   0x33
c0021fcb:	e9 d6 fe ff ff       	jmp    c0021ea6 <int_common_stub>

c0021fd0 <irq20>:
c0021fd0:	fa                   	cli    
c0021fd1:	6a 00                	push   0x0
c0021fd3:	6a 34                	push   0x34
c0021fd5:	e9 cc fe ff ff       	jmp    c0021ea6 <int_common_stub>

c0021fda <irq21>:
c0021fda:	fa                   	cli    
c0021fdb:	6a 00                	push   0x0
c0021fdd:	6a 35                	push   0x35
c0021fdf:	e9 c2 fe ff ff       	jmp    c0021ea6 <int_common_stub>

c0021fe4 <irq22>:
c0021fe4:	fa                   	cli    
c0021fe5:	6a 00                	push   0x0
c0021fe7:	6a 36                	push   0x36
c0021fe9:	e9 b8 fe ff ff       	jmp    c0021ea6 <int_common_stub>

c0021fee <irq23>:
c0021fee:	fa                   	cli    
c0021fef:	6a 00                	push   0x0
c0021ff1:	6a 37                	push   0x37
c0021ff3:	e9 ae fe ff ff       	jmp    c0021ea6 <int_common_stub>
c0021ff8:	66 90                	xchg   ax,ax
c0021ffa:	66 90                	xchg   ax,ax
c0021ffc:	66 90                	xchg   ax,ax
c0021ffe:	66 90                	xchg   ax,ax

c0022000 <i386GetRDRAND>:
c0022000:	b9 64 00 00 00       	mov    ecx,0x64

c0022005 <retry>:
c0022005:	0f c7 f0             	rdrand eax
c0022008:	72 05                	jb     c002200f <retry.done>
c002200a:	e2 f9                	loop   c0022005 <retry>

c002200c <retry.fail>:
c002200c:	31 c0                	xor    eax,eax
c002200e:	c3                   	ret    

c002200f <retry.done>:
c002200f:	c3                   	ret    

c0022010 <sseDetect>:
c0022010:	b8 01 00 00 00       	mov    eax,0x1
c0022015:	0f a2                	cpuid  
c0022017:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002201d:	74 06                	je     c0022025 <sseDetect.noSSE>
c002201f:	b8 01 00 00 00       	mov    eax,0x1
c0022024:	c3                   	ret    

c0022025 <sseDetect.noSSE>:
c0022025:	31 c0                	xor    eax,eax
c0022027:	c3                   	ret    

c0022028 <sseSave>:
c0022028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002202c:	0f ae 00             	fxsave [eax]
c002202f:	c3                   	ret    

c0022030 <sseLoad>:
c0022030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022034:	0f ae 08             	fxrstor [eax]
c0022037:	c3                   	ret    

c0022038 <sseInit>:
c0022038:	e8 48 00 00 00       	call   c0022085 <x87Init>
c002203d:	0f 20 e0             	mov    eax,cr4
c0022040:	66 0d 00 06          	or     ax,0x600
c0022044:	0f 22 e0             	mov    cr4,eax
c0022047:	c3                   	ret    

c0022048 <sseClose>:
c0022048:	c3                   	ret    
c0022049:	66 90                	xchg   ax,ax
c002204b:	66 90                	xchg   ax,ax
c002204d:	66 90                	xchg   ax,ax
c002204f:	90                   	nop

c0022050 <value_37F>:
c0022050:	7f 03                	jg     c0022055 <value_37A+0x1>

c0022052 <value_37E>:
c0022052:	7e 03                	jle    c0022057 <x87Detect+0x1>

c0022054 <value_37A>:
c0022054:	7a 03                	jp     c0022059 <x87Detect+0x3>

c0022056 <x87Detect>:
c0022056:	53                   	push   ebx
c0022057:	51                   	push   ecx
c0022058:	52                   	push   edx
c0022059:	b8 01 00 00 00       	mov    eax,0x1
c002205e:	0f a2                	cpuid  
c0022060:	f7 c2 01 00 00 00    	test   edx,0x1
c0022066:	74 06                	je     c002206e <x87Detect.nox87>
c0022068:	b8 01 00 00 00       	mov    eax,0x1
c002206d:	c3                   	ret    

c002206e <x87Detect.nox87>:
c002206e:	b8 00 00 00 00       	mov    eax,0x0
c0022073:	5a                   	pop    edx
c0022074:	59                   	pop    ecx
c0022075:	5b                   	pop    ebx
c0022076:	c3                   	ret    

c0022077 <x87Save>:
c0022077:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002207b:	dd 30                	fnsave [eax]
c002207d:	c3                   	ret    

c002207e <x87Load>:
c002207e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022082:	dd 20                	frstor [eax]
c0022084:	c3                   	ret    

c0022085 <x87Init>:
c0022085:	0f 20 c0             	mov    eax,cr0
c0022088:	66 25 fb ff          	and    ax,0xfffb
c002208c:	66 0d 22 00          	or     ax,0x22
c0022090:	0f 22 c0             	mov    cr0,eax
c0022093:	db e3                	fninit 
c0022095:	0f 06                	clts   
c0022097:	d9 2d 54 20 02 c0    	fldcw  WORD PTR ds:0xc0022054
c002209d:	c3                   	ret    

c002209e <x87Close>:
c002209e:	c3                   	ret    
c002209f:	90                   	nop

c00220a0 <__do_global_ctors_aux>:
c00220a0:	a1 c8 74 02 c0       	mov    eax,ds:0xc00274c8
c00220a5:	83 f8 ff             	cmp    eax,0xffffffff
c00220a8:	74 1a                	je     c00220c4 <__do_global_ctors_aux+0x24>
c00220aa:	55                   	push   ebp
c00220ab:	89 e5                	mov    ebp,esp
c00220ad:	53                   	push   ebx
c00220ae:	52                   	push   edx
c00220af:	bb c8 74 02 c0       	mov    ebx,0xc00274c8
c00220b4:	ff d0                	call   eax
c00220b6:	83 eb 04             	sub    ebx,0x4
c00220b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220bb:	83 f8 ff             	cmp    eax,0xffffffff
c00220be:	75 f4                	jne    c00220b4 <__do_global_ctors_aux+0x14>
c00220c0:	58                   	pop    eax
c00220c1:	5b                   	pop    ebx
c00220c2:	5d                   	pop    ebp
c00220c3:	c3                   	ret    
c00220c4:	c3                   	ret    
c00220c5:	66 90                	xchg   ax,ax
c00220c7:	90                   	nop

c00220c8 <__divdi3>:
c00220c8:	55                   	push   ebp
c00220c9:	57                   	push   edi
c00220ca:	56                   	push   esi
c00220cb:	53                   	push   ebx
c00220cc:	83 ec 1c             	sub    esp,0x1c
c00220cf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00220d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00220d7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00220da:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00220de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00220e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00220e6:	85 db                	test   ebx,ebx
c00220e8:	0f 88 8e 00 00 00    	js     c002217c <__divdi3+0xb4>
c00220ee:	89 dd                	mov    ebp,ebx
c00220f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00220f8:	89 d3                	mov    ebx,edx
c00220fa:	85 d2                	test   edx,edx
c00220fc:	79 0d                	jns    c002210b <__divdi3+0x43>
c00220fe:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022102:	f7 d8                	neg    eax
c0022104:	83 d2 00             	adc    edx,0x0
c0022107:	f7 da                	neg    edx
c0022109:	89 d3                	mov    ebx,edx
c002210b:	89 c7                	mov    edi,eax
c002210d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022110:	85 db                	test   ebx,ebx
c0022112:	75 48                	jne    c002215c <__divdi3+0x94>
c0022114:	39 ef                	cmp    edi,ebp
c0022116:	76 24                	jbe    c002213c <__divdi3+0x74>
c0022118:	89 ea                	mov    edx,ebp
c002211a:	f7 f7                	div    edi
c002211c:	89 c1                	mov    ecx,eax
c002211e:	31 f6                	xor    esi,esi
c0022120:	89 c8                	mov    eax,ecx
c0022122:	89 f2                	mov    edx,esi
c0022124:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022128:	85 c9                	test   ecx,ecx
c002212a:	74 07                	je     c0022133 <__divdi3+0x6b>
c002212c:	f7 d8                	neg    eax
c002212e:	83 d2 00             	adc    edx,0x0
c0022131:	f7 da                	neg    edx
c0022133:	83 c4 1c             	add    esp,0x1c
c0022136:	5b                   	pop    ebx
c0022137:	5e                   	pop    esi
c0022138:	5f                   	pop    edi
c0022139:	5d                   	pop    ebp
c002213a:	c3                   	ret    
c002213b:	90                   	nop
c002213c:	85 ff                	test   edi,edi
c002213e:	75 0b                	jne    c002214b <__divdi3+0x83>
c0022140:	b8 01 00 00 00       	mov    eax,0x1
c0022145:	31 d2                	xor    edx,edx
c0022147:	f7 f3                	div    ebx
c0022149:	89 c7                	mov    edi,eax
c002214b:	31 d2                	xor    edx,edx
c002214d:	89 e8                	mov    eax,ebp
c002214f:	f7 f7                	div    edi
c0022151:	89 c6                	mov    esi,eax
c0022153:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022156:	f7 f7                	div    edi
c0022158:	89 c1                	mov    ecx,eax
c002215a:	eb c4                	jmp    c0022120 <__divdi3+0x58>
c002215c:	39 eb                	cmp    ebx,ebp
c002215e:	77 3c                	ja     c002219c <__divdi3+0xd4>
c0022160:	0f bd f3             	bsr    esi,ebx
c0022163:	83 f6 1f             	xor    esi,0x1f
c0022166:	75 40                	jne    c00221a8 <__divdi3+0xe0>
c0022168:	39 eb                	cmp    ebx,ebp
c002216a:	72 09                	jb     c0022175 <__divdi3+0xad>
c002216c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002216f:	0f 87 97 00 00 00    	ja     c002220c <__divdi3+0x144>
c0022175:	b9 01 00 00 00       	mov    ecx,0x1
c002217a:	eb a4                	jmp    c0022120 <__divdi3+0x58>
c002217c:	f7 d9                	neg    ecx
c002217e:	83 d3 00             	adc    ebx,0x0
c0022181:	f7 db                	neg    ebx
c0022183:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022186:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002218a:	89 dd                	mov    ebp,ebx
c002218c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022194:	e9 5f ff ff ff       	jmp    c00220f8 <__divdi3+0x30>
c0022199:	8d 76 00             	lea    esi,[esi+0x0]
c002219c:	31 f6                	xor    esi,esi
c002219e:	31 c9                	xor    ecx,ecx
c00221a0:	e9 7b ff ff ff       	jmp    c0022120 <__divdi3+0x58>
c00221a5:	8d 76 00             	lea    esi,[esi+0x0]
c00221a8:	b8 20 00 00 00       	mov    eax,0x20
c00221ad:	29 f0                	sub    eax,esi
c00221af:	89 f1                	mov    ecx,esi
c00221b1:	d3 e3                	shl    ebx,cl
c00221b3:	89 fa                	mov    edx,edi
c00221b5:	88 c1                	mov    cl,al
c00221b7:	d3 ea                	shr    edx,cl
c00221b9:	09 da                	or     edx,ebx
c00221bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221bf:	89 f1                	mov    ecx,esi
c00221c1:	d3 e7                	shl    edi,cl
c00221c3:	89 eb                	mov    ebx,ebp
c00221c5:	88 c1                	mov    cl,al
c00221c7:	d3 eb                	shr    ebx,cl
c00221c9:	89 f1                	mov    ecx,esi
c00221cb:	d3 e5                	shl    ebp,cl
c00221cd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00221d0:	88 c1                	mov    cl,al
c00221d2:	d3 ea                	shr    edx,cl
c00221d4:	09 d5                	or     ebp,edx
c00221d6:	89 e8                	mov    eax,ebp
c00221d8:	89 da                	mov    edx,ebx
c00221da:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00221de:	89 d3                	mov    ebx,edx
c00221e0:	89 c5                	mov    ebp,eax
c00221e2:	f7 e7                	mul    edi
c00221e4:	39 d3                	cmp    ebx,edx
c00221e6:	72 18                	jb     c0022200 <__divdi3+0x138>
c00221e8:	74 0a                	je     c00221f4 <__divdi3+0x12c>
c00221ea:	89 e9                	mov    ecx,ebp
c00221ec:	31 f6                	xor    esi,esi
c00221ee:	e9 2d ff ff ff       	jmp    c0022120 <__divdi3+0x58>
c00221f3:	90                   	nop
c00221f4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00221f7:	89 f1                	mov    ecx,esi
c00221f9:	d3 e7                	shl    edi,cl
c00221fb:	39 c7                	cmp    edi,eax
c00221fd:	73 eb                	jae    c00221ea <__divdi3+0x122>
c00221ff:	90                   	nop
c0022200:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022203:	31 f6                	xor    esi,esi
c0022205:	e9 16 ff ff ff       	jmp    c0022120 <__divdi3+0x58>
c002220a:	66 90                	xchg   ax,ax
c002220c:	31 c9                	xor    ecx,ecx
c002220e:	e9 0d ff ff ff       	jmp    c0022120 <__divdi3+0x58>
c0022213:	90                   	nop

c0022214 <__moddi3>:
c0022214:	55                   	push   ebp
c0022215:	57                   	push   edi
c0022216:	56                   	push   esi
c0022217:	53                   	push   ebx
c0022218:	83 ec 2c             	sub    esp,0x2c
c002221b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002221f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022223:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022227:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002222b:	85 db                	test   ebx,ebx
c002222d:	0f 88 85 00 00 00    	js     c00222b8 <__moddi3+0xa4>
c0022233:	89 de                	mov    esi,ebx
c0022235:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002223d:	89 d7                	mov    edi,edx
c002223f:	85 d2                	test   edx,edx
c0022241:	79 09                	jns    c002224c <__moddi3+0x38>
c0022243:	f7 d8                	neg    eax
c0022245:	83 d2 00             	adc    edx,0x0
c0022248:	f7 da                	neg    edx
c002224a:	89 d7                	mov    edi,edx
c002224c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022250:	89 cd                	mov    ebp,ecx
c0022252:	85 ff                	test   edi,edi
c0022254:	75 52                	jne    c00222a8 <__moddi3+0x94>
c0022256:	89 c3                	mov    ebx,eax
c0022258:	39 f0                	cmp    eax,esi
c002225a:	76 24                	jbe    c0022280 <__moddi3+0x6c>
c002225c:	89 c8                	mov    eax,ecx
c002225e:	89 f2                	mov    edx,esi
c0022260:	f7 f3                	div    ebx
c0022262:	89 d6                	mov    esi,edx
c0022264:	89 f0                	mov    eax,esi
c0022266:	31 d2                	xor    edx,edx
c0022268:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002226c:	85 c9                	test   ecx,ecx
c002226e:	74 07                	je     c0022277 <__moddi3+0x63>
c0022270:	f7 d8                	neg    eax
c0022272:	83 d2 00             	adc    edx,0x0
c0022275:	f7 da                	neg    edx
c0022277:	83 c4 2c             	add    esp,0x2c
c002227a:	5b                   	pop    ebx
c002227b:	5e                   	pop    esi
c002227c:	5f                   	pop    edi
c002227d:	5d                   	pop    ebp
c002227e:	c3                   	ret    
c002227f:	90                   	nop
c0022280:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022284:	85 db                	test   ebx,ebx
c0022286:	75 0d                	jne    c0022295 <__moddi3+0x81>
c0022288:	b8 01 00 00 00       	mov    eax,0x1
c002228d:	31 d2                	xor    edx,edx
c002228f:	f7 f7                	div    edi
c0022291:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022295:	89 f0                	mov    eax,esi
c0022297:	31 d2                	xor    edx,edx
c0022299:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002229d:	f7 f7                	div    edi
c002229f:	89 e8                	mov    eax,ebp
c00222a1:	f7 f7                	div    edi
c00222a3:	89 d6                	mov    esi,edx
c00222a5:	eb bd                	jmp    c0022264 <__moddi3+0x50>
c00222a7:	90                   	nop
c00222a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00222ac:	39 f7                	cmp    edi,esi
c00222ae:	76 20                	jbe    c00222d0 <__moddi3+0xbc>
c00222b0:	89 c8                	mov    eax,ecx
c00222b2:	89 f2                	mov    edx,esi
c00222b4:	eb b2                	jmp    c0022268 <__moddi3+0x54>
c00222b6:	66 90                	xchg   ax,ax
c00222b8:	f7 d9                	neg    ecx
c00222ba:	83 d3 00             	adc    ebx,0x0
c00222bd:	f7 db                	neg    ebx
c00222bf:	89 de                	mov    esi,ebx
c00222c1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00222c9:	e9 6f ff ff ff       	jmp    c002223d <__moddi3+0x29>
c00222ce:	66 90                	xchg   ax,ax
c00222d0:	0f bd c7             	bsr    eax,edi
c00222d3:	83 f0 1f             	xor    eax,0x1f
c00222d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222da:	75 24                	jne    c0022300 <__moddi3+0xec>
c00222dc:	39 f7                	cmp    edi,esi
c00222de:	72 06                	jb     c00222e6 <__moddi3+0xd2>
c00222e0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00222e4:	77 0c                	ja     c00222f2 <__moddi3+0xde>
c00222e6:	89 e9                	mov    ecx,ebp
c00222e8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00222ec:	19 fe                	sbb    esi,edi
c00222ee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00222f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00222f6:	89 f2                	mov    edx,esi
c00222f8:	e9 6b ff ff ff       	jmp    c0022268 <__moddi3+0x54>
c00222fd:	8d 76 00             	lea    esi,[esi+0x0]
c0022300:	b8 20 00 00 00       	mov    eax,0x20
c0022305:	89 c2                	mov    edx,eax
c0022307:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002230b:	29 da                	sub    edx,ebx
c002230d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022311:	88 d9                	mov    cl,bl
c0022313:	d3 e7                	shl    edi,cl
c0022315:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022319:	88 d1                	mov    cl,dl
c002231b:	d3 e8                	shr    eax,cl
c002231d:	09 c7                	or     edi,eax
c002231f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022323:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022327:	89 d8                	mov    eax,ebx
c0022329:	88 d9                	mov    cl,bl
c002232b:	d3 e7                	shl    edi,cl
c002232d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022331:	89 f3                	mov    ebx,esi
c0022333:	88 d1                	mov    cl,dl
c0022335:	d3 eb                	shr    ebx,cl
c0022337:	89 c7                	mov    edi,eax
c0022339:	88 c1                	mov    cl,al
c002233b:	d3 e6                	shl    esi,cl
c002233d:	89 e8                	mov    eax,ebp
c002233f:	88 d1                	mov    cl,dl
c0022341:	d3 e8                	shr    eax,cl
c0022343:	09 f0                	or     eax,esi
c0022345:	89 f9                	mov    ecx,edi
c0022347:	d3 e5                	shl    ebp,cl
c0022349:	89 da                	mov    edx,ebx
c002234b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002234f:	89 d3                	mov    ebx,edx
c0022351:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022355:	89 c6                	mov    esi,eax
c0022357:	89 d1                	mov    ecx,edx
c0022359:	39 d3                	cmp    ebx,edx
c002235b:	72 27                	jb     c0022384 <__moddi3+0x170>
c002235d:	74 21                	je     c0022380 <__moddi3+0x16c>
c002235f:	29 f5                	sub    ebp,esi
c0022361:	19 cb                	sbb    ebx,ecx
c0022363:	89 de                	mov    esi,ebx
c0022365:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022369:	d3 e6                	shl    esi,cl
c002236b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002236f:	89 f9                	mov    ecx,edi
c0022371:	d3 ed                	shr    ebp,cl
c0022373:	09 ee                	or     esi,ebp
c0022375:	89 f0                	mov    eax,esi
c0022377:	d3 eb                	shr    ebx,cl
c0022379:	89 da                	mov    edx,ebx
c002237b:	e9 e8 fe ff ff       	jmp    c0022268 <__moddi3+0x54>
c0022380:	39 c5                	cmp    ebp,eax
c0022382:	73 db                	jae    c002235f <__moddi3+0x14b>
c0022384:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022388:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002238c:	89 d1                	mov    ecx,edx
c002238e:	89 c6                	mov    esi,eax
c0022390:	eb cd                	jmp    c002235f <__moddi3+0x14b>
c0022392:	66 90                	xchg   ax,ax

c0022394 <__udivdi3>:
c0022394:	55                   	push   ebp
c0022395:	57                   	push   edi
c0022396:	56                   	push   esi
c0022397:	53                   	push   ebx
c0022398:	83 ec 1c             	sub    esp,0x1c
c002239b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002239f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00223a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00223a7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00223ab:	85 d2                	test   edx,edx
c00223ad:	75 41                	jne    c00223f0 <__udivdi3+0x5c>
c00223af:	39 f7                	cmp    edi,esi
c00223b1:	76 15                	jbe    c00223c8 <__udivdi3+0x34>
c00223b3:	89 e8                	mov    eax,ebp
c00223b5:	89 f2                	mov    edx,esi
c00223b7:	f7 f7                	div    edi
c00223b9:	31 db                	xor    ebx,ebx
c00223bb:	89 da                	mov    edx,ebx
c00223bd:	83 c4 1c             	add    esp,0x1c
c00223c0:	5b                   	pop    ebx
c00223c1:	5e                   	pop    esi
c00223c2:	5f                   	pop    edi
c00223c3:	5d                   	pop    ebp
c00223c4:	c3                   	ret    
c00223c5:	8d 76 00             	lea    esi,[esi+0x0]
c00223c8:	89 f9                	mov    ecx,edi
c00223ca:	85 ff                	test   edi,edi
c00223cc:	75 0b                	jne    c00223d9 <__udivdi3+0x45>
c00223ce:	b8 01 00 00 00       	mov    eax,0x1
c00223d3:	31 d2                	xor    edx,edx
c00223d5:	f7 f7                	div    edi
c00223d7:	89 c1                	mov    ecx,eax
c00223d9:	31 d2                	xor    edx,edx
c00223db:	89 f0                	mov    eax,esi
c00223dd:	f7 f1                	div    ecx
c00223df:	89 c3                	mov    ebx,eax
c00223e1:	89 e8                	mov    eax,ebp
c00223e3:	f7 f1                	div    ecx
c00223e5:	89 da                	mov    edx,ebx
c00223e7:	83 c4 1c             	add    esp,0x1c
c00223ea:	5b                   	pop    ebx
c00223eb:	5e                   	pop    esi
c00223ec:	5f                   	pop    edi
c00223ed:	5d                   	pop    ebp
c00223ee:	c3                   	ret    
c00223ef:	90                   	nop
c00223f0:	39 f2                	cmp    edx,esi
c00223f2:	77 1c                	ja     c0022410 <__udivdi3+0x7c>
c00223f4:	0f bd da             	bsr    ebx,edx
c00223f7:	83 f3 1f             	xor    ebx,0x1f
c00223fa:	75 24                	jne    c0022420 <__udivdi3+0x8c>
c00223fc:	39 f2                	cmp    edx,esi
c00223fe:	72 08                	jb     c0022408 <__udivdi3+0x74>
c0022400:	39 ef                	cmp    edi,ebp
c0022402:	0f 87 84 00 00 00    	ja     c002248c <__udivdi3+0xf8>
c0022408:	b8 01 00 00 00       	mov    eax,0x1
c002240d:	eb ac                	jmp    c00223bb <__udivdi3+0x27>
c002240f:	90                   	nop
c0022410:	31 db                	xor    ebx,ebx
c0022412:	31 c0                	xor    eax,eax
c0022414:	89 da                	mov    edx,ebx
c0022416:	83 c4 1c             	add    esp,0x1c
c0022419:	5b                   	pop    ebx
c002241a:	5e                   	pop    esi
c002241b:	5f                   	pop    edi
c002241c:	5d                   	pop    ebp
c002241d:	c3                   	ret    
c002241e:	66 90                	xchg   ax,ax
c0022420:	b8 20 00 00 00       	mov    eax,0x20
c0022425:	29 d8                	sub    eax,ebx
c0022427:	88 d9                	mov    cl,bl
c0022429:	d3 e2                	shl    edx,cl
c002242b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002242f:	89 fa                	mov    edx,edi
c0022431:	88 c1                	mov    cl,al
c0022433:	d3 ea                	shr    edx,cl
c0022435:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022439:	09 d1                	or     ecx,edx
c002243b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002243f:	88 d9                	mov    cl,bl
c0022441:	d3 e7                	shl    edi,cl
c0022443:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022447:	89 f7                	mov    edi,esi
c0022449:	88 c1                	mov    cl,al
c002244b:	d3 ef                	shr    edi,cl
c002244d:	88 d9                	mov    cl,bl
c002244f:	d3 e6                	shl    esi,cl
c0022451:	89 ea                	mov    edx,ebp
c0022453:	88 c1                	mov    cl,al
c0022455:	d3 ea                	shr    edx,cl
c0022457:	09 d6                	or     esi,edx
c0022459:	89 f0                	mov    eax,esi
c002245b:	89 fa                	mov    edx,edi
c002245d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022461:	89 d7                	mov    edi,edx
c0022463:	89 c6                	mov    esi,eax
c0022465:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022469:	39 d7                	cmp    edi,edx
c002246b:	72 13                	jb     c0022480 <__udivdi3+0xec>
c002246d:	74 09                	je     c0022478 <__udivdi3+0xe4>
c002246f:	89 f0                	mov    eax,esi
c0022471:	31 db                	xor    ebx,ebx
c0022473:	e9 43 ff ff ff       	jmp    c00223bb <__udivdi3+0x27>
c0022478:	88 d9                	mov    cl,bl
c002247a:	d3 e5                	shl    ebp,cl
c002247c:	39 c5                	cmp    ebp,eax
c002247e:	73 ef                	jae    c002246f <__udivdi3+0xdb>
c0022480:	8d 46 ff             	lea    eax,[esi-0x1]
c0022483:	31 db                	xor    ebx,ebx
c0022485:	e9 31 ff ff ff       	jmp    c00223bb <__udivdi3+0x27>
c002248a:	66 90                	xchg   ax,ax
c002248c:	31 c0                	xor    eax,eax
c002248e:	e9 28 ff ff ff       	jmp    c00223bb <__udivdi3+0x27>
c0022493:	90                   	nop

c0022494 <__umoddi3>:
c0022494:	55                   	push   ebp
c0022495:	57                   	push   edi
c0022496:	56                   	push   esi
c0022497:	53                   	push   ebx
c0022498:	83 ec 1c             	sub    esp,0x1c
c002249b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002249f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00224a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00224a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00224ab:	89 da                	mov    edx,ebx
c00224ad:	85 c0                	test   eax,eax
c00224af:	75 37                	jne    c00224e8 <__umoddi3+0x54>
c00224b1:	39 df                	cmp    edi,ebx
c00224b3:	76 13                	jbe    c00224c8 <__umoddi3+0x34>
c00224b5:	89 f0                	mov    eax,esi
c00224b7:	f7 f7                	div    edi
c00224b9:	89 d0                	mov    eax,edx
c00224bb:	31 d2                	xor    edx,edx
c00224bd:	83 c4 1c             	add    esp,0x1c
c00224c0:	5b                   	pop    ebx
c00224c1:	5e                   	pop    esi
c00224c2:	5f                   	pop    edi
c00224c3:	5d                   	pop    ebp
c00224c4:	c3                   	ret    
c00224c5:	8d 76 00             	lea    esi,[esi+0x0]
c00224c8:	89 fd                	mov    ebp,edi
c00224ca:	85 ff                	test   edi,edi
c00224cc:	75 0b                	jne    c00224d9 <__umoddi3+0x45>
c00224ce:	b8 01 00 00 00       	mov    eax,0x1
c00224d3:	31 d2                	xor    edx,edx
c00224d5:	f7 f7                	div    edi
c00224d7:	89 c5                	mov    ebp,eax
c00224d9:	89 d8                	mov    eax,ebx
c00224db:	31 d2                	xor    edx,edx
c00224dd:	f7 f5                	div    ebp
c00224df:	89 f0                	mov    eax,esi
c00224e1:	f7 f5                	div    ebp
c00224e3:	89 d0                	mov    eax,edx
c00224e5:	eb d4                	jmp    c00224bb <__umoddi3+0x27>
c00224e7:	90                   	nop
c00224e8:	89 f1                	mov    ecx,esi
c00224ea:	39 d8                	cmp    eax,ebx
c00224ec:	76 0a                	jbe    c00224f8 <__umoddi3+0x64>
c00224ee:	89 f0                	mov    eax,esi
c00224f0:	83 c4 1c             	add    esp,0x1c
c00224f3:	5b                   	pop    ebx
c00224f4:	5e                   	pop    esi
c00224f5:	5f                   	pop    edi
c00224f6:	5d                   	pop    ebp
c00224f7:	c3                   	ret    
c00224f8:	0f bd e8             	bsr    ebp,eax
c00224fb:	83 f5 1f             	xor    ebp,0x1f
c00224fe:	75 1c                	jne    c002251c <__umoddi3+0x88>
c0022500:	39 d8                	cmp    eax,ebx
c0022502:	72 04                	jb     c0022508 <__umoddi3+0x74>
c0022504:	39 f7                	cmp    edi,esi
c0022506:	77 08                	ja     c0022510 <__umoddi3+0x7c>
c0022508:	89 da                	mov    edx,ebx
c002250a:	29 fe                	sub    esi,edi
c002250c:	19 c2                	sbb    edx,eax
c002250e:	89 f1                	mov    ecx,esi
c0022510:	89 c8                	mov    eax,ecx
c0022512:	83 c4 1c             	add    esp,0x1c
c0022515:	5b                   	pop    ebx
c0022516:	5e                   	pop    esi
c0022517:	5f                   	pop    edi
c0022518:	5d                   	pop    ebp
c0022519:	c3                   	ret    
c002251a:	66 90                	xchg   ax,ax
c002251c:	ba 20 00 00 00       	mov    edx,0x20
c0022521:	29 ea                	sub    edx,ebp
c0022523:	89 e9                	mov    ecx,ebp
c0022525:	d3 e0                	shl    eax,cl
c0022527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002252b:	89 f8                	mov    eax,edi
c002252d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022531:	88 d1                	mov    cl,dl
c0022533:	d3 e8                	shr    eax,cl
c0022535:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022539:	09 c1                	or     ecx,eax
c002253b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002253f:	89 e9                	mov    ecx,ebp
c0022541:	d3 e7                	shl    edi,cl
c0022543:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022547:	89 d8                	mov    eax,ebx
c0022549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002254d:	88 d1                	mov    cl,dl
c002254f:	d3 e8                	shr    eax,cl
c0022551:	89 c7                	mov    edi,eax
c0022553:	89 e9                	mov    ecx,ebp
c0022555:	d3 e3                	shl    ebx,cl
c0022557:	89 f0                	mov    eax,esi
c0022559:	88 d1                	mov    cl,dl
c002255b:	d3 e8                	shr    eax,cl
c002255d:	09 d8                	or     eax,ebx
c002255f:	89 e9                	mov    ecx,ebp
c0022561:	d3 e6                	shl    esi,cl
c0022563:	89 f3                	mov    ebx,esi
c0022565:	89 fa                	mov    edx,edi
c0022567:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002256b:	89 d1                	mov    ecx,edx
c002256d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022571:	89 c6                	mov    esi,eax
c0022573:	89 d7                	mov    edi,edx
c0022575:	39 d1                	cmp    ecx,edx
c0022577:	72 27                	jb     c00225a0 <__umoddi3+0x10c>
c0022579:	74 21                	je     c002259c <__umoddi3+0x108>
c002257b:	89 ca                	mov    edx,ecx
c002257d:	29 f3                	sub    ebx,esi
c002257f:	19 fa                	sbb    edx,edi
c0022581:	89 d0                	mov    eax,edx
c0022583:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022587:	d3 e0                	shl    eax,cl
c0022589:	89 e9                	mov    ecx,ebp
c002258b:	d3 eb                	shr    ebx,cl
c002258d:	09 d8                	or     eax,ebx
c002258f:	d3 ea                	shr    edx,cl
c0022591:	83 c4 1c             	add    esp,0x1c
c0022594:	5b                   	pop    ebx
c0022595:	5e                   	pop    esi
c0022596:	5f                   	pop    edi
c0022597:	5d                   	pop    ebp
c0022598:	c3                   	ret    
c0022599:	8d 76 00             	lea    esi,[esi+0x0]
c002259c:	39 c3                	cmp    ebx,eax
c002259e:	73 db                	jae    c002257b <__umoddi3+0xe7>
c00225a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00225a4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00225a8:	89 d7                	mov    edi,edx
c00225aa:	89 c6                	mov    esi,eax
c00225ac:	eb cd                	jmp    c002257b <__umoddi3+0xe7>
c00225ae:	66 90                	xchg   ax,ax

c00225b0 <acos>:
c00225b0:	83 ec 4c             	sub    esp,0x4c
c00225b3:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00225b7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00225bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00225bf:	89 d0                	mov    eax,edx
c00225c1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00225c6:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c00225cb:	7e 23                	jle    c00225f0 <acos+0x40>
c00225cd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00225d1:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c00225d6:	09 c8                	or     eax,ecx
c00225d8:	0f 85 32 01 00 00    	jne    c0022710 <acos+0x160>
c00225de:	85 d2                	test   edx,edx
c00225e0:	0f 8e 4a 01 00 00    	jle    c0022730 <acos+0x180>
c00225e6:	d9 ee                	fldz   
c00225e8:	83 c4 4c             	add    esp,0x4c
c00225eb:	c3                   	ret    
c00225ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00225f0:	3d ff ff df 3f       	cmp    eax,0x3fdfffff
c00225f5:	7f 29                	jg     c0022620 <acos+0x70>
c00225f7:	3d 00 00 60 3c       	cmp    eax,0x3c600000
c00225fc:	0f 8f 4e 01 00 00    	jg     c0022750 <acos+0x1a0>
c0022602:	dd 05 c8 c9 02 c0    	fld    QWORD PTR ds:0xc002c9c8
c0022608:	dc 05 d8 af 02 c0    	fadd   QWORD PTR ds:0xc002afd8
c002260e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022612:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022616:	83 c4 4c             	add    esp,0x4c
c0022619:	c3                   	ret    
c002261a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022620:	85 d2                	test   edx,edx
c0022622:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022626:	0f 88 d4 01 00 00    	js     c0022800 <acos+0x250>
c002262c:	d9 e8                	fld1   
c002262e:	de e1                	fsubrp st(1),st
c0022630:	d8 0d 34 b0 02 c0    	fmul   DWORD PTR ds:0xc002b034
c0022636:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002263a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002263e:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0022642:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022645:	e8 36 27 00 00       	call   c0024d80 <sqrt>
c002264a:	31 c0                	xor    eax,eax
c002264c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022650:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022654:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022658:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002265c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022660:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0022664:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022668:	d9 c1                	fld    st(1)
c002266a:	dc 0d e0 af 02 c0    	fmul   QWORD PTR ds:0xc002afe0
c0022670:	dc 05 e8 af 02 c0    	fadd   QWORD PTR ds:0xc002afe8
c0022676:	d8 ca                	fmul   st,st(2)
c0022678:	dc 25 f0 af 02 c0    	fsub   QWORD PTR ds:0xc002aff0
c002267e:	d8 ca                	fmul   st,st(2)
c0022680:	dc 05 f8 af 02 c0    	fadd   QWORD PTR ds:0xc002aff8
c0022686:	d8 ca                	fmul   st,st(2)
c0022688:	dc 25 00 b0 02 c0    	fsub   QWORD PTR ds:0xc002b000
c002268e:	d8 ca                	fmul   st,st(2)
c0022690:	dc 05 08 b0 02 c0    	fadd   QWORD PTR ds:0xc002b008
c0022696:	d8 ca                	fmul   st,st(2)
c0022698:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002269c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00226a0:	d9 c2                	fld    st(2)
c00226a2:	dc 0d 10 b0 02 c0    	fmul   QWORD PTR ds:0xc002b010
c00226a8:	dc 25 18 b0 02 c0    	fsub   QWORD PTR ds:0xc002b018
c00226ae:	d8 cb                	fmul   st,st(3)
c00226b0:	dc 05 20 b0 02 c0    	fadd   QWORD PTR ds:0xc002b020
c00226b6:	d8 cb                	fmul   st,st(3)
c00226b8:	dc 25 28 b0 02 c0    	fsub   QWORD PTR ds:0xc002b028
c00226be:	d8 cb                	fmul   st,st(3)
c00226c0:	d9 e8                	fld1   
c00226c2:	de c1                	faddp  st(1),st
c00226c4:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00226c8:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00226cc:	de f9                	fdivp  st(1),st
c00226ce:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00226d2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00226d6:	d8 c9                	fmul   st,st(1)
c00226d8:	d9 c3                	fld    st(3)
c00226da:	d8 cc                	fmul   st,st(4)
c00226dc:	de eb                	fsubp  st(3),st
c00226de:	d9 c9                	fxch   st(1)
c00226e0:	d8 c3                	fadd   st,st(3)
c00226e2:	de fa                	fdivp  st(2),st
c00226e4:	d9 c9                	fxch   st(1)
c00226e6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00226ea:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00226ee:	de c1                	faddp  st(1),st
c00226f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00226f4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00226f8:	de c1                	faddp  st(1),st
c00226fa:	d8 c0                	fadd   st,st(0)
c00226fc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022700:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022704:	83 c4 4c             	add    esp,0x4c
c0022707:	c3                   	ret    
c0022708:	90                   	nop
c0022709:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022710:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022714:	d8 e0                	fsub   st,st(0)
c0022716:	d8 f0                	fdiv   st,st(0)
c0022718:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002271c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022720:	83 c4 4c             	add    esp,0x4c
c0022723:	c3                   	ret    
c0022724:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002272a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022730:	dd 05 c8 c9 02 c0    	fld    QWORD PTR ds:0xc002c9c8
c0022736:	d8 c0                	fadd   st,st(0)
c0022738:	dc 05 d0 af 02 c0    	fadd   QWORD PTR ds:0xc002afd0
c002273e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022742:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022746:	83 c4 4c             	add    esp,0x4c
c0022749:	c3                   	ret    
c002274a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022750:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022754:	d9 c0                	fld    st(0)
c0022756:	d8 c9                	fmul   st,st(1)
c0022758:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002275c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022760:	dd 05 c8 c9 02 c0    	fld    QWORD PTR ds:0xc002c9c8
c0022766:	d9 c1                	fld    st(1)
c0022768:	dc 0d e0 af 02 c0    	fmul   QWORD PTR ds:0xc002afe0
c002276e:	dc 05 e8 af 02 c0    	fadd   QWORD PTR ds:0xc002afe8
c0022774:	d8 ca                	fmul   st,st(2)
c0022776:	dc 25 f0 af 02 c0    	fsub   QWORD PTR ds:0xc002aff0
c002277c:	d8 ca                	fmul   st,st(2)
c002277e:	dc 05 f8 af 02 c0    	fadd   QWORD PTR ds:0xc002aff8
c0022784:	d8 ca                	fmul   st,st(2)
c0022786:	dc 25 00 b0 02 c0    	fsub   QWORD PTR ds:0xc002b000
c002278c:	d8 ca                	fmul   st,st(2)
c002278e:	dc 05 08 b0 02 c0    	fadd   QWORD PTR ds:0xc002b008
c0022794:	d8 ca                	fmul   st,st(2)
c0022796:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002279a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002279e:	d9 c2                	fld    st(2)
c00227a0:	dc 0d 10 b0 02 c0    	fmul   QWORD PTR ds:0xc002b010
c00227a6:	dc 25 18 b0 02 c0    	fsub   QWORD PTR ds:0xc002b018
c00227ac:	d8 cb                	fmul   st,st(3)
c00227ae:	dc 05 20 b0 02 c0    	fadd   QWORD PTR ds:0xc002b020
c00227b4:	d8 cb                	fmul   st,st(3)
c00227b6:	dc 25 28 b0 02 c0    	fsub   QWORD PTR ds:0xc002b028
c00227bc:	de cb                	fmulp  st(3),st
c00227be:	d9 ca                	fxch   st(2)
c00227c0:	d8 05 30 b0 02 c0    	fadd   DWORD PTR ds:0xc002b030
c00227c6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00227ca:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00227ce:	de fa                	fdivp  st(2),st
c00227d0:	d9 c9                	fxch   st(1)
c00227d2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00227d6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00227da:	d8 ca                	fmul   st,st(2)
c00227dc:	de e9                	fsubp  st(1),st
c00227de:	de e9                	fsubp  st(1),st
c00227e0:	dc 2d d8 af 02 c0    	fsubr  QWORD PTR ds:0xc002afd8
c00227e6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00227ea:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00227ee:	83 c4 4c             	add    esp,0x4c
c00227f1:	c3                   	ret    
c00227f2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00227f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022800:	d9 e8                	fld1   
c0022802:	de c1                	faddp  st(1),st
c0022804:	d8 0d 34 b0 02 c0    	fmul   DWORD PTR ds:0xc002b034
c002280a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002280e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022812:	d9 c0                	fld    st(0)
c0022814:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0022818:	dd 1c 24             	fstp   QWORD PTR [esp]
c002281b:	e8 60 25 00 00       	call   c0024d80 <sqrt>
c0022820:	dd 05 c8 c9 02 c0    	fld    QWORD PTR ds:0xc002c9c8
c0022826:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c002282a:	d9 c0                	fld    st(0)
c002282c:	dc 0d e0 af 02 c0    	fmul   QWORD PTR ds:0xc002afe0
c0022832:	dc 05 e8 af 02 c0    	fadd   QWORD PTR ds:0xc002afe8
c0022838:	d8 c9                	fmul   st,st(1)
c002283a:	dc 25 f0 af 02 c0    	fsub   QWORD PTR ds:0xc002aff0
c0022840:	d8 c9                	fmul   st,st(1)
c0022842:	dc 05 f8 af 02 c0    	fadd   QWORD PTR ds:0xc002aff8
c0022848:	d8 c9                	fmul   st,st(1)
c002284a:	dc 25 00 b0 02 c0    	fsub   QWORD PTR ds:0xc002b000
c0022850:	d8 c9                	fmul   st,st(1)
c0022852:	dc 05 08 b0 02 c0    	fadd   QWORD PTR ds:0xc002b008
c0022858:	d8 c9                	fmul   st,st(1)
c002285a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002285e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022862:	d9 c1                	fld    st(1)
c0022864:	dc 0d 10 b0 02 c0    	fmul   QWORD PTR ds:0xc002b010
c002286a:	dc 25 18 b0 02 c0    	fsub   QWORD PTR ds:0xc002b018
c0022870:	d8 ca                	fmul   st,st(2)
c0022872:	dc 05 20 b0 02 c0    	fadd   QWORD PTR ds:0xc002b020
c0022878:	d8 ca                	fmul   st,st(2)
c002287a:	dc 25 28 b0 02 c0    	fsub   QWORD PTR ds:0xc002b028
c0022880:	de ca                	fmulp  st(2),st
c0022882:	d9 e8                	fld1   
c0022884:	de c2                	faddp  st(2),st
c0022886:	d9 c9                	fxch   st(1)
c0022888:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002288c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022890:	de f9                	fdivp  st(1),st
c0022892:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022896:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002289a:	d8 ca                	fmul   st,st(2)
c002289c:	de e1                	fsubrp st(1),st
c002289e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00228a2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00228a6:	de c1                	faddp  st(1),st
c00228a8:	d8 c0                	fadd   st,st(0)
c00228aa:	dc 2d d0 af 02 c0    	fsubr  QWORD PTR ds:0xc002afd0
c00228b0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00228b4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00228b8:	83 c4 4c             	add    esp,0x4c
c00228bb:	c3                   	ret    
c00228bc:	66 90                	xchg   ax,ax
c00228be:	66 90                	xchg   ax,ax

c00228c0 <asin>:
c00228c0:	56                   	push   esi
c00228c1:	53                   	push   ebx
c00228c2:	83 ec 44             	sub    esp,0x44
c00228c5:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00228c9:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00228cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00228d1:	89 f3                	mov    ebx,esi
c00228d3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00228d9:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c00228df:	7e 4f                	jle    c0022930 <asin+0x70>
c00228e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e5:	81 eb 00 00 f0 3f    	sub    ebx,0x3ff00000
c00228eb:	09 c3                	or     ebx,eax
c00228ed:	74 21                	je     c0022910 <asin+0x50>
c00228ef:	d8 e0                	fsub   st,st(0)
c00228f1:	d8 f0                	fdiv   st,st(0)
c00228f3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00228f7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00228fb:	eb 05                	jmp    c0022902 <asin+0x42>
c00228fd:	8d 76 00             	lea    esi,[esi+0x0]
c0022900:	dd d9                	fstp   st(1)
c0022902:	83 c4 44             	add    esp,0x44
c0022905:	5b                   	pop    ebx
c0022906:	5e                   	pop    esi
c0022907:	c3                   	ret    
c0022908:	90                   	nop
c0022909:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022910:	d9 c0                	fld    st(0)
c0022912:	dc 0d d8 af 02 c0    	fmul   QWORD PTR ds:0xc002afd8
c0022918:	d9 c9                	fxch   st(1)
c002291a:	dc 0d 38 b0 02 c0    	fmul   QWORD PTR ds:0xc002b038
c0022920:	de c1                	faddp  st(1),st
c0022922:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022926:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002292a:	83 c4 44             	add    esp,0x44
c002292d:	5b                   	pop    ebx
c002292e:	5e                   	pop    esi
c002292f:	c3                   	ret    
c0022930:	dd d8                	fstp   st(0)
c0022932:	81 fb ff ff df 3f    	cmp    ebx,0x3fdfffff
c0022938:	0f 8f b2 00 00 00    	jg     c00229f0 <asin+0x130>
c002293e:	81 fb ff ff 4f 3e    	cmp    ebx,0x3e4fffff
c0022944:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022948:	7f 16                	jg     c0022960 <asin+0xa0>
c002294a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002294e:	d9 e8                	fld1   
c0022950:	d9 c2                	fld    st(2)
c0022952:	dc 05 40 b0 02 c0    	fadd   QWORD PTR ds:0xc002b040
c0022958:	df f1                	fcomip st,st(1)
c002295a:	dd d8                	fstp   st(0)
c002295c:	77 a2                	ja     c0022900 <asin+0x40>
c002295e:	dd d8                	fstp   st(0)
c0022960:	d9 c0                	fld    st(0)
c0022962:	d8 c9                	fmul   st,st(1)
c0022964:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022968:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002296c:	d9 c0                	fld    st(0)
c002296e:	dc 0d e0 af 02 c0    	fmul   QWORD PTR ds:0xc002afe0
c0022974:	dc 05 e8 af 02 c0    	fadd   QWORD PTR ds:0xc002afe8
c002297a:	d8 c9                	fmul   st,st(1)
c002297c:	dc 25 f0 af 02 c0    	fsub   QWORD PTR ds:0xc002aff0
c0022982:	d8 c9                	fmul   st,st(1)
c0022984:	dc 05 f8 af 02 c0    	fadd   QWORD PTR ds:0xc002aff8
c002298a:	d8 c9                	fmul   st,st(1)
c002298c:	dc 25 00 b0 02 c0    	fsub   QWORD PTR ds:0xc002b000
c0022992:	d8 c9                	fmul   st,st(1)
c0022994:	dc 05 08 b0 02 c0    	fadd   QWORD PTR ds:0xc002b008
c002299a:	d8 c9                	fmul   st,st(1)
c002299c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00229a0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00229a4:	d9 c1                	fld    st(1)
c00229a6:	dc 0d 10 b0 02 c0    	fmul   QWORD PTR ds:0xc002b010
c00229ac:	dc 25 18 b0 02 c0    	fsub   QWORD PTR ds:0xc002b018
c00229b2:	d8 ca                	fmul   st,st(2)
c00229b4:	dc 05 20 b0 02 c0    	fadd   QWORD PTR ds:0xc002b020
c00229ba:	d8 ca                	fmul   st,st(2)
c00229bc:	dc 25 28 b0 02 c0    	fsub   QWORD PTR ds:0xc002b028
c00229c2:	de ca                	fmulp  st(2),st
c00229c4:	d9 c9                	fxch   st(1)
c00229c6:	d8 05 30 b0 02 c0    	fadd   DWORD PTR ds:0xc002b030
c00229cc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00229d0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00229d4:	de f9                	fdivp  st(1),st
c00229d6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00229da:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00229de:	d8 c9                	fmul   st,st(1)
c00229e0:	de c1                	faddp  st(1),st
c00229e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00229e6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00229ea:	83 c4 44             	add    esp,0x44
c00229ed:	5b                   	pop    ebx
c00229ee:	5e                   	pop    esi
c00229ef:	c3                   	ret    
c00229f0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00229f4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00229f7:	e8 34 1d 00 00       	call   c0024730 <fabs>
c00229fc:	d9 e8                	fld1   
c00229fe:	dc e1                	fsubr  st(1),st
c0022a00:	d9 c9                	fxch   st(1)
c0022a02:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022a06:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022a0a:	d9 05 34 b0 02 c0    	fld    DWORD PTR ds:0xc002b034
c0022a10:	de c9                	fmulp  st(1),st
c0022a12:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022a16:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022a1a:	d9 c0                	fld    st(0)
c0022a1c:	d9 c0                	fld    st(0)
c0022a1e:	dc 0d e0 af 02 c0    	fmul   QWORD PTR ds:0xc002afe0
c0022a24:	dc 05 e8 af 02 c0    	fadd   QWORD PTR ds:0xc002afe8
c0022a2a:	d8 c9                	fmul   st,st(1)
c0022a2c:	dc 25 f0 af 02 c0    	fsub   QWORD PTR ds:0xc002aff0
c0022a32:	d8 c9                	fmul   st,st(1)
c0022a34:	dc 05 f8 af 02 c0    	fadd   QWORD PTR ds:0xc002aff8
c0022a3a:	d8 c9                	fmul   st,st(1)
c0022a3c:	dc 25 00 b0 02 c0    	fsub   QWORD PTR ds:0xc002b000
c0022a42:	d8 c9                	fmul   st,st(1)
c0022a44:	dc 05 08 b0 02 c0    	fadd   QWORD PTR ds:0xc002b008
c0022a4a:	d8 c9                	fmul   st,st(1)
c0022a4c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022a50:	d9 c0                	fld    st(0)
c0022a52:	dc 0d 10 b0 02 c0    	fmul   QWORD PTR ds:0xc002b010
c0022a58:	dc 25 18 b0 02 c0    	fsub   QWORD PTR ds:0xc002b018
c0022a5e:	d8 c9                	fmul   st,st(1)
c0022a60:	dc 05 20 b0 02 c0    	fadd   QWORD PTR ds:0xc002b020
c0022a66:	d8 c9                	fmul   st,st(1)
c0022a68:	dc 25 28 b0 02 c0    	fsub   QWORD PTR ds:0xc002b028
c0022a6e:	d8 c9                	fmul   st,st(1)
c0022a70:	d9 c9                	fxch   st(1)
c0022a72:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0022a76:	de c2                	faddp  st(2),st
c0022a78:	d9 c9                	fxch   st(1)
c0022a7a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0022a7e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022a81:	e8 fa 22 00 00       	call   c0024d80 <sqrt>
c0022a86:	81 fb 32 33 ef 3f    	cmp    ebx,0x3fef3332
c0022a8c:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0022a90:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0022a94:	7e 4a                	jle    c0022ae0 <asin+0x220>
c0022a96:	dd d8                	fstp   st(0)
c0022a98:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022a9c:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0022aa0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022aa4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022aa8:	d8 c9                	fmul   st,st(1)
c0022aaa:	de c1                	faddp  st(1),st
c0022aac:	d8 c0                	fadd   st,st(0)
c0022aae:	dc 25 38 b0 02 c0    	fsub   QWORD PTR ds:0xc002b038
c0022ab4:	dc 2d d8 af 02 c0    	fsubr  QWORD PTR ds:0xc002afd8
c0022aba:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022abe:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022ac2:	85 f6                	test   esi,esi
c0022ac4:	0f 8f 38 fe ff ff    	jg     c0022902 <asin+0x42>
c0022aca:	d9 e0                	fchs   
c0022acc:	e9 31 fe ff ff       	jmp    c0022902 <asin+0x42>
c0022ad1:	eb 0d                	jmp    c0022ae0 <asin+0x220>
c0022ad3:	90                   	nop
c0022ad4:	90                   	nop
c0022ad5:	90                   	nop
c0022ad6:	90                   	nop
c0022ad7:	90                   	nop
c0022ad8:	90                   	nop
c0022ad9:	90                   	nop
c0022ada:	90                   	nop
c0022adb:	90                   	nop
c0022adc:	90                   	nop
c0022add:	90                   	nop
c0022ade:	90                   	nop
c0022adf:	90                   	nop
c0022ae0:	dd d9                	fstp   st(1)
c0022ae2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ae6:	31 c0                	xor    eax,eax
c0022ae8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022aec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022af0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022af4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022af8:	d9 c0                	fld    st(0)
c0022afa:	d8 c1                	fadd   st,st(1)
c0022afc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022b00:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0022b04:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022b08:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022b0c:	de c9                	fmulp  st(1),st
c0022b0e:	d9 c2                	fld    st(2)
c0022b10:	d8 cb                	fmul   st,st(3)
c0022b12:	de ec                	fsubp  st(4),st
c0022b14:	d9 c9                	fxch   st(1)
c0022b16:	d8 c2                	fadd   st,st(2)
c0022b18:	de fb                	fdivp  st(3),st
c0022b1a:	d9 ca                	fxch   st(2)
c0022b1c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022b20:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022b24:	d8 c0                	fadd   st,st(0)
c0022b26:	dc 2d 38 b0 02 c0    	fsubr  QWORD PTR ds:0xc002b038
c0022b2c:	de ea                	fsubp  st(2),st
c0022b2e:	d9 c9                	fxch   st(1)
c0022b30:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022b34:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022b38:	d9 c9                	fxch   st(1)
c0022b3a:	d8 c0                	fadd   st,st(0)
c0022b3c:	dd 05 48 b0 02 c0    	fld    QWORD PTR ds:0xc002b048
c0022b42:	dc e1                	fsubr  st(1),st
c0022b44:	d9 c9                	fxch   st(1)
c0022b46:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022b4a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022b4e:	de ea                	fsubp  st(2),st
c0022b50:	de e1                	fsubrp st(1),st
c0022b52:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022b56:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022b5a:	e9 63 ff ff ff       	jmp    c0022ac2 <asin+0x202>
c0022b5f:	90                   	nop

c0022b60 <atan2>:
c0022b60:	83 ec 4c             	sub    esp,0x4c
c0022b63:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0022b67:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0022b6b:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b6f:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0022b73:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022b77:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c0022b7b:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0022b7f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0022b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b87:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b8b:	89 c1                	mov    ecx,eax
c0022b8d:	f7 d9                	neg    ecx
c0022b8f:	89 d3                	mov    ebx,edx
c0022b91:	09 c1                	or     ecx,eax
c0022b93:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0022b99:	c1 e9 1f             	shr    ecx,0x1f
c0022b9c:	09 d9                	or     ecx,ebx
c0022b9e:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0022ba4:	77 7a                	ja     c0022c20 <atan2+0xc0>
c0022ba6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0022baa:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0022bae:	89 f1                	mov    ecx,esi
c0022bb0:	f7 d9                	neg    ecx
c0022bb2:	89 ef                	mov    edi,ebp
c0022bb4:	09 f1                	or     ecx,esi
c0022bb6:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
c0022bbc:	c1 e9 1f             	shr    ecx,0x1f
c0022bbf:	09 f9                	or     ecx,edi
c0022bc1:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0022bc7:	77 57                	ja     c0022c20 <atan2+0xc0>
c0022bc9:	81 fa 00 00 f0 3f    	cmp    edx,0x3ff00000
c0022bcf:	75 08                	jne    c0022bd9 <atan2+0x79>
c0022bd1:	85 c0                	test   eax,eax
c0022bd3:	0f 84 f7 00 00 00    	je     c0022cd0 <atan2+0x170>
c0022bd9:	89 d1                	mov    ecx,edx
c0022bdb:	c1 f9 1e             	sar    ecx,0x1e
c0022bde:	83 e1 02             	and    ecx,0x2
c0022be1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0022be5:	89 e9                	mov    ecx,ebp
c0022be7:	c1 e9 1f             	shr    ecx,0x1f
c0022bea:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0022bee:	09 fe                	or     esi,edi
c0022bf0:	75 5e                	jne    c0022c50 <atan2+0xf0>
c0022bf2:	83 f9 02             	cmp    ecx,0x2
c0022bf5:	0f 84 65 01 00 00    	je     c0022d60 <atan2+0x200>
c0022bfb:	83 f9 03             	cmp    ecx,0x3
c0022bfe:	0f 85 1c 01 00 00    	jne    c0022d20 <atan2+0x1c0>
c0022c04:	dd 05 d8 c9 02 c0    	fld    QWORD PTR ds:0xc002c9d8
c0022c0a:	dd 05 50 b0 02 c0    	fld    QWORD PTR ds:0xc002b050
c0022c10:	de e1                	fsubrp st(1),st
c0022c12:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022c16:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022c1a:	eb 14                	jmp    c0022c30 <atan2+0xd0>
c0022c1c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022c20:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022c24:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0022c28:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022c2c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022c30:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022c34:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0022c38:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0022c3c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0022c40:	83 c4 4c             	add    esp,0x4c
c0022c43:	c3                   	ret    
c0022c44:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022c4a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022c50:	09 d8                	or     eax,ebx
c0022c52:	0f 84 98 00 00 00    	je     c0022cf0 <atan2+0x190>
c0022c58:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0022c5e:	0f 84 1c 01 00 00    	je     c0022d80 <atan2+0x220>
c0022c64:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0022c6a:	0f 84 80 00 00 00    	je     c0022cf0 <atan2+0x190>
c0022c70:	29 df                	sub    edi,ebx
c0022c72:	c1 ff 14             	sar    edi,0x14
c0022c75:	83 ff 3c             	cmp    edi,0x3c
c0022c78:	0f 8f b2 00 00 00    	jg     c0022d30 <atan2+0x1d0>
c0022c7e:	c1 ea 1f             	shr    edx,0x1f
c0022c81:	84 d2                	test   dl,dl
c0022c83:	0f 84 97 01 00 00    	je     c0022e20 <atan2+0x2c0>
c0022c89:	83 ff c4             	cmp    edi,0xffffffc4
c0022c8c:	0f 8d 8e 01 00 00    	jge    c0022e20 <atan2+0x2c0>
c0022c92:	d9 ee                	fldz   
c0022c94:	83 f9 01             	cmp    ecx,0x1
c0022c97:	0f 84 02 01 00 00    	je     c0022d9f <atan2+0x23f>
c0022c9d:	83 f9 02             	cmp    ecx,0x2
c0022ca0:	0f 84 2a 01 00 00    	je     c0022dd0 <atan2+0x270>
c0022ca6:	85 c9                	test   ecx,ecx
c0022ca8:	74 86                	je     c0022c30 <atan2+0xd0>
c0022caa:	dd 05 d0 c9 02 c0    	fld    QWORD PTR ds:0xc002c9d0
c0022cb0:	de e9                	fsubp  st(1),st
c0022cb2:	dc 25 d0 af 02 c0    	fsub   QWORD PTR ds:0xc002afd0
c0022cb8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022cbc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022cc0:	e9 6b ff ff ff       	jmp    c0022c30 <atan2+0xd0>
c0022cc5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022cc9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022cd0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022cd4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0022cd8:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0022cdc:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0022ce0:	83 c4 4c             	add    esp,0x4c
c0022ce3:	e9 a8 11 00 00       	jmp    c0023e90 <atan>
c0022ce8:	90                   	nop
c0022ce9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022cf0:	85 ed                	test   ebp,ebp
c0022cf2:	0f 88 b8 00 00 00    	js     c0022db0 <atan2+0x250>
c0022cf8:	dd 05 d8 c9 02 c0    	fld    QWORD PTR ds:0xc002c9d8
c0022cfe:	dc 05 d8 af 02 c0    	fadd   QWORD PTR ds:0xc002afd8
c0022d04:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022d08:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022d0c:	e9 1f ff ff ff       	jmp    c0022c30 <atan2+0xd0>
c0022d11:	eb 0d                	jmp    c0022d20 <atan2+0x1c0>
c0022d13:	90                   	nop
c0022d14:	90                   	nop
c0022d15:	90                   	nop
c0022d16:	90                   	nop
c0022d17:	90                   	nop
c0022d18:	90                   	nop
c0022d19:	90                   	nop
c0022d1a:	90                   	nop
c0022d1b:	90                   	nop
c0022d1c:	90                   	nop
c0022d1d:	90                   	nop
c0022d1e:	90                   	nop
c0022d1f:	90                   	nop
c0022d20:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022d24:	e9 07 ff ff ff       	jmp    c0022c30 <atan2+0xd0>
c0022d29:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022d30:	dd 05 d0 c9 02 c0    	fld    QWORD PTR ds:0xc002c9d0
c0022d36:	83 e1 01             	and    ecx,0x1
c0022d39:	d9 05 34 b0 02 c0    	fld    DWORD PTR ds:0xc002b034
c0022d3f:	de c9                	fmulp  st(1),st
c0022d41:	dc 05 d8 af 02 c0    	fadd   QWORD PTR ds:0xc002afd8
c0022d47:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022d4b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022d4f:	e9 40 ff ff ff       	jmp    c0022c94 <atan2+0x134>
c0022d54:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022d5a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022d60:	dd 05 d8 c9 02 c0    	fld    QWORD PTR ds:0xc002c9d8
c0022d66:	dc 05 d0 af 02 c0    	fadd   QWORD PTR ds:0xc002afd0
c0022d6c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022d70:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022d74:	e9 b7 fe ff ff       	jmp    c0022c30 <atan2+0xd0>
c0022d79:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022d80:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0022d86:	74 68                	je     c0022df0 <atan2+0x290>
c0022d88:	83 f9 02             	cmp    ecx,0x2
c0022d8b:	74 d3                	je     c0022d60 <atan2+0x200>
c0022d8d:	83 f9 03             	cmp    ecx,0x3
c0022d90:	0f 84 6e fe ff ff    	je     c0022c04 <atan2+0xa4>
c0022d96:	d9 ee                	fldz   
c0022d98:	49                   	dec    ecx
c0022d99:	0f 85 91 fe ff ff    	jne    c0022c30 <atan2+0xd0>
c0022d9f:	d9 e0                	fchs   
c0022da1:	e9 8a fe ff ff       	jmp    c0022c30 <atan2+0xd0>
c0022da6:	8d 76 00             	lea    esi,[esi+0x0]
c0022da9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022db0:	dd 05 d8 c9 02 c0    	fld    QWORD PTR ds:0xc002c9d8
c0022db6:	dd 05 58 b0 02 c0    	fld    QWORD PTR ds:0xc002b058
c0022dbc:	de e1                	fsubrp st(1),st
c0022dbe:	e9 41 ff ff ff       	jmp    c0022d04 <atan2+0x1a4>
c0022dc3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022dc9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022dd0:	dd 05 d0 c9 02 c0    	fld    QWORD PTR ds:0xc002c9d0
c0022dd6:	de e9                	fsubp  st(1),st
c0022dd8:	dc 2d d0 af 02 c0    	fsubr  QWORD PTR ds:0xc002afd0
c0022dde:	e9 21 ff ff ff       	jmp    c0022d04 <atan2+0x1a4>
c0022de3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022de9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022df0:	83 f9 02             	cmp    ecx,0x2
c0022df3:	0f 84 82 00 00 00    	je     c0022e7b <atan2+0x31b>
c0022df9:	83 f9 03             	cmp    ecx,0x3
c0022dfc:	74 62                	je     c0022e60 <atan2+0x300>
c0022dfe:	49                   	dec    ecx
c0022dff:	90                   	nop
c0022e00:	74 43                	je     c0022e45 <atan2+0x2e5>
c0022e02:	dd 05 d8 c9 02 c0    	fld    QWORD PTR ds:0xc002c9d8
c0022e08:	dc 05 48 b0 02 c0    	fadd   QWORD PTR ds:0xc002b048
c0022e0e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022e12:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022e16:	e9 15 fe ff ff       	jmp    c0022c30 <atan2+0xd0>
c0022e1b:	90                   	nop
c0022e1c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022e20:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0022e24:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022e28:	dc 74 24 10          	fdiv   QWORD PTR [esp+0x10]
c0022e2c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022e2f:	e8 fc 18 00 00       	call   c0024730 <fabs>
c0022e34:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022e37:	e8 54 10 00 00       	call   c0023e90 <atan>
c0022e3c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022e40:	e9 4f fe ff ff       	jmp    c0022c94 <atan2+0x134>
c0022e45:	dd 05 d8 c9 02 c0    	fld    QWORD PTR ds:0xc002c9d8
c0022e4b:	dd 05 60 b0 02 c0    	fld    QWORD PTR ds:0xc002b060
c0022e51:	de e1                	fsubrp st(1),st
c0022e53:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022e57:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022e5b:	e9 d0 fd ff ff       	jmp    c0022c30 <atan2+0xd0>
c0022e60:	dd 05 d8 c9 02 c0    	fld    QWORD PTR ds:0xc002c9d8
c0022e66:	dd 05 70 b0 02 c0    	fld    QWORD PTR ds:0xc002b070
c0022e6c:	de e1                	fsubrp st(1),st
c0022e6e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022e72:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022e76:	e9 b5 fd ff ff       	jmp    c0022c30 <atan2+0xd0>
c0022e7b:	dd 05 d8 c9 02 c0    	fld    QWORD PTR ds:0xc002c9d8
c0022e81:	dc 05 68 b0 02 c0    	fadd   QWORD PTR ds:0xc002b068
c0022e87:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022e8b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022e8f:	e9 9c fd ff ff       	jmp    c0022c30 <atan2+0xd0>
c0022e94:	66 90                	xchg   ax,ax
c0022e96:	66 90                	xchg   ax,ax
c0022e98:	66 90                	xchg   ax,ax
c0022e9a:	66 90                	xchg   ax,ax
c0022e9c:	66 90                	xchg   ax,ax
c0022e9e:	66 90                	xchg   ax,ax

c0022ea0 <cosh>:
c0022ea0:	53                   	push   ebx
c0022ea1:	83 ec 28             	sub    esp,0x28
c0022ea4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0022ea8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0022eac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022eb0:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0022eb6:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c0022ebc:	0f 8f 9e 00 00 00    	jg     c0022f60 <cosh+0xc0>
c0022ec2:	dd d8                	fstp   st(0)
c0022ec4:	81 fb 42 2e d6 3f    	cmp    ebx,0x3fd62e42
c0022eca:	7e 44                	jle    c0022f10 <cosh+0x70>
c0022ecc:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0022ed2:	0f 8e a8 00 00 00    	jle    c0022f80 <cosh+0xe0>
c0022ed8:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c0022ede:	0f 8e dc 00 00 00    	jle    c0022fc0 <cosh+0x120>
c0022ee4:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c0022eea:	0f 8e 00 01 00 00    	jle    c0022ff0 <cosh+0x150>
c0022ef0:	d9 05 78 b0 02 c0    	fld    DWORD PTR ds:0xc002b078
c0022ef6:	eb 0c                	jmp    c0022f04 <cosh+0x64>
c0022ef8:	90                   	nop
c0022ef9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022f00:	dd d9                	fstp   st(1)
c0022f02:	dd d9                	fstp   st(1)
c0022f04:	83 c4 28             	add    esp,0x28
c0022f07:	5b                   	pop    ebx
c0022f08:	c3                   	ret    
c0022f09:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022f10:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022f14:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022f17:	e8 14 18 00 00       	call   c0024730 <fabs>
c0022f1c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022f1f:	e8 7c 13 00 00       	call   c00242a0 <expm1>
c0022f24:	81 fb ff ff 7f 3c    	cmp    ebx,0x3c7fffff
c0022f2a:	d9 e8                	fld1   
c0022f2c:	d9 c1                	fld    st(1)
c0022f2e:	d8 c1                	fadd   st,st(1)
c0022f30:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022f34:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022f38:	7e c6                	jle    c0022f00 <cosh+0x60>
c0022f3a:	d9 ca                	fxch   st(2)
c0022f3c:	d8 c8                	fmul   st,st(0)
c0022f3e:	d9 ca                	fxch   st(2)
c0022f40:	d8 c0                	fadd   st,st(0)
c0022f42:	de fa                	fdivp  st(2),st
c0022f44:	de c1                	faddp  st(1),st
c0022f46:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022f4a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022f4e:	83 c4 28             	add    esp,0x28
c0022f51:	5b                   	pop    ebx
c0022f52:	c3                   	ret    
c0022f53:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022f59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022f60:	d9 c0                	fld    st(0)
c0022f62:	de c9                	fmulp  st(1),st
c0022f64:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022f68:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022f6c:	83 c4 28             	add    esp,0x28
c0022f6f:	5b                   	pop    ebx
c0022f70:	c3                   	ret    
c0022f71:	eb 0d                	jmp    c0022f80 <cosh+0xe0>
c0022f73:	90                   	nop
c0022f74:	90                   	nop
c0022f75:	90                   	nop
c0022f76:	90                   	nop
c0022f77:	90                   	nop
c0022f78:	90                   	nop
c0022f79:	90                   	nop
c0022f7a:	90                   	nop
c0022f7b:	90                   	nop
c0022f7c:	90                   	nop
c0022f7d:	90                   	nop
c0022f7e:	90                   	nop
c0022f7f:	90                   	nop
c0022f80:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022f84:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022f87:	e8 a4 17 00 00       	call   c0024730 <fabs>
c0022f8c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022f8f:	e8 54 1d 00 00       	call   c0024ce8 <exp>
c0022f94:	d9 05 34 b0 02 c0    	fld    DWORD PTR ds:0xc002b034
c0022f9a:	d9 c1                	fld    st(1)
c0022f9c:	d8 c9                	fmul   st,st(1)
c0022f9e:	d9 c9                	fxch   st(1)
c0022fa0:	de f2                	fdivrp st(2),st
c0022fa2:	de c1                	faddp  st(1),st
c0022fa4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022fa8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022fac:	e9 53 ff ff ff       	jmp    c0022f04 <cosh+0x64>
c0022fb1:	eb 0d                	jmp    c0022fc0 <cosh+0x120>
c0022fb3:	90                   	nop
c0022fb4:	90                   	nop
c0022fb5:	90                   	nop
c0022fb6:	90                   	nop
c0022fb7:	90                   	nop
c0022fb8:	90                   	nop
c0022fb9:	90                   	nop
c0022fba:	90                   	nop
c0022fbb:	90                   	nop
c0022fbc:	90                   	nop
c0022fbd:	90                   	nop
c0022fbe:	90                   	nop
c0022fbf:	90                   	nop
c0022fc0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022fc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022fc7:	e8 64 17 00 00       	call   c0024730 <fabs>
c0022fcc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022fcf:	e8 14 1d 00 00       	call   c0024ce8 <exp>
c0022fd4:	d9 05 34 b0 02 c0    	fld    DWORD PTR ds:0xc002b034
c0022fda:	de c9                	fmulp  st(1),st
c0022fdc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022fe0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022fe4:	e9 1b ff ff ff       	jmp    c0022f04 <cosh+0x64>
c0022fe9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022ff0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022ff4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022ff7:	e8 34 17 00 00       	call   c0024730 <fabs>
c0022ffc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023001:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023005:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023008:	e8 d3 0c 00 00       	call   c0023ce0 <__ldexp_exp>
c002300d:	e9 f2 fe ff ff       	jmp    c0022f04 <cosh+0x64>
c0023012:	66 90                	xchg   ax,ax
c0023014:	66 90                	xchg   ax,ax
c0023016:	66 90                	xchg   ax,ax
c0023018:	66 90                	xchg   ax,ax
c002301a:	66 90                	xchg   ax,ax
c002301c:	66 90                	xchg   ax,ax
c002301e:	66 90                	xchg   ax,ax

c0023020 <pow>:
c0023020:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0023026:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
c002302d:	dd 84 24 a0 00 00 00 	fld    QWORD PTR [esp+0xa0]
c0023034:	89 9c 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],ebx
c002303b:	89 bc 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],edi
c0023042:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023046:	89 ac 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],ebp
c002304d:	dd 84 24 a8 00 00 00 	fld    QWORD PTR [esp+0xa8]
c0023054:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023058:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002305c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023060:	89 f3                	mov    ebx,esi
c0023062:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023068:	89 d9                	mov    ecx,ebx
c002306a:	09 c1                	or     ecx,eax
c002306c:	0f 84 9e 00 00 00    	je     c0023110 <pow+0xf0>
c0023072:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0023076:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002307a:	81 ff 00 00 f0 3f    	cmp    edi,0x3ff00000
c0023080:	75 3e                	jne    c00230c0 <pow+0xa0>
c0023082:	85 ed                	test   ebp,ebp
c0023084:	75 3a                	jne    c00230c0 <pow+0xa0>
c0023086:	d9 e8                	fld1   
c0023088:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002308c:	eb 02                	jmp    c0023090 <pow+0x70>
c002308e:	dd d8                	fstp   st(0)
c0023090:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023094:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c002309b:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c00230a2:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c00230a9:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c00230b0:	81 c4 9c 00 00 00    	add    esp,0x9c
c00230b6:	c3                   	ret    
c00230b7:	89 f6                	mov    esi,esi
c00230b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00230c0:	89 fa                	mov    edx,edi
c00230c2:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00230c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00230cc:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c00230d2:	7f 1c                	jg     c00230f0 <pow+0xd0>
c00230d4:	0f 94 c1             	sete   cl
c00230d7:	85 ed                	test   ebp,ebp
c00230d9:	0f 95 c2             	setne  dl
c00230dc:	84 ca                	test   dl,cl
c00230de:	75 10                	jne    c00230f0 <pow+0xd0>
c00230e0:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c00230e6:	7f 08                	jg     c00230f0 <pow+0xd0>
c00230e8:	75 36                	jne    c0023120 <pow+0x100>
c00230ea:	85 c0                	test   eax,eax
c00230ec:	74 32                	je     c0023120 <pow+0x100>
c00230ee:	66 90                	xchg   ax,ax
c00230f0:	d9 ee                	fldz   
c00230f2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00230f6:	d8 c1                	fadd   st,st(1)
c00230f8:	d9 c9                	fxch   st(1)
c00230fa:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00230fe:	de c1                	faddp  st(1),st
c0023100:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023104:	eb 8a                	jmp    c0023090 <pow+0x70>
c0023106:	8d 76 00             	lea    esi,[esi+0x0]
c0023109:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023110:	d9 e8                	fld1   
c0023112:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023116:	e9 75 ff ff ff       	jmp    c0023090 <pow+0x70>
c002311b:	90                   	nop
c002311c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023120:	31 c9                	xor    ecx,ecx
c0023122:	85 ff                	test   edi,edi
c0023124:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023128:	0f 88 22 01 00 00    	js     c0023250 <pow+0x230>
c002312e:	85 c0                	test   eax,eax
c0023130:	75 5e                	jne    c0023190 <pow+0x170>
c0023132:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0023138:	0f 84 72 01 00 00    	je     c00232b0 <pow+0x290>
c002313e:	81 fb 00 00 f0 3f    	cmp    ebx,0x3ff00000
c0023144:	0f 84 b6 01 00 00    	je     c0023300 <pow+0x2e0>
c002314a:	81 fe 00 00 00 40    	cmp    esi,0x40000000
c0023150:	0f 84 38 07 00 00    	je     c002388e <pow+0x86e>
c0023156:	81 fe 00 00 08 40    	cmp    esi,0x40080000
c002315c:	0f 84 33 08 00 00    	je     c0023995 <pow+0x975>
c0023162:	81 fe 00 00 10 40    	cmp    esi,0x40100000
c0023168:	0f 84 4f 08 00 00    	je     c00239bd <pow+0x99d>
c002316e:	81 fe 00 00 e0 3f    	cmp    esi,0x3fe00000
c0023174:	75 1a                	jne    c0023190 <pow+0x170>
c0023176:	89 f8                	mov    eax,edi
c0023178:	f7 d0                	not    eax
c002317a:	c1 e8 1f             	shr    eax,0x1f
c002317d:	84 c0                	test   al,al
c002317f:	0f 85 f1 08 00 00    	jne    c0023a76 <pow+0xa56>
c0023185:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023189:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023190:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023194:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023197:	e8 94 15 00 00       	call   c0024730 <fabs>
c002319c:	85 ed                	test   ebp,ebp
c002319e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00231a2:	75 1e                	jne    c00231c2 <pow+0x1a2>
c00231a4:	89 f8                	mov    eax,edi
c00231a6:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00231ab:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c00231b0:	0f 84 33 06 00 00    	je     c00237e9 <pow+0x7c9>
c00231b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00231ba:	85 c0                	test   eax,eax
c00231bc:	0f 84 27 06 00 00    	je     c00237e9 <pow+0x7c9>
c00231c2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00231c6:	89 f8                	mov    eax,edi
c00231c8:	c1 e8 1f             	shr    eax,0x1f
c00231cb:	48                   	dec    eax
c00231cc:	09 c1                	or     ecx,eax
c00231ce:	0f 84 49 01 00 00    	je     c002331d <pow+0x2fd>
c00231d4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00231d8:	d9 ee                	fldz   
c00231da:	49                   	dec    ecx
c00231db:	09 c1                	or     ecx,eax
c00231dd:	0f 85 4b 01 00 00    	jne    c002332e <pow+0x30e>
c00231e3:	d9 e0                	fchs   
c00231e5:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00231e9:	d9 05 7c b0 02 c0    	fld    DWORD PTR ds:0xc002b07c
c00231ef:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00231f3:	db 2d d0 b0 02 c0    	fld    TBYTE PTR ds:0xc002b0d0
c00231f9:	db 2d e0 b0 02 c0    	fld    TBYTE PTR ds:0xc002b0e0
c00231ff:	d9 e8                	fld1   
c0023201:	d9 e0                	fchs   
c0023203:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0023207:	81 fb 00 00 e0 41    	cmp    ebx,0x41e00000
c002320d:	0f 8e 40 01 00 00    	jle    c0023353 <pow+0x333>
c0023213:	81 fb 00 00 f0 43    	cmp    ebx,0x43f00000
c0023219:	0f 8e 93 06 00 00    	jle    c00238b2 <pow+0x892>
c002321f:	dd d8                	fstp   st(0)
c0023221:	dd d8                	fstp   st(0)
c0023223:	81 7c 24 30 ff ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3fefffff
c002322b:	0f 8f c9 07 00 00    	jg     c00239fa <pow+0x9da>
c0023231:	85 f6                	test   esi,esi
c0023233:	0f 88 94 08 00 00    	js     c0023acd <pow+0xaad>
c0023239:	d9 ee                	fldz   
c002323b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002323f:	e9 4c fe ff ff       	jmp    c0023090 <pow+0x70>
c0023244:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002324a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023250:	81 fb ff ff 3f 43    	cmp    ebx,0x433fffff
c0023256:	0f 8f 94 00 00 00    	jg     c00232f0 <pow+0x2d0>
c002325c:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c0023262:	0f 8e c6 fe ff ff    	jle    c002312e <pow+0x10e>
c0023268:	89 d9                	mov    ecx,ebx
c002326a:	c1 f9 14             	sar    ecx,0x14
c002326d:	81 e9 ff 03 00 00    	sub    ecx,0x3ff
c0023273:	83 f9 14             	cmp    ecx,0x14
c0023276:	0f 8e e5 06 00 00    	jle    c0023961 <pow+0x941>
c002327c:	ba 34 00 00 00       	mov    edx,0x34
c0023281:	29 ca                	sub    edx,ecx
c0023283:	89 d1                	mov    ecx,edx
c0023285:	89 c2                	mov    edx,eax
c0023287:	d3 ea                	shr    edx,cl
c0023289:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002328d:	d3 e2                	shl    edx,cl
c002328f:	39 c2                	cmp    edx,eax
c0023291:	0f 85 97 fe ff ff    	jne    c002312e <pow+0x10e>
c0023297:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002329b:	b9 02 00 00 00       	mov    ecx,0x2
c00232a0:	83 e2 01             	and    edx,0x1
c00232a3:	29 d1                	sub    ecx,edx
c00232a5:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00232a9:	e9 80 fe ff ff       	jmp    c002312e <pow+0x10e>
c00232ae:	66 90                	xchg   ax,ax
c00232b0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00232b4:	8d 87 00 00 10 c0    	lea    eax,[edi-0x3ff00000]
c00232ba:	09 e8                	or     eax,ebp
c00232bc:	0f 84 61 05 00 00    	je     c0023823 <pow+0x803>
c00232c2:	81 ff ff ff ef 3f    	cmp    edi,0x3fefffff
c00232c8:	0f 8e 60 05 00 00    	jle    c002382e <pow+0x80e>
c00232ce:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00232d2:	85 f6                	test   esi,esi
c00232d4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00232d8:	0f 89 b2 fd ff ff    	jns    c0023090 <pow+0x70>
c00232de:	e9 56 ff ff ff       	jmp    c0023239 <pow+0x219>
c00232e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00232e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00232f0:	ba 02 00 00 00       	mov    edx,0x2
c00232f5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00232f9:	e9 30 fe ff ff       	jmp    c002312e <pow+0x10e>
c00232fe:	66 90                	xchg   ax,ax
c0023300:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023304:	85 f6                	test   esi,esi
c0023306:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002330a:	0f 89 7e fd ff ff    	jns    c002308e <pow+0x6e>
c0023310:	d9 e8                	fld1   
c0023312:	de f1                	fdivrp st(1),st
c0023314:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023318:	e9 73 fd ff ff       	jmp    c0023090 <pow+0x70>
c002331d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023321:	d8 e0                	fsub   st,st(0)
c0023323:	d8 f0                	fdiv   st,st(0)
c0023325:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023329:	e9 62 fd ff ff       	jmp    c0023090 <pow+0x70>
c002332e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0023332:	d9 05 78 b0 02 c0    	fld    DWORD PTR ds:0xc002b078
c0023338:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002333c:	db 2d b0 b0 02 c0    	fld    TBYTE PTR ds:0xc002b0b0
c0023342:	db 2d c0 b0 02 c0    	fld    TBYTE PTR ds:0xc002b0c0
c0023348:	d9 e8                	fld1   
c002334a:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c002334e:	e9 b4 fe ff ff       	jmp    c0023207 <pow+0x1e7>
c0023353:	dd d8                	fstp   st(0)
c0023355:	dd d8                	fstp   st(0)
c0023357:	31 c0                	xor    eax,eax
c0023359:	81 e7 00 00 f0 7f    	and    edi,0x7ff00000
c002335f:	75 1b                	jne    c002337c <pow+0x35c>
c0023361:	d9 05 90 b0 02 c0    	fld    DWORD PTR ds:0xc002b090
c0023367:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c002336b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002336f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023373:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023377:	b8 cb ff ff ff       	mov    eax,0xffffffcb
c002337c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023380:	89 f9                	mov    ecx,edi
c0023382:	81 e7 ff ff 0f 00    	and    edi,0xfffff
c0023388:	c1 f9 14             	sar    ecx,0x14
c002338b:	8d 8c 08 01 fc ff ff 	lea    ecx,[eax+ecx*1-0x3ff]
c0023392:	89 f8                	mov    eax,edi
c0023394:	0d 00 00 f0 3f       	or     eax,0x3ff00000
c0023399:	81 ff 8e 98 03 00    	cmp    edi,0x3988e
c002339f:	0f 8e f8 04 00 00    	jle    c002389d <pow+0x87d>
c00233a5:	81 ff 79 b6 0b 00    	cmp    edi,0xbb679
c00233ab:	0f 8e 25 06 00 00    	jle    c00239d6 <pow+0x9b6>
c00233b1:	d9 ee                	fldz   
c00233b3:	41                   	inc    ecx
c00233b4:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00233b8:	2d 00 00 10 00       	sub    eax,0x100000
c00233bd:	31 d2                	xor    edx,edx
c00233bf:	d9 ee                	fldz   
c00233c1:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c00233c5:	d9 e8                	fld1   
c00233c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00233cb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00233cf:	d1 f8                	sar    eax,1
c00233d1:	31 f6                	xor    esi,esi
c00233d3:	0d 00 00 00 20       	or     eax,0x20000000
c00233d8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00233dc:	8d 84 02 00 00 08 00 	lea    eax,[edx+eax*1+0x80000]
c00233e3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00233e7:	31 ff                	xor    edi,edi
c00233e9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00233ed:	d9 c0                	fld    st(0)
c00233ef:	d8 e2                	fsub   st,st(2)
c00233f1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00233f5:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00233f9:	d9 c1                	fld    st(1)
c00233fb:	d8 c3                	fadd   st,st(3)
c00233fd:	d8 3d 30 b0 02 c0    	fdivr  DWORD PTR ds:0xc002b030
c0023403:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023407:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002340b:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c002340f:	d9 c0                	fld    st(0)
c0023411:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023415:	de ca                	fmulp  st(2),st
c0023417:	d9 c9                	fxch   st(1)
c0023419:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002341d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0023421:	89 6c 24 34          	mov    DWORD PTR [esp+0x34],ebp
c0023425:	31 ed                	xor    ebp,ebp
c0023427:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c002342b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c002342f:	31 c0                	xor    eax,eax
c0023431:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0023435:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023439:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002343d:	d9 c0                	fld    st(0)
c002343f:	d8 c9                	fmul   st,st(1)
c0023441:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023445:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023449:	d9 c2                	fld    st(2)
c002344b:	d8 cc                	fmul   st,st(4)
c002344d:	de ed                	fsubp  st(5),st
c002344f:	d9 ca                	fxch   st(2)
c0023451:	de e6                	fsubrp st(6),st
c0023453:	d9 cc                	fxch   st(4)
c0023455:	de e5                	fsubrp st(5),st
c0023457:	d9 cc                	fxch   st(4)
c0023459:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002345d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023461:	d8 c9                	fmul   st,st(1)
c0023463:	de ea                	fsubp  st(2),st
c0023465:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023469:	de ca                	fmulp  st(2),st
c002346b:	d9 c9                	fxch   st(1)
c002346d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023471:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023475:	d9 c3                	fld    st(3)
c0023477:	dc 0d 18 b1 02 c0    	fmul   QWORD PTR ds:0xc002b118
c002347d:	dc 05 20 b1 02 c0    	fadd   QWORD PTR ds:0xc002b120
c0023483:	d8 cc                	fmul   st,st(4)
c0023485:	dc 05 28 b1 02 c0    	fadd   QWORD PTR ds:0xc002b128
c002348b:	d8 cc                	fmul   st,st(4)
c002348d:	dc 05 30 b1 02 c0    	fadd   QWORD PTR ds:0xc002b130
c0023493:	d8 cc                	fmul   st,st(4)
c0023495:	dc 05 38 b1 02 c0    	fadd   QWORD PTR ds:0xc002b138
c002349b:	d8 cc                	fmul   st,st(4)
c002349d:	dc 05 40 b1 02 c0    	fadd   QWORD PTR ds:0xc002b140
c00234a3:	d9 cc                	fxch   st(4)
c00234a5:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00234a9:	d8 c8                	fmul   st,st(0)
c00234ab:	de cc                	fmulp  st(4),st
c00234ad:	d9 cb                	fxch   st(3)
c00234af:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00234b3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00234b7:	d9 c1                	fld    st(1)
c00234b9:	d8 c3                	fadd   st,st(3)
c00234bb:	d8 cc                	fmul   st,st(4)
c00234bd:	de c1                	faddp  st(1),st
c00234bf:	d9 c1                	fld    st(1)
c00234c1:	d8 ca                	fmul   st,st(2)
c00234c3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00234c7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00234cb:	d9 c9                	fxch   st(1)
c00234cd:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00234d1:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00234d5:	d9 05 94 b0 02 c0    	fld    DWORD PTR ds:0xc002b094
c00234db:	d9 c2                	fld    st(2)
c00234dd:	d8 c1                	fadd   st,st(1)
c00234df:	d8 c2                	fadd   st,st(2)
c00234e1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00234e5:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00234e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00234ed:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00234f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00234f5:	31 c0                	xor    eax,eax
c00234f7:	dc cc                	fmul   st(4),st
c00234f9:	d9 cc                	fxch   st(4)
c00234fb:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00234ff:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023503:	d9 c9                	fxch   st(1)
c0023505:	d8 ec                	fsubr  st,st(4)
c0023507:	de e3                	fsubrp st(3),st
c0023509:	d9 c9                	fxch   st(1)
c002350b:	de e2                	fsubrp st(2),st
c002350d:	d9 c9                	fxch   st(1)
c002350f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023513:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023517:	de cb                	fmulp  st(3),st
c0023519:	d9 cb                	fxch   st(3)
c002351b:	de c9                	fmulp  st(1),st
c002351d:	de c1                	faddp  st(1),st
c002351f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023523:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023527:	d9 c1                	fld    st(1)
c0023529:	d8 c1                	fadd   st,st(1)
c002352b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002352f:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023533:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023537:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002353b:	d9 c0                	fld    st(0)
c002353d:	d8 0d 98 b0 02 c0    	fmul   DWORD PTR ds:0xc002b098
c0023543:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023547:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002354b:	d9 cb                	fxch   st(3)
c002354d:	d8 e9                	fsubr  st,st(1)
c002354f:	de ea                	fsubp  st(2),st
c0023551:	d9 c9                	fxch   st(1)
c0023553:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023557:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002355b:	dc 0d 48 b1 02 c0    	fmul   QWORD PTR ds:0xc002b148
c0023561:	d9 c9                	fxch   st(1)
c0023563:	dc 0d 50 b1 02 c0    	fmul   QWORD PTR ds:0xc002b150
c0023569:	de c1                	faddp  st(1),st
c002356b:	db 6c 24 58          	fld    TBYTE PTR [esp+0x58]
c002356f:	de c1                	faddp  st(1),st
c0023571:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023575:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0023579:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002357d:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0023581:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023585:	d9 c2                	fld    st(2)
c0023587:	d8 c2                	fadd   st,st(2)
c0023589:	db 6c 24 68          	fld    TBYTE PTR [esp+0x68]
c002358d:	dc c1                	fadd   st(1),st
c002358f:	d9 c9                	fxch   st(1)
c0023591:	d8 c2                	fadd   st,st(2)
c0023593:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023597:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c002359b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002359f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00235a3:	dc e2                	fsubr  st(2),st
c00235a5:	d9 ca                	fxch   st(2)
c00235a7:	de e1                	fsubrp st(1),st
c00235a9:	de e3                	fsubrp st(3),st
c00235ab:	d9 ca                	fxch   st(2)
c00235ad:	de e9                	fsubp  st(1),st
c00235af:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00235b3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00235b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00235bb:	31 db                	xor    ebx,ebx
c00235bd:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00235c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00235c5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00235c9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00235cd:	d9 c0                	fld    st(0)
c00235cf:	d8 e2                	fsub   st,st(2)
c00235d1:	d8 cc                	fmul   st,st(4)
c00235d3:	d9 c9                	fxch   st(1)
c00235d5:	de cb                	fmulp  st(3),st
c00235d7:	de c2                	faddp  st(2),st
c00235d9:	d9 c9                	fxch   st(1)
c00235db:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00235df:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00235e3:	d9 ca                	fxch   st(2)
c00235e5:	de c9                	fmulp  st(1),st
c00235e7:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00235eb:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00235ef:	d9 c1                	fld    st(1)
c00235f1:	d8 c1                	fadd   st,st(1)
c00235f3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00235f7:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00235fb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00235ff:	81 fa ff ff 8f 40    	cmp    edx,0x408fffff
c0023605:	89 d3                	mov    ebx,edx
c0023607:	0f 8e 38 02 00 00    	jle    c0023845 <pow+0x825>
c002360d:	8d 8a 00 00 70 bf    	lea    ecx,[edx-0x40900000]
c0023613:	09 c1                	or     ecx,eax
c0023615:	0f 85 f6 03 00 00    	jne    c0023a11 <pow+0x9f1>
c002361b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002361f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023623:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023627:	d8 e1                	fsub   st,st(1)
c0023629:	d9 c2                	fld    st(2)
c002362b:	dc 05 58 b1 02 c0    	fadd   QWORD PTR ds:0xc002b158
c0023631:	df f1                	fcomip st,st(1)
c0023633:	dd d8                	fstp   st(0)
c0023635:	0f 87 2a 04 00 00    	ja     c0023a65 <pow+0xa45>
c002363b:	89 d9                	mov    ecx,ebx
c002363d:	c1 f9 14             	sar    ecx,0x14
c0023640:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0023646:	81 e9 fe 03 00 00    	sub    ecx,0x3fe
c002364c:	b8 00 00 10 00       	mov    eax,0x100000
c0023651:	d3 f8                	sar    eax,cl
c0023653:	31 c9                	xor    ecx,ecx
c0023655:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0023659:	01 d8                	add    eax,ebx
c002365b:	be ff ff 0f 00       	mov    esi,0xfffff
c0023660:	89 c2                	mov    edx,eax
c0023662:	c1 fa 14             	sar    edx,0x14
c0023665:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002366b:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0023671:	88 d1                	mov    cl,dl
c0023673:	d3 fe                	sar    esi,cl
c0023675:	b9 14 00 00 00       	mov    ecx,0x14
c002367a:	f7 d6                	not    esi
c002367c:	29 d1                	sub    ecx,edx
c002367e:	21 c6                	and    esi,eax
c0023680:	25 ff ff 0f 00       	and    eax,0xfffff
c0023685:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023689:	0d 00 00 10 00       	or     eax,0x100000
c002368e:	d3 f8                	sar    eax,cl
c0023690:	85 db                	test   ebx,ebx
c0023692:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023696:	89 c1                	mov    ecx,eax
c0023698:	79 02                	jns    c002369c <pow+0x67c>
c002369a:	f7 d9                	neg    ecx
c002369c:	de e9                	fsubp  st(1),st
c002369e:	89 ce                	mov    esi,ecx
c00236a0:	c1 e6 14             	shl    esi,0x14
c00236a3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00236a7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00236ab:	d9 c1                	fld    st(1)
c00236ad:	d8 c1                	fadd   st,st(1)
c00236af:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00236b3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00236b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00236bb:	31 c0                	xor    eax,eax
c00236bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00236c1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00236c5:	d9 c0                	fld    st(0)
c00236c7:	d8 0d 9c b0 02 c0    	fmul   DWORD PTR ds:0xc002b09c
c00236cd:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00236d1:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00236d5:	d9 ca                	fxch   st(2)
c00236d7:	d8 e9                	fsubr  st,st(1)
c00236d9:	de eb                	fsubp  st(3),st
c00236db:	d9 ca                	fxch   st(2)
c00236dd:	dc 0d 60 b1 02 c0    	fmul   QWORD PTR ds:0xc002b160
c00236e3:	d9 ca                	fxch   st(2)
c00236e5:	dc 0d 68 b1 02 c0    	fmul   QWORD PTR ds:0xc002b168
c00236eb:	de c2                	faddp  st(2),st
c00236ed:	d9 c9                	fxch   st(1)
c00236ef:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00236f3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00236f7:	d9 c1                	fld    st(1)
c00236f9:	d8 c1                	fadd   st,st(1)
c00236fb:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00236ff:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023703:	d9 c0                	fld    st(0)
c0023705:	d8 c9                	fmul   st,st(1)
c0023707:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002370b:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002370f:	d9 c0                	fld    st(0)
c0023711:	dc 0d 70 b1 02 c0    	fmul   QWORD PTR ds:0xc002b170
c0023717:	dc 25 78 b1 02 c0    	fsub   QWORD PTR ds:0xc002b178
c002371d:	d8 c9                	fmul   st,st(1)
c002371f:	dc 05 80 b1 02 c0    	fadd   QWORD PTR ds:0xc002b180
c0023725:	d8 c9                	fmul   st,st(1)
c0023727:	dc 25 88 b1 02 c0    	fsub   QWORD PTR ds:0xc002b188
c002372d:	d8 c9                	fmul   st,st(1)
c002372f:	dc 05 90 b1 02 c0    	fadd   QWORD PTR ds:0xc002b190
c0023735:	de c9                	fmulp  st(1),st
c0023737:	d8 e9                	fsubr  st,st(1)
c0023739:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002373d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023741:	d9 cb                	fxch   st(3)
c0023743:	d8 e9                	fsubr  st,st(1)
c0023745:	de ea                	fsubp  st(2),st
c0023747:	d9 c9                	fxch   st(1)
c0023749:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002374d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023751:	d9 c1                	fld    st(1)
c0023753:	d8 cb                	fmul   st,st(3)
c0023755:	d9 cb                	fxch   st(3)
c0023757:	d8 25 a0 b0 02 c0    	fsub   DWORD PTR ds:0xc002b0a0
c002375d:	de fb                	fdivp  st(3),st
c002375f:	d9 c1                	fld    st(1)
c0023761:	d8 c9                	fmul   st,st(1)
c0023763:	de c1                	faddp  st(1),st
c0023765:	de ea                	fsubp  st(2),st
c0023767:	d9 c9                	fxch   st(1)
c0023769:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002376d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023771:	de e1                	fsubrp st(1),st
c0023773:	d8 2d 30 b0 02 c0    	fsubr  DWORD PTR ds:0xc002b030
c0023779:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002377d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023781:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023785:	89 d3                	mov    ebx,edx
c0023787:	01 f3                	add    ebx,esi
c0023789:	81 fb ff ff 0f 00    	cmp    ebx,0xfffff
c002378f:	0f 8e a7 02 00 00    	jle    c0023a3c <pow+0xa1c>
c0023795:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023799:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002379d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00237a1:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c00237a5:	de c9                	fmulp  st(1),st
c00237a7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00237ab:	e9 e0 f8 ff ff       	jmp    c0023090 <pow+0x70>
c00237b0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00237b4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00237b7:	e8 74 0f 00 00       	call   c0024730 <fabs>
c00237bc:	85 ed                	test   ebp,ebp
c00237be:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00237c2:	0f 85 55 fb ff ff    	jne    c002331d <pow+0x2fd>
c00237c8:	89 f8                	mov    eax,edi
c00237ca:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00237cf:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c00237d4:	74 0b                	je     c00237e1 <pow+0x7c1>
c00237d6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00237db:	0f 85 3c fb ff ff    	jne    c002331d <pow+0x2fd>
c00237e1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00237e9:	85 f6                	test   esi,esi
c00237eb:	79 0a                	jns    c00237f7 <pow+0x7d7>
c00237ed:	d9 e8                	fld1   
c00237ef:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c00237f3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00237f7:	85 ff                	test   edi,edi
c00237f9:	0f 89 91 f8 ff ff    	jns    c0023090 <pow+0x70>
c00237ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023803:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0023808:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
c002380c:	0f 85 10 02 00 00    	jne    c0023a22 <pow+0xa02>
c0023812:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023816:	d8 e0                	fsub   st,st(0)
c0023818:	d8 f0                	fdiv   st,st(0)
c002381a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002381e:	e9 6d f8 ff ff       	jmp    c0023090 <pow+0x70>
c0023823:	d9 e8                	fld1   
c0023825:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023829:	e9 62 f8 ff ff       	jmp    c0023090 <pow+0x70>
c002382e:	85 f6                	test   esi,esi
c0023830:	0f 89 03 fa ff ff    	jns    c0023239 <pow+0x219>
c0023836:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002383a:	d9 e0                	fchs   
c002383c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023840:	e9 4b f8 ff ff       	jmp    c0023090 <pow+0x70>
c0023845:	89 d1                	mov    ecx,edx
c0023847:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
c002384d:	81 f9 ff cb 90 40    	cmp    ecx,0x4090cbff
c0023853:	0f 8e 4f 01 00 00    	jle    c00239a8 <pow+0x988>
c0023859:	8d 8a 00 34 6f 3f    	lea    ecx,[edx+0x3f6f3400]
c002385f:	09 c1                	or     ecx,eax
c0023861:	0f 85 55 02 00 00    	jne    c0023abc <pow+0xa9c>
c0023867:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002386b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002386f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023873:	d8 e1                	fsub   st,st(1)
c0023875:	df f2                	fcomip st,st(2)
c0023877:	0f 82 be fd ff ff    	jb     c002363b <pow+0x61b>
c002387d:	dd d8                	fstp   st(0)
c002387f:	dd d8                	fstp   st(0)
c0023881:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0023885:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023889:	e9 02 f8 ff ff       	jmp    c0023090 <pow+0x70>
c002388e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023892:	d8 c8                	fmul   st,st(0)
c0023894:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023898:	e9 f3 f7 ff ff       	jmp    c0023090 <pow+0x70>
c002389d:	d9 ee                	fldz   
c002389f:	31 d2                	xor    edx,edx
c00238a1:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00238a5:	d9 ee                	fldz   
c00238a7:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c00238ab:	d9 e8                	fld1   
c00238ad:	e9 15 fb ff ff       	jmp    c00233c7 <pow+0x3a7>
c00238b2:	81 7c 24 30 fe ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3feffffe
c00238ba:	0f 8e 91 01 00 00    	jle    c0023a51 <pow+0xa31>
c00238c0:	81 7c 24 30 00 00 f0 3f 	cmp    DWORD PTR [esp+0x30],0x3ff00000
c00238c8:	0f 8f da 01 00 00    	jg     c0023aa8 <pow+0xa88>
c00238ce:	dd d8                	fstp   st(0)
c00238d0:	dd d8                	fstp   st(0)
c00238d2:	d9 e8                	fld1   
c00238d4:	31 c0                	xor    eax,eax
c00238d6:	dc 6c 24 28          	fsubr  QWORD PTR [esp+0x28]
c00238da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00238de:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00238e2:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00238e6:	d9 c0                	fld    st(0)
c00238e8:	d8 0d 88 b0 02 c0    	fmul   DWORD PTR ds:0xc002b088
c00238ee:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00238f2:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00238f6:	d9 c1                	fld    st(1)
c00238f8:	dc 0d 08 b1 02 c0    	fmul   QWORD PTR ds:0xc002b108
c00238fe:	d9 c2                	fld    st(2)
c0023900:	d8 0d 8c b0 02 c0    	fmul   DWORD PTR ds:0xc002b08c
c0023906:	db 2d f0 b0 02 c0    	fld    TBYTE PTR ds:0xc002b0f0
c002390c:	de e1                	fsubrp st(1),st
c002390e:	d8 cb                	fmul   st,st(3)
c0023910:	d8 2d 34 b0 02 c0    	fsubr  DWORD PTR ds:0xc002b034
c0023916:	d9 cb                	fxch   st(3)
c0023918:	d8 c8                	fmul   st,st(0)
c002391a:	de cb                	fmulp  st(3),st
c002391c:	d9 ca                	fxch   st(2)
c002391e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023922:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023926:	dc 0d 10 b1 02 c0    	fmul   QWORD PTR ds:0xc002b110
c002392c:	de ea                	fsubp  st(2),st
c002392e:	d9 c9                	fxch   st(1)
c0023930:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023934:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023938:	d9 c1                	fld    st(1)
c002393a:	d8 c1                	fadd   st,st(1)
c002393c:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023940:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023944:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023948:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002394c:	dc e2                	fsubr  st(2),st
c002394e:	d9 c9                	fxch   st(1)
c0023950:	de e2                	fsubrp st(2),st
c0023952:	d9 c9                	fxch   st(1)
c0023954:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023958:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002395c:	e9 56 fc ff ff       	jmp    c00235b7 <pow+0x597>
c0023961:	85 c0                	test   eax,eax
c0023963:	0f 85 47 fe ff ff    	jne    c00237b0 <pow+0x790>
c0023969:	b8 14 00 00 00       	mov    eax,0x14
c002396e:	29 c8                	sub    eax,ecx
c0023970:	89 c1                	mov    ecx,eax
c0023972:	89 d8                	mov    eax,ebx
c0023974:	d3 f8                	sar    eax,cl
c0023976:	89 c2                	mov    edx,eax
c0023978:	d3 e2                	shl    edx,cl
c002397a:	39 da                	cmp    edx,ebx
c002397c:	0f 85 bc f7 ff ff    	jne    c002313e <pow+0x11e>
c0023982:	83 e0 01             	and    eax,0x1
c0023985:	b9 02 00 00 00       	mov    ecx,0x2
c002398a:	29 c1                	sub    ecx,eax
c002398c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023990:	e9 a9 f7 ff ff       	jmp    c002313e <pow+0x11e>
c0023995:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023999:	d9 c0                	fld    st(0)
c002399b:	d8 c9                	fmul   st,st(1)
c002399d:	de c9                	fmulp  st(1),st
c002399f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00239a3:	e9 e8 f6 ff ff       	jmp    c0023090 <pow+0x70>
c00239a8:	81 f9 00 00 e0 3f    	cmp    ecx,0x3fe00000
c00239ae:	0f 8f 28 01 00 00    	jg     c0023adc <pow+0xabc>
c00239b4:	31 f6                	xor    esi,esi
c00239b6:	31 c9                	xor    ecx,ecx
c00239b8:	e9 fa fc ff ff       	jmp    c00236b7 <pow+0x697>
c00239bd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00239c1:	d8 c8                	fmul   st,st(0)
c00239c3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00239c7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00239cb:	d8 c8                	fmul   st,st(0)
c00239cd:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00239d1:	e9 ba f6 ff ff       	jmp    c0023090 <pow+0x70>
c00239d6:	d9 05 80 b0 02 c0    	fld    DWORD PTR ds:0xc002b080
c00239dc:	ba 00 00 04 00       	mov    edx,0x40000
c00239e1:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00239e5:	dd 05 00 b1 02 c0    	fld    QWORD PTR ds:0xc002b100
c00239eb:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c00239ef:	d9 05 84 b0 02 c0    	fld    DWORD PTR ds:0xc002b084
c00239f5:	e9 cd f9 ff ff       	jmp    c00233c7 <pow+0x3a7>
c00239fa:	85 f6                	test   esi,esi
c00239fc:	0f 8e 37 f8 ff ff    	jle    c0023239 <pow+0x219>
c0023a02:	d9 05 78 b0 02 c0    	fld    DWORD PTR ds:0xc002b078
c0023a08:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023a0c:	e9 7f f6 ff ff       	jmp    c0023090 <pow+0x70>
c0023a11:	dd d8                	fstp   st(0)
c0023a13:	dd d8                	fstp   st(0)
c0023a15:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0023a19:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023a1d:	e9 6e f6 ff ff       	jmp    c0023090 <pow+0x70>
c0023a22:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0023a27:	0f 85 63 f6 ff ff    	jne    c0023090 <pow+0x70>
c0023a2d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023a31:	d9 e0                	fchs   
c0023a33:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023a37:	e9 54 f6 ff ff       	jmp    c0023090 <pow+0x70>
c0023a3c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023a40:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a43:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023a47:	e8 c0 13 00 00       	call   c0024e0c <ldexp>
c0023a4c:	e9 50 fd ff ff       	jmp    c00237a1 <pow+0x781>
c0023a51:	85 f6                	test   esi,esi
c0023a53:	0f 99 c0             	setns  al
c0023a56:	84 c0                	test   al,al
c0023a58:	db c9                	fcmovne st,st(1)
c0023a5a:	dd d9                	fstp   st(1)
c0023a5c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023a60:	e9 2b f6 ff ff       	jmp    c0023090 <pow+0x70>
c0023a65:	dd d8                	fstp   st(0)
c0023a67:	dd d8                	fstp   st(0)
c0023a69:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0023a6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023a71:	e9 1a f6 ff ff       	jmp    c0023090 <pow+0x70>
c0023a76:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0023a7d:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0023a84:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c0023a8b:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0023a92:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023a96:	dd 9c 24 a0 00 00 00 	fstp   QWORD PTR [esp+0xa0]
c0023a9d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0023aa3:	e9 d8 12 00 00       	jmp    c0024d80 <sqrt>
c0023aa8:	85 f6                	test   esi,esi
c0023aaa:	0f 9e c0             	setle  al
c0023aad:	84 c0                	test   al,al
c0023aaf:	db c9                	fcmovne st,st(1)
c0023ab1:	dd d9                	fstp   st(1)
c0023ab3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023ab7:	e9 d4 f5 ff ff       	jmp    c0023090 <pow+0x70>
c0023abc:	dd d8                	fstp   st(0)
c0023abe:	dd d8                	fstp   st(0)
c0023ac0:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0023ac4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023ac8:	e9 c3 f5 ff ff       	jmp    c0023090 <pow+0x70>
c0023acd:	d9 05 78 b0 02 c0    	fld    DWORD PTR ds:0xc002b078
c0023ad3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023ad7:	e9 b4 f5 ff ff       	jmp    c0023090 <pow+0x70>
c0023adc:	c1 f9 14             	sar    ecx,0x14
c0023adf:	e9 62 fb ff ff       	jmp    c0023646 <pow+0x626>
c0023ae4:	66 90                	xchg   ax,ax
c0023ae6:	66 90                	xchg   ax,ax
c0023ae8:	66 90                	xchg   ax,ax
c0023aea:	66 90                	xchg   ax,ax
c0023aec:	66 90                	xchg   ax,ax
c0023aee:	66 90                	xchg   ax,ax

c0023af0 <sinh>:
c0023af0:	53                   	push   ebx
c0023af1:	83 ec 38             	sub    esp,0x38
c0023af4:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0023af8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0023afc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b00:	89 c3                	mov    ebx,eax
c0023b02:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023b08:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c0023b0e:	0f 8f ec 00 00 00    	jg     c0023c00 <sinh+0x110>
c0023b14:	dd d8                	fstp   st(0)
c0023b16:	d9 e8                	fld1   
c0023b18:	85 c0                	test   eax,eax
c0023b1a:	0f 88 90 00 00 00    	js     c0023bb0 <sinh+0xc0>
c0023b20:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0023b26:	d9 05 34 b0 02 c0    	fld    DWORD PTR ds:0xc002b034
c0023b2c:	0f 8f 8e 00 00 00    	jg     c0023bc0 <sinh+0xd0>
c0023b32:	dd d9                	fstp   st(1)
c0023b34:	eb 0c                	jmp    c0023b42 <sinh+0x52>
c0023b36:	8d 76 00             	lea    esi,[esi+0x0]
c0023b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023b40:	dd d9                	fstp   st(1)
c0023b42:	81 fb ff ff 2f 3e    	cmp    ebx,0x3e2fffff
c0023b48:	0f 8f d2 00 00 00    	jg     c0023c20 <sinh+0x130>
c0023b4e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023b52:	d9 e8                	fld1   
c0023b54:	d9 c1                	fld    st(1)
c0023b56:	dc 05 a0 b1 02 c0    	fadd   QWORD PTR ds:0xc002b1a0
c0023b5c:	df f1                	fcomip st,st(1)
c0023b5e:	dd d8                	fstp   st(0)
c0023b60:	77 3e                	ja     c0023ba0 <sinh+0xb0>
c0023b62:	dd d8                	fstp   st(0)
c0023b64:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023b68:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023b6c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023b6f:	e8 bc 0b 00 00       	call   c0024730 <fabs>
c0023b74:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023b77:	e8 24 07 00 00       	call   c00242a0 <expm1>
c0023b7c:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023b80:	d9 c1                	fld    st(1)
c0023b82:	d8 c2                	fadd   st,st(2)
c0023b84:	d9 c2                	fld    st(2)
c0023b86:	d8 cb                	fmul   st,st(3)
c0023b88:	d9 cb                	fxch   st(3)
c0023b8a:	d8 05 30 b0 02 c0    	fadd   DWORD PTR ds:0xc002b030
c0023b90:	de fb                	fdivp  st(3),st
c0023b92:	de e2                	fsubrp st(2),st
c0023b94:	de c9                	fmulp  st(1),st
c0023b96:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023b9a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023b9e:	eb 02                	jmp    c0023ba2 <sinh+0xb2>
c0023ba0:	dd d9                	fstp   st(1)
c0023ba2:	83 c4 38             	add    esp,0x38
c0023ba5:	5b                   	pop    ebx
c0023ba6:	c3                   	ret    
c0023ba7:	89 f6                	mov    esi,esi
c0023ba9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023bb0:	d9 e0                	fchs   
c0023bb2:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0023bb8:	d9 05 98 b1 02 c0    	fld    DWORD PTR ds:0xc002b198
c0023bbe:	7e 80                	jle    c0023b40 <sinh+0x50>
c0023bc0:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c0023bc6:	0f 8e a4 00 00 00    	jle    c0023c70 <sinh+0x180>
c0023bcc:	dd d8                	fstp   st(0)
c0023bce:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c0023bd4:	0f 8e c6 00 00 00    	jle    c0023ca0 <sinh+0x1b0>
c0023bda:	dd d8                	fstp   st(0)
c0023bdc:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023be0:	dc 0d a0 b1 02 c0    	fmul   QWORD PTR ds:0xc002b1a0
c0023be6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023bea:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023bee:	83 c4 38             	add    esp,0x38
c0023bf1:	5b                   	pop    ebx
c0023bf2:	c3                   	ret    
c0023bf3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023bf9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023c00:	d9 c0                	fld    st(0)
c0023c02:	de c1                	faddp  st(1),st
c0023c04:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023c08:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023c0c:	83 c4 38             	add    esp,0x38
c0023c0f:	5b                   	pop    ebx
c0023c10:	c3                   	ret    
c0023c11:	eb 0d                	jmp    c0023c20 <sinh+0x130>
c0023c13:	90                   	nop
c0023c14:	90                   	nop
c0023c15:	90                   	nop
c0023c16:	90                   	nop
c0023c17:	90                   	nop
c0023c18:	90                   	nop
c0023c19:	90                   	nop
c0023c1a:	90                   	nop
c0023c1b:	90                   	nop
c0023c1c:	90                   	nop
c0023c1d:	90                   	nop
c0023c1e:	90                   	nop
c0023c1f:	90                   	nop
c0023c20:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023c24:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023c28:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023c2b:	e8 00 0b 00 00       	call   c0024730 <fabs>
c0023c30:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023c33:	e8 68 06 00 00       	call   c00242a0 <expm1>
c0023c38:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c0023c3e:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023c42:	0f 8e 38 ff ff ff    	jle    c0023b80 <sinh+0x90>
c0023c48:	d9 c1                	fld    st(1)
c0023c4a:	d8 05 30 b0 02 c0    	fadd   DWORD PTR ds:0xc002b030
c0023c50:	d8 fa                	fdivr  st,st(2)
c0023c52:	de c2                	faddp  st(2),st
c0023c54:	de c9                	fmulp  st(1),st
c0023c56:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023c5a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023c5e:	83 c4 38             	add    esp,0x38
c0023c61:	5b                   	pop    ebx
c0023c62:	c3                   	ret    
c0023c63:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023c69:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023c70:	dd d9                	fstp   st(1)
c0023c72:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023c76:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023c7a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023c7d:	e8 ae 0a 00 00       	call   c0024730 <fabs>
c0023c82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023c85:	e8 5e 10 00 00       	call   c0024ce8 <exp>
c0023c8a:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023c8e:	de c9                	fmulp  st(1),st
c0023c90:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023c94:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023c98:	e9 05 ff ff ff       	jmp    c0023ba2 <sinh+0xb2>
c0023c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0023ca0:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023ca4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023ca8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023cab:	e8 80 0a 00 00       	call   c0024730 <fabs>
c0023cb0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023cb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023cb9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023cbc:	e8 1f 00 00 00       	call   c0023ce0 <__ldexp_exp>
c0023cc1:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023cc5:	de c9                	fmulp  st(1),st
c0023cc7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023ccb:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023ccf:	e9 ce fe ff ff       	jmp    c0023ba2 <sinh+0xb2>
c0023cd4:	66 90                	xchg   ax,ax
c0023cd6:	66 90                	xchg   ax,ax
c0023cd8:	66 90                	xchg   ax,ax
c0023cda:	66 90                	xchg   ax,ax
c0023cdc:	66 90                	xchg   ax,ax
c0023cde:	66 90                	xchg   ax,ax

c0023ce0 <__ldexp_exp>:
c0023ce0:	53                   	push   ebx
c0023ce1:	83 ec 28             	sub    esp,0x28
c0023ce4:	dd 05 a8 b1 02 c0    	fld    QWORD PTR ds:0xc002b1a8
c0023cea:	dc 6c 24 30          	fsubr  QWORD PTR [esp+0x30]
c0023cee:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023cf1:	e8 f2 0f 00 00       	call   c0024ce8 <exp>
c0023cf6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023cfa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0023cfe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023d02:	89 da                	mov    edx,ebx
c0023d04:	89 d8                	mov    eax,ebx
c0023d06:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0023d0a:	c1 e8 14             	shr    eax,0x14
c0023d0d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0023d13:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0023d19:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023d1d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0023d21:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023d25:	8d 84 02 08 03 00 00 	lea    eax,[edx+eax*1+0x308]
c0023d2c:	c1 e0 14             	shl    eax,0x14
c0023d2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023d33:	31 c0                	xor    eax,eax
c0023d35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023d39:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023d3d:	de c9                	fmulp  st(1),st
c0023d3f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023d43:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023d47:	83 c4 28             	add    esp,0x28
c0023d4a:	5b                   	pop    ebx
c0023d4b:	c3                   	ret    
c0023d4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0023d50 <__ldexp_cexp>:
c0023d50:	57                   	push   edi
c0023d51:	56                   	push   esi
c0023d52:	53                   	push   ebx
c0023d53:	83 ec 60             	sub    esp,0x60
c0023d56:	dd 44 24 7c          	fld    QWORD PTR [esp+0x7c]
c0023d5a:	dd 44 24 74          	fld    QWORD PTR [esp+0x74]
c0023d5e:	dd 14 24             	fst    QWORD PTR [esp]
c0023d61:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0023d65:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0023d69:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0023d6d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023d71:	e8 6a 0f 00 00       	call   c0024ce0 <creal>
c0023d76:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023d7a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0023d7e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023d81:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023d85:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023d89:	e8 42 0f 00 00       	call   c0024cd0 <cimag>
c0023d8e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023d92:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023d96:	dc 25 a8 b1 02 c0    	fsub   QWORD PTR ds:0xc002b1a8
c0023d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023d9f:	e8 44 0f 00 00       	call   c0024ce8 <exp>
c0023da4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023da8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0023dac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023db0:	89 fa                	mov    edx,edi
c0023db2:	89 f8                	mov    eax,edi
c0023db4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0023db8:	c1 e8 14             	shr    eax,0x14
c0023dbb:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0023dc1:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0023dc7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023dcb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0023dd2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023dd6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023dda:	8d 94 02 09 ff ff ff 	lea    edx,[edx+eax*1-0xf7]
c0023de1:	89 d1                	mov    ecx,edx
c0023de3:	c1 e9 1f             	shr    ecx,0x1f
c0023de6:	01 d1                	add    ecx,edx
c0023de8:	d1 f9                	sar    ecx,1
c0023dea:	8d 81 ff 03 00 00    	lea    eax,[ecx+0x3ff]
c0023df0:	29 ca                	sub    edx,ecx
c0023df2:	c1 e0 14             	shl    eax,0x14
c0023df5:	81 c2 ff 03 00 00    	add    edx,0x3ff
c0023dfb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023dff:	c1 e2 14             	shl    edx,0x14
c0023e02:	31 c0                	xor    eax,eax
c0023e04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023e08:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023e0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023e10:	31 d2                	xor    edx,edx
c0023e12:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0023e16:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0023e1a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023e1e:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0023e22:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e26:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023e29:	e8 12 03 00 00       	call   c0024140 <cos>
c0023e2e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023e32:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023e36:	db 7c 24 48          	fstp   TBYTE PTR [esp+0x48]
c0023e3a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0023e3e:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0023e42:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023e46:	db 7c 24 20          	fstp   TBYTE PTR [esp+0x20]
c0023e4a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e4e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023e51:	e8 fa 0b 00 00       	call   c0024a50 <sin>
c0023e56:	89 d8                	mov    eax,ebx
c0023e58:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023e5c:	db 6c 24 48          	fld    TBYTE PTR [esp+0x48]
c0023e60:	dc c9                	fmul   st(1),st
c0023e62:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0023e66:	dc ca                	fmul   st(2),st
c0023e68:	db 6c 24 20          	fld    TBYTE PTR [esp+0x20]
c0023e6c:	dc cb                	fmul   st(3),st
c0023e6e:	d9 cb                	fxch   st(3)
c0023e70:	dd 1b                	fstp   QWORD PTR [ebx]
c0023e72:	d9 cb                	fxch   st(3)
c0023e74:	de c9                	fmulp  st(1),st
c0023e76:	de ca                	fmulp  st(2),st
c0023e78:	de c9                	fmulp  st(1),st
c0023e7a:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0023e7d:	83 c4 60             	add    esp,0x60
c0023e80:	5b                   	pop    ebx
c0023e81:	5e                   	pop    esi
c0023e82:	5f                   	pop    edi
c0023e83:	c2 04 00             	ret    0x4
c0023e86:	66 90                	xchg   ax,ax
c0023e88:	66 90                	xchg   ax,ax
c0023e8a:	66 90                	xchg   ax,ax
c0023e8c:	66 90                	xchg   ax,ax
c0023e8e:	66 90                	xchg   ax,ax

c0023e90 <atan>:
c0023e90:	56                   	push   esi
c0023e91:	53                   	push   ebx
c0023e92:	83 ec 24             	sub    esp,0x24
c0023e95:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023e99:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023e9d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0023ea1:	89 f3                	mov    ebx,esi
c0023ea3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023ea9:	81 fb ff ff 0f 44    	cmp    ebx,0x440fffff
c0023eaf:	7e 5f                	jle    c0023f10 <atan+0x80>
c0023eb1:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0023eb7:	7f 0a                	jg     c0023ec3 <atan+0x33>
c0023eb9:	75 25                	jne    c0023ee0 <atan+0x50>
c0023ebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ebf:	85 c0                	test   eax,eax
c0023ec1:	74 1d                	je     c0023ee0 <atan+0x50>
c0023ec3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023ec7:	d8 c0                	fadd   st,st(0)
c0023ec9:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023ecd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023ed1:	83 c4 24             	add    esp,0x24
c0023ed4:	5b                   	pop    ebx
c0023ed5:	5e                   	pop    esi
c0023ed6:	c3                   	ret    
c0023ed7:	89 f6                	mov    esi,esi
c0023ed9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023ee0:	85 f6                	test   esi,esi
c0023ee2:	dd 05 d8 b1 02 c0    	fld    QWORD PTR ds:0xc002b1d8
c0023ee8:	0f 8e 22 01 00 00    	jle    c0024010 <atan+0x180>
c0023eee:	dc 05 d8 af 02 c0    	fadd   QWORD PTR ds:0xc002afd8
c0023ef4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023ef8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023efc:	83 c4 24             	add    esp,0x24
c0023eff:	5b                   	pop    ebx
c0023f00:	5e                   	pop    esi
c0023f01:	c3                   	ret    
c0023f02:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023f09:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023f10:	81 fb ff ff db 3f    	cmp    ebx,0x3fdbffff
c0023f16:	0f 8f 34 01 00 00    	jg     c0024050 <atan+0x1c0>
c0023f1c:	81 fb ff ff 3f 3e    	cmp    ebx,0x3e3fffff
c0023f22:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023f26:	0f 8e c4 00 00 00    	jle    c0023ff0 <atan+0x160>
c0023f2c:	eb 04                	jmp    c0023f32 <atan+0xa2>
c0023f2e:	66 90                	xchg   ax,ax
c0023f30:	dd d8                	fstp   st(0)
c0023f32:	d9 ee                	fldz   
c0023f34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023f39:	d9 ee                	fldz   
c0023f3b:	d9 c2                	fld    st(2)
c0023f3d:	40                   	inc    eax
c0023f3e:	d8 cb                	fmul   st,st(3)
c0023f40:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f44:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f48:	d9 c0                	fld    st(0)
c0023f4a:	d8 c9                	fmul   st,st(1)
c0023f4c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f50:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f54:	d9 c0                	fld    st(0)
c0023f56:	dc 0d 08 b2 02 c0    	fmul   QWORD PTR ds:0xc002b208
c0023f5c:	dc 05 10 b2 02 c0    	fadd   QWORD PTR ds:0xc002b210
c0023f62:	d8 c9                	fmul   st,st(1)
c0023f64:	dc 05 18 b2 02 c0    	fadd   QWORD PTR ds:0xc002b218
c0023f6a:	d8 c9                	fmul   st,st(1)
c0023f6c:	dc 05 20 b2 02 c0    	fadd   QWORD PTR ds:0xc002b220
c0023f72:	d8 c9                	fmul   st,st(1)
c0023f74:	dc 05 28 b2 02 c0    	fadd   QWORD PTR ds:0xc002b228
c0023f7a:	d8 c9                	fmul   st,st(1)
c0023f7c:	dc 05 30 b2 02 c0    	fadd   QWORD PTR ds:0xc002b230
c0023f82:	de ca                	fmulp  st(2),st
c0023f84:	d9 c9                	fxch   st(1)
c0023f86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f8a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f8e:	d9 c1                	fld    st(1)
c0023f90:	dc 0d 38 b2 02 c0    	fmul   QWORD PTR ds:0xc002b238
c0023f96:	dc 25 40 b2 02 c0    	fsub   QWORD PTR ds:0xc002b240
c0023f9c:	d8 ca                	fmul   st,st(2)
c0023f9e:	dc 25 48 b2 02 c0    	fsub   QWORD PTR ds:0xc002b248
c0023fa4:	d8 ca                	fmul   st,st(2)
c0023fa6:	dc 25 50 b2 02 c0    	fsub   QWORD PTR ds:0xc002b250
c0023fac:	d8 ca                	fmul   st,st(2)
c0023fae:	dc 25 58 b2 02 c0    	fsub   QWORD PTR ds:0xc002b258
c0023fb4:	de ca                	fmulp  st(2),st
c0023fb6:	d9 c9                	fxch   st(1)
c0023fb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023fbc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023fc0:	de c1                	faddp  st(1),st
c0023fc2:	d8 cb                	fmul   st,st(3)
c0023fc4:	74 6a                	je     c0024030 <atan+0x1a0>
c0023fc6:	85 f6                	test   esi,esi
c0023fc8:	de e2                	fsubrp st(2),st
c0023fca:	d9 c9                	fxch   st(1)
c0023fcc:	de e2                	fsubrp st(2),st
c0023fce:	de e1                	fsubrp st(1),st
c0023fd0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023fd4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023fd8:	0f 89 f3 fe ff ff    	jns    c0023ed1 <atan+0x41>
c0023fde:	d9 e0                	fchs   
c0023fe0:	83 c4 24             	add    esp,0x24
c0023fe3:	5b                   	pop    ebx
c0023fe4:	5e                   	pop    esi
c0023fe5:	c3                   	ret    
c0023fe6:	8d 76 00             	lea    esi,[esi+0x0]
c0023fe9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023ff0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023ff4:	d9 e8                	fld1   
c0023ff6:	d9 c2                	fld    st(2)
c0023ff8:	dc 05 40 b0 02 c0    	fadd   QWORD PTR ds:0xc002b040
c0023ffe:	df f1                	fcomip st,st(1)
c0024000:	dd d8                	fstp   st(0)
c0024002:	0f 86 28 ff ff ff    	jbe    c0023f30 <atan+0xa0>
c0024008:	dd d9                	fstp   st(1)
c002400a:	e9 c2 fe ff ff       	jmp    c0023ed1 <atan+0x41>
c002400f:	90                   	nop
c0024010:	dd 05 58 b0 02 c0    	fld    QWORD PTR ds:0xc002b058
c0024016:	de e1                	fsubrp st(1),st
c0024018:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002401c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024020:	e9 ac fe ff ff       	jmp    c0023ed1 <atan+0x41>
c0024025:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024029:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024030:	dd da                	fstp   st(2)
c0024032:	dd d8                	fstp   st(0)
c0024034:	de e9                	fsubp  st(1),st
c0024036:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002403a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002403e:	83 c4 24             	add    esp,0x24
c0024041:	5b                   	pop    ebx
c0024042:	5e                   	pop    esi
c0024043:	c3                   	ret    
c0024044:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002404a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024050:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024054:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024057:	e8 d4 06 00 00       	call   c0024730 <fabs>
c002405c:	81 fb ff ff f2 3f    	cmp    ebx,0x3ff2ffff
c0024062:	7f 3c                	jg     c00240a0 <atan+0x210>
c0024064:	81 fb ff ff e5 3f    	cmp    ebx,0x3fe5ffff
c002406a:	0f 8f a0 00 00 00    	jg     c0024110 <atan+0x280>
c0024070:	d9 c0                	fld    st(0)
c0024072:	31 c0                	xor    eax,eax
c0024074:	d8 c1                	fadd   st,st(1)
c0024076:	d8 25 30 b0 02 c0    	fsub   DWORD PTR ds:0xc002b030
c002407c:	d9 c9                	fxch   st(1)
c002407e:	d8 05 a0 b0 02 c0    	fadd   DWORD PTR ds:0xc002b0a0
c0024084:	de f9                	fdivp  st(1),st
c0024086:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002408a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002408e:	dd 05 f8 b1 02 c0    	fld    QWORD PTR ds:0xc002b1f8
c0024094:	dd 05 00 b2 02 c0    	fld    QWORD PTR ds:0xc002b200
c002409a:	e9 9c fe ff ff       	jmp    c0023f3b <atan+0xab>
c002409f:	90                   	nop
c00240a0:	81 fb ff 7f 03 40    	cmp    ebx,0x40037fff
c00240a6:	7f 38                	jg     c00240e0 <atan+0x250>
c00240a8:	d9 05 84 b0 02 c0    	fld    DWORD PTR ds:0xc002b084
c00240ae:	b8 02 00 00 00       	mov    eax,0x2
c00240b3:	d9 c1                	fld    st(1)
c00240b5:	d8 e1                	fsub   st,st(1)
c00240b7:	d9 ca                	fxch   st(2)
c00240b9:	de c9                	fmulp  st(1),st
c00240bb:	d8 05 30 b0 02 c0    	fadd   DWORD PTR ds:0xc002b030
c00240c1:	de f9                	fdivp  st(1),st
c00240c3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00240c7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00240cb:	dd 05 e8 b1 02 c0    	fld    QWORD PTR ds:0xc002b1e8
c00240d1:	dd 05 f0 b1 02 c0    	fld    QWORD PTR ds:0xc002b1f0
c00240d7:	e9 5f fe ff ff       	jmp    c0023f3b <atan+0xab>
c00240dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00240e0:	d8 3d 60 b2 02 c0    	fdivr  DWORD PTR ds:0xc002b260
c00240e6:	b8 03 00 00 00       	mov    eax,0x3
c00240eb:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00240ef:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00240f3:	dd 05 38 b0 02 c0    	fld    QWORD PTR ds:0xc002b038
c00240f9:	dd 05 d8 af 02 c0    	fld    QWORD PTR ds:0xc002afd8
c00240ff:	e9 37 fe ff ff       	jmp    c0023f3b <atan+0xab>
c0024104:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002410a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024110:	d9 e8                	fld1   
c0024112:	b8 01 00 00 00       	mov    eax,0x1
c0024117:	d9 c1                	fld    st(1)
c0024119:	d8 e1                	fsub   st,st(1)
c002411b:	d9 ca                	fxch   st(2)
c002411d:	de c1                	faddp  st(1),st
c002411f:	de f9                	fdivp  st(1),st
c0024121:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024125:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024129:	dd 05 e0 b1 02 c0    	fld    QWORD PTR ds:0xc002b1e0
c002412f:	dd 05 48 b0 02 c0    	fld    QWORD PTR ds:0xc002b048
c0024135:	e9 01 fe ff ff       	jmp    c0023f3b <atan+0xab>
c002413a:	66 90                	xchg   ax,ax
c002413c:	66 90                	xchg   ax,ax
c002413e:	66 90                	xchg   ax,ax

c0024140 <cos>:
c0024140:	83 ec 5c             	sub    esp,0x5c
c0024143:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0024147:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002414b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002414f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024154:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0024159:	7f 55                	jg     c00241b0 <cos+0x70>
c002415b:	3d 9d a0 46 3e       	cmp    eax,0x3e46a09d
c0024160:	7f 2e                	jg     c0024190 <cos+0x50>
c0024162:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0024166:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002416b:	66 0d 00 0c          	or     ax,0xc00
c002416f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0024174:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024178:	db 5c 24 30          	fistp  DWORD PTR [esp+0x30]
c002417c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024180:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024184:	85 c0                	test   eax,eax
c0024186:	0f 84 94 00 00 00    	je     c0024220 <cos+0xe0>
c002418c:	eb 04                	jmp    c0024192 <cos+0x52>
c002418e:	66 90                	xchg   ax,ax
c0024190:	dd d8                	fstp   st(0)
c0024192:	d9 ee                	fldz   
c0024194:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024198:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002419c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002419f:	e8 ac 11 00 00       	call   c0025350 <__kernel_cos>
c00241a4:	83 c4 5c             	add    esp,0x5c
c00241a7:	c3                   	ret    
c00241a8:	90                   	nop
c00241a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00241b0:	dd d8                	fstp   st(0)
c00241b2:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c00241b7:	7e 17                	jle    c00241d0 <cos+0x90>
c00241b9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00241bd:	d8 e0                	fsub   st,st(0)
c00241bf:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00241c3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00241c7:	83 c4 5c             	add    esp,0x5c
c00241ca:	c3                   	ret    
c00241cb:	90                   	nop
c00241cc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00241d0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00241d4:	8d 44 24 40          	lea    eax,[esp+0x40]
c00241d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00241dc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00241df:	e8 3c 0c 00 00       	call   c0024e20 <__ieee754_rem_pio2>
c00241e4:	83 e0 03             	and    eax,0x3
c00241e7:	83 f8 01             	cmp    eax,0x1
c00241ea:	0f 84 80 00 00 00    	je     c0024270 <cos+0x130>
c00241f0:	83 f8 02             	cmp    eax,0x2
c00241f3:	74 5b                	je     c0024250 <cos+0x110>
c00241f5:	85 c0                	test   eax,eax
c00241f7:	74 37                	je     c0024230 <cos+0xf0>
c00241f9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00241fd:	b8 01 00 00 00       	mov    eax,0x1
c0024202:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024206:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c002420a:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002420e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024211:	e8 ba 1b 00 00       	call   c0025dd0 <__kernel_sin>
c0024216:	eb 8c                	jmp    c00241a4 <cos+0x64>
c0024218:	90                   	nop
c0024219:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024220:	d9 e8                	fld1   
c0024222:	83 c4 5c             	add    esp,0x5c
c0024225:	c3                   	ret    
c0024226:	8d 76 00             	lea    esi,[esi+0x0]
c0024229:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024230:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024234:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024238:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002423c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002423f:	e8 0c 11 00 00       	call   c0025350 <__kernel_cos>
c0024244:	e9 5b ff ff ff       	jmp    c00241a4 <cos+0x64>
c0024249:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024250:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024254:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024258:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002425c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002425f:	e8 ec 10 00 00       	call   c0025350 <__kernel_cos>
c0024264:	d9 e0                	fchs   
c0024266:	e9 39 ff ff ff       	jmp    c00241a4 <cos+0x64>
c002426b:	90                   	nop
c002426c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024270:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024274:	ba 01 00 00 00       	mov    edx,0x1
c0024279:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002427d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024281:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024285:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024288:	e8 43 1b 00 00       	call   c0025dd0 <__kernel_sin>
c002428d:	d9 e0                	fchs   
c002428f:	e9 10 ff ff ff       	jmp    c00241a4 <cos+0x64>
c0024294:	66 90                	xchg   ax,ax
c0024296:	66 90                	xchg   ax,ax
c0024298:	66 90                	xchg   ax,ax
c002429a:	66 90                	xchg   ax,ax
c002429c:	66 90                	xchg   ax,ax
c002429e:	66 90                	xchg   ax,ax

c00242a0 <expm1>:
c00242a0:	d9 05 70 b2 02 c0    	fld    DWORD PTR ds:0xc002b270
c00242a6:	83 ec 24             	sub    esp,0x24
c00242a9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00242ad:	dd 14 24             	fst    QWORD PTR [esp]
c00242b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00242b4:	89 d0                	mov    eax,edx
c00242b6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00242bb:	3d 79 68 43 40       	cmp    eax,0x40436879
c00242c0:	0f 86 ea 00 00 00    	jbe    c00243b0 <expm1+0x110>
c00242c6:	dd d9                	fstp   st(1)
c00242c8:	3d 41 2e 86 40       	cmp    eax,0x40862e41
c00242cd:	76 51                	jbe    c0024320 <expm1+0x80>
c00242cf:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c00242d4:	76 2a                	jbe    c0024300 <expm1+0x60>
c00242d6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00242d9:	89 d1                	mov    ecx,edx
c00242db:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00242e1:	09 c1                	or     ecx,eax
c00242e3:	0f 84 b7 03 00 00    	je     c00246a0 <expm1+0x400>
c00242e9:	d9 c0                	fld    st(0)
c00242eb:	de c1                	faddp  st(1),st
c00242ed:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00242f1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00242f5:	e9 0a 02 00 00       	jmp    c0024504 <expm1+0x264>
c00242fa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024300:	dd d8                	fstp   st(0)
c0024302:	dd 05 88 b2 02 c0    	fld    QWORD PTR ds:0xc002b288
c0024308:	dd 04 24             	fld    QWORD PTR [esp]
c002430b:	df f1                	fcomip st,st(1)
c002430d:	dd d8                	fstp   st(0)
c002430f:	0f 87 cb 03 00 00    	ja     c00246e0 <expm1+0x440>
c0024315:	eb 0b                	jmp    c0024322 <expm1+0x82>
c0024317:	89 f6                	mov    esi,esi
c0024319:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024320:	dd d8                	fstp   st(0)
c0024322:	85 d2                	test   edx,edx
c0024324:	dd 04 24             	fld    QWORD PTR [esp]
c0024327:	0f 88 e3 01 00 00    	js     c0024510 <expm1+0x270>
c002432d:	d9 c0                	fld    st(0)
c002432f:	dc 0d 10 b1 02 c0    	fmul   QWORD PTR ds:0xc002b110
c0024335:	d9 05 34 b0 02 c0    	fld    DWORD PTR ds:0xc002b034
c002433b:	d9 7c 24 16          	fnstcw WORD PTR [esp+0x16]
c002433f:	de c1                	faddp  st(1),st
c0024341:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0024346:	66 0d 00 0c          	or     ax,0xc00
c002434a:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002434f:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0024353:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0024357:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c002435b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002435f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0024362:	db 04 24             	fild   DWORD PTR [esp]
c0024365:	d9 c0                	fld    st(0)
c0024367:	dc 0d 98 b2 02 c0    	fmul   QWORD PTR ds:0xc002b298
c002436d:	de ea                	fsubp  st(2),st
c002436f:	d9 c9                	fxch   st(1)
c0024371:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024375:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024379:	d9 c9                	fxch   st(1)
c002437b:	dc 0d 80 b2 02 c0    	fmul   QWORD PTR ds:0xc002b280
c0024381:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024385:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024389:	d9 c1                	fld    st(1)
c002438b:	d8 e1                	fsub   st,st(1)
c002438d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024390:	dd 04 24             	fld    QWORD PTR [esp]
c0024393:	dc ea                	fsub   st(2),st
c0024395:	d9 ca                	fxch   st(2)
c0024397:	de e1                	fsubrp st(1),st
c0024399:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002439d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00243a1:	eb 2c                	jmp    c00243cf <expm1+0x12f>
c00243a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00243a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00243b0:	dd d8                	fstp   st(0)
c00243b2:	3d 42 2e d6 3f       	cmp    eax,0x3fd62e42
c00243b7:	dd 04 24             	fld    QWORD PTR [esp]
c00243ba:	0f 87 c0 01 00 00    	ja     c0024580 <expm1+0x2e0>
c00243c0:	31 c9                	xor    ecx,ecx
c00243c2:	3d ff ff 8f 3c       	cmp    eax,0x3c8fffff
c00243c7:	0f 86 f3 01 00 00    	jbe    c00245c0 <expm1+0x320>
c00243cd:	d9 c9                	fxch   st(1)
c00243cf:	d9 05 34 b0 02 c0    	fld    DWORD PTR ds:0xc002b034
c00243d5:	85 c9                	test   ecx,ecx
c00243d7:	d9 c2                	fld    st(2)
c00243d9:	d8 c9                	fmul   st,st(1)
c00243db:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00243df:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00243e3:	d9 c0                	fld    st(0)
c00243e5:	d8 cc                	fmul   st,st(4)
c00243e7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00243eb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00243ef:	d9 c0                	fld    st(0)
c00243f1:	dc 0d a0 b2 02 c0    	fmul   QWORD PTR ds:0xc002b2a0
c00243f7:	dc 05 a8 b2 02 c0    	fadd   QWORD PTR ds:0xc002b2a8
c00243fd:	d8 c9                	fmul   st,st(1)
c00243ff:	dc 25 b0 b2 02 c0    	fsub   QWORD PTR ds:0xc002b2b0
c0024405:	d8 c9                	fmul   st,st(1)
c0024407:	dc 05 b8 b2 02 c0    	fadd   QWORD PTR ds:0xc002b2b8
c002440d:	d8 c9                	fmul   st,st(1)
c002440f:	dc 25 c0 b2 02 c0    	fsub   QWORD PTR ds:0xc002b2c0
c0024415:	d8 c9                	fmul   st,st(1)
c0024417:	d9 e8                	fld1   
c0024419:	dc c1                	fadd   st(1),st
c002441b:	d9 c9                	fxch   st(1)
c002441d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024421:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024425:	dc cb                	fmul   st(3),st
c0024427:	d9 cb                	fxch   st(3)
c0024429:	d8 2d 94 b0 02 c0    	fsubr  DWORD PTR ds:0xc002b094
c002442f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024433:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024437:	dc eb                	fsub   st(3),st
c0024439:	d8 ce                	fmul   st,st(6)
c002443b:	d8 2d 64 b2 02 c0    	fsubr  DWORD PTR ds:0xc002b264
c0024441:	de fb                	fdivp  st(3),st
c0024443:	d9 ca                	fxch   st(2)
c0024445:	d8 c9                	fmul   st,st(1)
c0024447:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002444b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002444f:	0f 84 9b 00 00 00    	je     c00244f0 <expm1+0x250>
c0024455:	89 c8                	mov    eax,ecx
c0024457:	c1 e0 14             	shl    eax,0x14
c002445a:	05 00 00 f0 3f       	add    eax,0x3ff00000
c002445f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024463:	31 c0                	xor    eax,eax
c0024465:	83 f9 ff             	cmp    ecx,0xffffffff
c0024468:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002446c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0024470:	d9 c9                	fxch   st(1)
c0024472:	d8 e5                	fsub   st,st(5)
c0024474:	d8 ce                	fmul   st,st(6)
c0024476:	de e5                	fsubrp st(5),st
c0024478:	d9 cc                	fxch   st(4)
c002447a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002447e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024482:	de e1                	fsubrp st(1),st
c0024484:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024488:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002448c:	0f 84 9e 01 00 00    	je     c0024630 <expm1+0x390>
c0024492:	83 f9 01             	cmp    ecx,0x1
c0024495:	0f 84 55 01 00 00    	je     c00245f0 <expm1+0x350>
c002449b:	dd da                	fstp   st(2)
c002449d:	d9 c9                	fxch   st(1)
c002449f:	8d 41 01             	lea    eax,[ecx+0x1]
c00244a2:	83 f8 39             	cmp    eax,0x39
c00244a5:	0f 87 95 00 00 00    	ja     c0024540 <expm1+0x2a0>
c00244ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00244b2:	83 f9 13             	cmp    ecx,0x13
c00244b5:	0f 8f b5 01 00 00    	jg     c0024670 <expm1+0x3d0>
c00244bb:	dd d9                	fstp   st(1)
c00244bd:	b8 00 00 20 00       	mov    eax,0x200000
c00244c2:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c00244c7:	d3 f8                	sar    eax,cl
c00244c9:	29 c2                	sub    edx,eax
c00244cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00244cf:	dd 04 24             	fld    QWORD PTR [esp]
c00244d2:	d9 cb                	fxch   st(3)
c00244d4:	de e9                	fsubp  st(1),st
c00244d6:	de ea                	fsubp  st(2),st
c00244d8:	d9 c9                	fxch   st(1)
c00244da:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00244de:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00244e2:	de c9                	fmulp  st(1),st
c00244e4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00244e8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00244ec:	83 c4 24             	add    esp,0x24
c00244ef:	c3                   	ret    
c00244f0:	dd db                	fstp   st(3)
c00244f2:	dd db                	fstp   st(3)
c00244f4:	dd d8                	fstp   st(0)
c00244f6:	d8 ca                	fmul   st,st(2)
c00244f8:	de e1                	fsubrp st(1),st
c00244fa:	de e9                	fsubp  st(1),st
c00244fc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024500:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024504:	83 c4 24             	add    esp,0x24
c0024507:	c3                   	ret    
c0024508:	90                   	nop
c0024509:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024510:	d9 ee                	fldz   
c0024512:	d9 c1                	fld    st(1)
c0024514:	dc 05 90 b2 02 c0    	fadd   QWORD PTR ds:0xc002b290
c002451a:	d9 c9                	fxch   st(1)
c002451c:	df f1                	fcomip st,st(1)
c002451e:	dd d8                	fstp   st(0)
c0024520:	0f 87 8a 01 00 00    	ja     c00246b0 <expm1+0x410>
c0024526:	d9 c0                	fld    st(0)
c0024528:	dc 0d 10 b1 02 c0    	fmul   QWORD PTR ds:0xc002b110
c002452e:	d9 05 98 b1 02 c0    	fld    DWORD PTR ds:0xc002b198
c0024534:	e9 02 fe ff ff       	jmp    c002433b <expm1+0x9b>
c0024539:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024540:	de e3                	fsubrp st(3),st
c0024542:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0024548:	de e2                	fsubrp st(2),st
c002454a:	d9 c9                	fxch   st(1)
c002454c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024550:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024554:	0f 84 96 01 00 00    	je     c00246f0 <expm1+0x450>
c002455a:	de c9                	fmulp  st(1),st
c002455c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024560:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024564:	d9 e8                	fld1   
c0024566:	de e9                	fsubp  st(1),st
c0024568:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002456c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024570:	eb 92                	jmp    c0024504 <expm1+0x264>
c0024572:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024579:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024580:	dd d9                	fstp   st(1)
c0024582:	3d b1 a2 f0 3f       	cmp    eax,0x3ff0a2b1
c0024587:	0f 87 7a 01 00 00    	ja     c0024707 <expm1+0x467>
c002458d:	85 d2                	test   edx,edx
c002458f:	0f 88 bb 00 00 00    	js     c0024650 <expm1+0x3b0>
c0024595:	dc 25 98 b2 02 c0    	fsub   QWORD PTR ds:0xc002b298
c002459b:	b9 01 00 00 00       	mov    ecx,0x1
c00245a0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00245a4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00245a8:	dd 05 80 b2 02 c0    	fld    QWORD PTR ds:0xc002b280
c00245ae:	e9 d6 fd ff ff       	jmp    c0024389 <expm1+0xe9>
c00245b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00245b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00245c0:	dd d9                	fstp   st(1)
c00245c2:	d9 c0                	fld    st(0)
c00245c4:	dc 05 40 b0 02 c0    	fadd   QWORD PTR ds:0xc002b040
c00245ca:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00245ce:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00245d2:	de e1                	fsubrp st(1),st
c00245d4:	de e9                	fsubp  st(1),st
c00245d6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00245da:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00245de:	83 c4 24             	add    esp,0x24
c00245e1:	c3                   	ret    
c00245e2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00245e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00245f0:	dd db                	fstp   st(3)
c00245f2:	d9 c9                	fxch   st(1)
c00245f4:	d9 ca                	fxch   st(2)
c00245f6:	dd 04 24             	fld    QWORD PTR [esp]
c00245f9:	d9 05 68 b2 02 c0    	fld    DWORD PTR ds:0xc002b268
c00245ff:	df f1                	fcomip st,st(1)
c0024601:	dd d8                	fstp   st(0)
c0024603:	0f 86 b7 00 00 00    	jbe    c00246c0 <expm1+0x420>
c0024609:	dd d9                	fstp   st(1)
c002460b:	d9 ca                	fxch   st(2)
c002460d:	de c1                	faddp  st(1),st
c002460f:	de e9                	fsubp  st(1),st
c0024611:	d8 0d 6c b2 02 c0    	fmul   DWORD PTR ds:0xc002b26c
c0024617:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002461b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002461f:	e9 e0 fe ff ff       	jmp    c0024504 <expm1+0x264>
c0024624:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002462a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024630:	dd db                	fstp   st(3)
c0024632:	dd d8                	fstp   st(0)
c0024634:	d9 c9                	fxch   st(1)
c0024636:	de ea                	fsubp  st(2),st
c0024638:	dc c9                	fmul   st(1),st
c002463a:	de e9                	fsubp  st(1),st
c002463c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024640:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024644:	e9 bb fe ff ff       	jmp    c0024504 <expm1+0x264>
c0024649:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024650:	dc 05 98 b2 02 c0    	fadd   QWORD PTR ds:0xc002b298
c0024656:	b9 ff ff ff ff       	mov    ecx,0xffffffff
c002465b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002465f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024663:	dd 05 78 b2 02 c0    	fld    QWORD PTR ds:0xc002b278
c0024669:	e9 1b fd ff ff       	jmp    c0024389 <expm1+0xe9>
c002466e:	66 90                	xchg   ax,ax
c0024670:	b8 ff 03 00 00       	mov    eax,0x3ff
c0024675:	29 c8                	sub    eax,ecx
c0024677:	c1 e0 14             	shl    eax,0x14
c002467a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002467e:	dd 04 24             	fld    QWORD PTR [esp]
c0024681:	de c1                	faddp  st(1),st
c0024683:	de eb                	fsubp  st(3),st
c0024685:	d9 ca                	fxch   st(2)
c0024687:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002468b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002468f:	de c2                	faddp  st(2),st
c0024691:	d9 c9                	fxch   st(1)
c0024693:	e9 42 fe ff ff       	jmp    c00244da <expm1+0x23a>
c0024698:	90                   	nop
c0024699:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00246a0:	dd d8                	fstp   st(0)
c00246a2:	85 d2                	test   edx,edx
c00246a4:	78 0c                	js     c00246b2 <expm1+0x412>
c00246a6:	dd 04 24             	fld    QWORD PTR [esp]
c00246a9:	e9 56 fe ff ff       	jmp    c0024504 <expm1+0x264>
c00246ae:	66 90                	xchg   ax,ax
c00246b0:	dd d8                	fstp   st(0)
c00246b2:	d9 e8                	fld1   
c00246b4:	d9 e0                	fchs   
c00246b6:	e9 49 fe ff ff       	jmp    c0024504 <expm1+0x264>
c00246bb:	90                   	nop
c00246bc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00246c0:	dd da                	fstp   st(2)
c00246c2:	d9 c9                	fxch   st(1)
c00246c4:	de ea                	fsubp  st(2),st
c00246c6:	d9 c9                	fxch   st(1)
c00246c8:	d8 c0                	fadd   st,st(0)
c00246ca:	de c1                	faddp  st(1),st
c00246cc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00246d0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00246d4:	e9 2b fe ff ff       	jmp    c0024504 <expm1+0x264>
c00246d9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00246e0:	d9 05 78 b0 02 c0    	fld    DWORD PTR ds:0xc002b078
c00246e6:	e9 19 fe ff ff       	jmp    c0024504 <expm1+0x264>
c00246eb:	90                   	nop
c00246ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00246f0:	dd d9                	fstp   st(1)
c00246f2:	d8 c0                	fadd   st,st(0)
c00246f4:	dc 0d c8 b2 02 c0    	fmul   QWORD PTR ds:0xc002b2c8
c00246fa:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00246fe:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024702:	e9 5d fe ff ff       	jmp    c0024564 <expm1+0x2c4>
c0024707:	d9 c0                	fld    st(0)
c0024709:	85 d2                	test   edx,edx
c002470b:	dc 0d 10 b1 02 c0    	fmul   QWORD PTR ds:0xc002b110
c0024711:	0f 88 17 fe ff ff    	js     c002452e <expm1+0x28e>
c0024717:	d9 05 34 b0 02 c0    	fld    DWORD PTR ds:0xc002b034
c002471d:	e9 19 fc ff ff       	jmp    c002433b <expm1+0x9b>
c0024722:	66 90                	xchg   ax,ax
c0024724:	66 90                	xchg   ax,ax
c0024726:	66 90                	xchg   ax,ax
c0024728:	66 90                	xchg   ax,ax
c002472a:	66 90                	xchg   ax,ax
c002472c:	66 90                	xchg   ax,ax
c002472e:	66 90                	xchg   ax,ax

c0024730 <fabs>:
c0024730:	83 ec 0c             	sub    esp,0xc
c0024733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024737:	89 04 24             	mov    DWORD PTR [esp],eax
c002473a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002473e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024743:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024747:	dd 04 24             	fld    QWORD PTR [esp]
c002474a:	83 c4 0c             	add    esp,0xc
c002474d:	c3                   	ret    
c002474e:	66 90                	xchg   ax,ax

c0024750 <frexp>:
c0024750:	53                   	push   ebx
c0024751:	83 ec 10             	sub    esp,0x10
c0024754:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024758:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002475c:	dd 14 24             	fst    QWORD PTR [esp]
c002475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024763:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c0024769:	89 d0                	mov    eax,edx
c002476b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024770:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0024775:	7f 59                	jg     c00247d0 <frexp+0x80>
c0024777:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c002477a:	09 c3                	or     ebx,eax
c002477c:	74 62                	je     c00247e0 <frexp+0x90>
c002477e:	31 db                	xor    ebx,ebx
c0024780:	f7 c2 00 00 f0 7f    	test   edx,0x7ff00000
c0024786:	75 28                	jne    c00247b0 <frexp+0x60>
c0024788:	d9 05 d0 b2 02 c0    	fld    DWORD PTR ds:0xc002b2d0
c002478e:	bb ca ff ff ff       	mov    ebx,0xffffffca
c0024793:	de c9                	fmulp  st(1),st
c0024795:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024798:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002479c:	89 d0                	mov    eax,edx
c002479e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00247a3:	eb 0d                	jmp    c00247b2 <frexp+0x62>
c00247a5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00247a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00247b0:	dd d8                	fstp   st(0)
c00247b2:	c1 f8 14             	sar    eax,0x14
c00247b5:	81 e2 ff ff 0f 80    	and    edx,0x800fffff
c00247bb:	8d 84 03 02 fc ff ff 	lea    eax,[ebx+eax*1-0x3fe]
c00247c2:	81 ca 00 00 e0 3f    	or     edx,0x3fe00000
c00247c8:	89 01                	mov    DWORD PTR [ecx],eax
c00247ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00247ce:	eb 12                	jmp    c00247e2 <frexp+0x92>
c00247d0:	dd d8                	fstp   st(0)
c00247d2:	eb 0e                	jmp    c00247e2 <frexp+0x92>
c00247d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00247da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00247e0:	dd d8                	fstp   st(0)
c00247e2:	dd 04 24             	fld    QWORD PTR [esp]
c00247e5:	83 c4 10             	add    esp,0x10
c00247e8:	5b                   	pop    ebx
c00247e9:	c3                   	ret    
c00247ea:	66 90                	xchg   ax,ax
c00247ec:	66 90                	xchg   ax,ax
c00247ee:	66 90                	xchg   ax,ax

c00247f0 <modf>:
c00247f0:	53                   	push   ebx
c00247f1:	83 ec 18             	sub    esp,0x18
c00247f4:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00247f8:	dd 14 24             	fst    QWORD PTR [esp]
c00247fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00247ff:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0024802:	89 d0                	mov    eax,edx
c0024804:	c1 f8 14             	sar    eax,0x14
c0024807:	25 ff 07 00 00       	and    eax,0x7ff
c002480c:	8d 88 01 fc ff ff    	lea    ecx,[eax-0x3ff]
c0024812:	83 f9 13             	cmp    ecx,0x13
c0024815:	7f 49                	jg     c0024860 <modf+0x70>
c0024817:	85 c9                	test   ecx,ecx
c0024819:	0f 88 f1 00 00 00    	js     c0024910 <modf+0x120>
c002481f:	dd d8                	fstp   st(0)
c0024821:	b8 ff ff 0f 00       	mov    eax,0xfffff
c0024826:	d3 f8                	sar    eax,cl
c0024828:	89 d1                	mov    ecx,edx
c002482a:	21 c1                	and    ecx,eax
c002482c:	09 d9                	or     ecx,ebx
c002482e:	0f 84 ac 00 00 00    	je     c00248e0 <modf+0xf0>
c0024834:	f7 d0                	not    eax
c0024836:	21 d0                	and    eax,edx
c0024838:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002483c:	31 c0                	xor    eax,eax
c002483e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024842:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024846:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c002484a:	dd 10                	fst    QWORD PTR [eax]
c002484c:	dd 04 24             	fld    QWORD PTR [esp]
c002484f:	de e1                	fsubrp st(1),st
c0024851:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0024855:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024859:	83 c4 18             	add    esp,0x18
c002485c:	5b                   	pop    ebx
c002485d:	c3                   	ret    
c002485e:	66 90                	xchg   ax,ax
c0024860:	dd d8                	fstp   st(0)
c0024862:	83 f9 33             	cmp    ecx,0x33
c0024865:	7e 39                	jle    c00248a0 <modf+0xb0>
c0024867:	81 f9 00 04 00 00    	cmp    ecx,0x400
c002486d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024871:	0f 84 e9 00 00 00    	je     c0024960 <modf+0x170>
c0024877:	dd 04 24             	fld    QWORD PTR [esp]
c002487a:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0024887:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002488b:	dd 18                	fstp   QWORD PTR [eax]
c002488d:	dd 04 24             	fld    QWORD PTR [esp]
c0024890:	83 c4 18             	add    esp,0x18
c0024893:	5b                   	pop    ebx
c0024894:	c3                   	ret    
c0024895:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024899:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00248a0:	8d 88 ed fb ff ff    	lea    ecx,[eax-0x413]
c00248a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00248ab:	d3 e8                	shr    eax,cl
c00248ad:	85 d8                	test   eax,ebx
c00248af:	75 7f                	jne    c0024930 <modf+0x140>
c00248b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00248b5:	81 e2 00 00 00 80    	and    edx,0x80000000
c00248bb:	dd 04 24             	fld    QWORD PTR [esp]
c00248be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00248c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00248c9:	dd 18                	fstp   QWORD PTR [eax]
c00248cb:	dd 04 24             	fld    QWORD PTR [esp]
c00248ce:	83 c4 18             	add    esp,0x18
c00248d1:	5b                   	pop    ebx
c00248d2:	c3                   	ret    
c00248d3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00248d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00248e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00248e4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00248ea:	dd 04 24             	fld    QWORD PTR [esp]
c00248ed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00248f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00248f8:	dd 18                	fstp   QWORD PTR [eax]
c00248fa:	dd 04 24             	fld    QWORD PTR [esp]
c00248fd:	83 c4 18             	add    esp,0x18
c0024900:	5b                   	pop    ebx
c0024901:	c3                   	ret    
c0024902:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024910:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024916:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002491a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002491e:	31 d2                	xor    edx,edx
c0024920:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0024924:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0024928:	dd 18                	fstp   QWORD PTR [eax]
c002492a:	83 c4 18             	add    esp,0x18
c002492d:	5b                   	pop    ebx
c002492e:	c3                   	ret    
c002492f:	90                   	nop
c0024930:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024934:	f7 d0                	not    eax
c0024936:	21 d8                	and    eax,ebx
c0024938:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002493c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024940:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0024944:	dd 10                	fst    QWORD PTR [eax]
c0024946:	dd 04 24             	fld    QWORD PTR [esp]
c0024949:	de e1                	fsubrp st(1),st
c002494b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002494f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024953:	83 c4 18             	add    esp,0x18
c0024956:	5b                   	pop    ebx
c0024957:	c3                   	ret    
c0024958:	90                   	nop
c0024959:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024960:	dd 04 24             	fld    QWORD PTR [esp]
c0024963:	dd 10                	fst    QWORD PTR [eax]
c0024965:	d9 ee                	fldz   
c0024967:	de f1                	fdivrp st(1),st
c0024969:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002496d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024971:	e9 e3 fe ff ff       	jmp    c0024859 <modf+0x69>
c0024976:	66 90                	xchg   ax,ax
c0024978:	66 90                	xchg   ax,ax
c002497a:	66 90                	xchg   ax,ax
c002497c:	66 90                	xchg   ax,ax
c002497e:	66 90                	xchg   ax,ax

c0024980 <round>:
c0024980:	83 ec 2c             	sub    esp,0x2c
c0024983:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0024987:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002498b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002498f:	89 c2                	mov    edx,eax
c0024991:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024997:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c002499d:	0f 84 9d 00 00 00    	je     c0024a40 <round+0xc0>
c00249a3:	dd d8                	fstp   st(0)
c00249a5:	85 c0                	test   eax,eax
c00249a7:	78 47                	js     c00249f0 <round+0x70>
c00249a9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00249ad:	dd 1c 24             	fstp   QWORD PTR [esp]
c00249b0:	e8 ff 03 00 00       	call   c0024db4 <floor>
c00249b5:	d9 c0                	fld    st(0)
c00249b7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00249bb:	d8 e9                	fsubr  st,st(1)
c00249bd:	d9 05 98 b1 02 c0    	fld    DWORD PTR ds:0xc002b198
c00249c3:	df f1                	fcomip st,st(1)
c00249c5:	dd d8                	fstp   st(0)
c00249c7:	72 17                	jb     c00249e0 <round+0x60>
c00249c9:	dd d9                	fstp   st(1)
c00249cb:	d8 05 30 b0 02 c0    	fadd   DWORD PTR ds:0xc002b030
c00249d1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00249d5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00249d9:	eb 07                	jmp    c00249e2 <round+0x62>
c00249db:	90                   	nop
c00249dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00249e0:	dd d8                	fstp   st(0)
c00249e2:	83 c4 2c             	add    esp,0x2c
c00249e5:	c3                   	ret    
c00249e6:	8d 76 00             	lea    esi,[esi+0x0]
c00249e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00249f0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00249f4:	d9 e0                	fchs   
c00249f6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00249f9:	e8 b6 03 00 00       	call   c0024db4 <floor>
c00249fe:	d9 c0                	fld    st(0)
c0024a00:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024a04:	d8 c1                	fadd   st,st(1)
c0024a06:	d9 05 98 b1 02 c0    	fld    DWORD PTR ds:0xc002b198
c0024a0c:	df f1                	fcomip st,st(1)
c0024a0e:	dd d8                	fstp   st(0)
c0024a10:	72 1e                	jb     c0024a30 <round+0xb0>
c0024a12:	dd d9                	fstp   st(1)
c0024a14:	d8 05 30 b0 02 c0    	fadd   DWORD PTR ds:0xc002b030
c0024a1a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024a1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024a22:	eb 0e                	jmp    c0024a32 <round+0xb2>
c0024a24:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024a2a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024a30:	dd d8                	fstp   st(0)
c0024a32:	d9 e0                	fchs   
c0024a34:	83 c4 2c             	add    esp,0x2c
c0024a37:	c3                   	ret    
c0024a38:	90                   	nop
c0024a39:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024a40:	d9 c0                	fld    st(0)
c0024a42:	de c1                	faddp  st(1),st
c0024a44:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024a48:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024a4c:	83 c4 2c             	add    esp,0x2c
c0024a4f:	c3                   	ret    

c0024a50 <sin>:
c0024a50:	83 ec 5c             	sub    esp,0x5c
c0024a53:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0024a57:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0024a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0024a5f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024a64:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0024a69:	7f 65                	jg     c0024ad0 <sin+0x80>
c0024a6b:	3d ff ff 4f 3e       	cmp    eax,0x3e4fffff
c0024a70:	7f 2e                	jg     c0024aa0 <sin+0x50>
c0024a72:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0024a76:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0024a7b:	66 0d 00 0c          	or     ax,0xc00
c0024a7f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0024a84:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024a88:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c0024a8c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024a90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024a94:	85 c0                	test   eax,eax
c0024a96:	75 18                	jne    c0024ab0 <sin+0x60>
c0024a98:	83 c4 5c             	add    esp,0x5c
c0024a9b:	c3                   	ret    
c0024a9c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024aa0:	dd d8                	fstp   st(0)
c0024aa2:	eb 0e                	jmp    c0024ab2 <sin+0x62>
c0024aa4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024aaa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024ab0:	dd d8                	fstp   st(0)
c0024ab2:	d9 ee                	fldz   
c0024ab4:	31 c9                	xor    ecx,ecx
c0024ab6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0024aba:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024abe:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024ac2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024ac5:	e8 06 13 00 00       	call   c0025dd0 <__kernel_sin>
c0024aca:	83 c4 5c             	add    esp,0x5c
c0024acd:	c3                   	ret    
c0024ace:	66 90                	xchg   ax,ax
c0024ad0:	dd d8                	fstp   st(0)
c0024ad2:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0024ad7:	7e 17                	jle    c0024af0 <sin+0xa0>
c0024ad9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024add:	d8 e0                	fsub   st,st(0)
c0024adf:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024ae3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024ae7:	83 c4 5c             	add    esp,0x5c
c0024aea:	c3                   	ret    
c0024aeb:	90                   	nop
c0024aec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024af0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024af4:	8d 44 24 40          	lea    eax,[esp+0x40]
c0024af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024afc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024aff:	e8 1c 03 00 00       	call   c0024e20 <__ieee754_rem_pio2>
c0024b04:	83 e0 03             	and    eax,0x3
c0024b07:	83 f8 01             	cmp    eax,0x1
c0024b0a:	0f 84 90 00 00 00    	je     c0024ba0 <sin+0x150>
c0024b10:	83 f8 02             	cmp    eax,0x2
c0024b13:	74 2b                	je     c0024b40 <sin+0xf0>
c0024b15:	85 c0                	test   eax,eax
c0024b17:	74 57                	je     c0024b70 <sin+0x120>
c0024b19:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024b1d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024b21:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024b25:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024b28:	e8 23 08 00 00       	call   c0025350 <__kernel_cos>
c0024b2d:	d9 e0                	fchs   
c0024b2f:	e9 64 ff ff ff       	jmp    c0024a98 <sin+0x48>
c0024b34:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024b3a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024b40:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024b44:	b8 01 00 00 00       	mov    eax,0x1
c0024b49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024b4d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024b51:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024b55:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024b58:	e8 73 12 00 00       	call   c0025dd0 <__kernel_sin>
c0024b5d:	d9 e0                	fchs   
c0024b5f:	e9 34 ff ff ff       	jmp    c0024a98 <sin+0x48>
c0024b64:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024b6a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024b70:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024b74:	ba 01 00 00 00       	mov    edx,0x1
c0024b79:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024b7d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024b81:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024b85:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024b88:	e8 43 12 00 00       	call   c0025dd0 <__kernel_sin>
c0024b8d:	e9 06 ff ff ff       	jmp    c0024a98 <sin+0x48>
c0024b92:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024b99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024ba0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024ba4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024ba8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024bac:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024baf:	e8 9c 07 00 00       	call   c0025350 <__kernel_cos>
c0024bb4:	e9 df fe ff ff       	jmp    c0024a98 <sin+0x48>
c0024bb9:	66 90                	xchg   ax,ax
c0024bbb:	66 90                	xchg   ax,ax
c0024bbd:	66 90                	xchg   ax,ax
c0024bbf:	90                   	nop

c0024bc0 <tanh>:
c0024bc0:	53                   	push   ebx
c0024bc1:	83 ec 28             	sub    esp,0x28
c0024bc4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0024bc8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0024bcc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024bd0:	89 d8                	mov    eax,ebx
c0024bd2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024bd7:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0024bdc:	7e 32                	jle    c0024c10 <tanh+0x50>
c0024bde:	d9 e8                	fld1   
c0024be0:	85 db                	test   ebx,ebx
c0024be2:	dc f1                	fdivr  st(1),st
c0024be4:	78 1a                	js     c0024c00 <tanh+0x40>
c0024be6:	de c1                	faddp  st(1),st
c0024be8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024bec:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024bf0:	83 c4 28             	add    esp,0x28
c0024bf3:	5b                   	pop    ebx
c0024bf4:	c3                   	ret    
c0024bf5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024bf9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024c00:	de e9                	fsubp  st(1),st
c0024c02:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024c06:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024c0a:	83 c4 28             	add    esp,0x28
c0024c0d:	5b                   	pop    ebx
c0024c0e:	c3                   	ret    
c0024c0f:	90                   	nop
c0024c10:	dd d8                	fstp   st(0)
c0024c12:	3d ff ff 35 40       	cmp    eax,0x4035ffff
c0024c17:	7f 57                	jg     c0024c70 <tanh+0xb0>
c0024c19:	3d ff ff 2f 3e       	cmp    eax,0x3e2fffff
c0024c1e:	7f 70                	jg     c0024c90 <tanh+0xd0>
c0024c20:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024c24:	d9 e8                	fld1   
c0024c26:	d9 c1                	fld    st(1)
c0024c28:	dc 05 40 b0 02 c0    	fadd   QWORD PTR ds:0xc002b040
c0024c2e:	df f1                	fcomip st,st(1)
c0024c30:	dd d8                	fstp   st(0)
c0024c32:	77 bc                	ja     c0024bf0 <tanh+0x30>
c0024c34:	dd d8                	fstp   st(0)
c0024c36:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024c3a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024c3d:	e8 ee fa ff ff       	call   c0024730 <fabs>
c0024c42:	d9 05 6c b2 02 c0    	fld    DWORD PTR ds:0xc002b26c
c0024c48:	de c9                	fmulp  st(1),st
c0024c4a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024c4d:	e8 4e f6 ff ff       	call   c00242a0 <expm1>
c0024c52:	d9 c0                	fld    st(0)
c0024c54:	d9 e0                	fchs   
c0024c56:	d9 05 a0 b0 02 c0    	fld    DWORD PTR ds:0xc002b0a0
c0024c5c:	de c2                	faddp  st(2),st
c0024c5e:	de f1                	fdivrp st(1),st
c0024c60:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024c64:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024c68:	eb 08                	jmp    c0024c72 <tanh+0xb2>
c0024c6a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024c70:	d9 e8                	fld1   
c0024c72:	85 db                	test   ebx,ebx
c0024c74:	0f 89 76 ff ff ff    	jns    c0024bf0 <tanh+0x30>
c0024c7a:	d9 e0                	fchs   
c0024c7c:	83 c4 28             	add    esp,0x28
c0024c7f:	5b                   	pop    ebx
c0024c80:	c3                   	ret    
c0024c81:	eb 0d                	jmp    c0024c90 <tanh+0xd0>
c0024c83:	90                   	nop
c0024c84:	90                   	nop
c0024c85:	90                   	nop
c0024c86:	90                   	nop
c0024c87:	90                   	nop
c0024c88:	90                   	nop
c0024c89:	90                   	nop
c0024c8a:	90                   	nop
c0024c8b:	90                   	nop
c0024c8c:	90                   	nop
c0024c8d:	90                   	nop
c0024c8e:	90                   	nop
c0024c8f:	90                   	nop
c0024c90:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c0024c95:	7e 9f                	jle    c0024c36 <tanh+0x76>
c0024c97:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024c9b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024c9e:	e8 8d fa ff ff       	call   c0024730 <fabs>
c0024ca3:	d8 c0                	fadd   st,st(0)
c0024ca5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024ca8:	e8 f3 f5 ff ff       	call   c00242a0 <expm1>
c0024cad:	d9 05 a0 b0 02 c0    	fld    DWORD PTR ds:0xc002b0a0
c0024cb3:	dc c1                	fadd   st(1),st
c0024cb5:	de f1                	fdivrp st(1),st
c0024cb7:	d8 2d 30 b0 02 c0    	fsubr  DWORD PTR ds:0xc002b030
c0024cbd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024cc1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024cc5:	eb ab                	jmp    c0024c72 <tanh+0xb2>
c0024cc7:	66 90                	xchg   ax,ax
c0024cc9:	66 90                	xchg   ax,ax
c0024ccb:	66 90                	xchg   ax,ax
c0024ccd:	66 90                	xchg   ax,ax
c0024ccf:	90                   	nop

c0024cd0 <cimag>:
c0024cd0:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0024cd4:	c3                   	ret    
c0024cd5:	66 90                	xchg   ax,ax
c0024cd7:	66 90                	xchg   ax,ax
c0024cd9:	66 90                	xchg   ax,ax
c0024cdb:	66 90                	xchg   ax,ax
c0024cdd:	66 90                	xchg   ax,ax
c0024cdf:	90                   	nop

c0024ce0 <creal>:
c0024ce0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024ce4:	c3                   	ret    
c0024ce5:	66 90                	xchg   ax,ax
c0024ce7:	90                   	nop

c0024ce8 <exp>:
c0024ce8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024cec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024cf1:	3d 00 00 f0 7f       	cmp    eax,0x7ff00000
c0024cf6:	73 42                	jae    c0024d3a <x_Inf_or_NaN>
c0024cf8:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024cfc:	9b d9 7c 24 04       	fstcw  WORD PTR [esp+0x4]
c0024d01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024d05:	25 00 03 00 00       	and    eax,0x300
c0024d0a:	3d 00 03 00 00       	cmp    eax,0x300
c0024d0f:	74 0c                	je     c0024d1d <exp+0x35>
c0024d11:	c7 44 24 08 7f 13 00 00 	mov    DWORD PTR [esp+0x8],0x137f
c0024d19:	d9 6c 24 08          	fldcw  WORD PTR [esp+0x8]
c0024d1d:	d9 ea                	fldl2e 
c0024d1f:	de c9                	fmulp  st(1),st
c0024d21:	dd d1                	fst    st(1)
c0024d23:	d9 fc                	frndint 
c0024d25:	dd d2                	fst    st(2)
c0024d27:	de e9                	fsubp  st(1),st
c0024d29:	d9 f0                	f2xm1  
c0024d2b:	d9 e8                	fld1   
c0024d2d:	de c1                	faddp  st(1),st
c0024d2f:	d9 fd                	fscale 
c0024d31:	dd d9                	fstp   st(1)
c0024d33:	74 04                	je     c0024d39 <exp+0x51>
c0024d35:	d9 6c 24 04          	fldcw  WORD PTR [esp+0x4]
c0024d39:	c3                   	ret    

c0024d3a <x_Inf_or_NaN>:
c0024d3a:	81 7c 24 08 00 00 f0 ff 	cmp    DWORD PTR [esp+0x8],0xfff00000
c0024d42:	75 0a                	jne    c0024d4e <x_not_minus_Inf>
c0024d44:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0024d49:	75 03                	jne    c0024d4e <x_not_minus_Inf>
c0024d4b:	d9 ee                	fldz   
c0024d4d:	c3                   	ret    

c0024d4e <x_not_minus_Inf>:
c0024d4e:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024d52:	c3                   	ret    
c0024d53:	90                   	nop

c0024d54 <fmod>:
c0024d54:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0024d58:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024d5c:	d9 f8                	fprem  
c0024d5e:	9b df e0             	fstsw  ax
c0024d61:	9e                   	sahf   
c0024d62:	7a f8                	jp     c0024d5c <fmod+0x8>
c0024d64:	dd d9                	fstp   st(1)
c0024d66:	c3                   	ret    
c0024d67:	90                   	nop

c0024d68 <log>:
c0024d68:	d9 ed                	fldln2 
c0024d6a:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024d6e:	d9 f1                	fyl2x  
c0024d70:	c3                   	ret    
c0024d71:	66 90                	xchg   ax,ax
c0024d73:	90                   	nop

c0024d74 <log10>:
c0024d74:	d9 ec                	fldlg2 
c0024d76:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024d7a:	d9 f1                	fyl2x  
c0024d7c:	c3                   	ret    
c0024d7d:	66 90                	xchg   ax,ax
c0024d7f:	90                   	nop

c0024d80 <sqrt>:
c0024d80:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024d84:	d9 fa                	fsqrt  
c0024d86:	c3                   	ret    
c0024d87:	90                   	nop

c0024d88 <ceil>:
c0024d88:	55                   	push   ebp
c0024d89:	89 e5                	mov    ebp,esp
c0024d8b:	83 ec 08             	sub    esp,0x8
c0024d8e:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c0024d92:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0024d96:	66 81 ca 00 08       	or     dx,0x800
c0024d9b:	66 81 e2 ff fb       	and    dx,0xfbff
c0024da0:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0024da4:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0024da7:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c0024daa:	d9 fc                	frndint 
c0024dac:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c0024daf:	c9                   	leave  
c0024db0:	c3                   	ret    
c0024db1:	66 90                	xchg   ax,ax
c0024db3:	90                   	nop

c0024db4 <floor>:
c0024db4:	55                   	push   ebp
c0024db5:	89 e5                	mov    ebp,esp
c0024db7:	83 ec 08             	sub    esp,0x8
c0024dba:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c0024dbe:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0024dc2:	66 81 ca 00 04       	or     dx,0x400
c0024dc7:	66 81 e2 ff f7       	and    dx,0xf7ff
c0024dcc:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0024dd0:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0024dd3:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c0024dd6:	d9 fc                	frndint 
c0024dd8:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c0024ddb:	c9                   	leave  
c0024ddc:	c3                   	ret    
c0024ddd:	66 90                	xchg   ax,ax
c0024ddf:	90                   	nop

c0024de0 <tan>:
c0024de0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024de4:	d9 f2                	fptan  
c0024de6:	df e0                	fnstsw ax
c0024de8:	66 25 00 04          	and    ax,0x400
c0024dec:	75 03                	jne    c0024df1 <tan+0x11>
c0024dee:	dd d8                	fstp   st(0)
c0024df0:	c3                   	ret    
c0024df1:	d9 eb                	fldpi  
c0024df3:	d8 c0                	fadd   st,st(0)
c0024df5:	d9 c9                	fxch   st(1)
c0024df7:	d9 f5                	fprem1 
c0024df9:	9b df e0             	fstsw  ax
c0024dfc:	66 25 00 04          	and    ax,0x400
c0024e00:	75 f5                	jne    c0024df7 <tan+0x17>
c0024e02:	dd d9                	fstp   st(1)
c0024e04:	d9 f2                	fptan  
c0024e06:	dd d8                	fstp   st(0)
c0024e08:	c3                   	ret    
c0024e09:	66 90                	xchg   ax,ax
c0024e0b:	90                   	nop

c0024e0c <ldexp>:
c0024e0c:	db 44 24 0c          	fild   DWORD PTR [esp+0xc]
c0024e10:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024e14:	d9 fd                	fscale 
c0024e16:	dd d9                	fstp   st(1)
c0024e18:	c3                   	ret    
c0024e19:	66 90                	xchg   ax,ax
c0024e1b:	66 90                	xchg   ax,ax
c0024e1d:	66 90                	xchg   ax,ax
c0024e1f:	90                   	nop

c0024e20 <__ieee754_rem_pio2>:
c0024e20:	56                   	push   esi
c0024e21:	53                   	push   ebx
c0024e22:	83 ec 74             	sub    esp,0x74
c0024e25:	dd 84 24 80 00 00 00 	fld    QWORD PTR [esp+0x80]
c0024e2c:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0024e33:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c0024e37:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024e3b:	89 f2                	mov    edx,esi
c0024e3d:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024e43:	81 fa 7a 6a 0f 40    	cmp    edx,0x400f6a7a
c0024e49:	7f 65                	jg     c0024eb0 <__ieee754_rem_pio2+0x90>
c0024e4b:	89 f0                	mov    eax,esi
c0024e4d:	25 ff ff 0f 00       	and    eax,0xfffff
c0024e52:	3d fb 21 09 00       	cmp    eax,0x921fb
c0024e57:	0f 84 57 02 00 00    	je     c00250b4 <__ieee754_rem_pio2+0x294>
c0024e5d:	81 fa 7c d9 02 40    	cmp    edx,0x4002d97c
c0024e63:	0f 8f b7 01 00 00    	jg     c0025020 <__ieee754_rem_pio2+0x200>
c0024e69:	85 f6                	test   esi,esi
c0024e6b:	0f 8e 3a 04 00 00    	jle    c00252ab <__ieee754_rem_pio2+0x48b>
c0024e71:	dc 25 d8 b2 02 c0    	fsub   QWORD PTR ds:0xc002b2d8
c0024e77:	b8 01 00 00 00       	mov    eax,0x1
c0024e7c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024e80:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024e84:	dd 05 e0 b2 02 c0    	fld    QWORD PTR ds:0xc002b2e0
c0024e8a:	d9 c1                	fld    st(1)
c0024e8c:	d8 e1                	fsub   st,st(1)
c0024e8e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024e92:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024e96:	dd 13                	fst    QWORD PTR [ebx]
c0024e98:	de ea                	fsubp  st(2),st
c0024e9a:	de e9                	fsubp  st(1),st
c0024e9c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024e9f:	83 c4 74             	add    esp,0x74
c0024ea2:	5b                   	pop    ebx
c0024ea3:	5e                   	pop    esi
c0024ea4:	c3                   	ret    
c0024ea5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024ea9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024eb0:	dd d8                	fstp   st(0)
c0024eb2:	81 fa 3b 46 1c 40    	cmp    edx,0x401c463b
c0024eb8:	7f 66                	jg     c0024f20 <__ieee754_rem_pio2+0x100>
c0024eba:	81 fa bc fd 15 40    	cmp    edx,0x4015fdbc
c0024ec0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024ec4:	0f 8f 96 01 00 00    	jg     c0025060 <__ieee754_rem_pio2+0x240>
c0024eca:	81 fa 7c d9 12 40    	cmp    edx,0x4012d97c
c0024ed0:	0f 84 de 01 00 00    	je     c00250b4 <__ieee754_rem_pio2+0x294>
c0024ed6:	85 f6                	test   esi,esi
c0024ed8:	0f 8e 00 04 00 00    	jle    c00252de <__ieee754_rem_pio2+0x4be>
c0024ede:	dc 25 f8 b2 02 c0    	fsub   QWORD PTR ds:0xc002b2f8
c0024ee4:	b8 03 00 00 00       	mov    eax,0x3
c0024ee9:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024eed:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024ef1:	db 2d 40 b3 02 c0    	fld    TBYTE PTR ds:0xc002b340
c0024ef7:	d9 c1                	fld    st(1)
c0024ef9:	d8 e1                	fsub   st,st(1)
c0024efb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024eff:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f03:	dd 13                	fst    QWORD PTR [ebx]
c0024f05:	de ea                	fsubp  st(2),st
c0024f07:	de e9                	fsubp  st(1),st
c0024f09:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024f0c:	83 c4 74             	add    esp,0x74
c0024f0f:	5b                   	pop    ebx
c0024f10:	5e                   	pop    esi
c0024f11:	c3                   	ret    
c0024f12:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024f19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024f20:	81 fa fa 21 39 41    	cmp    edx,0x413921fa
c0024f26:	0f 8e 84 01 00 00    	jle    c00250b0 <__ieee754_rem_pio2+0x290>
c0024f2c:	81 fa ff ff ef 7f    	cmp    edx,0x7fefffff
c0024f32:	0f 8f d8 02 00 00    	jg     c0025210 <__ieee754_rem_pio2+0x3f0>
c0024f38:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0024f3c:	89 d1                	mov    ecx,edx
c0024f3e:	c1 f9 14             	sar    ecx,0x14
c0024f41:	81 e9 16 04 00 00    	sub    ecx,0x416
c0024f47:	89 c8                	mov    eax,ecx
c0024f49:	c1 e0 14             	shl    eax,0x14
c0024f4c:	29 c2                	sub    edx,eax
c0024f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f52:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024f56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0024f5a:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0024f5f:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024f63:	66 0d 00 0c          	or     ax,0xc00
c0024f67:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0024f6c:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024f70:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0024f74:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024f78:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c0024f7c:	dd 54 24 58          	fst    QWORD PTR [esp+0x58]
c0024f80:	de e9                	fsubp  st(1),st
c0024f82:	d9 05 54 b3 02 c0    	fld    DWORD PTR ds:0xc002b354
c0024f88:	dc c9                	fmul   st(1),st
c0024f8a:	d9 c9                	fxch   st(1)
c0024f8c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024f90:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024f94:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024f98:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0024f9c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024fa0:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c0024fa4:	dd 54 24 60          	fst    QWORD PTR [esp+0x60]
c0024fa8:	de e9                	fsubp  st(1),st
c0024faa:	de c9                	fmulp  st(1),st
c0024fac:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024fb0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024fb4:	dd 54 24 68          	fst    QWORD PTR [esp+0x68]
c0024fb8:	d9 ee                	fldz   
c0024fba:	d9 c9                	fxch   st(1)
c0024fbc:	df e9                	fucomip st,st(1)
c0024fbe:	dd d8                	fstp   st(0)
c0024fc0:	0f 8a 8a 02 00 00    	jp     c0025250 <__ieee754_rem_pio2+0x430>
c0024fc6:	0f 85 84 02 00 00    	jne    c0025250 <__ieee754_rem_pio2+0x430>
c0024fcc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024fd0:	31 c0                	xor    eax,eax
c0024fd2:	85 d2                	test   edx,edx
c0024fd4:	0f 95 c0             	setne  al
c0024fd7:	40                   	inc    eax
c0024fd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024fdc:	8d 44 24 48          	lea    eax,[esp+0x48]
c0024fe0:	ba 01 00 00 00       	mov    edx,0x1
c0024fe5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024fe9:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024fed:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024ff1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0024ff5:	89 04 24             	mov    DWORD PTR [esp],eax
c0024ff8:	e8 f3 03 00 00       	call   c00253f0 <__kernel_rem_pio2>
c0024ffd:	85 f6                	test   esi,esi
c0024fff:	0f 88 5b 02 00 00    	js     c0025260 <__ieee754_rem_pio2+0x440>
c0025005:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025009:	dd 1b                	fstp   QWORD PTR [ebx]
c002500b:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c002500f:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025012:	e9 88 fe ff ff       	jmp    c0024e9f <__ieee754_rem_pio2+0x7f>
c0025017:	89 f6                	mov    esi,esi
c0025019:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025020:	85 f6                	test   esi,esi
c0025022:	0f 8e 50 02 00 00    	jle    c0025278 <__ieee754_rem_pio2+0x458>
c0025028:	dc 25 e8 b2 02 c0    	fsub   QWORD PTR ds:0xc002b2e8
c002502e:	b8 02 00 00 00       	mov    eax,0x2
c0025033:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025037:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002503b:	dd 05 f0 b2 02 c0    	fld    QWORD PTR ds:0xc002b2f0
c0025041:	d9 c1                	fld    st(1)
c0025043:	d8 e1                	fsub   st,st(1)
c0025045:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025049:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002504d:	dd 13                	fst    QWORD PTR [ebx]
c002504f:	de ea                	fsubp  st(2),st
c0025051:	de e9                	fsubp  st(1),st
c0025053:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025056:	83 c4 74             	add    esp,0x74
c0025059:	5b                   	pop    ebx
c002505a:	5e                   	pop    esi
c002505b:	c3                   	ret    
c002505c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025060:	81 fa fb 21 19 40    	cmp    edx,0x401921fb
c0025066:	74 4c                	je     c00250b4 <__ieee754_rem_pio2+0x294>
c0025068:	85 f6                	test   esi,esi
c002506a:	0f 8e a1 02 00 00    	jle    c0025311 <__ieee754_rem_pio2+0x4f1>
c0025070:	dc 25 00 b3 02 c0    	fsub   QWORD PTR ds:0xc002b300
c0025076:	b8 04 00 00 00       	mov    eax,0x4
c002507b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002507f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025083:	dd 05 08 b3 02 c0    	fld    QWORD PTR ds:0xc002b308
c0025089:	d9 c1                	fld    st(1)
c002508b:	d8 e1                	fsub   st,st(1)
c002508d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025091:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025095:	dd 13                	fst    QWORD PTR [ebx]
c0025097:	de ea                	fsubp  st(2),st
c0025099:	de e9                	fsubp  st(1),st
c002509b:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002509e:	83 c4 74             	add    esp,0x74
c00250a1:	5b                   	pop    ebx
c00250a2:	5e                   	pop    esi
c00250a3:	c3                   	ret    
c00250a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00250aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00250b0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00250b4:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00250b8:	d9 c0                	fld    st(0)
c00250ba:	dc 0d 10 b3 02 c0    	fmul   QWORD PTR ds:0xc002b310
c00250c0:	c1 fa 14             	sar    edx,0x14
c00250c3:	89 d6                	mov    esi,edx
c00250c5:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c00250ca:	d9 05 50 b3 02 c0    	fld    DWORD PTR ds:0xc002b350
c00250d0:	dc c1                	fadd   st(1),st
c00250d2:	d9 c9                	fxch   st(1)
c00250d4:	66 0d 00 0c          	or     ax,0xc00
c00250d8:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c00250dd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00250e1:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00250e5:	de e1                	fsubrp st(1),st
c00250e7:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00250eb:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00250ef:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c00250f3:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c00250f7:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00250fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250ff:	d9 c0                	fld    st(0)
c0025101:	dc 0d d8 b2 02 c0    	fmul   QWORD PTR ds:0xc002b2d8
c0025107:	de ea                	fsubp  st(2),st
c0025109:	d9 c9                	fxch   st(1)
c002510b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002510f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025113:	d9 c1                	fld    st(1)
c0025115:	dc 0d e0 b2 02 c0    	fmul   QWORD PTR ds:0xc002b2e0
c002511b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002511f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025123:	d9 c1                	fld    st(1)
c0025125:	d8 e1                	fsub   st,st(1)
c0025127:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c002512b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002512f:	c1 e9 14             	shr    ecx,0x14
c0025132:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025138:	29 ce                	sub    esi,ecx
c002513a:	83 fe 10             	cmp    esi,0x10
c002513d:	7f 21                	jg     c0025160 <__ieee754_rem_pio2+0x340>
c002513f:	dd da                	fstp   st(2)
c0025141:	d9 c9                	fxch   st(1)
c0025143:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025147:	dd 1b                	fstp   QWORD PTR [ebx]
c0025149:	d9 c9                	fxch   st(1)
c002514b:	dc 64 24 20          	fsub   QWORD PTR [esp+0x20]
c002514f:	de e1                	fsubrp st(1),st
c0025151:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025154:	83 c4 74             	add    esp,0x74
c0025157:	5b                   	pop    ebx
c0025158:	5e                   	pop    esi
c0025159:	c3                   	ret    
c002515a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025160:	dd d8                	fstp   st(0)
c0025162:	d9 c1                	fld    st(1)
c0025164:	dc 0d 18 b3 02 c0    	fmul   QWORD PTR ds:0xc002b318
c002516a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002516e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025172:	d9 c1                	fld    st(1)
c0025174:	d8 e1                	fsub   st,st(1)
c0025176:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002517a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002517e:	d9 c0                	fld    st(0)
c0025180:	dc eb                	fsub   st(3),st
c0025182:	d9 cb                	fxch   st(3)
c0025184:	de e2                	fsubrp st(2),st
c0025186:	d9 c3                	fld    st(3)
c0025188:	dc 0d 20 b3 02 c0    	fmul   QWORD PTR ds:0xc002b320
c002518e:	de e2                	fsubrp st(2),st
c0025190:	d9 c9                	fxch   st(1)
c0025192:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025196:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002519a:	d9 c2                	fld    st(2)
c002519c:	d8 e1                	fsub   st,st(1)
c002519e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00251a2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00251a6:	c1 e9 14             	shr    ecx,0x14
c00251a9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00251af:	29 ca                	sub    edx,ecx
c00251b1:	83 fa 31             	cmp    edx,0x31
c00251b4:	7e 7a                	jle    c0025230 <__ieee754_rem_pio2+0x410>
c00251b6:	dd d8                	fstp   st(0)
c00251b8:	dd d8                	fstp   st(0)
c00251ba:	d9 c1                	fld    st(1)
c00251bc:	dc 0d 28 b3 02 c0    	fmul   QWORD PTR ds:0xc002b328
c00251c2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00251c6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00251ca:	d9 c1                	fld    st(1)
c00251cc:	d8 e1                	fsub   st,st(1)
c00251ce:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00251d2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00251d6:	d9 cb                	fxch   st(3)
c00251d8:	dc 0d 30 b3 02 c0    	fmul   QWORD PTR ds:0xc002b330
c00251de:	d9 ca                	fxch   st(2)
c00251e0:	d8 e3                	fsub   st,st(3)
c00251e2:	de e1                	fsubrp st(1),st
c00251e4:	de e9                	fsubp  st(1),st
c00251e6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00251ea:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00251ee:	d9 c1                	fld    st(1)
c00251f0:	d8 e1                	fsub   st,st(1)
c00251f2:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00251f6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00251fa:	dd 1b                	fstp   QWORD PTR [ebx]
c00251fc:	d9 c9                	fxch   st(1)
c00251fe:	e9 48 ff ff ff       	jmp    c002514b <__ieee754_rem_pio2+0x32b>
c0025203:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025209:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025210:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025214:	31 c0                	xor    eax,eax
c0025216:	d8 e0                	fsub   st,st(0)
c0025218:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002521c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025220:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0025223:	dd 1b                	fstp   QWORD PTR [ebx]
c0025225:	e9 75 fc ff ff       	jmp    c0024e9f <__ieee754_rem_pio2+0x7f>
c002522a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025230:	dd da                	fstp   st(2)
c0025232:	dd da                	fstp   st(2)
c0025234:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025238:	dd 1b                	fstp   QWORD PTR [ebx]
c002523a:	d9 c9                	fxch   st(1)
c002523c:	e9 0a ff ff ff       	jmp    c002514b <__ieee754_rem_pio2+0x32b>
c0025241:	eb 0d                	jmp    c0025250 <__ieee754_rem_pio2+0x430>
c0025243:	90                   	nop
c0025244:	90                   	nop
c0025245:	90                   	nop
c0025246:	90                   	nop
c0025247:	90                   	nop
c0025248:	90                   	nop
c0025249:	90                   	nop
c002524a:	90                   	nop
c002524b:	90                   	nop
c002524c:	90                   	nop
c002524d:	90                   	nop
c002524e:	90                   	nop
c002524f:	90                   	nop
c0025250:	b8 03 00 00 00       	mov    eax,0x3
c0025255:	e9 7e fd ff ff       	jmp    c0024fd8 <__ieee754_rem_pio2+0x1b8>
c002525a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025260:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025264:	f7 d8                	neg    eax
c0025266:	d9 e0                	fchs   
c0025268:	dd 1b                	fstp   QWORD PTR [ebx]
c002526a:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c002526e:	d9 e0                	fchs   
c0025270:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025273:	e9 27 fc ff ff       	jmp    c0024e9f <__ieee754_rem_pio2+0x7f>
c0025278:	dc 05 e8 b2 02 c0    	fadd   QWORD PTR ds:0xc002b2e8
c002527e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0025283:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025287:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002528b:	dd 05 f0 b2 02 c0    	fld    QWORD PTR ds:0xc002b2f0
c0025291:	d9 c1                	fld    st(1)
c0025293:	d8 c1                	fadd   st,st(1)
c0025295:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025299:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002529d:	dd 13                	fst    QWORD PTR [ebx]
c002529f:	de ea                	fsubp  st(2),st
c00252a1:	de c1                	faddp  st(1),st
c00252a3:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00252a6:	e9 f4 fb ff ff       	jmp    c0024e9f <__ieee754_rem_pio2+0x7f>
c00252ab:	dc 05 d8 b2 02 c0    	fadd   QWORD PTR ds:0xc002b2d8
c00252b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00252b6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00252ba:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00252be:	dd 05 e0 b2 02 c0    	fld    QWORD PTR ds:0xc002b2e0
c00252c4:	d9 c1                	fld    st(1)
c00252c6:	d8 c1                	fadd   st,st(1)
c00252c8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00252cc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00252d0:	dd 13                	fst    QWORD PTR [ebx]
c00252d2:	de ea                	fsubp  st(2),st
c00252d4:	de c1                	faddp  st(1),st
c00252d6:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00252d9:	e9 c1 fb ff ff       	jmp    c0024e9f <__ieee754_rem_pio2+0x7f>
c00252de:	dc 05 f8 b2 02 c0    	fadd   QWORD PTR ds:0xc002b2f8
c00252e4:	b8 fd ff ff ff       	mov    eax,0xfffffffd
c00252e9:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00252ed:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00252f1:	db 2d 40 b3 02 c0    	fld    TBYTE PTR ds:0xc002b340
c00252f7:	d9 c1                	fld    st(1)
c00252f9:	d8 c1                	fadd   st,st(1)
c00252fb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00252ff:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025303:	dd 13                	fst    QWORD PTR [ebx]
c0025305:	de ea                	fsubp  st(2),st
c0025307:	de c1                	faddp  st(1),st
c0025309:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002530c:	e9 8e fb ff ff       	jmp    c0024e9f <__ieee754_rem_pio2+0x7f>
c0025311:	dc 05 00 b3 02 c0    	fadd   QWORD PTR ds:0xc002b300
c0025317:	b8 fc ff ff ff       	mov    eax,0xfffffffc
c002531c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025320:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025324:	dd 05 08 b3 02 c0    	fld    QWORD PTR ds:0xc002b308
c002532a:	d9 c1                	fld    st(1)
c002532c:	d8 c1                	fadd   st,st(1)
c002532e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025332:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025336:	dd 13                	fst    QWORD PTR [ebx]
c0025338:	de ea                	fsubp  st(2),st
c002533a:	de c1                	faddp  st(1),st
c002533c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002533f:	e9 5b fb ff ff       	jmp    c0024e9f <__ieee754_rem_pio2+0x7f>
c0025344:	66 90                	xchg   ax,ax
c0025346:	66 90                	xchg   ax,ax
c0025348:	66 90                	xchg   ax,ax
c002534a:	66 90                	xchg   ax,ax
c002534c:	66 90                	xchg   ax,ax
c002534e:	66 90                	xchg   ax,ax

c0025350 <__kernel_cos>:
c0025350:	83 ec 0c             	sub    esp,0xc
c0025353:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025357:	d9 c0                	fld    st(0)
c0025359:	d8 c9                	fmul   st,st(1)
c002535b:	dd 1c 24             	fstp   QWORD PTR [esp]
c002535e:	dd 04 24             	fld    QWORD PTR [esp]
c0025361:	d9 c0                	fld    st(0)
c0025363:	d8 c9                	fmul   st,st(1)
c0025365:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025368:	dd 04 24             	fld    QWORD PTR [esp]
c002536b:	d9 c1                	fld    st(1)
c002536d:	d8 0d 34 b0 02 c0    	fmul   DWORD PTR ds:0xc002b034
c0025373:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025376:	dd 04 24             	fld    QWORD PTR [esp]
c0025379:	d9 e8                	fld1   
c002537b:	d9 c0                	fld    st(0)
c002537d:	d8 e2                	fsub   st,st(2)
c002537f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025382:	dd 04 24             	fld    QWORD PTR [esp]
c0025385:	d9 c4                	fld    st(4)
c0025387:	dc 0d 58 b3 02 c0    	fmul   QWORD PTR ds:0xc002b358
c002538d:	dc 05 60 b3 02 c0    	fadd   QWORD PTR ds:0xc002b360
c0025393:	d8 cd                	fmul   st,st(5)
c0025395:	dc 25 68 b3 02 c0    	fsub   QWORD PTR ds:0xc002b368
c002539b:	d9 cc                	fxch   st(4)
c002539d:	d8 c8                	fmul   st,st(0)
c002539f:	de cc                	fmulp  st(4),st
c00253a1:	d9 c4                	fld    st(4)
c00253a3:	dc 0d 70 b3 02 c0    	fmul   QWORD PTR ds:0xc002b370
c00253a9:	dc 25 78 b3 02 c0    	fsub   QWORD PTR ds:0xc002b378
c00253af:	d8 cd                	fmul   st,st(5)
c00253b1:	dc 05 80 b3 02 c0    	fadd   QWORD PTR ds:0xc002b380
c00253b7:	d8 cd                	fmul   st,st(5)
c00253b9:	de c4                	faddp  st(4),st
c00253bb:	d9 cb                	fxch   st(3)
c00253bd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00253c0:	dd 04 24             	fld    QWORD PTR [esp]
c00253c3:	de cc                	fmulp  st(4),st
c00253c5:	d9 cc                	fxch   st(4)
c00253c7:	dc 4c 24 18          	fmul   QWORD PTR [esp+0x18]
c00253cb:	de eb                	fsubp  st(3),st
c00253cd:	d9 cb                	fxch   st(3)
c00253cf:	d8 e1                	fsub   st,st(1)
c00253d1:	de e3                	fsubrp st(3),st
c00253d3:	d9 c9                	fxch   st(1)
c00253d5:	de c2                	faddp  st(2),st
c00253d7:	de c1                	faddp  st(1),st
c00253d9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00253dc:	dd 04 24             	fld    QWORD PTR [esp]
c00253df:	83 c4 0c             	add    esp,0xc
c00253e2:	c3                   	ret    
c00253e3:	66 90                	xchg   ax,ax
c00253e5:	66 90                	xchg   ax,ax
c00253e7:	66 90                	xchg   ax,ax
c00253e9:	66 90                	xchg   ax,ax
c00253eb:	66 90                	xchg   ax,ax
c00253ed:	66 90                	xchg   ax,ax
c00253ef:	90                   	nop

c00253f0 <__kernel_rem_pio2>:
c00253f0:	55                   	push   ebp
c00253f1:	57                   	push   edi
c00253f2:	56                   	push   esi
c00253f3:	53                   	push   ebx
c00253f4:	81 ec 8c 02 00 00    	sub    esp,0x28c
c00253fa:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0025401:	8b 9c 24 a8 02 00 00 	mov    ebx,DWORD PTR [esp+0x2a8]
c0025408:	8b 04 85 68 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4198]
c002540f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0025413:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c002541a:	48                   	dec    eax
c002541b:	83 fb ec             	cmp    ebx,0xffffffec
c002541e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025422:	0f 8c 44 08 00 00    	jl     c0025c6c <__kernel_rem_pio2+0x87c>
c0025428:	8d 4b fd             	lea    ecx,[ebx-0x3]
c002542b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
c0025430:	89 c8                	mov    eax,ecx
c0025432:	f7 ea                	imul   edx
c0025434:	c1 f9 1f             	sar    ecx,0x1f
c0025437:	c1 fa 02             	sar    edx,0x2
c002543a:	29 ca                	sub    edx,ecx
c002543c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0025440:	8d 42 01             	lea    eax,[edx+0x1]
c0025443:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c002544a:	29 d0                	sub    eax,edx
c002544c:	c1 e0 03             	shl    eax,0x3
c002544f:	01 d8                	add    eax,ebx
c0025451:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025455:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0025459:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002545d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025461:	29 c2                	sub    edx,eax
c0025463:	01 c6                	add    esi,eax
c0025465:	78 58                	js     c00254bf <__kernel_rem_pio2+0xcf>
c0025467:	85 d2                	test   edx,edx
c0025469:	0f 89 f4 04 00 00    	jns    c0025963 <__kernel_rem_pio2+0x573>
c002546f:	8d 5c 16 01          	lea    ebx,[esi+edx*1+0x1]
c0025473:	b8 00 00 00 00       	mov    eax,0x0
c0025478:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c002547f:	85 db                	test   ebx,ebx
c0025481:	0f 4f d8             	cmovg  ebx,eax
c0025484:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002548a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025490:	d9 ee                	fldz   
c0025492:	42                   	inc    edx
c0025493:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0025496:	40                   	inc    eax
c0025497:	39 da                	cmp    edx,ebx
c0025499:	7c f5                	jl     c0025490 <__kernel_rem_pio2+0xa0>
c002549b:	39 c6                	cmp    esi,eax
c002549d:	7c 20                	jl     c00254bf <__kernel_rem_pio2+0xcf>
c002549f:	29 c2                	sub    edx,eax
c00254a1:	c1 e2 02             	shl    edx,0x2
c00254a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00254aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00254b0:	db 84 82 a0 b3 02 c0 	fild   DWORD PTR [edx+eax*4-0x3ffd4c60]
c00254b7:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c00254ba:	40                   	inc    eax
c00254bb:	39 c6                	cmp    esi,eax
c00254bd:	7d f1                	jge    c00254b0 <__kernel_rem_pio2+0xc0>
c00254bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00254c3:	85 c0                	test   eax,eax
c00254c5:	78 7c                	js     c0025543 <__kernel_rem_pio2+0x153>
c00254c7:	8d 2c c5 08 00 00 00 	lea    ebp,[eax*8+0x8]
c00254ce:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c00254d5:	31 db                	xor    ebx,ebx
c00254d7:	8b 8c 24 a0 02 00 00 	mov    ecx,DWORD PTR [esp+0x2a0]
c00254de:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c00254e5:	c1 e0 03             	shl    eax,0x3
c00254e8:	8d bc 04 98 00 00 00 	lea    edi,[esp+eax*1+0x98]
c00254ef:	01 c1                	add    ecx,eax
c00254f1:	eb 0d                	jmp    c0025500 <__kernel_rem_pio2+0x110>
c00254f3:	90                   	nop
c00254f4:	90                   	nop
c00254f5:	90                   	nop
c00254f6:	90                   	nop
c00254f7:	90                   	nop
c00254f8:	90                   	nop
c00254f9:	90                   	nop
c00254fa:	90                   	nop
c00254fb:	90                   	nop
c00254fc:	90                   	nop
c00254fd:	90                   	nop
c00254fe:	90                   	nop
c00254ff:	90                   	nop
c0025500:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025504:	85 c0                	test   eax,eax
c0025506:	0f 88 65 04 00 00    	js     c0025971 <__kernel_rem_pio2+0x581>
c002550c:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0025513:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0025516:	d9 ee                	fldz   
c0025518:	90                   	nop
c0025519:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025520:	dd 02                	fld    QWORD PTR [edx]
c0025522:	83 c0 08             	add    eax,0x8
c0025525:	83 ea 08             	sub    edx,0x8
c0025528:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c002552b:	39 c1                	cmp    ecx,eax
c002552d:	de c1                	faddp  st(1),st
c002552f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025533:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025537:	75 e7                	jne    c0025520 <__kernel_rem_pio2+0x130>
c0025539:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c002553c:	83 c3 08             	add    ebx,0x8
c002553f:	39 dd                	cmp    ebp,ebx
c0025541:	75 bd                	jne    c0025500 <__kernel_rem_pio2+0x110>
c0025543:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0025547:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002554b:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
c0025552:	8d 7c 04 4c          	lea    edi,[esp+eax*1+0x4c]
c0025556:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c002555a:	8d 44 04 48          	lea    eax,[esp+eax*1+0x48]
c002555e:	8b bc 24 ac 02 00 00 	mov    edi,DWORD PTR [esp+0x2ac]
c0025565:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0025569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002556d:	c1 e0 02             	shl    eax,0x2
c0025570:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025574:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c002557b:	8d 1c f8             	lea    ebx,[eax+edi*8]
c002557e:	b8 18 00 00 00       	mov    eax,0x18
c0025583:	29 e8                	sub    eax,ebp
c0025585:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0025589:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025590:	85 f6                	test   esi,esi
c0025592:	dd 84 f4 e0 01 00 00 	fld    QWORD PTR [esp+esi*8+0x1e0]
c0025599:	7e 6a                	jle    c0025605 <__kernel_rem_pio2+0x215>
c002559b:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c002559f:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c00255a6:	8d 44 f5 f8          	lea    eax,[ebp+esi*8-0x8]
c00255aa:	8d 54 24 50          	lea    edx,[esp+0x50]
c00255ae:	0f b7 4c 24 46       	movzx  ecx,WORD PTR [esp+0x46]
c00255b3:	66 81 c9 00 0c       	or     cx,0xc00
c00255b8:	66 89 4c 24 44       	mov    WORD PTR [esp+0x44],cx
c00255bd:	eb 03                	jmp    c00255c2 <__kernel_rem_pio2+0x1d2>
c00255bf:	90                   	nop
c00255c0:	89 c8                	mov    eax,ecx
c00255c2:	83 c2 04             	add    edx,0x4
c00255c5:	d9 c0                	fld    st(0)
c00255c7:	d8 0d 7c be 02 c0    	fmul   DWORD PTR ds:0xc002be7c
c00255cd:	8d 48 f8             	lea    ecx,[eax-0x8]
c00255d0:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00255d4:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c00255d8:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00255dc:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c00255e0:	d9 c0                	fld    st(0)
c00255e2:	d8 0d 54 b3 02 c0    	fmul   DWORD PTR ds:0xc002b354
c00255e8:	de ea                	fsubp  st(2),st
c00255ea:	d9 c9                	fxch   st(1)
c00255ec:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00255f0:	db 5a fc             	fistp  DWORD PTR [edx-0x4]
c00255f3:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00255f7:	39 c5                	cmp    ebp,eax
c00255f9:	dc 00                	fadd   QWORD PTR [eax]
c00255fb:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00255ff:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025603:	75 bb                	jne    c00255c0 <__kernel_rem_pio2+0x1d0>
c0025605:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0025609:	dd 1c 24             	fstp   QWORD PTR [esp]
c002560c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0025610:	e8 f7 f7 ff ff       	call   c0024e0c <ldexp>
c0025615:	d9 c0                	fld    st(0)
c0025617:	db 7c 24 10          	fstp   TBYTE PTR [esp+0x10]
c002561b:	d8 0d 80 be 02 c0    	fmul   DWORD PTR ds:0xc002be80
c0025621:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025624:	e8 8b f7 ff ff       	call   c0024db4 <floor>
c0025629:	d9 05 84 be 02 c0    	fld    DWORD PTR ds:0xc002be84
c002562f:	de c9                	fmulp  st(1),st
c0025631:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0025635:	db 6c 24 10          	fld    TBYTE PTR [esp+0x10]
c0025639:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c002563e:	de e1                	fsubrp st(1),st
c0025640:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025644:	66 0d 00 0c          	or     ax,0xc00
c0025648:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c002564d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025651:	85 ff                	test   edi,edi
c0025653:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025657:	db 54 24 40          	fist   DWORD PTR [esp+0x40]
c002565b:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002565f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0025663:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0025667:	db 44 24 24          	fild   DWORD PTR [esp+0x24]
c002566b:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c002566f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0025673:	de e9                	fsubp  st(1),st
c0025675:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025679:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002567d:	0f 8e 2d 01 00 00    	jle    c00257b0 <__kernel_rem_pio2+0x3c0>
c0025683:	8d 7e ff             	lea    edi,[esi-0x1]
c0025686:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c002568b:	8b 44 bc 50          	mov    eax,DWORD PTR [esp+edi*4+0x50]
c002568f:	89 c2                	mov    edx,eax
c0025691:	d3 fa                	sar    edx,cl
c0025693:	01 d5                	add    ebp,edx
c0025695:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0025699:	d3 e2                	shl    edx,cl
c002569b:	b9 17 00 00 00       	mov    ecx,0x17
c00256a0:	29 d0                	sub    eax,edx
c00256a2:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c00256a6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00256aa:	29 f9                	sub    ecx,edi
c00256ac:	d3 f8                	sar    eax,cl
c00256ae:	89 c5                	mov    ebp,eax
c00256b0:	85 ed                	test   ebp,ebp
c00256b2:	0f 8f 0e 01 00 00    	jg     c00257c6 <__kernel_rem_pio2+0x3d6>
c00256b8:	d9 ee                	fldz   
c00256ba:	d9 c9                	fxch   st(1)
c00256bc:	db e9                	fucomi st,st(1)
c00256be:	dd d9                	fstp   st(1)
c00256c0:	0f 8a a2 01 00 00    	jp     c0025868 <__kernel_rem_pio2+0x478>
c00256c6:	0f 85 9c 01 00 00    	jne    c0025868 <__kernel_rem_pio2+0x478>
c00256cc:	dd d8                	fstp   st(0)
c00256ce:	8d 7e ff             	lea    edi,[esi-0x1]
c00256d1:	39 7c 24 28          	cmp    DWORD PTR [esp+0x28],edi
c00256d5:	7f 2a                	jg     c0025701 <__kernel_rem_pio2+0x311>
c00256d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00256db:	8d 44 b4 4c          	lea    eax,[esp+esi*4+0x4c]
c00256df:	31 d2                	xor    edx,edx
c00256e1:	eb 0d                	jmp    c00256f0 <__kernel_rem_pio2+0x300>
c00256e3:	90                   	nop
c00256e4:	90                   	nop
c00256e5:	90                   	nop
c00256e6:	90                   	nop
c00256e7:	90                   	nop
c00256e8:	90                   	nop
c00256e9:	90                   	nop
c00256ea:	90                   	nop
c00256eb:	90                   	nop
c00256ec:	90                   	nop
c00256ed:	90                   	nop
c00256ee:	90                   	nop
c00256ef:	90                   	nop
c00256f0:	0b 10                	or     edx,DWORD PTR [eax]
c00256f2:	83 e8 04             	sub    eax,0x4
c00256f5:	39 c1                	cmp    ecx,eax
c00256f7:	75 f7                	jne    c00256f0 <__kernel_rem_pio2+0x300>
c00256f9:	85 d2                	test   edx,edx
c00256fb:	0f 85 85 02 00 00    	jne    c0025986 <__kernel_rem_pio2+0x596>
c0025701:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025705:	8b 4c 84 4c          	mov    ecx,DWORD PTR [esp+eax*4+0x4c]
c0025709:	85 c9                	test   ecx,ecx
c002570b:	0f 85 48 02 00 00    	jne    c0025959 <__kernel_rem_pio2+0x569>
c0025711:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0025715:	bf 01 00 00 00       	mov    edi,0x1
c002571a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025720:	83 e8 04             	sub    eax,0x4
c0025723:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0025726:	47                   	inc    edi
c0025727:	85 d2                	test   edx,edx
c0025729:	74 f5                	je     c0025720 <__kernel_rem_pio2+0x330>
c002572b:	8d 4e 01             	lea    ecx,[esi+0x1]
c002572e:	01 f7                	add    edi,esi
c0025730:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0025737:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c002573e:	01 c6                	add    esi,eax
c0025740:	8d b4 f4 a0 00 00 00 	lea    esi,[esp+esi*8+0xa0]
c0025747:	89 f6                	mov    esi,esi
c0025749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025754:	db 84 88 a0 b3 02 c0 	fild   DWORD PTR [eax+ecx*4-0x3ffd4c60]
c002575b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002575f:	85 c0                	test   eax,eax
c0025761:	dd 1e                	fstp   QWORD PTR [esi]
c0025763:	78 3b                	js     c00257a0 <__kernel_rem_pio2+0x3b0>
c0025765:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c002576c:	d9 ee                	fldz   
c002576e:	89 f2                	mov    edx,esi
c0025770:	dd 02                	fld    QWORD PTR [edx]
c0025772:	83 c0 08             	add    eax,0x8
c0025775:	83 ea 08             	sub    edx,0x8
c0025778:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c002577b:	39 c3                	cmp    ebx,eax
c002577d:	de c1                	faddp  st(1),st
c002577f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025783:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025787:	75 e7                	jne    c0025770 <__kernel_rem_pio2+0x380>
c0025789:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c002578d:	41                   	inc    ecx
c002578e:	83 c6 08             	add    esi,0x8
c0025791:	39 cf                	cmp    edi,ecx
c0025793:	7d bb                	jge    c0025750 <__kernel_rem_pio2+0x360>
c0025795:	89 fe                	mov    esi,edi
c0025797:	e9 f4 fd ff ff       	jmp    c0025590 <__kernel_rem_pio2+0x1a0>
c002579c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00257a0:	d9 ee                	fldz   
c00257a2:	83 c6 08             	add    esi,0x8
c00257a5:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c00257a9:	41                   	inc    ecx
c00257aa:	39 cf                	cmp    edi,ecx
c00257ac:	7d a2                	jge    c0025750 <__kernel_rem_pio2+0x360>
c00257ae:	eb e5                	jmp    c0025795 <__kernel_rem_pio2+0x3a5>
c00257b0:	0f 85 8a 01 00 00    	jne    c0025940 <__kernel_rem_pio2+0x550>
c00257b6:	8b 6c b4 4c          	mov    ebp,DWORD PTR [esp+esi*4+0x4c]
c00257ba:	c1 fd 17             	sar    ebp,0x17
c00257bd:	85 ed                	test   ebp,ebp
c00257bf:	90                   	nop
c00257c0:	0f 8e f2 fe ff ff    	jle    c00256b8 <__kernel_rem_pio2+0x2c8>
c00257c6:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00257ca:	85 f6                	test   esi,esi
c00257cc:	0f 8e d3 04 00 00    	jle    c0025ca5 <__kernel_rem_pio2+0x8b5>
c00257d2:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00257d6:	85 d2                	test   edx,edx
c00257d8:	0f 85 12 01 00 00    	jne    c00258f0 <__kernel_rem_pio2+0x500>
c00257de:	83 fe 01             	cmp    esi,0x1
c00257e1:	b9 01 00 00 00       	mov    ecx,0x1
c00257e6:	74 15                	je     c00257fd <__kernel_rem_pio2+0x40d>
c00257e8:	8b 54 8c 50          	mov    edx,DWORD PTR [esp+ecx*4+0x50]
c00257ec:	8d 41 01             	lea    eax,[ecx+0x1]
c00257ef:	85 d2                	test   edx,edx
c00257f1:	0f 85 00 01 00 00    	jne    c00258f7 <__kernel_rem_pio2+0x507>
c00257f7:	39 c6                	cmp    esi,eax
c00257f9:	89 c1                	mov    ecx,eax
c00257fb:	75 eb                	jne    c00257e8 <__kernel_rem_pio2+0x3f8>
c00257fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025801:	85 c0                	test   eax,eax
c0025803:	7e 16                	jle    c002581b <__kernel_rem_pio2+0x42b>
c0025805:	83 f8 01             	cmp    eax,0x1
c0025808:	0f 84 51 04 00 00    	je     c0025c5f <__kernel_rem_pio2+0x86f>
c002580e:	83 f8 02             	cmp    eax,0x2
c0025811:	75 08                	jne    c002581b <__kernel_rem_pio2+0x42b>
c0025813:	81 64 b4 4c ff ff 3f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x3fffff
c002581b:	83 fd 02             	cmp    ebp,0x2
c002581e:	0f 85 94 fe ff ff    	jne    c00256b8 <__kernel_rem_pio2+0x2c8>
c0025824:	d9 e8                	fld1   
c0025826:	85 d2                	test   edx,edx
c0025828:	de e1                	fsubrp st(1),st
c002582a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002582e:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025832:	0f 84 80 fe ff ff    	je     c00256b8 <__kernel_rem_pio2+0x2c8>
c0025838:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002583c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025840:	d9 e8                	fld1   
c0025842:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025845:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025849:	e8 be f5 ff ff       	call   c0024e0c <ldexp>
c002584e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025852:	de e1                	fsubrp st(1),st
c0025854:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025858:	d9 ee                	fldz   
c002585a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002585e:	db e9                	fucomi st,st(1)
c0025860:	dd d9                	fstp   st(1)
c0025862:	0f 8b 5e fe ff ff    	jnp    c00256c6 <__kernel_rem_pio2+0x2d6>
c0025868:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002586c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002586f:	89 d8                	mov    eax,ebx
c0025871:	f7 d8                	neg    eax
c0025873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025877:	e8 90 f5 ff ff       	call   c0024e0c <ldexp>
c002587c:	d9 05 54 b3 02 c0    	fld    DWORD PTR ds:0xc002b354
c0025882:	d9 c9                	fxch   st(1)
c0025884:	db f1                	fcomi  st,st(1)
c0025886:	dd d9                	fstp   st(1)
c0025888:	0f 82 94 04 00 00    	jb     c0025d22 <__kernel_rem_pio2+0x932>
c002588e:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0025892:	83 c3 18             	add    ebx,0x18
c0025895:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0025899:	d9 c0                	fld    st(0)
c002589b:	d8 0d 7c be 02 c0    	fmul   DWORD PTR ds:0xc002be7c
c00258a1:	8d 7e 01             	lea    edi,[esi+0x1]
c00258a4:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c00258a9:	66 0d 00 0c          	or     ax,0xc00
c00258ad:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c00258b2:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00258b6:	db 5c 24 40          	fistp  DWORD PTR [esp+0x40]
c00258ba:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00258be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00258c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00258c6:	db 44 24 1c          	fild   DWORD PTR [esp+0x1c]
c00258ca:	d8 0d 54 b3 02 c0    	fmul   DWORD PTR ds:0xc002b354
c00258d0:	de e9                	fsubp  st(1),st
c00258d2:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00258d6:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c00258da:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00258de:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c00258e2:	89 d8                	mov    eax,ebx
c00258e4:	e9 be 00 00 00       	jmp    c00259a7 <__kernel_rem_pio2+0x5b7>
c00258e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00258f0:	b8 01 00 00 00       	mov    eax,0x1
c00258f5:	31 c9                	xor    ecx,ecx
c00258f7:	bf 00 00 00 01       	mov    edi,0x1000000
c00258fc:	29 d7                	sub    edi,edx
c00258fe:	39 c6                	cmp    esi,eax
c0025900:	89 7c 8c 50          	mov    DWORD PTR [esp+ecx*4+0x50],edi
c0025904:	7e 30                	jle    c0025936 <__kernel_rem_pio2+0x546>
c0025906:	8b 4c 84 50          	mov    ecx,DWORD PTR [esp+eax*4+0x50]
c002590a:	ba ff ff ff 00       	mov    edx,0xffffff
c002590f:	29 ca                	sub    edx,ecx
c0025911:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0025915:	40                   	inc    eax
c0025916:	39 c6                	cmp    esi,eax
c0025918:	7e 1c                	jle    c0025936 <__kernel_rem_pio2+0x546>
c002591a:	8d 44 84 50          	lea    eax,[esp+eax*4+0x50]
c002591e:	b9 ff ff ff 00       	mov    ecx,0xffffff
c0025923:	8d 7c b4 50          	lea    edi,[esp+esi*4+0x50]
c0025927:	89 ca                	mov    edx,ecx
c0025929:	83 c0 04             	add    eax,0x4
c002592c:	2b 50 fc             	sub    edx,DWORD PTR [eax-0x4]
c002592f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0025932:	39 c7                	cmp    edi,eax
c0025934:	75 f1                	jne    c0025927 <__kernel_rem_pio2+0x537>
c0025936:	ba 01 00 00 00       	mov    edx,0x1
c002593b:	e9 bd fe ff ff       	jmp    c00257fd <__kernel_rem_pio2+0x40d>
c0025940:	d9 05 34 b0 02 c0    	fld    DWORD PTR ds:0xc002b034
c0025946:	d9 c9                	fxch   st(1)
c0025948:	db f1                	fcomi  st,st(1)
c002594a:	dd d9                	fstp   st(1)
c002594c:	0f 83 2a 03 00 00    	jae    c0025c7c <__kernel_rem_pio2+0x88c>
c0025952:	31 ed                	xor    ebp,ebp
c0025954:	e9 5f fd ff ff       	jmp    c00256b8 <__kernel_rem_pio2+0x2c8>
c0025959:	8d 4e 01             	lea    ecx,[esi+0x1]
c002595c:	89 cf                	mov    edi,ecx
c002595e:	e9 cd fd ff ff       	jmp    c0025730 <__kernel_rem_pio2+0x340>
c0025963:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c002596a:	31 c0                	xor    eax,eax
c002596c:	e9 2e fb ff ff       	jmp    c002549f <__kernel_rem_pio2+0xaf>
c0025971:	d9 ee                	fldz   
c0025973:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c0025976:	83 c3 08             	add    ebx,0x8
c0025979:	39 dd                	cmp    ebp,ebx
c002597b:	0f 85 7f fb ff ff    	jne    c0025500 <__kernel_rem_pio2+0x110>
c0025981:	e9 bd fb ff ff       	jmp    c0025543 <__kernel_rem_pio2+0x153>
c0025986:	8b 5c bc 50          	mov    ebx,DWORD PTR [esp+edi*4+0x50]
c002598a:	83 6c 24 24 18       	sub    DWORD PTR [esp+0x24],0x18
c002598f:	85 db                	test   ebx,ebx
c0025991:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025995:	75 10                	jne    c00259a7 <__kernel_rem_pio2+0x5b7>
c0025997:	4f                   	dec    edi
c0025998:	83 e8 18             	sub    eax,0x18
c002599b:	8b 4c bc 50          	mov    ecx,DWORD PTR [esp+edi*4+0x50]
c002599f:	85 c9                	test   ecx,ecx
c00259a1:	74 f4                	je     c0025997 <__kernel_rem_pio2+0x5a7>
c00259a3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00259a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00259ab:	d9 e8                	fld1   
c00259ad:	dd 1c 24             	fstp   QWORD PTR [esp]
c00259b0:	e8 57 f4 ff ff       	call   c0024e0c <ldexp>
c00259b5:	85 ff                	test   edi,edi
c00259b7:	0f 88 d2 03 00 00    	js     c0025d8f <__kernel_rem_pio2+0x99f>
c00259bd:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c00259c4:	89 f8                	mov    eax,edi
c00259c6:	8d 76 00             	lea    esi,[esi+0x0]
c00259c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00259d0:	db 44 84 50          	fild   DWORD PTR [esp+eax*4+0x50]
c00259d4:	d8 c9                	fmul   st,st(1)
c00259d6:	dd 1c c6             	fstp   QWORD PTR [esi+eax*8]
c00259d9:	48                   	dec    eax
c00259da:	d8 0d 7c be 02 c0    	fmul   DWORD PTR ds:0xc002be7c
c00259e0:	83 f8 ff             	cmp    eax,0xffffffff
c00259e3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00259e7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00259eb:	75 e3                	jne    c00259d0 <__kernel_rem_pio2+0x5e0>
c00259ed:	dd d8                	fstp   st(0)
c00259ef:	8d 04 fd 00 00 00 00 	lea    eax,[edi*8+0x0]
c00259f6:	31 d2                	xor    edx,edx
c00259f8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00259fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025a00:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c0025a07:	01 f0                	add    eax,esi
c0025a09:	89 6c 24 20          	mov    DWORD PTR [esp+0x20],ebp
c0025a0d:	eb 03                	jmp    c0025a12 <__kernel_rem_pio2+0x622>
c0025a0f:	90                   	nop
c0025a10:	89 e8                	mov    eax,ebp
c0025a12:	85 db                	test   ebx,ebx
c0025a14:	0f 88 84 02 00 00    	js     c0025c9e <__kernel_rem_pio2+0x8ae>
c0025a1a:	d9 05 9c be 02 c0    	fld    DWORD PTR ds:0xc002be9c
c0025a20:	dc 08                	fmul   QWORD PTR [eax]
c0025a22:	d8 05 78 be 02 c0    	fadd   DWORD PTR ds:0xc002be78
c0025a28:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025a2c:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025a30:	0f 84 d9 00 00 00    	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025a36:	85 d2                	test   edx,edx
c0025a38:	0f 84 d1 00 00 00    	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025a3e:	d9 05 88 be 02 c0    	fld    DWORD PTR ds:0xc002be88
c0025a44:	83 fb 01             	cmp    ebx,0x1
c0025a47:	dc 48 08             	fmul   QWORD PTR [eax+0x8]
c0025a4a:	de c1                	faddp  st(1),st
c0025a4c:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025a50:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025a54:	0f 84 b5 00 00 00    	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025a5a:	83 fa 01             	cmp    edx,0x1
c0025a5d:	0f 84 ac 00 00 00    	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025a63:	d9 05 8c be 02 c0    	fld    DWORD PTR ds:0xc002be8c
c0025a69:	83 fb 02             	cmp    ebx,0x2
c0025a6c:	dc 48 10             	fmul   QWORD PTR [eax+0x10]
c0025a6f:	de c1                	faddp  st(1),st
c0025a71:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025a75:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025a79:	0f 84 90 00 00 00    	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025a7f:	83 fa 02             	cmp    edx,0x2
c0025a82:	0f 84 87 00 00 00    	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025a88:	d9 05 90 be 02 c0    	fld    DWORD PTR ds:0xc002be90
c0025a8e:	83 fb 03             	cmp    ebx,0x3
c0025a91:	dc 48 18             	fmul   QWORD PTR [eax+0x18]
c0025a94:	de c1                	faddp  st(1),st
c0025a96:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025a9a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025a9e:	74 6f                	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025aa0:	83 fa 03             	cmp    edx,0x3
c0025aa3:	74 6a                	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025aa5:	d9 05 94 be 02 c0    	fld    DWORD PTR ds:0xc002be94
c0025aab:	83 fb 04             	cmp    ebx,0x4
c0025aae:	dc 48 20             	fmul   QWORD PTR [eax+0x20]
c0025ab1:	de c1                	faddp  st(1),st
c0025ab3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025ab7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025abb:	74 52                	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025abd:	83 fa 04             	cmp    edx,0x4
c0025ac0:	74 4d                	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025ac2:	d9 05 98 be 02 c0    	fld    DWORD PTR ds:0xc002be98
c0025ac8:	83 fb 05             	cmp    ebx,0x5
c0025acb:	dc 48 28             	fmul   QWORD PTR [eax+0x28]
c0025ace:	de c1                	faddp  st(1),st
c0025ad0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025ad4:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025ad8:	74 35                	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025ada:	83 fa 05             	cmp    edx,0x5
c0025add:	74 30                	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025adf:	dd 05 a0 be 02 c0    	fld    QWORD PTR ds:0xc002bea0
c0025ae5:	83 fb 06             	cmp    ebx,0x6
c0025ae8:	dc 48 30             	fmul   QWORD PTR [eax+0x30]
c0025aeb:	de c1                	faddp  st(1),st
c0025aed:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025af1:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025af5:	74 18                	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025af7:	83 fa 06             	cmp    edx,0x6
c0025afa:	74 13                	je     c0025b0f <__kernel_rem_pio2+0x71f>
c0025afc:	dd 05 a8 be 02 c0    	fld    QWORD PTR ds:0xc002bea8
c0025b02:	dc 48 38             	fmul   QWORD PTR [eax+0x38]
c0025b05:	de c1                	faddp  st(1),st
c0025b07:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025b0b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025b0f:	dd 1c d1             	fstp   QWORD PTR [ecx+edx*8]
c0025b12:	42                   	inc    edx
c0025b13:	8d 68 f8             	lea    ebp,[eax-0x8]
c0025b16:	39 c6                	cmp    esi,eax
c0025b18:	0f 85 f2 fe ff ff    	jne    c0025a10 <__kernel_rem_pio2+0x620>
c0025b1e:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0025b26:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0025b2a:	7f 4f                	jg     c0025b7b <__kernel_rem_pio2+0x78b>
c0025b2c:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0025b33:	85 c0                	test   eax,eax
c0025b35:	0f 8f 71 01 00 00    	jg     c0025cac <__kernel_rem_pio2+0x8bc>
c0025b3b:	75 2c                	jne    c0025b69 <__kernel_rem_pio2+0x779>
c0025b3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b41:	d9 ee                	fldz   
c0025b43:	01 c8                	add    eax,ecx
c0025b45:	eb 02                	jmp    c0025b49 <__kernel_rem_pio2+0x759>
c0025b47:	89 d0                	mov    eax,edx
c0025b49:	39 c8                	cmp    eax,ecx
c0025b4b:	dc 00                	fadd   QWORD PTR [eax]
c0025b4d:	8d 50 f8             	lea    edx,[eax-0x8]
c0025b50:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025b54:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025b58:	75 ed                	jne    c0025b47 <__kernel_rem_pio2+0x757>
c0025b5a:	85 ed                	test   ebp,ebp
c0025b5c:	74 02                	je     c0025b60 <__kernel_rem_pio2+0x770>
c0025b5e:	d9 e0                	fchs   
c0025b60:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025b67:	dd 18                	fstp   QWORD PTR [eax]
c0025b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b6d:	81 c4 8c 02 00 00    	add    esp,0x28c
c0025b73:	5b                   	pop    ebx
c0025b74:	5e                   	pop    esi
c0025b75:	83 e0 07             	and    eax,0x7
c0025b78:	5f                   	pop    edi
c0025b79:	5d                   	pop    ebp
c0025b7a:	c3                   	ret    
c0025b7b:	83 bc 24 b0 02 00 00 03 	cmp    DWORD PTR [esp+0x2b0],0x3
c0025b83:	75 e4                	jne    c0025b69 <__kernel_rem_pio2+0x779>
c0025b85:	85 ff                	test   edi,edi
c0025b87:	0f 8e 38 02 00 00    	jle    c0025dc5 <__kernel_rem_pio2+0x9d5>
c0025b8d:	8d 14 fd 00 00 00 00 	lea    edx,[edi*8+0x0]
c0025b94:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c0025b9b:	dd 84 14 40 01 00 00 	fld    QWORD PTR [esp+edx*1+0x140]
c0025ba2:	8d 44 11 f8          	lea    eax,[ecx+edx*1-0x8]
c0025ba6:	eb 02                	jmp    c0025baa <__kernel_rem_pio2+0x7ba>
c0025ba8:	89 d0                	mov    eax,edx
c0025baa:	dd 00                	fld    QWORD PTR [eax]
c0025bac:	8d 50 f8             	lea    edx,[eax-0x8]
c0025baf:	39 c1                	cmp    ecx,eax
c0025bb1:	d9 c1                	fld    st(1)
c0025bb3:	d9 c1                	fld    st(1)
c0025bb5:	de c3                	faddp  st(3),st
c0025bb7:	d9 ca                	fxch   st(2)
c0025bb9:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025bbd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025bc1:	d9 c0                	fld    st(0)
c0025bc3:	dc ea                	fsub   st(2),st
c0025bc5:	d9 ca                	fxch   st(2)
c0025bc7:	de c3                	faddp  st(3),st
c0025bc9:	d9 ca                	fxch   st(2)
c0025bcb:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025bce:	d9 c9                	fxch   st(1)
c0025bd0:	dd 18                	fstp   QWORD PTR [eax]
c0025bd2:	75 d4                	jne    c0025ba8 <__kernel_rem_pio2+0x7b8>
c0025bd4:	dd d8                	fstp   st(0)
c0025bd6:	83 ff 01             	cmp    edi,0x1
c0025bd9:	0f 8e e6 01 00 00    	jle    c0025dc5 <__kernel_rem_pio2+0x9d5>
c0025bdf:	c1 e7 03             	shl    edi,0x3
c0025be2:	8d 44 39 f8          	lea    eax,[ecx+edi*1-0x8]
c0025be6:	dd 84 3c 40 01 00 00 	fld    QWORD PTR [esp+edi*1+0x140]
c0025bed:	eb 02                	jmp    c0025bf1 <__kernel_rem_pio2+0x801>
c0025bef:	89 d0                	mov    eax,edx
c0025bf1:	dd 00                	fld    QWORD PTR [eax]
c0025bf3:	8d 50 f8             	lea    edx,[eax-0x8]
c0025bf6:	d9 c1                	fld    st(1)
c0025bf8:	39 d1                	cmp    ecx,edx
c0025bfa:	d9 c1                	fld    st(1)
c0025bfc:	de c3                	faddp  st(3),st
c0025bfe:	d9 ca                	fxch   st(2)
c0025c00:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025c04:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025c08:	d9 c0                	fld    st(0)
c0025c0a:	dc ea                	fsub   st(2),st
c0025c0c:	d9 ca                	fxch   st(2)
c0025c0e:	de c3                	faddp  st(3),st
c0025c10:	d9 ca                	fxch   st(2)
c0025c12:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025c15:	d9 c9                	fxch   st(1)
c0025c17:	dd 18                	fstp   QWORD PTR [eax]
c0025c19:	75 d4                	jne    c0025bef <__kernel_rem_pio2+0x7ff>
c0025c1b:	dd d8                	fstp   st(0)
c0025c1d:	d9 ee                	fldz   
c0025c1f:	01 f9                	add    ecx,edi
c0025c21:	83 e9 08             	sub    ecx,0x8
c0025c24:	dc 41 08             	fadd   QWORD PTR [ecx+0x8]
c0025c27:	39 c8                	cmp    eax,ecx
c0025c29:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025c2d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025c31:	75 ee                	jne    c0025c21 <__kernel_rem_pio2+0x831>
c0025c33:	dd 84 24 40 01 00 00 	fld    QWORD PTR [esp+0x140]
c0025c3a:	85 ed                	test   ebp,ebp
c0025c3c:	dd 84 24 48 01 00 00 	fld    QWORD PTR [esp+0x148]
c0025c43:	0f 85 02 01 00 00    	jne    c0025d4b <__kernel_rem_pio2+0x95b>
c0025c49:	d9 c9                	fxch   st(1)
c0025c4b:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025c52:	dd 18                	fstp   QWORD PTR [eax]
c0025c54:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025c57:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0025c5a:	e9 0a ff ff ff       	jmp    c0025b69 <__kernel_rem_pio2+0x779>
c0025c5f:	81 64 b4 4c ff ff 7f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x7fffff
c0025c67:	e9 af fb ff ff       	jmp    c002581b <__kernel_rem_pio2+0x42b>
c0025c6c:	31 d2                	xor    edx,edx
c0025c6e:	b8 e8 ff ff ff       	mov    eax,0xffffffe8
c0025c73:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0025c77:	e9 d3 f7 ff ff       	jmp    c002544f <__kernel_rem_pio2+0x5f>
c0025c7c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0025c80:	85 f6                	test   esi,esi
c0025c82:	bd 02 00 00 00       	mov    ebp,0x2
c0025c87:	0f 8f 45 fb ff ff    	jg     c00257d2 <__kernel_rem_pio2+0x3e2>
c0025c8d:	d9 e8                	fld1   
c0025c8f:	de e1                	fsubrp st(1),st
c0025c91:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025c95:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025c99:	e9 1a fa ff ff       	jmp    c00256b8 <__kernel_rem_pio2+0x2c8>
c0025c9e:	d9 ee                	fldz   
c0025ca0:	e9 6a fe ff ff       	jmp    c0025b0f <__kernel_rem_pio2+0x71f>
c0025ca5:	31 d2                	xor    edx,edx
c0025ca7:	e9 51 fb ff ff       	jmp    c00257fd <__kernel_rem_pio2+0x40d>
c0025cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025cb0:	d9 ee                	fldz   
c0025cb2:	01 c8                	add    eax,ecx
c0025cb4:	eb 02                	jmp    c0025cb8 <__kernel_rem_pio2+0x8c8>
c0025cb6:	89 d0                	mov    eax,edx
c0025cb8:	39 c8                	cmp    eax,ecx
c0025cba:	dc 00                	fadd   QWORD PTR [eax]
c0025cbc:	8d 50 f8             	lea    edx,[eax-0x8]
c0025cbf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025cc3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025cc7:	75 ed                	jne    c0025cb6 <__kernel_rem_pio2+0x8c6>
c0025cc9:	d9 c0                	fld    st(0)
c0025ccb:	85 ed                	test   ebp,ebp
c0025ccd:	0f 85 94 00 00 00    	jne    c0025d67 <__kernel_rem_pio2+0x977>
c0025cd3:	d9 c9                	fxch   st(1)
c0025cd5:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025cdc:	85 ff                	test   edi,edi
c0025cde:	dd 18                	fstp   QWORD PTR [eax]
c0025ce0:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c0025ce7:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025ceb:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025cef:	7e 22                	jle    c0025d13 <__kernel_rem_pio2+0x923>
c0025cf1:	8d 84 24 48 01 00 00 	lea    eax,[esp+0x148]
c0025cf8:	8d 14 f8             	lea    edx,[eax+edi*8]
c0025cfb:	83 c0 08             	add    eax,0x8
c0025cfe:	dc 40 f8             	fadd   QWORD PTR [eax-0x8]
c0025d01:	39 d0                	cmp    eax,edx
c0025d03:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025d07:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025d0b:	75 ee                	jne    c0025cfb <__kernel_rem_pio2+0x90b>
c0025d0d:	85 ed                	test   ebp,ebp
c0025d0f:	74 02                	je     c0025d13 <__kernel_rem_pio2+0x923>
c0025d11:	d9 e0                	fchs   
c0025d13:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025d1a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025d1d:	e9 47 fe ff ff       	jmp    c0025b69 <__kernel_rem_pio2+0x779>
c0025d22:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0025d26:	89 f7                	mov    edi,esi
c0025d28:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c0025d2d:	66 0d 00 0c          	or     ax,0xc00
c0025d31:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0025d36:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025d3a:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025d3e:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c0025d42:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0025d46:	e9 5c fc ff ff       	jmp    c00259a7 <__kernel_rem_pio2+0x5b7>
c0025d4b:	d9 c9                	fxch   st(1)
c0025d4d:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025d54:	d9 e0                	fchs   
c0025d56:	dd 18                	fstp   QWORD PTR [eax]
c0025d58:	d9 e0                	fchs   
c0025d5a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025d5d:	d9 e0                	fchs   
c0025d5f:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0025d62:	e9 02 fe ff ff       	jmp    c0025b69 <__kernel_rem_pio2+0x779>
c0025d67:	d9 c9                	fxch   st(1)
c0025d69:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025d70:	d9 e0                	fchs   
c0025d72:	85 ff                	test   edi,edi
c0025d74:	dd 18                	fstp   QWORD PTR [eax]
c0025d76:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c0025d7d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025d81:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025d85:	0f 8f 66 ff ff ff    	jg     c0025cf1 <__kernel_rem_pio2+0x901>
c0025d8b:	d9 e0                	fchs   
c0025d8d:	eb 84                	jmp    c0025d13 <__kernel_rem_pio2+0x923>
c0025d8f:	dd d8                	fstp   st(0)
c0025d91:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0025d99:	0f 8f dc fd ff ff    	jg     c0025b7b <__kernel_rem_pio2+0x78b>
c0025d9f:	8b 94 24 b0 02 00 00 	mov    edx,DWORD PTR [esp+0x2b0]
c0025da6:	85 d2                	test   edx,edx
c0025da8:	7f 0d                	jg     c0025db7 <__kernel_rem_pio2+0x9c7>
c0025daa:	0f 85 b9 fd ff ff    	jne    c0025b69 <__kernel_rem_pio2+0x779>
c0025db0:	d9 ee                	fldz   
c0025db2:	e9 a3 fd ff ff       	jmp    c0025b5a <__kernel_rem_pio2+0x76a>
c0025db7:	d9 ee                	fldz   
c0025db9:	d9 ee                	fldz   
c0025dbb:	90                   	nop
c0025dbc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025dc0:	e9 06 ff ff ff       	jmp    c0025ccb <__kernel_rem_pio2+0x8db>
c0025dc5:	d9 ee                	fldz   
c0025dc7:	e9 67 fe ff ff       	jmp    c0025c33 <__kernel_rem_pio2+0x843>
c0025dcc:	66 90                	xchg   ax,ax
c0025dce:	66 90                	xchg   ax,ax

c0025dd0 <__kernel_sin>:
c0025dd0:	83 ec 0c             	sub    esp,0xc
c0025dd3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025dd7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025ddb:	d9 c0                	fld    st(0)
c0025ddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025de1:	d8 c9                	fmul   st,st(1)
c0025de3:	85 c0                	test   eax,eax
c0025de5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025de8:	dd 04 24             	fld    QWORD PTR [esp]
c0025deb:	d9 c1                	fld    st(1)
c0025ded:	d8 c9                	fmul   st,st(1)
c0025def:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025df2:	dd 04 24             	fld    QWORD PTR [esp]
c0025df5:	d9 c1                	fld    st(1)
c0025df7:	d8 ca                	fmul   st,st(2)
c0025df9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025dfc:	dd 04 24             	fld    QWORD PTR [esp]
c0025dff:	d8 ca                	fmul   st,st(2)
c0025e01:	d9 c2                	fld    st(2)
c0025e03:	dc 0d b0 be 02 c0    	fmul   QWORD PTR ds:0xc002beb0
c0025e09:	dc 25 b8 be 02 c0    	fsub   QWORD PTR ds:0xc002beb8
c0025e0f:	de c9                	fmulp  st(1),st
c0025e11:	d9 c2                	fld    st(2)
c0025e13:	dc 0d c0 be 02 c0    	fmul   QWORD PTR ds:0xc002bec0
c0025e19:	dc 25 c8 be 02 c0    	fsub   QWORD PTR ds:0xc002bec8
c0025e1f:	d8 cb                	fmul   st,st(3)
c0025e21:	dc 05 d0 be 02 c0    	fadd   QWORD PTR ds:0xc002bed0
c0025e27:	de c1                	faddp  st(1),st
c0025e29:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025e2c:	dd 04 24             	fld    QWORD PTR [esp]
c0025e2f:	75 2f                	jne    c0025e60 <__kernel_sin+0x90>
c0025e31:	dd dc                	fstp   st(4)
c0025e33:	d9 c9                	fxch   st(1)
c0025e35:	d9 ca                	fxch   st(2)
c0025e37:	d9 cb                	fxch   st(3)
c0025e39:	de ca                	fmulp  st(2),st
c0025e3b:	d9 c9                	fxch   st(1)
c0025e3d:	dc 25 d8 be 02 c0    	fsub   QWORD PTR ds:0xc002bed8
c0025e43:	de c9                	fmulp  st(1),st
c0025e45:	de c1                	faddp  st(1),st
c0025e47:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025e4a:	dd 04 24             	fld    QWORD PTR [esp]
c0025e4d:	83 c4 0c             	add    esp,0xc
c0025e50:	c3                   	ret    
c0025e51:	eb 0d                	jmp    c0025e60 <__kernel_sin+0x90>
c0025e53:	90                   	nop
c0025e54:	90                   	nop
c0025e55:	90                   	nop
c0025e56:	90                   	nop
c0025e57:	90                   	nop
c0025e58:	90                   	nop
c0025e59:	90                   	nop
c0025e5a:	90                   	nop
c0025e5b:	90                   	nop
c0025e5c:	90                   	nop
c0025e5d:	90                   	nop
c0025e5e:	90                   	nop
c0025e5f:	90                   	nop
c0025e60:	d9 c4                	fld    st(4)
c0025e62:	d8 0d 34 b0 02 c0    	fmul   DWORD PTR ds:0xc002b034
c0025e68:	d9 c9                	fxch   st(1)
c0025e6a:	d8 ca                	fmul   st,st(2)
c0025e6c:	de e9                	fsubp  st(1),st
c0025e6e:	de ca                	fmulp  st(2),st
c0025e70:	d9 c9                	fxch   st(1)
c0025e72:	de e3                	fsubrp st(3),st
c0025e74:	dc 0d d8 be 02 c0    	fmul   QWORD PTR ds:0xc002bed8
c0025e7a:	de c2                	faddp  st(2),st
c0025e7c:	de e1                	fsubrp st(1),st
c0025e7e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025e81:	dd 04 24             	fld    QWORD PTR [esp]
c0025e84:	83 c4 0c             	add    esp,0xc
c0025e87:	c3                   	ret    

Disassembly of section .init:

c0025e88 <_init>:
c0025e88:	55                   	push   ebp
c0025e89:	89 e5                	mov    ebp,esp
c0025e8b:	e8 64 a2 fd ff       	call   c00000f4 <frame_dummy>
c0025e90:	e8 0b c2 ff ff       	call   c00220a0 <__do_global_ctors_aux>
c0025e95:	5d                   	pop    ebp
c0025e96:	c3                   	ret    

Disassembly of section .fini:

c0025e97 <_fini>:
c0025e97:	55                   	push   ebp
c0025e98:	89 e5                	mov    ebp,esp
c0025e9a:	e8 e5 a1 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0025e9f:	5d                   	pop    ebp
c0025ea0:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareED2Ev:

c0025ea2 <std::vector<Hardware*>::~vector()>:
c0025ea2:	83 ec 0c             	sub    esp,0xc
c0025ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025eac:	85 c0                	test   eax,eax
c0025eae:	74 1e                	je     c0025ece <std::vector<Hardware*>::~vector()+0x2c>
c0025eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025eb7:	85 c0                	test   eax,eax
c0025eb9:	74 13                	je     c0025ece <std::vector<Hardware*>::~vector()+0x2c>
c0025ebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ebf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025ec2:	83 ec 0c             	sub    esp,0xc
c0025ec5:	50                   	push   eax
c0025ec6:	e8 8e 79 fe ff       	call   c000d859 <operator delete[](void*)>
c0025ecb:	83 c4 10             	add    esp,0x10
c0025ece:	90                   	nop
c0025ecf:	83 c4 0c             	add    esp,0xc
c0025ed2:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeED2Ev:

c0025ed4 <std::vector<DeviceMemoryRange>::~vector()>:
c0025ed4:	83 ec 0c             	sub    esp,0xc
c0025ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025edb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025ede:	85 c0                	test   eax,eax
c0025ee0:	74 1e                	je     c0025f00 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c0025ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025ee9:	85 c0                	test   eax,eax
c0025eeb:	74 13                	je     c0025f00 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c0025eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025ef4:	83 ec 0c             	sub    esp,0xc
c0025ef7:	50                   	push   eax
c0025ef8:	e8 5c 79 fe ff       	call   c000d859 <operator delete[](void*)>
c0025efd:	83 c4 10             	add    esp,0x10
c0025f00:	90                   	nop
c0025f01:	83 c4 0c             	add    esp,0xc
c0025f04:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeED2Ev:

c0025f06 <std::vector<DevicePortRange>::~vector()>:
c0025f06:	83 ec 0c             	sub    esp,0xc
c0025f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025f10:	85 c0                	test   eax,eax
c0025f12:	74 1e                	je     c0025f32 <std::vector<DevicePortRange>::~vector()+0x2c>
c0025f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025f1b:	85 c0                	test   eax,eax
c0025f1d:	74 13                	je     c0025f32 <std::vector<DevicePortRange>::~vector()+0x2c>
c0025f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f23:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025f26:	83 ec 0c             	sub    esp,0xc
c0025f29:	50                   	push   eax
c0025f2a:	e8 2a 79 fe ff       	call   c000d859 <operator delete[](void*)>
c0025f2f:	83 c4 10             	add    esp,0x10
c0025f32:	90                   	nop
c0025f33:	83 c4 0c             	add    esp,0xc
c0025f36:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorD2Ev:

c0025f38 <std::vector<Hardware*>::iterator::~iterator()>:
c0025f38:	90                   	nop
c0025f39:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2ERKS3_:

c0025f3a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>:
c0025f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025f3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025f44:	89 10                	mov    DWORD PTR [eax],edx
c0025f46:	90                   	nop
c0025f47:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareEC2Ev:

c0025f48 <std::vector<Hardware*>::vector()>:
c0025f48:	83 ec 1c             	sub    esp,0x1c
c0025f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025f4f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0025f56:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0025f5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025f62:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0025f67:	77 05                	ja     c0025f6e <std::vector<Hardware*>::vector()+0x26>
c0025f69:	c1 e0 02             	shl    eax,0x2
c0025f6c:	eb 05                	jmp    c0025f73 <std::vector<Hardware*>::vector()+0x2b>
c0025f6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025f73:	83 ec 0c             	sub    esp,0xc
c0025f76:	50                   	push   eax
c0025f77:	e8 d3 78 fe ff       	call   c000d84f <operator new[](unsigned long)>
c0025f7c:	83 c4 10             	add    esp,0x10
c0025f7f:	89 c2                	mov    edx,eax
c0025f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025f85:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025f88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025f8c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025f8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025f93:	89 10                	mov    DWORD PTR [eax],edx
c0025f95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025f99:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025f9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025fa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025fa7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0025fae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025fb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025fb6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0025fb9:	90                   	nop
c0025fba:	83 c4 1c             	add    esp,0x1c
c0025fbd:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeEC2Ev:

c0025fbe <std::vector<DeviceMemoryRange>::vector()>:
c0025fbe:	83 ec 1c             	sub    esp,0x1c
c0025fc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025fc5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0025fcc:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0025fd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025fd8:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c0025fdd:	77 05                	ja     c0025fe4 <std::vector<DeviceMemoryRange>::vector()+0x26>
c0025fdf:	c1 e0 03             	shl    eax,0x3
c0025fe2:	eb 05                	jmp    c0025fe9 <std::vector<DeviceMemoryRange>::vector()+0x2b>
c0025fe4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025fe9:	83 ec 0c             	sub    esp,0xc
c0025fec:	50                   	push   eax
c0025fed:	e8 5d 78 fe ff       	call   c000d84f <operator new[](unsigned long)>
c0025ff2:	83 c4 10             	add    esp,0x10
c0025ff5:	89 c2                	mov    edx,eax
c0025ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ffb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026002:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026009:	89 10                	mov    DWORD PTR [eax],edx
c002600b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002600f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026016:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026019:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002601d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0026024:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002602c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002602f:	90                   	nop
c0026030:	83 c4 1c             	add    esp,0x1c
c0026033:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeEC2Ev:

c0026034 <std::vector<DevicePortRange>::vector()>:
c0026034:	83 ec 1c             	sub    esp,0x1c
c0026037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002603b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0026042:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c002604a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002604e:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0026053:	77 05                	ja     c002605a <std::vector<DevicePortRange>::vector()+0x26>
c0026055:	c1 e0 02             	shl    eax,0x2
c0026058:	eb 05                	jmp    c002605f <std::vector<DevicePortRange>::vector()+0x2b>
c002605a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002605f:	83 ec 0c             	sub    esp,0xc
c0026062:	50                   	push   eax
c0026063:	e8 e7 77 fe ff       	call   c000d84f <operator new[](unsigned long)>
c0026068:	83 c4 10             	add    esp,0x10
c002606b:	89 c2                	mov    edx,eax
c002606d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026071:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026078:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002607b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002607f:	89 10                	mov    DWORD PTR [eax],edx
c0026081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026085:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002608c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002608f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026093:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002609a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002609e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00260a2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00260a5:	90                   	nop
c00260a6:	83 c4 1c             	add    esp,0x1c
c00260a9:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratorneERKS3_:

c00260aa <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>:
c00260aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00260ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00260b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00260b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00260b6:	39 c2                	cmp    edx,eax
c00260b8:	0f 95 c0             	setne  al
c00260bb:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratordeEv:

c00260bc <std::vector<Hardware*>::iterator::operator*() const>:
c00260bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00260c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00260c2:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2EPS1_:

c00260c4 <std::vector<Hardware*>::iterator::iterator(Hardware**)>:
c00260c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00260c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00260cc:	89 10                	mov    DWORD PTR [eax],edx
c00260ce:	90                   	nop
c00260cf:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE3endEv:

c00260d0 <std::vector<Hardware*>::end()>:
c00260d0:	83 ec 0c             	sub    esp,0xc
c00260d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00260da:	83 ec 08             	sub    esp,0x8
c00260dd:	50                   	push   eax
c00260de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260e2:	e8 dd ff ff ff       	call   c00260c4 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c00260e7:	83 c4 10             	add    esp,0x10
c00260ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ee:	83 c4 0c             	add    esp,0xc
c00260f1:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE5beginEv:

c00260f4 <std::vector<Hardware*>::begin()>:
c00260f4:	83 ec 0c             	sub    esp,0xc
c00260f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00260fd:	83 ec 08             	sub    esp,0x8
c0026100:	50                   	push   eax
c0026101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026105:	e8 ba ff ff ff       	call   c00260c4 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002610a:	83 c4 10             	add    esp,0x10
c002610d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026111:	83 c4 0c             	add    esp,0xc
c0026114:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEv:

c0026118 <std::vector<Hardware*>::iterator::operator++()>:
c0026118:	83 ec 0c             	sub    esp,0xc
c002611b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002611f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026121:	8d 50 04             	lea    edx,[eax+0x4]
c0026124:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026128:	89 10                	mov    DWORD PTR [eax],edx
c002612a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002612e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026130:	83 ec 08             	sub    esp,0x8
c0026133:	50                   	push   eax
c0026134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026138:	e8 87 ff ff ff       	call   c00260c4 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002613d:	83 c4 10             	add    esp,0x10
c0026140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026144:	83 c4 0c             	add    esp,0xc
c0026147:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4findINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c002614a <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c002614a:	83 ec 1c             	sub    esp,0x1c
c002614d:	83 ec 08             	sub    esp,0x8
c0026150:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026154:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026158:	e8 4d ff ff ff       	call   c00260aa <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c002615d:	83 c4 10             	add    esp,0x10
c0026160:	0f b6 c0             	movzx  eax,al
c0026163:	85 c0                	test   eax,eax
c0026165:	74 5e                	je     c00261c5 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x7b>
c0026167:	83 ec 0c             	sub    esp,0xc
c002616a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002616e:	e8 49 ff ff ff       	call   c00260bc <std::vector<Hardware*>::iterator::operator*() const>
c0026173:	83 c4 10             	add    esp,0x10
c0026176:	8b 10                	mov    edx,DWORD PTR [eax]
c0026178:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002617c:	8b 00                	mov    eax,DWORD PTR [eax]
c002617e:	39 c2                	cmp    edx,eax
c0026180:	0f 94 c0             	sete   al
c0026183:	0f b6 c0             	movzx  eax,al
c0026186:	85 c0                	test   eax,eax
c0026188:	74 15                	je     c002619f <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x55>
c002618a:	83 ec 08             	sub    esp,0x8
c002618d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026195:	e8 a0 fd ff ff       	call   c0025f3a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c002619a:	83 c4 10             	add    esp,0x10
c002619d:	eb 39                	jmp    c00261d8 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x8e>
c002619f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00261a3:	83 ec 08             	sub    esp,0x8
c00261a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00261aa:	50                   	push   eax
c00261ab:	e8 68 ff ff ff       	call   c0026118 <std::vector<Hardware*>::iterator::operator++()>
c00261b0:	83 c4 0c             	add    esp,0xc
c00261b3:	83 ec 0c             	sub    esp,0xc
c00261b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00261ba:	50                   	push   eax
c00261bb:	e8 78 fd ff ff       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c00261c0:	83 c4 10             	add    esp,0x10
c00261c3:	eb 88                	jmp    c002614d <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x3>
c00261c5:	83 ec 08             	sub    esp,0x8
c00261c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00261cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00261d0:	e8 65 fd ff ff       	call   c0025f3a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c00261d5:	83 c4 10             	add    esp,0x10
c00261d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00261dc:	83 c4 1c             	add    esp,0x1c
c00261df:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratoraSERKS3_:

c00261e2 <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>:
c00261e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00261e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00261e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00261ec:	89 10                	mov    DWORD PTR [eax],edx
c00261ee:	90                   	nop
c00261ef:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEi:

c00261f0 <std::vector<Hardware*>::iterator::operator++(int)>:
c00261f0:	83 ec 0c             	sub    esp,0xc
c00261f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00261f9:	8d 48 04             	lea    ecx,[eax+0x4]
c00261fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026200:	89 0a                	mov    DWORD PTR [edx],ecx
c0026202:	83 ec 08             	sub    esp,0x8
c0026205:	50                   	push   eax
c0026206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002620a:	e8 b5 fe ff ff       	call   c00260c4 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002620f:	83 c4 10             	add    esp,0x10
c0026212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026216:	83 c4 0c             	add    esp,0xc
c0026219:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4moveIRP8HardwareEONSt16remove_referenceIT_E4typeEOS4_:

c002621c <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>:
c002621c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026220:	c3                   	ret    

Disassembly of section .text._ZSt6removeINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c0026221 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c0026221:	53                   	push   ebx
c0026222:	83 ec 28             	sub    esp,0x28
c0026225:	83 ec 08             	sub    esp,0x8
c0026228:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002622c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026230:	50                   	push   eax
c0026231:	e8 04 fd ff ff       	call   c0025f3a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026236:	83 c4 10             	add    esp,0x10
c0026239:	83 ec 08             	sub    esp,0x8
c002623c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026240:	8d 44 24 20          	lea    eax,[esp+0x20]
c0026244:	50                   	push   eax
c0026245:	e8 f0 fc ff ff       	call   c0025f3a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c002624a:	83 c4 10             	add    esp,0x10
c002624d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0026251:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026255:	8d 54 24 14          	lea    edx,[esp+0x14]
c0026259:	52                   	push   edx
c002625a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002625e:	52                   	push   edx
c002625f:	50                   	push   eax
c0026260:	e8 e5 fe ff ff       	call   c002614a <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c0026265:	83 c4 0c             	add    esp,0xc
c0026268:	83 ec 08             	sub    esp,0x8
c002626b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002626f:	50                   	push   eax
c0026270:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026274:	e8 69 ff ff ff       	call   c00261e2 <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>
c0026279:	83 c4 10             	add    esp,0x10
c002627c:	83 ec 0c             	sub    esp,0xc
c002627f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0026283:	50                   	push   eax
c0026284:	e8 af fc ff ff       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c0026289:	83 c4 10             	add    esp,0x10
c002628c:	83 ec 0c             	sub    esp,0xc
c002628f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0026293:	50                   	push   eax
c0026294:	e8 9f fc ff ff       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c0026299:	83 c4 10             	add    esp,0x10
c002629c:	83 ec 0c             	sub    esp,0xc
c002629f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00262a3:	50                   	push   eax
c00262a4:	e8 8f fc ff ff       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c00262a9:	83 c4 10             	add    esp,0x10
c00262ac:	83 ec 08             	sub    esp,0x8
c00262af:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00262b3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00262b7:	e8 ee fd ff ff       	call   c00260aa <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00262bc:	83 c4 10             	add    esp,0x10
c00262bf:	0f b6 c0             	movzx  eax,al
c00262c2:	85 c0                	test   eax,eax
c00262c4:	0f 84 eb 00 00 00    	je     c00263b5 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x194>
c00262ca:	83 ec 08             	sub    esp,0x8
c00262cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00262d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00262d5:	50                   	push   eax
c00262d6:	e8 5f fc ff ff       	call   c0025f3a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c00262db:	83 c4 10             	add    esp,0x10
c00262de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00262e2:	83 ec 08             	sub    esp,0x8
c00262e5:	8d 54 24 10          	lea    edx,[esp+0x10]
c00262e9:	52                   	push   edx
c00262ea:	50                   	push   eax
c00262eb:	e8 28 fe ff ff       	call   c0026118 <std::vector<Hardware*>::iterator::operator++()>
c00262f0:	83 c4 0c             	add    esp,0xc
c00262f3:	83 ec 08             	sub    esp,0x8
c00262f6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00262fa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00262fe:	50                   	push   eax
c00262ff:	e8 a6 fd ff ff       	call   c00260aa <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0026304:	83 c4 10             	add    esp,0x10
c0026307:	88 c3                	mov    bl,al
c0026309:	83 ec 0c             	sub    esp,0xc
c002630c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0026310:	50                   	push   eax
c0026311:	e8 22 fc ff ff       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c0026316:	83 c4 10             	add    esp,0x10
c0026319:	0f b6 c3             	movzx  eax,bl
c002631c:	85 c0                	test   eax,eax
c002631e:	0f 84 81 00 00 00    	je     c00263a5 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x184>
c0026324:	83 ec 0c             	sub    esp,0xc
c0026327:	8d 44 24 14          	lea    eax,[esp+0x14]
c002632b:	50                   	push   eax
c002632c:	e8 8b fd ff ff       	call   c00260bc <std::vector<Hardware*>::iterator::operator*() const>
c0026331:	83 c4 10             	add    esp,0x10
c0026334:	8b 10                	mov    edx,DWORD PTR [eax]
c0026336:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002633a:	8b 00                	mov    eax,DWORD PTR [eax]
c002633c:	39 c2                	cmp    edx,eax
c002633e:	0f 95 c0             	setne  al
c0026341:	0f b6 c0             	movzx  eax,al
c0026344:	85 c0                	test   eax,eax
c0026346:	74 96                	je     c00262de <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xbd>
c0026348:	83 ec 0c             	sub    esp,0xc
c002634b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002634f:	50                   	push   eax
c0026350:	e8 67 fd ff ff       	call   c00260bc <std::vector<Hardware*>::iterator::operator*() const>
c0026355:	83 c4 10             	add    esp,0x10
c0026358:	83 ec 0c             	sub    esp,0xc
c002635b:	50                   	push   eax
c002635c:	e8 bb fe ff ff       	call   c002621c <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>
c0026361:	83 c4 10             	add    esp,0x10
c0026364:	89 c3                	mov    ebx,eax
c0026366:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002636a:	83 ec 04             	sub    esp,0x4
c002636d:	6a 00                	push   0x0
c002636f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0026373:	50                   	push   eax
c0026374:	e8 77 fe ff ff       	call   c00261f0 <std::vector<Hardware*>::iterator::operator++(int)>
c0026379:	83 c4 0c             	add    esp,0xc
c002637c:	83 ec 0c             	sub    esp,0xc
c002637f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0026383:	50                   	push   eax
c0026384:	e8 33 fd ff ff       	call   c00260bc <std::vector<Hardware*>::iterator::operator*() const>
c0026389:	83 c4 10             	add    esp,0x10
c002638c:	8b 13                	mov    edx,DWORD PTR [ebx]
c002638e:	89 10                	mov    DWORD PTR [eax],edx
c0026390:	83 ec 0c             	sub    esp,0xc
c0026393:	8d 44 24 28          	lea    eax,[esp+0x28]
c0026397:	50                   	push   eax
c0026398:	e8 9b fb ff ff       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c002639d:	83 c4 10             	add    esp,0x10
c00263a0:	e9 39 ff ff ff       	jmp    c00262de <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xbd>
c00263a5:	83 ec 0c             	sub    esp,0xc
c00263a8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00263ac:	50                   	push   eax
c00263ad:	e8 86 fb ff ff       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c00263b2:	83 c4 10             	add    esp,0x10
c00263b5:	83 ec 08             	sub    esp,0x8
c00263b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00263bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00263c0:	e8 75 fb ff ff       	call   c0025f3a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c00263c5:	83 c4 10             	add    esp,0x10
c00263c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00263cc:	83 c4 28             	add    esp,0x28
c00263cf:	5b                   	pop    ebx
c00263d0:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratormiES3_:

c00263d4 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>:
c00263d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00263d8:	8b 10                	mov    edx,DWORD PTR [eax]
c00263da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00263de:	8b 00                	mov    eax,DWORD PTR [eax]
c00263e0:	29 c2                	sub    edx,eax
c00263e2:	89 d0                	mov    eax,edx
c00263e4:	c1 f8 02             	sar    eax,0x2
c00263e7:	c3                   	ret    

Disassembly of section .text._ZSt4copyIPP8HardwareS2_ET0_T_S4_S3_:

c00263e8 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>:
c00263e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00263ec:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00263f0:	74 18                	je     c002640a <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)+0x22>
c00263f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00263f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00263f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263fc:	89 10                	mov    DWORD PTR [eax],edx
c00263fe:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c0026403:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0026408:	eb de                	jmp    c00263e8 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c002640a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002640e:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE7reserveEm:

c0026410 <std::vector<Hardware*>::reserve(unsigned long)>:
c0026410:	83 ec 1c             	sub    esp,0x1c
c0026413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026417:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002641a:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c002641e:	0f 86 c9 00 00 00    	jbe    c00264ed <std::vector<Hardware*>::reserve(unsigned long)+0xdd>
c0026424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026428:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002642b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c002642f:	76 14                	jbe    c0026445 <std::vector<Hardware*>::reserve(unsigned long)+0x35>
c0026431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026435:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026438:	01 c0                	add    eax,eax
c002643a:	89 c2                	mov    edx,eax
c002643c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026440:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0026443:	eb df                	jmp    c0026424 <std::vector<Hardware*>::reserve(unsigned long)+0x14>
c0026445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026449:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002644c:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0026451:	77 05                	ja     c0026458 <std::vector<Hardware*>::reserve(unsigned long)+0x48>
c0026453:	c1 e0 02             	shl    eax,0x2
c0026456:	eb 05                	jmp    c002645d <std::vector<Hardware*>::reserve(unsigned long)+0x4d>
c0026458:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002645d:	83 ec 0c             	sub    esp,0xc
c0026460:	50                   	push   eax
c0026461:	e8 e9 73 fe ff       	call   c000d84f <operator new[](unsigned long)>
c0026466:	83 c4 10             	add    esp,0x10
c0026469:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002646d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026471:	8b 10                	mov    edx,DWORD PTR [eax]
c0026473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026477:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002647a:	39 c2                	cmp    edx,eax
c002647c:	74 1f                	je     c002649d <std::vector<Hardware*>::reserve(unsigned long)+0x8d>
c002647e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026482:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0026485:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026489:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002648c:	83 ec 04             	sub    esp,0x4
c002648f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026493:	52                   	push   edx
c0026494:	50                   	push   eax
c0026495:	e8 4e ff ff ff       	call   c00263e8 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c002649a:	83 c4 10             	add    esp,0x10
c002649d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00264a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00264a4:	85 c0                	test   eax,eax
c00264a6:	74 13                	je     c00264bb <std::vector<Hardware*>::reserve(unsigned long)+0xab>
c00264a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00264ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00264af:	83 ec 0c             	sub    esp,0xc
c00264b2:	50                   	push   eax
c00264b3:	e8 a1 73 fe ff       	call   c000d859 <operator delete[](void*)>
c00264b8:	83 c4 10             	add    esp,0x10
c00264bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00264bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00264c3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00264c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00264ca:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00264cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00264d1:	89 10                	mov    DWORD PTR [eax],edx
c00264d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00264d7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00264da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00264de:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00264e1:	c1 e0 02             	shl    eax,0x2
c00264e4:	01 c2                	add    edx,eax
c00264e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00264ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00264ed:	90                   	nop
c00264ee:	83 c4 1c             	add    esp,0x1c
c00264f1:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE9push_backERKS1_:

c00264f2 <std::vector<Hardware*>::push_back(Hardware* const&)>:
c00264f2:	83 ec 0c             	sub    esp,0xc
c00264f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264f9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00264fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026500:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026503:	39 c2                	cmp    edx,eax
c0026505:	73 2c                	jae    c0026533 <std::vector<Hardware*>::push_back(Hardware* const&)+0x41>
c0026507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002650b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002650e:	8d 48 04             	lea    ecx,[eax+0x4]
c0026511:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026515:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0026518:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002651c:	8b 12                	mov    edx,DWORD PTR [edx]
c002651e:	89 10                	mov    DWORD PTR [eax],edx
c0026520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026524:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026527:	8d 50 01             	lea    edx,[eax+0x1]
c002652a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002652e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0026531:	eb 43                	jmp    c0026576 <std::vector<Hardware*>::push_back(Hardware* const&)+0x84>
c0026533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026537:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002653a:	01 c0                	add    eax,eax
c002653c:	83 ec 08             	sub    esp,0x8
c002653f:	50                   	push   eax
c0026540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026544:	e8 c7 fe ff ff       	call   c0026410 <std::vector<Hardware*>::reserve(unsigned long)>
c0026549:	83 c4 10             	add    esp,0x10
c002654c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026550:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026553:	8d 50 01             	lea    edx,[eax+0x1]
c0026556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002655a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002655d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026561:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026564:	8d 48 04             	lea    ecx,[eax+0x4]
c0026567:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002656b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c002656e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026572:	8b 12                	mov    edx,DWORD PTR [edx]
c0026574:	89 10                	mov    DWORD PTR [eax],edx
c0026576:	90                   	nop
c0026577:	83 c4 0c             	add    esp,0xc
c002657a:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5eraseENS2_8iteratorES3_:

c002657c <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>:
c002657c:	53                   	push   ebx
c002657d:	83 ec 28             	sub    esp,0x28
c0026580:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0026584:	8b 00                	mov    eax,DWORD PTR [eax]
c0026586:	83 ec 08             	sub    esp,0x8
c0026589:	50                   	push   eax
c002658a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002658e:	50                   	push   eax
c002658f:	e8 30 fb ff ff       	call   c00260c4 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0026594:	83 c4 10             	add    esp,0x10
c0026597:	83 ec 08             	sub    esp,0x8
c002659a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002659e:	50                   	push   eax
c002659f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00265a3:	e8 2c fe ff ff       	call   c00263d4 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c00265a8:	83 c4 10             	add    esp,0x10
c00265ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00265af:	83 ec 0c             	sub    esp,0xc
c00265b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00265b6:	50                   	push   eax
c00265b7:	e8 7c f9 ff ff       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c00265bc:	83 c4 10             	add    esp,0x10
c00265bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00265c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00265c5:	83 ec 08             	sub    esp,0x8
c00265c8:	50                   	push   eax
c00265c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00265cd:	50                   	push   eax
c00265ce:	e8 f1 fa ff ff       	call   c00260c4 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c00265d3:	83 c4 10             	add    esp,0x10
c00265d6:	83 ec 08             	sub    esp,0x8
c00265d9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00265dd:	50                   	push   eax
c00265de:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00265e2:	e8 ed fd ff ff       	call   c00263d4 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c00265e7:	83 c4 10             	add    esp,0x10
c00265ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00265ee:	83 ec 0c             	sub    esp,0xc
c00265f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00265f5:	50                   	push   eax
c00265f6:	e8 3d f9 ff ff       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c00265fb:	83 c4 10             	add    esp,0x10
c00265fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0026602:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026605:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0026609:	c1 e2 02             	shl    edx,0x2
c002660c:	8d 0c 10             	lea    ecx,[eax+edx*1]
c002660f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0026613:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026616:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002661a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002661d:	c1 e0 02             	shl    eax,0x2
c0026620:	01 c2                	add    edx,eax
c0026622:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0026626:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026629:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002662d:	c1 e3 02             	shl    ebx,0x2
c0026630:	01 d8                	add    eax,ebx
c0026632:	83 ec 04             	sub    esp,0x4
c0026635:	51                   	push   ecx
c0026636:	52                   	push   edx
c0026637:	50                   	push   eax
c0026638:	e8 ab fd ff ff       	call   c00263e8 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c002663d:	83 c4 10             	add    esp,0x10
c0026640:	83 ec 08             	sub    esp,0x8
c0026643:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026647:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002664b:	50                   	push   eax
c002664c:	e8 e9 f8 ff ff       	call   c0025f3a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0026651:	83 c4 10             	add    esp,0x10
c0026654:	83 ec 08             	sub    esp,0x8
c0026657:	8d 44 24 18          	lea    eax,[esp+0x18]
c002665b:	50                   	push   eax
c002665c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0026660:	e8 6f fd ff ff       	call   c00263d4 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0026665:	83 c4 10             	add    esp,0x10
c0026668:	89 c2                	mov    edx,eax
c002666a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002666e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026671:	29 d0                	sub    eax,edx
c0026673:	89 c2                	mov    edx,eax
c0026675:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0026679:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002667c:	83 ec 0c             	sub    esp,0xc
c002667f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026683:	50                   	push   eax
c0026684:	e8 af f8 ff ff       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c0026689:	83 c4 10             	add    esp,0x10
c002668c:	83 ec 08             	sub    esp,0x8
c002668f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0026693:	8d 44 24 20          	lea    eax,[esp+0x20]
c0026697:	50                   	push   eax
c0026698:	e8 9d f8 ff ff       	call   c0025f3a <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c002669d:	83 c4 10             	add    esp,0x10
c00266a0:	83 ec 08             	sub    esp,0x8
c00266a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00266a7:	50                   	push   eax
c00266a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00266ac:	e8 23 fd ff ff       	call   c00263d4 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c00266b1:	83 c4 10             	add    esp,0x10
c00266b4:	89 c2                	mov    edx,eax
c00266b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00266ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00266bd:	c1 e2 02             	shl    edx,0x2
c00266c0:	f7 da                	neg    edx
c00266c2:	01 c2                	add    edx,eax
c00266c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00266c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00266cb:	83 ec 0c             	sub    esp,0xc
c00266ce:	8d 44 24 20          	lea    eax,[esp+0x20]
c00266d2:	50                   	push   eax
c00266d3:	e8 60 f8 ff ff       	call   c0025f38 <std::vector<Hardware*>::iterator::~iterator()>
c00266d8:	83 c4 10             	add    esp,0x10
c00266db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00266df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00266e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00266e6:	c1 e2 02             	shl    edx,0x2
c00266e9:	01 d0                	add    eax,edx
c00266eb:	83 ec 08             	sub    esp,0x8
c00266ee:	50                   	push   eax
c00266ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00266f3:	e8 cc f9 ff ff       	call   c00260c4 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c00266f8:	83 c4 10             	add    esp,0x10
c00266fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00266ff:	83 c4 28             	add    esp,0x28
c0026702:	5b                   	pop    ebx
c0026703:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4copyIP17DeviceMemoryRangeS1_ET0_T_S3_S2_:

c0026706 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>:
c0026706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002670a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c002670e:	74 1e                	je     c002672e <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)+0x28>
c0026710:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026718:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002671b:	8b 00                	mov    eax,DWORD PTR [eax]
c002671d:	89 01                	mov    DWORD PTR [ecx],eax
c002671f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0026722:	83 44 24 04 08       	add    DWORD PTR [esp+0x4],0x8
c0026727:	83 44 24 0c 08       	add    DWORD PTR [esp+0xc],0x8
c002672c:	eb d8                	jmp    c0026706 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c002672e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026732:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE7reserveEm:

c0026734 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>:
c0026734:	83 ec 1c             	sub    esp,0x1c
c0026737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002673b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002673e:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0026742:	0f 86 c9 00 00 00    	jbe    c0026811 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xdd>
c0026748:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002674c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002674f:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0026753:	76 14                	jbe    c0026769 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x35>
c0026755:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026759:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002675c:	01 c0                	add    eax,eax
c002675e:	89 c2                	mov    edx,eax
c0026760:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026764:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0026767:	eb df                	jmp    c0026748 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x14>
c0026769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002676d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026770:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c0026775:	77 05                	ja     c002677c <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x48>
c0026777:	c1 e0 03             	shl    eax,0x3
c002677a:	eb 05                	jmp    c0026781 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x4d>
c002677c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026781:	83 ec 0c             	sub    esp,0xc
c0026784:	50                   	push   eax
c0026785:	e8 c5 70 fe ff       	call   c000d84f <operator new[](unsigned long)>
c002678a:	83 c4 10             	add    esp,0x10
c002678d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026791:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026795:	8b 10                	mov    edx,DWORD PTR [eax]
c0026797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002679b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002679e:	39 c2                	cmp    edx,eax
c00267a0:	74 1f                	je     c00267c1 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x8d>
c00267a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267a6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00267a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00267b0:	83 ec 04             	sub    esp,0x4
c00267b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00267b7:	52                   	push   edx
c00267b8:	50                   	push   eax
c00267b9:	e8 48 ff ff ff       	call   c0026706 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c00267be:	83 c4 10             	add    esp,0x10
c00267c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00267c8:	85 c0                	test   eax,eax
c00267ca:	74 13                	je     c00267df <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xab>
c00267cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00267d3:	83 ec 0c             	sub    esp,0xc
c00267d6:	50                   	push   eax
c00267d7:	e8 7d 70 fe ff       	call   c000d859 <operator delete[](void*)>
c00267dc:	83 c4 10             	add    esp,0x10
c00267df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00267e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00267ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267ee:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00267f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267f5:	89 10                	mov    DWORD PTR [eax],edx
c00267f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267fb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00267fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026802:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026805:	c1 e0 03             	shl    eax,0x3
c0026808:	01 c2                	add    edx,eax
c002680a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002680e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026811:	90                   	nop
c0026812:	83 c4 1c             	add    esp,0x1c
c0026815:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE9push_backERKS0_:

c0026816 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>:
c0026816:	83 ec 0c             	sub    esp,0xc
c0026819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002681d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0026820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026827:	39 c2                	cmp    edx,eax
c0026829:	73 32                	jae    c002685d <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x47>
c002682b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002682f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0026832:	8d 51 08             	lea    edx,[ecx+0x8]
c0026835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026839:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002683c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026840:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0026843:	8b 00                	mov    eax,DWORD PTR [eax]
c0026845:	89 01                	mov    DWORD PTR [ecx],eax
c0026847:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002684a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002684e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026851:	8d 50 01             	lea    edx,[eax+0x1]
c0026854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026858:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002685b:	eb 49                	jmp    c00268a6 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x90>
c002685d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026861:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0026864:	01 c0                	add    eax,eax
c0026866:	83 ec 08             	sub    esp,0x8
c0026869:	50                   	push   eax
c002686a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002686e:	e8 c1 fe ff ff       	call   c0026734 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>
c0026873:	83 c4 10             	add    esp,0x10
c0026876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002687a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002687d:	8d 50 01             	lea    edx,[eax+0x1]
c0026880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026884:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0026887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002688b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c002688e:	8d 51 08             	lea    edx,[ecx+0x8]
c0026891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026895:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026898:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002689c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002689f:	8b 00                	mov    eax,DWORD PTR [eax]
c00268a1:	89 01                	mov    DWORD PTR [ecx],eax
c00268a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00268a6:	90                   	nop
c00268a7:	83 c4 0c             	add    esp,0xc
c00268aa:	c3                   	ret    

Disassembly of section .text._ZSt4copyIP15DevicePortRangeS1_ET0_T_S3_S2_:

c00268ab <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>:
c00268ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00268af:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00268b3:	74 18                	je     c00268cd <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)+0x22>
c00268b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00268bd:	8b 12                	mov    edx,DWORD PTR [edx]
c00268bf:	89 10                	mov    DWORD PTR [eax],edx
c00268c1:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c00268c6:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c00268cb:	eb de                	jmp    c00268ab <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c00268cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268d1:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE7reserveEm:

c00268d2 <std::vector<DevicePortRange>::reserve(unsigned long)>:
c00268d2:	83 ec 1c             	sub    esp,0x1c
c00268d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00268dc:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00268e0:	0f 86 c9 00 00 00    	jbe    c00269af <std::vector<DevicePortRange>::reserve(unsigned long)+0xdd>
c00268e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00268ed:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00268f1:	76 14                	jbe    c0026907 <std::vector<DevicePortRange>::reserve(unsigned long)+0x35>
c00268f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00268fa:	01 c0                	add    eax,eax
c00268fc:	89 c2                	mov    edx,eax
c00268fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026902:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0026905:	eb df                	jmp    c00268e6 <std::vector<DevicePortRange>::reserve(unsigned long)+0x14>
c0026907:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002690b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002690e:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0026913:	77 05                	ja     c002691a <std::vector<DevicePortRange>::reserve(unsigned long)+0x48>
c0026915:	c1 e0 02             	shl    eax,0x2
c0026918:	eb 05                	jmp    c002691f <std::vector<DevicePortRange>::reserve(unsigned long)+0x4d>
c002691a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002691f:	83 ec 0c             	sub    esp,0xc
c0026922:	50                   	push   eax
c0026923:	e8 27 6f fe ff       	call   c000d84f <operator new[](unsigned long)>
c0026928:	83 c4 10             	add    esp,0x10
c002692b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002692f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026933:	8b 10                	mov    edx,DWORD PTR [eax]
c0026935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026939:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002693c:	39 c2                	cmp    edx,eax
c002693e:	74 1f                	je     c002695f <std::vector<DevicePortRange>::reserve(unsigned long)+0x8d>
c0026940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026944:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0026947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002694b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002694e:	83 ec 04             	sub    esp,0x4
c0026951:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026955:	52                   	push   edx
c0026956:	50                   	push   eax
c0026957:	e8 4f ff ff ff       	call   c00268ab <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c002695c:	83 c4 10             	add    esp,0x10
c002695f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026963:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026966:	85 c0                	test   eax,eax
c0026968:	74 13                	je     c002697d <std::vector<DevicePortRange>::reserve(unsigned long)+0xab>
c002696a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002696e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026971:	83 ec 0c             	sub    esp,0xc
c0026974:	50                   	push   eax
c0026975:	e8 df 6e fe ff       	call   c000d859 <operator delete[](void*)>
c002697a:	83 c4 10             	add    esp,0x10
c002697d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026981:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026985:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002698c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002698f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026993:	89 10                	mov    DWORD PTR [eax],edx
c0026995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026999:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002699c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00269a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00269a3:	c1 e0 02             	shl    eax,0x2
c00269a6:	01 c2                	add    edx,eax
c00269a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00269ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00269af:	90                   	nop
c00269b0:	83 c4 1c             	add    esp,0x1c
c00269b3:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE9push_backERKS0_:

c00269b4 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>:
c00269b4:	83 ec 0c             	sub    esp,0xc
c00269b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269bb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00269be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00269c5:	39 c2                	cmp    edx,eax
c00269c7:	73 2c                	jae    c00269f5 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x41>
c00269c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00269d0:	8d 48 04             	lea    ecx,[eax+0x4]
c00269d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00269d7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00269da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00269de:	8b 12                	mov    edx,DWORD PTR [edx]
c00269e0:	89 10                	mov    DWORD PTR [eax],edx
c00269e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00269e9:	8d 50 01             	lea    edx,[eax+0x1]
c00269ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269f0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00269f3:	eb 43                	jmp    c0026a38 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x84>
c00269f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00269fc:	01 c0                	add    eax,eax
c00269fe:	83 ec 08             	sub    esp,0x8
c0026a01:	50                   	push   eax
c0026a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026a06:	e8 c7 fe ff ff       	call   c00268d2 <std::vector<DevicePortRange>::reserve(unsigned long)>
c0026a0b:	83 c4 10             	add    esp,0x10
c0026a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0026a15:	8d 50 01             	lea    edx,[eax+0x1]
c0026a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a1c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0026a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026a26:	8d 48 04             	lea    ecx,[eax+0x4]
c0026a29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026a2d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0026a30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026a34:	8b 12                	mov    edx,DWORD PTR [edx]
c0026a36:	89 10                	mov    DWORD PTR [eax],edx
c0026a38:	90                   	nop
c0026a39:	83 c4 0c             	add    esp,0xc
c0026a3c:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0026a3e <DriverlessDevice::~DriverlessDevice()>:
c0026a3e:	ba fc 84 02 c0       	mov    edx,0xc00284fc
c0026a43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026a47:	89 10                	mov    DWORD PTR [eax],edx
c0026a49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026a4d:	50                   	push   eax
c0026a4e:	e8 db 33 fe ff       	call   c0009e2e <Device::~Device()>
c0026a53:	83 c4 04             	add    esp,0x4
c0026a56:	90                   	nop
c0026a57:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0026a58 <DriverlessDevice::~DriverlessDevice()>:
c0026a58:	83 ec 0c             	sub    esp,0xc
c0026a5b:	83 ec 0c             	sub    esp,0xc
c0026a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026a62:	e8 d7 ff ff ff       	call   c0026a3e <DriverlessDevice::~DriverlessDevice()>
c0026a67:	83 c4 10             	add    esp,0x10
c0026a6a:	83 ec 08             	sub    esp,0x8
c0026a6d:	68 58 01 00 00       	push   0x158
c0026a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026a76:	e8 d9 6d fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c0026a7b:	83 c4 10             	add    esp,0x10
c0026a7e:	83 c4 0c             	add    esp,0xc
c0026a81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0026a82 <LinkedList<Device>::addElement(Device*)>:
c0026a82:	83 ec 0c             	sub    esp,0xc
c0026a85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026a8a:	75 10                	jne    c0026a9c <LinkedList<Device>::addElement(Device*)+0x1a>
c0026a8c:	83 ec 0c             	sub    esp,0xc
c0026a8f:	68 90 84 02 c0       	push   0xc0028490
c0026a94:	e8 f7 96 fe ff       	call   c0010190 <KePanic(char const*)>
c0026a99:	83 c4 10             	add    esp,0x10
c0026a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026aa2:	85 c0                	test   eax,eax
c0026aa4:	74 3a                	je     c0026ae0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0026aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026aad:	85 c0                	test   eax,eax
c0026aaf:	74 2f                	je     c0026ae0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0026ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ab5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026ab8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026abc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0026ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ac6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026aca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ad1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026ad4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0026ade:	eb 68                	jmp    c0026b48 <LinkedList<Device>::addElement(Device*)+0xc6>
c0026ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ae6:	85 c0                	test   eax,eax
c0026ae8:	75 4e                	jne    c0026b38 <LinkedList<Device>::addElement(Device*)+0xb6>
c0026aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026af1:	85 c0                	test   eax,eax
c0026af3:	75 43                	jne    c0026b38 <LinkedList<Device>::addElement(Device*)+0xb6>
c0026af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026af9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026afd:	89 10                	mov    DWORD PTR [eax],edx
c0026aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026b07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026b11:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0026b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026b22:	85 c0                	test   eax,eax
c0026b24:	74 22                	je     c0026b48 <LinkedList<Device>::addElement(Device*)+0xc6>
c0026b26:	83 ec 0c             	sub    esp,0xc
c0026b29:	68 b2 84 02 c0       	push   0xc00284b2
c0026b2e:	e8 5d 96 fe ff       	call   c0010190 <KePanic(char const*)>
c0026b33:	83 c4 10             	add    esp,0x10
c0026b36:	eb 10                	jmp    c0026b48 <LinkedList<Device>::addElement(Device*)+0xc6>
c0026b38:	83 ec 0c             	sub    esp,0xc
c0026b3b:	68 bc 84 02 c0       	push   0xc00284bc
c0026b40:	e8 4b 96 fe ff       	call   c0010190 <KePanic(char const*)>
c0026b45:	83 c4 10             	add    esp,0x10
c0026b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026b4f:	8d 50 01             	lea    edx,[eax+0x1]
c0026b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b56:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026b59:	90                   	nop
c0026b5a:	83 c4 0c             	add    esp,0xc
c0026b5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0026b5e <LinkedList<Device>::LinkedList()>:
c0026b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026b73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026b88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026b93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026b9e:	90                   	nop
c0026b9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0026ba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0026ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ba6:	85 c0                	test   eax,eax
c0026ba8:	75 0e                	jne    c0026bb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0026baa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026bae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026bb1:	85 c0                	test   eax,eax
c0026bb3:	75 03                	jne    c0026bb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0026bb5:	b0 01                	mov    al,0x1
c0026bb7:	c3                   	ret    
c0026bb8:	b0 00                	mov    al,0x0
c0026bba:	90                   	nop
c0026bbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0026bbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0026bbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0026bc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0026bc4:	83 ec 0c             	sub    esp,0xc
c0026bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bcd:	85 c0                	test   eax,eax
c0026bcf:	75 17                	jne    c0026be8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0026bd1:	83 ec 0c             	sub    esp,0xc
c0026bd4:	68 2c 87 02 c0       	push   0xc002872c
c0026bd9:	e8 b2 95 fe ff       	call   c0010190 <KePanic(char const*)>
c0026bde:	83 c4 10             	add    esp,0x10
c0026be1:	e9 96 00 00 00       	jmp    c0026c7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0026be6:	66 90                	xchg   ax,ax
c0026be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026bef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026bf2:	85 c0                	test   eax,eax
c0026bf4:	0f 95 c0             	setne  al
c0026bf7:	0f b6 c0             	movzx  eax,al
c0026bfa:	85 c0                	test   eax,eax
c0026bfc:	74 12                	je     c0026c10 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0026bfe:	83 ec 0c             	sub    esp,0xc
c0026c01:	68 77 87 02 c0       	push   0xc0028777
c0026c06:	e8 85 95 fe ff       	call   c0010190 <KePanic(char const*)>
c0026c0b:	83 c4 10             	add    esp,0x10
c0026c0e:	66 90                	xchg   ax,ax
c0026c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026c19:	85 c0                	test   eax,eax
c0026c1b:	0f 94 c0             	sete   al
c0026c1e:	0f b6 c0             	movzx  eax,al
c0026c21:	85 c0                	test   eax,eax
c0026c23:	74 33                	je     c0026c58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0026c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c3e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026c41:	83 f8 01             	cmp    eax,0x1
c0026c44:	74 22                	je     c0026c68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0026c46:	83 ec 0c             	sub    esp,0xc
c0026c49:	68 50 87 02 c0       	push   0xc0028750
c0026c4e:	e8 3d 95 fe ff       	call   c0010190 <KePanic(char const*)>
c0026c53:	83 c4 10             	add    esp,0x10
c0026c56:	eb 10                	jmp    c0026c68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0026c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c5e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0026c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c65:	89 10                	mov    DWORD PTR [eax],edx
c0026c67:	90                   	nop
c0026c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026c6f:	8d 50 ff             	lea    edx,[eax-0x1]
c0026c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026c79:	8d 76 00             	lea    esi,[esi+0x0]
c0026c7c:	83 c4 0c             	add    esp,0xc
c0026c7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0026c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0026c80:	83 ec 0c             	sub    esp,0xc
c0026c83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026c88:	75 12                	jne    c0026c9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0026c8a:	83 ec 0c             	sub    esp,0xc
c0026c8d:	68 90 84 02 c0       	push   0xc0028490
c0026c92:	e8 f9 94 fe ff       	call   c0010190 <KePanic(char const*)>
c0026c97:	83 c4 10             	add    esp,0x10
c0026c9a:	66 90                	xchg   ax,ax
c0026c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ca2:	85 c0                	test   eax,eax
c0026ca4:	74 36                	je     c0026cdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0026ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026caa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026cad:	85 c0                	test   eax,eax
c0026caf:	74 2b                	je     c0026cdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0026cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026cb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026cbc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0026cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cc3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026cc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026cd1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026cd8:	eb 6a                	jmp    c0026d44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0026cda:	66 90                	xchg   ax,ax
c0026cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ce0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ce2:	85 c0                	test   eax,eax
c0026ce4:	75 4e                	jne    c0026d34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0026ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026ced:	85 c0                	test   eax,eax
c0026cef:	75 43                	jne    c0026d34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0026cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cf5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026cf9:	89 10                	mov    DWORD PTR [eax],edx
c0026cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026d03:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026d0d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026d1b:	85 c0                	test   eax,eax
c0026d1d:	74 25                	je     c0026d44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0026d1f:	83 ec 0c             	sub    esp,0xc
c0026d22:	68 b2 84 02 c0       	push   0xc00284b2
c0026d27:	e8 64 94 fe ff       	call   c0010190 <KePanic(char const*)>
c0026d2c:	83 c4 10             	add    esp,0x10
c0026d2f:	eb 13                	jmp    c0026d44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0026d31:	8d 76 00             	lea    esi,[esi+0x0]
c0026d34:	83 ec 0c             	sub    esp,0xc
c0026d37:	68 bc 84 02 c0       	push   0xc00284bc
c0026d3c:	e8 4f 94 fe ff       	call   c0010190 <KePanic(char const*)>
c0026d41:	83 c4 10             	add    esp,0x10
c0026d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026d4b:	8d 50 01             	lea    edx,[eax+0x1]
c0026d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026d55:	90                   	nop
c0026d56:	83 c4 0c             	add    esp,0xc
c0026d59:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0026d5c <ACPI::~ACPI()>:
c0026d5c:	83 ec 0c             	sub    esp,0xc
c0026d5f:	ba ac 8b 02 c0       	mov    edx,0xc0028bac
c0026d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d68:	89 10                	mov    DWORD PTR [eax],edx
c0026d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d6e:	83 ec 0c             	sub    esp,0xc
c0026d71:	50                   	push   eax
c0026d72:	e8 b7 30 fe ff       	call   c0009e2e <Device::~Device()>
c0026d77:	83 c4 10             	add    esp,0x10
c0026d7a:	90                   	nop
c0026d7b:	83 c4 0c             	add    esp,0xc
c0026d7e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0026d80 <ACPI::~ACPI()>:
c0026d80:	83 ec 0c             	sub    esp,0xc
c0026d83:	83 ec 0c             	sub    esp,0xc
c0026d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d8a:	e8 cd ff ff ff       	call   c0026d5c <ACPI::~ACPI()>
c0026d8f:	83 c4 10             	add    esp,0x10
c0026d92:	83 ec 08             	sub    esp,0x8
c0026d95:	68 64 12 00 00       	push   0x1264
c0026d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d9e:	e8 b1 6a fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c0026da3:	83 c4 10             	add    esp,0x10
c0026da6:	83 c4 0c             	add    esp,0xc
c0026da9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0026dac <LinkedList<Device>::~LinkedList()>:
c0026dac:	90                   	nop
c0026dad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0026db0 <LinkedList<Device>::isEmpty()>:
c0026db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026db4:	8b 00                	mov    eax,DWORD PTR [eax]
c0026db6:	85 c0                	test   eax,eax
c0026db8:	75 0e                	jne    c0026dc8 <LinkedList<Device>::isEmpty()+0x18>
c0026dba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026dbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026dc1:	85 c0                	test   eax,eax
c0026dc3:	75 03                	jne    c0026dc8 <LinkedList<Device>::isEmpty()+0x18>
c0026dc5:	b0 01                	mov    al,0x1
c0026dc7:	c3                   	ret    
c0026dc8:	b0 00                	mov    al,0x0
c0026dca:	90                   	nop
c0026dcb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0026dcc <LinkedList<Device>::getFirstElement()>:
c0026dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026dd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026dd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0026dd4 <LinkedList<Device>::removeFirst()>:
c0026dd4:	83 ec 0c             	sub    esp,0xc
c0026dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ddb:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ddd:	85 c0                	test   eax,eax
c0026ddf:	75 17                	jne    c0026df8 <LinkedList<Device>::removeFirst()+0x24>
c0026de1:	83 ec 0c             	sub    esp,0xc
c0026de4:	68 2c 87 02 c0       	push   0xc002872c
c0026de9:	e8 a2 93 fe ff       	call   c0010190 <KePanic(char const*)>
c0026dee:	83 c4 10             	add    esp,0x10
c0026df1:	e9 92 00 00 00       	jmp    c0026e88 <LinkedList<Device>::removeFirst()+0xb4>
c0026df6:	66 90                	xchg   ax,ax
c0026df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026dff:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0026e05:	85 c0                	test   eax,eax
c0026e07:	74 13                	je     c0026e1c <LinkedList<Device>::removeFirst()+0x48>
c0026e09:	83 ec 0c             	sub    esp,0xc
c0026e0c:	68 77 87 02 c0       	push   0xc0028777
c0026e11:	e8 7a 93 fe ff       	call   c0010190 <KePanic(char const*)>
c0026e16:	83 c4 10             	add    esp,0x10
c0026e19:	8d 76 00             	lea    esi,[esi+0x0]
c0026e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e20:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e22:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0026e28:	85 c0                	test   eax,eax
c0026e2a:	75 34                	jne    c0026e60 <LinkedList<Device>::removeFirst()+0x8c>
c0026e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026e48:	83 f8 01             	cmp    eax,0x1
c0026e4b:	74 27                	je     c0026e74 <LinkedList<Device>::removeFirst()+0xa0>
c0026e4d:	83 ec 0c             	sub    esp,0xc
c0026e50:	68 50 87 02 c0       	push   0xc0028750
c0026e55:	e8 36 93 fe ff       	call   c0010190 <KePanic(char const*)>
c0026e5a:	83 c4 10             	add    esp,0x10
c0026e5d:	eb 15                	jmp    c0026e74 <LinkedList<Device>::removeFirst()+0xa0>
c0026e5f:	90                   	nop
c0026e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e64:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e66:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0026e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e70:	89 10                	mov    DWORD PTR [eax],edx
c0026e72:	66 90                	xchg   ax,ax
c0026e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026e7b:	8d 50 ff             	lea    edx,[eax-0x1]
c0026e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026e85:	8d 76 00             	lea    esi,[esi+0x0]
c0026e88:	83 c4 0c             	add    esp,0xc
c0026e8b:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0026e8c <Computer::~Computer()>:
c0026e8c:	83 ec 0c             	sub    esp,0xc
c0026e8f:	ba 24 8d 02 c0       	mov    edx,0xc0028d24
c0026e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e98:	89 10                	mov    DWORD PTR [eax],edx
c0026e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e9e:	83 ec 0c             	sub    esp,0xc
c0026ea1:	50                   	push   eax
c0026ea2:	e8 87 2f fe ff       	call   c0009e2e <Device::~Device()>
c0026ea7:	83 c4 10             	add    esp,0x10
c0026eaa:	90                   	nop
c0026eab:	83 c4 0c             	add    esp,0xc
c0026eae:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0026eb0 <Computer::~Computer()>:
c0026eb0:	83 ec 0c             	sub    esp,0xc
c0026eb3:	83 ec 0c             	sub    esp,0xc
c0026eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026eba:	e8 cd ff ff ff       	call   c0026e8c <Computer::~Computer()>
c0026ebf:	83 c4 10             	add    esp,0x10
c0026ec2:	83 ec 08             	sub    esp,0x8
c0026ec5:	68 68 01 00 00       	push   0x168
c0026eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ece:	e8 81 69 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c0026ed3:	83 c4 10             	add    esp,0x10
c0026ed6:	83 c4 0c             	add    esp,0xc
c0026ed9:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0026eda <idleCommon()>:
c0026eda:	83 ec 0c             	sub    esp,0xc
c0026edd:	fa                   	cli    
c0026ede:	ff 05 30 33 03 c0    	inc    DWORD PTR ds:0xc0033330
c0026ee4:	e8 3f fe fe ff       	call   c0016d28 <schedule()>
c0026ee9:	f0 ff 0d 30 33 03 c0 	lock dec DWORD PTR ds:0xc0033330
c0026ef0:	83 3d 30 33 03 c0 00 	cmp    DWORD PTR ds:0xc0033330,0x0
c0026ef7:	75 01                	jne    c0026efa <idleCommon()+0x20>
c0026ef9:	fb                   	sti    
c0026efa:	83 c4 0c             	add    esp,0xc
c0026efd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0026efe <LinkedList<UnixFile>::~LinkedList()>:
c0026efe:	90                   	nop
c0026eff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0026f00 <LinkedList<UnixFile>::LinkedList()>:
c0026f00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026f0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026f15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f19:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026f35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026f39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026f40:	90                   	nop
c0026f41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0026f42 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0026f42:	83 ec 0c             	sub    esp,0xc
c0026f45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026f4a:	75 10                	jne    c0026f5c <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0026f4c:	83 ec 0c             	sub    esp,0xc
c0026f4f:	68 90 84 02 c0       	push   0xc0028490
c0026f54:	e8 37 92 fe ff       	call   c0010190 <KePanic(char const*)>
c0026f59:	83 c4 10             	add    esp,0x10
c0026f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f60:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f62:	85 c0                	test   eax,eax
c0026f64:	74 34                	je     c0026f9a <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0026f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026f6d:	85 c0                	test   eax,eax
c0026f6f:	74 29                	je     c0026f9a <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0026f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026f78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026f7c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026f87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026f91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026f98:	eb 65                	jmp    c0026fff <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0026f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026fa0:	85 c0                	test   eax,eax
c0026fa2:	75 4b                	jne    c0026fef <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0026fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026fab:	85 c0                	test   eax,eax
c0026fad:	75 40                	jne    c0026fef <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0026faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026fb7:	89 10                	mov    DWORD PTR [eax],edx
c0026fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fbd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026fc1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026fcb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026fd9:	85 c0                	test   eax,eax
c0026fdb:	74 22                	je     c0026fff <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0026fdd:	83 ec 0c             	sub    esp,0xc
c0026fe0:	68 b2 84 02 c0       	push   0xc00284b2
c0026fe5:	e8 a6 91 fe ff       	call   c0010190 <KePanic(char const*)>
c0026fea:	83 c4 10             	add    esp,0x10
c0026fed:	eb 10                	jmp    c0026fff <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0026fef:	83 ec 0c             	sub    esp,0xc
c0026ff2:	68 bc 84 02 c0       	push   0xc00284bc
c0026ff7:	e8 94 91 fe ff       	call   c0010190 <KePanic(char const*)>
c0026ffc:	83 c4 10             	add    esp,0x10
c0026fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027003:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027006:	8d 50 01             	lea    edx,[eax+0x1]
c0027009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002700d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027010:	90                   	nop
c0027011:	83 c4 0c             	add    esp,0xc
c0027014:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027016 <LinkedList<UnixFile>::getFirstElement()>:
c0027016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002701a:	8b 00                	mov    eax,DWORD PTR [eax]
c002701c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002701e <LinkedList<UnixFile>::removeFirst()>:
c002701e:	83 ec 0c             	sub    esp,0xc
c0027021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027025:	8b 00                	mov    eax,DWORD PTR [eax]
c0027027:	85 c0                	test   eax,eax
c0027029:	75 12                	jne    c002703d <LinkedList<UnixFile>::removeFirst()+0x1f>
c002702b:	83 ec 0c             	sub    esp,0xc
c002702e:	68 2c 87 02 c0       	push   0xc002872c
c0027033:	e8 58 91 fe ff       	call   c0010190 <KePanic(char const*)>
c0027038:	83 c4 10             	add    esp,0x10
c002703b:	eb 7e                	jmp    c00270bb <LinkedList<UnixFile>::removeFirst()+0x9d>
c002703d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027041:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027044:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027047:	85 c0                	test   eax,eax
c0027049:	74 10                	je     c002705b <LinkedList<UnixFile>::removeFirst()+0x3d>
c002704b:	83 ec 0c             	sub    esp,0xc
c002704e:	68 77 87 02 c0       	push   0xc0028777
c0027053:	e8 38 91 fe ff       	call   c0010190 <KePanic(char const*)>
c0027058:	83 c4 10             	add    esp,0x10
c002705b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002705f:	8b 00                	mov    eax,DWORD PTR [eax]
c0027061:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027064:	85 c0                	test   eax,eax
c0027066:	75 33                	jne    c002709b <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002706c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027076:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002707d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027081:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027084:	83 f8 01             	cmp    eax,0x1
c0027087:	74 21                	je     c00270aa <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027089:	83 ec 0c             	sub    esp,0xc
c002708c:	68 50 87 02 c0       	push   0xc0028750
c0027091:	e8 fa 90 fe ff       	call   c0010190 <KePanic(char const*)>
c0027096:	83 c4 10             	add    esp,0x10
c0027099:	eb 0f                	jmp    c00270aa <LinkedList<UnixFile>::removeFirst()+0x8c>
c002709b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002709f:	8b 00                	mov    eax,DWORD PTR [eax]
c00270a1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00270a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270a8:	89 10                	mov    DWORD PTR [eax],edx
c00270aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00270b1:	8d 50 ff             	lea    edx,[eax-0x1]
c00270b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270b8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00270bb:	83 c4 0c             	add    esp,0xc
c00270be:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00270c0 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00270c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00270c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00270c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00270c8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00270c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00270cc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00270cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00270d0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00270d0:	90                   	nop
c00270d1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00270d4 <ThreadControlBlock::ThreadControlBlock()>:
c00270d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00270d8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00270df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00270e3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00270ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00270ee:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00270f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00270f9:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0027100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027104:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c002710b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002710f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0027113:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027117:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002711b:	90                   	nop
c002711c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0027120 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0027120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027124:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002712a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002712e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027135:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027139:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027144:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002714a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002714e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027155:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027159:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027160:	90                   	nop
c0027161:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027162 <IOAPIC::~IOAPIC()>:
c0027162:	83 ec 0c             	sub    esp,0xc
c0027165:	ba 64 a1 02 c0       	mov    edx,0xc002a164
c002716a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002716e:	89 10                	mov    DWORD PTR [eax],edx
c0027170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027174:	83 ec 0c             	sub    esp,0xc
c0027177:	50                   	push   eax
c0027178:	e8 b1 2c fe ff       	call   c0009e2e <Device::~Device()>
c002717d:	83 c4 10             	add    esp,0x10
c0027180:	90                   	nop
c0027181:	83 c4 0c             	add    esp,0xc
c0027184:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027186 <IOAPIC::~IOAPIC()>:
c0027186:	83 ec 0c             	sub    esp,0xc
c0027189:	83 ec 0c             	sub    esp,0xc
c002718c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027190:	e8 cd ff ff ff       	call   c0027162 <IOAPIC::~IOAPIC()>
c0027195:	83 c4 10             	add    esp,0x10
c0027198:	83 ec 08             	sub    esp,0x8
c002719b:	68 68 01 00 00       	push   0x168
c00271a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271a4:	e8 ab 66 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c00271a9:	83 c4 10             	add    esp,0x10
c00271ac:	83 c4 0c             	add    esp,0xc
c00271af:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00271b0 <CPU::~CPU()>:
c00271b0:	83 ec 0c             	sub    esp,0xc
c00271b3:	ba ec a4 02 c0       	mov    edx,0xc002a4ec
c00271b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271bc:	89 10                	mov    DWORD PTR [eax],edx
c00271be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271c2:	83 ec 0c             	sub    esp,0xc
c00271c5:	50                   	push   eax
c00271c6:	e8 63 2c fe ff       	call   c0009e2e <Device::~Device()>
c00271cb:	83 c4 10             	add    esp,0x10
c00271ce:	90                   	nop
c00271cf:	83 c4 0c             	add    esp,0xc
c00271d2:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00271d4 <CPU::~CPU()>:
c00271d4:	83 ec 0c             	sub    esp,0xc
c00271d7:	83 ec 0c             	sub    esp,0xc
c00271da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271de:	e8 cd ff ff ff       	call   c00271b0 <CPU::~CPU()>
c00271e3:	83 c4 10             	add    esp,0x10
c00271e6:	83 ec 08             	sub    esp,0x8
c00271e9:	68 78 11 00 00       	push   0x1178
c00271ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271f2:	e8 5d 66 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c00271f7:	83 c4 10             	add    esp,0x10
c00271fa:	83 c4 0c             	add    esp,0xc
c00271fd:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00271fe <PCI::~PCI()>:
c00271fe:	83 ec 0c             	sub    esp,0xc
c0027201:	ba 50 aa 02 c0       	mov    edx,0xc002aa50
c0027206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002720a:	89 10                	mov    DWORD PTR [eax],edx
c002720c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027210:	83 ec 0c             	sub    esp,0xc
c0027213:	50                   	push   eax
c0027214:	e8 5b 1c fe ff       	call   c0008e74 <Bus::~Bus()>
c0027219:	83 c4 10             	add    esp,0x10
c002721c:	90                   	nop
c002721d:	83 c4 0c             	add    esp,0xc
c0027220:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027222 <PCI::~PCI()>:
c0027222:	83 ec 0c             	sub    esp,0xc
c0027225:	83 ec 0c             	sub    esp,0xc
c0027228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002722c:	e8 cd ff ff ff       	call   c00271fe <PCI::~PCI()>
c0027231:	83 c4 10             	add    esp,0x10
c0027234:	83 ec 08             	sub    esp,0x8
c0027237:	68 5c 01 00 00       	push   0x15c
c002723c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027240:	e8 0f 66 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c0027245:	83 c4 10             	add    esp,0x10
c0027248:	83 c4 0c             	add    esp,0xc
c002724b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002724c <IDE::~IDE()>:
c002724c:	83 ec 0c             	sub    esp,0xc
c002724f:	ba a0 ab 02 c0       	mov    edx,0xc002aba0
c0027254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027258:	89 10                	mov    DWORD PTR [eax],edx
c002725a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002725e:	83 ec 0c             	sub    esp,0xc
c0027261:	50                   	push   eax
c0027262:	e8 55 30 fe ff       	call   c000a2bc <HardDiskController::~HardDiskController()>
c0027267:	83 c4 10             	add    esp,0x10
c002726a:	90                   	nop
c002726b:	83 c4 0c             	add    esp,0xc
c002726e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027270 <IDE::~IDE()>:
c0027270:	83 ec 0c             	sub    esp,0xc
c0027273:	83 ec 0c             	sub    esp,0xc
c0027276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002727a:	e8 cd ff ff ff       	call   c002724c <IDE::~IDE()>
c002727f:	83 c4 10             	add    esp,0x10
c0027282:	83 ec 08             	sub    esp,0x8
c0027285:	68 70 02 00 00       	push   0x270
c002728a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002728e:	e8 c1 65 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c0027293:	83 c4 10             	add    esp,0x10
c0027296:	83 c4 0c             	add    esp,0xc
c0027299:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002729a <SATABus::~SATABus()>:
c002729a:	83 ec 0c             	sub    esp,0xc
c002729d:	ba f0 ab 02 c0       	mov    edx,0xc002abf0
c00272a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272a6:	89 10                	mov    DWORD PTR [eax],edx
c00272a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272ac:	83 ec 0c             	sub    esp,0xc
c00272af:	50                   	push   eax
c00272b0:	e8 07 30 fe ff       	call   c000a2bc <HardDiskController::~HardDiskController()>
c00272b5:	83 c4 10             	add    esp,0x10
c00272b8:	90                   	nop
c00272b9:	83 c4 0c             	add    esp,0xc
c00272bc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00272be <SATABus::~SATABus()>:
c00272be:	83 ec 0c             	sub    esp,0xc
c00272c1:	83 ec 0c             	sub    esp,0xc
c00272c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272c8:	e8 cd ff ff ff       	call   c002729a <SATABus::~SATABus()>
c00272cd:	83 c4 10             	add    esp,0x10
c00272d0:	83 ec 08             	sub    esp,0x8
c00272d3:	68 64 01 00 00       	push   0x164
c00272d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272dc:	e8 73 65 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c00272e1:	83 c4 10             	add    esp,0x10
c00272e4:	83 c4 0c             	add    esp,0xc
c00272e7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00272e8 <ATA::~ATA()>:
c00272e8:	83 ec 0c             	sub    esp,0xc
c00272eb:	ba d8 ac 02 c0       	mov    edx,0xc002acd8
c00272f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272f4:	89 10                	mov    DWORD PTR [eax],edx
c00272f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272fa:	83 ec 0c             	sub    esp,0xc
c00272fd:	50                   	push   eax
c00272fe:	e8 9b 30 fe ff       	call   c000a39e <PhysicalDisk::~PhysicalDisk()>
c0027303:	83 c4 10             	add    esp,0x10
c0027306:	90                   	nop
c0027307:	83 c4 0c             	add    esp,0xc
c002730a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002730c <ATA::~ATA()>:
c002730c:	83 ec 0c             	sub    esp,0xc
c002730f:	83 ec 0c             	sub    esp,0xc
c0027312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027316:	e8 cd ff ff ff       	call   c00272e8 <ATA::~ATA()>
c002731b:	83 c4 10             	add    esp,0x10
c002731e:	83 ec 08             	sub    esp,0x8
c0027321:	68 8c 01 00 00       	push   0x18c
c0027326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002732a:	e8 25 65 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c002732f:	83 c4 10             	add    esp,0x10
c0027332:	83 c4 0c             	add    esp,0xc
c0027335:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027336 <ATAPI::~ATAPI()>:
c0027336:	83 ec 0c             	sub    esp,0xc
c0027339:	ba 20 ad 02 c0       	mov    edx,0xc002ad20
c002733e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027342:	89 10                	mov    DWORD PTR [eax],edx
c0027344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027348:	83 ec 0c             	sub    esp,0xc
c002734b:	50                   	push   eax
c002734c:	e8 4d 30 fe ff       	call   c000a39e <PhysicalDisk::~PhysicalDisk()>
c0027351:	83 c4 10             	add    esp,0x10
c0027354:	90                   	nop
c0027355:	83 c4 0c             	add    esp,0xc
c0027358:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002735a <ATAPI::~ATAPI()>:
c002735a:	83 ec 0c             	sub    esp,0xc
c002735d:	83 ec 0c             	sub    esp,0xc
c0027360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027364:	e8 cd ff ff ff       	call   c0027336 <ATAPI::~ATAPI()>
c0027369:	83 c4 10             	add    esp,0x10
c002736c:	83 ec 08             	sub    esp,0x8
c002736f:	68 84 01 00 00       	push   0x184
c0027374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027378:	e8 d7 64 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c002737d:	83 c4 10             	add    esp,0x10
c0027380:	83 c4 0c             	add    esp,0xc
c0027383:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027384 <SATA::~SATA()>:
c0027384:	83 ec 0c             	sub    esp,0xc
c0027387:	ba e0 ad 02 c0       	mov    edx,0xc002ade0
c002738c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027390:	89 10                	mov    DWORD PTR [eax],edx
c0027392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027396:	83 ec 0c             	sub    esp,0xc
c0027399:	50                   	push   eax
c002739a:	e8 ff 2f fe ff       	call   c000a39e <PhysicalDisk::~PhysicalDisk()>
c002739f:	83 c4 10             	add    esp,0x10
c00273a2:	90                   	nop
c00273a3:	83 c4 0c             	add    esp,0xc
c00273a6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00273a8 <SATA::~SATA()>:
c00273a8:	83 ec 0c             	sub    esp,0xc
c00273ab:	83 ec 0c             	sub    esp,0xc
c00273ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00273b2:	e8 cd ff ff ff       	call   c0027384 <SATA::~SATA()>
c00273b7:	83 c4 10             	add    esp,0x10
c00273ba:	83 ec 08             	sub    esp,0x8
c00273bd:	68 7c 01 00 00       	push   0x17c
c00273c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00273c6:	e8 89 64 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c00273cb:	83 c4 10             	add    esp,0x10
c00273ce:	83 c4 0c             	add    esp,0xc
c00273d1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00273d2 <SATAPI::~SATAPI()>:
c00273d2:	83 ec 0c             	sub    esp,0xc
c00273d5:	ba 04 af 02 c0       	mov    edx,0xc002af04
c00273da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273de:	89 10                	mov    DWORD PTR [eax],edx
c00273e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e4:	83 ec 0c             	sub    esp,0xc
c00273e7:	50                   	push   eax
c00273e8:	e8 b1 2f fe ff       	call   c000a39e <PhysicalDisk::~PhysicalDisk()>
c00273ed:	83 c4 10             	add    esp,0x10
c00273f0:	90                   	nop
c00273f1:	83 c4 0c             	add    esp,0xc
c00273f4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00273f6 <SATAPI::~SATAPI()>:
c00273f6:	83 ec 0c             	sub    esp,0xc
c00273f9:	83 ec 0c             	sub    esp,0xc
c00273fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027400:	e8 cd ff ff ff       	call   c00273d2 <SATAPI::~SATAPI()>
c0027405:	83 c4 10             	add    esp,0x10
c0027408:	83 ec 08             	sub    esp,0x8
c002740b:	68 84 01 00 00       	push   0x184
c0027410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027414:	e8 3b 64 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c0027419:	83 c4 10             	add    esp,0x10
c002741c:	83 c4 0c             	add    esp,0xc
c002741f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027420 <APICTimer::~APICTimer()>:
c0027420:	83 ec 0c             	sub    esp,0xc
c0027423:	ba 58 af 02 c0       	mov    edx,0xc002af58
c0027428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002742c:	89 10                	mov    DWORD PTR [eax],edx
c002742e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027432:	83 ec 0c             	sub    esp,0xc
c0027435:	50                   	push   eax
c0027436:	e8 fd 40 fe ff       	call   c000b538 <Timer::~Timer()>
c002743b:	83 c4 10             	add    esp,0x10
c002743e:	90                   	nop
c002743f:	83 c4 0c             	add    esp,0xc
c0027442:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027444 <APICTimer::~APICTimer()>:
c0027444:	83 ec 0c             	sub    esp,0xc
c0027447:	83 ec 0c             	sub    esp,0xc
c002744a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002744e:	e8 cd ff ff ff       	call   c0027420 <APICTimer::~APICTimer()>
c0027453:	83 c4 10             	add    esp,0x10
c0027456:	83 ec 08             	sub    esp,0x8
c0027459:	68 60 01 00 00       	push   0x160
c002745e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027462:	e8 ed 63 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c0027467:	83 c4 10             	add    esp,0x10
c002746a:	83 c4 0c             	add    esp,0xc
c002746d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027470 <PIT::~PIT()>:
c0027470:	83 ec 0c             	sub    esp,0xc
c0027473:	ba a8 af 02 c0       	mov    edx,0xc002afa8
c0027478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002747c:	89 10                	mov    DWORD PTR [eax],edx
c002747e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027482:	83 ec 0c             	sub    esp,0xc
c0027485:	50                   	push   eax
c0027486:	e8 ad 40 fe ff       	call   c000b538 <Timer::~Timer()>
c002748b:	83 c4 10             	add    esp,0x10
c002748e:	90                   	nop
c002748f:	83 c4 0c             	add    esp,0xc
c0027492:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027494 <PIT::~PIT()>:
c0027494:	83 ec 0c             	sub    esp,0xc
c0027497:	83 ec 0c             	sub    esp,0xc
c002749a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002749e:	e8 cd ff ff ff       	call   c0027470 <PIT::~PIT()>
c00274a3:	83 c4 10             	add    esp,0x10
c00274a6:	83 ec 08             	sub    esp,0x8
c00274a9:	68 5c 01 00 00       	push   0x15c
c00274ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00274b2:	e8 9d 63 fe ff       	call   c000d854 <operator delete(void*, unsigned long)>
c00274b7:	83 c4 10             	add    esp,0x10
c00274ba:	83 c4 0c             	add    esp,0xc
c00274bd:	c3                   	ret    

Disassembly of section userkernel:

c002e000 <KiDefaultSignalHandlerAbort(int)>:
c002e000:	57                   	push   edi
c002e001:	b9 07 00 00 00       	mov    ecx,0x7
c002e006:	56                   	push   esi
c002e007:	be 0b 92 02 c0       	mov    esi,0xc002920b
c002e00c:	83 ec 24             	sub    esp,0x24
c002e00f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002e013:	fc                   	cld    
c002e014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002e016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002e01a:	50                   	push   eax
c002e01b:	6a 00                	push   0x0
c002e01d:	6a 38                	push   0x38
c002e01f:	6a 01                	push   0x1
c002e021:	e8 2c 00 00 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002e026:	83 c4 34             	add    esp,0x34
c002e029:	5e                   	pop    esi
c002e02a:	5f                   	pop    edi
c002e02b:	c3                   	ret    

c002e02c <KiDefaultSignalHandlerTerminate(int)>:
c002e02c:	57                   	push   edi
c002e02d:	b9 08 00 00 00       	mov    ecx,0x8
c002e032:	56                   	push   esi
c002e033:	be 27 92 02 c0       	mov    esi,0xc0029227
c002e038:	83 ec 24             	sub    esp,0x24
c002e03b:	89 e7                	mov    edi,esp
c002e03d:	fc                   	cld    
c002e03e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002e040:	54                   	push   esp
c002e041:	6a 00                	push   0x0
c002e043:	6a 37                	push   0x37
c002e045:	6a 01                	push   0x1
c002e047:	e8 06 00 00 00       	call   c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002e04c:	83 c4 34             	add    esp,0x34
c002e04f:	5e                   	pop    esi
c002e050:	5f                   	pop    edi
c002e051:	c3                   	ret    

c002e052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c002e052:	53                   	push   ebx
c002e053:	83 ec 10             	sub    esp,0x10
c002e056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002e05a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002e05e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002e062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002e066:	cd 60                	int    0x60
c002e068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e06c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002e074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002e078:	83 c4 10             	add    esp,0x10
c002e07b:	5b                   	pop    ebx
c002e07c:	c3                   	ret    

Disassembly of section align_previous:

c002f000 <DO_NOT_DELETE()>:
c002f000:	c3                   	ret    
