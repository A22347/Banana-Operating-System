
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 aa fe 00 00       	call   c000feca <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c8 6e 02 c0       	mov    eax,0xc0026ec8
c0000025:	3d c8 6e 02 c0       	cmp    eax,0xc0026ec8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c8 6e 02 c0       	push   0xc0026ec8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c8 6e 02 c0       	mov    eax,0xc0026ec8
c0000051:	2d c8 6e 02 c0       	sub    eax,0xc0026ec8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c8 6e 02 c0       	push   0xc0026ec8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 90 02 c0 00 	cmp    BYTE PTR ds:0xc00290c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb e0 28 02 c0       	mov    ebx,0xc00228e0
c0000097:	81 eb dc 28 02 c0    	sub    ebx,0xc00228dc
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be dc 28 02 c0       	mov    esi,0xc00228dc
c00000a6:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 90 02 c0       	mov    ds:0xc00290c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c8 6e 02 c0       	push   0xc0026ec8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 90 02 c0 01 	mov    BYTE PTR ds:0xc00290c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 90 02 c0       	push   0xc00290c8
c0000108:	68 c8 6e 02 c0       	push   0xc0026ec8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 cf 65 01 00       	call   c001687c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 36 45 01 00       	call   c00147fb <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 ad 65 01 00       	call   c001687c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 0e 6b 01 00       	call   c0016dfc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 7d 70 01 00       	call   c0017374 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 f0 02 c0 	lgdtd  ds:0xc002f0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 62 ef 00 00       	jmp    c000f2e1 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 90 02 c0       	mov    ds:0xc00290e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 90 02 c0    	mov    DWORD PTR ds:0xc00290e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 90 02 c0    	mov    ebx,DWORD PTR ds:0xc00290e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 00 29 02 c0 02 	test   BYTE PTR [edx-0x3ffdd700],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 00 29 02 c0 01 	test   BYTE PTR [edx-0x3ffdd700],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 00 29 02 c0 08 	test   BYTE PTR [edx-0x3ffdd700],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 00 29 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd700],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 00 29 02 c0 01 	test   BYTE PTR [edx-0x3ffdd700],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 91 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 91 02 c0    	mov    ecx,DWORD PTR ds:0xc002913c
c0000df7:	c7 42 0c 34 91 02 c0 	mov    DWORD PTR [edx+0xc],0xc0029134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 91 02 c0 02 	test   BYTE PTR ds:0xc0029100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 94 02 c0    	dec    DWORD PTR ds:0xc0029450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 94 02 c0    	sub    DWORD PTR ds:0xc0029464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 ad ec 00 00       	call   c000fb0d <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 ba eb 00 00       	call   c000faaf <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 99 ea 00 00       	call   c000fa79 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 94 ea 00 00       	call   c000faaf <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 40 e9 00 00       	call   c000fa79 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 26 e9 00 00       	call   c000fa79 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 fc e8 00 00       	call   c000fa79 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 91 02 c0       	mov    eax,0xc0029100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 91 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 91 02 c0 	lea    edx,[eax*8-0x3ffd6ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029140
c00012e5:	81 fb 34 91 02 c0    	cmp    ebx,0xc0029134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 91 02 c0       	cmp    eax,0xc0029134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 91 02 c0    	cmp    DWORD PTR ds:0xc0029130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 91 02 c0       	mov    ds:0xc002913c,eax
c0001321:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001326:	a3 30 91 02 c0       	mov    ds:0xc0029130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c0001334:	c7 40 0c 34 91 02 c0 	mov    DWORD PTR [eax+0xc],0xc0029134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 90 02 c0 	lea    ebp,[edx*4-0x3ffd6f08]
c0001385:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 91 02 c0 	lea    ecx,[edx*4-0x3ffd6f00]
c00013a0:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 94 02 c0 	or     DWORD PTR [edi*4-0x3ffd6bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 91 02 c0 	lea    eax,[eax*8-0x3ffd6ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,ecx
c000145a:	89 0d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,ecx
c0001460:	c7 41 08 34 91 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0029134
c0001467:	c7 41 0c 34 91 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0029134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 91 02 c0 	lea    edx,[ecx*8-0x3ffd6ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 91 02 c0 	lea    edx,[eax*4-0x3ffd6ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 94 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edi
c000152d:	89 3d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edi
c0001533:	c7 47 08 34 91 02 c0 	mov    DWORD PTR [edi+0x8],0xc0029134
c000153a:	c7 47 0c 34 91 02 c0 	mov    DWORD PTR [edi+0xc],0xc0029134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 91 02 c0    	mov    DWORD PTR ds:0xc0029130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 91 02 c0       	mov    edx,0xc0029100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 94 02 c0    	push   DWORD PTR ds:0xc002945c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 94 02 c0       	mov    eax,ds:0xc002945c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 91 02 c0 00 	cmp    DWORD PTR ds:0xc002912c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 91 02 c0       	mov    eax,0xc0029134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 94 02 c0       	cmp    eax,0xc002942c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 04 2a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd5fc]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 91 02 c0       	mov    ds:0xc0029100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 94 02 c0    	mov    DWORD PTR ds:0xc0029444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 94 02 c0    	mov    DWORD PTR ds:0xc0029448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 94 02 c0    	mov    DWORD PTR ds:0xc002944c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 00 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0400]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 05 a6 01 00       	jmp    c001c590 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 00 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0400]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 2f a6 01 00       	jmp    c001c5d0 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 00 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0400]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 50 a6 01 00       	jmp    c001c610 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 60 2b 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd4a0]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 60 2b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd4a0]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba a0 5a 02 c0       	mov    edx,0xc0025aa0
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 1c 2a 02 c0       	mov    edx,0xc0022a1c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 94 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 94 02 c0    	mov    ax,ds:0xc0029480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 94 02 c0    	mov    ds:0xc0029480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 22 2a 02 c0       	mov    eax,0xc0022a22
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf e0 2a 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd520]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 2b 2a 02 c0       	mov    eax,0xc0022a2b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 60 2b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd4a0]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 b0 2a 02 c0       	mov    eax,0xc0022ab0
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb a0 2a 02 c0       	mov    ebx,0xc0022aa0
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 80 2a 02 c0       	mov    eax,0xc0022a80
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 90 2a 02 c0       	mov    eax,0xc0022a90
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 32 2a 02 c0       	mov    edx,0xc0022a32
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 3e 2a 02 c0       	mov    edx,0xc0022a3e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 52 2a 02 c0       	mov    edx,0xc0022a52
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 78 9d 00 00       	call   c000fb8f <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 70 9d 00 00       	call   c000fb9f <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 80 2e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022e80
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 80 2e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022e80
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 80 2c 02 c0       	mov    eax,0xc0022c80
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 c0 2b 02 c0       	mov    eax,0xc0022bc0
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 80 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd480]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 80 2f 02 c0       	push   0xc0022f80
c0006303:	e8 24 6c 01 00       	call   c001cf2c <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 8e 2f 02 c0       	push   0xc0022f8e
c000633b:	e8 ec 6b 01 00       	call   c001cf2c <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 95 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd6a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 90 02 c0 	movsx  eax,BYTE PTR ds:0xc0029060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 55 6b 01 00       	call   c001ced0 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 90 02 c0       	mov    eax,0xc0029080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 90 02 c0       	mov    eax,0xc0029020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 9e 02 c0    	mov    ebp,DWORD PTR ds:0xc0029eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 9d 2f 02 c0       	push   0xc0022f9d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 9e 02 c0       	mov    ecx,0xc0029e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 95 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd6ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd6ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6abc],esi
c0006746:	89 87 40 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ac0],eax
c000674c:	c7 87 48 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6a30],0x0
c0006768:	89 87 4c 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 95 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 95 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd6a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c00067e1:	8b 8d 4c 95 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd6ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 95 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd6ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 90 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 95 02 c0    	add    DWORD PTR [ebp-0x3ffd6ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 95 02 c0    	lea    ecx,[ebp-0x3ffd6ac0]
c00068d9:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 95 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd6ab4]
c0006917:	05 40 95 02 c0       	add    eax,0xc0029540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 95 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd6ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 95 02 c0    	lea    edi,[eax-0x3ffd6ac0]
c00069d6:	83 b8 40 95 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd6ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 a0 2f 02 c0       	push   0xc0022fa0
c00069fa:	e8 2d 65 01 00       	call   c001cf2c <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 41 65 01 00       	call   c001cf48 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 a5 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fa5
c0006a14:	e8 13 65 01 00       	call   c001cf2c <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6ac0]
c0006a20:	e8 23 65 01 00       	call   c001cf48 <iso_kprintfd>
c0006a25:	c7 04 24 ab 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fab
c0006a2c:	e8 fb 64 01 00       	call   c001cf2c <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6abc]
c0006a38:	e8 0b 65 01 00       	call   c001cf48 <iso_kprintfd>
c0006a3d:	c7 04 24 b1 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fb1
c0006a44:	e8 e3 64 01 00       	call   c001cf2c <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6a30]
c0006a50:	e8 f3 64 01 00       	call   c001cf48 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 95 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd6ab8]
c0006ab6:	81 c2 40 95 02 c0    	add    edx,0xc0029540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 95 02 c0    	lea    ebp,[eax-0x3ffd6aa8]
c0006b12:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 95 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd6aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 9d 2f 02 c0       	push   0xc0022f9d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 95 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd6aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6ab0],eax
c0006bee:	89 93 54 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6aac],edx
c0006bf4:	81 c3 40 95 02 c0    	add    ebx,0xc0029540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 95 02 c0       	add    eax,0xc0029550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 ba 2f 02 c0       	push   0xc0022fba
c0006c19:	e8 0e 63 01 00       	call   c001cf2c <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 90 02 c0       	mov    ds:0xc0029060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb4,0x0
c0006c4e:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 c5 2f 02 c0       	push   0xc0022fc5
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 9e 02 c0       	mov    ds:0xc0029eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 cc 2f 02 c0       	push   0xc0022fcc
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 90 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd6f80]
c0006cec:	bf 80 9e 02 c0       	mov    edi,0xc0029e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 9e 02 c0       	mov    eax,0xc0029e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 9e 02 c0       	mov    ds:0xc0029ea8,eax
c0006d0f:	b8 8a 9e 02 c0       	mov    eax,0xc0029e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 d3 2f 02 c0       	push   0xc0022fd3
c0006d30:	e8 f7 61 01 00       	call   c001cf2c <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 de 2f 02 c0       	push   0xc0022fde
c0006d4b:	e8 dc 61 01 00       	call   c001cf2c <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 95 02 c0       	push   0xc0029540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0029540,0xffffffff
c0006d75:	e8 15 8e 00 00       	call   c000fb8f <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 9e 02 c0       	mov    ds:0xc0029eb0,eax
c0006d86:	e8 04 8e 00 00       	call   c000fb8f <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 ef 8d 00 00       	call   c000fb8f <malloc>
c0006da0:	89 04 9d 80 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 d6 8d 00 00       	call   c000fb8f <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6f80]
c0006de6:	e8 b4 8d 00 00       	call   c000fb9f <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 a6 8d 00 00       	call   c000fb9f <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 9e 02 c0       	mov    eax,ds:0xc0029eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 8c 8d 00 00       	call   c000fb9f <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 77 8d 00 00       	call   c000fb9f <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029520,0x0
c0006e35:	c7 05 b0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be f0 2f 02 c0       	mov    esi,0xc0022ff0
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 ef 2f 02 c0       	mov    al,ds:0xc0022fef
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	53                   	push   ebx
c0006ee7:	83 ec 14             	sub    esp,0x14
c0006eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006eee:	6a 10                	push   0x10
c0006ef0:	e8 e7 63 00 00       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006ef5:	83 c4 10             	add    esp,0x10
c0006ef8:	84 c0                	test   al,al
c0006efa:	75 12                	jne    c0006f0e <Dbg::logc(char)+0x28>
c0006efc:	ba fd 03 00 00       	mov    edx,0x3fd
c0006f01:	ec                   	in     al,dx
c0006f02:	a8 20                	test   al,0x20
c0006f04:	74 fb                	je     c0006f01 <Dbg::logc(char)+0x1b>
c0006f06:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f0b:	88 d8                	mov    al,bl
c0006f0d:	ee                   	out    dx,al
c0006f0e:	83 c4 08             	add    esp,0x8
c0006f11:	5b                   	pop    ebx
c0006f12:	c3                   	ret    

c0006f13 <Dbg::logs(char*)>:
c0006f13:	53                   	push   ebx
c0006f14:	83 ec 08             	sub    esp,0x8
c0006f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	74 16                	je     c0006f38 <Dbg::logs(char*)+0x25>
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	83 c3 01             	add    ebx,0x1
c0006f28:	50                   	push   eax
c0006f29:	e8 b8 ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f2e:	83 c4 10             	add    esp,0x10
c0006f31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f34:	85 c0                	test   eax,eax
c0006f36:	75 ea                	jne    c0006f22 <Dbg::logs(char*)+0xf>
c0006f38:	83 c4 08             	add    esp,0x8
c0006f3b:	5b                   	pop    ebx
c0006f3c:	c3                   	ret    

c0006f3d <Dbg::logWriteInt(unsigned int)>:
c0006f3d:	83 ec 1c             	sub    esp,0x1c
c0006f40:	6a 0a                	push   0xa
c0006f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f46:	50                   	push   eax
c0006f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f4b:	50                   	push   eax
c0006f4c:	e8 f5 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f51:	50                   	push   eax
c0006f52:	e8 bc ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f57:	83 c4 2c             	add    esp,0x2c
c0006f5a:	c3                   	ret    

c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f5b:	83 ec 1c             	sub    esp,0x1c
c0006f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f62:	50                   	push   eax
c0006f63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f67:	50                   	push   eax
c0006f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f6c:	52                   	push   edx
c0006f6d:	e8 d4 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f72:	50                   	push   eax
c0006f73:	e8 9b ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f78:	83 c4 2c             	add    esp,0x2c
c0006f7b:	c3                   	ret    

c0006f7c <Dbg::kprintf(char const*, ...)>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 1c             	sub    esp,0x1c
c0006f83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f87:	85 db                	test   ebx,ebx
c0006f89:	0f 84 4c 01 00 00    	je     c00070db <Dbg::kprintf(char const*, ...)+0x15f>
c0006f8f:	83 ec 0c             	sub    esp,0xc
c0006f92:	6a 10                	push   0x10
c0006f94:	e8 43 63 00 00       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f99:	83 c4 10             	add    esp,0x10
c0006f9c:	84 c0                	test   al,al
c0006f9e:	74 08                	je     c0006fa8 <Dbg::kprintf(char const*, ...)+0x2c>
c0006fa0:	83 c4 1c             	add    esp,0x1c
c0006fa3:	5b                   	pop    ebx
c0006fa4:	5e                   	pop    esi
c0006fa5:	5f                   	pop    edi
c0006fa6:	5d                   	pop    ebp
c0006fa7:	c3                   	ret    
c0006fa8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006fac:	31 ff                	xor    edi,edi
c0006fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fb5:	85 c0                	test   eax,eax
c0006fb7:	74 e7                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0006fb9:	8d 77 01             	lea    esi,[edi+0x1]
c0006fbc:	83 f8 25             	cmp    eax,0x25
c0006fbf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fc2:	75 4c                	jne    c0007010 <Dbg::kprintf(char const*, ...)+0x94>
c0006fc4:	83 c7 02             	add    edi,0x2
c0006fc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fca:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fcd:	83 e8 25             	sub    eax,0x25
c0006fd0:	0f b6 c0             	movzx  eax,al
c0006fd3:	83 f8 53             	cmp    eax,0x53
c0006fd6:	0f 87 e1 00 00 00    	ja     c00070bd <Dbg::kprintf(char const*, ...)+0x141>
c0006fdc:	ff 24 85 38 30 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcfc8]
c0006fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fe7:	83 ec 0c             	sub    esp,0xc
c0006fea:	89 c8                	mov    eax,ecx
c0006fec:	83 c1 04             	add    ecx,0x4
c0006fef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ff5:	50                   	push   eax
c0006ff6:	e8 42 ff ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0006ffb:	83 c4 10             	add    esp,0x10
c0006ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007001:	85 c0                	test   eax,eax
c0007003:	74 9b                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0007005:	8d 77 01             	lea    esi,[edi+0x1]
c0007008:	83 f8 25             	cmp    eax,0x25
c000700b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000700e:	74 b4                	je     c0006fc4 <Dbg::kprintf(char const*, ...)+0x48>
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 f7                	mov    edi,esi
c0007015:	50                   	push   eax
c0007016:	89 ee                	mov    esi,ebp
c0007018:	e8 c9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	eb dc                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c0007022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007026:	83 ec 0c             	sub    esp,0xc
c0007029:	89 c8                	mov    eax,ecx
c000702b:	83 c1 04             	add    ecx,0x4
c000702e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007030:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007034:	55                   	push   ebp
c0007035:	e8 d9 fe ff ff       	call   c0006f13 <Dbg::logs(char*)>
c000703a:	83 c4 10             	add    esp,0x10
c000703d:	eb bf                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	89 d0                	mov    eax,edx
c0007048:	83 c2 04             	add    edx,0x4
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007051:	51                   	push   ecx
c0007052:	e8 e6 fe ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	eb a2                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000705c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007060:	83 ec 0c             	sub    esp,0xc
c0007063:	89 d0                	mov    eax,edx
c0007065:	83 c2 04             	add    edx,0x4
c0007068:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000706b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000706f:	50                   	push   eax
c0007070:	e8 71 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007075:	83 c4 10             	add    esp,0x10
c0007078:	eb 84                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000707a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707e:	89 c8                	mov    eax,ecx
c0007080:	83 c1 04             	add    ecx,0x4
c0007083:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	6a 10                	push   0x10
c000708c:	8b 10                	mov    edx,DWORD PTR [eax]
c000708e:	52                   	push   edx
c000708f:	e8 c7 fe ff ff       	call   c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	e9 62 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000709c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070a0:	89 d0                	mov    eax,edx
c00070a2:	83 c2 08             	add    edx,0x8
c00070a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a9:	eb dc                	jmp    c0007087 <Dbg::kprintf(char const*, ...)+0x10b>
c00070ab:	83 ec 0c             	sub    esp,0xc
c00070ae:	6a 25                	push   0x25
c00070b0:	e8 31 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b5:	83 c4 10             	add    esp,0x10
c00070b8:	e9 41 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 25                	push   0x25
c00070c2:	e8 1f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ce:	e8 13 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	e9 23 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070db:	83 ec 0c             	sub    esp,0xc
c00070de:	68 00 30 02 c0       	push   0xc0023000
c00070e3:	e8 94 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00070e8:	83 c4 10             	add    esp,0x10
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	5b                   	pop    ebx
c00070ef:	5e                   	pop    esi
c00070f0:	5f                   	pop    edi
c00070f1:	5d                   	pop    ebp
c00070f2:	c3                   	ret    
c00070f3:	90                   	nop

c00070f4 <KiUbsanPrintDetails(char const*, void*)>:
c00070f4:	83 ec 1c             	sub    esp,0x1c
c00070f7:	83 ec 08             	sub    esp,0x8
c00070fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070fe:	68 88 31 02 c0       	push   0xc0023188
c0007103:	e8 74 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007108:	83 c4 10             	add    esp,0x10
c000710b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000710f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007117:	8b 00                	mov    eax,DWORD PTR [eax]
c0007119:	83 ec 08             	sub    esp,0x8
c000711c:	50                   	push   eax
c000711d:	68 9c 31 02 c0       	push   0xc002319c
c0007122:	e8 55 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007131:	83 ec 08             	sub    esp,0x8
c0007134:	50                   	push   eax
c0007135:	68 a6 31 02 c0       	push   0xc00231a6
c000713a:	e8 3d fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000713f:	83 c4 10             	add    esp,0x10
c0007142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007149:	83 ec 08             	sub    esp,0x8
c000714c:	50                   	push   eax
c000714d:	68 b0 31 02 c0       	push   0xc00231b0
c0007152:	e8 25 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007157:	83 c4 10             	add    esp,0x10
c000715a:	90                   	nop
c000715b:	83 c4 1c             	add    esp,0x1c
c000715e:	c3                   	ret    
c000715f:	90                   	nop

c0007160 <__ubsan_handle_type_mismatch_v1>:
c0007160:	83 ec 0c             	sub    esp,0xc
c0007163:	83 ec 08             	sub    esp,0x8
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	68 f4 32 02 c0       	push   0xc00232f4
c000716f:	e8 80 ff ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007174:	83 c4 10             	add    esp,0x10
c0007177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000717c:	75 16                	jne    c0007194 <__ubsan_handle_type_mismatch_v1+0x34>
c000717e:	83 ec 0c             	sub    esp,0xc
c0007181:	68 ba 31 02 c0       	push   0xc00231ba
c0007186:	e8 f1 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000718b:	83 c4 10             	add    esp,0x10
c000718e:	e9 91 00 00 00       	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007193:	90                   	nop
c0007194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000719b:	85 c0                	test   eax,eax
c000719d:	74 29                	je     c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c000719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00071a6:	83 e8 01             	sub    eax,0x1
c00071a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00071ad:	75 19                	jne    c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00071af:	83 ec 08             	sub    esp,0x8
c00071b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071b6:	68 14 33 02 c0       	push   0xc0023314
c00071bb:	e8 bc fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071c0:	83 c4 10             	add    esp,0x10
c00071c3:	eb 5f                	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071c5:	8d 76 00             	lea    esi,[esi+0x0]
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	68 cf 31 02 c0       	push   0xc00231cf
c00071d0:	e8 a7 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071df:	0f b6 c0             	movzx  eax,al
c00071e2:	83 ec 08             	sub    esp,0x8
c00071e5:	50                   	push   eax
c00071e6:	68 e9 31 02 c0       	push   0xc00231e9
c00071eb:	e8 8c fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007208:	0f b6 c0             	movzx  eax,al
c000720b:	8b 04 85 60 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ba0]
c0007212:	51                   	push   ecx
c0007213:	52                   	push   edx
c0007214:	50                   	push   eax
c0007215:	68 3c 33 02 c0       	push   0xc002333c
c000721a:	e8 5d fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	66 90                	xchg   ax,ax
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	68 f4 32 02 c0       	push   0xc00232f4
c000722c:	e8 b5 8d 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007231:	83 c4 10             	add    esp,0x10
c0007234:	90                   	nop
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	c3                   	ret    
c0007239:	8d 76 00             	lea    esi,[esi+0x0]

c000723c <__ubsan_handle_pointer_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 84 33 02 c0       	push   0xc0023384
c000724b:	e8 a4 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 84 33 02 c0       	push   0xc0023384
c000725b:	e8 86 8d 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_out_of_bounds>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 f4 31 02 c0       	push   0xc00231f4
c0007277:	e8 78 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 f4 31 02 c0       	push   0xc00231f4
c0007287:	e8 5a 8d 00 00       	call   c000ffe6 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_add_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 11 32 02 c0       	push   0xc0023211
c00072a3:	e8 4c fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 11 32 02 c0       	push   0xc0023211
c00072b3:	e8 2e 8d 00 00       	call   c000ffe6 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_load_invalid_value>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 a4 33 02 c0       	push   0xc00233a4
c00072cf:	e8 20 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 a4 33 02 c0       	push   0xc00233a4
c00072df:	e8 02 8d 00 00       	call   c000ffe6 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_divrem_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 c8 33 02 c0       	push   0xc00233c8
c00072fb:	e8 f4 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 c8 33 02 c0       	push   0xc00233c8
c000730b:	e8 d6 8c 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_mul_overflow>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 2d 32 02 c0       	push   0xc002322d
c0007327:	e8 c8 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 2d 32 02 c0       	push   0xc002322d
c0007337:	e8 aa 8c 00 00       	call   c000ffe6 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_sub_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 49 32 02 c0       	push   0xc0023249
c0007353:	e8 9c fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 49 32 02 c0       	push   0xc0023249
c0007363:	e8 7e 8c 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <__ubsan_handle_shift_out_of_bounds>:
c0007370:	83 ec 0c             	sub    esp,0xc
c0007373:	83 ec 08             	sub    esp,0x8
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	68 e8 33 02 c0       	push   0xc00233e8
c000737f:	e8 70 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007384:	83 c4 10             	add    esp,0x10
c0007387:	83 ec 0c             	sub    esp,0xc
c000738a:	68 e8 33 02 c0       	push   0xc00233e8
c000738f:	e8 52 8c 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	90                   	nop
c0007398:	83 c4 0c             	add    esp,0xc
c000739b:	c3                   	ret    

c000739c <__ubsan_handle_negate_overflow>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	83 ec 08             	sub    esp,0x8
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	68 0c 34 02 c0       	push   0xc002340c
c00073ab:	e8 44 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00073b0:	83 c4 10             	add    esp,0x10
c00073b3:	83 ec 0c             	sub    esp,0xc
c00073b6:	68 0c 34 02 c0       	push   0xc002340c
c00073bb:	e8 26 8c 00 00       	call   c000ffe6 <KePanic(char const*)>
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	90                   	nop
c00073c4:	83 c4 0c             	add    esp,0xc
c00073c7:	c3                   	ret    

c00073c8 <KiIsHashInTable(unsigned short)>:
c00073c8:	0f b7 d0             	movzx  edx,ax
c00073cb:	83 e0 07             	and    eax,0x7
c00073ce:	c1 fa 03             	sar    edx,0x3
c00073d1:	88 c1                	mov    cl,al
c00073d3:	0f b6 92 00 a3 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd5d00]
c00073da:	d3 fa                	sar    edx,cl
c00073dc:	89 d0                	mov    eax,edx
c00073de:	83 e0 01             	and    eax,0x1
c00073e1:	c3                   	ret    

c00073e2 <KiSetHashInTable(unsigned short, bool)>:
c00073e2:	56                   	push   esi
c00073e3:	53                   	push   ebx
c00073e4:	0f b7 d8             	movzx  ebx,ax
c00073e7:	83 e0 07             	and    eax,0x7
c00073ea:	c1 fb 03             	sar    ebx,0x3
c00073ed:	89 c1                	mov    ecx,eax
c00073ef:	0f b6 b3 00 a3 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd5d00]
c00073f6:	b8 01 00 00 00       	mov    eax,0x1
c00073fb:	d3 e0                	shl    eax,cl
c00073fd:	84 d2                	test   dl,dl
c00073ff:	74 04                	je     c0007405 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007401:	09 f0                	or     eax,esi
c0007403:	eb 04                	jmp    c0007409 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007405:	f7 d0                	not    eax
c0007407:	21 f0                	and    eax,esi
c0007409:	88 83 00 a3 02 c0    	mov    BYTE PTR [ebx-0x3ffd5d00],al
c000740f:	5b                   	pop    ebx
c0007410:	5e                   	pop    esi
c0007411:	c3                   	ret    

c0007412 <KiFlushSymlinkChanges()>:
c0007412:	57                   	push   edi
c0007413:	56                   	push   esi
c0007414:	53                   	push   ebx
c0007415:	83 ec 1c             	sub    esp,0x1c
c0007418:	68 14 01 00 00       	push   0x114
c000741d:	e8 6d 87 00 00       	call   c000fb8f <malloc>
c0007422:	83 c4 0c             	add    esp,0xc
c0007425:	89 c3                	mov    ebx,eax
c0007427:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000742d:	68 2b 34 02 c0       	push   0xc002342b
c0007432:	50                   	push   eax
c0007433:	e8 52 0d 00 00       	call   c000818a <File::File(char const*, Process*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	85 db                	test   ebx,ebx
c000743d:	75 10                	jne    c000744f <KiFlushSymlinkChanges()+0x3d>
c000743f:	83 ec 0c             	sub    esp,0xc
c0007442:	68 49 34 02 c0       	push   0xc0023449
c0007447:	e8 9a 8b 00 00       	call   c000ffe6 <KePanic(char const*)>
c000744c:	83 c4 10             	add    esp,0x10
c000744f:	50                   	push   eax
c0007450:	50                   	push   eax
c0007451:	6a 06                	push   0x6
c0007453:	53                   	push   ebx
c0007454:	e8 4f 0d 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	85 c0                	test   eax,eax
c000745e:	74 10                	je     c0007470 <KiFlushSymlinkChanges()+0x5e>
c0007460:	83 ec 0c             	sub    esp,0xc
c0007463:	68 63 34 02 c0       	push   0xc0023463
c0007468:	e8 79 8b 00 00       	call   c000ffe6 <KePanic(char const*)>
c000746d:	83 c4 10             	add    esp,0x10
c0007470:	31 f6                	xor    esi,esi
c0007472:	39 35 c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,esi
c0007478:	7e 70                	jle    c00074ea <KiFlushSymlinkChanges()+0xd8>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000747f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007483:	89 f0                	mov    eax,esi
c0007485:	57                   	push   edi
c0007486:	c1 e0 08             	shl    eax,0x8
c0007489:	05 00 9f 02 c0       	add    eax,0xc0029f00
c000748e:	50                   	push   eax
c000748f:	6a 00                	push   0x0
c0007491:	68 00 01 00 00       	push   0x100
c0007496:	53                   	push   ebx
c0007497:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000749a:	83 c4 20             	add    esp,0x20
c000749d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00074a5:	74 10                	je     c00074b7 <KiFlushSymlinkChanges()+0xa5>
c00074a7:	83 ec 0c             	sub    esp,0xc
c00074aa:	68 7d 34 02 c0       	push   0xc002347d
c00074af:	e8 32 8b 00 00       	call   c000ffe6 <KePanic(char const*)>
c00074b4:	83 c4 10             	add    esp,0x10
c00074b7:	83 ec 0c             	sub    esp,0xc
c00074ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074bc:	8d 14 f5 e0 9e 02 c0 	lea    edx,[esi*8-0x3ffd6120]
c00074c3:	57                   	push   edi
c00074c4:	52                   	push   edx
c00074c5:	6a 00                	push   0x0
c00074c7:	6a 08                	push   0x8
c00074c9:	53                   	push   ebx
c00074ca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074cd:	83 c4 20             	add    esp,0x20
c00074d0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074d5:	74 10                	je     c00074e7 <KiFlushSymlinkChanges()+0xd5>
c00074d7:	83 ec 0c             	sub    esp,0xc
c00074da:	68 97 34 02 c0       	push   0xc0023497
c00074df:	e8 02 8b 00 00       	call   c000ffe6 <KePanic(char const*)>
c00074e4:	83 c4 10             	add    esp,0x10
c00074e7:	46                   	inc    esi
c00074e8:	eb 88                	jmp    c0007472 <KiFlushSymlinkChanges()+0x60>
c00074ea:	83 ec 0c             	sub    esp,0xc
c00074ed:	53                   	push   ebx
c00074ee:	e8 13 0d 00 00       	call   c0008206 <File::close()>
c00074f3:	83 c4 10             	add    esp,0x10
c00074f6:	85 db                	test   ebx,ebx
c00074f8:	74 0c                	je     c0007506 <KiFlushSymlinkChanges()+0xf4>
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074ff:	53                   	push   ebx
c0007500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007503:	83 c4 10             	add    esp,0x10
c0007506:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c0007510:	83 c4 10             	add    esp,0x10
c0007513:	5b                   	pop    ebx
c0007514:	5e                   	pop    esi
c0007515:	5f                   	pop    edi
c0007516:	c3                   	ret    

c0007517 <KiDeinitialiseSymlinks(void*)>:
c0007517:	e9 f6 fe ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>

c000751c <KiGetSymlinkHash(char const*)>:
c000751c:	53                   	push   ebx
c000751d:	89 c3                	mov    ebx,eax
c000751f:	83 ec 14             	sub    esp,0x14
c0007522:	50                   	push   eax
c0007523:	e8 48 90 ff ff       	call   c0000570 <strlen>
c0007528:	5a                   	pop    edx
c0007529:	59                   	pop    ecx
c000752a:	50                   	push   eax
c000752b:	53                   	push   ebx
c000752c:	e8 64 6d 00 00       	call   c000e295 <KeCalculateCRC32(unsigned char*, int)>
c0007531:	83 c4 18             	add    esp,0x18
c0007534:	89 c2                	mov    edx,eax
c0007536:	5b                   	pop    ebx
c0007537:	c1 ea 10             	shr    edx,0x10
c000753a:	31 d0                	xor    eax,edx
c000753c:	c3                   	ret    

c000753d <KiCreateSymlinkID()>:
c000753d:	55                   	push   ebp
c000753e:	57                   	push   edi
c000753f:	56                   	push   esi
c0007540:	53                   	push   ebx
c0007541:	31 db                	xor    ebx,ebx
c0007543:	83 ec 1c             	sub    esp,0x1c
c0007546:	e8 27 95 00 00       	call   c0010a72 <KeRand()>
c000754b:	43                   	inc    ebx
c000754c:	8b 2d 00 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c300
c0007552:	31 d2                	xor    edx,edx
c0007554:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007557:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000755b:	89 0d 00 c3 02 c0    	mov    DWORD PTR ds:0xc002c300,ecx
c0007561:	c1 e0 1f             	shl    eax,0x1f
c0007564:	89 d7                	mov    edi,edx
c0007566:	89 c6                	mov    esi,eax
c0007568:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000756c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007574:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000757a:	75 10                	jne    c000758c <KiCreateSymlinkID()+0x4f>
c000757c:	83 ec 0c             	sub    esp,0xc
c000757f:	68 b1 34 02 c0       	push   0xc00234b1
c0007584:	e8 5d 8a 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007589:	83 c4 10             	add    esp,0x10
c000758c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007590:	75 04                	jne    c0007596 <KiCreateSymlinkID()+0x59>
c0007592:	39 f5                	cmp    ebp,esi
c0007594:	74 b0                	je     c0007546 <KiCreateSymlinkID()+0x9>
c0007596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000759e:	31 f0                	xor    eax,esi
c00075a0:	83 c4 1c             	add    esp,0x1c
c00075a3:	31 fa                	xor    edx,edi
c00075a5:	5b                   	pop    ebx
c00075a6:	5e                   	pop    esi
c00075a7:	5f                   	pop    edi
c00075a8:	5d                   	pop    ebp
c00075a9:	c3                   	ret    

c00075aa <KeRegisterSymlink(char const*, unsigned long long)>:
c00075aa:	53                   	push   ebx
c00075ab:	83 ec 0c             	sub    esp,0xc
c00075ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00075b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075ba:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075bf:	68 00 01 00 00       	push   0x100
c00075c4:	89 0c c5 e4 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd611c],ecx
c00075cb:	6a 00                	push   0x0
c00075cd:	89 14 c5 e0 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6120],edx
c00075d4:	c1 e0 08             	shl    eax,0x8
c00075d7:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075dc:	50                   	push   eax
c00075dd:	e8 0e 8f ff ff       	call   c00004f0 <memset>
c00075e2:	58                   	pop    eax
c00075e3:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075e8:	5a                   	pop    edx
c00075e9:	c1 e0 08             	shl    eax,0x8
c00075ec:	53                   	push   ebx
c00075ed:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075f2:	50                   	push   eax
c00075f3:	e8 48 90 ff ff       	call   c0000640 <strcpy>
c00075f8:	89 d8                	mov    eax,ebx
c00075fa:	e8 1d ff ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00075ff:	ba 01 00 00 00       	mov    edx,0x1
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	e8 d6 fd ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000760c:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c0007611:	83 c4 10             	add    esp,0x10
c0007614:	40                   	inc    eax
c0007615:	a3 c0 9e 02 c0       	mov    ds:0xc0029ec0,eax
c000761a:	83 f8 03             	cmp    eax,0x3
c000761d:	7e 09                	jle    c0007628 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000761f:	83 c4 08             	add    esp,0x8
c0007622:	5b                   	pop    ebx
c0007623:	e9 ea fd ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>
c0007628:	83 c4 08             	add    esp,0x8
c000762b:	5b                   	pop    ebx
c000762c:	c3                   	ret    

c000762d <KeInitialiseSymlinks()>:
c000762d:	57                   	push   edi
c000762e:	56                   	push   esi
c000762f:	53                   	push   ebx
c0007630:	81 ec 14 01 00 00    	sub    esp,0x114
c0007636:	c7 05 00 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c300,0x0
c0007640:	68 00 20 00 00       	push   0x2000
c0007645:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c000764f:	6a 00                	push   0x0
c0007651:	68 00 a3 02 c0       	push   0xc002a300
c0007656:	e8 95 8e ff ff       	call   c00004f0 <memset>
c000765b:	59                   	pop    ecx
c000765c:	5b                   	pop    ebx
c000765d:	6a 00                	push   0x0
c000765f:	68 17 75 00 c0       	push   0xc0007517
c0007664:	e8 dc 5b 00 00       	call   c000d245 <KeRegisterAtexit(void (*)(void*), void*)>
c0007669:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007670:	e8 1a 85 00 00       	call   c000fb8f <malloc>
c0007675:	83 c4 0c             	add    esp,0xc
c0007678:	89 c3                	mov    ebx,eax
c000767a:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0007680:	68 2b 34 02 c0       	push   0xc002342b
c0007685:	50                   	push   eax
c0007686:	e8 ff 0a 00 00       	call   c000818a <File::File(char const*, Process*)>
c000768b:	83 c4 10             	add    esp,0x10
c000768e:	85 db                	test   ebx,ebx
c0007690:	75 10                	jne    c00076a2 <KeInitialiseSymlinks()+0x75>
c0007692:	83 ec 0c             	sub    esp,0xc
c0007695:	68 ba 34 02 c0       	push   0xc00234ba
c000769a:	e8 47 89 00 00       	call   c000ffe6 <KePanic(char const*)>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	83 ec 0c             	sub    esp,0xc
c00076a5:	53                   	push   ebx
c00076a6:	e8 c1 0d 00 00       	call   c000846c <File::exists()>
c00076ab:	83 c4 10             	add    esp,0x10
c00076ae:	84 c0                	test   al,al
c00076b0:	75 3a                	jne    c00076ec <KeInitialiseSymlinks()+0xbf>
c00076b2:	52                   	push   edx
c00076b3:	52                   	push   edx
c00076b4:	6a 12                	push   0x12
c00076b6:	53                   	push   ebx
c00076b7:	e8 ec 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076bc:	83 c4 10             	add    esp,0x10
c00076bf:	85 c0                	test   eax,eax
c00076c1:	74 10                	je     c00076d3 <KeInitialiseSymlinks()+0xa6>
c00076c3:	83 ec 0c             	sub    esp,0xc
c00076c6:	68 d7 34 02 c0       	push   0xc00234d7
c00076cb:	e8 16 89 00 00       	call   c000ffe6 <KePanic(char const*)>
c00076d0:	83 c4 10             	add    esp,0x10
c00076d3:	83 ec 0c             	sub    esp,0xc
c00076d6:	53                   	push   ebx
c00076d7:	e8 2a 0b 00 00       	call   c0008206 <File::close()>
c00076dc:	83 c4 10             	add    esp,0x10
c00076df:	85 db                	test   ebx,ebx
c00076e1:	0f 84 9e 00 00 00    	je     c0007785 <KeInitialiseSymlinks()+0x158>
c00076e7:	e9 8d 00 00 00       	jmp    c0007779 <KeInitialiseSymlinks()+0x14c>
c00076ec:	50                   	push   eax
c00076ed:	50                   	push   eax
c00076ee:	6a 01                	push   0x1
c00076f0:	53                   	push   ebx
c00076f1:	e8 b2 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076f6:	83 c4 10             	add    esp,0x10
c00076f9:	85 c0                	test   eax,eax
c00076fb:	74 10                	je     c000770d <KeInitialiseSymlinks()+0xe0>
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	68 f4 34 02 c0       	push   0xc00234f4
c0007705:	e8 dc 88 00 00       	call   c000ffe6 <KePanic(char const*)>
c000770a:	83 c4 10             	add    esp,0x10
c000770d:	83 ec 0c             	sub    esp,0xc
c0007710:	ff 05 00 c3 02 c0    	inc    DWORD PTR ds:0xc002c300
c0007716:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000771a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000771c:	57                   	push   edi
c000771d:	8d 74 24 20          	lea    esi,[esp+0x20]
c0007721:	56                   	push   esi
c0007722:	6a 00                	push   0x0
c0007724:	68 00 01 00 00       	push   0x100
c0007729:	53                   	push   ebx
c000772a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000772d:	83 c4 20             	add    esp,0x20
c0007730:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007738:	75 33                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c000773a:	83 ec 0c             	sub    esp,0xc
c000773d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000773f:	57                   	push   edi
c0007740:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007744:	52                   	push   edx
c0007745:	6a 00                	push   0x0
c0007747:	6a 08                	push   0x8
c0007749:	53                   	push   ebx
c000774a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000774d:	83 c4 20             	add    esp,0x20
c0007750:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007755:	75 16                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c0007757:	89 f0                	mov    eax,esi
c0007759:	e8 be fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c000775e:	ba 01 00 00 00       	mov    edx,0x1
c0007763:	0f b7 c0             	movzx  eax,ax
c0007766:	e8 77 fc ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000776b:	eb a0                	jmp    c000770d <KeInitialiseSymlinks()+0xe0>
c000776d:	83 ec 0c             	sub    esp,0xc
c0007770:	53                   	push   ebx
c0007771:	e8 90 0a 00 00       	call   c0008206 <File::close()>
c0007776:	83 c4 10             	add    esp,0x10
c0007779:	83 ec 0c             	sub    esp,0xc
c000777c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000777e:	53                   	push   ebx
c000777f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	81 c4 10 01 00 00    	add    esp,0x110
c000778b:	5b                   	pop    ebx
c000778c:	5e                   	pop    esi
c000778d:	5f                   	pop    edi
c000778e:	c3                   	ret    

c000778f <KiIsSymlinkRegistered(char const*)>:
c000778f:	55                   	push   ebp
c0007790:	57                   	push   edi
c0007791:	56                   	push   esi
c0007792:	53                   	push   ebx
c0007793:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007799:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00077a0:	89 f0                	mov    eax,esi
c00077a2:	e8 75 fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00077a7:	0f b7 c0             	movzx  eax,ax
c00077aa:	e8 19 fc ff ff       	call   c00073c8 <KiIsHashInTable(unsigned short)>
c00077af:	31 d2                	xor    edx,edx
c00077b1:	88 c1                	mov    cl,al
c00077b3:	31 c0                	xor    eax,eax
c00077b5:	84 c9                	test   cl,cl
c00077b7:	0f 84 31 01 00 00    	je     c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077bd:	31 db                	xor    ebx,ebx
c00077bf:	39 1d c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,ebx
c00077c5:	7e 30                	jle    c00077f7 <KiIsSymlinkRegistered(char const*)+0x68>
c00077c7:	89 d8                	mov    eax,ebx
c00077c9:	51                   	push   ecx
c00077ca:	c1 e0 08             	shl    eax,0x8
c00077cd:	51                   	push   ecx
c00077ce:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00077d3:	50                   	push   eax
c00077d4:	56                   	push   esi
c00077d5:	e8 76 8f ff ff       	call   c0000750 <strcmp>
c00077da:	83 c4 10             	add    esp,0x10
c00077dd:	85 c0                	test   eax,eax
c00077df:	75 13                	jne    c00077f4 <KiIsSymlinkRegistered(char const*)+0x65>
c00077e1:	8b 04 dd e0 9e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd6120]
c00077e8:	8b 14 dd e4 9e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd611c]
c00077ef:	e9 fa 00 00 00       	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077f4:	43                   	inc    ebx
c00077f5:	eb c8                	jmp    c00077bf <KiIsSymlinkRegistered(char const*)+0x30>
c00077f7:	83 ec 0c             	sub    esp,0xc
c00077fa:	68 14 01 00 00       	push   0x114
c00077ff:	e8 8b 83 00 00       	call   c000fb8f <malloc>
c0007804:	83 c4 0c             	add    esp,0xc
c0007807:	89 c3                	mov    ebx,eax
c0007809:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000780f:	68 2b 34 02 c0       	push   0xc002342b
c0007814:	50                   	push   eax
c0007815:	e8 70 09 00 00       	call   c000818a <File::File(char const*, Process*)>
c000781a:	83 c4 10             	add    esp,0x10
c000781d:	85 db                	test   ebx,ebx
c000781f:	75 12                	jne    c0007833 <KiIsSymlinkRegistered(char const*)+0xa4>
c0007821:	83 ec 0c             	sub    esp,0xc
c0007824:	68 0f 35 02 c0       	push   0xc002350f
c0007829:	e8 b8 87 00 00       	call   c000ffe6 <KePanic(char const*)>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	eb 10                	jmp    c0007843 <KiIsSymlinkRegistered(char const*)+0xb4>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	53                   	push   ebx
c0007837:	e8 30 0c 00 00       	call   c000846c <File::exists()>
c000783c:	83 c4 10             	add    esp,0x10
c000783f:	84 c0                	test   al,al
c0007841:	74 de                	je     c0007821 <KiIsSymlinkRegistered(char const*)+0x92>
c0007843:	52                   	push   edx
c0007844:	52                   	push   edx
c0007845:	6a 01                	push   0x1
c0007847:	53                   	push   ebx
c0007848:	e8 5b 09 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c000784d:	83 c4 10             	add    esp,0x10
c0007850:	85 c0                	test   eax,eax
c0007852:	74 10                	je     c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007854:	83 ec 0c             	sub    esp,0xc
c0007857:	68 2a 35 02 c0       	push   0xc002352a
c000785c:	e8 85 87 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007861:	83 c4 10             	add    esp,0x10
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007869:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000786d:	55                   	push   ebp
c000786e:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007872:	57                   	push   edi
c0007873:	6a 00                	push   0x0
c0007875:	68 00 01 00 00       	push   0x100
c000787a:	53                   	push   ebx
c000787b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000787e:	83 c4 20             	add    esp,0x20
c0007881:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007889:	75 4b                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c000788b:	83 ec 0c             	sub    esp,0xc
c000788e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007890:	55                   	push   ebp
c0007891:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007895:	52                   	push   edx
c0007896:	6a 00                	push   0x0
c0007898:	6a 08                	push   0x8
c000789a:	53                   	push   ebx
c000789b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000789e:	83 c4 20             	add    esp,0x20
c00078a1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00078a6:	75 2e                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c00078a8:	50                   	push   eax
c00078a9:	50                   	push   eax
c00078aa:	57                   	push   edi
c00078ab:	56                   	push   esi
c00078ac:	e8 9f 8e ff ff       	call   c0000750 <strcmp>
c00078b1:	83 c4 10             	add    esp,0x10
c00078b4:	85 c0                	test   eax,eax
c00078b6:	75 ac                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c00078b8:	83 ec 0c             	sub    esp,0xc
c00078bb:	53                   	push   ebx
c00078bc:	e8 45 09 00 00       	call   c0008206 <File::close()>
c00078c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	eb 18                	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00078d6:	83 ec 0c             	sub    esp,0xc
c00078d9:	53                   	push   ebx
c00078da:	e8 27 09 00 00       	call   c0008206 <File::close()>
c00078df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078e7:	83 c4 10             	add    esp,0x10
c00078ea:	31 c0                	xor    eax,eax
c00078ec:	31 d2                	xor    edx,edx
c00078ee:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078f4:	5b                   	pop    ebx
c00078f5:	5e                   	pop    esi
c00078f6:	5f                   	pop    edi
c00078f7:	5d                   	pop    ebp
c00078f8:	c3                   	ret    

c00078f9 <KeDereferenceSymlink(char const*, char*)>:
c00078f9:	55                   	push   ebp
c00078fa:	57                   	push   edi
c00078fb:	56                   	push   esi
c00078fc:	53                   	push   ebx
c00078fd:	83 ec 48             	sub    esp,0x48
c0007900:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007904:	56                   	push   esi
c0007905:	e8 85 fe ff ff       	call   c000778f <KiIsSymlinkRegistered(char const*)>
c000790a:	83 c4 10             	add    esp,0x10
c000790d:	89 c7                	mov    edi,eax
c000790f:	89 d0                	mov    eax,edx
c0007911:	09 f8                	or     eax,edi
c0007913:	75 07                	jne    c000791c <KeDereferenceSymlink(char const*, char*)+0x23>
c0007915:	31 c0                	xor    eax,eax
c0007917:	e9 7c 01 00 00       	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000791c:	83 ec 0c             	sub    esp,0xc
c000791f:	89 d5                	mov    ebp,edx
c0007921:	68 14 01 00 00       	push   0x114
c0007926:	e8 64 82 00 00       	call   c000fb8f <malloc>
c000792b:	83 c4 0c             	add    esp,0xc
c000792e:	89 c3                	mov    ebx,eax
c0007930:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0007936:	56                   	push   esi
c0007937:	50                   	push   eax
c0007938:	e8 4d 08 00 00       	call   c000818a <File::File(char const*, Process*)>
c000793d:	83 c4 10             	add    esp,0x10
c0007940:	85 db                	test   ebx,ebx
c0007942:	0f 84 32 01 00 00    	je     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007948:	56                   	push   esi
c0007949:	56                   	push   esi
c000794a:	6a 01                	push   0x1
c000794c:	53                   	push   ebx
c000794d:	e8 56 08 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007952:	83 c4 10             	add    esp,0x10
c0007955:	85 c0                	test   eax,eax
c0007957:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007959:	74 09                	je     c0007964 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000795b:	83 ec 0c             	sub    esp,0xc
c000795e:	53                   	push   ebx
c000795f:	e9 10 01 00 00       	jmp    c0007a74 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0007964:	83 ec 0c             	sub    esp,0xc
c0007967:	8d 74 24 18          	lea    esi,[esp+0x18]
c000796b:	56                   	push   esi
c000796c:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007970:	52                   	push   edx
c0007971:	6a 00                	push   0x0
c0007973:	6a 08                	push   0x8
c0007975:	53                   	push   ebx
c0007976:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 e2 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007984:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007989:	0f 85 d7 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007994:	56                   	push   esi
c0007995:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007999:	52                   	push   edx
c000799a:	6a 00                	push   0x0
c000799c:	6a 08                	push   0x8
c000799e:	53                   	push   ebx
c000799f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079a2:	83 c4 20             	add    esp,0x20
c00079a5:	85 c0                	test   eax,eax
c00079a7:	0f 85 b9 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ad:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00079b2:	0f 85 ae 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b8:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079bc:	0f 85 53 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079c2:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079c6:	0f 85 49 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079d4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079dc:	51                   	push   ecx
c00079dd:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079e1:	50                   	push   eax
c00079e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079e6:	50                   	push   eax
c00079e7:	53                   	push   ebx
c00079e8:	e8 bd 0a 00 00       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00079ed:	83 c4 10             	add    esp,0x10
c00079f0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079f5:	75 6f                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f7:	31 c9                	xor    ecx,ecx
c00079f9:	bf 0f 00 00 00       	mov    edi,0xf
c00079fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a06:	39 c7                	cmp    edi,eax
c0007a08:	89 cf                	mov    edi,ecx
c0007a0a:	19 d7                	sbb    edi,edx
c0007a0c:	73 58                	jae    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a0e:	83 c0 f0             	add    eax,0xfffffff0
c0007a11:	bf ff 00 00 00       	mov    edi,0xff
c0007a16:	83 d2 ff             	adc    edx,0xffffffff
c0007a19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a1d:	39 c7                	cmp    edi,eax
c0007a1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a23:	19 d1                	sbb    ecx,edx
c0007a25:	72 53                	jb     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a27:	40                   	inc    eax
c0007a28:	52                   	push   edx
c0007a29:	50                   	push   eax
c0007a2a:	6a 00                	push   0x0
c0007a2c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a30:	e8 bb 8a ff ff       	call   c00004f0 <memset>
c0007a35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a37:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a3a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a46:	53                   	push   ebx
c0007a47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a4a:	83 c4 20             	add    esp,0x20
c0007a4d:	85 c0                	test   eax,eax
c0007a4f:	75 15                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a55:	89 c7                	mov    edi,eax
c0007a57:	c1 ff 1f             	sar    edi,0x1f
c0007a5a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a5e:	75 06                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a60:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a64:	74 19                	je     c0007a7f <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a66:	83 ec 0c             	sub    esp,0xc
c0007a69:	53                   	push   ebx
c0007a6a:	e8 97 07 00 00       	call   c0008206 <File::close()>
c0007a6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a77:	83 c4 10             	add    esp,0x10
c0007a7a:	83 c8 ff             	or     eax,0xffffffff
c0007a7d:	eb 19                	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a7f:	83 ec 0c             	sub    esp,0xc
c0007a82:	53                   	push   ebx
c0007a83:	e8 7e 07 00 00       	call   c0008206 <File::close()>
c0007a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a90:	83 c4 10             	add    esp,0x10
c0007a93:	b8 01 00 00 00       	mov    eax,0x1
c0007a98:	83 c4 3c             	add    esp,0x3c
c0007a9b:	5b                   	pop    ebx
c0007a9c:	5e                   	pop    esi
c0007a9d:	5f                   	pop    edi
c0007a9e:	5d                   	pop    ebp
c0007a9f:	c3                   	ret    

c0007aa0 <KeCreateSymlink(char const*, char const*)>:
c0007aa0:	55                   	push   ebp
c0007aa1:	57                   	push   edi
c0007aa2:	56                   	push   esi
c0007aa3:	53                   	push   ebx
c0007aa4:	83 ec 38             	sub    esp,0x38
c0007aa7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007aab:	68 14 01 00 00       	push   0x114
c0007ab0:	e8 da 80 00 00       	call   c000fb8f <malloc>
c0007ab5:	6a 00                	push   0x0
c0007ab7:	89 c3                	mov    ebx,eax
c0007ab9:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0007abf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007ac3:	50                   	push   eax
c0007ac4:	e8 c3 05 00 00       	call   c000808c <File::File(char const*, Process*, bool)>
c0007ac9:	83 c4 20             	add    esp,0x20
c0007acc:	b8 01 00 00 00       	mov    eax,0x1
c0007ad1:	85 db                	test   ebx,ebx
c0007ad3:	0f 84 fb 00 00 00    	je     c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007ad9:	52                   	push   edx
c0007ada:	52                   	push   edx
c0007adb:	6a 12                	push   0x12
c0007add:	53                   	push   ebx
c0007ade:	e8 c5 06 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007ae3:	83 c4 10             	add    esp,0x10
c0007ae6:	85 c0                	test   eax,eax
c0007ae8:	74 0b                	je     c0007af5 <KeCreateSymlink(char const*, char const*)+0x55>
c0007aea:	83 ec 0c             	sub    esp,0xc
c0007aed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aef:	53                   	push   ebx
c0007af0:	e9 d4 00 00 00       	jmp    c0007bc9 <KeCreateSymlink(char const*, char const*)+0x129>
c0007af5:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007af9:	be 45 35 02 c0       	mov    esi,0xc0023545
c0007afe:	b9 09 00 00 00       	mov    ecx,0x9
c0007b03:	fc                   	cld    
c0007b04:	83 ec 0c             	sub    esp,0xc
c0007b07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007b09:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007b0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0f:	56                   	push   esi
c0007b10:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007b14:	52                   	push   edx
c0007b15:	6a 00                	push   0x0
c0007b17:	6a 08                	push   0x8
c0007b19:	53                   	push   ebx
c0007b1a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b1d:	83 c4 20             	add    esp,0x20
c0007b20:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b25:	0f 85 90 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b2b:	85 c0                	test   eax,eax
c0007b2d:	0f 85 88 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b33:	e8 05 fa ff ff       	call   c000753d <KiCreateSymlinkID()>
c0007b38:	83 ec 0c             	sub    esp,0xc
c0007b3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b3f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b45:	56                   	push   esi
c0007b46:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b4a:	52                   	push   edx
c0007b4b:	6a 00                	push   0x0
c0007b4d:	6a 08                	push   0x8
c0007b4f:	53                   	push   ebx
c0007b50:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b53:	83 c4 20             	add    esp,0x20
c0007b56:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b5b:	75 5e                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b5d:	85 c0                	test   eax,eax
c0007b5f:	75 5a                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b61:	83 ec 0c             	sub    esp,0xc
c0007b64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b66:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b69:	55                   	push   ebp
c0007b6a:	e8 01 8a ff ff       	call   c0000570 <strlen>
c0007b6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b72:	31 d2                	xor    edx,edx
c0007b74:	55                   	push   ebp
c0007b75:	52                   	push   edx
c0007b76:	50                   	push   eax
c0007b77:	53                   	push   ebx
c0007b78:	ff d7                	call   edi
c0007b7a:	83 c4 14             	add    esp,0x14
c0007b7d:	89 c6                	mov    esi,eax
c0007b7f:	55                   	push   ebp
c0007b80:	e8 eb 89 ff ff       	call   c0000570 <strlen>
c0007b85:	83 c4 10             	add    esp,0x10
c0007b88:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b8c:	75 2d                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b8e:	85 f6                	test   esi,esi
c0007b90:	75 29                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b92:	50                   	push   eax
c0007b93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b9b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b9f:	e8 06 fa ff ff       	call   c00075aa <KeRegisterSymlink(char const*, unsigned long long)>
c0007ba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ba7:	e8 5a 06 00 00       	call   c0008206 <File::close()>
c0007bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb4:	83 c4 10             	add    esp,0x10
c0007bb7:	31 c0                	xor    eax,eax
c0007bb9:	eb 19                	jmp    c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007bbb:	83 ec 0c             	sub    esp,0xc
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 42 06 00 00       	call   c0008206 <File::close()>
c0007bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bcc:	83 c4 10             	add    esp,0x10
c0007bcf:	b8 01 00 00 00       	mov    eax,0x1
c0007bd4:	83 c4 2c             	add    esp,0x2c
c0007bd7:	5b                   	pop    ebx
c0007bd8:	5e                   	pop    esi
c0007bd9:	5f                   	pop    edi
c0007bda:	5d                   	pop    ebp
c0007bdb:	c3                   	ret    

c0007bdc <File::read(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::read(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::read(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <File::write(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <File::write(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <File::write(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::read(unsigned long long, void*, int*)>:
c0007c8c:	53                   	push   ebx
c0007c8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c95:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c9c:	83 f8 19             	cmp    eax,0x19
c0007c9f:	77 35                	ja     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca1:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007ca8:	85 c0                	test   eax,eax
c0007caa:	74 2a                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007cb2:	85 c0                	test   eax,eax
c0007cb4:	74 20                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007cba:	74 21                	je     c0007cdd <Directory::read(unsigned long long, void*, int*)+0x51>
c0007cbc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007cbe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cc2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ccc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cd0:	5b                   	pop    ebx
c0007cd1:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cd4:	ff e0                	jmp    eax
c0007cd6:	b8 0b 00 00 00       	mov    eax,0xb
c0007cdb:	eb 05                	jmp    c0007ce2 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cdd:	b8 05 00 00 00       	mov    eax,0x5
c0007ce2:	5b                   	pop    ebx
c0007ce3:	c3                   	ret    

c0007ce4 <Directory::write(unsigned long long, void*, int*)>:
c0007ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ce8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cef:	b8 0b 00 00 00       	mov    eax,0xb
c0007cf4:	83 fa 19             	cmp    edx,0x19
c0007cf7:	77 18                	ja     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cf9:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0007d00:	85 d2                	test   edx,edx
c0007d02:	74 0d                	je     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007d04:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007d0b:	19 c0                	sbb    eax,eax
c0007d0d:	83 e0 0a             	and    eax,0xa
c0007d10:	40                   	inc    eax
c0007d11:	c3                   	ret    

c0007d12 <File::isAtty()>:
c0007d12:	31 c0                	xor    eax,eax
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <Directory::isAtty()>:
c0007d16:	31 c0                	xor    eax,eax
c0007d18:	c3                   	ret    
c0007d19:	90                   	nop

c0007d1a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d1a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d1f:	c3                   	ret    

c0007d20 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d20:	b8 0a 00 00 00       	mov    eax,0xa
c0007d25:	c3                   	ret    

c0007d26 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d26:	31 c0                	xor    eax,eax
c0007d28:	31 d2                	xor    edx,edx
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <File::~File()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	ba 1c 36 02 c0       	mov    edx,0xc002361c
c0007d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d38:	89 10                	mov    DWORD PTR [eax],edx
c0007d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d3e:	83 ec 0c             	sub    esp,0xc
c0007d41:	50                   	push   eax
c0007d42:	e8 73 b6 00 00       	call   c00133ba <UnixFile::~UnixFile()>
c0007d47:	83 c4 10             	add    esp,0x10
c0007d4a:	90                   	nop
c0007d4b:	83 c4 0c             	add    esp,0xc
c0007d4e:	c3                   	ret    
c0007d4f:	90                   	nop

c0007d50 <File::~File()>:
c0007d50:	83 ec 0c             	sub    esp,0xc
c0007d53:	83 ec 0c             	sub    esp,0xc
c0007d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d5a:	e8 cd ff ff ff       	call   c0007d2c <File::~File()>
c0007d5f:	83 c4 10             	add    esp,0x10
c0007d62:	83 ec 08             	sub    esp,0x8
c0007d65:	68 14 01 00 00       	push   0x114
c0007d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d6e:	e8 76 56 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0007d73:	83 c4 10             	add    esp,0x10
c0007d76:	83 c4 0c             	add    esp,0xc
c0007d79:	c3                   	ret    

c0007d7a <Directory::~Directory()>:
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	ba 38 36 02 c0       	mov    edx,0xc0023638
c0007d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d86:	89 10                	mov    DWORD PTR [eax],edx
c0007d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	50                   	push   eax
c0007d90:	e8 25 b6 00 00       	call   c00133ba <UnixFile::~UnixFile()>
c0007d95:	83 c4 10             	add    esp,0x10
c0007d98:	90                   	nop
c0007d99:	83 c4 0c             	add    esp,0xc
c0007d9c:	c3                   	ret    
c0007d9d:	90                   	nop

c0007d9e <Directory::~Directory()>:
c0007d9e:	83 ec 0c             	sub    esp,0xc
c0007da1:	83 ec 0c             	sub    esp,0xc
c0007da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da8:	e8 cd ff ff ff       	call   c0007d7a <Directory::~Directory()>
c0007dad:	83 c4 10             	add    esp,0x10
c0007db0:	83 ec 08             	sub    esp,0x8
c0007db3:	68 14 01 00 00       	push   0x114
c0007db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dbc:	e8 28 56 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	83 c4 0c             	add    esp,0xc
c0007dc7:	c3                   	ret    

c0007dc8 <Filesystem::Filesystem()>:
c0007dc8:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c0007dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dd1:	89 10                	mov    DWORD PTR [eax],edx
c0007dd3:	8b 15 04 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c304
c0007dd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007de4:	a3 04 c3 02 c0       	mov    ds:0xc002c304,eax
c0007de9:	90                   	nop
c0007dea:	c3                   	ret    
c0007deb:	90                   	nop

c0007dec <Filesystem::~Filesystem()>:
c0007dec:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c0007df1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007df5:	89 10                	mov    DWORD PTR [eax],edx
c0007df7:	90                   	nop
c0007df8:	c3                   	ret    
c0007df9:	90                   	nop

c0007dfa <Filesystem::~Filesystem()>:
c0007dfa:	83 ec 0c             	sub    esp,0xc
c0007dfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007e01:	e8 e6 ff ff ff       	call   c0007dec <Filesystem::~Filesystem()>
c0007e06:	83 c4 04             	add    esp,0x4
c0007e09:	83 ec 08             	sub    esp,0x8
c0007e0c:	6a 08                	push   0x8
c0007e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e12:	e8 d2 55 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0007e17:	83 c4 10             	add    esp,0x10
c0007e1a:	83 c4 0c             	add    esp,0xc
c0007e1d:	c3                   	ret    

c0007e1e <Fs::getcwd(Process*, char*, int)>:
c0007e1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e22:	31 c0                	xor    eax,eax
c0007e24:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e27:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e2b:	7d 15                	jge    c0007e42 <Fs::getcwd(Process*, char*, int)+0x24>
c0007e2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e31:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e38:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e3b:	84 c9                	test   cl,cl
c0007e3d:	74 06                	je     c0007e45 <Fs::getcwd(Process*, char*, int)+0x27>
c0007e3f:	40                   	inc    eax
c0007e40:	eb e2                	jmp    c0007e24 <Fs::getcwd(Process*, char*, int)+0x6>
c0007e42:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e45:	31 c0                	xor    eax,eax
c0007e47:	c3                   	ret    

c0007e48 <Fs::initVFS()>:
c0007e48:	83 ec 18             	sub    esp,0x18
c0007e4b:	6a 08                	push   0x8
c0007e4d:	e8 3d 7d 00 00       	call   c000fb8f <malloc>
c0007e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e55:	e8 d2 48 01 00       	call   c001c72c <FAT::FAT()>
c0007e5a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e61:	e8 29 7d 00 00       	call   c000fb8f <malloc>
c0007e66:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e69:	e8 ea 57 01 00       	call   c001d658 <ISO9660::ISO9660()>
c0007e6e:	83 c4 1c             	add    esp,0x1c
c0007e71:	c3                   	ret    

c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e72:	55                   	push   ebp
c0007e73:	57                   	push   edi
c0007e74:	56                   	push   esi
c0007e75:	53                   	push   ebx
c0007e76:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e7c:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e83:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e8a:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e92:	68 00 04 00 00       	push   0x400
c0007e97:	6a 00                	push   0x0
c0007e99:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e9d:	57                   	push   edi
c0007e9e:	e8 4d 86 ff ff       	call   c00004f0 <memset>
c0007ea3:	83 c4 10             	add    esp,0x10
c0007ea6:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007eaa:	75 0b                	jne    c0007eb7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007eac:	50                   	push   eax
c0007ead:	50                   	push   eax
c0007eae:	55                   	push   ebp
c0007eaf:	57                   	push   edi
c0007eb0:	e8 8b 87 ff ff       	call   c0000640 <strcpy>
c0007eb5:	eb 51                	jmp    c0007f08 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007eb7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007ebb:	83 f8 5c             	cmp    eax,0x5c
c0007ebe:	74 05                	je     c0007ec5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007ec0:	83 f8 2f             	cmp    eax,0x2f
c0007ec3:	75 1e                	jne    c0007ee3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007ec5:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0007ece:	3c 60                	cmp    al,0x60
c0007ed0:	7e 03                	jle    c0007ed5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007ed2:	83 e8 20             	sub    eax,0x20
c0007ed5:	88 04 24             	mov    BYTE PTR [esp],al
c0007ed8:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007edf:	50                   	push   eax
c0007ee0:	50                   	push   eax
c0007ee1:	eb 1e                	jmp    c0007f01 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007ee3:	50                   	push   eax
c0007ee4:	50                   	push   eax
c0007ee5:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007eec:	57                   	push   edi
c0007eed:	e8 4e 87 ff ff       	call   c0000640 <strcpy>
c0007ef2:	58                   	pop    eax
c0007ef3:	5a                   	pop    edx
c0007ef4:	68 0d 50 02 c0       	push   0xc002500d
c0007ef9:	57                   	push   edi
c0007efa:	e8 41 89 ff ff       	call   c0000840 <strcat>
c0007eff:	59                   	pop    ecx
c0007f00:	58                   	pop    eax
c0007f01:	55                   	push   ebp
c0007f02:	57                   	push   edi
c0007f03:	e8 38 89 ff ff       	call   c0000840 <strcat>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007f0e:	3c 60                	cmp    al,0x60
c0007f10:	7e 03                	jle    c0007f15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007f12:	83 e8 20             	sub    eax,0x20
c0007f15:	88 04 24             	mov    BYTE PTR [esp],al
c0007f18:	88 06                	mov    BYTE PTR [esi],al
c0007f1a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007f21:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007f27:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007f2b:	bf 03 00 00 00       	mov    edi,0x3
c0007f30:	b8 03 00 00 00       	mov    eax,0x3
c0007f35:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007f39:	89 e9                	mov    ecx,ebp
c0007f3b:	85 ed                	test   ebp,ebp
c0007f3d:	0f 84 97 00 00 00    	je     c0007fda <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007f43:	8d 57 01             	lea    edx,[edi+0x1]
c0007f46:	83 fd 5c             	cmp    ebp,0x5c
c0007f49:	74 05                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007f4b:	83 fd 2f             	cmp    ebp,0x2f
c0007f4e:	75 12                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f50:	89 c5                	mov    ebp,eax
c0007f52:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007f57:	74 09                	je     c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f59:	40                   	inc    eax
c0007f5a:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f5e:	89 d7                	mov    edi,edx
c0007f60:	eb d3                	jmp    c0007f35 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f62:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f67:	0f be e9             	movsx  ebp,cl
c0007f6a:	75 5e                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f6c:	83 fd 2e             	cmp    ebp,0x2e
c0007f6f:	75 59                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f71:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f75:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f7a:	74 18                	je     c0007f94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f7c:	83 fd 2e             	cmp    ebp,0x2e
c0007f7f:	74 53                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f81:	89 fa                	mov    edx,edi
c0007f83:	42                   	inc    edx
c0007f84:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f88:	83 f9 2f             	cmp    ecx,0x2f
c0007f8b:	74 f6                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f8d:	83 f9 5c             	cmp    ecx,0x5c
c0007f90:	74 f1                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f92:	eb ca                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f94:	83 fd 2e             	cmp    ebp,0x2e
c0007f97:	74 3b                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f99:	83 f8 03             	cmp    eax,0x3
c0007f9c:	74 c0                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f9e:	42                   	inc    edx
c0007f9f:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007fa3:	83 f9 5c             	cmp    ecx,0x5c
c0007fa6:	74 f6                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fa8:	83 f9 2f             	cmp    ecx,0x2f
c0007fab:	74 f1                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fad:	48                   	dec    eax
c0007fae:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fb2:	75 06                	jne    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fb4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007fba:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fbe:	74 07                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007fc0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fc4:	48                   	dec    eax
c0007fc5:	eb f3                	jmp    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fc7:	40                   	inc    eax
c0007fc8:	eb 94                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fca:	83 fd 5c             	cmp    ebp,0x5c
c0007fcd:	74 8f                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fcf:	83 fd 2f             	cmp    ebp,0x2f
c0007fd2:	74 8a                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fd4:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007fd7:	40                   	inc    eax
c0007fd8:	eb 84                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fda:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	56                   	push   esi
c0007fe2:	e8 89 85 ff ff       	call   c0000570 <strlen>
c0007fe7:	83 c4 10             	add    esp,0x10
c0007fea:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007fef:	74 17                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007ff1:	83 ec 0c             	sub    esp,0xc
c0007ff4:	56                   	push   esi
c0007ff5:	e8 76 85 ff ff       	call   c0000570 <strlen>
c0007ffa:	83 c4 10             	add    esp,0x10
c0007ffd:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0008002:	74 04                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008004:	31 ff                	xor    edi,edi
c0008006:	eb 5c                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008008:	83 ec 0c             	sub    esp,0xc
c000800b:	56                   	push   esi
c000800c:	e8 5f 85 ff ff       	call   c0000570 <strlen>
c0008011:	83 c4 10             	add    esp,0x10
c0008014:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0008019:	74 e9                	je     c0008004 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000801b:	83 ec 0c             	sub    esp,0xc
c000801e:	56                   	push   esi
c000801f:	e8 4c 85 ff ff       	call   c0000570 <strlen>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000802c:	eb b0                	jmp    c0007fde <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000802e:	52                   	push   edx
c000802f:	52                   	push   edx
c0008030:	56                   	push   esi
c0008031:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0008035:	55                   	push   ebp
c0008036:	e8 05 86 ff ff       	call   c0000640 <strcpy>
c000803b:	59                   	pop    ecx
c000803c:	58                   	pop    eax
c000803d:	56                   	push   esi
c000803e:	55                   	push   ebp
c000803f:	e8 b5 f8 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0008044:	83 c4 10             	add    esp,0x10
c0008047:	48                   	dec    eax
c0008048:	75 37                	jne    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000804a:	50                   	push   eax
c000804b:	56                   	push   esi
c000804c:	55                   	push   ebp
c000804d:	68 4e 35 02 c0       	push   0xc002354e
c0008052:	e8 25 ef ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	8d 47 01             	lea    eax,[edi+0x1]
c000805d:	83 ff 14             	cmp    edi,0x14
c0008060:	74 08                	je     c000806a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c0008062:	89 c7                	mov    edi,eax
c0008064:	85 db                	test   ebx,ebx
c0008066:	75 c6                	jne    c000802e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008068:	eb 17                	jmp    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000806a:	83 ec 0c             	sub    esp,0xc
c000806d:	bf 15 00 00 00       	mov    edi,0x15
c0008072:	68 69 35 02 c0       	push   0xc0023569
c0008077:	e8 6a 7f 00 00       	call   c000ffe6 <KePanic(char const*)>
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	eb e3                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008081:	81 c4 0c 04 00 00    	add    esp,0x40c
c0008087:	5b                   	pop    ebx
c0008088:	5e                   	pop    esi
c0008089:	5f                   	pop    edi
c000808a:	5d                   	pop    ebp
c000808b:	c3                   	ret    

c000808c <File::File(char const*, Process*, bool)>:
c000808c:	83 ec 1c             	sub    esp,0x1c
c000808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008093:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809b:	83 ec 08             	sub    esp,0x8
c000809e:	6a 00                	push   0x0
c00080a0:	50                   	push   eax
c00080a1:	e8 2e b1 00 00       	call   c00131d4 <UnixFile::UnixFile(int)>
c00080a6:	83 c4 10             	add    esp,0x10
c00080a9:	ba 1c 36 02 c0       	mov    edx,0xc002361c
c00080ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b2:	89 10                	mov    DWORD PTR [eax],edx
c00080b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b9:	85 c0                	test   eax,eax
c00080bb:	74 0f                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080bd:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c00080c2:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c6:	74 04                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080c8:	b0 01                	mov    al,0x1
c00080ca:	eb 02                	jmp    c00080ce <File::File(char const*, Process*, bool)+0x42>
c00080cc:	b0 00                	mov    al,0x0
c00080ce:	0f b6 c0             	movzx  eax,al
c00080d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d5:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080df:	83 c2 0d             	add    edx,0xd
c00080e2:	50                   	push   eax
c00080e3:	51                   	push   ecx
c00080e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e8:	52                   	push   edx
c00080e9:	e8 84 fd ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ee:	83 c4 10             	add    esp,0x10
c00080f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fc:	83 c2 0d             	add    edx,0xd
c00080ff:	83 ec 04             	sub    esp,0x4
c0008102:	50                   	push   eax
c0008103:	52                   	push   edx
c0008104:	68 8f 35 02 c0       	push   0xc002358f
c0008109:	e8 6e ee ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000810e:	83 c4 10             	add    esp,0x10
c0008111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008115:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008118:	83 e8 41             	sub    eax,0x41
c000811b:	88 c2                	mov    dl,al
c000811d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008121:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000812b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008133:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008139:	0f b6 c0             	movzx  eax,al
c000813c:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008143:	85 c0                	test   eax,eax
c0008145:	74 3e                	je     c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000814b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008151:	0f b6 c0             	movzx  eax,al
c0008154:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c000815b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008161:	85 c0                	test   eax,eax
c0008163:	75 20                	jne    c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008169:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816f:	0f b6 c0             	movzx  eax,al
c0008172:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008179:	83 ec 0c             	sub    esp,0xc
c000817c:	50                   	push   eax
c000817d:	e8 64 28 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c0008182:	83 c4 10             	add    esp,0x10
c0008185:	90                   	nop
c0008186:	83 c4 1c             	add    esp,0x1c
c0008189:	c3                   	ret    

c000818a <File::File(char const*, Process*)>:
c000818a:	83 ec 0c             	sub    esp,0xc
c000818d:	6a 01                	push   0x1
c000818f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000819b:	e8 ec fe ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00081a0:	83 c4 10             	add    esp,0x10
c00081a3:	90                   	nop
c00081a4:	83 c4 0c             	add    esp,0xc
c00081a7:	c3                   	ret    

c00081a8 <File::open(FileOpenMode)>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081bc:	83 fa 19             	cmp    edx,0x19
c00081bf:	77 40                	ja     c0008201 <File::open(FileOpenMode)+0x59>
c00081c1:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00081c8:	85 d2                	test   edx,edx
c00081ca:	74 35                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081cc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d2:	85 d2                	test   edx,edx
c00081d4:	74 2b                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081d6:	b8 06 00 00 00       	mov    eax,0x6
c00081db:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081df:	75 20                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081ed:	51                   	push   ecx
c00081ee:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081f1:	51                   	push   ecx
c00081f2:	52                   	push   edx
c00081f3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f6:	83 c4 10             	add    esp,0x10
c00081f9:	85 c0                	test   eax,eax
c00081fb:	75 04                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081fd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008201:	83 c4 08             	add    esp,0x8
c0008204:	5b                   	pop    ebx
c0008205:	c3                   	ret    

c0008206 <File::close()>:
c0008206:	53                   	push   ebx
c0008207:	b8 0b 00 00 00       	mov    eax,0xb
c000820c:	83 ec 08             	sub    esp,0x8
c000820f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008213:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000821a:	83 f9 19             	cmp    ecx,0x19
c000821d:	77 41                	ja     c0008260 <File::close()+0x5a>
c000821f:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c0008226:	85 db                	test   ebx,ebx
c0008228:	74 36                	je     c0008260 <File::close()+0x5a>
c000822a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008231:	74 2d                	je     c0008260 <File::close()+0x5a>
c0008233:	b8 05 00 00 00       	mov    eax,0x5
c0008238:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000823c:	74 22                	je     c0008260 <File::close()+0x5a>
c000823e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008242:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c0008249:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824f:	53                   	push   ebx
c0008250:	53                   	push   ebx
c0008251:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008253:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008259:	50                   	push   eax
c000825a:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825d:	83 c4 10             	add    esp,0x10
c0008260:	83 c4 08             	add    esp,0x8
c0008263:	5b                   	pop    ebx
c0008264:	c3                   	ret    
c0008265:	90                   	nop

c0008266 <File::seek(unsigned long long)>:
c0008266:	56                   	push   esi
c0008267:	53                   	push   ebx
c0008268:	b8 0b 00 00 00       	mov    eax,0xb
c000826d:	51                   	push   ecx
c000826e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008272:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008276:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008281:	83 fa 19             	cmp    edx,0x19
c0008284:	77 31                	ja     c00082b7 <File::seek(unsigned long long)+0x51>
c0008286:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000828d:	85 d2                	test   edx,edx
c000828f:	74 26                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c0008291:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008297:	85 d2                	test   edx,edx
c0008299:	74 1c                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c000829b:	b8 05 00 00 00       	mov    eax,0x5
c00082a0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a4:	74 11                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c00082a6:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a8:	53                   	push   ebx
c00082a9:	51                   	push   ecx
c00082aa:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082b0:	52                   	push   edx
c00082b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b4:	83 c4 10             	add    esp,0x10
c00082b7:	5a                   	pop    edx
c00082b8:	5b                   	pop    ebx
c00082b9:	5e                   	pop    esi
c00082ba:	c3                   	ret    
c00082bb:	90                   	nop

c00082bc <File::truncate(unsigned long long)>:
c00082bc:	56                   	push   esi
c00082bd:	53                   	push   ebx
c00082be:	b8 0b 00 00 00       	mov    eax,0xb
c00082c3:	51                   	push   ecx
c00082c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082cc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082d7:	83 fa 19             	cmp    edx,0x19
c00082da:	77 31                	ja     c000830d <File::truncate(unsigned long long)+0x51>
c00082dc:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 26                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082e7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082ed:	85 d2                	test   edx,edx
c00082ef:	74 1c                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082f1:	b8 05 00 00 00       	mov    eax,0x5
c00082f6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082fa:	74 11                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fe:	53                   	push   ebx
c00082ff:	51                   	push   ecx
c0008300:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008306:	52                   	push   edx
c0008307:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000830a:	83 c4 10             	add    esp,0x10
c000830d:	5a                   	pop    edx
c000830e:	5b                   	pop    ebx
c000830f:	5e                   	pop    esi
c0008310:	c3                   	ret    
c0008311:	90                   	nop

c0008312 <File::tell(unsigned long long*)>:
c0008312:	83 ec 0c             	sub    esp,0xc
c0008315:	b8 0b 00 00 00       	mov    eax,0xb
c000831a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008325:	83 fa 19             	cmp    edx,0x19
c0008328:	77 34                	ja     c000835e <File::tell(unsigned long long*)+0x4c>
c000832a:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008331:	85 d2                	test   edx,edx
c0008333:	74 29                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c0008335:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000833b:	85 d2                	test   edx,edx
c000833d:	74 1f                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000833f:	b8 05 00 00 00       	mov    eax,0x5
c0008344:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008348:	74 14                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000834a:	50                   	push   eax
c000834b:	8b 02                	mov    eax,DWORD PTR [edx]
c000834d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008351:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008357:	52                   	push   edx
c0008358:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000835b:	83 c4 10             	add    esp,0x10
c000835e:	83 c4 0c             	add    esp,0xc
c0008361:	c3                   	ret    

c0008362 <File::rewind()>:
c0008362:	83 ec 10             	sub    esp,0x10
c0008365:	6a 00                	push   0x0
c0008367:	6a 00                	push   0x0
c0008369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836d:	e8 f4 fe ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0008372:	83 c4 1c             	add    esp,0x1c
c0008375:	c3                   	ret    

c0008376 <File::unlink()>:
c0008376:	83 ec 0c             	sub    esp,0xc
c0008379:	b8 0b 00 00 00       	mov    eax,0xb
c000837e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008382:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008389:	83 f9 19             	cmp    ecx,0x19
c000838c:	77 2f                	ja     c00083bd <File::unlink()+0x47>
c000838e:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008395:	85 c9                	test   ecx,ecx
c0008397:	74 24                	je     c00083bd <File::unlink()+0x47>
c0008399:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839f:	85 c9                	test   ecx,ecx
c00083a1:	74 1a                	je     c00083bd <File::unlink()+0x47>
c00083a3:	b8 06 00 00 00       	mov    eax,0x6
c00083a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083ac:	75 0f                	jne    c00083bd <File::unlink()+0x47>
c00083ae:	83 c2 0d             	add    edx,0xd
c00083b1:	50                   	push   eax
c00083b2:	50                   	push   eax
c00083b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b5:	52                   	push   edx
c00083b6:	51                   	push   ecx
c00083b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083ba:	83 c4 10             	add    esp,0x10
c00083bd:	83 c4 0c             	add    esp,0xc
c00083c0:	c3                   	ret    
c00083c1:	90                   	nop

c00083c2 <File::rename(char const*)>:
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	b8 0b 00 00 00       	mov    eax,0xb
c00083ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d5:	83 f9 19             	cmp    ecx,0x19
c00083d8:	77 32                	ja     c000840c <File::rename(char const*)+0x4a>
c00083da:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00083e1:	85 c9                	test   ecx,ecx
c00083e3:	74 27                	je     c000840c <File::rename(char const*)+0x4a>
c00083e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083eb:	85 c9                	test   ecx,ecx
c00083ed:	74 1d                	je     c000840c <File::rename(char const*)+0x4a>
c00083ef:	b8 06 00 00 00       	mov    eax,0x6
c00083f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f8:	75 12                	jne    c000840c <File::rename(char const*)+0x4a>
c00083fa:	83 c2 0d             	add    edx,0xd
c00083fd:	50                   	push   eax
c00083fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008404:	52                   	push   edx
c0008405:	51                   	push   ecx
c0008406:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008409:	83 c4 10             	add    esp,0x10
c000840c:	83 c4 0c             	add    esp,0xc
c000840f:	c3                   	ret    

c0008410 <File::chfatattr(unsigned char, unsigned char)>:
c0008410:	57                   	push   edi
c0008411:	b8 0b 00 00 00       	mov    eax,0xb
c0008416:	56                   	push   esi
c0008417:	53                   	push   ebx
c0008418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008420:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008427:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000842b:	83 f9 19             	cmp    ecx,0x19
c000842e:	77 37                	ja     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008430:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008437:	85 c9                	test   ecx,ecx
c0008439:	74 2c                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000843b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008441:	85 c9                	test   ecx,ecx
c0008443:	74 22                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008445:	b8 06 00 00 00       	mov    eax,0x6
c000844a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000844e:	75 17                	jne    c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	89 f0                	mov    eax,esi
c0008454:	83 c2 0d             	add    edx,0xd
c0008457:	0f b6 f0             	movzx  esi,al
c000845a:	0f b6 db             	movzx  ebx,bl
c000845d:	56                   	push   esi
c000845e:	53                   	push   ebx
c000845f:	52                   	push   edx
c0008460:	51                   	push   ecx
c0008461:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008464:	83 c4 10             	add    esp,0x10
c0008467:	5b                   	pop    ebx
c0008468:	5e                   	pop    esi
c0008469:	5f                   	pop    edi
c000846a:	c3                   	ret    
c000846b:	90                   	nop

c000846c <File::exists()>:
c000846c:	83 ec 0c             	sub    esp,0xc
c000846f:	31 c0                	xor    eax,eax
c0008471:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008475:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847c:	83 f9 19             	cmp    ecx,0x19
c000847f:	77 24                	ja     c00084a5 <File::exists()+0x39>
c0008481:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008488:	85 c9                	test   ecx,ecx
c000848a:	74 19                	je     c00084a5 <File::exists()+0x39>
c000848c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008492:	85 c9                	test   ecx,ecx
c0008494:	74 0f                	je     c00084a5 <File::exists()+0x39>
c0008496:	83 c2 0d             	add    edx,0xd
c0008499:	50                   	push   eax
c000849a:	50                   	push   eax
c000849b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849d:	52                   	push   edx
c000849e:	51                   	push   ecx
c000849f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a2:	83 c4 10             	add    esp,0x10
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <File::stat(unsigned long long*, bool*)>:
c00084aa:	56                   	push   esi
c00084ab:	53                   	push   ebx
c00084ac:	50                   	push   eax
c00084ad:	b8 0b 00 00 00       	mov    eax,0xb
c00084b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084c5:	83 f9 19             	cmp    ecx,0x19
c00084c8:	77 3d                	ja     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084ca:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00084d1:	85 c9                	test   ecx,ecx
c00084d3:	74 32                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084db:	85 c9                	test   ecx,ecx
c00084dd:	74 28                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e5:	74 13                	je     c00084fa <File::stat(unsigned long long*, bool*)+0x50>
c00084e7:	83 ec 04             	sub    esp,0x4
c00084ea:	56                   	push   esi
c00084eb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084f1:	51                   	push   ecx
c00084f2:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f8:	eb 0a                	jmp    c0008504 <File::stat(unsigned long long*, bool*)+0x5a>
c00084fa:	53                   	push   ebx
c00084fb:	83 c2 0d             	add    edx,0xd
c00084fe:	56                   	push   esi
c00084ff:	52                   	push   edx
c0008500:	51                   	push   ecx
c0008501:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008504:	83 c4 10             	add    esp,0x10
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	c3                   	ret    

c000850b <Fs::setcwd(Process*, char*)>:
c000850b:	55                   	push   ebp
c000850c:	57                   	push   edi
c000850d:	56                   	push   esi
c000850e:	53                   	push   ebx
c000850f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008515:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851c:	6a 00                	push   0x0
c000851e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008524:	57                   	push   edi
c0008525:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008530:	56                   	push   esi
c0008531:	e8 3c f9 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008536:	89 34 24             	mov    DWORD PTR [esp],esi
c0008539:	e8 32 80 ff ff       	call   c0000570 <strlen>
c000853e:	83 c4 10             	add    esp,0x10
c0008541:	83 f8 02             	cmp    eax,0x2
c0008544:	77 15                	ja     c000855b <Fs::setcwd(Process*, char*)+0x50>
c0008546:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000854b:	83 eb 41             	sub    ebx,0x41
c000854e:	8b 04 9d e0 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3520]
c0008555:	85 c0                	test   eax,eax
c0008557:	75 1c                	jne    c0008575 <Fs::setcwd(Process*, char*)+0x6a>
c0008559:	eb 2f                	jmp    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000855b:	83 ec 0c             	sub    esp,0xc
c000855e:	56                   	push   esi
c000855f:	e8 0c 80 ff ff       	call   c0000570 <strlen>
c0008564:	83 c4 10             	add    esp,0x10
c0008567:	83 f8 03             	cmp    eax,0x3
c000856a:	75 57                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c000856c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008571:	75 50                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c0008573:	eb d1                	jmp    c0008546 <Fs::setcwd(Process*, char*)+0x3b>
c0008575:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857c:	75 0c                	jne    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000857e:	83 ec 0c             	sub    esp,0xc
c0008581:	50                   	push   eax
c0008582:	e8 5f 24 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c0008587:	83 c4 10             	add    esp,0x10
c000858a:	b8 03 00 00 00       	mov    eax,0x3
c000858f:	83 fb 19             	cmp    ebx,0x19
c0008592:	0f 87 c6 00 00 00    	ja     c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008598:	8b 14 9d e0 ca 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd3520]
c000859f:	b8 05 00 00 00       	mov    eax,0x5
c00085a4:	85 d2                	test   edx,edx
c00085a6:	0f 84 b2 00 00 00    	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085ac:	b8 06 00 00 00       	mov    eax,0x6
c00085b1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b8:	0f 85 92 00 00 00    	jne    c0008650 <Fs::setcwd(Process*, char*)+0x145>
c00085be:	e9 9b 00 00 00       	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085c3:	83 ec 0c             	sub    esp,0xc
c00085c6:	68 14 01 00 00       	push   0x114
c00085cb:	e8 bf 75 00 00       	call   c000fb8f <malloc>
c00085d0:	83 c4 0c             	add    esp,0xc
c00085d3:	89 c3                	mov    ebx,eax
c00085d5:	55                   	push   ebp
c00085d6:	56                   	push   esi
c00085d7:	50                   	push   eax
c00085d8:	e8 ad fb ff ff       	call   c000818a <File::File(char const*, Process*)>
c00085dd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e2:	83 c4 0c             	add    esp,0xc
c00085e5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e9:	50                   	push   eax
c00085ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ee:	50                   	push   eax
c00085ef:	53                   	push   ebx
c00085f0:	e8 b5 fe ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	83 f8 02             	cmp    eax,0x2
c00085fb:	74 27                	je     c0008624 <Fs::setcwd(Process*, char*)+0x119>
c00085fd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008602:	75 1c                	jne    c0008620 <Fs::setcwd(Process*, char*)+0x115>
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	85 db                	test   ebx,ebx
c000860b:	74 51                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008612:	53                   	push   ebx
c0008613:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008616:	83 c4 10             	add    esp,0x10
c0008619:	b8 02 00 00 00       	mov    eax,0x2
c000861e:	eb 3e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008620:	85 c0                	test   eax,eax
c0008622:	74 1c                	je     c0008640 <Fs::setcwd(Process*, char*)+0x135>
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	85 db                	test   ebx,ebx
c000862b:	74 31                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008632:	53                   	push   ebx
c0008633:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008636:	83 c4 10             	add    esp,0x10
c0008639:	b8 01 00 00 00       	mov    eax,0x1
c000863e:	eb 1e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008640:	85 db                	test   ebx,ebx
c0008642:	74 0c                	je     c0008650 <Fs::setcwd(Process*, char*)+0x145>
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008649:	53                   	push   ebx
c000864a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864d:	83 c4 10             	add    esp,0x10
c0008650:	50                   	push   eax
c0008651:	50                   	push   eax
c0008652:	56                   	push   esi
c0008653:	57                   	push   edi
c0008654:	e8 e7 7f ff ff       	call   c0000640 <strcpy>
c0008659:	83 c4 10             	add    esp,0x10
c000865c:	31 c0                	xor    eax,eax
c000865e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008664:	5b                   	pop    ebx
c0008665:	5e                   	pop    esi
c0008666:	5f                   	pop    edi
c0008667:	5d                   	pop    ebp
c0008668:	c3                   	ret    
c0008669:	90                   	nop

c000866a <Directory::Directory(char const*, Process*)>:
c000866a:	83 ec 0c             	sub    esp,0xc
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	83 ec 08             	sub    esp,0x8
c0008674:	6a 00                	push   0x0
c0008676:	50                   	push   eax
c0008677:	e8 58 ab 00 00       	call   c00131d4 <UnixFile::UnixFile(int)>
c000867c:	83 c4 10             	add    esp,0x10
c000867f:	ba 38 36 02 c0       	mov    edx,0xc0023638
c0008684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008688:	89 10                	mov    DWORD PTR [eax],edx
c000868a:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000868f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008693:	0f 95 c0             	setne  al
c0008696:	0f b6 c0             	movzx  eax,al
c0008699:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a7:	83 c2 0d             	add    edx,0xd
c00086aa:	50                   	push   eax
c00086ab:	51                   	push   ecx
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	52                   	push   edx
c00086b1:	e8 bc f7 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b6:	83 c4 10             	add    esp,0x10
c00086b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086c0:	83 e8 41             	sub    eax,0x41
c00086c3:	88 c2                	mov    dl,al
c00086c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086e1:	0f b6 c0             	movzx  eax,al
c00086e4:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086eb:	85 c0                	test   eax,eax
c00086ed:	74 3e                	je     c000872d <Directory::Directory(char const*, Process*)+0xc3>
c00086ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f9:	0f b6 c0             	movzx  eax,al
c00086fc:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008703:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008709:	85 c0                	test   eax,eax
c000870b:	75 20                	jne    c000872d <Directory::Directory(char const*, Process*)+0xc3>
c000870d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008711:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008717:	0f b6 c0             	movzx  eax,al
c000871a:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008721:	83 ec 0c             	sub    esp,0xc
c0008724:	50                   	push   eax
c0008725:	e8 bc 22 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c000872a:	83 c4 10             	add    esp,0x10
c000872d:	90                   	nop
c000872e:	83 c4 0c             	add    esp,0xc
c0008731:	c3                   	ret    

c0008732 <Directory::open()>:
c0008732:	53                   	push   ebx
c0008733:	b8 0b 00 00 00       	mov    eax,0xb
c0008738:	83 ec 08             	sub    esp,0x8
c000873b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008746:	83 fa 19             	cmp    edx,0x19
c0008749:	77 3d                	ja     c0008788 <Directory::open()+0x56>
c000874b:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008752:	85 d2                	test   edx,edx
c0008754:	74 32                	je     c0008788 <Directory::open()+0x56>
c0008756:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875c:	85 d2                	test   edx,edx
c000875e:	74 28                	je     c0008788 <Directory::open()+0x56>
c0008760:	b8 06 00 00 00       	mov    eax,0x6
c0008765:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008769:	75 1d                	jne    c0008788 <Directory::open()+0x56>
c000876b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008771:	50                   	push   eax
c0008772:	8b 02                	mov    eax,DWORD PTR [edx]
c0008774:	51                   	push   ecx
c0008775:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008778:	51                   	push   ecx
c0008779:	52                   	push   edx
c000877a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	75 04                	jne    c0008788 <Directory::open()+0x56>
c0008784:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008788:	83 c4 08             	add    esp,0x8
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <Directory::close()>:
c000878e:	53                   	push   ebx
c000878f:	b8 0b 00 00 00       	mov    eax,0xb
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a2:	83 f9 19             	cmp    ecx,0x19
c00087a5:	77 41                	ja     c00087e8 <Directory::close()+0x5a>
c00087a7:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c00087ae:	85 db                	test   ebx,ebx
c00087b0:	74 36                	je     c00087e8 <Directory::close()+0x5a>
c00087b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b9:	74 2d                	je     c00087e8 <Directory::close()+0x5a>
c00087bb:	b8 05 00 00 00       	mov    eax,0x5
c00087c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c4:	74 22                	je     c00087e8 <Directory::close()+0x5a>
c00087c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087ca:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c00087d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d7:	53                   	push   ebx
c00087d8:	53                   	push   ebx
c00087d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087e1:	50                   	push   eax
c00087e2:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	83 c4 08             	add    esp,0x8
c00087eb:	5b                   	pop    ebx
c00087ec:	c3                   	ret    
c00087ed:	90                   	nop

c00087ee <Directory::unlink()>:
c00087ee:	83 ec 0c             	sub    esp,0xc
c00087f1:	b8 0b 00 00 00       	mov    eax,0xb
c00087f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008801:	83 f9 19             	cmp    ecx,0x19
c0008804:	77 2f                	ja     c0008835 <Directory::unlink()+0x47>
c0008806:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000880d:	85 c9                	test   ecx,ecx
c000880f:	74 24                	je     c0008835 <Directory::unlink()+0x47>
c0008811:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008817:	85 c9                	test   ecx,ecx
c0008819:	74 1a                	je     c0008835 <Directory::unlink()+0x47>
c000881b:	b8 06 00 00 00       	mov    eax,0x6
c0008820:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008824:	75 0f                	jne    c0008835 <Directory::unlink()+0x47>
c0008826:	83 c2 0d             	add    edx,0xd
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882d:	52                   	push   edx
c000882e:	51                   	push   ecx
c000882f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	83 c4 0c             	add    esp,0xc
c0008838:	c3                   	ret    
c0008839:	90                   	nop

c000883a <Directory::rename(char const*)>:
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	b8 0b 00 00 00       	mov    eax,0xb
c0008842:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008846:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884d:	83 f9 19             	cmp    ecx,0x19
c0008850:	77 32                	ja     c0008884 <Directory::rename(char const*)+0x4a>
c0008852:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008859:	85 c9                	test   ecx,ecx
c000885b:	74 27                	je     c0008884 <Directory::rename(char const*)+0x4a>
c000885d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008863:	85 c9                	test   ecx,ecx
c0008865:	74 1d                	je     c0008884 <Directory::rename(char const*)+0x4a>
c0008867:	b8 06 00 00 00       	mov    eax,0x6
c000886c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008870:	75 12                	jne    c0008884 <Directory::rename(char const*)+0x4a>
c0008872:	83 c2 0d             	add    edx,0xd
c0008875:	50                   	push   eax
c0008876:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008878:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887c:	52                   	push   edx
c000887d:	51                   	push   ecx
c000887e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008881:	83 c4 10             	add    esp,0x10
c0008884:	83 c4 0c             	add    esp,0xc
c0008887:	c3                   	ret    

c0008888 <Directory::exists()>:
c0008888:	83 ec 0c             	sub    esp,0xc
c000888b:	31 c0                	xor    eax,eax
c000888d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008891:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008898:	83 f9 19             	cmp    ecx,0x19
c000889b:	77 24                	ja     c00088c1 <Directory::exists()+0x39>
c000889d:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088a4:	85 c9                	test   ecx,ecx
c00088a6:	74 19                	je     c00088c1 <Directory::exists()+0x39>
c00088a8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ae:	85 c9                	test   ecx,ecx
c00088b0:	74 0f                	je     c00088c1 <Directory::exists()+0x39>
c00088b2:	83 c2 0d             	add    edx,0xd
c00088b5:	50                   	push   eax
c00088b6:	50                   	push   eax
c00088b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b9:	52                   	push   edx
c00088ba:	51                   	push   ecx
c00088bb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088be:	83 c4 10             	add    esp,0x10
c00088c1:	83 c4 0c             	add    esp,0xc
c00088c4:	c3                   	ret    
c00088c5:	90                   	nop

c00088c6 <Directory::read(dirent*)>:
c00088c6:	83 ec 1c             	sub    esp,0x1c
c00088c9:	b8 0b 00 00 00       	mov    eax,0xb
c00088ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d9:	83 f9 19             	cmp    ecx,0x19
c00088dc:	77 30                	ja     c000890e <Directory::read(dirent*)+0x48>
c00088de:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088e5:	85 c9                	test   ecx,ecx
c00088e7:	74 25                	je     c000890e <Directory::read(dirent*)+0x48>
c00088e9:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088f0:	74 1c                	je     c000890e <Directory::read(dirent*)+0x48>
c00088f2:	83 ec 0c             	sub    esp,0xc
c00088f5:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088fb:	51                   	push   ecx
c00088fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008900:	6a 00                	push   0x0
c0008902:	68 10 01 00 00       	push   0x110
c0008907:	52                   	push   edx
c0008908:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000890b:	83 c4 20             	add    esp,0x20
c000890e:	83 c4 1c             	add    esp,0x1c
c0008911:	c3                   	ret    

c0008912 <Directory::create()>:
c0008912:	83 ec 0c             	sub    esp,0xc
c0008915:	b8 0b 00 00 00       	mov    eax,0xb
c000891a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008925:	83 f9 19             	cmp    ecx,0x19
c0008928:	77 2f                	ja     c0008959 <Directory::create()+0x47>
c000892a:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008931:	85 c9                	test   ecx,ecx
c0008933:	74 24                	je     c0008959 <Directory::create()+0x47>
c0008935:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000893b:	85 c9                	test   ecx,ecx
c000893d:	74 1a                	je     c0008959 <Directory::create()+0x47>
c000893f:	b8 06 00 00 00       	mov    eax,0x6
c0008944:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008948:	75 0f                	jne    c0008959 <Directory::create()+0x47>
c000894a:	83 c2 0d             	add    edx,0xd
c000894d:	50                   	push   eax
c000894e:	50                   	push   eax
c000894f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008951:	52                   	push   edx
c0008952:	51                   	push   ecx
c0008953:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008956:	83 c4 10             	add    esp,0x10
c0008959:	83 c4 0c             	add    esp,0xc
c000895c:	c3                   	ret    
c000895d:	90                   	nop

c000895e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895e:	b8 0a 00 00 00       	mov    eax,0xa
c0008963:	c3                   	ret    

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 3e 12 00 00       	call   c0009bb6 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba 54 36 02 c0       	mov    edx,0xc0023654
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba 54 36 02 c0       	mov    edx,0xc0023654
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 9f 0f 00 00       	call   c0009956 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 06 4a 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00089f8:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 f5 e8 00 00       	call   c0017304 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 72 1f 01 00       	call   c001a98d <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 a5 e7 00 00       	jmp    c00171d0 <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 4c 1f 01 00       	call   c001a98d <HalMakeBeep(int)>
c0008a41:	83 c4 10             	add    esp,0x10
c0008a44:	89 f0                	mov    eax,esi
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 ad e8 00 00       	call   c0017304 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 24 1f 01 00       	jmp    c001a98d <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0008a7a:	e8 d1 e3 00 00       	call   c0016e50 <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 e9 70 00 00       	call   c000fb8f <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 80 36 02 c0       	push   0xc0023680
c0008ab9:	53                   	push   ebx
c0008aba:	e8 cb f6 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 9f 36 02 c0       	push   0xc002369f
c0008ad3:	e8 0e 75 00 00       	call   c000ffe6 <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 c0 f6 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 ac f9 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 b5 36 02 c0       	push   0xc00236b5
c0008b10:	e8 67 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 65 70 00 00       	call   c000fb8f <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 c5 36 02 c0       	push   0xc00236c5
c0008b77:	e8 00 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7c f6 ff ff       	call   c0008206 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 c6 6f 00 00       	call   c000fb8f <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3cc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 ce 36 02 c0       	push   0xc00236ce
c0008bea:	50                   	push   eax
c0008beb:	e8 50 7a ff ff       	call   c0000640 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 2a 79 ff ff       	call   c0000570 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 ce 36 02 c0       	push   0xc00236ce
c0008c6c:	50                   	push   eax
c0008c6d:	e8 ce 7b ff ff       	call   c0000840 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 d7 78 ff ff       	call   c0000570 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 ce 36 02 c0       	push   0xc00236ce
c0008cbb:	50                   	push   eax
c0008cbc:	e8 7f 7b ff ff       	call   c0000840 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 c3 02 c0       	mov    ds:0xc002c324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 d0 36 02 c0       	push   0xc00236d0
c0008cf7:	e8 80 e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 e5 36 02 c0       	push   0xc00236e5
c0008d0d:	e8 6a e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 3c 78 ff ff       	call   c0000570 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 e5 7a ff ff       	call   c0000840 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 fa 77 ff ff       	call   c0000570 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 e9 36 02 c0       	push   0xc00236e9
c0008d9c:	50                   	push   eax
c0008d9d:	e8 9e 7a ff ff       	call   c0000840 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 ee 36 02 c0       	push   0xc00236ee
c0008de3:	e8 94 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 fc 36 02 c0       	push   0xc00236fc
c0008e01:	e8 76 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 05 37 02 c0       	push   0xc0023705
c0008e26:	e8 51 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 c3 02 c0       	mov    al,ds:0xc002c320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 23 37 02 c0       	push   0xc0023723
c0008e4a:	e8 2d e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 34 37 02 c0       	push   0xc0023734
c0008e63:	e8 14 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 47 37 02 c0       	push   0xc0023747
c0008e9b:	e8 dc e0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 c6 02 c0       	mov    ds:0xc002c661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	01 c0                	add    eax,eax
c0008f57:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008f98:	c6 05 61 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c661,0x0
c0008f9f:	c7 05 64 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 54 37 02 c0       	push   0xc0023754
c0008fba:	e8 7d 44 00 00       	call   c000d43c <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 79 37 02 c0       	push   0xc0023779
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 67 50 00 00       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 27 49 00 00       	call   c000d90e <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 65 45 00 00       	call   c000d55a <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 54 37 02 c0       	push   0xc0023754
c0009054:	e8 e3 43 00 00       	call   c000d43c <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 79 37 02 c0       	push   0xc0023779
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 cd 4f 00 00       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 1c 45 00 00       	call   c000d5ac <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 bc 44 00 00       	call   c000d55a <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 ec 0a 00 00       	call   c0009bb6 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba d8 37 02 c0       	mov    edx,0xc00237d8
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba d8 37 02 c0       	mov    edx,0xc00237d8
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 4f 08 00 00       	call   c0009956 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 b6 42 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0009167:	01 c2                	add    edx,eax
c0009169:	89 d0                	mov    eax,edx
c000916b:	01 c0                	add    eax,eax
c000916d:	01 d0                	add    eax,edx
c000916f:	01 c0                	add    eax,eax
c0009171:	01 d0                	add    eax,edx
c0009173:	c1 e0 05             	shl    eax,0x5
c0009176:	01 d0                	add    eax,edx
c0009178:	c1 e0 04             	shl    eax,0x4
c000917b:	89 c2                	mov    edx,eax
c000917d:	c1 fa 1f             	sar    edx,0x1f
c0009180:	01 c1                	add    ecx,eax
c0009182:	11 d3                	adc    ebx,edx
c0009184:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c0009189:	0f b6 c0             	movzx  eax,al
c000918c:	85 c0                	test   eax,eax
c000918e:	74 0c                	je     c000919c <Clock::timeInSecondsLocal()+0x62>
c0009190:	b8 08 07 00 00       	mov    eax,0x708
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	eb 0a                	jmp    c00091a6 <Clock::timeInSecondsLocal()+0x6c>
c000919c:	b8 00 00 00 00       	mov    eax,0x0
c00091a1:	ba 00 00 00 00       	mov    edx,0x0
c00091a6:	01 c8                	add    eax,ecx
c00091a8:	11 da                	adc    edx,ebx
c00091aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091ad:	c9                   	leave  
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091b0:	55                   	push   ebp
c00091b1:	89 e5                	mov    ebp,esp
c00091b3:	56                   	push   esi
c00091b4:	53                   	push   ebx
c00091b5:	83 ec 10             	sub    esp,0x10
c00091b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00091c9:	83 c0 2c             	add    eax,0x2c
c00091cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00091ce:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00091d3:	0f b6 d0             	movzx  edx,al
c00091d6:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00091db:	01 c2                	add    edx,eax
c00091dd:	89 d0                	mov    eax,edx
c00091df:	01 c0                	add    eax,eax
c00091e1:	01 d0                	add    eax,edx
c00091e3:	01 c0                	add    eax,eax
c00091e5:	01 d0                	add    eax,edx
c00091e7:	c1 e0 05             	shl    eax,0x5
c00091ea:	01 d0                	add    eax,edx
c00091ec:	c1 e0 04             	shl    eax,0x4
c00091ef:	89 c2                	mov    edx,eax
c00091f1:	c1 fa 1f             	sar    edx,0x1f
c00091f4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091f7:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091fa:	29 c1                	sub    ecx,eax
c00091fc:	19 d3                	sbb    ebx,edx
c00091fe:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c0009203:	0f b6 c0             	movzx  eax,al
c0009206:	85 c0                	test   eax,eax
c0009208:	74 0c                	je     c0009216 <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c000920a:	b8 08 07 00 00       	mov    eax,0x708
c000920f:	ba 00 00 00 00       	mov    edx,0x0
c0009214:	eb 0a                	jmp    c0009220 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c0009216:	b8 00 00 00 00       	mov    eax,0x0
c000921b:	ba 00 00 00 00       	mov    edx,0x0
c0009220:	29 c1                	sub    ecx,eax
c0009222:	19 d3                	sbb    ebx,edx
c0009224:	89 c8                	mov    eax,ecx
c0009226:	89 da                	mov    edx,ebx
c0009228:	83 ec 04             	sub    esp,0x4
c000922b:	52                   	push   edx
c000922c:	50                   	push   eax
c000922d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009230:	ff d6                	call   esi
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009238:	5b                   	pop    ebx
c0009239:	5e                   	pop    esi
c000923a:	5d                   	pop    ebp
c000923b:	c3                   	ret    

c000923c <KeDatetimeToSeconds(datetime_t)>:
c000923c:	55                   	push   ebp
c000923d:	89 e5                	mov    ebp,esp
c000923f:	53                   	push   ebx
c0009240:	83 ec 24             	sub    esp,0x24
c0009243:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009247:	2d 6c 07 00 00       	sub    eax,0x76c
c000924c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009250:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009253:	83 e8 01             	sub    eax,0x1
c0009256:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009259:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009260:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009267:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000926e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009275:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009278:	0f b6 c8             	movzx  ecx,al
c000927b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000927e:	0f b6 d0             	movzx  edx,al
c0009281:	89 d0                	mov    eax,edx
c0009283:	01 c0                	add    eax,eax
c0009285:	01 d0                	add    eax,edx
c0009287:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000928e:	01 d0                	add    eax,edx
c0009290:	c1 e0 02             	shl    eax,0x2
c0009293:	01 c1                	add    ecx,eax
c0009295:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009298:	0f b6 d0             	movzx  edx,al
c000929b:	89 d0                	mov    eax,edx
c000929d:	01 c0                	add    eax,eax
c000929f:	01 d0                	add    eax,edx
c00092a1:	01 c0                	add    eax,eax
c00092a3:	01 d0                	add    eax,edx
c00092a5:	c1 e0 05             	shl    eax,0x5
c00092a8:	01 d0                	add    eax,edx
c00092aa:	c1 e0 04             	shl    eax,0x4
c00092ad:	01 c8                	add    eax,ecx
c00092af:	89 c2                	mov    edx,eax
c00092b1:	c1 fa 1f             	sar    edx,0x1f
c00092b4:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c00092b7:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c00092ba:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c00092bd:	0f b6 c0             	movzx  eax,al
c00092c0:	83 e8 01             	sub    eax,0x1
c00092c3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092c6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092c9:	0f b6 c0             	movzx  eax,al
c00092cc:	8b 04 85 a0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc860]
c00092d3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092d6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092d9:	0f b6 c0             	movzx  eax,al
c00092dc:	83 f8 01             	cmp    eax,0x1
c00092df:	76 7c                	jbe    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092e1:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092e5:	0f b7 c0             	movzx  eax,ax
c00092e8:	83 e0 03             	and    eax,0x3
c00092eb:	85 c0                	test   eax,eax
c00092ed:	75 6e                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092ef:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f3:	0f b7 c8             	movzx  ecx,ax
c00092f6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092fb:	89 c8                	mov    eax,ecx
c00092fd:	f7 e2                	mul    edx
c00092ff:	c1 ea 05             	shr    edx,0x5
c0009302:	89 d0                	mov    eax,edx
c0009304:	c1 e0 02             	shl    eax,0x2
c0009307:	01 d0                	add    eax,edx
c0009309:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009310:	01 d0                	add    eax,edx
c0009312:	c1 e0 02             	shl    eax,0x2
c0009315:	29 c1                	sub    ecx,eax
c0009317:	89 c8                	mov    eax,ecx
c0009319:	0f b7 c0             	movzx  eax,ax
c000931c:	85 c0                	test   eax,eax
c000931e:	75 39                	jne    c0009359 <KeDatetimeToSeconds(datetime_t)+0x11d>
c0009320:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009324:	0f b7 c0             	movzx  eax,ax
c0009327:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000932d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009332:	f7 e9                	imul   ecx
c0009334:	c1 fa 07             	sar    edx,0x7
c0009337:	89 c8                	mov    eax,ecx
c0009339:	c1 f8 1f             	sar    eax,0x1f
c000933c:	29 c2                	sub    edx,eax
c000933e:	89 d0                	mov    eax,edx
c0009340:	c1 e0 02             	shl    eax,0x2
c0009343:	01 d0                	add    eax,edx
c0009345:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000934c:	01 d0                	add    eax,edx
c000934e:	c1 e0 04             	shl    eax,0x4
c0009351:	29 c1                	sub    ecx,eax
c0009353:	89 ca                	mov    edx,ecx
c0009355:	85 d2                	test   edx,edx
c0009357:	75 04                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c0009359:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000935d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009361:	0f b7 c0             	movzx  eax,ax
c0009364:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009367:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936a:	83 f8 46             	cmp    eax,0x46
c000936d:	0f 9f c0             	setg   al
c0009370:	0f b6 c0             	movzx  eax,al
c0009373:	85 c0                	test   eax,eax
c0009375:	0f 84 a4 00 00 00    	je     c000941f <KeDatetimeToSeconds(datetime_t)+0x1e3>
c000937b:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009382:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009386:	0f b7 d0             	movzx  edx,ax
c0009389:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000938c:	39 c2                	cmp    edx,eax
c000938e:	0f 8e b8 01 00 00    	jle    c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c0009394:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009397:	83 e0 03             	and    eax,0x3
c000939a:	85 c0                	test   eax,eax
c000939c:	75 6b                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c000939e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093a1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093a6:	f7 e9                	imul   ecx
c00093a8:	c1 fa 05             	sar    edx,0x5
c00093ab:	89 c8                	mov    eax,ecx
c00093ad:	c1 f8 1f             	sar    eax,0x1f
c00093b0:	29 c2                	sub    edx,eax
c00093b2:	89 d0                	mov    eax,edx
c00093b4:	c1 e0 02             	shl    eax,0x2
c00093b7:	01 d0                	add    eax,edx
c00093b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093c0:	01 d0                	add    eax,edx
c00093c2:	c1 e0 02             	shl    eax,0x2
c00093c5:	29 c1                	sub    ecx,eax
c00093c7:	89 ca                	mov    edx,ecx
c00093c9:	85 d2                	test   edx,edx
c00093cb:	75 35                	jne    c0009402 <KeDatetimeToSeconds(datetime_t)+0x1c6>
c00093cd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093d0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093d6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093db:	f7 e9                	imul   ecx
c00093dd:	c1 fa 07             	sar    edx,0x7
c00093e0:	89 c8                	mov    eax,ecx
c00093e2:	c1 f8 1f             	sar    eax,0x1f
c00093e5:	29 c2                	sub    edx,eax
c00093e7:	89 d0                	mov    eax,edx
c00093e9:	c1 e0 02             	shl    eax,0x2
c00093ec:	01 d0                	add    eax,edx
c00093ee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093f5:	01 d0                	add    eax,edx
c00093f7:	c1 e0 04             	shl    eax,0x4
c00093fa:	29 c1                	sub    ecx,eax
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	85 d2                	test   edx,edx
c0009400:	75 07                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009402:	b8 6e 01 00 00       	mov    eax,0x16e
c0009407:	eb 05                	jmp    c000940e <KeDatetimeToSeconds(datetime_t)+0x1d2>
c0009409:	b8 6d 01 00 00       	mov    eax,0x16d
c000940e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009411:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009414:	83 c0 01             	add    eax,0x1
c0009417:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000941a:	e9 63 ff ff ff       	jmp    c0009382 <KeDatetimeToSeconds(datetime_t)+0x146>
c000941f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009422:	83 f8 45             	cmp    eax,0x45
c0009425:	0f 8f 21 01 00 00    	jg     c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c000942b:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009432:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009436:	0f b7 d0             	movzx  edx,ax
c0009439:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000943c:	39 c2                	cmp    edx,eax
c000943e:	0f 8d 8b 00 00 00    	jge    c00094cf <KeDatetimeToSeconds(datetime_t)+0x293>
c0009444:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009447:	83 e0 03             	and    eax,0x3
c000944a:	85 c0                	test   eax,eax
c000944c:	75 6b                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000944e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009451:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009456:	f7 e9                	imul   ecx
c0009458:	c1 fa 05             	sar    edx,0x5
c000945b:	89 c8                	mov    eax,ecx
c000945d:	c1 f8 1f             	sar    eax,0x1f
c0009460:	29 c2                	sub    edx,eax
c0009462:	89 d0                	mov    eax,edx
c0009464:	c1 e0 02             	shl    eax,0x2
c0009467:	01 d0                	add    eax,edx
c0009469:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009470:	01 d0                	add    eax,edx
c0009472:	c1 e0 02             	shl    eax,0x2
c0009475:	29 c1                	sub    ecx,eax
c0009477:	89 ca                	mov    edx,ecx
c0009479:	85 d2                	test   edx,edx
c000947b:	75 35                	jne    c00094b2 <KeDatetimeToSeconds(datetime_t)+0x276>
c000947d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009480:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009486:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000948b:	f7 e9                	imul   ecx
c000948d:	c1 fa 07             	sar    edx,0x7
c0009490:	89 c8                	mov    eax,ecx
c0009492:	c1 f8 1f             	sar    eax,0x1f
c0009495:	29 c2                	sub    edx,eax
c0009497:	89 d0                	mov    eax,edx
c0009499:	c1 e0 02             	shl    eax,0x2
c000949c:	01 d0                	add    eax,edx
c000949e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a5:	01 d0                	add    eax,edx
c00094a7:	c1 e0 04             	shl    eax,0x4
c00094aa:	29 c1                	sub    ecx,eax
c00094ac:	89 ca                	mov    edx,ecx
c00094ae:	85 d2                	test   edx,edx
c00094b0:	75 07                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c00094b2:	b8 6e 01 00 00       	mov    eax,0x16e
c00094b7:	eb 05                	jmp    c00094be <KeDatetimeToSeconds(datetime_t)+0x282>
c00094b9:	b8 6d 01 00 00       	mov    eax,0x16d
c00094be:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094c4:	83 e8 01             	sub    eax,0x1
c00094c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00094ca:	e9 63 ff ff ff       	jmp    c0009432 <KeDatetimeToSeconds(datetime_t)+0x1f6>
c00094cf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094d2:	83 e0 03             	and    eax,0x3
c00094d5:	85 c0                	test   eax,eax
c00094d7:	75 6b                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c00094d9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094dc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094e1:	f7 e9                	imul   ecx
c00094e3:	c1 fa 05             	sar    edx,0x5
c00094e6:	89 c8                	mov    eax,ecx
c00094e8:	c1 f8 1f             	sar    eax,0x1f
c00094eb:	29 c2                	sub    edx,eax
c00094ed:	89 d0                	mov    eax,edx
c00094ef:	c1 e0 02             	shl    eax,0x2
c00094f2:	01 d0                	add    eax,edx
c00094f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094fb:	01 d0                	add    eax,edx
c00094fd:	c1 e0 02             	shl    eax,0x2
c0009500:	29 c1                	sub    ecx,eax
c0009502:	89 ca                	mov    edx,ecx
c0009504:	85 d2                	test   edx,edx
c0009506:	75 35                	jne    c000953d <KeDatetimeToSeconds(datetime_t)+0x301>
c0009508:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000950b:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009511:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009516:	f7 e9                	imul   ecx
c0009518:	c1 fa 07             	sar    edx,0x7
c000951b:	89 c8                	mov    eax,ecx
c000951d:	c1 f8 1f             	sar    eax,0x1f
c0009520:	29 c2                	sub    edx,eax
c0009522:	89 d0                	mov    eax,edx
c0009524:	c1 e0 02             	shl    eax,0x2
c0009527:	01 d0                	add    eax,edx
c0009529:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009530:	01 d0                	add    eax,edx
c0009532:	c1 e0 04             	shl    eax,0x4
c0009535:	29 c1                	sub    ecx,eax
c0009537:	89 ca                	mov    edx,ecx
c0009539:	85 d2                	test   edx,edx
c000953b:	75 07                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c000953d:	b8 6e 01 00 00       	mov    eax,0x16e
c0009542:	eb 05                	jmp    c0009549 <KeDatetimeToSeconds(datetime_t)+0x30d>
c0009544:	b8 6d 01 00 00       	mov    eax,0x16d
c0009549:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000954c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000954f:	89 c2                	mov    edx,eax
c0009551:	c1 fa 1f             	sar    edx,0x1f
c0009554:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000955a:	6b c8 00             	imul   ecx,eax,0x0
c000955d:	01 d9                	add    ecx,ebx
c000955f:	bb 80 51 01 00       	mov    ebx,0x15180
c0009564:	f7 e3                	mul    ebx
c0009566:	01 d1                	add    ecx,edx
c0009568:	89 ca                	mov    edx,ecx
c000956a:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000956d:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009570:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009573:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009576:	83 c4 24             	add    esp,0x24
c0009579:	5b                   	pop    ebx
c000957a:	5d                   	pop    ebp
c000957b:	c3                   	ret    

c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000957c:	55                   	push   ebp
c000957d:	89 e5                	mov    ebp,esp
c000957f:	56                   	push   esi
c0009580:	53                   	push   ebx
c0009581:	83 ec 20             	sub    esp,0x20
c0009584:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009587:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000958a:	e8 ad fc ff ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c000958f:	83 c4 08             	add    esp,0x8
c0009592:	89 c3                	mov    ebx,eax
c0009594:	89 d6                	mov    esi,edx
c0009596:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000959b:	0f b6 d0             	movzx  edx,al
c000959e:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00095a3:	01 c2                	add    edx,eax
c00095a5:	89 d0                	mov    eax,edx
c00095a7:	01 c0                	add    eax,eax
c00095a9:	01 d0                	add    eax,edx
c00095ab:	01 c0                	add    eax,eax
c00095ad:	01 d0                	add    eax,edx
c00095af:	c1 e0 05             	shl    eax,0x5
c00095b2:	01 d0                	add    eax,edx
c00095b4:	c1 e0 04             	shl    eax,0x4
c00095b7:	89 c2                	mov    edx,eax
c00095b9:	c1 fa 1f             	sar    edx,0x1f
c00095bc:	29 c3                	sub    ebx,eax
c00095be:	19 d6                	sbb    esi,edx
c00095c0:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c00095c5:	0f b6 c0             	movzx  eax,al
c00095c8:	85 c0                	test   eax,eax
c00095ca:	74 0c                	je     c00095d8 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c00095cc:	b8 08 07 00 00       	mov    eax,0x708
c00095d1:	ba 00 00 00 00       	mov    edx,0x0
c00095d6:	eb 0a                	jmp    c00095e2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c00095d8:	b8 00 00 00 00       	mov    eax,0x0
c00095dd:	ba 00 00 00 00       	mov    edx,0x0
c00095e2:	29 c3                	sub    ebx,eax
c00095e4:	19 d6                	sbb    esi,edx
c00095e6:	89 d8                	mov    eax,ebx
c00095e8:	89 f2                	mov    edx,esi
c00095ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095ed:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095f6:	89 d0                	mov    eax,edx
c00095f8:	31 d2                	xor    edx,edx
c00095fa:	89 c3                	mov    ebx,eax
c00095fc:	89 d6                	mov    esi,edx
c00095fe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009601:	80 e5 ff             	and    ch,0xff
c0009604:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009607:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000960a:	83 e1 00             	and    ecx,0x0
c000960d:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0009610:	83 ec 0c             	sub    esp,0xc
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009618:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000961b:	68 8e 37 02 c0       	push   0xc002378e
c0009620:	e8 57 d9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009625:	83 c4 20             	add    esp,0x20
c0009628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000962b:	8b 00                	mov    eax,DWORD PTR [eax]
c000962d:	83 c0 2c             	add    eax,0x2c
c0009630:	8b 00                	mov    eax,DWORD PTR [eax]
c0009632:	83 ec 04             	sub    esp,0x4
c0009635:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009638:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000963b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000963e:	ff d0                	call   eax
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009646:	5b                   	pop    ebx
c0009647:	5e                   	pop    esi
c0009648:	5d                   	pop    ebp
c0009649:	c3                   	ret    

c000964a <KeSecondsToDatetime(unsigned long long)>:
c000964a:	55                   	push   ebp
c000964b:	89 e5                	mov    ebp,esp
c000964d:	83 ec 48             	sub    esp,0x48
c0009650:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009653:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009656:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009659:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c000965c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000965f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009662:	6a 00                	push   0x0
c0009664:	68 80 51 01 00       	push   0x15180
c0009669:	52                   	push   edx
c000966a:	50                   	push   eax
c000966b:	e8 a4 85 01 00       	call   c0021c14 <__udivdi3>
c0009670:	83 c4 10             	add    esp,0x10
c0009673:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009678:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000967b:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000967e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009681:	6a 00                	push   0x0
c0009683:	68 80 51 01 00       	push   0x15180
c0009688:	52                   	push   edx
c0009689:	50                   	push   eax
c000968a:	e8 85 86 01 00       	call   c0021d14 <__umoddi3>
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009695:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009699:	79 0b                	jns    c00096a6 <KeSecondsToDatetime(unsigned long long)+0x5c>
c000969b:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c00096a2:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c00096a6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096a9:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096ae:	89 c8                	mov    eax,ecx
c00096b0:	f7 ea                	imul   edx
c00096b2:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b5:	c1 f8 0b             	sar    eax,0xb
c00096b8:	89 c2                	mov    edx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	c1 f8 1f             	sar    eax,0x1f
c00096bf:	29 c2                	sub    edx,eax
c00096c1:	89 d0                	mov    eax,edx
c00096c3:	88 c2                	mov    dl,al
c00096c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c8:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00096cb:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096ce:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	f7 ea                	imul   edx
c00096d7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096da:	c1 f8 0b             	sar    eax,0xb
c00096dd:	89 c2                	mov    edx,eax
c00096df:	89 c8                	mov    eax,ecx
c00096e1:	c1 f8 1f             	sar    eax,0x1f
c00096e4:	29 c2                	sub    edx,eax
c00096e6:	89 d0                	mov    eax,edx
c00096e8:	01 c0                	add    eax,eax
c00096ea:	01 d0                	add    eax,edx
c00096ec:	01 c0                	add    eax,eax
c00096ee:	01 d0                	add    eax,edx
c00096f0:	c1 e0 05             	shl    eax,0x5
c00096f3:	01 d0                	add    eax,edx
c00096f5:	c1 e0 04             	shl    eax,0x4
c00096f8:	29 c1                	sub    ecx,eax
c00096fa:	89 c8                	mov    eax,ecx
c00096fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096ff:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009702:	ba 89 88 88 88       	mov    edx,0x88888889
c0009707:	89 c8                	mov    eax,ecx
c0009709:	f7 ea                	imul   edx
c000970b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000970e:	c1 f8 05             	sar    eax,0x5
c0009711:	89 c2                	mov    edx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	c1 f8 1f             	sar    eax,0x1f
c0009718:	29 c2                	sub    edx,eax
c000971a:	89 d0                	mov    eax,edx
c000971c:	88 c2                	mov    dl,al
c000971e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009721:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009724:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009727:	ba 89 88 88 88       	mov    edx,0x88888889
c000972c:	89 c8                	mov    eax,ecx
c000972e:	f7 ea                	imul   edx
c0009730:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009733:	c1 f8 05             	sar    eax,0x5
c0009736:	89 c2                	mov    edx,eax
c0009738:	89 c8                	mov    eax,ecx
c000973a:	c1 f8 1f             	sar    eax,0x1f
c000973d:	29 c2                	sub    edx,eax
c000973f:	89 d0                	mov    eax,edx
c0009741:	01 c0                	add    eax,eax
c0009743:	01 d0                	add    eax,edx
c0009745:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000974c:	01 d0                	add    eax,edx
c000974e:	c1 e0 02             	shl    eax,0x2
c0009751:	29 c1                	sub    ecx,eax
c0009753:	89 ca                	mov    edx,ecx
c0009755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009758:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c000975b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000975f:	79 20                	jns    c0009781 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009764:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c000976a:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000976f:	89 c8                	mov    eax,ecx
c0009771:	f7 ea                	imul   edx
c0009773:	c1 fa 0f             	sar    edx,0xf
c0009776:	89 c8                	mov    eax,ecx
c0009778:	c1 f8 1f             	sar    eax,0x1f
c000977b:	29 c2                	sub    edx,eax
c000977d:	89 d0                	mov    eax,edx
c000977f:	eb 18                	jmp    c0009799 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009781:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009784:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009789:	89 c8                	mov    eax,ecx
c000978b:	f7 ea                	imul   edx
c000978d:	c1 fa 0f             	sar    edx,0xf
c0009790:	89 c8                	mov    eax,ecx
c0009792:	c1 f8 1f             	sar    eax,0x1f
c0009795:	29 c2                	sub    edx,eax
c0009797:	89 d0                	mov    eax,edx
c0009799:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000979c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000979f:	89 d0                	mov    eax,edx
c00097a1:	c1 e0 03             	shl    eax,0x3
c00097a4:	01 d0                	add    eax,edx
c00097a6:	c1 e0 04             	shl    eax,0x4
c00097a9:	01 d0                	add    eax,edx
c00097ab:	c1 e0 04             	shl    eax,0x4
c00097ae:	29 d0                	sub    eax,edx
c00097b0:	89 c2                	mov    edx,eax
c00097b2:	c1 e2 06             	shl    edx,0x6
c00097b5:	29 c2                	sub    edx,eax
c00097b7:	89 d0                	mov    eax,edx
c00097b9:	f7 d8                	neg    eax
c00097bb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00097be:	01 d0                	add    eax,edx
c00097c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00097c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097c6:	c1 e8 02             	shr    eax,0x2
c00097c9:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c00097ce:	f7 e2                	mul    edx
c00097d0:	c1 ea 07             	shr    edx,0x7
c00097d3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097d6:	29 d0                	sub    eax,edx
c00097d8:	89 c1                	mov    ecx,eax
c00097da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097dd:	c1 e8 02             	shr    eax,0x2
c00097e0:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c00097e5:	f7 e2                	mul    edx
c00097e7:	89 d0                	mov    eax,edx
c00097e9:	c1 e8 0b             	shr    eax,0xb
c00097ec:	01 c1                	add    ecx,eax
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	c1 e8 04             	shr    eax,0x4
c00097f4:	ba 41 d6 72 00       	mov    edx,0x72d641
c00097f9:	f7 e2                	mul    edx
c00097fb:	89 d0                	mov    eax,edx
c00097fd:	c1 e8 04             	shr    eax,0x4
c0009800:	29 c1                	sub    ecx,eax
c0009802:	ba 61 f3 19 67       	mov    edx,0x6719f361
c0009807:	89 c8                	mov    eax,ecx
c0009809:	f7 e2                	mul    edx
c000980b:	89 c8                	mov    eax,ecx
c000980d:	29 d0                	sub    eax,edx
c000980f:	d1 e8                	shr    eax,1
c0009811:	01 d0                	add    eax,edx
c0009813:	c1 e8 08             	shr    eax,0x8
c0009816:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0009819:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000981c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009821:	f7 e2                	mul    edx
c0009823:	89 d1                	mov    ecx,edx
c0009825:	c1 e9 05             	shr    ecx,0x5
c0009828:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000982b:	89 d0                	mov    eax,edx
c000982d:	c1 e0 03             	shl    eax,0x3
c0009830:	01 d0                	add    eax,edx
c0009832:	c1 e0 03             	shl    eax,0x3
c0009835:	01 d0                	add    eax,edx
c0009837:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000983e:	01 c2                	add    edx,eax
c0009840:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009843:	c1 e8 02             	shr    eax,0x2
c0009846:	01 d0                	add    eax,edx
c0009848:	29 c1                	sub    ecx,eax
c000984a:	89 ca                	mov    edx,ecx
c000984c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000984f:	01 d0                	add    eax,edx
c0009851:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009854:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0009857:	89 d0                	mov    eax,edx
c0009859:	c1 e0 02             	shl    eax,0x2
c000985c:	01 d0                	add    eax,edx
c000985e:	83 c0 02             	add    eax,0x2
c0009861:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009866:	f7 e2                	mul    edx
c0009868:	89 d0                	mov    eax,edx
c000986a:	c1 e8 07             	shr    eax,0x7
c000986d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009870:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009873:	89 d0                	mov    eax,edx
c0009875:	c1 e0 03             	shl    eax,0x3
c0009878:	01 d0                	add    eax,edx
c000987a:	01 c0                	add    eax,eax
c000987c:	01 d0                	add    eax,edx
c000987e:	c1 e0 03             	shl    eax,0x3
c0009881:	01 d0                	add    eax,edx
c0009883:	83 c0 02             	add    eax,0x2
c0009886:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000988b:	f7 e2                	mul    edx
c000988d:	c1 ea 02             	shr    edx,0x2
c0009890:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009893:	29 d0                	sub    eax,edx
c0009895:	83 c0 01             	add    eax,0x1
c0009898:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000989b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000989f:	77 07                	ja     c00098a8 <KeSecondsToDatetime(unsigned long long)+0x25e>
c00098a1:	b8 02 00 00 00       	mov    eax,0x2
c00098a6:	eb 05                	jmp    c00098ad <KeSecondsToDatetime(unsigned long long)+0x263>
c00098a8:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c00098ad:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c00098b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00098b3:	89 d0                	mov    eax,edx
c00098b5:	c1 e0 02             	shl    eax,0x2
c00098b8:	01 d0                	add    eax,edx
c00098ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00098c1:	01 d0                	add    eax,edx
c00098c3:	c1 e0 04             	shl    eax,0x4
c00098c6:	89 c2                	mov    edx,eax
c00098c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00098cb:	01 c2                	add    edx,eax
c00098cd:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c00098d1:	0f 96 c0             	setbe  al
c00098d4:	0f b6 c0             	movzx  eax,al
c00098d7:	01 d0                	add    eax,edx
c00098d9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00098dc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00098df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00098e2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00098e6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00098e9:	83 c0 01             	add    eax,0x1
c00098ec:	88 c2                	mov    dl,al
c00098ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098f1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00098f4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00098f7:	88 c2                	mov    dl,al
c00098f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098fc:	88 10                	mov    BYTE PTR [eax],dl
c00098fe:	90                   	nop
c00098ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009902:	c9                   	leave  
c0009903:	c2 04 00             	ret    0x4

c0009906 <Clock::timeInDatetimeLocal()>:
c0009906:	55                   	push   ebp
c0009907:	89 e5                	mov    ebp,esp
c0009909:	83 ec 08             	sub    esp,0x8
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009912:	e8 23 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0009917:	83 c4 10             	add    esp,0x10
c000991a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000991d:	83 ec 04             	sub    esp,0x4
c0009920:	52                   	push   edx
c0009921:	50                   	push   eax
c0009922:	51                   	push   ecx
c0009923:	e8 22 fd ff ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c0009928:	83 c4 0c             	add    esp,0xc
c000992b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000992e:	c9                   	leave  
c000992f:	c2 04 00             	ret    0x4

c0009932 <Device::hibernate()>:
c0009932:	c3                   	ret    
c0009933:	90                   	nop

c0009934 <Device::wake()>:
c0009934:	c3                   	ret    
c0009935:	90                   	nop

c0009936 <Device::detect()>:
c0009936:	c3                   	ret    
c0009937:	90                   	nop

c0009938 <Device::disableLegacy()>:
c0009938:	c3                   	ret    
c0009939:	90                   	nop

c000993a <Device::powerSaving(PowerSavingLevel)>:
c000993a:	c3                   	ret    
c000993b:	90                   	nop

c000993c <DriverlessDevice::close(int, int, void*)>:
c000993c:	31 c0                	xor    eax,eax
c000993e:	c3                   	ret    
c000993f:	90                   	nop

c0009940 <DriverlessDevice::detect()>:
c0009940:	c3                   	ret    
c0009941:	90                   	nop

c0009942 <DriverlessDevice::open(int, int, void*)>:
c0009942:	83 ec 18             	sub    esp,0x18
c0009945:	68 0c 38 02 c0       	push   0xc002380c
c000994a:	e8 97 66 00 00       	call   c000ffe6 <KePanic(char const*)>
c000994f:	83 c8 ff             	or     eax,0xffffffff
c0009952:	83 c4 1c             	add    esp,0x1c
c0009955:	c3                   	ret    

c0009956 <Device::~Device()>:
c0009956:	ba b0 38 02 c0       	mov    edx,0xc00238b0
c000995b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000995f:	89 10                	mov    DWORD PTR [eax],edx
c0009961:	90                   	nop
c0009962:	c3                   	ret    
c0009963:	90                   	nop

c0009964 <Device::~Device()>:
c0009964:	83 ec 0c             	sub    esp,0xc
c0009967:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000996b:	e8 e6 ff ff ff       	call   c0009956 <Device::~Device()>
c0009970:	83 c4 04             	add    esp,0x4
c0009973:	83 ec 08             	sub    esp,0x8
c0009976:	68 58 01 00 00       	push   0x158
c000997b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997f:	e8 65 3a 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0009984:	83 c4 10             	add    esp,0x10
c0009987:	83 c4 0c             	add    esp,0xc
c000998a:	c3                   	ret    
c000998b:	90                   	nop

c000998c <Device::findAndLoadDriver()>:
c000998c:	c7 44 24 04 2a 38 02 c0 	mov    DWORD PTR [esp+0x4],0xc002382a
c0009994:	e9 e3 d5 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c0009999:	90                   	nop

c000999a <Device::preOpenPCI(PCIDeviceInfo)>:
c000999a:	57                   	push   edi
c000999b:	b9 09 00 00 00       	mov    ecx,0x9
c00099a0:	56                   	push   esi
c00099a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00099a5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00099a9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00099b3:	81 c7 18 01 00 00    	add    edi,0x118
c00099b9:	fc                   	cld    
c00099ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00099bc:	5e                   	pop    esi
c00099bd:	5f                   	pop    edi
c00099be:	c3                   	ret    
c00099bf:	90                   	nop

c00099c0 <Device::preOpenACPI(void*, char*, char*)>:
c00099c0:	57                   	push   edi
c00099c1:	b9 1e 00 00 00       	mov    ecx,0x1e
c00099c6:	56                   	push   esi
c00099c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099cf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00099d9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00099df:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00099e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00099e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099eb:	b9 0e 00 00 00       	mov    ecx,0xe
c00099f0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00099f6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099fc:	5e                   	pop    esi
c00099fd:	5f                   	pop    edi
c00099fe:	c3                   	ret    
c00099ff:	90                   	nop

c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009a00:	53                   	push   ebx
c0009a01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009a09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009a11:	0f b6 c0             	movzx  eax,al
c0009a14:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009a18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a24:	5b                   	pop    ebx
c0009a25:	e9 37 13 01 00       	jmp    c001ad61 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009a2a <Device::getParent()>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009a34:	c3                   	ret    
c0009a35:	90                   	nop

c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009a36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a3e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009a43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a4f:	e9 6f 14 01 00       	jmp    c001aec3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009a54 <Device::addChild(Device*)>:
c0009a54:	53                   	push   ebx
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a60:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a66:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a6c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a6e:	85 d2                	test   edx,edx
c0009a70:	74 04                	je     c0009a76 <Device::addChild(Device*)+0x22>
c0009a72:	89 d3                	mov    ebx,edx
c0009a74:	eb f6                	jmp    c0009a6c <Device::addChild(Device*)+0x18>
c0009a76:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a79:	83 ec 0c             	sub    esp,0xc
c0009a7c:	6a 08                	push   0x8
c0009a7e:	e8 0c 61 00 00       	call   c000fb8f <malloc>
c0009a83:	89 03                	mov    DWORD PTR [ebx],eax
c0009a85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a92:	83 c4 18             	add    esp,0x18
c0009a95:	5b                   	pop    ebx
c0009a96:	c3                   	ret    
c0009a97:	90                   	nop

c0009a98 <Device::removeAllChildren()>:
c0009a98:	56                   	push   esi
c0009a99:	53                   	push   ebx
c0009a9a:	52                   	push   edx
c0009a9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a9f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009aa5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aa8:	74 17                	je     c0009ac1 <Device::removeAllChildren()+0x29>
c0009aaa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009aad:	85 c0                	test   eax,eax
c0009aaf:	74 0c                	je     c0009abd <Device::removeAllChildren()+0x25>
c0009ab1:	83 ec 0c             	sub    esp,0xc
c0009ab4:	8b 10                	mov    edx,DWORD PTR [eax]
c0009ab6:	50                   	push   eax
c0009ab7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009aba:	83 c4 10             	add    esp,0x10
c0009abd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009abf:	eb e4                	jmp    c0009aa5 <Device::removeAllChildren()+0xd>
c0009ac1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ac7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009acd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ad3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ada:	58                   	pop    eax
c0009adb:	5b                   	pop    ebx
c0009adc:	5e                   	pop    esi
c0009add:	c3                   	ret    

c0009ade <Device::hibernateAll()>:
c0009ade:	53                   	push   ebx
c0009adf:	83 ec 14             	sub    esp,0x14
c0009ae2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ae8:	53                   	push   ebx
c0009ae9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009aec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af2:	83 c4 10             	add    esp,0x10
c0009af5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009af8:	74 0f                	je     c0009b09 <Device::hibernateAll()+0x2b>
c0009afa:	83 ec 0c             	sub    esp,0xc
c0009afd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b00:	e8 d9 ff ff ff       	call   c0009ade <Device::hibernateAll()>
c0009b05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b07:	eb e9                	jmp    c0009af2 <Device::hibernateAll()+0x14>
c0009b09:	83 c4 08             	add    esp,0x8
c0009b0c:	5b                   	pop    ebx
c0009b0d:	c3                   	ret    

c0009b0e <Device::wakeAll()>:
c0009b0e:	53                   	push   ebx
c0009b0f:	83 ec 14             	sub    esp,0x14
c0009b12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b18:	53                   	push   ebx
c0009b19:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009b1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b28:	74 0f                	je     c0009b39 <Device::wakeAll()+0x2b>
c0009b2a:	83 ec 0c             	sub    esp,0xc
c0009b2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b30:	e8 d9 ff ff ff       	call   c0009b0e <Device::wakeAll()>
c0009b35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b37:	eb e9                	jmp    c0009b22 <Device::wakeAll()+0x14>
c0009b39:	83 c4 08             	add    esp,0x8
c0009b3c:	5b                   	pop    ebx
c0009b3d:	c3                   	ret    

c0009b3e <Device::detectAll()>:
c0009b3e:	53                   	push   ebx
c0009b3f:	83 ec 14             	sub    esp,0x14
c0009b42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b48:	53                   	push   ebx
c0009b49:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009b4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b52:	83 c4 10             	add    esp,0x10
c0009b55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b58:	74 0f                	je     c0009b69 <Device::detectAll()+0x2b>
c0009b5a:	83 ec 0c             	sub    esp,0xc
c0009b5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b60:	e8 d9 ff ff ff       	call   c0009b3e <Device::detectAll()>
c0009b65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b67:	eb e9                	jmp    c0009b52 <Device::detectAll()+0x14>
c0009b69:	83 c4 08             	add    esp,0x8
c0009b6c:	5b                   	pop    ebx
c0009b6d:	c3                   	ret    

c0009b6e <Device::disableLegacyAll()>:
c0009b6e:	c3                   	ret    
c0009b6f:	90                   	nop

c0009b70 <Device::loadDriversForAll()>:
c0009b70:	c3                   	ret    
c0009b71:	90                   	nop

c0009b72 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b72:	56                   	push   esi
c0009b73:	53                   	push   ebx
c0009b74:	83 ec 0c             	sub    esp,0xc
c0009b77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b7b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b81:	56                   	push   esi
c0009b82:	53                   	push   ebx
c0009b83:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b92:	74 0f                	je     c0009ba3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b94:	52                   	push   edx
c0009b95:	52                   	push   edx
c0009b96:	56                   	push   esi
c0009b97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b9a:	e8 d3 ff ff ff       	call   c0009b72 <Device::powerSavingAll(PowerSavingLevel)>
c0009b9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ba1:	eb e9                	jmp    c0009b8c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009ba3:	58                   	pop    eax
c0009ba4:	5b                   	pop    ebx
c0009ba5:	5e                   	pop    esi
c0009ba6:	c3                   	ret    
c0009ba7:	90                   	nop

c0009ba8 <Device::setName(char const*)>:
c0009ba8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009bb0:	e9 8b 6a ff ff       	jmp    c0000640 <strcpy>
c0009bb5:	90                   	nop

c0009bb6 <Device::Device(char const*)>:
c0009bb6:	83 ec 1c             	sub    esp,0x1c
c0009bb9:	ba b0 38 02 c0       	mov    edx,0xc00238b0
c0009bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc2:	89 10                	mov    DWORD PTR [eax],edx
c0009bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009bfc:	83 ec 08             	sub    esp,0x8
c0009bff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c07:	e8 9c ff ff ff       	call   c0009ba8 <Device::setName(char const*)>
c0009c0c:	83 c4 10             	add    esp,0x10
c0009c0f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009c17:	83 ec 0c             	sub    esp,0xc
c0009c1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c1e:	e8 6c 5f 00 00       	call   c000fb8f <malloc>
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c37:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c41:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c51:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c62:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c6d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c78:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c86:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c94:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ca2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009cac:	90                   	nop
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	c3                   	ret    
c0009cb1:	90                   	nop

c0009cb2 <Device::getName()>:
c0009cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cb6:	05 d0 00 00 00       	add    eax,0xd0
c0009cbb:	c3                   	ret    

c0009cbc <Device::closeAll()>:
c0009cbc:	53                   	push   ebx
c0009cbd:	83 ec 08             	sub    esp,0x8
c0009cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009cc4:	53                   	push   ebx
c0009cc5:	e8 e8 ff ff ff       	call   c0009cb2 <Device::getName()>
c0009cca:	52                   	push   edx
c0009ccb:	50                   	push   eax
c0009ccc:	68 64 38 02 c0       	push   0xc0023864
c0009cd1:	e8 a6 d2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009cd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009cd8:	6a 00                	push   0x0
c0009cda:	6a 00                	push   0x0
c0009cdc:	6a 00                	push   0x0
c0009cde:	53                   	push   ebx
c0009cdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009ce2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ce8:	83 c4 20             	add    esp,0x20
c0009ceb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009cee:	74 12                	je     c0009d02 <Device::closeAll()+0x46>
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cf6:	e8 c1 ff ff ff       	call   c0009cbc <Device::closeAll()>
c0009cfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	eb e9                	jmp    c0009ceb <Device::closeAll()+0x2f>
c0009d02:	83 c4 08             	add    esp,0x8
c0009d05:	5b                   	pop    ebx
c0009d06:	c3                   	ret    
c0009d07:	90                   	nop

c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009d08:	83 ec 0c             	sub    esp,0xc
c0009d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d0f:	83 ec 08             	sub    esp,0x8
c0009d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d16:	50                   	push   eax
c0009d17:	e8 9a fe ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009d1c:	83 c4 10             	add    esp,0x10
c0009d1f:	ba dc 38 02 c0       	mov    edx,0xc00238dc
c0009d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d28:	89 10                	mov    DWORD PTR [eax],edx
c0009d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009d38:	90                   	nop
c0009d39:	83 c4 0c             	add    esp,0xc
c0009d3c:	c3                   	ret    
c0009d3d:	90                   	nop

c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009d3e:	57                   	push   edi
c0009d3f:	56                   	push   esi
c0009d40:	53                   	push   ebx
c0009d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009d49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009d4d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009d53:	75 0c                	jne    c0009d61 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	53                   	push   ebx
c0009d58:	56                   	push   esi
c0009d59:	e8 2e 81 01 00       	call   c0021e8c <LinkedList<Device>::addElement(Device*)>
c0009d5e:	83 c4 10             	add    esp,0x10
c0009d61:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d6a:	74 12                	je     c0009d7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d6c:	50                   	push   eax
c0009d6d:	57                   	push   edi
c0009d6e:	56                   	push   esi
c0009d6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d72:	e8 c7 ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d79:	83 c4 10             	add    esp,0x10
c0009d7c:	eb e9                	jmp    c0009d67 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d7e:	5b                   	pop    ebx
c0009d7f:	5e                   	pop    esi
c0009d80:	5f                   	pop    edi
c0009d81:	c3                   	ret    

c0009d82 <getDevicesOfType(DeviceType)>:
c0009d82:	53                   	push   ebx
c0009d83:	83 ec 14             	sub    esp,0x14
c0009d86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d8a:	53                   	push   ebx
c0009d8b:	e8 d8 81 01 00       	call   c0021f68 <LinkedList<Device>::LinkedList()>
c0009d90:	83 c4 0c             	add    esp,0xc
c0009d93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d97:	53                   	push   ebx
c0009d98:	ff 35 c8 d0 02 c0    	push   DWORD PTR ds:0xc002d0c8
c0009d9e:	e8 9b ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009da3:	89 d8                	mov    eax,ebx
c0009da5:	83 c4 18             	add    esp,0x18
c0009da8:	5b                   	pop    ebx
c0009da9:	c2 04 00             	ret    0x4

c0009dac <HardDiskController::HardDiskController(char const*)>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009db3:	83 ec 08             	sub    esp,0x8
c0009db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dba:	50                   	push   eax
c0009dbb:	e8 f6 fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	ba 08 39 02 c0       	mov    edx,0xc0023908
c0009dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dcc:	89 10                	mov    DWORD PTR [eax],edx
c0009dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009ddc:	90                   	nop
c0009ddd:	83 c4 0c             	add    esp,0xc
c0009de0:	c3                   	ret    
c0009de1:	90                   	nop
c0009de2:	66 90                	xchg   ax,ax

c0009de4 <HardDiskController::~HardDiskController()>:
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	ba 08 39 02 c0       	mov    edx,0xc0023908
c0009dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df0:	89 10                	mov    DWORD PTR [eax],edx
c0009df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df6:	83 ec 0c             	sub    esp,0xc
c0009df9:	50                   	push   eax
c0009dfa:	e8 57 fb ff ff       	call   c0009956 <Device::~Device()>
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	90                   	nop
c0009e03:	83 c4 0c             	add    esp,0xc
c0009e06:	c3                   	ret    
c0009e07:	90                   	nop

c0009e08 <HardDiskController::~HardDiskController()>:
c0009e08:	83 ec 0c             	sub    esp,0xc
c0009e0b:	83 ec 0c             	sub    esp,0xc
c0009e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e12:	e8 cd ff ff ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0009e17:	83 c4 10             	add    esp,0x10
c0009e1a:	83 ec 08             	sub    esp,0x8
c0009e1d:	68 58 01 00 00       	push   0x158
c0009e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e26:	e8 be 35 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0009e2b:	83 c4 10             	add    esp,0x10
c0009e2e:	83 c4 0c             	add    esp,0xc
c0009e31:	c3                   	ret    

c0009e32 <PhysicalDisk::eject()>:
c0009e32:	83 c8 ff             	or     eax,0xffffffff
c0009e35:	c3                   	ret    

c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009e36:	83 ec 0c             	sub    esp,0xc
c0009e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e3d:	83 ec 08             	sub    esp,0x8
c0009e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e44:	50                   	push   eax
c0009e45:	e8 6c fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009e4a:	83 c4 10             	add    esp,0x10
c0009e4d:	ba 34 39 02 c0       	mov    edx,0xc0023934
c0009e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e56:	89 10                	mov    DWORD PTR [eax],edx
c0009e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e5c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e67:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e72:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e84:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e98:	90                   	nop
c0009e99:	83 c4 0c             	add    esp,0xc
c0009e9c:	c3                   	ret    
c0009e9d:	90                   	nop

c0009e9e <PhysicalDisk::startCache()>:
c0009e9e:	56                   	push   esi
c0009e9f:	53                   	push   ebx
c0009ea0:	83 ec 10             	sub    esp,0x10
c0009ea3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ea7:	6a 44                	push   0x44
c0009ea9:	e8 e1 5c 00 00       	call   c000fb8f <malloc>
c0009eae:	89 c6                	mov    esi,eax
c0009eb0:	58                   	pop    eax
c0009eb1:	5a                   	pop    edx
c0009eb2:	53                   	push   ebx
c0009eb3:	56                   	push   esi
c0009eb4:	e8 d3 13 00 00       	call   c000b28c <VCache::VCache(PhysicalDisk*)>
c0009eb9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009ebf:	83 c4 14             	add    esp,0x14
c0009ec2:	5b                   	pop    ebx
c0009ec3:	5e                   	pop    esi
c0009ec4:	c3                   	ret    
c0009ec5:	90                   	nop

c0009ec6 <PhysicalDisk::~PhysicalDisk()>:
c0009ec6:	83 ec 0c             	sub    esp,0xc
c0009ec9:	ba 34 39 02 c0       	mov    edx,0xc0023934
c0009ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed2:	89 10                	mov    DWORD PTR [eax],edx
c0009ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed8:	83 ec 0c             	sub    esp,0xc
c0009edb:	50                   	push   eax
c0009edc:	e8 75 fa ff ff       	call   c0009956 <Device::~Device()>
c0009ee1:	83 c4 10             	add    esp,0x10
c0009ee4:	90                   	nop
c0009ee5:	83 c4 0c             	add    esp,0xc
c0009ee8:	c3                   	ret    
c0009ee9:	90                   	nop

c0009eea <PhysicalDisk::~PhysicalDisk()>:
c0009eea:	83 ec 0c             	sub    esp,0xc
c0009eed:	83 ec 0c             	sub    esp,0xc
c0009ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef4:	e8 cd ff ff ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0009ef9:	83 c4 10             	add    esp,0x10
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	68 6c 01 00 00       	push   0x16c
c0009f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f08:	e8 dc 34 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	83 c4 0c             	add    esp,0xc
c0009f13:	c3                   	ret    

c0009f14 <startGUI(void*)>:
c0009f14:	55                   	push   ebp
c0009f15:	89 e5                	mov    ebp,esp
c0009f17:	53                   	push   ebx
c0009f18:	83 ec 04             	sub    esp,0x4
c0009f1b:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0009f23:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0009f28:	85 c0                	test   eax,eax
c0009f2a:	75 01                	jne    c0009f2d <startGUI(void*)+0x19>
c0009f2c:	fb                   	sti    
c0009f2d:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c0009f33:	83 ec 08             	sub    esp,0x8
c0009f36:	6a 01                	push   0x1
c0009f38:	68 64 39 02 c0       	push   0xc0023964
c0009f3d:	e8 28 c6 00 00       	call   c001656a <Thr::loadDLL(char const*, bool)>
c0009f42:	83 c4 10             	add    esp,0x10
c0009f45:	83 ec 08             	sub    esp,0x8
c0009f48:	53                   	push   ebx
c0009f49:	50                   	push   eax
c0009f4a:	e8 6d c8 00 00       	call   c00167bc <Thr::executeDLL(unsigned long, void*)>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c0009f58:	83 ec 08             	sub    esp,0x8
c0009f5b:	6a 01                	push   0x1
c0009f5d:	68 7e 39 02 c0       	push   0xc002397e
c0009f62:	e8 03 c6 00 00       	call   c001656a <Thr::loadDLL(char const*, bool)>
c0009f67:	83 c4 10             	add    esp,0x10
c0009f6a:	83 ec 08             	sub    esp,0x8
c0009f6d:	53                   	push   ebx
c0009f6e:	50                   	push   eax
c0009f6f:	e8 48 c8 00 00       	call   c00167bc <Thr::executeDLL(unsigned long, void*)>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	eb fe                	jmp    c0009f77 <startGUI(void*)+0x63>

c0009f79 <startGUIVESA(void*)>:
c0009f79:	55                   	push   ebp
c0009f7a:	89 e5                	mov    ebp,esp
c0009f7c:	53                   	push   ebx
c0009f7d:	83 ec 04             	sub    esp,0x4
c0009f80:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0009f88:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0009f8d:	85 c0                	test   eax,eax
c0009f8f:	75 01                	jne    c0009f92 <startGUIVESA(void*)+0x19>
c0009f91:	fb                   	sti    
c0009f92:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c0009f98:	83 ec 08             	sub    esp,0x8
c0009f9b:	6a 01                	push   0x1
c0009f9d:	68 9c 39 02 c0       	push   0xc002399c
c0009fa2:	e8 c3 c5 00 00       	call   c001656a <Thr::loadDLL(char const*, bool)>
c0009fa7:	83 c4 10             	add    esp,0x10
c0009faa:	83 ec 08             	sub    esp,0x8
c0009fad:	53                   	push   ebx
c0009fae:	50                   	push   eax
c0009faf:	e8 08 c8 00 00       	call   c00167bc <Thr::executeDLL(unsigned long, void*)>
c0009fb4:	83 c4 10             	add    esp,0x10
c0009fb7:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c0009fbd:	83 ec 08             	sub    esp,0x8
c0009fc0:	6a 01                	push   0x1
c0009fc2:	68 7e 39 02 c0       	push   0xc002397e
c0009fc7:	e8 9e c5 00 00       	call   c001656a <Thr::loadDLL(char const*, bool)>
c0009fcc:	83 c4 10             	add    esp,0x10
c0009fcf:	83 ec 08             	sub    esp,0x8
c0009fd2:	53                   	push   ebx
c0009fd3:	50                   	push   eax
c0009fd4:	e8 e3 c7 00 00       	call   c00167bc <Thr::executeDLL(unsigned long, void*)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	eb fe                	jmp    c0009fdc <startGUIVESA(void*)+0x63>

c0009fde <sendKeyToTerminal(unsigned char)>:
c0009fde:	55                   	push   ebp
c0009fdf:	89 e5                	mov    ebp,esp
c0009fe1:	83 ec 28             	sub    esp,0x28
c0009fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009fe7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009fea:	a1 b4 f1 02 c0       	mov    eax,ds:0xc002f1b4
c0009fef:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009ff3:	83 ec 08             	sub    esp,0x8
c0009ff6:	52                   	push   edx
c0009ff7:	50                   	push   eax
c0009ff8:	e8 4b 8d 00 00       	call   c0012d48 <VgaText::receiveKey(unsigned char)>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a004:	83 f8 0a             	cmp    eax,0xa
c000a007:	74 16                	je     c000a01f <sendKeyToTerminal(unsigned char)+0x41>
c000a009:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a00d:	83 f8 03             	cmp    eax,0x3
c000a010:	74 0d                	je     c000a01f <sendKeyToTerminal(unsigned char)+0x41>
c000a012:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a016:	83 f8 1c             	cmp    eax,0x1c
c000a019:	0f 85 92 00 00 00    	jne    c000a0b1 <sendKeyToTerminal(unsigned char)+0xd3>
c000a01f:	fa                   	cli    
c000a020:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a025:	83 c0 01             	add    eax,0x1
c000a028:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000a02d:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000a032:	83 c0 01             	add    eax,0x1
c000a035:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c000a03a:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c000a03f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a042:	c7 05 80 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c680,0x0
c000a04c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a050:	74 1f                	je     c000a071 <sendKeyToTerminal(unsigned char)+0x93>
c000a052:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a055:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a058:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a05b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a05e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a061:	83 ec 0c             	sub    esp,0xc
c000a064:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a067:	e8 00 d4 00 00       	call   c001746c <unblockTask(ThreadControlBlock*)>
c000a06c:	83 c4 10             	add    esp,0x10
c000a06f:	eb db                	jmp    c000a04c <sendKeyToTerminal(unsigned char)+0x6e>
c000a071:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000a076:	83 e8 01             	sub    eax,0x1
c000a079:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c000a07e:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000a083:	85 c0                	test   eax,eax
c000a085:	75 18                	jne    c000a09f <sendKeyToTerminal(unsigned char)+0xc1>
c000a087:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c000a08c:	85 c0                	test   eax,eax
c000a08e:	74 0f                	je     c000a09f <sendKeyToTerminal(unsigned char)+0xc1>
c000a090:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c000a09a:	e8 71 d0 00 00       	call   c0017110 <schedule()>
c000a09f:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000a0a7:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a0ac:	85 c0                	test   eax,eax
c000a0ae:	75 01                	jne    c000a0b1 <sendKeyToTerminal(unsigned char)+0xd3>
c000a0b0:	fb                   	sti    
c000a0b1:	90                   	nop
c000a0b2:	c9                   	leave  
c000a0b3:	c3                   	ret    

c000a0b4 <sendKeyboardToken(KeyboardToken)>:
c000a0b4:	55                   	push   ebp
c000a0b5:	89 e5                	mov    ebp,esp
c000a0b7:	83 ec 18             	sub    esp,0x18
c000a0ba:	e8 58 68 00 00       	call   c0010917 <KeUserIOReceived()>
c000a0bf:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a0c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0c5:	0f b7 c0             	movzx  eax,ax
c000a0c8:	83 f2 01             	xor    edx,0x1
c000a0cb:	88 90 a0 c6 02 c0    	mov    BYTE PTR [eax-0x3ffd3960],dl
c000a0d1:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a0d6:	85 c0                	test   eax,eax
c000a0d8:	74 24                	je     c000a0fe <sendKeyboardToken(KeyboardToken)+0x4a>
c000a0da:	8b 0d 88 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c688
c000a0e0:	83 ec 04             	sub    esp,0x4
c000a0e3:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a0e8:	83 ec 08             	sub    esp,0x8
c000a0eb:	89 e2                	mov    edx,esp
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	89 02                	mov    DWORD PTR [edx],eax
c000a0f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a0f5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0f9:	ff d1                	call   ecx
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a102:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a105:	0f b6 c0             	movzx  eax,al
c000a108:	85 c0                	test   eax,eax
c000a10a:	0f 84 da 00 00 00    	je     c000a1ea <sendKeyboardToken(KeyboardToken)+0x136>
c000a110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a113:	0f b7 c0             	movzx  eax,ax
c000a116:	3d 18 03 00 00       	cmp    eax,0x318
c000a11b:	75 06                	jne    c000a123 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a11d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a126:	0f b7 c0             	movzx  eax,ax
c000a129:	3d 19 03 00 00       	cmp    eax,0x319
c000a12e:	75 06                	jne    c000a136 <sendKeyboardToken(KeyboardToken)+0x82>
c000a130:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a139:	0f b7 c0             	movzx  eax,ax
c000a13c:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a141:	75 06                	jne    c000a149 <sendKeyboardToken(KeyboardToken)+0x95>
c000a143:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14c:	0f b7 c0             	movzx  eax,ax
c000a14f:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a154:	75 06                	jne    c000a15c <sendKeyboardToken(KeyboardToken)+0xa8>
c000a156:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a15c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a15f:	0f b7 c0             	movzx  eax,ax
c000a162:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a167:	75 06                	jne    c000a16f <sendKeyboardToken(KeyboardToken)+0xbb>
c000a169:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a172:	0f b7 c0             	movzx  eax,ax
c000a175:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a17a:	75 06                	jne    c000a182 <sendKeyboardToken(KeyboardToken)+0xce>
c000a17c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a185:	0f b7 c0             	movzx  eax,ax
c000a188:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a18d:	75 06                	jne    c000a195 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a18f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a198:	0f b7 c0             	movzx  eax,ax
c000a19b:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a1a0:	75 06                	jne    c000a1a8 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a1a2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a1a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ab:	0f b7 c0             	movzx  eax,ax
c000a1ae:	3d 20 03 00 00       	cmp    eax,0x320
c000a1b3:	75 06                	jne    c000a1bb <sendKeyboardToken(KeyboardToken)+0x107>
c000a1b5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a1bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1be:	0f b7 c0             	movzx  eax,ax
c000a1c1:	3d 21 03 00 00       	cmp    eax,0x321
c000a1c6:	75 06                	jne    c000a1ce <sendKeyboardToken(KeyboardToken)+0x11a>
c000a1c8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a1ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d1:	0f b7 c0             	movzx  eax,ax
c000a1d4:	3d 22 03 00 00       	cmp    eax,0x322
c000a1d9:	0f 85 f1 00 00 00    	jne    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1df:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a1e5:	e9 e6 00 00 00       	jmp    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ed:	0f b7 c0             	movzx  eax,ax
c000a1f0:	3d 18 03 00 00       	cmp    eax,0x318
c000a1f5:	75 0a                	jne    c000a201 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a1f7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a204:	0f b7 c0             	movzx  eax,ax
c000a207:	3d 19 03 00 00       	cmp    eax,0x319
c000a20c:	75 0a                	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x164>
c000a20e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a214:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21b:	0f b7 c0             	movzx  eax,ax
c000a21e:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a223:	75 0a                	jne    c000a22f <sendKeyboardToken(KeyboardToken)+0x17b>
c000a225:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a22b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a232:	0f b7 c0             	movzx  eax,ax
c000a235:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a23a:	75 0a                	jne    c000a246 <sendKeyboardToken(KeyboardToken)+0x192>
c000a23c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a242:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a249:	0f b7 c0             	movzx  eax,ax
c000a24c:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a251:	75 0a                	jne    c000a25d <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a253:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a259:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a260:	0f b7 c0             	movzx  eax,ax
c000a263:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a268:	75 0a                	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a26a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a270:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a277:	0f b7 c0             	movzx  eax,ax
c000a27a:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a27f:	75 0a                	jne    c000a28b <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a281:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a287:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a28b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a28e:	0f b7 c0             	movzx  eax,ax
c000a291:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a296:	75 0a                	jne    c000a2a2 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a298:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a29e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2a5:	0f b7 c0             	movzx  eax,ax
c000a2a8:	3d 20 03 00 00       	cmp    eax,0x320
c000a2ad:	75 0a                	jne    c000a2b9 <sendKeyboardToken(KeyboardToken)+0x205>
c000a2af:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a2b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2bc:	0f b7 c0             	movzx  eax,ax
c000a2bf:	3d 21 03 00 00       	cmp    eax,0x321
c000a2c4:	75 0a                	jne    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a2c6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a2cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2d3:	0f b7 c0             	movzx  eax,ax
c000a2d6:	3d 00 02 00 00       	cmp    eax,0x200
c000a2db:	75 2f                	jne    c000a30c <sendKeyboardToken(KeyboardToken)+0x258>
c000a2dd:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a2e2:	83 f0 01             	xor    eax,0x1
c000a2e5:	0f b6 c0             	movzx  eax,al
c000a2e8:	85 c0                	test   eax,eax
c000a2ea:	74 20                	je     c000a30c <sendKeyboardToken(KeyboardToken)+0x258>
c000a2ec:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000a2f1:	6a 01                	push   0x1
c000a2f3:	6a 00                	push   0x0
c000a2f5:	68 14 9f 00 c0       	push   0xc0009f14
c000a2fa:	50                   	push   eax
c000a2fb:	e8 50 cb 00 00       	call   c0016e50 <Process::createThread(void (*)(void*), void*, int)>
c000a300:	83 c4 10             	add    esp,0x10
c000a303:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a30a:	eb 3a                	jmp    c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a30c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a30f:	0f b7 c0             	movzx  eax,ax
c000a312:	3d 01 02 00 00       	cmp    eax,0x201
c000a317:	75 2d                	jne    c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a319:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a31e:	83 f0 01             	xor    eax,0x1
c000a321:	0f b6 c0             	movzx  eax,al
c000a324:	85 c0                	test   eax,eax
c000a326:	74 1e                	je     c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a328:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000a32d:	6a 01                	push   0x1
c000a32f:	6a 00                	push   0x0
c000a331:	68 79 9f 00 c0       	push   0xc0009f79
c000a336:	50                   	push   eax
c000a337:	e8 14 cb 00 00       	call   c0016e50 <Process::createThread(void (*)(void*), void*, int)>
c000a33c:	83 c4 10             	add    esp,0x10
c000a33f:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a349:	0f b7 c0             	movzx  eax,ax
c000a34c:	3d 25 03 00 00       	cmp    eax,0x325
c000a351:	75 06                	jne    c000a359 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a353:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a35c:	0f b7 c0             	movzx  eax,ax
c000a35f:	3d 24 03 00 00       	cmp    eax,0x324
c000a364:	75 06                	jne    c000a36c <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a366:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a36c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a36f:	0f b7 c0             	movzx  eax,ax
c000a372:	3d 23 03 00 00       	cmp    eax,0x323
c000a377:	75 06                	jne    c000a37f <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a379:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a37f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a382:	0f b7 c0             	movzx  eax,ax
c000a385:	3d 26 03 00 00       	cmp    eax,0x326
c000a38a:	75 06                	jne    c000a392 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a38c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a395:	0f b7 c0             	movzx  eax,ax
c000a398:	3d 27 03 00 00       	cmp    eax,0x327
c000a39d:	75 06                	jne    c000a3a5 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a39f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3a8:	0f b7 c0             	movzx  eax,ax
c000a3ab:	3d 22 03 00 00       	cmp    eax,0x322
c000a3b0:	75 06                	jne    c000a3b8 <sendKeyboardToken(KeyboardToken)+0x304>
c000a3b2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a3b8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a3bc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a3bf:	83 f0 01             	xor    eax,0x1
c000a3c2:	0f b6 c0             	movzx  eax,al
c000a3c5:	85 c0                	test   eax,eax
c000a3c7:	74 7c                	je     c000a445 <sendKeyboardToken(KeyboardToken)+0x391>
c000a3c9:	a0 a1 c7 02 c0       	mov    al,ds:0xc002c7a1
c000a3ce:	0f b6 c0             	movzx  eax,al
c000a3d1:	85 c0                	test   eax,eax
c000a3d3:	74 43                	je     c000a418 <sendKeyboardToken(KeyboardToken)+0x364>
c000a3d5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3d9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a3dd:	85 c0                	test   eax,eax
c000a3df:	74 2b                	je     c000a40c <sendKeyboardToken(KeyboardToken)+0x358>
c000a3e1:	8b 15 a4 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002caa4
c000a3e7:	89 d0                	mov    eax,edx
c000a3e9:	c1 e0 02             	shl    eax,0x2
c000a3ec:	01 d0                	add    eax,edx
c000a3ee:	01 c0                	add    eax,eax
c000a3f0:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a3f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f8:	0f b7 c0             	movzx  eax,ax
c000a3fb:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3fe:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a403:	01 d0                	add    eax,edx
c000a405:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a40a:	eb 71                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a40c:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a416:	eb 65                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a418:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a41d:	85 c0                	test   eax,eax
c000a41f:	74 18                	je     c000a439 <sendKeyboardToken(KeyboardToken)+0x385>
c000a421:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a426:	0f b6 c0             	movzx  eax,al
c000a429:	83 ec 0c             	sub    esp,0xc
c000a42c:	50                   	push   eax
c000a42d:	e8 ac fb ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a432:	83 c4 10             	add    esp,0x10
c000a435:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a439:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a443:	eb 38                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a448:	0f b7 c0             	movzx  eax,ax
c000a44b:	3d 01 01 00 00       	cmp    eax,0x101
c000a450:	75 2b                	jne    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a452:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a457:	85 c0                	test   eax,eax
c000a459:	74 18                	je     c000a473 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a45b:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a460:	0f b6 c0             	movzx  eax,al
c000a463:	83 ec 0c             	sub    esp,0xc
c000a466:	50                   	push   eax
c000a467:	e8 72 fb ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a46c:	83 c4 10             	add    esp,0x10
c000a46f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a473:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a47d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a480:	83 f0 01             	xor    eax,0x1
c000a483:	0f b6 c0             	movzx  eax,al
c000a486:	85 c0                	test   eax,eax
c000a488:	74 5a                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a48a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a48d:	83 f0 01             	xor    eax,0x1
c000a490:	0f b6 c0             	movzx  eax,al
c000a493:	85 c0                	test   eax,eax
c000a495:	74 4d                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a497:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a49c:	83 f0 01             	xor    eax,0x1
c000a49f:	0f b6 c0             	movzx  eax,al
c000a4a2:	85 c0                	test   eax,eax
c000a4a4:	74 3e                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4a9:	0f b7 c0             	movzx  eax,ax
c000a4ac:	83 f8 1f             	cmp    eax,0x1f
c000a4af:	76 0b                	jbe    c000a4bc <sendKeyboardToken(KeyboardToken)+0x408>
c000a4b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b4:	0f b7 c0             	movzx  eax,ax
c000a4b7:	83 f8 7e             	cmp    eax,0x7e
c000a4ba:	76 16                	jbe    c000a4d2 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bf:	0f b7 c0             	movzx  eax,ax
c000a4c2:	83 f8 0a             	cmp    eax,0xa
c000a4c5:	74 0b                	je     c000a4d2 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4ca:	0f b7 c0             	movzx  eax,ax
c000a4cd:	83 f8 08             	cmp    eax,0x8
c000a4d0:	75 12                	jne    c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d5:	0f b6 c0             	movzx  eax,al
c000a4d8:	83 ec 0c             	sub    esp,0xc
c000a4db:	50                   	push   eax
c000a4dc:	e8 fd fa ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a4e1:	83 c4 10             	add    esp,0x10
c000a4e4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a4e7:	83 f0 01             	xor    eax,0x1
c000a4ea:	0f b6 c0             	movzx  eax,al
c000a4ed:	85 c0                	test   eax,eax
c000a4ef:	74 5d                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4f4:	83 f0 01             	xor    eax,0x1
c000a4f7:	0f b6 c0             	movzx  eax,al
c000a4fa:	85 c0                	test   eax,eax
c000a4fc:	74 50                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4fe:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a503:	0f b6 c0             	movzx  eax,al
c000a506:	85 c0                	test   eax,eax
c000a508:	74 44                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a50a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a50d:	0f b7 c0             	movzx  eax,ax
c000a510:	83 f8 3f             	cmp    eax,0x3f
c000a513:	76 39                	jbe    c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a518:	0f b7 c0             	movzx  eax,ax
c000a51b:	83 f8 7f             	cmp    eax,0x7f
c000a51e:	77 2e                	ja     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a523:	88 c2                	mov    dl,al
c000a525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a528:	0f b7 c0             	movzx  eax,ax
c000a52b:	83 f8 5f             	cmp    eax,0x5f
c000a52e:	76 04                	jbe    c000a534 <sendKeyboardToken(KeyboardToken)+0x480>
c000a530:	b0 20                	mov    al,0x20
c000a532:	eb 02                	jmp    c000a536 <sendKeyboardToken(KeyboardToken)+0x482>
c000a534:	b0 00                	mov    al,0x0
c000a536:	89 d1                	mov    ecx,edx
c000a538:	29 c1                	sub    ecx,eax
c000a53a:	89 c8                	mov    eax,ecx
c000a53c:	83 e8 40             	sub    eax,0x40
c000a53f:	0f b6 c0             	movzx  eax,al
c000a542:	83 ec 0c             	sub    esp,0xc
c000a545:	50                   	push   eax
c000a546:	e8 93 fa ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a551:	0f b7 c0             	movzx  eax,ax
c000a554:	3d 00 03 00 00       	cmp    eax,0x300
c000a559:	75 12                	jne    c000a56d <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a55b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a55e:	83 f0 01             	xor    eax,0x1
c000a561:	0f b6 c0             	movzx  eax,al
c000a564:	85 c0                	test   eax,eax
c000a566:	74 05                	je     c000a56d <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a568:	e8 d0 7e 00 00       	call   c001243d <doTerminalCycle()>
c000a56d:	90                   	nop
c000a56e:	c9                   	leave  
c000a56f:	c3                   	ret    

c000a570 <clearInternalKeybuffer(VgaText*)>:
c000a570:	55                   	push   ebp
c000a571:	89 e5                	mov    ebp,esp
c000a573:	83 ec 08             	sub    esp,0x8
c000a576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a579:	05 02 01 00 00       	add    eax,0x102
c000a57e:	83 ec 0c             	sub    esp,0xc
c000a581:	50                   	push   eax
c000a582:	e8 e9 5f ff ff       	call   c0000570 <strlen>
c000a587:	83 c4 10             	add    esp,0x10
c000a58a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a58d:	81 c2 02 01 00 00    	add    edx,0x102
c000a593:	83 ec 04             	sub    esp,0x4
c000a596:	50                   	push   eax
c000a597:	6a 00                	push   0x0
c000a599:	52                   	push   edx
c000a59a:	e8 51 5f ff ff       	call   c00004f0 <memset>
c000a59f:	83 c4 10             	add    esp,0x10
c000a5a2:	90                   	nop
c000a5a3:	c9                   	leave  
c000a5a4:	c3                   	ret    

c000a5a5 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a5a5:	55                   	push   ebp
c000a5a6:	89 e5                	mov    ebp,esp
c000a5a8:	83 ec 18             	sub    esp,0x18
c000a5ab:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a5b0:	85 c0                	test   eax,eax
c000a5b2:	74 2a                	je     c000a5de <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a5b4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a5ba:	8b 0d 88 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c688
c000a5c0:	83 ec 04             	sub    esp,0x4
c000a5c3:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a5c8:	83 ec 08             	sub    esp,0x8
c000a5cb:	89 e2                	mov    edx,esp
c000a5cd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a5d0:	89 02                	mov    DWORD PTR [edx],eax
c000a5d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a5d5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a5d9:	ff d1                	call   ecx
c000a5db:	83 c4 10             	add    esp,0x10
c000a5de:	fb                   	sti    
c000a5df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a5e6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a5ea:	0f 84 08 01 00 00    	je     c000a6f8 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a5f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5f3:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5f9:	0f be c0             	movsx  eax,al
c000a5fc:	85 c0                	test   eax,eax
c000a5fe:	75 27                	jne    c000a627 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a600:	fa                   	cli    
c000a601:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a606:	83 c0 01             	add    eax,0x1
c000a609:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000a60e:	e8 fd ca 00 00       	call   c0017110 <schedule()>
c000a613:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000a61b:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a620:	85 c0                	test   eax,eax
c000a622:	75 cc                	jne    c000a5f0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a624:	fb                   	sti    
c000a625:	eb c9                	jmp    c000a5f0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a627:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a62a:	8d 50 01             	lea    edx,[eax+0x1]
c000a62d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a630:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a633:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a639:	88 10                	mov    BYTE PTR [eax],dl
c000a63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a63e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a644:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a647:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a64b:	83 f8 03             	cmp    eax,0x3
c000a64e:	75 1e                	jne    c000a66e <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a650:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a655:	8b 00                	mov    eax,DWORD PTR [eax]
c000a657:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a65a:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a660:	83 ec 08             	sub    esp,0x8
c000a663:	6a 02                	push   0x2
c000a665:	50                   	push   eax
c000a666:	e8 40 6c 00 00       	call   c00112ab <KeRaiseSignal(SigHandlerBlock*, int)>
c000a66b:	83 c4 10             	add    esp,0x10
c000a66e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a672:	83 f8 1c             	cmp    eax,0x1c
c000a675:	75 1e                	jne    c000a695 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a677:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a67c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a67e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a681:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a687:	83 ec 08             	sub    esp,0x8
c000a68a:	6a 09                	push   0x9
c000a68c:	50                   	push   eax
c000a68d:	e8 19 6c 00 00       	call   c00112ab <KeRaiseSignal(SigHandlerBlock*, int)>
c000a692:	83 c4 10             	add    esp,0x10
c000a695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a698:	05 02 01 00 00       	add    eax,0x102
c000a69d:	83 ec 0c             	sub    esp,0xc
c000a6a0:	50                   	push   eax
c000a6a1:	e8 ca 5e ff ff       	call   c0000570 <strlen>
c000a6a6:	83 c4 10             	add    esp,0x10
c000a6a9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a6ac:	81 c2 02 01 00 00    	add    edx,0x102
c000a6b2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a6b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a6b8:	81 c2 02 01 00 00    	add    edx,0x102
c000a6be:	83 ec 04             	sub    esp,0x4
c000a6c1:	50                   	push   eax
c000a6c2:	51                   	push   ecx
c000a6c3:	52                   	push   edx
c000a6c4:	e8 07 5d ff ff       	call   c00003d0 <memmove>
c000a6c9:	83 c4 10             	add    esp,0x10
c000a6cc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a6d0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a6d4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6d8:	83 f8 0a             	cmp    eax,0xa
c000a6db:	74 16                	je     c000a6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6dd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6e1:	83 f8 03             	cmp    eax,0x3
c000a6e4:	74 0d                	je     c000a6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6e6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6ea:	83 f8 1c             	cmp    eax,0x1c
c000a6ed:	0f 85 f3 fe ff ff    	jne    c000a5e6 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a6f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6f6:	eb 03                	jmp    c000a6fb <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6fb:	c9                   	leave  
c000a6fc:	c3                   	ret    
c000a6fd:	90                   	nop

c000a6fe <Keyboard::Keyboard(char const*)>:
c000a6fe:	83 ec 0c             	sub    esp,0xc
c000a701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a705:	83 ec 08             	sub    esp,0x8
c000a708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70c:	50                   	push   eax
c000a70d:	e8 a4 f4 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a712:	83 c4 10             	add    esp,0x10
c000a715:	ba c0 39 02 c0       	mov    edx,0xc00239c0
c000a71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a71e:	89 10                	mov    DWORD PTR [eax],edx
c000a720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a724:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a72e:	c6 05 84 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c684,0x1
c000a735:	90                   	nop
c000a736:	83 c4 0c             	add    esp,0xc
c000a739:	c3                   	ret    

c000a73a <Keyboard::~Keyboard()>:
c000a73a:	83 ec 0c             	sub    esp,0xc
c000a73d:	ba c0 39 02 c0       	mov    edx,0xc00239c0
c000a742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a746:	89 10                	mov    DWORD PTR [eax],edx
c000a748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74c:	83 ec 0c             	sub    esp,0xc
c000a74f:	50                   	push   eax
c000a750:	e8 01 f2 ff ff       	call   c0009956 <Device::~Device()>
c000a755:	83 c4 10             	add    esp,0x10
c000a758:	90                   	nop
c000a759:	83 c4 0c             	add    esp,0xc
c000a75c:	c3                   	ret    
c000a75d:	90                   	nop

c000a75e <Keyboard::~Keyboard()>:
c000a75e:	83 ec 0c             	sub    esp,0xc
c000a761:	83 ec 0c             	sub    esp,0xc
c000a764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a768:	e8 cd ff ff ff       	call   c000a73a <Keyboard::~Keyboard()>
c000a76d:	83 c4 10             	add    esp,0x10
c000a770:	83 ec 08             	sub    esp,0x8
c000a773:	68 5c 01 00 00       	push   0x15c
c000a778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a77c:	e8 68 2c 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	83 c4 0c             	add    esp,0xc
c000a787:	c3                   	ret    

c000a788 <LogicalDisk::close(int, int, void*)>:
c000a788:	83 c8 ff             	or     eax,0xffffffff
c000a78b:	c3                   	ret    

c000a78c <LogicalDisk::~LogicalDisk()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba 38 3a 02 c0       	mov    edx,0xc0023a38
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 af f1 ff ff       	call   c0009956 <Device::~Device()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <LogicalDisk::~LogicalDisk()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <LogicalDisk::~LogicalDisk()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 78 01 00 00       	push   0x178
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 16 2c 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <LogicalDisk::open(int, int, void*)>:
c000a7da:	83 ec 18             	sub    esp,0x18
c000a7dd:	68 ec 39 02 c0       	push   0xc00239ec
c000a7e2:	e8 ff 57 00 00       	call   c000ffe6 <KePanic(char const*)>
c000a7e7:	83 c8 ff             	or     eax,0xffffffff
c000a7ea:	83 c4 1c             	add    esp,0x1c
c000a7ed:	c3                   	ret    

c000a7ee <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a7ee:	53                   	push   ebx
c000a7ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a7f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a7f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7fb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a801:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a807:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a80d:	77 10                	ja     c000a81f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a80f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a815:	89 d3                	mov    ebx,edx
c000a817:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a81d:	72 05                	jb     c000a824 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a81f:	83 c8 ff             	or     eax,0xffffffff
c000a822:	89 c2                	mov    edx,eax
c000a824:	5b                   	pop    ebx
c000a825:	c3                   	ret    

c000a826 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a826:	56                   	push   esi
c000a827:	83 c8 ff             	or     eax,0xffffffff
c000a82a:	53                   	push   ebx
c000a82b:	89 c2                	mov    edx,eax
c000a82d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a831:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a835:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a839:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a83f:	77 27                	ja     c000a868 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a841:	89 d8                	mov    eax,ebx
c000a843:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a849:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a84f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a854:	89 c2                	mov    edx,eax
c000a856:	73 10                	jae    c000a868 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a858:	89 c8                	mov    eax,ecx
c000a85a:	89 da                	mov    edx,ebx
c000a85c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a862:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a868:	5b                   	pop    ebx
c000a869:	5e                   	pop    esi
c000a86a:	c3                   	ret    
c000a86b:	90                   	nop

c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a86c:	83 ec 1c             	sub    esp,0x1c
c000a86f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a87b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a87f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a883:	89 04 24             	mov    DWORD PTR [esp],eax
c000a886:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a88a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a88e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a892:	83 ec 08             	sub    esp,0x8
c000a895:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a899:	50                   	push   eax
c000a89a:	e8 17 f3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a89f:	83 c4 10             	add    esp,0x10
c000a8a2:	ba 38 3a 02 c0       	mov    edx,0xc0023a38
c000a8a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ab:	89 10                	mov    DWORD PTR [eax],edx
c000a8ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8bc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d2:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a8dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a8e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a8e8:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a8ee:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a8f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8ff:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a905:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a90f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a913:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a927:	90                   	nop
c000a928:	83 c4 1c             	add    esp,0x1c
c000a92b:	c3                   	ret    

c000a92c <LogicalDisk::assignDriveLetter()>:
c000a92c:	55                   	push   ebp
c000a92d:	57                   	push   edi
c000a92e:	56                   	push   esi
c000a92f:	53                   	push   ebx
c000a930:	83 ec 14             	sub    esp,0x14
c000a933:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a937:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a93d:	b0 41                	mov    al,0x41
c000a93f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a945:	84 d2                	test   dl,dl
c000a947:	75 02                	jne    c000a94b <LogicalDisk::assignDriveLetter()+0x1f>
c000a949:	b0 43                	mov    al,0x43
c000a94b:	8b 3d c0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac0
c000a951:	0f b6 ca             	movzx  ecx,dl
c000a954:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a958:	0f be e8             	movsx  ebp,al
c000a95b:	8b 3d c4 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac4
c000a961:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a965:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a969:	3c 43                	cmp    al,0x43
c000a96b:	75 10                	jne    c000a97d <LogicalDisk::assignDriveLetter()+0x51>
c000a96d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a974:	75 5a                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a976:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a97b:	75 53                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a97d:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a980:	ba 01 00 00 00       	mov    edx,0x1
c000a985:	89 34 24             	mov    DWORD PTR [esp],esi
c000a988:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a98b:	d3 e2                	shl    edx,cl
c000a98d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a991:	89 d7                	mov    edi,edx
c000a993:	89 d6                	mov    esi,edx
c000a995:	c1 ff 1f             	sar    edi,0x1f
c000a998:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a99c:	21 f9                	and    ecx,edi
c000a99e:	09 d1                	or     ecx,edx
c000a9a0:	75 2e                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a9a2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a9a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9aa:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a9b0:	09 f2                	or     edx,esi
c000a9b2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a9b5:	89 15 c0 ca 02 c0    	mov    DWORD PTR ds:0xc002cac0,edx
c000a9bb:	89 1c b5 e0 ca 02 c0 	mov    DWORD PTR [esi*4-0x3ffd3520],ebx
c000a9c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9c6:	09 fa                	or     edx,edi
c000a9c8:	89 15 c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,edx
c000a9ce:	eb 0d                	jmp    c000a9dd <LogicalDisk::assignDriveLetter()+0xb1>
c000a9d0:	8d 50 01             	lea    edx,[eax+0x1]
c000a9d3:	45                   	inc    ebp
c000a9d4:	88 d0                	mov    al,dl
c000a9d6:	80 fa 5b             	cmp    dl,0x5b
c000a9d9:	75 8e                	jne    c000a969 <LogicalDisk::assignDriveLetter()+0x3d>
c000a9db:	31 c0                	xor    eax,eax
c000a9dd:	83 c4 14             	add    esp,0x14
c000a9e0:	5b                   	pop    ebx
c000a9e1:	5e                   	pop    esi
c000a9e2:	5f                   	pop    edi
c000a9e3:	5d                   	pop    ebp
c000a9e4:	c3                   	ret    
c000a9e5:	90                   	nop

c000a9e6 <LogicalDisk::mount()>:
c000a9e6:	56                   	push   esi
c000a9e7:	53                   	push   ebx
c000a9e8:	53                   	push   ebx
c000a9e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a9ed:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c000a9f3:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9fd:	85 db                	test   ebx,ebx
c000a9ff:	74 27                	je     c000aa28 <LogicalDisk::mount()+0x42>
c000aa01:	51                   	push   ecx
c000aa02:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000aa09:	8b 13                	mov    edx,DWORD PTR [ebx]
c000aa0b:	83 e8 41             	sub    eax,0x41
c000aa0e:	50                   	push   eax
c000aa0f:	56                   	push   esi
c000aa10:	53                   	push   ebx
c000aa11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	84 c0                	test   al,al
c000aa19:	74 08                	je     c000aa23 <LogicalDisk::mount()+0x3d>
c000aa1b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000aa21:	eb 07                	jmp    c000aa2a <LogicalDisk::mount()+0x44>
c000aa23:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000aa26:	eb d5                	jmp    c000a9fd <LogicalDisk::mount()+0x17>
c000aa28:	31 c0                	xor    eax,eax
c000aa2a:	5a                   	pop    edx
c000aa2b:	5b                   	pop    ebx
c000aa2c:	5e                   	pop    esi
c000aa2d:	c3                   	ret    

c000aa2e <LogicalDisk::unmount()>:
c000aa2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa32:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000aa3c:	c3                   	ret    
c000aa3d:	90                   	nop

c000aa3e <LogicalDisk::eject()>:
c000aa3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000aa48:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa4e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000aa51:	90                   	nop

c000aa52 <LogicalDisk::unassignDriveLetter()>:
c000aa52:	57                   	push   edi
c000aa53:	56                   	push   esi
c000aa54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa58:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa5f:	85 c9                	test   ecx,ecx
c000aa61:	75 0f                	jne    c000aa72 <LogicalDisk::unassignDriveLetter()+0x20>
c000aa63:	c7 44 24 0c 10 3a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023a10
c000aa6b:	5e                   	pop    esi
c000aa6c:	5f                   	pop    edi
c000aa6d:	e9 74 55 00 00       	jmp    c000ffe6 <KePanic(char const*)>
c000aa72:	83 e9 41             	sub    ecx,0x41
c000aa75:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa7c:	b8 01 00 00 00       	mov    eax,0x1
c000aa81:	c7 04 8d e0 ca 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3520],0x0
c000aa8c:	d3 e0                	shl    eax,cl
c000aa8e:	89 c7                	mov    edi,eax
c000aa90:	f7 d0                	not    eax
c000aa92:	c1 ff 1f             	sar    edi,0x1f
c000aa95:	21 05 c0 ca 02 c0    	and    DWORD PTR ds:0xc002cac0,eax
c000aa9b:	89 fe                	mov    esi,edi
c000aa9d:	f7 d6                	not    esi
c000aa9f:	21 35 c4 ca 02 c0    	and    DWORD PTR ds:0xc002cac4,esi
c000aaa5:	5e                   	pop    esi
c000aaa6:	5f                   	pop    edi
c000aaa7:	c3                   	ret    

c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aaa8:	57                   	push   edi
c000aaa9:	56                   	push   esi
c000aaaa:	53                   	push   ebx
c000aaab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aaaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aab3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aabb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aac1:	77 41                	ja     c000ab04 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aac3:	99                   	cdq    
c000aac4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aaca:	01 c8                	add    eax,ecx
c000aacc:	11 da                	adc    edx,ebx
c000aace:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aad4:	19 d7                	sbb    edi,edx
c000aad6:	72 33                	jb     c000ab0b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aad8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aade:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aae4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aae8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aaec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aaf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafc:	5b                   	pop    ebx
c000aafd:	5e                   	pop    esi
c000aafe:	5f                   	pop    edi
c000aaff:	e9 a2 0b 00 00       	jmp    c000b6a6 <VCache::read(unsigned long long, int, void*)>
c000ab04:	b8 05 00 00 00       	mov    eax,0x5
c000ab09:	eb 05                	jmp    c000ab10 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ab0b:	b8 07 00 00 00       	mov    eax,0x7
c000ab10:	5b                   	pop    ebx
c000ab11:	5e                   	pop    esi
c000ab12:	5f                   	pop    edi
c000ab13:	c3                   	ret    

c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ab14:	57                   	push   edi
c000ab15:	56                   	push   esi
c000ab16:	53                   	push   ebx
c000ab17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ab1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ab23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ab2d:	77 41                	ja     c000ab70 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ab2f:	99                   	cdq    
c000ab30:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ab36:	01 c8                	add    eax,ecx
c000ab38:	11 da                	adc    edx,ebx
c000ab3a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ab40:	19 d7                	sbb    edi,edx
c000ab42:	72 33                	jb     c000ab77 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ab44:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ab4a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ab50:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ab54:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab58:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab68:	5b                   	pop    ebx
c000ab69:	5e                   	pop    esi
c000ab6a:	5f                   	pop    edi
c000ab6b:	e9 68 09 00 00       	jmp    c000b4d8 <VCache::write(unsigned long long, int, void*)>
c000ab70:	b8 05 00 00 00       	mov    eax,0x5
c000ab75:	eb 05                	jmp    c000ab7c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab77:	b8 07 00 00 00       	mov    eax,0x7
c000ab7c:	5b                   	pop    ebx
c000ab7d:	5e                   	pop    esi
c000ab7e:	5f                   	pop    edi
c000ab7f:	c3                   	ret    

c000ab80 <Mouse::Mouse(char const*)>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab87:	83 ec 08             	sub    esp,0x8
c000ab8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8e:	50                   	push   eax
c000ab8f:	e8 22 f0 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ab94:	83 c4 10             	add    esp,0x10
c000ab97:	ba 64 3a 02 c0       	mov    edx,0xc0023a64
c000ab9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba0:	89 10                	mov    DWORD PTR [eax],edx
c000aba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000abb0:	90                   	nop
c000abb1:	83 c4 0c             	add    esp,0xc
c000abb4:	c3                   	ret    
c000abb5:	90                   	nop
c000abb6:	66 90                	xchg   ax,ax

c000abb8 <Mouse::~Mouse()>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	ba 64 3a 02 c0       	mov    edx,0xc0023a64
c000abc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc4:	89 10                	mov    DWORD PTR [eax],edx
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	83 ec 0c             	sub    esp,0xc
c000abcd:	50                   	push   eax
c000abce:	e8 83 ed ff ff       	call   c0009956 <Device::~Device()>
c000abd3:	83 c4 10             	add    esp,0x10
c000abd6:	90                   	nop
c000abd7:	83 c4 0c             	add    esp,0xc
c000abda:	c3                   	ret    
c000abdb:	90                   	nop

c000abdc <Mouse::~Mouse()>:
c000abdc:	83 ec 0c             	sub    esp,0xc
c000abdf:	83 ec 0c             	sub    esp,0xc
c000abe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abe6:	e8 cd ff ff ff       	call   c000abb8 <Mouse::~Mouse()>
c000abeb:	83 c4 10             	add    esp,0x10
c000abee:	83 ec 08             	sub    esp,0x8
c000abf1:	68 58 01 00 00       	push   0x158
c000abf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abfa:	e8 ea 27 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000abff:	83 c4 10             	add    esp,0x10
c000ac02:	83 c4 0c             	add    esp,0xc
c000ac05:	c3                   	ret    

c000ac06 <NIC::getMAC()>:
c000ac06:	31 c0                	xor    eax,eax
c000ac08:	31 d2                	xor    edx,edx
c000ac0a:	c3                   	ret    
c000ac0b:	90                   	nop

c000ac0c <NIC::write(int, unsigned char*, int*)>:
c000ac0c:	b8 01 00 00 00       	mov    eax,0x1
c000ac11:	c3                   	ret    

c000ac12 <NIC::NIC(char const*)>:
c000ac12:	83 ec 0c             	sub    esp,0xc
c000ac15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac19:	83 ec 08             	sub    esp,0x8
c000ac1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac20:	50                   	push   eax
c000ac21:	e8 90 ef ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ac26:	83 c4 10             	add    esp,0x10
c000ac29:	ba 90 3a 02 c0       	mov    edx,0xc0023a90
c000ac2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac32:	89 10                	mov    DWORD PTR [eax],edx
c000ac34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac38:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ac42:	90                   	nop
c000ac43:	83 c4 0c             	add    esp,0xc
c000ac46:	c3                   	ret    
c000ac47:	90                   	nop

c000ac48 <NIC::~NIC()>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	ba 90 3a 02 c0       	mov    edx,0xc0023a90
c000ac50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac54:	89 10                	mov    DWORD PTR [eax],edx
c000ac56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac5a:	83 ec 0c             	sub    esp,0xc
c000ac5d:	50                   	push   eax
c000ac5e:	e8 f3 ec ff ff       	call   c0009956 <Device::~Device()>
c000ac63:	83 c4 10             	add    esp,0x10
c000ac66:	90                   	nop
c000ac67:	83 c4 0c             	add    esp,0xc
c000ac6a:	c3                   	ret    
c000ac6b:	90                   	nop

c000ac6c <NIC::~NIC()>:
c000ac6c:	83 ec 0c             	sub    esp,0xc
c000ac6f:	83 ec 0c             	sub    esp,0xc
c000ac72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac76:	e8 cd ff ff ff       	call   c000ac48 <NIC::~NIC()>
c000ac7b:	83 c4 10             	add    esp,0x10
c000ac7e:	83 ec 08             	sub    esp,0x8
c000ac81:	68 58 01 00 00       	push   0x158
c000ac86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac8a:	e8 5a 27 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000ac8f:	83 c4 10             	add    esp,0x10
c000ac92:	83 c4 0c             	add    esp,0xc
c000ac95:	c3                   	ret    

c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac96:	55                   	push   ebp
c000ac97:	57                   	push   edi
c000ac98:	56                   	push   esi
c000ac99:	53                   	push   ebx
c000ac9a:	81 ec 28 01 00 00    	sub    esp,0x128
c000aca0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000aca7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000acae:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000acb5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000acbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000acc0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000acc4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000accb:	e8 e2 ef ff ff       	call   c0009cb2 <Device::getName()>
c000acd0:	5a                   	pop    edx
c000acd1:	59                   	pop    ecx
c000acd2:	50                   	push   eax
c000acd3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000acd7:	55                   	push   ebp
c000acd8:	e8 63 59 ff ff       	call   c0000640 <strcpy>
c000acdd:	5b                   	pop    ebx
c000acde:	58                   	pop    eax
c000acdf:	68 bc 3a 02 c0       	push   0xc0023abc
c000ace4:	55                   	push   ebp
c000ace5:	e8 56 5b ff ff       	call   c0000840 <strcat>
c000acea:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000acf1:	e8 99 4e 00 00       	call   c000fb8f <malloc>
c000acf6:	83 c4 0c             	add    esp,0xc
c000acf9:	89 c3                	mov    ebx,eax
c000acfb:	57                   	push   edi
c000acfc:	56                   	push   esi
c000acfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad05:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ad0c:	55                   	push   ebp
c000ad0d:	50                   	push   eax
c000ad0e:	e8 59 fb ff ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ad13:	83 c4 14             	add    esp,0x14
c000ad16:	53                   	push   ebx
c000ad17:	e8 10 fc ff ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c000ad1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ad1f:	e8 c2 fc ff ff       	call   c000a9e6 <LogicalDisk::mount()>
c000ad24:	58                   	pop    eax
c000ad25:	5a                   	pop    edx
c000ad26:	53                   	push   ebx
c000ad27:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ad2e:	e8 21 ed ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000ad33:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ad39:	5b                   	pop    ebx
c000ad3a:	5e                   	pop    esi
c000ad3b:	5f                   	pop    edi
c000ad3c:	5d                   	pop    ebp
c000ad3d:	c3                   	ret    

c000ad3e <createPartitionsForDisk(PhysicalDisk*)>:
c000ad3e:	55                   	push   ebp
c000ad3f:	57                   	push   edi
c000ad40:	56                   	push   esi
c000ad41:	53                   	push   ebx
c000ad42:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ad48:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ad4f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ad55:	3d 00 02 00 00       	cmp    eax,0x200
c000ad5a:	74 27                	je     c000ad83 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad5c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad62:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad68:	83 ec 10             	sub    esp,0x10
c000ad6b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad6f:	99                   	cdq    
c000ad70:	c1 e6 0a             	shl    esi,0xa
c000ad73:	52                   	push   edx
c000ad74:	89 fd                	mov    ebp,edi
c000ad76:	50                   	push   eax
c000ad77:	55                   	push   ebp
c000ad78:	56                   	push   esi
c000ad79:	e8 96 6e 01 00       	call   c0021c14 <__udivdi3>
c000ad7e:	e9 b9 00 00 00       	jmp    c000ae3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad83:	83 ec 0c             	sub    esp,0xc
c000ad86:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad88:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad8c:	56                   	push   esi
c000ad8d:	6a 01                	push   0x1
c000ad8f:	6a 00                	push   0x0
c000ad91:	6a 00                	push   0x0
c000ad93:	53                   	push   ebx
c000ad94:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad97:	83 c4 20             	add    esp,0x20
c000ad9a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ada2:	75 0a                	jne    c000adae <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ada4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000adac:	74 2c                	je     c000adda <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000adae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adb4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adc0:	83 ec 10             	sub    esp,0x10
c000adc3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000adc7:	89 f7                	mov    edi,esi
c000adc9:	c1 e0 0a             	shl    eax,0xa
c000adcc:	c1 ff 1f             	sar    edi,0x1f
c000adcf:	57                   	push   edi
c000add0:	56                   	push   esi
c000add1:	52                   	push   edx
c000add2:	50                   	push   eax
c000add3:	e8 3c 6e 01 00       	call   c0021c14 <__udivdi3>
c000add8:	eb 62                	jmp    c000ae3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000adda:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ade1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ade8:	89 cf                	mov    edi,ecx
c000adea:	83 e2 7f             	and    edx,0x7f
c000aded:	83 e7 7f             	and    edi,0x7f
c000adf0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000adf7:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000adfa:	83 e0 7f             	and    eax,0x7f
c000adfd:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ae00:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ae07:	83 e0 7f             	and    eax,0x7f
c000ae0a:	01 d0                	add    eax,edx
c000ae0c:	89 c5                	mov    ebp,eax
c000ae0e:	84 c0                	test   al,al
c000ae10:	74 41                	je     c000ae53 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000ae12:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ae18:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ae1e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae24:	83 ec 10             	sub    esp,0x10
c000ae27:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ae2b:	89 f7                	mov    edi,esi
c000ae2d:	c1 e0 0a             	shl    eax,0xa
c000ae30:	c1 ff 1f             	sar    edi,0x1f
c000ae33:	57                   	push   edi
c000ae34:	56                   	push   esi
c000ae35:	52                   	push   edx
c000ae36:	50                   	push   eax
c000ae37:	e8 d8 6d 01 00       	call   c0021c14 <__udivdi3>
c000ae3c:	83 c4 14             	add    esp,0x14
c000ae3f:	52                   	push   edx
c000ae40:	50                   	push   eax
c000ae41:	6a 00                	push   0x0
c000ae43:	6a 00                	push   0x0
c000ae45:	53                   	push   ebx
c000ae46:	e8 4b fe ff ff       	call   c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ae4b:	83 c4 20             	add    esp,0x20
c000ae4e:	e9 73 01 00 00       	jmp    c000afc6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ae53:	89 f0                	mov    eax,esi
c000ae55:	31 c9                	xor    ecx,ecx
c000ae57:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae5e:	75 02                	jne    c000ae62 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae60:	89 cd                	mov    ebp,ecx
c000ae62:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae69:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae70:	c1 e2 08             	shl    edx,0x8
c000ae73:	c1 e6 10             	shl    esi,0x10
c000ae76:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae7e:	09 f2                	or     edx,esi
c000ae80:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae88:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae8f:	83 c0 10             	add    eax,0x10
c000ae92:	09 f2                	or     edx,esi
c000ae94:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae9b:	c1 e6 18             	shl    esi,0x18
c000ae9e:	09 f2                	or     edx,esi
c000aea0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000aea7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000aeab:	c1 e6 10             	shl    esi,0x10
c000aeae:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000aeb5:	c1 e2 08             	shl    edx,0x8
c000aeb8:	09 f2                	or     edx,esi
c000aeba:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000aec1:	09 f2                	or     edx,esi
c000aec3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000aeca:	c1 e6 18             	shl    esi,0x18
c000aecd:	09 f2                	or     edx,esi
c000aecf:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000aed3:	41                   	inc    ecx
c000aed4:	83 f9 04             	cmp    ecx,0x4
c000aed7:	0f 85 7a ff ff ff    	jne    c000ae57 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000aedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee1:	83 f0 01             	xor    eax,0x1
c000aee4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000aee8:	75 4f                	jne    c000af39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aeea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeee:	83 f0 01             	xor    eax,0x1
c000aef1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000aef5:	75 42                	jne    c000af39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aef7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aeff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000af07:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000af0d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000af13:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000af19:	0f a4 c2 0a          	shld   edx,eax,0xa
c000af1d:	89 f7                	mov    edi,esi
c000af1f:	c1 e0 0a             	shl    eax,0xa
c000af22:	c1 ff 1f             	sar    edi,0x1f
c000af25:	57                   	push   edi
c000af26:	56                   	push   esi
c000af27:	52                   	push   edx
c000af28:	50                   	push   eax
c000af29:	e8 e6 6c 01 00       	call   c0021c14 <__udivdi3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000af35:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000af39:	89 e8                	mov    eax,ebp
c000af3b:	0f b6 e8             	movzx  ebp,al
c000af3e:	85 ed                	test   ebp,ebp
c000af40:	74 50                	je     c000af92 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000af42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000af4e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000af52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af5a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af5e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af66:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af6e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af72:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af76:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af7a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af82:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af86:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af8a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af8e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af92:	31 ed                	xor    ebp,ebp
c000af94:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af98:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af9c:	89 f8                	mov    eax,edi
c000af9e:	09 f0                	or     eax,esi
c000afa0:	74 1e                	je     c000afc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000afa2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000afa6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000afaa:	89 d1                	mov    ecx,edx
c000afac:	09 c1                	or     ecx,eax
c000afae:	74 10                	je     c000afc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	57                   	push   edi
c000afb4:	56                   	push   esi
c000afb5:	52                   	push   edx
c000afb6:	50                   	push   eax
c000afb7:	53                   	push   ebx
c000afb8:	e8 d9 fc ff ff       	call   c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000afbd:	83 c4 20             	add    esp,0x20
c000afc0:	45                   	inc    ebp
c000afc1:	83 fd 04             	cmp    ebp,0x4
c000afc4:	75 ce                	jne    c000af94 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000afc6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000afcc:	5b                   	pop    ebx
c000afcd:	5e                   	pop    esi
c000afce:	5f                   	pop    edi
c000afcf:	5d                   	pop    ebp
c000afd0:	c3                   	ret    
c000afd1:	66 90                	xchg   ax,ax
c000afd3:	90                   	nop

c000afd4 <Serial::Serial(char const*)>:
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afdb:	83 ec 08             	sub    esp,0x8
c000afde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe2:	50                   	push   eax
c000afe3:	e8 ce eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000afe8:	83 c4 10             	add    esp,0x10
c000afeb:	ba d0 3a 02 c0       	mov    edx,0xc0023ad0
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	89 10                	mov    DWORD PTR [eax],edx
c000aff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affa:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000b004:	90                   	nop
c000b005:	83 c4 0c             	add    esp,0xc
c000b008:	c3                   	ret    
c000b009:	90                   	nop
c000b00a:	66 90                	xchg   ax,ax

c000b00c <Serial::~Serial()>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	ba d0 3a 02 c0       	mov    edx,0xc0023ad0
c000b014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b018:	89 10                	mov    DWORD PTR [eax],edx
c000b01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	50                   	push   eax
c000b022:	e8 2f e9 ff ff       	call   c0009956 <Device::~Device()>
c000b027:	83 c4 10             	add    esp,0x10
c000b02a:	90                   	nop
c000b02b:	83 c4 0c             	add    esp,0xc
c000b02e:	c3                   	ret    
c000b02f:	90                   	nop

c000b030 <Serial::~Serial()>:
c000b030:	83 ec 0c             	sub    esp,0xc
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b03a:	e8 cd ff ff ff       	call   c000b00c <Serial::~Serial()>
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	83 ec 08             	sub    esp,0x8
c000b045:	68 58 01 00 00       	push   0x158
c000b04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b04e:	e8 96 23 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	83 c4 0c             	add    esp,0xc
c000b059:	c3                   	ret    
c000b05a:	66 90                	xchg   ax,ax

c000b05c <Timer::Timer(char const*)>:
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b063:	83 ec 08             	sub    esp,0x8
c000b066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b06a:	50                   	push   eax
c000b06b:	e8 46 eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	ba b0 3b 02 c0       	mov    edx,0xc0023bb0
c000b078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07c:	89 10                	mov    DWORD PTR [eax],edx
c000b07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b082:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b08c:	90                   	nop
c000b08d:	83 c4 0c             	add    esp,0xc
c000b090:	c3                   	ret    
c000b091:	90                   	nop
c000b092:	66 90                	xchg   ax,ax

c000b094 <Timer::~Timer()>:
c000b094:	83 ec 0c             	sub    esp,0xc
c000b097:	ba b0 3b 02 c0       	mov    edx,0xc0023bb0
c000b09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a0:	89 10                	mov    DWORD PTR [eax],edx
c000b0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	50                   	push   eax
c000b0aa:	e8 a7 e8 ff ff       	call   c0009956 <Device::~Device()>
c000b0af:	83 c4 10             	add    esp,0x10
c000b0b2:	90                   	nop
c000b0b3:	83 c4 0c             	add    esp,0xc
c000b0b6:	c3                   	ret    
c000b0b7:	90                   	nop

c000b0b8 <Timer::~Timer()>:
c000b0b8:	83 ec 0c             	sub    esp,0xc
c000b0bb:	83 ec 0c             	sub    esp,0xc
c000b0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0c2:	e8 cd ff ff ff       	call   c000b094 <Timer::~Timer()>
c000b0c7:	83 c4 10             	add    esp,0x10
c000b0ca:	83 ec 08             	sub    esp,0x8
c000b0cd:	68 5c 01 00 00       	push   0x15c
c000b0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d6:	e8 0e 23 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 c4 0c             	add    esp,0xc
c000b0e1:	c3                   	ret    

c000b0e2 <Timer::read()>:
c000b0e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0ec:	c3                   	ret    

c000b0ed <setupTimer(int)>:
c000b0ed:	53                   	push   ebx
c000b0ee:	83 ec 14             	sub    esp,0x14
c000b0f1:	68 5c 01 00 00       	push   0x15c
c000b0f6:	e8 94 4a 00 00       	call   c000fb8f <malloc>
c000b0fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0fe:	89 c3                	mov    ebx,eax
c000b100:	e8 c7 63 01 00       	call   c00214cc <PIT::PIT()>
c000b105:	58                   	pop    eax
c000b106:	5a                   	pop    edx
c000b107:	53                   	push   ebx
c000b108:	ff 35 c8 d0 02 c0    	push   DWORD PTR ds:0xc002d0c8
c000b10e:	e8 41 e9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000b113:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b115:	6a 00                	push   0x0
c000b117:	6a 00                	push   0x0
c000b119:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b11d:	53                   	push   ebx
c000b11e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b121:	89 d8                	mov    eax,ebx
c000b123:	83 c4 28             	add    esp,0x28
c000b126:	5b                   	pop    ebx
c000b127:	c3                   	ret    

c000b128 <timerHandler(unsigned int)>:
c000b128:	57                   	push   edi
c000b129:	31 d2                	xor    edx,edx
c000b12b:	56                   	push   esi
c000b12c:	53                   	push   ebx
c000b12d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b131:	01 1d 50 cb 02 c0    	add    DWORD PTR ds:0xc002cb50,ebx
c000b137:	11 15 54 cb 02 c0    	adc    DWORD PTR ds:0xc002cb54,edx
c000b13d:	80 3d cd d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cd,0x0
c000b144:	75 12                	jne    c000b158 <timerHandler(unsigned int)+0x30>
c000b146:	c7 44 24 10 5f 3b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023b5f
c000b14e:	5b                   	pop    ebx
c000b14f:	5e                   	pop    esi
c000b150:	5f                   	pop    edi
c000b151:	e9 26 be ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000b156:	66 90                	xchg   ax,ax
c000b158:	fa                   	cli    
c000b159:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	68 40 fa 02 c0       	push   0xc002fa40
c000b167:	e8 40 6e 01 00       	call   c0021fac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	84 c0                	test   al,al
c000b171:	0f 85 a9 00 00 00    	jne    c000b220 <timerHandler(unsigned int)+0xf8>
c000b177:	83 ec 0c             	sub    esp,0xc
c000b17a:	68 40 fa 02 c0       	push   0xc002fa40
c000b17f:	e8 44 6e 01 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	89 c6                	mov    esi,eax
c000b189:	8d 76 00             	lea    esi,[esi+0x0]
c000b18c:	83 ec 0c             	sub    esp,0xc
c000b18f:	68 40 fa 02 c0       	push   0xc002fa40
c000b194:	e8 2f 6e 01 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b199:	c7 04 24 40 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa40
c000b1a0:	89 c7                	mov    edi,eax
c000b1a2:	e8 29 6e 01 00       	call   c0021fd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b1a7:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b1b0:	39 15 50 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb50,edx
c000b1b6:	a1 54 cb 02 c0       	mov    eax,ds:0xc002cb54
c000b1bb:	19 c8                	sbb    eax,ecx
c000b1bd:	72 21                	jb     c000b1e0 <timerHandler(unsigned int)+0xb8>
c000b1bf:	83 ec 0c             	sub    esp,0xc
c000b1c2:	57                   	push   edi
c000b1c3:	e8 a4 c2 00 00       	call   c001746c <unblockTask(ThreadControlBlock*)>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	39 fe                	cmp    esi,edi
c000b1cd:	75 25                	jne    c000b1f4 <timerHandler(unsigned int)+0xcc>
c000b1cf:	83 ec 0c             	sub    esp,0xc
c000b1d2:	68 40 fa 02 c0       	push   0xc002fa40
c000b1d7:	e8 ec 6d 01 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1dc:	89 c6                	mov    esi,eax
c000b1de:	eb 10                	jmp    c000b1f0 <timerHandler(unsigned int)+0xc8>
c000b1e0:	51                   	push   ecx
c000b1e1:	51                   	push   ecx
c000b1e2:	57                   	push   edi
c000b1e3:	68 40 fa 02 c0       	push   0xc002fa40
c000b1e8:	e8 9f 6e 01 00       	call   c002208c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	90                   	nop
c000b1f4:	83 ec 0c             	sub    esp,0xc
c000b1f7:	68 40 fa 02 c0       	push   0xc002fa40
c000b1fc:	e8 ab 6d 01 00       	call   c0021fac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	84 c0                	test   al,al
c000b206:	75 18                	jne    c000b220 <timerHandler(unsigned int)+0xf8>
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	68 40 fa 02 c0       	push   0xc002fa40
c000b210:	e8 b3 6d 01 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	39 f0                	cmp    eax,esi
c000b21a:	0f 85 6c ff ff ff    	jne    c000b18c <timerHandler(unsigned int)+0x64>
c000b220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b225:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b228:	85 c0                	test   eax,eax
c000b22a:	74 48                	je     c000b274 <timerHandler(unsigned int)+0x14c>
c000b22c:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c000b233:	74 3f                	je     c000b274 <timerHandler(unsigned int)+0x14c>
c000b235:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b23a:	76 1c                	jbe    c000b258 <timerHandler(unsigned int)+0x130>
c000b23c:	52                   	push   edx
c000b23d:	52                   	push   edx
c000b23e:	50                   	push   eax
c000b23f:	68 75 3b 02 c0       	push   0xc0023b75
c000b244:	e8 33 bd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b24e:	83 c4 10             	add    esp,0x10
c000b251:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b258:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b25e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b261:	89 c1                	mov    ecx,eax
c000b263:	29 d9                	sub    ecx,ebx
c000b265:	39 d8                	cmp    eax,ebx
c000b267:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b26a:	77 08                	ja     c000b274 <timerHandler(unsigned int)+0x14c>
c000b26c:	e8 9f be 00 00       	call   c0017110 <schedule()>
c000b271:	8d 76 00             	lea    esi,[esi+0x0]
c000b274:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000b27b:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000b282:	75 04                	jne    c000b288 <timerHandler(unsigned int)+0x160>
c000b284:	fb                   	sti    
c000b285:	8d 76 00             	lea    esi,[esi+0x0]
c000b288:	5b                   	pop    ebx
c000b289:	5e                   	pop    esi
c000b28a:	5f                   	pop    edi
c000b28b:	c3                   	ret    

c000b28c <VCache::VCache(PhysicalDisk*)>:
c000b28c:	53                   	push   ebx
c000b28d:	83 ec 18             	sub    esp,0x18
c000b290:	ba 20 3c 02 c0       	mov    edx,0xc0023c20
c000b295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b299:	89 10                	mov    DWORD PTR [eax],edx
c000b29b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b29f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b2b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b2bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b2c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b2ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b2e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b2e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b2f3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b306:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b30e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b316:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b31d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b325:	83 ec 0c             	sub    esp,0xc
c000b328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b32c:	e8 5e 48 00 00       	call   c000fb8f <malloc>
c000b331:	83 c4 10             	add    esp,0x10
c000b334:	89 c3                	mov    ebx,eax
c000b336:	83 ec 0c             	sub    esp,0xc
c000b339:	53                   	push   ebx
c000b33a:	e8 8d 4c 00 00       	call   c000ffcc <Mutex::Mutex()>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b346:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b34d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b351:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b358:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b35f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b363:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b374:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b37a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b380:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b384:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b387:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b38e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b392:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b396:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b39c:	05 00 01 00 00       	add    eax,0x100
c000b3a1:	c1 e0 04             	shl    eax,0x4
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	50                   	push   eax
c000b3a8:	e8 e2 47 00 00       	call   c000fb8f <malloc>
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	89 c2                	mov    edx,eax
c000b3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3bd:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b3c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b3cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b3d6:	89 d0                	mov    eax,edx
c000b3d8:	c1 e0 02             	shl    eax,0x2
c000b3db:	01 d0                	add    eax,edx
c000b3dd:	c1 e0 04             	shl    eax,0x4
c000b3e0:	83 ec 0c             	sub    esp,0xc
c000b3e3:	50                   	push   eax
c000b3e4:	e8 a6 47 00 00       	call   c000fb8f <malloc>
c000b3e9:	83 c4 10             	add    esp,0x10
c000b3ec:	89 c2                	mov    edx,eax
c000b3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3f2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b3f5:	90                   	nop
c000b3f6:	83 c4 18             	add    esp,0x18
c000b3f9:	5b                   	pop    ebx
c000b3fa:	c3                   	ret    
c000b3fb:	90                   	nop

c000b3fc <VCache::invalidateReadBuffer()>:
c000b3fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b400:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b406:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b40a:	c3                   	ret    
c000b40b:	90                   	nop

c000b40c <VCache::writeWriteBuffer()>:
c000b40c:	53                   	push   ebx
c000b40d:	83 ec 08             	sub    esp,0x8
c000b410:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b414:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b418:	74 1e                	je     c000b438 <VCache::writeWriteBuffer()+0x2c>
c000b41a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b41d:	83 ec 0c             	sub    esp,0xc
c000b420:	8b 10                	mov    edx,DWORD PTR [eax]
c000b422:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b425:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b428:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b42b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b42e:	50                   	push   eax
c000b42f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b432:	83 c4 20             	add    esp,0x20
c000b435:	8d 76 00             	lea    esi,[esi+0x0]
c000b438:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b43f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b446:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b44a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b451:	83 c4 08             	add    esp,0x8
c000b454:	5b                   	pop    ebx
c000b455:	c3                   	ret    
c000b456:	66 90                	xchg   ax,ax

c000b458 <VCache::~VCache()>:
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	ba 20 3c 02 c0       	mov    edx,0xc0023c20
c000b460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b464:	89 10                	mov    DWORD PTR [eax],edx
c000b466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b46d:	0f b6 c0             	movzx  eax,al
c000b470:	85 c0                	test   eax,eax
c000b472:	74 10                	je     c000b484 <VCache::~VCache()+0x2c>
c000b474:	83 ec 0c             	sub    esp,0xc
c000b477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47b:	e8 8c ff ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	90                   	nop
c000b484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b488:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b48b:	83 ec 0c             	sub    esp,0xc
c000b48e:	50                   	push   eax
c000b48f:	e8 0b 47 00 00       	call   c000fb9f <free>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b49e:	83 ec 0c             	sub    esp,0xc
c000b4a1:	50                   	push   eax
c000b4a2:	e8 f8 46 00 00       	call   c000fb9f <free>
c000b4a7:	83 c4 10             	add    esp,0x10
c000b4aa:	90                   	nop
c000b4ab:	83 c4 0c             	add    esp,0xc
c000b4ae:	c3                   	ret    
c000b4af:	90                   	nop

c000b4b0 <VCache::~VCache()>:
c000b4b0:	83 ec 0c             	sub    esp,0xc
c000b4b3:	83 ec 0c             	sub    esp,0xc
c000b4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ba:	e8 99 ff ff ff       	call   c000b458 <VCache::~VCache()>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	83 ec 08             	sub    esp,0x8
c000b4c5:	6a 44                	push   0x44
c000b4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cb:	e8 19 1f 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000b4d0:	83 c4 10             	add    esp,0x10
c000b4d3:	83 c4 0c             	add    esp,0xc
c000b4d6:	c3                   	ret    
c000b4d7:	90                   	nop

c000b4d8 <VCache::write(unsigned long long, int, void*)>:
c000b4d8:	55                   	push   ebp
c000b4d9:	57                   	push   edi
c000b4da:	56                   	push   esi
c000b4db:	53                   	push   ebx
c000b4dc:	83 ec 1c             	sub    esp,0x1c
c000b4df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b4e3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b4e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b4eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b4ef:	e8 14 b9 00 00       	call   c0016e08 <KeDisablePreemption()>
c000b4f4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4f9:	50                   	push   eax
c000b4fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4fd:	0f af c3             	imul   eax,ebx
c000b500:	05 ff 0f 00 00       	add    eax,0xfff
c000b505:	99                   	cdq    
c000b506:	f7 f9                	idiv   ecx
c000b508:	50                   	push   eax
c000b509:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b50d:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b513:	e8 64 8e 00 00       	call   c001437c <VAS::canLockPages(unsigned long, int)>
c000b518:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b524:	74 2a                	je     c000b550 <VCache::write(unsigned long long, int, void*)+0x78>
c000b526:	b9 00 10 00 00       	mov    ecx,0x1000
c000b52b:	50                   	push   eax
c000b52c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b52f:	0f af c3             	imul   eax,ebx
c000b532:	05 ff 0f 00 00       	add    eax,0xfff
c000b537:	99                   	cdq    
c000b538:	f7 f9                	idiv   ecx
c000b53a:	50                   	push   eax
c000b53b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b53f:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b545:	e8 9c 90 00 00       	call   c00145e6 <VAS::lockPages(unsigned long, int)>
c000b54a:	83 c4 10             	add    esp,0x10
c000b54d:	8d 76 00             	lea    esi,[esi+0x0]
c000b550:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b554:	74 0e                	je     c000b564 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b556:	83 ec 0c             	sub    esp,0xc
c000b559:	55                   	push   ebp
c000b55a:	e8 9d fe ff ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	66 90                	xchg   ax,ax
c000b564:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b568:	74 72                	je     c000b5dc <VCache::write(unsigned long long, int, void*)+0x104>
c000b56a:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b56d:	89 c8                	mov    eax,ecx
c000b56f:	99                   	cdq    
c000b570:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b573:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b576:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b582:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b586:	31 f0                	xor    eax,esi
c000b588:	31 fa                	xor    edx,edi
c000b58a:	09 d0                	or     eax,edx
c000b58c:	75 42                	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b58e:	83 fb 01             	cmp    ebx,0x1
c000b591:	75 3d                	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b596:	89 cf                	mov    edi,ecx
c000b598:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b59e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5a2:	0f af f8             	imul   edi,eax
c000b5a5:	89 c1                	mov    ecx,eax
c000b5a7:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b5aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5ac:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b5af:	40                   	inc    eax
c000b5b0:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b5b3:	83 f8 50             	cmp    eax,0x50
c000b5b6:	0f 85 a8 00 00 00    	jne    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	55                   	push   ebp
c000b5c0:	e8 47 fe ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b5c5:	83 c4 10             	add    esp,0x10
c000b5c8:	e9 97 00 00 00       	jmp    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b5d0:	83 ec 0c             	sub    esp,0xc
c000b5d3:	55                   	push   ebp
c000b5d4:	e8 33 fe ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5df:	83 fb 4f             	cmp    ebx,0x4f
c000b5e2:	7f 20                	jg     c000b604 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b5e4:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b5e7:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b5ea:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b5ed:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b5f1:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b5f4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5fa:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b600:	eb 62                	jmp    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b602:	66 90                	xchg   ax,ax
c000b604:	83 ec 0c             	sub    esp,0xc
c000b607:	8b 10                	mov    edx,DWORD PTR [eax]
c000b609:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b60d:	53                   	push   ebx
c000b60e:	57                   	push   edi
c000b60f:	56                   	push   esi
c000b610:	50                   	push   eax
c000b611:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b614:	83 c4 20             	add    esp,0x20
c000b617:	89 c6                	mov    esi,eax
c000b619:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b61e:	74 28                	je     c000b648 <VCache::write(unsigned long long, int, void*)+0x170>
c000b620:	b9 00 10 00 00       	mov    ecx,0x1000
c000b625:	52                   	push   edx
c000b626:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b62a:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b630:	99                   	cdq    
c000b631:	f7 f9                	idiv   ecx
c000b633:	50                   	push   eax
c000b634:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b638:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b63e:	e8 75 8d 00 00       	call   c00143b8 <VAS::unlockPages(unsigned long, int)>
c000b643:	83 c4 10             	add    esp,0x10
c000b646:	66 90                	xchg   ax,ax
c000b648:	e8 e3 b7 00 00       	call   c0016e30 <KeRestorePreemption()>
c000b64d:	85 f6                	test   esi,esi
c000b64f:	74 4b                	je     c000b69c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b651:	83 ec 0c             	sub    esp,0xc
c000b654:	68 d8 3b 02 c0       	push   0xc0023bd8
c000b659:	e8 1e b9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	eb 39                	jmp    c000b69c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b663:	90                   	nop
c000b664:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b669:	74 29                	je     c000b694 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b66b:	b9 00 10 00 00       	mov    ecx,0x1000
c000b670:	50                   	push   eax
c000b671:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b675:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b67b:	99                   	cdq    
c000b67c:	f7 f9                	idiv   ecx
c000b67e:	50                   	push   eax
c000b67f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b683:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b689:	e8 2a 8d 00 00       	call   c00143b8 <VAS::unlockPages(unsigned long, int)>
c000b68e:	83 c4 10             	add    esp,0x10
c000b691:	8d 76 00             	lea    esi,[esi+0x0]
c000b694:	e8 97 b7 00 00       	call   c0016e30 <KeRestorePreemption()>
c000b699:	31 f6                	xor    esi,esi
c000b69b:	90                   	nop
c000b69c:	83 c4 1c             	add    esp,0x1c
c000b69f:	89 f0                	mov    eax,esi
c000b6a1:	5b                   	pop    ebx
c000b6a2:	5e                   	pop    esi
c000b6a3:	5f                   	pop    edi
c000b6a4:	5d                   	pop    ebp
c000b6a5:	c3                   	ret    

c000b6a6 <VCache::read(unsigned long long, int, void*)>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	bf 00 10 00 00       	mov    edi,0x1000
c000b6ad:	56                   	push   esi
c000b6ae:	53                   	push   ebx
c000b6af:	83 ec 2c             	sub    esp,0x2c
c000b6b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b6b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b6ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6be:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b6c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b6ca:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b6ce:	e8 35 b7 00 00       	call   c0016e08 <KeDisablePreemption()>
c000b6d3:	50                   	push   eax
c000b6d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6d7:	0f af c6             	imul   eax,esi
c000b6da:	05 ff 0f 00 00       	add    eax,0xfff
c000b6df:	99                   	cdq    
c000b6e0:	f7 ff                	idiv   edi
c000b6e2:	50                   	push   eax
c000b6e3:	55                   	push   ebp
c000b6e4:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b6ea:	e8 8d 8c 00 00       	call   c001437c <VAS::canLockPages(unsigned long, int)>
c000b6ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b6f3:	83 c4 10             	add    esp,0x10
c000b6f6:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b6fb:	74 1f                	je     c000b71c <VCache::read(unsigned long long, int, void*)+0x76>
c000b6fd:	50                   	push   eax
c000b6fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b701:	0f af c6             	imul   eax,esi
c000b704:	05 ff 0f 00 00       	add    eax,0xfff
c000b709:	99                   	cdq    
c000b70a:	f7 ff                	idiv   edi
c000b70c:	50                   	push   eax
c000b70d:	55                   	push   ebp
c000b70e:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b714:	e8 cd 8e 00 00       	call   c00145e6 <VAS::lockPages(unsigned long, int)>
c000b719:	83 c4 10             	add    esp,0x10
c000b71c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b720:	74 0e                	je     c000b730 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b722:	83 ec 0c             	sub    esp,0xc
c000b725:	53                   	push   ebx
c000b726:	e8 e1 fc ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b72b:	83 c4 10             	add    esp,0x10
c000b72e:	66 90                	xchg   ax,ax
c000b730:	83 fe 01             	cmp    esi,0x1
c000b733:	0f 85 ef 00 00 00    	jne    c000b828 <VCache::read(unsigned long long, int, void*)+0x182>
c000b739:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b73c:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b743:	0f 85 df 00 00 00    	jne    c000b828 <VCache::read(unsigned long long, int, void*)+0x182>
c000b749:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b74c:	89 fe                	mov    esi,edi
c000b74e:	f7 de                	neg    esi
c000b750:	89 f0                	mov    eax,esi
c000b752:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b756:	c1 f8 1f             	sar    eax,0x1f
c000b759:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b75d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b761:	89 f0                	mov    eax,esi
c000b763:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b767:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b76b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b76f:	89 f2                	mov    edx,esi
c000b771:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b776:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b77a:	74 0c                	je     c000b788 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b77c:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b77f:	75 07                	jne    c000b788 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b781:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b784:	74 4e                	je     c000b7d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b786:	66 90                	xchg   ax,ax
c000b788:	83 ec 0c             	sub    esp,0xc
c000b78b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b78f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b792:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b795:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b797:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b79a:	57                   	push   edi
c000b79b:	52                   	push   edx
c000b79c:	50                   	push   eax
c000b79d:	51                   	push   ecx
c000b79e:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b7a1:	83 c4 20             	add    esp,0x20
c000b7a4:	89 c7                	mov    edi,eax
c000b7a6:	85 c0                	test   eax,eax
c000b7a8:	74 2a                	je     c000b7d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	68 f0 3b 02 c0       	push   0xc0023bf0
c000b7b2:	e8 c5 b7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7bf:	0f 84 b3 00 00 00    	je     c000b878 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7c5:	51                   	push   ecx
c000b7c6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7c9:	05 ff 0f 00 00       	add    eax,0xfff
c000b7ce:	e9 8d 00 00 00       	jmp    c000b860 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b7d3:	90                   	nop
c000b7d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7d7:	89 ef                	mov    edi,ebp
c000b7d9:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b7df:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7e2:	8d 70 ff             	lea    esi,[eax-0x1]
c000b7e5:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b7e9:	0f af f1             	imul   esi,ecx
c000b7ec:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b7ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b7f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7f6:	74 24                	je     c000b81c <VCache::read(unsigned long long, int, void*)+0x176>
c000b7f8:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7fd:	52                   	push   edx
c000b7fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b801:	05 ff 0f 00 00       	add    eax,0xfff
c000b806:	99                   	cdq    
c000b807:	f7 f9                	idiv   ecx
c000b809:	50                   	push   eax
c000b80a:	55                   	push   ebp
c000b80b:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b811:	e8 a2 8b 00 00       	call   c00143b8 <VAS::unlockPages(unsigned long, int)>
c000b816:	83 c4 10             	add    esp,0x10
c000b819:	8d 76 00             	lea    esi,[esi+0x0]
c000b81c:	e8 0f b6 00 00       	call   c0016e30 <KeRestorePreemption()>
c000b821:	31 ff                	xor    edi,edi
c000b823:	eb 5b                	jmp    c000b880 <VCache::read(unsigned long long, int, void*)+0x1da>
c000b825:	8d 76 00             	lea    esi,[esi+0x0]
c000b828:	83 ec 0c             	sub    esp,0xc
c000b82b:	53                   	push   ebx
c000b82c:	e8 cb fb ff ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c000b831:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b834:	8b 10                	mov    edx,DWORD PTR [eax]
c000b836:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b839:	56                   	push   esi
c000b83a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b83e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b842:	50                   	push   eax
c000b843:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b846:	83 c4 20             	add    esp,0x20
c000b849:	89 c7                	mov    edi,eax
c000b84b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b850:	74 26                	je     c000b878 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b852:	50                   	push   eax
c000b853:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b857:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b85d:	8d 76 00             	lea    esi,[esi+0x0]
c000b860:	b9 00 10 00 00       	mov    ecx,0x1000
c000b865:	99                   	cdq    
c000b866:	f7 f9                	idiv   ecx
c000b868:	50                   	push   eax
c000b869:	55                   	push   ebp
c000b86a:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b870:	e8 43 8b 00 00       	call   c00143b8 <VAS::unlockPages(unsigned long, int)>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	e8 b3 b5 00 00       	call   c0016e30 <KeRestorePreemption()>
c000b87d:	8d 76 00             	lea    esi,[esi+0x0]
c000b880:	83 c4 2c             	add    esp,0x2c
c000b883:	89 f8                	mov    eax,edi
c000b885:	5b                   	pop    ebx
c000b886:	5e                   	pop    esi
c000b887:	5f                   	pop    edi
c000b888:	5d                   	pop    ebp
c000b889:	c3                   	ret    

c000b88a <Video::putrect(int, int, int, int, unsigned int)>:
c000b88a:	55                   	push   ebp
c000b88b:	57                   	push   edi
c000b88c:	56                   	push   esi
c000b88d:	53                   	push   ebx
c000b88e:	83 ec 1c             	sub    esp,0x1c
c000b891:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b895:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b899:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b89d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b8a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b8a9:	01 df                	add    edi,ebx
c000b8ab:	39 fb                	cmp    ebx,edi
c000b8ad:	7d 1f                	jge    c000b8ce <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b8af:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b8b3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b8b7:	7d 12                	jge    c000b8cb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b8b9:	8b 16                	mov    edx,DWORD PTR [esi]
c000b8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b8bf:	53                   	push   ebx
c000b8c0:	55                   	push   ebp
c000b8c1:	45                   	inc    ebp
c000b8c2:	56                   	push   esi
c000b8c3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8c6:	83 c4 10             	add    esp,0x10
c000b8c9:	eb e8                	jmp    c000b8b3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b8cb:	43                   	inc    ebx
c000b8cc:	eb dd                	jmp    c000b8ab <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b8ce:	83 c4 1c             	add    esp,0x1c
c000b8d1:	5b                   	pop    ebx
c000b8d2:	5e                   	pop    esi
c000b8d3:	5f                   	pop    edi
c000b8d4:	5d                   	pop    ebp
c000b8d5:	c3                   	ret    

c000b8d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b8d6:	55                   	push   ebp
c000b8d7:	57                   	push   edi
c000b8d8:	31 ff                	xor    edi,edi
c000b8da:	56                   	push   esi
c000b8db:	53                   	push   ebx
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b8e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b8e7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8ee:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8f7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8ff:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b902:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b906:	01 f9                	add    ecx,edi
c000b908:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b90c:	7d 2f                	jge    c000b93d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b90e:	31 f6                	xor    esi,esi
c000b910:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b914:	01 f2                	add    edx,esi
c000b916:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b91a:	7d 1a                	jge    c000b936 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b91c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b91f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b922:	46                   	inc    esi
c000b923:	51                   	push   ecx
c000b924:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b928:	52                   	push   edx
c000b929:	55                   	push   ebp
c000b92a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b92d:	83 c4 10             	add    esp,0x10
c000b930:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b934:	eb da                	jmp    c000b910 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b936:	47                   	inc    edi
c000b937:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b93b:	eb c5                	jmp    c000b902 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b93d:	83 c4 1c             	add    esp,0x1c
c000b940:	5b                   	pop    ebx
c000b941:	5e                   	pop    esi
c000b942:	5f                   	pop    edi
c000b943:	5d                   	pop    ebp
c000b944:	c3                   	ret    
c000b945:	90                   	nop

c000b946 <Video::blit(unsigned int*, int, int, int, int)>:
c000b946:	55                   	push   ebp
c000b947:	57                   	push   edi
c000b948:	56                   	push   esi
c000b949:	53                   	push   ebx
c000b94a:	83 ec 1c             	sub    esp,0x1c
c000b94d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b951:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b955:	85 c0                	test   eax,eax
c000b957:	79 02                	jns    c000b95b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b959:	31 c0                	xor    eax,eax
c000b95b:	c1 e0 02             	shl    eax,0x2
c000b95e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b962:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b966:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b96a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b96e:	39 d8                	cmp    eax,ebx
c000b970:	7e 49                	jle    c000b9bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b972:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b978:	7c 41                	jl     c000b9bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b97a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b97e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b982:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b986:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b98a:	39 f9                	cmp    ecx,edi
c000b98c:	7e 22                	jle    c000b9b0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b98e:	83 c5 04             	add    ebp,0x4
c000b991:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b997:	7c 14                	jl     c000b9ad <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b999:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b99b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b99e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b9a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b9a6:	56                   	push   esi
c000b9a7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b9aa:	83 c4 10             	add    esp,0x10
c000b9ad:	47                   	inc    edi
c000b9ae:	eb d2                	jmp    c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b9b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9b4:	43                   	inc    ebx
c000b9b5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b9b9:	eb ab                	jmp    c000b966 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b9bb:	83 c4 1c             	add    esp,0x1c
c000b9be:	5b                   	pop    ebx
c000b9bf:	5e                   	pop    esi
c000b9c0:	5f                   	pop    edi
c000b9c1:	5d                   	pop    ebp
c000b9c2:	c3                   	ret    
c000b9c3:	90                   	nop

c000b9c4 <Video::clearScreen(unsigned int)>:
c000b9c4:	57                   	push   edi
c000b9c5:	56                   	push   esi
c000b9c6:	53                   	push   ebx
c000b9c7:	31 db                	xor    ebx,ebx
c000b9c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9cd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b9d3:	7e 1f                	jle    c000b9f4 <Video::clearScreen(unsigned int)+0x30>
c000b9d5:	31 ff                	xor    edi,edi
c000b9d7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b9dd:	7e 12                	jle    c000b9f1 <Video::clearScreen(unsigned int)+0x2d>
c000b9df:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9e5:	53                   	push   ebx
c000b9e6:	57                   	push   edi
c000b9e7:	47                   	inc    edi
c000b9e8:	56                   	push   esi
c000b9e9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	eb e6                	jmp    c000b9d7 <Video::clearScreen(unsigned int)+0x13>
c000b9f1:	43                   	inc    ebx
c000b9f2:	eb d9                	jmp    c000b9cd <Video::clearScreen(unsigned int)+0x9>
c000b9f4:	5b                   	pop    ebx
c000b9f5:	5e                   	pop    esi
c000b9f6:	5f                   	pop    edi
c000b9f7:	c3                   	ret    

c000b9f8 <Video::putpixel(int, int, unsigned int)>:
c000b9f8:	c7 44 24 04 28 3c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023c28
c000ba00:	e9 e1 45 00 00       	jmp    c000ffe6 <KePanic(char const*)>
c000ba05:	90                   	nop

c000ba06 <Video::readPixelApprox(int, int)>:
c000ba06:	83 ec 18             	sub    esp,0x18
c000ba09:	68 49 3c 02 c0       	push   0xc0023c49
c000ba0e:	e8 d3 45 00 00       	call   c000ffe6 <KePanic(char const*)>
c000ba13:	31 c0                	xor    eax,eax
c000ba15:	83 c4 1c             	add    esp,0x1c
c000ba18:	c3                   	ret    
c000ba19:	90                   	nop

c000ba1a <Video::Video(char const*)>:
c000ba1a:	83 ec 0c             	sub    esp,0xc
c000ba1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba21:	83 ec 08             	sub    esp,0x8
c000ba24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba28:	50                   	push   eax
c000ba29:	e8 88 e1 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	ba ec 3c 02 c0       	mov    edx,0xc0023cec
c000ba36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba3a:	89 10                	mov    DWORD PTR [eax],edx
c000ba3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba40:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba4a:	90                   	nop
c000ba4b:	83 c4 0c             	add    esp,0xc
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <Video::~Video()>:
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	ba ec 3c 02 c0       	mov    edx,0xc0023cec
c000ba58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba5c:	89 10                	mov    DWORD PTR [eax],edx
c000ba5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba62:	83 ec 0c             	sub    esp,0xc
c000ba65:	50                   	push   eax
c000ba66:	e8 eb de ff ff       	call   c0009956 <Device::~Device()>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	90                   	nop
c000ba6f:	83 c4 0c             	add    esp,0xc
c000ba72:	c3                   	ret    
c000ba73:	90                   	nop

c000ba74 <Video::~Video()>:
c000ba74:	83 ec 0c             	sub    esp,0xc
c000ba77:	83 ec 0c             	sub    esp,0xc
c000ba7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba7e:	e8 cd ff ff ff       	call   c000ba50 <Video::~Video()>
c000ba83:	83 c4 10             	add    esp,0x10
c000ba86:	83 ec 08             	sub    esp,0x8
c000ba89:	68 64 01 00 00       	push   0x164
c000ba8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba92:	e8 52 19 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000ba97:	83 c4 10             	add    esp,0x10
c000ba9a:	83 c4 0c             	add    esp,0xc
c000ba9d:	c3                   	ret    

c000ba9e <Video::isMonochrome()>:
c000ba9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baa2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000baa8:	c3                   	ret    
c000baa9:	90                   	nop

c000baaa <Video::getWidth()>:
c000baaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bab4:	c3                   	ret    
c000bab5:	90                   	nop

c000bab6 <Video::getHeight()>:
c000bab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bac0:	c3                   	ret    
c000bac1:	90                   	nop

c000bac2 <Video::drawCursor(int, int, unsigned int*, int)>:
c000bac2:	55                   	push   ebp
c000bac3:	57                   	push   edi
c000bac4:	56                   	push   esi
c000bac5:	53                   	push   ebx
c000bac6:	83 ec 2c             	sub    esp,0x2c
c000bac9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bacd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bad1:	83 f8 01             	cmp    eax,0x1
c000bad4:	19 c9                	sbb    ecx,ecx
c000bad6:	31 db                	xor    ebx,ebx
c000bad8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000badc:	89 cd                	mov    ebp,ecx
c000bade:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000bae6:	f7 d5                	not    ebp
c000bae8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000baee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000baf2:	01 d8                	add    eax,ebx
c000baf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baf8:	56                   	push   esi
c000baf9:	e8 b8 ff ff ff       	call   c000bab6 <Video::getHeight()>
c000bafe:	59                   	pop    ecx
c000baff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000bb03:	7e 70                	jle    c000bb75 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000bb05:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb09:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bb0d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bb10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb18:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bb1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb23:	89 f8                	mov    eax,edi
c000bb25:	83 c0 20             	add    eax,0x20
c000bb28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb2c:	56                   	push   esi
c000bb2d:	e8 78 ff ff ff       	call   c000baaa <Video::getWidth()>
c000bb32:	5a                   	pop    edx
c000bb33:	39 c7                	cmp    edi,eax
c000bb35:	7d 34                	jge    c000bb6b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bb37:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb3c:	74 05                	je     c000bb43 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb3e:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb40:	55                   	push   ebp
c000bb41:	eb 0d                	jmp    c000bb50 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb43:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb48:	74 12                	je     c000bb5c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb4a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb54:	57                   	push   edi
c000bb55:	56                   	push   esi
c000bb56:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb59:	83 c4 10             	add    esp,0x10
c000bb5c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb60:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb64:	47                   	inc    edi
c000bb65:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bb69:	75 c1                	jne    c000bb2c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb6b:	43                   	inc    ebx
c000bb6c:	83 fb 20             	cmp    ebx,0x20
c000bb6f:	0f 85 79 ff ff ff    	jne    c000baee <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb75:	83 c4 2c             	add    esp,0x2c
c000bb78:	5b                   	pop    ebx
c000bb79:	5e                   	pop    esi
c000bb7a:	5f                   	pop    edi
c000bb7b:	5d                   	pop    ebp
c000bb7c:	c3                   	ret    
c000bb7d:	90                   	nop

c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb7e:	55                   	push   ebp
c000bb7f:	57                   	push   edi
c000bb80:	56                   	push   esi
c000bb81:	53                   	push   ebx
c000bb82:	83 ec 48             	sub    esp,0x48
c000bb85:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb89:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb8d:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb91:	c1 e0 08             	shl    eax,0x8
c000bb94:	01 d0                	add    eax,edx
c000bb96:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb9e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bba2:	c1 e0 08             	shl    eax,0x8
c000bba5:	01 d0                	add    eax,edx
c000bba7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bbaf:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bbb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bbb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbbc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bbc3:	50                   	push   eax
c000bbc4:	e8 c6 3f 00 00       	call   c000fb8f <malloc>
c000bbc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbcd:	83 c4 10             	add    esp,0x10
c000bbd0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbd5:	75 10                	jne    c000bbe7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bbd7:	83 ec 0c             	sub    esp,0xc
c000bbda:	68 74 3c 02 c0       	push   0xc0023c74
c000bbdf:	e8 02 44 00 00       	call   c000ffe6 <KePanic(char const*)>
c000bbe4:	83 c4 10             	add    esp,0x10
c000bbe7:	51                   	push   ecx
c000bbe8:	51                   	push   ecx
c000bbe9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbed:	50                   	push   eax
c000bbee:	68 84 3c 02 c0       	push   0xc0023c84
c000bbf3:	e8 84 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bbf8:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbfb:	83 e0 20             	and    eax,0x20
c000bbfe:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bc02:	85 c0                	test   eax,eax
c000bc04:	5e                   	pop    esi
c000bc05:	0f 94 c0             	sete   al
c000bc08:	5f                   	pop    edi
c000bc09:	0f b6 c0             	movzx  eax,al
c000bc0c:	be 12 00 00 00       	mov    esi,0x12
c000bc11:	50                   	push   eax
c000bc12:	68 8e 3c 02 c0       	push   0xc0023c8e
c000bc17:	e8 60 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc1c:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bc20:	83 c4 10             	add    esp,0x10
c000bc23:	89 d0                	mov    eax,edx
c000bc25:	85 d2                	test   edx,edx
c000bc27:	74 11                	je     c000bc3a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bc29:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bc2d:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bc31:	c1 fe 03             	sar    esi,0x3
c000bc34:	0f af f1             	imul   esi,ecx
c000bc37:	83 c6 12             	add    esi,0x12
c000bc3a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc3f:	74 07                	je     c000bc48 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bc41:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bc46:	75 12                	jne    c000bc5a <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bc48:	83 ec 0c             	sub    esp,0xc
c000bc4b:	68 9c 3c 02 c0       	push   0xc0023c9c
c000bc50:	e8 27 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc55:	e9 a0 02 00 00       	jmp    c000befa <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bc5a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc5e:	83 f9 02             	cmp    ecx,0x2
c000bc61:	74 0e                	je     c000bc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bc63:	83 f9 0a             	cmp    ecx,0xa
c000bc66:	0f 84 c8 00 00 00    	je     c000bd34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bc6c:	e9 72 02 00 00       	jmp    c000bee3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bc71:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc76:	75 0e                	jne    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc78:	84 c0                	test   al,al
c000bc7a:	75 0a                	jne    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc7c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc7f:	83 e8 18             	sub    eax,0x18
c000bc82:	a8 f7                	test   al,0xf7
c000bc84:	74 0d                	je     c000bc93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bc86:	83 ec 0c             	sub    esp,0xc
c000bc89:	68 b1 3c 02 c0       	push   0xc0023cb1
c000bc8e:	e9 58 02 00 00       	jmp    c000beeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bc93:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc98:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bca0:	31 c0                	xor    eax,eax
c000bca2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bca6:	89 c7                	mov    edi,eax
c000bca8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bcb0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bcb5:	75 15                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcb7:	99                   	cdq    
c000bcb8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bcbc:	85 d2                	test   edx,edx
c000bcbe:	75 0c                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcc0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bcc4:	29 c7                	sub    edi,eax
c000bcc6:	4f                   	dec    edi
c000bcc7:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bccc:	31 d2                	xor    edx,edx
c000bcce:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bcd2:	75 08                	jne    c000bcdc <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bcd4:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bcd9:	c1 e2 18             	shl    edx,0x18
c000bcdc:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bce1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bce5:	c1 e1 10             	shl    ecx,0x10
c000bce8:	8d 47 01             	lea    eax,[edi+0x1]
c000bceb:	89 cd                	mov    ebp,ecx
c000bced:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bcf2:	c1 e1 08             	shl    ecx,0x8
c000bcf5:	09 e9                	or     ecx,ebp
c000bcf7:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bcfb:	09 e9                	or     ecx,ebp
c000bcfd:	09 d1                	or     ecx,edx
c000bcff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bd03:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bd06:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bd0a:	c1 fa 03             	sar    edx,0x3
c000bd0d:	01 d6                	add    esi,edx
c000bd0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd13:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bd17:	7e 04                	jle    c000bd1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bd19:	89 c7                	mov    edi,eax
c000bd1b:	eb 93                	jmp    c000bcb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bd1d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd25:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bd29:	0f 8f 77 ff ff ff    	jg     c000bca6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bd2f:	e9 d3 01 00 00       	jmp    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd34:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd39:	75 0e                	jne    c000bd49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd3b:	85 d2                	test   edx,edx
c000bd3d:	75 0a                	jne    c000bd49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd3f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd42:	83 e8 18             	sub    eax,0x18
c000bd45:	a8 f7                	test   al,0xf7
c000bd47:	74 0d                	je     c000bd56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bd49:	83 ec 0c             	sub    esp,0xc
c000bd4c:	68 bf 3c 02 c0       	push   0xc0023cbf
c000bd51:	e9 95 01 00 00       	jmp    c000beeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bd56:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd5e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bd66:	31 c9                	xor    ecx,ecx
c000bd68:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd6c:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bd70:	0f 8e 91 01 00 00    	jle    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd76:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bd7a:	0f 8d 87 01 00 00    	jge    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd80:	8d 46 01             	lea    eax,[esi+0x1]
c000bd83:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd8b:	83 fd 7f             	cmp    ebp,0x7f
c000bd8e:	89 e8                	mov    eax,ebp
c000bd90:	0f 8e 9d 00 00 00    	jle    c000be33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd96:	83 e0 7f             	and    eax,0x7f
c000bd99:	31 d2                	xor    edx,edx
c000bd9b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd9f:	40                   	inc    eax
c000bda0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bda4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bda8:	75 0a                	jne    c000bdb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bdaa:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bdaf:	89 ea                	mov    edx,ebp
c000bdb1:	c1 e2 18             	shl    edx,0x18
c000bdb4:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bdb9:	c1 e0 10             	shl    eax,0x10
c000bdbc:	89 c7                	mov    edi,eax
c000bdbe:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bdc3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bdc7:	c1 e0 08             	shl    eax,0x8
c000bdca:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bdce:	09 f8                	or     eax,edi
c000bdd0:	31 f6                	xor    esi,esi
c000bdd2:	09 c5                	or     ebp,eax
c000bdd4:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bdd9:	09 d5                	or     ebp,edx
c000bddb:	85 ff                	test   edi,edi
c000bddd:	75 1d                	jne    c000bdfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bddf:	89 c8                	mov    eax,ecx
c000bde1:	99                   	cdq    
c000bde2:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bde6:	85 d2                	test   edx,edx
c000bde8:	75 12                	jne    c000bdfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdee:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bdf2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bdf6:	49                   	dec    ecx
c000bdf7:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bdfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be00:	8d 51 01             	lea    edx,[ecx+0x1]
c000be03:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000be06:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000be0a:	8d 46 01             	lea    eax,[esi+0x1]
c000be0d:	7e 06                	jle    c000be15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000be0f:	89 c6                	mov    esi,eax
c000be11:	89 d1                	mov    ecx,edx
c000be13:	eb c6                	jmp    c000bddb <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000be15:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000be19:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be1d:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000be21:	c1 f8 03             	sar    eax,0x3
c000be24:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be28:	89 d1                	mov    ecx,edx
c000be2a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000be2e:	e9 35 ff ff ff       	jmp    c000bd68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000be33:	8d 45 01             	lea    eax,[ebp+0x1]
c000be36:	31 f6                	xor    esi,esi
c000be38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000be41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be45:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be4a:	75 1d                	jne    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be4c:	89 c8                	mov    eax,ecx
c000be4e:	99                   	cdq    
c000be4f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000be53:	85 d2                	test   edx,edx
c000be55:	75 12                	jne    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be5b:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000be5f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000be63:	49                   	dec    ecx
c000be64:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000be69:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be71:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be75:	75 10                	jne    c000be87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000be77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be7b:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000be80:	c1 e7 18             	shl    edi,0x18
c000be83:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be8b:	8d 51 01             	lea    edx,[ecx+0x1]
c000be8e:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000be93:	c1 e0 10             	shl    eax,0x10
c000be96:	89 c7                	mov    edi,eax
c000be98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be9c:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000bea1:	c1 e0 08             	shl    eax,0x8
c000bea4:	09 f8                	or     eax,edi
c000bea6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000beaa:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000beae:	09 f8                	or     eax,edi
c000beb0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000beb4:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000beb8:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000bebb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bebf:	c1 f8 03             	sar    eax,0x3
c000bec2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000bec6:	8d 46 01             	lea    eax,[esi+0x1]
c000bec9:	39 f5                	cmp    ebp,esi
c000becb:	7e 09                	jle    c000bed6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000becd:	89 c6                	mov    esi,eax
c000becf:	89 d1                	mov    ecx,edx
c000bed1:	e9 6f ff ff ff       	jmp    c000be45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000bed6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000beda:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bede:	e9 45 ff ff ff       	jmp    c000be28 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000bee3:	52                   	push   edx
c000bee4:	52                   	push   edx
c000bee5:	51                   	push   ecx
c000bee6:	68 ce 3c 02 c0       	push   0xc0023cce
c000beeb:	e8 8c b0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bef0:	58                   	pop    eax
c000bef1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bef5:	e8 a5 3c 00 00       	call   c000fb9f <free>
c000befa:	83 c4 10             	add    esp,0x10
c000befd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bf05:	eb 14                	jmp    c000bf1b <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000bf07:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf0b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bf0f:	89 18                	mov    DWORD PTR [eax],ebx
c000bf11:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000bf15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf19:	89 18                	mov    DWORD PTR [eax],ebx
c000bf1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf1f:	83 c4 3c             	add    esp,0x3c
c000bf22:	5b                   	pop    ebx
c000bf23:	5e                   	pop    esi
c000bf24:	5f                   	pop    edi
c000bf25:	5d                   	pop    ebp
c000bf26:	c3                   	ret    
c000bf27:	90                   	nop

c000bf28 <Video::putTGA(int, int, unsigned char*, int)>:
c000bf28:	55                   	push   ebp
c000bf29:	57                   	push   edi
c000bf2a:	56                   	push   esi
c000bf2b:	53                   	push   ebx
c000bf2c:	83 ec 28             	sub    esp,0x28
c000bf2f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000bf33:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf37:	50                   	push   eax
c000bf38:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf3c:	50                   	push   eax
c000bf3d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf41:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf45:	57                   	push   edi
c000bf46:	e8 33 fc ff ff       	call   c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf4b:	83 c4 20             	add    esp,0x20
c000bf4e:	85 c0                	test   eax,eax
c000bf50:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf54:	74 3a                	je     c000bf90 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf56:	89 c6                	mov    esi,eax
c000bf58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf5c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf60:	39 d8                	cmp    eax,ebx
c000bf62:	7e 2c                	jle    c000bf90 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf6c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf70:	39 e8                	cmp    eax,ebp
c000bf72:	7e 19                	jle    c000bf8d <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bf74:	83 c6 04             	add    esi,0x4
c000bf77:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf7a:	85 c0                	test   eax,eax
c000bf7c:	79 0c                	jns    c000bf8a <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000bf7e:	8b 17                	mov    edx,DWORD PTR [edi]
c000bf80:	50                   	push   eax
c000bf81:	53                   	push   ebx
c000bf82:	55                   	push   ebp
c000bf83:	57                   	push   edi
c000bf84:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	45                   	inc    ebp
c000bf8b:	eb db                	jmp    c000bf68 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf8d:	43                   	inc    ebx
c000bf8e:	eb c8                	jmp    c000bf58 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf90:	83 c4 1c             	add    esp,0x1c
c000bf93:	5b                   	pop    ebx
c000bf94:	5e                   	pop    esi
c000bf95:	5f                   	pop    edi
c000bf96:	5d                   	pop    ebp
c000bf97:	c3                   	ret    

c000bf98 <ACPI::close(int, int, void*)>:
c000bf98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf9d:	c3                   	ret    
c000bf9e:	66 90                	xchg   ax,ax

c000bfa0 <loadACPITables(unsigned char*)>:
c000bfa0:	57                   	push   edi
c000bfa1:	56                   	push   esi
c000bfa2:	53                   	push   ebx
c000bfa3:	83 ec 60             	sub    esp,0x60
c000bfa6:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bfab:	0f 84 43 02 00 00    	je     c000c1f4 <loadACPITables(unsigned char*)+0x254>
c000bfb1:	a0 80 cd 02 c0       	mov    al,ds:0xc002cd80
c000bfb6:	0f b6 c0             	movzx  eax,al
c000bfb9:	85 c0                	test   eax,eax
c000bfbb:	74 7b                	je     c000c038 <loadACPITables(unsigned char*)+0x98>
c000bfbd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfc1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bfc5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bfc9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfcc:	83 e8 24             	sub    eax,0x24
c000bfcf:	c1 e8 03             	shr    eax,0x3
c000bfd2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfd6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfde:	66 90                	xchg   ax,ax
c000bfe0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfe4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfe8:	0f 8d ba 00 00 00    	jge    c000c0a8 <loadACPITables(unsigned char*)+0x108>
c000bfee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bff2:	83 c0 24             	add    eax,0x24
c000bff5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bffd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c001:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c005:	c1 e0 03             	shl    eax,0x3
c000c008:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000c00c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c010:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c013:	8b 00                	mov    eax,DWORD PTR [eax]
c000c015:	89 c1                	mov    ecx,eax
c000c017:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c01c:	8d 50 01             	lea    edx,[eax+0x1]
c000c01f:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c025:	89 ca                	mov    edx,ecx
c000c027:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c02e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c033:	eb ab                	jmp    c000bfe0 <loadACPITables(unsigned char*)+0x40>
c000c035:	8d 76 00             	lea    esi,[esi+0x0]
c000c038:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c03c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c040:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c047:	83 e8 24             	sub    eax,0x24
c000c04a:	c1 e8 02             	shr    eax,0x2
c000c04d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c051:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c059:	8d 76 00             	lea    esi,[esi+0x0]
c000c05c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c060:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c064:	7d 42                	jge    c000c0a8 <loadACPITables(unsigned char*)+0x108>
c000c066:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c06a:	83 c0 24             	add    eax,0x24
c000c06d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c071:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c075:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c079:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c07d:	c1 e0 02             	shl    eax,0x2
c000c080:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c084:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c088:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c08a:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c08f:	8d 50 01             	lea    edx,[eax+0x1]
c000c092:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c098:	89 ca                	mov    edx,ecx
c000c09a:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c0a1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c0a6:	eb b4                	jmp    c000c05c <loadACPITables(unsigned char*)+0xbc>
c000c0a8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c0b0:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c0b5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c0b9:	0f 8d 39 01 00 00    	jge    c000c1f8 <loadACPITables(unsigned char*)+0x258>
c000c0bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0c3:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c0ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0da:	25 ff 0f 00 00       	and    eax,0xfff
c000c0df:	89 c6                	mov    esi,eax
c000c0e1:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c0e7:	83 ec 0c             	sub    esp,0xc
c000c0ea:	6a 01                	push   0x1
c000c0ec:	e8 36 75 00 00       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c000c0f1:	83 c4 10             	add    esp,0x10
c000c0f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0fe:	83 ec 0c             	sub    esp,0xc
c000c101:	6a 01                	push   0x1
c000c103:	6a 01                	push   0x1
c000c105:	50                   	push   eax
c000c106:	52                   	push   edx
c000c107:	53                   	push   ebx
c000c108:	e8 e7 7d 00 00       	call   c0013ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c10d:	83 c4 20             	add    esp,0x20
c000c110:	09 f0                	or     eax,esi
c000c112:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c116:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c11a:	c1 e0 03             	shl    eax,0x3
c000c11d:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c122:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c12a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c12e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c136:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c13a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c13e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c142:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c146:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c14a:	89 c6                	mov    esi,eax
c000c14c:	89 d7                	mov    edi,edx
c000c14e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c150:	89 c8                	mov    eax,ecx
c000c152:	89 fa                	mov    edx,edi
c000c154:	89 f3                	mov    ebx,esi
c000c156:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c15a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c15e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c162:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c166:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c169:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c16d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c171:	05 00 10 00 00       	add    eax,0x1000
c000c176:	c1 e8 0c             	shr    eax,0xc
c000c179:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c17d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c181:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c185:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c189:	25 ff 0f 00 00       	and    eax,0xfff
c000c18e:	89 c6                	mov    esi,eax
c000c190:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c196:	83 ec 0c             	sub    esp,0xc
c000c199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c19d:	e8 85 74 00 00       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c000c1a2:	83 c4 10             	add    esp,0x10
c000c1a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c1a9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c1af:	83 ec 0c             	sub    esp,0xc
c000c1b2:	6a 01                	push   0x1
c000c1b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b8:	50                   	push   eax
c000c1b9:	52                   	push   edx
c000c1ba:	53                   	push   ebx
c000c1bb:	e8 34 7d 00 00       	call   c0013ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1c0:	83 c4 20             	add    esp,0x20
c000c1c3:	09 f0                	or     eax,esi
c000c1c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1cd:	83 ec 0c             	sub    esp,0xc
c000c1d0:	50                   	push   eax
c000c1d1:	e8 59 77 00 00       	call   c001392f <Virt::freeKernelVirtualPages(unsigned long)>
c000c1d6:	83 c4 10             	add    esp,0x10
c000c1d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1e1:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c1e8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1ed:	e9 be fe ff ff       	jmp    c000c0b0 <loadACPITables(unsigned char*)+0x110>
c000c1f2:	66 90                	xchg   ax,ax
c000c1f4:	90                   	nop
c000c1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1f8:	83 c4 60             	add    esp,0x60
c000c1fb:	5b                   	pop    ebx
c000c1fc:	5e                   	pop    esi
c000c1fd:	5f                   	pop    edi
c000c1fe:	c3                   	ret    
c000c1ff:	90                   	nop

c000c200 <findRSDT(unsigned char*)>:
c000c200:	57                   	push   edi
c000c201:	56                   	push   esi
c000c202:	53                   	push   ebx
c000c203:	83 ec 50             	sub    esp,0x50
c000c206:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c20b:	85 c0                	test   eax,eax
c000c20d:	75 0d                	jne    c000c21c <findRSDT(unsigned char*)+0x1c>
c000c20f:	b8 00 00 00 00       	mov    eax,0x0
c000c214:	e9 2b 01 00 00       	jmp    c000c344 <findRSDT(unsigned char*)+0x144>
c000c219:	8d 76 00             	lea    esi,[esi+0x0]
c000c21c:	89 e0                	mov    eax,esp
c000c21e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c222:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c226:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c22a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c232:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c236:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c23a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c23e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c242:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c246:	89 c6                	mov    esi,eax
c000c248:	89 d7                	mov    edi,edx
c000c24a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c24c:	89 c8                	mov    eax,ecx
c000c24e:	89 fa                	mov    edx,edi
c000c250:	89 f3                	mov    ebx,esi
c000c252:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c256:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c25a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c25e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c262:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c266:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c26e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c276:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c282:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c286:	25 ff 0f 00 00       	and    eax,0xfff
c000c28b:	89 c6                	mov    esi,eax
c000c28d:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c293:	83 ec 0c             	sub    esp,0xc
c000c296:	6a 02                	push   0x2
c000c298:	e8 8a 73 00 00       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c000c29d:	83 c4 10             	add    esp,0x10
c000c2a0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c2a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2aa:	83 ec 0c             	sub    esp,0xc
c000c2ad:	6a 01                	push   0x1
c000c2af:	6a 02                	push   0x2
c000c2b1:	50                   	push   eax
c000c2b2:	52                   	push   edx
c000c2b3:	53                   	push   ebx
c000c2b4:	e8 3b 7c 00 00       	call   c0013ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2b9:	83 c4 20             	add    esp,0x20
c000c2bc:	09 f0                	or     eax,esi
c000c2be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c2c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c6:	25 ff 0f 00 00       	and    eax,0xfff
c000c2cb:	89 c6                	mov    esi,eax
c000c2cd:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c2d3:	83 ec 0c             	sub    esp,0xc
c000c2d6:	6a 02                	push   0x2
c000c2d8:	e8 4a 73 00 00       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2e4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2ea:	83 ec 0c             	sub    esp,0xc
c000c2ed:	6a 01                	push   0x1
c000c2ef:	6a 02                	push   0x2
c000c2f1:	50                   	push   eax
c000c2f2:	52                   	push   edx
c000c2f3:	53                   	push   ebx
c000c2f4:	e8 fb 7b 00 00       	call   c0013ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2f9:	83 c4 20             	add    esp,0x20
c000c2fc:	09 f0                	or     eax,esi
c000c2fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c302:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c307:	85 c0                	test   eax,eax
c000c309:	75 11                	jne    c000c31c <findRSDT(unsigned char*)+0x11c>
c000c30b:	c6 05 80 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd80,0x0
c000c312:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c316:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c31a:	eb 24                	jmp    c000c340 <findRSDT(unsigned char*)+0x140>
c000c31c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c321:	83 f8 02             	cmp    eax,0x2
c000c324:	75 12                	jne    c000c338 <findRSDT(unsigned char*)+0x138>
c000c326:	c6 05 80 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd80,0x1
c000c32d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c331:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c335:	eb 09                	jmp    c000c340 <findRSDT(unsigned char*)+0x140>
c000c337:	90                   	nop
c000c338:	b8 00 00 00 00       	mov    eax,0x0
c000c33d:	eb 05                	jmp    c000c344 <findRSDT(unsigned char*)+0x144>
c000c33f:	90                   	nop
c000c340:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c344:	83 c4 50             	add    esp,0x50
c000c347:	5b                   	pop    ebx
c000c348:	5e                   	pop    esi
c000c349:	5f                   	pop    edi
c000c34a:	c3                   	ret    
c000c34b:	90                   	nop

c000c34c <findDataTable(unsigned char*, char*)>:
c000c34c:	83 ec 1c             	sub    esp,0x1c
c000c34f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c354:	75 0a                	jne    c000c360 <findDataTable(unsigned char*, char*)+0x14>
c000c356:	b8 00 00 00 00       	mov    eax,0x0
c000c35b:	eb 5f                	jmp    c000c3bc <findDataTable(unsigned char*, char*)+0x70>
c000c35d:	8d 76 00             	lea    esi,[esi+0x0]
c000c360:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c368:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c36d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c371:	7d 41                	jge    c000c3b4 <findDataTable(unsigned char*, char*)+0x68>
c000c373:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c377:	c1 e0 03             	shl    eax,0x3
c000c37a:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c37f:	83 ec 04             	sub    esp,0x4
c000c382:	6a 04                	push   0x4
c000c384:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c388:	50                   	push   eax
c000c389:	e8 f2 3f ff ff       	call   c0000380 <memcmp>
c000c38e:	83 c4 10             	add    esp,0x10
c000c391:	85 c0                	test   eax,eax
c000c393:	0f 94 c0             	sete   al
c000c396:	0f b6 c0             	movzx  eax,al
c000c399:	85 c0                	test   eax,eax
c000c39b:	74 0f                	je     c000c3ac <findDataTable(unsigned char*, char*)+0x60>
c000c39d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c3a1:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c3a8:	eb 12                	jmp    c000c3bc <findDataTable(unsigned char*, char*)+0x70>
c000c3aa:	66 90                	xchg   ax,ax
c000c3ac:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c3b1:	eb b5                	jmp    c000c368 <findDataTable(unsigned char*, char*)+0x1c>
c000c3b3:	90                   	nop
c000c3b4:	b8 00 00 00 00       	mov    eax,0x0
c000c3b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3bc:	83 c4 1c             	add    esp,0x1c
c000c3bf:	c3                   	ret    

c000c3c0 <scanMADT()>:
c000c3c0:	53                   	push   ebx
c000c3c1:	83 ec 38             	sub    esp,0x38
c000c3c4:	c7 05 88 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd88,0x0
c000c3ce:	c7 05 84 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd84,0x0
c000c3d8:	83 ec 0c             	sub    esp,0xc
c000c3db:	68 30 3d 02 c0       	push   0xc0023d30
c000c3e0:	e8 97 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c3e5:	83 c4 10             	add    esp,0x10
c000c3e8:	e8 75 db 00 00       	call   c0019f62 <HalFindRSDP()>
c000c3ed:	a3 88 cd 02 c0       	mov    ds:0xc002cd88,eax
c000c3f2:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3f7:	85 c0                	test   eax,eax
c000c3f9:	0f 84 59 04 00 00    	je     c000c858 <scanMADT()+0x498>
c000c3ff:	83 ec 0c             	sub    esp,0xc
c000c402:	68 3e 3d 02 c0       	push   0xc0023d3e
c000c407:	e8 70 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c40c:	83 c4 10             	add    esp,0x10
c000c40f:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c414:	83 ec 0c             	sub    esp,0xc
c000c417:	50                   	push   eax
c000c418:	e8 e3 fd ff ff       	call   c000c200 <findRSDT(unsigned char*)>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	a3 84 cd 02 c0       	mov    ds:0xc002cd84,eax
c000c425:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c42a:	85 c0                	test   eax,eax
c000c42c:	0f 84 2a 04 00 00    	je     c000c85c <scanMADT()+0x49c>
c000c432:	8b 15 84 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd84
c000c438:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c43d:	83 ec 04             	sub    esp,0x4
c000c440:	52                   	push   edx
c000c441:	50                   	push   eax
c000c442:	68 e8 3e 02 c0       	push   0xc0023ee8
c000c447:	e8 30 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c454:	83 ec 0c             	sub    esp,0xc
c000c457:	50                   	push   eax
c000c458:	e8 43 fb ff ff       	call   c000bfa0 <loadACPITables(unsigned char*)>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c465:	83 ec 08             	sub    esp,0x8
c000c468:	68 4d 3d 02 c0       	push   0xc0023d4d
c000c46d:	50                   	push   eax
c000c46e:	e8 d9 fe ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000c473:	83 c4 10             	add    esp,0x10
c000c476:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c47a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c47f:	0f 84 db 03 00 00    	je     c000c860 <scanMADT()+0x4a0>
c000c485:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c48d:	8d 76 00             	lea    esi,[esi+0x0]
c000c490:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c494:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c497:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c49b:	0f 87 c7 03 00 00    	ja     c000c868 <scanMADT()+0x4a8>
c000c4a1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c4a9:	0f 87 b9 03 00 00    	ja     c000c868 <scanMADT()+0x4a8>
c000c4af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c4b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4bb:	8d 50 01             	lea    edx,[eax+0x1]
c000c4be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4c6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4ca:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c4ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4d2:	8d 50 01             	lea    edx,[eax+0x1]
c000c4d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4dd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4e1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4e5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4ea:	83 f8 02             	cmp    eax,0x2
c000c4ed:	0f 86 71 03 00 00    	jbe    c000c864 <scanMADT()+0x4a4>
c000c4f3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4f8:	85 c0                	test   eax,eax
c000c4fa:	75 58                	jne    c000c554 <scanMADT()+0x194>
c000c4fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c500:	8d 50 01             	lea    edx,[eax+0x1]
c000c503:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c507:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c50d:	0f b6 d2             	movzx  edx,dl
c000c510:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c514:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c518:	88 82 c0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3040],al
c000c51e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c522:	8d 50 01             	lea    edx,[eax+0x1]
c000c525:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c529:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c52f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c532:	88 0d 80 cf 02 c0    	mov    BYTE PTR ds:0xc002cf80,cl
c000c538:	0f b6 d2             	movzx  edx,dl
c000c53b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c53f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c543:	88 82 a0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3060],al
c000c549:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c54e:	e9 f1 02 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c553:	90                   	nop
c000c554:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c559:	83 f8 01             	cmp    eax,0x1
c000c55c:	0f 85 32 01 00 00    	jne    c000c694 <scanMADT()+0x2d4>
c000c562:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c566:	8d 50 01             	lea    edx,[eax+0x1]
c000c569:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56d:	8a 15 40 ce 02 c0    	mov    dl,BYTE PTR ds:0xc002ce40
c000c573:	0f b6 d2             	movzx  edx,dl
c000c576:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c57a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c57e:	88 82 60 ce 02 c0    	mov    BYTE PTR [edx-0x3ffd31a0],al
c000c584:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c589:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c58d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c591:	01 d0                	add    eax,edx
c000c593:	83 c0 2c             	add    eax,0x2c
c000c596:	8a 00                	mov    al,BYTE PTR [eax]
c000c598:	0f b6 d0             	movzx  edx,al
c000c59b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c59f:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5a6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5aa:	0f b6 c0             	movzx  eax,al
c000c5ad:	c1 e0 08             	shl    eax,0x8
c000c5b0:	89 d1                	mov    ecx,edx
c000c5b2:	09 c1                	or     ecx,eax
c000c5b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5b8:	8d 50 02             	lea    edx,[eax+0x2]
c000c5bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5c3:	0f b6 c0             	movzx  eax,al
c000c5c6:	c1 e0 10             	shl    eax,0x10
c000c5c9:	09 c1                	or     ecx,eax
c000c5cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5cf:	8d 50 03             	lea    edx,[eax+0x3]
c000c5d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5da:	0f b6 c0             	movzx  eax,al
c000c5dd:	c1 e0 18             	shl    eax,0x18
c000c5e0:	09 c1                	or     ecx,eax
c000c5e2:	89 ca                	mov    edx,ecx
c000c5e4:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c5e9:	0f b6 c0             	movzx  eax,al
c000c5ec:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c000c5f3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c600:	01 d0                	add    eax,edx
c000c602:	83 c0 2c             	add    eax,0x2c
c000c605:	8a 00                	mov    al,BYTE PTR [eax]
c000c607:	0f b6 d0             	movzx  edx,al
c000c60a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c60e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c611:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c615:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c619:	0f b6 c0             	movzx  eax,al
c000c61c:	c1 e0 08             	shl    eax,0x8
c000c61f:	89 d1                	mov    ecx,edx
c000c621:	09 c1                	or     ecx,eax
c000c623:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c627:	8d 50 02             	lea    edx,[eax+0x2]
c000c62a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c62e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c632:	0f b6 c0             	movzx  eax,al
c000c635:	c1 e0 10             	shl    eax,0x10
c000c638:	09 c1                	or     ecx,eax
c000c63a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c63e:	8d 50 03             	lea    edx,[eax+0x3]
c000c641:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c645:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c649:	0f b6 c0             	movzx  eax,al
c000c64c:	c1 e0 18             	shl    eax,0x18
c000c64f:	09 c1                	or     ecx,eax
c000c651:	89 ca                	mov    edx,ecx
c000c653:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c658:	0f b6 c0             	movzx  eax,al
c000c65b:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c000c662:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c667:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c66c:	83 c0 01             	add    eax,0x1
c000c66f:	a2 40 ce 02 c0       	mov    ds:0xc002ce40,al
c000c674:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c679:	0f b6 c0             	movzx  eax,al
c000c67c:	83 ec 08             	sub    esp,0x8
c000c67f:	50                   	push   eax
c000c680:	68 52 3d 02 c0       	push   0xc0023d52
c000c685:	e8 f2 a8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	e9 b2 01 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c692:	66 90                	xchg   ax,ax
c000c694:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c699:	83 f8 02             	cmp    eax,0x2
c000c69c:	0f 85 ea 00 00 00    	jne    c000c78c <scanMADT()+0x3cc>
c000c6a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6a6:	8d 50 01             	lea    edx,[eax+0x1]
c000c6a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6b5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c6b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6bd:	8d 50 01             	lea    edx,[eax+0x1]
c000c6c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6c8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6cc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c6d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6d8:	01 d0                	add    eax,edx
c000c6da:	83 c0 2c             	add    eax,0x2c
c000c6dd:	8a 00                	mov    al,BYTE PTR [eax]
c000c6df:	0f b6 d0             	movzx  edx,al
c000c6e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6e6:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6f1:	0f b6 c0             	movzx  eax,al
c000c6f4:	c1 e0 08             	shl    eax,0x8
c000c6f7:	89 d1                	mov    ecx,edx
c000c6f9:	09 c1                	or     ecx,eax
c000c6fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ff:	8d 50 02             	lea    edx,[eax+0x2]
c000c702:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c706:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c70a:	0f b6 c0             	movzx  eax,al
c000c70d:	c1 e0 10             	shl    eax,0x10
c000c710:	09 c1                	or     ecx,eax
c000c712:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c716:	8d 50 03             	lea    edx,[eax+0x3]
c000c719:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c71d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c721:	0f b6 c0             	movzx  eax,al
c000c724:	c1 e0 18             	shl    eax,0x18
c000c727:	09 c8                	or     eax,ecx
c000c729:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c72d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c732:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c736:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c73a:	01 d0                	add    eax,edx
c000c73c:	83 c0 2c             	add    eax,0x2c
c000c73f:	8a 00                	mov    al,BYTE PTR [eax]
c000c741:	0f b6 c0             	movzx  eax,al
c000c744:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c748:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c74b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c74f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c753:	0f b6 d2             	movzx  edx,dl
c000c756:	c1 e2 08             	shl    edx,0x8
c000c759:	09 d0                	or     eax,edx
c000c75b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c760:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c765:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c76a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c76e:	88 90 88 64 02 c0    	mov    BYTE PTR [eax-0x3ffd9b78],dl
c000c774:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c779:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c77e:	66 89 84 12 20 ce 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd31e0],ax
c000c786:	e9 b9 00 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c78b:	90                   	nop
c000c78c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c791:	83 f8 04             	cmp    eax,0x4
c000c794:	0f 85 9a 00 00 00    	jne    c000c834 <scanMADT()+0x474>
c000c79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c79e:	8d 50 01             	lea    edx,[eax+0x1]
c000c7a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7ad:	0f b6 c0             	movzx  eax,al
c000c7b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7bc:	01 d0                	add    eax,edx
c000c7be:	83 c0 2c             	add    eax,0x2c
c000c7c1:	8a 00                	mov    al,BYTE PTR [eax]
c000c7c3:	0f b6 d0             	movzx  edx,al
c000c7c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ca:	8d 48 01             	lea    ecx,[eax+0x1]
c000c7cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c7d1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c7d5:	0f b6 c0             	movzx  eax,al
c000c7d8:	c1 e0 08             	shl    eax,0x8
c000c7db:	09 d0                	or     eax,edx
c000c7dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7e1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ea:	8d 50 01             	lea    edx,[eax+0x1]
c000c7ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7f9:	0f b6 c0             	movzx  eax,al
c000c7fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c804:	c1 e0 08             	shl    eax,0x8
c000c807:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c80b:	89 c1                	mov    ecx,eax
c000c80d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c811:	c1 e0 18             	shl    eax,0x18
c000c814:	89 c3                	mov    ebx,eax
c000c816:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c000c81b:	8d 50 01             	lea    edx,[eax+0x1]
c000c81e:	89 15 8c cd 02 c0    	mov    DWORD PTR ds:0xc002cd8c,edx
c000c824:	09 d9                	or     ecx,ebx
c000c826:	89 ca                	mov    edx,ecx
c000c828:	89 14 85 a0 cd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3260],edx
c000c82f:	eb 13                	jmp    c000c844 <scanMADT()+0x484>
c000c831:	8d 76 00             	lea    esi,[esi+0x0]
c000c834:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c839:	83 f8 05             	cmp    eax,0x5
c000c83c:	75 06                	jne    c000c844 <scanMADT()+0x484>
c000c83e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c843:	90                   	nop
c000c844:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c849:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c84d:	01 d0                	add    eax,edx
c000c84f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c853:	e9 38 fc ff ff       	jmp    c000c490 <scanMADT()+0xd0>
c000c858:	90                   	nop
c000c859:	eb 0d                	jmp    c000c868 <scanMADT()+0x4a8>
c000c85b:	90                   	nop
c000c85c:	90                   	nop
c000c85d:	eb 09                	jmp    c000c868 <scanMADT()+0x4a8>
c000c85f:	90                   	nop
c000c860:	90                   	nop
c000c861:	eb 05                	jmp    c000c868 <scanMADT()+0x4a8>
c000c863:	90                   	nop
c000c864:	90                   	nop
c000c865:	8d 76 00             	lea    esi,[esi+0x0]
c000c868:	83 c4 38             	add    esp,0x38
c000c86b:	5b                   	pop    ebx
c000c86c:	c3                   	ret    
c000c86d:	90                   	nop
c000c86e:	66 90                	xchg   ax,ax

c000c870 <ACPI::ACPI()>:
c000c870:	83 ec 0c             	sub    esp,0xc
c000c873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c877:	83 ec 08             	sub    esp,0x8
c000c87a:	68 6e 3d 02 c0       	push   0xc0023d6e
c000c87f:	50                   	push   eax
c000c880:	e8 31 d3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000c885:	83 c4 10             	add    esp,0x10
c000c888:	ba 8c 3f 02 c0       	mov    edx,0xc0023f8c
c000c88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c891:	89 10                	mov    DWORD PTR [eax],edx
c000c893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c897:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c8ba:	90                   	nop
c000c8bb:	83 c4 0c             	add    esp,0xc
c000c8be:	c3                   	ret    
c000c8bf:	90                   	nop

c000c8c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c8c0:	83 ec 2c             	sub    esp,0x2c
c000c8c3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c8c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c8cb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c8cf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c8d3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c8d8:	88 d0                	mov    al,dl
c000c8da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8e3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8eb:	90                   	nop
c000c8ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8f0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8fa:	0f 8d b0 00 00 00    	jge    c000c9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c900:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c904:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c908:	83 c2 2a             	add    edx,0x2a
c000c90b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c90f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c914:	0f b7 c0             	movzx  eax,ax
c000c917:	39 c2                	cmp    edx,eax
c000c919:	0f 85 85 00 00 00    	jne    c000c9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c91f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c923:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c927:	83 c2 2a             	add    edx,0x2a
c000c92a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c92e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c933:	0f b6 c0             	movzx  eax,al
c000c936:	39 c2                	cmp    edx,eax
c000c938:	75 6a                	jne    c000c9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c93a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c93f:	85 c0                	test   eax,eax
c000c941:	74 3d                	je     c000c980 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c943:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c947:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c94b:	83 c2 2a             	add    edx,0x2a
c000c94e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c952:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c959:	39 c2                	cmp    edx,eax
c000c95b:	74 13                	je     c000c970 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c95d:	83 ec 0c             	sub    esp,0xc
c000c960:	68 0c 3f 02 c0       	push   0xc0023f0c
c000c965:	e8 7c 36 00 00       	call   c000ffe6 <KePanic(char const*)>
c000c96a:	83 c4 10             	add    esp,0x10
c000c96d:	8d 76 00             	lea    esi,[esi+0x0]
c000c970:	83 ec 0c             	sub    esp,0xc
c000c973:	68 73 3d 02 c0       	push   0xc0023d73
c000c978:	e8 69 36 00 00       	call   c000ffe6 <KePanic(char const*)>
c000c97d:	83 c4 10             	add    esp,0x10
c000c980:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c984:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c988:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c98c:	83 c2 2a             	add    edx,0x2a
c000c98f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c993:	8b 02                	mov    eax,DWORD PTR [edx]
c000c995:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c998:	89 01                	mov    DWORD PTR [ecx],eax
c000c99a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c99d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c9a2:	66 90                	xchg   ax,ax
c000c9a4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c9a9:	e9 3e ff ff ff       	jmp    c000c8ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c9ae:	66 90                	xchg   ax,ax
c000c9b0:	90                   	nop
c000c9b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9b5:	83 c4 2c             	add    esp,0x2c
c000c9b8:	c2 04 00             	ret    0x4
c000c9bb:	90                   	nop

c000c9bc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c9bc:	83 ec 1c             	sub    esp,0x1c
c000c9bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c9c3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c9c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c9d0:	88 c8                	mov    al,cl
c000c9d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c9d6:	88 d0                	mov    al,dl
c000c9d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ea:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9ed:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c9f1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ca03:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ca06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca0a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ca0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca13:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca19:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ca1d:	83 c0 01             	add    eax,0x1
c000ca20:	88 c1                	mov    cl,al
c000ca22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca26:	83 c2 2a             	add    edx,0x2a
c000ca29:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ca2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca31:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca3b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca3e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca42:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca4a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca50:	8d 50 01             	lea    edx,[eax+0x1]
c000ca53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca57:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca61:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca67:	3d 00 02 00 00       	cmp    eax,0x200
c000ca6c:	75 12                	jne    c000ca80 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca6e:	83 ec 0c             	sub    esp,0xc
c000ca71:	68 82 3d 02 c0       	push   0xc0023d82
c000ca76:	e8 6b 35 00 00       	call   c000ffe6 <KePanic(char const*)>
c000ca7b:	83 c4 10             	add    esp,0x10
c000ca7e:	66 90                	xchg   ax,ax
c000ca80:	90                   	nop
c000ca81:	83 c4 1c             	add    esp,0x1c
c000ca84:	c3                   	ret    
c000ca85:	90                   	nop
c000ca86:	66 90                	xchg   ax,ax

c000ca88 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca88:	b8 00 00 00 00       	mov    eax,0x0
c000ca8d:	c3                   	ret    
c000ca8e:	66 90                	xchg   ax,ax

c000ca90 <ACPI::detectPCI()>:
c000ca90:	53                   	push   ebx
c000ca91:	83 ec 28             	sub    esp,0x28
c000ca94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca99:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca9e:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000caa3:	83 ec 08             	sub    esp,0x8
c000caa6:	68 9f 3d 02 c0       	push   0xc0023d9f
c000caab:	50                   	push   eax
c000caac:	e8 9b f8 ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000cab1:	83 c4 10             	add    esp,0x10
c000cab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cab8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000cabd:	74 0d                	je     c000cacc <ACPI::detectPCI()+0x3c>
c000cabf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cac4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cac9:	8d 76 00             	lea    esi,[esi+0x0]
c000cacc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000cad4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cad8:	8a 00                	mov    al,BYTE PTR [eax]
c000cada:	0f b6 c0             	movzx  eax,al
c000cadd:	83 f8 01             	cmp    eax,0x1
c000cae0:	75 0e                	jne    c000caf0 <ACPI::detectPCI()+0x60>
c000cae2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cae7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000caec:	eb 2e                	jmp    c000cb1c <ACPI::detectPCI()+0x8c>
c000caee:	66 90                	xchg   ax,ax
c000caf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000caf4:	8a 00                	mov    al,BYTE PTR [eax]
c000caf6:	0f b6 c0             	movzx  eax,al
c000caf9:	83 f8 02             	cmp    eax,0x2
c000cafc:	75 1e                	jne    c000cb1c <ACPI::detectPCI()+0x8c>
c000cafe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb03:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb08:	85 c0                	test   eax,eax
c000cb0a:	74 10                	je     c000cb1c <ACPI::detectPCI()+0x8c>
c000cb0c:	83 ec 0c             	sub    esp,0xc
c000cb0f:	68 3c 3f 02 c0       	push   0xc0023f3c
c000cb14:	e8 cd 34 00 00       	call   c000ffe6 <KePanic(char const*)>
c000cb19:	83 c4 10             	add    esp,0x10
c000cb1c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cb20:	83 f0 01             	xor    eax,0x1
c000cb23:	0f b6 c0             	movzx  eax,al
c000cb26:	85 c0                	test   eax,eax
c000cb28:	74 46                	je     c000cb70 <ACPI::detectPCI()+0xe0>
c000cb2a:	e8 01 36 ff ff       	call   c0000130 <manualPCIProbe>
c000cb2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb33:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cb38:	75 0e                	jne    c000cb48 <ACPI::detectPCI()+0xb8>
c000cb3a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb3f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb44:	eb 2a                	jmp    c000cb70 <ACPI::detectPCI()+0xe0>
c000cb46:	66 90                	xchg   ax,ax
c000cb48:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb4d:	75 21                	jne    c000cb70 <ACPI::detectPCI()+0xe0>
c000cb4f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb54:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb59:	85 c0                	test   eax,eax
c000cb5b:	74 13                	je     c000cb70 <ACPI::detectPCI()+0xe0>
c000cb5d:	83 ec 0c             	sub    esp,0xc
c000cb60:	68 3c 3f 02 c0       	push   0xc0023f3c
c000cb65:	e8 7c 34 00 00       	call   c000ffe6 <KePanic(char const*)>
c000cb6a:	83 c4 10             	add    esp,0x10
c000cb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb70:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb75:	85 c0                	test   eax,eax
c000cb77:	0f 84 87 00 00 00    	je     c000cc04 <ACPI::detectPCI()+0x174>
c000cb7d:	83 ec 0c             	sub    esp,0xc
c000cb80:	68 a4 3d 02 c0       	push   0xc0023da4
c000cb85:	e8 9f 07 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000cb8a:	83 c4 10             	add    esp,0x10
c000cb8d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb95:	83 ec 0c             	sub    esp,0xc
c000cb98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb9c:	e8 ee 2f 00 00       	call   c000fb8f <malloc>
c000cba1:	83 c4 10             	add    esp,0x10
c000cba4:	89 c3                	mov    ebx,eax
c000cba6:	83 ec 0c             	sub    esp,0xc
c000cba9:	53                   	push   ebx
c000cbaa:	e8 85 11 01 00       	call   c001dd34 <PCI::PCI()>
c000cbaf:	83 c4 10             	add    esp,0x10
c000cbb2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cbb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbba:	83 ec 08             	sub    esp,0x8
c000cbbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbc1:	50                   	push   eax
c000cbc2:	e8 8d ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cbc7:	83 c4 10             	add    esp,0x10
c000cbca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbce:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd0:	83 c0 08             	add    eax,0x8
c000cbd3:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cbda:	85 d2                	test   edx,edx
c000cbdc:	74 0a                	je     c000cbe8 <ACPI::detectPCI()+0x158>
c000cbde:	ba 01 00 00 00       	mov    edx,0x1
c000cbe3:	eb 0b                	jmp    c000cbf0 <ACPI::detectPCI()+0x160>
c000cbe5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbe8:	ba 02 00 00 00       	mov    edx,0x2
c000cbed:	8d 76 00             	lea    esi,[esi+0x0]
c000cbf0:	6a 00                	push   0x0
c000cbf2:	6a 00                	push   0x0
c000cbf4:	52                   	push   edx
c000cbf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbf9:	ff d0                	call   eax
c000cbfb:	83 c4 10             	add    esp,0x10
c000cbfe:	e9 91 00 00 00       	jmp    c000cc94 <ACPI::detectPCI()+0x204>
c000cc03:	90                   	nop
c000cc04:	83 ec 0c             	sub    esp,0xc
c000cc07:	68 bc 3d 02 c0       	push   0xc0023dbc
c000cc0c:	e8 18 07 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cc1b:	83 ec 0c             	sub    esp,0xc
c000cc1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cc22:	e8 68 2f 00 00       	call   c000fb8f <malloc>
c000cc27:	83 c4 10             	add    esp,0x10
c000cc2a:	89 c3                	mov    ebx,eax
c000cc2c:	83 ec 0c             	sub    esp,0xc
c000cc2f:	53                   	push   ebx
c000cc30:	e8 05 1d 01 00       	call   c001e93a <IDE::IDE()>
c000cc35:	83 c4 10             	add    esp,0x10
c000cc38:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc40:	83 ec 08             	sub    esp,0x8
c000cc43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc47:	50                   	push   eax
c000cc48:	e8 07 ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cc4d:	83 c4 10             	add    esp,0x10
c000cc50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc54:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc62:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc6f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc7e:	83 c0 08             	add    eax,0x8
c000cc81:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc83:	6a 00                	push   0x0
c000cc85:	6a 00                	push   0x0
c000cc87:	6a 00                	push   0x0
c000cc89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8d:	ff d0                	call   eax
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	66 90                	xchg   ax,ax
c000cc94:	90                   	nop
c000cc95:	83 c4 28             	add    esp,0x28
c000cc98:	5b                   	pop    ebx
c000cc99:	c3                   	ret    
c000cc9a:	66 90                	xchg   ax,ax

c000cc9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc9c:	83 ec 0c             	sub    esp,0xc
c000cc9f:	83 ec 0c             	sub    esp,0xc
c000cca2:	68 d1 3d 02 c0       	push   0xc0023dd1
c000cca7:	e8 3a 33 00 00       	call   c000ffe6 <KePanic(char const*)>
c000ccac:	83 c4 10             	add    esp,0x10
c000ccaf:	90                   	nop
c000ccb0:	83 c4 0c             	add    esp,0xc
c000ccb3:	c3                   	ret    

c000ccb4 <ACPI::open(int, int, void*)>:
c000ccb4:	57                   	push   edi
c000ccb5:	56                   	push   esi
c000ccb6:	53                   	push   ebx
c000ccb7:	81 ec 70 01 00 00    	sub    esp,0x170
c000ccbd:	83 ec 0c             	sub    esp,0xc
c000ccc0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ccc7:	e8 c4 fd ff ff       	call   c000ca90 <ACPI::detectPCI()>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	83 ec 0c             	sub    esp,0xc
c000ccd2:	68 64 3f 02 c0       	push   0xc0023f64
c000ccd7:	e8 4d 06 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000ccdc:	83 c4 10             	add    esp,0x10
c000ccdf:	b8 4c 05 00 00       	mov    eax,0x54c
c000cce4:	8a 00                	mov    al,BYTE PTR [eax]
c000cce6:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000cced:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000ccf5:	83 f8 01             	cmp    eax,0x1
c000ccf8:	75 12                	jne    c000cd0c <ACPI::open(int, int, void*)+0x58>
c000ccfa:	83 ec 0c             	sub    esp,0xc
c000ccfd:	68 e2 3d 02 c0       	push   0xc0023de2
c000cd02:	e8 da 8d 00 00       	call   c0015ae1 <Thr::loadKernelSymbolTable(char const*)>
c000cd07:	83 c4 10             	add    esp,0x10
c000cd0a:	eb 34                	jmp    c000cd40 <ACPI::open(int, int, void*)+0x8c>
c000cd0c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cd14:	3d bb 00 00 00       	cmp    eax,0xbb
c000cd19:	75 15                	jne    c000cd30 <ACPI::open(int, int, void*)+0x7c>
c000cd1b:	83 ec 0c             	sub    esp,0xc
c000cd1e:	68 00 3e 02 c0       	push   0xc0023e00
c000cd23:	e8 b9 8d 00 00       	call   c0015ae1 <Thr::loadKernelSymbolTable(char const*)>
c000cd28:	83 c4 10             	add    esp,0x10
c000cd2b:	eb 13                	jmp    c000cd40 <ACPI::open(int, int, void*)+0x8c>
c000cd2d:	8d 76 00             	lea    esi,[esi+0x0]
c000cd30:	83 ec 0c             	sub    esp,0xc
c000cd33:	68 1e 3e 02 c0       	push   0xc0023e1e
c000cd38:	e8 a9 32 00 00       	call   c000ffe6 <KePanic(char const*)>
c000cd3d:	83 c4 10             	add    esp,0x10
c000cd40:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000cd48:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000cd53:	83 ec 0c             	sub    esp,0xc
c000cd56:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000cd5d:	e8 2d 2e 00 00       	call   c000fb8f <malloc>
c000cd62:	83 c4 10             	add    esp,0x10
c000cd65:	89 c3                	mov    ebx,eax
c000cd67:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000cd6c:	83 ec 04             	sub    esp,0x4
c000cd6f:	50                   	push   eax
c000cd70:	68 38 3e 02 c0       	push   0xc0023e38
c000cd75:	53                   	push   ebx
c000cd76:	e8 0f b4 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000cd85:	83 ec 08             	sub    esp,0x8
c000cd88:	6a 01                	push   0x1
c000cd8a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd91:	e8 12 b4 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000cda0:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000cda8:	75 16                	jne    c000cdc0 <ACPI::open(int, int, void*)+0x10c>
c000cdaa:	83 ec 0c             	sub    esp,0xc
c000cdad:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdb4:	e8 4d b4 ff ff       	call   c0008206 <File::close()>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	eb 0a                	jmp    c000cdc8 <ACPI::open(int, int, void*)+0x114>
c000cdbe:	66 90                	xchg   ax,ax
c000cdc0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000cdc8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000cdd0:	74 1e                	je     c000cdf0 <ACPI::open(int, int, void*)+0x13c>
c000cdd2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000cdd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cddb:	83 c0 08             	add    eax,0x8
c000cdde:	8b 00                	mov    eax,DWORD PTR [eax]
c000cde0:	83 ec 0c             	sub    esp,0xc
c000cde3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdea:	ff d0                	call   eax
c000cdec:	83 c4 10             	add    esp,0x10
c000cdef:	90                   	nop
c000cdf0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000cdf7:	83 f0 01             	xor    eax,0x1
c000cdfa:	0f b6 c0             	movzx  eax,al
c000cdfd:	85 c0                	test   eax,eax
c000cdff:	74 2f                	je     c000ce30 <ACPI::open(int, int, void*)+0x17c>
c000ce01:	83 ec 0c             	sub    esp,0xc
c000ce04:	68 56 3e 02 c0       	push   0xc0023e56
c000ce09:	e8 1b 05 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000ce1c:	83 ec 0c             	sub    esp,0xc
c000ce1f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ce26:	e8 2b 6a 00 00       	call   c0013856 <Virt::setupPageSwapping(int)>
c000ce2b:	83 c4 10             	add    esp,0x10
c000ce2e:	66 90                	xchg   ax,ax
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	68 71 3e 02 c0       	push   0xc0023e71
c000ce38:	e8 ec 04 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000ce3d:	83 c4 10             	add    esp,0x10
c000ce40:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ce47:	83 ec 08             	sub    esp,0x8
c000ce4a:	6a 13                	push   0x13
c000ce4c:	50                   	push   eax
c000ce4d:	e8 30 cf ff ff       	call   c0009d82 <getDevicesOfType(DeviceType)>
c000ce52:	83 c4 0c             	add    esp,0xc
c000ce55:	8d 76 00             	lea    esi,[esi+0x0]
c000ce58:	83 ec 0c             	sub    esp,0xc
c000ce5b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce62:	50                   	push   eax
c000ce63:	e8 54 53 01 00       	call   c00221bc <LinkedList<Device>::isEmpty()>
c000ce68:	83 c4 10             	add    esp,0x10
c000ce6b:	83 f0 01             	xor    eax,0x1
c000ce6e:	0f b6 c0             	movzx  eax,al
c000ce71:	85 c0                	test   eax,eax
c000ce73:	0f 84 47 01 00 00    	je     c000cfc0 <ACPI::open(int, int, void*)+0x30c>
c000ce79:	83 ec 0c             	sub    esp,0xc
c000ce7c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce83:	50                   	push   eax
c000ce84:	e8 4f 53 01 00       	call   c00221d8 <LinkedList<Device>::getFirstElement()>
c000ce89:	83 c4 10             	add    esp,0x10
c000ce8c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ce93:	83 ec 0c             	sub    esp,0xc
c000ce96:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce9d:	50                   	push   eax
c000ce9e:	e8 3d 53 01 00       	call   c00221e0 <LinkedList<Device>::removeFirst()>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000cead:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ceb4:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000cebb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000cebf:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000cec5:	ba 09 00 00 00       	mov    edx,0x9
c000ceca:	fc                   	cld    
c000cecb:	89 c7                	mov    edi,eax
c000cecd:	89 de                	mov    esi,ebx
c000cecf:	89 d1                	mov    ecx,edx
c000ced1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ced3:	83 ec 08             	sub    esp,0x8
c000ced6:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ceda:	50                   	push   eax
c000cedb:	83 ec 24             	sub    esp,0x24
c000cede:	89 e0                	mov    eax,esp
c000cee0:	89 c3                	mov    ebx,eax
c000cee2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000cee6:	ba 09 00 00 00       	mov    edx,0x9
c000ceeb:	89 df                	mov    edi,ebx
c000ceed:	89 c6                	mov    esi,eax
c000ceef:	89 d1                	mov    ecx,edx
c000cef1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000cef3:	e8 26 13 01 00       	call   c001e21e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000cef8:	83 c4 30             	add    esp,0x30
c000cefb:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000cf02:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000cf0a:	0f 84 48 ff ff ff    	je     c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cf10:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000cf1b:	83 ec 0c             	sub    esp,0xc
c000cf1e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000cf25:	e8 65 2c 00 00       	call   c000fb8f <malloc>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	89 c3                	mov    ebx,eax
c000cf2f:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000cf34:	83 ec 04             	sub    esp,0x4
c000cf37:	50                   	push   eax
c000cf38:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf3f:	53                   	push   ebx
c000cf40:	e8 45 b2 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cf45:	83 c4 10             	add    esp,0x10
c000cf48:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000cf4f:	83 ec 0c             	sub    esp,0xc
c000cf52:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf59:	e8 0e b5 ff ff       	call   c000846c <File::exists()>
c000cf5e:	83 c4 10             	add    esp,0x10
c000cf61:	0f b6 c0             	movzx  eax,al
c000cf64:	85 c0                	test   eax,eax
c000cf66:	74 28                	je     c000cf90 <ACPI::open(int, int, void*)+0x2dc>
c000cf68:	83 ec 08             	sub    esp,0x8
c000cf6b:	6a 01                	push   0x1
c000cf6d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf74:	e8 f1 95 00 00       	call   c001656a <Thr::loadDLL(char const*, bool)>
c000cf79:	83 c4 10             	add    esp,0x10
c000cf7c:	83 ec 08             	sub    esp,0x8
c000cf7f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf86:	50                   	push   eax
c000cf87:	e8 30 98 00 00       	call   c00167bc <Thr::executeDLL(unsigned long, void*)>
c000cf8c:	83 c4 10             	add    esp,0x10
c000cf8f:	90                   	nop
c000cf90:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000cf98:	0f 84 ba fe ff ff    	je     c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cf9e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000cfa5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfa7:	83 c0 08             	add    eax,0x8
c000cfaa:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfac:	83 ec 0c             	sub    esp,0xc
c000cfaf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cfb6:	ff d0                	call   eax
c000cfb8:	83 c4 10             	add    esp,0x10
c000cfbb:	e9 98 fe ff ff       	jmp    c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cfc0:	83 ec 0c             	sub    esp,0xc
c000cfc3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cfca:	50                   	push   eax
c000cfcb:	e8 e8 51 01 00       	call   c00221b8 <LinkedList<Device>::~LinkedList()>
c000cfd0:	83 c4 10             	add    esp,0x10
c000cfd3:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c000cfd9:	83 ec 08             	sub    esp,0x8
c000cfdc:	6a 01                	push   0x1
c000cfde:	68 8b 3e 02 c0       	push   0xc0023e8b
c000cfe3:	e8 82 95 00 00       	call   c001656a <Thr::loadDLL(char const*, bool)>
c000cfe8:	83 c4 10             	add    esp,0x10
c000cfeb:	83 ec 08             	sub    esp,0x8
c000cfee:	53                   	push   ebx
c000cfef:	50                   	push   eax
c000cff0:	e8 c7 97 00 00       	call   c00167bc <Thr::executeDLL(unsigned long, void*)>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000cffd:	85 c0                	test   eax,eax
c000cfff:	0f 84 27 01 00 00    	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d005:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000d00a:	85 c0                	test   eax,eax
c000d00c:	0f 84 1a 01 00 00    	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d012:	83 ec 0c             	sub    esp,0xc
c000d015:	68 a8 3e 02 c0       	push   0xc0023ea8
c000d01a:	e8 0a 03 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000d02d:	83 ec 0c             	sub    esp,0xc
c000d030:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000d037:	e8 53 2b 00 00       	call   c000fb8f <malloc>
c000d03c:	83 c4 10             	add    esp,0x10
c000d03f:	89 c3                	mov    ebx,eax
c000d041:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000d046:	83 ec 04             	sub    esp,0x4
c000d049:	50                   	push   eax
c000d04a:	68 c5 3e 02 c0       	push   0xc0023ec5
c000d04f:	53                   	push   ebx
c000d050:	e8 35 b1 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d055:	83 c4 10             	add    esp,0x10
c000d058:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000d05f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d067:	74 1f                	je     c000d088 <ACPI::open(int, int, void*)+0x3d4>
c000d069:	83 ec 0c             	sub    esp,0xc
c000d06c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d073:	e8 f4 b3 ff ff       	call   c000846c <File::exists()>
c000d078:	83 c4 10             	add    esp,0x10
c000d07b:	0f b6 c0             	movzx  eax,al
c000d07e:	85 c0                	test   eax,eax
c000d080:	74 06                	je     c000d088 <ACPI::open(int, int, void*)+0x3d4>
c000d082:	b0 01                	mov    al,0x1
c000d084:	eb 06                	jmp    c000d08c <ACPI::open(int, int, void*)+0x3d8>
c000d086:	66 90                	xchg   ax,ax
c000d088:	b0 00                	mov    al,0x0
c000d08a:	66 90                	xchg   ax,ax
c000d08c:	0f b6 c0             	movzx  eax,al
c000d08f:	85 c0                	test   eax,eax
c000d091:	74 25                	je     c000d0b8 <ACPI::open(int, int, void*)+0x404>
c000d093:	83 ec 08             	sub    esp,0x8
c000d096:	6a 01                	push   0x1
c000d098:	68 c5 3e 02 c0       	push   0xc0023ec5
c000d09d:	e8 c8 94 00 00       	call   c001656a <Thr::loadDLL(char const*, bool)>
c000d0a2:	83 c4 10             	add    esp,0x10
c000d0a5:	83 ec 08             	sub    esp,0x8
c000d0a8:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000d0af:	50                   	push   eax
c000d0b0:	e8 07 97 00 00       	call   c00167bc <Thr::executeDLL(unsigned long, void*)>
c000d0b5:	83 c4 10             	add    esp,0x10
c000d0b8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d0c0:	74 2a                	je     c000d0ec <ACPI::open(int, int, void*)+0x438>
c000d0c2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d0ca:	74 20                	je     c000d0ec <ACPI::open(int, int, void*)+0x438>
c000d0cc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d0d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0d5:	83 c0 08             	add    eax,0x8
c000d0d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0da:	83 ec 0c             	sub    esp,0xc
c000d0dd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d0e4:	ff d0                	call   eax
c000d0e6:	83 c4 10             	add    esp,0x10
c000d0e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d0ec:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000d0f1:	83 ec 08             	sub    esp,0x8
c000d0f4:	68 e2 3e 02 c0       	push   0xc0023ee2
c000d0f9:	50                   	push   eax
c000d0fa:	e8 4d f2 ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d109:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d111:	74 19                	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d113:	83 ec 08             	sub    esp,0x8
c000d116:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d11d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d124:	e8 73 fb ff ff       	call   c000cc9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d129:	83 c4 10             	add    esp,0x10
c000d12c:	b8 00 00 00 00       	mov    eax,0x0
c000d131:	81 c4 70 01 00 00    	add    esp,0x170
c000d137:	5b                   	pop    ebx
c000d138:	5e                   	pop    esi
c000d139:	5f                   	pop    edi
c000d13a:	c3                   	ret    
c000d13b:	90                   	nop

c000d13c <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d13c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d142:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d149:	89 c2                	mov    edx,eax
c000d14b:	c1 fa 1f             	sar    edx,0x1f
c000d14e:	83 ec 04             	sub    esp,0x4
c000d151:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d155:	51                   	push   ecx
c000d156:	52                   	push   edx
c000d157:	50                   	push   eax
c000d158:	e8 27 28 00 00       	call   c000f984 <KeItoa(long long, char*)>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	83 ec 08             	sub    esp,0x8
c000d163:	68 b0 3f 02 c0       	push   0xc0023fb0
c000d168:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d16c:	50                   	push   eax
c000d16d:	e8 ce 34 ff ff       	call   c0000640 <strcpy>
c000d172:	83 c4 10             	add    esp,0x10
c000d175:	83 ec 08             	sub    esp,0x8
c000d178:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d17f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d183:	50                   	push   eax
c000d184:	e8 b7 36 ff ff       	call   c0000840 <strcat>
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	83 ec 08             	sub    esp,0x8
c000d18f:	68 be 3f 02 c0       	push   0xc0023fbe
c000d194:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d198:	50                   	push   eax
c000d199:	e8 a2 36 ff ff       	call   c0000840 <strcat>
c000d19e:	83 c4 10             	add    esp,0x10
c000d1a1:	83 ec 08             	sub    esp,0x8
c000d1a4:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d1ab:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1af:	50                   	push   eax
c000d1b0:	e8 8b 36 ff ff       	call   c0000840 <strcat>
c000d1b5:	83 c4 10             	add    esp,0x10
c000d1b8:	83 ec 08             	sub    esp,0x8
c000d1bb:	68 c1 3f 02 c0       	push   0xc0023fc1
c000d1c0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1c4:	50                   	push   eax
c000d1c5:	e8 76 36 ff ff       	call   c0000840 <strcat>
c000d1ca:	83 c4 10             	add    esp,0x10
c000d1cd:	83 ec 08             	sub    esp,0x8
c000d1d0:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d1d7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1db:	50                   	push   eax
c000d1dc:	e8 5f 36 ff ff       	call   c0000840 <strcat>
c000d1e1:	83 c4 10             	add    esp,0x10
c000d1e4:	83 ec 08             	sub    esp,0x8
c000d1e7:	68 c1 3f 02 c0       	push   0xc0023fc1
c000d1ec:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1f0:	50                   	push   eax
c000d1f1:	e8 4a 36 ff ff       	call   c0000840 <strcat>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	83 ec 08             	sub    esp,0x8
c000d1fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d200:	50                   	push   eax
c000d201:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d205:	50                   	push   eax
c000d206:	e8 35 36 ff ff       	call   c0000840 <strcat>
c000d20b:	83 c4 10             	add    esp,0x10
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d215:	50                   	push   eax
c000d216:	e8 cb 2d 00 00       	call   c000ffe6 <KePanic(char const*)>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	90                   	nop
c000d21f:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d225:	c3                   	ret    

c000d226 <KeInitialiseAtexit()>:
c000d226:	83 ec 10             	sub    esp,0x10
c000d229:	c7 05 e0 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfe0,0x0
c000d233:	6a 60                	push   0x60
c000d235:	6a 00                	push   0x0
c000d237:	68 60 d0 02 c0       	push   0xc002d060
c000d23c:	e8 af 32 ff ff       	call   c00004f0 <memset>
c000d241:	83 c4 1c             	add    esp,0x1c
c000d244:	c3                   	ret    

c000d245 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d245:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000d24a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d24e:	89 14 85 60 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2fa0],edx
c000d255:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d259:	89 14 85 00 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3000],edx
c000d260:	40                   	inc    eax
c000d261:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c000d266:	83 f8 17             	cmp    eax,0x17
c000d269:	7e 0d                	jle    c000d278 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d26b:	c7 44 24 04 c3 3f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023fc3
c000d273:	e9 6e 2d 00 00       	jmp    c000ffe6 <KePanic(char const*)>
c000d278:	c3                   	ret    

c000d279 <KeExecuteAtexit()>:
c000d279:	53                   	push   ebx
c000d27a:	31 db                	xor    ebx,ebx
c000d27c:	83 ec 08             	sub    esp,0x8
c000d27f:	39 1d e0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe0,ebx
c000d285:	7e 50                	jle    c000d2d7 <KeExecuteAtexit()+0x5e>
c000d287:	8b 04 9d 60 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2fa0]
c000d28e:	85 c0                	test   eax,eax
c000d290:	74 42                	je     c000d2d4 <KeExecuteAtexit()+0x5b>
c000d292:	51                   	push   ecx
c000d293:	50                   	push   eax
c000d294:	53                   	push   ebx
c000d295:	68 dc 3f 02 c0       	push   0xc0023fdc
c000d29a:	e8 dd 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d29f:	58                   	pop    eax
c000d2a0:	ff 34 9d 00 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd3000]
c000d2a7:	ff 14 9d 60 d0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd2fa0]
c000d2ae:	c7 04 24 fe 3f 02 c0 	mov    DWORD PTR [esp],0xc0023ffe
c000d2b5:	e8 c2 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d2ba:	c7 04 24 08 47 02 c0 	mov    DWORD PTR [esp],0xc0024708
c000d2c1:	c7 04 9d 60 d0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd2fa0],0x0
c000d2cc:	e8 ab 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d2d1:	83 c4 10             	add    esp,0x10
c000d2d4:	43                   	inc    ebx
c000d2d5:	eb a8                	jmp    c000d27f <KeExecuteAtexit()+0x6>
c000d2d7:	83 c4 08             	add    esp,0x8
c000d2da:	5b                   	pop    ebx
c000d2db:	c3                   	ret    

c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d2dc:	8b 15 c0 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0c0
c000d2e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2e6:	21 d0                	and    eax,edx
c000d2e8:	0f 95 c0             	setne  al
c000d2eb:	c3                   	ret    

c000d2ec <KeInitialiseBootConfigurationFlags()>:
c000d2ec:	b8 00 05 00 00       	mov    eax,0x500
c000d2f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2f3:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c000d2f8:	90                   	nop
c000d2f9:	c3                   	ret    

c000d2fa <KeDisplaySplashScreen()>:
c000d2fa:	53                   	push   ebx
c000d2fb:	bb 01 00 00 00       	mov    ebx,0x1
c000d300:	83 ec 08             	sub    esp,0x8
c000d303:	43                   	inc    ebx
c000d304:	0f be 83 01 40 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdbfff]
c000d30b:	85 c0                	test   eax,eax
c000d30d:	74 15                	je     c000d324 <KeDisplaySplashScreen()+0x2a>
c000d30f:	83 ec 0c             	sub    esp,0xc
c000d312:	6a 01                	push   0x1
c000d314:	53                   	push   ebx
c000d315:	6a 00                	push   0x0
c000d317:	6a 0f                	push   0xf
c000d319:	50                   	push   eax
c000d31a:	e8 f5 e5 00 00       	call   c001b914 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d31f:	83 c4 20             	add    esp,0x20
c000d322:	eb df                	jmp    c000d303 <KeDisplaySplashScreen()+0x9>
c000d324:	83 c4 08             	add    esp,0x8
c000d327:	5b                   	pop    ebx
c000d328:	c3                   	ret    

c000d329 <KeSetBootMessage(char const*)>:
c000d329:	57                   	push   edi
c000d32a:	56                   	push   esi
c000d32b:	53                   	push   ebx
c000d32c:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d332:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d339:	68 9e 00 00 00       	push   0x9e
c000d33e:	6a 00                	push   0x0
c000d340:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d344:	56                   	push   esi
c000d345:	e8 a6 31 ff ff       	call   c00004f0 <memset>
c000d34a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d34d:	e8 1e 32 ff ff       	call   c0000570 <strlen>
c000d352:	ba 50 00 00 00       	mov    edx,0x50
c000d357:	83 c4 10             	add    esp,0x10
c000d35a:	29 c2                	sub    edx,eax
c000d35c:	31 c9                	xor    ecx,ecx
c000d35e:	83 e2 fe             	and    edx,0xfffffffe
c000d361:	01 f2                	add    edx,esi
c000d363:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d368:	84 c0                	test   al,al
c000d36a:	74 0a                	je     c000d376 <KeSetBootMessage(char const*)+0x4d>
c000d36c:	80 cc 07             	or     ah,0x7
c000d36f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d373:	41                   	inc    ecx
c000d374:	eb ed                	jmp    c000d363 <KeSetBootMessage(char const*)+0x3a>
c000d376:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d37b:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d380:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d382:	50                   	push   eax
c000d383:	50                   	push   eax
c000d384:	53                   	push   ebx
c000d385:	68 16 40 02 c0       	push   0xc0024016
c000d38a:	e8 ed 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d38f:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d395:	5b                   	pop    ebx
c000d396:	5e                   	pop    esi
c000d397:	5f                   	pop    edi
c000d398:	c3                   	ret    

c000d399 <__cxa_atexit>:
c000d399:	31 c0                	xor    eax,eax
c000d39b:	c3                   	ret    

c000d39c <__cxa_finalize>:
c000d39c:	c3                   	ret    

c000d39d <__stack_chk_fail>:
c000d39d:	55                   	push   ebp
c000d39e:	89 e5                	mov    ebp,esp
c000d3a0:	83 ec 10             	sub    esp,0x10
c000d3a3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d3a6:	68 24 40 02 c0       	push   0xc0024024
c000d3ab:	e8 cc 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d3b0:	58                   	pop    eax
c000d3b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d3b4:	5a                   	pop    edx
c000d3b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d3b8:	68 24 40 02 c0       	push   0xc0024024
c000d3bd:	e8 ba 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d3c2:	c7 04 24 2c 40 02 c0 	mov    DWORD PTR [esp],0xc002402c
c000d3c9:	e8 18 2c 00 00       	call   c000ffe6 <KePanic(char const*)>
c000d3ce:	83 c4 10             	add    esp,0x10
c000d3d1:	c9                   	leave  
c000d3d2:	c3                   	ret    

c000d3d3 <__cxa_pure_virtual>:
c000d3d3:	83 ec 18             	sub    esp,0x18
c000d3d6:	68 44 40 02 c0       	push   0xc0024044
c000d3db:	e8 06 2c 00 00       	call   c000ffe6 <KePanic(char const*)>
c000d3e0:	83 c4 1c             	add    esp,0x1c
c000d3e3:	c3                   	ret    

c000d3e4 <operator new[](unsigned long)>:
c000d3e4:	e9 a6 27 00 00       	jmp    c000fb8f <malloc>

c000d3e9 <operator delete(void*, unsigned long)>:
c000d3e9:	e9 c1 27 00 00       	jmp    c000fbaf <rfree>

c000d3ee <operator delete[](void*)>:
c000d3ee:	e9 bc 27 00 00       	jmp    c000fbaf <rfree>

c000d3f3 <operator delete[](void*, unsigned long)>:
c000d3f3:	e9 b7 27 00 00       	jmp    c000fbaf <rfree>

c000d3f8 <CUnlockScheduler>:
c000d3f8:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000d400:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000d405:	85 c0                	test   eax,eax
c000d407:	75 03                	jne    c000d40c <CUnlockScheduler+0x14>
c000d409:	fb                   	sti    
c000d40a:	66 90                	xchg   ax,ax
c000d40c:	90                   	nop
c000d40d:	c3                   	ret    
c000d40e:	66 90                	xchg   ax,ax

c000d410 <CLockScheduler>:
c000d410:	fa                   	cli    
c000d411:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000d416:	83 c0 01             	add    eax,0x1
c000d419:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000d41e:	90                   	nop
c000d41f:	c3                   	ret    

c000d420 <CPrintf>:
c000d420:	83 ec 0c             	sub    esp,0xc
c000d423:	83 ec 08             	sub    esp,0x8
c000d426:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d42a:	68 57 40 02 c0       	push   0xc0024057
c000d42f:	e8 48 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d434:	83 c4 10             	add    esp,0x10
c000d437:	90                   	nop
c000d438:	83 c4 0c             	add    esp,0xc
c000d43b:	c3                   	ret    

c000d43c <CmOpen(char const*)>:
c000d43c:	57                   	push   edi
c000d43d:	56                   	push   esi
c000d43e:	53                   	push   ebx
c000d43f:	83 ec 1c             	sub    esp,0x1c
c000d442:	6a 30                	push   0x30
c000d444:	e8 46 27 00 00       	call   c000fb8f <malloc>
c000d449:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d450:	89 c3                	mov    ebx,eax
c000d452:	e8 38 27 00 00       	call   c000fb8f <malloc>
c000d457:	83 c4 0c             	add    esp,0xc
c000d45a:	89 c6                	mov    esi,eax
c000d45c:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000d462:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d466:	50                   	push   eax
c000d467:	e8 1e ad ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d46c:	83 c4 0c             	add    esp,0xc
c000d46f:	89 33                	mov    DWORD PTR [ebx],esi
c000d471:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d475:	50                   	push   eax
c000d476:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d47a:	50                   	push   eax
c000d47b:	56                   	push   esi
c000d47c:	e8 29 b0 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c000d481:	5a                   	pop    edx
c000d482:	59                   	pop    ecx
c000d483:	6a 01                	push   0x1
c000d485:	ff 33                	push   DWORD PTR [ebx]
c000d487:	e8 1c ad ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d48c:	5e                   	pop    esi
c000d48d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d491:	e8 f9 26 00 00       	call   c000fb8f <malloc>
c000d496:	5a                   	pop    edx
c000d497:	89 c7                	mov    edi,eax
c000d499:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d49d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d49f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4a1:	56                   	push   esi
c000d4a2:	57                   	push   edi
c000d4a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d4a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d4ab:	50                   	push   eax
c000d4ac:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d4af:	83 c4 14             	add    esp,0x14
c000d4b2:	ff 33                	push   DWORD PTR [ebx]
c000d4b4:	e8 4d ad ff ff       	call   c0008206 <File::close()>
c000d4b9:	59                   	pop    ecx
c000d4ba:	58                   	pop    eax
c000d4bb:	6a 13                	push   0x13
c000d4bd:	ff 33                	push   DWORD PTR [ebx]
c000d4bf:	e8 e4 ac ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d4c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4c6:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4c8:	89 34 24             	mov    DWORD PTR [esp],esi
c000d4cb:	57                   	push   edi
c000d4cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d4d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d4d4:	50                   	push   eax
c000d4d5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d4d8:	83 c4 14             	add    esp,0x14
c000d4db:	57                   	push   edi
c000d4dc:	e8 be 26 00 00       	call   c000fb9f <free>
c000d4e1:	83 c4 10             	add    esp,0x10
c000d4e4:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d4e7:	75 10                	jne    c000d4f9 <CmOpen(char const*)+0xbd>
c000d4e9:	83 ec 0c             	sub    esp,0xc
c000d4ec:	68 5a 40 02 c0       	push   0xc002405a
c000d4f1:	e8 f0 2a 00 00       	call   c000ffe6 <KePanic(char const*)>
c000d4f6:	83 c4 10             	add    esp,0x10
c000d4f9:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d4fc:	50                   	push   eax
c000d4fd:	6a 00                	push   0x0
c000d4ff:	6a 00                	push   0x0
c000d501:	ff 33                	push   DWORD PTR [ebx]
c000d503:	e8 5e ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d508:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d50a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d50c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d50f:	57                   	push   edi
c000d510:	6a 00                	push   0x0
c000d512:	6a 2b                	push   0x2b
c000d514:	50                   	push   eax
c000d515:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d518:	83 c4 1c             	add    esp,0x1c
c000d51b:	6a 00                	push   0x0
c000d51d:	6a 00                	push   0x0
c000d51f:	ff 33                	push   DWORD PTR [ebx]
c000d521:	e8 40 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d526:	83 c4 0c             	add    esp,0xc
c000d529:	6a 08                	push   0x8
c000d52b:	68 6b 40 02 c0       	push   0xc002406b
c000d530:	57                   	push   edi
c000d531:	e8 4a 2e ff ff       	call   c0000380 <memcmp>
c000d536:	83 c4 10             	add    esp,0x10
c000d539:	85 c0                	test   eax,eax
c000d53b:	74 10                	je     c000d54d <CmOpen(char const*)+0x111>
c000d53d:	83 ec 0c             	sub    esp,0xc
c000d540:	68 74 40 02 c0       	push   0xc0024074
c000d545:	e8 9c 2a 00 00       	call   c000ffe6 <KePanic(char const*)>
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d551:	89 d8                	mov    eax,ebx
c000d553:	83 c4 10             	add    esp,0x10
c000d556:	5b                   	pop    ebx
c000d557:	5e                   	pop    esi
c000d558:	5f                   	pop    edi
c000d559:	c3                   	ret    

c000d55a <CmClose(Reghive_Tag*)>:
c000d55a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d55e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d562:	74 0b                	je     c000d56f <CmClose(Reghive_Tag*)+0x15>
c000d564:	8b 00                	mov    eax,DWORD PTR [eax]
c000d566:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d56a:	e9 97 ac ff ff       	jmp    c0008206 <File::close()>
c000d56f:	c3                   	ret    

c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d570:	53                   	push   ebx
c000d571:	83 ec 18             	sub    esp,0x18
c000d574:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d578:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d57c:	74 29                	je     c000d5a7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d57e:	50                   	push   eax
c000d57f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d584:	99                   	cdq    
c000d585:	52                   	push   edx
c000d586:	50                   	push   eax
c000d587:	ff 33                	push   DWORD PTR [ebx]
c000d589:	e8 d8 ac ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d58e:	5a                   	pop    edx
c000d58f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d591:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d595:	8b 10                	mov    edx,DWORD PTR [eax]
c000d597:	51                   	push   ecx
c000d598:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d59c:	6a 00                	push   0x0
c000d59e:	6a 2b                	push   0x2b
c000d5a0:	50                   	push   eax
c000d5a1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d5a4:	83 c4 20             	add    esp,0x20
c000d5a7:	83 c4 18             	add    esp,0x18
c000d5aa:	5b                   	pop    ebx
c000d5ab:	c3                   	ret    

c000d5ac <CmGetString(Reghive_Tag*, int, char*)>:
c000d5ac:	55                   	push   ebp
c000d5ad:	57                   	push   edi
c000d5ae:	56                   	push   esi
c000d5af:	53                   	push   ebx
c000d5b0:	31 db                	xor    ebx,ebx
c000d5b2:	83 ec 70             	sub    esp,0x70
c000d5b5:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d5bc:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d5c0:	50                   	push   eax
c000d5c1:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d5c8:	55                   	push   ebp
c000d5c9:	e8 a2 ff ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5ce:	83 c4 10             	add    esp,0x10
c000d5d1:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d5d6:	c1 e0 08             	shl    eax,0x8
c000d5d9:	89 c2                	mov    edx,eax
c000d5db:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d5e0:	09 d0                	or     eax,edx
c000d5e2:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d5e7:	c1 e0 08             	shl    eax,0x8
c000d5ea:	09 d0                	or     eax,edx
c000d5ec:	74 25                	je     c000d613 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d5ee:	6b fb 0d             	imul   edi,ebx,0xd
c000d5f1:	52                   	push   edx
c000d5f2:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d5f6:	52                   	push   edx
c000d5f7:	50                   	push   eax
c000d5f8:	55                   	push   ebp
c000d5f9:	e8 72 ff ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5fe:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d602:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d609:	b9 27 00 00 00       	mov    ecx,0x27
c000d60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d610:	83 c4 10             	add    esp,0x10
c000d613:	83 c3 03             	add    ebx,0x3
c000d616:	83 fb 15             	cmp    ebx,0x15
c000d619:	75 b6                	jne    c000d5d1 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d61b:	83 c4 6c             	add    esp,0x6c
c000d61e:	5b                   	pop    ebx
c000d61f:	5e                   	pop    esi
c000d620:	5f                   	pop    edi
c000d621:	5d                   	pop    ebp
c000d622:	c3                   	ret    

c000d623 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d623:	83 ec 40             	sub    esp,0x40
c000d626:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d62a:	50                   	push   eax
c000d62b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d62f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d633:	e8 38 ff ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d638:	83 c4 10             	add    esp,0x10
c000d63b:	83 c8 ff             	or     eax,0xffffffff
c000d63e:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d643:	75 19                	jne    c000d65e <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d645:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d64a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d64f:	c1 e0 08             	shl    eax,0x8
c000d652:	09 c2                	or     edx,eax
c000d654:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d659:	c1 e0 10             	shl    eax,0x10
c000d65c:	09 d0                	or     eax,edx
c000d65e:	83 c4 3c             	add    esp,0x3c
c000d661:	c3                   	ret    

c000d662 <CmGetNext(Reghive_Tag*, int)>:
c000d662:	83 ec 40             	sub    esp,0x40
c000d665:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d669:	50                   	push   eax
c000d66a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d66e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d672:	e8 f9 fe ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d677:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d67c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d681:	c1 e0 08             	shl    eax,0x8
c000d684:	09 c2                	or     edx,eax
c000d686:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d68b:	83 c4 4c             	add    esp,0x4c
c000d68e:	c1 e0 10             	shl    eax,0x10
c000d691:	09 d0                	or     eax,edx
c000d693:	c3                   	ret    

c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d694:	53                   	push   ebx
c000d695:	83 ec 18             	sub    esp,0x18
c000d698:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d69c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d6a0:	74 29                	je     c000d6cb <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d6a2:	50                   	push   eax
c000d6a3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d6a8:	99                   	cdq    
c000d6a9:	52                   	push   edx
c000d6aa:	50                   	push   eax
c000d6ab:	ff 33                	push   DWORD PTR [ebx]
c000d6ad:	e8 b4 ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d6b2:	5a                   	pop    edx
c000d6b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6b5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d6b9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6bb:	51                   	push   ecx
c000d6bc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d6c0:	6a 00                	push   0x0
c000d6c2:	6a 2b                	push   0x2b
c000d6c4:	50                   	push   eax
c000d6c5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d6c8:	83 c4 20             	add    esp,0x20
c000d6cb:	83 c4 18             	add    esp,0x18
c000d6ce:	5b                   	pop    ebx
c000d6cf:	c3                   	ret    

c000d6d0 <CmFreeExtent(Reghive_Tag*, int)>:
c000d6d0:	53                   	push   ebx
c000d6d1:	83 ec 3c             	sub    esp,0x3c
c000d6d4:	6a 2b                	push   0x2b
c000d6d6:	6a 00                	push   0x0
c000d6d8:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d6dc:	53                   	push   ebx
c000d6dd:	e8 0e 2e ff ff       	call   c00004f0 <memset>
c000d6e2:	83 c4 0c             	add    esp,0xc
c000d6e5:	53                   	push   ebx
c000d6e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d6ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d6ee:	e8 a1 ff ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d6f3:	83 c4 48             	add    esp,0x48
c000d6f6:	5b                   	pop    ebx
c000d6f7:	c3                   	ret    

c000d6f8 <CmUpdateHeader(Reghive_Tag*)>:
c000d6f8:	83 ec 0c             	sub    esp,0xc
c000d6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ff:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d703:	74 10                	je     c000d715 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d705:	52                   	push   edx
c000d706:	8d 50 05             	lea    edx,[eax+0x5]
c000d709:	52                   	push   edx
c000d70a:	6a 00                	push   0x0
c000d70c:	50                   	push   eax
c000d70d:	e8 82 ff ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d712:	83 c4 10             	add    esp,0x10
c000d715:	83 c4 0c             	add    esp,0xc
c000d718:	c3                   	ret    

c000d719 <CmExpand(Reghive_Tag*, int)>:
c000d719:	57                   	push   edi
c000d71a:	56                   	push   esi
c000d71b:	83 ce ff             	or     esi,0xffffffff
c000d71e:	53                   	push   ebx
c000d71f:	83 ec 30             	sub    esp,0x30
c000d722:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d726:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d72a:	74 5f                	je     c000d78b <CmExpand(Reghive_Tag*, int)+0x72>
c000d72c:	31 d2                	xor    edx,edx
c000d72e:	31 f6                	xor    esi,esi
c000d730:	50                   	push   eax
c000d731:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d735:	52                   	push   edx
c000d736:	50                   	push   eax
c000d737:	ff 33                	push   DWORD PTR [ebx]
c000d739:	e8 28 ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d73e:	83 c4 0c             	add    esp,0xc
c000d741:	6a 2b                	push   0x2b
c000d743:	6a 00                	push   0x0
c000d745:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d749:	57                   	push   edi
c000d74a:	e8 a1 2d ff ff       	call   c00004f0 <memset>
c000d74f:	83 c4 10             	add    esp,0x10
c000d752:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d756:	7d 1b                	jge    c000d773 <CmExpand(Reghive_Tag*, int)+0x5a>
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d75d:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d761:	8b 10                	mov    edx,DWORD PTR [eax]
c000d763:	46                   	inc    esi
c000d764:	51                   	push   ecx
c000d765:	57                   	push   edi
c000d766:	6a 00                	push   0x0
c000d768:	6a 2b                	push   0x2b
c000d76a:	50                   	push   eax
c000d76b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d76e:	83 c4 20             	add    esp,0x20
c000d771:	eb df                	jmp    c000d752 <CmExpand(Reghive_Tag*, int)+0x39>
c000d773:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d777:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d77a:	83 ec 0c             	sub    esp,0xc
c000d77d:	01 f2                	add    edx,esi
c000d77f:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d782:	53                   	push   ebx
c000d783:	e8 70 ff ff ff       	call   c000d6f8 <CmUpdateHeader(Reghive_Tag*)>
c000d788:	83 c4 10             	add    esp,0x10
c000d78b:	83 c4 30             	add    esp,0x30
c000d78e:	89 f0                	mov    eax,esi
c000d790:	5b                   	pop    ebx
c000d791:	5e                   	pop    esi
c000d792:	5f                   	pop    edi
c000d793:	c3                   	ret    

c000d794 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d794:	55                   	push   ebp
c000d795:	57                   	push   edi
c000d796:	56                   	push   esi
c000d797:	53                   	push   ebx
c000d798:	83 cb ff             	or     ebx,0xffffffff
c000d79b:	83 ec 1c             	sub    esp,0x1c
c000d79e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d7a2:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d7a6:	74 68                	je     c000d810 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d7a8:	be 2b 00 00 00       	mov    esi,0x2b
c000d7ad:	51                   	push   ecx
c000d7ae:	31 ff                	xor    edi,edi
c000d7b0:	6a 00                	push   0x0
c000d7b2:	31 db                	xor    ebx,ebx
c000d7b4:	6a 00                	push   0x0
c000d7b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d7b9:	e8 a8 aa ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d7be:	83 c4 10             	add    esp,0x10
c000d7c1:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d7c4:	76 3b                	jbe    c000d801 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d7c6:	83 ec 0c             	sub    esp,0xc
c000d7c9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7cc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d7d0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7d2:	51                   	push   ecx
c000d7d3:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d7d7:	51                   	push   ecx
c000d7d8:	6a 00                	push   0x0
c000d7da:	6a 01                	push   0x1
c000d7dc:	50                   	push   eax
c000d7dd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d7e0:	83 c4 20             	add    esp,0x20
c000d7e3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d7e8:	74 26                	je     c000d810 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d7ea:	43                   	inc    ebx
c000d7eb:	52                   	push   edx
c000d7ec:	57                   	push   edi
c000d7ed:	56                   	push   esi
c000d7ee:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d7f1:	e8 70 aa ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d7f6:	83 c6 2b             	add    esi,0x2b
c000d7f9:	83 d7 00             	adc    edi,0x0
c000d7fc:	83 c4 10             	add    esp,0x10
c000d7ff:	eb c0                	jmp    c000d7c1 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d801:	50                   	push   eax
c000d802:	50                   	push   eax
c000d803:	6a 40                	push   0x40
c000d805:	55                   	push   ebp
c000d806:	e8 0e ff ff ff       	call   c000d719 <CmExpand(Reghive_Tag*, int)>
c000d80b:	83 c4 10             	add    esp,0x10
c000d80e:	89 c3                	mov    ebx,eax
c000d810:	83 c4 1c             	add    esp,0x1c
c000d813:	89 d8                	mov    eax,ebx
c000d815:	5b                   	pop    ebx
c000d816:	5e                   	pop    esi
c000d817:	5f                   	pop    edi
c000d818:	5d                   	pop    ebp
c000d819:	c3                   	ret    

c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d81a:	55                   	push   ebp
c000d81b:	57                   	push   edi
c000d81c:	56                   	push   esi
c000d81d:	53                   	push   ebx
c000d81e:	81 ec 88 00 00 00    	sub    esp,0x88
c000d824:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d82b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d832:	e8 5d ff ff ff       	call   c000d794 <CmFindUnusedExtent(Reghive_Tag*)>
c000d837:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d83b:	83 c4 0c             	add    esp,0xc
c000d83e:	6a 2b                	push   0x2b
c000d840:	6a 00                	push   0x0
c000d842:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d846:	55                   	push   ebp
c000d847:	e8 a4 2c ff ff       	call   c00004f0 <memset>
c000d84c:	83 c4 10             	add    esp,0x10
c000d84f:	85 db                	test   ebx,ebx
c000d851:	74 12                	je     c000d865 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d853:	51                   	push   ecx
c000d854:	55                   	push   ebp
c000d855:	53                   	push   ebx
c000d856:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d85d:	e8 0e fd ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d862:	83 c4 10             	add    esp,0x10
c000d865:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d869:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d870:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d875:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d877:	85 db                	test   ebx,ebx
c000d879:	74 49                	je     c000d8c4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d87b:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d880:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d885:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d889:	c1 e0 08             	shl    eax,0x8
c000d88c:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d892:	09 c8                	or     eax,ecx
c000d894:	74 11                	je     c000d8a7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d896:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d89a:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d89e:	c1 e8 10             	shr    eax,0x10
c000d8a1:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d8a5:	eb 0f                	jmp    c000d8b6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d8a7:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d8ac:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d8b1:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d8b6:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d8ba:	c1 ea 08             	shr    edx,0x8
c000d8bd:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d8c2:	eb 0f                	jmp    c000d8d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d8c4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d8c9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d8ce:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d8d3:	52                   	push   edx
c000d8d4:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d8d8:	50                   	push   eax
c000d8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dd:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8e4:	e8 ab fd ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8e9:	83 c4 10             	add    esp,0x10
c000d8ec:	85 db                	test   ebx,ebx
c000d8ee:	74 12                	je     c000d902 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d8f0:	50                   	push   eax
c000d8f1:	55                   	push   ebp
c000d8f2:	53                   	push   ebx
c000d8f3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8fa:	e8 95 fd ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8ff:	83 c4 10             	add    esp,0x10
c000d902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d906:	83 c4 7c             	add    esp,0x7c
c000d909:	5b                   	pop    ebx
c000d90a:	5e                   	pop    esi
c000d90b:	5f                   	pop    edi
c000d90c:	5d                   	pop    ebp
c000d90d:	c3                   	ret    

c000d90e <CmSetString(Reghive_Tag*, int, char const*)>:
c000d90e:	55                   	push   ebp
c000d90f:	57                   	push   edi
c000d910:	56                   	push   esi
c000d911:	53                   	push   ebx
c000d912:	bb 27 00 00 00       	mov    ebx,0x27
c000d917:	81 ec 88 00 00 00    	sub    esp,0x88
c000d91d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d924:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d92b:	e8 40 2c ff ff       	call   c0000570 <strlen>
c000d930:	8d 48 26             	lea    ecx,[eax+0x26]
c000d933:	89 c8                	mov    eax,ecx
c000d935:	99                   	cdq    
c000d936:	f7 fb                	idiv   ebx
c000d938:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d93c:	83 c4 10             	add    esp,0x10
c000d93f:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d945:	7e 10                	jle    c000d957 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d947:	83 ec 0c             	sub    esp,0xc
c000d94a:	68 85 40 02 c0       	push   0xc0024085
c000d94f:	e8 92 26 00 00       	call   c000ffe6 <KePanic(char const*)>
c000d954:	83 c4 10             	add    esp,0x10
c000d957:	31 ff                	xor    edi,edi
c000d959:	50                   	push   eax
c000d95a:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d95e:	53                   	push   ebx
c000d95f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d966:	56                   	push   esi
c000d967:	e8 04 fc ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d973:	89 d0                	mov    eax,edx
c000d975:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d979:	c1 e0 08             	shl    eax,0x8
c000d97c:	09 c2                	or     edx,eax
c000d97e:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d982:	c1 e2 08             	shl    edx,0x8
c000d985:	09 c2                	or     edx,eax
c000d987:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d98b:	7e 76                	jle    c000da03 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d98d:	85 d2                	test   edx,edx
c000d98f:	75 25                	jne    c000d9b6 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d991:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d996:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d99a:	50                   	push   eax
c000d99b:	6a 00                	push   0x0
c000d99d:	6a 00                	push   0x0
c000d99f:	56                   	push   esi
c000d9a0:	e8 75 fe ff ff       	call   c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d9a5:	83 c4 10             	add    esp,0x10
c000d9a8:	89 c2                	mov    edx,eax
c000d9aa:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d9ad:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d9b0:	c1 f8 10             	sar    eax,0x10
c000d9b3:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d9b6:	55                   	push   ebp
c000d9b7:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d9bb:	55                   	push   ebp
c000d9bc:	52                   	push   edx
c000d9bd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d9c1:	56                   	push   esi
c000d9c2:	e8 a9 fb ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9c7:	83 c4 0c             	add    esp,0xc
c000d9ca:	6a 27                	push   0x27
c000d9cc:	6a 00                	push   0x0
c000d9ce:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d9d2:	51                   	push   ecx
c000d9d3:	e8 18 2b ff ff       	call   c00004f0 <memset>
c000d9d8:	83 c4 0c             	add    esp,0xc
c000d9db:	6b c7 27             	imul   eax,edi,0x27
c000d9de:	6a 27                	push   0x27
c000d9e0:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d9e7:	50                   	push   eax
c000d9e8:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d9ec:	51                   	push   ecx
c000d9ed:	e8 8e 2c ff ff       	call   c0000680 <strncpy>
c000d9f2:	83 c4 0c             	add    esp,0xc
c000d9f5:	55                   	push   ebp
c000d9f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d9fa:	52                   	push   edx
c000d9fb:	56                   	push   esi
c000d9fc:	e8 93 fc ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da01:	eb 19                	jmp    c000da1c <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000da03:	85 d2                	test   edx,edx
c000da05:	74 18                	je     c000da1f <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000da07:	51                   	push   ecx
c000da08:	51                   	push   ecx
c000da09:	52                   	push   edx
c000da0a:	56                   	push   esi
c000da0b:	e8 c0 fc ff ff       	call   c000d6d0 <CmFreeExtent(Reghive_Tag*, int)>
c000da10:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000da14:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000da18:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	47                   	inc    edi
c000da20:	83 c3 03             	add    ebx,0x3
c000da23:	83 ff 07             	cmp    edi,0x7
c000da26:	0f 85 43 ff ff ff    	jne    c000d96f <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000da2c:	50                   	push   eax
c000da2d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000da31:	50                   	push   eax
c000da32:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000da39:	56                   	push   esi
c000da3a:	e8 55 fc ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da3f:	81 c4 8c 00 00 00    	add    esp,0x8c
c000da45:	5b                   	pop    ebx
c000da46:	5e                   	pop    esi
c000da47:	5f                   	pop    edi
c000da48:	5d                   	pop    ebp
c000da49:	c3                   	ret    

c000da4a <CmGetMatch(char*, char*, bool, bool*)>:
c000da4a:	56                   	push   esi
c000da4b:	53                   	push   ebx
c000da4c:	50                   	push   eax
c000da4d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000da51:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000da56:	74 25                	je     c000da7d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000da58:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da5b:	31 db                	xor    ebx,ebx
c000da5d:	50                   	push   eax
c000da5e:	50                   	push   eax
c000da5f:	8d 04 9d a0 64 02 c0 	lea    eax,[ebx*4-0x3ffd9b60]
c000da66:	50                   	push   eax
c000da67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6b:	e8 e0 2c ff ff       	call   c0000750 <strcmp>
c000da70:	83 c4 10             	add    esp,0x10
c000da73:	85 c0                	test   eax,eax
c000da75:	74 2e                	je     c000daa5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da77:	43                   	inc    ebx
c000da78:	83 fb 3f             	cmp    ebx,0x3f
c000da7b:	75 e0                	jne    c000da5d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000da7d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da80:	31 db                	xor    ebx,ebx
c000da82:	8d 04 9d a0 64 02 c0 	lea    eax,[ebx*4-0x3ffd9b60]
c000da89:	51                   	push   ecx
c000da8a:	51                   	push   ecx
c000da8b:	50                   	push   eax
c000da8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da90:	e8 bb 2c ff ff       	call   c0000750 <strcmp>
c000da95:	83 c4 10             	add    esp,0x10
c000da98:	85 c0                	test   eax,eax
c000da9a:	74 09                	je     c000daa5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da9c:	43                   	inc    ebx
c000da9d:	83 fb 3f             	cmp    ebx,0x3f
c000daa0:	75 e0                	jne    c000da82 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000daa2:	83 cb ff             	or     ebx,0xffffffff
c000daa5:	89 d8                	mov    eax,ebx
c000daa7:	5a                   	pop    edx
c000daa8:	5b                   	pop    ebx
c000daa9:	5e                   	pop    esi
c000daaa:	c3                   	ret    

c000daab <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000daab:	55                   	push   ebp
c000daac:	31 c0                	xor    eax,eax
c000daae:	57                   	push   edi
c000daaf:	56                   	push   esi
c000dab0:	53                   	push   ebx
c000dab1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dab5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000dab9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000dabb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dabf:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000dac2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dac6:	83 fd 1f             	cmp    ebp,0x1f
c000dac9:	7f 0b                	jg     c000dad6 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000dacb:	0f b6 c2             	movzx  eax,dl
c000dace:	d3 e0                	shl    eax,cl
c000dad0:	09 07                	or     DWORD PTR [edi],eax
c000dad2:	b0 01                	mov    al,0x1
c000dad4:	01 33                	add    DWORD PTR [ebx],esi
c000dad6:	5b                   	pop    ebx
c000dad7:	5e                   	pop    esi
c000dad8:	5f                   	pop    edi
c000dad9:	5d                   	pop    ebp
c000dada:	c3                   	ret    

c000dadb <CmGetShift(unsigned int*, int*, int, bool*)>:
c000dadb:	57                   	push   edi
c000dadc:	56                   	push   esi
c000dadd:	53                   	push   ebx
c000dade:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dae2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000dae6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000daea:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000daee:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000daf0:	7c 17                	jl     c000db09 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000daf2:	8b 17                	mov    edx,DWORD PTR [edi]
c000daf4:	b8 01 00 00 00       	mov    eax,0x1
c000daf9:	d3 e0                	shl    eax,cl
c000dafb:	48                   	dec    eax
c000dafc:	21 d0                	and    eax,edx
c000dafe:	d3 ea                	shr    edx,cl
c000db00:	89 17                	mov    DWORD PTR [edi],edx
c000db02:	29 0b                	sub    DWORD PTR [ebx],ecx
c000db04:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000db07:	eb 05                	jmp    c000db0e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000db09:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000db0c:	31 c0                	xor    eax,eax
c000db0e:	5b                   	pop    ebx
c000db0f:	5e                   	pop    esi
c000db10:	5f                   	pop    edi
c000db11:	c3                   	ret    

c000db12 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000db12:	83 ec 40             	sub    esp,0x40
c000db15:	8d 44 24 09          	lea    eax,[esp+0x9]
c000db19:	50                   	push   eax
c000db1a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db22:	e8 49 fa ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000db2b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000db2f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000db33:	89 10                	mov    DWORD PTR [eax],edx
c000db35:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000db38:	83 c4 4c             	add    esp,0x4c
c000db3b:	c3                   	ret    

c000db3c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000db3c:	55                   	push   ebp
c000db3d:	57                   	push   edi
c000db3e:	56                   	push   esi
c000db3f:	53                   	push   ebx
c000db40:	83 ec 40             	sub    esp,0x40
c000db43:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000db47:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000db4b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000db4f:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000db53:	53                   	push   ebx
c000db54:	56                   	push   esi
c000db55:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000db59:	e8 12 fa ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db5e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000db62:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000db66:	83 c4 0c             	add    esp,0xc
c000db69:	53                   	push   ebx
c000db6a:	56                   	push   esi
c000db6b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000db6f:	e8 20 fb ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000db74:	83 c4 4c             	add    esp,0x4c
c000db77:	5b                   	pop    ebx
c000db78:	5e                   	pop    esi
c000db79:	5f                   	pop    edi
c000db7a:	5d                   	pop    ebp
c000db7b:	c3                   	ret    

c000db7c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000db7c:	55                   	push   ebp
c000db7d:	57                   	push   edi
c000db7e:	56                   	push   esi
c000db7f:	31 f6                	xor    esi,esi
c000db81:	53                   	push   ebx
c000db82:	31 db                	xor    ebx,ebx
c000db84:	83 ec 40             	sub    esp,0x40
c000db87:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000db8f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000db97:	6a 12                	push   0x12
c000db99:	68 ee 00 00 00       	push   0xee
c000db9e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000dba2:	e8 49 29 ff ff       	call   c00004f0 <memset>
c000dba7:	83 c4 10             	add    esp,0x10
c000dbaa:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000dbae:	6a 08                	push   0x8
c000dbb0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dbb4:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000dbb8:	50                   	push   eax
c000dbb9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dbbd:	55                   	push   ebp
c000dbbe:	57                   	push   edi
c000dbbf:	e8 e7 fe ff ff       	call   c000daab <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dbc4:	83 c4 10             	add    esp,0x10
c000dbc7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dbcb:	50                   	push   eax
c000dbcc:	6a 06                	push   0x6
c000dbce:	55                   	push   ebp
c000dbcf:	57                   	push   edi
c000dbd0:	e8 06 ff ff ff       	call   c000dadb <CmGetShift(unsigned int*, int*, int, bool*)>
c000dbd5:	83 c4 10             	add    esp,0x10
c000dbd8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dbdd:	74 07                	je     c000dbe6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000dbdf:	46                   	inc    esi
c000dbe0:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000dbe4:	eb e1                	jmp    c000dbc7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000dbe6:	43                   	inc    ebx
c000dbe7:	83 fb 12             	cmp    ebx,0x12
c000dbea:	75 c2                	jne    c000dbae <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000dbec:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dbf0:	31 db                	xor    ebx,ebx
c000dbf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000dbf5:	50                   	push   eax
c000dbf6:	50                   	push   eax
c000dbf7:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000dbfc:	43                   	inc    ebx
c000dbfd:	8d 04 85 a0 64 02 c0 	lea    eax,[eax*4-0x3ffd9b60]
c000dc04:	50                   	push   eax
c000dc05:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000dc09:	e8 32 2c ff ff       	call   c0000840 <strcat>
c000dc0e:	83 c4 10             	add    esp,0x10
c000dc11:	83 fb 18             	cmp    ebx,0x18
c000dc14:	75 df                	jne    c000dbf5 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000dc16:	83 c4 3c             	add    esp,0x3c
c000dc19:	31 c0                	xor    eax,eax
c000dc1b:	5b                   	pop    ebx
c000dc1c:	5e                   	pop    esi
c000dc1d:	5f                   	pop    edi
c000dc1e:	5d                   	pop    ebp
c000dc1f:	c3                   	ret    

c000dc20 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000dc20:	83 ec 40             	sub    esp,0x40
c000dc23:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dc27:	50                   	push   eax
c000dc28:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dc2c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dc30:	e8 3b f9 ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dc35:	58                   	pop    eax
c000dc36:	5a                   	pop    edx
c000dc37:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dc3b:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dc3f:	50                   	push   eax
c000dc40:	e8 37 ff ff ff       	call   c000db7c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dc45:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dc4a:	83 c4 4c             	add    esp,0x4c
c000dc4d:	c3                   	ret    

c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dc4e:	55                   	push   ebp
c000dc4f:	57                   	push   edi
c000dc50:	56                   	push   esi
c000dc51:	53                   	push   ebx
c000dc52:	31 db                	xor    ebx,ebx
c000dc54:	83 ec 70             	sub    esp,0x70
c000dc57:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dc5e:	6a 30                	push   0x30
c000dc60:	6a 00                	push   0x0
c000dc62:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dc66:	56                   	push   esi
c000dc67:	e8 84 28 ff ff       	call   c00004f0 <memset>
c000dc6c:	83 c4 10             	add    esp,0x10
c000dc6f:	83 ec 0c             	sub    esp,0xc
c000dc72:	57                   	push   edi
c000dc73:	e8 f8 28 ff ff       	call   c0000570 <strlen>
c000dc78:	83 c4 10             	add    esp,0x10
c000dc7b:	39 d8                	cmp    eax,ebx
c000dc7d:	76 16                	jbe    c000dc95 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dc7f:	83 ec 0c             	sub    esp,0xc
c000dc82:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dc86:	50                   	push   eax
c000dc87:	e8 a4 2c ff ff       	call   c0000930 <toupper>
c000dc8c:	83 c4 10             	add    esp,0x10
c000dc8f:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000dc92:	43                   	inc    ebx
c000dc93:	eb da                	jmp    c000dc6f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000dc95:	31 f6                	xor    esi,esi
c000dc97:	52                   	push   edx
c000dc98:	31 ff                	xor    edi,edi
c000dc9a:	6a 18                	push   0x18
c000dc9c:	6a 3f                	push   0x3f
c000dc9e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dca2:	50                   	push   eax
c000dca3:	e8 48 28 ff ff       	call   c00004f0 <memset>
c000dca8:	83 c4 10             	add    esp,0x10
c000dcab:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000dcaf:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000dcb3:	84 c0                	test   al,al
c000dcb5:	0f 84 b0 00 00 00    	je     c000dd6b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dcbb:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dcbf:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000dcc4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000dcc8:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000dccd:	8d 6e 01             	lea    ebp,[esi+0x1]
c000dcd0:	83 ec 0c             	sub    esp,0xc
c000dcd3:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dcd7:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dcdb:	53                   	push   ebx
c000dcdc:	e8 8f 28 ff ff       	call   c0000570 <strlen>
c000dce1:	83 c4 10             	add    esp,0x10
c000dce4:	85 c0                	test   eax,eax
c000dce6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dcea:	74 0b                	je     c000dcf7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dcec:	50                   	push   eax
c000dced:	6a 01                	push   0x1
c000dcef:	53                   	push   ebx
c000dcf0:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dcf4:	50                   	push   eax
c000dcf5:	eb 0a                	jmp    c000dd01 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dcf7:	50                   	push   eax
c000dcf8:	6a 00                	push   0x0
c000dcfa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dcfe:	50                   	push   eax
c000dcff:	6a 00                	push   0x0
c000dd01:	e8 44 fd ff ff       	call   c000da4a <CmGetMatch(char*, char*, bool, bool*)>
c000dd06:	83 c4 10             	add    esp,0x10
c000dd09:	83 f8 ff             	cmp    eax,0xffffffff
c000dd0c:	75 1a                	jne    c000dd28 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dd0e:	83 ec 0c             	sub    esp,0xc
c000dd11:	68 9a 40 02 c0       	push   0xc002409a
c000dd16:	e8 cb 22 00 00       	call   c000ffe6 <KePanic(char const*)>
c000dd1b:	83 c4 10             	add    esp,0x10
c000dd1e:	b8 02 00 00 00       	mov    eax,0x2
c000dd23:	e9 bc 00 00 00       	jmp    c000dde4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd28:	83 ff 18             	cmp    edi,0x18
c000dd2b:	75 1a                	jne    c000dd47 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dd2d:	83 ec 0c             	sub    esp,0xc
c000dd30:	68 af 40 02 c0       	push   0xc00240af
c000dd35:	e8 ac 22 00 00       	call   c000ffe6 <KePanic(char const*)>
c000dd3a:	83 c4 10             	add    esp,0x10
c000dd3d:	b8 01 00 00 00       	mov    eax,0x1
c000dd42:	e9 9d 00 00 00       	jmp    c000dde4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd47:	47                   	inc    edi
c000dd48:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dd4d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dd51:	74 02                	je     c000dd55 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dd53:	89 ee                	mov    esi,ebp
c000dd55:	83 ec 0c             	sub    esp,0xc
c000dd58:	53                   	push   ebx
c000dd59:	e8 12 28 ff ff       	call   c0000570 <strlen>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	85 c0                	test   eax,eax
c000dd63:	74 06                	je     c000dd6b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dd65:	46                   	inc    esi
c000dd66:	e9 40 ff ff ff       	jmp    c000dcab <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dd6b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dd73:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dd7b:	31 f6                	xor    esi,esi
c000dd7d:	50                   	push   eax
c000dd7e:	31 ff                	xor    edi,edi
c000dd80:	6a 12                	push   0x12
c000dd82:	68 ee 00 00 00       	push   0xee
c000dd87:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dd8e:	e8 5d 27 ff ff       	call   c00004f0 <memset>
c000dd93:	83 c4 10             	add    esp,0x10
c000dd96:	83 fe 17             	cmp    esi,0x17
c000dd99:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dd9d:	7e 26                	jle    c000ddc5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dd9f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dda3:	50                   	push   eax
c000dda4:	6a 08                	push   0x8
c000dda6:	55                   	push   ebp
c000dda7:	53                   	push   ebx
c000dda8:	e8 2e fd ff ff       	call   c000dadb <CmGetShift(unsigned int*, int*, int, bool*)>
c000ddad:	83 c4 10             	add    esp,0x10
c000ddb0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ddb5:	74 26                	je     c000dddd <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000ddb7:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000ddbe:	4e                   	dec    esi
c000ddbf:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000ddc2:	47                   	inc    edi
c000ddc3:	eb 1c                	jmp    c000dde1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000ddc5:	6a 06                	push   0x6
c000ddc7:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000ddcc:	50                   	push   eax
c000ddcd:	55                   	push   ebp
c000ddce:	53                   	push   ebx
c000ddcf:	e8 d7 fc ff ff       	call   c000daab <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000ddd4:	83 c4 10             	add    esp,0x10
c000ddd7:	84 c0                	test   al,al
c000ddd9:	75 06                	jne    c000dde1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dddb:	eb c2                	jmp    c000dd9f <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dddd:	31 c0                	xor    eax,eax
c000dddf:	eb 03                	jmp    c000dde4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dde1:	46                   	inc    esi
c000dde2:	eb b2                	jmp    c000dd96 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000dde4:	83 c4 6c             	add    esp,0x6c
c000dde7:	5b                   	pop    ebx
c000dde8:	5e                   	pop    esi
c000dde9:	5f                   	pop    edi
c000ddea:	5d                   	pop    ebp
c000ddeb:	c3                   	ret    

c000ddec <CmCreateString(Reghive_Tag*, int, char const*)>:
c000ddec:	53                   	push   ebx
c000dded:	83 ec 3c             	sub    esp,0x3c
c000ddf0:	6a 2b                	push   0x2b
c000ddf2:	6a 00                	push   0x0
c000ddf4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ddf8:	53                   	push   ebx
c000ddf9:	e8 f2 26 ff ff       	call   c00004f0 <memset>
c000ddfe:	58                   	pop    eax
c000ddff:	5a                   	pop    edx
c000de00:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de04:	50                   	push   eax
c000de05:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de09:	e8 40 fe ff ff       	call   c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de0e:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000de13:	83 c4 0c             	add    esp,0xc
c000de16:	6a 15                	push   0x15
c000de18:	6a 00                	push   0x0
c000de1a:	8d 44 24 27          	lea    eax,[esp+0x27]
c000de1e:	50                   	push   eax
c000de1f:	e8 cc 26 ff ff       	call   c00004f0 <memset>
c000de24:	53                   	push   ebx
c000de25:	6a 00                	push   0x0
c000de27:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de2b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de2f:	e8 e6 f9 ff ff       	call   c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de34:	83 c4 58             	add    esp,0x58
c000de37:	5b                   	pop    ebx
c000de38:	c3                   	ret    

c000de39 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000de39:	56                   	push   esi
c000de3a:	53                   	push   ebx
c000de3b:	83 ec 48             	sub    esp,0x48
c000de3e:	6a 12                	push   0x12
c000de40:	68 ff 00 00 00       	push   0xff
c000de45:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000de49:	56                   	push   esi
c000de4a:	e8 a1 26 ff ff       	call   c00004f0 <memset>
c000de4f:	5a                   	pop    edx
c000de50:	59                   	pop    ecx
c000de51:	56                   	push   esi
c000de52:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000de56:	e8 f3 fd ff ff       	call   c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de5b:	83 c4 10             	add    esp,0x10
c000de5e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de62:	85 db                	test   ebx,ebx
c000de64:	74 42                	je     c000dea8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000de66:	50                   	push   eax
c000de67:	8d 44 24 19          	lea    eax,[esp+0x19]
c000de6b:	50                   	push   eax
c000de6c:	53                   	push   ebx
c000de6d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de71:	e8 fa f6 ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de76:	83 c4 0c             	add    esp,0xc
c000de79:	6a 12                	push   0x12
c000de7b:	8d 44 24 21          	lea    eax,[esp+0x21]
c000de7f:	50                   	push   eax
c000de80:	56                   	push   esi
c000de81:	e8 fa 24 ff ff       	call   c0000380 <memcmp>
c000de86:	83 c4 10             	add    esp,0x10
c000de89:	85 c0                	test   eax,eax
c000de8b:	74 1e                	je     c000deab <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000de8d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000de92:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000de97:	c1 e3 08             	shl    ebx,0x8
c000de9a:	09 d8                	or     eax,ebx
c000de9c:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dea1:	c1 e3 10             	shl    ebx,0x10
c000dea4:	09 c3                	or     ebx,eax
c000dea6:	eb ba                	jmp    c000de62 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dea8:	83 cb ff             	or     ebx,0xffffffff
c000deab:	89 d8                	mov    eax,ebx
c000dead:	83 c4 44             	add    esp,0x44
c000deb0:	5b                   	pop    ebx
c000deb1:	5e                   	pop    esi
c000deb2:	c3                   	ret    

c000deb3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000deb3:	57                   	push   edi
c000deb4:	56                   	push   esi
c000deb5:	53                   	push   ebx
c000deb6:	83 ec 34             	sub    esp,0x34
c000deb9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000debd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000dec1:	6a 2b                	push   0x2b
c000dec3:	6a 00                	push   0x0
c000dec5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dec9:	53                   	push   ebx
c000deca:	e8 21 26 ff ff       	call   c00004f0 <memset>
c000decf:	58                   	pop    eax
c000ded0:	5a                   	pop    edx
c000ded1:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ded5:	50                   	push   eax
c000ded6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000deda:	e8 6f fd ff ff       	call   c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dedf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000dee3:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000dee7:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000deeb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000deef:	53                   	push   ebx
c000def0:	6a 00                	push   0x0
c000def2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000def6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000defa:	e8 1b f9 ff ff       	call   c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000deff:	83 c4 50             	add    esp,0x50
c000df02:	5b                   	pop    ebx
c000df03:	5e                   	pop    esi
c000df04:	5f                   	pop    edi
c000df05:	c3                   	ret    

c000df06 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000df06:	55                   	push   ebp
c000df07:	57                   	push   edi
c000df08:	56                   	push   esi
c000df09:	53                   	push   ebx
c000df0a:	83 ec 40             	sub    esp,0x40
c000df0d:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000df11:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000df15:	6a 2b                	push   0x2b
c000df17:	6a 00                	push   0x0
c000df19:	8d 74 24 11          	lea    esi,[esp+0x11]
c000df1d:	56                   	push   esi
c000df1e:	e8 cd 25 ff ff       	call   c00004f0 <memset>
c000df23:	5f                   	pop    edi
c000df24:	89 ef                	mov    edi,ebp
c000df26:	58                   	pop    eax
c000df27:	8d 44 24 11          	lea    eax,[esp+0x11]
c000df2b:	50                   	push   eax
c000df2c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000df30:	e8 19 fd ff ff       	call   c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000df35:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000df3a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000df3f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000df44:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000df49:	83 c4 10             	add    esp,0x10
c000df4c:	85 ed                	test   ebp,ebp
c000df4e:	74 14                	je     c000df64 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000df50:	51                   	push   ecx
c000df51:	51                   	push   ecx
c000df52:	57                   	push   edi
c000df53:	53                   	push   ebx
c000df54:	e8 09 f7 ff ff       	call   c000d662 <CmGetNext(Reghive_Tag*, int)>
c000df59:	83 c4 10             	add    esp,0x10
c000df5c:	85 c0                	test   eax,eax
c000df5e:	74 04                	je     c000df64 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000df60:	89 c7                	mov    edi,eax
c000df62:	eb e8                	jmp    c000df4c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000df64:	56                   	push   esi
c000df65:	6a 00                	push   0x0
c000df67:	57                   	push   edi
c000df68:	53                   	push   ebx
c000df69:	e8 ac f8 ff ff       	call   c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000df6e:	83 c4 0c             	add    esp,0xc
c000df71:	89 c7                	mov    edi,eax
c000df73:	56                   	push   esi
c000df74:	50                   	push   eax
c000df75:	53                   	push   ebx
c000df76:	e8 f5 f5 ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000df7b:	58                   	pop    eax
c000df7c:	5a                   	pop    edx
c000df7d:	6a 6c                	push   0x6c
c000df7f:	6a 00                	push   0x0
c000df81:	6a 00                	push   0x0
c000df83:	68 c0 40 02 c0       	push   0xc00240c0
c000df88:	57                   	push   edi
c000df89:	53                   	push   ebx
c000df8a:	e8 24 ff ff ff       	call   c000deb3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000df8f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000df93:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000df97:	c1 e8 10             	shr    eax,0x10
c000df9a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000df9e:	83 c4 1c             	add    esp,0x1c
c000dfa1:	56                   	push   esi
c000dfa2:	57                   	push   edi
c000dfa3:	53                   	push   ebx
c000dfa4:	e8 eb f6 ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dfa9:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000dfae:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000dfb3:	c1 e0 08             	shl    eax,0x8
c000dfb6:	09 c2                	or     edx,eax
c000dfb8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000dfbd:	83 c4 4c             	add    esp,0x4c
c000dfc0:	c1 e0 10             	shl    eax,0x10
c000dfc3:	5b                   	pop    ebx
c000dfc4:	09 d0                	or     eax,edx
c000dfc6:	5e                   	pop    esi
c000dfc7:	5f                   	pop    edi
c000dfc8:	5d                   	pop    ebp
c000dfc9:	c3                   	ret    

c000dfca <zStrtok(char*, char const*)>:
c000dfca:	55                   	push   ebp
c000dfcb:	57                   	push   edi
c000dfcc:	56                   	push   esi
c000dfcd:	53                   	push   ebx
c000dfce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dfd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dfd6:	85 db                	test   ebx,ebx
c000dfd8:	74 2f                	je     c000e009 <zStrtok(char*, char const*)+0x3f>
c000dfda:	85 c0                	test   eax,eax
c000dfdc:	75 09                	jne    c000dfe7 <zStrtok(char*, char const*)+0x1d>
c000dfde:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c000dfe3:	85 c0                	test   eax,eax
c000dfe5:	74 50                	je     c000e037 <zStrtok(char*, char const*)+0x6d>
c000dfe7:	31 c9                	xor    ecx,ecx
c000dfe9:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000dfed:	74 03                	je     c000dff2 <zStrtok(char*, char const*)+0x28>
c000dfef:	41                   	inc    ecx
c000dff0:	eb f7                	jmp    c000dfe9 <zStrtok(char*, char const*)+0x1f>
c000dff2:	31 d2                	xor    edx,edx
c000dff4:	39 ca                	cmp    edx,ecx
c000dff6:	74 15                	je     c000e00d <zStrtok(char*, char const*)+0x43>
c000dff8:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000dffc:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000dfff:	8d 3c 10             	lea    edi,[eax+edx*1]
c000e002:	39 ee                	cmp    esi,ebp
c000e004:	74 13                	je     c000e019 <zStrtok(char*, char const*)+0x4f>
c000e006:	42                   	inc    edx
c000e007:	eb eb                	jmp    c000dff4 <zStrtok(char*, char const*)+0x2a>
c000e009:	31 c0                	xor    eax,eax
c000e00b:	eb 2a                	jmp    c000e037 <zStrtok(char*, char const*)+0x6d>
c000e00d:	c7 05 c4 d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d0c4,0x0
c000e017:	eb 1e                	jmp    c000e037 <zStrtok(char*, char const*)+0x6d>
c000e019:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000e01c:	39 ce                	cmp    esi,ecx
c000e01e:	75 0a                	jne    c000e02a <zStrtok(char*, char const*)+0x60>
c000e020:	40                   	inc    eax
c000e021:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c000e026:	89 d8                	mov    eax,ebx
c000e028:	eb 0d                	jmp    c000e037 <zStrtok(char*, char const*)+0x6d>
c000e02a:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000e02e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000e031:	89 15 c4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0c4,edx
c000e037:	5b                   	pop    ebx
c000e038:	5e                   	pop    esi
c000e039:	5f                   	pop    edi
c000e03a:	5d                   	pop    ebp
c000e03b:	c3                   	ret    

c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000e03c:	57                   	push   edi
c000e03d:	56                   	push   esi
c000e03e:	53                   	push   ebx
c000e03f:	81 ec 08 01 00 00    	sub    esp,0x108
c000e045:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000e04c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000e053:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e057:	53                   	push   ebx
c000e058:	e8 e3 25 ff ff       	call   c0000640 <strcpy>
c000e05d:	59                   	pop    ecx
c000e05e:	5e                   	pop    esi
c000e05f:	68 0d 50 02 c0       	push   0xc002500d
c000e064:	53                   	push   ebx
c000e065:	bb 01 00 00 00       	mov    ebx,0x1
c000e06a:	e8 5b ff ff ff       	call   c000dfca <zStrtok(char*, char const*)>
c000e06f:	83 c4 10             	add    esp,0x10
c000e072:	85 c0                	test   eax,eax
c000e074:	74 3b                	je     c000e0b1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e076:	52                   	push   edx
c000e077:	50                   	push   eax
c000e078:	6a 01                	push   0x1
c000e07a:	57                   	push   edi
c000e07b:	e8 b9 fd ff ff       	call   c000de39 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000e080:	59                   	pop    ecx
c000e081:	89 c3                	mov    ebx,eax
c000e083:	5e                   	pop    esi
c000e084:	68 0d 50 02 c0       	push   0xc002500d
c000e089:	6a 00                	push   0x0
c000e08b:	e8 3a ff ff ff       	call   c000dfca <zStrtok(char*, char const*)>
c000e090:	83 c4 10             	add    esp,0x10
c000e093:	89 c6                	mov    esi,eax
c000e095:	85 c0                	test   eax,eax
c000e097:	74 18                	je     c000e0b1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e099:	52                   	push   edx
c000e09a:	52                   	push   edx
c000e09b:	53                   	push   ebx
c000e09c:	57                   	push   edi
c000e09d:	e8 81 f5 ff ff       	call   c000d623 <CmEnterDirectory(Reghive_Tag*, int)>
c000e0a2:	83 c4 10             	add    esp,0x10
c000e0a5:	89 c3                	mov    ebx,eax
c000e0a7:	83 f8 ff             	cmp    eax,0xffffffff
c000e0aa:	74 05                	je     c000e0b1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e0ac:	50                   	push   eax
c000e0ad:	56                   	push   esi
c000e0ae:	53                   	push   ebx
c000e0af:	eb c9                	jmp    c000e07a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e0b1:	81 c4 00 01 00 00    	add    esp,0x100
c000e0b7:	89 d8                	mov    eax,ebx
c000e0b9:	5b                   	pop    ebx
c000e0ba:	5e                   	pop    esi
c000e0bb:	5f                   	pop    edi
c000e0bc:	c3                   	ret    

c000e0bd <CmDisplayTree(Reghive_Tag*, int, int)>:
c000e0bd:	55                   	push   ebp
c000e0be:	57                   	push   edi
c000e0bf:	56                   	push   esi
c000e0c0:	53                   	push   ebx
c000e0c1:	83 ec 5c             	sub    esp,0x5c
c000e0c4:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000e0c8:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000e0cc:	85 db                	test   ebx,ebx
c000e0ce:	0f 8e 84 00 00 00    	jle    c000e158 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000e0d4:	31 ed                	xor    ebp,ebp
c000e0d6:	57                   	push   edi
c000e0d7:	6a 32                	push   0x32
c000e0d9:	6a 00                	push   0x0
c000e0db:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000e0df:	57                   	push   edi
c000e0e0:	e8 0b 24 ff ff       	call   c00004f0 <memset>
c000e0e5:	83 c4 0c             	add    esp,0xc
c000e0e8:	57                   	push   edi
c000e0e9:	53                   	push   ebx
c000e0ea:	56                   	push   esi
c000e0eb:	e8 30 fb ff ff       	call   c000dc20 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000e0f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0f4:	83 c4 10             	add    esp,0x10
c000e0f7:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000e0fb:	7d 13                	jge    c000e110 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000e0fd:	83 ec 0c             	sub    esp,0xc
c000e100:	45                   	inc    ebp
c000e101:	68 83 58 02 c0       	push   0xc0025883
c000e106:	e8 71 8e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	eb e7                	jmp    c000e0f7 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000e110:	51                   	push   ecx
c000e111:	57                   	push   edi
c000e112:	53                   	push   ebx
c000e113:	68 c6 40 02 c0       	push   0xc00240c6
c000e118:	e8 5f 8e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000e125:	75 1e                	jne    c000e145 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000e127:	52                   	push   edx
c000e128:	52                   	push   edx
c000e129:	53                   	push   ebx
c000e12a:	56                   	push   esi
c000e12b:	e8 f3 f4 ff ff       	call   c000d623 <CmEnterDirectory(Reghive_Tag*, int)>
c000e130:	83 c4 0c             	add    esp,0xc
c000e133:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000e137:	8d 51 04             	lea    edx,[ecx+0x4]
c000e13a:	52                   	push   edx
c000e13b:	50                   	push   eax
c000e13c:	56                   	push   esi
c000e13d:	e8 7b ff ff ff       	call   c000e0bd <CmDisplayTree(Reghive_Tag*, int, int)>
c000e142:	83 c4 10             	add    esp,0x10
c000e145:	50                   	push   eax
c000e146:	50                   	push   eax
c000e147:	53                   	push   ebx
c000e148:	56                   	push   esi
c000e149:	e8 14 f5 ff ff       	call   c000d662 <CmGetNext(Reghive_Tag*, int)>
c000e14e:	83 c4 10             	add    esp,0x10
c000e151:	89 c3                	mov    ebx,eax
c000e153:	e9 74 ff ff ff       	jmp    c000e0cc <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000e158:	83 c4 5c             	add    esp,0x5c
c000e15b:	5b                   	pop    ebx
c000e15c:	5e                   	pop    esi
c000e15d:	5f                   	pop    edi
c000e15e:	5d                   	pop    ebp
c000e15f:	c3                   	ret    

c000e160 <CmSplitFinalSlashInPlace(char*)>:
c000e160:	53                   	push   ebx
c000e161:	83 ec 14             	sub    esp,0x14
c000e164:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e168:	53                   	push   ebx
c000e169:	e8 02 24 ff ff       	call   c0000570 <strlen>
c000e16e:	83 c4 10             	add    esp,0x10
c000e171:	48                   	dec    eax
c000e172:	85 c0                	test   eax,eax
c000e174:	74 15                	je     c000e18b <CmSplitFinalSlashInPlace(char*)+0x2b>
c000e176:	8d 14 03             	lea    edx,[ebx+eax*1]
c000e179:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000e17d:	75 09                	jne    c000e188 <CmSplitFinalSlashInPlace(char*)+0x28>
c000e17f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000e182:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000e186:	eb 05                	jmp    c000e18d <CmSplitFinalSlashInPlace(char*)+0x2d>
c000e188:	48                   	dec    eax
c000e189:	eb e7                	jmp    c000e172 <CmSplitFinalSlashInPlace(char*)+0x12>
c000e18b:	31 c0                	xor    eax,eax
c000e18d:	83 c4 08             	add    esp,0x8
c000e190:	5b                   	pop    ebx
c000e191:	c3                   	ret    
c000e192:	66 90                	xchg   ax,ax

c000e194 <Krnl::handlePowerButton()>:
c000e194:	83 ec 0c             	sub    esp,0xc
c000e197:	e8 8e 28 00 00       	call   c0010a2a <KeHandlePowerButton()>
c000e19c:	90                   	nop
c000e19d:	83 c4 0c             	add    esp,0xc
c000e1a0:	c3                   	ret    
c000e1a1:	8d 76 00             	lea    esi,[esi+0x0]

c000e1a4 <Krnl::handleSleepButton()>:
c000e1a4:	83 ec 0c             	sub    esp,0xc
c000e1a7:	e8 90 28 00 00       	call   c0010a3c <KeHandleSleepButton()>
c000e1ac:	90                   	nop
c000e1ad:	83 c4 0c             	add    esp,0xc
c000e1b0:	c3                   	ret    
c000e1b1:	90                   	nop

c000e1b2 <Computer::close(int, int, void*)>:
c000e1b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e1b7:	c3                   	ret    

c000e1b8 <Computer::Computer()>:
c000e1b8:	83 ec 0c             	sub    esp,0xc
c000e1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1bf:	83 ec 08             	sub    esp,0x8
c000e1c2:	68 d0 40 02 c0       	push   0xc00240d0
c000e1c7:	50                   	push   eax
c000e1c8:	e8 e9 b9 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000e1cd:	83 c4 10             	add    esp,0x10
c000e1d0:	ba 28 41 02 c0       	mov    edx,0xc0024128
c000e1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1d9:	89 10                	mov    DWORD PTR [eax],edx
c000e1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1df:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1ed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e1f7:	90                   	nop
c000e1f8:	83 c4 0c             	add    esp,0xc
c000e1fb:	c3                   	ret    

c000e1fc <Computer::open(int, int, void*)>:
c000e1fc:	56                   	push   esi
c000e1fd:	53                   	push   ebx
c000e1fe:	83 ec 04             	sub    esp,0x4
c000e201:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e205:	39 1d c8 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c8,ebx
c000e20b:	74 10                	je     c000e21d <Computer::open(int, int, void*)+0x21>
c000e20d:	83 ec 0c             	sub    esp,0xc
c000e210:	68 f4 40 02 c0       	push   0xc00240f4
c000e215:	e8 cc 1d 00 00       	call   c000ffe6 <KePanic(char const*)>
c000e21a:	83 c4 10             	add    esp,0x10
c000e21d:	83 ec 0c             	sub    esp,0xc
c000e220:	68 78 11 00 00       	push   0x1178
c000e225:	e8 65 19 00 00       	call   c000fb8f <malloc>
c000e22a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e22d:	89 c6                	mov    esi,eax
c000e22f:	e8 c2 c7 00 00       	call   c001a9f6 <CPU::CPU()>
c000e234:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e238:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e23e:	50                   	push   eax
c000e23f:	6a 00                	push   0x0
c000e241:	6a 00                	push   0x0
c000e243:	56                   	push   esi
c000e244:	e8 8f c9 00 00       	call   c001abd8 <CPU::open(int, int, void*)>
c000e249:	83 c4 14             	add    esp,0x14
c000e24c:	68 d9 40 02 c0       	push   0xc00240d9
c000e251:	e8 d3 f0 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000e256:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e25d:	e8 2d 19 00 00       	call   c000fb8f <malloc>
c000e262:	89 04 24             	mov    DWORD PTR [esp],eax
c000e265:	89 c6                	mov    esi,eax
c000e267:	e8 04 e6 ff ff       	call   c000c870 <ACPI::ACPI()>
c000e26c:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e272:	5a                   	pop    edx
c000e273:	59                   	pop    ecx
c000e274:	56                   	push   esi
c000e275:	53                   	push   ebx
c000e276:	e8 d9 b7 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e27b:	5e                   	pop    esi
c000e27c:	58                   	pop    eax
c000e27d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e283:	50                   	push   eax
c000e284:	53                   	push   ebx
c000e285:	e8 ca b7 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e28a:	83 c4 14             	add    esp,0x14
c000e28d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e292:	5b                   	pop    ebx
c000e293:	5e                   	pop    esi
c000e294:	c3                   	ret    

c000e295 <KeCalculateCRC32(unsigned char*, int)>:
c000e295:	53                   	push   ebx
c000e296:	83 c8 ff             	or     eax,0xffffffff
c000e299:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e29d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e2a1:	01 cb                	add    ebx,ecx
c000e2a3:	39 d9                	cmp    ecx,ebx
c000e2a5:	74 15                	je     c000e2bc <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e2a7:	41                   	inc    ecx
c000e2a8:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e2ab:	31 c2                	xor    edx,eax
c000e2ad:	c1 e8 08             	shr    eax,0x8
c000e2b0:	0f b6 d2             	movzx  edx,dl
c000e2b3:	33 04 95 a0 65 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9a60]
c000e2ba:	eb e7                	jmp    c000e2a3 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e2bc:	f7 d0                	not    eax
c000e2be:	5b                   	pop    ebx
c000e2bf:	c3                   	ret    

c000e2c0 <EnvVarContainer::getEnv(char const*)>:
c000e2c0:	57                   	push   edi
c000e2c1:	56                   	push   esi
c000e2c2:	53                   	push   ebx
c000e2c3:	31 db                	xor    ebx,ebx
c000e2c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2c9:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e2cb:	7e 2b                	jle    c000e2f8 <EnvVarContainer::getEnv(char const*)+0x38>
c000e2cd:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e2d4:	50                   	push   eax
c000e2d5:	50                   	push   eax
c000e2d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e2d9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e2dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e2e0:	e8 6b 24 ff ff       	call   c0000750 <strcmp>
c000e2e5:	83 c4 10             	add    esp,0x10
c000e2e8:	85 c0                	test   eax,eax
c000e2ea:	75 09                	jne    c000e2f5 <EnvVarContainer::getEnv(char const*)+0x35>
c000e2ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e2ef:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e2f3:	eb 05                	jmp    c000e2fa <EnvVarContainer::getEnv(char const*)+0x3a>
c000e2f5:	43                   	inc    ebx
c000e2f6:	eb d1                	jmp    c000e2c9 <EnvVarContainer::getEnv(char const*)+0x9>
c000e2f8:	31 c0                	xor    eax,eax
c000e2fa:	5b                   	pop    ebx
c000e2fb:	5e                   	pop    esi
c000e2fc:	5f                   	pop    edi
c000e2fd:	c3                   	ret    

c000e2fe <EnvVarContainer::setEnv(char const*, char const*)>:
c000e2fe:	55                   	push   ebp
c000e2ff:	57                   	push   edi
c000e300:	56                   	push   esi
c000e301:	53                   	push   ebx
c000e302:	83 ec 28             	sub    esp,0x28
c000e305:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e309:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e30d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e311:	56                   	push   esi
c000e312:	e8 59 22 ff ff       	call   c0000570 <strlen>
c000e317:	40                   	inc    eax
c000e318:	89 04 24             	mov    DWORD PTR [esp],eax
c000e31b:	e8 6f 18 00 00       	call   c000fb8f <malloc>
c000e320:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e323:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e327:	e8 44 22 ff ff       	call   c0000570 <strlen>
c000e32c:	40                   	inc    eax
c000e32d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e330:	e8 5a 18 00 00       	call   c000fb8f <malloc>
c000e335:	89 34 24             	mov    DWORD PTR [esp],esi
c000e338:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e33c:	e8 2f 22 ff ff       	call   c0000570 <strlen>
c000e341:	83 c4 0c             	add    esp,0xc
c000e344:	40                   	inc    eax
c000e345:	50                   	push   eax
c000e346:	6a 00                	push   0x0
c000e348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e34c:	e8 9f 21 ff ff       	call   c00004f0 <memset>
c000e351:	89 34 24             	mov    DWORD PTR [esp],esi
c000e354:	e8 17 22 ff ff       	call   c0000570 <strlen>
c000e359:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e35d:	8d 48 01             	lea    ecx,[eax+0x1]
c000e360:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e362:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e365:	89 de                	mov    esi,ebx
c000e367:	e8 04 22 ff ff       	call   c0000570 <strlen>
c000e36c:	83 c4 0c             	add    esp,0xc
c000e36f:	40                   	inc    eax
c000e370:	50                   	push   eax
c000e371:	6a 00                	push   0x0
c000e373:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e377:	e8 74 21 ff ff       	call   c00004f0 <memset>
c000e37c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e37f:	e8 ec 21 ff ff       	call   c0000570 <strlen>
c000e384:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e388:	8d 48 01             	lea    ecx,[eax+0x1]
c000e38b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e38d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e390:	40                   	inc    eax
c000e391:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e394:	c1 e0 03             	shl    eax,0x3
c000e397:	5a                   	pop    edx
c000e398:	59                   	pop    ecx
c000e399:	50                   	push   eax
c000e39a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e39d:	e8 d9 17 00 00       	call   c000fb7b <realloc>
c000e3a2:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e3a6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e3a9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e3ac:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e3b0:	b9 08 00 00 00       	mov    ecx,0x8
c000e3b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3b7:	83 c4 2c             	add    esp,0x2c
c000e3ba:	5b                   	pop    ebx
c000e3bb:	5e                   	pop    esi
c000e3bc:	5f                   	pop    edi
c000e3bd:	5d                   	pop    ebp
c000e3be:	c3                   	ret    
c000e3bf:	90                   	nop

c000e3c0 <EnvVarContainer::deleteEnv(char const*)>:
c000e3c0:	c3                   	ret    
c000e3c1:	90                   	nop

c000e3c2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e3c2:	55                   	push   ebp
c000e3c3:	57                   	push   edi
c000e3c4:	56                   	push   esi
c000e3c5:	53                   	push   ebx
c000e3c6:	81 ec 38 01 00 00    	sub    esp,0x138
c000e3cc:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e3d3:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e3da:	68 14 01 00 00       	push   0x114
c000e3df:	e8 ab 17 00 00       	call   c000fb8f <malloc>
c000e3e4:	83 c4 0c             	add    esp,0xc
c000e3e7:	89 c3                	mov    ebx,eax
c000e3e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e3ec:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e3f3:	50                   	push   eax
c000e3f4:	e8 91 9d ff ff       	call   c000818a <File::File(char const*, Process*)>
c000e3f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3fc:	e8 6b a0 ff ff       	call   c000846c <File::exists()>
c000e401:	83 c4 10             	add    esp,0x10
c000e404:	84 c0                	test   al,al
c000e406:	75 31                	jne    c000e439 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e408:	50                   	push   eax
c000e409:	50                   	push   eax
c000e40a:	6a 12                	push   0x12
c000e40c:	53                   	push   ebx
c000e40d:	e8 96 9d ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e412:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e414:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e417:	89 34 24             	mov    DWORD PTR [esp],esi
c000e41a:	e8 51 21 ff ff       	call   c0000570 <strlen>
c000e41f:	5a                   	pop    edx
c000e420:	31 d2                	xor    edx,edx
c000e422:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e426:	51                   	push   ecx
c000e427:	56                   	push   esi
c000e428:	52                   	push   edx
c000e429:	50                   	push   eax
c000e42a:	53                   	push   ebx
c000e42b:	ff d7                	call   edi
c000e42d:	83 c4 14             	add    esp,0x14
c000e430:	53                   	push   ebx
c000e431:	e8 d0 9d ff ff       	call   c0008206 <File::close()>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	56                   	push   esi
c000e43a:	31 f6                	xor    esi,esi
c000e43c:	68 00 01 00 00       	push   0x100
c000e441:	6a 00                	push   0x0
c000e443:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e447:	50                   	push   eax
c000e448:	e8 a3 20 ff ff       	call   c00004f0 <memset>
c000e44d:	5f                   	pop    edi
c000e44e:	58                   	pop    eax
c000e44f:	6a 01                	push   0x1
c000e451:	53                   	push   ebx
c000e452:	e8 51 9d ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e457:	83 c4 10             	add    esp,0x10
c000e45a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e462:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e46a:	83 ec 0c             	sub    esp,0xc
c000e46d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e46f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e473:	51                   	push   ecx
c000e474:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e478:	52                   	push   edx
c000e479:	6a 00                	push   0x0
c000e47b:	6a 01                	push   0x1
c000e47d:	53                   	push   ebx
c000e47e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e481:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e486:	83 c4 20             	add    esp,0x20
c000e489:	89 c2                	mov    edx,eax
c000e48b:	85 c0                	test   eax,eax
c000e48d:	0f 84 36 01 00 00    	je     c000e5c9 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e493:	83 f8 0d             	cmp    eax,0xd
c000e496:	0f 84 22 01 00 00    	je     c000e5be <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e49c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e4a1:	0f 84 f0 00 00 00    	je     c000e597 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e4a7:	83 f8 0a             	cmp    eax,0xa
c000e4aa:	74 13                	je     c000e4bf <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e4ac:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e4b1:	74 0c                	je     c000e4bf <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e4b3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e4b9:	0f 8e f6 00 00 00    	jle    c000e5b5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e4bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4c3:	83 ec 0c             	sub    esp,0xc
c000e4c6:	8d 78 01             	lea    edi,[eax+0x1]
c000e4c9:	57                   	push   edi
c000e4ca:	e8 c0 16 00 00       	call   c000fb8f <malloc>
c000e4cf:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e4d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e4d7:	8d 56 04             	lea    edx,[esi+0x4]
c000e4da:	89 14 24             	mov    DWORD PTR [esp],edx
c000e4dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4e1:	e8 a9 16 00 00       	call   c000fb8f <malloc>
c000e4e6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e4ea:	83 c4 0c             	add    esp,0xc
c000e4ed:	57                   	push   edi
c000e4ee:	6a 00                	push   0x0
c000e4f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e4f4:	e8 f7 1f ff ff       	call   c00004f0 <memset>
c000e4f9:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e4fd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e501:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e505:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e507:	83 c4 0c             	add    esp,0xc
c000e50a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e50e:	52                   	push   edx
c000e50f:	6a 00                	push   0x0
c000e511:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e515:	e8 d6 1f ff ff       	call   c00004f0 <memset>
c000e51a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e51e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e522:	89 34 24             	mov    DWORD PTR [esp],esi
c000e525:	e8 46 20 ff ff       	call   c0000570 <strlen>
c000e52a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e52e:	89 c1                	mov    ecx,eax
c000e530:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e532:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e535:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e538:	40                   	inc    eax
c000e539:	83 c4 10             	add    esp,0x10
c000e53c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e53f:	85 d2                	test   edx,edx
c000e541:	75 0c                	jne    c000e54f <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e543:	83 ec 0c             	sub    esp,0xc
c000e546:	6a 08                	push   0x8
c000e548:	e8 42 16 00 00       	call   c000fb8f <malloc>
c000e54d:	eb 0c                	jmp    c000e55b <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e54f:	c1 e0 03             	shl    eax,0x3
c000e552:	51                   	push   ecx
c000e553:	51                   	push   ecx
c000e554:	50                   	push   eax
c000e555:	52                   	push   edx
c000e556:	e8 20 16 00 00       	call   c000fb7b <realloc>
c000e55b:	83 c4 10             	add    esp,0x10
c000e55e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e561:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e564:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e567:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e56b:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e56f:	b9 08 00 00 00       	mov    ecx,0x8
c000e574:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e576:	31 f6                	xor    esi,esi
c000e578:	50                   	push   eax
c000e579:	68 00 01 00 00       	push   0x100
c000e57e:	6a 00                	push   0x0
c000e580:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e584:	50                   	push   eax
c000e585:	e8 66 1f ff ff       	call   c00004f0 <memset>
c000e58a:	83 c4 10             	add    esp,0x10
c000e58d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e595:	eb 27                	jmp    c000e5be <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e597:	83 f8 3d             	cmp    eax,0x3d
c000e59a:	74 1e                	je     c000e5ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e59c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e5a2:	7f 07                	jg     c000e5ab <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e5a4:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e5a8:	46                   	inc    esi
c000e5a9:	eb 13                	jmp    c000e5be <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5ab:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e5b3:	eb 09                	jmp    c000e5be <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5b5:	83 f8 3d             	cmp    eax,0x3d
c000e5b8:	75 ea                	jne    c000e5a4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e5ba:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e5be:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e5c3:	0f 85 99 fe ff ff    	jne    c000e462 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e5c9:	83 ec 0c             	sub    esp,0xc
c000e5cc:	53                   	push   ebx
c000e5cd:	e8 34 9c ff ff       	call   c0008206 <File::close()>
c000e5d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e5d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e5da:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e5e0:	5b                   	pop    ebx
c000e5e1:	5e                   	pop    esi
c000e5e2:	5f                   	pop    edi
c000e5e3:	5d                   	pop    ebp
c000e5e4:	c3                   	ret    
c000e5e5:	90                   	nop

c000e5e6 <EnvVarContainer::__loadSystem()>:
c000e5e6:	83 ec 10             	sub    esp,0x10
c000e5e9:	68 a0 69 02 c0       	push   0xc00269a0
c000e5ee:	68 4c 41 02 c0       	push   0xc002414c
c000e5f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5f7:	e8 c6 fd ff ff       	call   c000e3c2 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e5fc:	83 c4 1c             	add    esp,0x1c
c000e5ff:	c3                   	ret    

c000e600 <EnvVarContainer::__loadUser()>:
c000e600:	c3                   	ret    
c000e601:	90                   	nop

c000e602 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e606:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e60c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e614:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e617:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e61b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e622:	90                   	nop
c000e623:	c3                   	ret    

c000e624 <EnvVarContainer::~EnvVarContainer()>:
c000e624:	83 ec 0c             	sub    esp,0xc
c000e627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e62e:	85 c0                	test   eax,eax
c000e630:	74 1d                	je     c000e64f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e636:	8b 00                	mov    eax,DWORD PTR [eax]
c000e638:	85 c0                	test   eax,eax
c000e63a:	74 13                	je     c000e64f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e640:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e643:	83 ec 0c             	sub    esp,0xc
c000e646:	50                   	push   eax
c000e647:	e8 53 15 00 00       	call   c000fb9f <free>
c000e64c:	83 c4 10             	add    esp,0x10
c000e64f:	90                   	nop
c000e650:	83 c4 0c             	add    esp,0xc
c000e653:	c3                   	ret    

c000e654 <KeGetEnv(Process*, char const*)>:
c000e654:	53                   	push   ebx
c000e655:	83 ec 08             	sub    esp,0x8
c000e658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e65c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e660:	39 05 58 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa58,eax
c000e666:	74 04                	je     c000e66c <KeGetEnv(Process*, char const*)+0x18>
c000e668:	85 c0                	test   eax,eax
c000e66a:	75 0b                	jne    c000e677 <KeGetEnv(Process*, char const*)+0x23>
c000e66c:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000e671:	85 c0                	test   eax,eax
c000e673:	75 19                	jne    c000e68e <KeGetEnv(Process*, char const*)+0x3a>
c000e675:	eb 27                	jmp    c000e69e <KeGetEnv(Process*, char const*)+0x4a>
c000e677:	52                   	push   edx
c000e678:	52                   	push   edx
c000e679:	53                   	push   ebx
c000e67a:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e680:	e8 3b fc ff ff       	call   c000e2c0 <EnvVarContainer::getEnv(char const*)>
c000e685:	83 c4 10             	add    esp,0x10
c000e688:	85 c0                	test   eax,eax
c000e68a:	75 28                	jne    c000e6b4 <KeGetEnv(Process*, char const*)+0x60>
c000e68c:	eb de                	jmp    c000e66c <KeGetEnv(Process*, char const*)+0x18>
c000e68e:	52                   	push   edx
c000e68f:	52                   	push   edx
c000e690:	53                   	push   ebx
c000e691:	50                   	push   eax
c000e692:	e8 29 fc ff ff       	call   c000e2c0 <EnvVarContainer::getEnv(char const*)>
c000e697:	83 c4 10             	add    esp,0x10
c000e69a:	85 c0                	test   eax,eax
c000e69c:	75 16                	jne    c000e6b4 <KeGetEnv(Process*, char const*)+0x60>
c000e69e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e6a2:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c000e6a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6ab:	83 c4 08             	add    esp,0x8
c000e6ae:	5b                   	pop    ebx
c000e6af:	e9 0c fc ff ff       	jmp    c000e2c0 <EnvVarContainer::getEnv(char const*)>
c000e6b4:	83 c4 08             	add    esp,0x8
c000e6b7:	5b                   	pop    ebx
c000e6b8:	c3                   	ret    

c000e6b9 <KeSetEnvSystem(char const*, char const*)>:
c000e6b9:	83 ec 10             	sub    esp,0x10
c000e6bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6c4:	ff 35 d4 d0 02 c0    	push   DWORD PTR ds:0xc002d0d4
c000e6ca:	e8 2f fc ff ff       	call   c000e2fe <EnvVarContainer::setEnv(char const*, char const*)>
c000e6cf:	83 c4 1c             	add    esp,0x1c
c000e6d2:	c3                   	ret    

c000e6d3 <KeSetEnvUser(char const*, char const*)>:
c000e6d3:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000e6d8:	85 c0                	test   eax,eax
c000e6da:	74 15                	je     c000e6f1 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e6dc:	83 ec 10             	sub    esp,0x10
c000e6df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6e7:	50                   	push   eax
c000e6e8:	e8 11 fc ff ff       	call   c000e2fe <EnvVarContainer::setEnv(char const*, char const*)>
c000e6ed:	83 c4 1c             	add    esp,0x1c
c000e6f0:	c3                   	ret    
c000e6f1:	c3                   	ret    

c000e6f2 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e6f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6f6:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e6fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e700:	e9 f9 fb ff ff       	jmp    c000e2fe <EnvVarContainer::setEnv(char const*, char const*)>

c000e705 <KeDeleteEnvSystem(char const*)>:
c000e705:	c3                   	ret    

c000e706 <KeDeleteEnvUser(char const*)>:
c000e706:	c3                   	ret    

c000e707 <KeDeleteEnvProcess(Process*, char const*)>:
c000e707:	c3                   	ret    

c000e708 <KeNewProcessEnv(Process*)>:
c000e708:	83 ec 28             	sub    esp,0x28
c000e70b:	6a 0c                	push   0xc
c000e70d:	e8 7d 14 00 00       	call   c000fb8f <malloc>
c000e712:	5a                   	pop    edx
c000e713:	59                   	pop    ecx
c000e714:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e718:	50                   	push   eax
c000e719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e71d:	e8 e0 fe ff ff       	call   c000e602 <EnvVarContainer::EnvVarContainer(Process*)>
c000e722:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e726:	83 c4 2c             	add    esp,0x2c
c000e729:	c3                   	ret    

c000e72a <KeCopyProcessEnv(Process*, Process*)>:
c000e72a:	57                   	push   edi
c000e72b:	56                   	push   esi
c000e72c:	53                   	push   ebx
c000e72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e731:	83 ec 0c             	sub    esp,0xc
c000e734:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e73a:	6a 0c                	push   0xc
c000e73c:	e8 4e 14 00 00       	call   c000fb8f <malloc>
c000e741:	89 c3                	mov    ebx,eax
c000e743:	58                   	pop    eax
c000e744:	5a                   	pop    edx
c000e745:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e749:	53                   	push   ebx
c000e74a:	e8 b3 fe ff ff       	call   c000e602 <EnvVarContainer::EnvVarContainer(Process*)>
c000e74f:	8b 07                	mov    eax,DWORD PTR [edi]
c000e751:	89 03                	mov    DWORD PTR [ebx],eax
c000e753:	c1 e0 03             	shl    eax,0x3
c000e756:	89 04 24             	mov    DWORD PTR [esp],eax
c000e759:	e8 31 14 00 00       	call   c000fb8f <malloc>
c000e75e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e761:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e763:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e766:	c1 e1 03             	shl    ecx,0x3
c000e769:	89 c7                	mov    edi,eax
c000e76b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	89 d8                	mov    eax,ebx
c000e772:	5b                   	pop    ebx
c000e773:	5e                   	pop    esi
c000e774:	5f                   	pop    edi
c000e775:	c3                   	ret    

c000e776 <KeLoadSystemEnv()>:
c000e776:	53                   	push   ebx
c000e777:	83 ec 14             	sub    esp,0x14
c000e77a:	6a 0c                	push   0xc
c000e77c:	e8 0e 14 00 00       	call   c000fb8f <malloc>
c000e781:	89 c3                	mov    ebx,eax
c000e783:	58                   	pop    eax
c000e784:	5a                   	pop    edx
c000e785:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000e78b:	53                   	push   ebx
c000e78c:	e8 71 fe ff ff       	call   c000e602 <EnvVarContainer::EnvVarContainer(Process*)>
c000e791:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e794:	89 1d d4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0d4,ebx
c000e79a:	e8 47 fe ff ff       	call   c000e5e6 <EnvVarContainer::__loadSystem()>
c000e79f:	83 c4 18             	add    esp,0x18
c000e7a2:	5b                   	pop    ebx
c000e7a3:	c3                   	ret    

c000e7a4 <KeLoadUserEnv()>:
c000e7a4:	53                   	push   ebx
c000e7a5:	83 ec 14             	sub    esp,0x14
c000e7a8:	6a 0c                	push   0xc
c000e7aa:	e8 e0 13 00 00       	call   c000fb8f <malloc>
c000e7af:	89 c3                	mov    ebx,eax
c000e7b1:	58                   	pop    eax
c000e7b2:	5a                   	pop    edx
c000e7b3:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000e7b9:	53                   	push   ebx
c000e7ba:	e8 43 fe ff ff       	call   c000e602 <EnvVarContainer::EnvVarContainer(Process*)>
c000e7bf:	89 1d d0 d0 02 c0    	mov    DWORD PTR ds:0xc002d0d0,ebx
c000e7c5:	83 c4 18             	add    esp,0x18
c000e7c8:	5b                   	pop    ebx
c000e7c9:	c3                   	ret    

c000e7ca <KeFlushEnv()>:
c000e7ca:	c3                   	ret    

c000e7cb <KeGetProcessTotalEnvCount(Process*)>:
c000e7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7cf:	8b 15 d0 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0d0
c000e7d5:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e7db:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c000e7e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7e2:	03 01                	add    eax,DWORD PTR [ecx]
c000e7e4:	85 d2                	test   edx,edx
c000e7e6:	74 02                	je     c000e7ea <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e7e8:	03 02                	add    eax,DWORD PTR [edx]
c000e7ea:	c3                   	ret    

c000e7eb <KeGetProcessEnvPair(Process*, int)>:
c000e7eb:	57                   	push   edi
c000e7ec:	56                   	push   esi
c000e7ed:	8b 35 d0 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d0d0
c000e7f3:	53                   	push   ebx
c000e7f4:	85 f6                	test   esi,esi
c000e7f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7fe:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e804:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e808:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e80a:	75 16                	jne    c000e822 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e80c:	39 c2                	cmp    edx,eax
c000e80e:	7c 16                	jl     c000e826 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e810:	8b 0d d4 d0 02 c0    	mov    ecx,DWORD PTR ds:0xc002d0d4
c000e816:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e818:	01 c6                	add    esi,eax
c000e81a:	39 d6                	cmp    esi,edx
c000e81c:	7e 3c                	jle    c000e85a <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e81e:	29 c2                	sub    edx,eax
c000e820:	eb 04                	jmp    c000e826 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e822:	39 c2                	cmp    edx,eax
c000e824:	7d 05                	jge    c000e82b <KeGetProcessEnvPair(Process*, int)+0x40>
c000e826:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e829:	eb 20                	jmp    c000e84b <KeGetProcessEnvPair(Process*, int)+0x60>
c000e82b:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e82d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e830:	39 d1                	cmp    ecx,edx
c000e832:	7e 04                	jle    c000e838 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e834:	29 c2                	sub    edx,eax
c000e836:	eb 10                	jmp    c000e848 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e838:	8b 35 d4 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d0d4
c000e83e:	03 0e                	add    ecx,DWORD PTR [esi]
c000e840:	39 d1                	cmp    ecx,edx
c000e842:	7e 16                	jle    c000e85a <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e844:	29 c2                	sub    edx,eax
c000e846:	29 fa                	sub    edx,edi
c000e848:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e84b:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e84e:	8b 02                	mov    eax,DWORD PTR [edx]
c000e850:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e853:	89 03                	mov    DWORD PTR [ebx],eax
c000e855:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e858:	eb 1d                	jmp    c000e877 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e85a:	83 ec 0c             	sub    esp,0xc
c000e85d:	68 6e 41 02 c0       	push   0xc002416e
c000e862:	e8 7f 17 00 00       	call   c000ffe6 <KePanic(char const*)>
c000e867:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e86d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e874:	83 c4 10             	add    esp,0x10
c000e877:	89 d8                	mov    eax,ebx
c000e879:	5b                   	pop    ebx
c000e87a:	5e                   	pop    esi
c000e87b:	5f                   	pop    edi
c000e87c:	c2 04 00             	ret    0x4
c000e87f:	90                   	nop

c000e880 <KeSetupInterrupts()>:
c000e880:	83 ec 10             	sub    esp,0x10
c000e883:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e88b:	90                   	nop
c000e88c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e894:	7f 5a                	jg     c000e8f0 <KeSetupInterrupts()+0x70>
c000e896:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e89e:	66 90                	xchg   ax,ax
c000e8a0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e8a5:	7f 41                	jg     c000e8e8 <KeSetupInterrupts()+0x68>
c000e8a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8ab:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e8b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8b6:	01 d0                	add    eax,edx
c000e8b8:	c7 04 85 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd1f20],0x0
c000e8c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8c7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e8ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8d2:	01 d0                	add    eax,edx
c000e8d4:	c7 04 85 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f20],0x0
c000e8df:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e8e4:	eb ba                	jmp    c000e8a0 <KeSetupInterrupts()+0x20>
c000e8e6:	66 90                	xchg   ax,ax
c000e8e8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e8ed:	eb 9d                	jmp    c000e88c <KeSetupInterrupts()+0xc>
c000e8ef:	90                   	nop
c000e8f0:	90                   	nop
c000e8f1:	83 c4 10             	add    esp,0x10
c000e8f4:	c3                   	ret    
c000e8f5:	8d 76 00             	lea    esi,[esi+0x0]

c000e8f8 <int_handler>:
c000e8f8:	83 ec 2c             	sub    esp,0x2c
c000e8fb:	90                   	nop
c000e8fc:	a0 24 f1 02 c0       	mov    al,ds:0xc002f124
c000e901:	0f b6 c0             	movzx  eax,al
c000e904:	85 c0                	test   eax,eax
c000e906:	74 04                	je     c000e90c <int_handler+0x14>
c000e908:	fa                   	cli    
c000e909:	f4                   	hlt    
c000e90a:	eb f0                	jmp    c000e8fc <int_handler+0x4>
c000e90c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e910:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e913:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e917:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e91c:	7e 1a                	jle    c000e938 <int_handler+0x40>
c000e91e:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e923:	7f 13                	jg     c000e938 <int_handler+0x40>
c000e925:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e929:	83 e8 20             	sub    eax,0x20
c000e92c:	83 ec 0c             	sub    esp,0xc
c000e92f:	50                   	push   eax
c000e930:	e8 95 c0 00 00       	call   c001a9ca <HalEndOfInterrupt(int)>
c000e935:	83 c4 10             	add    esp,0x10
c000e938:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e93c:	c1 e0 04             	shl    eax,0x4
c000e93f:	05 e0 e0 02 c0       	add    eax,0xc002e0e0
c000e944:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e948:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e94c:	c1 e0 04             	shl    eax,0x4
c000e94f:	05 e0 d0 02 c0       	add    eax,0xc002d0e0
c000e954:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e958:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e960:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000e965:	0f 8f ad 00 00 00    	jg     c000ea18 <int_handler+0x120>
c000e96b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e96f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e976:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e97a:	01 d0                	add    eax,edx
c000e97c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e97e:	85 c0                	test   eax,eax
c000e980:	0f 84 86 00 00 00    	je     c000ea0c <int_handler+0x114>
c000e986:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e98a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e98d:	83 f8 60             	cmp    eax,0x60
c000e990:	75 46                	jne    c000e9d8 <int_handler+0xe0>
c000e992:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e996:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e99d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9a1:	01 d0                	add    eax,edx
c000e9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9a9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e9b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e9b4:	01 ca                	add    edx,ecx
c000e9b6:	8b 12                	mov    edx,DWORD PTR [edx]
c000e9b8:	83 ec 08             	sub    esp,0x8
c000e9bb:	52                   	push   edx
c000e9bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e9c0:	ff d0                	call   eax
c000e9c2:	83 c4 10             	add    esp,0x10
c000e9c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e9cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e9d5:	eb 4d                	jmp    c000ea24 <int_handler+0x12c>
c000e9d7:	90                   	nop
c000e9d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9dc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9e7:	01 d0                	add    eax,edx
c000e9e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9ef:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e9f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e9fa:	01 ca                	add    edx,ecx
c000e9fc:	8b 12                	mov    edx,DWORD PTR [edx]
c000e9fe:	83 ec 08             	sub    esp,0x8
c000ea01:	52                   	push   edx
c000ea02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea06:	ff d0                	call   eax
c000ea08:	83 c4 10             	add    esp,0x10
c000ea0b:	90                   	nop
c000ea0c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000ea11:	e9 4a ff ff ff       	jmp    c000e960 <int_handler+0x68>
c000ea16:	66 90                	xchg   ax,ax
c000ea18:	b8 00 00 00 00       	mov    eax,0x0
c000ea1d:	ba 00 00 00 00       	mov    edx,0x0
c000ea22:	66 90                	xchg   ax,ax
c000ea24:	83 c4 2c             	add    esp,0x2c
c000ea27:	c3                   	ret    

c000ea28 <KeDisplayProgramFault(char const*)>:
c000ea28:	83 ec 0c             	sub    esp,0xc
c000ea2b:	83 ec 0c             	sub    esp,0xc
c000ea2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea32:	e8 45 85 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ea37:	83 c4 10             	add    esp,0x10
c000ea3a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ea3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea44:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ea4a:	85 c0                	test   eax,eax
c000ea4c:	74 22                	je     c000ea70 <KeDisplayProgramFault(char const*)+0x48>
c000ea4e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ea53:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea55:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea58:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ea5e:	6a 04                	push   0x4
c000ea60:	6a 0f                	push   0xf
c000ea62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea66:	50                   	push   eax
c000ea67:	e8 02 40 00 00       	call   c0012a6e <VgaText::puts(char const*, VgaColour, VgaColour)>
c000ea6c:	83 c4 10             	add    esp,0x10
c000ea6f:	90                   	nop
c000ea70:	90                   	nop
c000ea71:	83 c4 0c             	add    esp,0xc
c000ea74:	c3                   	ret    
c000ea75:	8d 76 00             	lea    esi,[esi+0x0]

c000ea78 <KeGeneralProtectionFault(void*, void*)>:
c000ea78:	83 ec 0c             	sub    esp,0xc
c000ea7b:	83 ec 0c             	sub    esp,0xc
c000ea7e:	68 88 41 02 c0       	push   0xc0024188
c000ea83:	e8 f4 84 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ea88:	83 c4 10             	add    esp,0x10
c000ea8b:	83 ec 08             	sub    esp,0x8
c000ea8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea96:	e8 b1 b4 00 00       	call   c0019f4c <HalHandleGeneralProtectionFault(void*, void*)>
c000ea9b:	83 c4 10             	add    esp,0x10
c000ea9e:	0f b6 c0             	movzx  eax,al
c000eaa1:	85 c0                	test   eax,eax
c000eaa3:	75 2f                	jne    c000ead4 <KeGeneralProtectionFault(void*, void*)+0x5c>
c000eaa5:	83 ec 0c             	sub    esp,0xc
c000eaa8:	68 93 41 02 c0       	push   0xc0024193
c000eaad:	e8 76 ff ff ff       	call   c000ea28 <KeDisplayProgramFault(char const*)>
c000eab2:	83 c4 10             	add    esp,0x10
c000eab5:	83 ec 0c             	sub    esp,0xc
c000eab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eabc:	e8 ef b5 00 00       	call   c001a0b0 <HalDisplayDebugInfo(void*)>
c000eac1:	83 c4 10             	add    esp,0x10
c000eac4:	83 ec 0c             	sub    esp,0xc
c000eac7:	6a 7e                	push   0x7e
c000eac9:	e8 42 8e 00 00       	call   c0017910 <KeTerminateCurrentThread(int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	eb 05                	jmp    c000ead8 <KeGeneralProtectionFault(void*, void*)+0x60>
c000ead3:	90                   	nop
c000ead4:	90                   	nop
c000ead5:	8d 76 00             	lea    esi,[esi+0x0]
c000ead8:	83 c4 0c             	add    esp,0xc
c000eadb:	c3                   	ret    

c000eadc <KePageFault(void*, void*)>:
c000eadc:	83 ec 0c             	sub    esp,0xc
c000eadf:	83 ec 0c             	sub    esp,0xc
c000eae2:	68 ac 41 02 c0       	push   0xc00241ac
c000eae7:	e8 90 84 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000eaec:	83 c4 10             	add    esp,0x10
c000eaef:	83 ec 08             	sub    esp,0x8
c000eaf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eafa:	e8 40 b5 00 00       	call   c001a03f <HalHandlePageFault(void*, void*)>
c000eaff:	83 c4 10             	add    esp,0x10
c000eb02:	0f b6 c0             	movzx  eax,al
c000eb05:	85 c0                	test   eax,eax
c000eb07:	75 2f                	jne    c000eb38 <KePageFault(void*, void*)+0x5c>
c000eb09:	83 ec 0c             	sub    esp,0xc
c000eb0c:	68 b9 41 02 c0       	push   0xc00241b9
c000eb11:	e8 12 ff ff ff       	call   c000ea28 <KeDisplayProgramFault(char const*)>
c000eb16:	83 c4 10             	add    esp,0x10
c000eb19:	83 ec 0c             	sub    esp,0xc
c000eb1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb20:	e8 8b b5 00 00       	call   c001a0b0 <HalDisplayDebugInfo(void*)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	83 ec 0c             	sub    esp,0xc
c000eb2b:	6a 7f                	push   0x7f
c000eb2d:	e8 de 8d 00 00       	call   c0017910 <KeTerminateCurrentThread(int)>
c000eb32:	83 c4 10             	add    esp,0x10
c000eb35:	eb 05                	jmp    c000eb3c <KePageFault(void*, void*)+0x60>
c000eb37:	90                   	nop
c000eb38:	90                   	nop
c000eb39:	8d 76 00             	lea    esi,[esi+0x0]
c000eb3c:	83 c4 0c             	add    esp,0xc
c000eb3f:	c3                   	ret    

c000eb40 <KeNonMaskableInterrupt(void*, void*)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	e8 f6 b8 00 00       	call   c001a43e <HalReceivedNMI()>
c000eb48:	90                   	nop
c000eb49:	83 c4 0c             	add    esp,0xc
c000eb4c:	c3                   	ret    
c000eb4d:	8d 76 00             	lea    esi,[esi+0x0]

c000eb50 <KeOtherFault(void*, void*)>:
c000eb50:	83 ec 0c             	sub    esp,0xc
c000eb53:	83 ec 0c             	sub    esp,0xc
c000eb56:	68 c4 41 02 c0       	push   0xc00241c4
c000eb5b:	e8 c8 fe ff ff       	call   c000ea28 <KeDisplayProgramFault(char const*)>
c000eb60:	83 c4 10             	add    esp,0x10
c000eb63:	83 ec 0c             	sub    esp,0xc
c000eb66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb6a:	e8 41 b5 00 00       	call   c001a0b0 <HalDisplayDebugInfo(void*)>
c000eb6f:	83 c4 10             	add    esp,0x10
c000eb72:	83 ec 0c             	sub    esp,0xc
c000eb75:	6a 7d                	push   0x7d
c000eb77:	e8 94 8d 00 00       	call   c0017910 <KeTerminateCurrentThread(int)>
c000eb7c:	83 c4 10             	add    esp,0x10
c000eb7f:	90                   	nop
c000eb80:	83 c4 0c             	add    esp,0xc
c000eb83:	c3                   	ret    

c000eb84 <KeOpcodeFault(void*, void*)>:
c000eb84:	55                   	push   ebp
c000eb85:	89 e5                	mov    ebp,esp
c000eb87:	83 ec 08             	sub    esp,0x8
c000eb8a:	83 ec 08             	sub    esp,0x8
c000eb8d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000eb90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000eb93:	e8 d6 b4 00 00       	call   c001a06e <HalHandleOpcodeFault(void*, void*)>
c000eb98:	83 c4 10             	add    esp,0x10
c000eb9b:	0f b6 c0             	movzx  eax,al
c000eb9e:	85 c0                	test   eax,eax
c000eba0:	75 2e                	jne    c000ebd0 <KeOpcodeFault(void*, void*)+0x4c>
c000eba2:	83 ec 0c             	sub    esp,0xc
c000eba5:	68 ec 41 02 c0       	push   0xc00241ec
c000ebaa:	e8 79 fe ff ff       	call   c000ea28 <KeDisplayProgramFault(char const*)>
c000ebaf:	83 c4 10             	add    esp,0x10
c000ebb2:	83 ec 0c             	sub    esp,0xc
c000ebb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ebb8:	e8 f3 b4 00 00       	call   c001a0b0 <HalDisplayDebugInfo(void*)>
c000ebbd:	83 c4 10             	add    esp,0x10
c000ebc0:	83 ec 0c             	sub    esp,0xc
c000ebc3:	6a 7c                	push   0x7c
c000ebc5:	e8 46 8d 00 00       	call   c0017910 <KeTerminateCurrentThread(int)>
c000ebca:	83 c4 10             	add    esp,0x10
c000ebcd:	eb 05                	jmp    c000ebd4 <KeOpcodeFault(void*, void*)+0x50>
c000ebcf:	90                   	nop
c000ebd0:	90                   	nop
c000ebd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ebd4:	c9                   	leave  
c000ebd5:	c3                   	ret    
c000ebd6:	66 90                	xchg   ax,ax

c000ebd8 <KeDoubleFault(void*, void*)>:
c000ebd8:	55                   	push   ebp
c000ebd9:	89 e5                	mov    ebp,esp
c000ebdb:	83 ec 08             	sub    esp,0x8
c000ebde:	83 ec 0c             	sub    esp,0xc
c000ebe1:	68 f9 41 02 c0       	push   0xc00241f9
c000ebe6:	e8 fb 13 00 00       	call   c000ffe6 <KePanic(char const*)>
c000ebeb:	83 c4 10             	add    esp,0x10
c000ebee:	90                   	nop
c000ebef:	c9                   	leave  
c000ebf0:	c3                   	ret    
c000ebf1:	90                   	nop

c000ebf2 <GDTEntry::setBase(unsigned int)>:
c000ebf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebf6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ebfa:	89 c1                	mov    ecx,eax
c000ebfc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ec00:	c1 e9 10             	shr    ecx,0x10
c000ec03:	c1 e8 18             	shr    eax,0x18
c000ec06:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ec09:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ec0c:	c3                   	ret    
c000ec0d:	90                   	nop

c000ec0e <GDTEntry::setLimit(unsigned int)>:
c000ec0e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ec12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec16:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ec19:	66 89 01             	mov    WORD PTR [ecx],ax
c000ec1c:	83 e2 f0             	and    edx,0xfffffff0
c000ec1f:	c1 e8 10             	shr    eax,0x10
c000ec22:	83 e0 0f             	and    eax,0xf
c000ec25:	09 d0                	or     eax,edx
c000ec27:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ec2a:	c3                   	ret    
c000ec2b:	90                   	nop

c000ec2c <GDT::GDT()>:
c000ec2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec40:	90                   	nop
c000ec41:	c3                   	ret    

c000ec42 <GDT::addEntry(GDTEntry)>:
c000ec42:	53                   	push   ebx
c000ec43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ec4b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ec4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ec51:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ec55:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ec59:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec5c:	c1 e0 03             	shl    eax,0x3
c000ec5f:	89 0a                	mov    DWORD PTR [edx],ecx
c000ec61:	5b                   	pop    ebx
c000ec62:	c3                   	ret    
c000ec63:	90                   	nop

c000ec64 <GDT::getNumberOfEntries()>:
c000ec64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec68:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec6a:	c3                   	ret    
c000ec6b:	90                   	nop

c000ec6c <GDT::flush()>:
c000ec6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec70:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec72:	83 c0 04             	add    eax,0x4
c000ec75:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ec7c:	a3 e2 f0 02 c0       	mov    ds:0xc002f0e2,eax
c000ec81:	66 89 15 e0 f0 02 c0 	mov    WORD PTR ds:0xc002f0e0,dx
c000ec88:	e9 cd 16 ff ff       	jmp    c000035a <loadGDT>
c000ec8d:	90                   	nop

c000ec8e <GDT::setup()>:
c000ec8e:	57                   	push   edi
c000ec8f:	56                   	push   esi
c000ec90:	53                   	push   ebx
c000ec91:	83 ec 30             	sub    esp,0x30
c000ec94:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec98:	6a 00                	push   0x0
c000ec9a:	8d 74 24 14          	lea    esi,[esp+0x14]
c000ec9e:	56                   	push   esi
c000ec9f:	e8 4e ff ff ff       	call   c000ebf2 <GDTEntry::setBase(unsigned int)>
c000eca4:	6a 00                	push   0x0
c000eca6:	56                   	push   esi
c000eca7:	e8 62 ff ff ff       	call   c000ec0e <GDTEntry::setLimit(unsigned int)>
c000ecac:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ecb4:	6a 00                	push   0x0
c000ecb6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ecba:	56                   	push   esi
c000ecbb:	e8 32 ff ff ff       	call   c000ebf2 <GDTEntry::setBase(unsigned int)>
c000ecc0:	68 ff ff ff 00       	push   0xffffff
c000ecc5:	56                   	push   esi
c000ecc6:	e8 43 ff ff ff       	call   c000ec0e <GDTEntry::setLimit(unsigned int)>
c000eccb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eccf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ecd3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ecd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ecdb:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ece0:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ece5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ece9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eced:	89 f8                	mov    eax,edi
c000ecef:	89 fa                	mov    edx,edi
c000ecf1:	80 e4 f7             	and    ah,0xf7
c000ecf4:	80 ce 60             	or     dh,0x60
c000ecf7:	89 c7                	mov    edi,eax
c000ecf9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ecfd:	80 cc 60             	or     ah,0x60
c000ed00:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ed04:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed08:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ed0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed10:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ed14:	83 c4 20             	add    esp,0x20
c000ed17:	6a 00                	push   0x0
c000ed19:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ed1d:	50                   	push   eax
c000ed1e:	e8 cf fe ff ff       	call   c000ebf2 <GDTEntry::setBase(unsigned int)>
c000ed23:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ed27:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ed2b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ed2f:	83 e0 3f             	and    eax,0x3f
c000ed32:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ed36:	6a 00                	push   0x0
c000ed38:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ed3c:	50                   	push   eax
c000ed3d:	e8 b0 fe ff ff       	call   c000ebf2 <GDTEntry::setBase(unsigned int)>
c000ed42:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ed46:	83 e0 3f             	and    eax,0x3f
c000ed49:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ed4d:	83 c4 0c             	add    esp,0xc
c000ed50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed58:	53                   	push   ebx
c000ed59:	e8 e4 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000ed5e:	83 c4 0c             	add    esp,0xc
c000ed61:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ed65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ed69:	53                   	push   ebx
c000ed6a:	e8 d3 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000ed6f:	83 c4 0c             	add    esp,0xc
c000ed72:	57                   	push   edi
c000ed73:	56                   	push   esi
c000ed74:	53                   	push   ebx
c000ed75:	e8 c8 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000ed7a:	83 c4 0c             	add    esp,0xc
c000ed7d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed81:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed85:	53                   	push   ebx
c000ed86:	e8 b7 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000ed8b:	83 c4 0c             	add    esp,0xc
c000ed8e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed92:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed96:	53                   	push   ebx
c000ed97:	e8 a6 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000ed9c:	83 c4 0c             	add    esp,0xc
c000ed9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eda3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eda7:	53                   	push   ebx
c000eda8:	e8 95 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000edad:	83 c4 0c             	add    esp,0xc
c000edb0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000edb4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000edb8:	53                   	push   ebx
c000edb9:	e8 84 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000edbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000edc1:	e8 a6 fe ff ff       	call   c000ec6c <GDT::flush()>
c000edc6:	83 c4 40             	add    esp,0x40
c000edc9:	5b                   	pop    ebx
c000edca:	5e                   	pop    esi
c000edcb:	5f                   	pop    edi
c000edcc:	c3                   	ret    

c000edcd <idleFunction(void*)>:
c000edcd:	83 ec 0c             	sub    esp,0xc
c000edd0:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000edd7:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000edde:	75 01                	jne    c000ede1 <idleFunction(void*)+0x14>
c000ede0:	fb                   	sti    
c000ede1:	e8 f3 b6 00 00       	call   c001a4d9 <HalSystemIdle()>
c000ede6:	e8 fb 34 01 00       	call   c00222e6 <idleCommon()>
c000edeb:	eb f4                	jmp    c000ede1 <idleFunction(void*)+0x14>
c000eded:	66 90                	xchg   ax,ax
c000edef:	90                   	nop

c000edf0 <IDTEntry::IDTEntry(bool)>:
c000edf0:	53                   	push   ebx
c000edf1:	83 ec 04             	sub    esp,0x4
c000edf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf8:	88 04 24             	mov    BYTE PTR [esp],al
c000edfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000edff:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ee05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee09:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ee0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee11:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee14:	83 e2 f0             	and    edx,0xfffffff0
c000ee17:	83 ca 0e             	or     edx,0xe
c000ee1a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee21:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee24:	83 e2 ef             	and    edx,0xffffffef
c000ee27:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee2a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ee2e:	85 c0                	test   eax,eax
c000ee30:	74 06                	je     c000ee38 <IDTEntry::IDTEntry(bool)+0x48>
c000ee32:	b2 03                	mov    dl,0x3
c000ee34:	eb 06                	jmp    c000ee3c <IDTEntry::IDTEntry(bool)+0x4c>
c000ee36:	66 90                	xchg   ax,ax
c000ee38:	b2 00                	mov    dl,0x0
c000ee3a:	66 90                	xchg   ax,ax
c000ee3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee40:	83 e2 03             	and    edx,0x3
c000ee43:	89 d3                	mov    ebx,edx
c000ee45:	c1 e3 05             	shl    ebx,0x5
c000ee48:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee4b:	83 e2 9f             	and    edx,0xffffff9f
c000ee4e:	88 d1                	mov    cl,dl
c000ee50:	88 da                	mov    dl,bl
c000ee52:	09 ca                	or     edx,ecx
c000ee54:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee5b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee5e:	83 ca 80             	or     edx,0xffffff80
c000ee61:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee64:	90                   	nop
c000ee65:	83 c4 04             	add    esp,0x4
c000ee68:	5b                   	pop    ebx
c000ee69:	c3                   	ret    

c000ee6a <IDTEntry::setOffset(unsigned int)>:
c000ee6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee72:	66 89 02             	mov    WORD PTR [edx],ax
c000ee75:	c1 e8 10             	shr    eax,0x10
c000ee78:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ee7c:	c3                   	ret    
c000ee7d:	90                   	nop
c000ee7e:	66 90                	xchg   ax,ax

c000ee80 <IDT::IDT()>:
c000ee80:	90                   	nop
c000ee81:	c3                   	ret    

c000ee82 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ee82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee86:	83 c0 30             	add    eax,0x30
c000ee89:	c3                   	ret    

c000ee8a <IDT::addEntry(IDTEntry, int)>:
c000ee8a:	53                   	push   ebx
c000ee8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ee93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee9b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ee9e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000eea2:	5b                   	pop    ebx
c000eea3:	c3                   	ret    

c000eea4 <IDT::addEntry(int, void (*)(), bool)>:
c000eea4:	53                   	push   ebx
c000eea5:	83 ec 10             	sub    esp,0x10
c000eea8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000eead:	50                   	push   eax
c000eeae:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000eeb2:	53                   	push   ebx
c000eeb3:	e8 38 ff ff ff       	call   c000edf0 <IDTEntry::IDTEntry(bool)>
c000eeb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eebc:	53                   	push   ebx
c000eebd:	e8 a8 ff ff ff       	call   c000ee6a <IDTEntry::setOffset(unsigned int)>
c000eec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eec6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eeca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eece:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000eed2:	e8 b3 ff ff ff       	call   c000ee8a <IDT::addEntry(IDTEntry, int)>
c000eed7:	83 c4 30             	add    esp,0x30
c000eeda:	5b                   	pop    ebx
c000eedb:	c3                   	ret    

c000eedc <IDT::flush()>:
c000eedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eee0:	66 c7 05 e8 f0 02 c0 ff 07 	mov    WORD PTR ds:0xc002f0e8,0x7ff
c000eee9:	a3 ea f0 02 c0       	mov    ds:0xc002f0ea,eax
c000eeee:	0f 01 1d e8 f0 02 c0 	lidtd  ds:0xc002f0e8
c000eef5:	c3                   	ret    

c000eef6 <IDT::setup()>:
c000eef6:	57                   	push   edi
c000eef7:	56                   	push   esi
c000eef8:	53                   	push   ebx
c000eef9:	83 ec 10             	sub    esp,0x10
c000eefc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ef00:	6a 00                	push   0x0
c000ef02:	68 c0 15 02 c0       	push   0xc00215c0
c000ef07:	6a 00                	push   0x0
c000ef09:	53                   	push   ebx
c000ef0a:	e8 95 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef0f:	6a 00                	push   0x0
c000ef11:	68 d0 15 02 c0       	push   0xc00215d0
c000ef16:	6a 01                	push   0x1
c000ef18:	53                   	push   ebx
c000ef19:	e8 86 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef1e:	83 c4 20             	add    esp,0x20
c000ef21:	6a 00                	push   0x0
c000ef23:	68 da 15 02 c0       	push   0xc00215da
c000ef28:	6a 02                	push   0x2
c000ef2a:	53                   	push   ebx
c000ef2b:	e8 74 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef30:	6a 00                	push   0x0
c000ef32:	68 e4 15 02 c0       	push   0xc00215e4
c000ef37:	6a 03                	push   0x3
c000ef39:	53                   	push   ebx
c000ef3a:	e8 65 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef3f:	83 c4 20             	add    esp,0x20
c000ef42:	6a 00                	push   0x0
c000ef44:	68 ee 15 02 c0       	push   0xc00215ee
c000ef49:	6a 04                	push   0x4
c000ef4b:	53                   	push   ebx
c000ef4c:	e8 53 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef51:	6a 00                	push   0x0
c000ef53:	68 f8 15 02 c0       	push   0xc00215f8
c000ef58:	6a 05                	push   0x5
c000ef5a:	53                   	push   ebx
c000ef5b:	e8 44 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef60:	83 c4 20             	add    esp,0x20
c000ef63:	6a 00                	push   0x0
c000ef65:	68 02 16 02 c0       	push   0xc0021602
c000ef6a:	6a 06                	push   0x6
c000ef6c:	53                   	push   ebx
c000ef6d:	e8 32 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef72:	6a 00                	push   0x0
c000ef74:	68 0c 16 02 c0       	push   0xc002160c
c000ef79:	6a 07                	push   0x7
c000ef7b:	53                   	push   ebx
c000ef7c:	e8 23 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef81:	83 c4 20             	add    esp,0x20
c000ef84:	6a 00                	push   0x0
c000ef86:	68 16 16 02 c0       	push   0xc0021616
c000ef8b:	6a 08                	push   0x8
c000ef8d:	53                   	push   ebx
c000ef8e:	e8 11 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef93:	6a 00                	push   0x0
c000ef95:	68 1e 16 02 c0       	push   0xc002161e
c000ef9a:	6a 09                	push   0x9
c000ef9c:	53                   	push   ebx
c000ef9d:	e8 02 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000efa2:	83 c4 20             	add    esp,0x20
c000efa5:	6a 00                	push   0x0
c000efa7:	68 28 16 02 c0       	push   0xc0021628
c000efac:	6a 0a                	push   0xa
c000efae:	53                   	push   ebx
c000efaf:	e8 f0 fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000efb4:	6a 00                	push   0x0
c000efb6:	68 30 16 02 c0       	push   0xc0021630
c000efbb:	6a 0b                	push   0xb
c000efbd:	53                   	push   ebx
c000efbe:	e8 e1 fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000efc3:	83 c4 20             	add    esp,0x20
c000efc6:	6a 00                	push   0x0
c000efc8:	68 38 16 02 c0       	push   0xc0021638
c000efcd:	6a 0c                	push   0xc
c000efcf:	53                   	push   ebx
c000efd0:	e8 cf fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000efd5:	6a 00                	push   0x0
c000efd7:	68 40 16 02 c0       	push   0xc0021640
c000efdc:	6a 0d                	push   0xd
c000efde:	53                   	push   ebx
c000efdf:	e8 c0 fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000efe4:	83 c4 20             	add    esp,0x20
c000efe7:	6a 00                	push   0x0
c000efe9:	68 5a 16 02 c0       	push   0xc002165a
c000efee:	6a 0e                	push   0xe
c000eff0:	53                   	push   ebx
c000eff1:	e8 ae fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000eff6:	6a 00                	push   0x0
c000eff8:	68 62 16 02 c0       	push   0xc0021662
c000effd:	6a 0f                	push   0xf
c000efff:	53                   	push   ebx
c000f000:	e8 9f fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f005:	83 c4 20             	add    esp,0x20
c000f008:	6a 00                	push   0x0
c000f00a:	68 6c 16 02 c0       	push   0xc002166c
c000f00f:	6a 10                	push   0x10
c000f011:	53                   	push   ebx
c000f012:	e8 8d fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f017:	6a 00                	push   0x0
c000f019:	68 76 16 02 c0       	push   0xc0021676
c000f01e:	6a 11                	push   0x11
c000f020:	53                   	push   ebx
c000f021:	e8 7e fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f026:	83 c4 20             	add    esp,0x20
c000f029:	6a 00                	push   0x0
c000f02b:	68 80 16 02 c0       	push   0xc0021680
c000f030:	6a 12                	push   0x12
c000f032:	53                   	push   ebx
c000f033:	e8 6c fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f038:	6a 01                	push   0x1
c000f03a:	68 1a 17 02 c0       	push   0xc002171a
c000f03f:	6a 60                	push   0x60
c000f041:	53                   	push   ebx
c000f042:	e8 5d fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f047:	83 c4 20             	add    esp,0x20
c000f04a:	6a 00                	push   0x0
c000f04c:	68 21 17 02 c0       	push   0xc0021721
c000f051:	6a 20                	push   0x20
c000f053:	53                   	push   ebx
c000f054:	e8 4b fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f059:	6a 00                	push   0x0
c000f05b:	68 0c 17 02 c0       	push   0xc002170c
c000f060:	6a 21                	push   0x21
c000f062:	53                   	push   ebx
c000f063:	e8 3c fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f068:	83 c4 20             	add    esp,0x20
c000f06b:	6a 00                	push   0x0
c000f06d:	68 13 17 02 c0       	push   0xc0021713
c000f072:	6a 22                	push   0x22
c000f074:	53                   	push   ebx
c000f075:	e8 2a fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f07a:	6a 00                	push   0x0
c000f07c:	68 8a 16 02 c0       	push   0xc002168a
c000f081:	6a 23                	push   0x23
c000f083:	53                   	push   ebx
c000f084:	e8 1b fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f089:	83 c4 20             	add    esp,0x20
c000f08c:	6a 00                	push   0x0
c000f08e:	68 94 16 02 c0       	push   0xc0021694
c000f093:	6a 24                	push   0x24
c000f095:	53                   	push   ebx
c000f096:	e8 09 fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f09b:	6a 00                	push   0x0
c000f09d:	68 9e 16 02 c0       	push   0xc002169e
c000f0a2:	6a 25                	push   0x25
c000f0a4:	53                   	push   ebx
c000f0a5:	e8 fa fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f0aa:	83 c4 20             	add    esp,0x20
c000f0ad:	6a 00                	push   0x0
c000f0af:	68 a8 16 02 c0       	push   0xc00216a8
c000f0b4:	6a 26                	push   0x26
c000f0b6:	53                   	push   ebx
c000f0b7:	e8 e8 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f0bc:	6a 00                	push   0x0
c000f0be:	68 b2 16 02 c0       	push   0xc00216b2
c000f0c3:	6a 27                	push   0x27
c000f0c5:	53                   	push   ebx
c000f0c6:	e8 d9 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f0cb:	83 c4 20             	add    esp,0x20
c000f0ce:	6a 00                	push   0x0
c000f0d0:	68 bc 16 02 c0       	push   0xc00216bc
c000f0d5:	6a 28                	push   0x28
c000f0d7:	53                   	push   ebx
c000f0d8:	e8 c7 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f0dd:	6a 00                	push   0x0
c000f0df:	68 c6 16 02 c0       	push   0xc00216c6
c000f0e4:	6a 29                	push   0x29
c000f0e6:	53                   	push   ebx
c000f0e7:	e8 b8 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f0ec:	83 c4 20             	add    esp,0x20
c000f0ef:	6a 00                	push   0x0
c000f0f1:	68 d0 16 02 c0       	push   0xc00216d0
c000f0f6:	6a 2a                	push   0x2a
c000f0f8:	53                   	push   ebx
c000f0f9:	e8 a6 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f0fe:	6a 00                	push   0x0
c000f100:	68 da 16 02 c0       	push   0xc00216da
c000f105:	6a 2b                	push   0x2b
c000f107:	53                   	push   ebx
c000f108:	e8 97 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f10d:	83 c4 20             	add    esp,0x20
c000f110:	6a 00                	push   0x0
c000f112:	68 e4 16 02 c0       	push   0xc00216e4
c000f117:	6a 2c                	push   0x2c
c000f119:	53                   	push   ebx
c000f11a:	e8 85 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f11f:	6a 00                	push   0x0
c000f121:	68 ee 16 02 c0       	push   0xc00216ee
c000f126:	6a 2d                	push   0x2d
c000f128:	53                   	push   ebx
c000f129:	e8 76 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f12e:	83 c4 20             	add    esp,0x20
c000f131:	6a 00                	push   0x0
c000f133:	68 f8 16 02 c0       	push   0xc00216f8
c000f138:	6a 2e                	push   0x2e
c000f13a:	53                   	push   ebx
c000f13b:	e8 64 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f140:	6a 00                	push   0x0
c000f142:	68 02 17 02 c0       	push   0xc0021702
c000f147:	6a 2f                	push   0x2f
c000f149:	53                   	push   ebx
c000f14a:	e8 55 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f14f:	83 c4 20             	add    esp,0x20
c000f152:	6a 00                	push   0x0
c000f154:	68 24 18 02 c0       	push   0xc0021824
c000f159:	6a 30                	push   0x30
c000f15b:	53                   	push   ebx
c000f15c:	e8 43 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f161:	6a 00                	push   0x0
c000f163:	68 2e 18 02 c0       	push   0xc002182e
c000f168:	6a 31                	push   0x31
c000f16a:	53                   	push   ebx
c000f16b:	e8 34 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f170:	83 c4 20             	add    esp,0x20
c000f173:	6a 00                	push   0x0
c000f175:	68 38 18 02 c0       	push   0xc0021838
c000f17a:	6a 32                	push   0x32
c000f17c:	53                   	push   ebx
c000f17d:	e8 22 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f182:	6a 00                	push   0x0
c000f184:	68 42 18 02 c0       	push   0xc0021842
c000f189:	6a 33                	push   0x33
c000f18b:	53                   	push   ebx
c000f18c:	e8 13 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f191:	83 c4 20             	add    esp,0x20
c000f194:	6a 00                	push   0x0
c000f196:	68 4c 18 02 c0       	push   0xc002184c
c000f19b:	6a 34                	push   0x34
c000f19d:	53                   	push   ebx
c000f19e:	e8 01 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f1a3:	6a 00                	push   0x0
c000f1a5:	68 56 18 02 c0       	push   0xc0021856
c000f1aa:	6a 35                	push   0x35
c000f1ac:	53                   	push   ebx
c000f1ad:	e8 f2 fc ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f1b2:	83 c4 20             	add    esp,0x20
c000f1b5:	6a 00                	push   0x0
c000f1b7:	68 60 18 02 c0       	push   0xc0021860
c000f1bc:	6a 36                	push   0x36
c000f1be:	53                   	push   ebx
c000f1bf:	e8 e0 fc ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f1c4:	6a 00                	push   0x0
c000f1c6:	68 6a 18 02 c0       	push   0xc002186a
c000f1cb:	6a 37                	push   0x37
c000f1cd:	53                   	push   ebx
c000f1ce:	e8 d1 fc ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f1d3:	83 c4 1c             	add    esp,0x1c
c000f1d6:	6a 03                	push   0x3
c000f1d8:	6a 02                	push   0x2
c000f1da:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000f1e0:	e8 29 4c 00 00       	call   c0013e0e <VAS::allocatePages(int, int)>
c000f1e5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1ec:	89 c6                	mov    esi,eax
c000f1ee:	e8 9c 09 00 00       	call   c000fb8f <malloc>
c000f1f3:	81 c6 00 20 00 00    	add    esi,0x2000
c000f1f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000f1fc:	89 c7                	mov    edi,eax
c000f1fe:	e8 d5 3c 00 00       	call   c0012ed8 <TSS::TSS()>
c000f203:	83 c4 0c             	add    esp,0xc
c000f206:	68 16 16 02 c0       	push   0xc0021616
c000f20b:	56                   	push   esi
c000f20c:	57                   	push   edi
c000f20d:	e8 0a 3d 00 00       	call   c0012f1c <TSS::setup(unsigned long, unsigned long)>
c000f212:	89 c6                	mov    esi,eax
c000f214:	58                   	pop    eax
c000f215:	5a                   	pop    edx
c000f216:	6a 00                	push   0x0
c000f218:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f21c:	50                   	push   eax
c000f21d:	e8 ce fb ff ff       	call   c000edf0 <IDTEntry::IDTEntry(bool)>
c000f222:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f226:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f22b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f232:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f238:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f23c:	80 ce 05             	or     dh,0x5
c000f23f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f242:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f246:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f24a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f24d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f250:	e8 87 fc ff ff       	call   c000eedc <IDT::flush()>
c000f255:	83 c4 20             	add    esp,0x20
c000f258:	5b                   	pop    ebx
c000f259:	5e                   	pop    esi
c000f25a:	5f                   	pop    edi
c000f25b:	c3                   	ret    

c000f25c <CPU::current()>:
c000f25c:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c000f261:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f267:	c3                   	ret    

c000f268 <operator new(unsigned long)>:
c000f268:	e9 22 09 00 00       	jmp    c000fb8f <malloc>

c000f26d <operator delete(void*)>:
c000f26d:	e9 3d 09 00 00       	jmp    c000fbaf <rfree>

c000f272 <disableIRQs()>:
c000f272:	fa                   	cli    
c000f273:	c3                   	ret    

c000f274 <enableIRQs()>:
c000f274:	fb                   	sti    
c000f275:	c3                   	ret    

c000f276 <lockScheduler()>:
c000f276:	fa                   	cli    
c000f277:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c000f27d:	c3                   	ret    

c000f27e <unlockScheduler()>:
c000f27e:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000f285:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000f28c:	75 01                	jne    c000f28f <unlockScheduler()+0x11>
c000f28e:	fb                   	sti    
c000f28f:	c3                   	ret    

c000f290 <lockStuff()>:
c000f290:	fa                   	cli    
c000f291:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c000f297:	ff 05 2c fa 02 c0    	inc    DWORD PTR ds:0xc002fa2c
c000f29d:	c3                   	ret    

c000f29e <unlockStuff()>:
c000f29e:	83 ec 0c             	sub    esp,0xc
c000f2a1:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000f2a6:	48                   	dec    eax
c000f2a7:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c000f2ac:	75 18                	jne    c000f2c6 <unlockStuff()+0x28>
c000f2ae:	83 3d 28 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa28,0x0
c000f2b5:	74 0f                	je     c000f2c6 <unlockStuff()+0x28>
c000f2b7:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c000f2c1:	e8 4a 7e 00 00       	call   c0017110 <schedule()>
c000f2c6:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000f2cd:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000f2d4:	75 01                	jne    c000f2d7 <unlockStuff()+0x39>
c000f2d6:	fb                   	sti    
c000f2d7:	83 c4 0c             	add    esp,0xc
c000f2da:	c3                   	ret    

c000f2db <Virt::getAKernelVAS()>:
c000f2db:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c000f2e0:	c3                   	ret    

c000f2e1 <__not_memcpy>:
c000f2e1:	57                   	push   edi
c000f2e2:	56                   	push   esi
c000f2e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f2eb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f2ef:	89 c7                	mov    edi,eax
c000f2f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2f3:	5e                   	pop    esi
c000f2f4:	5f                   	pop    edi
c000f2f5:	c3                   	ret    

c000f2f6 <KeFormatDate(char*, int, int, int, int, bool)>:
c000f2f6:	55                   	push   ebp
c000f2f7:	b9 0a 00 00 00       	mov    ecx,0xa
c000f2fc:	57                   	push   edi
c000f2fd:	56                   	push   esi
c000f2fe:	53                   	push   ebx
c000f2ff:	bb e8 03 00 00       	mov    ebx,0x3e8
c000f304:	81 ec ac 00 00 00    	sub    esp,0xac
c000f30a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f311:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f316:	99                   	cdq    
c000f317:	f7 f9                	idiv   ecx
c000f319:	89 d5                	mov    ebp,edx
c000f31b:	99                   	cdq    
c000f31c:	f7 f9                	idiv   ecx
c000f31e:	8d 42 30             	lea    eax,[edx+0x30]
c000f321:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f325:	8d 45 30             	lea    eax,[ebp+0x30]
c000f328:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f32c:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f333:	99                   	cdq    
c000f334:	f7 fb                	idiv   ebx
c000f336:	bb 64 00 00 00       	mov    ebx,0x64
c000f33b:	99                   	cdq    
c000f33c:	f7 f9                	idiv   ecx
c000f33e:	8d 42 30             	lea    eax,[edx+0x30]
c000f341:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f345:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f34c:	99                   	cdq    
c000f34d:	f7 fb                	idiv   ebx
c000f34f:	31 db                	xor    ebx,ebx
c000f351:	99                   	cdq    
c000f352:	f7 f9                	idiv   ecx
c000f354:	8d 42 30             	lea    eax,[edx+0x30]
c000f357:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f35b:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f363:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f367:	0f be 8b 04 f1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd0efc]
c000f36e:	83 f9 59             	cmp    ecx,0x59
c000f371:	74 1c                	je     c000f38f <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f373:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f37a:	83 f9 4d             	cmp    ecx,0x4d
c000f37d:	0f 84 e3 00 00 00    	je     c000f466 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f383:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f38a:	e9 d7 00 00 00       	jmp    c000f466 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f38f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f394:	74 27                	je     c000f3bd <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f396:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f39a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f39f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f3a3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f3a7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f3ab:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f3af:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f3b3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f3b7:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f3bb:	eb 15                	jmp    c000f3d2 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f3bd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f3c1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f3c5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f3c9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f3cd:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f3d2:	50                   	push   eax
c000f3d3:	50                   	push   eax
c000f3d4:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f3d8:	57                   	push   edi
c000f3d9:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f3dd:	56                   	push   esi
c000f3de:	e8 5d 14 ff ff       	call   c0000840 <strcat>
c000f3e3:	83 c4 10             	add    esp,0x10
c000f3e6:	83 fb 02             	cmp    ebx,0x2
c000f3e9:	74 1a                	je     c000f405 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f3eb:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f3f0:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c000f3f5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f3f9:	55                   	push   ebp
c000f3fa:	55                   	push   ebp
c000f3fb:	57                   	push   edi
c000f3fc:	56                   	push   esi
c000f3fd:	e8 3e 14 ff ff       	call   c0000840 <strcat>
c000f402:	83 c4 10             	add    esp,0x10
c000f405:	43                   	inc    ebx
c000f406:	83 fb 03             	cmp    ebx,0x3
c000f409:	0f 85 58 ff ff ff    	jne    c000f367 <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f40f:	51                   	push   ecx
c000f410:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f417:	6a 00                	push   0x0
c000f419:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f420:	e8 cb 10 ff ff       	call   c00004f0 <memset>
c000f425:	89 34 24             	mov    DWORD PTR [esp],esi
c000f428:	e8 43 11 ff ff       	call   c0000570 <strlen>
c000f42d:	83 c4 10             	add    esp,0x10
c000f430:	40                   	inc    eax
c000f431:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f438:	72 17                	jb     c000f451 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f43a:	52                   	push   edx
c000f43b:	52                   	push   edx
c000f43c:	56                   	push   esi
c000f43d:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f444:	e8 f7 11 ff ff       	call   c0000640 <strcpy>
c000f449:	83 c4 10             	add    esp,0x10
c000f44c:	e9 8a 00 00 00       	jmp    c000f4db <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f451:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f458:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f45f:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f462:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f464:	eb 75                	jmp    c000f4db <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f466:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f46a:	89 ef                	mov    edi,ebp
c000f46c:	50                   	push   eax
c000f46d:	c1 ff 1f             	sar    edi,0x1f
c000f470:	50                   	push   eax
c000f471:	57                   	push   edi
c000f472:	55                   	push   ebp
c000f473:	e8 70 04 00 00       	call   c000f8e8 <KeGetDigitsInNumber(long long)>
c000f478:	83 c4 10             	add    esp,0x10
c000f47b:	48                   	dec    eax
c000f47c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f480:	75 1c                	jne    c000f49e <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f482:	83 f9 44             	cmp    ecx,0x44
c000f485:	75 09                	jne    c000f490 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f487:	80 3d 20 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f120,0x0
c000f48e:	eb 0c                	jmp    c000f49c <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f490:	83 f9 4d             	cmp    ecx,0x4d
c000f493:	75 2b                	jne    c000f4c0 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f495:	80 3d 21 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f121,0x0
c000f49c:	74 22                	je     c000f4c0 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f49e:	89 e8                	mov    eax,ebp
c000f4a0:	b9 0a 00 00 00       	mov    ecx,0xa
c000f4a5:	99                   	cdq    
c000f4a6:	f7 f9                	idiv   ecx
c000f4a8:	89 d5                	mov    ebp,edx
c000f4aa:	99                   	cdq    
c000f4ab:	f7 f9                	idiv   ecx
c000f4ad:	83 c2 30             	add    edx,0x30
c000f4b0:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f4b4:	8d 55 30             	lea    edx,[ebp+0x30]
c000f4b7:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f4bb:	e9 0d ff ff ff       	jmp    c000f3cd <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f4c0:	89 e8                	mov    eax,ebp
c000f4c2:	b9 0a 00 00 00       	mov    ecx,0xa
c000f4c7:	99                   	cdq    
c000f4c8:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f4cd:	f7 f9                	idiv   ecx
c000f4cf:	83 c2 30             	add    edx,0x30
c000f4d2:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f4d6:	e9 f7 fe ff ff       	jmp    c000f3d2 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f4db:	81 c4 ac 00 00 00    	add    esp,0xac
c000f4e1:	5b                   	pop    ebx
c000f4e2:	5e                   	pop    esi
c000f4e3:	5f                   	pop    edi
c000f4e4:	5d                   	pop    ebp
c000f4e5:	c3                   	ret    

c000f4e6 <KeFormatShortDate(char*, int, int, int, int)>:
c000f4e6:	83 ec 14             	sub    esp,0x14
c000f4e9:	6a 00                	push   0x0
c000f4eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4ff:	e8 f2 fd ff ff       	call   c000f2f6 <KeFormatDate(char*, int, int, int, int, bool)>
c000f504:	83 c4 2c             	add    esp,0x2c
c000f507:	c3                   	ret    

c000f508 <KeFormatLongDate(char*, int, int, int, int)>:
c000f508:	83 ec 14             	sub    esp,0x14
c000f50b:	6a 01                	push   0x1
c000f50d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f511:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f515:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f519:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f521:	e8 d0 fd ff ff       	call   c000f2f6 <KeFormatDate(char*, int, int, int, int, bool)>
c000f526:	83 c4 2c             	add    esp,0x2c
c000f529:	c3                   	ret    

c000f52a <KeSetLocale(klocale_t)>:
c000f52a:	57                   	push   edi
c000f52b:	b9 09 00 00 00       	mov    ecx,0x9
c000f530:	56                   	push   esi
c000f531:	bf 00 f1 02 c0       	mov    edi,0xc002f100
c000f536:	fc                   	cld    
c000f537:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f53b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f53d:	5e                   	pop    esi
c000f53e:	5f                   	pop    edi
c000f53f:	c3                   	ret    

c000f540 <KeInitialiseLocale()>:
c000f540:	57                   	push   edi
c000f541:	56                   	push   esi
c000f542:	83 ec 3c             	sub    esp,0x3c
c000f545:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f54d:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f555:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f55d:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f565:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f56c:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f574:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f57c:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f583:	68 06 42 02 c0       	push   0xc0024206
c000f588:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f58c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f590:	50                   	push   eax
c000f591:	e8 aa 10 ff ff       	call   c0000640 <strcpy>
c000f596:	83 ec 20             	sub    esp,0x20
c000f599:	b9 09 00 00 00       	mov    ecx,0x9
c000f59e:	fc                   	cld    
c000f59f:	89 e7                	mov    edi,esp
c000f5a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f5a3:	e8 82 ff ff ff       	call   c000f52a <KeSetLocale(klocale_t)>
c000f5a8:	83 c4 64             	add    esp,0x64
c000f5ab:	5e                   	pop    esi
c000f5ac:	5f                   	pop    edi
c000f5ad:	c3                   	ret    

c000f5ae <KeFormatCurrency(char*, int, long long, long long)>:
c000f5ae:	c3                   	ret    

c000f5af <KeFormatCurrency(char*, int, double)>:
c000f5af:	c3                   	ret    

c000f5b0 <KeFormatNumber(char*, long long, long long)>:
c000f5b0:	c3                   	ret    

c000f5b1 <KeFormatNumber(char*, double)>:
c000f5b1:	c3                   	ret    
c000f5b2:	66 90                	xchg   ax,ax

c000f5b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f5b4:	55                   	push   ebp
c000f5b5:	57                   	push   edi
c000f5b6:	56                   	push   esi
c000f5b7:	53                   	push   ebx
c000f5b8:	83 ec 5c             	sub    esp,0x5c
c000f5bb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f5bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f5c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f5c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f5cb:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f5cf:	bb ef 2f 02 c0       	mov    ebx,0xc0022fef
c000f5d4:	bd 11 00 00 00       	mov    ebp,0x11
c000f5d9:	89 d0                	mov    eax,edx
c000f5db:	83 e0 01             	and    eax,0x1
c000f5de:	74 10                	je     c000f5f0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f5e0:	8a 03                	mov    al,BYTE PTR [ebx]
c000f5e2:	88 02                	mov    BYTE PTR [edx],al
c000f5e4:	8d 52 01             	lea    edx,[edx+0x1]
c000f5e7:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f5ea:	83 ed 01             	sub    ebp,0x1
c000f5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f5f0:	89 d0                	mov    eax,edx
c000f5f2:	83 e0 02             	and    eax,0x2
c000f5f5:	74 11                	je     c000f608 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f5f7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f5fa:	66 89 02             	mov    WORD PTR [edx],ax
c000f5fd:	8d 52 02             	lea    edx,[edx+0x2]
c000f600:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f603:	83 ed 02             	sub    ebp,0x2
c000f606:	66 90                	xchg   ax,ax
c000f608:	89 e8                	mov    eax,ebp
c000f60a:	c1 e8 02             	shr    eax,0x2
c000f60d:	fc                   	cld    
c000f60e:	89 d7                	mov    edi,edx
c000f610:	89 de                	mov    esi,ebx
c000f612:	89 c1                	mov    ecx,eax
c000f614:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f616:	89 f3                	mov    ebx,esi
c000f618:	89 fa                	mov    edx,edi
c000f61a:	b9 00 00 00 00       	mov    ecx,0x0
c000f61f:	89 e8                	mov    eax,ebp
c000f621:	83 e0 02             	and    eax,0x2
c000f624:	74 0e                	je     c000f634 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f626:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f62a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f62e:	8d 41 02             	lea    eax,[ecx+0x2]
c000f631:	89 c1                	mov    ecx,eax
c000f633:	90                   	nop
c000f634:	89 e8                	mov    eax,ebp
c000f636:	83 e0 01             	and    eax,0x1
c000f639:	74 09                	je     c000f644 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f63b:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f63e:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f641:	8d 76 00             	lea    esi,[esi+0x0]
c000f644:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f648:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f64c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f650:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f654:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f658:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f65c:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f661:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f665:	89 c2                	mov    edx,eax
c000f667:	c1 fa 1f             	sar    edx,0x1f
c000f66a:	52                   	push   edx
c000f66b:	50                   	push   eax
c000f66c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f670:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f674:	e8 9b 25 01 00       	call   c0021c14 <__udivdi3>
c000f679:	83 c4 10             	add    esp,0x10
c000f67c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f680:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f684:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f688:	80 f4 00             	xor    ah,0x0
c000f68b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f68f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f693:	80 f4 00             	xor    ah,0x0
c000f696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f69a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f69e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f6a2:	89 f8                	mov    eax,edi
c000f6a4:	09 f0                	or     eax,esi
c000f6a6:	74 04                	je     c000f6ac <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f6a8:	eb b2                	jmp    c000f65c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f6aa:	66 90                	xchg   ax,ax
c000f6ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f6b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f6b3:	90                   	nop
c000f6b4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f6b8:	89 c1                	mov    ecx,eax
c000f6ba:	89 c3                	mov    ebx,eax
c000f6bc:	c1 fb 1f             	sar    ebx,0x1f
c000f6bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6c7:	53                   	push   ebx
c000f6c8:	51                   	push   ecx
c000f6c9:	52                   	push   edx
c000f6ca:	50                   	push   eax
c000f6cb:	e8 44 26 01 00       	call   c0021d14 <__umoddi3>
c000f6d0:	83 c4 10             	add    esp,0x10
c000f6d3:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f6d8:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f6dc:	01 c8                	add    eax,ecx
c000f6de:	8a 10                	mov    dl,BYTE PTR [eax]
c000f6e0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f6e4:	88 10                	mov    BYTE PTR [eax],dl
c000f6e6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f6ea:	89 c2                	mov    edx,eax
c000f6ec:	c1 fa 1f             	sar    edx,0x1f
c000f6ef:	52                   	push   edx
c000f6f0:	50                   	push   eax
c000f6f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f6f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f6f9:	e8 16 25 01 00       	call   c0021c14 <__udivdi3>
c000f6fe:	83 c4 10             	add    esp,0x10
c000f701:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f705:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f709:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f70d:	80 f4 00             	xor    ah,0x0
c000f710:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f714:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f718:	80 f4 00             	xor    ah,0x0
c000f71b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f71f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f723:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f727:	89 f8                	mov    eax,edi
c000f729:	09 f0                	or     eax,esi
c000f72b:	74 03                	je     c000f730 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f72d:	eb 85                	jmp    c000f6b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f72f:	90                   	nop
c000f730:	90                   	nop
c000f731:	83 c4 5c             	add    esp,0x5c
c000f734:	5b                   	pop    ebx
c000f735:	5e                   	pop    esi
c000f736:	5f                   	pop    edi
c000f737:	5d                   	pop    ebp
c000f738:	c3                   	ret    
c000f739:	8d 76 00             	lea    esi,[esi+0x0]

c000f73c <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f73c:	55                   	push   ebp
c000f73d:	57                   	push   edi
c000f73e:	56                   	push   esi
c000f73f:	53                   	push   ebx
c000f740:	83 ec 5c             	sub    esp,0x5c
c000f743:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f747:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f74b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f74f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f753:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f757:	bb ef 2f 02 c0       	mov    ebx,0xc0022fef
c000f75c:	bd 11 00 00 00       	mov    ebp,0x11
c000f761:	89 d0                	mov    eax,edx
c000f763:	83 e0 01             	and    eax,0x1
c000f766:	74 10                	je     c000f778 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f768:	8a 03                	mov    al,BYTE PTR [ebx]
c000f76a:	88 02                	mov    BYTE PTR [edx],al
c000f76c:	8d 52 01             	lea    edx,[edx+0x1]
c000f76f:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f772:	83 ed 01             	sub    ebp,0x1
c000f775:	8d 76 00             	lea    esi,[esi+0x0]
c000f778:	89 d0                	mov    eax,edx
c000f77a:	83 e0 02             	and    eax,0x2
c000f77d:	74 11                	je     c000f790 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f77f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f782:	66 89 02             	mov    WORD PTR [edx],ax
c000f785:	8d 52 02             	lea    edx,[edx+0x2]
c000f788:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f78b:	83 ed 02             	sub    ebp,0x2
c000f78e:	66 90                	xchg   ax,ax
c000f790:	89 e8                	mov    eax,ebp
c000f792:	c1 e8 02             	shr    eax,0x2
c000f795:	fc                   	cld    
c000f796:	89 d7                	mov    edi,edx
c000f798:	89 de                	mov    esi,ebx
c000f79a:	89 c1                	mov    ecx,eax
c000f79c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f79e:	89 f3                	mov    ebx,esi
c000f7a0:	89 fa                	mov    edx,edi
c000f7a2:	b9 00 00 00 00       	mov    ecx,0x0
c000f7a7:	89 e8                	mov    eax,ebp
c000f7a9:	83 e0 02             	and    eax,0x2
c000f7ac:	74 0e                	je     c000f7bc <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f7ae:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f7b2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f7b6:	8d 41 02             	lea    eax,[ecx+0x2]
c000f7b9:	89 c1                	mov    ecx,eax
c000f7bb:	90                   	nop
c000f7bc:	89 e8                	mov    eax,ebp
c000f7be:	83 e0 01             	and    eax,0x1
c000f7c1:	74 09                	je     c000f7cc <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f7c3:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f7c6:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f7c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f7cc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f7d0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f7d4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f7d9:	79 1d                	jns    c000f7f8 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f7db:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f7df:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f7e4:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f7e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7ec:	8d 50 01             	lea    edx,[eax+0x1]
c000f7ef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f7f3:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f7f6:	66 90                	xchg   ax,ax
c000f7f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f7fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f800:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f804:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f808:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f80d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f811:	89 c2                	mov    edx,eax
c000f813:	c1 fa 1f             	sar    edx,0x1f
c000f816:	52                   	push   edx
c000f817:	50                   	push   eax
c000f818:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f81c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f820:	e8 ef 23 01 00       	call   c0021c14 <__udivdi3>
c000f825:	83 c4 10             	add    esp,0x10
c000f828:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f82c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f830:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f834:	80 f4 00             	xor    ah,0x0
c000f837:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f83b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f83f:	80 f4 00             	xor    ah,0x0
c000f842:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f846:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f84a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f84e:	89 f8                	mov    eax,edi
c000f850:	09 f0                	or     eax,esi
c000f852:	74 04                	je     c000f858 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f854:	eb b2                	jmp    c000f808 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f856:	66 90                	xchg   ax,ax
c000f858:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f85c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f85f:	90                   	nop
c000f860:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f864:	89 c1                	mov    ecx,eax
c000f866:	89 c3                	mov    ebx,eax
c000f868:	c1 fb 1f             	sar    ebx,0x1f
c000f86b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f86f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f873:	53                   	push   ebx
c000f874:	51                   	push   ecx
c000f875:	52                   	push   edx
c000f876:	50                   	push   eax
c000f877:	e8 18 22 01 00       	call   c0021a94 <__moddi3>
c000f87c:	83 c4 10             	add    esp,0x10
c000f87f:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f884:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f888:	01 c8                	add    eax,ecx
c000f88a:	8a 10                	mov    dl,BYTE PTR [eax]
c000f88c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f890:	88 10                	mov    BYTE PTR [eax],dl
c000f892:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f896:	89 c2                	mov    edx,eax
c000f898:	c1 fa 1f             	sar    edx,0x1f
c000f89b:	52                   	push   edx
c000f89c:	50                   	push   eax
c000f89d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f8a5:	e8 9e 20 01 00       	call   c0021948 <__divdi3>
c000f8aa:	83 c4 10             	add    esp,0x10
c000f8ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f8b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f8b9:	80 f4 00             	xor    ah,0x0
c000f8bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8c4:	80 f4 00             	xor    ah,0x0
c000f8c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f8cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8d3:	89 f8                	mov    eax,edi
c000f8d5:	09 f0                	or     eax,esi
c000f8d7:	74 03                	je     c000f8dc <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000f8d9:	eb 85                	jmp    c000f860 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000f8db:	90                   	nop
c000f8dc:	90                   	nop
c000f8dd:	83 c4 5c             	add    esp,0x5c
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    
c000f8e5:	8d 76 00             	lea    esi,[esi+0x0]

c000f8e8 <KeGetDigitsInNumber(long long)>:
c000f8e8:	56                   	push   esi
c000f8e9:	53                   	push   ebx
c000f8ea:	83 ec 24             	sub    esp,0x24
c000f8ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f8f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f8f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8fd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f905:	8d 76 00             	lea    esi,[esi+0x0]
c000f908:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f90c:	80 f4 00             	xor    ah,0x0
c000f90f:	89 c3                	mov    ebx,eax
c000f911:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f915:	80 f4 00             	xor    ah,0x0
c000f918:	89 c6                	mov    esi,eax
c000f91a:	89 f0                	mov    eax,esi
c000f91c:	09 d8                	or     eax,ebx
c000f91e:	74 28                	je     c000f948 <KeGetDigitsInNumber(long long)+0x60>
c000f920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f924:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f928:	6a 00                	push   0x0
c000f92a:	6a 0a                	push   0xa
c000f92c:	52                   	push   edx
c000f92d:	50                   	push   eax
c000f92e:	e8 15 20 01 00       	call   c0021948 <__divdi3>
c000f933:	83 c4 10             	add    esp,0x10
c000f936:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f93a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f93e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f943:	eb c3                	jmp    c000f908 <KeGetDigitsInNumber(long long)+0x20>
c000f945:	8d 76 00             	lea    esi,[esi+0x0]
c000f948:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f94c:	83 c4 24             	add    esp,0x24
c000f94f:	5b                   	pop    ebx
c000f950:	5e                   	pop    esi
c000f951:	c3                   	ret    
c000f952:	66 90                	xchg   ax,ax

c000f954 <KeItoa(unsigned long long, char*)>:
c000f954:	83 ec 1c             	sub    esp,0x1c
c000f957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f95b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f95f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f963:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f967:	6a 0a                	push   0xa
c000f969:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f971:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f975:	e8 3a fc ff ff       	call   c000f5b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f97a:	83 c4 10             	add    esp,0x10
c000f97d:	90                   	nop
c000f97e:	83 c4 1c             	add    esp,0x1c
c000f981:	c3                   	ret    
c000f982:	66 90                	xchg   ax,ax

c000f984 <KeItoa(long long, char*)>:
c000f984:	83 ec 1c             	sub    esp,0x1c
c000f987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f98b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f98f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f993:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f997:	6a 0a                	push   0xa
c000f999:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f99d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9a5:	e8 92 fd ff ff       	call   c000f73c <KeBasedSignedIntegerToString(long long, char*, int)>
c000f9aa:	83 c4 10             	add    esp,0x10
c000f9ad:	90                   	nop
c000f9ae:	83 c4 1c             	add    esp,0x1c
c000f9b1:	c3                   	ret    
c000f9b2:	66 90                	xchg   ax,ax

c000f9b4 <KeXtoa(unsigned long long, char*)>:
c000f9b4:	83 ec 1c             	sub    esp,0x1c
c000f9b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f9bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f9bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9c7:	6a 10                	push   0x10
c000f9c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f9cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9d5:	e8 da fb ff ff       	call   c000f5b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f9da:	83 c4 10             	add    esp,0x10
c000f9dd:	90                   	nop
c000f9de:	83 c4 1c             	add    esp,0x1c
c000f9e1:	c3                   	ret    

c000f9e2 <sbrk>:
c000f9e2:	55                   	push   ebp
c000f9e3:	57                   	push   edi
c000f9e4:	56                   	push   esi
c000f9e5:	53                   	push   ebx
c000f9e6:	83 ec 1c             	sub    esp,0x1c
c000f9e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9ed:	85 c0                	test   eax,eax
c000f9ef:	74 61                	je     c000fa52 <sbrk+0x70>
c000f9f1:	78 66                	js     c000fa59 <sbrk+0x77>
c000f9f3:	8b 15 f0 69 02 c0    	mov    edx,DWORD PTR ds:0xc00269f0
c000f9f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f9fd:	05 ff 0f 00 00       	add    eax,0xfff
c000fa02:	89 c5                	mov    ebp,eax
c000fa04:	78 6b                	js     c000fa71 <sbrk+0x8f>
c000fa06:	c1 fd 0c             	sar    ebp,0xc
c000fa09:	bb 00 00 00 00       	mov    ebx,0x0
c000fa0e:	8b 35 50 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f250
c000fa14:	8b 3d f0 69 02 c0    	mov    edi,DWORD PTR ds:0xc00269f0
c000fa1a:	e8 bb 07 00 00       	call   c00101da <Phys::allocatePage()>
c000fa1f:	68 01 04 00 00       	push   0x401
c000fa24:	57                   	push   edi
c000fa25:	50                   	push   eax
c000fa26:	56                   	push   esi
c000fa27:	e8 de 42 00 00       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c000fa2c:	81 05 f0 69 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00269f0,0x1000
c000fa36:	83 c3 01             	add    ebx,0x1
c000fa39:	83 c4 10             	add    esp,0x10
c000fa3c:	39 dd                	cmp    ebp,ebx
c000fa3e:	75 ce                	jne    c000fa0e <sbrk+0x2c>
c000fa40:	0f 20 d8             	mov    eax,cr3
c000fa43:	0f 22 d8             	mov    cr3,eax
c000fa46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa4a:	83 c4 1c             	add    esp,0x1c
c000fa4d:	5b                   	pop    ebx
c000fa4e:	5e                   	pop    esi
c000fa4f:	5f                   	pop    edi
c000fa50:	5d                   	pop    ebp
c000fa51:	c3                   	ret    
c000fa52:	a1 f0 69 02 c0       	mov    eax,ds:0xc00269f0
c000fa57:	eb f1                	jmp    c000fa4a <sbrk+0x68>
c000fa59:	83 ec 08             	sub    esp,0x8
c000fa5c:	50                   	push   eax
c000fa5d:	68 0c 42 02 c0       	push   0xc002420c
c000fa62:	e8 15 75 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000fa67:	83 c4 10             	add    esp,0x10
c000fa6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fa6f:	eb d9                	jmp    c000fa4a <sbrk+0x68>
c000fa71:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000fa77:	eb 8d                	jmp    c000fa06 <sbrk+0x24>

c000fa79 <sbrk_thunk>:
c000fa79:	83 ec 0c             	sub    esp,0xc
c000fa7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa80:	3d ff bf 00 00       	cmp    eax,0xbfff
c000fa85:	7f 10                	jg     c000fa97 <sbrk_thunk+0x1e>
c000fa87:	83 ec 0c             	sub    esp,0xc
c000fa8a:	50                   	push   eax
c000fa8b:	e8 52 ff ff ff       	call   c000f9e2 <sbrk>
c000fa90:	83 c4 10             	add    esp,0x10
c000fa93:	83 c4 0c             	add    esp,0xc
c000fa96:	c3                   	ret    
c000fa97:	83 ec 08             	sub    esp,0x8
c000fa9a:	50                   	push   eax
c000fa9b:	68 3c 42 02 c0       	push   0xc002423c
c000faa0:	e8 d7 74 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000faa5:	83 c4 10             	add    esp,0x10
c000faa8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000faad:	eb e4                	jmp    c000fa93 <sbrk_thunk+0x1a>

c000faaf <mmap>:
c000faaf:	55                   	push   ebp
c000fab0:	57                   	push   edi
c000fab1:	56                   	push   esi
c000fab2:	53                   	push   ebx
c000fab3:	83 ec 18             	sub    esp,0x18
c000fab6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000faba:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fac0:	89 fb                	mov    ebx,edi
c000fac2:	c1 eb 0c             	shr    ebx,0xc
c000fac5:	53                   	push   ebx
c000fac6:	e8 5c 3b 00 00       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c000facb:	89 c5                	mov    ebp,eax
c000facd:	83 c4 10             	add    esp,0x10
c000fad0:	85 db                	test   ebx,ebx
c000fad2:	7e 2f                	jle    c000fb03 <mmap+0x54>
c000fad4:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fada:	01 c7                	add    edi,eax
c000fadc:	89 c3                	mov    ebx,eax
c000fade:	8b 35 50 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f250
c000fae4:	e8 f1 06 00 00       	call   c00101da <Phys::allocatePage()>
c000fae9:	68 01 04 00 00       	push   0x401
c000faee:	53                   	push   ebx
c000faef:	50                   	push   eax
c000faf0:	56                   	push   esi
c000faf1:	e8 14 42 00 00       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c000faf6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fafc:	83 c4 10             	add    esp,0x10
c000faff:	39 fb                	cmp    ebx,edi
c000fb01:	75 db                	jne    c000fade <mmap+0x2f>
c000fb03:	89 e8                	mov    eax,ebp
c000fb05:	83 c4 0c             	add    esp,0xc
c000fb08:	5b                   	pop    ebx
c000fb09:	5e                   	pop    esi
c000fb0a:	5f                   	pop    edi
c000fb0b:	5d                   	pop    ebp
c000fb0c:	c3                   	ret    

c000fb0d <munmap>:
c000fb0d:	83 ec 18             	sub    esp,0x18
c000fb10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb14:	e8 16 3e 00 00       	call   c001392f <Virt::freeKernelVirtualPages(unsigned long)>
c000fb19:	b8 00 00 00 00       	mov    eax,0x0
c000fb1e:	83 c4 1c             	add    esp,0x1c
c000fb21:	c3                   	ret    

c000fb22 <liballoc_lock()>:
c000fb22:	fa                   	cli    
c000fb23:	83 05 30 fa 02 c0 01 	add    DWORD PTR ds:0xc002fa30,0x1
c000fb2a:	b8 00 00 00 00       	mov    eax,0x0
c000fb2f:	c3                   	ret    

c000fb30 <liballoc_unlock()>:
c000fb30:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fb38:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000fb3f:	75 01                	jne    c000fb42 <liballoc_unlock()+0x12>
c000fb41:	fb                   	sti    
c000fb42:	b8 00 00 00 00       	mov    eax,0x0
c000fb47:	c3                   	ret    

c000fb48 <liballoc_alloc(int)>:
c000fb48:	83 ec 10             	sub    esp,0x10
c000fb4b:	6a 01                	push   0x1
c000fb4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb51:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000fb57:	e8 b2 42 00 00       	call   c0013e0e <VAS::allocatePages(int, int)>
c000fb5c:	83 c4 1c             	add    esp,0x1c
c000fb5f:	c3                   	ret    

c000fb60 <liballoc_free(void*, int)>:
c000fb60:	83 ec 14             	sub    esp,0x14
c000fb63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb67:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000fb6d:	e8 fa 3e 00 00       	call   c0013a6c <VAS::freeAllocatedPages(unsigned long)>
c000fb72:	b8 00 00 00 00       	mov    eax,0x0
c000fb77:	83 c4 1c             	add    esp,0x1c
c000fb7a:	c3                   	ret    

c000fb7b <realloc>:
c000fb7b:	83 ec 14             	sub    esp,0x14
c000fb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb86:	e8 cc 1b ff ff       	call   c0001757 <dlrealloc>
c000fb8b:	83 c4 1c             	add    esp,0x1c
c000fb8e:	c3                   	ret    

c000fb8f <malloc>:
c000fb8f:	83 ec 18             	sub    esp,0x18
c000fb92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb96:	e8 7f 16 ff ff       	call   c000121a <dlmalloc>
c000fb9b:	83 c4 1c             	add    esp,0x1c
c000fb9e:	c3                   	ret    

c000fb9f <free>:
c000fb9f:	83 ec 18             	sub    esp,0x18
c000fba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fba6:	e8 a8 11 ff ff       	call   c0000d53 <dlfree>
c000fbab:	83 c4 1c             	add    esp,0x1c
c000fbae:	c3                   	ret    

c000fbaf <rfree>:
c000fbaf:	83 ec 18             	sub    esp,0x18
c000fbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbb6:	e8 98 11 ff ff       	call   c0000d53 <dlfree>
c000fbbb:	83 c4 1c             	add    esp,0x1c
c000fbbe:	c3                   	ret    

c000fbbf <calloc>:
c000fbbf:	56                   	push   esi
c000fbc0:	53                   	push   ebx
c000fbc1:	83 ec 10             	sub    esp,0x10
c000fbc4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fbc8:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fbcd:	53                   	push   ebx
c000fbce:	e8 bc ff ff ff       	call   c000fb8f <malloc>
c000fbd3:	89 c6                	mov    esi,eax
c000fbd5:	83 c4 0c             	add    esp,0xc
c000fbd8:	53                   	push   ebx
c000fbd9:	6a 00                	push   0x0
c000fbdb:	50                   	push   eax
c000fbdc:	e8 0f 09 ff ff       	call   c00004f0 <memset>
c000fbe1:	89 f0                	mov    eax,esi
c000fbe3:	83 c4 14             	add    esp,0x14
c000fbe6:	5b                   	pop    ebx
c000fbe7:	5e                   	pop    esi
c000fbe8:	c3                   	ret    
c000fbe9:	66 90                	xchg   ax,ax
c000fbeb:	90                   	nop

c000fbec <KeMailboxTryPost(Mailbox*, void*)>:
c000fbec:	83 ec 10             	sub    esp,0x10
c000fbef:	fa                   	cli    
c000fbf0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fbf5:	83 c0 01             	add    eax,0x1
c000fbf8:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fbfd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc09:	85 c0                	test   eax,eax
c000fc0b:	75 23                	jne    c000fc30 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fc0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fc15:	89 10                	mov    DWORD PTR [eax],edx
c000fc17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc1e:	8d 50 01             	lea    edx,[eax+0x1]
c000fc21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc28:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fc2d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc30:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fc38:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fc3d:	85 c0                	test   eax,eax
c000fc3f:	75 03                	jne    c000fc44 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fc41:	fb                   	sti    
c000fc42:	66 90                	xchg   ax,ax
c000fc44:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc48:	83 c4 10             	add    esp,0x10
c000fc4b:	c3                   	ret    

c000fc4c <KeMailboxTryGet(Mailbox*, void**)>:
c000fc4c:	83 ec 10             	sub    esp,0x10
c000fc4f:	fa                   	cli    
c000fc50:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fc55:	83 c0 01             	add    eax,0x1
c000fc58:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fc5d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc69:	83 f8 01             	cmp    eax,0x1
c000fc6c:	75 22                	jne    c000fc90 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fc6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc72:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc78:	89 10                	mov    DWORD PTR [eax],edx
c000fc7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc81:	8d 50 ff             	lea    edx,[eax-0x1]
c000fc84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc8b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fc90:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fc98:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fc9d:	85 c0                	test   eax,eax
c000fc9f:	75 03                	jne    c000fca4 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fca1:	fb                   	sti    
c000fca2:	66 90                	xchg   ax,ax
c000fca4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fca8:	83 c4 10             	add    esp,0x10
c000fcab:	c3                   	ret    

c000fcac <KeMailboxCreate()>:
c000fcac:	83 ec 1c             	sub    esp,0x1c
c000fcaf:	83 ec 0c             	sub    esp,0xc
c000fcb2:	6a 08                	push   0x8
c000fcb4:	e8 d6 fe ff ff       	call   c000fb8f <malloc>
c000fcb9:	83 c4 10             	add    esp,0x10
c000fcbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcc4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fcca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fcd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcd9:	83 c4 1c             	add    esp,0x1c
c000fcdc:	c3                   	ret    
c000fcdd:	8d 76 00             	lea    esi,[esi+0x0]

c000fce0 <KeMailboxPost(Mailbox*, void*)>:
c000fce0:	83 ec 1c             	sub    esp,0x1c
c000fce3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fce8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcf0:	e8 f7 fe ff ff       	call   c000fbec <KeMailboxTryPost(Mailbox*, void*)>
c000fcf5:	83 c4 08             	add    esp,0x8
c000fcf8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fcfc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fd00:	83 f0 01             	xor    eax,0x1
c000fd03:	0f b6 c0             	movzx  eax,al
c000fd06:	85 c0                	test   eax,eax
c000fd08:	74 26                	je     c000fd30 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fd0a:	fa                   	cli    
c000fd0b:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fd10:	83 c0 01             	add    eax,0x1
c000fd13:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fd18:	e8 f3 73 00 00       	call   c0017110 <schedule()>
c000fd1d:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fd25:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fd2a:	85 c0                	test   eax,eax
c000fd2c:	75 02                	jne    c000fd30 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fd2e:	fb                   	sti    
c000fd2f:	90                   	nop
c000fd30:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd35:	85 c0                	test   eax,eax
c000fd37:	75 03                	jne    c000fd3c <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fd39:	eb ad                	jmp    c000fce8 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fd3b:	90                   	nop
c000fd3c:	90                   	nop
c000fd3d:	83 c4 1c             	add    esp,0x1c
c000fd40:	c3                   	ret    
c000fd41:	8d 76 00             	lea    esi,[esi+0x0]

c000fd44 <KeMailboxGet(Mailbox*, void**)>:
c000fd44:	83 ec 1c             	sub    esp,0x1c
c000fd47:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd54:	e8 f3 fe ff ff       	call   c000fc4c <KeMailboxTryGet(Mailbox*, void**)>
c000fd59:	83 c4 08             	add    esp,0x8
c000fd5c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fd60:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fd64:	83 f0 01             	xor    eax,0x1
c000fd67:	0f b6 c0             	movzx  eax,al
c000fd6a:	85 c0                	test   eax,eax
c000fd6c:	74 26                	je     c000fd94 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fd6e:	fa                   	cli    
c000fd6f:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fd74:	83 c0 01             	add    eax,0x1
c000fd77:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fd7c:	e8 8f 73 00 00       	call   c0017110 <schedule()>
c000fd81:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fd89:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fd8e:	85 c0                	test   eax,eax
c000fd90:	75 02                	jne    c000fd94 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fd92:	fb                   	sti    
c000fd93:	90                   	nop
c000fd94:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd99:	85 c0                	test   eax,eax
c000fd9b:	75 03                	jne    c000fda0 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fd9d:	eb ad                	jmp    c000fd4c <KeMailboxGet(Mailbox*, void**)+0x8>
c000fd9f:	90                   	nop
c000fda0:	90                   	nop
c000fda1:	83 c4 1c             	add    esp,0x1c
c000fda4:	c3                   	ret    
c000fda5:	8d 76 00             	lea    esi,[esi+0x0]

c000fda8 <KeMailboxDestroy(Mailbox*)>:
c000fda8:	83 ec 0c             	sub    esp,0xc
c000fdab:	83 ec 0c             	sub    esp,0xc
c000fdae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdb2:	e8 e8 fd ff ff       	call   c000fb9f <free>
c000fdb7:	83 c4 10             	add    esp,0x10
c000fdba:	90                   	nop
c000fdbb:	83 c4 0c             	add    esp,0xc
c000fdbe:	c3                   	ret    

c000fdbf <KeFirstTask()>:
c000fdbf:	53                   	push   ebx
c000fdc0:	83 ec 08             	sub    esp,0x8
c000fdc3:	fb                   	sti    
c000fdc4:	e8 d4 a0 00 00       	call   c0019e9d <HalEnableNMI()>
c000fdc9:	83 ec 0c             	sub    esp,0xc
c000fdcc:	68 4b 42 02 c0       	push   0xc002424b
c000fdd1:	e8 53 d5 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000fdd6:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000fddd:	e8 ad fd ff ff       	call   c000fb8f <malloc>
c000fde2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000fde9:	89 c3                	mov    ebx,eax
c000fdeb:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000fdf0:	50                   	push   eax
c000fdf1:	68 64 42 02 c0       	push   0xc0024264
c000fdf6:	6a 01                	push   0x1
c000fdf8:	53                   	push   ebx
c000fdf9:	e8 12 6e 00 00       	call   c0016c10 <Process::Process(bool, char const*, Process*, char**)>
c000fdfe:	83 c4 20             	add    esp,0x20
c000fe01:	68 ff 00 00 00       	push   0xff
c000fe06:	6a 00                	push   0x0
c000fe08:	68 cd ed 00 c0       	push   0xc000edcd
c000fe0d:	53                   	push   ebx
c000fe0e:	e8 3d 70 00 00       	call   c0016e50 <Process::createThread(void (*)(void*), void*, int)>
c000fe13:	8b 15 58 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa58
c000fe19:	6a 7a                	push   0x7a
c000fe1b:	6a 00                	push   0x0
c000fe1d:	68 f8 77 01 c0       	push   0xc00177f8
c000fe22:	52                   	push   edx
c000fe23:	e8 28 70 00 00       	call   c0016e50 <Process::createThread(void (*)(void*), void*, int)>
c000fe28:	83 c4 14             	add    esp,0x14
c000fe2b:	a3 10 fa 02 c0       	mov    ds:0xc002fa10,eax
c000fe30:	68 ec 42 02 c0       	push   0xc00242ec
c000fe35:	e8 ef d4 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000fe3a:	c6 05 cd d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0cd,0x1
c000fe41:	e8 97 0c 00 00       	call   c0010add <KeInitRand()>
c000fe46:	e8 7f 7d 00 00       	call   c0017bca <Vm::initialise8086()>
c000fe4b:	e8 f8 7f ff ff       	call   c0007e48 <Fs::initVFS()>
c000fe50:	c7 04 24 71 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e71
c000fe57:	e8 cd d4 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000fe5c:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c000fe61:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000fe67:	8b 10                	mov    edx,DWORD PTR [eax]
c000fe69:	6a 00                	push   0x0
c000fe6b:	6a 00                	push   0x0
c000fe6d:	6a 00                	push   0x0
c000fe6f:	50                   	push   eax
c000fe70:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fe73:	83 c4 14             	add    esp,0x14
c000fe76:	68 ec 42 02 c0       	push   0xc00242ec
c000fe7b:	e8 a9 d4 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000fe80:	e8 a8 77 ff ff       	call   c000762d <KeInitialiseSymlinks()>
c000fe85:	e8 ec e8 ff ff       	call   c000e776 <KeLoadSystemEnv()>
c000fe8a:	e8 93 0a 00 00       	call   c0010922 <KeSetupPowerManager()>
c000fe8f:	c7 04 24 71 42 02 c0 	mov    DWORD PTR [esp],0xc0024271
c000fe96:	e8 8e d4 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000fe9b:	59                   	pop    ecx
c000fe9c:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c000fea2:	58                   	pop    eax
c000fea3:	6a 01                	push   0x1
c000fea5:	68 82 42 02 c0       	push   0xc0024282
c000feaa:	e8 bb 66 00 00       	call   c001656a <Thr::loadDLL(char const*, bool)>
c000feaf:	5a                   	pop    edx
c000feb0:	59                   	pop    ecx
c000feb1:	53                   	push   ebx
c000feb2:	50                   	push   eax
c000feb3:	e8 04 69 00 00       	call   c00167bc <Thr::executeDLL(unsigned long, void*)>
c000feb8:	83 c4 10             	add    esp,0x10
c000febb:	83 ec 0c             	sub    esp,0xc
c000febe:	6a 02                	push   0x2
c000fec0:	e8 0b 73 00 00       	call   c00171d0 <blockTask(TaskState)>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	eb f1                	jmp    c000febb <KeFirstTask()+0xfc>

c000feca <KeEntryPoint>:
c000feca:	57                   	push   edi
c000fecb:	bf f9 03 00 00       	mov    edi,0x3f9
c000fed0:	56                   	push   esi
c000fed1:	31 f6                	xor    esi,esi
c000fed3:	53                   	push   ebx
c000fed4:	83 ec 20             	sub    esp,0x20
c000fed7:	e8 10 d4 ff ff       	call   c000d2ec <KeInitialiseBootConfigurationFlags()>
c000fedc:	89 f0                	mov    eax,esi
c000fede:	89 fa                	mov    edx,edi
c000fee0:	ee                   	out    dx,al
c000fee1:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fee6:	b0 80                	mov    al,0x80
c000fee8:	89 da                	mov    edx,ebx
c000feea:	ee                   	out    dx,al
c000feeb:	b1 03                	mov    cl,0x3
c000feed:	ba f8 03 00 00       	mov    edx,0x3f8
c000fef2:	88 c8                	mov    al,cl
c000fef4:	ee                   	out    dx,al
c000fef5:	89 f0                	mov    eax,esi
c000fef7:	89 fa                	mov    edx,edi
c000fef9:	ee                   	out    dx,al
c000fefa:	88 c8                	mov    al,cl
c000fefc:	89 da                	mov    edx,ebx
c000fefe:	ee                   	out    dx,al
c000feff:	b0 c7                	mov    al,0xc7
c000ff01:	ba fa 03 00 00       	mov    edx,0x3fa
c000ff06:	ee                   	out    dx,al
c000ff07:	b0 0b                	mov    al,0xb
c000ff09:	ba fc 03 00 00       	mov    edx,0x3fc
c000ff0e:	ee                   	out    dx,al
c000ff0f:	83 ec 0c             	sub    esp,0xc
c000ff12:	68 9e 42 02 c0       	push   0xc002429e
c000ff17:	e8 60 70 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ff1c:	e8 d9 d3 ff ff       	call   c000d2fa <KeDisplaySplashScreen()>
c000ff21:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ff26:	05 ff 0f 00 00       	add    eax,0xfff
c000ff2b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff30:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff33:	e8 33 04 00 00       	call   c001036b <Phys::physicalMemorySetup(unsigned int)>
c000ff38:	e8 c8 38 00 00       	call   c0013805 <Virt::virtualMemorySetup()>
c000ff3d:	e8 e4 d2 ff ff       	call   c000d226 <KeInitialiseAtexit()>
c000ff42:	58                   	pop    eax
c000ff43:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ff47:	53                   	push   ebx
c000ff48:	e8 9f 3b 00 00       	call   c0013aec <VAS::VAS()>
c000ff4d:	89 1d 50 f2 02 c0    	mov    DWORD PTR ds:0xc002f250,ebx
c000ff53:	e8 d6 1e 01 00       	call   c0021e2e <_init>
c000ff58:	c7 04 24 b5 42 02 c0 	mov    DWORD PTR [esp],0xc00242b5
c000ff5f:	e8 c5 d3 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000ff64:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000ff6b:	e8 1f fc ff ff       	call   c000fb8f <malloc>
c000ff70:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff73:	89 c6                	mov    esi,eax
c000ff75:	e8 3e e2 ff ff       	call   c000e1b8 <Computer::Computer()>
c000ff7a:	8b 15 50 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f250
c000ff80:	89 35 c8 d0 02 c0    	mov    DWORD PTR ds:0xc002d0c8,esi
c000ff86:	52                   	push   edx
c000ff87:	6a 00                	push   0x0
c000ff89:	6a 00                	push   0x0
c000ff8b:	56                   	push   esi
c000ff8c:	e8 6b e2 ff ff       	call   c000e1fc <Computer::open(int, int, void*)>
c000ff91:	83 c4 14             	add    esp,0x14
c000ff94:	68 10 43 02 c0       	push   0xc0024310
c000ff99:	e8 8b d3 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000ff9e:	e8 5a a6 00 00       	call   c001a5fd <HalInitialiseCoprocessor()>
c000ffa3:	c7 04 24 cf 42 02 c0 	mov    DWORD PTR [esp],0xc00242cf
c000ffaa:	e8 7a d3 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000ffaf:	c7 04 24 bf fd 00 c0 	mov    DWORD PTR [esp],0xc000fdbf
c000ffb6:	e8 0d 70 00 00       	call   c0016fc8 <setupMultitasking(void (*)())>
c000ffbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffbe:	e8 df 3b 00 00       	call   c0013ba2 <VAS::~VAS()>
c000ffc3:	83 c4 30             	add    esp,0x30
c000ffc6:	5b                   	pop    ebx
c000ffc7:	5e                   	pop    esi
c000ffc8:	5f                   	pop    edi
c000ffc9:	c3                   	ret    
c000ffca:	66 90                	xchg   ax,ax

c000ffcc <Mutex::Mutex()>:
c000ffcc:	83 ec 0c             	sub    esp,0xc
c000ffcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd3:	83 ec 08             	sub    esp,0x8
c000ffd6:	6a 01                	push   0x1
c000ffd8:	50                   	push   eax
c000ffd9:	e8 9e 0d 00 00       	call   c0010d7c <Semaphore::Semaphore(int)>
c000ffde:	83 c4 10             	add    esp,0x10
c000ffe1:	90                   	nop
c000ffe2:	83 c4 0c             	add    esp,0xc
c000ffe5:	c3                   	ret    

c000ffe6 <KePanic(char const*)>:
c000ffe6:	c6 05 24 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f124,0x1
c000ffed:	e9 8f a6 00 00       	jmp    c001a681 <HalPanic(char const*)>

c000fff2 <Phys::allocateDMA(unsigned long)>:
c000fff2:	55                   	push   ebp
c000fff3:	31 ed                	xor    ebp,ebp
c000fff5:	57                   	push   edi
c000fff6:	56                   	push   esi
c000fff7:	53                   	push   ebx
c000fff8:	31 db                	xor    ebx,ebx
c000fffa:	83 ec 1c             	sub    esp,0x1c
c000fffd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010001:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010009:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c001000f:	31 c0                	xor    eax,eax
c0010011:	c1 ef 0c             	shr    edi,0xc
c0010014:	eb 1b                	jmp    c0010031 <Phys::allocateDMA(unsigned long)+0x3f>
c0010016:	85 c0                	test   eax,eax
c0010018:	75 06                	jne    c0010020 <Phys::allocateDMA(unsigned long)+0x2e>
c001001a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001001e:	89 dd                	mov    ebp,ebx
c0010020:	8d 70 01             	lea    esi,[eax+0x1]
c0010023:	39 f7                	cmp    edi,esi
c0010025:	74 37                	je     c001005e <Phys::allocateDMA(unsigned long)+0x6c>
c0010027:	89 f0                	mov    eax,esi
c0010029:	83 c3 01             	add    ebx,0x1
c001002c:	83 fb 0f             	cmp    ebx,0xf
c001002f:	7f 13                	jg     c0010044 <Phys::allocateDMA(unsigned long)+0x52>
c0010031:	80 bb 40 f1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd0ec0],0x0
c0010038:	74 dc                	je     c0010016 <Phys::allocateDMA(unsigned long)+0x24>
c001003a:	31 c0                	xor    eax,eax
c001003c:	83 c3 01             	add    ebx,0x1
c001003f:	83 fb 0f             	cmp    ebx,0xf
c0010042:	7e ed                	jle    c0010031 <Phys::allocateDMA(unsigned long)+0x3f>
c0010044:	83 ec 0c             	sub    esp,0xc
c0010047:	68 34 43 02 c0       	push   0xc0024334
c001004c:	e8 95 ff ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	31 c0                	xor    eax,eax
c0010056:	83 c4 1c             	add    esp,0x1c
c0010059:	5b                   	pop    ebx
c001005a:	5e                   	pop    esi
c001005b:	5f                   	pop    edi
c001005c:	5d                   	pop    ebp
c001005d:	c3                   	ret    
c001005e:	89 e9                	mov    ecx,ebp
c0010060:	c1 f9 04             	sar    ecx,0x4
c0010063:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010067:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c001006b:	89 ca                	mov    edx,ecx
c001006d:	83 ea 01             	sub    edx,0x1
c0010070:	79 03                	jns    c0010075 <Phys::allocateDMA(unsigned long)+0x83>
c0010072:	8d 51 0e             	lea    edx,[ecx+0xe]
c0010075:	c1 fa 04             	sar    edx,0x4
c0010078:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c001007c:	74 08                	je     c0010086 <Phys::allocateDMA(unsigned long)+0x94>
c001007e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0010082:	31 c0                	xor    eax,eax
c0010084:	eb b6                	jmp    c001003c <Phys::allocateDMA(unsigned long)+0x4a>
c0010086:	85 f6                	test   esi,esi
c0010088:	74 17                	je     c00100a1 <Phys::allocateDMA(unsigned long)+0xaf>
c001008a:	8d 95 40 f1 02 c0    	lea    edx,[ebp-0x3ffd0ec0]
c0010090:	8d 84 05 41 f1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd0ebf]
c0010097:	c6 02 01             	mov    BYTE PTR [edx],0x1
c001009a:	83 c2 01             	add    edx,0x1
c001009d:	39 d0                	cmp    eax,edx
c001009f:	75 f6                	jne    c0010097 <Phys::allocateDMA(unsigned long)+0xa5>
c00100a1:	a1 38 f1 02 c0       	mov    eax,ds:0xc002f138
c00100a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100aa:	01 f8                	add    eax,edi
c00100ac:	85 d2                	test   edx,edx
c00100ae:	a3 38 f1 02 c0       	mov    ds:0xc002f138,eax
c00100b3:	74 17                	je     c00100cc <Phys::allocateDMA(unsigned long)+0xda>
c00100b5:	83 ec 0c             	sub    esp,0xc
c00100b8:	68 34 43 02 c0       	push   0xc0024334
c00100bd:	e8 24 ff ff ff       	call   c000ffe6 <KePanic(char const*)>
c00100c2:	83 c4 10             	add    esp,0x10
c00100c5:	89 f0                	mov    eax,esi
c00100c7:	e9 5d ff ff ff       	jmp    c0010029 <Phys::allocateDMA(unsigned long)+0x37>
c00100cc:	c1 e5 0c             	shl    ebp,0xc
c00100cf:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00100d5:	e9 7c ff ff ff       	jmp    c0010056 <Phys::allocateDMA(unsigned long)+0x64>

c00100da <Phys::freeDMA(unsigned long, unsigned long)>:
c00100da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00100de:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00100e4:	a1 38 f1 02 c0       	mov    eax,ds:0xc002f138
c00100e9:	c1 ea 0c             	shr    edx,0xc
c00100ec:	29 d0                	sub    eax,edx
c00100ee:	a3 38 f1 02 c0       	mov    ds:0xc002f138,eax
c00100f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100f7:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00100fc:	c1 e8 0c             	shr    eax,0xc
c00100ff:	85 d2                	test   edx,edx
c0010101:	74 11                	je     c0010114 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0010103:	05 40 f1 02 c0       	add    eax,0xc002f140
c0010108:	01 c2                	add    edx,eax
c001010a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001010d:	83 c0 01             	add    eax,0x1
c0010110:	39 d0                	cmp    eax,edx
c0010112:	75 f6                	jne    c001010a <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0010114:	c3                   	ret    

c0010115 <Phys::setPageState(unsigned long, bool)>:
c0010115:	57                   	push   edi
c0010116:	56                   	push   esi
c0010117:	8b 35 f4 69 02 c0    	mov    esi,DWORD PTR ds:0xc00269f4
c001011d:	53                   	push   ebx
c001011e:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0010123:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010127:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001012b:	0f b6 c0             	movzx  eax,al
c001012e:	89 ca                	mov    edx,ecx
c0010130:	83 e1 07             	and    ecx,0x7
c0010133:	c1 ea 03             	shr    edx,0x3
c0010136:	d3 c3                	rol    ebx,cl
c0010138:	01 d6                	add    esi,edx
c001013a:	d3 e0                	shl    eax,cl
c001013c:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c001013f:	21 fb                	and    ebx,edi
c0010141:	88 1e                	mov    BYTE PTR [esi],bl
c0010143:	8b 1d f4 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269f4
c0010149:	01 da                	add    edx,ebx
c001014b:	8a 0a                	mov    cl,BYTE PTR [edx]
c001014d:	09 c8                	or     eax,ecx
c001014f:	88 02                	mov    BYTE PTR [edx],al
c0010151:	5b                   	pop    ebx
c0010152:	5e                   	pop    esi
c0010153:	5f                   	pop    edi
c0010154:	c3                   	ret    

c0010155 <Phys::getPageState(unsigned long)>:
c0010155:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010159:	8b 15 f4 69 02 c0    	mov    edx,DWORD PTR ds:0xc00269f4
c001015f:	89 c8                	mov    eax,ecx
c0010161:	83 e1 07             	and    ecx,0x7
c0010164:	c1 e8 03             	shr    eax,0x3
c0010167:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c001016b:	d3 f8                	sar    eax,cl
c001016d:	83 e0 01             	and    eax,0x1
c0010170:	c3                   	ret    

c0010171 <Phys::freePage(unsigned long)>:
c0010171:	53                   	push   ebx
c0010172:	83 ec 08             	sub    esp,0x8
c0010175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010179:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c001017f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0010185:	76 41                	jbe    c00101c8 <Phys::freePage(unsigned long)+0x57>
c0010187:	c1 e8 0c             	shr    eax,0xc
c001018a:	50                   	push   eax
c001018b:	89 c3                	mov    ebx,eax
c001018d:	e8 c3 ff ff ff       	call   c0010155 <Phys::getPageState(unsigned long)>
c0010192:	5a                   	pop    edx
c0010193:	84 c0                	test   al,al
c0010195:	74 20                	je     c00101b7 <Phys::freePage(unsigned long)+0x46>
c0010197:	83 ec 08             	sub    esp,0x8
c001019a:	a1 38 f1 02 c0       	mov    eax,ds:0xc002f138
c001019f:	6a 00                	push   0x0
c00101a1:	83 e8 01             	sub    eax,0x1
c00101a4:	53                   	push   ebx
c00101a5:	a3 38 f1 02 c0       	mov    ds:0xc002f138,eax
c00101aa:	e8 66 ff ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c00101af:	83 c4 10             	add    esp,0x10
c00101b2:	83 c4 08             	add    esp,0x8
c00101b5:	5b                   	pop    ebx
c00101b6:	c3                   	ret    
c00101b7:	c7 44 24 10 39 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024439
c00101bf:	83 c4 08             	add    esp,0x8
c00101c2:	5b                   	pop    ebx
c00101c3:	e9 1e fe ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c00101c8:	68 00 10 00 00       	push   0x1000
c00101cd:	50                   	push   eax
c00101ce:	e8 07 ff ff ff       	call   c00100da <Phys::freeDMA(unsigned long, unsigned long)>
c00101d3:	59                   	pop    ecx
c00101d4:	5b                   	pop    ebx
c00101d5:	83 c4 08             	add    esp,0x8
c00101d8:	5b                   	pop    ebx
c00101d9:	c3                   	ret    

c00101da <Phys::allocatePage()>:
c00101da:	56                   	push   esi
c00101db:	53                   	push   ebx
c00101dc:	83 ec 14             	sub    esp,0x14
c00101df:	8b 35 2c f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f12c
c00101e5:	89 f3                	mov    ebx,esi
c00101e7:	eb 0a                	jmp    c00101f3 <Phys::allocatePage()+0x19>
c00101e9:	89 1d 2c f1 02 c0    	mov    DWORD PTR ds:0xc002f12c,ebx
c00101ef:	39 de                	cmp    esi,ebx
c00101f1:	74 26                	je     c0010219 <Phys::allocatePage()+0x3f>
c00101f3:	53                   	push   ebx
c00101f4:	e8 5c ff ff ff       	call   c0010155 <Phys::getPageState(unsigned long)>
c00101f9:	59                   	pop    ecx
c00101fa:	84 c0                	test   al,al
c00101fc:	74 67                	je     c0010265 <Phys::allocatePage()+0x8b>
c00101fe:	83 c3 01             	add    ebx,0x1
c0010201:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010207:	75 e0                	jne    c00101e9 <Phys::allocatePage()+0xf>
c0010209:	31 db                	xor    ebx,ebx
c001020b:	c7 05 2c f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f12c,0x0
c0010215:	39 de                	cmp    esi,ebx
c0010217:	75 da                	jne    c00101f3 <Phys::allocatePage()+0x19>
c0010219:	83 ec 0c             	sub    esp,0xc
c001021c:	a0 50 f1 02 c0       	mov    al,ds:0xc002f150
c0010221:	83 f0 01             	xor    eax,0x1
c0010224:	a2 50 f1 02 c0       	mov    ds:0xc002f150,al
c0010229:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001022e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010231:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0010237:	51                   	push   ecx
c0010238:	e8 85 44 00 00       	call   c00146c2 <VAS::scanForEviction()>
c001023d:	83 c4 10             	add    esp,0x10
c0010240:	85 c0                	test   eax,eax
c0010242:	75 48                	jne    c001028c <Phys::allocatePage()+0xb2>
c0010244:	83 ec 0c             	sub    esp,0xc
c0010247:	68 5c 43 02 c0       	push   0xc002435c
c001024c:	e8 95 fd ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010251:	83 c4 10             	add    esp,0x10
c0010254:	8b 1d 2c f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f12c
c001025a:	53                   	push   ebx
c001025b:	e8 f5 fe ff ff       	call   c0010155 <Phys::getPageState(unsigned long)>
c0010260:	59                   	pop    ecx
c0010261:	84 c0                	test   al,al
c0010263:	75 99                	jne    c00101fe <Phys::allocatePage()+0x24>
c0010265:	6a 01                	push   0x1
c0010267:	53                   	push   ebx
c0010268:	e8 a8 fe ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c001026d:	8b 1d 38 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f138
c0010273:	a1 2c f1 02 c0       	mov    eax,ds:0xc002f12c
c0010278:	83 c3 01             	add    ebx,0x1
c001027b:	5e                   	pop    esi
c001027c:	89 1d 38 f1 02 c0    	mov    DWORD PTR ds:0xc002f138,ebx
c0010282:	c1 e0 0c             	shl    eax,0xc
c0010285:	5a                   	pop    edx
c0010286:	83 c4 14             	add    esp,0x14
c0010289:	5b                   	pop    ebx
c001028a:	5e                   	pop    esi
c001028b:	c3                   	ret    
c001028c:	83 ec 08             	sub    esp,0x8
c001028f:	8b 15 38 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f138
c0010295:	6a 01                	push   0x1
c0010297:	83 c2 01             	add    edx,0x1
c001029a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001029e:	89 15 38 f1 02 c0    	mov    DWORD PTR ds:0xc002f138,edx
c00102a4:	89 c2                	mov    edx,eax
c00102a6:	c1 ea 0c             	shr    edx,0xc
c00102a9:	52                   	push   edx
c00102aa:	e8 66 fe ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c00102af:	83 c4 10             	add    esp,0x10
c00102b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102b6:	eb ce                	jmp    c0010286 <Phys::allocatePage()+0xac>

c00102b8 <Phys::allocateContiguousPages(int)>:
c00102b8:	57                   	push   edi
c00102b9:	56                   	push   esi
c00102ba:	53                   	push   ebx
c00102bb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00102bf:	fa                   	cli    
c00102c0:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00102c6:	83 ec 0c             	sub    esp,0xc
c00102c9:	83 c2 01             	add    edx,0x1
c00102cc:	68 8c 43 02 c0       	push   0xc002438c
c00102d1:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c00102d7:	31 db                	xor    ebx,ebx
c00102d9:	e8 9e 6c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00102de:	83 c4 10             	add    esp,0x10
c00102e1:	85 db                	test   ebx,ebx
c00102e3:	75 11                	jne    c00102f6 <Phys::allocateContiguousPages(int)+0x3e>
c00102e5:	e8 f0 fe ff ff       	call   c00101da <Phys::allocatePage()>
c00102ea:	83 ff 01             	cmp    edi,0x1
c00102ed:	89 c6                	mov    esi,eax
c00102ef:	74 21                	je     c0010312 <Phys::allocateContiguousPages(int)+0x5a>
c00102f1:	bb 01 00 00 00       	mov    ebx,0x1
c00102f6:	e8 df fe ff ff       	call   c00101da <Phys::allocatePage()>
c00102fb:	89 da                	mov    edx,ebx
c00102fd:	c1 e2 0c             	shl    edx,0xc
c0010300:	01 f2                	add    edx,esi
c0010302:	39 c2                	cmp    edx,eax
c0010304:	74 24                	je     c001032a <Phys::allocateContiguousPages(int)+0x72>
c0010306:	bb 01 00 00 00       	mov    ebx,0x1
c001030b:	89 c6                	mov    esi,eax
c001030d:	83 ff 01             	cmp    edi,0x1
c0010310:	75 e4                	jne    c00102f6 <Phys::allocateContiguousPages(int)+0x3e>
c0010312:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001031a:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001031f:	85 c0                	test   eax,eax
c0010321:	75 01                	jne    c0010324 <Phys::allocateContiguousPages(int)+0x6c>
c0010323:	fb                   	sti    
c0010324:	89 f0                	mov    eax,esi
c0010326:	5b                   	pop    ebx
c0010327:	5e                   	pop    esi
c0010328:	5f                   	pop    edi
c0010329:	c3                   	ret    
c001032a:	83 c3 01             	add    ebx,0x1
c001032d:	39 fb                	cmp    ebx,edi
c001032f:	75 b0                	jne    c00102e1 <Phys::allocateContiguousPages(int)+0x29>
c0010331:	eb df                	jmp    c0010312 <Phys::allocateContiguousPages(int)+0x5a>

c0010333 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010333:	56                   	push   esi
c0010334:	53                   	push   ebx
c0010335:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010339:	39 1d 30 f1 02 c0    	cmp    DWORD PTR ds:0xc002f130,ebx
c001033f:	73 06                	jae    c0010347 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010341:	89 1d 30 f1 02 c0    	mov    DWORD PTR ds:0xc002f130,ebx
c0010347:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001034b:	c1 eb 0c             	shr    ebx,0xc
c001034e:	c1 e8 0c             	shr    eax,0xc
c0010351:	39 d8                	cmp    eax,ebx
c0010353:	73 13                	jae    c0010368 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010355:	6a 00                	push   0x0
c0010357:	8d 70 01             	lea    esi,[eax+0x1]
c001035a:	50                   	push   eax
c001035b:	e8 b5 fd ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c0010360:	5a                   	pop    edx
c0010361:	89 f0                	mov    eax,esi
c0010363:	59                   	pop    ecx
c0010364:	39 f3                	cmp    ebx,esi
c0010366:	75 ed                	jne    c0010355 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010368:	5b                   	pop    ebx
c0010369:	5e                   	pop    esi
c001036a:	c3                   	ret    

c001036b <Phys::physicalMemorySetup(unsigned int)>:
c001036b:	55                   	push   ebp
c001036c:	57                   	push   edi
c001036d:	56                   	push   esi
c001036e:	53                   	push   ebx
c001036f:	83 ec 40             	sub    esp,0x40
c0010372:	6a 10                	push   0x10
c0010374:	6a 00                	push   0x0
c0010376:	68 40 f1 02 c0       	push   0xc002f140
c001037b:	e8 70 01 ff ff       	call   c00004f0 <memset>
c0010380:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010384:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010389:	05 00 10 00 00       	add    eax,0x1000
c001038e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010392:	5b                   	pop    ebx
c0010393:	31 db                	xor    ebx,ebx
c0010395:	5e                   	pop    esi
c0010396:	50                   	push   eax
c0010397:	68 4f 44 02 c0       	push   0xc002444f
c001039c:	e8 db 6b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00103a1:	83 c4 10             	add    esp,0x10
c00103a4:	83 ec 08             	sub    esp,0x8
c00103a7:	6a 01                	push   0x1
c00103a9:	53                   	push   ebx
c00103aa:	83 c3 01             	add    ebx,0x1
c00103ad:	e8 63 fd ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c00103b2:	83 c4 10             	add    esp,0x10
c00103b5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00103bb:	75 e7                	jne    c00103a4 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00103bd:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00103c4:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00103cb:	c1 e0 08             	shl    eax,0x8
c00103ce:	09 c2                	or     edx,eax
c00103d0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00103d4:	0f 84 98 01 00 00    	je     c0010572 <Phys::physicalMemorySetup(unsigned int)+0x207>
c00103da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103de:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00103e6:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00103eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103ef:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00103f7:	eb 1c                	jmp    c0010415 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c00103f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103fd:	83 c3 18             	add    ebx,0x18
c0010400:	83 c6 01             	add    esi,0x1
c0010403:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010407:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001040b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001040f:	0f 84 6d 01 00 00    	je     c0010582 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0010415:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010418:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001041b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001041e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010422:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010426:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010428:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001042b:	01 f0                	add    eax,esi
c001042d:	55                   	push   ebp
c001042e:	11 fa                	adc    edx,edi
c0010430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010434:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010438:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001043c:	51                   	push   ecx
c001043d:	56                   	push   esi
c001043e:	68 ec 43 02 c0       	push   0xc00243ec
c0010443:	e8 34 6b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001044c:	83 c4 10             	add    esp,0x10
c001044f:	09 f8                	or     eax,edi
c0010451:	0f 85 2b 01 00 00    	jne    c0010582 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0010457:	83 fd 01             	cmp    ebp,0x1
c001045a:	75 9d                	jne    c00103f9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001045c:	ba 00 00 08 00       	mov    edx,0x80000
c0010461:	89 c1                	mov    ecx,eax
c0010463:	39 f2                	cmp    edx,esi
c0010465:	19 f9                	sbb    ecx,edi
c0010467:	0f 82 ab 00 00 00    	jb     c0010518 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001046d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010471:	89 c1                	mov    ecx,eax
c0010473:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010477:	0f 83 9b 00 00 00    	jae    c0010518 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001047d:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010482:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010486:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001048a:	39 fa                	cmp    edx,edi
c001048c:	19 e8                	sbb    eax,ebp
c001048e:	0f 82 b0 01 00 00    	jb     c0010644 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0010494:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010498:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001049c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00104a2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00104a7:	83 d5 ff             	adc    ebp,0xffffffff
c00104aa:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00104ae:	31 c0                	xor    eax,eax
c00104b0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00104b4:	39 fa                	cmp    edx,edi
c00104b6:	89 c1                	mov    ecx,eax
c00104b8:	19 e9                	sbb    ecx,ebp
c00104ba:	0f 83 39 ff ff ff    	jae    c00103f9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00104c0:	be 00 00 08 00       	mov    esi,0x80000
c00104c5:	83 ec 04             	sub    esp,0x4
c00104c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00104cc:	57                   	push   edi
c00104cd:	56                   	push   esi
c00104ce:	68 10 44 02 c0       	push   0xc0024410
c00104d3:	e8 a4 6a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00104d8:	5d                   	pop    ebp
c00104d9:	58                   	pop    eax
c00104da:	57                   	push   edi
c00104db:	56                   	push   esi
c00104dc:	e8 52 fe ff ff       	call   c0010333 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00104e1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00104e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104e9:	83 c4 0c             	add    esp,0xc
c00104ec:	0f ac d0 0c          	shrd   eax,edx,0xc
c00104f0:	8b 15 3c f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f13c
c00104f6:	01 d0                	add    eax,edx
c00104f8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104ff:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c0010504:	52                   	push   edx
c0010505:	50                   	push   eax
c0010506:	68 75 44 02 c0       	push   0xc0024475
c001050b:	e8 6c 6a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010510:	83 c4 10             	add    esp,0x10
c0010513:	e9 e1 fe ff ff       	jmp    c00103f9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010518:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001051c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010520:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010524:	39 ea                	cmp    edx,ebp
c0010526:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001052a:	0f 82 c9 fe ff ff    	jb     c00103f9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010530:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010535:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010539:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001053d:	0f 83 b6 fe ff ff    	jae    c00103f9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010543:	39 ee                	cmp    esi,ebp
c0010545:	89 f8                	mov    eax,edi
c0010547:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001054b:	0f 83 74 ff ff ff    	jae    c00104c5 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0010551:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010555:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010559:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001055d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010561:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010565:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010569:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001056d:	e9 53 ff ff ff       	jmp    c00104c5 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	68 67 44 02 c0       	push   0xc0024467
c001057a:	e8 67 fa ff ff       	call   c000ffe6 <KePanic(char const*)>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	83 ec 08             	sub    esp,0x8
c0010585:	bb 60 00 00 00       	mov    ebx,0x60
c001058a:	6a 00                	push   0x0
c001058c:	6a 06                	push   0x6
c001058e:	e8 82 fb ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c0010593:	58                   	pop    eax
c0010594:	5a                   	pop    edx
c0010595:	6a 00                	push   0x0
c0010597:	6a 07                	push   0x7
c0010599:	e8 77 fb ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c001059e:	8b 0d 3c f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f13c
c00105a4:	83 c4 10             	add    esp,0x10
c00105a7:	83 c1 02             	add    ecx,0x2
c00105aa:	89 0d 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,ecx
c00105b0:	83 ec 08             	sub    esp,0x8
c00105b3:	6a 00                	push   0x0
c00105b5:	53                   	push   ebx
c00105b6:	83 c3 01             	add    ebx,0x1
c00105b9:	e8 57 fb ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c00105be:	83 c4 10             	add    esp,0x10
c00105c1:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00105c7:	75 e7                	jne    c00105b0 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00105c9:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c00105ce:	bb 40 01 00 00       	mov    ebx,0x140
c00105d3:	83 c0 20             	add    eax,0x20
c00105d6:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c00105db:	eb 26                	jmp    c0010603 <Phys::physicalMemorySetup(unsigned int)+0x298>
c00105dd:	83 ec 08             	sub    esp,0x8
c00105e0:	6a 00                	push   0x0
c00105e2:	53                   	push   ebx
c00105e3:	83 c3 01             	add    ebx,0x1
c00105e6:	e8 2a fb ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c00105eb:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c00105f0:	83 c4 10             	add    esp,0x10
c00105f3:	83 c0 01             	add    eax,0x1
c00105f6:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00105fc:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c0010601:	74 07                	je     c001060a <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0010603:	3d ff 03 00 00       	cmp    eax,0x3ff
c0010608:	7e d3                	jle    c00105dd <Phys::physicalMemorySetup(unsigned int)+0x272>
c001060a:	bb d0 01 00 00       	mov    ebx,0x1d0
c001060f:	3d ff 07 00 00       	cmp    eax,0x7ff
c0010614:	7f 26                	jg     c001063c <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0010616:	83 ec 08             	sub    esp,0x8
c0010619:	6a 00                	push   0x0
c001061b:	53                   	push   ebx
c001061c:	83 c3 01             	add    ebx,0x1
c001061f:	e8 f1 fa ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c0010624:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c0010629:	83 c4 10             	add    esp,0x10
c001062c:	83 c0 01             	add    eax,0x1
c001062f:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0010635:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c001063a:	75 d3                	jne    c001060f <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c001063c:	83 c4 3c             	add    esp,0x3c
c001063f:	5b                   	pop    ebx
c0010640:	5e                   	pop    esi
c0010641:	5f                   	pop    edi
c0010642:	5d                   	pop    ebp
c0010643:	c3                   	ret    
c0010644:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001064c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010654:	e9 3b fe ff ff       	jmp    c0010494 <Phys::physicalMemorySetup(unsigned int)+0x129>
c0010659:	90                   	nop

c001065a <Pipe::isAtty()>:
c001065a:	31 c0                	xor    eax,eax
c001065c:	c3                   	ret    
c001065d:	90                   	nop

c001065e <Pipe::~Pipe()>:
c001065e:	83 ec 0c             	sub    esp,0xc
c0010661:	ba d4 44 02 c0       	mov    edx,0xc00244d4
c0010666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066a:	89 10                	mov    DWORD PTR [eax],edx
c001066c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010670:	83 ec 0c             	sub    esp,0xc
c0010673:	50                   	push   eax
c0010674:	e8 41 2d 00 00       	call   c00133ba <UnixFile::~UnixFile()>
c0010679:	83 c4 10             	add    esp,0x10
c001067c:	90                   	nop
c001067d:	83 c4 0c             	add    esp,0xc
c0010680:	c3                   	ret    
c0010681:	90                   	nop

c0010682 <Pipe::~Pipe()>:
c0010682:	83 ec 0c             	sub    esp,0xc
c0010685:	83 ec 0c             	sub    esp,0xc
c0010688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001068c:	e8 cd ff ff ff       	call   c001065e <Pipe::~Pipe()>
c0010691:	83 c4 10             	add    esp,0x10
c0010694:	83 ec 08             	sub    esp,0x8
c0010697:	6a 20                	push   0x20
c0010699:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001069d:	e8 47 cd ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00106a2:	83 c4 10             	add    esp,0x10
c00106a5:	83 c4 0c             	add    esp,0xc
c00106a8:	c3                   	ret    
c00106a9:	90                   	nop

c00106aa <Pipe::write(unsigned long long, void*, int*)>:
c00106aa:	55                   	push   ebp
c00106ab:	57                   	push   edi
c00106ac:	56                   	push   esi
c00106ad:	53                   	push   ebx
c00106ae:	83 ec 1c             	sub    esp,0x1c
c00106b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00106b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00106b9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00106bc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00106c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00106c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106c7:	89 d8                	mov    eax,ebx
c00106c9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00106cc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00106d0:	89 d6                	mov    esi,edx
c00106d2:	89 d7                	mov    edi,edx
c00106d4:	c1 ff 1f             	sar    edi,0x1f
c00106d7:	03 34 24             	add    esi,DWORD PTR [esp]
c00106da:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00106de:	c1 f8 1f             	sar    eax,0x1f
c00106e1:	39 f3                	cmp    ebx,esi
c00106e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106eb:	19 f8                	sbb    eax,edi
c00106ed:	b8 01 00 00 00       	mov    eax,0x1
c00106f2:	72 6e                	jb     c0010762 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00106f4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00106f7:	01 d0                	add    eax,edx
c00106f9:	99                   	cdq    
c00106fa:	f7 fb                	idiv   ebx
c00106fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010700:	29 d3                	sub    ebx,edx
c0010702:	89 d7                	mov    edi,edx
c0010704:	89 de                	mov    esi,ebx
c0010706:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010709:	c1 fb 1f             	sar    ebx,0x1f
c001070c:	39 f2                	cmp    edx,esi
c001070e:	19 d8                	sbb    eax,ebx
c0010710:	b8 00 00 00 00       	mov    eax,0x0
c0010715:	72 04                	jb     c001071b <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010717:	89 d0                	mov    eax,edx
c0010719:	29 f0                	sub    eax,esi
c001071b:	89 d3                	mov    ebx,edx
c001071d:	29 c3                	sub    ebx,eax
c001071f:	74 0b                	je     c001072c <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010721:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010724:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010728:	89 d9                	mov    ecx,ebx
c001072a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001072c:	85 c0                	test   eax,eax
c001072e:	74 0d                	je     c001073d <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010730:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010734:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010737:	89 de                	mov    esi,ebx
c0010739:	89 c1                	mov    ecx,eax
c001073b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001073d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010740:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010745:	75 10                	jne    c0010757 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010747:	83 ec 0c             	sub    esp,0xc
c001074a:	68 91 44 02 c0       	push   0xc0024491
c001074f:	e8 92 f8 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010754:	83 c4 10             	add    esp,0x10
c0010757:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001075b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001075e:	89 08                	mov    DWORD PTR [eax],ecx
c0010760:	31 c0                	xor    eax,eax
c0010762:	83 c4 1c             	add    esp,0x1c
c0010765:	5b                   	pop    ebx
c0010766:	5e                   	pop    esi
c0010767:	5f                   	pop    edi
c0010768:	5d                   	pop    ebp
c0010769:	c3                   	ret    

c001076a <Pipe::read(unsigned long long, void*, int*)>:
c001076a:	55                   	push   ebp
c001076b:	57                   	push   edi
c001076c:	56                   	push   esi
c001076d:	53                   	push   ebx
c001076e:	83 ec 1c             	sub    esp,0x1c
c0010771:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010775:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010779:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001077d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010780:	89 c8                	mov    eax,ecx
c0010782:	99                   	cdq    
c0010783:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010787:	74 27                	je     c00107b0 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010789:	39 f9                	cmp    ecx,edi
c001078b:	89 d1                	mov    ecx,edx
c001078d:	19 f1                	sbb    ecx,esi
c001078f:	73 1f                	jae    c00107b0 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010791:	fa                   	cli    
c0010792:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0010798:	e8 73 69 00 00       	call   c0017110 <schedule()>
c001079d:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00107a4:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00107ab:	75 d0                	jne    c001077d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00107ad:	fb                   	sti    
c00107ae:	eb cd                	jmp    c001077d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00107b0:	39 f8                	cmp    eax,edi
c00107b2:	89 d1                	mov    ecx,edx
c00107b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00107b7:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00107bb:	19 f1                	sbb    ecx,esi
c00107bd:	73 07                	jae    c00107c6 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c00107bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00107c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00107c6:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00107c9:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00107cc:	29 f7                	sub    edi,esi
c00107ce:	89 f8                	mov    eax,edi
c00107d0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00107d4:	99                   	cdq    
c00107d5:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00107d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107dc:	19 d0                	sbb    eax,edx
c00107de:	73 07                	jae    c00107e7 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c00107e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00107e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107e7:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00107ea:	89 ea                	mov    edx,ebp
c00107ec:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00107f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00107f5:	74 0d                	je     c0010804 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c00107f7:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00107fa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00107fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010802:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010804:	85 d2                	test   edx,edx
c0010806:	74 11                	je     c0010819 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010808:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001080c:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001080f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010813:	89 d1                	mov    ecx,edx
c0010815:	89 c7                	mov    edi,eax
c0010817:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010819:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001081c:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001081f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010822:	99                   	cdq    
c0010823:	89 f7                	mov    edi,esi
c0010825:	03 04 24             	add    eax,DWORD PTR [esp]
c0010828:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001082c:	c1 ff 1f             	sar    edi,0x1f
c001082f:	57                   	push   edi
c0010830:	56                   	push   esi
c0010831:	52                   	push   edx
c0010832:	50                   	push   eax
c0010833:	e8 dc 14 01 00       	call   c0021d14 <__umoddi3>
c0010838:	83 c4 10             	add    esp,0x10
c001083b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001083e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010843:	75 10                	jne    c0010855 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010845:	83 ec 0c             	sub    esp,0xc
c0010848:	68 ae 44 02 c0       	push   0xc00244ae
c001084d:	e8 94 f7 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010852:	83 c4 10             	add    esp,0x10
c0010855:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010859:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001085c:	89 10                	mov    DWORD PTR [eax],edx
c001085e:	83 c4 1c             	add    esp,0x1c
c0010861:	31 c0                	xor    eax,eax
c0010863:	5b                   	pop    ebx
c0010864:	5e                   	pop    esi
c0010865:	5f                   	pop    edi
c0010866:	5d                   	pop    ebp
c0010867:	c3                   	ret    

c0010868 <Pipe::Pipe(int)>:
c0010868:	83 ec 0c             	sub    esp,0xc
c001086b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086f:	83 ec 08             	sub    esp,0x8
c0010872:	6a 00                	push   0x0
c0010874:	50                   	push   eax
c0010875:	e8 5a 29 00 00       	call   c00131d4 <UnixFile::UnixFile(int)>
c001087a:	83 c4 10             	add    esp,0x10
c001087d:	ba d4 44 02 c0       	mov    edx,0xc00244d4
c0010882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010886:	89 10                	mov    DWORD PTR [eax],edx
c0010888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010890:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010897:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001089e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00108a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ad:	83 ec 0c             	sub    esp,0xc
c00108b0:	50                   	push   eax
c00108b1:	e8 d9 f2 ff ff       	call   c000fb8f <malloc>
c00108b6:	83 c4 10             	add    esp,0x10
c00108b9:	89 c2                	mov    edx,eax
c00108bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00108ca:	90                   	nop
c00108cb:	83 c4 0c             	add    esp,0xc
c00108ce:	c3                   	ret    

c00108cf <KePowerThread(void*)>:
c00108cf:	83 ec 0c             	sub    esp,0xc
c00108d2:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00108d9:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00108e0:	75 01                	jne    c00108e3 <KePowerThread(void*)+0x14>
c00108e2:	fb                   	sti    
c00108e3:	c6 05 6c f1 02 c0 00 	mov    BYTE PTR ds:0xc002f16c,0x0
c00108ea:	50                   	push   eax
c00108eb:	50                   	push   eax
c00108ec:	6a 00                	push   0x0
c00108ee:	6a 0a                	push   0xa
c00108f0:	e8 27 6a 00 00       	call   c001731c <sleep(unsigned long long)>
c00108f5:	83 05 a4 f1 02 c0 0a 	add    DWORD PTR ds:0xc002f1a4,0xa
c00108fc:	83 c4 10             	add    esp,0x10
c00108ff:	eb e2                	jmp    c00108e3 <KePowerThread(void*)+0x14>

c0010901 <KeChangePowerSettings(PowerSettings)>:
c0010901:	57                   	push   edi
c0010902:	b9 09 00 00 00       	mov    ecx,0x9
c0010907:	56                   	push   esi
c0010908:	bf 80 f1 02 c0       	mov    edi,0xc002f180
c001090d:	fc                   	cld    
c001090e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010912:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010914:	5e                   	pop    esi
c0010915:	5f                   	pop    edi
c0010916:	c3                   	ret    

c0010917 <KeUserIOReceived()>:
c0010917:	c7 05 a4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1a4,0x0
c0010921:	c3                   	ret    

c0010922 <KeSetupPowerManager()>:
c0010922:	83 ec 0c             	sub    esp,0xc
c0010925:	c7 05 a4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1a4,0x0
c001092f:	68 f0 00 00 00       	push   0xf0
c0010934:	c6 05 6c f1 02 c0 00 	mov    BYTE PTR ds:0xc002f16c,0x0
c001093b:	6a 00                	push   0x0
c001093d:	68 cf 08 01 c0       	push   0xc00108cf
c0010942:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0010948:	e8 03 65 00 00       	call   c0016e50 <Process::createThread(void (*)(void*), void*, int)>
c001094d:	c7 05 80 f1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002f180,0x2
c0010957:	c7 05 84 f1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f184,0x1
c0010961:	c7 05 88 f1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002f188,0x3
c001096b:	c7 05 8c f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f18c,0x0
c0010975:	c7 05 98 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f198,0x0
c001097f:	c7 05 90 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f190,0x0
c0010989:	c7 05 9c f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f19c,0x0
c0010993:	c7 05 94 f1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002f194,0x3c
c001099d:	c7 05 a0 f1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002f1a0,0x3c
c00109a7:	83 c4 1c             	add    esp,0x1c
c00109aa:	c3                   	ret    

c00109ab <KePrepareShutdown()>:
c00109ab:	83 ec 0c             	sub    esp,0xc
c00109ae:	e8 c6 c8 ff ff       	call   c000d279 <KeExecuteAtexit()>
c00109b3:	83 ec 0c             	sub    esp,0xc
c00109b6:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c00109bb:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00109c1:	e8 f6 92 ff ff       	call   c0009cbc <Device::closeAll()>
c00109c6:	83 c4 1c             	add    esp,0x1c
c00109c9:	c3                   	ret    

c00109ca <KeRegisterShutdownHandler(void (*)())>:
c00109ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109ce:	a3 68 f1 02 c0       	mov    ds:0xc002f168,eax
c00109d3:	c3                   	ret    

c00109d4 <KeRegisterRestartHandler(void (*)())>:
c00109d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109d8:	a3 64 f1 02 c0       	mov    ds:0xc002f164,eax
c00109dd:	c3                   	ret    

c00109de <KeRegisterSleepHandler(void (*)())>:
c00109de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109e2:	a3 60 f1 02 c0       	mov    ds:0xc002f160,eax
c00109e7:	c3                   	ret    

c00109e8 <KeShutdown()>:
c00109e8:	83 ec 0c             	sub    esp,0xc
c00109eb:	e8 bb ff ff ff       	call   c00109ab <KePrepareShutdown()>
c00109f0:	a1 68 f1 02 c0       	mov    eax,ds:0xc002f168
c00109f5:	85 c0                	test   eax,eax
c00109f7:	74 04                	je     c00109fd <KeShutdown()+0x15>
c00109f9:	ff d0                	call   eax
c00109fb:	eb 10                	jmp    c0010a0d <KeShutdown()+0x25>
c00109fd:	83 ec 0c             	sub    esp,0xc
c0010a00:	68 e8 44 02 c0       	push   0xc00244e8
c0010a05:	e8 dc f5 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010a0a:	83 c4 10             	add    esp,0x10
c0010a0d:	83 ec 0c             	sub    esp,0xc
c0010a10:	68 09 45 02 c0       	push   0xc0024509
c0010a15:	e8 cc f5 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010a1a:	83 c4 1c             	add    esp,0x1c
c0010a1d:	c3                   	ret    

c0010a1e <KeSleep()>:
c0010a1e:	a1 60 f1 02 c0       	mov    eax,ds:0xc002f160
c0010a23:	85 c0                	test   eax,eax
c0010a25:	74 02                	je     c0010a29 <KeSleep()+0xb>
c0010a27:	ff e0                	jmp    eax
c0010a29:	c3                   	ret    

c0010a2a <KeHandlePowerButton()>:
c0010a2a:	a1 80 f1 02 c0       	mov    eax,ds:0xc002f180
c0010a2f:	83 f8 02             	cmp    eax,0x2
c0010a32:	75 02                	jne    c0010a36 <KeHandlePowerButton()+0xc>
c0010a34:	eb b2                	jmp    c00109e8 <KeShutdown()>
c0010a36:	48                   	dec    eax
c0010a37:	75 02                	jne    c0010a3b <KeHandlePowerButton()+0x11>
c0010a39:	eb e3                	jmp    c0010a1e <KeSleep()>
c0010a3b:	c3                   	ret    

c0010a3c <KeHandleSleepButton()>:
c0010a3c:	a1 84 f1 02 c0       	mov    eax,ds:0xc002f184
c0010a41:	83 f8 02             	cmp    eax,0x2
c0010a44:	75 02                	jne    c0010a48 <KeHandleSleepButton()+0xc>
c0010a46:	eb a0                	jmp    c00109e8 <KeShutdown()>
c0010a48:	48                   	dec    eax
c0010a49:	75 02                	jne    c0010a4d <KeHandleSleepButton()+0x11>
c0010a4b:	eb d1                	jmp    c0010a1e <KeSleep()>
c0010a4d:	c3                   	ret    

c0010a4e <KeRestart()>:
c0010a4e:	83 ec 0c             	sub    esp,0xc
c0010a51:	e8 55 ff ff ff       	call   c00109ab <KePrepareShutdown()>
c0010a56:	a1 64 f1 02 c0       	mov    eax,ds:0xc002f164
c0010a5b:	85 c0                	test   eax,eax
c0010a5d:	74 02                	je     c0010a61 <KeRestart()+0x13>
c0010a5f:	ff d0                	call   eax
c0010a61:	83 ec 0c             	sub    esp,0xc
c0010a64:	68 2d 45 02 c0       	push   0xc002452d
c0010a69:	e8 78 f5 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010a6e:	83 c4 1c             	add    esp,0x1c
c0010a71:	c3                   	ret    

c0010a72 <KeRand()>:
c0010a72:	69 05 a8 f1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002f1a8,0x2875
c0010a7c:	69 0d ac f1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002f1ac,0xa2e7b175
c0010a86:	53                   	push   ebx
c0010a87:	01 c1                	add    ecx,eax
c0010a89:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010a8e:	f7 25 a8 f1 02 c0    	mul    DWORD PTR ds:0xc002f1a8
c0010a94:	01 ca                	add    edx,ecx
c0010a96:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010a9b:	83 d2 00             	adc    edx,0x0
c0010a9e:	a3 a8 f1 02 c0       	mov    ds:0xc002f1a8,eax
c0010aa3:	0f b7 da             	movzx  ebx,dx
c0010aa6:	89 da                	mov    edx,ebx
c0010aa8:	89 1d ac f1 02 c0    	mov    DWORD PTR ds:0xc002f1ac,ebx
c0010aae:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010ab2:	5b                   	pop    ebx
c0010ab3:	c3                   	ret    

c0010ab4 <KeSeedRand(unsigned int)>:
c0010ab4:	53                   	push   ebx
c0010ab5:	83 ec 08             	sub    esp,0x8
c0010ab8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010abc:	e8 06 9f 00 00       	call   c001a9c7 <HalGetRand()>
c0010ac1:	c7 05 ac f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1ac,0x0
c0010acb:	31 d8                	xor    eax,ebx
c0010acd:	a3 a8 f1 02 c0       	mov    ds:0xc002f1a8,eax
c0010ad2:	e8 9b ff ff ff       	call   c0010a72 <KeRand()>
c0010ad7:	83 c4 08             	add    esp,0x8
c0010ada:	5b                   	pop    ebx
c0010adb:	eb 95                	jmp    c0010a72 <KeRand()>

c0010add <KeInitRand()>:
c0010add:	83 ec 0c             	sub    esp,0xc
c0010ae0:	e8 b0 9c 00 00       	call   c001a795 <HalQueryPerformanceCounter()>
c0010ae5:	0f 20 da             	mov    edx,cr3
c0010ae8:	0f 22 da             	mov    cr3,edx
c0010aeb:	0f 20 da             	mov    edx,cr3
c0010aee:	0f 22 da             	mov    cr3,edx
c0010af1:	0f 20 da             	mov    edx,cr3
c0010af4:	0f 22 da             	mov    cr3,edx
c0010af7:	0f 20 da             	mov    edx,cr3
c0010afa:	0f 22 da             	mov    cr3,edx
c0010afd:	83 ec 0c             	sub    esp,0xc
c0010b00:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010b05:	50                   	push   eax
c0010b06:	e8 a9 ff ff ff       	call   c0010ab4 <KeSeedRand(unsigned int)>
c0010b0b:	83 c4 1c             	add    esp,0x1c
c0010b0e:	c3                   	ret    
c0010b0f:	90                   	nop

c0010b10 <KeResolveCompatibilitySymbol(char*)>:
c0010b10:	83 ec 0c             	sub    esp,0xc
c0010b13:	83 ec 08             	sub    esp,0x8
c0010b16:	68 3c 45 02 c0       	push   0xc002453c
c0010b1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b1f:	e8 2c fc fe ff       	call   c0000750 <strcmp>
c0010b24:	83 c4 10             	add    esp,0x10
c0010b27:	85 c0                	test   eax,eax
c0010b29:	0f 94 c0             	sete   al
c0010b2c:	0f b6 c0             	movzx  eax,al
c0010b2f:	85 c0                	test   eax,eax
c0010b31:	74 0d                	je     c0010b40 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010b33:	b8 c8 d0 02 c0       	mov    eax,0xc002d0c8
c0010b38:	e9 3b 02 00 00       	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b40:	83 ec 08             	sub    esp,0x8
c0010b43:	68 45 45 02 c0       	push   0xc0024545
c0010b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b4c:	e8 ff fb fe ff       	call   c0000750 <strcmp>
c0010b51:	83 c4 10             	add    esp,0x10
c0010b54:	85 c0                	test   eax,eax
c0010b56:	0f 94 c0             	sete   al
c0010b59:	0f b6 c0             	movzx  eax,al
c0010b5c:	85 c0                	test   eax,eax
c0010b5e:	74 0c                	je     c0010b6c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010b60:	b8 14 1c 02 c0       	mov    eax,0xc0021c14
c0010b65:	e9 0e 02 00 00       	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010b6a:	66 90                	xchg   ax,ax
c0010b6c:	83 ec 08             	sub    esp,0x8
c0010b6f:	68 4f 45 02 c0       	push   0xc002454f
c0010b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b78:	e8 d3 fb fe ff       	call   c0000750 <strcmp>
c0010b7d:	83 c4 10             	add    esp,0x10
c0010b80:	85 c0                	test   eax,eax
c0010b82:	0f 94 c0             	sete   al
c0010b85:	0f b6 c0             	movzx  eax,al
c0010b88:	85 c0                	test   eax,eax
c0010b8a:	74 0c                	je     c0010b98 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010b8c:	b8 c8 d0 02 c0       	mov    eax,0xc002d0c8
c0010b91:	e9 e2 01 00 00       	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010b96:	66 90                	xchg   ax,ax
c0010b98:	83 ec 08             	sub    esp,0x8
c0010b9b:	68 62 45 02 c0       	push   0xc0024562
c0010ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba4:	e8 a7 fb fe ff       	call   c0000750 <strcmp>
c0010ba9:	83 c4 10             	add    esp,0x10
c0010bac:	85 c0                	test   eax,eax
c0010bae:	0f 94 c0             	sete   al
c0010bb1:	0f b6 c0             	movzx  eax,al
c0010bb4:	85 c0                	test   eax,eax
c0010bb6:	74 0c                	je     c0010bc4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010bb8:	b8 48 19 02 c0       	mov    eax,0xc0021948
c0010bbd:	e9 b6 01 00 00       	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010bc2:	66 90                	xchg   ax,ax
c0010bc4:	83 ec 08             	sub    esp,0x8
c0010bc7:	68 6b 45 02 c0       	push   0xc002456b
c0010bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd0:	e8 7b fb fe ff       	call   c0000750 <strcmp>
c0010bd5:	83 c4 10             	add    esp,0x10
c0010bd8:	85 c0                	test   eax,eax
c0010bda:	0f 94 c0             	sete   al
c0010bdd:	0f b6 c0             	movzx  eax,al
c0010be0:	85 c0                	test   eax,eax
c0010be2:	74 0c                	je     c0010bf0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010be4:	b8 e6 ff 00 c0       	mov    eax,0xc000ffe6
c0010be9:	e9 8a 01 00 00       	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010bee:	66 90                	xchg   ax,ax
c0010bf0:	83 ec 08             	sub    esp,0x8
c0010bf3:	68 7e 45 02 c0       	push   0xc002457e
c0010bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bfc:	e8 4f fb fe ff       	call   c0000750 <strcmp>
c0010c01:	83 c4 10             	add    esp,0x10
c0010c04:	85 c0                	test   eax,eax
c0010c06:	0f 94 c0             	sete   al
c0010c09:	0f b6 c0             	movzx  eax,al
c0010c0c:	85 c0                	test   eax,eax
c0010c0e:	74 0c                	je     c0010c1c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010c10:	b8 29 d3 00 c0       	mov    eax,0xc000d329
c0010c15:	e9 5e 01 00 00       	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010c1a:	66 90                	xchg   ax,ax
c0010c1c:	83 ec 08             	sub    esp,0x8
c0010c1f:	68 9b 45 02 c0       	push   0xc002459b
c0010c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c28:	e8 23 fb fe ff       	call   c0000750 <strcmp>
c0010c2d:	83 c4 10             	add    esp,0x10
c0010c30:	85 c0                	test   eax,eax
c0010c32:	0f 94 c0             	sete   al
c0010c35:	0f b6 c0             	movzx  eax,al
c0010c38:	85 c0                	test   eax,eax
c0010c3a:	74 0c                	je     c0010c48 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010c3c:	b8 14 1d 02 c0       	mov    eax,0xc0021d14
c0010c41:	e9 32 01 00 00       	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010c46:	66 90                	xchg   ax,ax
c0010c48:	83 ec 08             	sub    esp,0x8
c0010c4b:	68 a5 45 02 c0       	push   0xc00245a5
c0010c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c54:	e8 f7 fa fe ff       	call   c0000750 <strcmp>
c0010c59:	83 c4 10             	add    esp,0x10
c0010c5c:	85 c0                	test   eax,eax
c0010c5e:	0f 94 c0             	sete   al
c0010c61:	0f b6 c0             	movzx  eax,al
c0010c64:	85 c0                	test   eax,eax
c0010c66:	74 0c                	je     c0010c74 <KeResolveCompatibilitySymbol(char*)+0x164>
c0010c68:	b8 94 1a 02 c0       	mov    eax,0xc0021a94
c0010c6d:	e9 06 01 00 00       	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010c72:	66 90                	xchg   ax,ax
c0010c74:	83 ec 08             	sub    esp,0x8
c0010c77:	68 ae 45 02 c0       	push   0xc00245ae
c0010c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c80:	e8 cb fa fe ff       	call   c0000750 <strcmp>
c0010c85:	83 c4 10             	add    esp,0x10
c0010c88:	85 c0                	test   eax,eax
c0010c8a:	0f 94 c0             	sete   al
c0010c8d:	0f b6 c0             	movzx  eax,al
c0010c90:	85 c0                	test   eax,eax
c0010c92:	74 0c                	je     c0010ca0 <KeResolveCompatibilitySymbol(char*)+0x190>
c0010c94:	b8 cc d0 02 c0       	mov    eax,0xc002d0cc
c0010c99:	e9 da 00 00 00       	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010c9e:	66 90                	xchg   ax,ax
c0010ca0:	83 ec 08             	sub    esp,0x8
c0010ca3:	68 c6 45 02 c0       	push   0xc00245c6
c0010ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cac:	e8 9f fa fe ff       	call   c0000750 <strcmp>
c0010cb1:	83 c4 10             	add    esp,0x10
c0010cb4:	85 c0                	test   eax,eax
c0010cb6:	0f 94 c0             	sete   al
c0010cb9:	0f b6 c0             	movzx  eax,al
c0010cbc:	85 c0                	test   eax,eax
c0010cbe:	74 0c                	je     c0010ccc <KeResolveCompatibilitySymbol(char*)+0x1bc>
c0010cc0:	b8 cc d0 02 c0       	mov    eax,0xc002d0cc
c0010cc5:	e9 ae 00 00 00       	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010cca:	66 90                	xchg   ax,ax
c0010ccc:	83 ec 08             	sub    esp,0x8
c0010ccf:	68 d3 45 02 c0       	push   0xc00245d3
c0010cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cd8:	e8 73 fa fe ff       	call   c0000750 <strcmp>
c0010cdd:	83 c4 10             	add    esp,0x10
c0010ce0:	85 c0                	test   eax,eax
c0010ce2:	0f 94 c0             	sete   al
c0010ce5:	0f b6 c0             	movzx  eax,al
c0010ce8:	85 c0                	test   eax,eax
c0010cea:	74 0c                	je     c0010cf8 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c0010cec:	b8 cd d0 02 c0       	mov    eax,0xc002d0cd
c0010cf1:	e9 82 00 00 00       	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010cf6:	66 90                	xchg   ax,ax
c0010cf8:	83 ec 08             	sub    esp,0x8
c0010cfb:	68 e0 45 02 c0       	push   0xc00245e0
c0010d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d04:	e8 47 fa fe ff       	call   c0000750 <strcmp>
c0010d09:	83 c4 10             	add    esp,0x10
c0010d0c:	85 c0                	test   eax,eax
c0010d0e:	0f 94 c0             	sete   al
c0010d11:	0f b6 c0             	movzx  eax,al
c0010d14:	85 c0                	test   eax,eax
c0010d16:	74 08                	je     c0010d20 <KeResolveCompatibilitySymbol(char*)+0x210>
c0010d18:	b8 cc d0 02 c0       	mov    eax,0xc002d0cc
c0010d1d:	eb 59                	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010d1f:	90                   	nop
c0010d20:	83 ec 08             	sub    esp,0x8
c0010d23:	68 f1 45 02 c0       	push   0xc00245f1
c0010d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d2c:	e8 1f fa fe ff       	call   c0000750 <strcmp>
c0010d31:	83 c4 10             	add    esp,0x10
c0010d34:	85 c0                	test   eax,eax
c0010d36:	0f 94 c0             	sete   al
c0010d39:	0f b6 c0             	movzx  eax,al
c0010d3c:	85 c0                	test   eax,eax
c0010d3e:	74 08                	je     c0010d48 <KeResolveCompatibilitySymbol(char*)+0x238>
c0010d40:	b8 cd d0 02 c0       	mov    eax,0xc002d0cd
c0010d45:	eb 31                	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010d47:	90                   	nop
c0010d48:	83 ec 08             	sub    esp,0x8
c0010d4b:	68 02 46 02 c0       	push   0xc0024602
c0010d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d54:	e8 f7 f9 fe ff       	call   c0000750 <strcmp>
c0010d59:	83 c4 10             	add    esp,0x10
c0010d5c:	85 c0                	test   eax,eax
c0010d5e:	0f 94 c0             	sete   al
c0010d61:	0f b6 c0             	movzx  eax,al
c0010d64:	85 c0                	test   eax,eax
c0010d66:	74 08                	je     c0010d70 <KeResolveCompatibilitySymbol(char*)+0x260>
c0010d68:	b8 10 79 01 c0       	mov    eax,0xc0017910
c0010d6d:	eb 09                	jmp    c0010d78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010d6f:	90                   	nop
c0010d70:	b8 00 00 00 00       	mov    eax,0x0
c0010d75:	8d 76 00             	lea    esi,[esi+0x0]
c0010d78:	83 c4 0c             	add    esp,0xc
c0010d7b:	c3                   	ret    

c0010d7c <Semaphore::Semaphore(int)>:
c0010d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d84:	89 10                	mov    DWORD PTR [eax],edx
c0010d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d8a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010d91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010da7:	90                   	nop
c0010da8:	c3                   	ret    
c0010da9:	90                   	nop
c0010daa:	66 90                	xchg   ax,ax

c0010dac <Semaphore::tryAcquire()>:
c0010dac:	83 ec 0c             	sub    esp,0xc
c0010daf:	fa                   	cli    
c0010db0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010db5:	83 c0 01             	add    eax,0x1
c0010db8:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010dbd:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010dc2:	83 c0 01             	add    eax,0x1
c0010dc5:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dce:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dd7:	39 c2                	cmp    edx,eax
c0010dd9:	7d 59                	jge    c0010e34 <Semaphore::tryAcquire()+0x88>
c0010ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ddf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010de2:	8d 50 01             	lea    edx,[eax+0x1]
c0010de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010dec:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010df1:	83 e8 01             	sub    eax,0x1
c0010df4:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010df9:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010dfe:	85 c0                	test   eax,eax
c0010e00:	75 1a                	jne    c0010e1c <Semaphore::tryAcquire()+0x70>
c0010e02:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010e07:	85 c0                	test   eax,eax
c0010e09:	74 11                	je     c0010e1c <Semaphore::tryAcquire()+0x70>
c0010e0b:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010e15:	e8 f6 62 00 00       	call   c0017110 <schedule()>
c0010e1a:	66 90                	xchg   ax,ax
c0010e1c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010e24:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010e29:	85 c0                	test   eax,eax
c0010e2b:	75 03                	jne    c0010e30 <Semaphore::tryAcquire()+0x84>
c0010e2d:	fb                   	sti    
c0010e2e:	66 90                	xchg   ax,ax
c0010e30:	b0 01                	mov    al,0x1
c0010e32:	eb 48                	jmp    c0010e7c <Semaphore::tryAcquire()+0xd0>
c0010e34:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010e39:	83 e8 01             	sub    eax,0x1
c0010e3c:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010e41:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010e46:	85 c0                	test   eax,eax
c0010e48:	75 1a                	jne    c0010e64 <Semaphore::tryAcquire()+0xb8>
c0010e4a:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010e4f:	85 c0                	test   eax,eax
c0010e51:	74 11                	je     c0010e64 <Semaphore::tryAcquire()+0xb8>
c0010e53:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010e5d:	e8 ae 62 00 00       	call   c0017110 <schedule()>
c0010e62:	66 90                	xchg   ax,ax
c0010e64:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010e6c:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010e71:	85 c0                	test   eax,eax
c0010e73:	75 03                	jne    c0010e78 <Semaphore::tryAcquire()+0xcc>
c0010e75:	fb                   	sti    
c0010e76:	66 90                	xchg   ax,ax
c0010e78:	b0 00                	mov    al,0x0
c0010e7a:	66 90                	xchg   ax,ax
c0010e7c:	83 c4 0c             	add    esp,0xc
c0010e7f:	c3                   	ret    

c0010e80 <Semaphore::assertLocked(char const*)>:
c0010e80:	83 ec 0c             	sub    esp,0xc
c0010e83:	fa                   	cli    
c0010e84:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010e89:	83 c0 01             	add    eax,0x1
c0010e8c:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010e91:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010e96:	83 c0 01             	add    eax,0x1
c0010e99:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ea2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ea9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010eab:	39 c2                	cmp    edx,eax
c0010ead:	7d 11                	jge    c0010ec0 <Semaphore::assertLocked(char const*)+0x40>
c0010eaf:	83 ec 0c             	sub    esp,0xc
c0010eb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010eb6:	e8 2b f1 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010ebb:	83 c4 10             	add    esp,0x10
c0010ebe:	66 90                	xchg   ax,ax
c0010ec0:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010ec5:	83 e8 01             	sub    eax,0x1
c0010ec8:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010ecd:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010ed2:	85 c0                	test   eax,eax
c0010ed4:	75 1a                	jne    c0010ef0 <Semaphore::assertLocked(char const*)+0x70>
c0010ed6:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010edb:	85 c0                	test   eax,eax
c0010edd:	74 11                	je     c0010ef0 <Semaphore::assertLocked(char const*)+0x70>
c0010edf:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010ee9:	e8 22 62 00 00       	call   c0017110 <schedule()>
c0010eee:	66 90                	xchg   ax,ax
c0010ef0:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010ef8:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010efd:	85 c0                	test   eax,eax
c0010eff:	75 03                	jne    c0010f04 <Semaphore::assertLocked(char const*)+0x84>
c0010f01:	fb                   	sti    
c0010f02:	66 90                	xchg   ax,ax
c0010f04:	90                   	nop
c0010f05:	83 c4 0c             	add    esp,0xc
c0010f08:	c3                   	ret    
c0010f09:	90                   	nop
c0010f0a:	66 90                	xchg   ax,ax

c0010f0c <Semaphore::acquire(int)>:
c0010f0c:	83 ec 1c             	sub    esp,0x1c
c0010f0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010f14:	0f 84 ae 00 00 00    	je     c0010fc8 <Semaphore::acquire(int)+0xbc>
c0010f1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f22:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010f27:	90                   	nop
c0010f28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010f2d:	85 c0                	test   eax,eax
c0010f2f:	0f 84 87 00 00 00    	je     c0010fbc <Semaphore::acquire(int)+0xb0>
c0010f35:	83 ec 0c             	sub    esp,0xc
c0010f38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f3c:	e8 6b fe ff ff       	call   c0010dac <Semaphore::tryAcquire()>
c0010f41:	83 c4 10             	add    esp,0x10
c0010f44:	83 f0 01             	xor    eax,0x1
c0010f47:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010f4b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010f4f:	83 f0 01             	xor    eax,0x1
c0010f52:	0f b6 c0             	movzx  eax,al
c0010f55:	85 c0                	test   eax,eax
c0010f57:	75 5f                	jne    c0010fb8 <Semaphore::acquire(int)+0xac>
c0010f59:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010f5e:	7f 34                	jg     c0010f94 <Semaphore::acquire(int)+0x88>
c0010f60:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010f64:	89 d0                	mov    eax,edx
c0010f66:	c1 e0 02             	shl    eax,0x2
c0010f69:	01 d0                	add    eax,edx
c0010f6b:	01 c0                	add    eax,eax
c0010f6d:	89 c2                	mov    edx,eax
c0010f6f:	c1 fa 1f             	sar    edx,0x1f
c0010f72:	83 ec 08             	sub    esp,0x8
c0010f75:	52                   	push   edx
c0010f76:	50                   	push   eax
c0010f77:	e8 88 63 00 00       	call   c0017304 <milliTenthSleep(unsigned long long)>
c0010f7c:	83 c4 10             	add    esp,0x10
c0010f7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f83:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010f87:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010f8f:	eb 97                	jmp    c0010f28 <Semaphore::acquire(int)+0x1c>
c0010f91:	8d 76 00             	lea    esi,[esi+0x0]
c0010f94:	83 ec 08             	sub    esp,0x8
c0010f97:	6a 00                	push   0x0
c0010f99:	68 90 01 00 00       	push   0x190
c0010f9e:	e8 61 63 00 00       	call   c0017304 <milliTenthSleep(unsigned long long)>
c0010fa3:	83 c4 10             	add    esp,0x10
c0010fa6:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010fab:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010fb0:	e9 73 ff ff ff       	jmp    c0010f28 <Semaphore::acquire(int)+0x1c>
c0010fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fb8:	90                   	nop
c0010fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010fbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fc0:	e9 fb 00 00 00       	jmp    c00110c0 <Semaphore::acquire(int)+0x1b4>
c0010fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fc8:	fa                   	cli    
c0010fc9:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010fce:	83 c0 01             	add    eax,0x1
c0010fd1:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010fd6:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010fdb:	83 c0 01             	add    eax,0x1
c0010fde:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fe7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010fea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fee:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ff0:	39 c2                	cmp    edx,eax
c0010ff2:	7d 14                	jge    c0011008 <Semaphore::acquire(int)+0xfc>
c0010ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ff8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010ffb:	8d 50 01             	lea    edx,[eax+0x1]
c0010ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011002:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011005:	eb 6d                	jmp    c0011074 <Semaphore::acquire(int)+0x168>
c0011007:	90                   	nop
c0011008:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001100d:	8b 00                	mov    eax,DWORD PTR [eax]
c001100f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0011016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001101a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001101d:	85 c0                	test   eax,eax
c001101f:	75 13                	jne    c0011034 <Semaphore::acquire(int)+0x128>
c0011021:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011026:	8b 10                	mov    edx,DWORD PTR [eax]
c0011028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001102c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001102f:	eb 17                	jmp    c0011048 <Semaphore::acquire(int)+0x13c>
c0011031:	8d 76 00             	lea    esi,[esi+0x0]
c0011034:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0011039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001103d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011040:	8b 12                	mov    edx,DWORD PTR [edx]
c0011042:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011045:	8d 76 00             	lea    esi,[esi+0x0]
c0011048:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001104d:	8b 10                	mov    edx,DWORD PTR [eax]
c001104f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011053:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	68 18 46 02 c0       	push   0xc0024618
c001105e:	e8 19 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	83 ec 0c             	sub    esp,0xc
c0011069:	6a 05                	push   0x5
c001106b:	e8 60 61 00 00       	call   c00171d0 <blockTask(TaskState)>
c0011070:	83 c4 10             	add    esp,0x10
c0011073:	90                   	nop
c0011074:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0011079:	83 e8 01             	sub    eax,0x1
c001107c:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0011081:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0011086:	85 c0                	test   eax,eax
c0011088:	75 1a                	jne    c00110a4 <Semaphore::acquire(int)+0x198>
c001108a:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c001108f:	85 c0                	test   eax,eax
c0011091:	74 11                	je     c00110a4 <Semaphore::acquire(int)+0x198>
c0011093:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c001109d:	e8 6e 60 00 00       	call   c0017110 <schedule()>
c00110a2:	66 90                	xchg   ax,ax
c00110a4:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00110ac:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00110b1:	85 c0                	test   eax,eax
c00110b3:	75 03                	jne    c00110b8 <Semaphore::acquire(int)+0x1ac>
c00110b5:	fb                   	sti    
c00110b6:	66 90                	xchg   ax,ax
c00110b8:	b8 00 00 00 00       	mov    eax,0x0
c00110bd:	8d 76 00             	lea    esi,[esi+0x0]
c00110c0:	83 c4 1c             	add    esp,0x1c
c00110c3:	c3                   	ret    

c00110c4 <Semaphore::acquire()>:
c00110c4:	83 ec 0c             	sub    esp,0xc
c00110c7:	83 ec 08             	sub    esp,0x8
c00110ca:	6a 00                	push   0x0
c00110cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110d0:	e8 37 fe ff ff       	call   c0010f0c <Semaphore::acquire(int)>
c00110d5:	83 c4 10             	add    esp,0x10
c00110d8:	90                   	nop
c00110d9:	83 c4 0c             	add    esp,0xc
c00110dc:	c3                   	ret    
c00110dd:	90                   	nop
c00110de:	66 90                	xchg   ax,ax

c00110e0 <Semaphore::release()>:
c00110e0:	83 ec 1c             	sub    esp,0x1c
c00110e3:	fa                   	cli    
c00110e4:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00110e9:	83 c0 01             	add    eax,0x1
c00110ec:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c00110f1:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00110f6:	83 c0 01             	add    eax,0x1
c00110f9:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c00110fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011102:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011105:	85 c0                	test   eax,eax
c0011107:	74 2b                	je     c0011134 <Semaphore::release()+0x54>
c0011109:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001110d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011110:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011114:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011118:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001111b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001111f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011122:	83 ec 0c             	sub    esp,0xc
c0011125:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011129:	e8 3e 63 00 00       	call   c001746c <unblockTask(ThreadControlBlock*)>
c001112e:	83 c4 10             	add    esp,0x10
c0011131:	eb 15                	jmp    c0011148 <Semaphore::release()+0x68>
c0011133:	90                   	nop
c0011134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011138:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001113b:	8d 50 ff             	lea    edx,[eax-0x1]
c001113e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011142:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011145:	8d 76 00             	lea    esi,[esi+0x0]
c0011148:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c001114d:	83 e8 01             	sub    eax,0x1
c0011150:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0011155:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c001115a:	85 c0                	test   eax,eax
c001115c:	75 1a                	jne    c0011178 <Semaphore::release()+0x98>
c001115e:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0011163:	85 c0                	test   eax,eax
c0011165:	74 11                	je     c0011178 <Semaphore::release()+0x98>
c0011167:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0011171:	e8 9a 5f 00 00       	call   c0017110 <schedule()>
c0011176:	66 90                	xchg   ax,ax
c0011178:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0011180:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0011185:	85 c0                	test   eax,eax
c0011187:	75 03                	jne    c001118c <Semaphore::release()+0xac>
c0011189:	fb                   	sti    
c001118a:	66 90                	xchg   ax,ax
c001118c:	90                   	nop
c001118d:	83 c4 1c             	add    esp,0x1c
c0011190:	c3                   	ret    

c0011191 <KiSigKill(int)>:
c0011191:	83 ec 0c             	sub    esp,0xc
c0011194:	6a 00                	push   0x0
c0011196:	6a 00                	push   0x0
c0011198:	6a ff                	push   0xffffffff
c001119a:	6a 01                	push   0x1
c001119c:	e8 b1 6e 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00111a1:	83 c4 1c             	add    esp,0x1c
c00111a4:	c3                   	ret    

c00111a5 <KiDefaultSignalHandlerIgnore(int)>:
c00111a5:	c3                   	ret    

c00111a6 <KiDefaultSignalHandlerPause(int)>:
c00111a6:	57                   	push   edi
c00111a7:	b9 07 00 00 00       	mov    ecx,0x7
c00111ac:	56                   	push   esi
c00111ad:	be 73 46 02 c0       	mov    esi,0xc0024673
c00111b2:	83 ec 24             	sub    esp,0x24
c00111b5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00111b9:	fc                   	cld    
c00111ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00111bc:	8d 44 24 04          	lea    eax,[esp+0x4]
c00111c0:	50                   	push   eax
c00111c1:	6a 00                	push   0x0
c00111c3:	6a 00                	push   0x0
c00111c5:	6a 27                	push   0x27
c00111c7:	e8 86 6e 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00111cc:	83 c4 34             	add    esp,0x34
c00111cf:	5e                   	pop    esi
c00111d0:	5f                   	pop    edi
c00111d1:	c3                   	ret    

c00111d2 <KiDefaultSignalHandlerResume(int)>:
c00111d2:	57                   	push   edi
c00111d3:	b9 1d 00 00 00       	mov    ecx,0x1d
c00111d8:	56                   	push   esi
c00111d9:	be 8f 46 02 c0       	mov    esi,0xc002468f
c00111de:	83 ec 24             	sub    esp,0x24
c00111e1:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00111e5:	fc                   	cld    
c00111e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111e8:	8d 44 24 03          	lea    eax,[esp+0x3]
c00111ec:	50                   	push   eax
c00111ed:	6a 00                	push   0x0
c00111ef:	6a 00                	push   0x0
c00111f1:	6a 27                	push   0x27
c00111f3:	e8 5a 6e 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00111f8:	83 c4 34             	add    esp,0x34
c00111fb:	5e                   	pop    esi
c00111fc:	5f                   	pop    edi
c00111fd:	c3                   	ret    

c00111fe <KeDeinitSignals(SigHandlerBlock*)>:
c00111fe:	e9 9c e9 ff ff       	jmp    c000fb9f <free>

c0011203 <KeInitSignals()>:
c0011203:	53                   	push   ebx
c0011204:	83 ec 14             	sub    esp,0x14
c0011207:	68 c8 00 00 00       	push   0xc8
c001120c:	e8 7e e9 ff ff       	call   c000fb8f <malloc>
c0011211:	83 c4 0c             	add    esp,0xc
c0011214:	89 c3                	mov    ebx,eax
c0011216:	6a 04                	push   0x4
c0011218:	6a 00                	push   0x0
c001121a:	50                   	push   eax
c001121b:	e8 d0 f2 fe ff       	call   c00004f0 <memset>
c0011220:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c001122a:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0011234:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001123b:	83 c4 0c             	add    esp,0xc
c001123e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0011244:	6a 20                	push   0x20
c0011246:	6a 00                	push   0x0
c0011248:	50                   	push   eax
c0011249:	e8 a2 f2 fe ff       	call   c00004f0 <memset>
c001124e:	83 c4 0c             	add    esp,0xc
c0011251:	6a 44                	push   0x44
c0011253:	6a 00                	push   0x0
c0011255:	53                   	push   ebx
c0011256:	e8 95 f2 fe ff       	call   c00004f0 <memset>
c001125b:	83 c4 0c             	add    esp,0xc
c001125e:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0011264:	6a 11                	push   0x11
c0011266:	6a 00                	push   0x0
c0011268:	50                   	push   eax
c0011269:	e8 82 f2 fe ff       	call   c00004f0 <memset>
c001126e:	89 d8                	mov    eax,ebx
c0011270:	83 c4 18             	add    esp,0x18
c0011273:	5b                   	pop    ebx
c0011274:	c3                   	ret    

c0011275 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011275:	53                   	push   ebx
c0011276:	b8 01 00 00 00       	mov    eax,0x1
c001127b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001127f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011283:	83 f9 10             	cmp    ecx,0x10
c0011286:	7f 21                	jg     c00112a9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011288:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001128b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001128f:	89 03                	mov    DWORD PTR [ebx],eax
c0011291:	b8 01 00 00 00       	mov    eax,0x1
c0011296:	d3 e0                	shl    eax,cl
c0011298:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001129c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001129f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00112a7:	31 c0                	xor    eax,eax
c00112a9:	5b                   	pop    ebx
c00112aa:	c3                   	ret    

c00112ab <KeRaiseSignal(SigHandlerBlock*, int)>:
c00112ab:	55                   	push   ebp
c00112ac:	57                   	push   edi
c00112ad:	bf 08 00 00 00       	mov    edi,0x8
c00112b2:	56                   	push   esi
c00112b3:	53                   	push   ebx
c00112b4:	83 ec 14             	sub    esp,0x14
c00112b7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00112bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00112bf:	68 ac 46 02 c0       	push   0xc00246ac
c00112c4:	e8 b3 5c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00112c9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00112d0:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00112d6:	83 c4 10             	add    esp,0x10
c00112d9:	31 c9                	xor    ecx,ecx
c00112db:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00112df:	99                   	cdq    
c00112e0:	f7 ff                	idiv   edi
c00112e2:	8d 42 24             	lea    eax,[edx+0x24]
c00112e5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00112e9:	85 f6                	test   esi,esi
c00112eb:	75 1a                	jne    c0011307 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c00112ed:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00112f1:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c00112f5:	50                   	push   eax
c00112f6:	50                   	push   eax
c00112f7:	52                   	push   edx
c00112f8:	68 c2 46 02 c0       	push   0xc00246c2
c00112fd:	e8 7a 5c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011302:	83 c4 10             	add    esp,0x10
c0011305:	eb 1b                	jmp    c0011322 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0011307:	41                   	inc    ecx
c0011308:	83 f9 08             	cmp    ecx,0x8
c001130b:	75 ce                	jne    c00112db <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c001130d:	83 ec 0c             	sub    esp,0xc
c0011310:	be 01 00 00 00       	mov    esi,0x1
c0011315:	68 e3 46 02 c0       	push   0xc00246e3
c001131a:	e8 5d 5c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001131f:	83 c4 10             	add    esp,0x10
c0011322:	83 c4 0c             	add    esp,0xc
c0011325:	89 f0                	mov    eax,esi
c0011327:	5b                   	pop    ebx
c0011328:	5e                   	pop    esi
c0011329:	5f                   	pop    edi
c001132a:	5d                   	pop    ebp
c001132b:	c3                   	ret    

c001132c <KeCheckSignal(SigHandlerBlock*, int*)>:
c001132c:	55                   	push   ebp
c001132d:	57                   	push   edi
c001132e:	56                   	push   esi
c001132f:	53                   	push   ebx
c0011330:	83 ec 1c             	sub    esp,0x1c
c0011333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011337:	85 db                	test   ebx,ebx
c0011339:	0f 84 e0 00 00 00    	je     c001141f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001133f:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011346:	0f 84 d3 00 00 00    	je     c001141f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001134c:	31 c9                	xor    ecx,ecx
c001134e:	bf 08 00 00 00       	mov    edi,0x8
c0011353:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011359:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001135c:	99                   	cdq    
c001135d:	f7 ff                	idiv   edi
c001135f:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011366:	85 ed                	test   ebp,ebp
c0011368:	0f 84 d2 00 00 00    	je     c0011440 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c001136e:	89 e9                	mov    ecx,ebp
c0011370:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011376:	bf 01 00 00 00       	mov    edi,0x1
c001137b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001137f:	d3 e7                	shl    edi,cl
c0011381:	31 c9                	xor    ecx,ecx
c0011383:	b8 01 00 00 00       	mov    eax,0x1
c0011388:	d3 e0                	shl    eax,cl
c001138a:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c001138e:	74 0a                	je     c001139a <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0011390:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011394:	0f 85 85 00 00 00    	jne    c001141f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001139a:	41                   	inc    ecx
c001139b:	83 f9 11             	cmp    ecx,0x11
c001139e:	75 e3                	jne    c0011383 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c00113a0:	46                   	inc    esi
c00113a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113a5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00113ab:	09 f8                	or     eax,edi
c00113ad:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00113b8:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00113be:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00113c5:	31 c0                	xor    eax,eax
c00113c7:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00113cf:	74 09                	je     c00113da <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c00113d1:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00113d8:	eb 06                	jmp    c00113e0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c00113da:	40                   	inc    eax
c00113db:	83 f8 08             	cmp    eax,0x8
c00113de:	75 e7                	jne    c00113c7 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c00113e0:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00113e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00113e7:	83 fd 09             	cmp    ebp,0x9
c00113ea:	89 2a                	mov    DWORD PTR [edx],ebp
c00113ec:	75 14                	jne    c0011402 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c00113ee:	83 ec 0c             	sub    esp,0xc
c00113f1:	68 f4 46 02 c0       	push   0xc00246f4
c00113f6:	e8 81 5b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00113fb:	b8 91 11 01 c0       	mov    eax,0xc0011191
c0011400:	eb 39                	jmp    c001143b <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011402:	83 f8 01             	cmp    eax,0x1
c0011405:	75 1c                	jne    c0011423 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011407:	83 ec 0c             	sub    esp,0xc
c001140a:	f7 d7                	not    edi
c001140c:	68 fe 46 02 c0       	push   0xc00246fe
c0011411:	e8 66 5b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011416:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001141c:	83 c4 10             	add    esp,0x10
c001141f:	31 c0                	xor    eax,eax
c0011421:	eb 30                	jmp    c0011453 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011423:	85 c0                	test   eax,eax
c0011425:	75 2c                	jne    c0011453 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011427:	83 ec 0c             	sub    esp,0xc
c001142a:	68 0b 47 02 c0       	push   0xc002470b
c001142f:	e8 48 5b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011434:	8b 04 ad 00 6a 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd9600]
c001143b:	83 c4 10             	add    esp,0x10
c001143e:	eb 13                	jmp    c0011453 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011440:	46                   	inc    esi
c0011441:	41                   	inc    ecx
c0011442:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011448:	83 f9 08             	cmp    ecx,0x8
c001144b:	0f 85 02 ff ff ff    	jne    c0011353 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011451:	eb cc                	jmp    c001141f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011453:	83 c4 1c             	add    esp,0x1c
c0011456:	5b                   	pop    ebx
c0011457:	5e                   	pop    esi
c0011458:	5f                   	pop    edi
c0011459:	5d                   	pop    ebp
c001145a:	c3                   	ret    

c001145b <KiCheckSignalZ>:
c001145b:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c0011462:	74 43                	je     c00114a7 <KiCheckSignalZ+0x4c>
c0011464:	83 ec 24             	sub    esp,0x24
c0011467:	8d 44 24 14          	lea    eax,[esp+0x14]
c001146b:	50                   	push   eax
c001146c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011471:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011474:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001147a:	e8 ad fe ff ff       	call   c001132c <KeCheckSignal(SigHandlerBlock*, int*)>
c001147f:	83 c4 10             	add    esp,0x10
c0011482:	31 d2                	xor    edx,edx
c0011484:	85 c0                	test   eax,eax
c0011486:	74 19                	je     c00114a1 <KiCheckSignalZ+0x46>
c0011488:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001148e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011491:	89 02                	mov    DWORD PTR [edx],eax
c0011493:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001149a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001149e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00114a1:	89 d0                	mov    eax,edx
c00114a3:	83 c4 1c             	add    esp,0x1c
c00114a6:	c3                   	ret    
c00114a7:	31 d2                	xor    edx,edx
c00114a9:	89 d0                	mov    eax,edx
c00114ab:	c3                   	ret    

c00114ac <KeCompleteSignal(SigHandlerBlock*, int)>:
c00114ac:	56                   	push   esi
c00114ad:	53                   	push   ebx
c00114ae:	bb 01 00 00 00       	mov    ebx,0x1
c00114b3:	52                   	push   edx
c00114b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00114b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00114bc:	d3 e3                	shl    ebx,cl
c00114be:	83 f9 10             	cmp    ecx,0x10
c00114c1:	7f 08                	jg     c00114cb <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00114c3:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00114c9:	75 10                	jne    c00114db <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00114cb:	83 ec 0c             	sub    esp,0xc
c00114ce:	68 2e 47 02 c0       	push   0xc002472e
c00114d3:	e8 0e eb ff ff       	call   c000ffe6 <KePanic(char const*)>
c00114d8:	83 c4 10             	add    esp,0x10
c00114db:	f7 d3                	not    ebx
c00114dd:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00114e3:	58                   	pop    eax
c00114e4:	5b                   	pop    ebx
c00114e5:	5e                   	pop    esi
c00114e6:	c3                   	ret    

c00114e7 <KiFinishSignalZ>:
c00114e7:	53                   	push   ebx
c00114e8:	83 ec 08             	sub    esp,0x8
c00114eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00114f7:	83 fa 08             	cmp    edx,0x8
c00114fa:	75 0c                	jne    c0011508 <KiFinishSignalZ+0x21>
c00114fc:	83 ec 0c             	sub    esp,0xc
c00114ff:	50                   	push   eax
c0011500:	e8 67 5f 00 00       	call   c001746c <unblockTask(ThreadControlBlock*)>
c0011505:	83 c4 10             	add    esp,0x10
c0011508:	50                   	push   eax
c0011509:	50                   	push   eax
c001150a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001150d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011512:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011515:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001151b:	e8 8c ff ff ff       	call   c00114ac <KeCompleteSignal(SigHandlerBlock*, int)>
c0011520:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011526:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001152d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011534:	83 c4 18             	add    esp,0x18
c0011537:	5b                   	pop    ebx
c0011538:	c3                   	ret    

c0011539 <SysSeekDir(regs*)>:
c0011539:	31 c0                	xor    eax,eax
c001153b:	31 d2                	xor    edx,edx
c001153d:	c3                   	ret    

c001153e <SysTellDir(regs*)>:
c001153e:	31 c0                	xor    eax,eax
c0011540:	31 d2                	xor    edx,edx
c0011542:	c3                   	ret    

c0011543 <SysVerify(regs*)>:
c0011543:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011547:	31 d2                	xor    edx,edx
c0011549:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001154c:	c3                   	ret    

c001154d <SysGetArgc(regs*)>:
c001154d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011552:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011555:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c001155b:	89 c2                	mov    edx,eax
c001155d:	c1 fa 1f             	sar    edx,0x1f
c0011560:	c3                   	ret    

c0011561 <SysTTYName(regs*)>:
c0011561:	b8 01 00 00 00       	mov    eax,0x1
c0011566:	31 d2                	xor    edx,edx
c0011568:	c3                   	ret    

c0011569 <SysFormatDisk(regs*)>:
c0011569:	56                   	push   esi
c001156a:	53                   	push   ebx
c001156b:	83 ec 04             	sub    esp,0x4
c001156e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011572:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c0011578:	eb 28                	jmp    c00115a2 <SysFormatDisk(regs*)+0x39>
c001157a:	83 ec 0c             	sub    esp,0xc
c001157d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011580:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011585:	51                   	push   ecx
c0011586:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011589:	51                   	push   ecx
c001158a:	50                   	push   eax
c001158b:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0011592:	50                   	push   eax
c0011593:	53                   	push   ebx
c0011594:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011597:	83 c4 20             	add    esp,0x20
c001159a:	83 f8 08             	cmp    eax,0x8
c001159d:	75 14                	jne    c00115b3 <SysFormatDisk(regs*)+0x4a>
c001159f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00115a2:	85 db                	test   ebx,ebx
c00115a4:	75 d4                	jne    c001157a <SysFormatDisk(regs*)+0x11>
c00115a6:	83 c4 04             	add    esp,0x4
c00115a9:	b8 03 00 00 00       	mov    eax,0x3
c00115ae:	31 d2                	xor    edx,edx
c00115b0:	5b                   	pop    ebx
c00115b1:	5e                   	pop    esi
c00115b2:	c3                   	ret    
c00115b3:	85 c0                	test   eax,eax
c00115b5:	74 1f                	je     c00115d6 <SysFormatDisk(regs*)+0x6d>
c00115b7:	83 f8 09             	cmp    eax,0x9
c00115ba:	74 0d                	je     c00115c9 <SysFormatDisk(regs*)+0x60>
c00115bc:	83 c4 04             	add    esp,0x4
c00115bf:	b8 02 00 00 00       	mov    eax,0x2
c00115c4:	31 d2                	xor    edx,edx
c00115c6:	5b                   	pop    ebx
c00115c7:	5e                   	pop    esi
c00115c8:	c3                   	ret    
c00115c9:	83 c4 04             	add    esp,0x4
c00115cc:	b8 01 00 00 00       	mov    eax,0x1
c00115d1:	31 d2                	xor    edx,edx
c00115d3:	5b                   	pop    ebx
c00115d4:	5e                   	pop    esi
c00115d5:	c3                   	ret    
c00115d6:	83 c4 04             	add    esp,0x4
c00115d9:	31 c0                	xor    eax,eax
c00115db:	31 d2                	xor    edx,edx
c00115dd:	5b                   	pop    ebx
c00115de:	5e                   	pop    esi
c00115df:	c3                   	ret    

c00115e0 <SysSetDiskVolumeLabel(regs*)>:
c00115e0:	56                   	push   esi
c00115e1:	53                   	push   ebx
c00115e2:	83 ec 04             	sub    esp,0x4
c00115e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00115e9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00115ec:	83 f8 19             	cmp    eax,0x19
c00115ef:	77 33                	ja     c0011624 <SysSetDiskVolumeLabel(regs*)+0x44>
c00115f1:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c00115f8:	85 c9                	test   ecx,ecx
c00115fa:	74 28                	je     c0011624 <SysSetDiskVolumeLabel(regs*)+0x44>
c00115fc:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00115ff:	85 db                	test   ebx,ebx
c0011601:	74 21                	je     c0011624 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011603:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011609:	85 d2                	test   edx,edx
c001160b:	74 17                	je     c0011624 <SysSetDiskVolumeLabel(regs*)+0x44>
c001160d:	8b 32                	mov    esi,DWORD PTR [edx]
c001160f:	53                   	push   ebx
c0011610:	50                   	push   eax
c0011611:	51                   	push   ecx
c0011612:	52                   	push   edx
c0011613:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011616:	83 c4 10             	add    esp,0x10
c0011619:	89 c2                	mov    edx,eax
c001161b:	83 c4 04             	add    esp,0x4
c001161e:	c1 fa 1f             	sar    edx,0x1f
c0011621:	5b                   	pop    ebx
c0011622:	5e                   	pop    esi
c0011623:	c3                   	ret    
c0011624:	83 c4 04             	add    esp,0x4
c0011627:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001162c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011631:	5b                   	pop    ebx
c0011632:	5e                   	pop    esi
c0011633:	c3                   	ret    

c0011634 <SysGetDiskVolumeLabel(regs*)>:
c0011634:	57                   	push   edi
c0011635:	56                   	push   esi
c0011636:	53                   	push   ebx
c0011637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001163b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001163e:	83 fa 19             	cmp    edx,0x19
c0011641:	77 3c                	ja     c001167f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011643:	8b 0c 95 e0 ca 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3520]
c001164a:	85 c9                	test   ecx,ecx
c001164c:	74 31                	je     c001167f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001164e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011651:	85 db                	test   ebx,ebx
c0011653:	74 2a                	je     c001167f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011655:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011658:	85 f6                	test   esi,esi
c001165a:	74 23                	je     c001167f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001165c:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011662:	85 c0                	test   eax,eax
c0011664:	74 19                	je     c001167f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011666:	83 ec 0c             	sub    esp,0xc
c0011669:	8b 38                	mov    edi,DWORD PTR [eax]
c001166b:	56                   	push   esi
c001166c:	53                   	push   ebx
c001166d:	52                   	push   edx
c001166e:	51                   	push   ecx
c001166f:	50                   	push   eax
c0011670:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011673:	83 c4 20             	add    esp,0x20
c0011676:	89 c2                	mov    edx,eax
c0011678:	5b                   	pop    ebx
c0011679:	c1 fa 1f             	sar    edx,0x1f
c001167c:	5e                   	pop    esi
c001167d:	5f                   	pop    edi
c001167e:	c3                   	ret    
c001167f:	5b                   	pop    ebx
c0011680:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011685:	ba ff ff ff ff       	mov    edx,0xffffffff
c001168a:	5e                   	pop    esi
c001168b:	5f                   	pop    edi
c001168c:	c3                   	ret    

c001168d <SysRealpath(regs*)>:
c001168d:	83 ec 0c             	sub    esp,0xc
c0011690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011694:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011697:	85 d2                	test   edx,edx
c0011699:	74 07                	je     c00116a2 <SysRealpath(regs*)+0x15>
c001169b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001169e:	85 c0                	test   eax,eax
c00116a0:	75 0b                	jne    c00116ad <SysRealpath(regs*)+0x20>
c00116a2:	b8 01 00 00 00       	mov    eax,0x1
c00116a7:	31 d2                	xor    edx,edx
c00116a9:	83 c4 0c             	add    esp,0xc
c00116ac:	c3                   	ret    
c00116ad:	6a 00                	push   0x0
c00116af:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00116b5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00116b8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00116be:	51                   	push   ecx
c00116bf:	52                   	push   edx
c00116c0:	50                   	push   eax
c00116c1:	e8 ac 67 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	31 c0                	xor    eax,eax
c00116cb:	31 d2                	xor    edx,edx
c00116cd:	83 c4 0c             	add    esp,0xc
c00116d0:	c3                   	ret    

c00116d1 <SysReadDir(regs*)>:
c00116d1:	53                   	push   ebx
c00116d2:	83 ec 18             	sub    esp,0x18
c00116d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00116d9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00116dc:	83 f8 02             	cmp    eax,0x2
c00116df:	76 61                	jbe    c0011742 <SysReadDir(regs*)+0x71>
c00116e1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00116e8:	77 49                	ja     c0011733 <SysReadDir(regs*)+0x62>
c00116ea:	83 ec 0c             	sub    esp,0xc
c00116ed:	50                   	push   eax
c00116ee:	e8 d6 1d 00 00       	call   c00134c9 <KeGetFileFromDescriptor(int)>
c00116f3:	83 c4 10             	add    esp,0x10
c00116f6:	85 c0                	test   eax,eax
c00116f8:	74 39                	je     c0011733 <SysReadDir(regs*)+0x62>
c00116fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011702:	83 ec 0c             	sub    esp,0xc
c0011705:	8b 10                	mov    edx,DWORD PTR [eax]
c0011707:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001170b:	51                   	push   ecx
c001170c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001170f:	51                   	push   ecx
c0011710:	6a 00                	push   0x0
c0011712:	68 10 01 00 00       	push   0x110
c0011717:	50                   	push   eax
c0011718:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001171b:	83 c4 20             	add    esp,0x20
c001171e:	85 c0                	test   eax,eax
c0011720:	74 29                	je     c001174b <SysReadDir(regs*)+0x7a>
c0011722:	83 f8 07             	cmp    eax,0x7
c0011725:	74 1b                	je     c0011742 <SysReadDir(regs*)+0x71>
c0011727:	b8 02 00 00 00       	mov    eax,0x2
c001172c:	31 d2                	xor    edx,edx
c001172e:	83 c4 18             	add    esp,0x18
c0011731:	5b                   	pop    ebx
c0011732:	c3                   	ret    
c0011733:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011738:	ba ff ff ff ff       	mov    edx,0xffffffff
c001173d:	83 c4 18             	add    esp,0x18
c0011740:	5b                   	pop    ebx
c0011741:	c3                   	ret    
c0011742:	b8 01 00 00 00       	mov    eax,0x1
c0011747:	31 d2                	xor    edx,edx
c0011749:	eb e3                	jmp    c001172e <SysReadDir(regs*)+0x5d>
c001174b:	31 c0                	xor    eax,eax
c001174d:	31 d2                	xor    edx,edx
c001174f:	eb dd                	jmp    c001172e <SysReadDir(regs*)+0x5d>

c0011751 <SysIsATTY(regs*)>:
c0011751:	83 ec 0c             	sub    esp,0xc
c0011754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011758:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001175b:	83 f8 02             	cmp    eax,0x2
c001175e:	76 07                	jbe    c0011767 <SysIsATTY(regs*)+0x16>
c0011760:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011765:	75 26                	jne    c001178d <SysIsATTY(regs*)+0x3c>
c0011767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001176c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001176f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011775:	85 c0                	test   eax,eax
c0011777:	74 24                	je     c001179d <SysIsATTY(regs*)+0x4c>
c0011779:	83 ec 0c             	sub    esp,0xc
c001177c:	8b 10                	mov    edx,DWORD PTR [eax]
c001177e:	50                   	push   eax
c001177f:	ff 12                	call   DWORD PTR [edx]
c0011781:	31 d2                	xor    edx,edx
c0011783:	0f b6 c0             	movzx  eax,al
c0011786:	83 c4 10             	add    esp,0x10
c0011789:	83 c4 0c             	add    esp,0xc
c001178c:	c3                   	ret    
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	50                   	push   eax
c0011791:	e8 33 1d 00 00       	call   c00134c9 <KeGetFileFromDescriptor(int)>
c0011796:	83 c4 10             	add    esp,0x10
c0011799:	85 c0                	test   eax,eax
c001179b:	75 dc                	jne    c0011779 <SysIsATTY(regs*)+0x28>
c001179d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117a7:	83 c4 0c             	add    esp,0xc
c00117aa:	c3                   	ret    

c00117ab <SysSeek(regs*)>:
c00117ab:	53                   	push   ebx
c00117ac:	83 ec 08             	sub    esp,0x8
c00117af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00117b6:	8d 50 fd             	lea    edx,[eax-0x3]
c00117b9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00117bf:	77 39                	ja     c00117fa <SysSeek(regs*)+0x4f>
c00117c1:	83 ec 0c             	sub    esp,0xc
c00117c4:	50                   	push   eax
c00117c5:	e8 ff 1c 00 00       	call   c00134c9 <KeGetFileFromDescriptor(int)>
c00117ca:	83 c4 10             	add    esp,0x10
c00117cd:	85 c0                	test   eax,eax
c00117cf:	74 29                	je     c00117fa <SysSeek(regs*)+0x4f>
c00117d1:	83 ec 04             	sub    esp,0x4
c00117d4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00117d7:	31 db                	xor    ebx,ebx
c00117d9:	53                   	push   ebx
c00117da:	51                   	push   ecx
c00117db:	50                   	push   eax
c00117dc:	e8 85 6a ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00117e1:	83 c4 10             	add    esp,0x10
c00117e4:	85 c0                	test   eax,eax
c00117e6:	0f 95 c0             	setne  al
c00117e9:	31 d2                	xor    edx,edx
c00117eb:	0f b6 c0             	movzx  eax,al
c00117ee:	f7 d8                	neg    eax
c00117f0:	83 d2 00             	adc    edx,0x0
c00117f3:	83 c4 08             	add    esp,0x8
c00117f6:	f7 da                	neg    edx
c00117f8:	5b                   	pop    ebx
c00117f9:	c3                   	ret    
c00117fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011804:	83 c4 08             	add    esp,0x8
c0011807:	5b                   	pop    ebx
c0011808:	c3                   	ret    

c0011809 <SysTell(regs*)>:
c0011809:	53                   	push   ebx
c001180a:	83 ec 08             	sub    esp,0x8
c001180d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011811:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011814:	83 f8 02             	cmp    eax,0x2
c0011817:	76 56                	jbe    c001186f <SysTell(regs*)+0x66>
c0011819:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001181e:	76 19                	jbe    c0011839 <SysTell(regs*)+0x30>
c0011820:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011823:	31 d2                	xor    edx,edx
c0011825:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001182b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011832:	31 c0                	xor    eax,eax
c0011834:	83 c4 08             	add    esp,0x8
c0011837:	5b                   	pop    ebx
c0011838:	c3                   	ret    
c0011839:	83 ec 0c             	sub    esp,0xc
c001183c:	50                   	push   eax
c001183d:	e8 87 1c 00 00       	call   c00134c9 <KeGetFileFromDescriptor(int)>
c0011842:	83 c4 10             	add    esp,0x10
c0011845:	85 c0                	test   eax,eax
c0011847:	74 26                	je     c001186f <SysTell(regs*)+0x66>
c0011849:	83 ec 08             	sub    esp,0x8
c001184c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001184f:	52                   	push   edx
c0011850:	50                   	push   eax
c0011851:	e8 bc 6a ff ff       	call   c0008312 <File::tell(unsigned long long*)>
c0011856:	83 c4 10             	add    esp,0x10
c0011859:	85 c0                	test   eax,eax
c001185b:	0f 95 c0             	setne  al
c001185e:	31 d2                	xor    edx,edx
c0011860:	0f b6 c0             	movzx  eax,al
c0011863:	f7 d8                	neg    eax
c0011865:	83 d2 00             	adc    edx,0x0
c0011868:	83 c4 08             	add    esp,0x8
c001186b:	f7 da                	neg    edx
c001186d:	5b                   	pop    ebx
c001186e:	c3                   	ret    
c001186f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011874:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011879:	83 c4 08             	add    esp,0x8
c001187c:	5b                   	pop    ebx
c001187d:	c3                   	ret    

c001187e <SysSize(regs*)>:
c001187e:	53                   	push   ebx
c001187f:	83 ec 18             	sub    esp,0x18
c0011882:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011886:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011889:	83 f8 02             	cmp    eax,0x2
c001188c:	76 5b                	jbe    c00118e9 <SysSize(regs*)+0x6b>
c001188e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011893:	76 19                	jbe    c00118ae <SysSize(regs*)+0x30>
c0011895:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011898:	31 d2                	xor    edx,edx
c001189a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00118a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118a7:	31 c0                	xor    eax,eax
c00118a9:	83 c4 18             	add    esp,0x18
c00118ac:	5b                   	pop    ebx
c00118ad:	c3                   	ret    
c00118ae:	83 ec 0c             	sub    esp,0xc
c00118b1:	50                   	push   eax
c00118b2:	e8 12 1c 00 00       	call   c00134c9 <KeGetFileFromDescriptor(int)>
c00118b7:	83 c4 10             	add    esp,0x10
c00118ba:	85 c0                	test   eax,eax
c00118bc:	74 2b                	je     c00118e9 <SysSize(regs*)+0x6b>
c00118be:	83 ec 04             	sub    esp,0x4
c00118c1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00118c5:	52                   	push   edx
c00118c6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00118c9:	52                   	push   edx
c00118ca:	50                   	push   eax
c00118cb:	e8 da 6b ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00118d0:	83 c4 10             	add    esp,0x10
c00118d3:	85 c0                	test   eax,eax
c00118d5:	0f 95 c0             	setne  al
c00118d8:	31 d2                	xor    edx,edx
c00118da:	0f b6 c0             	movzx  eax,al
c00118dd:	f7 d8                	neg    eax
c00118df:	83 d2 00             	adc    edx,0x0
c00118e2:	83 c4 18             	add    esp,0x18
c00118e5:	f7 da                	neg    edx
c00118e7:	5b                   	pop    ebx
c00118e8:	c3                   	ret    
c00118e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118f3:	83 c4 18             	add    esp,0x18
c00118f6:	5b                   	pop    ebx
c00118f7:	c3                   	ret    

c00118f8 <SysSizeFromFilename(regs*)>:
c00118f8:	55                   	push   ebp
c00118f9:	57                   	push   edi
c00118fa:	56                   	push   esi
c00118fb:	53                   	push   ebx
c00118fc:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011902:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011909:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001190c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001190f:	85 f6                	test   esi,esi
c0011911:	74 34                	je     c0011947 <SysSizeFromFilename(regs*)+0x4f>
c0011913:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011919:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001191c:	83 f8 02             	cmp    eax,0x2
c001191f:	76 2d                	jbe    c001194e <SysSizeFromFilename(regs*)+0x56>
c0011921:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011926:	76 3b                	jbe    c0011963 <SysSizeFromFilename(regs*)+0x6b>
c0011928:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001192b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011931:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011938:	81 c4 4c 02 00 00    	add    esp,0x24c
c001193e:	31 c0                	xor    eax,eax
c0011940:	5b                   	pop    ebx
c0011941:	31 d2                	xor    edx,edx
c0011943:	5e                   	pop    esi
c0011944:	5f                   	pop    edi
c0011945:	5d                   	pop    ebp
c0011946:	c3                   	ret    
c0011947:	89 f8                	mov    eax,edi
c0011949:	83 f8 02             	cmp    eax,0x2
c001194c:	77 d3                	ja     c0011921 <SysSizeFromFilename(regs*)+0x29>
c001194e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011954:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011959:	5b                   	pop    ebx
c001195a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001195f:	5e                   	pop    esi
c0011960:	5f                   	pop    edi
c0011961:	5d                   	pop    ebp
c0011962:	c3                   	ret    
c0011963:	83 ec 0c             	sub    esp,0xc
c0011966:	68 14 01 00 00       	push   0x114
c001196b:	e8 1f e2 ff ff       	call   c000fb8f <malloc>
c0011970:	6a 01                	push   0x1
c0011972:	89 c5                	mov    ebp,eax
c0011974:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011979:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001197c:	50                   	push   eax
c001197d:	57                   	push   edi
c001197e:	55                   	push   ebp
c001197f:	e8 08 67 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011984:	83 c4 20             	add    esp,0x20
c0011987:	85 ed                	test   ebp,ebp
c0011989:	74 c3                	je     c001194e <SysSizeFromFilename(regs*)+0x56>
c001198b:	83 ec 04             	sub    esp,0x4
c001198e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011992:	50                   	push   eax
c0011993:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011996:	51                   	push   ecx
c0011997:	55                   	push   ebp
c0011998:	e8 0d 6b ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001199d:	89 c3                	mov    ebx,eax
c001199f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00119a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00119a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119a8:	83 c4 10             	add    esp,0x10
c00119ab:	85 db                	test   ebx,ebx
c00119ad:	75 9f                	jne    c001194e <SysSizeFromFilename(regs*)+0x56>
c00119af:	6a 00                	push   0x0
c00119b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119b9:	05 0c 01 00 00       	add    eax,0x10c
c00119be:	50                   	push   eax
c00119bf:	57                   	push   edi
c00119c0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00119c7:	53                   	push   ebx
c00119c8:	e8 a5 64 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00119cd:	58                   	pop    eax
c00119ce:	5a                   	pop    edx
c00119cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00119d3:	50                   	push   eax
c00119d4:	53                   	push   ebx
c00119d5:	e8 1f 5f ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c00119da:	83 c4 10             	add    esp,0x10
c00119dd:	83 f8 01             	cmp    eax,0x1
c00119e0:	74 1a                	je     c00119fc <SysSizeFromFilename(regs*)+0x104>
c00119e2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00119e7:	74 26                	je     c0011a0f <SysSizeFromFilename(regs*)+0x117>
c00119e9:	85 f6                	test   esi,esi
c00119eb:	0f 84 47 ff ff ff    	je     c0011938 <SysSizeFromFilename(regs*)+0x40>
c00119f1:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00119f7:	e9 3c ff ff ff       	jmp    c0011938 <SysSizeFromFilename(regs*)+0x40>
c00119fc:	85 f6                	test   esi,esi
c00119fe:	0f 84 34 ff ff ff    	je     c0011938 <SysSizeFromFilename(regs*)+0x40>
c0011a04:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011a0a:	e9 29 ff ff ff       	jmp    c0011938 <SysSizeFromFilename(regs*)+0x40>
c0011a0f:	85 f6                	test   esi,esi
c0011a11:	0f 84 21 ff ff ff    	je     c0011938 <SysSizeFromFilename(regs*)+0x40>
c0011a17:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011a1d:	e9 16 ff ff ff       	jmp    c0011938 <SysSizeFromFilename(regs*)+0x40>

c0011a22 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011a22:	55                   	push   ebp
c0011a23:	57                   	push   edi
c0011a24:	56                   	push   esi
c0011a25:	53                   	push   ebx
c0011a26:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011a2c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011a33:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011a36:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a39:	85 f6                	test   esi,esi
c0011a3b:	74 34                	je     c0011a71 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0011a3d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011a43:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a46:	83 f8 02             	cmp    eax,0x2
c0011a49:	76 2d                	jbe    c0011a78 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011a4b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011a50:	76 3b                	jbe    c0011a8d <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0011a52:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011a55:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011a5b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a62:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011a68:	31 c0                	xor    eax,eax
c0011a6a:	5b                   	pop    ebx
c0011a6b:	31 d2                	xor    edx,edx
c0011a6d:	5e                   	pop    esi
c0011a6e:	5f                   	pop    edi
c0011a6f:	5d                   	pop    ebp
c0011a70:	c3                   	ret    
c0011a71:	89 f8                	mov    eax,edi
c0011a73:	83 f8 02             	cmp    eax,0x2
c0011a76:	77 d3                	ja     c0011a4b <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011a78:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011a7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a83:	5b                   	pop    ebx
c0011a84:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a89:	5e                   	pop    esi
c0011a8a:	5f                   	pop    edi
c0011a8b:	5d                   	pop    ebp
c0011a8c:	c3                   	ret    
c0011a8d:	83 ec 0c             	sub    esp,0xc
c0011a90:	68 14 01 00 00       	push   0x114
c0011a95:	e8 f5 e0 ff ff       	call   c000fb8f <malloc>
c0011a9a:	6a 00                	push   0x0
c0011a9c:	89 c5                	mov    ebp,eax
c0011a9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aa3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011aa6:	50                   	push   eax
c0011aa7:	57                   	push   edi
c0011aa8:	55                   	push   ebp
c0011aa9:	e8 de 65 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011aae:	83 c4 20             	add    esp,0x20
c0011ab1:	85 ed                	test   ebp,ebp
c0011ab3:	74 c3                	je     c0011a78 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011ab5:	83 ec 04             	sub    esp,0x4
c0011ab8:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011abc:	50                   	push   eax
c0011abd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011ac0:	51                   	push   ecx
c0011ac1:	55                   	push   ebp
c0011ac2:	e8 e3 69 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0011ac7:	89 c3                	mov    ebx,eax
c0011ac9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011acc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011acf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ad2:	83 c4 10             	add    esp,0x10
c0011ad5:	85 db                	test   ebx,ebx
c0011ad7:	75 9f                	jne    c0011a78 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011ad9:	6a 00                	push   0x0
c0011adb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ae0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ae3:	05 0c 01 00 00       	add    eax,0x10c
c0011ae8:	50                   	push   eax
c0011ae9:	57                   	push   edi
c0011aea:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011af1:	53                   	push   ebx
c0011af2:	e8 7b 63 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011af7:	58                   	pop    eax
c0011af8:	5a                   	pop    edx
c0011af9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011afd:	50                   	push   eax
c0011afe:	53                   	push   ebx
c0011aff:	e8 f5 5d ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0011b04:	83 c4 10             	add    esp,0x10
c0011b07:	83 f8 01             	cmp    eax,0x1
c0011b0a:	74 1a                	je     c0011b26 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c0011b0c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b11:	74 26                	je     c0011b39 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c0011b13:	85 f6                	test   esi,esi
c0011b15:	0f 84 47 ff ff ff    	je     c0011a62 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011b1b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011b21:	e9 3c ff ff ff       	jmp    c0011a62 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011b26:	85 f6                	test   esi,esi
c0011b28:	0f 84 34 ff ff ff    	je     c0011a62 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011b2e:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011b34:	e9 29 ff ff ff       	jmp    c0011a62 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011b39:	85 f6                	test   esi,esi
c0011b3b:	0f 84 21 ff ff ff    	je     c0011a62 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011b41:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011b47:	e9 16 ff ff ff       	jmp    c0011a62 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0011b4c <SysClose(regs*)>:
c0011b4c:	53                   	push   ebx
c0011b4d:	83 ec 08             	sub    esp,0x8
c0011b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b54:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b57:	83 f8 02             	cmp    eax,0x2
c0011b5a:	76 41                	jbe    c0011b9d <SysClose(regs*)+0x51>
c0011b5c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011b62:	83 fa 01             	cmp    edx,0x1
c0011b65:	76 2d                	jbe    c0011b94 <SysClose(regs*)+0x48>
c0011b67:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011b6c:	77 2f                	ja     c0011b9d <SysClose(regs*)+0x51>
c0011b6e:	83 ec 0c             	sub    esp,0xc
c0011b71:	50                   	push   eax
c0011b72:	e8 52 19 00 00       	call   c00134c9 <KeGetFileFromDescriptor(int)>
c0011b77:	83 c4 10             	add    esp,0x10
c0011b7a:	89 c3                	mov    ebx,eax
c0011b7c:	85 c0                	test   eax,eax
c0011b7e:	74 1d                	je     c0011b9d <SysClose(regs*)+0x51>
c0011b80:	83 ec 0c             	sub    esp,0xc
c0011b83:	50                   	push   eax
c0011b84:	e8 7d 66 ff ff       	call   c0008206 <File::close()>
c0011b89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b91:	83 c4 10             	add    esp,0x10
c0011b94:	31 c0                	xor    eax,eax
c0011b96:	31 d2                	xor    edx,edx
c0011b98:	83 c4 08             	add    esp,0x8
c0011b9b:	5b                   	pop    ebx
c0011b9c:	c3                   	ret    
c0011b9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ba2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ba7:	83 c4 08             	add    esp,0x8
c0011baa:	5b                   	pop    ebx
c0011bab:	c3                   	ret    

c0011bac <SysOpenDir(regs*)>:
c0011bac:	56                   	push   esi
c0011bad:	53                   	push   ebx
c0011bae:	83 ec 04             	sub    esp,0x4
c0011bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011bb5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011bb8:	85 c9                	test   ecx,ecx
c0011bba:	74 5d                	je     c0011c19 <SysOpenDir(regs*)+0x6d>
c0011bbc:	83 ec 0c             	sub    esp,0xc
c0011bbf:	68 14 01 00 00       	push   0x114
c0011bc4:	e8 c6 df ff ff       	call   c000fb8f <malloc>
c0011bc9:	83 c4 0c             	add    esp,0xc
c0011bcc:	89 c6                	mov    esi,eax
c0011bce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bd3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bd6:	50                   	push   eax
c0011bd7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011bda:	52                   	push   edx
c0011bdb:	56                   	push   esi
c0011bdc:	e8 89 6a ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c0011be1:	83 c4 10             	add    esp,0x10
c0011be4:	85 f6                	test   esi,esi
c0011be6:	74 31                	je     c0011c19 <SysOpenDir(regs*)+0x6d>
c0011be8:	83 ec 0c             	sub    esp,0xc
c0011beb:	56                   	push   esi
c0011bec:	e8 41 6b ff ff       	call   c0008732 <Directory::open()>
c0011bf1:	83 c4 10             	add    esp,0x10
c0011bf4:	85 c0                	test   eax,eax
c0011bf6:	75 21                	jne    c0011c19 <SysOpenDir(regs*)+0x6d>
c0011bf8:	83 ec 0c             	sub    esp,0xc
c0011bfb:	56                   	push   esi
c0011bfc:	e8 cb 15 00 00       	call   c00131cc <UnixFile::getFileDescriptor()>
c0011c01:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011c04:	83 c4 10             	add    esp,0x10
c0011c07:	89 02                	mov    DWORD PTR [edx],eax
c0011c09:	c1 f8 1f             	sar    eax,0x1f
c0011c0c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011c0f:	83 c4 04             	add    esp,0x4
c0011c12:	31 c0                	xor    eax,eax
c0011c14:	31 d2                	xor    edx,edx
c0011c16:	5b                   	pop    ebx
c0011c17:	5e                   	pop    esi
c0011c18:	c3                   	ret    
c0011c19:	83 c4 04             	add    esp,0x4
c0011c1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c21:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c26:	5b                   	pop    ebx
c0011c27:	5e                   	pop    esi
c0011c28:	c3                   	ret    

c0011c29 <SysMakeDir(regs*)>:
c0011c29:	56                   	push   esi
c0011c2a:	53                   	push   ebx
c0011c2b:	83 ec 10             	sub    esp,0x10
c0011c2e:	68 14 01 00 00       	push   0x114
c0011c33:	e8 57 df ff ff       	call   c000fb8f <malloc>
c0011c38:	83 c4 0c             	add    esp,0xc
c0011c3b:	89 c3                	mov    ebx,eax
c0011c3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c45:	50                   	push   eax
c0011c46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c4a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011c4d:	52                   	push   edx
c0011c4e:	53                   	push   ebx
c0011c4f:	e8 16 6a ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c0011c54:	83 c4 10             	add    esp,0x10
c0011c57:	85 db                	test   ebx,ebx
c0011c59:	74 2c                	je     c0011c87 <SysMakeDir(regs*)+0x5e>
c0011c5b:	83 ec 0c             	sub    esp,0xc
c0011c5e:	53                   	push   ebx
c0011c5f:	e8 ae 6c ff ff       	call   c0008912 <Directory::create()>
c0011c64:	89 c6                	mov    esi,eax
c0011c66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011c68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c6b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011c6e:	83 c4 10             	add    esp,0x10
c0011c71:	31 c0                	xor    eax,eax
c0011c73:	85 f6                	test   esi,esi
c0011c75:	0f 95 c0             	setne  al
c0011c78:	31 d2                	xor    edx,edx
c0011c7a:	f7 d8                	neg    eax
c0011c7c:	83 d2 00             	adc    edx,0x0
c0011c7f:	83 c4 04             	add    esp,0x4
c0011c82:	f7 da                	neg    edx
c0011c84:	5b                   	pop    ebx
c0011c85:	5e                   	pop    esi
c0011c86:	c3                   	ret    
c0011c87:	83 c4 04             	add    esp,0x4
c0011c8a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c94:	5b                   	pop    ebx
c0011c95:	5e                   	pop    esi
c0011c96:	c3                   	ret    

c0011c97 <SysCloseDir(regs*)>:
c0011c97:	53                   	push   ebx
c0011c98:	83 ec 08             	sub    esp,0x8
c0011c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ca2:	8d 50 fd             	lea    edx,[eax-0x3]
c0011ca5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011cab:	77 2f                	ja     c0011cdc <SysCloseDir(regs*)+0x45>
c0011cad:	83 ec 0c             	sub    esp,0xc
c0011cb0:	50                   	push   eax
c0011cb1:	e8 13 18 00 00       	call   c00134c9 <KeGetFileFromDescriptor(int)>
c0011cb6:	83 c4 10             	add    esp,0x10
c0011cb9:	89 c3                	mov    ebx,eax
c0011cbb:	85 c0                	test   eax,eax
c0011cbd:	74 1d                	je     c0011cdc <SysCloseDir(regs*)+0x45>
c0011cbf:	83 ec 0c             	sub    esp,0xc
c0011cc2:	50                   	push   eax
c0011cc3:	e8 c6 6a ff ff       	call   c000878e <Directory::close()>
c0011cc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011cca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ccd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011cd0:	83 c4 10             	add    esp,0x10
c0011cd3:	31 c0                	xor    eax,eax
c0011cd5:	31 d2                	xor    edx,edx
c0011cd7:	83 c4 08             	add    esp,0x8
c0011cda:	5b                   	pop    ebx
c0011cdb:	c3                   	ret    
c0011cdc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ce1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ce6:	83 c4 08             	add    esp,0x8
c0011ce9:	5b                   	pop    ebx
c0011cea:	c3                   	ret    

c0011ceb <SysWait(regs*)>:
c0011ceb:	83 ec 10             	sub    esp,0x10
c0011cee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011cf2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011cf5:	52                   	push   edx
c0011cf6:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011cf9:	51                   	push   ecx
c0011cfa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cfd:	50                   	push   eax
c0011cfe:	e8 09 55 00 00       	call   c001720c <waitTask(int, int*, int)>
c0011d03:	83 c4 1c             	add    esp,0x1c
c0011d06:	89 c2                	mov    edx,eax
c0011d08:	c1 fa 1f             	sar    edx,0x1f
c0011d0b:	c3                   	ret    

c0011d0c <SysNotImpl(regs*)>:
c0011d0c:	83 ec 18             	sub    esp,0x18
c0011d0f:	68 3f 47 02 c0       	push   0xc002473f
c0011d14:	e8 cd e2 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0011d19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d23:	83 c4 1c             	add    esp,0x1c
c0011d26:	c3                   	ret    

c0011d27 <SysPanic(regs*)>:
c0011d27:	83 ec 18             	sub    esp,0x18
c0011d2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d2e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011d31:	50                   	push   eax
c0011d32:	e8 af e2 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0011d37:	b8 01 00 00 00       	mov    eax,0x1
c0011d3c:	31 d2                	xor    edx,edx
c0011d3e:	83 c4 1c             	add    esp,0x1c
c0011d41:	c3                   	ret    

c0011d42 <SysRmdir(regs*)>:
c0011d42:	56                   	push   esi
c0011d43:	53                   	push   ebx
c0011d44:	83 ec 20             	sub    esp,0x20
c0011d47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d4b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011d4e:	68 14 01 00 00       	push   0x114
c0011d53:	e8 37 de ff ff       	call   c000fb8f <malloc>
c0011d58:	6a 00                	push   0x0
c0011d5a:	89 c3                	mov    ebx,eax
c0011d5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d61:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d64:	50                   	push   eax
c0011d65:	56                   	push   esi
c0011d66:	53                   	push   ebx
c0011d67:	e8 20 63 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011d6c:	83 c4 14             	add    esp,0x14
c0011d6f:	53                   	push   ebx
c0011d70:	e8 01 66 ff ff       	call   c0008376 <File::unlink()>
c0011d75:	83 c4 10             	add    esp,0x10
c0011d78:	85 db                	test   ebx,ebx
c0011d7a:	74 14                	je     c0011d90 <SysRmdir(regs*)+0x4e>
c0011d7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d80:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d82:	83 ec 0c             	sub    esp,0xc
c0011d85:	53                   	push   ebx
c0011d86:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011d89:	83 c4 10             	add    esp,0x10
c0011d8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d90:	85 c0                	test   eax,eax
c0011d92:	0f 95 c0             	setne  al
c0011d95:	31 d2                	xor    edx,edx
c0011d97:	0f b6 c0             	movzx  eax,al
c0011d9a:	f7 d8                	neg    eax
c0011d9c:	83 d2 00             	adc    edx,0x0
c0011d9f:	83 c4 14             	add    esp,0x14
c0011da2:	f7 da                	neg    edx
c0011da4:	5b                   	pop    ebx
c0011da5:	5e                   	pop    esi
c0011da6:	c3                   	ret    

c0011da7 <SysUnlink(regs*)>:
c0011da7:	56                   	push   esi
c0011da8:	53                   	push   ebx
c0011da9:	83 ec 20             	sub    esp,0x20
c0011dac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011db0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011db3:	68 14 01 00 00       	push   0x114
c0011db8:	e8 d2 dd ff ff       	call   c000fb8f <malloc>
c0011dbd:	6a 00                	push   0x0
c0011dbf:	89 c3                	mov    ebx,eax
c0011dc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dc6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011dc9:	50                   	push   eax
c0011dca:	56                   	push   esi
c0011dcb:	53                   	push   ebx
c0011dcc:	e8 bb 62 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011dd1:	83 c4 14             	add    esp,0x14
c0011dd4:	53                   	push   ebx
c0011dd5:	e8 9c 65 ff ff       	call   c0008376 <File::unlink()>
c0011dda:	83 c4 10             	add    esp,0x10
c0011ddd:	85 db                	test   ebx,ebx
c0011ddf:	74 14                	je     c0011df5 <SysUnlink(regs*)+0x4e>
c0011de1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011de5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011de7:	83 ec 0c             	sub    esp,0xc
c0011dea:	53                   	push   ebx
c0011deb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011dee:	83 c4 10             	add    esp,0x10
c0011df1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011df5:	85 c0                	test   eax,eax
c0011df7:	0f 95 c0             	setne  al
c0011dfa:	31 d2                	xor    edx,edx
c0011dfc:	0f b6 c0             	movzx  eax,al
c0011dff:	f7 d8                	neg    eax
c0011e01:	83 d2 00             	adc    edx,0x0
c0011e04:	83 c4 14             	add    esp,0x14
c0011e07:	f7 da                	neg    edx
c0011e09:	5b                   	pop    ebx
c0011e0a:	5e                   	pop    esi
c0011e0b:	c3                   	ret    

c0011e0c <SysGetArgv(regs*)>:
c0011e0c:	83 ec 0c             	sub    esp,0xc
c0011e0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011e13:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011e16:	85 c0                	test   eax,eax
c0011e18:	78 2c                	js     c0011e46 <SysGetArgv(regs*)+0x3a>
c0011e1a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011e20:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011e23:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011e29:	7d 1b                	jge    c0011e46 <SysGetArgv(regs*)+0x3a>
c0011e2b:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011e32:	85 c0                	test   eax,eax
c0011e34:	74 18                	je     c0011e4e <SysGetArgv(regs*)+0x42>
c0011e36:	83 ec 08             	sub    esp,0x8
c0011e39:	50                   	push   eax
c0011e3a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011e3d:	50                   	push   eax
c0011e3e:	e8 fd e7 fe ff       	call   c0000640 <strcpy>
c0011e43:	83 c4 10             	add    esp,0x10
c0011e46:	31 c0                	xor    eax,eax
c0011e48:	31 d2                	xor    edx,edx
c0011e4a:	83 c4 0c             	add    esp,0xc
c0011e4d:	c3                   	ret    
c0011e4e:	b8 01 00 00 00       	mov    eax,0x1
c0011e53:	31 d2                	xor    edx,edx
c0011e55:	83 c4 0c             	add    esp,0xc
c0011e58:	c3                   	ret    

c0011e59 <SysUSleep(regs*)>:
c0011e59:	83 ec 1c             	sub    esp,0x1c
c0011e5c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011e60:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011e63:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011e66:	6a 00                	push   0x0
c0011e68:	6a 64                	push   0x64
c0011e6a:	52                   	push   edx
c0011e6b:	50                   	push   eax
c0011e6c:	e8 a3 fd 00 00       	call   c0021c14 <__udivdi3>
c0011e71:	83 c4 18             	add    esp,0x18
c0011e74:	52                   	push   edx
c0011e75:	50                   	push   eax
c0011e76:	e8 89 54 00 00       	call   c0017304 <milliTenthSleep(unsigned long long)>
c0011e7b:	31 c0                	xor    eax,eax
c0011e7d:	31 d2                	xor    edx,edx
c0011e7f:	83 c4 1c             	add    esp,0x1c
c0011e82:	c3                   	ret    

c0011e83 <SysSpawn(regs*)>:
c0011e83:	56                   	push   esi
c0011e84:	53                   	push   ebx
c0011e85:	83 ec 04             	sub    esp,0x4
c0011e88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e8c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011e8f:	85 f6                	test   esi,esi
c0011e91:	75 0a                	jne    c0011e9d <SysSpawn(regs*)+0x1a>
c0011e93:	83 c4 04             	add    esp,0x4
c0011e96:	31 c0                	xor    eax,eax
c0011e98:	31 d2                	xor    edx,edx
c0011e9a:	5b                   	pop    ebx
c0011e9b:	5e                   	pop    esi
c0011e9c:	c3                   	ret    
c0011e9d:	83 ec 0c             	sub    esp,0xc
c0011ea0:	68 c4 07 00 00       	push   0x7c4
c0011ea5:	e8 e5 dc ff ff       	call   c000fb8f <malloc>
c0011eaa:	83 c4 10             	add    esp,0x10
c0011ead:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011eb0:	89 c6                	mov    esi,eax
c0011eb2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011eb5:	85 c9                	test   ecx,ecx
c0011eb7:	74 39                	je     c0011ef2 <SysSpawn(regs*)+0x6f>
c0011eb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ebe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ec1:	52                   	push   edx
c0011ec2:	50                   	push   eax
c0011ec3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ec6:	50                   	push   eax
c0011ec7:	56                   	push   esi
c0011ec8:	e8 0b 4b 00 00       	call   c00169d8 <Process::Process(char const*, Process*, char**)>
c0011ecd:	83 c4 10             	add    esp,0x10
c0011ed0:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011ed7:	75 ba                	jne    c0011e93 <SysSpawn(regs*)+0x10>
c0011ed9:	83 ec 0c             	sub    esp,0xc
c0011edc:	56                   	push   esi
c0011edd:	e8 c6 50 00 00       	call   c0016fa8 <Process::createUserThread()>
c0011ee2:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ee4:	83 c4 10             	add    esp,0x10
c0011ee7:	89 c2                	mov    edx,eax
c0011ee9:	83 c4 04             	add    esp,0x4
c0011eec:	c1 fa 1f             	sar    edx,0x1f
c0011eef:	5b                   	pop    ebx
c0011ef0:	5e                   	pop    esi
c0011ef1:	c3                   	ret    
c0011ef2:	31 c0                	xor    eax,eax
c0011ef4:	eb cb                	jmp    c0011ec1 <SysSpawn(regs*)+0x3e>

c0011ef6 <SysGetEnv(regs*)>:
c0011ef6:	57                   	push   edi
c0011ef7:	56                   	push   esi
c0011ef8:	53                   	push   ebx
c0011ef9:	83 ec 1c             	sub    esp,0x1c
c0011efc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011f00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f05:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011f08:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011f0b:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011f0e:	51                   	push   ecx
c0011f0f:	e8 b7 c8 ff ff       	call   c000e7cb <KeGetProcessTotalEnvCount(Process*)>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	39 c7                	cmp    edi,eax
c0011f19:	7c 14                	jl     c0011f2f <SysGetEnv(regs*)+0x39>
c0011f1b:	85 f6                	test   esi,esi
c0011f1d:	75 0b                	jne    c0011f2a <SysGetEnv(regs*)+0x34>
c0011f1f:	83 c4 10             	add    esp,0x10
c0011f22:	31 c0                	xor    eax,eax
c0011f24:	5b                   	pop    ebx
c0011f25:	31 d2                	xor    edx,edx
c0011f27:	5e                   	pop    esi
c0011f28:	5f                   	pop    edi
c0011f29:	c3                   	ret    
c0011f2a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011f2d:	eb f0                	jmp    c0011f1f <SysGetEnv(regs*)+0x29>
c0011f2f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011f33:	83 ec 04             	sub    esp,0x4
c0011f36:	57                   	push   edi
c0011f37:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011f3d:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011f40:	57                   	push   edi
c0011f41:	50                   	push   eax
c0011f42:	e8 a4 c8 ff ff       	call   c000e7eb <KeGetProcessEnvPair(Process*, int)>
c0011f47:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011f4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f4e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011f52:	83 c4 0c             	add    esp,0xc
c0011f55:	85 d2                	test   edx,edx
c0011f57:	75 23                	jne    c0011f7c <SysGetEnv(regs*)+0x86>
c0011f59:	83 ec 0c             	sub    esp,0xc
c0011f5c:	50                   	push   eax
c0011f5d:	e8 0e e6 fe ff       	call   c0000570 <strlen>
c0011f62:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f65:	89 c3                	mov    ebx,eax
c0011f67:	e8 04 e6 fe ff       	call   c0000570 <strlen>
c0011f6c:	83 c4 10             	add    esp,0x10
c0011f6f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	31 d2                	xor    edx,edx
c0011f78:	5b                   	pop    ebx
c0011f79:	5e                   	pop    esi
c0011f7a:	5f                   	pop    edi
c0011f7b:	c3                   	ret    
c0011f7c:	83 ec 08             	sub    esp,0x8
c0011f7f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011f82:	50                   	push   eax
c0011f83:	56                   	push   esi
c0011f84:	e8 b7 e6 fe ff       	call   c0000640 <strcpy>
c0011f89:	58                   	pop    eax
c0011f8a:	5a                   	pop    edx
c0011f8b:	68 59 47 02 c0       	push   0xc0024759
c0011f90:	56                   	push   esi
c0011f91:	e8 aa e8 fe ff       	call   c0000840 <strcat>
c0011f96:	59                   	pop    ecx
c0011f97:	5b                   	pop    ebx
c0011f98:	57                   	push   edi
c0011f99:	56                   	push   esi
c0011f9a:	e8 a1 e8 fe ff       	call   c0000840 <strcat>
c0011f9f:	83 c4 10             	add    esp,0x10
c0011fa2:	e9 78 ff ff ff       	jmp    c0011f1f <SysGetEnv(regs*)+0x29>

c0011fa7 <SysSetFatAttrib(regs*)>:
c0011fa7:	57                   	push   edi
c0011fa8:	56                   	push   esi
c0011fa9:	53                   	push   ebx
c0011faa:	83 ec 1c             	sub    esp,0x1c
c0011fad:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011fb1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011fb4:	68 14 01 00 00       	push   0x114
c0011fb9:	e8 d1 db ff ff       	call   c000fb8f <malloc>
c0011fbe:	83 c4 0c             	add    esp,0xc
c0011fc1:	89 c3                	mov    ebx,eax
c0011fc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fc8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011fcb:	50                   	push   eax
c0011fcc:	57                   	push   edi
c0011fcd:	53                   	push   ebx
c0011fce:	e8 b7 61 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0011fd3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011fd6:	83 c4 0c             	add    esp,0xc
c0011fd9:	0f b6 d4             	movzx  edx,ah
c0011fdc:	0f b6 c0             	movzx  eax,al
c0011fdf:	52                   	push   edx
c0011fe0:	50                   	push   eax
c0011fe1:	53                   	push   ebx
c0011fe2:	e8 29 64 ff ff       	call   c0008410 <File::chfatattr(unsigned char, unsigned char)>
c0011fe7:	83 c4 10             	add    esp,0x10
c0011fea:	85 db                	test   ebx,ebx
c0011fec:	74 14                	je     c0012002 <SysSetFatAttrib(regs*)+0x5b>
c0011fee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ff2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011ff4:	83 ec 0c             	sub    esp,0xc
c0011ff7:	53                   	push   ebx
c0011ff8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011ffb:	83 c4 10             	add    esp,0x10
c0011ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012002:	85 c0                	test   eax,eax
c0012004:	0f 95 c0             	setne  al
c0012007:	31 d2                	xor    edx,edx
c0012009:	0f b6 c0             	movzx  eax,al
c001200c:	f7 d8                	neg    eax
c001200e:	83 d2 00             	adc    edx,0x0
c0012011:	83 c4 10             	add    esp,0x10
c0012014:	f7 da                	neg    edx
c0012016:	5b                   	pop    ebx
c0012017:	5e                   	pop    esi
c0012018:	5f                   	pop    edi
c0012019:	c3                   	ret    

c001201a <SysShutdown(regs*)>:
c001201a:	83 ec 1c             	sub    esp,0x1c
c001201d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012021:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012024:	85 c9                	test   ecx,ecx
c0012026:	74 18                	je     c0012040 <SysShutdown(regs*)+0x26>
c0012028:	83 f9 01             	cmp    ecx,0x1
c001202b:	74 26                	je     c0012053 <SysShutdown(regs*)+0x39>
c001202d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012032:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012037:	83 f9 02             	cmp    ecx,0x2
c001203a:	74 24                	je     c0012060 <SysShutdown(regs*)+0x46>
c001203c:	83 c4 1c             	add    esp,0x1c
c001203f:	c3                   	ret    
c0012040:	e8 a3 e9 ff ff       	call   c00109e8 <KeShutdown()>
c0012045:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001204a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001204f:	83 c4 1c             	add    esp,0x1c
c0012052:	c3                   	ret    
c0012053:	e8 c6 e9 ff ff       	call   c0010a1e <KeSleep()>
c0012058:	31 c0                	xor    eax,eax
c001205a:	31 d2                	xor    edx,edx
c001205c:	83 c4 1c             	add    esp,0x1c
c001205f:	c3                   	ret    
c0012060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012064:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012068:	e8 e1 e9 ff ff       	call   c0010a4e <KeRestart()>
c001206d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012071:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012075:	eb c5                	jmp    c001203c <SysShutdown(regs*)+0x22>

c0012077 <SysPipe(regs*)>:
c0012077:	57                   	push   edi
c0012078:	56                   	push   esi
c0012079:	53                   	push   ebx
c001207a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001207e:	83 ec 0c             	sub    esp,0xc
c0012081:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012084:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012087:	6a 20                	push   0x20
c0012089:	e8 01 db ff ff       	call   c000fb8f <malloc>
c001208e:	89 c3                	mov    ebx,eax
c0012090:	58                   	pop    eax
c0012091:	5a                   	pop    edx
c0012092:	68 00 50 00 00       	push   0x5000
c0012097:	53                   	push   ebx
c0012098:	e8 cb e7 ff ff       	call   c0010868 <Pipe::Pipe(int)>
c001209d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120a0:	e8 27 11 00 00       	call   c00131cc <UnixFile::getFileDescriptor()>
c00120a5:	89 07                	mov    DWORD PTR [edi],eax
c00120a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120aa:	e8 1d 11 00 00       	call   c00131cc <UnixFile::getFileDescriptor()>
c00120af:	83 c4 10             	add    esp,0x10
c00120b2:	89 06                	mov    DWORD PTR [esi],eax
c00120b4:	31 d2                	xor    edx,edx
c00120b6:	5b                   	pop    ebx
c00120b7:	31 c0                	xor    eax,eax
c00120b9:	5e                   	pop    esi
c00120ba:	5f                   	pop    edi
c00120bb:	c3                   	ret    

c00120bc <SysGetUnixTime(regs*)>:
c00120bc:	57                   	push   edi
c00120bd:	56                   	push   esi
c00120be:	53                   	push   ebx
c00120bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120c3:	83 ec 08             	sub    esp,0x8
c00120c6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00120c9:	52                   	push   edx
c00120ca:	68 5b 47 02 c0       	push   0xc002475b
c00120cf:	e8 a8 4e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00120d4:	83 c4 10             	add    esp,0x10
c00120d7:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c00120db:	74 3d                	je     c001211a <SysGetUnixTime(regs*)+0x5e>
c00120dd:	83 ec 0c             	sub    esp,0xc
c00120e0:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c00120e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00120eb:	50                   	push   eax
c00120ec:	e8 49 70 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c00120f1:	83 c4 0c             	add    esp,0xc
c00120f4:	52                   	push   edx
c00120f5:	50                   	push   eax
c00120f6:	68 6f 47 02 c0       	push   0xc002476f
c00120fb:	e8 7c 4e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012100:	83 c4 10             	add    esp,0x10
c0012103:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0012108:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001210e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012112:	5b                   	pop    ebx
c0012113:	5e                   	pop    esi
c0012114:	5f                   	pop    edi
c0012115:	e9 20 70 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c001211a:	8b 35 50 cb 02 c0    	mov    esi,DWORD PTR ds:0xc002cb50
c0012120:	8b 3d 54 cb 02 c0    	mov    edi,DWORD PTR ds:0xc002cb54
c0012126:	89 f0                	mov    eax,esi
c0012128:	89 fa                	mov    edx,edi
c001212a:	01 f0                	add    eax,esi
c001212c:	11 fa                	adc    edx,edi
c001212e:	01 f0                	add    eax,esi
c0012130:	11 fa                	adc    edx,edi
c0012132:	89 c1                	mov    ecx,eax
c0012134:	89 d3                	mov    ebx,edx
c0012136:	0f a4 cb 05          	shld   ebx,ecx,0x5
c001213a:	c1 e1 05             	shl    ecx,0x5
c001213d:	01 c8                	add    eax,ecx
c001213f:	11 da                	adc    edx,ebx
c0012141:	01 f0                	add    eax,esi
c0012143:	5b                   	pop    ebx
c0012144:	11 fa                	adc    edx,edi
c0012146:	5e                   	pop    esi
c0012147:	5f                   	pop    edi
c0012148:	c3                   	ret    

c0012149 <string_ends_with(char const*, char const*)>:
c0012149:	57                   	push   edi
c001214a:	56                   	push   esi
c001214b:	53                   	push   ebx
c001214c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012150:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012154:	83 ec 0c             	sub    esp,0xc
c0012157:	53                   	push   ebx
c0012158:	e8 13 e4 fe ff       	call   c0000570 <strlen>
c001215d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012160:	89 c6                	mov    esi,eax
c0012162:	e8 09 e4 fe ff       	call   c0000570 <strlen>
c0012167:	83 c4 10             	add    esp,0x10
c001216a:	39 c6                	cmp    esi,eax
c001216c:	7d 06                	jge    c0012174 <string_ends_with(char const*, char const*)+0x2b>
c001216e:	5b                   	pop    ebx
c001216f:	31 c0                	xor    eax,eax
c0012171:	5e                   	pop    esi
c0012172:	5f                   	pop    edi
c0012173:	c3                   	ret    
c0012174:	83 ec 08             	sub    esp,0x8
c0012177:	29 c6                	sub    esi,eax
c0012179:	57                   	push   edi
c001217a:	01 f3                	add    ebx,esi
c001217c:	53                   	push   ebx
c001217d:	e8 ce e5 fe ff       	call   c0000750 <strcmp>
c0012182:	83 c4 10             	add    esp,0x10
c0012185:	85 c0                	test   eax,eax
c0012187:	5b                   	pop    ebx
c0012188:	0f 94 c0             	sete   al
c001218b:	5e                   	pop    esi
c001218c:	0f b6 c0             	movzx  eax,al
c001218f:	5f                   	pop    edi
c0012190:	c3                   	ret    

c0012191 <SysOpen(regs*)>:
c0012191:	56                   	push   esi
c0012192:	53                   	push   ebx
c0012193:	81 ec 04 01 00 00    	sub    esp,0x104
c0012199:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00121a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121a3:	85 c0                	test   eax,eax
c00121a5:	0f 84 bc 01 00 00    	je     c0012367 <SysOpen(regs*)+0x1d6>
c00121ab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00121ae:	85 c0                	test   eax,eax
c00121b0:	0f 84 b1 01 00 00    	je     c0012367 <SysOpen(regs*)+0x1d6>
c00121b6:	6a 00                	push   0x0
c00121b8:	68 76 47 02 c0       	push   0xc0024776
c00121bd:	50                   	push   eax
c00121be:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00121c2:	56                   	push   esi
c00121c3:	e8 aa 5c ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00121c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00121cb:	e8 a0 e3 fe ff       	call   c0000570 <strlen>
c00121d0:	83 c4 10             	add    esp,0x10
c00121d3:	83 e8 01             	sub    eax,0x1
c00121d6:	74 21                	je     c00121f9 <SysOpen(regs*)+0x68>
c00121d8:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00121dc:	eb 12                	jmp    c00121f0 <SysOpen(regs*)+0x5f>
c00121de:	83 fa 3a             	cmp    edx,0x3a
c00121e1:	74 12                	je     c00121f5 <SysOpen(regs*)+0x64>
c00121e3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00121e7:	83 e8 01             	sub    eax,0x1
c00121ea:	74 0d                	je     c00121f9 <SysOpen(regs*)+0x68>
c00121ec:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00121f0:	83 fa 2e             	cmp    edx,0x2e
c00121f3:	75 e9                	jne    c00121de <SysOpen(regs*)+0x4d>
c00121f5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00121f9:	83 ec 08             	sub    esp,0x8
c00121fc:	68 7a 47 02 c0       	push   0xc002477a
c0012201:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012204:	50                   	push   eax
c0012205:	e8 3f ff ff ff       	call   c0012149 <string_ends_with(char const*, char const*)>
c001220a:	83 c4 10             	add    esp,0x10
c001220d:	85 c0                	test   eax,eax
c001220f:	74 1d                	je     c001222e <SysOpen(regs*)+0x9d>
c0012211:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012214:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001221a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012221:	81 c4 04 01 00 00    	add    esp,0x104
c0012227:	31 c0                	xor    eax,eax
c0012229:	31 d2                	xor    edx,edx
c001222b:	5b                   	pop    ebx
c001222c:	5e                   	pop    esi
c001222d:	c3                   	ret    
c001222e:	83 ec 08             	sub    esp,0x8
c0012231:	68 7f 47 02 c0       	push   0xc002477f
c0012236:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012239:	50                   	push   eax
c001223a:	e8 0a ff ff ff       	call   c0012149 <string_ends_with(char const*, char const*)>
c001223f:	83 c4 10             	add    esp,0x10
c0012242:	85 c0                	test   eax,eax
c0012244:	75 cb                	jne    c0012211 <SysOpen(regs*)+0x80>
c0012246:	83 ec 08             	sub    esp,0x8
c0012249:	68 7b 47 02 c0       	push   0xc002477b
c001224e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012251:	50                   	push   eax
c0012252:	e8 f9 e4 fe ff       	call   c0000750 <strcmp>
c0012257:	83 c4 10             	add    esp,0x10
c001225a:	85 c0                	test   eax,eax
c001225c:	74 b3                	je     c0012211 <SysOpen(regs*)+0x80>
c001225e:	83 ec 08             	sub    esp,0x8
c0012261:	68 7a 47 02 c0       	push   0xc002477a
c0012266:	56                   	push   esi
c0012267:	e8 dd fe ff ff       	call   c0012149 <string_ends_with(char const*, char const*)>
c001226c:	83 c4 10             	add    esp,0x10
c001226f:	85 c0                	test   eax,eax
c0012271:	75 9e                	jne    c0012211 <SysOpen(regs*)+0x80>
c0012273:	83 ec 08             	sub    esp,0x8
c0012276:	68 84 47 02 c0       	push   0xc0024784
c001227b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001227e:	50                   	push   eax
c001227f:	e8 c5 fe ff ff       	call   c0012149 <string_ends_with(char const*, char const*)>
c0012284:	83 c4 10             	add    esp,0x10
c0012287:	85 c0                	test   eax,eax
c0012289:	0f 85 eb 00 00 00    	jne    c001237a <SysOpen(regs*)+0x1e9>
c001228f:	83 ec 08             	sub    esp,0x8
c0012292:	68 89 47 02 c0       	push   0xc0024789
c0012297:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001229a:	50                   	push   eax
c001229b:	e8 a9 fe ff ff       	call   c0012149 <string_ends_with(char const*, char const*)>
c00122a0:	83 c4 10             	add    esp,0x10
c00122a3:	85 c0                	test   eax,eax
c00122a5:	0f 85 cf 00 00 00    	jne    c001237a <SysOpen(regs*)+0x1e9>
c00122ab:	83 ec 08             	sub    esp,0x8
c00122ae:	68 85 47 02 c0       	push   0xc0024785
c00122b3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00122b6:	51                   	push   ecx
c00122b7:	e8 94 e4 fe ff       	call   c0000750 <strcmp>
c00122bc:	83 c4 10             	add    esp,0x10
c00122bf:	85 c0                	test   eax,eax
c00122c1:	0f 84 b3 00 00 00    	je     c001237a <SysOpen(regs*)+0x1e9>
c00122c7:	83 ec 08             	sub    esp,0x8
c00122ca:	68 84 47 02 c0       	push   0xc0024784
c00122cf:	56                   	push   esi
c00122d0:	e8 74 fe ff ff       	call   c0012149 <string_ends_with(char const*, char const*)>
c00122d5:	83 c4 10             	add    esp,0x10
c00122d8:	85 c0                	test   eax,eax
c00122da:	0f 85 9a 00 00 00    	jne    c001237a <SysOpen(regs*)+0x1e9>
c00122e0:	83 ec 0c             	sub    esp,0xc
c00122e3:	68 14 01 00 00       	push   0x114
c00122e8:	e8 a2 d8 ff ff       	call   c000fb8f <malloc>
c00122ed:	83 c4 0c             	add    esp,0xc
c00122f0:	89 c6                	mov    esi,eax
c00122f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122fa:	50                   	push   eax
c00122fb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00122fe:	52                   	push   edx
c00122ff:	56                   	push   esi
c0012300:	e8 85 5e ff ff       	call   c000818a <File::File(char const*, Process*)>
c0012305:	83 c4 10             	add    esp,0x10
c0012308:	85 f6                	test   esi,esi
c001230a:	74 5b                	je     c0012367 <SysOpen(regs*)+0x1d6>
c001230c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001230f:	0f b6 c2             	movzx  eax,dl
c0012312:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012315:	89 d0                	mov    eax,edx
c0012317:	83 e0 01             	and    eax,0x1
c001231a:	f6 c2 02             	test   dl,0x2
c001231d:	74 03                	je     c0012322 <SysOpen(regs*)+0x191>
c001231f:	83 c8 02             	or     eax,0x2
c0012322:	f6 c2 04             	test   dl,0x4
c0012325:	74 03                	je     c001232a <SysOpen(regs*)+0x199>
c0012327:	83 c8 04             	or     eax,0x4
c001232a:	f6 c2 08             	test   dl,0x8
c001232d:	74 03                	je     c0012332 <SysOpen(regs*)+0x1a1>
c001232f:	83 c8 0a             	or     eax,0xa
c0012332:	80 e2 10             	and    dl,0x10
c0012335:	74 03                	je     c001233a <SysOpen(regs*)+0x1a9>
c0012337:	83 c8 12             	or     eax,0x12
c001233a:	83 ec 08             	sub    esp,0x8
c001233d:	50                   	push   eax
c001233e:	56                   	push   esi
c001233f:	e8 64 5e ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0012344:	83 c4 10             	add    esp,0x10
c0012347:	85 c0                	test   eax,eax
c0012349:	75 1c                	jne    c0012367 <SysOpen(regs*)+0x1d6>
c001234b:	83 ec 0c             	sub    esp,0xc
c001234e:	56                   	push   esi
c001234f:	e8 78 0e 00 00       	call   c00131cc <UnixFile::getFileDescriptor()>
c0012354:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012357:	83 c4 10             	add    esp,0x10
c001235a:	89 02                	mov    DWORD PTR [edx],eax
c001235c:	c1 f8 1f             	sar    eax,0x1f
c001235f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012362:	e9 ba fe ff ff       	jmp    c0012221 <SysOpen(regs*)+0x90>
c0012367:	81 c4 04 01 00 00    	add    esp,0x104
c001236d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012372:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012377:	5b                   	pop    ebx
c0012378:	5e                   	pop    esi
c0012379:	c3                   	ret    
c001237a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001237d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012383:	e9 92 fe ff ff       	jmp    c001221a <SysOpen(regs*)+0x89>

c0012388 <KeSystemCall(regs*, void*)>:
c0012388:	53                   	push   ebx
c0012389:	83 ec 08             	sub    esp,0x8
c001238c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012390:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012393:	83 f8 48             	cmp    eax,0x48
c0012396:	77 16                	ja     c00123ae <KeSystemCall(regs*, void*)+0x26>
c0012398:	8b 14 85 60 6a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd95a0]
c001239f:	85 d2                	test   edx,edx
c00123a1:	74 0b                	je     c00123ae <KeSystemCall(regs*, void*)+0x26>
c00123a3:	83 ec 0c             	sub    esp,0xc
c00123a6:	53                   	push   ebx
c00123a7:	ff d2                	call   edx
c00123a9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00123ac:	eb 0d                	jmp    c00123bb <KeSystemCall(regs*, void*)+0x33>
c00123ae:	52                   	push   edx
c00123af:	52                   	push   edx
c00123b0:	50                   	push   eax
c00123b1:	68 8e 47 02 c0       	push   0xc002478e
c00123b6:	e8 c1 4b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00123bb:	83 c4 10             	add    esp,0x10
c00123be:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00123c3:	31 d2                	xor    edx,edx
c00123c5:	83 c4 08             	add    esp,0x8
c00123c8:	5b                   	pop    ebx
c00123c9:	c3                   	ret    

c00123ca <VgaText::isAtty()>:
c00123ca:	b0 01                	mov    al,0x1
c00123cc:	c3                   	ret    
c00123cd:	90                   	nop

c00123ce <VgaText::~VgaText()>:
c00123ce:	83 ec 0c             	sub    esp,0xc
c00123d1:	ba f8 47 02 c0       	mov    edx,0xc00247f8
c00123d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123da:	89 10                	mov    DWORD PTR [eax],edx
c00123dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123e0:	83 ec 0c             	sub    esp,0xc
c00123e3:	50                   	push   eax
c00123e4:	e8 d1 0f 00 00       	call   c00133ba <UnixFile::~UnixFile()>
c00123e9:	83 c4 10             	add    esp,0x10
c00123ec:	90                   	nop
c00123ed:	83 c4 0c             	add    esp,0xc
c00123f0:	c3                   	ret    
c00123f1:	90                   	nop

c00123f2 <VgaText::~VgaText()>:
c00123f2:	83 ec 0c             	sub    esp,0xc
c00123f5:	83 ec 0c             	sub    esp,0xc
c00123f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123fc:	e8 cd ff ff ff       	call   c00123ce <VgaText::~VgaText()>
c0012401:	83 c4 10             	add    esp,0x10
c0012404:	83 ec 08             	sub    esp,0x8
c0012407:	68 84 01 00 00       	push   0x184
c001240c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012410:	e8 d4 af ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0012415:	83 c4 10             	add    esp,0x10
c0012418:	83 c4 0c             	add    esp,0xc
c001241b:	c3                   	ret    

c001241c <VgaText::read(unsigned long long, void*, int*)>:
c001241c:	83 ec 10             	sub    esp,0x10
c001241f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012423:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012427:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001242b:	e8 75 81 ff ff       	call   c000a5a5 <readKeyboard(VgaText*, char*, unsigned long)>
c0012430:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012434:	89 02                	mov    DWORD PTR [edx],eax
c0012436:	31 c0                	xor    eax,eax
c0012438:	83 c4 1c             	add    esp,0x1c
c001243b:	c3                   	ret    

c001243c <setTerminalScrollLock(bool)>:
c001243c:	c3                   	ret    

c001243d <doTerminalCycle()>:
c001243d:	c3                   	ret    

c001243e <addToTerminalCycle(VgaText*)>:
c001243e:	c3                   	ret    

c001243f <scrollTerminalScrollLock(int)>:
c001243f:	c3                   	ret    

c0012440 <VgaText::updateTitle()>:
c0012440:	c3                   	ret    
c0012441:	90                   	nop

c0012442 <VgaText::load()>:
c0012442:	c3                   	ret    
c0012443:	90                   	nop

c0012444 <VgaText::updateCursor()>:
c0012444:	83 ec 14             	sub    esp,0x14
c0012447:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001244b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001244e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012451:	e8 22 95 00 00       	call   c001b978 <HalConsoleCursorUpdate(int, int)>
c0012456:	83 c4 1c             	add    esp,0x1c
c0012459:	c3                   	ret    

c001245a <VgaText::doANSI_SGR(int)>:
c001245a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001245e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012462:	85 d2                	test   edx,edx
c0012464:	75 0b                	jne    c0012471 <VgaText::doANSI_SGR(int)+0x17>
c0012466:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012469:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001246c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001246f:	eb 59                	jmp    c00124ca <VgaText::doANSI_SGR(int)+0x70>
c0012471:	83 fa 07             	cmp    edx,0x7
c0012474:	75 0b                	jne    c0012481 <VgaText::doANSI_SGR(int)+0x27>
c0012476:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012479:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001247c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001247f:	eb 49                	jmp    c00124ca <VgaText::doANSI_SGR(int)+0x70>
c0012481:	83 fa 1b             	cmp    edx,0x1b
c0012484:	74 e0                	je     c0012466 <VgaText::doANSI_SGR(int)+0xc>
c0012486:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012489:	83 f9 07             	cmp    ecx,0x7
c001248c:	77 09                	ja     c0012497 <VgaText::doANSI_SGR(int)+0x3d>
c001248e:	8b 14 8d c0 6b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9440]
c0012495:	eb 20                	jmp    c00124b7 <VgaText::doANSI_SGR(int)+0x5d>
c0012497:	8d 4a d8             	lea    ecx,[edx-0x28]
c001249a:	83 f9 07             	cmp    ecx,0x7
c001249d:	77 09                	ja     c00124a8 <VgaText::doANSI_SGR(int)+0x4e>
c001249f:	8b 14 8d c0 6b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9440]
c00124a6:	eb 22                	jmp    c00124ca <VgaText::doANSI_SGR(int)+0x70>
c00124a8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00124ab:	83 f9 07             	cmp    ecx,0x7
c00124ae:	77 0b                	ja     c00124bb <VgaText::doANSI_SGR(int)+0x61>
c00124b0:	8b 14 95 78 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9588]
c00124b7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00124ba:	c3                   	ret    
c00124bb:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00124be:	83 f9 07             	cmp    ecx,0x7
c00124c1:	77 0a                	ja     c00124cd <VgaText::doANSI_SGR(int)+0x73>
c00124c3:	8b 14 95 50 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95b0]
c00124ca:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00124cd:	c3                   	ret    

c00124ce <VgaText::setDefaultBgColour(VgaColour)>:
c00124ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124d6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00124d9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00124dc:	c3                   	ret    
c00124dd:	90                   	nop

c00124de <VgaText::setDefaultFgColour(VgaColour)>:
c00124de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124e6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00124e9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00124ec:	c3                   	ret    
c00124ed:	90                   	nop

c00124ee <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00124ee:	53                   	push   ebx
c00124ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00124f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00124fb:	51                   	push   ecx
c00124fc:	e8 cd ff ff ff       	call   c00124ce <VgaText::setDefaultBgColour(VgaColour)>
c0012501:	58                   	pop    eax
c0012502:	5a                   	pop    edx
c0012503:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012507:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001250b:	5b                   	pop    ebx
c001250c:	eb d0                	jmp    c00124de <VgaText::setDefaultFgColour(VgaColour)>

c001250e <VgaText::setTitleTextColour(VgaColour)>:
c001250e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012512:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012516:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012519:	c3                   	ret    

c001251a <VgaText::setTitleColour(VgaColour)>:
c001251a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001251e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012522:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012525:	c3                   	ret    

c0012526 <VgaText::setTitle(char*)>:
c0012526:	c3                   	ret    
c0012527:	90                   	nop

c0012528 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001252c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012531:	83 e0 0f             	and    eax,0xf
c0012534:	c1 e2 04             	shl    edx,0x4
c0012537:	09 d0                	or     eax,edx
c0012539:	c3                   	ret    

c001253a <VgaText::scrollScreen()>:
c001253a:	55                   	push   ebp
c001253b:	57                   	push   edi
c001253c:	56                   	push   esi
c001253d:	be 01 00 00 00       	mov    esi,0x1
c0012542:	53                   	push   ebx
c0012543:	83 ec 0c             	sub    esp,0xc
c0012546:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001254a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001254d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012553:	31 ff                	xor    edi,edi
c0012555:	01 e9                	add    ecx,ebp
c0012557:	8a 01                	mov    al,BYTE PTR [ecx]
c0012559:	83 fe 18             	cmp    esi,0x18
c001255c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012562:	75 20                	jne    c0012584 <VgaText::scrollScreen()+0x4a>
c0012564:	f7 c7 01 00 00 00    	test   edi,0x1
c001256a:	74 15                	je     c0012581 <VgaText::scrollScreen()+0x47>
c001256c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012570:	50                   	push   eax
c0012571:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012575:	50                   	push   eax
c0012576:	e8 ad ff ff ff       	call   c0012528 <VgaText::combineColours(unsigned char, unsigned char)>
c001257b:	5a                   	pop    edx
c001257c:	5a                   	pop    edx
c001257d:	88 01                	mov    BYTE PTR [ecx],al
c001257f:	eb 03                	jmp    c0012584 <VgaText::scrollScreen()+0x4a>
c0012581:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012584:	47                   	inc    edi
c0012585:	41                   	inc    ecx
c0012586:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001258c:	75 c9                	jne    c0012557 <VgaText::scrollScreen()+0x1d>
c001258e:	46                   	inc    esi
c001258f:	83 fe 19             	cmp    esi,0x19
c0012592:	75 b9                	jne    c001254d <VgaText::scrollScreen()+0x13>
c0012594:	39 1d b4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1b4,ebx
c001259a:	75 1f                	jne    c00125bb <VgaText::scrollScreen()+0x81>
c001259c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00125a0:	74 05                	je     c00125a7 <VgaText::scrollScreen()+0x6d>
c00125a2:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00125a5:	eb 14                	jmp    c00125bb <VgaText::scrollScreen()+0x81>
c00125a7:	50                   	push   eax
c00125a8:	50                   	push   eax
c00125a9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00125ad:	50                   	push   eax
c00125ae:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00125b2:	50                   	push   eax
c00125b3:	e8 54 92 00 00       	call   c001b80c <HalConsoleScroll(int, int)>
c00125b8:	83 c4 10             	add    esp,0x10
c00125bb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00125bf:	83 c4 0c             	add    esp,0xc
c00125c2:	5b                   	pop    ebx
c00125c3:	5e                   	pop    esi
c00125c4:	5f                   	pop    edi
c00125c5:	5d                   	pop    ebp
c00125c6:	e9 79 fe ff ff       	jmp    c0012444 <VgaText::updateCursor()>
c00125cb:	90                   	nop

c00125cc <VgaText::combineCharAndColour(char, unsigned char)>:
c00125cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00125d1:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00125d6:	c1 e0 08             	shl    eax,0x8
c00125d9:	09 d0                	or     eax,edx
c00125db:	c3                   	ret    

c00125dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00125dc:	55                   	push   ebp
c00125dd:	57                   	push   edi
c00125de:	56                   	push   esi
c00125df:	53                   	push   ebx
c00125e0:	83 ec 1c             	sub    esp,0x1c
c00125e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00125e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00125eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00125ef:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c00125f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125f6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00125fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125fe:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012602:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012606:	85 ed                	test   ebp,ebp
c0012608:	75 14                	jne    c001261e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c001260a:	c7 44 24 30 a2 47 02 c0 	mov    DWORD PTR [esp+0x30],0xc00247a2
c0012612:	83 c4 1c             	add    esp,0x1c
c0012615:	5b                   	pop    ebx
c0012616:	5e                   	pop    esi
c0012617:	5f                   	pop    edi
c0012618:	5d                   	pop    ebp
c0012619:	e9 c8 d9 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c001261e:	50                   	push   eax
c001261f:	50                   	push   eax
c0012620:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012625:	50                   	push   eax
c0012626:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001262b:	50                   	push   eax
c001262c:	e8 f7 fe ff ff       	call   c0012528 <VgaText::combineColours(unsigned char, unsigned char)>
c0012631:	5a                   	pop    edx
c0012632:	0f be c9             	movsx  ecx,cl
c0012635:	5a                   	pop    edx
c0012636:	0f b6 c0             	movzx  eax,al
c0012639:	50                   	push   eax
c001263a:	51                   	push   ecx
c001263b:	e8 8c ff ff ff       	call   c00125cc <VgaText::combineCharAndColour(char, unsigned char)>
c0012640:	6b d6 50             	imul   edx,esi,0x50
c0012643:	83 c4 10             	add    esp,0x10
c0012646:	01 da                	add    edx,ebx
c0012648:	0f b7 d2             	movzx  edx,dx
c001264b:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012650:	39 3d b4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1b4,edi
c0012656:	75 28                	jne    c0012680 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001265c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012660:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012664:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012668:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001266c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012670:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012674:	83 c4 1c             	add    esp,0x1c
c0012677:	5b                   	pop    ebx
c0012678:	5e                   	pop    esi
c0012679:	5f                   	pop    edi
c001267a:	5d                   	pop    ebp
c001267b:	e9 94 92 00 00       	jmp    c001b914 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012680:	83 c4 1c             	add    esp,0x1c
c0012683:	5b                   	pop    ebx
c0012684:	5e                   	pop    esi
c0012685:	5f                   	pop    edi
c0012686:	5d                   	pop    ebp
c0012687:	c3                   	ret    

c0012688 <VgaText::getCursorX()>:
c0012688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001268c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001268f:	c3                   	ret    

c0012690 <VgaText::getCursorY()>:
c0012690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012694:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012697:	c3                   	ret    

c0012698 <VgaText::setCursor(int, int)>:
c0012698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001269c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126a0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00126a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00126aa:	e9 95 fd ff ff       	jmp    c0012444 <VgaText::updateCursor()>

c00126af <setActiveTerminal(VgaText*)>:
c00126af:	53                   	push   ebx
c00126b0:	83 ec 08             	sub    esp,0x8
c00126b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126b7:	85 db                	test   ebx,ebx
c00126b9:	75 11                	jne    c00126cc <setActiveTerminal(VgaText*)+0x1d>
c00126bb:	c7 44 24 10 b2 47 02 c0 	mov    DWORD PTR [esp+0x10],0xc00247b2
c00126c3:	83 c4 08             	add    esp,0x8
c00126c6:	5b                   	pop    ebx
c00126c7:	e9 1a d9 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c00126cc:	a1 b4 f1 02 c0       	mov    eax,ds:0xc002f1b4
c00126d1:	85 c0                	test   eax,eax
c00126d3:	74 0c                	je     c00126e1 <setActiveTerminal(VgaText*)+0x32>
c00126d5:	83 ec 0c             	sub    esp,0xc
c00126d8:	50                   	push   eax
c00126d9:	e8 66 fd ff ff       	call   c0012444 <VgaText::updateCursor()>
c00126de:	83 c4 10             	add    esp,0x10
c00126e1:	89 1d b4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1b4,ebx
c00126e7:	50                   	push   eax
c00126e8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00126eb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00126ee:	53                   	push   ebx
c00126ef:	e8 a4 ff ff ff       	call   c0012698 <VgaText::setCursor(int, int)>
c00126f4:	83 c4 18             	add    esp,0x18
c00126f7:	5b                   	pop    ebx
c00126f8:	c3                   	ret    
c00126f9:	90                   	nop

c00126fa <VgaText::clearScreen()>:
c00126fa:	57                   	push   edi
c00126fb:	56                   	push   esi
c00126fc:	31 f6                	xor    esi,esi
c00126fe:	53                   	push   ebx
c00126ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012703:	52                   	push   edx
c0012704:	6a 00                	push   0x0
c0012706:	6a 00                	push   0x0
c0012708:	53                   	push   ebx
c0012709:	e8 8a ff ff ff       	call   c0012698 <VgaText::setCursor(int, int)>
c001270e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012715:	83 c4 10             	add    esp,0x10
c0012718:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001271b:	7e 20                	jle    c001273d <VgaText::clearScreen()+0x43>
c001271d:	31 ff                	xor    edi,edi
c001271f:	50                   	push   eax
c0012720:	50                   	push   eax
c0012721:	56                   	push   esi
c0012722:	57                   	push   edi
c0012723:	47                   	inc    edi
c0012724:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012727:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001272a:	6a 20                	push   0x20
c001272c:	53                   	push   ebx
c001272d:	e8 aa fe ff ff       	call   c00125dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012732:	83 c4 20             	add    esp,0x20
c0012735:	83 ff 50             	cmp    edi,0x50
c0012738:	75 e5                	jne    c001271f <VgaText::clearScreen()+0x25>
c001273a:	46                   	inc    esi
c001273b:	eb db                	jmp    c0012718 <VgaText::clearScreen()+0x1e>
c001273d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012744:	5b                   	pop    ebx
c0012745:	5e                   	pop    esi
c0012746:	5f                   	pop    edi
c0012747:	c3                   	ret    

c0012748 <VgaText::setCursorX(int)>:
c0012748:	83 ec 10             	sub    esp,0x10
c001274b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001274f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012756:	50                   	push   eax
c0012757:	e8 3c ff ff ff       	call   c0012698 <VgaText::setCursor(int, int)>
c001275c:	83 c4 1c             	add    esp,0x1c
c001275f:	c3                   	ret    

c0012760 <VgaText::setCursorY(int)>:
c0012760:	83 ec 10             	sub    esp,0x10
c0012763:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012767:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001276b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001276e:	50                   	push   eax
c001276f:	e8 24 ff ff ff       	call   c0012698 <VgaText::setCursor(int, int)>
c0012774:	83 c4 1c             	add    esp,0x1c
c0012777:	c3                   	ret    

c0012778 <VgaText::incrementCursor(bool)>:
c0012778:	56                   	push   esi
c0012779:	53                   	push   ebx
c001277a:	51                   	push   ecx
c001277b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001277f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012783:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012786:	40                   	inc    eax
c0012787:	83 f8 50             	cmp    eax,0x50
c001278a:	74 05                	je     c0012791 <VgaText::incrementCursor(bool)+0x19>
c001278c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001278f:	eb 24                	jmp    c00127b5 <VgaText::incrementCursor(bool)+0x3d>
c0012791:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012794:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001279b:	8d 50 01             	lea    edx,[eax+0x1]
c001279e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00127a1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00127a4:	75 0f                	jne    c00127b5 <VgaText::incrementCursor(bool)+0x3d>
c00127a6:	83 ec 0c             	sub    esp,0xc
c00127a9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00127ac:	53                   	push   ebx
c00127ad:	e8 88 fd ff ff       	call   c001253a <VgaText::scrollScreen()>
c00127b2:	83 c4 10             	add    esp,0x10
c00127b5:	89 f0                	mov    eax,esi
c00127b7:	84 c0                	test   al,al
c00127b9:	74 0c                	je     c00127c7 <VgaText::incrementCursor(bool)+0x4f>
c00127bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127bf:	5a                   	pop    edx
c00127c0:	5b                   	pop    ebx
c00127c1:	5e                   	pop    esi
c00127c2:	e9 7d fc ff ff       	jmp    c0012444 <VgaText::updateCursor()>
c00127c7:	58                   	pop    eax
c00127c8:	5b                   	pop    ebx
c00127c9:	5e                   	pop    esi
c00127ca:	c3                   	ret    
c00127cb:	90                   	nop

c00127cc <VgaText::decrementCursor(bool)>:
c00127cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00127d4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00127d7:	85 c0                	test   eax,eax
c00127d9:	74 04                	je     c00127df <VgaText::decrementCursor(bool)+0x13>
c00127db:	48                   	dec    eax
c00127dc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00127df:	84 c9                	test   cl,cl
c00127e1:	74 09                	je     c00127ec <VgaText::decrementCursor(bool)+0x20>
c00127e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127e7:	e9 58 fc ff ff       	jmp    c0012444 <VgaText::updateCursor()>
c00127ec:	c3                   	ret    
c00127ed:	90                   	nop

c00127ee <VgaText::putchar(char, VgaColour, VgaColour)>:
c00127ee:	53                   	push   ebx
c00127ef:	83 ec 08             	sub    esp,0x8
c00127f2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00127f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012803:	83 f8 07             	cmp    eax,0x7
c0012806:	75 21                	jne    c0012829 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012808:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012810:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012818:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012820:	83 c4 08             	add    esp,0x8
c0012823:	5b                   	pop    ebx
c0012824:	e9 02 62 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c0012829:	83 f8 0d             	cmp    eax,0xd
c001282c:	75 09                	jne    c0012837 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001282e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012835:	eb 2d                	jmp    c0012864 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012837:	83 f8 0a             	cmp    eax,0xa
c001283a:	75 31                	jne    c001286d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001283c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001283f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012846:	8d 50 01             	lea    edx,[eax+0x1]
c0012849:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001284c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001284f:	75 0f                	jne    c0012860 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012851:	83 ec 0c             	sub    esp,0xc
c0012854:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012857:	53                   	push   ebx
c0012858:	e8 dd fc ff ff       	call   c001253a <VgaText::scrollScreen()>
c001285d:	83 c4 10             	add    esp,0x10
c0012860:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012864:	83 c4 08             	add    esp,0x8
c0012867:	5b                   	pop    ebx
c0012868:	e9 d7 fb ff ff       	jmp    c0012444 <VgaText::updateCursor()>
c001286d:	83 f8 08             	cmp    eax,0x8
c0012870:	75 25                	jne    c0012897 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012872:	50                   	push   eax
c0012873:	50                   	push   eax
c0012874:	6a 01                	push   0x1
c0012876:	53                   	push   ebx
c0012877:	e8 50 ff ff ff       	call   c00127cc <VgaText::decrementCursor(bool)>
c001287c:	5a                   	pop    edx
c001287d:	59                   	pop    ecx
c001287e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012881:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012884:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012887:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001288a:	6a 20                	push   0x20
c001288c:	53                   	push   ebx
c001288d:	e8 4a fd ff ff       	call   c00125dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012892:	83 c4 28             	add    esp,0x28
c0012895:	5b                   	pop    ebx
c0012896:	c3                   	ret    
c0012897:	83 ec 08             	sub    esp,0x8
c001289a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001289d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00128a0:	51                   	push   ecx
c00128a1:	52                   	push   edx
c00128a2:	50                   	push   eax
c00128a3:	53                   	push   ebx
c00128a4:	e8 33 fd ff ff       	call   c00125dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00128a9:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00128ad:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00128b5:	83 c4 28             	add    esp,0x28
c00128b8:	5b                   	pop    ebx
c00128b9:	e9 ba fe ff ff       	jmp    c0012778 <VgaText::incrementCursor(bool)>

c00128be <VgaText::putchar(char)>:
c00128be:	57                   	push   edi
c00128bf:	56                   	push   esi
c00128c0:	53                   	push   ebx
c00128c1:	83 ec 10             	sub    esp,0x10
c00128c4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00128c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00128cc:	89 f8                	mov    eax,edi
c00128ce:	0f be c0             	movsx  eax,al
c00128d1:	83 f8 5b             	cmp    eax,0x5b
c00128d4:	75 18                	jne    c00128ee <VgaText::putchar(char)+0x30>
c00128d6:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00128da:	74 20                	je     c00128fc <VgaText::putchar(char)+0x3e>
c00128dc:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00128e2:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00128e9:	e9 c1 00 00 00       	jmp    c00129af <VgaText::putchar(char)+0xf1>
c00128ee:	83 f8 1b             	cmp    eax,0x1b
c00128f1:	75 09                	jne    c00128fc <VgaText::putchar(char)+0x3e>
c00128f3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00128f7:	e9 b3 00 00 00       	jmp    c00129af <VgaText::putchar(char)+0xf1>
c00128fc:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00128ff:	84 c9                	test   cl,cl
c0012901:	0f 84 98 00 00 00    	je     c001299f <VgaText::putchar(char)+0xe1>
c0012907:	8d 77 c0             	lea    esi,[edi-0x40]
c001290a:	89 f2                	mov    edx,esi
c001290c:	80 fa 3e             	cmp    dl,0x3e
c001290f:	77 78                	ja     c0012989 <VgaText::putchar(char)+0xcb>
c0012911:	83 f8 6d             	cmp    eax,0x6d
c0012914:	75 47                	jne    c001295d <VgaText::putchar(char)+0x9f>
c0012916:	31 f6                	xor    esi,esi
c0012918:	31 d2                	xor    edx,edx
c001291a:	31 c0                	xor    eax,eax
c001291c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001291f:	7e 2d                	jle    c001294e <VgaText::putchar(char)+0x90>
c0012921:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012926:	83 fa 3b             	cmp    edx,0x3b
c0012929:	75 17                	jne    c0012942 <VgaText::putchar(char)+0x84>
c001292b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001292f:	50                   	push   eax
c0012930:	53                   	push   ebx
c0012931:	e8 24 fb ff ff       	call   c001245a <VgaText::doANSI_SGR(int)>
c0012936:	59                   	pop    ecx
c0012937:	31 d2                	xor    edx,edx
c0012939:	5f                   	pop    edi
c001293a:	31 c0                	xor    eax,eax
c001293c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012940:	eb 09                	jmp    c001294b <VgaText::putchar(char)+0x8d>
c0012942:	6b c0 0a             	imul   eax,eax,0xa
c0012945:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012949:	88 ca                	mov    dl,cl
c001294b:	46                   	inc    esi
c001294c:	eb ce                	jmp    c001291c <VgaText::putchar(char)+0x5e>
c001294e:	84 d2                	test   dl,dl
c0012950:	74 2f                	je     c0012981 <VgaText::putchar(char)+0xc3>
c0012952:	50                   	push   eax
c0012953:	53                   	push   ebx
c0012954:	e8 01 fb ff ff       	call   c001245a <VgaText::doANSI_SGR(int)>
c0012959:	58                   	pop    eax
c001295a:	5a                   	pop    edx
c001295b:	eb 24                	jmp    c0012981 <VgaText::putchar(char)+0xc3>
c001295d:	83 f8 4a             	cmp    eax,0x4a
c0012960:	75 1f                	jne    c0012981 <VgaText::putchar(char)+0xc3>
c0012962:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012966:	75 19                	jne    c0012981 <VgaText::putchar(char)+0xc3>
c0012968:	83 ec 0c             	sub    esp,0xc
c001296b:	53                   	push   ebx
c001296c:	e8 89 fd ff ff       	call   c00126fa <VgaText::clearScreen()>
c0012971:	83 c4 0c             	add    esp,0xc
c0012974:	6a 00                	push   0x0
c0012976:	6a 00                	push   0x0
c0012978:	53                   	push   ebx
c0012979:	e8 1a fd ff ff       	call   c0012698 <VgaText::setCursor(int, int)>
c001297e:	83 c4 10             	add    esp,0x10
c0012981:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012987:	eb 26                	jmp    c00129af <VgaText::putchar(char)+0xf1>
c0012989:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001298c:	83 f8 0e             	cmp    eax,0xe
c001298f:	7f 1e                	jg     c00129af <VgaText::putchar(char)+0xf1>
c0012991:	8d 48 01             	lea    ecx,[eax+0x1]
c0012994:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012997:	89 f9                	mov    ecx,edi
c0012999:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c001299d:	eb 10                	jmp    c00129af <VgaText::putchar(char)+0xf1>
c001299f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00129a2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00129a5:	50                   	push   eax
c00129a6:	53                   	push   ebx
c00129a7:	e8 42 fe ff ff       	call   c00127ee <VgaText::putchar(char, VgaColour, VgaColour)>
c00129ac:	83 c4 10             	add    esp,0x10
c00129af:	83 c4 10             	add    esp,0x10
c00129b2:	5b                   	pop    ebx
c00129b3:	5e                   	pop    esi
c00129b4:	5f                   	pop    edi
c00129b5:	c3                   	ret    

c00129b6 <VgaText::putx(unsigned int)>:
c00129b6:	57                   	push   edi
c00129b7:	b9 11 00 00 00       	mov    ecx,0x11
c00129bc:	56                   	push   esi
c00129bd:	be ef 2f 02 c0       	mov    esi,0xc0022fef
c00129c2:	53                   	push   ebx
c00129c3:	83 ec 20             	sub    esp,0x20
c00129c6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00129ca:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00129ce:	fc                   	cld    
c00129cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00129d1:	be 08 00 00 00       	mov    esi,0x8
c00129d6:	50                   	push   eax
c00129d7:	50                   	push   eax
c00129d8:	89 d8                	mov    eax,ebx
c00129da:	c1 e3 04             	shl    ebx,0x4
c00129dd:	c1 e8 1c             	shr    eax,0x1c
c00129e0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00129e5:	50                   	push   eax
c00129e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129ea:	e8 cf fe ff ff       	call   c00128be <VgaText::putchar(char)>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	4e                   	dec    esi
c00129f3:	75 e1                	jne    c00129d6 <VgaText::putx(unsigned int)+0x20>
c00129f5:	83 c4 20             	add    esp,0x20
c00129f8:	5b                   	pop    ebx
c00129f9:	5e                   	pop    esi
c00129fa:	5f                   	pop    edi
c00129fb:	c3                   	ret    

c00129fc <VgaText::puts(char const*)>:
c00129fc:	53                   	push   ebx
c00129fd:	83 ec 08             	sub    esp,0x8
c0012a00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a04:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012a07:	85 c0                	test   eax,eax
c0012a09:	74 12                	je     c0012a1d <VgaText::puts(char const*)+0x21>
c0012a0b:	43                   	inc    ebx
c0012a0c:	51                   	push   ecx
c0012a0d:	51                   	push   ecx
c0012a0e:	50                   	push   eax
c0012a0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a13:	e8 a6 fe ff ff       	call   c00128be <VgaText::putchar(char)>
c0012a18:	83 c4 10             	add    esp,0x10
c0012a1b:	eb e7                	jmp    c0012a04 <VgaText::puts(char const*)+0x8>
c0012a1d:	83 c4 08             	add    esp,0x8
c0012a20:	5b                   	pop    ebx
c0012a21:	c3                   	ret    

c0012a22 <VgaText::write(unsigned long long, void*, int*)>:
c0012a22:	55                   	push   ebp
c0012a23:	57                   	push   edi
c0012a24:	56                   	push   esi
c0012a25:	53                   	push   ebx
c0012a26:	83 ec 0c             	sub    esp,0xc
c0012a29:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012a2d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012a31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012a35:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012a3c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012a3f:	39 eb                	cmp    ebx,ebp
c0012a41:	74 13                	je     c0012a56 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012a43:	43                   	inc    ebx
c0012a44:	50                   	push   eax
c0012a45:	50                   	push   eax
c0012a46:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012a4a:	50                   	push   eax
c0012a4b:	56                   	push   esi
c0012a4c:	e8 6d fe ff ff       	call   c00128be <VgaText::putchar(char)>
c0012a51:	83 c4 10             	add    esp,0x10
c0012a54:	eb e9                	jmp    c0012a3f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012a56:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012a5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a61:	89 38                	mov    DWORD PTR [eax],edi
c0012a63:	83 c4 0c             	add    esp,0xc
c0012a66:	31 c0                	xor    eax,eax
c0012a68:	5b                   	pop    ebx
c0012a69:	5e                   	pop    esi
c0012a6a:	5f                   	pop    edi
c0012a6b:	5d                   	pop    ebp
c0012a6c:	c3                   	ret    
c0012a6d:	90                   	nop

c0012a6e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012a6e:	55                   	push   ebp
c0012a6f:	57                   	push   edi
c0012a70:	56                   	push   esi
c0012a71:	53                   	push   ebx
c0012a72:	83 ec 1c             	sub    esp,0x1c
c0012a75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012a79:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012a7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a81:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012a84:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a88:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a90:	85 db                	test   ebx,ebx
c0012a92:	75 14                	jne    c0012aa8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c0012a94:	c7 44 24 30 c0 47 02 c0 	mov    DWORD PTR [esp+0x30],0xc00247c0
c0012a9c:	83 c4 1c             	add    esp,0x1c
c0012a9f:	5b                   	pop    ebx
c0012aa0:	5e                   	pop    esi
c0012aa1:	5f                   	pop    edi
c0012aa2:	5d                   	pop    ebp
c0012aa3:	e9 3e d5 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c0012aa8:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0012aaf:	50                   	push   eax
c0012ab0:	50                   	push   eax
c0012ab1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012ab6:	50                   	push   eax
c0012ab7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012abc:	50                   	push   eax
c0012abd:	e8 66 fa ff ff       	call   c0012528 <VgaText::combineColours(unsigned char, unsigned char)>
c0012ac2:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012ac6:	83 c4 10             	add    esp,0x10
c0012ac9:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012acc:	0f b6 e8             	movzx  ebp,al
c0012acf:	0f b7 c9             	movzx  ecx,cx
c0012ad2:	01 c9                	add    ecx,ecx
c0012ad4:	01 cb                	add    ebx,ecx
c0012ad6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012ad9:	85 c0                	test   eax,eax
c0012adb:	0f 84 ef 00 00 00    	je     c0012bd0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012ae1:	83 f8 0d             	cmp    eax,0xd
c0012ae4:	75 0c                	jne    c0012af2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0012ae6:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012aed:	e9 d8 00 00 00       	jmp    c0012bca <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012af2:	83 f8 0a             	cmp    eax,0xa
c0012af5:	75 44                	jne    c0012b3b <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012af7:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012afa:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012b01:	8d 48 01             	lea    ecx,[eax+0x1]
c0012b04:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012b07:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012b0a:	75 0f                	jne    c0012b1b <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012b0c:	83 ec 0c             	sub    esp,0xc
c0012b0f:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012b12:	57                   	push   edi
c0012b13:	e8 22 fa ff ff       	call   c001253a <VgaText::scrollScreen()>
c0012b18:	83 c4 10             	add    esp,0x10
c0012b1b:	83 ec 0c             	sub    esp,0xc
c0012b1e:	57                   	push   edi
c0012b1f:	e8 20 f9 ff ff       	call   c0012444 <VgaText::updateCursor()>
c0012b24:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012b28:	83 c4 10             	add    esp,0x10
c0012b2b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012b2e:	0f b7 db             	movzx  ebx,bx
c0012b31:	01 db                	add    ebx,ebx
c0012b33:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012b36:	e9 8f 00 00 00       	jmp    c0012bca <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012b3b:	83 f8 08             	cmp    eax,0x8
c0012b3e:	75 34                	jne    c0012b74 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012b40:	51                   	push   ecx
c0012b41:	51                   	push   ecx
c0012b42:	6a 01                	push   0x1
c0012b44:	57                   	push   edi
c0012b45:	e8 82 fc ff ff       	call   c00127cc <VgaText::decrementCursor(bool)>
c0012b4a:	5b                   	pop    ebx
c0012b4b:	58                   	pop    eax
c0012b4c:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012b4f:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012b52:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012b55:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012b58:	6a 20                	push   0x20
c0012b5a:	57                   	push   edi
c0012b5b:	e8 7c fa ff ff       	call   c00125dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012b60:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012b64:	83 c4 20             	add    esp,0x20
c0012b67:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012b6a:	0f b7 db             	movzx  ebx,bx
c0012b6d:	01 db                	add    ebx,ebx
c0012b6f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012b72:	eb 56                	jmp    c0012bca <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012b74:	52                   	push   edx
c0012b75:	52                   	push   edx
c0012b76:	55                   	push   ebp
c0012b77:	50                   	push   eax
c0012b78:	e8 4f fa ff ff       	call   c00125cc <VgaText::combineCharAndColour(char, unsigned char)>
c0012b7d:	83 c4 10             	add    esp,0x10
c0012b80:	66 89 03             	mov    WORD PTR [ebx],ax
c0012b83:	39 3d b4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1b4,edi
c0012b89:	75 1d                	jne    c0012ba8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012b8b:	83 ec 0c             	sub    esp,0xc
c0012b8e:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012b91:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012b94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012b98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012b9c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012b9f:	50                   	push   eax
c0012ba0:	e8 6f 8d 00 00       	call   c001b914 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012ba5:	83 c4 20             	add    esp,0x20
c0012ba8:	83 c3 02             	add    ebx,0x2
c0012bab:	50                   	push   eax
c0012bac:	50                   	push   eax
c0012bad:	6a 00                	push   0x0
c0012baf:	57                   	push   edi
c0012bb0:	e8 c3 fb ff ff       	call   c0012778 <VgaText::incrementCursor(bool)>
c0012bb5:	83 c4 10             	add    esp,0x10
c0012bb8:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012bbc:	75 0c                	jne    c0012bca <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012bbe:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012bc2:	0f b7 db             	movzx  ebx,bx
c0012bc5:	01 db                	add    ebx,ebx
c0012bc7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012bca:	46                   	inc    esi
c0012bcb:	e9 06 ff ff ff       	jmp    c0012ad6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012bd0:	83 ec 0c             	sub    esp,0xc
c0012bd3:	57                   	push   edi
c0012bd4:	e8 6b f8 ff ff       	call   c0012444 <VgaText::updateCursor()>
c0012bd9:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012be0:	83 c4 2c             	add    esp,0x2c
c0012be3:	5b                   	pop    ebx
c0012be4:	5e                   	pop    esi
c0012be5:	5f                   	pop    edi
c0012be6:	5d                   	pop    ebp
c0012be7:	c3                   	ret    

c0012be8 <VgaText::VgaText(char const*)>:
c0012be8:	56                   	push   esi
c0012be9:	53                   	push   ebx
c0012bea:	83 ec 04             	sub    esp,0x4
c0012bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bf1:	83 ec 08             	sub    esp,0x8
c0012bf4:	6a 00                	push   0x0
c0012bf6:	50                   	push   eax
c0012bf7:	e8 d8 05 00 00       	call   c00131d4 <UnixFile::UnixFile(int)>
c0012bfc:	83 c4 10             	add    esp,0x10
c0012bff:	ba f8 47 02 c0       	mov    edx,0xc00247f8
c0012c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c08:	89 10                	mov    DWORD PTR [eax],edx
c0012c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c0e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c19:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c24:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c2c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c34:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012c3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c3f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c4a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c55:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012c5c:	83 ec 0c             	sub    esp,0xc
c0012c5f:	68 d0 47 02 c0       	push   0xc00247d0
c0012c64:	e8 13 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c69:	83 c4 10             	add    esp,0x10
c0012c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c70:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012c77:	83 ec 0c             	sub    esp,0xc
c0012c7a:	6a 01                	push   0x1
c0012c7c:	e8 a6 09 00 00       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c0012c81:	83 c4 10             	add    esp,0x10
c0012c84:	89 c2                	mov    edx,eax
c0012c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c8a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012c8d:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c0012c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c9a:	89 c6                	mov    esi,eax
c0012c9c:	e8 39 d5 ff ff       	call   c00101da <Phys::allocatePage()>
c0012ca1:	68 05 0c 00 00       	push   0xc05
c0012ca6:	56                   	push   esi
c0012ca7:	50                   	push   eax
c0012ca8:	53                   	push   ebx
c0012ca9:	e8 5c 10 00 00       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012cae:	83 c4 10             	add    esp,0x10
c0012cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cb5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012cb8:	83 ec 04             	sub    esp,0x4
c0012cbb:	68 a0 0f 00 00       	push   0xfa0
c0012cc0:	6a 00                	push   0x0
c0012cc2:	50                   	push   eax
c0012cc3:	e8 28 d8 fe ff       	call   c00004f0 <memset>
c0012cc8:	83 c4 10             	add    esp,0x10
c0012ccb:	83 ec 04             	sub    esp,0x4
c0012cce:	6a 00                	push   0x0
c0012cd0:	6a 07                	push   0x7
c0012cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cd6:	e8 13 f8 ff ff       	call   c00124ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012cdb:	83 c4 10             	add    esp,0x10
c0012cde:	83 ec 04             	sub    esp,0x4
c0012ce1:	6a 00                	push   0x0
c0012ce3:	6a 00                	push   0x0
c0012ce5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ce9:	e8 aa f9 ff ff       	call   c0012698 <VgaText::setCursor(int, int)>
c0012cee:	83 c4 10             	add    esp,0x10
c0012cf1:	83 ec 0c             	sub    esp,0xc
c0012cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cf8:	e8 fd f9 ff ff       	call   c00126fa <VgaText::clearScreen()>
c0012cfd:	83 c4 10             	add    esp,0x10
c0012d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d04:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d0c:	05 82 00 00 00       	add    eax,0x82
c0012d11:	83 ec 04             	sub    esp,0x4
c0012d14:	68 80 00 00 00       	push   0x80
c0012d19:	6a 00                	push   0x0
c0012d1b:	50                   	push   eax
c0012d1c:	e8 cf d7 fe ff       	call   c00004f0 <memset>
c0012d21:	83 c4 10             	add    esp,0x10
c0012d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d28:	05 02 01 00 00       	add    eax,0x102
c0012d2d:	83 ec 04             	sub    esp,0x4
c0012d30:	68 80 00 00 00       	push   0x80
c0012d35:	6a 00                	push   0x0
c0012d37:	50                   	push   eax
c0012d38:	e8 b3 d7 fe ff       	call   c00004f0 <memset>
c0012d3d:	83 c4 10             	add    esp,0x10
c0012d40:	90                   	nop
c0012d41:	83 c4 04             	add    esp,0x4
c0012d44:	5b                   	pop    ebx
c0012d45:	5e                   	pop    esi
c0012d46:	c3                   	ret    
c0012d47:	90                   	nop

c0012d48 <VgaText::receiveKey(unsigned char)>:
c0012d48:	55                   	push   ebp
c0012d49:	57                   	push   edi
c0012d4a:	56                   	push   esi
c0012d4b:	53                   	push   ebx
c0012d4c:	83 ec 2c             	sub    esp,0x2c
c0012d4f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012d53:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012d57:	89 ef                	mov    edi,ebp
c0012d59:	81 e7 ff 00 00 00    	and    edi,0xff
c0012d5f:	0f 84 66 01 00 00    	je     c0012ecb <VgaText::receiveKey(unsigned char)+0x183>
c0012d65:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012d6b:	83 ff 08             	cmp    edi,0x8
c0012d6e:	75 73                	jne    c0012de3 <VgaText::receiveKey(unsigned char)+0x9b>
c0012d70:	83 ec 0c             	sub    esp,0xc
c0012d73:	56                   	push   esi
c0012d74:	e8 f7 d7 fe ff       	call   c0000570 <strlen>
c0012d79:	83 c4 10             	add    esp,0x10
c0012d7c:	85 c0                	test   eax,eax
c0012d7e:	0f 84 02 01 00 00    	je     c0012e86 <VgaText::receiveKey(unsigned char)+0x13e>
c0012d84:	50                   	push   eax
c0012d85:	50                   	push   eax
c0012d86:	6a 08                	push   0x8
c0012d88:	53                   	push   ebx
c0012d89:	e8 30 fb ff ff       	call   c00128be <VgaText::putchar(char)>
c0012d8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d91:	e8 da d7 fe ff       	call   c0000570 <strlen>
c0012d96:	83 c4 10             	add    esp,0x10
c0012d99:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012da1:	83 fa 0d             	cmp    edx,0xd
c0012da4:	89 d0                	mov    eax,edx
c0012da6:	0f 95 c1             	setne  cl
c0012da9:	83 fa 1f             	cmp    edx,0x1f
c0012dac:	0f 9e c2             	setle  dl
c0012daf:	0f b6 d2             	movzx  edx,dl
c0012db2:	85 ca                	test   edx,ecx
c0012db4:	74 17                	je     c0012dcd <VgaText::receiveKey(unsigned char)+0x85>
c0012db6:	83 e8 08             	sub    eax,0x8
c0012db9:	3c 02                	cmp    al,0x2
c0012dbb:	76 10                	jbe    c0012dcd <VgaText::receiveKey(unsigned char)+0x85>
c0012dbd:	55                   	push   ebp
c0012dbe:	55                   	push   ebp
c0012dbf:	68 e3 47 02 c0       	push   0xc00247e3
c0012dc4:	53                   	push   ebx
c0012dc5:	e8 32 fc ff ff       	call   c00129fc <VgaText::puts(char const*)>
c0012dca:	83 c4 10             	add    esp,0x10
c0012dcd:	83 ec 0c             	sub    esp,0xc
c0012dd0:	56                   	push   esi
c0012dd1:	e8 9a d7 fe ff       	call   c0000570 <strlen>
c0012dd6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012dde:	e9 a0 00 00 00       	jmp    c0012e83 <VgaText::receiveKey(unsigned char)+0x13b>
c0012de3:	83 ec 0c             	sub    esp,0xc
c0012de6:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012dec:	50                   	push   eax
c0012ded:	e8 7e d7 fe ff       	call   c0000570 <strlen>
c0012df2:	89 34 24             	mov    DWORD PTR [esp],esi
c0012df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012df9:	e8 72 d7 fe ff       	call   c0000570 <strlen>
c0012dfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e02:	83 c4 10             	add    esp,0x10
c0012e05:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012e09:	3d 80 00 00 00       	cmp    eax,0x80
c0012e0e:	0f 87 b7 00 00 00    	ja     c0012ecb <VgaText::receiveKey(unsigned char)+0x183>
c0012e14:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012e17:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012e1a:	3c 1e                	cmp    al,0x1e
c0012e1c:	0f 96 c0             	setbe  al
c0012e1f:	80 fa 01             	cmp    dl,0x1
c0012e22:	0f 97 c2             	seta   dl
c0012e25:	0f b6 d2             	movzx  edx,dl
c0012e28:	85 c2                	test   edx,eax
c0012e2a:	74 2e                	je     c0012e5a <VgaText::receiveKey(unsigned char)+0x112>
c0012e2c:	83 ff 0d             	cmp    edi,0xd
c0012e2f:	74 29                	je     c0012e5a <VgaText::receiveKey(unsigned char)+0x112>
c0012e31:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012e34:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012e37:	68 e9 47 02 c0       	push   0xc00247e9
c0012e3c:	53                   	push   ebx
c0012e3d:	e8 2c fc ff ff       	call   c0012a6e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012e42:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012e45:	8d 45 40             	lea    eax,[ebp+0x40]
c0012e48:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012e4b:	0f b6 c0             	movzx  eax,al
c0012e4e:	50                   	push   eax
c0012e4f:	53                   	push   ebx
c0012e50:	e8 99 f9 ff ff       	call   c00127ee <VgaText::putchar(char, VgaColour, VgaColour)>
c0012e55:	83 c4 20             	add    esp,0x20
c0012e58:	eb 11                	jmp    c0012e6b <VgaText::receiveKey(unsigned char)+0x123>
c0012e5a:	89 e8                	mov    eax,ebp
c0012e5c:	51                   	push   ecx
c0012e5d:	0f be c0             	movsx  eax,al
c0012e60:	51                   	push   ecx
c0012e61:	50                   	push   eax
c0012e62:	53                   	push   ebx
c0012e63:	e8 56 fa ff ff       	call   c00128be <VgaText::putchar(char)>
c0012e68:	83 c4 10             	add    esp,0x10
c0012e6b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012e70:	89 e8                	mov    eax,ebp
c0012e72:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012e76:	52                   	push   edx
c0012e77:	52                   	push   edx
c0012e78:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012e7c:	50                   	push   eax
c0012e7d:	56                   	push   esi
c0012e7e:	e8 bd d9 fe ff       	call   c0000840 <strcat>
c0012e83:	83 c4 10             	add    esp,0x10
c0012e86:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012e8c:	b0 01                	mov    al,0x1
c0012e8e:	83 ff 1c             	cmp    edi,0x1c
c0012e91:	77 0e                	ja     c0012ea1 <VgaText::receiveKey(unsigned char)+0x159>
c0012e93:	b8 08 04 00 10       	mov    eax,0x10000408
c0012e98:	89 f9                	mov    ecx,edi
c0012e9a:	d3 e8                	shr    eax,cl
c0012e9c:	f7 d0                	not    eax
c0012e9e:	83 e0 01             	and    eax,0x1
c0012ea1:	84 c0                	test   al,al
c0012ea3:	74 04                	je     c0012ea9 <VgaText::receiveKey(unsigned char)+0x161>
c0012ea5:	84 d2                	test   dl,dl
c0012ea7:	74 22                	je     c0012ecb <VgaText::receiveKey(unsigned char)+0x183>
c0012ea9:	81 c3 02 01 00 00    	add    ebx,0x102
c0012eaf:	50                   	push   eax
c0012eb0:	50                   	push   eax
c0012eb1:	56                   	push   esi
c0012eb2:	53                   	push   ebx
c0012eb3:	e8 88 d9 fe ff       	call   c0000840 <strcat>
c0012eb8:	83 c4 0c             	add    esp,0xc
c0012ebb:	68 80 00 00 00       	push   0x80
c0012ec0:	6a 00                	push   0x0
c0012ec2:	56                   	push   esi
c0012ec3:	e8 28 d6 fe ff       	call   c00004f0 <memset>
c0012ec8:	83 c4 10             	add    esp,0x10
c0012ecb:	83 c4 2c             	add    esp,0x2c
c0012ece:	5b                   	pop    ebx
c0012ecf:	5e                   	pop    esi
c0012ed0:	5f                   	pop    edi
c0012ed1:	5d                   	pop    ebp
c0012ed2:	c3                   	ret    
c0012ed3:	90                   	nop

c0012ed4 <VgaText::doUpdate()>:
c0012ed4:	c3                   	ret    
c0012ed5:	66 90                	xchg   ax,ax
c0012ed7:	90                   	nop

c0012ed8 <TSS::TSS()>:
c0012ed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012edc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012ee3:	90                   	nop
c0012ee4:	c3                   	ret    
c0012ee5:	90                   	nop
c0012ee6:	66 90                	xchg   ax,ax

c0012ee8 <TSS::setESP(unsigned long)>:
c0012ee8:	55                   	push   ebp
c0012ee9:	89 e5                	mov    ebp,esp
c0012eeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012eee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ef1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012ef4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ef7:	90                   	nop
c0012ef8:	5d                   	pop    ebp
c0012ef9:	c3                   	ret    
c0012efa:	66 90                	xchg   ax,ax

c0012efc <TSS::flush()>:
c0012efc:	55                   	push   ebp
c0012efd:	89 e5                	mov    ebp,esp
c0012eff:	83 ec 10             	sub    esp,0x10
c0012f02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f05:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f07:	83 c8 03             	or     eax,0x3
c0012f0a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012f0e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012f12:	66 89 d0             	mov    ax,dx
c0012f15:	0f 00 d8             	ltr    ax
c0012f18:	90                   	nop
c0012f19:	c9                   	leave  
c0012f1a:	c3                   	ret    
c0012f1b:	90                   	nop

c0012f1c <TSS::setup(unsigned long, unsigned long)>:
c0012f1c:	55                   	push   ebp
c0012f1d:	89 e5                	mov    ebp,esp
c0012f1f:	83 ec 18             	sub    esp,0x18
c0012f22:	83 ec 0c             	sub    esp,0xc
c0012f25:	6a 68                	push   0x68
c0012f27:	e8 63 cc ff ff       	call   c000fb8f <malloc>
c0012f2c:	83 c4 10             	add    esp,0x10
c0012f2f:	89 c2                	mov    edx,eax
c0012f31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f3d:	83 ec 08             	sub    esp,0x8
c0012f40:	50                   	push   eax
c0012f41:	68 0c 48 02 c0       	push   0xc002480c
c0012f46:	e8 31 40 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012f4b:	83 c4 10             	add    esp,0x10
c0012f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f54:	83 ec 04             	sub    esp,0x4
c0012f57:	6a 68                	push   0x68
c0012f59:	6a 00                	push   0x0
c0012f5b:	50                   	push   eax
c0012f5c:	e8 8f d5 fe ff       	call   c00004f0 <memset>
c0012f61:	83 c4 10             	add    esp,0x10
c0012f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f6a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012f70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f76:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f82:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012f85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f8e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f9a:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012fa3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fa6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012faf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fb2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012fb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012fbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fbe:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012fc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fca:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012fd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012fd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fd6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012fd9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012fdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012fdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fe2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012fe5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012fe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012feb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fee:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012ff5:	83 ec 0c             	sub    esp,0xc
c0012ff8:	68 23 48 02 c0       	push   0xc0024823
c0012ffd:	e8 7a 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013002:	83 c4 10             	add    esp,0x10
c0013005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001300b:	0f 20 da             	mov    edx,cr3
c001300e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0013011:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0013014:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0013017:	83 ec 0c             	sub    esp,0xc
c001301a:	68 26 48 02 c0       	push   0xc0024826
c001301f:	e8 58 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013024:	83 c4 10             	add    esp,0x10
c0013027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001302a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001302d:	83 ec 08             	sub    esp,0x8
c0013030:	50                   	push   eax
c0013031:	8d 45 ec             	lea    eax,[ebp-0x14]
c0013034:	50                   	push   eax
c0013035:	e8 b8 bb ff ff       	call   c000ebf2 <GDTEntry::setBase(unsigned int)>
c001303a:	83 c4 10             	add    esp,0x10
c001303d:	83 ec 08             	sub    esp,0x8
c0013040:	6a 68                	push   0x68
c0013042:	8d 45 ec             	lea    eax,[ebp-0x14]
c0013045:	50                   	push   eax
c0013046:	e8 c3 bb ff ff       	call   c000ec0e <GDTEntry::setLimit(unsigned int)>
c001304b:	83 c4 10             	add    esp,0x10
c001304e:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0013052:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0013055:	83 e0 0f             	and    eax,0xf
c0013058:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001305b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001305e:	83 c8 40             	or     eax,0x40
c0013061:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0013064:	83 ec 0c             	sub    esp,0xc
c0013067:	68 29 48 02 c0       	push   0xc0024829
c001306c:	e8 0b 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013071:	83 c4 10             	add    esp,0x10
c0013074:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0013079:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001307f:	83 ec 08             	sub    esp,0x8
c0013082:	50                   	push   eax
c0013083:	68 2c 48 02 c0       	push   0xc002482c
c0013088:	e8 ef 3e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001308d:	83 c4 10             	add    esp,0x10
c0013090:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0013095:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001309b:	05 64 01 00 00       	add    eax,0x164
c00130a0:	83 ec 04             	sub    esp,0x4
c00130a3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00130a6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00130a9:	50                   	push   eax
c00130aa:	e8 93 bb ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c00130af:	83 c4 10             	add    esp,0x10
c00130b2:	89 c2                	mov    edx,eax
c00130b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00130b7:	89 10                	mov    DWORD PTR [eax],edx
c00130b9:	83 ec 0c             	sub    esp,0xc
c00130bc:	68 41 48 02 c0       	push   0xc0024841
c00130c1:	e8 b6 3e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00130c6:	83 c4 10             	add    esp,0x10
c00130c9:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c00130ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130d4:	05 64 01 00 00       	add    eax,0x164
c00130d9:	83 ec 0c             	sub    esp,0xc
c00130dc:	50                   	push   eax
c00130dd:	e8 8a bb ff ff       	call   c000ec6c <GDT::flush()>
c00130e2:	83 c4 10             	add    esp,0x10
c00130e5:	83 ec 0c             	sub    esp,0xc
c00130e8:	68 44 48 02 c0       	push   0xc0024844
c00130ed:	e8 8a 3e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00130f2:	83 c4 10             	add    esp,0x10
c00130f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00130f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00130fa:	c9                   	leave  
c00130fb:	c3                   	ret    

c00130fc <ReservedFilename::read(unsigned long long, void*, int*)>:
c00130fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013100:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013104:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013107:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001310c:	75 08                	jne    c0013116 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001310e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0013114:	eb 38                	jmp    c001314e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0013116:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001311b:	75 17                	jne    c0013134 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001311d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013122:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013125:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001312b:	8b 10                	mov    edx,DWORD PTR [eax]
c001312d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013131:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0013134:	89 c1                	mov    ecx,eax
c0013136:	83 e1 fd             	and    ecx,0xfffffffd
c0013139:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001313f:	74 cd                	je     c001310e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0013141:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013146:	83 e0 ef             	and    eax,0xffffffef
c0013149:	83 f8 08             	cmp    eax,0x8
c001314c:	76 c0                	jbe    c001310e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001314e:	31 c0                	xor    eax,eax
c0013150:	c3                   	ret    
c0013151:	90                   	nop

c0013152 <ReservedFilename::isAtty()>:
c0013152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013156:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013159:	31 c0                	xor    eax,eax
c001315b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0013161:	74 09                	je     c001316c <ReservedFilename::isAtty()+0x1a>
c0013163:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0013169:	0f 94 c0             	sete   al
c001316c:	c3                   	ret    
c001316d:	90                   	nop

c001316e <ReservedFilename::write(unsigned long long, void*, int*)>:
c001316e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013172:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013176:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013179:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001317d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0013182:	75 08                	jne    c001318c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0013184:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001318a:	eb 3d                	jmp    c00131c9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001318c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013191:	75 17                	jne    c00131aa <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0013193:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013198:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001319b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00131a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00131a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00131a7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00131aa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00131af:	75 04                	jne    c00131b5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00131b1:	89 0a                	mov    DWORD PTR [edx],ecx
c00131b3:	eb 14                	jmp    c00131c9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00131b5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00131ba:	74 c8                	je     c0013184 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00131bc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00131c1:	83 e0 ef             	and    eax,0xffffffef
c00131c4:	83 f8 08             	cmp    eax,0x8
c00131c7:	76 bb                	jbe    c0013184 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00131c9:	31 c0                	xor    eax,eax
c00131cb:	c3                   	ret    

c00131cc <UnixFile::getFileDescriptor()>:
c00131cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131d3:	c3                   	ret    

c00131d4 <UnixFile::UnixFile(int)>:
c00131d4:	53                   	push   ebx
c00131d5:	83 ec 28             	sub    esp,0x28
c00131d8:	ba 70 48 02 c0       	mov    edx,0xc0024870
c00131dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131e1:	89 10                	mov    DWORD PTR [eax],edx
c00131e3:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00131eb:	0f 8f 90 01 00 00    	jg     c0013381 <UnixFile::UnixFile(int)+0x1ad>
c00131f1:	a1 00 6c 02 c0       	mov    eax,ds:0xc0026c00
c00131f6:	8d 50 01             	lea    edx,[eax+0x1]
c00131f9:	89 15 00 6c 02 c0    	mov    DWORD PTR ds:0xc0026c00,edx
c00131ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013203:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013206:	83 ec 08             	sub    esp,0x8
c0013209:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001320d:	68 38 f2 02 c0       	push   0xc002f238
c0013212:	e8 37 f1 00 00       	call   c002234e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013217:	83 c4 10             	add    esp,0x10
c001321a:	a0 34 f2 02 c0       	mov    al,ds:0xc002f234
c001321f:	83 f0 01             	xor    eax,0x1
c0013222:	0f b6 c0             	movzx  eax,al
c0013225:	85 c0                	test   eax,eax
c0013227:	0f 84 55 01 00 00    	je     c0013382 <UnixFile::UnixFile(int)+0x1ae>
c001322d:	c6 05 34 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f234,0x1
c0013234:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001323c:	83 ec 0c             	sub    esp,0xc
c001323f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013243:	e8 47 c9 ff ff       	call   c000fb8f <malloc>
c0013248:	83 c4 10             	add    esp,0x10
c001324b:	89 c3                	mov    ebx,eax
c001324d:	83 ec 08             	sub    esp,0x8
c0013250:	68 03 ff ff 0f       	push   0xfffff03
c0013255:	53                   	push   ebx
c0013256:	e8 2d 01 00 00       	call   c0013388 <ReservedFilename::ReservedFilename(int)>
c001325b:	83 c4 10             	add    esp,0x10
c001325e:	89 1d 2c f2 02 c0    	mov    DWORD PTR ds:0xc002f22c,ebx
c0013264:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001326c:	83 ec 0c             	sub    esp,0xc
c001326f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013273:	e8 17 c9 ff ff       	call   c000fb8f <malloc>
c0013278:	83 c4 10             	add    esp,0x10
c001327b:	89 c3                	mov    ebx,eax
c001327d:	83 ec 08             	sub    esp,0x8
c0013280:	68 01 ff ff 0f       	push   0xfffff01
c0013285:	53                   	push   ebx
c0013286:	e8 fd 00 00 00       	call   c0013388 <ReservedFilename::ReservedFilename(int)>
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	89 1d 30 f2 02 c0    	mov    DWORD PTR ds:0xc002f230,ebx
c0013294:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001329c:	83 ec 0c             	sub    esp,0xc
c001329f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00132a3:	e8 e7 c8 ff ff       	call   c000fb8f <malloc>
c00132a8:	83 c4 10             	add    esp,0x10
c00132ab:	89 c3                	mov    ebx,eax
c00132ad:	83 ec 08             	sub    esp,0x8
c00132b0:	68 00 ff ff 0f       	push   0xfffff00
c00132b5:	53                   	push   ebx
c00132b6:	e8 cd 00 00 00       	call   c0013388 <ReservedFilename::ReservedFilename(int)>
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	89 1d 24 f2 02 c0    	mov    DWORD PTR ds:0xc002f224,ebx
c00132c4:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00132cc:	83 ec 0c             	sub    esp,0xc
c00132cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00132d3:	e8 b7 c8 ff ff       	call   c000fb8f <malloc>
c00132d8:	83 c4 10             	add    esp,0x10
c00132db:	89 c3                	mov    ebx,eax
c00132dd:	83 ec 08             	sub    esp,0x8
c00132e0:	68 02 ff ff 0f       	push   0xfffff02
c00132e5:	53                   	push   ebx
c00132e6:	e8 9d 00 00 00       	call   c0013388 <ReservedFilename::ReservedFilename(int)>
c00132eb:	83 c4 10             	add    esp,0x10
c00132ee:	89 1d 28 f2 02 c0    	mov    DWORD PTR ds:0xc002f228,ebx
c00132f4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00132fc:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013301:	7f 7f                	jg     c0013382 <UnixFile::UnixFile(int)+0x1ae>
c0013303:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001330b:	83 ec 0c             	sub    esp,0xc
c001330e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013312:	e8 78 c8 ff ff       	call   c000fb8f <malloc>
c0013317:	83 c4 10             	add    esp,0x10
c001331a:	89 c3                	mov    ebx,eax
c001331c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013320:	05 10 ff ff 0f       	add    eax,0xfffff10
c0013325:	83 ec 08             	sub    esp,0x8
c0013328:	50                   	push   eax
c0013329:	53                   	push   ebx
c001332a:	e8 59 00 00 00       	call   c0013388 <ReservedFilename::ReservedFilename(int)>
c001332f:	83 c4 10             	add    esp,0x10
c0013332:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013336:	89 1c 85 00 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e00],ebx
c001333d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0013345:	83 ec 0c             	sub    esp,0xc
c0013348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001334c:	e8 3e c8 ff ff       	call   c000fb8f <malloc>
c0013351:	83 c4 10             	add    esp,0x10
c0013354:	89 c3                	mov    ebx,eax
c0013356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001335a:	05 20 ff ff 0f       	add    eax,0xfffff20
c001335f:	83 ec 08             	sub    esp,0x8
c0013362:	50                   	push   eax
c0013363:	53                   	push   ebx
c0013364:	e8 1f 00 00 00       	call   c0013388 <ReservedFilename::ReservedFilename(int)>
c0013369:	83 c4 10             	add    esp,0x10
c001336c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013370:	89 1c 85 c0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e40],ebx
c0013377:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001337c:	e9 7b ff ff ff       	jmp    c00132fc <UnixFile::UnixFile(int)+0x128>
c0013381:	90                   	nop
c0013382:	83 c4 28             	add    esp,0x28
c0013385:	5b                   	pop    ebx
c0013386:	c3                   	ret    
c0013387:	90                   	nop

c0013388 <ReservedFilename::ReservedFilename(int)>:
c0013388:	83 ec 0c             	sub    esp,0xc
c001338b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001338f:	83 ec 08             	sub    esp,0x8
c0013392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013396:	50                   	push   eax
c0013397:	e8 38 fe ff ff       	call   c00131d4 <UnixFile::UnixFile(int)>
c001339c:	83 c4 10             	add    esp,0x10
c001339f:	ba 8c 48 02 c0       	mov    edx,0xc002488c
c00133a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a8:	89 10                	mov    DWORD PTR [eax],edx
c00133aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00133b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00133b5:	90                   	nop
c00133b6:	83 c4 0c             	add    esp,0xc
c00133b9:	c3                   	ret    

c00133ba <UnixFile::~UnixFile()>:
c00133ba:	83 ec 1c             	sub    esp,0x1c
c00133bd:	ba 70 48 02 c0       	mov    edx,0xc0024870
c00133c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133c6:	89 10                	mov    DWORD PTR [eax],edx
c00133c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00133cf:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00133d4:	7f 76                	jg     c001344c <UnixFile::~UnixFile()+0x92>
c00133d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00133de:	83 ec 0c             	sub    esp,0xc
c00133e1:	68 38 f2 02 c0       	push   0xc002f238
c00133e6:	e8 37 f0 00 00       	call   c0022422 <LinkedList<UnixFile>::getFirstElement()>
c00133eb:	83 c4 10             	add    esp,0x10
c00133ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133f2:	83 ec 0c             	sub    esp,0xc
c00133f5:	68 38 f2 02 c0       	push   0xc002f238
c00133fa:	e8 2b f0 00 00       	call   c002242a <LinkedList<UnixFile>::removeFirst()>
c00133ff:	83 c4 10             	add    esp,0x10
c0013402:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013406:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001340a:	74 43                	je     c001344f <UnixFile::~UnixFile()+0x95>
c001340c:	83 ec 08             	sub    esp,0x8
c001340f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013413:	68 38 f2 02 c0       	push   0xc002f238
c0013418:	e8 31 ef 00 00       	call   c002234e <LinkedList<UnixFile>::addElement(UnixFile*)>
c001341d:	83 c4 10             	add    esp,0x10
c0013420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013424:	8d 50 01             	lea    edx,[eax+0x1]
c0013427:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001342b:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013430:	0f 94 c0             	sete   al
c0013433:	0f b6 c0             	movzx  eax,al
c0013436:	85 c0                	test   eax,eax
c0013438:	74 a4                	je     c00133de <UnixFile::~UnixFile()+0x24>
c001343a:	83 ec 0c             	sub    esp,0xc
c001343d:	68 48 48 02 c0       	push   0xc0024848
c0013442:	e8 9f cb ff ff       	call   c000ffe6 <KePanic(char const*)>
c0013447:	83 c4 10             	add    esp,0x10
c001344a:	eb 92                	jmp    c00133de <UnixFile::~UnixFile()+0x24>
c001344c:	90                   	nop
c001344d:	eb 01                	jmp    c0013450 <UnixFile::~UnixFile()+0x96>
c001344f:	90                   	nop
c0013450:	90                   	nop
c0013451:	83 c4 1c             	add    esp,0x1c
c0013454:	c3                   	ret    
c0013455:	90                   	nop

c0013456 <UnixFile::~UnixFile()>:
c0013456:	83 ec 0c             	sub    esp,0xc
c0013459:	83 ec 0c             	sub    esp,0xc
c001345c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013460:	e8 55 ff ff ff       	call   c00133ba <UnixFile::~UnixFile()>
c0013465:	83 c4 10             	add    esp,0x10
c0013468:	83 ec 08             	sub    esp,0x8
c001346b:	6a 0c                	push   0xc
c001346d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013471:	e8 73 9f ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0013476:	83 c4 10             	add    esp,0x10
c0013479:	83 c4 0c             	add    esp,0xc
c001347c:	c3                   	ret    
c001347d:	90                   	nop

c001347e <ReservedFilename::~ReservedFilename()>:
c001347e:	83 ec 0c             	sub    esp,0xc
c0013481:	ba 8c 48 02 c0       	mov    edx,0xc002488c
c0013486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001348a:	89 10                	mov    DWORD PTR [eax],edx
c001348c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013490:	83 ec 0c             	sub    esp,0xc
c0013493:	50                   	push   eax
c0013494:	e8 21 ff ff ff       	call   c00133ba <UnixFile::~UnixFile()>
c0013499:	83 c4 10             	add    esp,0x10
c001349c:	90                   	nop
c001349d:	83 c4 0c             	add    esp,0xc
c00134a0:	c3                   	ret    
c00134a1:	90                   	nop

c00134a2 <ReservedFilename::~ReservedFilename()>:
c00134a2:	83 ec 0c             	sub    esp,0xc
c00134a5:	83 ec 0c             	sub    esp,0xc
c00134a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ac:	e8 cd ff ff ff       	call   c001347e <ReservedFilename::~ReservedFilename()>
c00134b1:	83 c4 10             	add    esp,0x10
c00134b4:	83 ec 08             	sub    esp,0x8
c00134b7:	6a 0c                	push   0xc
c00134b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134bd:	e8 27 9f ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00134c2:	83 c4 10             	add    esp,0x10
c00134c5:	83 c4 0c             	add    esp,0xc
c00134c8:	c3                   	ret    

c00134c9 <KeGetFileFromDescriptor(int)>:
c00134c9:	53                   	push   ebx
c00134ca:	83 ec 08             	sub    esp,0x8
c00134cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00134d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00134dd:	7f 30                	jg     c001350f <KeGetFileFromDescriptor(int)+0x46>
c00134df:	83 ec 0c             	sub    esp,0xc
c00134e2:	68 38 f2 02 c0       	push   0xc002f238
c00134e7:	e8 36 ef 00 00       	call   c0022422 <LinkedList<UnixFile>::getFirstElement()>
c00134ec:	83 c4 10             	add    esp,0x10
c00134ef:	8d 50 ff             	lea    edx,[eax-0x1]
c00134f2:	83 fa fd             	cmp    edx,0xfffffffd
c00134f5:	76 04                	jbe    c00134fb <KeGetFileFromDescriptor(int)+0x32>
c00134f7:	31 c0                	xor    eax,eax
c00134f9:	eb 6e                	jmp    c0013569 <KeGetFileFromDescriptor(int)+0xa0>
c00134fb:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00134fe:	74 69                	je     c0013569 <KeGetFileFromDescriptor(int)+0xa0>
c0013500:	52                   	push   edx
c0013501:	52                   	push   edx
c0013502:	50                   	push   eax
c0013503:	68 38 f2 02 c0       	push   0xc002f238
c0013508:	e8 bf ef 00 00       	call   c00224cc <LinkedList<UnixFile>::getNext(UnixFile*)>
c001350d:	eb dd                	jmp    c00134ec <KeGetFileFromDescriptor(int)+0x23>
c001350f:	a1 2c f2 02 c0       	mov    eax,ds:0xc002f22c
c0013514:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001351a:	74 4d                	je     c0013569 <KeGetFileFromDescriptor(int)+0xa0>
c001351c:	a1 30 f2 02 c0       	mov    eax,ds:0xc002f230
c0013521:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0013527:	74 40                	je     c0013569 <KeGetFileFromDescriptor(int)+0xa0>
c0013529:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c001352e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0013534:	74 33                	je     c0013569 <KeGetFileFromDescriptor(int)+0xa0>
c0013536:	a1 24 f2 02 c0       	mov    eax,ds:0xc002f224
c001353b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013541:	74 26                	je     c0013569 <KeGetFileFromDescriptor(int)+0xa0>
c0013543:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013549:	83 f8 08             	cmp    eax,0x8
c001354c:	77 09                	ja     c0013557 <KeGetFileFromDescriptor(int)+0x8e>
c001354e:	8b 04 85 00 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0e00]
c0013555:	eb 12                	jmp    c0013569 <KeGetFileFromDescriptor(int)+0xa0>
c0013557:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001355d:	83 fb 08             	cmp    ebx,0x8
c0013560:	77 95                	ja     c00134f7 <KeGetFileFromDescriptor(int)+0x2e>
c0013562:	8b 04 9d c0 f1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0e40]
c0013569:	83 c4 08             	add    esp,0x8
c001356c:	5b                   	pop    ebx
c001356d:	c3                   	ret    

c001356e <__static_initialization_and_destruction_0(int, int)>:
c001356e:	83 ec 0c             	sub    esp,0xc
c0013571:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013576:	75 34                	jne    c00135ac <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013578:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013580:	75 2a                	jne    c00135ac <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013582:	83 ec 0c             	sub    esp,0xc
c0013585:	68 38 f2 02 c0       	push   0xc002f238
c001358a:	e8 7d ed 00 00       	call   c002230c <LinkedList<UnixFile>::LinkedList()>
c001358f:	83 c4 10             	add    esp,0x10
c0013592:	83 ec 04             	sub    esp,0x4
c0013595:	68 4c 64 02 c0       	push   0xc002644c
c001359a:	68 38 f2 02 c0       	push   0xc002f238
c001359f:	68 0a 23 02 c0       	push   0xc002230a
c00135a4:	e8 f0 9d ff ff       	call   c000d399 <__cxa_atexit>
c00135a9:	83 c4 10             	add    esp,0x10
c00135ac:	90                   	nop
c00135ad:	83 c4 0c             	add    esp,0xc
c00135b0:	c3                   	ret    

c00135b1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00135b1:	83 ec 0c             	sub    esp,0xc
c00135b4:	83 ec 08             	sub    esp,0x8
c00135b7:	68 ff ff 00 00       	push   0xffff
c00135bc:	6a 01                	push   0x1
c00135be:	e8 ab ff ff ff       	call   c001356e <__static_initialization_and_destruction_0(int, int)>
c00135c3:	83 c4 10             	add    esp,0x10
c00135c6:	83 c4 0c             	add    esp,0xc
c00135c9:	c3                   	ret    

c00135ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00135ca:	53                   	push   ebx
c00135cb:	8b 15 08 6c 02 c0    	mov    edx,DWORD PTR ds:0xc0026c08
c00135d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00135d9:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00135df:	89 d8                	mov    eax,ebx
c00135e1:	d1 e8                	shr    eax,1
c00135e3:	01 d0                	add    eax,edx
c00135e5:	80 e3 01             	and    bl,0x1
c00135e8:	8a 10                	mov    dl,BYTE PTR [eax]
c00135ea:	75 09                	jne    c00135f5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00135ec:	83 e2 f0             	and    edx,0xfffffff0
c00135ef:	09 ca                	or     edx,ecx
c00135f1:	88 10                	mov    BYTE PTR [eax],dl
c00135f3:	5b                   	pop    ebx
c00135f4:	c3                   	ret    
c00135f5:	83 e2 0f             	and    edx,0xf
c00135f8:	0f b6 c9             	movzx  ecx,cl
c00135fb:	c1 e1 04             	shl    ecx,0x4
c00135fe:	09 ca                	or     edx,ecx
c0013600:	88 10                	mov    BYTE PTR [eax],dl
c0013602:	5b                   	pop    ebx
c0013603:	c3                   	ret    

c0013604 <Virt::getPageState(unsigned long)>:
c0013604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013608:	8b 0d 08 6c 02 c0    	mov    ecx,DWORD PTR ds:0xc0026c08
c001360e:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013614:	89 d0                	mov    eax,edx
c0013616:	d1 e8                	shr    eax,1
c0013618:	80 e2 01             	and    dl,0x1
c001361b:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001361e:	74 03                	je     c0013623 <Virt::getPageState(unsigned long)+0x1f>
c0013620:	c1 e8 04             	shr    eax,0x4
c0013623:	83 e0 0f             	and    eax,0xf
c0013626:	c3                   	ret    

c0013627 <Virt::allocateKernelVirtualPages(int)>:
c0013627:	55                   	push   ebp
c0013628:	31 ed                	xor    ebp,ebp
c001362a:	57                   	push   edi
c001362b:	31 ff                	xor    edi,edi
c001362d:	56                   	push   esi
c001362e:	53                   	push   ebx
c001362f:	31 db                	xor    ebx,ebx
c0013631:	83 ec 0c             	sub    esp,0xc
c0013634:	8b 35 04 6c 02 c0    	mov    esi,DWORD PTR ds:0xc0026c04
c001363a:	56                   	push   esi
c001363b:	e8 c4 ff ff ff       	call   c0013604 <Virt::getPageState(unsigned long)>
c0013640:	5a                   	pop    edx
c0013641:	84 c0                	test   al,al
c0013643:	75 41                	jne    c0013686 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0013645:	85 db                	test   ebx,ebx
c0013647:	75 02                	jne    c001364b <Virt::allocateKernelVirtualPages(int)+0x24>
c0013649:	89 f5                	mov    ebp,esi
c001364b:	83 c3 01             	add    ebx,0x1
c001364e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013652:	74 5f                	je     c00136b3 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0013654:	83 c6 01             	add    esi,0x1
c0013657:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c001365d:	76 34                	jbe    c0013693 <Virt::allocateKernelVirtualPages(int)+0x6c>
c001365f:	c7 05 04 6c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026c04,0xc8000
c0013669:	f7 c7 01 00 00 00    	test   edi,0x1
c001366f:	75 2a                	jne    c001369b <Virt::allocateKernelVirtualPages(int)+0x74>
c0013671:	be 00 80 0c 00       	mov    esi,0xc8000
c0013676:	bf 01 00 00 00       	mov    edi,0x1
c001367b:	56                   	push   esi
c001367c:	e8 83 ff ff ff       	call   c0013604 <Virt::getPageState(unsigned long)>
c0013681:	5a                   	pop    edx
c0013682:	84 c0                	test   al,al
c0013684:	74 bf                	je     c0013645 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0013686:	31 db                	xor    ebx,ebx
c0013688:	83 c6 01             	add    esi,0x1
c001368b:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013691:	77 cc                	ja     c001365f <Virt::allocateKernelVirtualPages(int)+0x38>
c0013693:	89 35 04 6c 02 c0    	mov    DWORD PTR ds:0xc0026c04,esi
c0013699:	eb 9f                	jmp    c001363a <Virt::allocateKernelVirtualPages(int)+0x13>
c001369b:	83 ec 0c             	sub    esp,0xc
c001369e:	68 a0 48 02 c0       	push   0xc00248a0
c00136a3:	e8 3e c9 ff ff       	call   c000ffe6 <KePanic(char const*)>
c00136a8:	8b 35 04 6c 02 c0    	mov    esi,DWORD PTR ds:0xc0026c04
c00136ae:	83 c4 10             	add    esp,0x10
c00136b1:	eb 87                	jmp    c001363a <Virt::allocateKernelVirtualPages(int)+0x13>
c00136b3:	89 2d 04 6c 02 c0    	mov    DWORD PTR ds:0xc0026c04,ebp
c00136b9:	83 fb 01             	cmp    ebx,0x1
c00136bc:	74 6f                	je     c001372d <Virt::allocateKernelVirtualPages(int)+0x106>
c00136be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00136c2:	85 c9                	test   ecx,ecx
c00136c4:	74 49                	je     c001370f <Virt::allocateKernelVirtualPages(int)+0xe8>
c00136c6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00136ca:	89 e8                	mov    eax,ebp
c00136cc:	31 db                	xor    ebx,ebx
c00136ce:	8d 79 ff             	lea    edi,[ecx-0x1]
c00136d1:	eb 18                	jmp    c00136eb <Virt::allocateKernelVirtualPages(int)+0xc4>
c00136d3:	6a 01                	push   0x1
c00136d5:	83 c3 01             	add    ebx,0x1
c00136d8:	50                   	push   eax
c00136d9:	e8 ec fe ff ff       	call   c00135ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136de:	58                   	pop    eax
c00136df:	5a                   	pop    edx
c00136e0:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00136e4:	74 29                	je     c001370f <Virt::allocateKernelVirtualPages(int)+0xe8>
c00136e6:	a1 04 6c 02 c0       	mov    eax,ds:0xc0026c04
c00136eb:	8d 50 01             	lea    edx,[eax+0x1]
c00136ee:	85 db                	test   ebx,ebx
c00136f0:	89 15 04 6c 02 c0    	mov    DWORD PTR ds:0xc0026c04,edx
c00136f6:	74 24                	je     c001371c <Virt::allocateKernelVirtualPages(int)+0xf5>
c00136f8:	39 df                	cmp    edi,ebx
c00136fa:	75 d7                	jne    c00136d3 <Virt::allocateKernelVirtualPages(int)+0xac>
c00136fc:	6a 03                	push   0x3
c00136fe:	83 c3 01             	add    ebx,0x1
c0013701:	50                   	push   eax
c0013702:	e8 c3 fe ff ff       	call   c00135ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013707:	59                   	pop    ecx
c0013708:	5e                   	pop    esi
c0013709:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001370d:	75 d7                	jne    c00136e6 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001370f:	83 c4 0c             	add    esp,0xc
c0013712:	89 e8                	mov    eax,ebp
c0013714:	5b                   	pop    ebx
c0013715:	c1 e0 0c             	shl    eax,0xc
c0013718:	5e                   	pop    esi
c0013719:	5f                   	pop    edi
c001371a:	5d                   	pop    ebp
c001371b:	c3                   	ret    
c001371c:	6a 02                	push   0x2
c001371e:	bb 01 00 00 00       	mov    ebx,0x1
c0013723:	50                   	push   eax
c0013724:	e8 a1 fe ff ff       	call   c00135ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013729:	58                   	pop    eax
c001372a:	5a                   	pop    edx
c001372b:	eb b9                	jmp    c00136e6 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001372d:	6a 04                	push   0x4
c001372f:	8d 45 01             	lea    eax,[ebp+0x1]
c0013732:	55                   	push   ebp
c0013733:	a3 04 6c 02 c0       	mov    ds:0xc0026c04,eax
c0013738:	e8 8d fe ff ff       	call   c00135ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001373d:	5b                   	pop    ebx
c001373e:	89 e8                	mov    eax,ebp
c0013740:	5e                   	pop    esi
c0013741:	c1 e0 0c             	shl    eax,0xc
c0013744:	83 c4 0c             	add    esp,0xc
c0013747:	5b                   	pop    ebx
c0013748:	5e                   	pop    esi
c0013749:	5f                   	pop    edi
c001374a:	5d                   	pop    ebp
c001374b:	c3                   	ret    

c001374c <Virt::freeSwapfilePage(unsigned long)>:
c001374c:	53                   	push   ebx
c001374d:	8b 15 4c f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f24c
c0013753:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013757:	b8 01 00 00 00       	mov    eax,0x1
c001375c:	89 cb                	mov    ebx,ecx
c001375e:	d3 e0                	shl    eax,cl
c0013760:	c1 eb 05             	shr    ebx,0x5
c0013763:	f7 d0                	not    eax
c0013765:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013768:	21 c1                	and    ecx,eax
c001376a:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001376d:	5b                   	pop    ebx
c001376e:	c3                   	ret    

c001376f <Virt::swapIDToSector(unsigned long)>:
c001376f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013773:	8b 15 0c 6c 02 c0    	mov    edx,DWORD PTR ds:0xc0026c0c
c0013779:	8b 0d 14 6c 02 c0    	mov    ecx,DWORD PTR ds:0xc0026c14
c001377f:	0f af c2             	imul   eax,edx
c0013782:	01 c8                	add    eax,ecx
c0013784:	c3                   	ret    

c0013785 <Virt::allocateSwapfilePage()>:
c0013785:	55                   	push   ebp
c0013786:	31 d2                	xor    edx,edx
c0013788:	57                   	push   edi
c0013789:	56                   	push   esi
c001378a:	53                   	push   ebx
c001378b:	83 ec 0c             	sub    esp,0xc
c001378e:	8b 0d 0c 6c 02 c0    	mov    ecx,DWORD PTR ds:0xc0026c0c
c0013794:	a1 10 6c 02 c0       	mov    eax,ds:0xc0026c10
c0013799:	f7 f1                	div    ecx
c001379b:	39 0d 10 6c 02 c0    	cmp    DWORD PTR ds:0xc0026c10,ecx
c00137a1:	72 2f                	jb     c00137d2 <Virt::allocateSwapfilePage()+0x4d>
c00137a3:	8b 35 4c f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f24c
c00137a9:	8b 16                	mov    edx,DWORD PTR [esi]
c00137ab:	f6 c2 01             	test   dl,0x1
c00137ae:	74 3e                	je     c00137ee <Virt::allocateSwapfilePage()+0x69>
c00137b0:	31 c9                	xor    ecx,ecx
c00137b2:	bf 01 00 00 00       	mov    edi,0x1
c00137b7:	eb 12                	jmp    c00137cb <Virt::allocateSwapfilePage()+0x46>
c00137b9:	89 fd                	mov    ebp,edi
c00137bb:	89 ca                	mov    edx,ecx
c00137bd:	d3 e5                	shl    ebp,cl
c00137bf:	c1 ea 05             	shr    edx,0x5
c00137c2:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00137c5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00137c7:	85 ea                	test   edx,ebp
c00137c9:	74 2c                	je     c00137f7 <Virt::allocateSwapfilePage()+0x72>
c00137cb:	83 c1 01             	add    ecx,0x1
c00137ce:	39 c8                	cmp    eax,ecx
c00137d0:	77 e7                	ja     c00137b9 <Virt::allocateSwapfilePage()+0x34>
c00137d2:	83 ec 0c             	sub    esp,0xc
c00137d5:	68 b3 4b 02 c0       	push   0xc0024bb3
c00137da:	e8 07 c8 ff ff       	call   c000ffe6 <KePanic(char const*)>
c00137df:	83 c4 10             	add    esp,0x10
c00137e2:	31 c9                	xor    ecx,ecx
c00137e4:	83 c4 0c             	add    esp,0xc
c00137e7:	89 c8                	mov    eax,ecx
c00137e9:	5b                   	pop    ebx
c00137ea:	5e                   	pop    esi
c00137eb:	5f                   	pop    edi
c00137ec:	5d                   	pop    ebp
c00137ed:	c3                   	ret    
c00137ee:	89 f3                	mov    ebx,esi
c00137f0:	bd 01 00 00 00       	mov    ebp,0x1
c00137f5:	31 c9                	xor    ecx,ecx
c00137f7:	09 ea                	or     edx,ebp
c00137f9:	89 c8                	mov    eax,ecx
c00137fb:	89 13                	mov    DWORD PTR [ebx],edx
c00137fd:	83 c4 0c             	add    esp,0xc
c0013800:	5b                   	pop    ebx
c0013801:	5e                   	pop    esi
c0013802:	5f                   	pop    edi
c0013803:	5d                   	pop    ebp
c0013804:	c3                   	ret    

c0013805 <Virt::virtualMemorySetup()>:
c0013805:	53                   	push   ebx
c0013806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001380b:	6a 0f                	push   0xf
c001380d:	53                   	push   ebx
c001380e:	83 c3 01             	add    ebx,0x1
c0013811:	e8 b4 fd ff ff       	call   c00135ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013816:	58                   	pop    eax
c0013817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001381d:	5a                   	pop    edx
c001381e:	75 eb                	jne    c001380b <Virt::virtualMemorySetup()+0x6>
c0013820:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013825:	6a 00                	push   0x0
c0013827:	53                   	push   ebx
c0013828:	83 c3 01             	add    ebx,0x1
c001382b:	e8 9a fd ff ff       	call   c00135ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013830:	59                   	pop    ecx
c0013831:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013837:	58                   	pop    eax
c0013838:	75 eb                	jne    c0013825 <Virt::virtualMemorySetup()+0x20>
c001383a:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001383f:	6a 0f                	push   0xf
c0013841:	53                   	push   ebx
c0013842:	83 c3 01             	add    ebx,0x1
c0013845:	e8 80 fd ff ff       	call   c00135ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001384a:	58                   	pop    eax
c001384b:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013851:	5a                   	pop    edx
c0013852:	75 eb                	jne    c001383f <Virt::virtualMemorySetup()+0x3a>
c0013854:	5b                   	pop    ebx
c0013855:	c3                   	ret    

c0013856 <Virt::setupPageSwapping(int)>:
c0013856:	53                   	push   ebx
c0013857:	83 ec 0c             	sub    esp,0xc
c001385a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001385e:	a1 e8 ca 02 c0       	mov    eax,ds:0xc002cae8
c0013863:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013869:	8b 10                	mov    edx,DWORD PTR [eax]
c001386b:	53                   	push   ebx
c001386c:	c1 e3 0b             	shl    ebx,0xb
c001386f:	68 ca 4b 02 c0       	push   0xc0024bca
c0013874:	50                   	push   eax
c0013875:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013878:	89 1d 10 6c 02 c0    	mov    DWORD PTR ds:0xc0026c10,ebx
c001387e:	c6 05 18 6c 02 c0 43 	mov    BYTE PTR ds:0xc0026c18,0x43
c0013885:	c1 eb 08             	shr    ebx,0x8
c0013888:	a3 14 6c 02 c0       	mov    ds:0xc0026c14,eax
c001388d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013890:	c7 05 0c 6c 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0026c0c,0x8
c001389a:	e8 f0 c2 ff ff       	call   c000fb8f <malloc>
c001389f:	83 c4 0c             	add    esp,0xc
c00138a2:	89 c1                	mov    ecx,eax
c00138a4:	a3 4c f2 02 c0       	mov    ds:0xc002f24c,eax
c00138a9:	31 d2                	xor    edx,edx
c00138ab:	a1 10 6c 02 c0       	mov    eax,ds:0xc0026c10
c00138b0:	f7 35 0c 6c 02 c0    	div    DWORD PTR ds:0xc0026c0c
c00138b6:	c1 e8 05             	shr    eax,0x5
c00138b9:	50                   	push   eax
c00138ba:	6a 00                	push   0x0
c00138bc:	51                   	push   ecx
c00138bd:	e8 2e cc fe ff       	call   c00004f0 <memset>
c00138c2:	83 c4 18             	add    esp,0x18
c00138c5:	5b                   	pop    ebx
c00138c6:	c3                   	ret    
c00138c7:	90                   	nop

c00138c8 <VAS::setCPUSpecific(unsigned long)>:
c00138c8:	c3                   	ret    
c00138c9:	90                   	nop

c00138ca <VAS::VAS(VAS*)>:
c00138ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138d9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00138e0:	90                   	nop
c00138e1:	c3                   	ret    

c00138e2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00138e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138e6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00138eb:	89 c2                	mov    edx,eax
c00138ed:	c1 e8 0a             	shr    eax,0xa
c00138f0:	c1 ea 16             	shr    edx,0x16
c00138f3:	83 f9 01             	cmp    ecx,0x1
c00138f6:	19 c9                	sbb    ecx,ecx
c00138f8:	c1 e2 0c             	shl    edx,0xc
c00138fb:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013901:	25 fc 0f 00 00       	and    eax,0xffc
c0013906:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001390d:	01 d0                	add    eax,edx
c001390f:	c3                   	ret    

c0013910 <VAS::getPageTableEntry(unsigned long)>:
c0013910:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013914:	89 ca                	mov    edx,ecx
c0013916:	c1 e9 0a             	shr    ecx,0xa
c0013919:	c1 ea 16             	shr    edx,0x16
c001391c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013922:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013928:	c1 e0 0c             	shl    eax,0xc
c001392b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001392e:	c3                   	ret    

c001392f <Virt::freeKernelVirtualPages(unsigned long)>:
c001392f:	55                   	push   ebp
c0013930:	57                   	push   edi
c0013931:	bf 01 00 00 00       	mov    edi,0x1
c0013936:	56                   	push   esi
c0013937:	53                   	push   ebx
c0013938:	83 ec 1c             	sub    esp,0x1c
c001393b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001393f:	c1 ee 0c             	shr    esi,0xc
c0013942:	eb 48                	jmp    c001398c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013944:	83 ec 08             	sub    esp,0x8
c0013947:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c001394c:	55                   	push   ebp
c001394d:	50                   	push   eax
c001394e:	e8 bd ff ff ff       	call   c0013910 <VAS::getPageTableEntry(unsigned long)>
c0013953:	83 c4 10             	add    esp,0x10
c0013956:	8b 10                	mov    edx,DWORD PTR [eax]
c0013958:	f6 c6 04             	test   dh,0x4
c001395b:	75 70                	jne    c00139cd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001395d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013963:	83 fb 04             	cmp    ebx,0x4
c0013966:	0f 84 8a 00 00 00    	je     c00139f6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001396c:	83 fb 02             	cmp    ebx,0x2
c001396f:	0f 84 9a 00 00 00    	je     c0013a0f <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013975:	83 fb 03             	cmp    ebx,0x3
c0013978:	0f 84 be 00 00 00    	je     c0013a3c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001397e:	83 fb 01             	cmp    ebx,0x1
c0013981:	0f 84 a2 00 00 00    	je     c0013a29 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013987:	83 c6 01             	add    esi,0x1
c001398a:	31 ff                	xor    edi,edi
c001398c:	56                   	push   esi
c001398d:	89 f5                	mov    ebp,esi
c001398f:	e8 70 fc ff ff       	call   c0013604 <Virt::getPageState(unsigned long)>
c0013994:	c1 e5 0c             	shl    ebp,0xc
c0013997:	0f b6 d8             	movzx  ebx,al
c001399a:	5a                   	pop    edx
c001399b:	85 db                	test   ebx,ebx
c001399d:	75 a5                	jne    c0013944 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c001399f:	83 ec 0c             	sub    esp,0xc
c00139a2:	68 e1 4b 02 c0       	push   0xc0024be1
c00139a7:	e8 3a c6 ff ff       	call   c000ffe6 <KePanic(char const*)>
c00139ac:	5a                   	pop    edx
c00139ad:	59                   	pop    ecx
c00139ae:	55                   	push   ebp
c00139af:	8b 2d 50 f2 02 c0    	mov    ebp,DWORD PTR ds:0xc002f250
c00139b5:	55                   	push   ebp
c00139b6:	e8 55 ff ff ff       	call   c0013910 <VAS::getPageTableEntry(unsigned long)>
c00139bb:	83 c4 10             	add    esp,0x10
c00139be:	8b 10                	mov    edx,DWORD PTR [eax]
c00139c0:	f6 c6 04             	test   dh,0x4
c00139c3:	75 08                	jne    c00139cd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00139c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139cb:	eb ba                	jmp    c0013987 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00139cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139d1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00139d7:	83 ec 0c             	sub    esp,0xc
c00139da:	52                   	push   edx
c00139db:	e8 91 c7 ff ff       	call   c0010171 <Phys::freePage(unsigned long)>
c00139e0:	83 c4 10             	add    esp,0x10
c00139e3:	83 fb 04             	cmp    ebx,0x4
c00139e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139f0:	0f 85 76 ff ff ff    	jne    c001396c <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00139f6:	83 e7 01             	and    edi,0x1
c00139f9:	75 46                	jne    c0013a41 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00139fb:	c7 44 24 30 c0 48 02 c0 	mov    DWORD PTR [esp+0x30],0xc00248c0
c0013a03:	83 c4 1c             	add    esp,0x1c
c0013a06:	5b                   	pop    ebx
c0013a07:	5e                   	pop    esi
c0013a08:	5f                   	pop    edi
c0013a09:	5d                   	pop    ebp
c0013a0a:	e9 d7 c5 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c0013a0f:	83 e7 01             	and    edi,0x1
c0013a12:	75 15                	jne    c0013a29 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	68 fd 4b 02 c0       	push   0xc0024bfd
c0013a1c:	e8 c5 c5 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0013a21:	83 c4 10             	add    esp,0x10
c0013a24:	e9 5e ff ff ff       	jmp    c0013987 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013a29:	83 ec 08             	sub    esp,0x8
c0013a2c:	6a 00                	push   0x0
c0013a2e:	56                   	push   esi
c0013a2f:	e8 96 fb ff ff       	call   c00135ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013a34:	83 c4 10             	add    esp,0x10
c0013a37:	e9 4b ff ff ff       	jmp    c0013987 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013a3c:	83 e7 01             	and    edi,0x1
c0013a3f:	75 16                	jne    c0013a57 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013a41:	83 ec 08             	sub    esp,0x8
c0013a44:	6a 00                	push   0x0
c0013a46:	56                   	push   esi
c0013a47:	e8 7e fb ff ff       	call   c00135ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013a4c:	83 c4 10             	add    esp,0x10
c0013a4f:	83 c4 1c             	add    esp,0x1c
c0013a52:	5b                   	pop    ebx
c0013a53:	5e                   	pop    esi
c0013a54:	5f                   	pop    edi
c0013a55:	5d                   	pop    ebp
c0013a56:	c3                   	ret    
c0013a57:	c7 44 24 30 19 4c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024c19
c0013a5f:	83 c4 1c             	add    esp,0x1c
c0013a62:	5b                   	pop    ebx
c0013a63:	5e                   	pop    esi
c0013a64:	5f                   	pop    edi
c0013a65:	5d                   	pop    ebp
c0013a66:	e9 7b c5 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c0013a6b:	90                   	nop

c0013a6c <VAS::freeAllocatedPages(unsigned long)>:
c0013a6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013a74:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013a78:	74 09                	je     c0013a83 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013a7a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013a7e:	e9 ac fe ff ff       	jmp    c001392f <Virt::freeKernelVirtualPages(unsigned long)>
c0013a83:	c7 44 24 04 e4 48 02 c0 	mov    DWORD PTR [esp+0x4],0xc00248e4
c0013a8b:	e9 ec 34 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c0013a90 <VAS::virtualToPhysical(unsigned long)>:
c0013a90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a94:	50                   	push   eax
c0013a95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013a99:	52                   	push   edx
c0013a9a:	e8 71 fe ff ff       	call   c0013910 <VAS::getPageTableEntry(unsigned long)>
c0013a9f:	59                   	pop    ecx
c0013aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013aa2:	5a                   	pop    edx
c0013aa3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013aa8:	c3                   	ret    
c0013aa9:	90                   	nop

c0013aaa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013aaa:	55                   	push   ebp
c0013aab:	57                   	push   edi
c0013aac:	56                   	push   esi
c0013aad:	53                   	push   ebx
c0013aae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ab2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013ab6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013aba:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013abe:	85 db                	test   ebx,ebx
c0013ac0:	7e 24                	jle    c0013ae6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013ac2:	c1 e3 0c             	shl    ebx,0xc
c0013ac5:	01 f3                	add    ebx,esi
c0013ac7:	56                   	push   esi
c0013ac8:	81 c6 00 10 00 00    	add    esi,0x1000
c0013ace:	55                   	push   ebp
c0013acf:	e8 3c fe ff ff       	call   c0013910 <VAS::getPageTableEntry(unsigned long)>
c0013ad4:	5a                   	pop    edx
c0013ad5:	59                   	pop    ecx
c0013ad6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ad8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013adc:	21 f9                	and    ecx,edi
c0013ade:	09 d1                	or     ecx,edx
c0013ae0:	39 f3                	cmp    ebx,esi
c0013ae2:	89 08                	mov    DWORD PTR [eax],ecx
c0013ae4:	75 e1                	jne    c0013ac7 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0013ae6:	5b                   	pop    ebx
c0013ae7:	5e                   	pop    esi
c0013ae8:	5f                   	pop    edi
c0013ae9:	5d                   	pop    ebp
c0013aea:	c3                   	ret    
c0013aeb:	90                   	nop

c0013aec <VAS::VAS()>:
c0013aec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013af0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013af7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013afb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b06:	a3 50 f2 02 c0       	mov    ds:0xc002f250,eax
c0013b0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b0f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013b13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b17:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0013b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b1e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013b25:	ba 7d 80 02 c0       	mov    edx,0xc002807d
c0013b2a:	b8 00 80 02 c0       	mov    eax,0xc0028000
c0013b2f:	29 c2                	sub    edx,eax
c0013b31:	89 d0                	mov    eax,edx
c0013b33:	05 ff 0f 00 00       	add    eax,0xfff
c0013b38:	c1 e8 0c             	shr    eax,0xc
c0013b3b:	89 c2                	mov    edx,eax
c0013b3d:	b8 00 80 02 c0       	mov    eax,0xc0028000
c0013b42:	6a 04                	push   0x4
c0013b44:	6a ff                	push   0xffffffff
c0013b46:	52                   	push   edx
c0013b47:	50                   	push   eax
c0013b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013b4c:	e8 59 ff ff ff       	call   c0013aaa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013b51:	83 c4 14             	add    esp,0x14
c0013b54:	90                   	nop
c0013b55:	c3                   	ret    

c0013b56 <VAS::setToWriteCombining(unsigned long, int)>:
c0013b56:	a1 24 fb 02 c0       	mov    eax,ds:0xc002fb24
c0013b5b:	50                   	push   eax
c0013b5c:	6a ff                	push   0xffffffff
c0013b5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013b62:	52                   	push   edx
c0013b63:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013b67:	51                   	push   ecx
c0013b68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b6c:	50                   	push   eax
c0013b6d:	e8 38 ff ff ff       	call   c0013aaa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013b72:	83 c4 14             	add    esp,0x14
c0013b75:	c3                   	ret    

c0013b76 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013b76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b7a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013b7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b81:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013b84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013b89:	83 f8 01             	cmp    eax,0x1
c0013b8c:	19 c0                	sbb    eax,eax
c0013b8e:	83 ca 03             	or     edx,0x3
c0013b91:	83 e0 fc             	and    eax,0xfffffffc
c0013b94:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013b9b:	0f 20 d8             	mov    eax,cr3
c0013b9e:	0f 22 d8             	mov    cr3,eax
c0013ba1:	c3                   	ret    

c0013ba2 <VAS::~VAS()>:
c0013ba2:	83 ec 2c             	sub    esp,0x2c
c0013ba5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013bad:	fa                   	cli    
c0013bae:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0013bb3:	83 c0 01             	add    eax,0x1
c0013bb6:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0013bbb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bc2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013bc5:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013bcb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bcf:	6a 01                	push   0x1
c0013bd1:	50                   	push   eax
c0013bd2:	e8 9f ff ff ff       	call   c0013b76 <VAS::mapOtherVASIn(bool, VAS*)>
c0013bd7:	83 c4 0c             	add    esp,0xc
c0013bda:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013be2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013bea:	0f 8f d8 00 00 00    	jg     c0013cc8 <VAS::~VAS()+0x126>
c0013bf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013bf4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013bf7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bfb:	c1 e2 02             	shl    edx,0x2
c0013bfe:	01 d0                	add    eax,edx
c0013c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c0a:	83 e0 01             	and    eax,0x1
c0013c0d:	0f 84 ab 00 00 00    	je     c0013cbe <VAS::~VAS()+0x11c>
c0013c13:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c1b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013c23:	7f 74                	jg     c0013c99 <VAS::~VAS()+0xf7>
c0013c25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c29:	c1 e0 0a             	shl    eax,0xa
c0013c2c:	89 c2                	mov    edx,eax
c0013c2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c32:	01 d0                	add    eax,edx
c0013c34:	c1 e0 0c             	shl    eax,0xc
c0013c37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c3b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013c45:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013c4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013c4f:	6a 01                	push   0x1
c0013c51:	50                   	push   eax
c0013c52:	e8 8b fc ff ff       	call   c00138e2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013c57:	83 c4 0c             	add    esp,0xc
c0013c5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013c5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c62:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c6c:	25 01 04 00 00       	and    eax,0x401
c0013c71:	3d 01 04 00 00       	cmp    eax,0x401
c0013c76:	75 1a                	jne    c0013c92 <VAS::~VAS()+0xf0>
c0013c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013c81:	83 ec 0c             	sub    esp,0xc
c0013c84:	50                   	push   eax
c0013c85:	e8 e7 c4 ff ff       	call   c0010171 <Phys::freePage(unsigned long)>
c0013c8a:	83 c4 10             	add    esp,0x10
c0013c8d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013c92:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013c97:	eb 82                	jmp    c0013c1b <VAS::~VAS()+0x79>
c0013c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9d:	25 00 04 00 00       	and    eax,0x400
c0013ca2:	74 1a                	je     c0013cbe <VAS::~VAS()+0x11c>
c0013ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013cad:	83 ec 0c             	sub    esp,0xc
c0013cb0:	50                   	push   eax
c0013cb1:	e8 bb c4 ff ff       	call   c0010171 <Phys::freePage(unsigned long)>
c0013cb6:	83 c4 10             	add    esp,0x10
c0013cb9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013cbe:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013cc3:	e9 1a ff ff ff       	jmp    c0013be2 <VAS::~VAS()+0x40>
c0013cc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ccc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ccf:	83 ec 0c             	sub    esp,0xc
c0013cd2:	50                   	push   eax
c0013cd3:	e8 57 fc ff ff       	call   c001392f <Virt::freeKernelVirtualPages(unsigned long)>
c0013cd8:	83 c4 10             	add    esp,0x10
c0013cdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cdf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013ce2:	83 ec 0c             	sub    esp,0xc
c0013ce5:	50                   	push   eax
c0013ce6:	e8 86 c4 ff ff       	call   c0010171 <Phys::freePage(unsigned long)>
c0013ceb:	83 c4 10             	add    esp,0x10
c0013cee:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013cf3:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0013cfb:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0013d00:	85 c0                	test   eax,eax
c0013d02:	75 01                	jne    c0013d05 <VAS::~VAS()+0x163>
c0013d04:	fb                   	sti    
c0013d05:	90                   	nop
c0013d06:	83 c4 2c             	add    esp,0x2c
c0013d09:	c3                   	ret    

c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013d0a:	55                   	push   ebp
c0013d0b:	57                   	push   edi
c0013d0c:	56                   	push   esi
c0013d0d:	53                   	push   ebx
c0013d0e:	83 ec 1c             	sub    esp,0x1c
c0013d11:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013d15:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013d19:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013d1f:	77 08                	ja     c0013d29 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013d21:	0f 20 d8             	mov    eax,cr3
c0013d24:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013d27:	75 49                	jne    c0013d72 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013d29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d2d:	09 d8                	or     eax,ebx
c0013d2f:	a9 ff 0f 00 00       	test   eax,0xfff
c0013d34:	75 59                	jne    c0013d8f <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013d36:	89 de                	mov    esi,ebx
c0013d38:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013d3b:	c1 ee 16             	shr    esi,0x16
c0013d3e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013d45:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013d49:	74 56                	je     c0013da1 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013d4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013d4f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013d53:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013d59:	c1 eb 0a             	shr    ebx,0xa
c0013d5c:	c1 e6 0c             	shl    esi,0xc
c0013d5f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013d65:	09 d0                	or     eax,edx
c0013d67:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013d6a:	83 c4 1c             	add    esp,0x1c
c0013d6d:	5b                   	pop    ebx
c0013d6e:	5e                   	pop    esi
c0013d6f:	5f                   	pop    edi
c0013d70:	5d                   	pop    ebp
c0013d71:	c3                   	ret    
c0013d72:	83 ec 0c             	sub    esp,0xc
c0013d75:	68 08 49 02 c0       	push   0xc0024908
c0013d7a:	e8 fd 31 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013d7f:	83 c4 10             	add    esp,0x10
c0013d82:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d86:	09 d8                	or     eax,ebx
c0013d88:	a9 ff 0f 00 00       	test   eax,0xfff
c0013d8d:	74 a7                	je     c0013d36 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013d8f:	83 ec 0c             	sub    esp,0xc
c0013d92:	68 70 49 02 c0       	push   0xc0024970
c0013d97:	e8 4a c2 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0013d9c:	83 c4 10             	add    esp,0x10
c0013d9f:	eb 95                	jmp    c0013d36 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013da1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013da5:	e8 30 c4 ff ff       	call   c00101da <Phys::allocatePage()>
c0013daa:	83 ec 0c             	sub    esp,0xc
c0013dad:	89 c5                	mov    ebp,eax
c0013daf:	8b 0d 50 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f250
c0013db5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013db9:	6a 01                	push   0x1
c0013dbb:	e8 67 f8 ff ff       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c0013dc0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013dc7:	6a 01                	push   0x1
c0013dc9:	50                   	push   eax
c0013dca:	55                   	push   ebp
c0013dcb:	81 cd 07 04 00 00    	or     ebp,0x407
c0013dd1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013dd5:	51                   	push   ecx
c0013dd6:	e8 19 01 00 00       	call   c0013ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013ddb:	83 c4 1c             	add    esp,0x1c
c0013dde:	68 00 10 00 00       	push   0x1000
c0013de3:	6a 00                	push   0x0
c0013de5:	50                   	push   eax
c0013de6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013dea:	e8 01 c7 fe ff       	call   c00004f0 <memset>
c0013def:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013df3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013df6:	e8 34 fb ff ff       	call   c001392f <Virt::freeKernelVirtualPages(unsigned long)>
c0013dfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013dff:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013e02:	83 c4 10             	add    esp,0x10
c0013e05:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013e08:	e9 3e ff ff ff       	jmp    c0013d4b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013e0d:	90                   	nop

c0013e0e <VAS::allocatePages(int, int)>:
c0013e0e:	55                   	push   ebp
c0013e0f:	57                   	push   edi
c0013e10:	56                   	push   esi
c0013e11:	53                   	push   ebx
c0013e12:	83 ec 1c             	sub    esp,0x1c
c0013e15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013e19:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013e1d:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013e21:	75 71                	jne    c0013e94 <VAS::allocatePages(int, int)+0x86>
c0013e23:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e2a:	85 c0                	test   eax,eax
c0013e2c:	74 4d                	je     c0013e7b <VAS::allocatePages(int, int)+0x6d>
c0013e2e:	89 dd                	mov    ebp,ebx
c0013e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013e34:	c1 e5 0c             	shl    ebp,0xc
c0013e37:	01 c5                	add    ebp,eax
c0013e39:	85 db                	test   ebx,ebx
c0013e3b:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013e3e:	7e 29                	jle    c0013e69 <VAS::allocatePages(int, int)+0x5b>
c0013e40:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013e44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e48:	81 cf 00 04 00 00    	or     edi,0x400
c0013e4e:	e8 87 c3 ff ff       	call   c00101da <Phys::allocatePage()>
c0013e53:	57                   	push   edi
c0013e54:	53                   	push   ebx
c0013e55:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013e5b:	50                   	push   eax
c0013e5c:	56                   	push   esi
c0013e5d:	e8 a8 fe ff ff       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	39 dd                	cmp    ebp,ebx
c0013e67:	75 e5                	jne    c0013e4e <VAS::allocatePages(int, int)+0x40>
c0013e69:	0f 20 d8             	mov    eax,cr3
c0013e6c:	0f 22 d8             	mov    cr3,eax
c0013e6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013e73:	83 c4 1c             	add    esp,0x1c
c0013e76:	5b                   	pop    ebx
c0013e77:	5e                   	pop    esi
c0013e78:	5f                   	pop    edi
c0013e79:	5d                   	pop    ebp
c0013e7a:	c3                   	ret    
c0013e7b:	83 ec 0c             	sub    esp,0xc
c0013e7e:	68 94 49 02 c0       	push   0xc0024994
c0013e83:	e8 5e c1 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0013e88:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e8f:	83 c4 10             	add    esp,0x10
c0013e92:	eb 9a                	jmp    c0013e2e <VAS::allocatePages(int, int)+0x20>
c0013e94:	83 ec 0c             	sub    esp,0xc
c0013e97:	53                   	push   ebx
c0013e98:	e8 8a f7 ff ff       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c0013e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ea1:	83 c4 10             	add    esp,0x10
c0013ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013ea9:	77 37                	ja     c0013ee2 <VAS::allocatePages(int, int)+0xd4>
c0013eab:	85 db                	test   ebx,ebx
c0013ead:	7e ba                	jle    c0013e69 <VAS::allocatePages(int, int)+0x5b>
c0013eaf:	c1 e3 0c             	shl    ebx,0xc
c0013eb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013eb6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013eba:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013ebd:	81 cf 00 04 00 00    	or     edi,0x400
c0013ec3:	89 c3                	mov    ebx,eax
c0013ec5:	e8 10 c3 ff ff       	call   c00101da <Phys::allocatePage()>
c0013eca:	57                   	push   edi
c0013ecb:	53                   	push   ebx
c0013ecc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013ed2:	50                   	push   eax
c0013ed3:	56                   	push   esi
c0013ed4:	e8 31 fe ff ff       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ed9:	83 c4 10             	add    esp,0x10
c0013edc:	39 dd                	cmp    ebp,ebx
c0013ede:	75 e5                	jne    c0013ec5 <VAS::allocatePages(int, int)+0xb7>
c0013ee0:	eb 87                	jmp    c0013e69 <VAS::allocatePages(int, int)+0x5b>
c0013ee2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013ee6:	a1 28 fb 02 c0       	mov    eax,ds:0xc002fb28
c0013eeb:	09 c2                	or     edx,eax
c0013eed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013ef1:	eb b8                	jmp    c0013eab <VAS::allocatePages(int, int)+0x9d>
c0013ef3:	90                   	nop

c0013ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013ef4:	55                   	push   ebp
c0013ef5:	57                   	push   edi
c0013ef6:	56                   	push   esi
c0013ef7:	53                   	push   ebx
c0013ef8:	83 ec 0c             	sub    esp,0xc
c0013efb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013eff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013f03:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013f07:	85 db                	test   ebx,ebx
c0013f09:	7e 2f                	jle    c0013f3a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013f0b:	c1 e3 0c             	shl    ebx,0xc
c0013f0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f12:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013f16:	01 d3                	add    ebx,edx
c0013f18:	55                   	push   ebp
c0013f19:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013f1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f21:	29 c2                	sub    edx,eax
c0013f23:	01 f2                	add    edx,esi
c0013f25:	52                   	push   edx
c0013f26:	56                   	push   esi
c0013f27:	81 c6 00 10 00 00    	add    esi,0x1000
c0013f2d:	57                   	push   edi
c0013f2e:	e8 d7 fd ff ff       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013f33:	83 c4 10             	add    esp,0x10
c0013f36:	39 de                	cmp    esi,ebx
c0013f38:	75 de                	jne    c0013f18 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013f3a:	0f 20 d8             	mov    eax,cr3
c0013f3d:	0f 22 d8             	mov    cr3,eax
c0013f40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f44:	83 c4 0c             	add    esp,0xc
c0013f47:	5b                   	pop    ebx
c0013f48:	5e                   	pop    esi
c0013f49:	5f                   	pop    edi
c0013f4a:	5d                   	pop    ebp
c0013f4b:	c3                   	ret    

c0013f4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013f4c:	55                   	push   ebp
c0013f4d:	57                   	push   edi
c0013f4e:	56                   	push   esi
c0013f4f:	53                   	push   ebx
c0013f50:	83 ec 1c             	sub    esp,0x1c
c0013f53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013f57:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013f5b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013f5f:	09 f8                	or     eax,edi
c0013f61:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013f65:	a9 ff 0f 00 00       	test   eax,0xfff
c0013f6a:	75 4f                	jne    c0013fbb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013f6c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013f70:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013f73:	c1 eb 16             	shr    ebx,0x16
c0013f76:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013f7d:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013f81:	74 52                	je     c0013fd5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013f83:	0f b6 f2             	movzx  esi,dl
c0013f86:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013f8a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013f8e:	c1 e8 0a             	shr    eax,0xa
c0013f91:	83 fe 01             	cmp    esi,0x1
c0013f94:	19 d2                	sbb    edx,edx
c0013f96:	c1 e3 0c             	shl    ebx,0xc
c0013f99:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013f9f:	25 fc 0f 00 00       	and    eax,0xffc
c0013fa4:	01 d8                	add    eax,ebx
c0013fa6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013faa:	09 d9                	or     ecx,ebx
c0013fac:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013fb3:	83 c4 1c             	add    esp,0x1c
c0013fb6:	5b                   	pop    ebx
c0013fb7:	5e                   	pop    esi
c0013fb8:	5f                   	pop    edi
c0013fb9:	5d                   	pop    ebp
c0013fba:	c3                   	ret    
c0013fbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013fbf:	83 ec 0c             	sub    esp,0xc
c0013fc2:	68 c0 49 02 c0       	push   0xc00249c0
c0013fc7:	e8 1a c0 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0013fcc:	83 c4 10             	add    esp,0x10
c0013fcf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013fd3:	eb 97                	jmp    c0013f6c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013fd5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013fd9:	e8 fc c1 ff ff       	call   c00101da <Phys::allocatePage()>
c0013fde:	83 ec 0c             	sub    esp,0xc
c0013fe1:	89 c5                	mov    ebp,eax
c0013fe3:	8b 0d 50 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f250
c0013fe9:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013fed:	6a 01                	push   0x1
c0013fef:	e8 33 f6 ff ff       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c0013ff4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013ffb:	6a 01                	push   0x1
c0013ffd:	50                   	push   eax
c0013ffe:	55                   	push   ebp
c0013fff:	81 cd 07 04 00 00    	or     ebp,0x407
c0014005:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014009:	51                   	push   ecx
c001400a:	e8 e5 fe ff ff       	call   c0013ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001400f:	83 c4 1c             	add    esp,0x1c
c0014012:	68 00 10 00 00       	push   0x1000
c0014017:	6a 00                	push   0x0
c0014019:	50                   	push   eax
c001401a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001401e:	e8 cd c4 fe ff       	call   c00004f0 <memset>
c0014023:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014027:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001402a:	e8 00 f9 ff ff       	call   c001392f <Virt::freeKernelVirtualPages(unsigned long)>
c001402f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0014032:	83 c4 10             	add    esp,0x10
c0014035:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0014038:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001403c:	e9 42 ff ff ff       	jmp    c0013f83 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0014041:	90                   	nop

c0014042 <VAS::VAS(bool)>:
c0014042:	53                   	push   ebx
c0014043:	83 ec 28             	sub    esp,0x28
c0014046:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001404a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001404e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014052:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014059:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001405d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014064:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014068:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001406c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001406f:	e8 66 c1 ff ff       	call   c00101da <Phys::allocatePage()>
c0014074:	89 c2                	mov    edx,eax
c0014076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001407a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001407d:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c0014083:	83 ec 0c             	sub    esp,0xc
c0014086:	6a 01                	push   0x1
c0014088:	e8 9a f5 ff ff       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c001408d:	83 c4 10             	add    esp,0x10
c0014090:	89 c2                	mov    edx,eax
c0014092:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014096:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014099:	83 ec 0c             	sub    esp,0xc
c001409c:	6a 03                	push   0x3
c001409e:	6a 01                	push   0x1
c00140a0:	52                   	push   edx
c00140a1:	50                   	push   eax
c00140a2:	53                   	push   ebx
c00140a3:	e8 4c fe ff ff       	call   c0013ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00140a8:	83 c4 20             	add    esp,0x20
c00140ab:	89 c2                	mov    edx,eax
c00140ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140b1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00140b4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00140bc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00140c4:	7f 1d                	jg     c00140e3 <VAS::VAS(bool)+0xa1>
c00140c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00140cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00140d1:	c1 e2 02             	shl    edx,0x2
c00140d4:	01 d0                	add    eax,edx
c00140d6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00140dc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00140e1:	eb d9                	jmp    c00140bc <VAS::VAS(bool)+0x7a>
c00140e3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00140eb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00140f3:	7f 59                	jg     c001414e <VAS::VAS(bool)+0x10c>
c00140f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140f9:	2d 00 02 00 00       	sub    eax,0x200
c00140fe:	c1 e0 0c             	shl    eax,0xc
c0014101:	89 c2                	mov    edx,eax
c0014103:	a1 28 fb 02 c0       	mov    eax,ds:0xc002fb28
c0014108:	89 d1                	mov    ecx,edx
c001410a:	09 c1                	or     ecx,eax
c001410c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014110:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014113:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014117:	c1 e2 02             	shl    edx,0x2
c001411a:	01 d0                	add    eax,edx
c001411c:	83 c9 05             	or     ecx,0x5
c001411f:	89 ca                	mov    edx,ecx
c0014121:	89 10                	mov    DWORD PTR [eax],edx
c0014123:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014127:	2d 40 03 00 00       	sub    eax,0x340
c001412c:	83 f8 7f             	cmp    eax,0x7f
c001412f:	77 16                	ja     c0014147 <VAS::VAS(bool)+0x105>
c0014131:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014135:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014138:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001413c:	c1 e2 02             	shl    edx,0x2
c001413f:	01 d0                	add    eax,edx
c0014141:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014147:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001414c:	eb 9d                	jmp    c00140eb <VAS::VAS(bool)+0xa9>
c001414e:	8b 15 28 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb28
c0014154:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014158:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001415b:	05 20 0c 00 00       	add    eax,0xc20
c0014160:	81 ca 03 40 00 00    	or     edx,0x4003
c0014166:	89 10                	mov    DWORD PTR [eax],edx
c0014168:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001416c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001416f:	a1 28 fb 02 c0       	mov    eax,ds:0xc002fb28
c0014174:	09 c2                	or     edx,eax
c0014176:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001417a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001417d:	05 fc 0f 00 00       	add    eax,0xffc
c0014182:	83 ca 03             	or     edx,0x3
c0014185:	89 10                	mov    DWORD PTR [eax],edx
c0014187:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c001418c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014192:	83 ec 0c             	sub    esp,0xc
c0014195:	50                   	push   eax
c0014196:	e8 17 5b ff ff       	call   c0009cb2 <Device::getName()>
c001419b:	83 c4 10             	add    esp,0x10
c001419e:	83 ec 08             	sub    esp,0x8
c00141a1:	68 33 4c 02 c0       	push   0xc0024c33
c00141a6:	50                   	push   eax
c00141a7:	e8 a4 c5 fe ff       	call   c0000750 <strcmp>
c00141ac:	83 c4 10             	add    esp,0x10
c00141af:	85 c0                	test   eax,eax
c00141b1:	0f 94 c0             	sete   al
c00141b4:	0f b6 c0             	movzx  eax,al
c00141b7:	85 c0                	test   eax,eax
c00141b9:	74 68                	je     c0014223 <VAS::VAS(bool)+0x1e1>
c00141bb:	fa                   	cli    
c00141bc:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c00141c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00141c7:	05 68 09 00 00       	add    eax,0x968
c00141cc:	83 ec 0c             	sub    esp,0xc
c00141cf:	50                   	push   eax
c00141d0:	e8 ad ac ff ff       	call   c000ee82 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00141d5:	83 c4 10             	add    esp,0x10
c00141d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00141dd:	89 c3                	mov    ebx,eax
c00141df:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c00141e4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00141ea:	05 68 09 00 00       	add    eax,0x968
c00141ef:	83 ec 0c             	sub    esp,0xc
c00141f2:	50                   	push   eax
c00141f3:	e8 8a ac ff ff       	call   c000ee82 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00141f8:	83 c4 10             	add    esp,0x10
c00141fb:	83 ec 08             	sub    esp,0x8
c00141fe:	50                   	push   eax
c00141ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014203:	e8 08 f7 ff ff       	call   c0013910 <VAS::getPageTableEntry(unsigned long)>
c0014208:	83 c4 10             	add    esp,0x10
c001420b:	8b 00                	mov    eax,DWORD PTR [eax]
c001420d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014212:	6a 11                	push   0x11
c0014214:	53                   	push   ebx
c0014215:	50                   	push   eax
c0014216:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001421a:	e8 eb fa ff ff       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c001421f:	83 c4 10             	add    esp,0x10
c0014222:	fb                   	sti    
c0014223:	90                   	nop
c0014224:	83 c4 28             	add    esp,0x28
c0014227:	5b                   	pop    ebx
c0014228:	c3                   	ret    
c0014229:	90                   	nop

c001422a <VAS::evict(unsigned long)>:
c001422a:	55                   	push   ebp
c001422b:	57                   	push   edi
c001422c:	56                   	push   esi
c001422d:	53                   	push   ebx
c001422e:	83 ec 24             	sub    esp,0x24
c0014231:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014235:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014239:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001423d:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0014242:	50                   	push   eax
c0014243:	68 41 4c 02 c0       	push   0xc0024c41
c0014248:	e8 2f 2d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001424d:	e8 33 f5 ff ff       	call   c0013785 <Virt::allocateSwapfilePage()>
c0014252:	83 c4 10             	add    esp,0x10
c0014255:	89 c7                	mov    edi,eax
c0014257:	a1 0c 6c 02 c0       	mov    eax,ds:0xc0026c0c
c001425c:	85 c0                	test   eax,eax
c001425e:	7e 40                	jle    c00142a0 <VAS::evict(unsigned long)+0x76>
c0014260:	89 ee                	mov    esi,ebp
c0014262:	31 db                	xor    ebx,ebx
c0014264:	83 ec 0c             	sub    esp,0xc
c0014267:	57                   	push   edi
c0014268:	e8 02 f5 ff ff       	call   c001376f <Virt::swapIDToSector(unsigned long)>
c001426d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014270:	01 d8                	add    eax,ebx
c0014272:	6a 01                	push   0x1
c0014274:	31 d2                	xor    edx,edx
c0014276:	83 c3 01             	add    ebx,0x1
c0014279:	52                   	push   edx
c001427a:	81 c6 00 02 00 00    	add    esi,0x200
c0014280:	50                   	push   eax
c0014281:	0f be 05 18 6c 02 c0 	movsx  eax,BYTE PTR ds:0xc0026c18
c0014288:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001428f:	50                   	push   eax
c0014290:	e8 7f 68 ff ff       	call   c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>
c0014295:	83 c4 20             	add    esp,0x20
c0014298:	39 1d 0c 6c 02 c0    	cmp    DWORD PTR ds:0xc0026c0c,ebx
c001429e:	7f c4                	jg     c0014264 <VAS::evict(unsigned long)+0x3a>
c00142a0:	83 ec 08             	sub    esp,0x8
c00142a3:	c1 e7 0c             	shl    edi,0xc
c00142a6:	55                   	push   ebp
c00142a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142ab:	50                   	push   eax
c00142ac:	e8 5f f6 ff ff       	call   c0013910 <VAS::getPageTableEntry(unsigned long)>
c00142b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00142b3:	89 d3                	mov    ebx,edx
c00142b5:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00142bb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00142c1:	09 d7                	or     edi,edx
c00142c3:	89 38                	mov    DWORD PTR [eax],edi
c00142c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142c8:	8b 15 48 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f248
c00142ce:	83 c2 01             	add    edx,0x1
c00142d1:	89 15 48 f2 02 c0    	mov    DWORD PTR ds:0xc002f248,edx
c00142d7:	e8 95 be ff ff       	call   c0010171 <Phys::freePage(unsigned long)>
c00142dc:	0f 20 d8             	mov    eax,cr3
c00142df:	0f 22 d8             	mov    cr3,eax
c00142e2:	8b 0d 48 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f248
c00142e8:	51                   	push   ecx
c00142e9:	55                   	push   ebp
c00142ea:	53                   	push   ebx
c00142eb:	68 e4 49 02 c0       	push   0xc00249e4
c00142f0:	e8 87 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00142f5:	83 c4 18             	add    esp,0x18
c00142f8:	a1 44 f2 02 c0       	mov    eax,ds:0xc002f244
c00142fd:	50                   	push   eax
c00142fe:	8d 50 01             	lea    edx,[eax+0x1]
c0014301:	68 56 4c 02 c0       	push   0xc0024c56
c0014306:	89 15 44 f2 02 c0    	mov    DWORD PTR ds:0xc002f244,edx
c001430c:	e8 6b 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014311:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0014316:	c7 44 24 40 68 4c 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024c68
c001431e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014322:	83 c4 2c             	add    esp,0x2c
c0014325:	5b                   	pop    ebx
c0014326:	5e                   	pop    esi
c0014327:	5f                   	pop    edi
c0014328:	5d                   	pop    ebp
c0014329:	e9 4e 2c ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c001432e <VAS::canLockPage(unsigned long)>:
c001432e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014332:	50                   	push   eax
c0014333:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014337:	52                   	push   edx
c0014338:	e8 d3 f5 ff ff       	call   c0013910 <VAS::getPageTableEntry(unsigned long)>
c001433d:	59                   	pop    ecx
c001433e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014340:	5a                   	pop    edx
c0014341:	c1 e8 0b             	shr    eax,0xb
c0014344:	83 e0 01             	and    eax,0x1
c0014347:	c3                   	ret    

c0014348 <VAS::unlockPage(unsigned long)>:
c0014348:	83 ec 0c             	sub    esp,0xc
c001434b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001434f:	50                   	push   eax
c0014350:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014354:	52                   	push   edx
c0014355:	e8 b6 f5 ff ff       	call   c0013910 <VAS::getPageTableEntry(unsigned long)>
c001435a:	59                   	pop    ecx
c001435b:	5a                   	pop    edx
c001435c:	8b 10                	mov    edx,DWORD PTR [eax]
c001435e:	f6 c6 08             	test   dh,0x8
c0014361:	75 09                	jne    c001436c <VAS::unlockPage(unsigned long)+0x24>
c0014363:	80 ce 08             	or     dh,0x8
c0014366:	89 10                	mov    DWORD PTR [eax],edx
c0014368:	83 c4 0c             	add    esp,0xc
c001436b:	c3                   	ret    
c001436c:	c7 44 24 10 18 4a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024a18
c0014374:	83 c4 0c             	add    esp,0xc
c0014377:	e9 6a bc ff ff       	jmp    c000ffe6 <KePanic(char const*)>

c001437c <VAS::canLockPages(unsigned long, int)>:
c001437c:	55                   	push   ebp
c001437d:	57                   	push   edi
c001437e:	56                   	push   esi
c001437f:	53                   	push   ebx
c0014380:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014384:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014388:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001438c:	85 ff                	test   edi,edi
c001438e:	7e 23                	jle    c00143b3 <VAS::canLockPages(unsigned long, int)+0x37>
c0014390:	31 f6                	xor    esi,esi
c0014392:	eb 0d                	jmp    c00143a1 <VAS::canLockPages(unsigned long, int)+0x25>
c0014394:	81 c3 00 10 00 00    	add    ebx,0x1000
c001439a:	83 c6 01             	add    esi,0x1
c001439d:	39 f7                	cmp    edi,esi
c001439f:	74 0d                	je     c00143ae <VAS::canLockPages(unsigned long, int)+0x32>
c00143a1:	53                   	push   ebx
c00143a2:	55                   	push   ebp
c00143a3:	e8 86 ff ff ff       	call   c001432e <VAS::canLockPage(unsigned long)>
c00143a8:	5a                   	pop    edx
c00143a9:	84 c0                	test   al,al
c00143ab:	59                   	pop    ecx
c00143ac:	75 e6                	jne    c0014394 <VAS::canLockPages(unsigned long, int)+0x18>
c00143ae:	5b                   	pop    ebx
c00143af:	5e                   	pop    esi
c00143b0:	5f                   	pop    edi
c00143b1:	5d                   	pop    ebp
c00143b2:	c3                   	ret    
c00143b3:	b0 01                	mov    al,0x1
c00143b5:	eb f7                	jmp    c00143ae <VAS::canLockPages(unsigned long, int)+0x32>
c00143b7:	90                   	nop

c00143b8 <VAS::unlockPages(unsigned long, int)>:
c00143b8:	55                   	push   ebp
c00143b9:	57                   	push   edi
c00143ba:	56                   	push   esi
c00143bb:	53                   	push   ebx
c00143bc:	83 ec 0c             	sub    esp,0xc
c00143bf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00143c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00143c7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00143cb:	85 ff                	test   edi,edi
c00143cd:	7e 1c                	jle    c00143eb <VAS::unlockPages(unsigned long, int)+0x33>
c00143cf:	31 f6                	xor    esi,esi
c00143d1:	83 ec 08             	sub    esp,0x8
c00143d4:	83 c6 01             	add    esi,0x1
c00143d7:	53                   	push   ebx
c00143d8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00143de:	55                   	push   ebp
c00143df:	e8 64 ff ff ff       	call   c0014348 <VAS::unlockPage(unsigned long)>
c00143e4:	83 c4 10             	add    esp,0x10
c00143e7:	39 f7                	cmp    edi,esi
c00143e9:	75 e6                	jne    c00143d1 <VAS::unlockPages(unsigned long, int)+0x19>
c00143eb:	83 c4 0c             	add    esp,0xc
c00143ee:	5b                   	pop    ebx
c00143ef:	5e                   	pop    esi
c00143f0:	5f                   	pop    edi
c00143f1:	5d                   	pop    ebp
c00143f2:	c3                   	ret    
c00143f3:	90                   	nop

c00143f4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00143f4:	55                   	push   ebp
c00143f5:	57                   	push   edi
c00143f6:	56                   	push   esi
c00143f7:	53                   	push   ebx
c00143f8:	81 ec 1c 10 00 00    	sub    esp,0x101c
c00143fe:	8b 84 24 34 10 00 00 	mov    eax,DWORD PTR [esp+0x1034]
c0014405:	89 c3                	mov    ebx,eax
c0014407:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001440d:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0014412:	77 11                	ja     c0014425 <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0014414:	85 db                	test   ebx,ebx
c0014416:	75 1d                	jne    c0014435 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0014418:	31 c0                	xor    eax,eax
c001441a:	81 c4 1c 10 00 00    	add    esp,0x101c
c0014420:	5b                   	pop    ebx
c0014421:	5e                   	pop    esi
c0014422:	5f                   	pop    edi
c0014423:	5d                   	pop    ebp
c0014424:	c3                   	ret    
c0014425:	83 ec 0c             	sub    esp,0xc
c0014428:	68 7d 4c 02 c0       	push   0xc0024c7d
c001442d:	e8 b4 bb ff ff       	call   c000ffe6 <KePanic(char const*)>
c0014432:	83 c4 10             	add    esp,0x10
c0014435:	83 ec 08             	sub    esp,0x8
c0014438:	53                   	push   ebx
c0014439:	8b b4 24 3c 10 00 00 	mov    esi,DWORD PTR [esp+0x103c]
c0014440:	56                   	push   esi
c0014441:	e8 ca f4 ff ff       	call   c0013910 <VAS::getPageTableEntry(unsigned long)>
c0014446:	83 c4 10             	add    esp,0x10
c0014449:	89 c2                	mov    edx,eax
c001444b:	85 c0                	test   eax,eax
c001444d:	74 c9                	je     c0014418 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c001444f:	8b 28                	mov    ebp,DWORD PTR [eax]
c0014451:	f7 c5 00 02 00 00    	test   ebp,0x200
c0014457:	0f 85 ae 00 00 00    	jne    c001450b <VAS::tryLoadBackOffDisk(unsigned long)+0x117>
c001445d:	89 e8                	mov    eax,ebp
c001445f:	25 01 04 00 00       	and    eax,0x401
c0014464:	3d 00 04 00 00       	cmp    eax,0x400
c0014469:	75 ad                	jne    c0014418 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c001446b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001446f:	c1 ed 0c             	shr    ebp,0xc
c0014472:	e8 63 bd ff ff       	call   c00101da <Phys::allocatePage()>
c0014477:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001447b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001447d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0014483:	09 c1                	or     ecx,eax
c0014485:	81 c9 01 08 00 00    	or     ecx,0x801
c001448b:	89 0a                	mov    DWORD PTR [edx],ecx
c001448d:	8b 15 0c 6c 02 c0    	mov    edx,DWORD PTR ds:0xc0026c0c
c0014493:	85 d2                	test   edx,edx
c0014495:	7e 40                	jle    c00144d7 <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c0014497:	89 df                	mov    edi,ebx
c0014499:	31 f6                	xor    esi,esi
c001449b:	83 ec 0c             	sub    esp,0xc
c001449e:	55                   	push   ebp
c001449f:	e8 cb f2 ff ff       	call   c001376f <Virt::swapIDToSector(unsigned long)>
c00144a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144a7:	01 f0                	add    eax,esi
c00144a9:	6a 01                	push   0x1
c00144ab:	31 d2                	xor    edx,edx
c00144ad:	83 c6 01             	add    esi,0x1
c00144b0:	52                   	push   edx
c00144b1:	81 c7 00 02 00 00    	add    edi,0x200
c00144b7:	50                   	push   eax
c00144b8:	0f be 05 18 6c 02 c0 	movsx  eax,BYTE PTR ds:0xc0026c18
c00144bf:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c00144c6:	50                   	push   eax
c00144c7:	e8 dc 65 ff ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c00144cc:	83 c4 20             	add    esp,0x20
c00144cf:	39 35 0c 6c 02 c0    	cmp    DWORD PTR ds:0xc0026c0c,esi
c00144d5:	7f c4                	jg     c001449b <VAS::tryLoadBackOffDisk(unsigned long)+0xa7>
c00144d7:	83 ec 04             	sub    esp,0x4
c00144da:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00144df:	83 e8 01             	sub    eax,0x1
c00144e2:	50                   	push   eax
c00144e3:	a3 48 f2 02 c0       	mov    ds:0xc002f248,eax
c00144e8:	53                   	push   ebx
c00144e9:	68 8f 4c 02 c0       	push   0xc0024c8f
c00144ee:	e8 89 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144f6:	e8 51 f2 ff ff       	call   c001374c <Virt::freeSwapfilePage(unsigned long)>
c00144fb:	0f 20 d8             	mov    eax,cr3
c00144fe:	0f 22 d8             	mov    cr3,eax
c0014501:	b0 01                	mov    al,0x1
c0014503:	83 c4 10             	add    esp,0x10
c0014506:	e9 0f ff ff ff       	jmp    c001441a <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c001450b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001450f:	83 ec 0c             	sub    esp,0xc
c0014512:	68 48 4a 02 c0       	push   0xc0024a48
c0014517:	e8 60 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001451c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014520:	8b 32                	mov    esi,DWORD PTR [edx]
c0014522:	e8 b3 bc ff ff       	call   c00101da <Phys::allocatePage()>
c0014527:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001452d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014531:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014533:	83 c9 01             	or     ecx,0x1
c0014536:	89 0a                	mov    DWORD PTR [edx],ecx
c0014538:	0f 20 d9             	mov    ecx,cr3
c001453b:	0f 22 d9             	mov    cr3,ecx
c001453e:	bd 00 10 00 00       	mov    ebp,0x1000
c0014543:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0014547:	89 e9                	mov    ecx,ebp
c0014549:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001454b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001454d:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0014553:	09 c8                	or     eax,ecx
c0014555:	83 c8 02             	or     eax,0x2
c0014558:	89 02                	mov    DWORD PTR [edx],eax
c001455a:	0f 20 d8             	mov    eax,cr3
c001455d:	0f 22 d8             	mov    cr3,eax
c0014560:	8d 74 24 20          	lea    esi,[esp+0x20]
c0014564:	89 df                	mov    edi,ebx
c0014566:	89 e9                	mov    ecx,ebp
c0014568:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001456a:	b0 01                	mov    al,0x1
c001456c:	83 c4 10             	add    esp,0x10
c001456f:	e9 a6 fe ff ff       	jmp    c001441a <VAS::tryLoadBackOffDisk(unsigned long)+0x26>

c0014574 <VAS::lockPage(unsigned long)>:
c0014574:	56                   	push   esi
c0014575:	53                   	push   ebx
c0014576:	83 ec 04             	sub    esp,0x4
c0014579:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001457d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014581:	50                   	push   eax
c0014582:	56                   	push   esi
c0014583:	e8 88 f3 ff ff       	call   c0013910 <VAS::getPageTableEntry(unsigned long)>
c0014588:	5a                   	pop    edx
c0014589:	89 c3                	mov    ebx,eax
c001458b:	59                   	pop    ecx
c001458c:	8b 00                	mov    eax,DWORD PTR [eax]
c001458e:	a8 01                	test   al,0x1
c0014590:	74 10                	je     c00145a2 <VAS::lockPage(unsigned long)+0x2e>
c0014592:	f6 c4 08             	test   ah,0x8
c0014595:	74 28                	je     c00145bf <VAS::lockPage(unsigned long)+0x4b>
c0014597:	80 e4 f7             	and    ah,0xf7
c001459a:	89 03                	mov    DWORD PTR [ebx],eax
c001459c:	83 c4 04             	add    esp,0x4
c001459f:	5b                   	pop    ebx
c00145a0:	5e                   	pop    esi
c00145a1:	c3                   	ret    
c00145a2:	83 ec 08             	sub    esp,0x8
c00145a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00145aa:	50                   	push   eax
c00145ab:	56                   	push   esi
c00145ac:	e8 43 fe ff ff       	call   c00143f4 <VAS::tryLoadBackOffDisk(unsigned long)>
c00145b1:	83 c4 10             	add    esp,0x10
c00145b4:	84 c0                	test   al,al
c00145b6:	74 19                	je     c00145d1 <VAS::lockPage(unsigned long)+0x5d>
c00145b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145ba:	f6 c4 08             	test   ah,0x8
c00145bd:	75 d8                	jne    c0014597 <VAS::lockPage(unsigned long)+0x23>
c00145bf:	c7 44 24 10 18 4a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024a18
c00145c7:	83 c4 04             	add    esp,0x4
c00145ca:	5b                   	pop    ebx
c00145cb:	5e                   	pop    esi
c00145cc:	e9 15 ba ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c00145d1:	83 ec 0c             	sub    esp,0xc
c00145d4:	68 68 4a 02 c0       	push   0xc0024a68
c00145d9:	e8 08 ba ff ff       	call   c000ffe6 <KePanic(char const*)>
c00145de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145e0:	83 c4 10             	add    esp,0x10
c00145e3:	eb ad                	jmp    c0014592 <VAS::lockPage(unsigned long)+0x1e>
c00145e5:	90                   	nop

c00145e6 <VAS::lockPages(unsigned long, int)>:
c00145e6:	55                   	push   ebp
c00145e7:	57                   	push   edi
c00145e8:	56                   	push   esi
c00145e9:	53                   	push   ebx
c00145ea:	83 ec 0c             	sub    esp,0xc
c00145ed:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00145f1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00145f5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00145f9:	85 ff                	test   edi,edi
c00145fb:	7e 1c                	jle    c0014619 <VAS::lockPages(unsigned long, int)+0x33>
c00145fd:	31 f6                	xor    esi,esi
c00145ff:	83 ec 08             	sub    esp,0x8
c0014602:	83 c6 01             	add    esi,0x1
c0014605:	53                   	push   ebx
c0014606:	81 c3 00 10 00 00    	add    ebx,0x1000
c001460c:	55                   	push   ebp
c001460d:	e8 62 ff ff ff       	call   c0014574 <VAS::lockPage(unsigned long)>
c0014612:	83 c4 10             	add    esp,0x10
c0014615:	39 f7                	cmp    edi,esi
c0014617:	75 e6                	jne    c00145ff <VAS::lockPages(unsigned long, int)+0x19>
c0014619:	83 c4 0c             	add    esp,0xc
c001461c:	5b                   	pop    ebx
c001461d:	5e                   	pop    esi
c001461e:	5f                   	pop    edi
c001461f:	5d                   	pop    ebp
c0014620:	c3                   	ret    
c0014621:	90                   	nop

c0014622 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014622:	55                   	push   ebp
c0014623:	57                   	push   edi
c0014624:	56                   	push   esi
c0014625:	53                   	push   ebx
c0014626:	83 ec 28             	sub    esp,0x28
c0014629:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001462d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014631:	50                   	push   eax
c0014632:	e8 f0 ef ff ff       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c0014637:	83 c4 0c             	add    esp,0xc
c001463a:	89 c5                	mov    ebp,eax
c001463c:	6a 07                	push   0x7
c001463e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014642:	52                   	push   edx
c0014643:	56                   	push   esi
c0014644:	e8 c5 f7 ff ff       	call   c0013e0e <VAS::allocatePages(int, int)>
c0014649:	83 c4 10             	add    esp,0x10
c001464c:	89 c7                	mov    edi,eax
c001464e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014652:	85 c9                	test   ecx,ecx
c0014654:	74 2f                	je     c0014685 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014656:	31 db                	xor    ebx,ebx
c0014658:	e8 7d bb ff ff       	call   c00101da <Phys::allocatePage()>
c001465d:	83 c3 01             	add    ebx,0x1
c0014660:	6a 03                	push   0x3
c0014662:	55                   	push   ebp
c0014663:	50                   	push   eax
c0014664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014668:	56                   	push   esi
c0014669:	e8 9c f6 ff ff       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c001466e:	6a 07                	push   0x7
c0014670:	57                   	push   edi
c0014671:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014675:	50                   	push   eax
c0014676:	56                   	push   esi
c0014677:	e8 8e f6 ff ff       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c001467c:	83 c4 20             	add    esp,0x20
c001467f:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0014683:	75 d3                	jne    c0014658 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014685:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014689:	89 28                	mov    DWORD PTR [eax],ebp
c001468b:	83 c4 1c             	add    esp,0x1c
c001468e:	89 f8                	mov    eax,edi
c0014690:	5b                   	pop    ebx
c0014691:	5e                   	pop    esi
c0014692:	5f                   	pop    edi
c0014693:	5d                   	pop    ebp
c0014694:	c3                   	ret    
c0014695:	90                   	nop

c0014696 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014696:	53                   	push   ebx
c0014697:	83 ec 14             	sub    esp,0x14
c001469a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001469e:	68 98 4a 02 c0       	push   0xc0024a98
c00146a3:	e8 d4 28 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00146a8:	c7 04 24 f8 4a 02 c0 	mov    DWORD PTR [esp],0xc0024af8
c00146af:	e8 c8 28 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00146b4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00146b8:	83 c4 18             	add    esp,0x18
c00146bb:	5b                   	pop    ebx
c00146bc:	e9 6e f2 ff ff       	jmp    c001392f <Virt::freeKernelVirtualPages(unsigned long)>
c00146c1:	90                   	nop

c00146c2 <VAS::scanForEviction()>:
c00146c2:	57                   	push   edi
c00146c3:	56                   	push   esi
c00146c4:	31 f6                	xor    esi,esi
c00146c6:	53                   	push   ebx
c00146c7:	83 ec 18             	sub    esp,0x18
c00146ca:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00146ce:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00146d3:	50                   	push   eax
c00146d4:	68 74 4b 02 c0       	push   0xc0024b74
c00146d9:	e8 9e 28 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00146de:	c7 04 24 a4 4c 02 c0 	mov    DWORD PTR [esp],0xc0024ca4
c00146e5:	e8 92 28 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00146ea:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00146ed:	83 c4 10             	add    esp,0x10
c00146f0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00146f6:	75 0e                	jne    c0014706 <VAS::scanForEviction()+0x44>
c00146f8:	89 da                	mov    edx,ebx
c00146fa:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00146fd:	c1 ea 16             	shr    edx,0x16
c0014700:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014704:	74 5b                	je     c0014761 <VAS::scanForEviction()+0x9f>
c0014706:	83 ec 08             	sub    esp,0x8
c0014709:	53                   	push   ebx
c001470a:	57                   	push   edi
c001470b:	e8 00 f2 ff ff       	call   c0013910 <VAS::getPageTableEntry(unsigned long)>
c0014710:	83 c4 10             	add    esp,0x10
c0014713:	8b 10                	mov    edx,DWORD PTR [eax]
c0014715:	89 d1                	mov    ecx,edx
c0014717:	c1 e9 0c             	shr    ecx,0xc
c001471a:	74 10                	je     c001472c <VAS::scanForEviction()+0x6a>
c001471c:	89 d1                	mov    ecx,edx
c001471e:	81 e1 01 08 00 00    	and    ecx,0x801
c0014724:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001472a:	74 40                	je     c001476c <VAS::scanForEviction()+0xaa>
c001472c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014732:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014738:	76 2d                	jbe    c0014767 <VAS::scanForEviction()+0xa5>
c001473a:	83 c6 01             	add    esi,0x1
c001473d:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014744:	83 fe 03             	cmp    esi,0x3
c0014747:	74 32                	je     c001477b <VAS::scanForEviction()+0xb9>
c0014749:	31 db                	xor    ebx,ebx
c001474b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014751:	75 b3                	jne    c0014706 <VAS::scanForEviction()+0x44>
c0014753:	89 da                	mov    edx,ebx
c0014755:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014758:	c1 ea 16             	shr    edx,0x16
c001475b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001475f:	75 a5                	jne    c0014706 <VAS::scanForEviction()+0x44>
c0014761:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014767:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001476a:	eb 84                	jmp    c00146f0 <VAS::scanForEviction()+0x2e>
c001476c:	f6 c2 20             	test   dl,0x20
c001476f:	74 13                	je     c0014784 <VAS::scanForEviction()+0xc2>
c0014771:	83 e2 df             	and    edx,0xffffffdf
c0014774:	89 10                	mov    DWORD PTR [eax],edx
c0014776:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014779:	eb b1                	jmp    c001472c <VAS::scanForEviction()+0x6a>
c001477b:	83 c4 10             	add    esp,0x10
c001477e:	31 c0                	xor    eax,eax
c0014780:	5b                   	pop    ebx
c0014781:	5e                   	pop    esi
c0014782:	5f                   	pop    edi
c0014783:	c3                   	ret    
c0014784:	83 ec 08             	sub    esp,0x8
c0014787:	89 d0                	mov    eax,edx
c0014789:	25 00 f0 ff ff       	and    eax,0xfffff000
c001478e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014792:	53                   	push   ebx
c0014793:	68 c0 4c 02 c0       	push   0xc0024cc0
c0014798:	e8 df 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001479d:	58                   	pop    eax
c001479e:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00147a1:	5a                   	pop    edx
c00147a2:	51                   	push   ecx
c00147a3:	57                   	push   edi
c00147a4:	e8 81 fa ff ff       	call   c001422a <VAS::evict(unsigned long)>
c00147a9:	5b                   	pop    ebx
c00147aa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00147ad:	5e                   	pop    esi
c00147ae:	50                   	push   eax
c00147af:	68 d4 4c 02 c0       	push   0xc0024cd4
c00147b4:	e8 c3 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147b9:	58                   	pop    eax
c00147ba:	5a                   	pop    edx
c00147bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147bf:	50                   	push   eax
c00147c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147c4:	68 e7 4c 02 c0       	push   0xc0024ce7
c00147c9:	e8 ae 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147ce:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00147d1:	81 c1 00 10 00 00    	add    ecx,0x1000
c00147d7:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00147da:	8b 3d 30 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa30
c00147e0:	5b                   	pop    ebx
c00147e1:	5e                   	pop    esi
c00147e2:	57                   	push   edi
c00147e3:	68 94 4b 02 c0       	push   0xc0024b94
c00147e8:	e8 8f 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147ed:	83 c4 10             	add    esp,0x10
c00147f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147f4:	83 c4 10             	add    esp,0x10
c00147f7:	5b                   	pop    ebx
c00147f8:	5e                   	pop    esi
c00147f9:	5f                   	pop    edi
c00147fa:	c3                   	ret    

c00147fb <mapVASFirstTime>:
c00147fb:	55                   	push   ebp
c00147fc:	57                   	push   edi
c00147fd:	56                   	push   esi
c00147fe:	53                   	push   ebx
c00147ff:	83 ec 0c             	sub    esp,0xc
c0014802:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014807:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001480a:	83 fa 01             	cmp    edx,0x1
c001480d:	0f 84 cb 00 00 00    	je     c00148de <mapVASFirstTime+0xe3>
c0014813:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014816:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014819:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001481e:	c1 e5 15             	shl    ebp,0x15
c0014821:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014826:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c001482c:	29 eb                	sub    ebx,ebp
c001482e:	29 ef                	sub    edi,ebp
c0014830:	e8 a5 b9 ff ff       	call   c00101da <Phys::allocatePage()>
c0014835:	83 ec 0c             	sub    esp,0xc
c0014838:	68 03 04 00 00       	push   0x403
c001483d:	6a 01                	push   0x1
c001483f:	53                   	push   ebx
c0014840:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014846:	50                   	push   eax
c0014847:	56                   	push   esi
c0014848:	e8 a7 f6 ff ff       	call   c0013ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001484d:	83 c4 20             	add    esp,0x20
c0014850:	39 fb                	cmp    ebx,edi
c0014852:	75 dc                	jne    c0014830 <mapVASFirstTime+0x35>
c0014854:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014859:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001485e:	29 eb                	sub    ebx,ebp
c0014860:	29 ef                	sub    edi,ebp
c0014862:	e8 73 b9 ff ff       	call   c00101da <Phys::allocatePage()>
c0014867:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001486b:	83 fa 01             	cmp    edx,0x1
c001486e:	19 d2                	sbb    edx,edx
c0014870:	83 ec 0c             	sub    esp,0xc
c0014873:	83 e2 04             	and    edx,0x4
c0014876:	81 c2 03 04 00 00    	add    edx,0x403
c001487c:	52                   	push   edx
c001487d:	6a 01                	push   0x1
c001487f:	53                   	push   ebx
c0014880:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014886:	50                   	push   eax
c0014887:	56                   	push   esi
c0014888:	e8 67 f6 ff ff       	call   c0013ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001488d:	83 c4 20             	add    esp,0x20
c0014890:	39 df                	cmp    edi,ebx
c0014892:	75 ce                	jne    c0014862 <mapVASFirstTime+0x67>
c0014894:	83 ec 0c             	sub    esp,0xc
c0014897:	bb 7c 90 02 c0       	mov    ebx,0xc002907c
c001489c:	6a 04                	push   0x4
c001489e:	81 eb 00 80 02 c0    	sub    ebx,0xc0028000
c00148a4:	6a ff                	push   0xffffffff
c00148a6:	c1 eb 0c             	shr    ebx,0xc
c00148a9:	53                   	push   ebx
c00148aa:	68 00 80 02 c0       	push   0xc0028000
c00148af:	56                   	push   esi
c00148b0:	e8 f5 f1 ff ff       	call   c0013aaa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00148b5:	83 c4 14             	add    esp,0x14
c00148b8:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c00148bd:	6a 04                	push   0x4
c00148bf:	6a ff                	push   0xffffffff
c00148c1:	53                   	push   ebx
c00148c2:	68 00 80 02 c0       	push   0xc0028000
c00148c7:	50                   	push   eax
c00148c8:	e8 dd f1 ff ff       	call   c0013aaa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00148cd:	0f 20 d8             	mov    eax,cr3
c00148d0:	0f 22 d8             	mov    cr3,eax
c00148d3:	83 c4 20             	add    esp,0x20
c00148d6:	83 c4 0c             	add    esp,0xc
c00148d9:	5b                   	pop    ebx
c00148da:	5e                   	pop    esi
c00148db:	5f                   	pop    edi
c00148dc:	5d                   	pop    ebp
c00148dd:	c3                   	ret    
c00148de:	83 ec 0c             	sub    esp,0xc
c00148e1:	68 f4 4c 02 c0       	push   0xc0024cf4
c00148e6:	e8 91 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00148eb:	83 c4 10             	add    esp,0x10
c00148ee:	83 c4 0c             	add    esp,0xc
c00148f1:	5b                   	pop    ebx
c00148f2:	5e                   	pop    esi
c00148f3:	5f                   	pop    edi
c00148f4:	5d                   	pop    ebp
c00148f5:	c3                   	ret    

c00148f6 <SysAlarm(regs*)>:
c00148f6:	53                   	push   ebx
c00148f7:	83 ec 10             	sub    esp,0x10
c00148fa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00148fe:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014901:	68 0d 4d 02 c0       	push   0xc0024d0d
c0014906:	e8 71 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001490b:	83 c4 0c             	add    esp,0xc
c001490e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014911:	31 d2                	xor    edx,edx
c0014913:	52                   	push   edx
c0014914:	50                   	push   eax
c0014915:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001491b:	e8 b4 09 00 00       	call   c00152d4 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014920:	83 c4 18             	add    esp,0x18
c0014923:	5b                   	pop    ebx
c0014924:	c3                   	ret    

c0014925 <SysEject(regs*)>:
c0014925:	83 ec 0c             	sub    esp,0xc
c0014928:	83 ca ff             	or     edx,0xffffffff
c001492b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001492f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014932:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014937:	83 e9 41             	sub    ecx,0x41
c001493a:	83 f9 19             	cmp    ecx,0x19
c001493d:	77 18                	ja     c0014957 <SysEject(regs*)+0x32>
c001493f:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0014946:	85 c9                	test   ecx,ecx
c0014948:	74 0d                	je     c0014957 <SysEject(regs*)+0x32>
c001494a:	83 ec 0c             	sub    esp,0xc
c001494d:	51                   	push   ecx
c001494e:	e8 eb 60 ff ff       	call   c000aa3e <LogicalDisk::eject()>
c0014953:	83 c4 10             	add    esp,0x10
c0014956:	99                   	cdq    
c0014957:	83 c4 0c             	add    esp,0xc
c001495a:	c3                   	ret    

c001495b <SysExit(regs*)>:
c001495b:	83 ec 18             	sub    esp,0x18
c001495e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014962:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014965:	e8 a6 2f 00 00       	call   c0017910 <KeTerminateCurrentThread(int)>
c001496a:	83 c8 ff             	or     eax,0xffffffff
c001496d:	83 c4 1c             	add    esp,0x1c
c0014970:	89 c2                	mov    edx,eax
c0014972:	c3                   	ret    

c0014973 <SysGetCwd(regs*)>:
c0014973:	83 ec 10             	sub    esp,0x10
c0014976:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001497a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001497d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014980:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014985:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014988:	e8 91 34 ff ff       	call   c0007e1e <Fs::getcwd(Process*, char*, int)>
c001498d:	83 c4 1c             	add    esp,0x1c
c0014990:	99                   	cdq    
c0014991:	c3                   	ret    

c0014992 <SysGetPID(regs*)>:
c0014992:	83 ec 14             	sub    esp,0x14
c0014995:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001499a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001499d:	ff 30                	push   DWORD PTR [eax]
c001499f:	68 22 4d 02 c0       	push   0xc0024d22
c00149a4:	e8 d3 25 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00149a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00149b3:	83 c4 1c             	add    esp,0x1c
c00149b6:	99                   	cdq    
c00149b7:	c3                   	ret    

c00149b8 <SysGetRAMData(regs*)>:
c00149b8:	8b 0d 3c f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f13c
c00149be:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00149c3:	03 05 38 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f138
c00149c9:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00149cf:	99                   	cdq    
c00149d0:	f7 f9                	idiv   ecx
c00149d2:	c1 e0 18             	shl    eax,0x18
c00149d5:	09 c8                	or     eax,ecx
c00149d7:	99                   	cdq    
c00149d8:	c3                   	ret    

c00149d9 <SysGetVGAPtr(regs*)>:
c00149d9:	55                   	push   ebp
c00149da:	57                   	push   edi
c00149db:	56                   	push   esi
c00149dc:	53                   	push   ebx
c00149dd:	83 ec 1c             	sub    esp,0x1c
c00149e0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00149e4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00149e7:	83 f8 ff             	cmp    eax,0xffffffff
c00149ea:	74 23                	je     c0014a0f <SysGetVGAPtr(regs*)+0x36>
c00149ec:	83 ec 0c             	sub    esp,0xc
c00149ef:	50                   	push   eax
c00149f0:	e8 c7 29 00 00       	call   c00173bc <KeProcessFromPID(int)>
c00149f5:	31 d2                	xor    edx,edx
c00149f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00149fb:	83 c4 10             	add    esp,0x10
c00149fe:	b8 01 00 00 00       	mov    eax,0x1
c0014a03:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014a08:	75 11                	jne    c0014a1b <SysGetVGAPtr(regs*)+0x42>
c0014a0a:	e9 80 00 00 00       	jmp    c0014a8f <SysGetVGAPtr(regs*)+0xb6>
c0014a0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a1f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014a23:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014a29:	74 0c                	je     c0014a37 <SysGetVGAPtr(regs*)+0x5e>
c0014a2b:	83 ec 0c             	sub    esp,0xc
c0014a2e:	55                   	push   ebp
c0014a2f:	e8 7b dc ff ff       	call   c00126af <setActiveTerminal(VgaText*)>
c0014a34:	83 c4 10             	add    esp,0x10
c0014a37:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014a3a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014a3d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014a42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a44:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014a47:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a4a:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014a50:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014a53:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a56:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014a5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a60:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014a63:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014a6a:	c1 e8 07             	shr    eax,0x7
c0014a6d:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014a73:	50                   	push   eax
c0014a74:	50                   	push   eax
c0014a75:	68 31 4d 02 c0       	push   0xc0024d31
c0014a7a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a7d:	05 ac 0f 00 00       	add    eax,0xfac
c0014a82:	50                   	push   eax
c0014a83:	e8 b8 bb fe ff       	call   c0000640 <strcpy>
c0014a88:	83 c4 10             	add    esp,0x10
c0014a8b:	31 c0                	xor    eax,eax
c0014a8d:	31 d2                	xor    edx,edx
c0014a8f:	83 c4 1c             	add    esp,0x1c
c0014a92:	5b                   	pop    ebx
c0014a93:	5e                   	pop    esi
c0014a94:	5f                   	pop    edi
c0014a95:	5d                   	pop    ebp
c0014a96:	c3                   	ret    
c0014a97:	90                   	nop

c0014a98 <SysKill(regs*)>:
c0014a98:	53                   	push   ebx
c0014a99:	83 ec 08             	sub    esp,0x8
c0014a9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014aa0:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014aa4:	75 16                	jne    c0014abc <SysKill(regs*)+0x24>
c0014aa6:	83 ec 0c             	sub    esp,0xc
c0014aa9:	68 3b 4d 02 c0       	push   0xc0024d3b
c0014aae:	e8 33 b5 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0014ab3:	83 c4 10             	add    esp,0x10
c0014ab6:	e9 89 00 00 00       	jmp    c0014b44 <SysKill(regs*)+0xac>
c0014abb:	90                   	nop
c0014abc:	83 ec 0c             	sub    esp,0xc
c0014abf:	68 4c fa 02 c0       	push   0xc002fa4c
c0014ac4:	e8 ff d4 00 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0014acc:	83 c4 10             	add    esp,0x10
c0014acf:	85 c0                	test   eax,eax
c0014ad1:	74 19                	je     c0014aec <SysKill(regs*)+0x54>
c0014ad3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014ad6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014ad9:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014adb:	74 33                	je     c0014b10 <SysKill(regs*)+0x78>
c0014add:	52                   	push   edx
c0014ade:	52                   	push   edx
c0014adf:	50                   	push   eax
c0014ae0:	68 4c fa 02 c0       	push   0xc002fa4c
c0014ae5:	e8 ea d9 00 00       	call   c00224d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014aea:	eb e0                	jmp    c0014acc <SysKill(regs*)+0x34>
c0014aec:	83 ec 0c             	sub    esp,0xc
c0014aef:	68 40 fa 02 c0       	push   0xc002fa40
c0014af4:	e8 cf d4 00 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014af9:	8d 76 00             	lea    esi,[esi+0x0]
c0014afc:	83 c4 10             	add    esp,0x10
c0014aff:	85 c0                	test   eax,eax
c0014b01:	74 41                	je     c0014b44 <SysKill(regs*)+0xac>
c0014b03:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014b06:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014b09:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014b0b:	75 27                	jne    c0014b34 <SysKill(regs*)+0x9c>
c0014b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0014b10:	51                   	push   ecx
c0014b11:	51                   	push   ecx
c0014b12:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014b15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b1a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b1d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014b23:	e8 83 c7 ff ff       	call   c00112ab <KeRaiseSignal(SigHandlerBlock*, int)>
c0014b28:	83 c4 10             	add    esp,0x10
c0014b2b:	31 c0                	xor    eax,eax
c0014b2d:	31 d2                	xor    edx,edx
c0014b2f:	eb 1b                	jmp    c0014b4c <SysKill(regs*)+0xb4>
c0014b31:	8d 76 00             	lea    esi,[esi+0x0]
c0014b34:	52                   	push   edx
c0014b35:	52                   	push   edx
c0014b36:	50                   	push   eax
c0014b37:	68 40 fa 02 c0       	push   0xc002fa40
c0014b3c:	e8 93 d9 00 00       	call   c00224d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014b41:	eb b9                	jmp    c0014afc <SysKill(regs*)+0x64>
c0014b43:	90                   	nop
c0014b44:	83 c8 ff             	or     eax,0xffffffff
c0014b47:	89 c2                	mov    edx,eax
c0014b49:	8d 76 00             	lea    esi,[esi+0x0]
c0014b4c:	83 c4 08             	add    esp,0x8
c0014b4f:	5b                   	pop    ebx
c0014b50:	c3                   	ret    

c0014b51 <SysLoadDLL(regs*)>:
c0014b51:	56                   	push   esi
c0014b52:	53                   	push   ebx
c0014b53:	31 d2                	xor    edx,edx
c0014b55:	51                   	push   ecx
c0014b56:	b8 01 00 00 00       	mov    eax,0x1
c0014b5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b5f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014b63:	0f 84 8c 00 00 00    	je     c0014bf5 <SysLoadDLL(regs*)+0xa4>
c0014b69:	83 ec 0c             	sub    esp,0xc
c0014b6c:	68 14 01 00 00       	push   0x114
c0014b71:	e8 19 b0 ff ff       	call   c000fb8f <malloc>
c0014b76:	83 c4 0c             	add    esp,0xc
c0014b79:	89 c3                	mov    ebx,eax
c0014b7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b80:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014b83:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014b86:	53                   	push   ebx
c0014b87:	e8 fe 35 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0014b8c:	83 c4 10             	add    esp,0x10
c0014b8f:	31 d2                	xor    edx,edx
c0014b91:	b8 02 00 00 00       	mov    eax,0x2
c0014b96:	85 db                	test   ebx,ebx
c0014b98:	74 5b                	je     c0014bf5 <SysLoadDLL(regs*)+0xa4>
c0014b9a:	83 ec 0c             	sub    esp,0xc
c0014b9d:	53                   	push   ebx
c0014b9e:	e8 c9 38 ff ff       	call   c000846c <File::exists()>
c0014ba3:	83 c4 10             	add    esp,0x10
c0014ba6:	84 c0                	test   al,al
c0014ba8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014baa:	75 11                	jne    c0014bbd <SysLoadDLL(regs*)+0x6c>
c0014bac:	83 ec 0c             	sub    esp,0xc
c0014baf:	53                   	push   ebx
c0014bb0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014bb3:	83 c4 10             	add    esp,0x10
c0014bb6:	b8 03 00 00 00       	mov    eax,0x3
c0014bbb:	eb 36                	jmp    c0014bf3 <SysLoadDLL(regs*)+0xa2>
c0014bbd:	83 ec 0c             	sub    esp,0xc
c0014bc0:	53                   	push   ebx
c0014bc1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014bc4:	58                   	pop    eax
c0014bc5:	5a                   	pop    edx
c0014bc6:	6a 00                	push   0x0
c0014bc8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014bcb:	e8 9a 19 00 00       	call   c001656a <Thr::loadDLL(char const*, bool)>
c0014bd0:	83 c4 10             	add    esp,0x10
c0014bd3:	89 c1                	mov    ecx,eax
c0014bd5:	31 d2                	xor    edx,edx
c0014bd7:	b8 04 00 00 00       	mov    eax,0x4
c0014bdc:	85 c9                	test   ecx,ecx
c0014bde:	74 15                	je     c0014bf5 <SysLoadDLL(regs*)+0xa4>
c0014be0:	53                   	push   ebx
c0014be1:	53                   	push   ebx
c0014be2:	ff 35 c8 d0 02 c0    	push   DWORD PTR ds:0xc002d0c8
c0014be8:	51                   	push   ecx
c0014be9:	e8 ce 1b 00 00       	call   c00167bc <Thr::executeDLL(unsigned long, void*)>
c0014bee:	83 c4 10             	add    esp,0x10
c0014bf1:	31 c0                	xor    eax,eax
c0014bf3:	31 d2                	xor    edx,edx
c0014bf5:	59                   	pop    ecx
c0014bf6:	5b                   	pop    ebx
c0014bf7:	5e                   	pop    esi
c0014bf8:	c3                   	ret    

c0014bf9 <SysPause(regs*)>:
c0014bf9:	83 ec 18             	sub    esp,0x18
c0014bfc:	6a 08                	push   0x8
c0014bfe:	e8 cd 25 00 00       	call   c00171d0 <blockTask(TaskState)>
c0014c03:	31 c0                	xor    eax,eax
c0014c05:	31 d2                	xor    edx,edx
c0014c07:	83 c4 1c             	add    esp,0x1c
c0014c0a:	c3                   	ret    

c0014c0b <SysPthreadCreate(regs*)>:
c0014c0b:	83 ec 18             	sub    esp,0x18
c0014c0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c13:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014c16:	e8 8d 23 00 00       	call   c0016fa8 <Process::createUserThread()>
c0014c1b:	31 c0                	xor    eax,eax
c0014c1d:	31 d2                	xor    edx,edx
c0014c1f:	83 c4 1c             	add    esp,0x1c
c0014c22:	c3                   	ret    

c0014c23 <SysPthreadGetTID(regs*)>:
c0014c23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c2b:	99                   	cdq    
c0014c2c:	c3                   	ret    

c0014c2d <SysInternalPthreadGetContext(regs*)>:
c0014c2d:	31 c0                	xor    eax,eax
c0014c2f:	31 d2                	xor    edx,edx
c0014c31:	c3                   	ret    

c0014c32 <SysInternalPthreadGetStartLocation(regs*)>:
c0014c32:	31 c0                	xor    eax,eax
c0014c34:	31 d2                	xor    edx,edx
c0014c36:	c3                   	ret    

c0014c37 <SysPthreadJoin(regs*)>:
c0014c37:	31 c0                	xor    eax,eax
c0014c39:	31 d2                	xor    edx,edx
c0014c3b:	c3                   	ret    

c0014c3c <SysPthreadExit(regs*)>:
c0014c3c:	83 ec 18             	sub    esp,0x18
c0014c3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c43:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c46:	e8 c5 2c 00 00       	call   c0017910 <KeTerminateCurrentThread(int)>
c0014c4b:	83 c8 ff             	or     eax,0xffffffff
c0014c4e:	83 c4 1c             	add    esp,0x1c
c0014c51:	89 c2                	mov    edx,eax
c0014c53:	c3                   	ret    

c0014c54 <SysRead(regs*)>:
c0014c54:	57                   	push   edi
c0014c55:	56                   	push   esi
c0014c56:	53                   	push   ebx
c0014c57:	83 ec 10             	sub    esp,0x10
c0014c5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014c5e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014c61:	83 f8 02             	cmp    eax,0x2
c0014c64:	77 10                	ja     c0014c76 <SysRead(regs*)+0x22>
c0014c66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c6b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c6e:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014c74:	eb 0e                	jmp    c0014c84 <SysRead(regs*)+0x30>
c0014c76:	83 ec 0c             	sub    esp,0xc
c0014c79:	50                   	push   eax
c0014c7a:	e8 4a e8 ff ff       	call   c00134c9 <KeGetFileFromDescriptor(int)>
c0014c7f:	83 c4 10             	add    esp,0x10
c0014c82:	89 c1                	mov    ecx,eax
c0014c84:	83 c8 ff             	or     eax,0xffffffff
c0014c87:	85 c9                	test   ecx,ecx
c0014c89:	89 c2                	mov    edx,eax
c0014c8b:	74 28                	je     c0014cb5 <SysRead(regs*)+0x61>
c0014c8d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c95:	31 ff                	xor    edi,edi
c0014c97:	83 ec 0c             	sub    esp,0xc
c0014c9a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014c9c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014ca0:	52                   	push   edx
c0014ca1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ca4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014ca7:	57                   	push   edi
c0014ca8:	56                   	push   esi
c0014ca9:	51                   	push   ecx
c0014caa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014cb1:	83 c4 20             	add    esp,0x20
c0014cb4:	99                   	cdq    
c0014cb5:	83 c4 10             	add    esp,0x10
c0014cb8:	5b                   	pop    ebx
c0014cb9:	5e                   	pop    esi
c0014cba:	5f                   	pop    edi
c0014cbb:	c3                   	ret    

c0014cbc <SysRegisterSignal(regs*)>:
c0014cbc:	83 ec 18             	sub    esp,0x18
c0014cbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cc3:	6a 00                	push   0x0
c0014cc5:	6a 00                	push   0x0
c0014cc7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014cca:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ccd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cd2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014cd5:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014cdb:	e8 95 c5 ff ff       	call   c0011275 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014ce0:	83 c4 2c             	add    esp,0x2c
c0014ce3:	99                   	cdq    
c0014ce4:	c3                   	ret    

c0014ce5 <SysRegistryGetTypeFromPath(regs*)>:
c0014ce5:	53                   	push   ebx
c0014ce6:	81 ec 40 01 00 00    	sub    esp,0x140
c0014cec:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014cf3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014cf6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014cf9:	e8 3e 93 ff ff       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014cfe:	83 c4 10             	add    esp,0x10
c0014d01:	89 c1                	mov    ecx,eax
c0014d03:	85 c0                	test   eax,eax
c0014d05:	74 15                	je     c0014d1c <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014d07:	50                   	push   eax
c0014d08:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014d0c:	50                   	push   eax
c0014d0d:	51                   	push   ecx
c0014d0e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d11:	e8 0a 8f ff ff       	call   c000dc20 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014d16:	83 c4 10             	add    esp,0x10
c0014d19:	99                   	cdq    
c0014d1a:	eb 05                	jmp    c0014d21 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014d1c:	83 c8 ff             	or     eax,0xffffffff
c0014d1f:	89 c2                	mov    edx,eax
c0014d21:	81 c4 38 01 00 00    	add    esp,0x138
c0014d27:	5b                   	pop    ebx
c0014d28:	c3                   	ret    

c0014d29 <SysRegistryReadExtent(regs*)>:
c0014d29:	83 ec 1c             	sub    esp,0x1c
c0014d2c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d30:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014d33:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014d36:	85 c0                	test   eax,eax
c0014d38:	79 1f                	jns    c0014d59 <SysRegistryReadExtent(regs*)+0x30>
c0014d3a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014d3f:	52                   	push   edx
c0014d40:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014d44:	52                   	push   edx
c0014d45:	50                   	push   eax
c0014d46:	51                   	push   ecx
c0014d47:	e8 c6 8d ff ff       	call   c000db12 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014d4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014d54:	83 c4 10             	add    esp,0x10
c0014d57:	eb 14                	jmp    c0014d6d <SysRegistryReadExtent(regs*)+0x44>
c0014d59:	83 ec 04             	sub    esp,0x4
c0014d5c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014d5f:	50                   	push   eax
c0014d60:	51                   	push   ecx
c0014d61:	e8 46 88 ff ff       	call   c000d5ac <CmGetString(Reghive_Tag*, int, char*)>
c0014d66:	83 c4 10             	add    esp,0x10
c0014d69:	31 c0                	xor    eax,eax
c0014d6b:	31 d2                	xor    edx,edx
c0014d6d:	83 c4 1c             	add    esp,0x1c
c0014d70:	c3                   	ret    

c0014d71 <SysRegistryPathToExtentLookup(regs*)>:
c0014d71:	83 ec 14             	sub    esp,0x14
c0014d74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d78:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014d7b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d7e:	e8 b9 92 ff ff       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014d83:	83 c4 1c             	add    esp,0x1c
c0014d86:	99                   	cdq    
c0014d87:	c3                   	ret    

c0014d88 <SysRegistryEnterDirectory(regs*)>:
c0014d88:	83 ec 14             	sub    esp,0x14
c0014d8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d8f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014d92:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d95:	e8 89 88 ff ff       	call   c000d623 <CmEnterDirectory(Reghive_Tag*, int)>
c0014d9a:	83 c4 1c             	add    esp,0x1c
c0014d9d:	99                   	cdq    
c0014d9e:	c3                   	ret    

c0014d9f <SysRegistryGetNext(regs*)>:
c0014d9f:	83 ec 14             	sub    esp,0x14
c0014da2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014da6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014da9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014dac:	e8 b1 88 ff ff       	call   c000d662 <CmGetNext(Reghive_Tag*, int)>
c0014db1:	83 c4 1c             	add    esp,0x1c
c0014db4:	99                   	cdq    
c0014db5:	c3                   	ret    

c0014db6 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014db6:	57                   	push   edi
c0014db7:	56                   	push   esi
c0014db8:	53                   	push   ebx
c0014db9:	81 ec 34 01 00 00    	sub    esp,0x134
c0014dbf:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014dc6:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014dca:	57                   	push   edi
c0014dcb:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014dce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014dd1:	e8 4a 8e ff ff       	call   c000dc20 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014dd6:	89 c3                	mov    ebx,eax
c0014dd8:	58                   	pop    eax
c0014dd9:	5a                   	pop    edx
c0014dda:	57                   	push   edi
c0014ddb:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014dde:	e8 5d b8 fe ff       	call   c0000640 <strcpy>
c0014de3:	89 d8                	mov    eax,ebx
c0014de5:	81 c4 40 01 00 00    	add    esp,0x140
c0014deb:	99                   	cdq    
c0014dec:	5b                   	pop    ebx
c0014ded:	5e                   	pop    esi
c0014dee:	5f                   	pop    edi
c0014def:	c3                   	ret    

c0014df0 <SysRegistryOpen(regs*)>:
c0014df0:	83 ec 18             	sub    esp,0x18
c0014df3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014df7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014dfa:	e8 3d 86 ff ff       	call   c000d43c <CmOpen(char const*)>
c0014dff:	83 c4 1c             	add    esp,0x1c
c0014e02:	99                   	cdq    
c0014e03:	c3                   	ret    

c0014e04 <SysRegistryClose(regs*)>:
c0014e04:	83 ec 18             	sub    esp,0x18
c0014e07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e0b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e0e:	e8 47 87 ff ff       	call   c000d55a <CmClose(Reghive_Tag*)>
c0014e13:	31 c0                	xor    eax,eax
c0014e15:	31 d2                	xor    edx,edx
c0014e17:	83 c4 1c             	add    esp,0x1c
c0014e1a:	c3                   	ret    

c0014e1b <SysRegistryEasyReadString(regs*)>:
c0014e1b:	57                   	push   edi
c0014e1c:	56                   	push   esi
c0014e1d:	53                   	push   ebx
c0014e1e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014e22:	83 ec 0c             	sub    esp,0xc
c0014e25:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014e28:	e8 0f 86 ff ff       	call   c000d43c <CmOpen(char const*)>
c0014e2d:	5a                   	pop    edx
c0014e2e:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014e31:	59                   	pop    ecx
c0014e32:	89 c3                	mov    ebx,eax
c0014e34:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014e37:	50                   	push   eax
c0014e38:	e8 ff 91 ff ff       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014e3d:	83 c4 10             	add    esp,0x10
c0014e40:	89 c1                	mov    ecx,eax
c0014e42:	b8 01 00 00 00       	mov    eax,0x1
c0014e47:	85 c9                	test   ecx,ecx
c0014e49:	7e 16                	jle    c0014e61 <SysRegistryEasyReadString(regs*)+0x46>
c0014e4b:	50                   	push   eax
c0014e4c:	57                   	push   edi
c0014e4d:	51                   	push   ecx
c0014e4e:	53                   	push   ebx
c0014e4f:	e8 58 87 ff ff       	call   c000d5ac <CmGetString(Reghive_Tag*, int, char*)>
c0014e54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e57:	e8 fe 86 ff ff       	call   c000d55a <CmClose(Reghive_Tag*)>
c0014e5c:	83 c4 10             	add    esp,0x10
c0014e5f:	31 c0                	xor    eax,eax
c0014e61:	5b                   	pop    ebx
c0014e62:	31 d2                	xor    edx,edx
c0014e64:	5e                   	pop    esi
c0014e65:	5f                   	pop    edi
c0014e66:	c3                   	ret    

c0014e67 <SysRegistryEasyReadInteger(regs*)>:
c0014e67:	56                   	push   esi
c0014e68:	53                   	push   ebx
c0014e69:	83 ec 10             	sub    esp,0x10
c0014e6c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014e70:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014e73:	e8 c4 85 ff ff       	call   c000d43c <CmOpen(char const*)>
c0014e78:	5a                   	pop    edx
c0014e79:	89 c3                	mov    ebx,eax
c0014e7b:	59                   	pop    ecx
c0014e7c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014e7f:	50                   	push   eax
c0014e80:	e8 b7 91 ff ff       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014e85:	83 c4 10             	add    esp,0x10
c0014e88:	89 c1                	mov    ecx,eax
c0014e8a:	b8 01 00 00 00       	mov    eax,0x1
c0014e8f:	85 c9                	test   ecx,ecx
c0014e91:	7e 18                	jle    c0014eab <SysRegistryEasyReadInteger(regs*)+0x44>
c0014e93:	50                   	push   eax
c0014e94:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014e97:	51                   	push   ecx
c0014e98:	53                   	push   ebx
c0014e99:	e8 74 8c ff ff       	call   c000db12 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014e9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ea1:	e8 b4 86 ff ff       	call   c000d55a <CmClose(Reghive_Tag*)>
c0014ea6:	83 c4 10             	add    esp,0x10
c0014ea9:	31 c0                	xor    eax,eax
c0014eab:	59                   	pop    ecx
c0014eac:	31 d2                	xor    edx,edx
c0014eae:	5b                   	pop    ebx
c0014eaf:	5e                   	pop    esi
c0014eb0:	c3                   	ret    

c0014eb1 <SysSbrk(regs*)>:
c0014eb1:	56                   	push   esi
c0014eb2:	53                   	push   ebx
c0014eb3:	50                   	push   eax
c0014eb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014eb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014ebd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ec0:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014ec3:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014ec9:	85 db                	test   ebx,ebx
c0014ecb:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014ece:	74 02                	je     c0014ed2 <SysSbrk(regs*)+0x21>
c0014ed0:	79 06                	jns    c0014ed8 <SysSbrk(regs*)+0x27>
c0014ed2:	89 f0                	mov    eax,esi
c0014ed4:	31 d2                	xor    edx,edx
c0014ed6:	eb 2a                	jmp    c0014f02 <SysSbrk(regs*)+0x51>
c0014ed8:	83 c8 ff             	or     eax,0xffffffff
c0014edb:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014ee1:	89 c2                	mov    edx,eax
c0014ee3:	77 1d                	ja     c0014f02 <SysSbrk(regs*)+0x51>
c0014ee5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014eeb:	50                   	push   eax
c0014eec:	c1 ea 0c             	shr    edx,0xc
c0014eef:	68 07 0c 00 00       	push   0xc07
c0014ef4:	52                   	push   edx
c0014ef5:	51                   	push   ecx
c0014ef6:	e8 13 ef ff ff       	call   c0013e0e <VAS::allocatePages(int, int)>
c0014efb:	89 f0                	mov    eax,esi
c0014efd:	31 d2                	xor    edx,edx
c0014eff:	83 c4 10             	add    esp,0x10
c0014f02:	59                   	pop    ecx
c0014f03:	5b                   	pop    ebx
c0014f04:	5e                   	pop    esi
c0014f05:	c3                   	ret    

c0014f06 <SysSetCwd(regs*)>:
c0014f06:	83 ec 14             	sub    esp,0x14
c0014f09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f0d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014f10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f15:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014f18:	e8 ee 35 ff ff       	call   c000850b <Fs::setcwd(Process*, char*)>
c0014f1d:	83 c4 1c             	add    esp,0x1c
c0014f20:	99                   	cdq    
c0014f21:	c3                   	ret    

c0014f22 <SysSetTime(regs*)>:
c0014f22:	55                   	push   ebp
c0014f23:	31 d2                	xor    edx,edx
c0014f25:	57                   	push   edi
c0014f26:	56                   	push   esi
c0014f27:	be 18 00 00 00       	mov    esi,0x18
c0014f2c:	53                   	push   ebx
c0014f2d:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014f32:	83 ec 20             	sub    esp,0x20
c0014f35:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014f39:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014f3c:	f7 f3                	div    ebx
c0014f3e:	89 d7                	mov    edi,edx
c0014f40:	31 d2                	xor    edx,edx
c0014f42:	f7 f3                	div    ebx
c0014f44:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014f47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014f4b:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014f50:	31 d2                	xor    edx,edx
c0014f52:	f7 f3                	div    ebx
c0014f54:	31 d2                	xor    edx,edx
c0014f56:	f7 f6                	div    esi
c0014f58:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014f5b:	89 d5                	mov    ebp,edx
c0014f5d:	89 c3                	mov    ebx,eax
c0014f5f:	be 0c 00 00 00       	mov    esi,0xc
c0014f64:	83 e3 1f             	and    ebx,0x1f
c0014f67:	c1 e8 05             	shr    eax,0x5
c0014f6a:	43                   	inc    ebx
c0014f6b:	31 d2                	xor    edx,edx
c0014f6d:	f7 f6                	div    esi
c0014f6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014f73:	57                   	push   edi
c0014f74:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f78:	55                   	push   ebp
c0014f79:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0014f7d:	56                   	push   esi
c0014f7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f82:	53                   	push   ebx
c0014f83:	68 5c 4d 02 c0       	push   0xc0024d5c
c0014f88:	e8 ef 1f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014f8d:	83 c4 1c             	add    esp,0x1c
c0014f90:	57                   	push   edi
c0014f91:	c1 e7 10             	shl    edi,0x10
c0014f94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f98:	55                   	push   ebp
c0014f99:	56                   	push   esi
c0014f9a:	c1 e6 10             	shl    esi,0x10
c0014f9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014fa1:	53                   	push   ebx
c0014fa2:	68 7e 4d 02 c0       	push   0xc0024d7e
c0014fa7:	e8 d0 1f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014fac:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0014fb1:	31 d2                	xor    edx,edx
c0014fb3:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
c0014fb9:	31 c0                	xor    eax,eax
c0014fbb:	88 d8                	mov    al,bl
c0014fbd:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c0014fc1:	0f b7 d8             	movzx  ebx,ax
c0014fc4:	09 f3                	or     ebx,esi
c0014fc6:	89 d8                	mov    eax,ebx
c0014fc8:	89 eb                	mov    ebx,ebp
c0014fca:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0014fce:	88 da                	mov    dl,bl
c0014fd0:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c0014fd4:	83 c4 1c             	add    esp,0x1c
c0014fd7:	89 d6                	mov    esi,edx
c0014fd9:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0014fdf:	09 fe                	or     esi,edi
c0014fe1:	56                   	push   esi
c0014fe2:	50                   	push   eax
c0014fe3:	51                   	push   ecx
c0014fe4:	e8 93 45 ff ff       	call   c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014fe9:	83 c4 2c             	add    esp,0x2c
c0014fec:	83 f0 01             	xor    eax,0x1
c0014fef:	5b                   	pop    ebx
c0014ff0:	0f b6 c0             	movzx  eax,al
c0014ff3:	5e                   	pop    esi
c0014ff4:	31 d2                	xor    edx,edx
c0014ff6:	5f                   	pop    edi
c0014ff7:	5d                   	pop    ebp
c0014ff8:	c3                   	ret    

c0014ff9 <SysSymlink(regs*)>:
c0014ff9:	56                   	push   esi
c0014ffa:	83 c8 ff             	or     eax,0xffffffff
c0014ffd:	53                   	push   ebx
c0014ffe:	89 c2                	mov    edx,eax
c0015000:	81 ec 34 02 00 00    	sub    esp,0x234
c0015006:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c001500d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015011:	74 50                	je     c0015063 <SysSymlink(regs*)+0x6a>
c0015013:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0015016:	85 c9                	test   ecx,ecx
c0015018:	74 49                	je     c0015063 <SysSymlink(regs*)+0x6a>
c001501a:	6a 01                	push   0x1
c001501c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015021:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015024:	05 0c 01 00 00       	add    eax,0x10c
c0015029:	50                   	push   eax
c001502a:	51                   	push   ecx
c001502b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001502f:	56                   	push   esi
c0015030:	e8 3d 2e ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015035:	6a 01                	push   0x1
c0015037:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001503c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001503f:	05 0c 01 00 00       	add    eax,0x10c
c0015044:	50                   	push   eax
c0015045:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015048:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001504f:	53                   	push   ebx
c0015050:	e8 1d 2e ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015055:	83 c4 18             	add    esp,0x18
c0015058:	56                   	push   esi
c0015059:	53                   	push   ebx
c001505a:	e8 41 2a ff ff       	call   c0007aa0 <KeCreateSymlink(char const*, char const*)>
c001505f:	83 c4 10             	add    esp,0x10
c0015062:	99                   	cdq    
c0015063:	81 c4 34 02 00 00    	add    esp,0x234
c0015069:	5b                   	pop    ebx
c001506a:	5e                   	pop    esi
c001506b:	c3                   	ret    

c001506c <SysTimezone(regs*)>:
c001506c:	83 ec 0c             	sub    esp,0xc
c001506f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015073:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0015077:	75 17                	jne    c0015090 <SysTimezone(regs*)+0x24>
c0015079:	83 ec 0c             	sub    esp,0xc
c001507c:	68 a0 4d 02 c0       	push   0xc0024da0
c0015081:	e8 f6 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015086:	83 c8 ff             	or     eax,0xffffffff
c0015089:	83 c4 10             	add    esp,0x10
c001508c:	89 c2                	mov    edx,eax
c001508e:	eb 16                	jmp    c00150a6 <SysTimezone(regs*)+0x3a>
c0015090:	83 ec 0c             	sub    esp,0xc
c0015093:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015096:	e8 6e 3f ff ff       	call   c0009009 <KeSetTimezone(int)>
c001509b:	31 d2                	xor    edx,edx
c001509d:	83 f0 01             	xor    eax,0x1
c00150a0:	83 c4 10             	add    esp,0x10
c00150a3:	0f b6 c0             	movzx  eax,al
c00150a6:	83 c4 0c             	add    esp,0xc
c00150a9:	c3                   	ret    

c00150aa <SysTruncate(regs*)>:
c00150aa:	55                   	push   ebp
c00150ab:	57                   	push   edi
c00150ac:	31 ff                	xor    edi,edi
c00150ae:	56                   	push   esi
c00150af:	53                   	push   ebx
c00150b0:	83 ec 0c             	sub    esp,0xc
c00150b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150b7:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00150ba:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00150bd:	89 ce                	mov    esi,ecx
c00150bf:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00150c3:	0f 84 9a 00 00 00    	je     c0015163 <SysTruncate(regs*)+0xb9>
c00150c9:	83 ec 0c             	sub    esp,0xc
c00150cc:	68 14 01 00 00       	push   0x114
c00150d1:	e8 b9 aa ff ff       	call   c000fb8f <malloc>
c00150d6:	83 c4 0c             	add    esp,0xc
c00150d9:	89 c3                	mov    ebx,eax
c00150db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150e0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00150e3:	55                   	push   ebp
c00150e4:	53                   	push   ebx
c00150e5:	e8 a0 30 ff ff       	call   c000818a <File::File(char const*, Process*)>
c00150ea:	83 c4 10             	add    esp,0x10
c00150ed:	31 d2                	xor    edx,edx
c00150ef:	b8 03 00 00 00       	mov    eax,0x3
c00150f4:	85 db                	test   ebx,ebx
c00150f6:	0f 84 a2 00 00 00    	je     c001519e <SysTruncate(regs*)+0xf4>
c00150fc:	51                   	push   ecx
c00150fd:	51                   	push   ecx
c00150fe:	6a 02                	push   0x2
c0015100:	53                   	push   ebx
c0015101:	e8 a2 30 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015106:	83 c4 10             	add    esp,0x10
c0015109:	85 c0                	test   eax,eax
c001510b:	74 13                	je     c0015120 <SysTruncate(regs*)+0x76>
c001510d:	83 ec 0c             	sub    esp,0xc
c0015110:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015112:	53                   	push   ebx
c0015113:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015116:	83 c4 10             	add    esp,0x10
c0015119:	b8 04 00 00 00       	mov    eax,0x4
c001511e:	eb 7c                	jmp    c001519c <SysTruncate(regs*)+0xf2>
c0015120:	52                   	push   edx
c0015121:	57                   	push   edi
c0015122:	56                   	push   esi
c0015123:	53                   	push   ebx
c0015124:	e8 93 31 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c0015129:	83 c4 10             	add    esp,0x10
c001512c:	85 c0                	test   eax,eax
c001512e:	74 1b                	je     c001514b <SysTruncate(regs*)+0xa1>
c0015130:	83 ec 0c             	sub    esp,0xc
c0015133:	53                   	push   ebx
c0015134:	e8 cd 30 ff ff       	call   c0008206 <File::close()>
c0015139:	8b 03                	mov    eax,DWORD PTR [ebx]
c001513b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001513e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015141:	83 c4 10             	add    esp,0x10
c0015144:	b8 05 00 00 00       	mov    eax,0x5
c0015149:	eb 51                	jmp    c001519c <SysTruncate(regs*)+0xf2>
c001514b:	83 ec 0c             	sub    esp,0xc
c001514e:	53                   	push   ebx
c001514f:	e8 b2 30 ff ff       	call   c0008206 <File::close()>
c0015154:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015156:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015159:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001515c:	83 c4 10             	add    esp,0x10
c001515f:	31 c0                	xor    eax,eax
c0015161:	eb 39                	jmp    c001519c <SysTruncate(regs*)+0xf2>
c0015163:	31 d2                	xor    edx,edx
c0015165:	b8 01 00 00 00       	mov    eax,0x1
c001516a:	83 fd 02             	cmp    ebp,0x2
c001516d:	7e 2f                	jle    c001519e <SysTruncate(regs*)+0xf4>
c001516f:	83 ec 0c             	sub    esp,0xc
c0015172:	51                   	push   ecx
c0015173:	e8 51 e3 ff ff       	call   c00134c9 <KeGetFileFromDescriptor(int)>
c0015178:	83 c4 10             	add    esp,0x10
c001517b:	89 c1                	mov    ecx,eax
c001517d:	31 d2                	xor    edx,edx
c001517f:	b8 02 00 00 00       	mov    eax,0x2
c0015184:	85 c9                	test   ecx,ecx
c0015186:	74 16                	je     c001519e <SysTruncate(regs*)+0xf4>
c0015188:	50                   	push   eax
c0015189:	57                   	push   edi
c001518a:	56                   	push   esi
c001518b:	51                   	push   ecx
c001518c:	e8 2b 31 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c0015191:	83 c4 10             	add    esp,0x10
c0015194:	85 c0                	test   eax,eax
c0015196:	0f 95 c0             	setne  al
c0015199:	0f b6 c0             	movzx  eax,al
c001519c:	31 d2                	xor    edx,edx
c001519e:	83 c4 0c             	add    esp,0xc
c00151a1:	5b                   	pop    ebx
c00151a2:	5e                   	pop    esi
c00151a3:	5f                   	pop    edi
c00151a4:	5d                   	pop    ebp
c00151a5:	c3                   	ret    

c00151a6 <SysWrite(regs*)>:
c00151a6:	57                   	push   edi
c00151a7:	56                   	push   esi
c00151a8:	53                   	push   ebx
c00151a9:	83 ec 10             	sub    esp,0x10
c00151ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00151b0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00151b3:	83 f8 02             	cmp    eax,0x2
c00151b6:	77 10                	ja     c00151c8 <SysWrite(regs*)+0x22>
c00151b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151c0:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c00151c6:	eb 0e                	jmp    c00151d6 <SysWrite(regs*)+0x30>
c00151c8:	83 ec 0c             	sub    esp,0xc
c00151cb:	50                   	push   eax
c00151cc:	e8 f8 e2 ff ff       	call   c00134c9 <KeGetFileFromDescriptor(int)>
c00151d1:	83 c4 10             	add    esp,0x10
c00151d4:	89 c1                	mov    ecx,eax
c00151d6:	83 c8 ff             	or     eax,0xffffffff
c00151d9:	85 c9                	test   ecx,ecx
c00151db:	89 c2                	mov    edx,eax
c00151dd:	74 28                	je     c0015207 <SysWrite(regs*)+0x61>
c00151df:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00151e7:	31 ff                	xor    edi,edi
c00151e9:	83 ec 0c             	sub    esp,0xc
c00151ec:	8b 01                	mov    eax,DWORD PTR [ecx]
c00151ee:	8d 54 24 18          	lea    edx,[esp+0x18]
c00151f2:	52                   	push   edx
c00151f3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00151f6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00151f9:	57                   	push   edi
c00151fa:	56                   	push   esi
c00151fb:	51                   	push   ecx
c00151fc:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00151ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015203:	83 c4 20             	add    esp,0x20
c0015206:	99                   	cdq    
c0015207:	83 c4 10             	add    esp,0x10
c001520a:	5b                   	pop    ebx
c001520b:	5e                   	pop    esi
c001520c:	5f                   	pop    edi
c001520d:	c3                   	ret    

c001520e <SysWsbe(regs*)>:
c001520e:	55                   	push   ebp
c001520f:	57                   	push   edi
c0015210:	56                   	push   esi
c0015211:	53                   	push   ebx
c0015212:	83 ec 3c             	sub    esp,0x3c
c0015215:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015219:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0015220:	75 2d                	jne    c001524f <SysWsbe(regs*)+0x41>
c0015222:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0015229:	75 24                	jne    c001524f <SysWsbe(regs*)+0x41>
c001522b:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0015232:	75 1b                	jne    c001524f <SysWsbe(regs*)+0x41>
c0015234:	6a 01                	push   0x1
c0015236:	6a 00                	push   0x0
c0015238:	68 79 9f 00 c0       	push   0xc0009f79
c001523d:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0015243:	e8 08 1c 00 00       	call   c0016e50 <Process::createThread(void (*)(void*), void*, int)>
c0015248:	83 c4 10             	add    esp,0x10
c001524b:	31 c0                	xor    eax,eax
c001524d:	eb 52                	jmp    c00152a1 <SysWsbe(regs*)+0x93>
c001524f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015253:	be b5 4d 02 c0       	mov    esi,0xc0024db5
c0015258:	b9 0b 00 00 00       	mov    ecx,0xb
c001525d:	fc                   	cld    
c001525e:	83 ec 0c             	sub    esp,0xc
c0015261:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015263:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015267:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001526c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001526f:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0015275:	8b 06                	mov    eax,DWORD PTR [esi]
c0015277:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c001527a:	57                   	push   edi
c001527b:	e8 f0 b2 fe ff       	call   c0000570 <strlen>
c0015280:	5a                   	pop    edx
c0015281:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015285:	52                   	push   edx
c0015286:	31 d2                	xor    edx,edx
c0015288:	57                   	push   edi
c0015289:	52                   	push   edx
c001528a:	50                   	push   eax
c001528b:	56                   	push   esi
c001528c:	ff d5                	call   ebp
c001528e:	83 c4 14             	add    esp,0x14
c0015291:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015294:	e8 77 26 00 00       	call   c0017910 <KeTerminateCurrentThread(int)>
c0015299:	83 c4 10             	add    esp,0x10
c001529c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00152a1:	83 c4 3c             	add    esp,0x3c
c00152a4:	31 d2                	xor    edx,edx
c00152a6:	5b                   	pop    ebx
c00152a7:	5e                   	pop    esi
c00152a8:	5f                   	pop    edi
c00152a9:	5d                   	pop    ebp
c00152aa:	c3                   	ret    

c00152ab <SysYield(regs*)>:
c00152ab:	83 ec 0c             	sub    esp,0xc
c00152ae:	fa                   	cli    
c00152af:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c00152b5:	e8 56 1e 00 00       	call   c0017110 <schedule()>
c00152ba:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00152c1:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00152c8:	75 01                	jne    c00152cb <SysYield(regs*)+0x20>
c00152ca:	fb                   	sti    
c00152cb:	31 c0                	xor    eax,eax
c00152cd:	31 d2                	xor    edx,edx
c00152cf:	83 c4 0c             	add    esp,0xc
c00152d2:	c3                   	ret    
c00152d3:	90                   	nop

c00152d4 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c00152d4:	55                   	push   ebp
c00152d5:	57                   	push   edi
c00152d6:	56                   	push   esi
c00152d7:	53                   	push   ebx
c00152d8:	83 ec 2c             	sub    esp,0x2c
c00152db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00152df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152e3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00152e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00152eb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00152ef:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c00152f2:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c00152f6:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c00152fa:	c1 e0 08             	shl    eax,0x8
c00152fd:	09 c1                	or     ecx,eax
c00152ff:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015303:	c1 e0 10             	shl    eax,0x10
c0015306:	09 c1                	or     ecx,eax
c0015308:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c001530c:	83 e0 7f             	and    eax,0x7f
c001530f:	c1 e0 18             	shl    eax,0x18
c0015312:	09 c8                	or     eax,ecx
c0015314:	89 c5                	mov    ebp,eax
c0015316:	89 f8                	mov    eax,edi
c0015318:	80 f4 00             	xor    ah,0x0
c001531b:	89 c3                	mov    ebx,eax
c001531d:	89 e8                	mov    eax,ebp
c001531f:	80 f4 00             	xor    ah,0x0
c0015322:	89 c6                	mov    esi,eax
c0015324:	89 f0                	mov    eax,esi
c0015326:	09 d8                	or     eax,ebx
c0015328:	74 42                	je     c001536c <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c001532a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001532e:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0015331:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015335:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015339:	c1 e0 08             	shl    eax,0x8
c001533c:	09 c6                	or     esi,eax
c001533e:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015342:	c1 e0 10             	shl    eax,0x10
c0015345:	09 c6                	or     esi,eax
c0015347:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c001534b:	83 e0 7f             	and    eax,0x7f
c001534e:	c1 e0 18             	shl    eax,0x18
c0015351:	09 f0                	or     eax,esi
c0015353:	89 c3                	mov    ebx,eax
c0015355:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c001535a:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0015360:	29 c1                	sub    ecx,eax
c0015362:	19 d3                	sbb    ebx,edx
c0015364:	89 c8                	mov    eax,ecx
c0015366:	89 da                	mov    edx,ebx
c0015368:	eb 0e                	jmp    c0015378 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c001536a:	66 90                	xchg   ax,ax
c001536c:	b8 00 00 00 00       	mov    eax,0x0
c0015371:	ba 00 00 00 00       	mov    edx,0x0
c0015376:	66 90                	xchg   ax,ax
c0015378:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001537c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015384:	80 f4 00             	xor    ah,0x0
c0015387:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001538b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001538f:	80 f4 00             	xor    ah,0x0
c0015392:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015396:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001539a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001539e:	89 e8                	mov    eax,ebp
c00153a0:	09 f8                	or     eax,edi
c00153a2:	74 30                	je     c00153d4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c00153a4:	8b 0d 50 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb50
c00153aa:	8b 1d 54 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb54
c00153b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00153b8:	01 c8                	add    eax,ecx
c00153ba:	11 da                	adc    edx,ebx
c00153bc:	89 c6                	mov    esi,eax
c00153be:	83 e6 ff             	and    esi,0xffffffff
c00153c1:	89 34 24             	mov    DWORD PTR [esp],esi
c00153c4:	89 d0                	mov    eax,edx
c00153c6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00153cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153cf:	eb 13                	jmp    c00153e4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c00153d1:	8d 76 00             	lea    esi,[esi+0x0]
c00153d4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00153db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00153e3:	90                   	nop
c00153e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153e8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00153eb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00153ef:	89 cf                	mov    edi,ecx
c00153f1:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c00153f4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00153f7:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00153fb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0015400:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c0015403:	83 e1 00             	and    ecx,0x0
c0015406:	09 ca                	or     edx,ecx
c0015408:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c001540b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001540f:	c1 ea 08             	shr    edx,0x8
c0015412:	0f b6 d2             	movzx  edx,dl
c0015415:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c0015418:	83 e1 00             	and    ecx,0x0
c001541b:	09 ca                	or     edx,ecx
c001541d:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015420:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015424:	c1 ea 10             	shr    edx,0x10
c0015427:	0f b6 d2             	movzx  edx,dl
c001542a:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c001542d:	83 e1 00             	and    ecx,0x0
c0015430:	09 ca                	or     edx,ecx
c0015432:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015435:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015439:	c1 ea 18             	shr    edx,0x18
c001543c:	83 e2 7f             	and    edx,0x7f
c001543f:	89 d3                	mov    ebx,edx
c0015441:	83 e3 7f             	and    ebx,0x7f
c0015444:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015447:	83 e2 80             	and    edx,0xffffff80
c001544a:	88 d1                	mov    cl,dl
c001544c:	88 da                	mov    dl,bl
c001544e:	09 ca                	or     edx,ecx
c0015450:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015453:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015457:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001545b:	83 c4 2c             	add    esp,0x2c
c001545e:	5b                   	pop    ebx
c001545f:	5e                   	pop    esi
c0015460:	5f                   	pop    edi
c0015461:	5d                   	pop    ebp
c0015462:	c3                   	ret    
c0015463:	90                   	nop

c0015464 <KeCheckAlarm(ThreadControlBlock*)>:
c0015464:	55                   	push   ebp
c0015465:	57                   	push   edi
c0015466:	56                   	push   esi
c0015467:	53                   	push   ebx
c0015468:	83 ec 0c             	sub    esp,0xc
c001546b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001546f:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015472:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0015476:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c001547a:	c1 e5 08             	shl    ebp,0x8
c001547d:	09 fd                	or     ebp,edi
c001547f:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0015483:	c1 e7 10             	shl    edi,0x10
c0015486:	09 ef                	or     edi,ebp
c0015488:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c001548c:	83 e0 7f             	and    eax,0x7f
c001548f:	c1 e0 18             	shl    eax,0x18
c0015492:	09 f8                	or     eax,edi
c0015494:	89 c1                	mov    ecx,eax
c0015496:	89 d0                	mov    eax,edx
c0015498:	80 f4 00             	xor    ah,0x0
c001549b:	89 c3                	mov    ebx,eax
c001549d:	89 c8                	mov    eax,ecx
c001549f:	80 f4 00             	xor    ah,0x0
c00154a2:	89 c6                	mov    esi,eax
c00154a4:	89 f0                	mov    eax,esi
c00154a6:	09 d8                	or     eax,ebx
c00154a8:	0f 84 9e 00 00 00    	je     c001554c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00154ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00154b2:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c00154b5:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c00154b9:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c00154bd:	c1 e6 08             	shl    esi,0x8
c00154c0:	09 de                	or     esi,ebx
c00154c2:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c00154c6:	c1 e3 10             	shl    ebx,0x10
c00154c9:	09 f3                	or     ebx,esi
c00154cb:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c00154cf:	83 e1 7f             	and    ecx,0x7f
c00154d2:	c1 e1 18             	shl    ecx,0x18
c00154d5:	09 d9                	or     ecx,ebx
c00154d7:	89 ca                	mov    edx,ecx
c00154d9:	89 c1                	mov    ecx,eax
c00154db:	89 d3                	mov    ebx,edx
c00154dd:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c00154e2:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c00154e8:	39 c8                	cmp    eax,ecx
c00154ea:	89 d0                	mov    eax,edx
c00154ec:	19 d8                	sbb    eax,ebx
c00154ee:	72 5c                	jb     c001554c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00154f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154f4:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c00154fb:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c00154fe:	83 e2 00             	and    edx,0x0
c0015501:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015504:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015507:	83 e2 00             	and    edx,0x0
c001550a:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c001550d:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015510:	83 e2 00             	and    edx,0x0
c0015513:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015516:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015519:	83 e2 80             	and    edx,0xffffff80
c001551c:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001551f:	83 ec 0c             	sub    esp,0xc
c0015522:	68 e1 4d 02 c0       	push   0xc0024de1
c0015527:	e8 50 1a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001552c:	83 c4 10             	add    esp,0x10
c001552f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015533:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015536:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c001553c:	83 ec 08             	sub    esp,0x8
c001553f:	6a 0e                	push   0xe
c0015541:	50                   	push   eax
c0015542:	e8 64 bd ff ff       	call   c00112ab <KeRaiseSignal(SigHandlerBlock*, int)>
c0015547:	83 c4 10             	add    esp,0x10
c001554a:	66 90                	xchg   ax,ax
c001554c:	90                   	nop
c001554d:	83 c4 0c             	add    esp,0xc
c0015550:	5b                   	pop    ebx
c0015551:	5e                   	pop    esi
c0015552:	5f                   	pop    edi
c0015553:	5d                   	pop    ebp
c0015554:	c3                   	ret    

c0015555 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015555:	55                   	push   ebp
c0015556:	57                   	push   edi
c0015557:	56                   	push   esi
c0015558:	53                   	push   ebx
c0015559:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001555f:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015567:	0f 95 c0             	setne  al
c001556a:	31 d2                	xor    edx,edx
c001556c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015574:	0f 94 c2             	sete   dl
c0015577:	85 c2                	test   edx,eax
c0015579:	74 34                	je     c00155af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001557b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015586:	74 27                	je     c00155af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015588:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001558f:	05 00 10 00 00       	add    eax,0x1000
c0015594:	89 c1                	mov    ecx,eax
c0015596:	25 00 f0 ff ff       	and    eax,0xfffff000
c001559b:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00155a1:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00155a8:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00155af:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00155b6:	83 ec 0c             	sub    esp,0xc
c00155b9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00155bf:	6a 01                	push   0x1
c00155c1:	e8 61 e0 ff ff       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c00155c6:	83 c4 10             	add    esp,0x10
c00155c9:	89 c3                	mov    ebx,eax
c00155cb:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00155d1:	0f 86 26 01 00 00    	jbe    c00156fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00155d7:	c1 ee 0c             	shr    esi,0xc
c00155da:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00155e1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00155e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00155ed:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00155f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00155f8:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00155ff:	29 ef                	sub    edi,ebp
c0015601:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0015605:	0f 83 f9 00 00 00    	jae    c0015704 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c001560b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015611:	76 05                	jbe    c0015618 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0015613:	bf 00 10 00 00       	mov    edi,0x1000
c0015618:	83 ec 0c             	sub    esp,0xc
c001561b:	31 d2                	xor    edx,edx
c001561d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015624:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015626:	8d 44 24 28          	lea    eax,[esp+0x28]
c001562a:	50                   	push   eax
c001562b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001562f:	56                   	push   esi
c0015630:	52                   	push   edx
c0015631:	57                   	push   edi
c0015632:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015639:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001563c:	83 c4 20             	add    esp,0x20
c001563f:	85 c0                	test   eax,eax
c0015641:	75 06                	jne    c0015649 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0015643:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015647:	74 13                	je     c001565c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015649:	83 ec 0c             	sub    esp,0xc
c001564c:	53                   	push   ebx
c001564d:	e8 dd e2 ff ff       	call   c001392f <Virt::freeKernelVirtualPages(unsigned long)>
c0015652:	83 c4 10             	add    esp,0x10
c0015655:	31 c0                	xor    eax,eax
c0015657:	e9 80 01 00 00       	jmp    c00157dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001565c:	fa                   	cli    
c001565d:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0015663:	e8 72 ab ff ff       	call   c00101da <Phys::allocatePage()>
c0015668:	6a 07                	push   0x7
c001566a:	89 c7                	mov    edi,eax
c001566c:	53                   	push   ebx
c001566d:	50                   	push   eax
c001566e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015673:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015676:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001567c:	e8 89 e6 ff ff       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015681:	83 c4 0c             	add    esp,0xc
c0015684:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001568b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015691:	6a 00                	push   0x0
c0015693:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015698:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001569b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00156a1:	e8 d0 e4 ff ff       	call   c0013b76 <VAS::mapOtherVASIn(bool, VAS*)>
c00156a6:	58                   	pop    eax
c00156a7:	5a                   	pop    edx
c00156a8:	68 07 0c 00 00       	push   0xc07
c00156ad:	55                   	push   ebp
c00156ae:	57                   	push   edi
c00156af:	89 df                	mov    edi,ebx
c00156b1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00156b8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00156be:	6a 00                	push   0x0
c00156c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156c8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00156ce:	e8 79 e8 ff ff       	call   c0013f4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00156d3:	b9 00 10 00 00       	mov    ecx,0x1000
c00156d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00156da:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00156e1:	83 c4 20             	add    esp,0x20
c00156e4:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00156eb:	75 01                	jne    c00156ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c00156ed:	fb                   	sti    
c00156ee:	81 c5 00 10 00 00    	add    ebp,0x1000
c00156f4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00156f8:	e9 f0 fe ff ff       	jmp    c00155ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00156fd:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015704:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001570b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015711:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015717:	0f 86 b1 00 00 00    	jbe    c00157ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001571d:	fa                   	cli    
c001571e:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0015724:	c1 ee 0c             	shr    esi,0xc
c0015727:	51                   	push   ecx
c0015728:	31 ff                	xor    edi,edi
c001572a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015731:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015737:	6a 00                	push   0x0
c0015739:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001573e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015741:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015747:	e8 2a e4 ff ff       	call   c0013b76 <VAS::mapOtherVASIn(bool, VAS*)>
c001574c:	83 c4 10             	add    esp,0x10
c001574f:	e8 86 aa ff ff       	call   c00101da <Phys::allocatePage()>
c0015754:	47                   	inc    edi
c0015755:	6a 07                	push   0x7
c0015757:	53                   	push   ebx
c0015758:	50                   	push   eax
c0015759:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001575d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015763:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015766:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c001576c:	e8 99 e5 ff ff       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015771:	58                   	pop    eax
c0015772:	5a                   	pop    edx
c0015773:	68 07 0c 00 00       	push   0xc07
c0015778:	55                   	push   ebp
c0015779:	81 c5 00 10 00 00    	add    ebp,0x1000
c001577f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015783:	50                   	push   eax
c0015784:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001578b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015791:	6a 00                	push   0x0
c0015793:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015798:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001579b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00157a1:	e8 a6 e7 ff ff       	call   c0013f4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00157a6:	83 c4 1c             	add    esp,0x1c
c00157a9:	68 00 10 00 00       	push   0x1000
c00157ae:	6a 00                	push   0x0
c00157b0:	53                   	push   ebx
c00157b1:	e8 3a ad fe ff       	call   c00004f0 <memset>
c00157b6:	83 c4 10             	add    esp,0x10
c00157b9:	39 fe                	cmp    esi,edi
c00157bb:	77 92                	ja     c001574f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c00157bd:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00157c4:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00157cb:	75 01                	jne    c00157ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00157cd:	fb                   	sti    
c00157ce:	83 ec 0c             	sub    esp,0xc
c00157d1:	53                   	push   ebx
c00157d2:	e8 58 e1 ff ff       	call   c001392f <Virt::freeKernelVirtualPages(unsigned long)>
c00157d7:	83 c4 10             	add    esp,0x10
c00157da:	b0 01                	mov    al,0x1
c00157dc:	81 c4 2c 10 00 00    	add    esp,0x102c
c00157e2:	5b                   	pop    ebx
c00157e3:	5e                   	pop    esi
c00157e4:	5f                   	pop    edi
c00157e5:	5d                   	pop    ebp
c00157e6:	c3                   	ret    

c00157e7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00157e7:	55                   	push   ebp
c00157e8:	57                   	push   edi
c00157e9:	56                   	push   esi
c00157ea:	53                   	push   ebx
c00157eb:	83 ec 68             	sub    esp,0x68
c00157ee:	68 14 01 00 00       	push   0x114
c00157f3:	e8 97 a3 ff ff       	call   c000fb8f <malloc>
c00157f8:	83 c4 0c             	add    esp,0xc
c00157fb:	89 c6                	mov    esi,eax
c00157fd:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015801:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015805:	50                   	push   eax
c0015806:	e8 7f 29 ff ff       	call   c000818a <File::File(char const*, Process*)>
c001580b:	5b                   	pop    ebx
c001580c:	5f                   	pop    edi
c001580d:	6a 01                	push   0x1
c001580f:	56                   	push   esi
c0015810:	e8 93 29 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015815:	83 c4 10             	add    esp,0x10
c0015818:	85 c0                	test   eax,eax
c001581a:	0f 85 c6 01 00 00    	jne    c00159e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015820:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015828:	83 ec 0c             	sub    esp,0xc
c001582b:	6a 34                	push   0x34
c001582d:	e8 5d a3 ff ff       	call   c000fb8f <malloc>
c0015832:	59                   	pop    ecx
c0015833:	89 c3                	mov    ebx,eax
c0015835:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0015839:	8b 06                	mov    eax,DWORD PTR [esi]
c001583b:	57                   	push   edi
c001583c:	53                   	push   ebx
c001583d:	6a 00                	push   0x0
c001583f:	6a 34                	push   0x34
c0015841:	56                   	push   esi
c0015842:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015845:	83 c4 20             	add    esp,0x20
c0015848:	85 c0                	test   eax,eax
c001584a:	0f 85 96 01 00 00    	jne    c00159e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015850:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015856:	0f 85 8a 01 00 00    	jne    c00159e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001585c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001585f:	85 c0                	test   eax,eax
c0015861:	0f 84 7f 01 00 00    	je     c00159e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015867:	52                   	push   edx
c0015868:	31 d2                	xor    edx,edx
c001586a:	52                   	push   edx
c001586b:	50                   	push   eax
c001586c:	56                   	push   esi
c001586d:	e8 f4 29 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015872:	83 c4 10             	add    esp,0x10
c0015875:	85 c0                	test   eax,eax
c0015877:	0f 85 69 01 00 00    	jne    c00159e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001587d:	83 ec 0c             	sub    esp,0xc
c0015880:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015883:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015887:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001588b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001588f:	0f af c2             	imul   eax,edx
c0015892:	50                   	push   eax
c0015893:	e8 f7 a2 ff ff       	call   c000fb8f <malloc>
c0015898:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001589a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001589e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00158a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158a5:	31 ff                	xor    edi,edi
c00158a7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00158ab:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00158af:	0f af c2             	imul   eax,edx
c00158b2:	99                   	cdq    
c00158b3:	52                   	push   edx
c00158b4:	50                   	push   eax
c00158b5:	56                   	push   esi
c00158b6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00158b9:	83 c4 20             	add    esp,0x20
c00158bc:	0f b7 c7             	movzx  eax,di
c00158bf:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c00158c3:	73 71                	jae    c0015936 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00158c5:	6b c0 28             	imul   eax,eax,0x28
c00158c8:	55                   	push   ebp
c00158c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00158cd:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c00158d1:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00158d4:	6b d2 28             	imul   edx,edx,0x28
c00158d7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00158db:	31 d2                	xor    edx,edx
c00158dd:	52                   	push   edx
c00158de:	50                   	push   eax
c00158df:	56                   	push   esi
c00158e0:	e8 81 29 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00158e5:	83 c4 0c             	add    esp,0xc
c00158e8:	6a 20                	push   0x20
c00158ea:	6a 00                	push   0x0
c00158ec:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c00158f0:	55                   	push   ebp
c00158f1:	e8 fa ab fe ff       	call   c00004f0 <memset>
c00158f6:	58                   	pop    eax
c00158f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00158f9:	8d 54 24 38          	lea    edx,[esp+0x38]
c00158fd:	52                   	push   edx
c00158fe:	55                   	push   ebp
c00158ff:	6a 00                	push   0x0
c0015901:	6a 1f                	push   0x1f
c0015903:	56                   	push   esi
c0015904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015907:	83 c4 18             	add    esp,0x18
c001590a:	55                   	push   ebp
c001590b:	68 f2 4d 02 c0       	push   0xc0024df2
c0015910:	e8 3b ae fe ff       	call   c0000750 <strcmp>
c0015915:	83 c4 10             	add    esp,0x10
c0015918:	85 c0                	test   eax,eax
c001591a:	75 17                	jne    c0015933 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c001591c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015920:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015924:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c001592a:	83 c8 80             	or     eax,0xffffff80
c001592d:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c0015933:	47                   	inc    edi
c0015934:	eb 86                	jmp    c00158bc <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015936:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015939:	85 c0                	test   eax,eax
c001593b:	0f 84 a5 00 00 00    	je     c00159e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015941:	31 d2                	xor    edx,edx
c0015943:	57                   	push   edi
c0015944:	52                   	push   edx
c0015945:	50                   	push   eax
c0015946:	56                   	push   esi
c0015947:	e8 1a 29 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001594c:	83 c4 10             	add    esp,0x10
c001594f:	85 c0                	test   eax,eax
c0015951:	0f 85 8f 00 00 00    	jne    c00159e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015957:	83 ec 0c             	sub    esp,0xc
c001595a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001595e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015962:	31 ed                	xor    ebp,ebp
c0015964:	0f af c2             	imul   eax,edx
c0015967:	50                   	push   eax
c0015968:	e8 22 a2 ff ff       	call   c000fb8f <malloc>
c001596d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015971:	59                   	pop    ecx
c0015972:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015974:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015978:	50                   	push   eax
c0015979:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001597d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015981:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015985:	0f af c2             	imul   eax,edx
c0015988:	99                   	cdq    
c0015989:	52                   	push   edx
c001598a:	50                   	push   eax
c001598b:	56                   	push   esi
c001598c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001598f:	83 c4 20             	add    esp,0x20
c0015992:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001599a:	0f b7 fd             	movzx  edi,bp
c001599d:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00159a1:	0f 83 80 00 00 00    	jae    c0015a27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x240>
c00159a7:	c1 e7 05             	shl    edi,0x5
c00159aa:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c00159ae:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00159b1:	75 6e                	jne    c0015a21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c00159b3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00159b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00159ba:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00159bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00159c1:	52                   	push   edx
c00159c2:	31 d2                	xor    edx,edx
c00159c4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00159c7:	52                   	push   edx
c00159c8:	50                   	push   eax
c00159c9:	56                   	push   esi
c00159ca:	e8 97 28 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00159cf:	83 c4 10             	add    esp,0x10
c00159d2:	85 c0                	test   eax,eax
c00159d4:	74 17                	je     c00159ed <Thr::loadProgramIntoMemory(Process*, char const*)+0x206>
c00159d6:	83 ec 0c             	sub    esp,0xc
c00159d9:	68 01 4e 02 c0       	push   0xc0024e01
c00159de:	e8 99 15 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00159e3:	83 c4 10             	add    esp,0x10
c00159e6:	31 c0                	xor    eax,eax
c00159e8:	e9 8a 00 00 00       	jmp    c0015a77 <Thr::loadProgramIntoMemory(Process*, char const*)+0x290>
c00159ed:	83 ec 0c             	sub    esp,0xc
c00159f0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00159f3:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00159f6:	50                   	push   eax
c00159f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00159fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00159ff:	56                   	push   esi
c0015a00:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015a07:	e8 49 fb ff ff       	call   c0015555 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015a0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a10:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015a14:	83 c4 20             	add    esp,0x20
c0015a17:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0015a1b:	73 04                	jae    c0015a21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c0015a1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a21:	45                   	inc    ebp
c0015a22:	e9 73 ff ff ff       	jmp    c001599a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015a27:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015a2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015a2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a33:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0015a39:	83 ec 0c             	sub    esp,0xc
c0015a3c:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015a42:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a47:	05 00 10 00 00       	add    eax,0x1000
c0015a4c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015a4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a53:	e8 47 a1 ff ff       	call   c000fb9f <free>
c0015a58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a5b:	e8 3f a1 ff ff       	call   c000fb9f <free>
c0015a60:	58                   	pop    eax
c0015a61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a65:	e8 35 a1 ff ff       	call   c000fb9f <free>
c0015a6a:	89 34 24             	mov    DWORD PTR [esp],esi
c0015a6d:	e8 94 27 ff ff       	call   c0008206 <File::close()>
c0015a72:	83 c4 10             	add    esp,0x10
c0015a75:	b0 01                	mov    al,0x1
c0015a77:	83 c4 5c             	add    esp,0x5c
c0015a7a:	5b                   	pop    ebx
c0015a7b:	5e                   	pop    esi
c0015a7c:	5f                   	pop    edi
c0015a7d:	5d                   	pop    ebp
c0015a7e:	c3                   	ret    

c0015a7f <Thr::runtimeReferenceHelper()>:
c0015a7f:	83 ec 18             	sub    esp,0x18
c0015a82:	68 09 4e 02 c0       	push   0xc0024e09
c0015a87:	e8 f0 14 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015a8c:	fa                   	cli    
c0015a8d:	83 c4 10             	add    esp,0x10
c0015a90:	eb fe                	jmp    c0015a90 <Thr::runtimeReferenceHelper()+0x11>

c0015a92 <Thr::getAddressOfKernelSymbol(char const*)>:
c0015a92:	57                   	push   edi
c0015a93:	56                   	push   esi
c0015a94:	53                   	push   ebx
c0015a95:	31 db                	xor    ebx,ebx
c0015a97:	39 1d 00 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa00,ebx
c0015a9d:	7e 3c                	jle    c0015adb <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015a9f:	8b 34 9d 80 f9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0680]
c0015aa6:	31 ff                	xor    edi,edi
c0015aa8:	39 3c 9d 80 f8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0780],edi
c0015aaf:	7e 27                	jle    c0015ad8 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015ab1:	50                   	push   eax
c0015ab2:	50                   	push   eax
c0015ab3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ab7:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ab9:	03 04 9d 00 f9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0700]
c0015ac0:	50                   	push   eax
c0015ac1:	e8 8a ac fe ff       	call   c0000750 <strcmp>
c0015ac6:	83 c4 10             	add    esp,0x10
c0015ac9:	85 c0                	test   eax,eax
c0015acb:	75 05                	jne    c0015ad2 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015acd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015ad0:	eb 0b                	jmp    c0015add <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015ad2:	83 c6 10             	add    esi,0x10
c0015ad5:	47                   	inc    edi
c0015ad6:	eb d0                	jmp    c0015aa8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015ad8:	43                   	inc    ebx
c0015ad9:	eb bc                	jmp    c0015a97 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015adb:	31 c0                	xor    eax,eax
c0015add:	5b                   	pop    ebx
c0015ade:	5e                   	pop    esi
c0015adf:	5f                   	pop    edi
c0015ae0:	c3                   	ret    

c0015ae1 <Thr::loadKernelSymbolTable(char const*)>:
c0015ae1:	55                   	push   ebp
c0015ae2:	57                   	push   edi
c0015ae3:	56                   	push   esi
c0015ae4:	53                   	push   ebx
c0015ae5:	83 ec 68             	sub    esp,0x68
c0015ae8:	8b 35 58 fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa58
c0015aee:	68 14 01 00 00       	push   0x114
c0015af3:	e8 97 a0 ff ff       	call   c000fb8f <malloc>
c0015af8:	83 c4 0c             	add    esp,0xc
c0015afb:	89 c3                	mov    ebx,eax
c0015afd:	56                   	push   esi
c0015afe:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015b02:	50                   	push   eax
c0015b03:	e8 82 26 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015b08:	5e                   	pop    esi
c0015b09:	5f                   	pop    edi
c0015b0a:	6a 01                	push   0x1
c0015b0c:	53                   	push   ebx
c0015b0d:	e8 96 26 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015b12:	83 c4 10             	add    esp,0x10
c0015b15:	85 c0                	test   eax,eax
c0015b17:	74 0a                	je     c0015b23 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015b19:	83 ec 0c             	sub    esp,0xc
c0015b1c:	68 2b 4e 02 c0       	push   0xc0024e2b
c0015b21:	eb 34                	jmp    c0015b57 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015b23:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015b2b:	83 ec 0c             	sub    esp,0xc
c0015b2e:	6a 34                	push   0x34
c0015b30:	e8 5a a0 ff ff       	call   c000fb8f <malloc>
c0015b35:	59                   	pop    ecx
c0015b36:	89 c7                	mov    edi,eax
c0015b38:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015b3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b3e:	56                   	push   esi
c0015b3f:	57                   	push   edi
c0015b40:	6a 00                	push   0x0
c0015b42:	6a 34                	push   0x34
c0015b44:	53                   	push   ebx
c0015b45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b48:	83 c4 20             	add    esp,0x20
c0015b4b:	85 c0                	test   eax,eax
c0015b4d:	74 17                	je     c0015b66 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015b4f:	83 ec 0c             	sub    esp,0xc
c0015b52:	68 42 4e 02 c0       	push   0xc0024e42
c0015b57:	e8 8a a4 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0015b5c:	83 c4 10             	add    esp,0x10
c0015b5f:	31 c0                	xor    eax,eax
c0015b61:	e9 31 02 00 00       	jmp    c0015d97 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015b66:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015b6c:	75 e1                	jne    c0015b4f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015b6e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015b71:	85 c0                	test   eax,eax
c0015b73:	74 da                	je     c0015b4f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015b75:	52                   	push   edx
c0015b76:	31 d2                	xor    edx,edx
c0015b78:	52                   	push   edx
c0015b79:	50                   	push   eax
c0015b7a:	53                   	push   ebx
c0015b7b:	e8 e6 26 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015b80:	83 c4 10             	add    esp,0x10
c0015b83:	85 c0                	test   eax,eax
c0015b85:	75 c8                	jne    c0015b4f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015b87:	83 ec 0c             	sub    esp,0xc
c0015b8a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015b8e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015b92:	31 ed                	xor    ebp,ebp
c0015b94:	0f af c2             	imul   eax,edx
c0015b97:	50                   	push   eax
c0015b98:	e8 f2 9f ff ff       	call   c000fb8f <malloc>
c0015b9d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015b9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015ba3:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ba6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015baa:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015bae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015bb2:	0f af c2             	imul   eax,edx
c0015bb5:	99                   	cdq    
c0015bb6:	52                   	push   edx
c0015bb7:	50                   	push   eax
c0015bb8:	53                   	push   ebx
c0015bb9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015bbc:	83 c4 20             	add    esp,0x20
c0015bbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015bc7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015bcf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015bd7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015bdf:	0f b7 f5             	movzx  esi,bp
c0015be2:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015be6:	0f 83 a7 00 00 00    	jae    c0015c93 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015bec:	6b f6 28             	imul   esi,esi,0x28
c0015bef:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015bf3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015bf6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015bfa:	50                   	push   eax
c0015bfb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015bff:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015c03:	8b 16                	mov    edx,DWORD PTR [esi]
c0015c05:	6b c0 28             	imul   eax,eax,0x28
c0015c08:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015c0c:	89 d0                	mov    eax,edx
c0015c0e:	31 d2                	xor    edx,edx
c0015c10:	52                   	push   edx
c0015c11:	50                   	push   eax
c0015c12:	53                   	push   ebx
c0015c13:	e8 4e 26 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015c18:	83 c4 0c             	add    esp,0xc
c0015c1b:	6a 20                	push   0x20
c0015c1d:	6a 00                	push   0x0
c0015c1f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015c23:	52                   	push   edx
c0015c24:	e8 c7 a8 fe ff       	call   c00004f0 <memset>
c0015c29:	58                   	pop    eax
c0015c2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c2c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015c30:	51                   	push   ecx
c0015c31:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015c35:	52                   	push   edx
c0015c36:	6a 00                	push   0x0
c0015c38:	6a 1f                	push   0x1f
c0015c3a:	53                   	push   ebx
c0015c3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c3e:	83 c4 18             	add    esp,0x18
c0015c41:	68 59 4e 02 c0       	push   0xc0024e59
c0015c46:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015c4a:	52                   	push   edx
c0015c4b:	e8 00 ab fe ff       	call   c0000750 <strcmp>
c0015c50:	83 c4 10             	add    esp,0x10
c0015c53:	85 c0                	test   eax,eax
c0015c55:	75 0f                	jne    c0015c66 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015c57:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015c5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c66:	50                   	push   eax
c0015c67:	50                   	push   eax
c0015c68:	68 61 4e 02 c0       	push   0xc0024e61
c0015c6d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015c71:	50                   	push   eax
c0015c72:	e8 d9 aa fe ff       	call   c0000750 <strcmp>
c0015c77:	83 c4 10             	add    esp,0x10
c0015c7a:	85 c0                	test   eax,eax
c0015c7c:	75 0f                	jne    c0015c8d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015c7e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015c81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015c85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015c8d:	45                   	inc    ebp
c0015c8e:	e9 4c ff ff ff       	jmp    c0015bdf <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015c93:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015c98:	75 10                	jne    c0015caa <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015c9a:	83 ec 0c             	sub    esp,0xc
c0015c9d:	68 69 4e 02 c0       	push   0xc0024e69
c0015ca2:	e8 3f a3 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0015ca7:	83 c4 10             	add    esp,0x10
c0015caa:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015caf:	75 10                	jne    c0015cc1 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015cb1:	83 ec 0c             	sub    esp,0xc
c0015cb4:	68 69 4e 02 c0       	push   0xc0024e69
c0015cb9:	e8 28 a3 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0015cbe:	83 c4 10             	add    esp,0x10
c0015cc1:	31 d2                	xor    edx,edx
c0015cc3:	50                   	push   eax
c0015cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cc8:	52                   	push   edx
c0015cc9:	50                   	push   eax
c0015cca:	53                   	push   ebx
c0015ccb:	e8 96 25 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015cd0:	5a                   	pop    edx
c0015cd1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015cd5:	e8 b5 9e ff ff       	call   c000fb8f <malloc>
c0015cda:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015cde:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ce2:	31 c9                	xor    ecx,ecx
c0015ce4:	5e                   	pop    esi
c0015ce5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ce7:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015ceb:	55                   	push   ebp
c0015cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cf0:	51                   	push   ecx
c0015cf1:	52                   	push   edx
c0015cf2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015cf6:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015cfa:	53                   	push   ebx
c0015cfb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015cfe:	83 c4 14             	add    esp,0x14
c0015d01:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015d05:	e8 85 9e ff ff       	call   c000fb8f <malloc>
c0015d0a:	89 c6                	mov    esi,eax
c0015d0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d0e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015d11:	56                   	push   esi
c0015d12:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015d16:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015d1a:	51                   	push   ecx
c0015d1b:	52                   	push   edx
c0015d1c:	53                   	push   ebx
c0015d1d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015d24:	8b 15 00 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa00
c0015d2a:	83 c4 1c             	add    esp,0x1c
c0015d2d:	c1 e8 04             	shr    eax,0x4
c0015d30:	89 04 95 80 f8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0780],eax
c0015d37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d3b:	31 d2                	xor    edx,edx
c0015d3d:	52                   	push   edx
c0015d3e:	50                   	push   eax
c0015d3f:	53                   	push   ebx
c0015d40:	e8 21 25 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015d45:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015d47:	31 d2                	xor    edx,edx
c0015d49:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015d4c:	56                   	push   esi
c0015d4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015d51:	52                   	push   edx
c0015d52:	50                   	push   eax
c0015d53:	53                   	push   ebx
c0015d54:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d57:	83 c4 14             	add    esp,0x14
c0015d5a:	53                   	push   ebx
c0015d5b:	e8 a6 24 ff ff       	call   c0008206 <File::close()>
c0015d60:	5d                   	pop    ebp
c0015d61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015d65:	e8 35 9e ff ff       	call   c000fb9f <free>
c0015d6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015d6d:	e8 2d 9e ff ff       	call   c000fb9f <free>
c0015d72:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c0015d77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015d7b:	8d 50 01             	lea    edx,[eax+0x1]
c0015d7e:	89 0c 85 80 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0680],ecx
c0015d85:	89 34 85 00 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0700],esi
c0015d8c:	89 15 00 fa 02 c0    	mov    DWORD PTR ds:0xc002fa00,edx
c0015d92:	83 c4 10             	add    esp,0x10
c0015d95:	b0 01                	mov    al,0x1
c0015d97:	83 c4 5c             	add    esp,0x5c
c0015d9a:	5b                   	pop    ebx
c0015d9b:	5e                   	pop    esi
c0015d9c:	5f                   	pop    edi
c0015d9d:	5d                   	pop    ebp
c0015d9e:	c3                   	ret    

c0015d9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015d9f:	55                   	push   ebp
c0015da0:	57                   	push   edi
c0015da1:	56                   	push   esi
c0015da2:	53                   	push   ebx
c0015da3:	81 ec 68 03 00 00    	sub    esp,0x368
c0015da9:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0015db0:	8b 1d 58 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa58
c0015db6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015dba:	68 14 01 00 00       	push   0x114
c0015dbf:	e8 cb 9d ff ff       	call   c000fb8f <malloc>
c0015dc4:	83 c4 0c             	add    esp,0xc
c0015dc7:	89 c5                	mov    ebp,eax
c0015dc9:	53                   	push   ebx
c0015dca:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015dd1:	50                   	push   eax
c0015dd2:	e8 b3 23 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015dd7:	5e                   	pop    esi
c0015dd8:	5f                   	pop    edi
c0015dd9:	6a 01                	push   0x1
c0015ddb:	55                   	push   ebp
c0015ddc:	e8 c7 23 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015de1:	83 c4 10             	add    esp,0x10
c0015de4:	85 c0                	test   eax,eax
c0015de6:	0f 85 b9 06 00 00    	jne    c00164a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015dec:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015df4:	83 ec 0c             	sub    esp,0xc
c0015df7:	6a 34                	push   0x34
c0015df9:	e8 91 9d ff ff       	call   c000fb8f <malloc>
c0015dfe:	5b                   	pop    ebx
c0015dff:	89 c7                	mov    edi,eax
c0015e01:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015e05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015e08:	53                   	push   ebx
c0015e09:	57                   	push   edi
c0015e0a:	6a 00                	push   0x0
c0015e0c:	6a 34                	push   0x34
c0015e0e:	55                   	push   ebp
c0015e0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e12:	83 c4 20             	add    esp,0x20
c0015e15:	85 c0                	test   eax,eax
c0015e17:	0f 85 88 06 00 00    	jne    c00164a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015e1d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015e23:	0f 85 7c 06 00 00    	jne    c00164a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015e29:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015e2c:	85 c0                	test   eax,eax
c0015e2e:	0f 84 71 06 00 00    	je     c00164a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015e34:	31 d2                	xor    edx,edx
c0015e36:	51                   	push   ecx
c0015e37:	52                   	push   edx
c0015e38:	50                   	push   eax
c0015e39:	55                   	push   ebp
c0015e3a:	e8 27 24 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015e3f:	83 c4 10             	add    esp,0x10
c0015e42:	85 c0                	test   eax,eax
c0015e44:	0f 85 5b 06 00 00    	jne    c00164a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015e4a:	83 ec 0c             	sub    esp,0xc
c0015e4d:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015e50:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015e54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015e58:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015e5c:	0f af c2             	imul   eax,edx
c0015e5f:	50                   	push   eax
c0015e60:	e8 2a 9d ff ff       	call   c000fb8f <malloc>
c0015e65:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015e68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e73:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015e77:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015e7b:	0f af c2             	imul   eax,edx
c0015e7e:	99                   	cdq    
c0015e7f:	52                   	push   edx
c0015e80:	50                   	push   eax
c0015e81:	55                   	push   ebp
c0015e82:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e85:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015e88:	83 c4 20             	add    esp,0x20
c0015e8b:	85 c0                	test   eax,eax
c0015e8d:	0f 84 12 06 00 00    	je     c00164a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015e93:	52                   	push   edx
c0015e94:	31 d2                	xor    edx,edx
c0015e96:	52                   	push   edx
c0015e97:	50                   	push   eax
c0015e98:	55                   	push   ebp
c0015e99:	e8 c8 23 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015e9e:	83 c4 10             	add    esp,0x10
c0015ea1:	85 c0                	test   eax,eax
c0015ea3:	0f 85 fc 05 00 00    	jne    c00164a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015ea9:	83 ec 0c             	sub    esp,0xc
c0015eac:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015eb0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015eb4:	31 f6                	xor    esi,esi
c0015eb6:	0f af c2             	imul   eax,edx
c0015eb9:	50                   	push   eax
c0015eba:	e8 d0 9c ff ff       	call   c000fb8f <malloc>
c0015ebf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015ec2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ec6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ec9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ecd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015ed1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015ed5:	0f af c2             	imul   eax,edx
c0015ed8:	99                   	cdq    
c0015ed9:	52                   	push   edx
c0015eda:	50                   	push   eax
c0015edb:	55                   	push   ebp
c0015edc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015edf:	83 c4 20             	add    esp,0x20
c0015ee2:	0f b7 de             	movzx  ebx,si
c0015ee5:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0015ee9:	0f 83 85 00 00 00    	jae    c0015f74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d5>
c0015eef:	c1 e3 05             	shl    ebx,0x5
c0015ef2:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0015ef6:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015ef9:	75 73                	jne    c0015f6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1cf>
c0015efb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015efe:	31 d2                	xor    edx,edx
c0015f00:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f03:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015f06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015f0a:	50                   	push   eax
c0015f0b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015f0e:	52                   	push   edx
c0015f0f:	50                   	push   eax
c0015f10:	55                   	push   ebp
c0015f11:	e8 50 23 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015f16:	83 c4 10             	add    esp,0x10
c0015f19:	85 c0                	test   eax,eax
c0015f1b:	0f 85 84 05 00 00    	jne    c00164a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015f21:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015f28:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015f2b:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0015f2f:	31 d2                	xor    edx,edx
c0015f31:	03 04 24             	add    eax,DWORD PTR [esp]
c0015f34:	83 ec 0c             	sub    esp,0xc
c0015f37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f3b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015f42:	50                   	push   eax
c0015f43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f4b:	52                   	push   edx
c0015f4c:	50                   	push   eax
c0015f4d:	55                   	push   ebp
c0015f4e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015f51:	83 c4 1c             	add    esp,0x1c
c0015f54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015f57:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015f5a:	50                   	push   eax
c0015f5b:	6a 00                	push   0x0
c0015f5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f61:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0015f65:	50                   	push   eax
c0015f66:	e8 85 a5 fe ff       	call   c00004f0 <memset>
c0015f6b:	83 c4 10             	add    esp,0x10
c0015f6e:	46                   	inc    esi
c0015f6f:	e9 6e ff ff ff       	jmp    c0015ee2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015f74:	31 db                	xor    ebx,ebx
c0015f76:	50                   	push   eax
c0015f77:	68 00 01 00 00       	push   0x100
c0015f7c:	6a 00                	push   0x0
c0015f7e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015f82:	50                   	push   eax
c0015f83:	e8 68 a5 fe ff       	call   c00004f0 <memset>
c0015f88:	83 c4 0c             	add    esp,0xc
c0015f8b:	68 00 01 00 00       	push   0x100
c0015f90:	6a 00                	push   0x0
c0015f92:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015f99:	50                   	push   eax
c0015f9a:	e8 51 a5 fe ff       	call   c00004f0 <memset>
c0015f9f:	83 c4 10             	add    esp,0x10
c0015fa2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015fa9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015fb1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015fb9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015fc1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015fc9:	0f b7 f3             	movzx  esi,bx
c0015fcc:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015fd0:	0f 83 27 01 00 00    	jae    c00160fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x35e>
c0015fd6:	6b f6 28             	imul   esi,esi,0x28
c0015fd9:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0015fdd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015fe0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015fe4:	50                   	push   eax
c0015fe5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015fe9:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015fed:	8b 06                	mov    eax,DWORD PTR [esi]
c0015fef:	6b d2 28             	imul   edx,edx,0x28
c0015ff2:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015ff6:	31 d2                	xor    edx,edx
c0015ff8:	52                   	push   edx
c0015ff9:	50                   	push   eax
c0015ffa:	55                   	push   ebp
c0015ffb:	e8 66 22 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0016000:	83 c4 0c             	add    esp,0xc
c0016003:	6a 20                	push   0x20
c0016005:	6a 00                	push   0x0
c0016007:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001600e:	51                   	push   ecx
c001600f:	e8 dc a4 fe ff       	call   c00004f0 <memset>
c0016014:	58                   	pop    eax
c0016015:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016018:	8d 54 24 58          	lea    edx,[esp+0x58]
c001601c:	52                   	push   edx
c001601d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016024:	51                   	push   ecx
c0016025:	6a 00                	push   0x0
c0016027:	6a 1f                	push   0x1f
c0016029:	55                   	push   ebp
c001602a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001602d:	83 c4 1c             	add    esp,0x1c
c0016030:	6a 09                	push   0x9
c0016032:	68 83 4e 02 c0       	push   0xc0024e83
c0016037:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001603e:	51                   	push   ecx
c001603f:	e8 3c a3 fe ff       	call   c0000380 <memcmp>
c0016044:	83 c4 10             	add    esp,0x10
c0016047:	85 c0                	test   eax,eax
c0016049:	75 1e                	jne    c0016069 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2ca>
c001604b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001604e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016052:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016056:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016059:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001605c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0016063:	89 d0                	mov    eax,edx
c0016065:	40                   	inc    eax
c0016066:	89 04 24             	mov    DWORD PTR [esp],eax
c0016069:	51                   	push   ecx
c001606a:	6a 09                	push   0x9
c001606c:	68 8d 4e 02 c0       	push   0xc0024e8d
c0016071:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016078:	50                   	push   eax
c0016079:	e8 02 a3 fe ff       	call   c0000380 <memcmp>
c001607e:	83 c4 10             	add    esp,0x10
c0016081:	85 c0                	test   eax,eax
c0016083:	75 1e                	jne    c00160a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x304>
c0016085:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016088:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001608c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016090:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016093:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016096:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001609d:	89 d0                	mov    eax,edx
c001609f:	40                   	inc    eax
c00160a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00160a3:	52                   	push   edx
c00160a4:	52                   	push   edx
c00160a5:	68 59 4e 02 c0       	push   0xc0024e59
c00160aa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00160b1:	50                   	push   eax
c00160b2:	e8 99 a6 fe ff       	call   c0000750 <strcmp>
c00160b7:	83 c4 10             	add    esp,0x10
c00160ba:	85 c0                	test   eax,eax
c00160bc:	75 0f                	jne    c00160cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32e>
c00160be:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00160c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160cd:	50                   	push   eax
c00160ce:	50                   	push   eax
c00160cf:	68 61 4e 02 c0       	push   0xc0024e61
c00160d4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00160db:	50                   	push   eax
c00160dc:	e8 6f a6 fe ff       	call   c0000750 <strcmp>
c00160e1:	83 c4 10             	add    esp,0x10
c00160e4:	85 c0                	test   eax,eax
c00160e6:	75 0f                	jne    c00160f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x358>
c00160e8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00160eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160f3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00160f7:	43                   	inc    ebx
c00160f8:	e9 cc fe ff ff       	jmp    c0015fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22a>
c00160fd:	31 d2                	xor    edx,edx
c00160ff:	50                   	push   eax
c0016100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016104:	52                   	push   edx
c0016105:	50                   	push   eax
c0016106:	55                   	push   ebp
c0016107:	e8 5a 21 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001610c:	58                   	pop    eax
c001610d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016111:	e8 79 9a ff ff       	call   c000fb8f <malloc>
c0016116:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016119:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001611d:	31 d2                	xor    edx,edx
c001611f:	58                   	pop    eax
c0016120:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016124:	53                   	push   ebx
c0016125:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016129:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001612d:	52                   	push   edx
c001612e:	50                   	push   eax
c001612f:	55                   	push   ebp
c0016130:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016133:	83 c4 14             	add    esp,0x14
c0016136:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001613a:	e8 50 9a ff ff       	call   c000fb8f <malloc>
c001613f:	31 d2                	xor    edx,edx
c0016141:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016145:	83 c4 0c             	add    esp,0xc
c0016148:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001614c:	52                   	push   edx
c001614d:	50                   	push   eax
c001614e:	55                   	push   ebp
c001614f:	e8 12 21 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0016154:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016157:	31 d2                	xor    edx,edx
c0016159:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001615c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016160:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016164:	52                   	push   edx
c0016165:	50                   	push   eax
c0016166:	55                   	push   ebp
c0016167:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001616a:	83 c4 20             	add    esp,0x20
c001616d:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0016172:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001617a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001617e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016182:	39 34 24             	cmp    DWORD PTR [esp],esi
c0016185:	0f 84 1e 03 00 00    	je     c00164a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70a>
c001618b:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c0016192:	31 d2                	xor    edx,edx
c0016194:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016198:	c1 e8 03             	shr    eax,0x3
c001619b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001619f:	56                   	push   esi
c00161a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00161a4:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00161a8:	52                   	push   edx
c00161a9:	50                   	push   eax
c00161aa:	55                   	push   ebp
c00161ab:	e8 b6 20 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00161b0:	58                   	pop    eax
c00161b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161b5:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00161bc:	e8 ce 99 ff ff       	call   c000fb8f <malloc>
c00161c1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00161c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00161c8:	31 d2                	xor    edx,edx
c00161ca:	58                   	pop    eax
c00161cb:	8d 44 24 58          	lea    eax,[esp+0x58]
c00161cf:	50                   	push   eax
c00161d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00161d8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00161df:	52                   	push   edx
c00161e0:	50                   	push   eax
c00161e1:	55                   	push   ebp
c00161e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00161e5:	83 c4 20             	add    esp,0x20
c00161e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00161f0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00161f4:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00161f8:	0f 8d 8f 02 00 00    	jge    c001648d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ee>
c00161fe:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016202:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016206:	31 c9                	xor    ecx,ecx
c0016208:	8b 04 f0             	mov    eax,DWORD PTR [eax+esi*8]
c001620b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001620f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016213:	8b 44 f0 04          	mov    eax,DWORD PTR [eax+esi*8+0x4]
c0016217:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001621b:	c1 e8 08             	shr    eax,0x8
c001621e:	89 c3                	mov    ebx,eax
c0016220:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016224:	c1 e3 04             	shl    ebx,0x4
c0016227:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
c001622b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001622e:	85 d2                	test   edx,edx
c0016230:	0f 85 97 00 00 00    	jne    c00162cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c0016236:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001623a:	83 ec 0c             	sub    esp,0xc
c001623d:	03 33                	add    esi,DWORD PTR [ebx]
c001623f:	56                   	push   esi
c0016240:	e8 4d f8 ff ff       	call   c0015a92 <Thr::getAddressOfKernelSymbol(char const*)>
c0016245:	83 c4 10             	add    esp,0x10
c0016248:	89 c2                	mov    edx,eax
c001624a:	b1 01                	mov    cl,0x1
c001624c:	85 c0                	test   eax,eax
c001624e:	75 7d                	jne    c00162cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c0016250:	88 4c 24 3c          	mov    BYTE PTR [esp+0x3c],cl
c0016254:	83 ec 0c             	sub    esp,0xc
c0016257:	56                   	push   esi
c0016258:	e8 b3 a8 ff ff       	call   c0010b10 <KeResolveCompatibilitySymbol(char*)>
c001625d:	83 c4 10             	add    esp,0x10
c0016260:	89 c2                	mov    edx,eax
c0016262:	85 c0                	test   eax,eax
c0016264:	8a 4c 24 3c          	mov    cl,BYTE PTR [esp+0x3c]
c0016268:	75 63                	jne    c00162cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c001626a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001626e:	51                   	push   ecx
c001626f:	51                   	push   ecx
c0016270:	56                   	push   esi
c0016271:	68 97 4e 02 c0       	push   0xc0024e97
c0016276:	e8 01 0d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001627b:	5e                   	pop    esi
c001627c:	58                   	pop    eax
c001627d:	68 b1 4e 02 c0       	push   0xc0024eb1
c0016282:	8d b4 24 5c 02 00 00 	lea    esi,[esp+0x25c]
c0016289:	56                   	push   esi
c001628a:	e8 b1 a3 fe ff       	call   c0000640 <strcpy>
c001628f:	58                   	pop    eax
c0016290:	5a                   	pop    edx
c0016291:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016295:	03 03                	add    eax,DWORD PTR [ebx]
c0016297:	50                   	push   eax
c0016298:	56                   	push   esi
c0016299:	e8 a2 a5 fe ff       	call   c0000840 <strcat>
c001629e:	59                   	pop    ecx
c001629f:	5b                   	pop    ebx
c00162a0:	68 4b 4f 02 c0       	push   0xc0024f4b
c00162a5:	56                   	push   esi
c00162a6:	e8 95 a5 fe ff       	call   c0000840 <strcat>
c00162ab:	83 c4 10             	add    esp,0x10
c00162ae:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00162b3:	0f 84 8e 01 00 00    	je     c0016447 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00162b9:	83 ec 0c             	sub    esp,0xc
c00162bc:	56                   	push   esi
c00162bd:	e8 24 9d ff ff       	call   c000ffe6 <KePanic(char const*)>
c00162c2:	83 c4 10             	add    esp,0x10
c00162c5:	8a 4c 24 37          	mov    cl,BYTE PTR [esp+0x37]
c00162c9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00162cd:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00162d2:	83 f8 01             	cmp    eax,0x1
c00162d5:	0f 85 ab 00 00 00    	jne    c0016386 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e7>
c00162db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162df:	8b 9c 24 74 03 00 00 	mov    ebx,DWORD PTR [esp+0x374]
c00162e6:	2b 5c 24 1c          	sub    ebx,DWORD PTR [esp+0x1c]
c00162ea:	01 d8                	add    eax,ebx
c00162ec:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c00162f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00162f8:	0f 94 44 24 3c       	sete   BYTE PTR [esp+0x3c]
c00162fd:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c0016305:	0f 94 c0             	sete   al
c0016308:	89 c6                	mov    esi,eax
c001630a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001630e:	0b 74 24 3c          	or     esi,DWORD PTR [esp+0x3c]
c0016312:	8b 00                	mov    eax,DWORD PTR [eax]
c0016314:	84 c9                	test   cl,cl
c0016316:	89 f1                	mov    ecx,esi
c0016318:	0f b6 f1             	movzx  esi,cl
c001631b:	74 39                	je     c0016356 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b7>
c001631d:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0016320:	85 f6                	test   esi,esi
c0016322:	75 15                	jne    c0016339 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59a>
c0016324:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016328:	66 83 f8 0c          	cmp    ax,0xc
c001632c:	76 05                	jbe    c0016333 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x594>
c001632e:	b8 0c 00 00 00       	mov    eax,0xc
c0016333:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0016337:	76 42                	jbe    c001637b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c0016339:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001633e:	0f 84 03 01 00 00    	je     c0016447 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016344:	83 ec 0c             	sub    esp,0xc
c0016347:	68 c8 4e 02 c0       	push   0xc0024ec8
c001634c:	e8 95 9c ff ff       	call   c000ffe6 <KePanic(char const*)>
c0016351:	83 c4 10             	add    esp,0x10
c0016354:	eb 25                	jmp    c001637b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c0016356:	01 c3                	add    ebx,eax
c0016358:	85 f6                	test   esi,esi
c001635a:	89 d8                	mov    eax,ebx
c001635c:	75 0d                	jne    c001636b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001635e:	0f b7 4f 30          	movzx  ecx,WORD PTR [edi+0x30]
c0016362:	3b 4c 24 24          	cmp    ecx,DWORD PTR [esp+0x24]
c0016366:	77 03                	ja     c001636b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0016368:	8d 04 1a             	lea    eax,[edx+ebx*1]
c001636b:	8d 90 00 00 00 28    	lea    edx,[eax+0x28000000]
c0016371:	81 fa ff ff ff 00    	cmp    edx,0xffffff
c0016377:	76 02                	jbe    c001637b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c0016379:	89 c3                	mov    ebx,eax
c001637b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001637f:	89 18                	mov    DWORD PTR [eax],ebx
c0016381:	e9 fe 00 00 00       	jmp    c0016484 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c0016386:	83 f8 02             	cmp    eax,0x2
c0016389:	0f 85 8f 00 00 00    	jne    c001641e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001638f:	8b 9c 24 74 03 00 00 	mov    ebx,DWORD PTR [esp+0x374]
c0016396:	2b 5c 24 1c          	sub    ebx,DWORD PTR [esp+0x1c]
c001639a:	03 5c 24 20          	add    ebx,DWORD PTR [esp+0x20]
c001639e:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c00163a6:	74 21                	je     c00163c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c00163a8:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c00163b0:	74 17                	je     c00163c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c00163b2:	0f b7 77 30          	movzx  esi,WORD PTR [edi+0x30]
c00163b6:	b8 0a 00 00 00       	mov    eax,0xa
c00163bb:	83 fe 0e             	cmp    esi,0xe
c00163be:	77 03                	ja     c00163c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c00163c0:	8d 46 fc             	lea    eax,[esi-0x4]
c00163c3:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00163c7:	76 27                	jbe    c00163f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x651>
c00163c9:	88 4c 24 24          	mov    BYTE PTR [esp+0x24],cl
c00163cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00163d1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00163d6:	74 6f                	je     c0016447 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00163d8:	83 ec 0c             	sub    esp,0xc
c00163db:	68 e4 4e 02 c0       	push   0xc0024ee4
c00163e0:	e8 01 9c ff ff       	call   c000ffe6 <KePanic(char const*)>
c00163e5:	83 c4 10             	add    esp,0x10
c00163e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163ec:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
c00163f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163f2:	84 c9                	test   cl,cl
c00163f4:	74 13                	je     c0016409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00163f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00163fa:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0016401:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0016405:	01 c1                	add    ecx,eax
c0016407:	eb 06                	jmp    c001640f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0016409:	89 c1                	mov    ecx,eax
c001640b:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c001640f:	01 ca                	add    edx,ecx
c0016411:	3d fe ff 0f 00       	cmp    eax,0xffffe
c0016416:	77 02                	ja     c001641a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0016418:	89 c2                	mov    edx,eax
c001641a:	89 13                	mov    DWORD PTR [ebx],edx
c001641c:	eb 66                	jmp    c0016484 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c001641e:	52                   	push   edx
c001641f:	52                   	push   edx
c0016420:	50                   	push   eax
c0016421:	68 00 4f 02 c0       	push   0xc0024f00
c0016426:	e8 51 0b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001642b:	83 c4 10             	add    esp,0x10
c001642e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016433:	74 12                	je     c0016447 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016435:	83 ec 0c             	sub    esp,0xc
c0016438:	68 0b 4f 02 c0       	push   0xc0024f0b
c001643d:	e8 a4 9b ff ff       	call   c000ffe6 <KePanic(char const*)>
c0016442:	83 c4 10             	add    esp,0x10
c0016445:	eb 3d                	jmp    c0016484 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c0016447:	83 ec 0c             	sub    esp,0xc
c001644a:	55                   	push   ebp
c001644b:	e8 b6 1d ff ff       	call   c0008206 <File::close()>
c0016450:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016453:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016456:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016459:	59                   	pop    ecx
c001645a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001645e:	e8 3c 97 ff ff       	call   c000fb9f <free>
c0016463:	5b                   	pop    ebx
c0016464:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016468:	e8 32 97 ff ff       	call   c000fb9f <free>
c001646d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016470:	e8 2a 97 ff ff       	call   c000fb9f <free>
c0016475:	5e                   	pop    esi
c0016476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001647a:	e8 20 97 ff ff       	call   c000fb9f <free>
c001647f:	83 c4 10             	add    esp,0x10
c0016482:	eb 21                	jmp    c00164a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0016484:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016488:	e9 63 fd ff ff       	jmp    c00161f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x451>
c001648d:	83 ec 0c             	sub    esp,0xc
c0016490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016494:	e8 06 97 ff ff       	call   c000fb9f <free>
c0016499:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001649d:	83 c4 10             	add    esp,0x10
c00164a0:	e9 d9 fc ff ff       	jmp    c001617e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00164a5:	31 c0                	xor    eax,eax
c00164a7:	eb 33                	jmp    c00164dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73d>
c00164a9:	83 ec 0c             	sub    esp,0xc
c00164ac:	55                   	push   ebp
c00164ad:	e8 54 1d ff ff       	call   c0008206 <File::close()>
c00164b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00164b5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00164b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00164bb:	58                   	pop    eax
c00164bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00164c0:	e8 da 96 ff ff       	call   c000fb9f <free>
c00164c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00164c8:	e8 d2 96 ff ff       	call   c000fb9f <free>
c00164cd:	5a                   	pop    edx
c00164ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164d2:	e8 c8 96 ff ff       	call   c000fb9f <free>
c00164d7:	83 c4 10             	add    esp,0x10
c00164da:	b0 01                	mov    al,0x1
c00164dc:	81 c4 5c 03 00 00    	add    esp,0x35c
c00164e2:	5b                   	pop    ebx
c00164e3:	5e                   	pop    esi
c00164e4:	5f                   	pop    edi
c00164e5:	5d                   	pop    ebp
c00164e6:	c3                   	ret    

c00164e7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00164e7:	56                   	push   esi
c00164e8:	31 d2                	xor    edx,edx
c00164ea:	53                   	push   ebx
c00164eb:	8b 1d 60 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f260
c00164f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164f5:	39 d3                	cmp    ebx,edx
c00164f7:	7e 1b                	jle    c0016514 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00164f9:	8b 04 95 80 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b80]
c0016500:	39 c8                	cmp    eax,ecx
c0016502:	77 0d                	ja     c0016511 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016504:	8b 34 95 80 f2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0d80]
c001650b:	01 c6                	add    esi,eax
c001650d:	39 ce                	cmp    esi,ecx
c001650f:	77 05                	ja     c0016516 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0016511:	42                   	inc    edx
c0016512:	eb e1                	jmp    c00164f5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016514:	31 c0                	xor    eax,eax
c0016516:	5b                   	pop    ebx
c0016517:	5e                   	pop    esi
c0016518:	c3                   	ret    

c0016519 <Thr::getDriverNameFromAddress(unsigned long)>:
c0016519:	53                   	push   ebx
c001651a:	31 c0                	xor    eax,eax
c001651c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016520:	8b 1d 60 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f260
c0016526:	39 c3                	cmp    ebx,eax
c0016528:	7e 22                	jle    c001654c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001652a:	8b 14 85 80 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b80]
c0016531:	39 ca                	cmp    edx,ecx
c0016533:	77 14                	ja     c0016549 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016535:	03 14 85 80 f2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0d80]
c001653c:	39 ca                	cmp    edx,ecx
c001653e:	76 09                	jbe    c0016549 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016540:	8b 04 85 80 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0980]
c0016547:	eb 05                	jmp    c001654e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0016549:	40                   	inc    eax
c001654a:	eb da                	jmp    c0016526 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001654c:	31 c0                	xor    eax,eax
c001654e:	5b                   	pop    ebx
c001654f:	c3                   	ret    

c0016550 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0016550:	53                   	push   ebx
c0016551:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016555:	53                   	push   ebx
c0016556:	e8 8c ff ff ff       	call   c00164e7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001655b:	5a                   	pop    edx
c001655c:	31 d2                	xor    edx,edx
c001655e:	85 c0                	test   eax,eax
c0016560:	74 04                	je     c0016566 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0016562:	89 da                	mov    edx,ebx
c0016564:	29 c2                	sub    edx,eax
c0016566:	89 d0                	mov    eax,edx
c0016568:	5b                   	pop    ebx
c0016569:	c3                   	ret    

c001656a <Thr::loadDLL(char const*, bool)>:
c001656a:	55                   	push   ebp
c001656b:	57                   	push   edi
c001656c:	56                   	push   esi
c001656d:	53                   	push   ebx
c001656e:	81 ec 34 01 00 00    	sub    esp,0x134
c0016574:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001657b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016582:	56                   	push   esi
c0016583:	68 23 4f 02 c0       	push   0xc0024f23
c0016588:	e8 ef 09 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001658d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016594:	e8 f6 95 ff ff       	call   c000fb8f <malloc>
c0016599:	83 c4 0c             	add    esp,0xc
c001659c:	89 c3                	mov    ebx,eax
c001659e:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c00165a4:	56                   	push   esi
c00165a5:	50                   	push   eax
c00165a6:	e8 df 1b ff ff       	call   c000818a <File::File(char const*, Process*)>
c00165ab:	83 c4 10             	add    esp,0x10
c00165ae:	85 db                	test   ebx,ebx
c00165b0:	75 3c                	jne    c00165ee <Thr::loadDLL(char const*, bool)+0x84>
c00165b2:	89 f8                	mov    eax,edi
c00165b4:	84 c0                	test   al,al
c00165b6:	0f 84 f3 01 00 00    	je     c00167af <Thr::loadDLL(char const*, bool)+0x245>
c00165bc:	55                   	push   ebp
c00165bd:	55                   	push   ebp
c00165be:	68 34 4f 02 c0       	push   0xc0024f34
c00165c3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00165c7:	55                   	push   ebp
c00165c8:	e8 73 a0 fe ff       	call   c0000640 <strcpy>
c00165cd:	58                   	pop    eax
c00165ce:	5a                   	pop    edx
c00165cf:	56                   	push   esi
c00165d0:	55                   	push   ebp
c00165d1:	e8 6a a2 fe ff       	call   c0000840 <strcat>
c00165d6:	59                   	pop    ecx
c00165d7:	58                   	pop    eax
c00165d8:	68 4b 4f 02 c0       	push   0xc0024f4b
c00165dd:	55                   	push   ebp
c00165de:	e8 5d a2 fe ff       	call   c0000840 <strcat>
c00165e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00165e6:	e8 fb 99 ff ff       	call   c000ffe6 <KePanic(char const*)>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	51                   	push   ecx
c00165ef:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00165f3:	50                   	push   eax
c00165f4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00165f8:	50                   	push   eax
c00165f9:	53                   	push   ebx
c00165fa:	e8 ab 1e ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00165ff:	83 c4 10             	add    esp,0x10
c0016602:	89 c5                	mov    ebp,eax
c0016604:	85 db                	test   ebx,ebx
c0016606:	74 0c                	je     c0016614 <Thr::loadDLL(char const*, bool)+0xaa>
c0016608:	83 ec 0c             	sub    esp,0xc
c001660b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001660d:	53                   	push   ebx
c001660e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016611:	83 c4 10             	add    esp,0x10
c0016614:	83 ec 0c             	sub    esp,0xc
c0016617:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001661c:	50                   	push   eax
c001661d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016621:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016625:	55                   	push   ebp
c0016626:	68 4d 4f 02 c0       	push   0xc0024f4d
c001662b:	e8 4c 09 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016630:	83 c4 20             	add    esp,0x20
c0016633:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016638:	75 0a                	jne    c0016644 <Thr::loadDLL(char const*, bool)+0xda>
c001663a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001663e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016642:	75 3c                	jne    c0016680 <Thr::loadDLL(char const*, bool)+0x116>
c0016644:	89 f8                	mov    eax,edi
c0016646:	84 c0                	test   al,al
c0016648:	0f 84 49 01 00 00    	je     c0016797 <Thr::loadDLL(char const*, bool)+0x22d>
c001664e:	51                   	push   ecx
c001664f:	51                   	push   ecx
c0016650:	68 6e 4f 02 c0       	push   0xc0024f6e
c0016655:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0016659:	53                   	push   ebx
c001665a:	e8 e1 9f fe ff       	call   c0000640 <strcpy>
c001665f:	5d                   	pop    ebp
c0016660:	58                   	pop    eax
c0016661:	56                   	push   esi
c0016662:	53                   	push   ebx
c0016663:	e8 d8 a1 fe ff       	call   c0000840 <strcat>
c0016668:	58                   	pop    eax
c0016669:	5a                   	pop    edx
c001666a:	68 4b 4f 02 c0       	push   0xc0024f4b
c001666f:	53                   	push   ebx
c0016670:	e8 cb a1 fe ff       	call   c0000840 <strcat>
c0016675:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016678:	e8 69 99 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001667d:	83 c4 10             	add    esp,0x10
c0016680:	52                   	push   edx
c0016681:	6a 03                	push   0x3
c0016683:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016687:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001668b:	05 ff 0f 00 00       	add    eax,0xfff
c0016690:	83 d2 00             	adc    edx,0x0
c0016693:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016697:	50                   	push   eax
c0016698:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c001669e:	e8 6b d7 ff ff       	call   c0013e0e <VAS::allocatePages(int, int)>
c00166a3:	59                   	pop    ecx
c00166a4:	89 c3                	mov    ebx,eax
c00166a6:	5d                   	pop    ebp
c00166a7:	50                   	push   eax
c00166a8:	68 5a 44 02 c0       	push   0xc002445a
c00166ad:	e8 ca 08 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00166b2:	89 34 24             	mov    DWORD PTR [esp],esi
c00166b5:	e8 b6 9e fe ff       	call   c0000570 <strlen>
c00166ba:	8b 2d 60 f2 02 c0    	mov    ebp,DWORD PTR ds:0xc002f260
c00166c0:	40                   	inc    eax
c00166c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00166c4:	e8 c6 94 ff ff       	call   c000fb8f <malloc>
c00166c9:	89 04 ad 80 f6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd0980],eax
c00166d0:	58                   	pop    eax
c00166d1:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c00166d6:	5a                   	pop    edx
c00166d7:	56                   	push   esi
c00166d8:	ff 34 85 80 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0980]
c00166df:	e8 5c 9f fe ff       	call   c0000640 <strcpy>
c00166e4:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c00166e9:	8d 50 01             	lea    edx,[eax+0x1]
c00166ec:	89 1c 85 80 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b80],ebx
c00166f3:	89 15 60 f2 02 c0    	mov    DWORD PTR ds:0xc002f260,edx
c00166f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166fd:	83 c4 0c             	add    esp,0xc
c0016700:	89 14 85 80 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d80],edx
c0016707:	6a 01                	push   0x1
c0016709:	53                   	push   ebx
c001670a:	56                   	push   esi
c001670b:	e8 8f f6 ff ff       	call   c0015d9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016710:	83 c4 10             	add    esp,0x10
c0016713:	0f b6 c0             	movzx  eax,al
c0016716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001671a:	85 c0                	test   eax,eax
c001671c:	0f 85 89 00 00 00    	jne    c00167ab <Thr::loadDLL(char const*, bool)+0x241>
c0016722:	89 f8                	mov    eax,edi
c0016724:	84 c0                	test   al,al
c0016726:	74 73                	je     c001679b <Thr::loadDLL(char const*, bool)+0x231>
c0016728:	83 ec 0c             	sub    esp,0xc
c001672b:	68 87 4f 02 c0       	push   0xc0024f87
c0016730:	e8 b1 98 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0016735:	83 c4 10             	add    esp,0x10
c0016738:	eb 61                	jmp    c001679b <Thr::loadDLL(char const*, bool)+0x231>
c001673a:	50                   	push   eax
c001673b:	50                   	push   eax
c001673c:	89 e8                	mov    eax,ebp
c001673e:	c1 e0 0c             	shl    eax,0xc
c0016741:	01 d8                	add    eax,ebx
c0016743:	50                   	push   eax
c0016744:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c001674a:	e8 c1 d1 ff ff       	call   c0013910 <VAS::getPageTableEntry(unsigned long)>
c001674f:	83 c4 10             	add    esp,0x10
c0016752:	8b 00                	mov    eax,DWORD PTR [eax]
c0016754:	a8 60                	test   al,0x60
c0016756:	75 11                	jne    c0016769 <Thr::loadDLL(char const*, bool)+0x1ff>
c0016758:	83 ec 0c             	sub    esp,0xc
c001675b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016760:	50                   	push   eax
c0016761:	e8 0b 9a ff ff       	call   c0010171 <Phys::freePage(unsigned long)>
c0016766:	83 c4 10             	add    esp,0x10
c0016769:	45                   	inc    ebp
c001676a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001676e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016772:	05 ff 0f 00 00       	add    eax,0xfff
c0016777:	bf 00 00 00 00       	mov    edi,0x0
c001677c:	83 d2 00             	adc    edx,0x0
c001677f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016783:	c1 ea 0c             	shr    edx,0xc
c0016786:	39 c5                	cmp    ebp,eax
c0016788:	89 d1                	mov    ecx,edx
c001678a:	89 f8                	mov    eax,edi
c001678c:	19 c8                	sbb    eax,ecx
c001678e:	72 aa                	jb     c001673a <Thr::loadDLL(char const*, bool)+0x1d0>
c0016790:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016795:	75 18                	jne    c00167af <Thr::loadDLL(char const*, bool)+0x245>
c0016797:	31 db                	xor    ebx,ebx
c0016799:	eb 14                	jmp    c00167af <Thr::loadDLL(char const*, bool)+0x245>
c001679b:	83 ec 0c             	sub    esp,0xc
c001679e:	68 a6 4f 02 c0       	push   0xc0024fa6
c00167a3:	e8 3e 98 ff ff       	call   c000ffe6 <KePanic(char const*)>
c00167a8:	83 c4 10             	add    esp,0x10
c00167ab:	31 ed                	xor    ebp,ebp
c00167ad:	eb bb                	jmp    c001676a <Thr::loadDLL(char const*, bool)+0x200>
c00167af:	81 c4 2c 01 00 00    	add    esp,0x12c
c00167b5:	89 d8                	mov    eax,ebx
c00167b7:	5b                   	pop    ebx
c00167b8:	5e                   	pop    esi
c00167b9:	5f                   	pop    edi
c00167ba:	5d                   	pop    ebp
c00167bb:	c3                   	ret    

c00167bc <Thr::executeDLL(unsigned long, void*)>:
c00167bc:	56                   	push   esi
c00167bd:	53                   	push   ebx
c00167be:	52                   	push   edx
c00167bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00167c7:	85 db                	test   ebx,ebx
c00167c9:	75 10                	jne    c00167db <Thr::executeDLL(unsigned long, void*)+0x1f>
c00167cb:	83 ec 0c             	sub    esp,0xc
c00167ce:	68 c2 4f 02 c0       	push   0xc0024fc2
c00167d3:	e8 0e 98 ff ff       	call   c000ffe6 <KePanic(char const*)>
c00167d8:	83 c4 10             	add    esp,0x10
c00167db:	50                   	push   eax
c00167dc:	50                   	push   eax
c00167dd:	53                   	push   ebx
c00167de:	68 ec 4f 02 c0       	push   0xc0024fec
c00167e3:	e8 94 07 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00167e8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00167ec:	89 d8                	mov    eax,ebx
c00167ee:	83 c4 14             	add    esp,0x14
c00167f1:	5b                   	pop    ebx
c00167f2:	5e                   	pop    esi
c00167f3:	ff e0                	jmp    eax

c00167f5 <KeProcessExec(Process*, char const*)>:
c00167f5:	56                   	push   esi
c00167f6:	53                   	push   ebx
c00167f7:	83 ec 04             	sub    esp,0x4
c00167fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167fe:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016804:	85 f6                	test   esi,esi
c0016806:	74 16                	je     c001681e <KeProcessExec(Process*, char const*)+0x29>
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	56                   	push   esi
c001680c:	e8 91 d3 ff ff       	call   c0013ba2 <VAS::~VAS()>
c0016811:	58                   	pop    eax
c0016812:	5a                   	pop    edx
c0016813:	6a 14                	push   0x14
c0016815:	56                   	push   esi
c0016816:	e8 ce 6b ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001681b:	83 c4 10             	add    esp,0x10
c001681e:	83 ec 0c             	sub    esp,0xc
c0016821:	6a 14                	push   0x14
c0016823:	e8 67 93 ff ff       	call   c000fb8f <malloc>
c0016828:	89 c6                	mov    esi,eax
c001682a:	58                   	pop    eax
c001682b:	5a                   	pop    edx
c001682c:	6a 00                	push   0x0
c001682e:	56                   	push   esi
c001682f:	e8 0e d8 ff ff       	call   c0014042 <VAS::VAS(bool)>
c0016834:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c001683a:	59                   	pop    ecx
c001683b:	5e                   	pop    esi
c001683c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016840:	50                   	push   eax
c0016841:	53                   	push   ebx
c0016842:	e8 a0 ef ff ff       	call   c00157e7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016847:	83 c4 14             	add    esp,0x14
c001684a:	31 c0                	xor    eax,eax
c001684c:	5b                   	pop    ebx
c001684d:	5e                   	pop    esi
c001684e:	c3                   	ret    
c001684f:	90                   	nop

c0016850 <userModeEntryPoint(void*)>:
c0016850:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0016858:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001685d:	85 c0                	test   eax,eax
c001685f:	75 03                	jne    c0016864 <userModeEntryPoint(void*)+0x14>
c0016861:	fb                   	sti    
c0016862:	66 90                	xchg   ax,ax
c0016864:	fb                   	sti    
c0016865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001686a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001686d:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0016873:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016877:	e9 c3 99 fe ff       	jmp    c000023f <goToUsermode>

c001687c <changeTSS>:
c001687c:	83 ec 14             	sub    esp,0x14
c001687f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016884:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0016887:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001688c:	c1 e2 15             	shl    edx,0x15
c001688f:	29 d0                	sub    eax,edx
c0016891:	50                   	push   eax
c0016892:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0016897:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001689d:	05 68 11 00 00       	add    eax,0x1168
c00168a2:	50                   	push   eax
c00168a3:	e8 40 c6 ff ff       	call   c0012ee8 <TSS::setESP(unsigned long)>
c00168a8:	83 c4 1c             	add    esp,0x1c
c00168ab:	c3                   	ret    

c00168ac <switchToThread(ThreadControlBlock*)>:
c00168ac:	57                   	push   edi
c00168ad:	8b 0d 2c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa2c
c00168b3:	56                   	push   esi
c00168b4:	85 c9                	test   ecx,ecx
c00168b6:	53                   	push   ebx
c00168b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168bb:	0f 85 9b 00 00 00    	jne    c001695c <switchToThread(ThreadControlBlock*)+0xb0>
c00168c1:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c00168c5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00168cb:	0f 84 87 00 00 00    	je     c0016958 <switchToThread(ThreadControlBlock*)+0xac>
c00168d1:	b8 00 04 00 00       	mov    eax,0x400
c00168d6:	29 d0                	sub    eax,edx
c00168d8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00168db:	d1 f8                	sar    eax,1
c00168dd:	01 d0                	add    eax,edx
c00168df:	90                   	nop
c00168e0:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00168e3:	e8 ad 3e 00 00       	call   c001a795 <HalQueryPerformanceCounter()>
c00168e8:	a3 70 fa 02 c0       	mov    ds:0xc002fa70,eax
c00168ed:	89 15 74 fa 02 c0    	mov    DWORD PTR ds:0xc002fa74,edx
c00168f3:	89 c6                	mov    esi,eax
c00168f5:	89 d7                	mov    edi,edx
c00168f7:	2b 35 60 fa 02 c0    	sub    esi,DWORD PTR ds:0xc002fa60
c00168fd:	a3 60 fa 02 c0       	mov    ds:0xc002fa60,eax
c0016902:	1b 3d 64 fa 02 c0    	sbb    edi,DWORD PTR ds:0xc002fa64
c0016908:	89 35 68 fa 02 c0    	mov    DWORD PTR ds:0xc002fa68,esi
c001690e:	89 3d 6c fa 02 c0    	mov    DWORD PTR ds:0xc002fa6c,edi
c0016914:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001691a:	89 15 64 fa 02 c0    	mov    DWORD PTR ds:0xc002fa64,edx
c0016920:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016923:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016926:	01 c6                	add    esi,eax
c0016928:	11 d7                	adc    edi,edx
c001692a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001692d:	83 ec 0c             	sub    esp,0xc
c0016930:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016933:	53                   	push   ebx
c0016934:	e8 3e 99 fe ff       	call   c0000277 <switchToThreadASM>
c0016939:	0f 20 c0             	mov    eax,cr0
c001693c:	83 c8 08             	or     eax,0x8
c001693f:	0f 22 c0             	mov    cr0,eax
c0016942:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016947:	83 c4 10             	add    esp,0x10
c001694a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001694e:	5b                   	pop    ebx
c001694f:	5e                   	pop    esi
c0016950:	5f                   	pop    edi
c0016951:	e9 0e eb ff ff       	jmp    c0015464 <KeCheckAlarm(ThreadControlBlock*)>
c0016956:	66 90                	xchg   ax,ax
c0016958:	31 c0                	xor    eax,eax
c001695a:	eb 84                	jmp    c00168e0 <switchToThread(ThreadControlBlock*)+0x34>
c001695c:	5b                   	pop    ebx
c001695d:	c7 05 28 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x1
c0016967:	5e                   	pop    esi
c0016968:	5f                   	pop    edi
c0016969:	c3                   	ret    
c001696a:	66 90                	xchg   ax,ax

c001696c <Process::addArgs(char**)>:
c001696c:	57                   	push   edi
c001696d:	56                   	push   esi
c001696e:	53                   	push   ebx
c001696f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016973:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016977:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c0016981:	85 ff                	test   edi,edi
c0016983:	74 4f                	je     c00169d4 <Process::addArgs(char**)+0x68>
c0016985:	8b 07                	mov    eax,DWORD PTR [edi]
c0016987:	85 c0                	test   eax,eax
c0016989:	74 49                	je     c00169d4 <Process::addArgs(char**)+0x68>
c001698b:	31 db                	xor    ebx,ebx
c001698d:	8d 76 00             	lea    esi,[esi+0x0]
c0016990:	83 ec 0c             	sub    esp,0xc
c0016993:	50                   	push   eax
c0016994:	e8 d7 9b fe ff       	call   c0000570 <strlen>
c0016999:	83 c0 01             	add    eax,0x1
c001699c:	89 04 24             	mov    DWORD PTR [esp],eax
c001699f:	e8 eb 91 ff ff       	call   c000fb8f <malloc>
c00169a4:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c00169ab:	5a                   	pop    edx
c00169ac:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00169af:	59                   	pop    ecx
c00169b0:	83 c3 01             	add    ebx,0x1
c00169b3:	52                   	push   edx
c00169b4:	50                   	push   eax
c00169b5:	e8 86 9c fe ff       	call   c0000640 <strcpy>
c00169ba:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c00169c0:	83 c4 10             	add    esp,0x10
c00169c3:	83 c1 01             	add    ecx,0x1
c00169c6:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c00169cc:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00169cf:	85 c0                	test   eax,eax
c00169d1:	75 bd                	jne    c0016990 <Process::addArgs(char**)+0x24>
c00169d3:	90                   	nop
c00169d4:	5b                   	pop    ebx
c00169d5:	5e                   	pop    esi
c00169d6:	5f                   	pop    edi
c00169d7:	c3                   	ret    

c00169d8 <Process::Process(char const*, Process*, char**)>:
c00169d8:	56                   	push   esi
c00169d9:	53                   	push   ebx
c00169da:	83 ec 14             	sub    esp,0x14
c00169dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e1:	05 0c 02 00 00       	add    eax,0x20c
c00169e6:	bb 07 00 00 00       	mov    ebx,0x7
c00169eb:	89 c6                	mov    esi,eax
c00169ed:	8d 76 00             	lea    esi,[esi+0x0]
c00169f0:	85 db                	test   ebx,ebx
c00169f2:	78 14                	js     c0016a08 <Process::Process(char const*, Process*, char**)+0x30>
c00169f4:	83 ec 0c             	sub    esp,0xc
c00169f7:	56                   	push   esi
c00169f8:	e8 e3 ba 00 00       	call   c00224e0 <ThreadControlBlock::ThreadControlBlock()>
c00169fd:	83 c4 10             	add    esp,0x10
c0016a00:	83 c6 73             	add    esi,0x73
c0016a03:	83 eb 01             	sub    ebx,0x1
c0016a06:	eb e8                	jmp    c00169f0 <Process::Process(char const*, Process*, char**)+0x18>
c0016a08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a0c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a17:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016a1e:	83 ec 0c             	sub    esp,0xc
c0016a21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a25:	e8 de 7c ff ff       	call   c000e708 <KeNewProcessEnv(Process*)>
c0016a2a:	83 c4 10             	add    esp,0x10
c0016a2d:	89 c2                	mov    edx,eax
c0016a2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a33:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016a39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a3d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016a46:	a1 1c 6c 02 c0       	mov    eax,ds:0xc0026c1c
c0016a4b:	8d 50 01             	lea    edx,[eax+0x1]
c0016a4e:	89 15 1c 6c 02 c0    	mov    DWORD PTR ds:0xc0026c1c,edx
c0016a54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a58:	89 02                	mov    DWORD PTR [edx],eax
c0016a5a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016a62:	83 ec 0c             	sub    esp,0xc
c0016a65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a69:	e8 21 91 ff ff       	call   c000fb8f <malloc>
c0016a6e:	83 c4 10             	add    esp,0x10
c0016a71:	89 c3                	mov    ebx,eax
c0016a73:	83 ec 08             	sub    esp,0x8
c0016a76:	6a 00                	push   0x0
c0016a78:	53                   	push   ebx
c0016a79:	e8 c4 d5 ff ff       	call   c0014042 <VAS::VAS(bool)>
c0016a7e:	83 c4 10             	add    esp,0x10
c0016a81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a85:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016a8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a8f:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016a99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016aa1:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016aa7:	e8 57 a7 ff ff       	call   c0011203 <KeInitSignals()>
c0016aac:	89 c2                	mov    edx,eax
c0016aae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab2:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016abc:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ac2:	85 c0                	test   eax,eax
c0016ac4:	74 42                	je     c0016b08 <Process::Process(char const*, Process*, char**)+0x130>
c0016ac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aca:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ad0:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016ad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ada:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016ae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ae4:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016aea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af4:	05 0c 01 00 00       	add    eax,0x10c
c0016af9:	83 ec 08             	sub    esp,0x8
c0016afc:	52                   	push   edx
c0016afd:	50                   	push   eax
c0016afe:	e8 3d 9b fe ff       	call   c0000640 <strcpy>
c0016b03:	83 c4 10             	add    esp,0x10
c0016b06:	eb 7c                	jmp    c0016b84 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016b08:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016b10:	83 ec 0c             	sub    esp,0xc
c0016b13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b17:	e8 73 90 ff ff       	call   c000fb8f <malloc>
c0016b1c:	83 c4 10             	add    esp,0x10
c0016b1f:	89 c3                	mov    ebx,eax
c0016b21:	83 ec 08             	sub    esp,0x8
c0016b24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b28:	53                   	push   ebx
c0016b29:	e8 ba c0 ff ff       	call   c0012be8 <VgaText::VgaText(char const*)>
c0016b2e:	83 c4 10             	add    esp,0x10
c0016b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b35:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016b45:	83 ec 0c             	sub    esp,0xc
c0016b48:	50                   	push   eax
c0016b49:	e8 f0 b8 ff ff       	call   c001243e <addToTerminalCycle(VgaText*)>
c0016b4e:	83 c4 10             	add    esp,0x10
c0016b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b55:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016b5b:	83 ec 0c             	sub    esp,0xc
c0016b5e:	50                   	push   eax
c0016b5f:	e8 4b bb ff ff       	call   c00126af <setActiveTerminal(VgaText*)>
c0016b64:	83 c4 10             	add    esp,0x10
c0016b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b6b:	05 0c 01 00 00       	add    eax,0x10c
c0016b70:	83 ec 08             	sub    esp,0x8
c0016b73:	68 0b 50 02 c0       	push   0xc002500b
c0016b78:	50                   	push   eax
c0016b79:	e8 c2 9a fe ff       	call   c0000640 <strcpy>
c0016b7e:	83 c4 10             	add    esp,0x10
c0016b81:	8d 76 00             	lea    esi,[esi+0x0]
c0016b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b88:	83 c0 0c             	add    eax,0xc
c0016b8b:	83 ec 08             	sub    esp,0x8
c0016b8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b92:	50                   	push   eax
c0016b93:	e8 a8 9a fe ff       	call   c0000640 <strcpy>
c0016b98:	83 c4 10             	add    esp,0x10
c0016b9b:	83 ec 08             	sub    esp,0x8
c0016b9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ba6:	e8 c1 fd ff ff       	call   c001696c <Process::addArgs(char**)>
c0016bab:	83 c4 10             	add    esp,0x10
c0016bae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb2:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016bb8:	83 e2 7f             	and    edx,0x7f
c0016bbb:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016bc1:	83 ec 08             	sub    esp,0x8
c0016bc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016bc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016bcc:	e8 16 ec ff ff       	call   c00157e7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016bd1:	83 c4 10             	add    esp,0x10
c0016bd4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016bd8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016bdc:	83 f0 01             	xor    eax,0x1
c0016bdf:	88 c2                	mov    dl,al
c0016be1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be5:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016beb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bef:	8b 10                	mov    edx,DWORD PTR [eax]
c0016bf1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016bf6:	52                   	push   edx
c0016bf7:	50                   	push   eax
c0016bf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016bfc:	68 64 50 02 c0       	push   0xc0025064
c0016c01:	e8 76 03 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016c06:	83 c4 10             	add    esp,0x10
c0016c09:	90                   	nop
c0016c0a:	83 c4 14             	add    esp,0x14
c0016c0d:	5b                   	pop    ebx
c0016c0e:	5e                   	pop    esi
c0016c0f:	c3                   	ret    

c0016c10 <Process::Process(bool, char const*, Process*, char**)>:
c0016c10:	56                   	push   esi
c0016c11:	53                   	push   ebx
c0016c12:	83 ec 24             	sub    esp,0x24
c0016c15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c19:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016c1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c21:	05 0c 02 00 00       	add    eax,0x20c
c0016c26:	bb 07 00 00 00       	mov    ebx,0x7
c0016c2b:	89 c6                	mov    esi,eax
c0016c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c30:	85 db                	test   ebx,ebx
c0016c32:	78 14                	js     c0016c48 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016c34:	83 ec 0c             	sub    esp,0xc
c0016c37:	56                   	push   esi
c0016c38:	e8 a3 b8 00 00       	call   c00224e0 <ThreadControlBlock::ThreadControlBlock()>
c0016c3d:	83 c4 10             	add    esp,0x10
c0016c40:	83 c6 73             	add    esi,0x73
c0016c43:	83 eb 01             	sub    ebx,0x1
c0016c46:	eb e8                	jmp    c0016c30 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016c48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c4c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016c53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c57:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016c5e:	83 ec 0c             	sub    esp,0xc
c0016c61:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016c65:	e8 9e 7a ff ff       	call   c000e708 <KeNewProcessEnv(Process*)>
c0016c6a:	83 c4 10             	add    esp,0x10
c0016c6d:	89 c2                	mov    edx,eax
c0016c6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c73:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016c79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c7d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016c86:	a1 1c 6c 02 c0       	mov    eax,ds:0xc0026c1c
c0016c8b:	8d 50 01             	lea    edx,[eax+0x1]
c0016c8e:	89 15 1c 6c 02 c0    	mov    DWORD PTR ds:0xc0026c1c,edx
c0016c94:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016c98:	89 02                	mov    DWORD PTR [edx],eax
c0016c9a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016ca2:	83 ec 0c             	sub    esp,0xc
c0016ca5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016ca9:	e8 e1 8e ff ff       	call   c000fb8f <malloc>
c0016cae:	83 c4 10             	add    esp,0x10
c0016cb1:	89 c3                	mov    ebx,eax
c0016cb3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016cb8:	83 ec 08             	sub    esp,0x8
c0016cbb:	50                   	push   eax
c0016cbc:	53                   	push   ebx
c0016cbd:	e8 80 d3 ff ff       	call   c0014042 <VAS::VAS(bool)>
c0016cc2:	83 c4 10             	add    esp,0x10
c0016cc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cc9:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cd3:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016cdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ce1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016ce5:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016ceb:	e8 13 a5 ff ff       	call   c0011203 <KeInitSignals()>
c0016cf0:	89 c2                	mov    edx,eax
c0016cf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cf6:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016cfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d00:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016d06:	85 c0                	test   eax,eax
c0016d08:	74 42                	je     c0016d4c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016d0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d0e:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016d14:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016d1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d1e:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016d24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d28:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016d2e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016d34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d38:	05 0c 01 00 00       	add    eax,0x10c
c0016d3d:	83 ec 08             	sub    esp,0x8
c0016d40:	52                   	push   edx
c0016d41:	50                   	push   eax
c0016d42:	e8 f9 98 fe ff       	call   c0000640 <strcpy>
c0016d47:	83 c4 10             	add    esp,0x10
c0016d4a:	eb 7c                	jmp    c0016dc8 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016d4c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016d5b:	e8 2f 8e ff ff       	call   c000fb8f <malloc>
c0016d60:	83 c4 10             	add    esp,0x10
c0016d63:	89 c3                	mov    ebx,eax
c0016d65:	83 ec 08             	sub    esp,0x8
c0016d68:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d6c:	53                   	push   ebx
c0016d6d:	e8 76 be ff ff       	call   c0012be8 <VgaText::VgaText(char const*)>
c0016d72:	83 c4 10             	add    esp,0x10
c0016d75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d79:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016d7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d83:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016d89:	83 ec 0c             	sub    esp,0xc
c0016d8c:	50                   	push   eax
c0016d8d:	e8 ac b6 ff ff       	call   c001243e <addToTerminalCycle(VgaText*)>
c0016d92:	83 c4 10             	add    esp,0x10
c0016d95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d99:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016d9f:	83 ec 0c             	sub    esp,0xc
c0016da2:	50                   	push   eax
c0016da3:	e8 07 b9 ff ff       	call   c00126af <setActiveTerminal(VgaText*)>
c0016da8:	83 c4 10             	add    esp,0x10
c0016dab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016daf:	05 0c 01 00 00       	add    eax,0x10c
c0016db4:	83 ec 08             	sub    esp,0x8
c0016db7:	68 0b 50 02 c0       	push   0xc002500b
c0016dbc:	50                   	push   eax
c0016dbd:	e8 7e 98 fe ff       	call   c0000640 <strcpy>
c0016dc2:	83 c4 10             	add    esp,0x10
c0016dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0016dc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016dcc:	83 c0 0c             	add    eax,0xc
c0016dcf:	83 ec 08             	sub    esp,0x8
c0016dd2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016dd6:	50                   	push   eax
c0016dd7:	e8 64 98 fe ff       	call   c0000640 <strcpy>
c0016ddc:	83 c4 10             	add    esp,0x10
c0016ddf:	83 ec 08             	sub    esp,0x8
c0016de2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016de6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016dea:	e8 7d fb ff ff       	call   c001696c <Process::addArgs(char**)>
c0016def:	83 c4 10             	add    esp,0x10
c0016df2:	90                   	nop
c0016df3:	83 c4 24             	add    esp,0x24
c0016df6:	5b                   	pop    ebx
c0016df7:	5e                   	pop    esi
c0016df8:	c3                   	ret    
c0016df9:	8d 76 00             	lea    esi,[esi+0x0]

c0016dfc <taskStartupFunction>:
c0016dfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e01:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016e04:	c3                   	ret    
c0016e05:	8d 76 00             	lea    esi,[esi+0x0]

c0016e08 <KeDisablePreemption()>:
c0016e08:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c0016e0d:	85 c0                	test   eax,eax
c0016e0f:	75 13                	jne    c0016e24 <KeDisablePreemption()+0x1c>
c0016e11:	8a 15 cc d0 02 c0    	mov    dl,BYTE PTR ds:0xc002d0cc
c0016e17:	c6 05 cc d0 02 c0 00 	mov    BYTE PTR ds:0xc002d0cc,0x0
c0016e1e:	88 15 08 fa 02 c0    	mov    BYTE PTR ds:0xc002fa08,dl
c0016e24:	83 c0 01             	add    eax,0x1
c0016e27:	a3 0c fa 02 c0       	mov    ds:0xc002fa0c,eax
c0016e2c:	c3                   	ret    
c0016e2d:	8d 76 00             	lea    esi,[esi+0x0]

c0016e30 <KeRestorePreemption()>:
c0016e30:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c0016e35:	83 e8 01             	sub    eax,0x1
c0016e38:	a3 0c fa 02 c0       	mov    ds:0xc002fa0c,eax
c0016e3d:	75 0d                	jne    c0016e4c <KeRestorePreemption()+0x1c>
c0016e3f:	a0 08 fa 02 c0       	mov    al,ds:0xc002fa08
c0016e44:	a2 cc d0 02 c0       	mov    ds:0xc002d0cc,al
c0016e49:	8d 76 00             	lea    esi,[esi+0x0]
c0016e4c:	c3                   	ret    
c0016e4d:	90                   	nop
c0016e4e:	66 90                	xchg   ax,ax

c0016e50 <Process::createThread(void (*)(void*), void*, int)>:
c0016e50:	55                   	push   ebp
c0016e51:	31 c9                	xor    ecx,ecx
c0016e53:	57                   	push   edi
c0016e54:	56                   	push   esi
c0016e55:	53                   	push   ebx
c0016e56:	83 ec 0c             	sub    esp,0xc
c0016e59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016e5d:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016e64:	89 f2                	mov    edx,esi
c0016e66:	66 90                	xchg   ax,ax
c0016e68:	0f b7 c2             	movzx  eax,dx
c0016e6b:	80 e2 01             	and    dl,0x1
c0016e6e:	74 18                	je     c0016e88 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016e70:	d1 f8                	sar    eax,1
c0016e72:	83 c1 01             	add    ecx,0x1
c0016e75:	89 c2                	mov    edx,eax
c0016e77:	83 f9 10             	cmp    ecx,0x10
c0016e7a:	75 ec                	jne    c0016e68 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016e7c:	83 c4 0c             	add    esp,0xc
c0016e7f:	31 db                	xor    ebx,ebx
c0016e81:	89 d8                	mov    eax,ebx
c0016e83:	5b                   	pop    ebx
c0016e84:	5e                   	pop    esi
c0016e85:	5f                   	pop    edi
c0016e86:	5d                   	pop    ebp
c0016e87:	c3                   	ret    
c0016e88:	b8 01 00 00 00       	mov    eax,0x1
c0016e8d:	d3 e0                	shl    eax,cl
c0016e8f:	09 c6                	or     esi,eax
c0016e91:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016e94:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016e9b:	01 c0                	add    eax,eax
c0016e9d:	01 c8                	add    eax,ecx
c0016e9f:	01 c0                	add    eax,eax
c0016ea1:	01 c8                	add    eax,ecx
c0016ea3:	8d 04 80             	lea    eax,[eax+eax*4]
c0016ea6:	01 d8                	add    eax,ebx
c0016ea8:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016eaf:	75 0b                	jne    c0016ebc <Process::createThread(void (*)(void*), void*, int)+0x6c>
c0016eb1:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016ebb:	90                   	nop
c0016ebc:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016ec2:	83 ec 0c             	sub    esp,0xc
c0016ec5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016ec8:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016ecb:	01 c0                	add    eax,eax
c0016ecd:	01 c8                	add    eax,ecx
c0016ecf:	01 c0                	add    eax,eax
c0016ed1:	01 c8                	add    eax,ecx
c0016ed3:	8d 3c 80             	lea    edi,[eax+eax*4]
c0016ed6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016ed9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016edf:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016ee5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ee9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016eef:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016ef5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016efb:	89 ca                	mov    edx,ecx
c0016efd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016f04:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016f08:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016f12:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016f1c:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016f23:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016f2a:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016f31:	f7 da                	neg    edx
c0016f33:	c1 e2 15             	shl    edx,0x15
c0016f36:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016f3c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016f42:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016f46:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016f50:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016f56:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016f5c:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016f62:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016f6c:	83 e2 80             	and    edx,0xffffff80
c0016f6f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016f79:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016f7f:	68 00 01 00 00       	push   0x100
c0016f84:	e8 06 8c ff ff       	call   c000fb8f <malloc>
c0016f89:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016f8c:	58                   	pop    eax
c0016f8d:	5a                   	pop    edx
c0016f8e:	53                   	push   ebx
c0016f8f:	68 4c fa 02 c0       	push   0xc002fa4c
c0016f94:	e8 f3 b0 00 00       	call   c002208c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f99:	89 d8                	mov    eax,ebx
c0016f9b:	83 c4 10             	add    esp,0x10
c0016f9e:	83 c4 0c             	add    esp,0xc
c0016fa1:	5b                   	pop    ebx
c0016fa2:	5e                   	pop    esi
c0016fa3:	5f                   	pop    edi
c0016fa4:	5d                   	pop    ebp
c0016fa5:	c3                   	ret    
c0016fa6:	66 90                	xchg   ax,ax

c0016fa8 <Process::createUserThread()>:
c0016fa8:	83 ec 0c             	sub    esp,0xc
c0016fab:	68 80 00 00 00       	push   0x80
c0016fb0:	6a 00                	push   0x0
c0016fb2:	68 50 68 01 c0       	push   0xc0016850
c0016fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fbb:	50                   	push   eax
c0016fbc:	e8 8f fe ff ff       	call   c0016e50 <Process::createThread(void (*)(void*), void*, int)>
c0016fc1:	83 c4 1c             	add    esp,0x1c
c0016fc4:	c3                   	ret    
c0016fc5:	8d 76 00             	lea    esi,[esi+0x0]

c0016fc8 <setupMultitasking(void (*)())>:
c0016fc8:	56                   	push   esi
c0016fc9:	53                   	push   ebx
c0016fca:	83 ec 04             	sub    esp,0x4
c0016fcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fd1:	eb 11                	jmp    c0016fe4 <setupMultitasking(void (*)())+0x1c>
c0016fd3:	90                   	nop
c0016fd4:	83 ec 0c             	sub    esp,0xc
c0016fd7:	68 4c fa 02 c0       	push   0xc002fa4c
c0016fdc:	e8 ef af 00 00       	call   c0021fd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016fe1:	83 c4 10             	add    esp,0x10
c0016fe4:	83 ec 0c             	sub    esp,0xc
c0016fe7:	68 4c fa 02 c0       	push   0xc002fa4c
c0016fec:	e8 bb af 00 00       	call   c0021fac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ff1:	83 c4 10             	add    esp,0x10
c0016ff4:	84 c0                	test   al,al
c0016ff6:	74 dc                	je     c0016fd4 <setupMultitasking(void (*)())+0xc>
c0016ff8:	83 ec 0c             	sub    esp,0xc
c0016ffb:	68 c4 07 00 00       	push   0x7c4
c0017000:	e8 8a 8b ff ff       	call   c000fb8f <malloc>
c0017005:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001700c:	89 c3                	mov    ebx,eax
c001700e:	6a 00                	push   0x0
c0017010:	68 0f 50 02 c0       	push   0xc002500f
c0017015:	6a 01                	push   0x1
c0017017:	50                   	push   eax
c0017018:	e8 f3 fb ff ff       	call   c0016c10 <Process::Process(bool, char const*, Process*, char**)>
c001701d:	83 c4 14             	add    esp,0x14
c0017020:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0017026:	89 1d 58 fa 02 c0    	mov    DWORD PTR ds:0xc002fa58,ebx
c001702c:	50                   	push   eax
c001702d:	e8 7d b6 ff ff       	call   c00126af <setActiveTerminal(VgaText*)>
c0017032:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0017039:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0017043:	83 c8 01             	or     eax,0x1
c0017046:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c001704d:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0017053:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017056:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017060:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017066:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001706c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017076:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017080:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001708a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017090:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001709a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00170a0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00170aa:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00170b1:	e8 d9 8a ff ff       	call   c000fb8f <malloc>
c00170b6:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c00170c0:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00170c6:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c00170cd:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c00170d4:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c00170db:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c00170e2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00170e8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00170ee:	5a                   	pop    edx
c00170ef:	59                   	pop    ecx
c00170f0:	68 0b 50 02 c0       	push   0xc002500b
c00170f5:	50                   	push   eax
c00170f6:	e8 45 95 fe ff       	call   c0000640 <strcpy>
c00170fb:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017102:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017106:	83 c4 14             	add    esp,0x14
c0017109:	5b                   	pop    ebx
c001710a:	5e                   	pop    esi
c001710b:	e9 59 91 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0017110 <schedule()>:
c0017110:	8b 15 2c fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa2c
c0017116:	85 d2                	test   edx,edx
c0017118:	74 0e                	je     c0017128 <schedule()+0x18>
c001711a:	c7 05 28 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x1
c0017124:	c3                   	ret    
c0017125:	8d 76 00             	lea    esi,[esi+0x0]
c0017128:	53                   	push   ebx
c0017129:	83 ec 14             	sub    esp,0x14
c001712c:	68 4c fa 02 c0       	push   0xc002fa4c
c0017131:	e8 76 ae 00 00       	call   c0021fac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017136:	83 c4 10             	add    esp,0x10
c0017139:	84 c0                	test   al,al
c001713b:	75 3f                	jne    c001717c <schedule()+0x6c>
c001713d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017142:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017145:	83 fa 01             	cmp    edx,0x1
c0017148:	74 3a                	je     c0017184 <schedule()+0x74>
c001714a:	66 90                	xchg   ax,ax
c001714c:	83 ec 0c             	sub    esp,0xc
c001714f:	68 4c fa 02 c0       	push   0xc002fa4c
c0017154:	e8 6f ae 00 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017159:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c0017160:	89 c3                	mov    ebx,eax
c0017162:	e8 69 ae 00 00       	call   c0021fd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017167:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001716e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017171:	e8 36 f7 ff ff       	call   c00168ac <switchToThread(ThreadControlBlock*)>
c0017176:	83 c4 10             	add    esp,0x10
c0017179:	8d 76 00             	lea    esi,[esi+0x0]
c001717c:	83 c4 08             	add    esp,0x8
c001717f:	5b                   	pop    ebx
c0017180:	c3                   	ret    
c0017181:	8d 76 00             	lea    esi,[esi+0x0]
c0017184:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001718b:	83 ec 08             	sub    esp,0x8
c001718e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017193:	50                   	push   eax
c0017194:	68 4c fa 02 c0       	push   0xc002fa4c
c0017199:	e8 ee ae 00 00       	call   c002208c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001719e:	83 c4 10             	add    esp,0x10
c00171a1:	eb a9                	jmp    c001714c <schedule()+0x3c>
c00171a3:	90                   	nop

c00171a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00171a4:	83 ec 0c             	sub    esp,0xc
c00171a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00171b0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00171b3:	e8 58 ff ff ff       	call   c0017110 <schedule()>
c00171b8:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00171c0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00171c5:	85 c0                	test   eax,eax
c00171c7:	75 03                	jne    c00171cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00171c9:	fb                   	sti    
c00171ca:	66 90                	xchg   ax,ax
c00171cc:	83 c4 0c             	add    esp,0xc
c00171cf:	c3                   	ret    

c00171d0 <blockTask(TaskState)>:
c00171d0:	83 ec 0c             	sub    esp,0xc
c00171d3:	fa                   	cli    
c00171d4:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00171d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00171dd:	83 c0 01             	add    eax,0x1
c00171e0:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c00171e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171ea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00171ed:	e8 1e ff ff ff       	call   c0017110 <schedule()>
c00171f2:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00171fa:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017200:	85 d2                	test   edx,edx
c0017202:	75 04                	jne    c0017208 <blockTask(TaskState)+0x38>
c0017204:	fb                   	sti    
c0017205:	8d 76 00             	lea    esi,[esi+0x0]
c0017208:	83 c4 0c             	add    esp,0xc
c001720b:	c3                   	ret    

c001720c <waitTask(int, int*, int)>:
c001720c:	83 ec 18             	sub    esp,0x18
c001720f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017214:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017218:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001721b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001721f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017224:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017227:	6a 07                	push   0x7
c0017229:	e8 a2 ff ff ff       	call   c00171d0 <blockTask(TaskState)>
c001722e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017233:	83 c4 10             	add    esp,0x10
c0017236:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017239:	85 d2                	test   edx,edx
c001723b:	74 0b                	je     c0017248 <waitTask(int, int*, int)+0x3c>
c001723d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017240:	89 02                	mov    DWORD PTR [edx],eax
c0017242:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017247:	90                   	nop
c0017248:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001724b:	83 c4 0c             	add    esp,0xc
c001724e:	c3                   	ret    
c001724f:	90                   	nop

c0017250 <milliTenthSleepUntil(unsigned long long)>:
c0017250:	83 ec 0c             	sub    esp,0xc
c0017253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017257:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001725b:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c0017261:	89 d1                	mov    ecx,edx
c0017263:	1b 0d 54 cb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cb54
c0017269:	73 05                	jae    c0017270 <milliTenthSleepUntil(unsigned long long)+0x20>
c001726b:	90                   	nop
c001726c:	83 c4 0c             	add    esp,0xc
c001726f:	c3                   	ret    
c0017270:	fa                   	cli    
c0017271:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0017277:	83 ec 08             	sub    esp,0x8
c001727a:	83 c1 01             	add    ecx,0x1
c001727d:	89 0d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ecx
c0017283:	8b 0d 2c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa2c
c0017289:	83 c1 01             	add    ecx,0x1
c001728c:	89 0d 2c fa 02 c0    	mov    DWORD PTR ds:0xc002fa2c,ecx
c0017292:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017298:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001729b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001729e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172a3:	50                   	push   eax
c00172a4:	68 40 fa 02 c0       	push   0xc002fa40
c00172a9:	e8 de ad 00 00       	call   c002208c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00172ae:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00172b5:	e8 16 ff ff ff       	call   c00171d0 <blockTask(TaskState)>
c00172ba:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00172bf:	83 c4 10             	add    esp,0x10
c00172c2:	83 e8 01             	sub    eax,0x1
c00172c5:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c00172ca:	85 c0                	test   eax,eax
c00172cc:	75 0a                	jne    c00172d8 <milliTenthSleepUntil(unsigned long long)+0x88>
c00172ce:	8b 15 28 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa28
c00172d4:	85 d2                	test   edx,edx
c00172d6:	75 18                	jne    c00172f0 <milliTenthSleepUntil(unsigned long long)+0xa0>
c00172d8:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00172e0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00172e5:	85 c0                	test   eax,eax
c00172e7:	75 83                	jne    c001726c <milliTenthSleepUntil(unsigned long long)+0x1c>
c00172e9:	fb                   	sti    
c00172ea:	83 c4 0c             	add    esp,0xc
c00172ed:	c3                   	ret    
c00172ee:	66 90                	xchg   ax,ax
c00172f0:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c00172fa:	e8 11 fe ff ff       	call   c0017110 <schedule()>
c00172ff:	eb d7                	jmp    c00172d8 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017301:	8d 76 00             	lea    esi,[esi+0x0]

c0017304 <milliTenthSleep(unsigned long long)>:
c0017304:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c0017309:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c001730f:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017313:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017317:	e9 34 ff ff ff       	jmp    c0017250 <milliTenthSleepUntil(unsigned long long)>

c001731c <sleep(unsigned long long)>:
c001731c:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0017324:	b8 10 27 00 00       	mov    eax,0x2710
c0017329:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001732d:	01 ca                	add    edx,ecx
c001732f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017333:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017337:	eb cb                	jmp    c0017304 <milliTenthSleep(unsigned long long)>
c0017339:	8d 76 00             	lea    esi,[esi+0x0]

c001733c <sleep(unsigned int)>:
c001733c:	83 ec 14             	sub    esp,0x14
c001733f:	b8 10 27 00 00       	mov    eax,0x2710
c0017344:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017348:	52                   	push   edx
c0017349:	50                   	push   eax
c001734a:	e8 b5 ff ff ff       	call   c0017304 <milliTenthSleep(unsigned long long)>
c001734f:	83 c4 1c             	add    esp,0x1c
c0017352:	c3                   	ret    
c0017353:	90                   	nop

c0017354 <milliTenthSleep(unsigned int)>:
c0017354:	83 ec 14             	sub    esp,0x14
c0017357:	31 d2                	xor    edx,edx
c0017359:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001735d:	03 05 50 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb50
c0017363:	13 15 54 cb 02 c0    	adc    edx,DWORD PTR ds:0xc002cb54
c0017369:	52                   	push   edx
c001736a:	50                   	push   eax
c001736b:	e8 e0 fe ff ff       	call   c0017250 <milliTenthSleepUntil(unsigned long long)>
c0017370:	83 c4 1c             	add    esp,0x1c
c0017373:	c3                   	ret    

c0017374 <taskReturned>:
c0017374:	83 ec 18             	sub    esp,0x18
c0017377:	68 98 50 02 c0       	push   0xc0025098
c001737c:	e8 65 8c ff ff       	call   c000ffe6 <KePanic(char const*)>
c0017381:	83 c4 10             	add    esp,0x10
c0017384:	83 ec 0c             	sub    esp,0xc
c0017387:	6a 02                	push   0x2
c0017389:	e8 42 fe ff ff       	call   c00171d0 <blockTask(TaskState)>
c001738e:	fa                   	cli    
c001738f:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017394:	83 c0 01             	add    eax,0x1
c0017397:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c001739c:	e8 6f fd ff ff       	call   c0017110 <schedule()>
c00173a1:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00173a9:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00173af:	83 c4 10             	add    esp,0x10
c00173b2:	85 d2                	test   edx,edx
c00173b4:	75 ce                	jne    c0017384 <taskReturned+0x10>
c00173b6:	fb                   	sti    
c00173b7:	eb cb                	jmp    c0017384 <taskReturned+0x10>
c00173b9:	8d 76 00             	lea    esi,[esi+0x0]

c00173bc <KeProcessFromPID(int)>:
c00173bc:	57                   	push   edi
c00173bd:	56                   	push   esi
c00173be:	53                   	push   ebx
c00173bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00173c3:	fa                   	cli    
c00173c4:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00173c9:	83 ec 0c             	sub    esp,0xc
c00173cc:	83 c0 01             	add    eax,0x1
c00173cf:	68 4c fa 02 c0       	push   0xc002fa4c
c00173d4:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c00173d9:	e8 ea ab 00 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173de:	83 c4 10             	add    esp,0x10
c00173e1:	89 c7                	mov    edi,eax
c00173e3:	eb 17                	jmp    c00173fc <KeProcessFromPID(int)+0x40>
c00173e5:	8d 76 00             	lea    esi,[esi+0x0]
c00173e8:	83 ec 0c             	sub    esp,0xc
c00173eb:	68 4c fa 02 c0       	push   0xc002fa4c
c00173f0:	e8 d3 ab 00 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173f5:	83 c4 10             	add    esp,0x10
c00173f8:	39 f8                	cmp    eax,edi
c00173fa:	74 50                	je     c001744c <KeProcessFromPID(int)+0x90>
c00173fc:	83 ec 0c             	sub    esp,0xc
c00173ff:	68 4c fa 02 c0       	push   0xc002fa4c
c0017404:	e8 bf ab 00 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017409:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c0017410:	89 c3                	mov    ebx,eax
c0017412:	e8 b9 ab 00 00       	call   c0021fd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017417:	59                   	pop    ecx
c0017418:	58                   	pop    eax
c0017419:	53                   	push   ebx
c001741a:	68 4c fa 02 c0       	push   0xc002fa4c
c001741f:	e8 68 ac 00 00       	call   c002208c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017424:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017427:	83 c4 10             	add    esp,0x10
c001742a:	39 30                	cmp    DWORD PTR [eax],esi
c001742c:	75 ba                	jne    c00173e8 <KeProcessFromPID(int)+0x2c>
c001742e:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017436:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c001743c:	85 d2                	test   edx,edx
c001743e:	74 08                	je     c0017448 <KeProcessFromPID(int)+0x8c>
c0017440:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017443:	5b                   	pop    ebx
c0017444:	5e                   	pop    esi
c0017445:	5f                   	pop    edi
c0017446:	c3                   	ret    
c0017447:	90                   	nop
c0017448:	fb                   	sti    
c0017449:	eb f5                	jmp    c0017440 <KeProcessFromPID(int)+0x84>
c001744b:	90                   	nop
c001744c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017454:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017459:	85 c0                	test   eax,eax
c001745b:	75 07                	jne    c0017464 <KeProcessFromPID(int)+0xa8>
c001745d:	fb                   	sti    
c001745e:	31 c0                	xor    eax,eax
c0017460:	5b                   	pop    ebx
c0017461:	5e                   	pop    esi
c0017462:	5f                   	pop    edi
c0017463:	c3                   	ret    
c0017464:	5b                   	pop    ebx
c0017465:	31 c0                	xor    eax,eax
c0017467:	5e                   	pop    esi
c0017468:	5f                   	pop    edi
c0017469:	c3                   	ret    
c001746a:	66 90                	xchg   ax,ax

c001746c <unblockTask(ThreadControlBlock*)>:
c001746c:	53                   	push   ebx
c001746d:	83 ec 08             	sub    esp,0x8
c0017470:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017474:	fa                   	cli    
c0017475:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c001747b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001747e:	83 c2 01             	add    edx,0x1
c0017481:	85 c0                	test   eax,eax
c0017483:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c0017489:	74 6d                	je     c00174f8 <unblockTask(ThreadControlBlock*)+0x8c>
c001748b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001748e:	83 f8 01             	cmp    eax,0x1
c0017491:	74 39                	je     c00174cc <unblockTask(ThreadControlBlock*)+0x60>
c0017493:	83 ec 0c             	sub    esp,0xc
c0017496:	68 4c fa 02 c0       	push   0xc002fa4c
c001749b:	e8 28 ab 00 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00174a0:	83 c4 10             	add    esp,0x10
c00174a3:	85 c0                	test   eax,eax
c00174a5:	75 1d                	jne    c00174c4 <unblockTask(ThreadControlBlock*)+0x58>
c00174a7:	eb 63                	jmp    c001750c <unblockTask(ThreadControlBlock*)+0xa0>
c00174a9:	8d 76 00             	lea    esi,[esi+0x0]
c00174ac:	83 ec 08             	sub    esp,0x8
c00174af:	50                   	push   eax
c00174b0:	68 4c fa 02 c0       	push   0xc002fa4c
c00174b5:	e8 1a b0 00 00       	call   c00224d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00174ba:	83 c4 10             	add    esp,0x10
c00174bd:	85 c0                	test   eax,eax
c00174bf:	74 4b                	je     c001750c <unblockTask(ThreadControlBlock*)+0xa0>
c00174c1:	8d 76 00             	lea    esi,[esi+0x0]
c00174c4:	39 c3                	cmp    ebx,eax
c00174c6:	75 e4                	jne    c00174ac <unblockTask(ThreadControlBlock*)+0x40>
c00174c8:	eb 12                	jmp    c00174dc <unblockTask(ThreadControlBlock*)+0x70>
c00174ca:	66 90                	xchg   ax,ax
c00174cc:	83 ec 0c             	sub    esp,0xc
c00174cf:	68 2d 50 02 c0       	push   0xc002502d
c00174d4:	e8 a3 fa fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00174d9:	83 c4 10             	add    esp,0x10
c00174dc:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00174e4:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00174e9:	85 c0                	test   eax,eax
c00174eb:	75 03                	jne    c00174f0 <unblockTask(ThreadControlBlock*)+0x84>
c00174ed:	fb                   	sti    
c00174ee:	66 90                	xchg   ax,ax
c00174f0:	83 c4 08             	add    esp,0x8
c00174f3:	5b                   	pop    ebx
c00174f4:	c3                   	ret    
c00174f5:	8d 76 00             	lea    esi,[esi+0x0]
c00174f8:	83 ec 0c             	sub    esp,0xc
c00174fb:	68 16 50 02 c0       	push   0xc0025016
c0017500:	e8 77 fa fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017505:	83 c4 10             	add    esp,0x10
c0017508:	eb d2                	jmp    c00174dc <unblockTask(ThreadControlBlock*)+0x70>
c001750a:	66 90                	xchg   ax,ax
c001750c:	83 ec 08             	sub    esp,0x8
c001750f:	53                   	push   ebx
c0017510:	68 4c fa 02 c0       	push   0xc002fa4c
c0017515:	e8 72 ab 00 00       	call   c002208c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001751a:	83 c4 10             	add    esp,0x10
c001751d:	eb bd                	jmp    c00174dc <unblockTask(ThreadControlBlock*)+0x70>
c001751f:	90                   	nop

c0017520 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017520:	55                   	push   ebp
c0017521:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017526:	57                   	push   edi
c0017527:	56                   	push   esi
c0017528:	53                   	push   ebx
c0017529:	83 ec 1c             	sub    esp,0x1c
c001752c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017530:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017533:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017536:	d3 c0                	rol    eax,cl
c0017538:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c001753f:	21 c8                	and    eax,ecx
c0017541:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017548:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001754b:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017553:	0f 85 b7 01 00 00    	jne    c0017710 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017559:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c001755f:	85 ed                	test   ebp,ebp
c0017561:	7e 29                	jle    c001758c <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017563:	31 f6                	xor    esi,esi
c0017565:	8d 76 00             	lea    esi,[esi+0x0]
c0017568:	83 ec 0c             	sub    esp,0xc
c001756b:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0017572:	83 c6 01             	add    esi,0x1
c0017575:	57                   	push   edi
c0017576:	e8 24 86 ff ff       	call   c000fb9f <free>
c001757b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001757e:	83 c4 10             	add    esp,0x10
c0017581:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0017587:	7f df                	jg     c0017568 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0017589:	8d 76 00             	lea    esi,[esi+0x0]
c001758c:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0017596:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017599:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c001759f:	89 f7                	mov    edi,esi
c00175a1:	85 ed                	test   ebp,ebp
c00175a3:	74 1b                	je     c00175c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00175a5:	83 ec 0c             	sub    esp,0xc
c00175a8:	55                   	push   ebp
c00175a9:	e8 76 70 ff ff       	call   c000e624 <EnvVarContainer::~EnvVarContainer()>
c00175ae:	59                   	pop    ecx
c00175af:	5e                   	pop    esi
c00175b0:	6a 0c                	push   0xc
c00175b2:	55                   	push   ebp
c00175b3:	e8 31 5e ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00175b8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00175bb:	83 c4 10             	add    esp,0x10
c00175be:	89 f7                	mov    edi,esi
c00175c0:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00175c6:	85 c0                	test   eax,eax
c00175c8:	0f 84 b6 00 00 00    	je     c0017684 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00175ce:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00175d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00175d5:	31 c9                	xor    ecx,ecx
c00175d7:	eb 17                	jmp    c00175f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00175d9:	8d 76 00             	lea    esi,[esi+0x0]
c00175dc:	83 c1 01             	add    ecx,0x1
c00175df:	83 f9 10             	cmp    ecx,0x10
c00175e2:	0f 84 9c 00 00 00    	je     c0017684 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00175e8:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00175ee:	66 90                	xchg   ax,ax
c00175f0:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c00175f7:	d3 fa                	sar    edx,cl
c00175f9:	80 e2 01             	and    dl,0x1
c00175fc:	74 de                	je     c00175dc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00175fe:	8d 14 89             	lea    edx,[ecx+ecx*4]
c0017601:	01 d2                	add    edx,edx
c0017603:	01 ca                	add    edx,ecx
c0017605:	01 d2                	add    edx,edx
c0017607:	01 ca                	add    edx,ecx
c0017609:	8d 14 92             	lea    edx,[edx+edx*4]
c001760c:	01 d0                	add    eax,edx
c001760e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017614:	83 fd 07             	cmp    ebp,0x7
c0017617:	75 c3                	jne    c00175dc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017619:	05 40 02 00 00       	add    eax,0x240
c001761e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017621:	83 fd ff             	cmp    ebp,0xffffffff
c0017624:	0f 8c ee 00 00 00    	jl     c0017718 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001762a:	0f 84 ac 01 00 00    	je     c00177dc <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0017630:	85 ed                	test   ebp,ebp
c0017632:	0f 84 90 01 00 00    	je     c00177c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c0017638:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001763a:	75 a0                	jne    c00175dc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001763c:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017642:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017646:	01 d0                	add    eax,edx
c0017648:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001764c:	83 ec 0c             	sub    esp,0xc
c001764f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017655:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017658:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001765e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017665:	50                   	push   eax
c0017666:	e8 01 fe ff ff       	call   c001746c <unblockTask(ThreadControlBlock*)>
c001766b:	83 c4 10             	add    esp,0x10
c001766e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017671:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017675:	89 f7                	mov    edi,esi
c0017677:	83 c1 01             	add    ecx,0x1
c001767a:	83 f9 10             	cmp    ecx,0x10
c001767d:	0f 85 65 ff ff ff    	jne    c00175e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0017683:	90                   	nop
c0017684:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c001768a:	85 c0                	test   eax,eax
c001768c:	74 62                	je     c00176f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c001768e:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0017694:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c001769a:	74 54                	je     c00176f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c001769c:	83 ec 0c             	sub    esp,0xc
c001769f:	68 4c fa 02 c0       	push   0xc002fa4c
c00176a4:	e8 1f a9 00 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00176a9:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c00176b0:	89 c7                	mov    edi,eax
c00176b2:	e8 f5 a8 00 00       	call   c0021fac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00176b7:	83 c4 10             	add    esp,0x10
c00176ba:	84 c0                	test   al,al
c00176bc:	0f 84 ce 00 00 00    	je     c0017790 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c00176c2:	66 90                	xchg   ax,ax
c00176c4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00176c7:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00176cd:	85 d2                	test   edx,edx
c00176cf:	74 0f                	je     c00176e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00176d1:	83 ec 0c             	sub    esp,0xc
c00176d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00176d6:	52                   	push   edx
c00176d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00176da:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00176dd:	83 c4 10             	add    esp,0x10
c00176e0:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c00176ea:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00176ed:	8d 76 00             	lea    esi,[esi+0x0]
c00176f0:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c00176f6:	85 db                	test   ebx,ebx
c00176f8:	74 16                	je     c0017710 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c00176fa:	83 ec 0c             	sub    esp,0xc
c00176fd:	53                   	push   ebx
c00176fe:	e8 9f c4 ff ff       	call   c0013ba2 <VAS::~VAS()>
c0017703:	58                   	pop    eax
c0017704:	5a                   	pop    edx
c0017705:	6a 14                	push   0x14
c0017707:	53                   	push   ebx
c0017708:	e8 dc 5c ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001770d:	83 c4 10             	add    esp,0x10
c0017710:	83 c4 1c             	add    esp,0x1c
c0017713:	5b                   	pop    ebx
c0017714:	5e                   	pop    esi
c0017715:	5f                   	pop    edi
c0017716:	5d                   	pop    ebp
c0017717:	c3                   	ret    
c0017718:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001771c:	83 ec 0c             	sub    esp,0xc
c001771f:	68 cc 50 02 c0       	push   0xc00250cc
c0017724:	e8 bd 88 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0017729:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001772c:	83 c4 10             	add    esp,0x10
c001772f:	89 f7                	mov    edi,esi
c0017731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017735:	e9 a2 fe ff ff       	jmp    c00175dc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001773a:	66 90                	xchg   ax,ax
c001773c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017742:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017748:	75 1e                	jne    c0017768 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c001774a:	83 ec 0c             	sub    esp,0xc
c001774d:	68 34 51 02 c0       	push   0xc0025134
c0017752:	e8 25 f8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017757:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001775e:	e8 6d fa ff ff       	call   c00171d0 <blockTask(TaskState)>
c0017763:	83 c4 10             	add    esp,0x10
c0017766:	66 90                	xchg   ax,ax
c0017768:	83 ec 08             	sub    esp,0x8
c001776b:	56                   	push   esi
c001776c:	68 4c fa 02 c0       	push   0xc002fa4c
c0017771:	e8 16 a9 00 00       	call   c002208c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017776:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c001777d:	e8 46 a8 00 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017782:	83 c4 10             	add    esp,0x10
c0017785:	39 f8                	cmp    eax,edi
c0017787:	0f 84 37 ff ff ff    	je     c00176c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c001778d:	8d 76 00             	lea    esi,[esi+0x0]
c0017790:	83 ec 0c             	sub    esp,0xc
c0017793:	68 4c fa 02 c0       	push   0xc002fa4c
c0017798:	e8 2b a8 00 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001779d:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c00177a4:	89 c6                	mov    esi,eax
c00177a6:	e8 25 a8 00 00       	call   c0021fd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00177ab:	83 c4 10             	add    esp,0x10
c00177ae:	39 f3                	cmp    ebx,esi
c00177b0:	74 b6                	je     c0017768 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00177b2:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00177b5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00177b8:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00177be:	75 a8                	jne    c0017768 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00177c0:	e9 77 ff ff ff       	jmp    c001773c <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c00177c5:	8d 76 00             	lea    esi,[esi+0x0]
c00177c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00177cc:	83 ec 0c             	sub    esp,0xc
c00177cf:	68 00 51 02 c0       	push   0xc0025100
c00177d4:	e9 4b ff ff ff       	jmp    c0017724 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c00177d9:	8d 76 00             	lea    esi,[esi+0x0]
c00177dc:	8b 36                	mov    esi,DWORD PTR [esi]
c00177de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00177e2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00177e5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00177e8:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c00177ee:	01 d7                	add    edi,edx
c00177f0:	89 f8                	mov    eax,edi
c00177f2:	e9 51 fe ff ff       	jmp    c0017648 <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c00177f7:	90                   	nop

c00177f8 <cleanerTaskFunction(void*)>:
c00177f8:	53                   	push   ebx
c00177f9:	83 ec 08             	sub    esp,0x8
c00177fc:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017804:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017809:	85 c0                	test   eax,eax
c001780b:	75 03                	jne    c0017810 <cleanerTaskFunction(void*)+0x18>
c001780d:	fb                   	sti    
c001780e:	66 90                	xchg   ax,ax
c0017810:	fa                   	cli    
c0017811:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017816:	83 c0 01             	add    eax,0x1
c0017819:	80 3d 14 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa14,0x0
c0017820:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017825:	0f 85 c9 00 00 00    	jne    c00178f4 <cleanerTaskFunction(void*)+0xfc>
c001782b:	83 ec 0c             	sub    esp,0xc
c001782e:	6a 02                	push   0x2
c0017830:	e8 6f f9 ff ff       	call   c00171a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017835:	83 c4 10             	add    esp,0x10
c0017838:	c6 05 14 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa14,0x0
c001783f:	fa                   	cli    
c0017840:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0017846:	8b 1d 2c fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa2c
c001784c:	83 c1 01             	add    ecx,0x1
c001784f:	83 c3 01             	add    ebx,0x1
c0017852:	89 0d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ecx
c0017858:	89 1d 2c fa 02 c0    	mov    DWORD PTR ds:0xc002fa2c,ebx
c001785e:	fa                   	cli    
c001785f:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017864:	83 c0 01             	add    eax,0x1
c0017867:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c001786c:	eb 2a                	jmp    c0017898 <cleanerTaskFunction(void*)+0xa0>
c001786e:	66 90                	xchg   ax,ax
c0017870:	83 ec 0c             	sub    esp,0xc
c0017873:	68 34 fa 02 c0       	push   0xc002fa34
c0017878:	e8 4b a7 00 00       	call   c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001787d:	c7 04 24 34 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa34
c0017884:	89 c3                	mov    ebx,eax
c0017886:	e8 45 a7 00 00       	call   c0021fd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001788b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001788e:	e8 8d fc ff ff       	call   c0017520 <cleanupTerminatedTask(ThreadControlBlock*)>
c0017893:	83 c4 10             	add    esp,0x10
c0017896:	66 90                	xchg   ax,ax
c0017898:	83 ec 0c             	sub    esp,0xc
c001789b:	68 34 fa 02 c0       	push   0xc002fa34
c00178a0:	e8 07 a7 00 00       	call   c0021fac <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00178a5:	83 c4 10             	add    esp,0x10
c00178a8:	84 c0                	test   al,al
c00178aa:	74 c4                	je     c0017870 <cleanerTaskFunction(void*)+0x78>
c00178ac:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00178b4:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00178ba:	85 d2                	test   edx,edx
c00178bc:	75 02                	jne    c00178c0 <cleanerTaskFunction(void*)+0xc8>
c00178be:	fb                   	sti    
c00178bf:	90                   	nop
c00178c0:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00178c5:	83 e8 01             	sub    eax,0x1
c00178c8:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c00178cd:	0f 85 29 ff ff ff    	jne    c00177fc <cleanerTaskFunction(void*)+0x4>
c00178d3:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c00178d8:	85 c0                	test   eax,eax
c00178da:	0f 84 1c ff ff ff    	je     c00177fc <cleanerTaskFunction(void*)+0x4>
c00178e0:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c00178ea:	e8 21 f8 ff ff       	call   c0017110 <schedule()>
c00178ef:	e9 08 ff ff ff       	jmp    c00177fc <cleanerTaskFunction(void*)+0x4>
c00178f4:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00178fc:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017901:	85 c0                	test   eax,eax
c0017903:	0f 85 2f ff ff ff    	jne    c0017838 <cleanerTaskFunction(void*)+0x40>
c0017909:	fb                   	sti    
c001790a:	e9 29 ff ff ff       	jmp    c0017838 <cleanerTaskFunction(void*)+0x40>
c001790f:	90                   	nop

c0017910 <KeTerminateCurrentThread(int)>:
c0017910:	83 ec 14             	sub    esp,0x14
c0017913:	fa                   	cli    
c0017914:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017919:	83 c0 01             	add    eax,0x1
c001791c:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017921:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0017926:	83 c0 01             	add    eax,0x1
c0017929:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c001792e:	fa                   	cli    
c001792f:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017934:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017938:	83 c0 01             	add    eax,0x1
c001793b:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017940:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017945:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017948:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001794d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017950:	50                   	push   eax
c0017951:	68 34 fa 02 c0       	push   0xc002fa34
c0017956:	e8 31 a7 00 00       	call   c002208c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001795b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017960:	83 c4 10             	add    esp,0x10
c0017963:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001796a:	a1 10 fa 02 c0       	mov    eax,ds:0xc002fa10
c001796f:	85 c0                	test   eax,eax
c0017971:	0f 84 81 00 00 00    	je     c00179f8 <KeTerminateCurrentThread(int)+0xe8>
c0017977:	83 ec 0c             	sub    esp,0xc
c001797a:	c6 05 14 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa14,0x1
c0017981:	50                   	push   eax
c0017982:	e8 e5 fa ff ff       	call   c001746c <unblockTask(ThreadControlBlock*)>
c0017987:	83 c4 10             	add    esp,0x10
c001798a:	66 90                	xchg   ax,ax
c001798c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017994:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017999:	85 c0                	test   eax,eax
c001799b:	75 03                	jne    c00179a0 <KeTerminateCurrentThread(int)+0x90>
c001799d:	fb                   	sti    
c001799e:	66 90                	xchg   ax,ax
c00179a0:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00179a5:	83 e8 01             	sub    eax,0x1
c00179a8:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c00179ad:	75 09                	jne    c00179b8 <KeTerminateCurrentThread(int)+0xa8>
c00179af:	83 3d 28 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa28,0x0
c00179b6:	75 54                	jne    c0017a0c <KeTerminateCurrentThread(int)+0xfc>
c00179b8:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00179c0:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c00179c6:	85 c9                	test   ecx,ecx
c00179c8:	75 06                	jne    c00179d0 <KeTerminateCurrentThread(int)+0xc0>
c00179ca:	66 90                	xchg   ax,ax
c00179cc:	fb                   	sti    
c00179cd:	8d 76 00             	lea    esi,[esi+0x0]
c00179d0:	fa                   	cli    
c00179d1:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00179d6:	83 c0 01             	add    eax,0x1
c00179d9:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c00179de:	e8 2d f7 ff ff       	call   c0017110 <schedule()>
c00179e3:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00179eb:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00179f1:	85 d2                	test   edx,edx
c00179f3:	75 db                	jne    c00179d0 <KeTerminateCurrentThread(int)+0xc0>
c00179f5:	eb d5                	jmp    c00179cc <KeTerminateCurrentThread(int)+0xbc>
c00179f7:	90                   	nop
c00179f8:	83 ec 0c             	sub    esp,0xc
c00179fb:	68 44 50 02 c0       	push   0xc0025044
c0017a00:	e8 77 f5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017a05:	83 c4 10             	add    esp,0x10
c0017a08:	eb 82                	jmp    c001798c <KeTerminateCurrentThread(int)+0x7c>
c0017a0a:	66 90                	xchg   ax,ax
c0017a0c:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0017a16:	e8 f5 f6 ff ff       	call   c0017110 <schedule()>
c0017a1b:	eb 9b                	jmp    c00179b8 <KeTerminateCurrentThread(int)+0xa8>
c0017a1d:	8d 76 00             	lea    esi,[esi+0x0]

c0017a20 <__static_initialization_and_destruction_0(int, int)>:
c0017a20:	83 ec 0c             	sub    esp,0xc
c0017a23:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017a28:	0f 85 8e 00 00 00    	jne    c0017abc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017a2e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017a36:	0f 85 80 00 00 00    	jne    c0017abc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017a3c:	83 ec 0c             	sub    esp,0xc
c0017a3f:	68 4c fa 02 c0       	push   0xc002fa4c
c0017a44:	e8 e3 aa 00 00       	call   c002252c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017a49:	83 c4 10             	add    esp,0x10
c0017a4c:	83 ec 04             	sub    esp,0x4
c0017a4f:	68 4c 64 02 c0       	push   0xc002644c
c0017a54:	68 4c fa 02 c0       	push   0xc002fa4c
c0017a59:	68 dc 24 02 c0       	push   0xc00224dc
c0017a5e:	e8 36 59 ff ff       	call   c000d399 <__cxa_atexit>
c0017a63:	83 c4 10             	add    esp,0x10
c0017a66:	83 ec 0c             	sub    esp,0xc
c0017a69:	68 40 fa 02 c0       	push   0xc002fa40
c0017a6e:	e8 b9 aa 00 00       	call   c002252c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017a73:	83 c4 10             	add    esp,0x10
c0017a76:	83 ec 04             	sub    esp,0x4
c0017a79:	68 4c 64 02 c0       	push   0xc002644c
c0017a7e:	68 40 fa 02 c0       	push   0xc002fa40
c0017a83:	68 dc 24 02 c0       	push   0xc00224dc
c0017a88:	e8 0c 59 ff ff       	call   c000d399 <__cxa_atexit>
c0017a8d:	83 c4 10             	add    esp,0x10
c0017a90:	83 ec 0c             	sub    esp,0xc
c0017a93:	68 34 fa 02 c0       	push   0xc002fa34
c0017a98:	e8 8f aa 00 00       	call   c002252c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017a9d:	83 c4 10             	add    esp,0x10
c0017aa0:	83 ec 04             	sub    esp,0x4
c0017aa3:	68 4c 64 02 c0       	push   0xc002644c
c0017aa8:	68 34 fa 02 c0       	push   0xc002fa34
c0017aad:	68 dc 24 02 c0       	push   0xc00224dc
c0017ab2:	e8 e2 58 ff ff       	call   c000d399 <__cxa_atexit>
c0017ab7:	83 c4 10             	add    esp,0x10
c0017aba:	66 90                	xchg   ax,ax
c0017abc:	90                   	nop
c0017abd:	83 c4 0c             	add    esp,0xc
c0017ac0:	c3                   	ret    
c0017ac1:	8d 76 00             	lea    esi,[esi+0x0]

c0017ac4 <_GLOBAL__sub_I_keNextPID>:
c0017ac4:	83 ec 0c             	sub    esp,0xc
c0017ac7:	83 ec 08             	sub    esp,0x8
c0017aca:	68 ff ff 00 00       	push   0xffff
c0017acf:	6a 01                	push   0x1
c0017ad1:	e8 4a ff ff ff       	call   c0017a20 <__static_initialization_and_destruction_0(int, int)>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	83 c4 0c             	add    esp,0xc
c0017adc:	c3                   	ret    

c0017add <Vm::inbv(unsigned short)>:
c0017add:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017ae1:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017ae6:	74 02                	je     c0017aea <Vm::inbv(unsigned short)+0xd>
c0017ae8:	ec                   	in     al,dx
c0017ae9:	c3                   	ret    
c0017aea:	a0 90 fa 02 c0       	mov    al,ds:0xc002fa90
c0017aef:	c3                   	ret    

c0017af0 <Vm::outbv(unsigned short, unsigned char)>:
c0017af0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017af4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017af8:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017afd:	74 02                	je     c0017b01 <Vm::outbv(unsigned short, unsigned char)+0x11>
c0017aff:	ee                   	out    dx,al
c0017b00:	c3                   	ret    
c0017b01:	8b 0d 90 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa90
c0017b07:	8d 51 01             	lea    edx,[ecx+0x1]
c0017b0a:	88 81 a0 fa 02 c0    	mov    BYTE PTR [ecx-0x3ffd0560],al
c0017b10:	89 15 90 fa 02 c0    	mov    DWORD PTR ds:0xc002fa90,edx
c0017b16:	83 fa 20             	cmp    edx,0x20
c0017b19:	75 e5                	jne    c0017b00 <Vm::outbv(unsigned short, unsigned char)+0x10>
c0017b1b:	c7 05 90 fa 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x1f
c0017b25:	c3                   	ret    

c0017b26 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017b26:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017b2b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017b30:	c1 e0 04             	shl    eax,0x4
c0017b33:	01 d0                	add    eax,edx
c0017b35:	c3                   	ret    

c0017b36 <Vm::getSegment(unsigned int)>:
c0017b36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b3a:	c1 e8 10             	shr    eax,0x10
c0017b3d:	c3                   	ret    

c0017b3e <Vm::getOffset(unsigned int)>:
c0017b3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b42:	c3                   	ret    

c0017b43 <Vm::mainloop2()>:
c0017b43:	83 ec 18             	sub    esp,0x18
c0017b46:	fa                   	cli    
c0017b47:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017b4c:	6a 02                	push   0x2
c0017b4e:	83 c0 01             	add    eax,0x1
c0017b51:	c6 05 89 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa89,0x1
c0017b58:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017b5d:	e8 42 f6 ff ff       	call   c00171a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017b62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b67:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0017b6b:	52                   	push   edx
c0017b6c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017b70:	52                   	push   edx
c0017b71:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017b75:	52                   	push   edx
c0017b76:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0017b7a:	50                   	push   eax
c0017b7b:	e8 8f 86 fe ff       	call   c000020f <goToVM86>
c0017b80:	83 c4 2c             	add    esp,0x2c
c0017b83:	c3                   	ret    

c0017b84 <Vm::mainVm8086Loop(void*)>:
c0017b84:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017b8c:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017b91:	85 c0                	test   eax,eax
c0017b93:	75 01                	jne    c0017b96 <Vm::mainVm8086Loop(void*)+0x12>
c0017b95:	fb                   	sti    
c0017b96:	eb ab                	jmp    c0017b43 <Vm::mainloop2()>

c0017b98 <Vm::mainloop3(unsigned long)>:
c0017b98:	83 ec 18             	sub    esp,0x18
c0017b9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b9f:	fa                   	cli    
c0017ba0:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017ba6:	6a 02                	push   0x2
c0017ba8:	83 c2 01             	add    edx,0x1
c0017bab:	c6 05 88 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa88,0x1
c0017bb2:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c0017bb8:	a3 84 fa 02 c0       	mov    ds:0xc002fa84,eax
c0017bbd:	e8 e2 f5 ff ff       	call   c00171a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017bc2:	83 c4 1c             	add    esp,0x1c
c0017bc5:	e9 79 ff ff ff       	jmp    c0017b43 <Vm::mainloop2()>

c0017bca <Vm::initialise8086()>:
c0017bca:	83 ec 0c             	sub    esp,0xc
c0017bcd:	68 80 00 00 00       	push   0x80
c0017bd2:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017bd7:	6a 00                	push   0x0
c0017bd9:	68 84 7b 01 c0       	push   0xc0017b84
c0017bde:	50                   	push   eax
c0017bdf:	e8 6c f2 ff ff       	call   c0016e50 <Process::createThread(void (*)(void*), void*, int)>
c0017be4:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017beb:	a3 8c fa 02 c0       	mov    ds:0xc002fa8c,eax
c0017bf0:	68 10 01 00 00       	push   0x110
c0017bf5:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017bfa:	6a 00                	push   0x0
c0017bfc:	6a 00                	push   0x0
c0017bfe:	8b 90 b2 05 00 00    	mov    edx,DWORD PTR [eax+0x5b2]
c0017c04:	52                   	push   edx
c0017c05:	e8 ea c2 ff ff       	call   c0013ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c0a:	83 c4 2c             	add    esp,0x2c
c0017c0d:	c3                   	ret    

c0017c0e <Vm::resetConventionalMemory8086()>:
c0017c0e:	c3                   	ret    

c0017c0f <Vm::finish8086()>:
c0017c0f:	53                   	push   ebx
c0017c10:	83 ec 08             	sub    esp,0x8
c0017c13:	eb 17                	jmp    c0017c2c <Vm::finish8086()+0x1d>
c0017c15:	e8 f6 f4 ff ff       	call   c0017110 <schedule()>
c0017c1a:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017c22:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0017c28:	85 c9                	test   ecx,ecx
c0017c2a:	74 51                	je     c0017c7d <Vm::finish8086()+0x6e>
c0017c2c:	fa                   	cli    
c0017c2d:	8b 1d 30 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa30
c0017c33:	83 c3 01             	add    ebx,0x1
c0017c36:	80 3d 88 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa88,0x0
c0017c3d:	89 1d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ebx
c0017c43:	74 d0                	je     c0017c15 <Vm::finish8086()+0x6>
c0017c45:	83 ec 0c             	sub    esp,0xc
c0017c48:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017c4d:	8b 1d 84 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa84
c0017c53:	50                   	push   eax
c0017c54:	c6 05 88 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa88,0x0
c0017c5b:	e8 0c f8 ff ff       	call   c001746c <unblockTask(ThreadControlBlock*)>
c0017c60:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017c68:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017c6e:	83 c4 10             	add    esp,0x10
c0017c71:	85 d2                	test   edx,edx
c0017c73:	75 01                	jne    c0017c76 <Vm::finish8086()+0x67>
c0017c75:	fb                   	sti    
c0017c76:	89 d8                	mov    eax,ebx
c0017c78:	83 c4 08             	add    esp,0x8
c0017c7b:	5b                   	pop    ebx
c0017c7c:	c3                   	ret    
c0017c7d:	fb                   	sti    
c0017c7e:	eb ac                	jmp    c0017c2c <Vm::finish8086()+0x1d>

c0017c80 <Vm::getOutput8086(unsigned char*)>:
c0017c80:	57                   	push   edi
c0017c81:	8b 0d 90 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa90
c0017c87:	56                   	push   esi
c0017c88:	be a0 fa 02 c0       	mov    esi,0xc002faa0
c0017c8d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017c91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017c93:	a1 90 fa 02 c0       	mov    eax,ds:0xc002fa90
c0017c98:	5e                   	pop    esi
c0017c99:	c7 05 90 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x0
c0017ca3:	5f                   	pop    edi
c0017ca4:	c3                   	ret    

c0017ca5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017ca5:	55                   	push   ebp
c0017ca6:	57                   	push   edi
c0017ca7:	56                   	push   esi
c0017ca8:	53                   	push   ebx
c0017ca9:	83 ec 2c             	sub    esp,0x2c
c0017cac:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017cb0:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017cb4:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0017cb8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0017cbc:	80 3d 80 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa80,0x0
c0017cc3:	75 1f                	jne    c0017ce4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017cc5:	e9 bb 00 00 00       	jmp    c0017d85 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe0>
c0017cca:	e8 41 f4 ff ff       	call   c0017110 <schedule()>
c0017ccf:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017cd7:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017cdc:	85 c0                	test   eax,eax
c0017cde:	0f 84 9b 00 00 00    	je     c0017d7f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xda>
c0017ce4:	fa                   	cli    
c0017ce5:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017cea:	83 c0 01             	add    eax,0x1
c0017ced:	80 3d 89 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa89,0x0
c0017cf4:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017cf9:	74 cf                	je     c0017cca <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x25>
c0017cfb:	83 ec 04             	sub    esp,0x4
c0017cfe:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017d03:	c7 05 90 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x0
c0017d0d:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017d11:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017d15:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017d19:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017d1d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017d21:	0f b7 f6             	movzx  esi,si
c0017d24:	6a 20                	push   0x20
c0017d26:	0f b7 db             	movzx  ebx,bx
c0017d29:	6a 00                	push   0x0
c0017d2b:	68 a0 fa 02 c0       	push   0xc002faa0
c0017d30:	e8 bb 87 fe ff       	call   c00004f0 <memset>
c0017d35:	5a                   	pop    edx
c0017d36:	59                   	pop    ecx
c0017d37:	56                   	push   esi
c0017d38:	53                   	push   ebx
c0017d39:	e8 e8 fd ff ff       	call   c0017b26 <Vm::realToLinear(unsigned short, unsigned short)>
c0017d3e:	83 c4 10             	add    esp,0x10
c0017d41:	89 c7                	mov    edi,eax
c0017d43:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017d47:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017d4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d4d:	c6 05 89 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa89,0x0
c0017d54:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017d5c:	8b 1d 30 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa30
c0017d62:	85 db                	test   ebx,ebx
c0017d64:	75 01                	jne    c0017d67 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xc2>
c0017d66:	fb                   	sti    
c0017d67:	83 ec 0c             	sub    esp,0xc
c0017d6a:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017d6f:	50                   	push   eax
c0017d70:	e8 f7 f6 ff ff       	call   c001746c <unblockTask(ThreadControlBlock*)>
c0017d75:	83 c4 3c             	add    esp,0x3c
c0017d78:	b0 01                	mov    al,0x1
c0017d7a:	5b                   	pop    ebx
c0017d7b:	5e                   	pop    esi
c0017d7c:	5f                   	pop    edi
c0017d7d:	5d                   	pop    ebp
c0017d7e:	c3                   	ret    
c0017d7f:	fb                   	sti    
c0017d80:	e9 5f ff ff ff       	jmp    c0017ce4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017d85:	83 ec 0c             	sub    esp,0xc
c0017d88:	68 14 01 00 00       	push   0x114
c0017d8d:	e8 fd 7d ff ff       	call   c000fb8f <malloc>
c0017d92:	83 c4 0c             	add    esp,0xc
c0017d95:	89 c2                	mov    edx,eax
c0017d97:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017d9c:	50                   	push   eax
c0017d9d:	68 5c 51 02 c0       	push   0xc002515c
c0017da2:	52                   	push   edx
c0017da3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017da7:	e8 de 03 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017dac:	58                   	pop    eax
c0017dad:	5a                   	pop    edx
c0017dae:	6a 12                	push   0x12
c0017db0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017db4:	52                   	push   edx
c0017db5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017db9:	e8 ea 03 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0017dbe:	59                   	pop    ecx
c0017dbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dc3:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017dc7:	8b 02                	mov    eax,DWORD PTR [edx]
c0017dc9:	51                   	push   ecx
c0017dca:	6a 00                	push   0x0
c0017dcc:	6a 00                	push   0x0
c0017dce:	68 00 00 11 00       	push   0x110000
c0017dd3:	52                   	push   edx
c0017dd4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dd8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017ddb:	83 c4 14             	add    esp,0x14
c0017dde:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017de2:	52                   	push   edx
c0017de3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017de7:	e8 1a 04 ff ff       	call   c0008206 <File::close()>
c0017dec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017df0:	8b 02                	mov    eax,DWORD PTR [edx]
c0017df2:	89 14 24             	mov    DWORD PTR [esp],edx
c0017df5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017df8:	c6 05 80 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa80,0x1
c0017dff:	83 c4 10             	add    esp,0x10
c0017e02:	e9 dd fe ff ff       	jmp    c0017ce4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>

c0017e07 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017e07:	55                   	push   ebp
c0017e08:	57                   	push   edi
c0017e09:	56                   	push   esi
c0017e0a:	53                   	push   ebx
c0017e0b:	83 ec 2c             	sub    esp,0x2c
c0017e0e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017e12:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0017e16:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017e1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e1e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0017e22:	80 3d 80 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa80,0x0
c0017e29:	0f 84 59 01 00 00    	je     c0017f88 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x181>
c0017e2f:	83 ec 08             	sub    esp,0x8
c0017e32:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0017e36:	51                   	push   ecx
c0017e37:	68 c0 51 02 c0       	push   0xc00251c0
c0017e3c:	e8 3b f1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017e41:	83 c4 10             	add    esp,0x10
c0017e44:	eb 1a                	jmp    c0017e60 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017e46:	e8 c5 f2 ff ff       	call   c0017110 <schedule()>
c0017e4b:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017e53:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017e58:	85 c0                	test   eax,eax
c0017e5a:	0f 84 22 01 00 00    	je     c0017f82 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17b>
c0017e60:	fa                   	cli    
c0017e61:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017e67:	8a 1d 89 fa 02 c0    	mov    bl,BYTE PTR ds:0xc002fa89
c0017e6d:	83 c2 01             	add    edx,0x1
c0017e70:	84 db                	test   bl,bl
c0017e72:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c0017e78:	74 cc                	je     c0017e46 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017e7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e7e:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017e83:	83 ec 04             	sub    esp,0x4
c0017e86:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0017e8a:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017e8e:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017e92:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0017e96:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017e9a:	c7 05 90 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x0
c0017ea4:	6a 20                	push   0x20
c0017ea6:	6a 00                	push   0x0
c0017ea8:	68 a0 fa 02 c0       	push   0xc002faa0
c0017ead:	e8 3e 86 fe ff       	call   c00004f0 <memset>
c0017eb2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017eb9:	e8 d1 7c ff ff       	call   c000fb8f <malloc>
c0017ebe:	83 c4 0c             	add    esp,0xc
c0017ec1:	89 c7                	mov    edi,eax
c0017ec3:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017ec8:	50                   	push   eax
c0017ec9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017ecd:	50                   	push   eax
c0017ece:	57                   	push   edi
c0017ecf:	e8 b6 02 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017ed4:	83 c4 10             	add    esp,0x10
c0017ed7:	85 ff                	test   edi,edi
c0017ed9:	0f 84 66 01 00 00    	je     c0018045 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x23e>
c0017edf:	83 ec 04             	sub    esp,0x4
c0017ee2:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017ee6:	50                   	push   eax
c0017ee7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017eeb:	50                   	push   eax
c0017eec:	57                   	push   edi
c0017eed:	e8 b8 05 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0017ef2:	8a 4c 24 23          	mov    cl,BYTE PTR [esp+0x23]
c0017ef6:	83 c4 10             	add    esp,0x10
c0017ef9:	84 c9                	test   cl,cl
c0017efb:	0f 85 e9 00 00 00    	jne    c0017fea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1e3>
c0017f01:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017f05:	83 ec 08             	sub    esp,0x8
c0017f08:	6a 01                	push   0x1
c0017f0a:	57                   	push   edi
c0017f0b:	e8 98 02 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0017f10:	83 c4 10             	add    esp,0x10
c0017f13:	85 c0                	test   eax,eax
c0017f15:	0f 85 fd 00 00 00    	jne    c0018018 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x211>
c0017f1b:	83 ec 08             	sub    esp,0x8
c0017f1e:	0f b7 c5             	movzx  eax,bp
c0017f21:	0f b7 f6             	movzx  esi,si
c0017f24:	56                   	push   esi
c0017f25:	50                   	push   eax
c0017f26:	e8 fb fb ff ff       	call   c0017b26 <Vm::realToLinear(unsigned short, unsigned short)>
c0017f2b:	5a                   	pop    edx
c0017f2c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017f2e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017f32:	52                   	push   edx
c0017f33:	50                   	push   eax
c0017f34:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017f38:	56                   	push   esi
c0017f39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017f3d:	55                   	push   ebp
c0017f3e:	57                   	push   edi
c0017f3f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f42:	83 c4 14             	add    esp,0x14
c0017f45:	57                   	push   edi
c0017f46:	e8 bb 02 ff ff       	call   c0008206 <File::close()>
c0017f4b:	c6 05 89 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa89,0x0
c0017f52:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017f5a:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017f5f:	83 c4 10             	add    esp,0x10
c0017f62:	85 c0                	test   eax,eax
c0017f64:	75 01                	jne    c0017f67 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x160>
c0017f66:	fb                   	sti    
c0017f67:	83 ec 0c             	sub    esp,0xc
c0017f6a:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017f6f:	50                   	push   eax
c0017f70:	e8 f7 f4 ff ff       	call   c001746c <unblockTask(ThreadControlBlock*)>
c0017f75:	83 c4 10             	add    esp,0x10
c0017f78:	83 c4 2c             	add    esp,0x2c
c0017f7b:	88 d8                	mov    al,bl
c0017f7d:	5b                   	pop    ebx
c0017f7e:	5e                   	pop    esi
c0017f7f:	5f                   	pop    edi
c0017f80:	5d                   	pop    ebp
c0017f81:	c3                   	ret    
c0017f82:	fb                   	sti    
c0017f83:	e9 d8 fe ff ff       	jmp    c0017e60 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017f88:	83 ec 0c             	sub    esp,0xc
c0017f8b:	68 14 01 00 00       	push   0x114
c0017f90:	e8 fa 7b ff ff       	call   c000fb8f <malloc>
c0017f95:	83 c4 0c             	add    esp,0xc
c0017f98:	89 c3                	mov    ebx,eax
c0017f9a:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017f9f:	50                   	push   eax
c0017fa0:	68 5c 51 02 c0       	push   0xc002515c
c0017fa5:	53                   	push   ebx
c0017fa6:	e8 df 01 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017fab:	58                   	pop    eax
c0017fac:	5a                   	pop    edx
c0017fad:	6a 12                	push   0x12
c0017faf:	53                   	push   ebx
c0017fb0:	e8 f3 01 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0017fb5:	59                   	pop    ecx
c0017fb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017fb8:	8d 4c 24 24          	lea    ecx,[esp+0x24]
c0017fbc:	51                   	push   ecx
c0017fbd:	6a 00                	push   0x0
c0017fbf:	6a 00                	push   0x0
c0017fc1:	68 00 00 11 00       	push   0x110000
c0017fc6:	53                   	push   ebx
c0017fc7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017fca:	83 c4 14             	add    esp,0x14
c0017fcd:	53                   	push   ebx
c0017fce:	e8 33 02 ff ff       	call   c0008206 <File::close()>
c0017fd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017fd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017fd8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017fdb:	c6 05 80 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa80,0x1
c0017fe2:	83 c4 10             	add    esp,0x10
c0017fe5:	e9 45 fe ff ff       	jmp    c0017e2f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x28>
c0017fea:	83 ec 0c             	sub    esp,0xc
c0017fed:	68 8b 51 02 c0       	push   0xc002518b
c0017ff2:	e8 ef 7f ff ff       	call   c000ffe6 <KePanic(char const*)>
c0017ff7:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017fff:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0018004:	83 c4 10             	add    esp,0x10
c0018007:	85 c0                	test   eax,eax
c0018009:	75 01                	jne    c001800c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c001800b:	fb                   	sti    
c001800c:	83 c4 2c             	add    esp,0x2c
c001800f:	31 db                	xor    ebx,ebx
c0018011:	88 d8                	mov    al,bl
c0018013:	5b                   	pop    ebx
c0018014:	5e                   	pop    esi
c0018015:	5f                   	pop    edi
c0018016:	5d                   	pop    ebp
c0018017:	c3                   	ret    
c0018018:	83 ec 0c             	sub    esp,0xc
c001801b:	68 a4 51 02 c0       	push   0xc00251a4
c0018020:	e8 c1 7f ff ff       	call   c000ffe6 <KePanic(char const*)>
c0018025:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001802d:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0018032:	83 c4 10             	add    esp,0x10
c0018035:	85 c0                	test   eax,eax
c0018037:	75 d3                	jne    c001800c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c0018039:	fb                   	sti    
c001803a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001803e:	88 cb                	mov    bl,cl
c0018040:	e9 33 ff ff ff       	jmp    c0017f78 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x171>
c0018045:	83 ec 0c             	sub    esp,0xc
c0018048:	68 77 51 02 c0       	push   0xc0025177
c001804d:	eb a3                	jmp    c0017ff2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1eb>

c001804f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001804f:	57                   	push   edi
c0018050:	56                   	push   esi
c0018051:	53                   	push   ebx
c0018052:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001805a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001805e:	83 e8 06             	sub    eax,0x6
c0018061:	0f b7 c0             	movzx  eax,ax
c0018064:	50                   	push   eax
c0018065:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001806a:	50                   	push   eax
c001806b:	e8 b6 fa ff ff       	call   c0017b26 <Vm::realToLinear(unsigned short, unsigned short)>
c0018070:	5a                   	pop    edx
c0018071:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018074:	5b                   	pop    ebx
c0018075:	8d 56 fa             	lea    edx,[esi-0x6]
c0018078:	8b 59 38             	mov    ebx,DWORD PTR [ecx+0x38]
c001807b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018081:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018084:	8d 53 02             	lea    edx,[ebx+0x2]
c0018087:	66 89 10             	mov    WORD PTR [eax],dx
c001808a:	66 8b 51 3c          	mov    dx,WORD PTR [ecx+0x3c]
c001808e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018092:	8b 59 40             	mov    ebx,DWORD PTR [ecx+0x40]
c0018095:	66 8b 71 40          	mov    si,WORD PTR [ecx+0x40]
c0018099:	0f b6 d7             	movzx  edx,bh
c001809c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00180a0:	c1 e2 08             	shl    edx,0x8
c00180a3:	8b 35 00 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002000
c00180a9:	80 7e 61 00          	cmp    BYTE PTR [esi+0x61],0x0
c00180ad:	0f b6 f3             	movzx  esi,bl
c00180b0:	74 2c                	je     c00180de <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x8f>
c00180b2:	09 f2                	or     edx,esi
c00180b4:	80 ce 02             	or     dh,0x2
c00180b7:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00180bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180c0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00180c4:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00180cc:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00180cf:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00180d7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00180da:	5b                   	pop    ebx
c00180db:	5e                   	pop    esi
c00180dc:	5f                   	pop    edi
c00180dd:	c3                   	ret    
c00180de:	09 f2                	or     edx,esi
c00180e0:	80 e6 fd             	and    dh,0xfd
c00180e3:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00180e7:	eb d2                	jmp    c00180bb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6c>

c00180e9 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00180e9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00180ee:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00180f3:	c1 e0 04             	shl    eax,0x4
c00180f6:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00180f9:	c3                   	ret    

c00180fa <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00180fa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00180ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018104:	c1 e0 04             	shl    eax,0x4
c0018107:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001810b:	c3                   	ret    

c001810c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001810c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018111:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018116:	c1 e0 04             	shl    eax,0x4
c0018119:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001811c:	c3                   	ret    

c001811d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001811d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018122:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018127:	c1 e0 04             	shl    eax,0x4
c001812a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001812e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018131:	c3                   	ret    

c0018132 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018132:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018137:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001813c:	c1 e0 04             	shl    eax,0x4
c001813f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018143:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018147:	c3                   	ret    

c0018148 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018148:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001814d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018152:	c1 e0 04             	shl    eax,0x4
c0018155:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018159:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001815c:	c3                   	ret    

c001815d <Vm::faultHandler(regs*)>:
c001815d:	55                   	push   ebp
c001815e:	57                   	push   edi
c001815f:	56                   	push   esi
c0018160:	53                   	push   ebx
c0018161:	83 ec 1c             	sub    esp,0x1c
c0018164:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018168:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001816b:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001816f:	89 c6                	mov    esi,eax
c0018171:	52                   	push   edx
c0018172:	0f b7 c0             	movzx  eax,ax
c0018175:	50                   	push   eax
c0018176:	e8 ab f9 ff ff       	call   c0017b26 <Vm::realToLinear(unsigned short, unsigned short)>
c001817b:	59                   	pop    ecx
c001817c:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001817f:	5f                   	pop    edi
c0018180:	0f b7 d5             	movzx  edx,bp
c0018183:	8b 7b 44             	mov    edi,DWORD PTR [ebx+0x44]
c0018186:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001818a:	89 c1                	mov    ecx,eax
c001818c:	0f b7 c7             	movzx  eax,di
c001818f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018193:	50                   	push   eax
c0018194:	52                   	push   edx
c0018195:	e8 8c f9 ff ff       	call   c0017b26 <Vm::realToLinear(unsigned short, unsigned short)>
c001819a:	83 c4 08             	add    esp,0x8
c001819d:	c6 44 24 06 06       	mov    BYTE PTR [esp+0x6],0x6
c00181a2:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00181a7:	c6 44 24 05 00       	mov    BYTE PTR [esp+0x5],0x0
c00181ac:	8a 11                	mov    dl,BYTE PTR [ecx]
c00181ae:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c00181b2:	83 ea 26             	sub    edx,0x26
c00181b5:	0f b6 d2             	movzx  edx,dl
c00181b8:	81 fa d5 00 00 00    	cmp    edx,0xd5
c00181be:	0f 87 04 04 00 00    	ja     c00185c8 <Vm::faultHandler(regs*)+0x46b>
c00181c4:	ff 24 95 44 52 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdadbc]
c00181cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181d0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00181d4:	b0 01                	mov    al,0x1
c00181d6:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00181d9:	83 c5 01             	add    ebp,0x1
c00181dc:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c00181df:	83 c4 1c             	add    esp,0x1c
c00181e2:	5b                   	pop    ebx
c00181e3:	5e                   	pop    esi
c00181e4:	5f                   	pop    edi
c00181e5:	5d                   	pop    ebp
c00181e6:	c3                   	ret    
c00181e7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00181ea:	c6 44 24 06 02       	mov    BYTE PTR [esp+0x6],0x2
c00181ef:	83 c2 01             	add    edx,0x1
c00181f2:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00181f5:	83 c1 01             	add    ecx,0x1
c00181f8:	eb b2                	jmp    c00181ac <Vm::faultHandler(regs*)+0x4f>
c00181fa:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00181fd:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c0018202:	83 c2 01             	add    edx,0x1
c0018205:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018208:	eb eb                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x98>
c001820a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001820d:	c6 44 24 06 05       	mov    BYTE PTR [esp+0x6],0x5
c0018212:	83 c2 01             	add    edx,0x1
c0018215:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018218:	eb db                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x98>
c001821a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001821d:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0018222:	83 c2 01             	add    edx,0x1
c0018225:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018228:	eb cb                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x98>
c001822a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001822d:	c6 44 24 06 03       	mov    BYTE PTR [esp+0x6],0x3
c0018232:	83 c2 01             	add    edx,0x1
c0018235:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018238:	eb bb                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x98>
c001823a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001823d:	c6 44 24 06 04       	mov    BYTE PTR [esp+0x6],0x4
c0018242:	83 c2 01             	add    edx,0x1
c0018245:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018248:	eb ab                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x98>
c001824a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001824d:	c6 44 24 05 01       	mov    BYTE PTR [esp+0x5],0x1
c0018252:	83 c2 01             	add    edx,0x1
c0018255:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018258:	eb 9b                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x98>
c001825a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001825d:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0018262:	83 c2 01             	add    edx,0x1
c0018265:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018268:	eb 8b                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x98>
c001826a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001826d:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0018272:	74 0d                	je     c0018281 <Vm::faultHandler(regs*)+0x124>
c0018274:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001827b:	0f 87 8a 06 00 00    	ja     c001890b <Vm::faultHandler(regs*)+0x7ae>
c0018281:	83 ec 0c             	sub    esp,0xc
c0018284:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018288:	0f b7 f6             	movzx  esi,si
c001828b:	50                   	push   eax
c001828c:	e8 4c f8 ff ff       	call   c0017add <Vm::inbv(unsigned short)>
c0018291:	83 c4 0c             	add    esp,0xc
c0018294:	0f b6 c0             	movzx  eax,al
c0018297:	50                   	push   eax
c0018298:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001829c:	50                   	push   eax
c001829d:	56                   	push   esi
c001829e:	e8 7a fe ff ff       	call   c001811d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00182a3:	83 c4 10             	add    esp,0x10
c00182a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00182a9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00182ad:	0f 84 d6 05 00 00    	je     c0018889 <Vm::faultHandler(regs*)+0x72c>
c00182b3:	83 e8 01             	sub    eax,0x1
c00182b6:	0f b7 c0             	movzx  eax,ax
c00182b9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00182bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00182bf:	83 c0 01             	add    eax,0x1
c00182c2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00182c5:	83 c4 1c             	add    esp,0x1c
c00182c8:	b0 01                	mov    al,0x1
c00182ca:	5b                   	pop    ebx
c00182cb:	5e                   	pop    esi
c00182cc:	5f                   	pop    edi
c00182cd:	5d                   	pop    ebp
c00182ce:	c3                   	ret    
c00182cf:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00182d2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00182d5:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c00182da:	0f 85 98 04 00 00    	jne    c0018778 <Vm::faultHandler(regs*)+0x61b>
c00182e0:	0f b7 c8             	movzx  ecx,ax
c00182e3:	0f b7 f6             	movzx  esi,si
c00182e6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00182e9:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00182ee:	0f 84 35 05 00 00    	je     c0018829 <Vm::faultHandler(regs*)+0x6cc>
c00182f4:	ed                   	in     eax,dx
c00182f5:	83 ec 04             	sub    esp,0x4
c00182f8:	50                   	push   eax
c00182f9:	51                   	push   ecx
c00182fa:	56                   	push   esi
c00182fb:	e8 48 fe ff ff       	call   c0018148 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018300:	83 c4 10             	add    esp,0x10
c0018303:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018306:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001830a:	0f 84 9d 05 00 00    	je     c00188ad <Vm::faultHandler(regs*)+0x750>
c0018310:	83 e8 04             	sub    eax,0x4
c0018313:	25 ff ff 00 00       	and    eax,0xffff
c0018318:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001831b:	eb 9f                	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c001831d:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c0018322:	83 f8 06             	cmp    eax,0x6
c0018325:	0f 87 60 03 00 00    	ja     c001868b <Vm::faultHandler(regs*)+0x52e>
c001832b:	ff 24 85 9c 55 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdaa64]
c0018332:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c0018337:	83 f8 06             	cmp    eax,0x6
c001833a:	0f 87 f6 02 00 00    	ja     c0018636 <Vm::faultHandler(regs*)+0x4d9>
c0018340:	ff 24 85 b8 55 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdaa48]
c0018347:	83 ec 08             	sub    esp,0x8
c001834a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001834e:	50                   	push   eax
c001834f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018353:	50                   	push   eax
c0018354:	e8 97 f7 ff ff       	call   c0017af0 <Vm::outbv(unsigned short, unsigned char)>
c0018359:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001835c:	83 c4 10             	add    esp,0x10
c001835f:	83 c0 02             	add    eax,0x2
c0018362:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018365:	b0 01                	mov    al,0x1
c0018367:	e9 73 fe ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c001836c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018370:	3d ee 00 00 00       	cmp    eax,0xee
c0018375:	0f 84 5a 04 00 00    	je     c00187d5 <Vm::faultHandler(regs*)+0x678>
c001837b:	83 ec 0c             	sub    esp,0xc
c001837e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018382:	52                   	push   edx
c0018383:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018387:	56                   	push   esi
c0018388:	51                   	push   ecx
c0018389:	50                   	push   eax
c001838a:	53                   	push   ebx
c001838b:	e8 bf fc ff ff       	call   c001804f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018390:	83 c4 20             	add    esp,0x20
c0018393:	b0 01                	mov    al,0x1
c0018395:	e9 45 fe ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c001839a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001839e:	89 d1                	mov    ecx,edx
c00183a0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00183a3:	c1 e1 08             	shl    ecx,0x8
c00183a6:	09 ca                	or     edx,ecx
c00183a8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00183ab:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00183af:	89 d1                	mov    ecx,edx
c00183b1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00183b5:	c1 e1 08             	shl    ecx,0x8
c00183b8:	09 ca                	or     edx,ecx
c00183ba:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00183bd:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00183c1:	89 d1                	mov    ecx,edx
c00183c3:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00183c7:	c1 e1 08             	shl    ecx,0x8
c00183ca:	09 ca                	or     edx,ecx
c00183cc:	81 ca 00 02 02 00    	or     edx,0x20200
c00183d2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00183d5:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00183d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00183df:	d1 e8                	shr    eax,1
c00183e1:	83 e0 01             	and    eax,0x1
c00183e4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00183e7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00183ea:	83 c0 06             	add    eax,0x6
c00183ed:	25 ff ff 00 00       	and    eax,0xffff
c00183f2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00183f5:	b0 01                	mov    al,0x1
c00183f7:	e9 e3 fd ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c00183fc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00183ff:	83 ec 0c             	sub    esp,0xc
c0018402:	b0 00                	mov    al,0x0
c0018404:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018407:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001840b:	50                   	push   eax
c001840c:	e8 cc f6 ff ff       	call   c0017add <Vm::inbv(unsigned short)>
c0018411:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018414:	0f b6 c0             	movzx  eax,al
c0018417:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001841a:	09 c2                	or     edx,eax
c001841c:	83 c1 02             	add    ecx,0x2
c001841f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0018422:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0018425:	83 c4 10             	add    esp,0x10
c0018428:	b0 01                	mov    al,0x1
c001842a:	e9 b0 fd ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c001842f:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018434:	0f 85 7a 03 00 00    	jne    c00187b4 <Vm::faultHandler(regs*)+0x657>
c001843a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001843d:	81 e6 00 00 ff ff    	and    esi,0xffff0000
c0018443:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0018446:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001844a:	66 ed                	in     ax,dx
c001844c:	0f b7 c0             	movzx  eax,ax
c001844f:	09 f0                	or     eax,esi
c0018451:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018454:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018457:	83 c0 02             	add    eax,0x2
c001845a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001845d:	83 c4 1c             	add    esp,0x1c
c0018460:	b0 01                	mov    al,0x1
c0018462:	5b                   	pop    ebx
c0018463:	5e                   	pop    esi
c0018464:	5f                   	pop    edi
c0018465:	5d                   	pop    ebp
c0018466:	c3                   	ret    
c0018467:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001846a:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001846f:	0f 84 d7 02 00 00    	je     c001874c <Vm::faultHandler(regs*)+0x5ef>
c0018475:	83 ef 04             	sub    edi,0x4
c0018478:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001847e:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018484:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c0018487:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001848a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018490:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018494:	0f 84 22 fe ff ff    	je     c00182bc <Vm::faultHandler(regs*)+0x15f>
c001849a:	80 ce 02             	or     dh,0x2
c001849d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00184a0:	e9 17 fe ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c00184a5:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00184aa:	0f 84 6b 02 00 00    	je     c001871b <Vm::faultHandler(regs*)+0x5be>
c00184b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00184b2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00184b8:	81 ca 00 02 02 00    	or     edx,0x20200
c00184be:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00184c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00184c3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00184c9:	c1 e8 09             	shr    eax,0x9
c00184cc:	83 e0 01             	and    eax,0x1
c00184cf:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00184d2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00184d5:	83 c0 04             	add    eax,0x4
c00184d8:	25 ff ff 00 00       	and    eax,0xffff
c00184dd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00184e0:	e9 d7 fd ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c00184e5:	83 ec 08             	sub    esp,0x8
c00184e8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00184ec:	50                   	push   eax
c00184ed:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00184f1:	50                   	push   eax
c00184f2:	e8 f9 f5 ff ff       	call   c0017af0 <Vm::outbv(unsigned short, unsigned char)>
c00184f7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00184fa:	83 c4 10             	add    esp,0x10
c00184fd:	83 c2 01             	add    edx,0x1
c0018500:	b0 01                	mov    al,0x1
c0018502:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018505:	e9 d5 fc ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c001850a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001850d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018510:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018515:	0f 84 ac 02 00 00    	je     c00187c7 <Vm::faultHandler(regs*)+0x66a>
c001851b:	ef                   	out    dx,eax
c001851c:	e9 9b fd ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c0018521:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018524:	83 c2 01             	add    edx,0x1
c0018527:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001852a:	e9 c6 fc ff ff       	jmp    c00181f5 <Vm::faultHandler(regs*)+0x98>
c001852f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018534:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018538:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001853b:	83 c0 01             	add    eax,0x1
c001853e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018541:	b0 01                	mov    al,0x1
c0018543:	e9 97 fc ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c0018548:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001854b:	83 ec 0c             	sub    esp,0xc
c001854e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018552:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0018558:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001855b:	50                   	push   eax
c001855c:	e8 7c f5 ff ff       	call   c0017add <Vm::inbv(unsigned short)>
c0018561:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0018564:	0f b6 c0             	movzx  eax,al
c0018567:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001856a:	09 c7                	or     edi,eax
c001856c:	83 c5 01             	add    ebp,0x1
c001856f:	89 7b 2c             	mov    DWORD PTR [ebx+0x2c],edi
c0018572:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0018575:	83 c4 10             	add    esp,0x10
c0018578:	b0 01                	mov    al,0x1
c001857a:	e9 60 fc ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c001857f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018582:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018587:	0f 85 34 02 00 00    	jne    c00187c1 <Vm::faultHandler(regs*)+0x664>
c001858d:	66 ed                	in     ax,dx
c001858f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018592:	0f b7 c0             	movzx  eax,ax
c0018595:	81 e2 00 00 ff ff    	and    edx,0xffff0000
c001859b:	09 d0                	or     eax,edx
c001859d:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00185a0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00185a3:	83 c1 01             	add    ecx,0x1
c00185a6:	b0 01                	mov    al,0x1
c00185a8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00185ab:	e9 2f fc ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c00185b0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00185b3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00185b7:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00185bc:	0f 84 0c 02 00 00    	je     c00187ce <Vm::faultHandler(regs*)+0x671>
c00185c2:	ef                   	out    dx,eax
c00185c3:	e9 8c fe ff ff       	jmp    c0018454 <Vm::faultHandler(regs*)+0x2f7>
c00185c8:	0f b6 74 24 04       	movzx  esi,BYTE PTR [esp+0x4]
c00185cd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00185d1:	50                   	push   eax
c00185d2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00185d6:	50                   	push   eax
c00185d7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00185db:	50                   	push   eax
c00185dc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00185e0:	50                   	push   eax
c00185e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00185e5:	50                   	push   eax
c00185e6:	56                   	push   esi
c00185e7:	56                   	push   esi
c00185e8:	68 14 52 02 c0       	push   0xc0025214
c00185ed:	e8 8a e9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00185f2:	83 c4 20             	add    esp,0x20
c00185f5:	eb 05                	jmp    c00185fc <Vm::faultHandler(regs*)+0x49f>
c00185f7:	83 f8 5a             	cmp    eax,0x5a
c00185fa:	74 27                	je     c0018623 <Vm::faultHandler(regs*)+0x4c6>
c00185fc:	83 ec 0c             	sub    esp,0xc
c00185ff:	6a 60                	push   0x60
c0018601:	e8 d7 f4 ff ff       	call   c0017add <Vm::inbv(unsigned short)>
c0018606:	83 c4 10             	add    esp,0x10
c0018609:	0f b6 c0             	movzx  eax,al
c001860c:	83 f8 1c             	cmp    eax,0x1c
c001860f:	75 e6                	jne    c00185f7 <Vm::faultHandler(regs*)+0x49a>
c0018611:	eb 10                	jmp    c0018623 <Vm::faultHandler(regs*)+0x4c6>
c0018613:	83 ec 0c             	sub    esp,0xc
c0018616:	6a 60                	push   0x60
c0018618:	e8 c0 f4 ff ff       	call   c0017add <Vm::inbv(unsigned short)>
c001861d:	83 c4 10             	add    esp,0x10
c0018620:	0f b6 c0             	movzx  eax,al
c0018623:	83 f8 1c             	cmp    eax,0x1c
c0018626:	74 eb                	je     c0018613 <Vm::faultHandler(regs*)+0x4b6>
c0018628:	83 f8 5a             	cmp    eax,0x5a
c001862b:	74 e6                	je     c0018613 <Vm::faultHandler(regs*)+0x4b6>
c001862d:	31 c0                	xor    eax,eax
c001862f:	e9 ab fb ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c0018634:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018636:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0018639:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c001863e:	0f 85 9a 00 00 00    	jne    c00186de <Vm::faultHandler(regs*)+0x581>
c0018644:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018647:	0f b7 c5             	movzx  eax,bp
c001864a:	81 e1 00 04 00 00    	and    ecx,0x400
c0018650:	0f b7 d6             	movzx  edx,si
c0018653:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0018656:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001865b:	0f 84 f8 01 00 00    	je     c0018859 <Vm::faultHandler(regs*)+0x6fc>
c0018661:	83 ec 08             	sub    esp,0x8
c0018664:	50                   	push   eax
c0018665:	52                   	push   edx
c0018666:	e8 a1 fa ff ff       	call   c001810c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001866b:	83 c4 10             	add    esp,0x10
c001866e:	89 fa                	mov    edx,edi
c0018670:	ef                   	out    dx,eax
c0018671:	85 c9                	test   ecx,ecx
c0018673:	0f 84 44 02 00 00    	je     c00188bd <Vm::faultHandler(regs*)+0x760>
c0018679:	8d 45 fc             	lea    eax,[ebp-0x4]
c001867c:	25 ff ff 00 00       	and    eax,0xffff
c0018681:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018684:	e9 33 fc ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c0018689:	8b 33                	mov    esi,DWORD PTR [ebx]
c001868b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001868e:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0018693:	74 0b                	je     c00186a0 <Vm::faultHandler(regs*)+0x543>
c0018695:	3d ff ff 00 00       	cmp    eax,0xffff
c001869a:	0f 87 3a 02 00 00    	ja     c00188da <Vm::faultHandler(regs*)+0x77d>
c00186a0:	83 ec 08             	sub    esp,0x8
c00186a3:	0f b7 c0             	movzx  eax,ax
c00186a6:	50                   	push   eax
c00186a7:	0f b7 c6             	movzx  eax,si
c00186aa:	50                   	push   eax
c00186ab:	e8 39 fa ff ff       	call   c00180e9 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00186b0:	5e                   	pop    esi
c00186b1:	0f b6 c0             	movzx  eax,al
c00186b4:	5f                   	pop    edi
c00186b5:	50                   	push   eax
c00186b6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00186ba:	50                   	push   eax
c00186bb:	e8 30 f4 ff ff       	call   c0017af0 <Vm::outbv(unsigned short, unsigned char)>
c00186c0:	83 c4 10             	add    esp,0x10
c00186c3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00186c6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00186ca:	0f 84 ae 01 00 00    	je     c001887e <Vm::faultHandler(regs*)+0x721>
c00186d0:	83 e8 01             	sub    eax,0x1
c00186d3:	0f b7 c0             	movzx  eax,ax
c00186d6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00186d9:	e9 de fb ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c00186de:	81 fd ff ff 00 00    	cmp    ebp,0xffff
c00186e4:	0f 86 5a ff ff ff    	jbe    c0018644 <Vm::faultHandler(regs*)+0x4e7>
c00186ea:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00186ee:	50                   	push   eax
c00186ef:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00186f3:	50                   	push   eax
c00186f4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00186f8:	50                   	push   eax
c00186f9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00186fd:	50                   	push   eax
c00186fe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018702:	50                   	push   eax
c0018703:	6a 6f                	push   0x6f
c0018705:	6a 6f                	push   0x6f
c0018707:	68 e4 51 02 c0       	push   0xc00251e4
c001870c:	e8 6b e8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018711:	83 c4 20             	add    esp,0x20
c0018714:	31 c0                	xor    eax,eax
c0018716:	e9 c4 fa ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c001871b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001871e:	81 ca 00 02 02 00    	or     edx,0x20200
c0018724:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018727:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001872a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018730:	c1 e8 09             	shr    eax,0x9
c0018733:	83 e0 01             	and    eax,0x1
c0018736:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018739:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001873c:	83 c0 02             	add    eax,0x2
c001873f:	25 ff ff 00 00       	and    eax,0xffff
c0018744:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018747:	e9 70 fb ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c001874c:	83 ef 02             	sub    edi,0x2
c001874f:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018755:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c0018758:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001875c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018762:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018766:	0f 84 28 01 00 00    	je     c0018894 <Vm::faultHandler(regs*)+0x737>
c001876c:	80 ce 02             	or     dh,0x2
c001876f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018773:	e9 44 fb ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c0018778:	3d ff ff 00 00       	cmp    eax,0xffff
c001877d:	0f 86 5d fb ff ff    	jbe    c00182e0 <Vm::faultHandler(regs*)+0x183>
c0018783:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018787:	50                   	push   eax
c0018788:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001878c:	50                   	push   eax
c001878d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018791:	50                   	push   eax
c0018792:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018796:	50                   	push   eax
c0018797:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001879b:	50                   	push   eax
c001879c:	6a 6d                	push   0x6d
c001879e:	6a 6d                	push   0x6d
c00187a0:	68 e4 51 02 c0       	push   0xc00251e4
c00187a5:	e8 d2 e7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00187aa:	83 c4 20             	add    esp,0x20
c00187ad:	31 c0                	xor    eax,eax
c00187af:	e9 2b fa ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c00187b4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00187b8:	ed                   	in     eax,dx
c00187b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00187bc:	e9 93 fc ff ff       	jmp    c0018454 <Vm::faultHandler(regs*)+0x2f7>
c00187c1:	ed                   	in     eax,dx
c00187c2:	e9 d6 fd ff ff       	jmp    c001859d <Vm::faultHandler(regs*)+0x440>
c00187c7:	66 ef                	out    dx,ax
c00187c9:	e9 ee fa ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c00187ce:	66 ef                	out    dx,ax
c00187d0:	e9 7f fc ff ff       	jmp    c0018454 <Vm::faultHandler(regs*)+0x2f7>
c00187d5:	83 ec 0c             	sub    esp,0xc
c00187d8:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c00187db:	57                   	push   edi
c00187dc:	e8 b7 f3 ff ff       	call   c0017b98 <Vm::mainloop3(unsigned long)>
c00187e1:	83 c4 10             	add    esp,0x10
c00187e4:	b0 01                	mov    al,0x1
c00187e6:	e9 f4 f9 ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c00187eb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00187ee:	e9 43 fe ff ff       	jmp    c0018636 <Vm::faultHandler(regs*)+0x4d9>
c00187f3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00187f6:	e9 3b fe ff ff       	jmp    c0018636 <Vm::faultHandler(regs*)+0x4d9>
c00187fb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00187fe:	e9 33 fe ff ff       	jmp    c0018636 <Vm::faultHandler(regs*)+0x4d9>
c0018803:	89 ee                	mov    esi,ebp
c0018805:	e9 2c fe ff ff       	jmp    c0018636 <Vm::faultHandler(regs*)+0x4d9>
c001880a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001880d:	e9 79 fe ff ff       	jmp    c001868b <Vm::faultHandler(regs*)+0x52e>
c0018812:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018815:	e9 71 fe ff ff       	jmp    c001868b <Vm::faultHandler(regs*)+0x52e>
c001881a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001881d:	e9 69 fe ff ff       	jmp    c001868b <Vm::faultHandler(regs*)+0x52e>
c0018822:	89 ee                	mov    esi,ebp
c0018824:	e9 62 fe ff ff       	jmp    c001868b <Vm::faultHandler(regs*)+0x52e>
c0018829:	66 ed                	in     ax,dx
c001882b:	83 ec 04             	sub    esp,0x4
c001882e:	0f b7 c0             	movzx  eax,ax
c0018831:	50                   	push   eax
c0018832:	51                   	push   ecx
c0018833:	56                   	push   esi
c0018834:	e8 f9 f8 ff ff       	call   c0018132 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018839:	83 c4 10             	add    esp,0x10
c001883c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001883f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018843:	0f 84 84 00 00 00    	je     c00188cd <Vm::faultHandler(regs*)+0x770>
c0018849:	83 e8 02             	sub    eax,0x2
c001884c:	25 ff ff 00 00       	and    eax,0xffff
c0018851:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018854:	e9 63 fa ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c0018859:	83 ec 08             	sub    esp,0x8
c001885c:	50                   	push   eax
c001885d:	52                   	push   edx
c001885e:	e8 97 f8 ff ff       	call   c00180fa <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018863:	83 c4 10             	add    esp,0x10
c0018866:	89 fa                	mov    edx,edi
c0018868:	66 ef                	out    dx,ax
c001886a:	85 c9                	test   ecx,ecx
c001886c:	74 32                	je     c00188a0 <Vm::faultHandler(regs*)+0x743>
c001886e:	8d 45 fe             	lea    eax,[ebp-0x2]
c0018871:	25 ff ff 00 00       	and    eax,0xffff
c0018876:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018879:	e9 3e fa ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c001887e:	83 c0 01             	add    eax,0x1
c0018881:	0f b7 c0             	movzx  eax,ax
c0018884:	e9 4d fe ff ff       	jmp    c00186d6 <Vm::faultHandler(regs*)+0x579>
c0018889:	83 c0 01             	add    eax,0x1
c001888c:	0f b7 c0             	movzx  eax,ax
c001888f:	e9 25 fa ff ff       	jmp    c00182b9 <Vm::faultHandler(regs*)+0x15c>
c0018894:	80 e6 fd             	and    dh,0xfd
c0018897:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001889b:	e9 1c fa ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c00188a0:	8d 45 02             	lea    eax,[ebp+0x2]
c00188a3:	25 ff ff 00 00       	and    eax,0xffff
c00188a8:	e9 29 fe ff ff       	jmp    c00186d6 <Vm::faultHandler(regs*)+0x579>
c00188ad:	83 c0 04             	add    eax,0x4
c00188b0:	25 ff ff 00 00       	and    eax,0xffff
c00188b5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00188b8:	e9 ff f9 ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c00188bd:	8d 45 04             	lea    eax,[ebp+0x4]
c00188c0:	25 ff ff 00 00       	and    eax,0xffff
c00188c5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00188c8:	e9 ef f9 ff ff       	jmp    c00182bc <Vm::faultHandler(regs*)+0x15f>
c00188cd:	83 c0 02             	add    eax,0x2
c00188d0:	25 ff ff 00 00       	and    eax,0xffff
c00188d5:	e9 df f9 ff ff       	jmp    c00182b9 <Vm::faultHandler(regs*)+0x15c>
c00188da:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00188de:	50                   	push   eax
c00188df:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00188e3:	50                   	push   eax
c00188e4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00188e8:	50                   	push   eax
c00188e9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00188ed:	50                   	push   eax
c00188ee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00188f2:	50                   	push   eax
c00188f3:	6a 6e                	push   0x6e
c00188f5:	6a 6e                	push   0x6e
c00188f7:	68 e4 51 02 c0       	push   0xc00251e4
c00188fc:	e8 7b e6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018901:	83 c4 20             	add    esp,0x20
c0018904:	31 c0                	xor    eax,eax
c0018906:	e9 d4 f8 ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>
c001890b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001890f:	50                   	push   eax
c0018910:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018914:	50                   	push   eax
c0018915:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018919:	50                   	push   eax
c001891a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001891e:	50                   	push   eax
c001891f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018923:	50                   	push   eax
c0018924:	6a 6c                	push   0x6c
c0018926:	6a 6c                	push   0x6c
c0018928:	68 e4 51 02 c0       	push   0xc00251e4
c001892d:	e8 4a e6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018932:	83 c4 20             	add    esp,0x20
c0018935:	31 c0                	xor    eax,eax
c0018937:	e9 a3 f8 ff ff       	jmp    c00181df <Vm::faultHandler(regs*)+0x82>

c001893c <IOAPIC::close(int, int, void*)>:
c001893c:	b8 00 00 00 00       	mov    eax,0x0
c0018941:	c3                   	ret    

c0018942 <apicGetBase()>:
c0018942:	55                   	push   ebp
c0018943:	89 e5                	mov    ebp,esp
c0018945:	83 ec 18             	sub    esp,0x18
c0018948:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001894d:	83 e0 08             	and    eax,0x8
c0018950:	0f b6 c0             	movzx  eax,al
c0018953:	85 c0                	test   eax,eax
c0018955:	75 07                	jne    c001895e <apicGetBase()+0x1c>
c0018957:	b8 00 00 00 00       	mov    eax,0x0
c001895c:	eb 1b                	jmp    c0018979 <apicGetBase()+0x37>
c001895e:	83 ec 0c             	sub    esp,0xc
c0018961:	6a 1b                	push   0x1b
c0018963:	e8 61 15 00 00       	call   c0019ec9 <x86rdmsr(unsigned int)>
c0018968:	83 c4 10             	add    esp,0x10
c001896b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001896e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018971:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018974:	25 00 00 ff ff       	and    eax,0xffff0000
c0018979:	c9                   	leave  
c001897a:	c3                   	ret    
c001897b:	90                   	nop

c001897c <IOAPIC::IOAPIC()>:
c001897c:	83 ec 0c             	sub    esp,0xc
c001897f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018983:	83 ec 08             	sub    esp,0x8
c0018986:	68 d4 55 02 c0       	push   0xc00255d4
c001898b:	50                   	push   eax
c001898c:	e8 25 12 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0018991:	83 c4 10             	add    esp,0x10
c0018994:	ba f4 55 02 c0       	mov    edx,0xc00255f4
c0018999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001899d:	89 10                	mov    DWORD PTR [eax],edx
c001899f:	90                   	nop
c00189a0:	83 c4 0c             	add    esp,0xc
c00189a3:	c3                   	ret    

c00189a4 <apicOpen()>:
c00189a4:	55                   	push   ebp
c00189a5:	89 e5                	mov    ebp,esp
c00189a7:	53                   	push   ebx
c00189a8:	83 ec 34             	sub    esp,0x34
c00189ab:	83 ec 0c             	sub    esp,0xc
c00189ae:	68 dc 55 02 c0       	push   0xc00255dc
c00189b3:	e8 c4 e5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00189b8:	83 c4 10             	add    esp,0x10
c00189bb:	a0 00 fb 02 c0       	mov    al,ds:0xc002fb00
c00189c0:	83 f0 01             	xor    eax,0x1
c00189c3:	0f b6 c0             	movzx  eax,al
c00189c6:	85 c0                	test   eax,eax
c00189c8:	0f 84 a3 00 00 00    	je     c0018a71 <apicOpen()+0xcd>
c00189ce:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00189d2:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c00189d7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00189db:	0f b6 c0             	movzx  eax,al
c00189de:	39 c2                	cmp    edx,eax
c00189e0:	0f 83 84 00 00 00    	jae    c0018a6a <apicOpen()+0xc6>
c00189e6:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c00189ed:	83 ec 0c             	sub    esp,0xc
c00189f0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00189f3:	e8 97 71 ff ff       	call   c000fb8f <malloc>
c00189f8:	83 c4 10             	add    esp,0x10
c00189fb:	89 c3                	mov    ebx,eax
c00189fd:	83 ec 0c             	sub    esp,0xc
c0018a00:	53                   	push   ebx
c0018a01:	e8 76 ff ff ff       	call   c001897c <IOAPIC::IOAPIC()>
c0018a06:	83 c4 10             	add    esp,0x10
c0018a09:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0018a0c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018a10:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018a13:	89 14 85 e0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0520],edx
c0018a1a:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c0018a1f:	83 c0 01             	add    eax,0x1
c0018a22:	a3 c0 fa 02 c0       	mov    ds:0xc002fac0,eax
c0018a27:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0018a2c:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018a32:	83 ec 08             	sub    esp,0x8
c0018a35:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018a38:	50                   	push   eax
c0018a39:	e8 16 10 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c0018a3e:	83 c4 10             	add    esp,0x10
c0018a41:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018a44:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a46:	83 c0 08             	add    eax,0x8
c0018a49:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a4b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018a4f:	6a 00                	push   0x0
c0018a51:	6a 00                	push   0x0
c0018a53:	52                   	push   edx
c0018a54:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018a57:	ff d0                	call   eax
c0018a59:	83 c4 10             	add    esp,0x10
c0018a5c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0018a5f:	83 c0 01             	add    eax,0x1
c0018a62:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0018a65:	e9 68 ff ff ff       	jmp    c00189d2 <apicOpen()+0x2e>
c0018a6a:	c6 05 00 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb00,0x1
c0018a71:	e8 cc fe ff ff       	call   c0018942 <apicGetBase()>
c0018a76:	05 f0 00 00 00       	add    eax,0xf0
c0018a7b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018a7e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018a81:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a83:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018a86:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0018a8d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0018a94:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018a97:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018a9a:	89 10                	mov    DWORD PTR [eax],edx
c0018a9c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0018aa3:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c0018aa8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0018aab:	7d 7c                	jge    c0018b29 <apicOpen()+0x185>
c0018aad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018ab0:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018ab7:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0018aba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018abd:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018ac4:	c1 e8 08             	shr    eax,0x8
c0018ac7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018acb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018ace:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018ad5:	c1 e8 18             	shr    eax,0x18
c0018ad8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0018adb:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018adf:	3d ff 00 00 00       	cmp    eax,0xff
c0018ae4:	75 3a                	jne    c0018b20 <apicOpen()+0x17c>
c0018ae6:	e8 57 fe ff ff       	call   c0018942 <apicGetBase()>
c0018aeb:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0018aef:	83 fa 01             	cmp    edx,0x1
c0018af2:	75 07                	jne    c0018afb <apicOpen()+0x157>
c0018af4:	ba 60 03 00 00       	mov    edx,0x360
c0018af9:	eb 05                	jmp    c0018b00 <apicOpen()+0x15c>
c0018afb:	ba 50 03 00 00       	mov    edx,0x350
c0018b00:	01 d0                	add    eax,edx
c0018b02:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018b05:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b0a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018b0d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018b14:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018b18:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018b1e:	89 10                	mov    DWORD PTR [eax],edx
c0018b20:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018b24:	e9 7a ff ff ff       	jmp    c0018aa3 <apicOpen()+0xff>
c0018b29:	90                   	nop
c0018b2a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018b2d:	c9                   	leave  
c0018b2e:	c3                   	ret    
c0018b2f:	90                   	nop

c0018b30 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018b30:	55                   	push   ebp
c0018b31:	89 e5                	mov    ebp,esp
c0018b33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b3c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018b3f:	72 1d                	jb     c0018b5e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b44:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0018b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b4d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018b53:	01 d0                	add    eax,edx
c0018b55:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018b58:	73 04                	jae    c0018b5e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018b5a:	b0 01                	mov    al,0x1
c0018b5c:	eb 02                	jmp    c0018b60 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0018b5e:	b0 00                	mov    al,0x0
c0018b60:	5d                   	pop    ebp
c0018b61:	c3                   	ret    

c0018b62 <IOAPIC::read(int)>:
c0018b62:	55                   	push   ebp
c0018b63:	89 e5                	mov    ebp,esp
c0018b65:	83 ec 10             	sub    esp,0x10
c0018b68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b6b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018b71:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018b74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018b77:	0f b6 d0             	movzx  edx,al
c0018b7a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018b7d:	89 10                	mov    DWORD PTR [eax],edx
c0018b7f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018b82:	83 c0 10             	add    eax,0x10
c0018b85:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b87:	c9                   	leave  
c0018b88:	c3                   	ret    
c0018b89:	90                   	nop

c0018b8a <IOAPIC::open(int, int, void*)>:
c0018b8a:	55                   	push   ebp
c0018b8b:	89 e5                	mov    ebp,esp
c0018b8d:	57                   	push   edi
c0018b8e:	56                   	push   esi
c0018b8f:	53                   	push   ebx
c0018b90:	83 ec 04             	sub    esp,0x4
c0018b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b96:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018b99:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ba2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018ba8:	8b 14 85 80 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3180]
c0018baf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bb2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bbb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018bc1:	8b 14 85 00 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3100]
c0018bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bcb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0018bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bd4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018bda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bdd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018be3:	0f b6 f0             	movzx  esi,al
c0018be6:	89 d0                	mov    eax,edx
c0018be8:	ba 00 00 00 00       	mov    edx,0x0
c0018bed:	89 c7                	mov    edi,eax
c0018bef:	83 e7 ff             	and    edi,0xffffffff
c0018bf2:	89 f9                	mov    ecx,edi
c0018bf4:	0f b6 da             	movzx  ebx,dl
c0018bf7:	89 c8                	mov    eax,ecx
c0018bf9:	89 da                	mov    edx,ebx
c0018bfb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0018bfe:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018c01:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018c05:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018c09:	83 e0 00             	and    eax,0x0
c0018c0c:	09 d0                	or     eax,edx
c0018c0e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c15:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018c1b:	8d 50 01             	lea    edx,[eax+0x1]
c0018c1e:	88 d1                	mov    cl,dl
c0018c20:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018c23:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018c29:	0f b6 d0             	movzx  edx,al
c0018c2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c2f:	83 c2 08             	add    edx,0x8
c0018c32:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018c36:	0f b6 c9             	movzx  ecx,cl
c0018c39:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0018c3f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018c43:	6a 01                	push   0x1
c0018c45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018c48:	e8 15 ff ff ff       	call   c0018b62 <IOAPIC::read(int)>
c0018c4d:	83 c4 08             	add    esp,0x8
c0018c50:	c1 f8 10             	sar    eax,0x10
c0018c53:	0f b6 c0             	movzx  eax,al
c0018c56:	8d 50 01             	lea    edx,[eax+0x1]
c0018c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c5c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0018c62:	b8 00 00 00 00       	mov    eax,0x0
c0018c67:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018c6a:	5b                   	pop    ebx
c0018c6b:	5e                   	pop    esi
c0018c6c:	5f                   	pop    edi
c0018c6d:	5d                   	pop    ebp
c0018c6e:	c3                   	ret    
c0018c6f:	90                   	nop

c0018c70 <IOAPIC::write(int, int)>:
c0018c70:	55                   	push   ebp
c0018c71:	89 e5                	mov    ebp,esp
c0018c73:	83 ec 10             	sub    esp,0x10
c0018c76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c79:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018c7f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018c82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018c85:	0f b6 d0             	movzx  edx,al
c0018c88:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018c8b:	89 10                	mov    DWORD PTR [eax],edx
c0018c8d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018c90:	8d 50 10             	lea    edx,[eax+0x10]
c0018c93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018c96:	89 02                	mov    DWORD PTR [edx],eax
c0018c98:	90                   	nop
c0018c99:	c9                   	leave  
c0018c9a:	c3                   	ret    
c0018c9b:	90                   	nop

c0018c9c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0018c9c:	55                   	push   ebp
c0018c9d:	89 e5                	mov    ebp,esp
c0018c9f:	53                   	push   ebx
c0018ca0:	83 ec 2c             	sub    esp,0x2c
c0018ca3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018ca6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0018ca9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0018cac:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0018caf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0018cb2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018cb5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018cb8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0018cbb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0018cbe:	88 d8                	mov    al,bl
c0018cc0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0018cc3:	88 c8                	mov    al,cl
c0018cc5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0018cc8:	88 d0                	mov    al,dl
c0018cca:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0018ccd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018cd1:	83 c0 08             	add    eax,0x8
c0018cd4:	01 c0                	add    eax,eax
c0018cd6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018cd9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018cdd:	83 c0 08             	add    eax,0x8
c0018ce0:	01 c0                	add    eax,eax
c0018ce2:	83 c0 01             	add    eax,0x1
c0018ce5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018ce8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018ceb:	50                   	push   eax
c0018cec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018cef:	e8 6e fe ff ff       	call   c0018b62 <IOAPIC::read(int)>
c0018cf4:	83 c4 08             	add    esp,0x8
c0018cf7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018cfa:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018d01:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018d04:	c1 e0 18             	shl    eax,0x18
c0018d07:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0018d0a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0018d0d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018d10:	52                   	push   edx
c0018d11:	50                   	push   eax
c0018d12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018d15:	e8 56 ff ff ff       	call   c0018c70 <IOAPIC::write(int, int)>
c0018d1a:	83 c4 0c             	add    esp,0xc
c0018d1d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018d20:	50                   	push   eax
c0018d21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018d24:	e8 39 fe ff ff       	call   c0018b62 <IOAPIC::read(int)>
c0018d29:	83 c4 08             	add    esp,0x8
c0018d2c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018d2f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0018d36:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0018d3d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0018d44:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0018d48:	85 c0                	test   eax,eax
c0018d4a:	74 09                	je     c0018d55 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0018d4c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0018d53:	eb 07                	jmp    c0018d5c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0018d55:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0018d5c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0018d60:	85 c0                	test   eax,eax
c0018d62:	74 09                	je     c0018d6d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0018d64:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0018d6b:	eb 07                	jmp    c0018d74 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0018d6d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0018d74:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0018d7b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0018d7f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0018d82:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0018d85:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018d88:	52                   	push   edx
c0018d89:	50                   	push   eax
c0018d8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018d8d:	e8 de fe ff ff       	call   c0018c70 <IOAPIC::write(int, int)>
c0018d92:	83 c4 0c             	add    esp,0xc
c0018d95:	90                   	nop
c0018d96:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018d99:	c9                   	leave  
c0018d9a:	c3                   	ret    
c0018d9b:	90                   	nop

c0018d9c <noCopro(unsigned long)>:
c0018d9c:	c3                   	ret    

c0018d9d <HalRestart()>:
c0018d9d:	e4 64                	in     al,0x64
c0018d9f:	a8 02                	test   al,0x2
c0018da1:	75 fa                	jne    c0018d9d <HalRestart()>
c0018da3:	b0 fe                	mov    al,0xfe
c0018da5:	e6 64                	out    0x64,al
c0018da7:	c3                   	ret    

c0018da8 <HalShutdown()>:
c0018da8:	c3                   	ret    

c0018da9 <HalSleep()>:
c0018da9:	c3                   	ret    

c0018daa <CPU::close(int, int, void*)>:
c0018daa:	31 c0                	xor    eax,eax
c0018dac:	c3                   	ret    

c0018dad <x86ReadCMOS(unsigned char)>:
c0018dad:	83 ec 14             	sub    esp,0x14
c0018db0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018db4:	88 04 24             	mov    BYTE PTR [esp],al
c0018db7:	a0 2c fb 02 c0       	mov    al,ds:0xc002fb2c
c0018dbc:	0f b6 c0             	movzx  eax,al
c0018dbf:	85 c0                	test   eax,eax
c0018dc1:	74 04                	je     c0018dc7 <x86ReadCMOS(unsigned char)+0x1a>
c0018dc3:	b2 00                	mov    dl,0x0
c0018dc5:	eb 02                	jmp    c0018dc9 <x86ReadCMOS(unsigned char)+0x1c>
c0018dc7:	b2 80                	mov    dl,0x80
c0018dc9:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018dcc:	09 d0                	or     eax,edx
c0018dce:	0f b6 c0             	movzx  eax,al
c0018dd1:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018dd8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018ddc:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018de0:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018de5:	ee                   	out    dx,al
c0018de6:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018ded:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018df2:	89 c2                	mov    edx,eax
c0018df4:	ec                   	in     al,dx
c0018df5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018df9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018dfd:	83 c4 14             	add    esp,0x14
c0018e00:	c3                   	ret    

c0018e01 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018e01:	83 ec 18             	sub    esp,0x18
c0018e04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e0c:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0018e10:	88 04 24             	mov    BYTE PTR [esp],al
c0018e13:	a0 2c fb 02 c0       	mov    al,ds:0xc002fb2c
c0018e18:	0f b6 c0             	movzx  eax,al
c0018e1b:	85 c0                	test   eax,eax
c0018e1d:	74 04                	je     c0018e23 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0018e1f:	b2 00                	mov    dl,0x0
c0018e21:	eb 02                	jmp    c0018e25 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018e23:	b2 80                	mov    dl,0x80
c0018e25:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018e29:	09 d0                	or     eax,edx
c0018e2b:	0f b6 c0             	movzx  eax,al
c0018e2e:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018e35:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018e39:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e3d:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018e42:	ee                   	out    dx,al
c0018e43:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018e47:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018e4e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018e52:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018e56:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018e5b:	ee                   	out    dx,al
c0018e5c:	90                   	nop
c0018e5d:	83 c4 18             	add    esp,0x18
c0018e60:	c3                   	ret    

c0018e61 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018e61:	60                   	pusha  
c0018e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e6a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e6e:	9c                   	pushf  
c0018e6f:	fa                   	cli    
c0018e70:	0f 09                	wbinvd 
c0018e72:	0f 30                	wrmsr  
c0018e74:	9d                   	popf   
c0018e75:	89 c2                	mov    edx,eax
c0018e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e7b:	89 10                	mov    DWORD PTR [eax],edx
c0018e7d:	61                   	popa   
c0018e7e:	90                   	nop
c0018e7f:	c3                   	ret    

c0018e80 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018e80:	60                   	pusha  
c0018e81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e85:	89 c1                	mov    ecx,eax
c0018e87:	9c                   	pushf  
c0018e88:	fa                   	cli    
c0018e89:	0f 09                	wbinvd 
c0018e8b:	31 c0                	xor    eax,eax
c0018e8d:	31 d2                	xor    edx,edx
c0018e8f:	0f 32                	rdmsr  
c0018e91:	9d                   	popf   
c0018e92:	89 c2                	mov    edx,eax
c0018e94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e98:	89 10                	mov    DWORD PTR [eax],edx
c0018e9a:	61                   	popa   
c0018e9b:	90                   	nop
c0018e9c:	c3                   	ret    

c0018e9d <AMD_K6_writeback(int, int, int)>:
c0018e9d:	83 ec 20             	sub    esp,0x20
c0018ea0:	a1 30 f1 02 c0       	mov    eax,ds:0xc002f130
c0018ea5:	c1 e8 14             	shr    eax,0x14
c0018ea8:	c1 e8 02             	shr    eax,0x2
c0018eab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018eaf:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018eb4:	0f 85 9e 00 00 00    	jne    c0018f58 <AMD_K6_writeback(int, int, int)+0xbb>
c0018eba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ebe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018ec2:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0018ec7:	75 19                	jne    c0018ee2 <AMD_K6_writeback(int, int, int)+0x45>
c0018ec9:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018ece:	7f 0a                	jg     c0018eda <AMD_K6_writeback(int, int, int)+0x3d>
c0018ed0:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0018ed8:	eb 08                	jmp    c0018ee2 <AMD_K6_writeback(int, int, int)+0x45>
c0018eda:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018ee2:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0018ee7:	7c 6e                	jl     c0018f57 <AMD_K6_writeback(int, int, int)+0xba>
c0018ee9:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018eee:	7e 09                	jle    c0018ef9 <AMD_K6_writeback(int, int, int)+0x5c>
c0018ef0:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0018ef5:	74 36                	je     c0018f2d <AMD_K6_writeback(int, int, int)+0x90>
c0018ef7:	eb 5e                	jmp    c0018f57 <AMD_K6_writeback(int, int, int)+0xba>
c0018ef9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018efd:	50                   	push   eax
c0018efe:	68 82 00 00 c0       	push   0xc0000082
c0018f03:	e8 78 ff ff ff       	call   c0018e80 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018f08:	83 c4 08             	add    esp,0x8
c0018f0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f0f:	01 c0                	add    eax,eax
c0018f11:	83 e0 7f             	and    eax,0x7f
c0018f14:	89 c2                	mov    edx,eax
c0018f16:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f1a:	50                   	push   eax
c0018f1b:	6a 00                	push   0x0
c0018f1d:	52                   	push   edx
c0018f1e:	68 82 00 00 c0       	push   0xc0000082
c0018f23:	e8 39 ff ff ff       	call   c0018e61 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018f28:	83 c4 10             	add    esp,0x10
c0018f2b:	eb 2b                	jmp    c0018f58 <AMD_K6_writeback(int, int, int)+0xbb>
c0018f2d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f31:	50                   	push   eax
c0018f32:	68 82 00 00 c0       	push   0xc0000082
c0018f37:	e8 44 ff ff ff       	call   c0018e80 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018f3c:	83 c4 08             	add    esp,0x8
c0018f3f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f43:	50                   	push   eax
c0018f44:	6a 00                	push   0x0
c0018f46:	6a 00                	push   0x0
c0018f48:	68 82 00 00 c0       	push   0xc0000082
c0018f4d:	e8 0f ff ff ff       	call   c0018e61 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018f52:	83 c4 10             	add    esp,0x10
c0018f55:	eb 01                	jmp    c0018f58 <AMD_K6_writeback(int, int, int)+0xbb>
c0018f57:	90                   	nop
c0018f58:	90                   	nop
c0018f59:	83 c4 20             	add    esp,0x20
c0018f5c:	c3                   	ret    

c0018f5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f5d:	56                   	push   esi
c0018f5e:	53                   	push   ebx
c0018f5f:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0018f64:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0018f68:	75 32                	jne    c0018f9c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018f6a:	8b 15 20 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb20
c0018f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f74:	89 10                	mov    DWORD PTR [eax],edx
c0018f76:	8b 15 1c fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb1c
c0018f7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f80:	89 10                	mov    DWORD PTR [eax],edx
c0018f82:	8b 15 18 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb18
c0018f88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f8c:	89 10                	mov    DWORD PTR [eax],edx
c0018f8e:	8b 15 14 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb14
c0018f94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f98:	89 10                	mov    DWORD PTR [eax],edx
c0018f9a:	eb 5c                	jmp    c0018ff8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018f9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018fa0:	ba 00 00 00 00       	mov    edx,0x0
c0018fa5:	89 d1                	mov    ecx,edx
c0018fa7:	0f a2                	cpuid  
c0018fa9:	89 c6                	mov    esi,eax
c0018fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018faf:	89 30                	mov    DWORD PTR [eax],esi
c0018fb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fb5:	89 18                	mov    DWORD PTR [eax],ebx
c0018fb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018fbb:	89 08                	mov    DWORD PTR [eax],ecx
c0018fbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018fc1:	89 10                	mov    DWORD PTR [eax],edx
c0018fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018fc7:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c0018fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fd2:	a3 20 fb 02 c0       	mov    ds:0xc002fb20,eax
c0018fd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fdd:	a3 1c fb 02 c0       	mov    ds:0xc002fb1c,eax
c0018fe2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018fe6:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fe8:	a3 18 fb 02 c0       	mov    ds:0xc002fb18,eax
c0018fed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ff1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ff3:	a3 14 fb 02 c0       	mov    ds:0xc002fb14,eax
c0018ff8:	5b                   	pop    ebx
c0018ff9:	5e                   	pop    esi
c0018ffa:	c3                   	ret    

c0018ffb <cpuidCheckEDX(unsigned int)>:
c0018ffb:	83 ec 10             	sub    esp,0x10
c0018ffe:	89 e0                	mov    eax,esp
c0019000:	50                   	push   eax
c0019001:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019005:	50                   	push   eax
c0019006:	8d 44 24 10          	lea    eax,[esp+0x10]
c001900a:	50                   	push   eax
c001900b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001900f:	50                   	push   eax
c0019010:	6a 01                	push   0x1
c0019012:	e8 46 ff ff ff       	call   c0018f5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019017:	83 c4 14             	add    esp,0x14
c001901a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001901d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019021:	0f 95 c0             	setne  al
c0019024:	83 c4 10             	add    esp,0x10
c0019027:	c3                   	ret    

c0019028 <cpuidCheckECX(unsigned int)>:
c0019028:	83 ec 10             	sub    esp,0x10
c001902b:	89 e0                	mov    eax,esp
c001902d:	50                   	push   eax
c001902e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019032:	50                   	push   eax
c0019033:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019037:	50                   	push   eax
c0019038:	8d 44 24 18          	lea    eax,[esp+0x18]
c001903c:	50                   	push   eax
c001903d:	6a 01                	push   0x1
c001903f:	e8 19 ff ff ff       	call   c0018f5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019044:	83 c4 14             	add    esp,0x14
c0019047:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001904b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001904f:	0f 95 c0             	setne  al
c0019052:	83 c4 10             	add    esp,0x10
c0019055:	c3                   	ret    

c0019056 <cpuidCheckExtendedEBX(unsigned int)>:
c0019056:	83 ec 10             	sub    esp,0x10
c0019059:	89 e0                	mov    eax,esp
c001905b:	50                   	push   eax
c001905c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019060:	50                   	push   eax
c0019061:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019065:	50                   	push   eax
c0019066:	8d 44 24 18          	lea    eax,[esp+0x18]
c001906a:	50                   	push   eax
c001906b:	6a 07                	push   0x7
c001906d:	e8 eb fe ff ff       	call   c0018f5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019072:	83 c4 14             	add    esp,0x14
c0019075:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019079:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001907d:	0f 95 c0             	setne  al
c0019080:	83 c4 10             	add    esp,0x10
c0019083:	c3                   	ret    

c0019084 <cpuidCheckExtendedECX(unsigned int)>:
c0019084:	83 ec 10             	sub    esp,0x10
c0019087:	89 e0                	mov    eax,esp
c0019089:	50                   	push   eax
c001908a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001908e:	50                   	push   eax
c001908f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019093:	50                   	push   eax
c0019094:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019098:	50                   	push   eax
c0019099:	6a 07                	push   0x7
c001909b:	e8 bd fe ff ff       	call   c0018f5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190a0:	83 c4 14             	add    esp,0x14
c00190a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00190a7:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00190ab:	0f 95 c0             	setne  al
c00190ae:	83 c4 10             	add    esp,0x10
c00190b1:	c3                   	ret    

c00190b2 <HalDetectFeatures()>:
c00190b2:	57                   	push   edi
c00190b3:	56                   	push   esi
c00190b4:	53                   	push   ebx
c00190b5:	81 ec 90 00 00 00    	sub    esp,0x90
c00190bb:	83 ec 04             	sub    esp,0x4
c00190be:	6a 08                	push   0x8
c00190c0:	6a 00                	push   0x0
c00190c2:	68 4c fb 02 c0       	push   0xc002fb4c
c00190c7:	e8 24 74 fe ff       	call   c00004f0 <memset>
c00190cc:	83 c4 10             	add    esp,0x10
c00190cf:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c00190d4:	83 c8 04             	or     eax,0x4
c00190d7:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c00190dc:	83 ec 0c             	sub    esp,0xc
c00190df:	68 18 56 02 c0       	push   0xc0025618
c00190e4:	e8 93 de fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00190e9:	83 c4 10             	add    esp,0x10
c00190ec:	e8 08 71 fe ff       	call   c00001f9 <detectCPUID>
c00190f1:	85 c0                	test   eax,eax
c00190f3:	0f 95 c0             	setne  al
c00190f6:	83 e0 01             	and    eax,0x1
c00190f9:	83 e0 01             	and    eax,0x1
c00190fc:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00190ff:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019104:	83 e0 fd             	and    eax,0xfffffffd
c0019107:	88 c2                	mov    dl,al
c0019109:	88 c8                	mov    al,cl
c001910b:	09 d0                	or     eax,edx
c001910d:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019112:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019117:	83 e0 02             	and    eax,0x2
c001911a:	0f b6 c0             	movzx  eax,al
c001911d:	85 c0                	test   eax,eax
c001911f:	0f 84 84 02 00 00    	je     c00193a9 <HalDetectFeatures()+0x2f7>
c0019125:	83 ec 0c             	sub    esp,0xc
c0019128:	6a 20                	push   0x20
c001912a:	e8 cc fe ff ff       	call   c0018ffb <cpuidCheckEDX(unsigned int)>
c001912f:	83 c4 10             	add    esp,0x10
c0019132:	83 e0 01             	and    eax,0x1
c0019135:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001913c:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019141:	83 e0 f7             	and    eax,0xfffffff7
c0019144:	88 c2                	mov    dl,al
c0019146:	88 c8                	mov    al,cl
c0019148:	09 d0                	or     eax,edx
c001914a:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c001914f:	83 ec 0c             	sub    esp,0xc
c0019152:	68 00 00 00 04       	push   0x4000000
c0019157:	e8 9f fe ff ff       	call   c0018ffb <cpuidCheckEDX(unsigned int)>
c001915c:	83 c4 10             	add    esp,0x10
c001915f:	89 c1                	mov    ecx,eax
c0019161:	83 e1 01             	and    ecx,0x1
c0019164:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019169:	83 e0 fe             	and    eax,0xfffffffe
c001916c:	88 c2                	mov    dl,al
c001916e:	88 c8                	mov    al,cl
c0019170:	09 d0                	or     eax,edx
c0019172:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c0019177:	83 ec 0c             	sub    esp,0xc
c001917a:	68 80 00 00 00       	push   0x80
c001917f:	e8 77 fe ff ff       	call   c0018ffb <cpuidCheckEDX(unsigned int)>
c0019184:	83 c4 10             	add    esp,0x10
c0019187:	89 c1                	mov    ecx,eax
c0019189:	c1 e1 07             	shl    ecx,0x7
c001918c:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019191:	83 e0 7f             	and    eax,0x7f
c0019194:	88 c2                	mov    dl,al
c0019196:	88 c8                	mov    al,cl
c0019198:	09 d0                	or     eax,edx
c001919a:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c001919f:	83 ec 0c             	sub    esp,0xc
c00191a2:	68 00 00 80 00       	push   0x800000
c00191a7:	e8 4f fe ff ff       	call   c0018ffb <cpuidCheckEDX(unsigned int)>
c00191ac:	83 c4 10             	add    esp,0x10
c00191af:	83 e0 01             	and    eax,0x1
c00191b2:	89 c1                	mov    ecx,eax
c00191b4:	c1 e1 05             	shl    ecx,0x5
c00191b7:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c00191bc:	83 e0 df             	and    eax,0xffffffdf
c00191bf:	88 c2                	mov    dl,al
c00191c1:	88 c8                	mov    al,cl
c00191c3:	09 d0                	or     eax,edx
c00191c5:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c00191ca:	83 ec 0c             	sub    esp,0xc
c00191cd:	6a 01                	push   0x1
c00191cf:	e8 08 41 ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00191d4:	83 c4 10             	add    esp,0x10
c00191d7:	0f b6 c0             	movzx  eax,al
c00191da:	85 c0                	test   eax,eax
c00191dc:	75 17                	jne    c00191f5 <HalDetectFeatures()+0x143>
c00191de:	83 ec 0c             	sub    esp,0xc
c00191e1:	68 00 04 00 00       	push   0x400
c00191e6:	e8 f1 40 ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00191eb:	83 c4 10             	add    esp,0x10
c00191ee:	0f b6 c0             	movzx  eax,al
c00191f1:	85 c0                	test   eax,eax
c00191f3:	74 04                	je     c00191f9 <HalDetectFeatures()+0x147>
c00191f5:	b0 01                	mov    al,0x1
c00191f7:	eb 02                	jmp    c00191fb <HalDetectFeatures()+0x149>
c00191f9:	b0 00                	mov    al,0x0
c00191fb:	0f b6 c0             	movzx  eax,al
c00191fe:	85 c0                	test   eax,eax
c0019200:	74 0f                	je     c0019211 <HalDetectFeatures()+0x15f>
c0019202:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019207:	83 e0 fe             	and    eax,0xfffffffe
c001920a:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c001920f:	eb 28                	jmp    c0019239 <HalDetectFeatures()+0x187>
c0019211:	83 ec 0c             	sub    esp,0xc
c0019214:	68 00 02 00 00       	push   0x200
c0019219:	e8 dd fd ff ff       	call   c0018ffb <cpuidCheckEDX(unsigned int)>
c001921e:	83 c4 10             	add    esp,0x10
c0019221:	89 c1                	mov    ecx,eax
c0019223:	83 e1 01             	and    ecx,0x1
c0019226:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001922b:	83 e0 fe             	and    eax,0xfffffffe
c001922e:	88 c2                	mov    dl,al
c0019230:	88 c8                	mov    al,cl
c0019232:	09 d0                	or     eax,edx
c0019234:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019239:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001923e:	83 e0 01             	and    eax,0x1
c0019241:	0f b6 c0             	movzx  eax,al
c0019244:	85 c0                	test   eax,eax
c0019246:	74 1c                	je     c0019264 <HalDetectFeatures()+0x1b2>
c0019248:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001924d:	83 e0 08             	and    eax,0x8
c0019250:	0f b6 c0             	movzx  eax,al
c0019253:	85 c0                	test   eax,eax
c0019255:	75 0d                	jne    c0019264 <HalDetectFeatures()+0x1b2>
c0019257:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001925c:	83 e0 fe             	and    eax,0xfffffffe
c001925f:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019264:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c001926c:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0019274:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c001927c:	85 c0                	test   eax,eax
c001927e:	0f 84 ab 00 00 00    	je     c001932f <HalDetectFeatures()+0x27d>
c0019284:	83 ec 0c             	sub    esp,0xc
c0019287:	6a 01                	push   0x1
c0019289:	e8 9a fd ff ff       	call   c0019028 <cpuidCheckECX(unsigned int)>
c001928e:	83 c4 10             	add    esp,0x10
c0019291:	83 e0 01             	and    eax,0x1
c0019294:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019297:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c001929c:	83 e0 fd             	and    eax,0xfffffffd
c001929f:	88 c2                	mov    dl,al
c00192a1:	88 c8                	mov    al,cl
c00192a3:	09 d0                	or     eax,edx
c00192a5:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c00192aa:	83 ec 0c             	sub    esp,0xc
c00192ad:	68 00 02 00 00       	push   0x200
c00192b2:	e8 71 fd ff ff       	call   c0019028 <cpuidCheckECX(unsigned int)>
c00192b7:	83 c4 10             	add    esp,0x10
c00192ba:	83 e0 01             	and    eax,0x1
c00192bd:	89 c1                	mov    ecx,eax
c00192bf:	c1 e1 04             	shl    ecx,0x4
c00192c2:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c00192c7:	83 e0 ef             	and    eax,0xffffffef
c00192ca:	88 c2                	mov    dl,al
c00192cc:	88 c8                	mov    al,cl
c00192ce:	09 d0                	or     eax,edx
c00192d0:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c00192d5:	83 ec 0c             	sub    esp,0xc
c00192d8:	68 00 00 08 00       	push   0x80000
c00192dd:	e8 46 fd ff ff       	call   c0019028 <cpuidCheckECX(unsigned int)>
c00192e2:	83 c4 10             	add    esp,0x10
c00192e5:	83 e0 01             	and    eax,0x1
c00192e8:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00192ef:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c00192f4:	83 e0 fb             	and    eax,0xfffffffb
c00192f7:	88 c2                	mov    dl,al
c00192f9:	88 c8                	mov    al,cl
c00192fb:	09 d0                	or     eax,edx
c00192fd:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c0019302:	83 ec 0c             	sub    esp,0xc
c0019305:	68 00 00 10 00       	push   0x100000
c001930a:	e8 19 fd ff ff       	call   c0019028 <cpuidCheckECX(unsigned int)>
c001930f:	83 c4 10             	add    esp,0x10
c0019312:	83 e0 01             	and    eax,0x1
c0019315:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001931c:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019321:	83 e0 f7             	and    eax,0xfffffff7
c0019324:	88 c2                	mov    dl,al
c0019326:	88 c8                	mov    al,cl
c0019328:	09 d0                	or     eax,edx
c001932a:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c001932f:	83 ec 0c             	sub    esp,0xc
c0019332:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019336:	50                   	push   eax
c0019337:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001933b:	50                   	push   eax
c001933c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019340:	50                   	push   eax
c0019341:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019345:	50                   	push   eax
c0019346:	68 00 00 00 80       	push   0x80000000
c001934b:	e8 0d fc ff ff       	call   c0018f5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019350:	83 c4 20             	add    esp,0x20
c0019353:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019357:	3d 00 00 00 80       	cmp    eax,0x80000000
c001935c:	76 4b                	jbe    c00193a9 <HalDetectFeatures()+0x2f7>
c001935e:	83 ec 0c             	sub    esp,0xc
c0019361:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019365:	50                   	push   eax
c0019366:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001936a:	50                   	push   eax
c001936b:	8d 44 24 34          	lea    eax,[esp+0x34]
c001936f:	50                   	push   eax
c0019370:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019374:	50                   	push   eax
c0019375:	68 01 00 00 80       	push   0x80000001
c001937a:	e8 de fb ff ff       	call   c0018f5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001937f:	83 c4 20             	add    esp,0x20
c0019382:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019387:	83 e0 bf             	and    eax,0xffffffbf
c001938a:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c001938f:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c0019394:	83 e0 fd             	and    eax,0xfffffffd
c0019397:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c001939c:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c00193a1:	83 e0 fe             	and    eax,0xfffffffe
c00193a4:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c00193a9:	83 ec 0c             	sub    esp,0xc
c00193ac:	68 00 04 00 00       	push   0x400
c00193b1:	e8 26 3f ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00193b6:	83 c4 10             	add    esp,0x10
c00193b9:	0f b6 c0             	movzx  eax,al
c00193bc:	85 c0                	test   eax,eax
c00193be:	74 0d                	je     c00193cd <HalDetectFeatures()+0x31b>
c00193c0:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c00193c5:	83 e0 fb             	and    eax,0xfffffffb
c00193c8:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c00193cd:	c6 05 48 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb48,0x1
c00193d4:	83 ec 04             	sub    esp,0x4
c00193d7:	6a 0d                	push   0xd
c00193d9:	6a 00                	push   0x0
c00193db:	68 30 fb 02 c0       	push   0xc002fb30
c00193e0:	e8 0b 71 fe ff       	call   c00004f0 <memset>
c00193e5:	83 c4 10             	add    esp,0x10
c00193e8:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c00193ed:	83 e0 02             	and    eax,0x2
c00193f0:	0f b6 c0             	movzx  eax,al
c00193f3:	85 c0                	test   eax,eax
c00193f5:	0f 84 16 08 00 00    	je     c0019c11 <HalDetectFeatures()+0xb5f>
c00193fb:	83 ec 0c             	sub    esp,0xc
c00193fe:	6a 10                	push   0x10
c0019400:	e8 f6 fb ff ff       	call   c0018ffb <cpuidCheckEDX(unsigned int)>
c0019405:	83 c4 10             	add    esp,0x10
c0019408:	83 e0 01             	and    eax,0x1
c001940b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019412:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c0019417:	83 e0 f7             	and    eax,0xfffffff7
c001941a:	88 c2                	mov    dl,al
c001941c:	88 c8                	mov    al,cl
c001941e:	09 d0                	or     eax,edx
c0019420:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c0019425:	83 ec 0c             	sub    esp,0xc
c0019428:	6a 40                	push   0x40
c001942a:	e8 cc fb ff ff       	call   c0018ffb <cpuidCheckEDX(unsigned int)>
c001942f:	83 c4 10             	add    esp,0x10
c0019432:	83 e0 01             	and    eax,0x1
c0019435:	89 c1                	mov    ecx,eax
c0019437:	c1 e1 04             	shl    ecx,0x4
c001943a:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c001943f:	83 e0 ef             	and    eax,0xffffffef
c0019442:	88 c2                	mov    dl,al
c0019444:	88 c8                	mov    al,cl
c0019446:	09 d0                	or     eax,edx
c0019448:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c001944d:	83 ec 0c             	sub    esp,0xc
c0019450:	6a 08                	push   0x8
c0019452:	e8 a4 fb ff ff       	call   c0018ffb <cpuidCheckEDX(unsigned int)>
c0019457:	83 c4 10             	add    esp,0x10
c001945a:	83 e0 01             	and    eax,0x1
c001945d:	89 c1                	mov    ecx,eax
c001945f:	c1 e1 05             	shl    ecx,0x5
c0019462:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c0019467:	83 e0 df             	and    eax,0xffffffdf
c001946a:	88 c2                	mov    dl,al
c001946c:	88 c8                	mov    al,cl
c001946e:	09 d0                	or     eax,edx
c0019470:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c0019475:	83 ec 0c             	sub    esp,0xc
c0019478:	68 00 20 00 00       	push   0x2000
c001947d:	e8 79 fb ff ff       	call   c0018ffb <cpuidCheckEDX(unsigned int)>
c0019482:	83 c4 10             	add    esp,0x10
c0019485:	83 e0 01             	and    eax,0x1
c0019488:	89 c1                	mov    ecx,eax
c001948a:	c1 e1 06             	shl    ecx,0x6
c001948d:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c0019492:	83 e0 bf             	and    eax,0xffffffbf
c0019495:	88 c2                	mov    dl,al
c0019497:	88 c8                	mov    al,cl
c0019499:	09 d0                	or     eax,edx
c001949b:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c00194a0:	83 ec 0c             	sub    esp,0xc
c00194a3:	68 00 00 01 00       	push   0x10000
c00194a8:	e8 4e fb ff ff       	call   c0018ffb <cpuidCheckEDX(unsigned int)>
c00194ad:	83 c4 10             	add    esp,0x10
c00194b0:	89 c1                	mov    ecx,eax
c00194b2:	c1 e1 07             	shl    ecx,0x7
c00194b5:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c00194ba:	83 e0 7f             	and    eax,0x7f
c00194bd:	88 c2                	mov    dl,al
c00194bf:	88 c8                	mov    al,cl
c00194c1:	09 d0                	or     eax,edx
c00194c3:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c00194c8:	83 ec 0c             	sub    esp,0xc
c00194cb:	6a 01                	push   0x1
c00194cd:	e8 29 fb ff ff       	call   c0018ffb <cpuidCheckEDX(unsigned int)>
c00194d2:	83 c4 10             	add    esp,0x10
c00194d5:	83 e0 01             	and    eax,0x1
c00194d8:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00194df:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c00194e4:	83 e0 f7             	and    eax,0xfffffff7
c00194e7:	88 c2                	mov    dl,al
c00194e9:	88 c8                	mov    al,cl
c00194eb:	09 d0                	or     eax,edx
c00194ed:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c00194f2:	83 ec 0c             	sub    esp,0xc
c00194f5:	68 00 08 00 00       	push   0x800
c00194fa:	e8 fc fa ff ff       	call   c0018ffb <cpuidCheckEDX(unsigned int)>
c00194ff:	83 c4 10             	add    esp,0x10
c0019502:	89 c1                	mov    ecx,eax
c0019504:	83 e1 01             	and    ecx,0x1
c0019507:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c001950c:	83 e0 fe             	and    eax,0xfffffffe
c001950f:	88 c2                	mov    dl,al
c0019511:	88 c8                	mov    al,cl
c0019513:	09 d0                	or     eax,edx
c0019515:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c001951a:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c001951f:	83 e0 40             	and    eax,0x40
c0019522:	0f b6 c0             	movzx  eax,al
c0019525:	85 c0                	test   eax,eax
c0019527:	74 0a                	je     c0019533 <HalDetectFeatures()+0x481>
c0019529:	c7 05 28 fb 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002fb28,0x100
c0019533:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c0019538:	83 e0 80             	and    eax,0xffffff80
c001953b:	0f b6 c0             	movzx  eax,al
c001953e:	85 c0                	test   eax,eax
c0019540:	74 0a                	je     c001954c <HalDetectFeatures()+0x49a>
c0019542:	c7 05 24 fb 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002fb24,0x80
c001954c:	83 ec 0c             	sub    esp,0xc
c001954f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019553:	50                   	push   eax
c0019554:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019558:	50                   	push   eax
c0019559:	8d 44 24 24          	lea    eax,[esp+0x24]
c001955d:	50                   	push   eax
c001955e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019562:	50                   	push   eax
c0019563:	6a 00                	push   0x0
c0019565:	e8 f3 f9 ff ff       	call   c0018f5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001956a:	83 c4 20             	add    esp,0x20
c001956d:	c7 44 24 48 30 fb 02 c0 	mov    DWORD PTR [esp+0x48],0xc002fb30
c0019575:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019579:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001957d:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019585:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019589:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001958d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0019591:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0019595:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019599:	89 c6                	mov    esi,eax
c001959b:	89 d7                	mov    edi,edx
c001959d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001959f:	89 c8                	mov    eax,ecx
c00195a1:	89 fa                	mov    edx,edi
c00195a3:	89 f3                	mov    ebx,esi
c00195a5:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00195a9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00195ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00195b1:	b8 34 fb 02 c0       	mov    eax,0xc002fb34
c00195b6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00195ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c00195be:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00195c2:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00195ca:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00195ce:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00195d2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00195d6:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00195da:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00195de:	89 c6                	mov    esi,eax
c00195e0:	89 d7                	mov    edi,edx
c00195e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00195e4:	89 c8                	mov    eax,ecx
c00195e6:	89 fa                	mov    edx,edi
c00195e8:	89 f3                	mov    ebx,esi
c00195ea:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00195ee:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00195f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00195f6:	b8 38 fb 02 c0       	mov    eax,0xc002fb38
c00195fb:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0019602:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019606:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001960a:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0019612:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019619:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c001961d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019621:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019628:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001962c:	89 c6                	mov    esi,eax
c001962e:	89 d7                	mov    edi,edx
c0019630:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019632:	89 c8                	mov    eax,ecx
c0019634:	89 fa                	mov    edx,edi
c0019636:	89 f3                	mov    ebx,esi
c0019638:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001963c:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019640:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019644:	83 ec 08             	sub    esp,0x8
c0019647:	68 2d 56 02 c0       	push   0xc002562d
c001964c:	68 30 fb 02 c0       	push   0xc002fb30
c0019651:	e8 fa 70 fe ff       	call   c0000750 <strcmp>
c0019656:	83 c4 10             	add    esp,0x10
c0019659:	85 c0                	test   eax,eax
c001965b:	74 19                	je     c0019676 <HalDetectFeatures()+0x5c4>
c001965d:	83 ec 08             	sub    esp,0x8
c0019660:	68 3a 56 02 c0       	push   0xc002563a
c0019665:	68 30 fb 02 c0       	push   0xc002fb30
c001966a:	e8 e1 70 fe ff       	call   c0000750 <strcmp>
c001966f:	83 c4 10             	add    esp,0x10
c0019672:	85 c0                	test   eax,eax
c0019674:	75 04                	jne    c001967a <HalDetectFeatures()+0x5c8>
c0019676:	b0 01                	mov    al,0x1
c0019678:	eb 02                	jmp    c001967c <HalDetectFeatures()+0x5ca>
c001967a:	b0 00                	mov    al,0x0
c001967c:	0f b6 c0             	movzx  eax,al
c001967f:	85 c0                	test   eax,eax
c0019681:	74 0f                	je     c0019692 <HalDetectFeatures()+0x5e0>
c0019683:	c7 05 44 fb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x2
c001968d:	e9 0d 03 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c0019692:	83 ec 08             	sub    esp,0x8
c0019695:	68 47 56 02 c0       	push   0xc0025647
c001969a:	68 30 fb 02 c0       	push   0xc002fb30
c001969f:	e8 ac 70 fe ff       	call   c0000750 <strcmp>
c00196a4:	83 c4 10             	add    esp,0x10
c00196a7:	85 c0                	test   eax,eax
c00196a9:	74 19                	je     c00196c4 <HalDetectFeatures()+0x612>
c00196ab:	83 ec 08             	sub    esp,0x8
c00196ae:	68 54 56 02 c0       	push   0xc0025654
c00196b3:	68 30 fb 02 c0       	push   0xc002fb30
c00196b8:	e8 93 70 fe ff       	call   c0000750 <strcmp>
c00196bd:	83 c4 10             	add    esp,0x10
c00196c0:	85 c0                	test   eax,eax
c00196c2:	75 04                	jne    c00196c8 <HalDetectFeatures()+0x616>
c00196c4:	b0 01                	mov    al,0x1
c00196c6:	eb 02                	jmp    c00196ca <HalDetectFeatures()+0x618>
c00196c8:	b0 00                	mov    al,0x0
c00196ca:	0f b6 c0             	movzx  eax,al
c00196cd:	85 c0                	test   eax,eax
c00196cf:	74 0f                	je     c00196e0 <HalDetectFeatures()+0x62e>
c00196d1:	c7 05 44 fb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x4
c00196db:	e9 bf 02 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c00196e0:	83 ec 08             	sub    esp,0x8
c00196e3:	68 61 56 02 c0       	push   0xc0025661
c00196e8:	68 30 fb 02 c0       	push   0xc002fb30
c00196ed:	e8 5e 70 fe ff       	call   c0000750 <strcmp>
c00196f2:	83 c4 10             	add    esp,0x10
c00196f5:	85 c0                	test   eax,eax
c00196f7:	74 19                	je     c0019712 <HalDetectFeatures()+0x660>
c00196f9:	83 ec 08             	sub    esp,0x8
c00196fc:	68 6e 56 02 c0       	push   0xc002566e
c0019701:	68 30 fb 02 c0       	push   0xc002fb30
c0019706:	e8 45 70 fe ff       	call   c0000750 <strcmp>
c001970b:	83 c4 10             	add    esp,0x10
c001970e:	85 c0                	test   eax,eax
c0019710:	75 04                	jne    c0019716 <HalDetectFeatures()+0x664>
c0019712:	b0 01                	mov    al,0x1
c0019714:	eb 02                	jmp    c0019718 <HalDetectFeatures()+0x666>
c0019716:	b0 00                	mov    al,0x0
c0019718:	0f b6 c0             	movzx  eax,al
c001971b:	85 c0                	test   eax,eax
c001971d:	74 0f                	je     c001972e <HalDetectFeatures()+0x67c>
c001971f:	c7 05 44 fb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x5
c0019729:	e9 71 02 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c001972e:	83 ec 08             	sub    esp,0x8
c0019731:	68 7b 56 02 c0       	push   0xc002567b
c0019736:	68 30 fb 02 c0       	push   0xc002fb30
c001973b:	e8 10 70 fe ff       	call   c0000750 <strcmp>
c0019740:	83 c4 10             	add    esp,0x10
c0019743:	85 c0                	test   eax,eax
c0019745:	0f 94 c0             	sete   al
c0019748:	0f b6 c0             	movzx  eax,al
c001974b:	85 c0                	test   eax,eax
c001974d:	74 0f                	je     c001975e <HalDetectFeatures()+0x6ac>
c001974f:	c7 05 44 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x1
c0019759:	e9 41 02 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c001975e:	83 ec 08             	sub    esp,0x8
c0019761:	68 88 56 02 c0       	push   0xc0025688
c0019766:	68 30 fb 02 c0       	push   0xc002fb30
c001976b:	e8 e0 6f fe ff       	call   c0000750 <strcmp>
c0019770:	83 c4 10             	add    esp,0x10
c0019773:	85 c0                	test   eax,eax
c0019775:	0f 94 c0             	sete   al
c0019778:	0f b6 c0             	movzx  eax,al
c001977b:	85 c0                	test   eax,eax
c001977d:	74 0f                	je     c001978e <HalDetectFeatures()+0x6dc>
c001977f:	c7 05 44 fb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x3
c0019789:	e9 11 02 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c001978e:	83 ec 08             	sub    esp,0x8
c0019791:	68 47 56 02 c0       	push   0xc0025647
c0019796:	68 30 fb 02 c0       	push   0xc002fb30
c001979b:	e8 b0 6f fe ff       	call   c0000750 <strcmp>
c00197a0:	83 c4 10             	add    esp,0x10
c00197a3:	85 c0                	test   eax,eax
c00197a5:	0f 94 c0             	sete   al
c00197a8:	0f b6 c0             	movzx  eax,al
c00197ab:	85 c0                	test   eax,eax
c00197ad:	74 0f                	je     c00197be <HalDetectFeatures()+0x70c>
c00197af:	c7 05 44 fb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x6
c00197b9:	e9 e1 01 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c00197be:	83 ec 08             	sub    esp,0x8
c00197c1:	68 95 56 02 c0       	push   0xc0025695
c00197c6:	68 30 fb 02 c0       	push   0xc002fb30
c00197cb:	e8 80 6f fe ff       	call   c0000750 <strcmp>
c00197d0:	83 c4 10             	add    esp,0x10
c00197d3:	85 c0                	test   eax,eax
c00197d5:	0f 94 c0             	sete   al
c00197d8:	0f b6 c0             	movzx  eax,al
c00197db:	85 c0                	test   eax,eax
c00197dd:	74 0f                	je     c00197ee <HalDetectFeatures()+0x73c>
c00197df:	c7 05 44 fb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x7
c00197e9:	e9 b1 01 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c00197ee:	83 ec 08             	sub    esp,0x8
c00197f1:	68 a2 56 02 c0       	push   0xc00256a2
c00197f6:	68 30 fb 02 c0       	push   0xc002fb30
c00197fb:	e8 50 6f fe ff       	call   c0000750 <strcmp>
c0019800:	83 c4 10             	add    esp,0x10
c0019803:	85 c0                	test   eax,eax
c0019805:	0f 94 c0             	sete   al
c0019808:	0f b6 c0             	movzx  eax,al
c001980b:	85 c0                	test   eax,eax
c001980d:	74 0f                	je     c001981e <HalDetectFeatures()+0x76c>
c001980f:	c7 05 44 fb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x8
c0019819:	e9 81 01 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c001981e:	83 ec 08             	sub    esp,0x8
c0019821:	68 af 56 02 c0       	push   0xc00256af
c0019826:	68 30 fb 02 c0       	push   0xc002fb30
c001982b:	e8 20 6f fe ff       	call   c0000750 <strcmp>
c0019830:	83 c4 10             	add    esp,0x10
c0019833:	85 c0                	test   eax,eax
c0019835:	0f 94 c0             	sete   al
c0019838:	0f b6 c0             	movzx  eax,al
c001983b:	85 c0                	test   eax,eax
c001983d:	74 0f                	je     c001984e <HalDetectFeatures()+0x79c>
c001983f:	c7 05 44 fb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x9
c0019849:	e9 51 01 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c001984e:	83 ec 08             	sub    esp,0x8
c0019851:	68 bc 56 02 c0       	push   0xc00256bc
c0019856:	68 30 fb 02 c0       	push   0xc002fb30
c001985b:	e8 f0 6e fe ff       	call   c0000750 <strcmp>
c0019860:	83 c4 10             	add    esp,0x10
c0019863:	85 c0                	test   eax,eax
c0019865:	0f 94 c0             	sete   al
c0019868:	0f b6 c0             	movzx  eax,al
c001986b:	85 c0                	test   eax,eax
c001986d:	74 0f                	je     c001987e <HalDetectFeatures()+0x7cc>
c001986f:	c7 05 44 fb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xa
c0019879:	e9 21 01 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c001987e:	83 ec 08             	sub    esp,0x8
c0019881:	68 c9 56 02 c0       	push   0xc00256c9
c0019886:	68 30 fb 02 c0       	push   0xc002fb30
c001988b:	e8 c0 6e fe ff       	call   c0000750 <strcmp>
c0019890:	83 c4 10             	add    esp,0x10
c0019893:	85 c0                	test   eax,eax
c0019895:	0f 94 c0             	sete   al
c0019898:	0f b6 c0             	movzx  eax,al
c001989b:	85 c0                	test   eax,eax
c001989d:	74 0f                	je     c00198ae <HalDetectFeatures()+0x7fc>
c001989f:	c7 05 44 fb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xb
c00198a9:	e9 f1 00 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c00198ae:	83 ec 08             	sub    esp,0x8
c00198b1:	68 d6 56 02 c0       	push   0xc00256d6
c00198b6:	68 30 fb 02 c0       	push   0xc002fb30
c00198bb:	e8 90 6e fe ff       	call   c0000750 <strcmp>
c00198c0:	83 c4 10             	add    esp,0x10
c00198c3:	85 c0                	test   eax,eax
c00198c5:	0f 94 c0             	sete   al
c00198c8:	0f b6 c0             	movzx  eax,al
c00198cb:	85 c0                	test   eax,eax
c00198cd:	74 0f                	je     c00198de <HalDetectFeatures()+0x82c>
c00198cf:	c7 05 44 fb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xc
c00198d9:	e9 c1 00 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c00198de:	83 ec 08             	sub    esp,0x8
c00198e1:	68 e3 56 02 c0       	push   0xc00256e3
c00198e6:	68 30 fb 02 c0       	push   0xc002fb30
c00198eb:	e8 60 6e fe ff       	call   c0000750 <strcmp>
c00198f0:	83 c4 10             	add    esp,0x10
c00198f3:	85 c0                	test   eax,eax
c00198f5:	0f 94 c0             	sete   al
c00198f8:	0f b6 c0             	movzx  eax,al
c00198fb:	85 c0                	test   eax,eax
c00198fd:	74 0f                	je     c001990e <HalDetectFeatures()+0x85c>
c00198ff:	c7 05 44 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xd
c0019909:	e9 91 00 00 00       	jmp    c001999f <HalDetectFeatures()+0x8ed>
c001990e:	83 ec 08             	sub    esp,0x8
c0019911:	68 f0 56 02 c0       	push   0xc00256f0
c0019916:	68 30 fb 02 c0       	push   0xc002fb30
c001991b:	e8 30 6e fe ff       	call   c0000750 <strcmp>
c0019920:	83 c4 10             	add    esp,0x10
c0019923:	85 c0                	test   eax,eax
c0019925:	0f 94 c0             	sete   al
c0019928:	0f b6 c0             	movzx  eax,al
c001992b:	85 c0                	test   eax,eax
c001992d:	74 0c                	je     c001993b <HalDetectFeatures()+0x889>
c001992f:	c7 05 44 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xd
c0019939:	eb 64                	jmp    c001999f <HalDetectFeatures()+0x8ed>
c001993b:	83 ec 08             	sub    esp,0x8
c001993e:	68 fd 56 02 c0       	push   0xc00256fd
c0019943:	68 30 fb 02 c0       	push   0xc002fb30
c0019948:	e8 03 6e fe ff       	call   c0000750 <strcmp>
c001994d:	83 c4 10             	add    esp,0x10
c0019950:	85 c0                	test   eax,eax
c0019952:	0f 94 c0             	sete   al
c0019955:	0f b6 c0             	movzx  eax,al
c0019958:	85 c0                	test   eax,eax
c001995a:	74 0c                	je     c0019968 <HalDetectFeatures()+0x8b6>
c001995c:	c7 05 44 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xd
c0019966:	eb 37                	jmp    c001999f <HalDetectFeatures()+0x8ed>
c0019968:	83 ec 08             	sub    esp,0x8
c001996b:	68 0a 57 02 c0       	push   0xc002570a
c0019970:	68 30 fb 02 c0       	push   0xc002fb30
c0019975:	e8 d6 6d fe ff       	call   c0000750 <strcmp>
c001997a:	83 c4 10             	add    esp,0x10
c001997d:	85 c0                	test   eax,eax
c001997f:	0f 94 c0             	sete   al
c0019982:	0f b6 c0             	movzx  eax,al
c0019985:	85 c0                	test   eax,eax
c0019987:	74 0c                	je     c0019995 <HalDetectFeatures()+0x8e3>
c0019989:	c7 05 44 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xd
c0019993:	eb 0a                	jmp    c001999f <HalDetectFeatures()+0x8ed>
c0019995:	c7 05 44 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x0
c001999f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199a3:	83 f8 06             	cmp    eax,0x6
c00199a6:	0f 86 cc 00 00 00    	jbe    c0019a78 <HalDetectFeatures()+0x9c6>
c00199ac:	83 ec 0c             	sub    esp,0xc
c00199af:	68 80 00 00 00       	push   0x80
c00199b4:	e8 9d f6 ff ff       	call   c0019056 <cpuidCheckExtendedEBX(unsigned int)>
c00199b9:	83 c4 10             	add    esp,0x10
c00199bc:	89 c1                	mov    ecx,eax
c00199be:	83 e1 01             	and    ecx,0x1
c00199c1:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c00199c6:	83 e0 fe             	and    eax,0xfffffffe
c00199c9:	88 c2                	mov    dl,al
c00199cb:	88 c8                	mov    al,cl
c00199cd:	09 d0                	or     eax,edx
c00199cf:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c00199d4:	83 ec 0c             	sub    esp,0xc
c00199d7:	68 00 00 10 00       	push   0x100000
c00199dc:	e8 75 f6 ff ff       	call   c0019056 <cpuidCheckExtendedEBX(unsigned int)>
c00199e1:	83 c4 10             	add    esp,0x10
c00199e4:	83 e0 01             	and    eax,0x1
c00199e7:	89 c1                	mov    ecx,eax
c00199e9:	c1 e1 06             	shl    ecx,0x6
c00199ec:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c00199f1:	83 e0 bf             	and    eax,0xffffffbf
c00199f4:	88 c2                	mov    dl,al
c00199f6:	88 c8                	mov    al,cl
c00199f8:	09 d0                	or     eax,edx
c00199fa:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c00199ff:	83 ec 0c             	sub    esp,0xc
c0019a02:	68 00 00 04 00       	push   0x40000
c0019a07:	e8 4a f6 ff ff       	call   c0019056 <cpuidCheckExtendedEBX(unsigned int)>
c0019a0c:	83 c4 10             	add    esp,0x10
c0019a0f:	83 e0 01             	and    eax,0x1
c0019a12:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019a15:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019a1a:	83 e0 fd             	and    eax,0xfffffffd
c0019a1d:	88 c2                	mov    dl,al
c0019a1f:	88 c8                	mov    al,cl
c0019a21:	09 d0                	or     eax,edx
c0019a23:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019a28:	83 ec 0c             	sub    esp,0xc
c0019a2b:	6a 04                	push   0x4
c0019a2d:	e8 52 f6 ff ff       	call   c0019084 <cpuidCheckExtendedECX(unsigned int)>
c0019a32:	83 c4 10             	add    esp,0x10
c0019a35:	83 e0 01             	and    eax,0x1
c0019a38:	89 c1                	mov    ecx,eax
c0019a3a:	c1 e1 05             	shl    ecx,0x5
c0019a3d:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019a42:	83 e0 df             	and    eax,0xffffffdf
c0019a45:	88 c2                	mov    dl,al
c0019a47:	88 c8                	mov    al,cl
c0019a49:	09 d0                	or     eax,edx
c0019a4b:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019a50:	83 ec 0c             	sub    esp,0xc
c0019a53:	6a 20                	push   0x20
c0019a55:	e8 2a f6 ff ff       	call   c0019084 <cpuidCheckExtendedECX(unsigned int)>
c0019a5a:	83 c4 10             	add    esp,0x10
c0019a5d:	83 e0 01             	and    eax,0x1
c0019a60:	89 c1                	mov    ecx,eax
c0019a62:	c1 e1 04             	shl    ecx,0x4
c0019a65:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019a6a:	83 e0 ef             	and    eax,0xffffffef
c0019a6d:	88 c2                	mov    dl,al
c0019a6f:	88 c8                	mov    al,cl
c0019a71:	09 d0                	or     eax,edx
c0019a73:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019a78:	83 ec 0c             	sub    esp,0xc
c0019a7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a7f:	50                   	push   eax
c0019a80:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019a84:	50                   	push   eax
c0019a85:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a89:	50                   	push   eax
c0019a8a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a8e:	50                   	push   eax
c0019a8f:	6a 01                	push   0x1
c0019a91:	e8 c7 f4 ff ff       	call   c0018f5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019a96:	83 c4 20             	add    esp,0x20
c0019a99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a9d:	83 e0 0f             	and    eax,0xf
c0019aa0:	a2 40 fb 02 c0       	mov    ds:0xc002fb40,al
c0019aa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019aa9:	c1 e8 04             	shr    eax,0x4
c0019aac:	83 e0 0f             	and    eax,0xf
c0019aaf:	a2 3e fb 02 c0       	mov    ds:0xc002fb3e,al
c0019ab4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ab8:	c1 e8 08             	shr    eax,0x8
c0019abb:	83 e0 0f             	and    eax,0xf
c0019abe:	a2 3d fb 02 c0       	mov    ds:0xc002fb3d,al
c0019ac3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ac7:	c1 e8 0c             	shr    eax,0xc
c0019aca:	83 e0 03             	and    eax,0x3
c0019acd:	a2 3f fb 02 c0       	mov    ds:0xc002fb3f,al
c0019ad2:	a0 3d fb 02 c0       	mov    al,ds:0xc002fb3d
c0019ad7:	0f b6 c0             	movzx  eax,al
c0019ada:	83 f8 06             	cmp    eax,0x6
c0019add:	74 0d                	je     c0019aec <HalDetectFeatures()+0xa3a>
c0019adf:	a0 3d fb 02 c0       	mov    al,ds:0xc002fb3d
c0019ae4:	0f b6 c0             	movzx  eax,al
c0019ae7:	83 f8 0f             	cmp    eax,0xf
c0019aea:	75 18                	jne    c0019b04 <HalDetectFeatures()+0xa52>
c0019aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019af0:	c1 e8 10             	shr    eax,0x10
c0019af3:	c1 e0 04             	shl    eax,0x4
c0019af6:	88 c2                	mov    dl,al
c0019af8:	a0 3e fb 02 c0       	mov    al,ds:0xc002fb3e
c0019afd:	09 d0                	or     eax,edx
c0019aff:	a2 3e fb 02 c0       	mov    ds:0xc002fb3e,al
c0019b04:	a0 3d fb 02 c0       	mov    al,ds:0xc002fb3d
c0019b09:	0f b6 c0             	movzx  eax,al
c0019b0c:	83 f8 0f             	cmp    eax,0xf
c0019b0f:	75 15                	jne    c0019b26 <HalDetectFeatures()+0xa74>
c0019b11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b15:	c1 e8 14             	shr    eax,0x14
c0019b18:	88 c2                	mov    dl,al
c0019b1a:	a0 3d fb 02 c0       	mov    al,ds:0xc002fb3d
c0019b1f:	01 d0                	add    eax,edx
c0019b21:	a2 3d fb 02 c0       	mov    ds:0xc002fb3d,al
c0019b26:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019b2e:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019b36:	85 c0                	test   eax,eax
c0019b38:	74 2d                	je     c0019b67 <HalDetectFeatures()+0xab5>
c0019b3a:	83 ec 0c             	sub    esp,0xc
c0019b3d:	68 00 00 00 40       	push   0x40000000
c0019b42:	e8 e1 f4 ff ff       	call   c0019028 <cpuidCheckECX(unsigned int)>
c0019b47:	83 c4 10             	add    esp,0x10
c0019b4a:	83 e0 01             	and    eax,0x1
c0019b4d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019b54:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c0019b59:	83 e0 fb             	and    eax,0xfffffffb
c0019b5c:	88 c2                	mov    dl,al
c0019b5e:	88 c8                	mov    al,cl
c0019b60:	09 d0                	or     eax,edx
c0019b62:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c0019b67:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019b6c:	83 c8 04             	or     eax,0x4
c0019b6f:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019b74:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019b79:	83 c8 08             	or     eax,0x8
c0019b7c:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019b81:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019b86:	83 c8 10             	or     eax,0x10
c0019b89:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019b8e:	83 ec 0c             	sub    esp,0xc
c0019b91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b95:	50                   	push   eax
c0019b96:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019b9a:	50                   	push   eax
c0019b9b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b9f:	50                   	push   eax
c0019ba0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ba4:	50                   	push   eax
c0019ba5:	68 00 00 00 80       	push   0x80000000
c0019baa:	e8 ae f3 ff ff       	call   c0018f5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019baf:	83 c4 20             	add    esp,0x20
c0019bb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bb6:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019bbb:	0f 86 96 01 00 00    	jbe    c0019d57 <HalDetectFeatures()+0xca5>
c0019bc1:	83 ec 0c             	sub    esp,0xc
c0019bc4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bc8:	50                   	push   eax
c0019bc9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019bcd:	50                   	push   eax
c0019bce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019bd2:	50                   	push   eax
c0019bd3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019bd7:	50                   	push   eax
c0019bd8:	68 01 00 00 80       	push   0x80000001
c0019bdd:	e8 7b f3 ff ff       	call   c0018f5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019be2:	83 c4 20             	add    esp,0x20
c0019be5:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019bea:	83 e0 7f             	and    eax,0x7f
c0019bed:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019bf2:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019bf7:	83 e0 fb             	and    eax,0xfffffffb
c0019bfa:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019bff:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019c04:	83 e0 fd             	and    eax,0xfffffffd
c0019c07:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019c0c:	e9 46 01 00 00       	jmp    c0019d57 <HalDetectFeatures()+0xca5>
c0019c11:	83 ec 08             	sub    esp,0x8
c0019c14:	68 7b 56 02 c0       	push   0xc002567b
c0019c19:	68 30 fb 02 c0       	push   0xc002fb30
c0019c1e:	e8 1d 6a fe ff       	call   c0000640 <strcpy>
c0019c23:	83 c4 10             	add    esp,0x10
c0019c26:	c7 05 44 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x1
c0019c30:	e8 8e 65 fe ff       	call   c00001c3 <is486>
c0019c35:	85 c0                	test   eax,eax
c0019c37:	0f 95 c0             	setne  al
c0019c3a:	0f b6 c0             	movzx  eax,al
c0019c3d:	85 c0                	test   eax,eax
c0019c3f:	0f 84 8d 00 00 00    	je     c0019cd2 <HalDetectFeatures()+0xc20>
c0019c45:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019c4a:	83 c8 04             	or     eax,0x4
c0019c4d:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019c52:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019c57:	83 c8 08             	or     eax,0x8
c0019c5a:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019c5f:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019c64:	83 c8 10             	or     eax,0x10
c0019c67:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019c6c:	0f 20 c0             	mov    eax,cr0
c0019c6f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019c73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019c77:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019c7e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019c85:	83 e0 04             	and    eax,0x4
c0019c88:	74 1e                	je     c0019ca8 <HalDetectFeatures()+0xbf6>
c0019c8a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019c91:	83 e0 10             	and    eax,0x10
c0019c94:	75 12                	jne    c0019ca8 <HalDetectFeatures()+0xbf6>
c0019c96:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019c9b:	83 e0 f7             	and    eax,0xfffffff7
c0019c9e:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019ca3:	e9 af 00 00 00       	jmp    c0019d57 <HalDetectFeatures()+0xca5>
c0019ca8:	e8 f1 64 fe ff       	call   c000019e <hasLegacyFPU>
c0019cad:	83 e0 01             	and    eax,0x1
c0019cb0:	83 e0 01             	and    eax,0x1
c0019cb3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019cba:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019cbf:	83 e0 f7             	and    eax,0xfffffff7
c0019cc2:	88 c2                	mov    dl,al
c0019cc4:	88 c8                	mov    al,cl
c0019cc6:	09 d0                	or     eax,edx
c0019cc8:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019ccd:	e9 85 00 00 00       	jmp    c0019d57 <HalDetectFeatures()+0xca5>
c0019cd2:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019cd7:	83 e0 fb             	and    eax,0xfffffffb
c0019cda:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019cdf:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019ce4:	83 e0 f7             	and    eax,0xfffffff7
c0019ce7:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019cec:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019cf1:	83 e0 ef             	and    eax,0xffffffef
c0019cf4:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019cf9:	0f 20 c0             	mov    eax,cr0
c0019cfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019d00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019d04:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019d0b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019d12:	83 e0 04             	and    eax,0x4
c0019d15:	74 1b                	je     c0019d32 <HalDetectFeatures()+0xc80>
c0019d17:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019d1e:	83 e0 10             	and    eax,0x10
c0019d21:	75 0f                	jne    c0019d32 <HalDetectFeatures()+0xc80>
c0019d23:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019d28:	83 e0 f7             	and    eax,0xfffffff7
c0019d2b:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019d30:	eb 25                	jmp    c0019d57 <HalDetectFeatures()+0xca5>
c0019d32:	e8 67 64 fe ff       	call   c000019e <hasLegacyFPU>
c0019d37:	83 e0 01             	and    eax,0x1
c0019d3a:	83 e0 01             	and    eax,0x1
c0019d3d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019d44:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019d49:	83 e0 f7             	and    eax,0xfffffff7
c0019d4c:	88 c2                	mov    dl,al
c0019d4e:	88 c8                	mov    al,cl
c0019d50:	09 d0                	or     eax,edx
c0019d52:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019d57:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019d5c:	83 e0 08             	and    eax,0x8
c0019d5f:	0f b6 c0             	movzx  eax,al
c0019d62:	85 c0                	test   eax,eax
c0019d64:	75 25                	jne    c0019d8b <HalDetectFeatures()+0xcd9>
c0019d66:	e8 33 64 fe ff       	call   c000019e <hasLegacyFPU>
c0019d6b:	83 e0 01             	and    eax,0x1
c0019d6e:	83 e0 01             	and    eax,0x1
c0019d71:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019d78:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019d7d:	83 e0 f7             	and    eax,0xfffffff7
c0019d80:	88 c2                	mov    dl,al
c0019d82:	88 c8                	mov    al,cl
c0019d84:	09 d0                	or     eax,edx
c0019d86:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019d8b:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019d90:	83 e0 08             	and    eax,0x8
c0019d93:	0f b6 c0             	movzx  eax,al
c0019d96:	85 c0                	test   eax,eax
c0019d98:	74 0d                	je     c0019da7 <HalDetectFeatures()+0xcf5>
c0019d9a:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019d9f:	83 c8 10             	or     eax,0x10
c0019da2:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019da7:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019dac:	83 e0 10             	and    eax,0x10
c0019daf:	0f b6 c0             	movzx  eax,al
c0019db2:	85 c0                	test   eax,eax
c0019db4:	75 23                	jne    c0019dd9 <HalDetectFeatures()+0xd27>
c0019db6:	e8 1b 7b 00 00       	call   c00218d6 <x87Detect>
c0019dbb:	83 e0 01             	and    eax,0x1
c0019dbe:	83 e0 01             	and    eax,0x1
c0019dc1:	89 c1                	mov    ecx,eax
c0019dc3:	c1 e1 04             	shl    ecx,0x4
c0019dc6:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019dcb:	83 e0 ef             	and    eax,0xffffffef
c0019dce:	88 c2                	mov    dl,al
c0019dd0:	88 c8                	mov    al,cl
c0019dd2:	09 d0                	or     eax,edx
c0019dd4:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019dd9:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019dde:	83 e0 01             	and    eax,0x1
c0019de1:	0f b6 c0             	movzx  eax,al
c0019de4:	85 c0                	test   eax,eax
c0019de6:	75 2d                	jne    c0019e15 <HalDetectFeatures()+0xd63>
c0019de8:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019ded:	83 e0 02             	and    eax,0x2
c0019df0:	0f b6 c0             	movzx  eax,al
c0019df3:	85 c0                	test   eax,eax
c0019df5:	75 1e                	jne    c0019e15 <HalDetectFeatures()+0xd63>
c0019df7:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019dfc:	83 e0 04             	and    eax,0x4
c0019dff:	0f b6 c0             	movzx  eax,al
c0019e02:	85 c0                	test   eax,eax
c0019e04:	75 0f                	jne    c0019e15 <HalDetectFeatures()+0xd63>
c0019e06:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019e0b:	83 e0 08             	and    eax,0x8
c0019e0e:	0f b6 c0             	movzx  eax,al
c0019e11:	85 c0                	test   eax,eax
c0019e13:	74 0d                	je     c0019e22 <HalDetectFeatures()+0xd70>
c0019e15:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019e1a:	83 c8 80             	or     eax,0xffffff80
c0019e1d:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019e22:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019e27:	83 e0 10             	and    eax,0x10
c0019e2a:	0f b6 c0             	movzx  eax,al
c0019e2d:	85 c0                	test   eax,eax
c0019e2f:	74 2f                	je     c0019e60 <HalDetectFeatures()+0xdae>
c0019e31:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019e36:	83 e0 80             	and    eax,0xffffff80
c0019e39:	0f b6 c0             	movzx  eax,al
c0019e3c:	85 c0                	test   eax,eax
c0019e3e:	75 20                	jne    c0019e60 <HalDetectFeatures()+0xdae>
c0019e40:	e8 4b 7a 00 00       	call   c0021890 <sseDetect>
c0019e45:	83 e0 01             	and    eax,0x1
c0019e48:	89 c1                	mov    ecx,eax
c0019e4a:	c1 e1 07             	shl    ecx,0x7
c0019e4d:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019e52:	83 e0 7f             	and    eax,0x7f
c0019e55:	88 c2                	mov    dl,al
c0019e57:	88 c8                	mov    al,cl
c0019e59:	09 d0                	or     eax,edx
c0019e5b:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019e60:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019e65:	83 e0 80             	and    eax,0xffffff80
c0019e68:	0f b6 c0             	movzx  eax,al
c0019e6b:	85 c0                	test   eax,eax
c0019e6d:	74 1c                	je     c0019e8b <HalDetectFeatures()+0xdd9>
c0019e6f:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019e74:	83 e0 20             	and    eax,0x20
c0019e77:	0f b6 c0             	movzx  eax,al
c0019e7a:	85 c0                	test   eax,eax
c0019e7c:	75 0d                	jne    c0019e8b <HalDetectFeatures()+0xdd9>
c0019e7e:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019e83:	83 e0 df             	and    eax,0xffffffdf
c0019e86:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c0019e8b:	c6 05 48 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb48,0x0
c0019e92:	90                   	nop
c0019e93:	81 c4 90 00 00 00    	add    esp,0x90
c0019e99:	5b                   	pop    ebx
c0019e9a:	5e                   	pop    esi
c0019e9b:	5f                   	pop    edi
c0019e9c:	c3                   	ret    

c0019e9d <HalEnableNMI()>:
c0019e9d:	c6 05 2c fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb2c,0x1
c0019ea4:	6a 10                	push   0x10
c0019ea6:	e8 02 ef ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c0019eab:	83 c4 04             	add    esp,0x4
c0019eae:	90                   	nop
c0019eaf:	c3                   	ret    

c0019eb0 <HalDisableNMI()>:
c0019eb0:	c6 05 2c fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb2c,0x0
c0019eb7:	6a 10                	push   0x10
c0019eb9:	e8 ef ee ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c0019ebe:	83 c4 04             	add    esp,0x4
c0019ec1:	90                   	nop
c0019ec2:	c3                   	ret    

c0019ec3 <HalGetNMIState()>:
c0019ec3:	a0 2c fb 02 c0       	mov    al,ds:0xc002fb2c
c0019ec8:	c3                   	ret    

c0019ec9 <x86rdmsr(unsigned int)>:
c0019ec9:	83 ec 1c             	sub    esp,0x1c
c0019ecc:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019ed1:	83 e0 08             	and    eax,0x8
c0019ed4:	0f b6 c0             	movzx  eax,al
c0019ed7:	85 c0                	test   eax,eax
c0019ed9:	75 10                	jne    c0019eeb <x86rdmsr(unsigned int)+0x22>
c0019edb:	83 ec 0c             	sub    esp,0xc
c0019ede:	68 16 57 02 c0       	push   0xc0025716
c0019ee3:	e8 fe 60 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0019ee8:	83 c4 10             	add    esp,0x10
c0019eeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019eef:	89 c1                	mov    ecx,eax
c0019ef1:	0f 32                	rdmsr  
c0019ef3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ef7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019eff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f03:	83 c4 1c             	add    esp,0x1c
c0019f06:	c3                   	ret    

c0019f07 <x86wrmsr(unsigned int, unsigned long long)>:
c0019f07:	83 ec 1c             	sub    esp,0x1c
c0019f0a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019f16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f1a:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019f1f:	83 e0 08             	and    eax,0x8
c0019f22:	0f b6 c0             	movzx  eax,al
c0019f25:	85 c0                	test   eax,eax
c0019f27:	75 10                	jne    c0019f39 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0019f29:	83 ec 0c             	sub    esp,0xc
c0019f2c:	68 1c 57 02 c0       	push   0xc002571c
c0019f31:	e8 b0 60 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0019f36:	83 c4 10             	add    esp,0x10
c0019f39:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019f3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f45:	0f 30                	wrmsr  
c0019f47:	90                   	nop
c0019f48:	83 c4 1c             	add    esp,0x1c
c0019f4b:	c3                   	ret    

c0019f4c <HalHandleGeneralProtectionFault(void*, void*)>:
c0019f4c:	83 ec 0c             	sub    esp,0xc
c0019f4f:	83 ec 0c             	sub    esp,0xc
c0019f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f56:	e8 02 e2 ff ff       	call   c001815d <Vm::faultHandler(regs*)>
c0019f5b:	83 c4 10             	add    esp,0x10
c0019f5e:	83 c4 0c             	add    esp,0xc
c0019f61:	c3                   	ret    

c0019f62 <HalFindRSDP()>:
c0019f62:	83 ec 1c             	sub    esp,0x1c
c0019f65:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c0019f6a:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019f6f:	7e 17                	jle    c0019f88 <HalFindRSDP()+0x26>
c0019f71:	83 ec 0c             	sub    esp,0xc
c0019f74:	68 00 04 00 00       	push   0x400
c0019f79:	e8 5e 33 ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019f7e:	83 c4 10             	add    esp,0x10
c0019f81:	0f b6 c0             	movzx  eax,al
c0019f84:	85 c0                	test   eax,eax
c0019f86:	74 04                	je     c0019f8c <HalFindRSDP()+0x2a>
c0019f88:	b0 01                	mov    al,0x1
c0019f8a:	eb 02                	jmp    c0019f8e <HalFindRSDP()+0x2c>
c0019f8c:	b0 00                	mov    al,0x0
c0019f8e:	0f b6 c0             	movzx  eax,al
c0019f91:	85 c0                	test   eax,eax
c0019f93:	74 1d                	je     c0019fb2 <HalFindRSDP()+0x50>
c0019f95:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019f9a:	83 e0 fb             	and    eax,0xfffffffb
c0019f9d:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019fa2:	83 ec 0c             	sub    esp,0xc
c0019fa5:	68 22 57 02 c0       	push   0xc0025722
c0019faa:	e8 cd cf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019faf:	83 c4 10             	add    esp,0x10
c0019fb2:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019fb7:	83 e0 04             	and    eax,0x4
c0019fba:	0f b6 c0             	movzx  eax,al
c0019fbd:	85 c0                	test   eax,eax
c0019fbf:	75 17                	jne    c0019fd8 <HalFindRSDP()+0x76>
c0019fc1:	83 ec 0c             	sub    esp,0xc
c0019fc4:	68 31 57 02 c0       	push   0xc0025731
c0019fc9:	e8 ae cf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019fce:	83 c4 10             	add    esp,0x10
c0019fd1:	b8 00 00 00 00       	mov    eax,0x0
c0019fd6:	eb 63                	jmp    c001a03b <HalFindRSDP()+0xd9>
c0019fd8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0019fe0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019fe8:	77 2f                	ja     c001a019 <HalFindRSDP()+0xb7>
c0019fea:	83 ec 04             	sub    esp,0x4
c0019fed:	6a 08                	push   0x8
c0019fef:	68 3b 57 02 c0       	push   0xc002573b
c0019ff4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ff8:	e8 83 63 fe ff       	call   c0000380 <memcmp>
c0019ffd:	83 c4 10             	add    esp,0x10
c001a000:	85 c0                	test   eax,eax
c001a002:	0f 94 c0             	sete   al
c001a005:	0f b6 c0             	movzx  eax,al
c001a008:	85 c0                	test   eax,eax
c001a00a:	74 06                	je     c001a012 <HalFindRSDP()+0xb0>
c001a00c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a010:	eb 29                	jmp    c001a03b <HalFindRSDP()+0xd9>
c001a012:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001a017:	eb c7                	jmp    c0019fe0 <HalFindRSDP()+0x7e>
c001a019:	83 ec 0c             	sub    esp,0xc
c001a01c:	68 44 57 02 c0       	push   0xc0025744
c001a021:	e8 56 cf fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a026:	83 c4 10             	add    esp,0x10
c001a029:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001a02e:	83 e0 fb             	and    eax,0xfffffffb
c001a031:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c001a036:	b8 00 00 00 00       	mov    eax,0x0
c001a03b:	83 c4 1c             	add    esp,0x1c
c001a03e:	c3                   	ret    

c001a03f <HalHandlePageFault(void*, void*)>:
c001a03f:	83 ec 1c             	sub    esp,0x1c
c001a042:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a047:	8b 00                	mov    eax,DWORD PTR [eax]
c001a049:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a04c:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001a052:	0f 20 d2             	mov    edx,cr2
c001a055:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a059:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a05d:	83 ec 08             	sub    esp,0x8
c001a060:	52                   	push   edx
c001a061:	50                   	push   eax
c001a062:	e8 8d a3 ff ff       	call   c00143f4 <VAS::tryLoadBackOffDisk(unsigned long)>
c001a067:	83 c4 10             	add    esp,0x10
c001a06a:	83 c4 1c             	add    esp,0x1c
c001a06d:	c3                   	ret    

c001a06e <HalHandleOpcodeFault(void*, void*)>:
c001a06e:	83 ec 1c             	sub    esp,0x1c
c001a071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a075:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a079:	a0 48 fb 02 c0       	mov    al,ds:0xc002fb48
c001a07e:	0f b6 c0             	movzx  eax,al
c001a081:	85 c0                	test   eax,eax
c001a083:	74 25                	je     c001a0aa <HalHandleOpcodeFault(void*, void*)+0x3c>
c001a085:	83 ec 0c             	sub    esp,0xc
c001a088:	68 3c 59 02 c0       	push   0xc002593c
c001a08d:	e8 ea ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a092:	83 c4 10             	add    esp,0x10
c001a095:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a099:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a09c:	8d 50 19             	lea    edx,[eax+0x19]
c001a09f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0a3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a0a6:	b0 01                	mov    al,0x1
c001a0a8:	eb 02                	jmp    c001a0ac <HalHandleOpcodeFault(void*, void*)+0x3e>
c001a0aa:	b0 00                	mov    al,0x0
c001a0ac:	83 c4 1c             	add    esp,0x1c
c001a0af:	c3                   	ret    

c001a0b0 <HalDisplayDebugInfo(void*)>:
c001a0b0:	83 ec 2c             	sub    esp,0x2c
c001a0b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a0b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0bb:	0f 20 c0             	mov    eax,cr0
c001a0be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0c2:	0f 20 d0             	mov    eax,cr2
c001a0c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a0c9:	0f 20 d8             	mov    eax,cr3
c001a0cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a0d0:	0f 20 e0             	mov    eax,cr4
c001a0d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0db:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a0de:	83 ec 08             	sub    esp,0x8
c001a0e1:	50                   	push   eax
c001a0e2:	68 5e 57 02 c0       	push   0xc002575e
c001a0e7:	e8 90 ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a0ec:	83 c4 10             	add    esp,0x10
c001a0ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0f3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001a0f6:	83 ec 08             	sub    esp,0x8
c001a0f9:	50                   	push   eax
c001a0fa:	68 4f 57 02 c0       	push   0xc002574f
c001a0ff:	e8 78 ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a104:	83 c4 10             	add    esp,0x10
c001a107:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a10b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001a10e:	83 ec 08             	sub    esp,0x8
c001a111:	50                   	push   eax
c001a112:	68 5a 57 02 c0       	push   0xc002575a
c001a117:	e8 60 ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a11c:	83 c4 10             	add    esp,0x10
c001a11f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a123:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a126:	83 ec 08             	sub    esp,0x8
c001a129:	50                   	push   eax
c001a12a:	68 69 57 02 c0       	push   0xc0025769
c001a12f:	e8 48 ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a134:	83 c4 10             	add    esp,0x10
c001a137:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a13b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001a13e:	83 ec 08             	sub    esp,0x8
c001a141:	50                   	push   eax
c001a142:	68 74 57 02 c0       	push   0xc0025774
c001a147:	e8 30 ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a14c:	83 c4 10             	add    esp,0x10
c001a14f:	83 ec 08             	sub    esp,0x8
c001a152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a156:	68 7f 57 02 c0       	push   0xc002577f
c001a15b:	e8 1c ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a160:	83 c4 10             	add    esp,0x10
c001a163:	83 ec 08             	sub    esp,0x8
c001a166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a16a:	68 8a 57 02 c0       	push   0xc002578a
c001a16f:	e8 08 ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a174:	83 c4 10             	add    esp,0x10
c001a177:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a17b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a17e:	c1 e0 05             	shl    eax,0x5
c001a181:	8d 90 20 6c 02 c0    	lea    edx,[eax-0x3ffd93e0]
c001a187:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a18b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a18e:	83 ec 04             	sub    esp,0x4
c001a191:	52                   	push   edx
c001a192:	50                   	push   eax
c001a193:	68 95 57 02 c0       	push   0xc0025795
c001a198:	e8 df cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a19d:	83 c4 10             	add    esp,0x10
c001a1a0:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a1a5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1ab:	83 ec 0c             	sub    esp,0xc
c001a1ae:	50                   	push   eax
c001a1af:	e8 fb 84 ff ff       	call   c00126af <setActiveTerminal(VgaText*)>
c001a1b4:	83 c4 10             	add    esp,0x10
c001a1b7:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a1bc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1c2:	83 ec 08             	sub    esp,0x8
c001a1c5:	68 a4 57 02 c0       	push   0xc00257a4
c001a1ca:	50                   	push   eax
c001a1cb:	e8 2c 88 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a1d0:	83 c4 10             	add    esp,0x10
c001a1d3:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a1d8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a1e2:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a1e5:	83 ec 08             	sub    esp,0x8
c001a1e8:	52                   	push   edx
c001a1e9:	50                   	push   eax
c001a1ea:	e8 c7 87 ff ff       	call   c00129b6 <VgaText::putx(unsigned int)>
c001a1ef:	83 c4 10             	add    esp,0x10
c001a1f2:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a1f7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1fd:	83 ec 08             	sub    esp,0x8
c001a200:	68 b2 57 02 c0       	push   0xc00257b2
c001a205:	50                   	push   eax
c001a206:	e8 f1 87 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a20b:	83 c4 10             	add    esp,0x10
c001a20e:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a213:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a219:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001a21e:	8b 12                	mov    edx,DWORD PTR [edx]
c001a220:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a223:	83 c2 0c             	add    edx,0xc
c001a226:	83 ec 08             	sub    esp,0x8
c001a229:	52                   	push   edx
c001a22a:	50                   	push   eax
c001a22b:	e8 cc 87 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a230:	83 c4 10             	add    esp,0x10
c001a233:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a238:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a23e:	83 ec 08             	sub    esp,0x8
c001a241:	68 bb 57 02 c0       	push   0xc00257bb
c001a246:	50                   	push   eax
c001a247:	e8 b0 87 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a24c:	83 c4 10             	add    esp,0x10
c001a24f:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a254:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a25a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a25e:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001a261:	83 ec 08             	sub    esp,0x8
c001a264:	52                   	push   edx
c001a265:	50                   	push   eax
c001a266:	e8 4b 87 ff ff       	call   c00129b6 <VgaText::putx(unsigned int)>
c001a26b:	83 c4 10             	add    esp,0x10
c001a26e:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a273:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a279:	83 ec 08             	sub    esp,0x8
c001a27c:	68 c3 57 02 c0       	push   0xc00257c3
c001a281:	50                   	push   eax
c001a282:	e8 75 87 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a287:	83 c4 10             	add    esp,0x10
c001a28a:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a28f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a295:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a299:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001a29c:	83 ec 08             	sub    esp,0x8
c001a29f:	52                   	push   edx
c001a2a0:	50                   	push   eax
c001a2a1:	e8 10 87 ff ff       	call   c00129b6 <VgaText::putx(unsigned int)>
c001a2a6:	83 c4 10             	add    esp,0x10
c001a2a9:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a2ae:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2b4:	83 ec 08             	sub    esp,0x8
c001a2b7:	68 cb 57 02 c0       	push   0xc00257cb
c001a2bc:	50                   	push   eax
c001a2bd:	e8 3a 87 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a2c2:	83 c4 10             	add    esp,0x10
c001a2c5:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a2ca:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2d4:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001a2d7:	83 ec 08             	sub    esp,0x8
c001a2da:	52                   	push   edx
c001a2db:	50                   	push   eax
c001a2dc:	e8 d5 86 ff ff       	call   c00129b6 <VgaText::putx(unsigned int)>
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a2e9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2ef:	83 ec 08             	sub    esp,0x8
c001a2f2:	68 d3 57 02 c0       	push   0xc00257d3
c001a2f7:	50                   	push   eax
c001a2f8:	e8 ff 86 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a2fd:	83 c4 10             	add    esp,0x10
c001a300:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a305:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a30b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a30f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a312:	83 ec 08             	sub    esp,0x8
c001a315:	52                   	push   edx
c001a316:	50                   	push   eax
c001a317:	e8 9a 86 ff ff       	call   c00129b6 <VgaText::putx(unsigned int)>
c001a31c:	83 c4 10             	add    esp,0x10
c001a31f:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a324:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a32a:	83 ec 08             	sub    esp,0x8
c001a32d:	68 db 57 02 c0       	push   0xc00257db
c001a332:	50                   	push   eax
c001a333:	e8 c4 86 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a338:	83 c4 10             	add    esp,0x10
c001a33b:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a340:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a346:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a34a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a34d:	83 ec 08             	sub    esp,0x8
c001a350:	52                   	push   edx
c001a351:	50                   	push   eax
c001a352:	e8 5f 86 ff ff       	call   c00129b6 <VgaText::putx(unsigned int)>
c001a357:	83 c4 10             	add    esp,0x10
c001a35a:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a35f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a365:	83 ec 08             	sub    esp,0x8
c001a368:	68 e3 57 02 c0       	push   0xc00257e3
c001a36d:	50                   	push   eax
c001a36e:	e8 89 86 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a373:	83 c4 10             	add    esp,0x10
c001a376:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a37b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a381:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a385:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a388:	83 ec 08             	sub    esp,0x8
c001a38b:	52                   	push   edx
c001a38c:	50                   	push   eax
c001a38d:	e8 24 86 ff ff       	call   c00129b6 <VgaText::putx(unsigned int)>
c001a392:	83 c4 10             	add    esp,0x10
c001a395:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a39a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3a0:	83 ec 08             	sub    esp,0x8
c001a3a3:	68 eb 57 02 c0       	push   0xc00257eb
c001a3a8:	50                   	push   eax
c001a3a9:	e8 4e 86 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a3ae:	83 c4 10             	add    esp,0x10
c001a3b1:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a3b6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3bc:	83 ec 08             	sub    esp,0x8
c001a3bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a3c3:	50                   	push   eax
c001a3c4:	e8 ed 85 ff ff       	call   c00129b6 <VgaText::putx(unsigned int)>
c001a3c9:	83 c4 10             	add    esp,0x10
c001a3cc:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a3d1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3d7:	83 ec 08             	sub    esp,0x8
c001a3da:	68 f4 57 02 c0       	push   0xc00257f4
c001a3df:	50                   	push   eax
c001a3e0:	e8 17 86 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a3e5:	83 c4 10             	add    esp,0x10
c001a3e8:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a3ed:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3f3:	83 ec 08             	sub    esp,0x8
c001a3f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3fa:	50                   	push   eax
c001a3fb:	e8 b6 85 ff ff       	call   c00129b6 <VgaText::putx(unsigned int)>
c001a400:	83 c4 10             	add    esp,0x10
c001a403:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a408:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a40e:	83 ec 08             	sub    esp,0x8
c001a411:	68 fc 57 02 c0       	push   0xc00257fc
c001a416:	50                   	push   eax
c001a417:	e8 e0 85 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a41c:	83 c4 10             	add    esp,0x10
c001a41f:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a424:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a42a:	83 ec 08             	sub    esp,0x8
c001a42d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a431:	50                   	push   eax
c001a432:	e8 7f 85 ff ff       	call   c00129b6 <VgaText::putx(unsigned int)>
c001a437:	83 c4 10             	add    esp,0x10
c001a43a:	fa                   	cli    
c001a43b:	f4                   	hlt    
c001a43c:	eb fe                	jmp    c001a43c <HalDisplayDebugInfo(void*)+0x38c>

c001a43e <HalReceivedNMI()>:
c001a43e:	83 ec 1c             	sub    esp,0x1c
c001a441:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a448:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a44c:	89 c2                	mov    edx,eax
c001a44e:	ec                   	in     al,dx
c001a44f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a453:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a457:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a45b:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a466:	89 c2                	mov    edx,eax
c001a468:	ec                   	in     al,dx
c001a469:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a46d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a471:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a475:	83 ec 0c             	sub    esp,0xc
c001a478:	68 04 58 02 c0       	push   0xc0025804
c001a47d:	e8 fa ca fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a482:	83 c4 10             	add    esp,0x10
c001a485:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a48a:	83 e0 10             	and    eax,0x10
c001a48d:	74 10                	je     c001a49f <HalReceivedNMI()+0x61>
c001a48f:	83 ec 0c             	sub    esp,0xc
c001a492:	68 15 58 02 c0       	push   0xc0025815
c001a497:	e8 4a 5b ff ff       	call   c000ffe6 <KePanic(char const*)>
c001a49c:	83 c4 10             	add    esp,0x10
c001a49f:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a4a4:	83 e0 40             	and    eax,0x40
c001a4a7:	74 10                	je     c001a4b9 <HalReceivedNMI()+0x7b>
c001a4a9:	83 ec 0c             	sub    esp,0xc
c001a4ac:	68 22 58 02 c0       	push   0xc0025822
c001a4b1:	e8 30 5b ff ff       	call   c000ffe6 <KePanic(char const*)>
c001a4b6:	83 c4 10             	add    esp,0x10
c001a4b9:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a4bd:	0f be c0             	movsx  eax,al
c001a4c0:	85 c0                	test   eax,eax
c001a4c2:	79 10                	jns    c001a4d4 <HalReceivedNMI()+0x96>
c001a4c4:	83 ec 0c             	sub    esp,0xc
c001a4c7:	68 2c 58 02 c0       	push   0xc002582c
c001a4cc:	e8 15 5b ff ff       	call   c000ffe6 <KePanic(char const*)>
c001a4d1:	83 c4 10             	add    esp,0x10
c001a4d4:	90                   	nop
c001a4d5:	83 c4 1c             	add    esp,0x1c
c001a4d8:	c3                   	ret    

c001a4d9 <HalSystemIdle()>:
c001a4d9:	56                   	push   esi
c001a4da:	53                   	push   ebx
c001a4db:	83 ec 14             	sub    esp,0x14
c001a4de:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c001a4e3:	83 e0 10             	and    eax,0x10
c001a4e6:	0f b6 c0             	movzx  eax,al
c001a4e9:	85 c0                	test   eax,eax
c001a4eb:	74 43                	je     c001a530 <HalSystemIdle()+0x57>
c001a4ed:	83 ec 0c             	sub    esp,0xc
c001a4f0:	68 e1 00 00 00       	push   0xe1
c001a4f5:	e8 cf f9 ff ff       	call   c0019ec9 <x86rdmsr(unsigned int)>
c001a4fa:	83 c4 10             	add    esp,0x10
c001a4fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a501:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a505:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a509:	83 e0 02             	and    eax,0x2
c001a50c:	89 c3                	mov    ebx,eax
c001a50e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a512:	83 e0 00             	and    eax,0x0
c001a515:	89 c6                	mov    esi,eax
c001a517:	83 ec 04             	sub    esp,0x4
c001a51a:	56                   	push   esi
c001a51b:	53                   	push   ebx
c001a51c:	68 e1 00 00 00       	push   0xe1
c001a521:	e8 e1 f9 ff ff       	call   c0019f07 <x86wrmsr(unsigned int, unsigned long long)>
c001a526:	83 c4 10             	add    esp,0x10
c001a529:	e8 66 5c fe ff       	call   c0000194 <doTPAUSE>
c001a52e:	eb 01                	jmp    c001a531 <HalSystemIdle()+0x58>
c001a530:	f4                   	hlt    
c001a531:	90                   	nop
c001a532:	83 c4 14             	add    esp,0x14
c001a535:	5b                   	pop    ebx
c001a536:	5e                   	pop    esi
c001a537:	c3                   	ret    

c001a538 <i386SaveCoprocessor(void*)>:
c001a538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a53c:	83 c0 3f             	add    eax,0x3f
c001a53f:	83 e0 c0             	and    eax,0xffffffc0
c001a542:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a546:	ff 25 10 fb 02 c0    	jmp    DWORD PTR ds:0xc002fb10

c001a54c <i386LoadCoprocessor(void*)>:
c001a54c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a550:	83 c0 3f             	add    eax,0x3f
c001a553:	83 e0 c0             	and    eax,0xffffffc0
c001a556:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a55a:	ff 25 0c fb 02 c0    	jmp    DWORD PTR ds:0xc002fb0c

c001a560 <x87EmulHandler(regs*, void*)>:
c001a560:	53                   	push   ebx
c001a561:	83 ec 08             	sub    esp,0x8
c001a564:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a569:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a56d:	74 10                	je     c001a57f <x87EmulHandler(regs*, void*)+0x1f>
c001a56f:	83 ec 0c             	sub    esp,0xc
c001a572:	68 39 58 02 c0       	push   0xc0025839
c001a577:	e8 6a 5a ff ff       	call   c000ffe6 <KePanic(char const*)>
c001a57c:	83 c4 10             	add    esp,0x10
c001a57f:	0f 20 c0             	mov    eax,cr0
c001a582:	a8 08                	test   al,0x8
c001a584:	74 59                	je     c001a5df <x87EmulHandler(regs*, void*)+0x7f>
c001a586:	0f 06                	clts   
c001a588:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001a58d:	85 c0                	test   eax,eax
c001a58f:	74 0e                	je     c001a59f <x87EmulHandler(regs*, void*)+0x3f>
c001a591:	83 ec 0c             	sub    esp,0xc
c001a594:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a597:	e8 9c ff ff ff       	call   c001a538 <i386SaveCoprocessor(void*)>
c001a59c:	83 c4 10             	add    esp,0x10
c001a59f:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a5a5:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a5a9:	75 12                	jne    c001a5bd <x87EmulHandler(regs*, void*)+0x5d>
c001a5ab:	83 ec 0c             	sub    esp,0xc
c001a5ae:	68 40 02 00 00       	push   0x240
c001a5b3:	e8 d7 55 ff ff       	call   c000fb8f <malloc>
c001a5b8:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a5bb:	eb 10                	jmp    c001a5cd <x87EmulHandler(regs*, void*)+0x6d>
c001a5bd:	83 ec 0c             	sub    esp,0xc
c001a5c0:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001a5c5:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a5c8:	e8 7f ff ff ff       	call   c001a54c <i386LoadCoprocessor(void*)>
c001a5cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5d2:	83 c4 10             	add    esp,0x10
c001a5d5:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001a5da:	83 c4 08             	add    esp,0x8
c001a5dd:	5b                   	pop    ebx
c001a5de:	c3                   	ret    
c001a5df:	83 ec 0c             	sub    esp,0xc
c001a5e2:	68 4d 58 02 c0       	push   0xc002584d
c001a5e7:	e8 90 c9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a5ec:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001a5f4:	83 c4 18             	add    esp,0x18
c001a5f7:	5b                   	pop    ebx
c001a5f8:	e9 13 d3 ff ff       	jmp    c0017910 <KeTerminateCurrentThread(int)>

c001a5fd <HalInitialiseCoprocessor()>:
c001a5fd:	83 ec 10             	sub    esp,0x10
c001a600:	c7 05 08 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb08,0x0
c001a60a:	6a 00                	push   0x0
c001a60c:	68 60 a5 01 c0       	push   0xc001a560
c001a611:	6a 07                	push   0x7
c001a613:	e8 ff 06 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a618:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001a61d:	83 c4 10             	add    esp,0x10
c001a620:	a8 80                	test   al,0x80
c001a622:	74 1c                	je     c001a640 <HalInitialiseCoprocessor()+0x43>
c001a624:	c7 05 10 fb 02 c0 a8 18 02 c0 	mov    DWORD PTR ds:0xc002fb10,0xc00218a8
c001a62e:	c7 05 0c fb 02 c0 b0 18 02 c0 	mov    DWORD PTR ds:0xc002fb0c,0xc00218b0
c001a638:	83 c4 0c             	add    esp,0xc
c001a63b:	e9 78 72 00 00       	jmp    c00218b8 <sseInit>
c001a640:	a8 10                	test   al,0x10
c001a642:	74 1c                	je     c001a660 <HalInitialiseCoprocessor()+0x63>
c001a644:	c7 05 10 fb 02 c0 f7 18 02 c0 	mov    DWORD PTR ds:0xc002fb10,0xc00218f7
c001a64e:	c7 05 0c fb 02 c0 fe 18 02 c0 	mov    DWORD PTR ds:0xc002fb0c,0xc00218fe
c001a658:	83 c4 0c             	add    esp,0xc
c001a65b:	e9 a5 72 00 00       	jmp    c0021905 <x87Init>
c001a660:	c7 05 10 fb 02 c0 9c 8d 01 c0 	mov    DWORD PTR ds:0xc002fb10,0xc0018d9c
c001a66a:	c7 05 0c fb 02 c0 9c 8d 01 c0 	mov    DWORD PTR ds:0xc002fb0c,0xc0018d9c
c001a674:	0f 20 c0             	mov    eax,cr0
c001a677:	83 c8 04             	or     eax,0x4
c001a67a:	0f 22 c0             	mov    cr0,eax
c001a67d:	83 c4 0c             	add    esp,0xc
c001a680:	c3                   	ret    

c001a681 <HalPanic(char const*)>:
c001a681:	53                   	push   ebx
c001a682:	83 ec 10             	sub    esp,0x10
c001a685:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a689:	fa                   	cli    
c001a68a:	53                   	push   ebx
c001a68b:	68 63 58 02 c0       	push   0xc0025863
c001a690:	e8 e7 c8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a695:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001a69a:	83 c4 10             	add    esp,0x10
c001a69d:	85 c0                	test   eax,eax
c001a69f:	74 09                	je     c001a6aa <HalPanic(char const*)+0x29>
c001a6a1:	83 ec 0c             	sub    esp,0xc
c001a6a4:	53                   	push   ebx
c001a6a5:	ff d0                	call   eax
c001a6a7:	83 c4 10             	add    esp,0x10
c001a6aa:	a1 b4 f1 02 c0       	mov    eax,ds:0xc002f1b4
c001a6af:	85 c0                	test   eax,eax
c001a6b1:	0f 84 dc 00 00 00    	je     c001a793 <HalPanic(char const*)+0x112>
c001a6b7:	52                   	push   edx
c001a6b8:	6a 01                	push   0x1
c001a6ba:	6a 0f                	push   0xf
c001a6bc:	50                   	push   eax
c001a6bd:	e8 2c 7e ff ff       	call   c00124ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6c2:	59                   	pop    ecx
c001a6c3:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a6c9:	e8 2c 80 ff ff       	call   c00126fa <VgaText::clearScreen()>
c001a6ce:	58                   	pop    eax
c001a6cf:	5a                   	pop    edx
c001a6d0:	68 e8 47 02 c0       	push   0xc00247e8
c001a6d5:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a6db:	e8 46 7e ff ff       	call   c0012526 <VgaText::setTitle(char*)>
c001a6e0:	83 c4 0c             	add    esp,0xc
c001a6e3:	6a 01                	push   0x1
c001a6e5:	6a 0f                	push   0xf
c001a6e7:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a6ed:	e8 fc 7d ff ff       	call   c00124ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6f2:	59                   	pop    ecx
c001a6f3:	58                   	pop    eax
c001a6f4:	68 7c 58 02 c0       	push   0xc002587c
c001a6f9:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a6ff:	e8 f8 82 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a704:	83 c4 0c             	add    esp,0xc
c001a707:	6a 0f                	push   0xf
c001a709:	6a 01                	push   0x1
c001a70b:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a711:	e8 d8 7d ff ff       	call   c00124ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a716:	58                   	pop    eax
c001a717:	5a                   	pop    edx
c001a718:	68 85 58 02 c0       	push   0xc0025885
c001a71d:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a723:	e8 d4 82 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a728:	83 c4 0c             	add    esp,0xc
c001a72b:	6a 01                	push   0x1
c001a72d:	6a 0f                	push   0xf
c001a72f:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a735:	e8 b4 7d ff ff       	call   c00124ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a73a:	59                   	pop    ecx
c001a73b:	58                   	pop    eax
c001a73c:	68 c9 58 02 c0       	push   0xc00258c9
c001a741:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a747:	e8 b0 82 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a74c:	58                   	pop    eax
c001a74d:	5a                   	pop    edx
c001a74e:	68 92 58 02 c0       	push   0xc0025892
c001a753:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a759:	e8 9e 82 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a75e:	59                   	pop    ecx
c001a75f:	58                   	pop    eax
c001a760:	68 cc 58 02 c0       	push   0xc00258cc
c001a765:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a76b:	e8 8c 82 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a770:	58                   	pop    eax
c001a771:	5a                   	pop    edx
c001a772:	53                   	push   ebx
c001a773:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a779:	e8 7e 82 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a77e:	59                   	pop    ecx
c001a77f:	5b                   	pop    ebx
c001a780:	68 c9 58 02 c0       	push   0xc00258c9
c001a785:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a78b:	e8 6c 82 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001a790:	83 c4 10             	add    esp,0x10
c001a793:	eb fe                	jmp    c001a793 <HalPanic(char const*)+0x112>

c001a795 <HalQueryPerformanceCounter()>:
c001a795:	31 c0                	xor    eax,eax
c001a797:	31 d2                	xor    edx,edx
c001a799:	f6 05 4e fb 02 c0 08 	test   BYTE PTR ds:0xc002fb4e,0x8
c001a7a0:	75 02                	jne    c001a7a4 <HalQueryPerformanceCounter()+0xf>
c001a7a2:	0f 31                	rdtsc  
c001a7a4:	c3                   	ret    

c001a7a5 <HalInitialise()>:
c001a7a5:	53                   	push   ebx
c001a7a6:	83 ec 08             	sub    esp,0x8
c001a7a9:	e8 04 e9 ff ff       	call   c00190b2 <HalDetectFeatures()>
c001a7ae:	83 ec 0c             	sub    esp,0xc
c001a7b1:	68 9d 8d 01 c0       	push   0xc0018d9d
c001a7b6:	e8 19 62 ff ff       	call   c00109d4 <KeRegisterRestartHandler(void (*)())>
c001a7bb:	c7 04 24 a8 8d 01 c0 	mov    DWORD PTR [esp],0xc0018da8
c001a7c2:	e8 03 62 ff ff       	call   c00109ca <KeRegisterShutdownHandler(void (*)())>
c001a7c7:	c7 04 24 a9 8d 01 c0 	mov    DWORD PTR [esp],0xc0018da9
c001a7ce:	e8 0b 62 ff ff       	call   c00109de <KeRegisterSleepHandler(void (*)())>
c001a7d3:	e8 e8 1b ff ff       	call   c000c3c0 <scanMADT()>
c001a7d8:	83 c4 10             	add    esp,0x10
c001a7db:	80 3d 40 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce40,0x0
c001a7e2:	75 0d                	jne    c001a7f1 <HalInitialise()+0x4c>
c001a7e4:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001a7e9:	83 e0 fe             	and    eax,0xfffffffe
c001a7ec:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c001a7f1:	e8 fe 07 00 00       	call   c001aff4 <picOpen()>
c001a7f6:	f6 05 4c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb4c,0x1
c001a7fd:	74 0a                	je     c001a809 <HalInitialise()+0x64>
c001a7ff:	e8 40 07 00 00       	call   c001af44 <picDisable()>
c001a804:	e8 9b e1 ff ff       	call   c00189a4 <apicOpen()>
c001a809:	bb 0f 00 00 00       	mov    ebx,0xf
c001a80e:	50                   	push   eax
c001a80f:	6a 00                	push   0x0
c001a811:	68 40 eb 00 c0       	push   0xc000eb40
c001a816:	6a 02                	push   0x2
c001a818:	e8 fa 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a81d:	83 c4 0c             	add    esp,0xc
c001a820:	6a 00                	push   0x0
c001a822:	68 84 eb 00 c0       	push   0xc000eb84
c001a827:	6a 06                	push   0x6
c001a829:	e8 e9 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a82e:	83 c4 0c             	add    esp,0xc
c001a831:	6a 00                	push   0x0
c001a833:	68 d8 eb 00 c0       	push   0xc000ebd8
c001a838:	6a 08                	push   0x8
c001a83a:	e8 d8 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a83f:	83 c4 0c             	add    esp,0xc
c001a842:	6a 00                	push   0x0
c001a844:	68 78 ea 00 c0       	push   0xc000ea78
c001a849:	6a 0d                	push   0xd
c001a84b:	e8 c7 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a850:	83 c4 0c             	add    esp,0xc
c001a853:	6a 00                	push   0x0
c001a855:	68 dc ea 00 c0       	push   0xc000eadc
c001a85a:	6a 0e                	push   0xe
c001a85c:	e8 b6 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a861:	83 c4 0c             	add    esp,0xc
c001a864:	6a 00                	push   0x0
c001a866:	68 50 eb 00 c0       	push   0xc000eb50
c001a86b:	6a 00                	push   0x0
c001a86d:	e8 a5 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a872:	83 c4 0c             	add    esp,0xc
c001a875:	6a 00                	push   0x0
c001a877:	68 50 eb 00 c0       	push   0xc000eb50
c001a87c:	6a 01                	push   0x1
c001a87e:	e8 94 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a883:	83 c4 0c             	add    esp,0xc
c001a886:	6a 00                	push   0x0
c001a888:	68 50 eb 00 c0       	push   0xc000eb50
c001a88d:	6a 03                	push   0x3
c001a88f:	e8 83 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a894:	83 c4 0c             	add    esp,0xc
c001a897:	6a 00                	push   0x0
c001a899:	68 50 eb 00 c0       	push   0xc000eb50
c001a89e:	6a 04                	push   0x4
c001a8a0:	e8 72 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a8a5:	83 c4 0c             	add    esp,0xc
c001a8a8:	6a 00                	push   0x0
c001a8aa:	68 50 eb 00 c0       	push   0xc000eb50
c001a8af:	6a 05                	push   0x5
c001a8b1:	e8 61 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a8b6:	83 c4 0c             	add    esp,0xc
c001a8b9:	6a 00                	push   0x0
c001a8bb:	68 50 eb 00 c0       	push   0xc000eb50
c001a8c0:	6a 00                	push   0x0
c001a8c2:	e8 50 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a8c7:	83 c4 0c             	add    esp,0xc
c001a8ca:	6a 00                	push   0x0
c001a8cc:	68 50 eb 00 c0       	push   0xc000eb50
c001a8d1:	6a 01                	push   0x1
c001a8d3:	e8 3f 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a8d8:	83 c4 0c             	add    esp,0xc
c001a8db:	6a 00                	push   0x0
c001a8dd:	68 50 eb 00 c0       	push   0xc000eb50
c001a8e2:	6a 09                	push   0x9
c001a8e4:	e8 2e 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a8e9:	83 c4 0c             	add    esp,0xc
c001a8ec:	6a 00                	push   0x0
c001a8ee:	68 50 eb 00 c0       	push   0xc000eb50
c001a8f3:	6a 0a                	push   0xa
c001a8f5:	e8 1d 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a8fa:	83 c4 0c             	add    esp,0xc
c001a8fd:	6a 00                	push   0x0
c001a8ff:	68 50 eb 00 c0       	push   0xc000eb50
c001a904:	6a 0b                	push   0xb
c001a906:	e8 0c 04 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a90b:	83 c4 10             	add    esp,0x10
c001a90e:	50                   	push   eax
c001a90f:	6a 00                	push   0x0
c001a911:	68 50 eb 00 c0       	push   0xc000eb50
c001a916:	53                   	push   ebx
c001a917:	43                   	inc    ebx
c001a918:	e8 fa 03 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a91d:	83 c4 10             	add    esp,0x10
c001a920:	83 fb 1e             	cmp    ebx,0x1e
c001a923:	75 e9                	jne    c001a90e <HalInitialise()+0x169>
c001a925:	50                   	push   eax
c001a926:	6a 00                	push   0x0
c001a928:	68 88 23 01 c0       	push   0xc0012388
c001a92d:	6a 60                	push   0x60
c001a92f:	e8 e3 03 00 00       	call   c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a934:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c001a939:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a943:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a94a:	e8 40 52 ff ff       	call   c000fb8f <malloc>
c001a94f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a952:	89 c3                	mov    ebx,eax
c001a954:	e8 09 0e 00 00       	call   c001b762 <RTC::RTC()>
c001a959:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a963:	5a                   	pop    edx
c001a964:	59                   	pop    ecx
c001a965:	53                   	push   ebx
c001a966:	ff 35 c8 d0 02 c0    	push   DWORD PTR ds:0xc002d0c8
c001a96c:	e8 e3 f0 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001a971:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a973:	6a 00                	push   0x0
c001a975:	6a 00                	push   0x0
c001a977:	6a 00                	push   0x0
c001a979:	53                   	push   ebx
c001a97a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a97d:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c001a982:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001a988:	83 c4 28             	add    esp,0x28
c001a98b:	5b                   	pop    ebx
c001a98c:	c3                   	ret    

c001a98d <HalMakeBeep(int)>:
c001a98d:	53                   	push   ebx
c001a98e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a992:	85 db                	test   ebx,ebx
c001a994:	75 07                	jne    c001a99d <HalMakeBeep(int)+0x10>
c001a996:	e4 61                	in     al,0x61
c001a998:	83 e0 fc             	and    eax,0xfffffffc
c001a99b:	eb 26                	jmp    c001a9c3 <HalMakeBeep(int)+0x36>
c001a99d:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a9a2:	99                   	cdq    
c001a9a3:	f7 fb                	idiv   ebx
c001a9a5:	89 c1                	mov    ecx,eax
c001a9a7:	b0 b6                	mov    al,0xb6
c001a9a9:	e6 43                	out    0x43,al
c001a9ab:	88 c8                	mov    al,cl
c001a9ad:	e6 42                	out    0x42,al
c001a9af:	89 c8                	mov    eax,ecx
c001a9b1:	c1 e8 08             	shr    eax,0x8
c001a9b4:	e6 42                	out    0x42,al
c001a9b6:	e4 61                	in     al,0x61
c001a9b8:	89 c2                	mov    edx,eax
c001a9ba:	83 ca 03             	or     edx,0x3
c001a9bd:	38 d0                	cmp    al,dl
c001a9bf:	74 04                	je     c001a9c5 <HalMakeBeep(int)+0x38>
c001a9c1:	88 d0                	mov    al,dl
c001a9c3:	e6 61                	out    0x61,al
c001a9c5:	5b                   	pop    ebx
c001a9c6:	c3                   	ret    

c001a9c7 <HalGetRand()>:
c001a9c7:	31 c0                	xor    eax,eax
c001a9c9:	c3                   	ret    

c001a9ca <HalEndOfInterrupt(int)>:
c001a9ca:	f6 05 4c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb4c,0x1
c001a9d1:	74 1d                	je     c001a9f0 <HalEndOfInterrupt(int)+0x26>
c001a9d3:	83 ec 18             	sub    esp,0x18
c001a9d6:	6a 1b                	push   0x1b
c001a9d8:	e8 ec f4 ff ff       	call   c0019ec9 <x86rdmsr(unsigned int)>
c001a9dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a9e2:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a9ec:	83 c4 1c             	add    esp,0x1c
c001a9ef:	c3                   	ret    
c001a9f0:	e9 83 07 00 00       	jmp    c001b178 <picEOI(int)>
c001a9f5:	90                   	nop

c001a9f6 <CPU::CPU()>:
c001a9f6:	83 ec 0c             	sub    esp,0xc
c001a9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9fd:	83 ec 08             	sub    esp,0x8
c001aa00:	68 6a 56 02 c0       	push   0xc002566a
c001aa05:	50                   	push   eax
c001aa06:	e8 ab f1 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001aa0b:	83 c4 10             	add    esp,0x10
c001aa0e:	ba 68 59 02 c0       	mov    edx,0xc0025968
c001aa13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa17:	89 10                	mov    DWORD PTR [eax],edx
c001aa19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa1d:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001aa27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa2b:	05 64 01 00 00       	add    eax,0x164
c001aa30:	83 ec 0c             	sub    esp,0xc
c001aa33:	50                   	push   eax
c001aa34:	e8 f3 41 ff ff       	call   c000ec2c <GDT::GDT()>
c001aa39:	83 c4 10             	add    esp,0x10
c001aa3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa40:	05 68 09 00 00       	add    eax,0x968
c001aa45:	83 ec 0c             	sub    esp,0xc
c001aa48:	50                   	push   eax
c001aa49:	e8 32 44 ff ff       	call   c000ee80 <IDT::IDT()>
c001aa4e:	83 c4 10             	add    esp,0x10
c001aa51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa55:	05 68 11 00 00       	add    eax,0x1168
c001aa5a:	83 ec 0c             	sub    esp,0xc
c001aa5d:	50                   	push   eax
c001aa5e:	e8 75 84 ff ff       	call   c0012ed8 <TSS::TSS()>
c001aa63:	83 c4 10             	add    esp,0x10
c001aa66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa6a:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001aa74:	90                   	nop
c001aa75:	83 c4 0c             	add    esp,0xc
c001aa78:	c3                   	ret    
c001aa79:	90                   	nop

c001aa7a <CPU::setupSMEP()>:
c001aa7a:	0f 20 e0             	mov    eax,cr4
c001aa7d:	0d 00 00 10 00       	or     eax,0x100000
c001aa82:	0f 22 e0             	mov    cr4,eax
c001aa85:	c3                   	ret    

c001aa86 <CPU::setupUMIP()>:
c001aa86:	0f 20 e0             	mov    eax,cr4
c001aa89:	80 cc 08             	or     ah,0x8
c001aa8c:	0f 22 e0             	mov    cr4,eax
c001aa8f:	c3                   	ret    

c001aa90 <CPU::setupTSC()>:
c001aa90:	0f 20 e0             	mov    eax,cr4
c001aa93:	83 c8 04             	or     eax,0x4
c001aa96:	0f 22 e0             	mov    cr4,eax
c001aa99:	c3                   	ret    

c001aa9a <CPU::setupLargePages()>:
c001aa9a:	0f 20 e0             	mov    eax,cr4
c001aa9d:	83 c8 10             	or     eax,0x10
c001aaa0:	0f 22 e0             	mov    cr4,eax
c001aaa3:	c3                   	ret    

c001aaa4 <CPU::setupPAT()>:
c001aaa4:	f6 05 4c fb 02 c0 08 	test   BYTE PTR ds:0xc002fb4c,0x8
c001aaab:	74 28                	je     c001aad5 <CPU::setupPAT()+0x31>
c001aaad:	53                   	push   ebx
c001aaae:	83 ec 14             	sub    esp,0x14
c001aab1:	68 77 02 00 00       	push   0x277
c001aab6:	e8 0e f4 ff ff       	call   c0019ec9 <x86rdmsr(unsigned int)>
c001aabb:	83 c4 0c             	add    esp,0xc
c001aabe:	83 e2 f8             	and    edx,0xfffffff8
c001aac1:	83 ca 01             	or     edx,0x1
c001aac4:	52                   	push   edx
c001aac5:	50                   	push   eax
c001aac6:	68 77 02 00 00       	push   0x277
c001aacb:	e8 37 f4 ff ff       	call   c0019f07 <x86wrmsr(unsigned int, unsigned long long)>
c001aad0:	83 c4 18             	add    esp,0x18
c001aad3:	5b                   	pop    ebx
c001aad4:	c3                   	ret    
c001aad5:	c3                   	ret    

c001aad6 <CPU::setupMTRR()>:
c001aad6:	c3                   	ret    
c001aad7:	90                   	nop

c001aad8 <CPU::setupGlobalPages()>:
c001aad8:	0f 20 e0             	mov    eax,cr4
c001aadb:	0c 80                	or     al,0x80
c001aadd:	0f 22 e0             	mov    cr4,eax
c001aae0:	c3                   	ret    
c001aae1:	90                   	nop

c001aae2 <CPU::allowUsermodeDataAccess()>:
c001aae2:	f6 05 4f fb 02 c0 40 	test   BYTE PTR ds:0xc002fb4f,0x40
c001aae9:	74 03                	je     c001aaee <CPU::allowUsermodeDataAccess()+0xc>
c001aaeb:	0f 01 cb             	stac   
c001aaee:	c3                   	ret    
c001aaef:	90                   	nop

c001aaf0 <CPU::prohibitUsermodeDataAccess()>:
c001aaf0:	f6 05 4f fb 02 c0 40 	test   BYTE PTR ds:0xc002fb4f,0x40
c001aaf7:	74 03                	je     c001aafc <CPU::prohibitUsermodeDataAccess()+0xc>
c001aaf9:	0f 01 ca             	clac   
c001aafc:	c3                   	ret    
c001aafd:	90                   	nop

c001aafe <CPU::setupSMAP()>:
c001aafe:	0f 20 e0             	mov    eax,cr4
c001ab01:	0d 00 00 20 00       	or     eax,0x200000
c001ab06:	0f 22 e0             	mov    cr4,eax
c001ab09:	eb e5                	jmp    c001aaf0 <CPU::prohibitUsermodeDataAccess()>
c001ab0b:	90                   	nop

c001ab0c <CPU::setupFeatures()>:
c001ab0c:	53                   	push   ebx
c001ab0d:	83 ec 08             	sub    esp,0x8
c001ab10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab14:	f6 05 4f fb 02 c0 20 	test   BYTE PTR ds:0xc002fb4f,0x20
c001ab1b:	74 18                	je     c001ab35 <CPU::setupFeatures()+0x29>
c001ab1d:	83 ec 0c             	sub    esp,0xc
c001ab20:	68 d7 58 02 c0       	push   0xc00258d7
c001ab25:	e8 52 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ab2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab2d:	e8 54 ff ff ff       	call   c001aa86 <CPU::setupUMIP()>
c001ab32:	83 c4 10             	add    esp,0x10
c001ab35:	f6 05 4e fb 02 c0 08 	test   BYTE PTR ds:0xc002fb4e,0x8
c001ab3c:	74 18                	je     c001ab56 <CPU::setupFeatures()+0x4a>
c001ab3e:	83 ec 0c             	sub    esp,0xc
c001ab41:	68 e1 58 02 c0       	push   0xc00258e1
c001ab46:	e8 31 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ab4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab4e:	e8 3d ff ff ff       	call   c001aa90 <CPU::setupTSC()>
c001ab53:	83 c4 10             	add    esp,0x10
c001ab56:	f6 05 4e fb 02 c0 20 	test   BYTE PTR ds:0xc002fb4e,0x20
c001ab5d:	74 18                	je     c001ab77 <CPU::setupFeatures()+0x6b>
c001ab5f:	83 ec 0c             	sub    esp,0xc
c001ab62:	68 ea 58 02 c0       	push   0xc00258ea
c001ab67:	e8 10 c4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ab6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab6f:	e8 26 ff ff ff       	call   c001aa9a <CPU::setupLargePages()>
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	f6 05 4e fb 02 c0 40 	test   BYTE PTR ds:0xc002fb4e,0x40
c001ab7e:	74 18                	je     c001ab98 <CPU::setupFeatures()+0x8c>
c001ab80:	83 ec 0c             	sub    esp,0xc
c001ab83:	68 f3 58 02 c0       	push   0xc00258f3
c001ab88:	e8 ef c3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ab8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab90:	e8 43 ff ff ff       	call   c001aad8 <CPU::setupGlobalPages()>
c001ab95:	83 c4 10             	add    esp,0x10
c001ab98:	f6 05 4e fb 02 c0 80 	test   BYTE PTR ds:0xc002fb4e,0x80
c001ab9f:	74 18                	je     c001abb9 <CPU::setupFeatures()+0xad>
c001aba1:	83 ec 0c             	sub    esp,0xc
c001aba4:	68 05 59 02 c0       	push   0xc0025905
c001aba9:	e8 ce c3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001abae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abb1:	e8 ee fe ff ff       	call   c001aaa4 <CPU::setupPAT()>
c001abb6:	83 c4 10             	add    esp,0x10
c001abb9:	f6 05 50 fb 02 c0 04 	test   BYTE PTR ds:0xc002fb50,0x4
c001abc0:	74 11                	je     c001abd3 <CPU::setupFeatures()+0xc7>
c001abc2:	c7 44 24 10 0e 59 02 c0 	mov    DWORD PTR [esp+0x10],0xc002590e
c001abca:	83 c4 08             	add    esp,0x8
c001abcd:	5b                   	pop    ebx
c001abce:	e9 a9 c3 fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001abd3:	83 c4 08             	add    esp,0x8
c001abd6:	5b                   	pop    ebx
c001abd7:	c3                   	ret    

c001abd8 <CPU::open(int, int, void*)>:
c001abd8:	55                   	push   ebp
c001abd9:	57                   	push   edi
c001abda:	56                   	push   esi
c001abdb:	53                   	push   ebx
c001abdc:	83 ec 18             	sub    esp,0x18
c001abdf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001abe3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001abe7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001abeb:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001abf1:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001abf7:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001abfd:	50                   	push   eax
c001abfe:	e8 8b 40 ff ff       	call   c000ec8e <GDT::setup()>
c001ac03:	83 c4 0c             	add    esp,0xc
c001ac06:	6a 00                	push   0x0
c001ac08:	68 ef be ad de       	push   0xdeadbeef
c001ac0d:	55                   	push   ebp
c001ac0e:	e8 09 83 ff ff       	call   c0012f1c <TSS::setup(unsigned long, unsigned long)>
c001ac13:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ac16:	e8 e1 82 ff ff       	call   c0012efc <TSS::flush()>
c001ac1b:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001ac21:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac24:	e8 cd 42 ff ff       	call   c000eef6 <IDT::setup()>
c001ac29:	b8 00 04 00 00       	mov    eax,0x400
c001ac2e:	0f 23 f8             	mov    dr7,eax
c001ac31:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001ac3b:	e8 9a 55 ff ff       	call   c00101da <Phys::allocatePage()>
c001ac40:	83 c4 10             	add    esp,0x10
c001ac43:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001ac49:	85 f6                	test   esi,esi
c001ac4b:	89 38                	mov    DWORD PTR [eax],edi
c001ac4d:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ac53:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001ac56:	74 10                	je     c001ac68 <CPU::open(int, int, void*)+0x90>
c001ac58:	50                   	push   eax
c001ac59:	50                   	push   eax
c001ac5a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ac60:	56                   	push   esi
c001ac61:	e8 62 8c ff ff       	call   c00138c8 <VAS::setCPUSpecific(unsigned long)>
c001ac66:	eb 0d                	jmp    c001ac75 <CPU::open(int, int, void*)+0x9d>
c001ac68:	83 ec 0c             	sub    esp,0xc
c001ac6b:	68 18 59 02 c0       	push   0xc0025918
c001ac70:	e8 71 53 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001ac75:	83 c4 10             	add    esp,0x10
c001ac78:	83 ec 0c             	sub    esp,0xc
c001ac7b:	68 26 59 02 c0       	push   0xc0025926
c001ac80:	e8 a4 26 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001ac85:	e8 1b fb ff ff       	call   c001a7a5 <HalInitialise()>
c001ac8a:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001ac91:	e8 46 26 ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ac96:	0f b6 c0             	movzx  eax,al
c001ac99:	83 f8 01             	cmp    eax,0x1
c001ac9c:	19 c0                	sbb    eax,eax
c001ac9e:	83 e0 46             	and    eax,0x46
c001aca1:	83 c0 1e             	add    eax,0x1e
c001aca4:	89 04 24             	mov    DWORD PTR [esp],eax
c001aca7:	e8 41 04 ff ff       	call   c000b0ed <setupTimer(int)>
c001acac:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001acb2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001acb9:	e8 1e 26 ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001acbe:	83 c4 10             	add    esp,0x10
c001acc1:	84 c0                	test   al,al
c001acc3:	74 0c                	je     c001acd1 <CPU::open(int, int, void*)+0xf9>
c001acc5:	83 ec 0c             	sub    esp,0xc
c001acc8:	53                   	push   ebx
c001acc9:	e8 3e fe ff ff       	call   c001ab0c <CPU::setupFeatures()>
c001acce:	83 c4 10             	add    esp,0x10
c001acd1:	83 c4 0c             	add    esp,0xc
c001acd4:	31 c0                	xor    eax,eax
c001acd6:	5b                   	pop    ebx
c001acd7:	5e                   	pop    esi
c001acd8:	5f                   	pop    edi
c001acd9:	5d                   	pop    ebp
c001acda:	c3                   	ret    

c001acdb <convertLegacyIRQNumber(int)>:
c001acdb:	83 ec 0c             	sub    esp,0xc
c001acde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace2:	f6 05 4c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb4c,0x1
c001ace9:	74 0c                	je     c001acf7 <convertLegacyIRQNumber(int)+0x1c>
c001aceb:	83 f8 0f             	cmp    eax,0xf
c001acee:	7f 0b                	jg     c001acfb <convertLegacyIRQNumber(int)+0x20>
c001acf0:	0f b6 80 88 64 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9b78]
c001acf7:	83 c4 0c             	add    esp,0xc
c001acfa:	c3                   	ret    
c001acfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acff:	83 ec 0c             	sub    esp,0xc
c001ad02:	68 8c 59 02 c0       	push   0xc002598c
c001ad07:	e8 da 52 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001ad0c:	83 c4 10             	add    esp,0x10
c001ad0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad13:	83 c4 0c             	add    esp,0xc
c001ad16:	c3                   	ret    

c001ad17 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001ad17:	56                   	push   esi
c001ad18:	31 c0                	xor    eax,eax
c001ad1a:	53                   	push   ebx
c001ad1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad23:	89 ca                	mov    edx,ecx
c001ad25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ad29:	c1 e2 04             	shl    edx,0x4
c001ad2c:	83 bc 82 e0 e0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd1f20],0x0
c001ad34:	74 17                	je     c001ad4d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001ad36:	83 c0 01             	add    eax,0x1
c001ad39:	83 f8 04             	cmp    eax,0x4
c001ad3c:	75 ee                	jne    c001ad2c <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001ad3e:	c7 44 24 0c ed 59 02 c0 	mov    DWORD PTR [esp+0xc],0xc00259ed
c001ad46:	5b                   	pop    ebx
c001ad47:	5e                   	pop    esi
c001ad48:	e9 99 52 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c001ad4d:	8d 04 88             	lea    eax,[eax+ecx*4]
c001ad50:	89 1c 85 e0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f20],ebx
c001ad57:	89 34 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],esi
c001ad5e:	5b                   	pop    ebx
c001ad5f:	5e                   	pop    esi
c001ad60:	c3                   	ret    

c001ad61 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001ad61:	57                   	push   edi
c001ad62:	f6 05 4c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb4c,0x1
c001ad69:	56                   	push   esi
c001ad6a:	53                   	push   ebx
c001ad6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad73:	74 54                	je     c001adc9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001ad75:	89 c7                	mov    edi,eax
c001ad77:	84 c0                	test   al,al
c001ad79:	74 1d                	je     c001ad98 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001ad7b:	83 fe 0f             	cmp    esi,0xf
c001ad7e:	0f 8f d5 00 00 00    	jg     c001ae59 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001ad84:	0f b6 b6 88 64 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9b78]
c001ad8b:	0f b7 bc 36 20 ce 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd31e0]
c001ad93:	d1 ef                	shr    edi,1
c001ad95:	83 e7 01             	and    edi,0x1
c001ad98:	83 ec 08             	sub    esp,0x8
c001ad9b:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c001ada0:	31 db                	xor    ebx,ebx
c001ada2:	50                   	push   eax
c001ada3:	68 fa 59 02 c0       	push   0xc00259fa
c001ada8:	e8 cf c1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001adad:	83 c4 10             	add    esp,0x10
c001adb0:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c001adb5:	85 c0                	test   eax,eax
c001adb7:	7f 55                	jg     c001ae0e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001adb9:	83 ec 0c             	sub    esp,0xc
c001adbc:	68 11 5a 02 c0       	push   0xc0025a11
c001adc1:	e8 20 52 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001adc6:	83 c4 10             	add    esp,0x10
c001adc9:	8d 7e 20             	lea    edi,[esi+0x20]
c001adcc:	89 f8                	mov    eax,edi
c001adce:	31 d2                	xor    edx,edx
c001add0:	c1 e0 04             	shl    eax,0x4
c001add3:	8b 8c 90 e0 e0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd1f20]
c001adda:	85 c9                	test   ecx,ecx
c001addc:	0f 84 8e 00 00 00    	je     c001ae70 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001ade2:	83 c2 01             	add    edx,0x1
c001ade5:	83 fa 04             	cmp    edx,0x4
c001ade8:	75 e9                	jne    c001add3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001adea:	83 ec 0c             	sub    esp,0xc
c001aded:	68 c8 59 02 c0       	push   0xc00259c8
c001adf2:	e8 ef 51 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001adf7:	83 c4 10             	add    esp,0x10
c001adfa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001adff:	5b                   	pop    ebx
c001ae00:	5e                   	pop    esi
c001ae01:	5f                   	pop    edi
c001ae02:	c3                   	ret    
c001ae03:	83 c3 01             	add    ebx,0x1
c001ae06:	39 1d c0 fa 02 c0    	cmp    DWORD PTR ds:0xc002fac0,ebx
c001ae0c:	7e ab                	jle    c001adb9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001ae0e:	83 ec 08             	sub    esp,0x8
c001ae11:	8b 04 9d e0 fa 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0520]
c001ae18:	56                   	push   esi
c001ae19:	50                   	push   eax
c001ae1a:	e8 11 dd ff ff       	call   c0018b30 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001ae1f:	83 c4 10             	add    esp,0x10
c001ae22:	84 c0                	test   al,al
c001ae24:	74 dd                	je     c001ae03 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001ae26:	83 ec 04             	sub    esp,0x4
c001ae29:	89 f8                	mov    eax,edi
c001ae2b:	8b 1c 9d e0 fa 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0520]
c001ae32:	0f b6 f8             	movzx  edi,al
c001ae35:	57                   	push   edi
c001ae36:	8d 7e 20             	lea    edi,[esi+0x20]
c001ae39:	6a 00                	push   0x0
c001ae3b:	89 f8                	mov    eax,edi
c001ae3d:	0f b6 c0             	movzx  eax,al
c001ae40:	50                   	push   eax
c001ae41:	89 f0                	mov    eax,esi
c001ae43:	6a 00                	push   0x0
c001ae45:	0f b6 c0             	movzx  eax,al
c001ae48:	6a 00                	push   0x0
c001ae4a:	50                   	push   eax
c001ae4b:	53                   	push   ebx
c001ae4c:	e8 4b de ff ff       	call   c0018c9c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001ae51:	83 c4 20             	add    esp,0x20
c001ae54:	e9 73 ff ff ff       	jmp    c001adcc <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001ae59:	83 ec 0c             	sub    esp,0xc
c001ae5c:	31 ff                	xor    edi,edi
c001ae5e:	68 8c 59 02 c0       	push   0xc002598c
c001ae63:	e8 7e 51 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001ae68:	83 c4 10             	add    esp,0x10
c001ae6b:	e9 28 ff ff ff       	jmp    c001ad98 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001ae70:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ae73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae77:	89 14 85 e0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f20],edx
c001ae7e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae82:	5b                   	pop    ebx
c001ae83:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001ae8a:	89 f0                	mov    eax,esi
c001ae8c:	5e                   	pop    esi
c001ae8d:	5f                   	pop    edi
c001ae8e:	c3                   	ret    

c001ae8f <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001ae8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ae97:	c1 e0 04             	shl    eax,0x4
c001ae9a:	8d 50 10             	lea    edx,[eax+0x10]
c001ae9d:	39 88 e0 e0 02 c0    	cmp    DWORD PTR [eax-0x3ffd1f20],ecx
c001aea3:	74 08                	je     c001aead <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001aea5:	83 c0 04             	add    eax,0x4
c001aea8:	39 d0                	cmp    eax,edx
c001aeaa:	75 f1                	jne    c001ae9d <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001aeac:	c3                   	ret    
c001aead:	c7 80 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1f20],0x0
c001aeb7:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001aec1:	eb e2                	jmp    c001aea5 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001aec3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001aec3:	53                   	push   ebx
c001aec4:	83 ec 08             	sub    esp,0x8
c001aec7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001aecb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001aed0:	74 09                	je     c001aedb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001aed2:	f6 05 4c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb4c,0x1
c001aed9:	75 37                	jne    c001af12 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001aedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aedf:	83 c0 20             	add    eax,0x20
c001aee2:	c1 e0 04             	shl    eax,0x4
c001aee5:	8d 50 10             	lea    edx,[eax+0x10]
c001aee8:	39 98 e0 e0 02 c0    	cmp    DWORD PTR [eax-0x3ffd1f20],ebx
c001aeee:	74 0c                	je     c001aefc <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001aef0:	83 c0 04             	add    eax,0x4
c001aef3:	39 d0                	cmp    eax,edx
c001aef5:	75 f1                	jne    c001aee8 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001aef7:	83 c4 08             	add    esp,0x8
c001aefa:	5b                   	pop    ebx
c001aefb:	c3                   	ret    
c001aefc:	c7 80 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1f20],0x0
c001af06:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001af10:	eb de                	jmp    c001aef0 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001af12:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001af17:	7f 11                	jg     c001af2a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001af19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af1d:	0f b6 80 88 64 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9b78]
c001af24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001af28:	eb b1                	jmp    c001aedb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001af2a:	83 ec 0c             	sub    esp,0xc
c001af2d:	68 1e 5a 02 c0       	push   0xc0025a1e
c001af32:	e8 af 50 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001af37:	83 c4 10             	add    esp,0x10
c001af3a:	eb 9f                	jmp    c001aedb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>

c001af3c <picIoWait()>:
c001af3c:	eb 00                	jmp    c001af3e <picIoWait()+0x2>
c001af3e:	eb 00                	jmp    c001af40 <picIoWait()+0x4>
c001af40:	90                   	nop
c001af41:	c3                   	ret    
c001af42:	66 90                	xchg   ax,ax

c001af44 <picDisable()>:
c001af44:	83 ec 10             	sub    esp,0x10
c001af47:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001af4e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001af53:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001af57:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001af5c:	ee                   	out    dx,al
c001af5d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001af64:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001af69:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001af6d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001af72:	ee                   	out    dx,al
c001af73:	90                   	nop
c001af74:	83 c4 10             	add    esp,0x10
c001af77:	c3                   	ret    

c001af78 <picGetIRQReg(int)>:
c001af78:	83 ec 10             	sub    esp,0x10
c001af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af7f:	0f b6 c0             	movzx  eax,al
c001af82:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001af89:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001af8d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001af91:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001af96:	ee                   	out    dx,al
c001af97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af9b:	0f b6 c0             	movzx  eax,al
c001af9e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001afa5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001afa9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001afad:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001afb2:	ee                   	out    dx,al
c001afb3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001afba:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001afbf:	89 c2                	mov    edx,eax
c001afc1:	ec                   	in     al,dx
c001afc2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001afc6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001afca:	0f b6 c0             	movzx  eax,al
c001afcd:	c1 e0 08             	shl    eax,0x8
c001afd0:	89 c1                	mov    ecx,eax
c001afd2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001afd9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001afde:	89 c2                	mov    edx,eax
c001afe0:	ec                   	in     al,dx
c001afe1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001afe5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001afe9:	0f b6 c0             	movzx  eax,al
c001afec:	09 c8                	or     eax,ecx
c001afee:	83 c4 10             	add    esp,0x10
c001aff1:	c3                   	ret    
c001aff2:	66 90                	xchg   ax,ax

c001aff4 <picOpen()>:
c001aff4:	83 ec 50             	sub    esp,0x50
c001aff7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001affe:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001b003:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b007:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b00b:	ee                   	out    dx,al
c001b00c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001b013:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b018:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b01c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b020:	ee                   	out    dx,al
c001b021:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001b029:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001b031:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001b038:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b03c:	89 c2                	mov    edx,eax
c001b03e:	ec                   	in     al,dx
c001b03f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001b043:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b047:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001b04b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001b052:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b056:	89 c2                	mov    edx,eax
c001b058:	ec                   	in     al,dx
c001b059:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b05d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b061:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001b065:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001b06c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001b071:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001b075:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b079:	ee                   	out    dx,al
c001b07a:	e8 bd fe ff ff       	call   c001af3c <picIoWait()>
c001b07f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001b086:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001b08b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001b08f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b093:	ee                   	out    dx,al
c001b094:	e8 a3 fe ff ff       	call   c001af3c <picIoWait()>
c001b099:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b09d:	0f b6 c0             	movzx  eax,al
c001b0a0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001b0a7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001b0ab:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001b0af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b0b3:	ee                   	out    dx,al
c001b0b4:	e8 83 fe ff ff       	call   c001af3c <picIoWait()>
c001b0b9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b0bd:	0f b6 c0             	movzx  eax,al
c001b0c0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001b0c7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b0cb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b0cf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b0d3:	ee                   	out    dx,al
c001b0d4:	e8 63 fe ff ff       	call   c001af3c <picIoWait()>
c001b0d9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001b0e0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001b0e5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001b0e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b0ed:	ee                   	out    dx,al
c001b0ee:	e8 49 fe ff ff       	call   c001af3c <picIoWait()>
c001b0f3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001b0fa:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001b0ff:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001b103:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b107:	ee                   	out    dx,al
c001b108:	e8 2f fe ff ff       	call   c001af3c <picIoWait()>
c001b10d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001b114:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001b119:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001b11d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b121:	ee                   	out    dx,al
c001b122:	e8 15 fe ff ff       	call   c001af3c <picIoWait()>
c001b127:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001b12e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001b133:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001b137:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b13b:	ee                   	out    dx,al
c001b13c:	e8 fb fd ff ff       	call   c001af3c <picIoWait()>
c001b141:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001b146:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001b14d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001b151:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001b155:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001b159:	ee                   	out    dx,al
c001b15a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001b15f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001b166:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b16a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001b16e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001b172:	ee                   	out    dx,al
c001b173:	90                   	nop
c001b174:	83 c4 50             	add    esp,0x50
c001b177:	c3                   	ret    

c001b178 <picEOI(int)>:
c001b178:	83 ec 10             	sub    esp,0x10
c001b17b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b180:	75 1e                	jne    c001b1a0 <picEOI(int)+0x28>
c001b182:	6a 0b                	push   0xb
c001b184:	e8 ef fd ff ff       	call   c001af78 <picGetIRQReg(int)>
c001b189:	83 c4 04             	add    esp,0x4
c001b18c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001b191:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001b196:	25 80 00 00 00       	and    eax,0x80
c001b19b:	74 73                	je     c001b210 <picEOI(int)+0x98>
c001b19d:	8d 76 00             	lea    esi,[esi+0x0]
c001b1a0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001b1a5:	75 31                	jne    c001b1d8 <picEOI(int)+0x60>
c001b1a7:	6a 0b                	push   0xb
c001b1a9:	e8 ca fd ff ff       	call   c001af78 <picGetIRQReg(int)>
c001b1ae:	83 c4 04             	add    esp,0x4
c001b1b1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001b1b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1ba:	98                   	cwde   
c001b1bb:	85 c0                	test   eax,eax
c001b1bd:	78 19                	js     c001b1d8 <picEOI(int)+0x60>
c001b1bf:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001b1c6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001b1cb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b1cf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b1d4:	ee                   	out    dx,al
c001b1d5:	eb 3d                	jmp    c001b214 <picEOI(int)+0x9c>
c001b1d7:	90                   	nop
c001b1d8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b1dd:	7e 19                	jle    c001b1f8 <picEOI(int)+0x80>
c001b1df:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b1e6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001b1eb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b1ef:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b1f4:	ee                   	out    dx,al
c001b1f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1f8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b1ff:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b204:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b208:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b20d:	ee                   	out    dx,al
c001b20e:	eb 04                	jmp    c001b214 <picEOI(int)+0x9c>
c001b210:	90                   	nop
c001b211:	8d 76 00             	lea    esi,[esi+0x0]
c001b214:	83 c4 10             	add    esp,0x10
c001b217:	c3                   	ret    

c001b218 <RTC::open(int, int, void*)>:
c001b218:	31 c0                	xor    eax,eax
c001b21a:	c3                   	ret    
c001b21b:	90                   	nop

c001b21c <RTC::close(int, int, void*)>:
c001b21c:	31 c0                	xor    eax,eax
c001b21e:	c3                   	ret    
c001b21f:	90                   	nop

c001b220 <RTC::timeInSecondsUTC()>:
c001b220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b224:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b22a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b230:	c3                   	ret    
c001b231:	90                   	nop

c001b232 <RTC::timeInDatetimeUTC()>:
c001b232:	53                   	push   ebx
c001b233:	83 ec 14             	sub    esp,0x14
c001b236:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b23a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b23e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b240:	50                   	push   eax
c001b241:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b244:	83 c4 0c             	add    esp,0xc
c001b247:	52                   	push   edx
c001b248:	50                   	push   eax
c001b249:	53                   	push   ebx
c001b24a:	e8 fb e3 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b24f:	89 d8                	mov    eax,ebx
c001b251:	83 c4 14             	add    esp,0x14
c001b254:	5b                   	pop    ebx
c001b255:	c2 04 00             	ret    0x4

c001b258 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b258:	56                   	push   esi
c001b259:	53                   	push   ebx
c001b25a:	83 ec 14             	sub    esp,0x14
c001b25d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b261:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b263:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b266:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b26a:	52                   	push   edx
c001b26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b26f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b273:	50                   	push   eax
c001b274:	e8 d1 e3 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b279:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b27d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b281:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b285:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b289:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b28d:	89 f0                	mov    eax,esi
c001b28f:	83 c4 20             	add    esp,0x20
c001b292:	5b                   	pop    ebx
c001b293:	5e                   	pop    esi
c001b294:	ff e0                	jmp    eax

c001b296 <RTC::~RTC()>:
c001b296:	83 ec 0c             	sub    esp,0xc
c001b299:	ba 48 5a 02 c0       	mov    edx,0xc0025a48
c001b29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2a2:	89 10                	mov    DWORD PTR [eax],edx
c001b2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2a8:	83 ec 0c             	sub    esp,0xc
c001b2ab:	50                   	push   eax
c001b2ac:	e8 3b de fe ff       	call   c00090ec <Clock::~Clock()>
c001b2b1:	83 c4 10             	add    esp,0x10
c001b2b4:	90                   	nop
c001b2b5:	83 c4 0c             	add    esp,0xc
c001b2b8:	c3                   	ret    
c001b2b9:	90                   	nop

c001b2ba <RTC::~RTC()>:
c001b2ba:	83 ec 0c             	sub    esp,0xc
c001b2bd:	83 ec 0c             	sub    esp,0xc
c001b2c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2c4:	e8 cd ff ff ff       	call   c001b296 <RTC::~RTC()>
c001b2c9:	83 c4 10             	add    esp,0x10
c001b2cc:	83 ec 08             	sub    esp,0x8
c001b2cf:	68 60 01 00 00       	push   0x160
c001b2d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2d8:	e8 0c 21 ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001b2dd:	83 c4 10             	add    esp,0x10
c001b2e0:	83 c4 0c             	add    esp,0xc
c001b2e3:	c3                   	ret    

c001b2e4 <RTC::get_update_in_progress_flag()>:
c001b2e4:	83 ec 18             	sub    esp,0x18
c001b2e7:	6a 0a                	push   0xa
c001b2e9:	e8 bf da ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b2ee:	83 c4 1c             	add    esp,0x1c
c001b2f1:	0f b6 c0             	movzx  eax,al
c001b2f4:	c1 e8 07             	shr    eax,0x7
c001b2f7:	c3                   	ret    

c001b2f8 <RTC::completeRTCRefresh()>:
c001b2f8:	55                   	push   ebp
c001b2f9:	57                   	push   edi
c001b2fa:	56                   	push   esi
c001b2fb:	53                   	push   ebx
c001b2fc:	83 ec 3c             	sub    esp,0x3c
c001b2ff:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b305:	83 ec 0c             	sub    esp,0xc
c001b308:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b30c:	e8 d3 ff ff ff       	call   c001b2e4 <RTC::get_update_in_progress_flag()>
c001b311:	83 c4 10             	add    esp,0x10
c001b314:	84 c0                	test   al,al
c001b316:	74 0e                	je     c001b326 <RTC::completeRTCRefresh()+0x2e>
c001b318:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b31e:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b324:	73 df                	jae    c001b305 <RTC::completeRTCRefresh()+0xd>
c001b326:	83 ec 0c             	sub    esp,0xc
c001b329:	6a 00                	push   0x0
c001b32b:	e8 7d da ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b330:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b337:	89 c5                	mov    ebp,eax
c001b339:	e8 6f da ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b33e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b345:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b349:	e8 5f da ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b34e:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b355:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b359:	e8 4f da ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b35e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b365:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b369:	e8 3f da ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b36e:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b375:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b379:	e8 2f da ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b37e:	0f b6 c0             	movzx  eax,al
c001b381:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b385:	83 c4 10             	add    esp,0x10
c001b388:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b38e:	83 ec 0c             	sub    esp,0xc
c001b391:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b395:	e8 4a ff ff ff       	call   c001b2e4 <RTC::get_update_in_progress_flag()>
c001b39a:	83 c4 10             	add    esp,0x10
c001b39d:	84 c0                	test   al,al
c001b39f:	74 0e                	je     c001b3af <RTC::completeRTCRefresh()+0xb7>
c001b3a1:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b3a7:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b3ad:	73 df                	jae    c001b38e <RTC::completeRTCRefresh()+0x96>
c001b3af:	83 ec 0c             	sub    esp,0xc
c001b3b2:	6a 00                	push   0x0
c001b3b4:	e8 f4 d9 ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b3b9:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b3c0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b3c4:	e8 e4 d9 ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b3c9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b3d0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b3d4:	e8 d4 d9 ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b3d9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b3e0:	88 c3                	mov    bl,al
c001b3e2:	e8 c6 d9 ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b3e7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b3ee:	89 c6                	mov    esi,eax
c001b3f0:	e8 b8 d9 ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b3f5:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b3fc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b400:	e8 a8 d9 ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b405:	89 e9                	mov    ecx,ebp
c001b407:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b40b:	0f b6 f8             	movzx  edi,al
c001b40e:	83 c4 10             	add    esp,0x10
c001b411:	0f b6 eb             	movzx  ebp,bl
c001b414:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b418:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b41d:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b422:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b426:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b42a:	0f 94 c0             	sete   al
c001b42d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b431:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001b435:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b43a:	0f 94 c2             	sete   dl
c001b43d:	21 d0                	and    eax,edx
c001b43f:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b443:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b447:	0f 94 c2             	sete   dl
c001b44a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b44e:	21 c2                	and    edx,eax
c001b450:	89 f0                	mov    eax,esi
c001b452:	0f b6 c0             	movzx  eax,al
c001b455:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b459:	89 f0                	mov    eax,esi
c001b45b:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b45f:	0f 94 c0             	sete   al
c001b462:	21 d0                	and    eax,edx
c001b464:	31 d2                	xor    edx,edx
c001b466:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b46a:	0f 94 c2             	sete   dl
c001b46d:	85 c2                	test   edx,eax
c001b46f:	75 27                	jne    c001b498 <RTC::completeRTCRefresh()+0x1a0>
c001b471:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b475:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001b479:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b47d:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b481:	89 f0                	mov    eax,esi
c001b483:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001b487:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b48b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b48f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b493:	e9 f0 fe ff ff       	jmp    c001b388 <RTC::completeRTCRefresh()+0x90>
c001b498:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001b49c:	75 d3                	jne    c001b471 <RTC::completeRTCRefresh()+0x179>
c001b49e:	83 ec 0c             	sub    esp,0xc
c001b4a1:	6a 0b                	push   0xb
c001b4a3:	e8 05 d9 ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b4a8:	83 c4 10             	add    esp,0x10
c001b4ab:	a8 04                	test   al,0x4
c001b4ad:	75 7a                	jne    c001b529 <RTC::completeRTCRefresh()+0x231>
c001b4af:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b4b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4b7:	83 e1 0f             	and    ecx,0xf
c001b4ba:	c1 ea 04             	shr    edx,0x4
c001b4bd:	83 e6 0f             	and    esi,0xf
c001b4c0:	6b d2 0a             	imul   edx,edx,0xa
c001b4c3:	c1 ef 04             	shr    edi,0x4
c001b4c6:	01 d1                	add    ecx,edx
c001b4c8:	6b ff 0a             	imul   edi,edi,0xa
c001b4cb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b4cf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b4d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b4d7:	c1 ea 04             	shr    edx,0x4
c001b4da:	83 e1 0f             	and    ecx,0xf
c001b4dd:	6b d2 0a             	imul   edx,edx,0xa
c001b4e0:	01 d1                	add    ecx,edx
c001b4e2:	89 ea                	mov    edx,ebp
c001b4e4:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b4e8:	c1 ea 04             	shr    edx,0x4
c001b4eb:	89 d9                	mov    ecx,ebx
c001b4ed:	83 e2 07             	and    edx,0x7
c001b4f0:	83 e1 0f             	and    ecx,0xf
c001b4f3:	6b d2 0a             	imul   edx,edx,0xa
c001b4f6:	83 e3 80             	and    ebx,0xffffff80
c001b4f9:	01 d1                	add    ecx,edx
c001b4fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b4ff:	09 cb                	or     ebx,ecx
c001b501:	c1 ea 04             	shr    edx,0x4
c001b504:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b508:	6b d2 0a             	imul   edx,edx,0xa
c001b50b:	83 e1 0f             	and    ecx,0xf
c001b50e:	01 d6                	add    esi,edx
c001b510:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b514:	c1 ea 04             	shr    edx,0x4
c001b517:	6b d2 0a             	imul   edx,edx,0xa
c001b51a:	01 d1                	add    ecx,edx
c001b51c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b520:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b524:	83 e2 0f             	and    edx,0xf
c001b527:	01 d7                	add    edi,edx
c001b529:	a8 02                	test   al,0x2
c001b52b:	75 15                	jne    c001b542 <RTC::completeRTCRefresh()+0x24a>
c001b52d:	f6 c3 80             	test   bl,0x80
c001b530:	74 10                	je     c001b542 <RTC::completeRTCRefresh()+0x24a>
c001b532:	83 e3 7f             	and    ebx,0x7f
c001b535:	b9 18 00 00 00       	mov    ecx,0x18
c001b53a:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b53d:	99                   	cdq    
c001b53e:	f7 f9                	idiv   ecx
c001b540:	88 d3                	mov    bl,dl
c001b542:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001b548:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001b54e:	77 06                	ja     c001b556 <RTC::completeRTCRefresh()+0x25e>
c001b550:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b556:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b55b:	31 c9                	xor    ecx,ecx
c001b55d:	c1 e0 10             	shl    eax,0x10
c001b560:	89 cf                	mov    edi,ecx
c001b562:	c1 e5 10             	shl    ebp,0x10
c001b565:	31 d2                	xor    edx,edx
c001b567:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b56d:	09 c7                	or     edi,eax
c001b56f:	89 f0                	mov    eax,esi
c001b571:	89 f9                	mov    ecx,edi
c001b573:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b577:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b57b:	88 c2                	mov    dl,al
c001b57d:	88 d9                	mov    cl,bl
c001b57f:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001b583:	0f b7 c2             	movzx  eax,dx
c001b586:	09 e8                	or     eax,ebp
c001b588:	89 c2                	mov    edx,eax
c001b58a:	50                   	push   eax
c001b58b:	50                   	push   eax
c001b58c:	51                   	push   ecx
c001b58d:	52                   	push   edx
c001b58e:	e8 a9 dc fe ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c001b593:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b597:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b59d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b5a3:	83 c4 4c             	add    esp,0x4c
c001b5a6:	5b                   	pop    ebx
c001b5a7:	5e                   	pop    esi
c001b5a8:	5f                   	pop    edi
c001b5a9:	5d                   	pop    ebp
c001b5aa:	c3                   	ret    
c001b5ab:	90                   	nop

c001b5ac <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b5ac:	55                   	push   ebp
c001b5ad:	57                   	push   edi
c001b5ae:	56                   	push   esi
c001b5af:	53                   	push   ebx
c001b5b0:	83 ec 34             	sub    esp,0x34
c001b5b3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b5b7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b5bb:	6a 00                	push   0x0
c001b5bd:	89 fb                	mov    ebx,edi
c001b5bf:	6a 00                	push   0x0
c001b5c1:	e8 3b d8 ff ff       	call   c0018e01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b5c6:	5d                   	pop    ebp
c001b5c7:	58                   	pop    eax
c001b5c8:	6a 00                	push   0x0
c001b5ca:	6a 02                	push   0x2
c001b5cc:	e8 30 d8 ff ff       	call   c0018e01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b5d1:	31 d2                	xor    edx,edx
c001b5d3:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b5da:	89 f9                	mov    ecx,edi
c001b5dc:	89 f8                	mov    eax,edi
c001b5de:	c1 e9 10             	shr    ecx,0x10
c001b5e1:	0f b6 c4             	movzx  eax,ah
c001b5e4:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b5e8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b5ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b5f0:	b9 64 00 00 00       	mov    ecx,0x64
c001b5f5:	89 f0                	mov    eax,esi
c001b5f7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b5fb:	89 f0                	mov    eax,esi
c001b5fd:	0f b6 c4             	movzx  eax,ah
c001b600:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b604:	89 f0                	mov    eax,esi
c001b606:	c1 e8 10             	shr    eax,0x10
c001b609:	f7 f1                	div    ecx
c001b60b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b60f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b613:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b617:	e8 91 d7 ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b61c:	83 c4 10             	add    esp,0x10
c001b61f:	89 c5                	mov    ebp,eax
c001b621:	a8 04                	test   al,0x4
c001b623:	75 6e                	jne    c001b693 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b625:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b629:	31 d2                	xor    edx,edx
c001b62b:	0f b6 c1             	movzx  eax,cl
c001b62e:	b9 0a 00 00 00       	mov    ecx,0xa
c001b633:	f7 f1                	div    ecx
c001b635:	c1 e0 04             	shl    eax,0x4
c001b638:	09 d0                	or     eax,edx
c001b63a:	31 d2                	xor    edx,edx
c001b63c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b640:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b645:	f7 f1                	div    ecx
c001b647:	c1 e0 04             	shl    eax,0x4
c001b64a:	09 d0                	or     eax,edx
c001b64c:	31 d2                	xor    edx,edx
c001b64e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b652:	0f b6 c3             	movzx  eax,bl
c001b655:	f7 f1                	div    ecx
c001b657:	c1 e0 04             	shl    eax,0x4
c001b65a:	09 d0                	or     eax,edx
c001b65c:	31 d2                	xor    edx,edx
c001b65e:	89 c3                	mov    ebx,eax
c001b660:	89 f0                	mov    eax,esi
c001b662:	0f b6 c0             	movzx  eax,al
c001b665:	f7 f1                	div    ecx
c001b667:	c1 e0 04             	shl    eax,0x4
c001b66a:	09 d0                	or     eax,edx
c001b66c:	31 d2                	xor    edx,edx
c001b66e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b672:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b677:	f7 f1                	div    ecx
c001b679:	c1 e0 04             	shl    eax,0x4
c001b67c:	09 d0                	or     eax,edx
c001b67e:	31 d2                	xor    edx,edx
c001b680:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b688:	f7 f1                	div    ecx
c001b68a:	c1 e0 04             	shl    eax,0x4
c001b68d:	09 d0                	or     eax,edx
c001b68f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b693:	83 e5 02             	and    ebp,0x2
c001b696:	75 1e                	jne    c001b6b6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b698:	0f b6 c3             	movzx  eax,bl
c001b69b:	83 f8 0b             	cmp    eax,0xb
c001b69e:	76 10                	jbe    c001b6b0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b6a0:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b6a3:	88 d3                	mov    bl,dl
c001b6a5:	84 d2                	test   dl,dl
c001b6a7:	75 02                	jne    c001b6ab <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b6a9:	b3 0c                	mov    bl,0xc
c001b6ab:	83 cb 80             	or     ebx,0xffffff80
c001b6ae:	eb 06                	jmp    c001b6b6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b6b0:	85 c0                	test   eax,eax
c001b6b2:	75 02                	jne    c001b6b6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b6b4:	b3 0c                	mov    bl,0xc
c001b6b6:	0f b6 db             	movzx  ebx,bl
c001b6b9:	50                   	push   eax
c001b6ba:	50                   	push   eax
c001b6bb:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b6c0:	52                   	push   edx
c001b6c1:	6a 00                	push   0x0
c001b6c3:	e8 39 d7 ff ff       	call   c0018e01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b6c8:	5a                   	pop    edx
c001b6c9:	59                   	pop    ecx
c001b6ca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6cf:	50                   	push   eax
c001b6d0:	6a 02                	push   0x2
c001b6d2:	e8 2a d7 ff ff       	call   c0018e01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b6d7:	5e                   	pop    esi
c001b6d8:	5f                   	pop    edi
c001b6d9:	53                   	push   ebx
c001b6da:	6a 04                	push   0x4
c001b6dc:	e8 20 d7 ff ff       	call   c0018e01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b6e1:	5d                   	pop    ebp
c001b6e2:	58                   	pop    eax
c001b6e3:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b6e8:	52                   	push   edx
c001b6e9:	6a 07                	push   0x7
c001b6eb:	e8 11 d7 ff ff       	call   c0018e01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b6f0:	58                   	pop    eax
c001b6f1:	5a                   	pop    edx
c001b6f2:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b6f7:	50                   	push   eax
c001b6f8:	6a 08                	push   0x8
c001b6fa:	e8 02 d7 ff ff       	call   c0018e01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b6ff:	59                   	pop    ecx
c001b700:	5b                   	pop    ebx
c001b701:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b706:	55                   	push   ebp
c001b707:	6a 09                	push   0x9
c001b709:	e8 f3 d6 ff ff       	call   c0018e01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b70e:	5e                   	pop    esi
c001b70f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b713:	e8 e0 fb ff ff       	call   c001b2f8 <RTC::completeRTCRefresh()>
c001b718:	83 c4 3c             	add    esp,0x3c
c001b71b:	b0 01                	mov    al,0x1
c001b71d:	5b                   	pop    ebx
c001b71e:	5e                   	pop    esi
c001b71f:	5f                   	pop    edi
c001b720:	5d                   	pop    ebp
c001b721:	c3                   	ret    

c001b722 <rtcIRQHandler(regs*, void*)>:
c001b722:	53                   	push   ebx
c001b723:	83 ec 14             	sub    esp,0x14
c001b726:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b72a:	6a 0c                	push   0xc
c001b72c:	e8 7c d6 ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b731:	83 c4 10             	add    esp,0x10
c001b734:	a8 80                	test   al,0x80
c001b736:	74 24                	je     c001b75c <rtcIRQHandler(regs*, void*)+0x3a>
c001b738:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b73f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b746:	66 ff 05 54 fb 02 c0 	inc    WORD PTR ds:0xc002fb54
c001b74d:	75 0d                	jne    c001b75c <rtcIRQHandler(regs*, void*)+0x3a>
c001b74f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b753:	83 c4 08             	add    esp,0x8
c001b756:	5b                   	pop    ebx
c001b757:	e9 9c fb ff ff       	jmp    c001b2f8 <RTC::completeRTCRefresh()>
c001b75c:	83 c4 08             	add    esp,0x8
c001b75f:	5b                   	pop    ebx
c001b760:	c3                   	ret    
c001b761:	90                   	nop

c001b762 <RTC::RTC()>:
c001b762:	83 ec 1c             	sub    esp,0x1c
c001b765:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b769:	83 ec 08             	sub    esp,0x8
c001b76c:	68 2b 5a 02 c0       	push   0xc0025a2b
c001b771:	50                   	push   eax
c001b772:	e8 3f d9 fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001b777:	83 c4 10             	add    esp,0x10
c001b77a:	ba 48 5a 02 c0       	mov    edx,0xc0025a48
c001b77f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b783:	89 10                	mov    DWORD PTR [eax],edx
c001b785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b789:	83 ec 0c             	sub    esp,0xc
c001b78c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b790:	6a 01                	push   0x1
c001b792:	68 22 b7 01 c0       	push   0xc001b722
c001b797:	6a 08                	push   0x8
c001b799:	50                   	push   eax
c001b79a:	e8 61 e2 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b79f:	83 c4 20             	add    esp,0x20
c001b7a2:	89 c2                	mov    edx,eax
c001b7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7a8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b7ae:	fa                   	cli    
c001b7af:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001b7b4:	83 c0 01             	add    eax,0x1
c001b7b7:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c001b7bc:	83 ec 0c             	sub    esp,0xc
c001b7bf:	6a 0b                	push   0xb
c001b7c1:	e8 e7 d5 ff ff       	call   c0018dad <x86ReadCMOS(unsigned char)>
c001b7c6:	83 c4 10             	add    esp,0x10
c001b7c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b7cd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b7d1:	83 c8 10             	or     eax,0x10
c001b7d4:	0f b6 c0             	movzx  eax,al
c001b7d7:	83 ec 08             	sub    esp,0x8
c001b7da:	50                   	push   eax
c001b7db:	6a 0b                	push   0xb
c001b7dd:	e8 1f d6 ff ff       	call   c0018e01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b7e2:	83 c4 10             	add    esp,0x10
c001b7e5:	83 ec 0c             	sub    esp,0xc
c001b7e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7ec:	e8 07 fb ff ff       	call   c001b2f8 <RTC::completeRTCRefresh()>
c001b7f1:	83 c4 10             	add    esp,0x10
c001b7f4:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001b7fc:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001b801:	85 c0                	test   eax,eax
c001b803:	75 01                	jne    c001b806 <RTC::RTC()+0xa4>
c001b805:	fb                   	sti    
c001b806:	90                   	nop
c001b807:	83 c4 1c             	add    esp,0x1c
c001b80a:	c3                   	ret    
c001b80b:	90                   	nop

c001b80c <HalConsoleScroll(int, int)>:
c001b80c:	83 ec 10             	sub    esp,0x10
c001b80f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b817:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b81f:	90                   	nop
c001b820:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b825:	0f 8f e1 00 00 00    	jg     c001b90c <HalConsoleScroll(int, int)+0x100>
c001b82b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b833:	90                   	nop
c001b834:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b83c:	0f 8f be 00 00 00    	jg     c001b900 <HalConsoleScroll(int, int)+0xf4>
c001b842:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b846:	89 d0                	mov    eax,edx
c001b848:	c1 e0 02             	shl    eax,0x2
c001b84b:	01 d0                	add    eax,edx
c001b84d:	c1 e0 05             	shl    eax,0x5
c001b850:	89 c2                	mov    edx,eax
c001b852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b856:	01 d0                	add    eax,edx
c001b858:	89 c2                	mov    edx,eax
c001b85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b85e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b861:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b865:	89 d0                	mov    eax,edx
c001b867:	c1 e0 02             	shl    eax,0x2
c001b86a:	01 d0                	add    eax,edx
c001b86c:	c1 e0 05             	shl    eax,0x5
c001b86f:	89 c2                	mov    edx,eax
c001b871:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b875:	01 d0                	add    eax,edx
c001b877:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b87d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b881:	01 c2                	add    edx,eax
c001b883:	8a 01                	mov    al,BYTE PTR [ecx]
c001b885:	88 02                	mov    BYTE PTR [edx],al
c001b887:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b88c:	75 66                	jne    c001b8f4 <HalConsoleScroll(int, int)+0xe8>
c001b88e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b892:	83 e0 01             	and    eax,0x1
c001b895:	74 39                	je     c001b8d0 <HalConsoleScroll(int, int)+0xc4>
c001b897:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b89b:	83 e0 0f             	and    eax,0xf
c001b89e:	88 c2                	mov    dl,al
c001b8a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8a4:	c1 e0 04             	shl    eax,0x4
c001b8a7:	09 d0                	or     eax,edx
c001b8a9:	88 c1                	mov    cl,al
c001b8ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8af:	89 d0                	mov    eax,edx
c001b8b1:	c1 e0 02             	shl    eax,0x2
c001b8b4:	01 d0                	add    eax,edx
c001b8b6:	c1 e0 05             	shl    eax,0x5
c001b8b9:	89 c2                	mov    edx,eax
c001b8bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8bf:	01 d0                	add    eax,edx
c001b8c1:	89 c2                	mov    edx,eax
c001b8c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8c7:	01 d0                	add    eax,edx
c001b8c9:	88 ca                	mov    dl,cl
c001b8cb:	88 10                	mov    BYTE PTR [eax],dl
c001b8cd:	eb 25                	jmp    c001b8f4 <HalConsoleScroll(int, int)+0xe8>
c001b8cf:	90                   	nop
c001b8d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8d4:	89 d0                	mov    eax,edx
c001b8d6:	c1 e0 02             	shl    eax,0x2
c001b8d9:	01 d0                	add    eax,edx
c001b8db:	c1 e0 05             	shl    eax,0x5
c001b8de:	89 c2                	mov    edx,eax
c001b8e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8e4:	01 d0                	add    eax,edx
c001b8e6:	89 c2                	mov    edx,eax
c001b8e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8ec:	01 d0                	add    eax,edx
c001b8ee:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b8f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b8f4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b8f9:	e9 36 ff ff ff       	jmp    c001b834 <HalConsoleScroll(int, int)+0x28>
c001b8fe:	66 90                	xchg   ax,ax
c001b900:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b905:	e9 16 ff ff ff       	jmp    c001b820 <HalConsoleScroll(int, int)+0x14>
c001b90a:	66 90                	xchg   ax,ax
c001b90c:	90                   	nop
c001b90d:	83 c4 10             	add    esp,0x10
c001b910:	c3                   	ret    
c001b911:	8d 76 00             	lea    esi,[esi+0x0]

c001b914 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b914:	83 ec 14             	sub    esp,0x14
c001b917:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b91b:	88 04 24             	mov    BYTE PTR [esp],al
c001b91e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b921:	0f b6 c0             	movzx  eax,al
c001b924:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b928:	89 d1                	mov    ecx,edx
c001b92a:	83 e1 0f             	and    ecx,0xf
c001b92d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b931:	c1 e2 04             	shl    edx,0x4
c001b934:	0f b6 d2             	movzx  edx,dl
c001b937:	09 ca                	or     edx,ecx
c001b939:	c1 e2 08             	shl    edx,0x8
c001b93c:	09 d0                	or     eax,edx
c001b93e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b943:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b94b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b94f:	89 d0                	mov    eax,edx
c001b951:	c1 e0 02             	shl    eax,0x2
c001b954:	01 d0                	add    eax,edx
c001b956:	c1 e0 04             	shl    eax,0x4
c001b959:	89 c2                	mov    edx,eax
c001b95b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b95f:	01 d0                	add    eax,edx
c001b961:	01 c0                	add    eax,eax
c001b963:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b967:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b96b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001b970:	66 89 02             	mov    WORD PTR [edx],ax
c001b973:	90                   	nop
c001b974:	83 c4 14             	add    esp,0x14
c001b977:	c3                   	ret    

c001b978 <HalConsoleCursorUpdate(int, int)>:
c001b978:	83 ec 20             	sub    esp,0x20
c001b97b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b97f:	89 c2                	mov    edx,eax
c001b981:	c1 e2 02             	shl    edx,0x2
c001b984:	01 d0                	add    eax,edx
c001b986:	c1 e0 04             	shl    eax,0x4
c001b989:	89 c2                	mov    edx,eax
c001b98b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b98f:	01 d0                	add    eax,edx
c001b991:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b996:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b99d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b9a2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b9a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9aa:	ee                   	out    dx,al
c001b9ab:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b9b0:	0f b6 c0             	movzx  eax,al
c001b9b3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b9ba:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b9be:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b9c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9c6:	ee                   	out    dx,al
c001b9c7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b9ce:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b9d3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b9d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9db:	ee                   	out    dx,al
c001b9dc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b9e1:	c1 e8 08             	shr    eax,0x8
c001b9e4:	0f b6 c0             	movzx  eax,al
c001b9e7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b9ee:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b9f2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b9f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b9fa:	ee                   	out    dx,al
c001b9fb:	90                   	nop
c001b9fc:	83 c4 20             	add    esp,0x20
c001b9ff:	c3                   	ret    

c001ba00 <FAT::getName()>:
c001ba00:	b8 7c 5a 02 c0       	mov    eax,0xc0025a7c
c001ba05:	c3                   	ret    
c001ba06:	66 90                	xchg   ax,ax

c001ba08 <FAT::tell(void*, unsigned long long*)>:
c001ba08:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ba0d:	75 09                	jne    c001ba18 <FAT::tell(void*, unsigned long long*)+0x10>
c001ba0f:	b8 04 00 00 00       	mov    eax,0x4
c001ba14:	c3                   	ret    
c001ba15:	8d 76 00             	lea    esi,[esi+0x0]
c001ba18:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba1d:	75 09                	jne    c001ba28 <FAT::tell(void*, unsigned long long*)+0x20>
c001ba1f:	b8 04 00 00 00       	mov    eax,0x4
c001ba24:	c3                   	ret    
c001ba25:	8d 76 00             	lea    esi,[esi+0x0]
c001ba28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba2c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ba2f:	ba 00 00 00 00       	mov    edx,0x0
c001ba34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ba38:	89 01                	mov    DWORD PTR [ecx],eax
c001ba3a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ba3d:	b8 00 00 00 00       	mov    eax,0x0
c001ba42:	c3                   	ret    
c001ba43:	90                   	nop

c001ba44 <FAT::stat(void*, unsigned long long*)>:
c001ba44:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ba49:	75 09                	jne    c001ba54 <FAT::stat(void*, unsigned long long*)+0x10>
c001ba4b:	b8 04 00 00 00       	mov    eax,0x4
c001ba50:	c3                   	ret    
c001ba51:	8d 76 00             	lea    esi,[esi+0x0]
c001ba54:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba59:	75 09                	jne    c001ba64 <FAT::stat(void*, unsigned long long*)+0x20>
c001ba5b:	b8 04 00 00 00       	mov    eax,0x4
c001ba60:	c3                   	ret    
c001ba61:	8d 76 00             	lea    esi,[esi+0x0]
c001ba64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ba6b:	ba 00 00 00 00       	mov    edx,0x0
c001ba70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ba74:	89 01                	mov    DWORD PTR [ecx],eax
c001ba76:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ba79:	b8 00 00 00 00       	mov    eax,0x0
c001ba7e:	c3                   	ret    
c001ba7f:	90                   	nop

c001ba80 <FAT::~FAT()>:
c001ba80:	83 ec 0c             	sub    esp,0xc
c001ba83:	ba c8 5a 02 c0       	mov    edx,0xc0025ac8
c001ba88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8c:	89 10                	mov    DWORD PTR [eax],edx
c001ba8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba92:	83 ec 0c             	sub    esp,0xc
c001ba95:	50                   	push   eax
c001ba96:	e8 51 c3 fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001ba9b:	83 c4 10             	add    esp,0x10
c001ba9e:	90                   	nop
c001ba9f:	83 c4 0c             	add    esp,0xc
c001baa2:	c3                   	ret    
c001baa3:	90                   	nop

c001baa4 <FAT::~FAT()>:
c001baa4:	83 ec 0c             	sub    esp,0xc
c001baa7:	83 ec 0c             	sub    esp,0xc
c001baaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001baae:	e8 cd ff ff ff       	call   c001ba80 <FAT::~FAT()>
c001bab3:	83 c4 10             	add    esp,0x10
c001bab6:	83 ec 08             	sub    esp,0x8
c001bab9:	6a 08                	push   0x8
c001babb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001babf:	e8 25 19 ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001bac4:	83 c4 10             	add    esp,0x10
c001bac7:	83 c4 0c             	add    esp,0xc
c001baca:	c3                   	ret    
c001bacb:	90                   	nop

c001bacc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001bacc:	83 ec 1c             	sub    esp,0x1c
c001bacf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001bad6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001badb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001badf:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001bae6:	83 f8 ff             	cmp    eax,0xffffffff
c001bae9:	75 35                	jne    c001bb20 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001baeb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001baef:	88 c2                	mov    dl,al
c001baf1:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001baf6:	01 d0                	add    eax,edx
c001baf8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bafc:	8b 15 60 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb60
c001bb02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bb06:	89 14 85 80 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0480],edx
c001bb0d:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bb12:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bb16:	89 14 85 00 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0400],edx
c001bb1d:	eb 19                	jmp    c001bb38 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001bb1f:	90                   	nop
c001bb20:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bb24:	88 c2                	mov    dl,al
c001bb26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bb2a:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001bb31:	01 d0                	add    eax,edx
c001bb33:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bb37:	90                   	nop
c001bb38:	83 ec 04             	sub    esp,0x4
c001bb3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bb3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bb43:	8d 44 24 15          	lea    eax,[esp+0x15]
c001bb47:	50                   	push   eax
c001bb48:	e8 6b 96 fe ff       	call   c00051b8 <f_getlabel>
c001bb4d:	83 c4 10             	add    esp,0x10
c001bb50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb54:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bb59:	75 09                	jne    c001bb64 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001bb5b:	b8 00 00 00 00       	mov    eax,0x0
c001bb60:	eb 0a                	jmp    c001bb6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001bb62:	66 90                	xchg   ax,ax
c001bb64:	b8 01 00 00 00       	mov    eax,0x1
c001bb69:	8d 76 00             	lea    esi,[esi+0x0]
c001bb6c:	83 c4 1c             	add    esp,0x1c
c001bb6f:	c3                   	ret    

c001bb70 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001bb70:	57                   	push   edi
c001bb71:	83 ec 58             	sub    esp,0x58
c001bb74:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001bb7c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bb80:	b8 00 00 00 00       	mov    eax,0x0
c001bb85:	b9 0f 00 00 00       	mov    ecx,0xf
c001bb8a:	fc                   	cld    
c001bb8b:	89 d7                	mov    edi,edx
c001bb8d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bb8f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bb93:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001bb9a:	83 f8 ff             	cmp    eax,0xffffffff
c001bb9d:	75 35                	jne    c001bbd4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001bb9f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bba3:	88 c2                	mov    dl,al
c001bba5:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bbaa:	01 d0                	add    eax,edx
c001bbac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bbb0:	8b 15 60 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb60
c001bbb6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bbba:	89 14 85 80 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0480],edx
c001bbc1:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bbc6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001bbca:	89 14 85 00 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0400],edx
c001bbd1:	eb 19                	jmp    c001bbec <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001bbd3:	90                   	nop
c001bbd4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bbd8:	88 c2                	mov    dl,al
c001bbda:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bbde:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001bbe5:	01 d0                	add    eax,edx
c001bbe7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bbeb:	90                   	nop
c001bbec:	83 ec 08             	sub    esp,0x8
c001bbef:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001bbf3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bbf7:	50                   	push   eax
c001bbf8:	e8 43 4c fe ff       	call   c0000840 <strcat>
c001bbfd:	83 c4 10             	add    esp,0x10
c001bc00:	83 ec 0c             	sub    esp,0xc
c001bc03:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc07:	50                   	push   eax
c001bc08:	e8 fc 96 fe ff       	call   c0005309 <f_setlabel>
c001bc0d:	83 c4 10             	add    esp,0x10
c001bc10:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bc14:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001bc19:	75 09                	jne    c001bc24 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001bc1b:	b8 00 00 00 00       	mov    eax,0x0
c001bc20:	eb 0a                	jmp    c001bc2c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001bc22:	66 90                	xchg   ax,ax
c001bc24:	b8 01 00 00 00       	mov    eax,0x1
c001bc29:	8d 76 00             	lea    esi,[esi+0x0]
c001bc2c:	83 c4 58             	add    esp,0x58
c001bc2f:	5f                   	pop    edi
c001bc30:	c3                   	ret    
c001bc31:	90                   	nop
c001bc32:	66 90                	xchg   ax,ax

c001bc34 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001bc34:	83 ec 2c             	sub    esp,0x2c
c001bc37:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001bc3f:	83 ec 08             	sub    esp,0x8
c001bc42:	68 a0 5a 02 c0       	push   0xc0025aa0
c001bc47:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bc4b:	e8 00 4b fe ff       	call   c0000750 <strcmp>
c001bc50:	83 c4 10             	add    esp,0x10
c001bc53:	85 c0                	test   eax,eax
c001bc55:	0f 94 c0             	sete   al
c001bc58:	0f b6 c0             	movzx  eax,al
c001bc5b:	85 c0                	test   eax,eax
c001bc5d:	74 0d                	je     c001bc6c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001bc5f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bc67:	e9 c0 00 00 00       	jmp    c001bd2c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bc6c:	83 ec 08             	sub    esp,0x8
c001bc6f:	68 92 5a 02 c0       	push   0xc0025a92
c001bc74:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bc78:	e8 d3 4a fe ff       	call   c0000750 <strcmp>
c001bc7d:	83 c4 10             	add    esp,0x10
c001bc80:	85 c0                	test   eax,eax
c001bc82:	0f 94 c0             	sete   al
c001bc85:	0f b6 c0             	movzx  eax,al
c001bc88:	85 c0                	test   eax,eax
c001bc8a:	74 10                	je     c001bc9c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001bc8c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bc94:	e9 93 00 00 00       	jmp    c001bd2c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bc99:	8d 76 00             	lea    esi,[esi+0x0]
c001bc9c:	83 ec 08             	sub    esp,0x8
c001bc9f:	68 98 5a 02 c0       	push   0xc0025a98
c001bca4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bca8:	e8 a3 4a fe ff       	call   c0000750 <strcmp>
c001bcad:	83 c4 10             	add    esp,0x10
c001bcb0:	85 c0                	test   eax,eax
c001bcb2:	0f 94 c0             	sete   al
c001bcb5:	0f b6 c0             	movzx  eax,al
c001bcb8:	85 c0                	test   eax,eax
c001bcba:	74 0c                	je     c001bcc8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001bcbc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bcc4:	eb 66                	jmp    c001bd2c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bcc6:	66 90                	xchg   ax,ax
c001bcc8:	83 ec 08             	sub    esp,0x8
c001bccb:	68 1c 2a 02 c0       	push   0xc0022a1c
c001bcd0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bcd4:	e8 77 4a fe ff       	call   c0000750 <strcmp>
c001bcd9:	83 c4 10             	add    esp,0x10
c001bcdc:	85 c0                	test   eax,eax
c001bcde:	0f 94 c0             	sete   al
c001bce1:	0f b6 c0             	movzx  eax,al
c001bce4:	85 c0                	test   eax,eax
c001bce6:	74 0c                	je     c001bcf4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001bce8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001bcf0:	eb 3a                	jmp    c001bd2c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bcf2:	66 90                	xchg   ax,ax
c001bcf4:	83 ec 08             	sub    esp,0x8
c001bcf7:	68 9e 5a 02 c0       	push   0xc0025a9e
c001bcfc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bd00:	e8 4b 4a fe ff       	call   c0000750 <strcmp>
c001bd05:	83 c4 10             	add    esp,0x10
c001bd08:	85 c0                	test   eax,eax
c001bd0a:	0f 94 c0             	sete   al
c001bd0d:	0f b6 c0             	movzx  eax,al
c001bd10:	85 c0                	test   eax,eax
c001bd12:	74 0c                	je     c001bd20 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001bd14:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001bd1c:	eb 0e                	jmp    c001bd2c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bd1e:	66 90                	xchg   ax,ax
c001bd20:	b8 08 00 00 00       	mov    eax,0x8
c001bd25:	e9 ea 00 00 00       	jmp    c001be14 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bd2a:	66 90                	xchg   ax,ax
c001bd2c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001bd33:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001bd38:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd3c:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001bd43:	83 f8 ff             	cmp    eax,0xffffffff
c001bd46:	75 34                	jne    c001bd7c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001bd48:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bd4c:	88 c2                	mov    dl,al
c001bd4e:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bd53:	01 d0                	add    eax,edx
c001bd55:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bd59:	8b 15 60 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb60
c001bd5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd63:	89 14 85 80 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0480],edx
c001bd6a:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bd6f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bd73:	89 14 85 00 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0400],edx
c001bd7a:	eb 18                	jmp    c001bd94 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001bd7c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bd80:	88 c2                	mov    dl,al
c001bd82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd86:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001bd8d:	01 d0                	add    eax,edx
c001bd8f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bd93:	90                   	nop
c001bd94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd98:	88 04 24             	mov    BYTE PTR [esp],al
c001bd9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bd9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bda3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bdab:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001bdb0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bdb8:	83 ec 0c             	sub    esp,0xc
c001bdbb:	68 00 20 00 00       	push   0x2000
c001bdc0:	e8 ca 3d ff ff       	call   c000fb8f <malloc>
c001bdc5:	83 c4 10             	add    esp,0x10
c001bdc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bdcc:	68 00 20 00 00       	push   0x2000
c001bdd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bdd5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bdd9:	50                   	push   eax
c001bdda:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001bdde:	50                   	push   eax
c001bddf:	e8 22 98 fe ff       	call   c0005606 <f_mkfs>
c001bde4:	83 c4 10             	add    esp,0x10
c001bde7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bdeb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bdf0:	75 0a                	jne    c001bdfc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001bdf2:	b8 00 00 00 00       	mov    eax,0x0
c001bdf7:	eb 1b                	jmp    c001be14 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bdf9:	8d 76 00             	lea    esi,[esi+0x0]
c001bdfc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001be01:	75 09                	jne    c001be0c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001be03:	b8 09 00 00 00       	mov    eax,0x9
c001be08:	eb 0a                	jmp    c001be14 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001be0a:	66 90                	xchg   ax,ax
c001be0c:	b8 01 00 00 00       	mov    eax,0x1
c001be11:	8d 76 00             	lea    esi,[esi+0x0]
c001be14:	83 c4 2c             	add    esp,0x2c
c001be17:	c3                   	ret    

c001be18 <FAT::tryMount(LogicalDisk*, int)>:
c001be18:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001be1e:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001be23:	83 f8 14             	cmp    eax,0x14
c001be26:	75 18                	jne    c001be40 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001be28:	83 ec 0c             	sub    esp,0xc
c001be2b:	68 a4 5a 02 c0       	push   0xc0025aa4
c001be30:	e8 b1 41 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001be35:	83 c4 10             	add    esp,0x10
c001be38:	b0 00                	mov    al,0x0
c001be3a:	e9 ed 01 00 00       	jmp    c001c02c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001be3f:	90                   	nop
c001be40:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001be47:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001be4d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001be53:	3d 00 02 00 00       	cmp    eax,0x200
c001be58:	74 0a                	je     c001be64 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001be5a:	b0 00                	mov    al,0x0
c001be5c:	e9 cb 01 00 00       	jmp    c001c02c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001be61:	8d 76 00             	lea    esi,[esi+0x0]
c001be64:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001be6c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001be73:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001be7a:	83 f8 ff             	cmp    eax,0xffffffff
c001be7d:	74 09                	je     c001be88 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001be7f:	b0 01                	mov    al,0x1
c001be81:	e9 a6 01 00 00       	jmp    c001c02c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001be86:	66 90                	xchg   ax,ax
c001be88:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001be92:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001be9a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001bea1:	88 c2                	mov    dl,al
c001bea3:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bea8:	01 d0                	add    eax,edx
c001beaa:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001beb1:	8b 15 60 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb60
c001beb7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bebe:	89 14 85 80 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0480],edx
c001bec5:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001beca:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001bed1:	89 14 85 00 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0400],edx
c001bed8:	83 ec 0c             	sub    esp,0xc
c001bedb:	68 34 02 00 00       	push   0x234
c001bee0:	e8 aa 3c ff ff       	call   c000fb8f <malloc>
c001bee5:	83 c4 10             	add    esp,0x10
c001bee8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001beef:	83 ec 04             	sub    esp,0x4
c001bef2:	6a 00                	push   0x0
c001bef4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001befb:	50                   	push   eax
c001befc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bf03:	e8 d9 7e fe ff       	call   c0003de1 <f_mount>
c001bf08:	83 c4 10             	add    esp,0x10
c001bf0b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bf12:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001bf1a:	74 1c                	je     c001bf38 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001bf1c:	83 ec 0c             	sub    esp,0xc
c001bf1f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bf26:	e8 84 3c ff ff       	call   c000fbaf <rfree>
c001bf2b:	83 c4 10             	add    esp,0x10
c001bf2e:	b0 00                	mov    al,0x0
c001bf30:	e9 f7 00 00 00       	jmp    c001c02c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bf35:	8d 76 00             	lea    esi,[esi+0x0]
c001bf38:	83 ec 04             	sub    esp,0x4
c001bf3b:	68 00 01 00 00       	push   0x100
c001bf40:	6a 00                	push   0x0
c001bf42:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bf49:	50                   	push   eax
c001bf4a:	e8 a1 45 fe ff       	call   c00004f0 <memset>
c001bf4f:	83 c4 10             	add    esp,0x10
c001bf52:	83 ec 08             	sub    esp,0x8
c001bf55:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bf5c:	50                   	push   eax
c001bf5d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bf64:	50                   	push   eax
c001bf65:	e8 d6 48 fe ff       	call   c0000840 <strcat>
c001bf6a:	83 c4 10             	add    esp,0x10
c001bf6d:	83 ec 08             	sub    esp,0x8
c001bf70:	68 b2 5a 02 c0       	push   0xc0025ab2
c001bf75:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bf7c:	50                   	push   eax
c001bf7d:	e8 be 48 fe ff       	call   c0000840 <strcat>
c001bf82:	83 c4 10             	add    esp,0x10
c001bf85:	83 ec 04             	sub    esp,0x4
c001bf88:	6a 01                	push   0x1
c001bf8a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001bf91:	50                   	push   eax
c001bf92:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf96:	50                   	push   eax
c001bf97:	e8 a7 7e fe ff       	call   c0003e43 <f_open>
c001bf9c:	83 c4 10             	add    esp,0x10
c001bf9f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bfa6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001bfad:	85 c0                	test   eax,eax
c001bfaf:	74 0b                	je     c001bfbc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bfb1:	78 31                	js     c001bfe4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bfb3:	83 e8 04             	sub    eax,0x4
c001bfb6:	83 f8 01             	cmp    eax,0x1
c001bfb9:	77 29                	ja     c001bfe4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bfbb:	90                   	nop
c001bfbc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001bfc4:	83 ec 0c             	sub    esp,0xc
c001bfc7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bfcb:	50                   	push   eax
c001bfcc:	e8 41 86 fe ff       	call   c0004612 <f_close>
c001bfd1:	83 c4 10             	add    esp,0x10
c001bfd4:	90                   	nop
c001bfd5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001bfdd:	85 c0                	test   eax,eax
c001bfdf:	74 43                	je     c001c024 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001bfe1:	eb 31                	jmp    c001c014 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bfe3:	90                   	nop
c001bfe4:	83 ec 0c             	sub    esp,0xc
c001bfe7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bfee:	e8 bc 3b ff ff       	call   c000fbaf <rfree>
c001bff3:	83 c4 10             	add    esp,0x10
c001bff6:	83 ec 04             	sub    esp,0x4
c001bff9:	6a 00                	push   0x0
c001bffb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c002:	50                   	push   eax
c001c003:	6a 00                	push   0x0
c001c005:	e8 d7 7d fe ff       	call   c0003de1 <f_mount>
c001c00a:	83 c4 10             	add    esp,0x10
c001c00d:	b0 00                	mov    al,0x0
c001c00f:	eb 1b                	jmp    c001c02c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c011:	8d 76 00             	lea    esi,[esi+0x0]
c001c014:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001c019:	83 c0 01             	add    eax,0x1
c001c01c:	a3 60 fb 02 c0       	mov    ds:0xc002fb60,eax
c001c021:	8d 76 00             	lea    esi,[esi+0x0]
c001c024:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001c02b:	90                   	nop
c001c02c:	81 c4 4c 03 00 00    	add    esp,0x34c
c001c032:	c3                   	ret    
c001c033:	90                   	nop

c001c034 <FAT::allocateSwapfile(char const*, int)>:
c001c034:	55                   	push   ebp
c001c035:	57                   	push   edi
c001c036:	56                   	push   esi
c001c037:	53                   	push   ebx
c001c038:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001c03e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001c049:	83 ec 0c             	sub    esp,0xc
c001c04c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001c053:	e8 37 3b ff ff       	call   c000fb8f <malloc>
c001c058:	83 c4 10             	add    esp,0x10
c001c05b:	89 c7                	mov    edi,eax
c001c05d:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001c062:	83 ec 04             	sub    esp,0x4
c001c065:	50                   	push   eax
c001c066:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001c06d:	57                   	push   edi
c001c06e:	e8 17 c1 fe ff       	call   c000818a <File::File(char const*, Process*)>
c001c073:	83 c4 10             	add    esp,0x10
c001c076:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001c07d:	83 ec 04             	sub    esp,0x4
c001c080:	8d 44 24 13          	lea    eax,[esp+0x13]
c001c084:	50                   	push   eax
c001c085:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c089:	50                   	push   eax
c001c08a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c091:	e8 14 c4 fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001c096:	83 c4 10             	add    esp,0x10
c001c099:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c0a0:	c1 e0 14             	shl    eax,0x14
c001c0a3:	89 c7                	mov    edi,eax
c001c0a5:	89 c5                	mov    ebp,eax
c001c0a7:	c1 fd 1f             	sar    ebp,0x1f
c001c0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0b2:	89 f9                	mov    ecx,edi
c001c0b4:	31 c1                	xor    ecx,eax
c001c0b6:	89 cb                	mov    ebx,ecx
c001c0b8:	89 e9                	mov    ecx,ebp
c001c0ba:	31 d1                	xor    ecx,edx
c001c0bc:	89 ce                	mov    esi,ecx
c001c0be:	89 f0                	mov    eax,esi
c001c0c0:	09 d8                	or     eax,ebx
c001c0c2:	0f 84 9c 00 00 00    	je     c001c164 <FAT::allocateSwapfile(char const*, int)+0x130>
c001c0c8:	83 ec 0c             	sub    esp,0xc
c001c0cb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c0d2:	e8 9f c2 fe ff       	call   c0008376 <File::unlink()>
c001c0d7:	83 c4 10             	add    esp,0x10
c001c0da:	83 ec 08             	sub    esp,0x8
c001c0dd:	6a 12                	push   0x12
c001c0df:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c0e6:	e8 bd c0 fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001c0eb:	83 c4 10             	add    esp,0x10
c001c0ee:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c0f5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c0fb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c102:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c109:	c1 e0 14             	shl    eax,0x14
c001c10c:	83 ec 04             	sub    esp,0x4
c001c10f:	6a 01                	push   0x1
c001c111:	50                   	push   eax
c001c112:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001c119:	e8 7b 93 fe ff       	call   c0005499 <f_expand>
c001c11e:	83 c4 10             	add    esp,0x10
c001c121:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c128:	8b 00                	mov    eax,DWORD PTR [eax]
c001c12a:	83 c0 10             	add    eax,0x10
c001c12d:	8b 00                	mov    eax,DWORD PTR [eax]
c001c12f:	83 ec 0c             	sub    esp,0xc
c001c132:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c136:	52                   	push   edx
c001c137:	8d 54 24 30          	lea    edx,[esp+0x30]
c001c13b:	52                   	push   edx
c001c13c:	6a 00                	push   0x0
c001c13e:	68 00 04 00 00       	push   0x400
c001c143:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c14a:	ff d0                	call   eax
c001c14c:	83 c4 20             	add    esp,0x20
c001c14f:	83 ec 0c             	sub    esp,0xc
c001c152:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c159:	e8 a8 c0 fe ff       	call   c0008206 <File::close()>
c001c15e:	83 c4 10             	add    esp,0x10
c001c161:	8d 76 00             	lea    esi,[esi+0x0]
c001c164:	83 ec 08             	sub    esp,0x8
c001c167:	6a 01                	push   0x1
c001c169:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c170:	e8 33 c0 fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001c175:	83 c4 10             	add    esp,0x10
c001c178:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c17f:	8b 00                	mov    eax,DWORD PTR [eax]
c001c181:	83 c0 0c             	add    eax,0xc
c001c184:	8b 00                	mov    eax,DWORD PTR [eax]
c001c186:	83 ec 0c             	sub    esp,0xc
c001c189:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c18d:	52                   	push   edx
c001c18e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001c192:	52                   	push   edx
c001c193:	6a 00                	push   0x0
c001c195:	6a 04                	push   0x4
c001c197:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c19e:	ff d0                	call   eax
c001c1a0:	83 c4 20             	add    esp,0x20
c001c1a3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c1aa:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c1b0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c1b7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001c1be:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001c1c1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001c1c8:	83 ec 0c             	sub    esp,0xc
c001c1cb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c1d2:	e8 2f c0 fe ff       	call   c0008206 <File::close()>
c001c1d7:	83 c4 10             	add    esp,0x10
c001c1da:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001c1e1:	ba 00 00 00 00       	mov    edx,0x0
c001c1e6:	81 c4 3c 04 00 00    	add    esp,0x43c
c001c1ec:	5b                   	pop    ebx
c001c1ed:	5e                   	pop    esi
c001c1ee:	5f                   	pop    edi
c001c1ef:	5d                   	pop    ebp
c001c1f0:	c3                   	ret    
c001c1f1:	90                   	nop
c001c1f2:	66 90                	xchg   ax,ax

c001c1f4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001c1f4:	57                   	push   edi
c001c1f5:	56                   	push   esi
c001c1f6:	53                   	push   ebx
c001c1f7:	81 ec 50 02 00 00    	sub    esp,0x250
c001c1fd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001c205:	74 0d                	je     c001c214 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001c207:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001c20f:	75 0f                	jne    c001c220 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c211:	8d 76 00             	lea    esi,[esi+0x0]
c001c214:	b8 04 00 00 00       	mov    eax,0x4
c001c219:	e9 3a 01 00 00       	jmp    c001c358 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c21e:	66 90                	xchg   ax,ax
c001c220:	83 ec 08             	sub    esp,0x8
c001c223:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c22a:	50                   	push   eax
c001c22b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c232:	e8 a8 86 fe ff       	call   c00048df <f_readdir>
c001c237:	83 c4 10             	add    esp,0x10
c001c23a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c241:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c248:	83 ec 0c             	sub    esp,0xc
c001c24b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c252:	83 c0 16             	add    eax,0x16
c001c255:	50                   	push   eax
c001c256:	e8 15 43 fe ff       	call   c0000570 <strlen>
c001c25b:	83 c4 10             	add    esp,0x10
c001c25e:	ba 00 00 00 00       	mov    edx,0x0
c001c263:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c267:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c26b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c272:	0f b6 c0             	movzx  eax,al
c001c275:	83 e0 10             	and    eax,0x10
c001c278:	74 0a                	je     c001c284 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c27a:	b8 02 00 00 00       	mov    eax,0x2
c001c27f:	eb 0b                	jmp    c001c28c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c281:	8d 76 00             	lea    esi,[esi+0x0]
c001c284:	b8 01 00 00 00       	mov    eax,0x1
c001c289:	8d 76 00             	lea    esi,[esi+0x0]
c001c28c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c290:	83 ec 08             	sub    esp,0x8
c001c293:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c29a:	83 c0 16             	add    eax,0x16
c001c29d:	50                   	push   eax
c001c29e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c2a2:	83 c0 10             	add    eax,0x10
c001c2a5:	50                   	push   eax
c001c2a6:	e8 95 43 fe ff       	call   c0000640 <strcpy>
c001c2ab:	83 c4 10             	add    esp,0x10
c001c2ae:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c2b5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c2bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c2c0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c2c7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c2ce:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c2d5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c2dc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c2e3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c2ea:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c2f1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c2f8:	89 c6                	mov    esi,eax
c001c2fa:	89 d7                	mov    edi,edx
c001c2fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c2fe:	89 c8                	mov    eax,ecx
c001c300:	89 fa                	mov    edx,edi
c001c302:	89 f3                	mov    ebx,esi
c001c304:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c30b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c312:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c319:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c320:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c326:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c32d:	0f be c0             	movsx  eax,al
c001c330:	85 c0                	test   eax,eax
c001c332:	75 08                	jne    c001c33c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c334:	b8 07 00 00 00       	mov    eax,0x7
c001c339:	eb 1d                	jmp    c001c358 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c33b:	90                   	nop
c001c33c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c343:	85 c0                	test   eax,eax
c001c345:	75 09                	jne    c001c350 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c347:	b8 00 00 00 00       	mov    eax,0x0
c001c34c:	eb 0a                	jmp    c001c358 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c34e:	66 90                	xchg   ax,ax
c001c350:	b8 01 00 00 00       	mov    eax,0x1
c001c355:	8d 76 00             	lea    esi,[esi+0x0]
c001c358:	81 c4 50 02 00 00    	add    esp,0x250
c001c35e:	5b                   	pop    ebx
c001c35f:	5e                   	pop    esi
c001c360:	5f                   	pop    edi
c001c361:	c3                   	ret    
c001c362:	66 90                	xchg   ax,ax

c001c364 <FAT::read(void*, unsigned long, void*, int*)>:
c001c364:	83 ec 1c             	sub    esp,0x1c
c001c367:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c36c:	74 0a                	je     c001c378 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c36e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c373:	75 0b                	jne    c001c380 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c375:	8d 76 00             	lea    esi,[esi+0x0]
c001c378:	b8 04 00 00 00       	mov    eax,0x4
c001c37d:	eb 41                	jmp    c001c3c0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c37f:	90                   	nop
c001c380:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c384:	50                   	push   eax
c001c385:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c389:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c38d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c391:	e8 70 7d fe ff       	call   c0004106 <f_read>
c001c396:	83 c4 10             	add    esp,0x10
c001c399:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c39d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3a1:	89 c2                	mov    edx,eax
c001c3a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c3a7:	89 10                	mov    DWORD PTR [eax],edx
c001c3a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3ad:	85 c0                	test   eax,eax
c001c3af:	75 07                	jne    c001c3b8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c3b1:	b8 00 00 00 00       	mov    eax,0x0
c001c3b6:	eb 08                	jmp    c001c3c0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c3b8:	b8 01 00 00 00       	mov    eax,0x1
c001c3bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c3c0:	83 c4 1c             	add    esp,0x1c
c001c3c3:	c3                   	ret    

c001c3c4 <FAT::write(void*, unsigned long, void*, int*)>:
c001c3c4:	83 ec 1c             	sub    esp,0x1c
c001c3c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c3cc:	74 0a                	je     c001c3d8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c3ce:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c3d3:	75 0b                	jne    c001c3e0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c3d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3d8:	b8 04 00 00 00       	mov    eax,0x4
c001c3dd:	eb 41                	jmp    c001c420 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c3df:	90                   	nop
c001c3e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c3e4:	50                   	push   eax
c001c3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c3ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c3f1:	e8 0f 7f fe ff       	call   c0004305 <f_write>
c001c3f6:	83 c4 10             	add    esp,0x10
c001c3f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c401:	89 c2                	mov    edx,eax
c001c403:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c407:	89 10                	mov    DWORD PTR [eax],edx
c001c409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c40d:	85 c0                	test   eax,eax
c001c40f:	75 07                	jne    c001c418 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c411:	b8 00 00 00 00       	mov    eax,0x0
c001c416:	eb 08                	jmp    c001c420 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c418:	b8 01 00 00 00       	mov    eax,0x1
c001c41d:	8d 76 00             	lea    esi,[esi+0x0]
c001c420:	83 c4 1c             	add    esp,0x1c
c001c423:	c3                   	ret    

c001c424 <FAT::close(void*)>:
c001c424:	83 ec 1c             	sub    esp,0x1c
c001c427:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c42c:	75 0a                	jne    c001c438 <FAT::close(void*)+0x14>
c001c42e:	b8 04 00 00 00       	mov    eax,0x4
c001c433:	eb 3f                	jmp    c001c474 <FAT::close(void*)+0x50>
c001c435:	8d 76 00             	lea    esi,[esi+0x0]
c001c438:	83 ec 0c             	sub    esp,0xc
c001c43b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c43f:	e8 ce 81 fe ff       	call   c0004612 <f_close>
c001c444:	83 c4 10             	add    esp,0x10
c001c447:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c44b:	83 ec 0c             	sub    esp,0xc
c001c44e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c452:	e8 48 37 ff ff       	call   c000fb9f <free>
c001c457:	83 c4 10             	add    esp,0x10
c001c45a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c45e:	85 c0                	test   eax,eax
c001c460:	75 0a                	jne    c001c46c <FAT::close(void*)+0x48>
c001c462:	b8 00 00 00 00       	mov    eax,0x0
c001c467:	eb 0b                	jmp    c001c474 <FAT::close(void*)+0x50>
c001c469:	8d 76 00             	lea    esi,[esi+0x0]
c001c46c:	b8 01 00 00 00       	mov    eax,0x1
c001c471:	8d 76 00             	lea    esi,[esi+0x0]
c001c474:	83 c4 1c             	add    esp,0x1c
c001c477:	c3                   	ret    

c001c478 <FAT::closeDir(void*)>:
c001c478:	83 ec 1c             	sub    esp,0x1c
c001c47b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c480:	75 0a                	jne    c001c48c <FAT::closeDir(void*)+0x14>
c001c482:	b8 04 00 00 00       	mov    eax,0x4
c001c487:	eb 3f                	jmp    c001c4c8 <FAT::closeDir(void*)+0x50>
c001c489:	8d 76 00             	lea    esi,[esi+0x0]
c001c48c:	83 ec 0c             	sub    esp,0xc
c001c48f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c493:	e8 25 84 fe ff       	call   c00048bd <f_closedir>
c001c498:	83 c4 10             	add    esp,0x10
c001c49b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c49f:	83 ec 0c             	sub    esp,0xc
c001c4a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c4a6:	e8 f4 36 ff ff       	call   c000fb9f <free>
c001c4ab:	83 c4 10             	add    esp,0x10
c001c4ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4b2:	85 c0                	test   eax,eax
c001c4b4:	75 0a                	jne    c001c4c0 <FAT::closeDir(void*)+0x48>
c001c4b6:	b8 00 00 00 00       	mov    eax,0x0
c001c4bb:	eb 0b                	jmp    c001c4c8 <FAT::closeDir(void*)+0x50>
c001c4bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c4c0:	b8 01 00 00 00       	mov    eax,0x1
c001c4c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c4c8:	83 c4 1c             	add    esp,0x1c
c001c4cb:	c3                   	ret    

c001c4cc <FAT::truncate(void*, unsigned long long)>:
c001c4cc:	83 ec 2c             	sub    esp,0x2c
c001c4cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c4d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c4db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4df:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c4e4:	75 0a                	jne    c001c4f0 <FAT::truncate(void*, unsigned long long)+0x24>
c001c4e6:	b8 04 00 00 00       	mov    eax,0x4
c001c4eb:	eb 47                	jmp    c001c534 <FAT::truncate(void*, unsigned long long)+0x68>
c001c4ed:	8d 76 00             	lea    esi,[esi+0x0]
c001c4f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c4f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4fb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c503:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c507:	83 ec 08             	sub    esp,0x8
c001c50a:	50                   	push   eax
c001c50b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c50f:	e8 2d 81 fe ff       	call   c0004641 <f_lseek>
c001c514:	83 c4 10             	add    esp,0x10
c001c517:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c51b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c51f:	85 c0                	test   eax,eax
c001c521:	75 09                	jne    c001c52c <FAT::truncate(void*, unsigned long long)+0x60>
c001c523:	b8 00 00 00 00       	mov    eax,0x0
c001c528:	eb 0a                	jmp    c001c534 <FAT::truncate(void*, unsigned long long)+0x68>
c001c52a:	66 90                	xchg   ax,ax
c001c52c:	b8 01 00 00 00       	mov    eax,0x1
c001c531:	8d 76 00             	lea    esi,[esi+0x0]
c001c534:	83 c4 2c             	add    esp,0x2c
c001c537:	c3                   	ret    

c001c538 <FAT::seek(void*, unsigned long long)>:
c001c538:	83 ec 2c             	sub    esp,0x2c
c001c53b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c53f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c543:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c547:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c54b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c550:	75 0a                	jne    c001c55c <FAT::seek(void*, unsigned long long)+0x24>
c001c552:	b8 04 00 00 00       	mov    eax,0x4
c001c557:	eb 33                	jmp    c001c58c <FAT::seek(void*, unsigned long long)+0x54>
c001c559:	8d 76 00             	lea    esi,[esi+0x0]
c001c55c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c560:	83 ec 08             	sub    esp,0x8
c001c563:	50                   	push   eax
c001c564:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c568:	e8 d4 80 fe ff       	call   c0004641 <f_lseek>
c001c56d:	83 c4 10             	add    esp,0x10
c001c570:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c574:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c578:	85 c0                	test   eax,eax
c001c57a:	75 08                	jne    c001c584 <FAT::seek(void*, unsigned long long)+0x4c>
c001c57c:	b8 00 00 00 00       	mov    eax,0x0
c001c581:	eb 09                	jmp    c001c58c <FAT::seek(void*, unsigned long long)+0x54>
c001c583:	90                   	nop
c001c584:	b8 01 00 00 00       	mov    eax,0x1
c001c589:	8d 76 00             	lea    esi,[esi+0x0]
c001c58c:	83 c4 2c             	add    esp,0x2c
c001c58f:	c3                   	ret    

c001c590 <fatWrapperReadDisk>:
c001c590:	53                   	push   ebx
c001c591:	83 ec 18             	sub    esp,0x18
c001c594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c598:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c59c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c5a1:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c5a8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c5ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c5b0:	ba 00 00 00 00       	mov    edx,0x0
c001c5b5:	83 ec 0c             	sub    esp,0xc
c001c5b8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c5bc:	53                   	push   ebx
c001c5bd:	52                   	push   edx
c001c5be:	50                   	push   eax
c001c5bf:	51                   	push   ecx
c001c5c0:	e8 e3 e4 fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001c5c5:	83 c4 20             	add    esp,0x20
c001c5c8:	83 c4 18             	add    esp,0x18
c001c5cb:	5b                   	pop    ebx
c001c5cc:	c3                   	ret    
c001c5cd:	8d 76 00             	lea    esi,[esi+0x0]

c001c5d0 <fatWrapperWriteDisk>:
c001c5d0:	53                   	push   ebx
c001c5d1:	83 ec 18             	sub    esp,0x18
c001c5d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c5dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c5e1:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c5e8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c5ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c5f0:	ba 00 00 00 00       	mov    edx,0x0
c001c5f5:	83 ec 0c             	sub    esp,0xc
c001c5f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c5fc:	53                   	push   ebx
c001c5fd:	52                   	push   edx
c001c5fe:	50                   	push   eax
c001c5ff:	51                   	push   ecx
c001c600:	e8 0f e5 fe ff       	call   c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>
c001c605:	83 c4 20             	add    esp,0x20
c001c608:	83 c4 18             	add    esp,0x18
c001c60b:	5b                   	pop    ebx
c001c60c:	c3                   	ret    
c001c60d:	8d 76 00             	lea    esi,[esi+0x0]

c001c610 <fatWrapperIoctl>:
c001c610:	53                   	push   ebx
c001c611:	83 ec 28             	sub    esp,0x28
c001c614:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c618:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c61c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c620:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c624:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c629:	83 f8 02             	cmp    eax,0x2
c001c62c:	75 32                	jne    c001c660 <fatWrapperIoctl+0x50>
c001c62e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c632:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c636:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c63b:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c642:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c648:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c64e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c652:	66 89 02             	mov    WORD PTR [edx],ax
c001c655:	b8 00 00 00 00       	mov    eax,0x0
c001c65a:	e9 c5 00 00 00       	jmp    c001c724 <fatWrapperIoctl+0x114>
c001c65f:	90                   	nop
c001c660:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c665:	83 f8 01             	cmp    eax,0x1
c001c668:	75 6a                	jne    c001c6d4 <fatWrapperIoctl+0xc4>
c001c66a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c66e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c672:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c677:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c67e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c684:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c68a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c690:	89 c8                	mov    eax,ecx
c001c692:	89 da                	mov    edx,ebx
c001c694:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c698:	c1 e0 0a             	shl    eax,0xa
c001c69b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c6a0:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c001c6a7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c6ad:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c6b3:	89 cb                	mov    ebx,ecx
c001c6b5:	c1 fb 1f             	sar    ebx,0x1f
c001c6b8:	53                   	push   ebx
c001c6b9:	51                   	push   ecx
c001c6ba:	52                   	push   edx
c001c6bb:	50                   	push   eax
c001c6bc:	e8 53 55 00 00       	call   c0021c14 <__udivdi3>
c001c6c1:	83 c4 10             	add    esp,0x10
c001c6c4:	89 c2                	mov    edx,eax
c001c6c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6ca:	89 10                	mov    DWORD PTR [eax],edx
c001c6cc:	b8 00 00 00 00       	mov    eax,0x0
c001c6d1:	eb 51                	jmp    c001c724 <fatWrapperIoctl+0x114>
c001c6d3:	90                   	nop
c001c6d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6d9:	85 c0                	test   eax,eax
c001c6db:	75 07                	jne    c001c6e4 <fatWrapperIoctl+0xd4>
c001c6dd:	b8 00 00 00 00       	mov    eax,0x0
c001c6e2:	eb 40                	jmp    c001c724 <fatWrapperIoctl+0x114>
c001c6e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6e9:	83 f8 03             	cmp    eax,0x3
c001c6ec:	75 1a                	jne    c001c708 <fatWrapperIoctl+0xf8>
c001c6ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c6f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c6f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c6fa:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c700:	b8 00 00 00 00       	mov    eax,0x0
c001c705:	eb 1d                	jmp    c001c724 <fatWrapperIoctl+0x114>
c001c707:	90                   	nop
c001c708:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c70d:	83 f8 04             	cmp    eax,0x4
c001c710:	75 0a                	jne    c001c71c <fatWrapperIoctl+0x10c>
c001c712:	b8 00 00 00 00       	mov    eax,0x0
c001c717:	eb 0b                	jmp    c001c724 <fatWrapperIoctl+0x114>
c001c719:	8d 76 00             	lea    esi,[esi+0x0]
c001c71c:	b8 04 00 00 00       	mov    eax,0x4
c001c721:	8d 76 00             	lea    esi,[esi+0x0]
c001c724:	83 c4 28             	add    esp,0x28
c001c727:	5b                   	pop    ebx
c001c728:	c3                   	ret    
c001c729:	90                   	nop
c001c72a:	66 90                	xchg   ax,ax

c001c72c <FAT::FAT()>:
c001c72c:	83 ec 1c             	sub    esp,0x1c
c001c72f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c733:	83 ec 0c             	sub    esp,0xc
c001c736:	50                   	push   eax
c001c737:	e8 8c b6 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001c73c:	83 c4 10             	add    esp,0x10
c001c73f:	ba c8 5a 02 c0       	mov    edx,0xc0025ac8
c001c744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c748:	89 10                	mov    DWORD PTR [eax],edx
c001c74a:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001c754:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c75c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c761:	7f 19                	jg     c001c77c <FAT::FAT()+0x50>
c001c763:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c767:	c7 04 85 80 fb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0480],0xffffffff
c001c772:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c777:	eb e3                	jmp    c001c75c <FAT::FAT()+0x30>
c001c779:	8d 76 00             	lea    esi,[esi+0x0]
c001c77c:	90                   	nop
c001c77d:	83 c4 1c             	add    esp,0x1c
c001c780:	c3                   	ret    
c001c781:	90                   	nop
c001c782:	66 90                	xchg   ax,ax

c001c784 <FAT::fixFilepath(char*)>:
c001c784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c788:	8a 00                	mov    al,BYTE PTR [eax]
c001c78a:	0f be c0             	movsx  eax,al
c001c78d:	83 f8 40             	cmp    eax,0x40
c001c790:	7e 2e                	jle    c001c7c0 <FAT::fixFilepath(char*)+0x3c>
c001c792:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c796:	8a 00                	mov    al,BYTE PTR [eax]
c001c798:	83 e8 41             	sub    eax,0x41
c001c79b:	88 c2                	mov    dl,al
c001c79d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7a1:	88 10                	mov    BYTE PTR [eax],dl
c001c7a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7a7:	8a 00                	mov    al,BYTE PTR [eax]
c001c7a9:	0f be c0             	movsx  eax,al
c001c7ac:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001c7b3:	83 c0 30             	add    eax,0x30
c001c7b6:	88 c2                	mov    dl,al
c001c7b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7bc:	88 10                	mov    BYTE PTR [eax],dl
c001c7be:	66 90                	xchg   ax,ax
c001c7c0:	90                   	nop
c001c7c1:	c3                   	ret    
c001c7c2:	66 90                	xchg   ax,ax

c001c7c4 <FAT::open(char const*, void**, FileOpenMode)>:
c001c7c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c7ca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c7d2:	74 0c                	je     c001c7e0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c7d4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c7dc:	75 0e                	jne    c001c7ec <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c7de:	66 90                	xchg   ax,ax
c001c7e0:	b8 04 00 00 00       	mov    eax,0x4
c001c7e5:	e9 46 01 00 00       	jmp    c001c930 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c7ea:	66 90                	xchg   ax,ax
c001c7ec:	83 ec 08             	sub    esp,0x8
c001c7ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c7f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c7fa:	50                   	push   eax
c001c7fb:	e8 40 3e fe ff       	call   c0000640 <strcpy>
c001c800:	83 c4 10             	add    esp,0x10
c001c803:	83 ec 08             	sub    esp,0x8
c001c806:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c80a:	50                   	push   eax
c001c80b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c812:	e8 6d ff ff ff       	call   c001c784 <FAT::fixFilepath(char*)>
c001c817:	83 c4 10             	add    esp,0x10
c001c81a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c822:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c829:	83 e0 01             	and    eax,0x1
c001c82c:	74 12                	je     c001c840 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c82e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c835:	83 c8 01             	or     eax,0x1
c001c838:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c83f:	90                   	nop
c001c840:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c847:	83 e0 04             	and    eax,0x4
c001c84a:	74 24                	je     c001c870 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c84c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c853:	83 c8 30             	or     eax,0x30
c001c856:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c85d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c864:	83 c8 02             	or     eax,0x2
c001c867:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c86e:	66 90                	xchg   ax,ax
c001c870:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c877:	83 e0 02             	and    eax,0x2
c001c87a:	74 14                	je     c001c890 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c87c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c883:	83 c8 02             	or     eax,0x2
c001c886:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c88d:	8d 76 00             	lea    esi,[esi+0x0]
c001c890:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c897:	83 e0 08             	and    eax,0x8
c001c89a:	74 14                	je     c001c8b0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c89c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c8a3:	83 c8 04             	or     eax,0x4
c001c8a6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c8ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c8b0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c8b7:	83 e0 10             	and    eax,0x10
c001c8ba:	74 14                	je     c001c8d0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c8bc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c8c3:	83 c8 08             	or     eax,0x8
c001c8c6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c8cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c8d0:	83 ec 0c             	sub    esp,0xc
c001c8d3:	68 28 02 00 00       	push   0x228
c001c8d8:	e8 b2 32 ff ff       	call   c000fb8f <malloc>
c001c8dd:	83 c4 10             	add    esp,0x10
c001c8e0:	89 c2                	mov    edx,eax
c001c8e2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c8e9:	89 10                	mov    DWORD PTR [eax],edx
c001c8eb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c8f3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c8fa:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8fc:	83 ec 04             	sub    esp,0x4
c001c8ff:	52                   	push   edx
c001c900:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c904:	52                   	push   edx
c001c905:	50                   	push   eax
c001c906:	e8 38 75 fe ff       	call   c0003e43 <f_open>
c001c90b:	83 c4 10             	add    esp,0x10
c001c90e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c915:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c91d:	74 09                	je     c001c928 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c91f:	b8 01 00 00 00       	mov    eax,0x1
c001c924:	eb 0a                	jmp    c001c930 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c926:	66 90                	xchg   ax,ax
c001c928:	b8 00 00 00 00       	mov    eax,0x0
c001c92d:	8d 76 00             	lea    esi,[esi+0x0]
c001c930:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c936:	c3                   	ret    
c001c937:	90                   	nop

c001c938 <FAT::openDir(char const*, void**)>:
c001c938:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c93e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c946:	74 0c                	je     c001c954 <FAT::openDir(char const*, void**)+0x1c>
c001c948:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c950:	75 0e                	jne    c001c960 <FAT::openDir(char const*, void**)+0x28>
c001c952:	66 90                	xchg   ax,ax
c001c954:	b8 04 00 00 00       	mov    eax,0x4
c001c959:	e9 82 00 00 00       	jmp    c001c9e0 <FAT::openDir(char const*, void**)+0xa8>
c001c95e:	66 90                	xchg   ax,ax
c001c960:	83 ec 08             	sub    esp,0x8
c001c963:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c96a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c96e:	50                   	push   eax
c001c96f:	e8 cc 3c fe ff       	call   c0000640 <strcpy>
c001c974:	83 c4 10             	add    esp,0x10
c001c977:	83 ec 08             	sub    esp,0x8
c001c97a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c97e:	50                   	push   eax
c001c97f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c986:	e8 f9 fd ff ff       	call   c001c784 <FAT::fixFilepath(char*)>
c001c98b:	83 c4 10             	add    esp,0x10
c001c98e:	83 ec 0c             	sub    esp,0xc
c001c991:	6a 30                	push   0x30
c001c993:	e8 f7 31 ff ff       	call   c000fb8f <malloc>
c001c998:	83 c4 10             	add    esp,0x10
c001c99b:	89 c2                	mov    edx,eax
c001c99d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c9a4:	89 10                	mov    DWORD PTR [eax],edx
c001c9a6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9af:	83 ec 08             	sub    esp,0x8
c001c9b2:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c9b6:	52                   	push   edx
c001c9b7:	50                   	push   eax
c001c9b8:	e8 35 7e fe ff       	call   c00047f2 <f_opendir>
c001c9bd:	83 c4 10             	add    esp,0x10
c001c9c0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c9c7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c9cf:	74 07                	je     c001c9d8 <FAT::openDir(char const*, void**)+0xa0>
c001c9d1:	b8 01 00 00 00       	mov    eax,0x1
c001c9d6:	eb 08                	jmp    c001c9e0 <FAT::openDir(char const*, void**)+0xa8>
c001c9d8:	b8 00 00 00 00       	mov    eax,0x0
c001c9dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c9e0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c9e6:	c3                   	ret    
c001c9e7:	90                   	nop

c001c9e8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c9e8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c9ee:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c9f6:	75 0c                	jne    c001ca04 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c9f8:	b8 04 00 00 00       	mov    eax,0x4
c001c9fd:	e9 d6 00 00 00       	jmp    c001cad8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ca02:	66 90                	xchg   ax,ax
c001ca04:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001ca0c:	75 0a                	jne    c001ca18 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001ca0e:	b8 04 00 00 00       	mov    eax,0x4
c001ca13:	e9 c0 00 00 00       	jmp    c001cad8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ca18:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001ca20:	75 0a                	jne    c001ca2c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001ca22:	b8 04 00 00 00       	mov    eax,0x4
c001ca27:	e9 ac 00 00 00       	jmp    c001cad8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ca2c:	83 ec 08             	sub    esp,0x8
c001ca2f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ca36:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ca3d:	50                   	push   eax
c001ca3e:	e8 fd 3b fe ff       	call   c0000640 <strcpy>
c001ca43:	83 c4 10             	add    esp,0x10
c001ca46:	83 ec 08             	sub    esp,0x8
c001ca49:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ca50:	50                   	push   eax
c001ca51:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ca58:	e8 27 fd ff ff       	call   c001c784 <FAT::fixFilepath(char*)>
c001ca5d:	83 c4 10             	add    esp,0x10
c001ca60:	83 ec 08             	sub    esp,0x8
c001ca63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ca67:	50                   	push   eax
c001ca68:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ca6f:	50                   	push   eax
c001ca70:	e8 fc 7e fe ff       	call   c0004971 <f_stat>
c001ca75:	83 c4 10             	add    esp,0x10
c001ca78:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ca7f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ca86:	85 c0                	test   eax,eax
c001ca88:	74 0a                	je     c001ca94 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001ca8a:	83 f8 04             	cmp    eax,0x4
c001ca8d:	74 39                	je     c001cac8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ca8f:	eb 3f                	jmp    c001cad0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001ca91:	8d 76 00             	lea    esi,[esi+0x0]
c001ca94:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ca98:	0f b6 c0             	movzx  eax,al
c001ca9b:	83 e0 10             	and    eax,0x10
c001ca9e:	0f 95 c2             	setne  dl
c001caa1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001caa8:	88 10                	mov    BYTE PTR [eax],dl
c001caaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caae:	ba 00 00 00 00       	mov    edx,0x0
c001cab3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001caba:	89 01                	mov    DWORD PTR [ecx],eax
c001cabc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001cabf:	b8 00 00 00 00       	mov    eax,0x0
c001cac4:	eb 12                	jmp    c001cad8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cac6:	66 90                	xchg   ax,ax
c001cac8:	b8 02 00 00 00       	mov    eax,0x2
c001cacd:	eb 09                	jmp    c001cad8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cacf:	90                   	nop
c001cad0:	b8 01 00 00 00       	mov    eax,0x1
c001cad5:	8d 76 00             	lea    esi,[esi+0x0]
c001cad8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cade:	c3                   	ret    
c001cadf:	90                   	nop

c001cae0 <FAT::unlink(char const*)>:
c001cae0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cae6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001caee:	75 08                	jne    c001caf8 <FAT::unlink(char const*)+0x18>
c001caf0:	b8 04 00 00 00       	mov    eax,0x4
c001caf5:	eb 61                	jmp    c001cb58 <FAT::unlink(char const*)+0x78>
c001caf7:	90                   	nop
c001caf8:	83 ec 08             	sub    esp,0x8
c001cafb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cb02:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb06:	50                   	push   eax
c001cb07:	e8 34 3b fe ff       	call   c0000640 <strcpy>
c001cb0c:	83 c4 10             	add    esp,0x10
c001cb0f:	83 ec 08             	sub    esp,0x8
c001cb12:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cb16:	50                   	push   eax
c001cb17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cb1e:	e8 61 fc ff ff       	call   c001c784 <FAT::fixFilepath(char*)>
c001cb23:	83 c4 10             	add    esp,0x10
c001cb26:	83 ec 0c             	sub    esp,0xc
c001cb29:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb2d:	50                   	push   eax
c001cb2e:	e8 b0 80 fe ff       	call   c0004be3 <f_unlink>
c001cb33:	83 c4 10             	add    esp,0x10
c001cb36:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cb3d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cb44:	85 c0                	test   eax,eax
c001cb46:	75 08                	jne    c001cb50 <FAT::unlink(char const*)+0x70>
c001cb48:	b8 00 00 00 00       	mov    eax,0x0
c001cb4d:	eb 09                	jmp    c001cb58 <FAT::unlink(char const*)+0x78>
c001cb4f:	90                   	nop
c001cb50:	b8 01 00 00 00       	mov    eax,0x1
c001cb55:	8d 76 00             	lea    esi,[esi+0x0]
c001cb58:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cb5e:	c3                   	ret    
c001cb5f:	90                   	nop

c001cb60 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001cb60:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cb66:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001cb6d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001cb74:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001cb78:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cb7c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001cb84:	75 0a                	jne    c001cb90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001cb86:	b8 04 00 00 00       	mov    eax,0x4
c001cb8b:	e9 7c 01 00 00       	jmp    c001cd0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001cb90:	83 ec 08             	sub    esp,0x8
c001cb93:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cb9a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cb9e:	50                   	push   eax
c001cb9f:	e8 9c 3a fe ff       	call   c0000640 <strcpy>
c001cba4:	83 c4 10             	add    esp,0x10
c001cba7:	83 ec 08             	sub    esp,0x8
c001cbaa:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cbae:	50                   	push   eax
c001cbaf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cbb6:	e8 c9 fb ff ff       	call   c001c784 <FAT::fixFilepath(char*)>
c001cbbb:	83 c4 10             	add    esp,0x10
c001cbbe:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001cbc6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001cbce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbd3:	83 e0 01             	and    eax,0x1
c001cbd6:	74 14                	je     c001cbec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001cbd8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cbdf:	83 c8 01             	or     eax,0x1
c001cbe2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cbe9:	8d 76 00             	lea    esi,[esi+0x0]
c001cbec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbf1:	83 e0 02             	and    eax,0x2
c001cbf4:	74 12                	je     c001cc08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001cbf6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cbfd:	83 c8 20             	or     eax,0x20
c001cc00:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cc07:	90                   	nop
c001cc08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc0d:	83 e0 04             	and    eax,0x4
c001cc10:	74 12                	je     c001cc24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001cc12:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cc19:	83 c8 04             	or     eax,0x4
c001cc1c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cc23:	90                   	nop
c001cc24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc29:	83 e0 08             	and    eax,0x8
c001cc2c:	74 12                	je     c001cc40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001cc2e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cc35:	83 c8 02             	or     eax,0x2
c001cc38:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cc3f:	90                   	nop
c001cc40:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cc45:	83 e0 01             	and    eax,0x1
c001cc48:	74 12                	je     c001cc5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001cc4a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cc51:	83 c8 01             	or     eax,0x1
c001cc54:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cc5b:	90                   	nop
c001cc5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cc61:	83 e0 02             	and    eax,0x2
c001cc64:	74 12                	je     c001cc78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001cc66:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cc6d:	83 c8 20             	or     eax,0x20
c001cc70:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cc77:	90                   	nop
c001cc78:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cc7d:	83 e0 04             	and    eax,0x4
c001cc80:	74 12                	je     c001cc94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001cc82:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cc89:	83 c8 04             	or     eax,0x4
c001cc8c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cc93:	90                   	nop
c001cc94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cc99:	83 e0 08             	and    eax,0x8
c001cc9c:	74 12                	je     c001ccb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001cc9e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cca5:	83 c8 02             	or     eax,0x2
c001cca8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ccaf:	90                   	nop
c001ccb0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001ccb7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ccbe:	09 d0                	or     eax,edx
c001ccc0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ccc7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001cccf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ccd7:	83 ec 04             	sub    esp,0x4
c001ccda:	52                   	push   edx
c001ccdb:	50                   	push   eax
c001ccdc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cce0:	50                   	push   eax
c001cce1:	e8 72 83 fe ff       	call   c0005058 <f_chmod>
c001cce6:	83 c4 10             	add    esp,0x10
c001cce9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ccf0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ccf7:	85 c0                	test   eax,eax
c001ccf9:	75 09                	jne    c001cd04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001ccfb:	b8 00 00 00 00       	mov    eax,0x0
c001cd00:	eb 0a                	jmp    c001cd0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001cd02:	66 90                	xchg   ax,ax
c001cd04:	b8 01 00 00 00       	mov    eax,0x1
c001cd09:	8d 76 00             	lea    esi,[esi+0x0]
c001cd0c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cd12:	c3                   	ret    
c001cd13:	90                   	nop

c001cd14 <FAT::rename(char const*, char const*)>:
c001cd14:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cd1a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001cd22:	74 0c                	je     c001cd30 <FAT::rename(char const*, char const*)+0x1c>
c001cd24:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001cd2c:	75 0e                	jne    c001cd3c <FAT::rename(char const*, char const*)+0x28>
c001cd2e:	66 90                	xchg   ax,ax
c001cd30:	b8 04 00 00 00       	mov    eax,0x4
c001cd35:	e9 9e 00 00 00       	jmp    c001cdd8 <FAT::rename(char const*, char const*)+0xc4>
c001cd3a:	66 90                	xchg   ax,ax
c001cd3c:	83 ec 08             	sub    esp,0x8
c001cd3f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cd46:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cd4d:	50                   	push   eax
c001cd4e:	e8 ed 38 fe ff       	call   c0000640 <strcpy>
c001cd53:	83 c4 10             	add    esp,0x10
c001cd56:	83 ec 08             	sub    esp,0x8
c001cd59:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001cd60:	50                   	push   eax
c001cd61:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cd68:	e8 17 fa ff ff       	call   c001c784 <FAT::fixFilepath(char*)>
c001cd6d:	83 c4 10             	add    esp,0x10
c001cd70:	83 ec 08             	sub    esp,0x8
c001cd73:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001cd7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cd7e:	50                   	push   eax
c001cd7f:	e8 bc 38 fe ff       	call   c0000640 <strcpy>
c001cd84:	83 c4 10             	add    esp,0x10
c001cd87:	83 ec 08             	sub    esp,0x8
c001cd8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cd8e:	50                   	push   eax
c001cd8f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cd96:	e8 e9 f9 ff ff       	call   c001c784 <FAT::fixFilepath(char*)>
c001cd9b:	83 c4 10             	add    esp,0x10
c001cd9e:	83 ec 08             	sub    esp,0x8
c001cda1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cda5:	50                   	push   eax
c001cda6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cdad:	50                   	push   eax
c001cdae:	e8 ed 80 fe ff       	call   c0004ea0 <f_rename>
c001cdb3:	83 c4 10             	add    esp,0x10
c001cdb6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001cdbd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001cdc4:	85 c0                	test   eax,eax
c001cdc6:	75 08                	jne    c001cdd0 <FAT::rename(char const*, char const*)+0xbc>
c001cdc8:	b8 00 00 00 00       	mov    eax,0x0
c001cdcd:	eb 09                	jmp    c001cdd8 <FAT::rename(char const*, char const*)+0xc4>
c001cdcf:	90                   	nop
c001cdd0:	b8 01 00 00 00       	mov    eax,0x1
c001cdd5:	8d 76 00             	lea    esi,[esi+0x0]
c001cdd8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cdde:	c3                   	ret    
c001cddf:	90                   	nop

c001cde0 <FAT::mkdir(char const*)>:
c001cde0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cde6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cdee:	75 08                	jne    c001cdf8 <FAT::mkdir(char const*)+0x18>
c001cdf0:	b8 04 00 00 00       	mov    eax,0x4
c001cdf5:	eb 61                	jmp    c001ce58 <FAT::mkdir(char const*)+0x78>
c001cdf7:	90                   	nop
c001cdf8:	83 ec 08             	sub    esp,0x8
c001cdfb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ce02:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ce06:	50                   	push   eax
c001ce07:	e8 34 38 fe ff       	call   c0000640 <strcpy>
c001ce0c:	83 c4 10             	add    esp,0x10
c001ce0f:	83 ec 08             	sub    esp,0x8
c001ce12:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ce16:	50                   	push   eax
c001ce17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ce1e:	e8 61 f9 ff ff       	call   c001c784 <FAT::fixFilepath(char*)>
c001ce23:	83 c4 10             	add    esp,0x10
c001ce26:	83 ec 0c             	sub    esp,0xc
c001ce29:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ce2d:	50                   	push   eax
c001ce2e:	e8 d2 7e fe ff       	call   c0004d05 <f_mkdir>
c001ce33:	83 c4 10             	add    esp,0x10
c001ce36:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ce3d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ce44:	85 c0                	test   eax,eax
c001ce46:	75 08                	jne    c001ce50 <FAT::mkdir(char const*)+0x70>
c001ce48:	b8 00 00 00 00       	mov    eax,0x0
c001ce4d:	eb 09                	jmp    c001ce58 <FAT::mkdir(char const*)+0x78>
c001ce4f:	90                   	nop
c001ce50:	b8 01 00 00 00       	mov    eax,0x1
c001ce55:	8d 76 00             	lea    esi,[esi+0x0]
c001ce58:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ce5e:	c3                   	ret    
c001ce5f:	90                   	nop

c001ce60 <FAT::exists(char const*)>:
c001ce60:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ce66:	83 ec 08             	sub    esp,0x8
c001ce69:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ce70:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ce74:	50                   	push   eax
c001ce75:	e8 c6 37 fe ff       	call   c0000640 <strcpy>
c001ce7a:	83 c4 10             	add    esp,0x10
c001ce7d:	83 ec 08             	sub    esp,0x8
c001ce80:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ce84:	50                   	push   eax
c001ce85:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ce8c:	e8 f3 f8 ff ff       	call   c001c784 <FAT::fixFilepath(char*)>
c001ce91:	83 c4 10             	add    esp,0x10
c001ce94:	83 ec 08             	sub    esp,0x8
c001ce97:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001ce9e:	50                   	push   eax
c001ce9f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cea3:	50                   	push   eax
c001cea4:	e8 c8 7a fe ff       	call   c0004971 <f_stat>
c001cea9:	83 c4 10             	add    esp,0x10
c001ceac:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ceb3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ceba:	85 c0                	test   eax,eax
c001cebc:	75 06                	jne    c001cec4 <FAT::exists(char const*)+0x64>
c001cebe:	b0 01                	mov    al,0x1
c001cec0:	eb 06                	jmp    c001cec8 <FAT::exists(char const*)+0x68>
c001cec2:	66 90                	xchg   ax,ax
c001cec4:	b0 00                	mov    al,0x0
c001cec6:	66 90                	xchg   ax,ax
c001cec8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cece:	c3                   	ret    
c001cecf:	90                   	nop

c001ced0 <isoReadDiscSectorHelper>:
c001ced0:	83 ec 2c             	sub    esp,0x2c
c001ced3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ced7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cedb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001cee0:	83 e8 41             	sub    eax,0x41
c001cee3:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001ceea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ceee:	ba 00 00 00 00       	mov    edx,0x0
c001cef3:	83 ec 0c             	sub    esp,0xc
c001cef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cefa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cefe:	52                   	push   edx
c001ceff:	50                   	push   eax
c001cf00:	51                   	push   ecx
c001cf01:	e8 a2 db fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001cf06:	83 c4 20             	add    esp,0x20
c001cf09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf0d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cf12:	74 0c                	je     c001cf20 <isoReadDiscSectorHelper+0x50>
c001cf14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf18:	c1 e0 0b             	shl    eax,0xb
c001cf1b:	eb 0b                	jmp    c001cf28 <isoReadDiscSectorHelper+0x58>
c001cf1d:	8d 76 00             	lea    esi,[esi+0x0]
c001cf20:	b8 00 00 00 00       	mov    eax,0x0
c001cf25:	8d 76 00             	lea    esi,[esi+0x0]
c001cf28:	83 c4 2c             	add    esp,0x2c
c001cf2b:	c3                   	ret    

c001cf2c <iso_kprintf>:
c001cf2c:	83 ec 0c             	sub    esp,0xc
c001cf2f:	83 ec 08             	sub    esp,0x8
c001cf32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf36:	68 a0 57 02 c0       	push   0xc00257a0
c001cf3b:	e8 3c a0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cf40:	83 c4 10             	add    esp,0x10
c001cf43:	90                   	nop
c001cf44:	83 c4 0c             	add    esp,0xc
c001cf47:	c3                   	ret    

c001cf48 <iso_kprintfd>:
c001cf48:	83 ec 0c             	sub    esp,0xc
c001cf4b:	83 ec 08             	sub    esp,0x8
c001cf4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf52:	68 e1 4c 02 c0       	push   0xc0024ce1
c001cf57:	e8 20 a0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cf5c:	83 c4 10             	add    esp,0x10
c001cf5f:	90                   	nop
c001cf60:	83 c4 0c             	add    esp,0xc
c001cf63:	c3                   	ret    

c001cf64 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001cf64:	b8 08 00 00 00       	mov    eax,0x8
c001cf69:	c3                   	ret    

c001cf6a <ISO9660::truncate(void*, unsigned long long)>:
c001cf6a:	b8 01 00 00 00       	mov    eax,0x1
c001cf6f:	c3                   	ret    

c001cf70 <ISO9660::getName()>:
c001cf70:	b8 2c 5b 02 c0       	mov    eax,0xc0025b2c
c001cf75:	c3                   	ret    

c001cf76 <ISO9660::closeDir(void*)>:
c001cf76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf7a:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf7c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001cf7f:	90                   	nop

c001cf80 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001cf80:	b8 01 00 00 00       	mov    eax,0x1
c001cf85:	c3                   	ret    

c001cf86 <ISO9660::unlink(char const*)>:
c001cf86:	b8 01 00 00 00       	mov    eax,0x1
c001cf8b:	c3                   	ret    

c001cf8c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001cf8c:	b8 03 00 00 00       	mov    eax,0x3
c001cf91:	c3                   	ret    

c001cf92 <ISO9660::rename(char const*, char const*)>:
c001cf92:	b8 01 00 00 00       	mov    eax,0x1
c001cf97:	c3                   	ret    

c001cf98 <ISO9660::mkdir(char const*)>:
c001cf98:	b8 01 00 00 00       	mov    eax,0x1
c001cf9d:	c3                   	ret    

c001cf9e <ISO9660::~ISO9660()>:
c001cf9e:	83 ec 0c             	sub    esp,0xc
c001cfa1:	ba 6c 5c 02 c0       	mov    edx,0xc0025c6c
c001cfa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfaa:	89 10                	mov    DWORD PTR [eax],edx
c001cfac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb0:	83 ec 0c             	sub    esp,0xc
c001cfb3:	50                   	push   eax
c001cfb4:	e8 33 ae fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001cfb9:	83 c4 10             	add    esp,0x10
c001cfbc:	90                   	nop
c001cfbd:	83 c4 0c             	add    esp,0xc
c001cfc0:	c3                   	ret    
c001cfc1:	90                   	nop

c001cfc2 <ISO9660::~ISO9660()>:
c001cfc2:	83 ec 0c             	sub    esp,0xc
c001cfc5:	83 ec 0c             	sub    esp,0xc
c001cfc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfcc:	e8 cd ff ff ff       	call   c001cf9e <ISO9660::~ISO9660()>
c001cfd1:	83 c4 10             	add    esp,0x10
c001cfd4:	83 ec 08             	sub    esp,0x8
c001cfd7:	6a 08                	push   0x8
c001cfd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfdd:	e8 07 04 ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001cfe2:	83 c4 10             	add    esp,0x10
c001cfe5:	83 c4 0c             	add    esp,0xc
c001cfe8:	c3                   	ret    
c001cfe9:	90                   	nop

c001cfea <ISO9660::exists(char const*)>:
c001cfea:	83 ec 18             	sub    esp,0x18
c001cfed:	68 47 5b 02 c0       	push   0xc0025b47
c001cff2:	e8 ef 2f ff ff       	call   c000ffe6 <KePanic(char const*)>
c001cff7:	31 c0                	xor    eax,eax
c001cff9:	83 c4 1c             	add    esp,0x1c
c001cffc:	c3                   	ret    
c001cffd:	90                   	nop

c001cffe <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cffe:	56                   	push   esi
c001cfff:	53                   	push   ebx
c001d000:	53                   	push   ebx
c001d001:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d005:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d009:	85 db                	test   ebx,ebx
c001d00b:	0f 84 ca 00 00 00    	je     c001d0db <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d011:	85 f6                	test   esi,esi
c001d013:	0f 84 c2 00 00 00    	je     c001d0db <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d019:	b8 03 00 00 00       	mov    eax,0x3
c001d01e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001d023:	0f 85 b7 00 00 00    	jne    c001d0e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d029:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d02b:	0f be 05 60 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc60
c001d032:	38 0d 60 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc60,cl
c001d038:	74 1b                	je     c001d055 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001d03a:	85 c0                	test   eax,eax
c001d03c:	74 10                	je     c001d04e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001d03e:	83 ec 0c             	sub    esp,0xc
c001d041:	68 65 5b 02 c0       	push   0xc0025b65
c001d046:	e8 9b 2f ff ff       	call   c000ffe6 <KePanic(char const*)>
c001d04b:	83 c4 10             	add    esp,0x10
c001d04e:	8a 03                	mov    al,BYTE PTR [ebx]
c001d050:	a2 60 fc 02 c0       	mov    ds:0xc002fc60,al
c001d055:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d058:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d05f:	85 c0                	test   eax,eax
c001d061:	74 09                	je     c001d06c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001d063:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d06a:	74 48                	je     c001d0b4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001d06c:	83 ec 0c             	sub    esp,0xc
c001d06f:	68 75 5b 02 c0       	push   0xc0025b75
c001d074:	e8 03 9f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d079:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d07c:	83 c4 10             	add    esp,0x10
c001d07f:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d086:	85 c0                	test   eax,eax
c001d088:	74 17                	je     c001d0a1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001d08a:	83 ec 0c             	sub    esp,0xc
c001d08d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d094:	68 95 5b 02 c0       	push   0xc0025b95
c001d099:	e8 de 9e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d09e:	83 c4 10             	add    esp,0x10
c001d0a1:	83 ec 0c             	sub    esp,0xc
c001d0a4:	0f be 05 60 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc60
c001d0ab:	50                   	push   eax
c001d0ac:	e8 7d 9b fe ff       	call   c0006c2e <init_percd>
c001d0b1:	83 c4 10             	add    esp,0x10
c001d0b4:	83 c3 03             	add    ebx,0x3
c001d0b7:	51                   	push   ecx
c001d0b8:	51                   	push   ecx
c001d0b9:	6a 00                	push   0x0
c001d0bb:	53                   	push   ebx
c001d0bc:	e8 34 96 fe ff       	call   c00066f5 <iso_open>
c001d0c1:	83 c4 10             	add    esp,0x10
c001d0c4:	89 c2                	mov    edx,eax
c001d0c6:	b8 01 00 00 00       	mov    eax,0x1
c001d0cb:	83 fa ff             	cmp    edx,0xffffffff
c001d0ce:	74 10                	je     c001d0e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d0d0:	83 c2 32             	add    edx,0x32
c001d0d3:	31 c0                	xor    eax,eax
c001d0d5:	01 d2                	add    edx,edx
c001d0d7:	89 16                	mov    DWORD PTR [esi],edx
c001d0d9:	eb 05                	jmp    c001d0e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d0db:	b8 04 00 00 00       	mov    eax,0x4
c001d0e0:	5a                   	pop    edx
c001d0e1:	5b                   	pop    ebx
c001d0e2:	5e                   	pop    esi
c001d0e3:	c3                   	ret    

c001d0e4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001d0e4:	53                   	push   ebx
c001d0e5:	83 ec 08             	sub    esp,0x8
c001d0e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d0f0:	85 c0                	test   eax,eax
c001d0f2:	74 2d                	je     c001d121 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d0f4:	85 db                	test   ebx,ebx
c001d0f6:	74 29                	je     c001d121 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d0f8:	b9 02 00 00 00       	mov    ecx,0x2
c001d0fd:	52                   	push   edx
c001d0fe:	99                   	cdq    
c001d0ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d103:	f7 f9                	idiv   ecx
c001d105:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d109:	83 e8 32             	sub    eax,0x32
c001d10c:	50                   	push   eax
c001d10d:	e8 8b 96 fe ff       	call   c000679d <iso_read>
c001d112:	83 c4 10             	add    esp,0x10
c001d115:	89 03                	mov    DWORD PTR [ebx],eax
c001d117:	09 d0                	or     eax,edx
c001d119:	0f 94 c0             	sete   al
c001d11c:	0f b6 c0             	movzx  eax,al
c001d11f:	eb 05                	jmp    c001d126 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001d121:	b8 04 00 00 00       	mov    eax,0x4
c001d126:	83 c4 08             	add    esp,0x8
c001d129:	5b                   	pop    ebx
c001d12a:	c3                   	ret    
c001d12b:	90                   	nop

c001d12c <ISO9660::seek(void*, unsigned long long)>:
c001d12c:	57                   	push   edi
c001d12d:	56                   	push   esi
c001d12e:	b8 04 00 00 00       	mov    eax,0x4
c001d133:	51                   	push   ecx
c001d134:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d138:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d13c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d140:	85 d2                	test   edx,edx
c001d142:	74 26                	je     c001d16a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001d144:	6a 00                	push   0x0
c001d146:	b9 02 00 00 00       	mov    ecx,0x2
c001d14b:	57                   	push   edi
c001d14c:	89 d0                	mov    eax,edx
c001d14e:	56                   	push   esi
c001d14f:	99                   	cdq    
c001d150:	f7 f9                	idiv   ecx
c001d152:	83 e8 32             	sub    eax,0x32
c001d155:	50                   	push   eax
c001d156:	e8 58 97 fe ff       	call   c00068b3 <iso_seek>
c001d15b:	83 c4 10             	add    esp,0x10
c001d15e:	31 f0                	xor    eax,esi
c001d160:	31 fa                	xor    edx,edi
c001d162:	09 d0                	or     eax,edx
c001d164:	0f 95 c0             	setne  al
c001d167:	0f b6 c0             	movzx  eax,al
c001d16a:	5a                   	pop    edx
c001d16b:	5e                   	pop    esi
c001d16c:	5f                   	pop    edi
c001d16d:	c3                   	ret    

c001d16e <ISO9660::tell(void*, unsigned long long*)>:
c001d16e:	53                   	push   ebx
c001d16f:	83 ec 08             	sub    esp,0x8
c001d172:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d176:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d17a:	85 c0                	test   eax,eax
c001d17c:	74 24                	je     c001d1a2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d17e:	85 db                	test   ebx,ebx
c001d180:	74 20                	je     c001d1a2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d182:	83 ec 0c             	sub    esp,0xc
c001d185:	b9 02 00 00 00       	mov    ecx,0x2
c001d18a:	99                   	cdq    
c001d18b:	f7 f9                	idiv   ecx
c001d18d:	83 e8 32             	sub    eax,0x32
c001d190:	50                   	push   eax
c001d191:	e8 a1 97 fe ff       	call   c0006937 <iso_tell>
c001d196:	83 c4 10             	add    esp,0x10
c001d199:	89 03                	mov    DWORD PTR [ebx],eax
c001d19b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001d19e:	31 c0                	xor    eax,eax
c001d1a0:	eb 05                	jmp    c001d1a7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001d1a2:	b8 04 00 00 00       	mov    eax,0x4
c001d1a7:	83 c4 08             	add    esp,0x8
c001d1aa:	5b                   	pop    ebx
c001d1ab:	c3                   	ret    

c001d1ac <ISO9660::stat(void*, unsigned long long*)>:
c001d1ac:	53                   	push   ebx
c001d1ad:	83 ec 14             	sub    esp,0x14
c001d1b0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d1b4:	68 b9 5b 02 c0       	push   0xc0025bb9
c001d1b9:	e8 be 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d1be:	83 c4 10             	add    esp,0x10
c001d1c1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d1c6:	74 2c                	je     c001d1f4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d1c8:	85 db                	test   ebx,ebx
c001d1ca:	74 28                	je     c001d1f4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d1cc:	83 ec 0c             	sub    esp,0xc
c001d1cf:	b9 02 00 00 00       	mov    ecx,0x2
c001d1d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1d8:	99                   	cdq    
c001d1d9:	f7 f9                	idiv   ecx
c001d1db:	83 e8 32             	sub    eax,0x32
c001d1de:	50                   	push   eax
c001d1df:	e8 84 97 fe ff       	call   c0006968 <iso_total>
c001d1e4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d1eb:	89 03                	mov    DWORD PTR [ebx],eax
c001d1ed:	83 c4 10             	add    esp,0x10
c001d1f0:	31 c0                	xor    eax,eax
c001d1f2:	eb 05                	jmp    c001d1f9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001d1f4:	b8 04 00 00 00       	mov    eax,0x4
c001d1f9:	83 c4 08             	add    esp,0x8
c001d1fc:	5b                   	pop    ebx
c001d1fd:	c3                   	ret    

c001d1fe <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d1fe:	55                   	push   ebp
c001d1ff:	57                   	push   edi
c001d200:	56                   	push   esi
c001d201:	53                   	push   ebx
c001d202:	83 ec 18             	sub    esp,0x18
c001d205:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d209:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d20d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d211:	68 c1 5b 02 c0       	push   0xc0025bc1
c001d216:	e8 61 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d21b:	83 c4 10             	add    esp,0x10
c001d21e:	85 ff                	test   edi,edi
c001d220:	0f 94 c0             	sete   al
c001d223:	85 f6                	test   esi,esi
c001d225:	0f 94 c2             	sete   dl
c001d228:	09 d0                	or     eax,edx
c001d22a:	a8 01                	test   al,0x1
c001d22c:	0f 85 dd 00 00 00    	jne    c001d30f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d232:	85 db                	test   ebx,ebx
c001d234:	0f 84 d5 00 00 00    	je     c001d30f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d23a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d23d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d243:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d24a:	0f be 05 60 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc60
c001d251:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d253:	38 0d 60 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc60,cl
c001d259:	74 1b                	je     c001d276 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d25b:	85 c0                	test   eax,eax
c001d25d:	74 10                	je     c001d26f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d25f:	83 ec 0c             	sub    esp,0xc
c001d262:	68 65 5b 02 c0       	push   0xc0025b65
c001d267:	e8 7a 2d ff ff       	call   c000ffe6 <KePanic(char const*)>
c001d26c:	83 c4 10             	add    esp,0x10
c001d26f:	8a 03                	mov    al,BYTE PTR [ebx]
c001d271:	a2 60 fc 02 c0       	mov    ds:0xc002fc60,al
c001d276:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d279:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d280:	85 c0                	test   eax,eax
c001d282:	74 09                	je     c001d28d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d284:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d28b:	74 51                	je     c001d2de <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d28d:	83 ec 0c             	sub    esp,0xc
c001d290:	68 c9 5b 02 c0       	push   0xc0025bc9
c001d295:	e8 e2 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d29a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d29d:	83 c4 10             	add    esp,0x10
c001d2a0:	83 3c 85 dc c9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd3624],0x0
c001d2a8:	74 21                	je     c001d2cb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d2aa:	83 ec 0c             	sub    esp,0xc
c001d2ad:	68 e9 5b 02 c0       	push   0xc0025be9
c001d2b2:	e8 c5 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d2b7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d2ba:	83 c4 10             	add    esp,0x10
c001d2bd:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d2c4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d2cb:	83 ec 0c             	sub    esp,0xc
c001d2ce:	0f be 05 60 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc60
c001d2d5:	50                   	push   eax
c001d2d6:	e8 53 99 fe ff       	call   c0006c2e <init_percd>
c001d2db:	83 c4 10             	add    esp,0x10
c001d2de:	83 c3 03             	add    ebx,0x3
c001d2e1:	52                   	push   edx
c001d2e2:	52                   	push   edx
c001d2e3:	6a 00                	push   0x0
c001d2e5:	53                   	push   ebx
c001d2e6:	e8 0a 94 fe ff       	call   c00066f5 <iso_open>
c001d2eb:	83 c4 10             	add    esp,0x10
c001d2ee:	89 c5                	mov    ebp,eax
c001d2f0:	83 f8 ff             	cmp    eax,0xffffffff
c001d2f3:	75 21                	jne    c001d316 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d2f5:	50                   	push   eax
c001d2f6:	50                   	push   eax
c001d2f7:	6a 01                	push   0x1
c001d2f9:	53                   	push   ebx
c001d2fa:	e8 f6 93 fe ff       	call   c00066f5 <iso_open>
c001d2ff:	83 c4 10             	add    esp,0x10
c001d302:	ba 02 00 00 00       	mov    edx,0x2
c001d307:	40                   	inc    eax
c001d308:	74 2b                	je     c001d335 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d30a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d30d:	eb 24                	jmp    c001d333 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d30f:	ba 04 00 00 00       	mov    edx,0x4
c001d314:	eb 1f                	jmp    c001d335 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d316:	83 ec 0c             	sub    esp,0xc
c001d319:	50                   	push   eax
c001d31a:	e8 49 96 fe ff       	call   c0006968 <iso_total>
c001d31f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d326:	89 07                	mov    DWORD PTR [edi],eax
c001d328:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d32b:	e8 4f 94 fe ff       	call   c000677f <iso_close>
c001d330:	83 c4 10             	add    esp,0x10
c001d333:	31 d2                	xor    edx,edx
c001d335:	83 c4 0c             	add    esp,0xc
c001d338:	89 d0                	mov    eax,edx
c001d33a:	5b                   	pop    ebx
c001d33b:	5e                   	pop    esi
c001d33c:	5f                   	pop    edi
c001d33d:	5d                   	pop    ebp
c001d33e:	c3                   	ret    
c001d33f:	90                   	nop

c001d340 <ISO9660::close(void*)>:
c001d340:	83 ec 0c             	sub    esp,0xc
c001d343:	b8 04 00 00 00       	mov    eax,0x4
c001d348:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d34c:	85 d2                	test   edx,edx
c001d34e:	74 1b                	je     c001d36b <ISO9660::close(void*)+0x2b>
c001d350:	83 ec 0c             	sub    esp,0xc
c001d353:	b9 02 00 00 00       	mov    ecx,0x2
c001d358:	89 d0                	mov    eax,edx
c001d35a:	99                   	cdq    
c001d35b:	f7 f9                	idiv   ecx
c001d35d:	83 e8 32             	sub    eax,0x32
c001d360:	50                   	push   eax
c001d361:	e8 19 94 fe ff       	call   c000677f <iso_close>
c001d366:	83 c4 10             	add    esp,0x10
c001d369:	31 c0                	xor    eax,eax
c001d36b:	83 c4 0c             	add    esp,0xc
c001d36e:	c3                   	ret    
c001d36f:	90                   	nop

c001d370 <ISO9660::openDir(char const*, void**)>:
c001d370:	56                   	push   esi
c001d371:	53                   	push   ebx
c001d372:	50                   	push   eax
c001d373:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d377:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d37b:	85 db                	test   ebx,ebx
c001d37d:	0f 84 bd 00 00 00    	je     c001d440 <ISO9660::openDir(char const*, void**)+0xd0>
c001d383:	85 f6                	test   esi,esi
c001d385:	0f 84 b5 00 00 00    	je     c001d440 <ISO9660::openDir(char const*, void**)+0xd0>
c001d38b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d38d:	0f be 05 60 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc60
c001d394:	38 15 60 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc60,dl
c001d39a:	74 1b                	je     c001d3b7 <ISO9660::openDir(char const*, void**)+0x47>
c001d39c:	85 c0                	test   eax,eax
c001d39e:	74 10                	je     c001d3b0 <ISO9660::openDir(char const*, void**)+0x40>
c001d3a0:	83 ec 0c             	sub    esp,0xc
c001d3a3:	68 65 5b 02 c0       	push   0xc0025b65
c001d3a8:	e8 39 2c ff ff       	call   c000ffe6 <KePanic(char const*)>
c001d3ad:	83 c4 10             	add    esp,0x10
c001d3b0:	8a 03                	mov    al,BYTE PTR [ebx]
c001d3b2:	a2 60 fc 02 c0       	mov    ds:0xc002fc60,al
c001d3b7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d3ba:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d3c1:	85 c0                	test   eax,eax
c001d3c3:	74 10                	je     c001d3d5 <ISO9660::openDir(char const*, void**)+0x65>
c001d3c5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d3cc:	74 1a                	je     c001d3e8 <ISO9660::openDir(char const*, void**)+0x78>
c001d3ce:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d3d5:	83 ec 0c             	sub    esp,0xc
c001d3d8:	0f be 05 60 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc60
c001d3df:	50                   	push   eax
c001d3e0:	e8 49 98 fe ff       	call   c0006c2e <init_percd>
c001d3e5:	83 c4 10             	add    esp,0x10
c001d3e8:	83 c3 03             	add    ebx,0x3
c001d3eb:	50                   	push   eax
c001d3ec:	50                   	push   eax
c001d3ed:	6a 01                	push   0x1
c001d3ef:	53                   	push   ebx
c001d3f0:	e8 00 93 fe ff       	call   c00066f5 <iso_open>
c001d3f5:	83 c4 10             	add    esp,0x10
c001d3f8:	89 c3                	mov    ebx,eax
c001d3fa:	83 f8 ff             	cmp    eax,0xffffffff
c001d3fd:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001d402:	75 1c                	jne    c001d420 <ISO9660::openDir(char const*, void**)+0xb0>
c001d404:	53                   	push   ebx
c001d405:	53                   	push   ebx
c001d406:	68 0d 5c 02 c0       	push   0xc0025c0d
c001d40b:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d411:	e8 e6 55 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001d416:	83 c4 10             	add    esp,0x10
c001d419:	b8 01 00 00 00       	mov    eax,0x1
c001d41e:	eb 25                	jmp    c001d445 <ISO9660::openDir(char const*, void**)+0xd5>
c001d420:	01 db                	add    ebx,ebx
c001d422:	51                   	push   ecx
c001d423:	83 c3 65             	add    ebx,0x65
c001d426:	51                   	push   ecx
c001d427:	68 20 5c 02 c0       	push   0xc0025c20
c001d42c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d432:	e8 c5 55 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001d437:	89 1e                	mov    DWORD PTR [esi],ebx
c001d439:	83 c4 10             	add    esp,0x10
c001d43c:	31 c0                	xor    eax,eax
c001d43e:	eb 05                	jmp    c001d445 <ISO9660::openDir(char const*, void**)+0xd5>
c001d440:	b8 04 00 00 00       	mov    eax,0x4
c001d445:	5a                   	pop    edx
c001d446:	5b                   	pop    ebx
c001d447:	5e                   	pop    esi
c001d448:	c3                   	ret    
c001d449:	90                   	nop

c001d44a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d44a:	55                   	push   ebp
c001d44b:	57                   	push   edi
c001d44c:	56                   	push   esi
c001d44d:	53                   	push   ebx
c001d44e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d454:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d45b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d462:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001d46a:	0f 84 e7 00 00 00    	je     c001d557 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d470:	85 db                	test   ebx,ebx
c001d472:	0f 84 df 00 00 00    	je     c001d557 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d478:	83 ec 0c             	sub    esp,0xc
c001d47b:	68 33 5c 02 c0       	push   0xc0025c33
c001d480:	e8 f7 9a fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d485:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d48c:	b9 02 00 00 00       	mov    ecx,0x2
c001d491:	99                   	cdq    
c001d492:	f7 f9                	idiv   ecx
c001d494:	83 e8 32             	sub    eax,0x32
c001d497:	89 04 24             	mov    DWORD PTR [esp],eax
c001d49a:	e8 1b 95 fe ff       	call   c00069ba <iso_readdir>
c001d49f:	83 c4 10             	add    esp,0x10
c001d4a2:	89 c6                	mov    esi,eax
c001d4a4:	85 c0                	test   eax,eax
c001d4a6:	75 37                	jne    c001d4df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001d4a8:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001d4ad:	56                   	push   esi
c001d4ae:	56                   	push   esi
c001d4af:	68 3e 5c 02 c0       	push   0xc0025c3e
c001d4b4:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d4ba:	e8 3d 55 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001d4bf:	83 c4 0c             	add    esp,0xc
c001d4c2:	68 10 01 00 00       	push   0x110
c001d4c7:	6a 00                	push   0x0
c001d4c9:	57                   	push   edi
c001d4ca:	e8 21 30 fe ff       	call   c00004f0 <memset>
c001d4cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d4d5:	83 c4 10             	add    esp,0x10
c001d4d8:	b8 01 00 00 00       	mov    eax,0x1
c001d4dd:	eb 7d                	jmp    c001d55c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d4df:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d4e5:	8d 68 08             	lea    ebp,[eax+0x8]
c001d4e8:	83 ec 0c             	sub    esp,0xc
c001d4eb:	55                   	push   ebp
c001d4ec:	e8 7f 30 fe ff       	call   c0000570 <strlen>
c001d4f1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d4f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d4fd:	83 c4 10             	add    esp,0x10
c001d500:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001d504:	75 0a                	jne    c001d510 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001d506:	b8 02 00 00 00       	mov    eax,0x2
c001d50b:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001d50e:	74 05                	je     c001d515 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001d510:	b8 01 00 00 00       	mov    eax,0x1
c001d515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d519:	50                   	push   eax
c001d51a:	50                   	push   eax
c001d51b:	55                   	push   ebp
c001d51c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d520:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d524:	50                   	push   eax
c001d525:	e8 16 31 fe ff       	call   c0000640 <strcpy>
c001d52a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d531:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d533:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001d539:	5a                   	pop    edx
c001d53a:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001d53f:	59                   	pop    ecx
c001d540:	68 51 5c 02 c0       	push   0xc0025c51
c001d545:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d54b:	e8 ac 54 ff ff       	call   c00129fc <VgaText::puts(char const*)>
c001d550:	83 c4 10             	add    esp,0x10
c001d553:	31 c0                	xor    eax,eax
c001d555:	eb 05                	jmp    c001d55c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d557:	b8 04 00 00 00       	mov    eax,0x4
c001d55c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d562:	5b                   	pop    ebx
c001d563:	5e                   	pop    esi
c001d564:	5f                   	pop    edi
c001d565:	5d                   	pop    ebp
c001d566:	c3                   	ret    

c001d567 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d567:	57                   	push   edi
c001d568:	56                   	push   esi
c001d569:	53                   	push   ebx
c001d56a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d56e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d572:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d576:	39 35 64 fc 02 c0    	cmp    DWORD PTR ds:0xc002fc64,esi
c001d57c:	0f be cb             	movsx  ecx,bl
c001d57f:	75 0b                	jne    c001d58c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d581:	0f be 05 c4 6e 02 c0 	movsx  eax,BYTE PTR ds:0xc0026ec4
c001d588:	39 c8                	cmp    eax,ecx
c001d58a:	74 47                	je     c001d5d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d58c:	83 ec 0c             	sub    esp,0xc
c001d58f:	31 d2                	xor    edx,edx
c001d591:	68 80 fc 02 c0       	push   0xc002fc80
c001d596:	6a 01                	push   0x1
c001d598:	52                   	push   edx
c001d599:	56                   	push   esi
c001d59a:	ff 34 8d dc c9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd3624]
c001d5a1:	e8 02 d5 fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001d5a6:	83 c4 20             	add    esp,0x20
c001d5a9:	85 c0                	test   eax,eax
c001d5ab:	75 0e                	jne    c001d5bb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d5ad:	89 35 64 fc 02 c0    	mov    DWORD PTR ds:0xc002fc64,esi
c001d5b3:	88 1d c4 6e 02 c0    	mov    BYTE PTR ds:0xc0026ec4,bl
c001d5b9:	eb 18                	jmp    c001d5d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d5bb:	50                   	push   eax
c001d5bc:	68 00 08 00 00       	push   0x800
c001d5c1:	6a 00                	push   0x0
c001d5c3:	57                   	push   edi
c001d5c4:	e8 27 2f fe ff       	call   c00004f0 <memset>
c001d5c9:	83 c4 10             	add    esp,0x10
c001d5cc:	b8 01 00 00 00       	mov    eax,0x1
c001d5d1:	eb 0e                	jmp    c001d5e1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d5d3:	be 80 fc 02 c0       	mov    esi,0xc002fc80
c001d5d8:	b9 00 08 00 00       	mov    ecx,0x800
c001d5dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d5df:	31 c0                	xor    eax,eax
c001d5e1:	5b                   	pop    ebx
c001d5e2:	5e                   	pop    esi
c001d5e3:	5f                   	pop    edi
c001d5e4:	c3                   	ret    
c001d5e5:	90                   	nop

c001d5e6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001d5e6:	53                   	push   ebx
c001d5e7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d5ed:	c7 05 64 fc 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002fc64,0xdeadbeef
c001d5f7:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d5fe:	8d 58 41             	lea    ebx,[eax+0x41]
c001d601:	0f be db             	movsx  ebx,bl
c001d604:	53                   	push   ebx
c001d605:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d609:	50                   	push   eax
c001d60a:	6a 10                	push   0x10
c001d60c:	e8 56 ff ff ff       	call   c001d567 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d611:	83 c4 10             	add    esp,0x10
c001d614:	31 d2                	xor    edx,edx
c001d616:	85 c0                	test   eax,eax
c001d618:	75 33                	jne    c001d64d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d61a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d61f:	75 2c                	jne    c001d64d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d621:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d626:	75 25                	jne    c001d64d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d628:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d62d:	75 1e                	jne    c001d64d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d62f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d634:	75 17                	jne    c001d64d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d636:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d63b:	75 10                	jne    c001d64d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d63d:	83 ec 0c             	sub    esp,0xc
c001d640:	53                   	push   ebx
c001d641:	e8 e8 95 fe ff       	call   c0006c2e <init_percd>
c001d646:	83 c4 10             	add    esp,0x10
c001d649:	40                   	inc    eax
c001d64a:	0f 95 c2             	setne  dl
c001d64d:	88 d0                	mov    al,dl
c001d64f:	81 c4 08 08 00 00    	add    esp,0x808
c001d655:	5b                   	pop    ebx
c001d656:	c3                   	ret    
c001d657:	90                   	nop

c001d658 <ISO9660::ISO9660()>:
c001d658:	83 ec 0c             	sub    esp,0xc
c001d65b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65f:	83 ec 0c             	sub    esp,0xc
c001d662:	50                   	push   eax
c001d663:	e8 60 a7 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001d668:	83 c4 10             	add    esp,0x10
c001d66b:	ba 6c 5c 02 c0       	mov    edx,0xc0025c6c
c001d670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d674:	89 10                	mov    DWORD PTR [eax],edx
c001d676:	e8 c5 96 fe ff       	call   c0006d40 <fs_iso9660_init>
c001d67b:	90                   	nop
c001d67c:	83 c4 0c             	add    esp,0xc
c001d67f:	c3                   	ret    

c001d680 <SoundCard::beginPlayback()>:
c001d680:	c7 44 24 04 d0 5c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025cd0
c001d688:	e9 59 29 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c001d68d:	90                   	nop

c001d68e <SoundCard::stopPlayback()>:
c001d68e:	c7 44 24 04 d0 5c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025cd0
c001d696:	e9 4b 29 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c001d69b:	90                   	nop

c001d69c <SoundCard::SoundCard(char const*)>:
c001d69c:	83 ec 1c             	sub    esp,0x1c
c001d69f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6a3:	83 ec 08             	sub    esp,0x8
c001d6a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6aa:	50                   	push   eax
c001d6ab:	e8 06 c5 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001d6b0:	83 c4 10             	add    esp,0x10
c001d6b3:	ba 1c 5d 02 c0       	mov    edx,0xc0025d1c
c001d6b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6bc:	89 10                	mov    DWORD PTR [eax],edx
c001d6be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6c2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d6c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6cd:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d6d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6db:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d6e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6e9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d6f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6f7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d701:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d709:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d70e:	7f 1a                	jg     c001d72a <SoundCard::SoundCard(char const*)+0x8e>
c001d710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d718:	83 c2 54             	add    edx,0x54
c001d71b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d723:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d728:	eb df                	jmp    c001d709 <SoundCard::SoundCard(char const*)+0x6d>
c001d72a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d72e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d735:	90                   	nop
c001d736:	83 c4 1c             	add    esp,0x1c
c001d739:	c3                   	ret    

c001d73a <SoundCard::~SoundCard()>:
c001d73a:	83 ec 0c             	sub    esp,0xc
c001d73d:	ba 1c 5d 02 c0       	mov    edx,0xc0025d1c
c001d742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d746:	89 10                	mov    DWORD PTR [eax],edx
c001d748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d74c:	83 ec 0c             	sub    esp,0xc
c001d74f:	50                   	push   eax
c001d750:	e8 01 c2 fe ff       	call   c0009956 <Device::~Device()>
c001d755:	83 c4 10             	add    esp,0x10
c001d758:	90                   	nop
c001d759:	83 c4 0c             	add    esp,0xc
c001d75c:	c3                   	ret    
c001d75d:	90                   	nop

c001d75e <SoundCard::~SoundCard()>:
c001d75e:	83 ec 0c             	sub    esp,0xc
c001d761:	83 ec 0c             	sub    esp,0xc
c001d764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d768:	e8 cd ff ff ff       	call   c001d73a <SoundCard::~SoundCard()>
c001d76d:	83 c4 10             	add    esp,0x10
c001d770:	83 ec 08             	sub    esp,0x8
c001d773:	68 e8 01 00 00       	push   0x1e8
c001d778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d77c:	e8 68 fc fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001d781:	83 c4 10             	add    esp,0x10
c001d784:	83 c4 0c             	add    esp,0xc
c001d787:	c3                   	ret    

c001d788 <SoundCard::configureRates(int, int, int)>:
c001d788:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d78c:	31 c0                	xor    eax,eax
c001d78e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d795:	75 20                	jne    c001d7b7 <SoundCard::configureRates(int, int, int)+0x2f>
c001d797:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d79b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d7a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7a5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7af:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d7b5:	b0 01                	mov    al,0x1
c001d7b7:	c3                   	ret    

c001d7b8 <SoundCard::getSamples16(int, short*)>:
c001d7b8:	55                   	push   ebp
c001d7b9:	57                   	push   edi
c001d7ba:	31 ff                	xor    edi,edi
c001d7bc:	56                   	push   esi
c001d7bd:	53                   	push   ebx
c001d7be:	31 db                	xor    ebx,ebx
c001d7c0:	83 ec 10             	sub    esp,0x10
c001d7c3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d7c7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d7cb:	8d 04 36             	lea    eax,[esi+esi*1]
c001d7ce:	50                   	push   eax
c001d7cf:	6a 00                	push   0x0
c001d7d1:	55                   	push   ebp
c001d7d2:	e8 19 2d fe ff       	call   c00004f0 <memset>
c001d7d7:	83 c4 10             	add    esp,0x10
c001d7da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7de:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d7e5:	85 c0                	test   eax,eax
c001d7e7:	74 1b                	je     c001d804 <SoundCard::getSamples16(int, short*)+0x4c>
c001d7e9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d7ed:	75 15                	jne    c001d804 <SoundCard::getSamples16(int, short*)+0x4c>
c001d7ef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d7f3:	55                   	push   ebp
c001d7f4:	56                   	push   esi
c001d7f5:	50                   	push   eax
c001d7f6:	e8 8d 03 00 00       	call   c001db88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d7fb:	83 c4 10             	add    esp,0x10
c001d7fe:	39 c7                	cmp    edi,eax
c001d800:	7d 02                	jge    c001d804 <SoundCard::getSamples16(int, short*)+0x4c>
c001d802:	89 c7                	mov    edi,eax
c001d804:	43                   	inc    ebx
c001d805:	83 fb 20             	cmp    ebx,0x20
c001d808:	75 d0                	jne    c001d7da <SoundCard::getSamples16(int, short*)+0x22>
c001d80a:	83 c4 0c             	add    esp,0xc
c001d80d:	89 f8                	mov    eax,edi
c001d80f:	5b                   	pop    ebx
c001d810:	5e                   	pop    esi
c001d811:	5f                   	pop    edi
c001d812:	5d                   	pop    ebp
c001d813:	c3                   	ret    

c001d814 <SoundCard::getSamples32(int, int*)>:
c001d814:	55                   	push   ebp
c001d815:	57                   	push   edi
c001d816:	31 ff                	xor    edi,edi
c001d818:	56                   	push   esi
c001d819:	31 f6                	xor    esi,esi
c001d81b:	53                   	push   ebx
c001d81c:	83 ec 10             	sub    esp,0x10
c001d81f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d823:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d827:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d82b:	c1 e0 02             	shl    eax,0x2
c001d82e:	50                   	push   eax
c001d82f:	6a 00                	push   0x0
c001d831:	55                   	push   ebp
c001d832:	e8 b9 2c fe ff       	call   c00004f0 <memset>
c001d837:	83 c4 10             	add    esp,0x10
c001d83a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d841:	85 c0                	test   eax,eax
c001d843:	74 1b                	je     c001d860 <SoundCard::getSamples32(int, int*)+0x4c>
c001d845:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d849:	75 15                	jne    c001d860 <SoundCard::getSamples32(int, int*)+0x4c>
c001d84b:	53                   	push   ebx
c001d84c:	55                   	push   ebp
c001d84d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d851:	50                   	push   eax
c001d852:	e8 fd 03 00 00       	call   c001dc54 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d857:	83 c4 10             	add    esp,0x10
c001d85a:	39 c6                	cmp    esi,eax
c001d85c:	7d 02                	jge    c001d860 <SoundCard::getSamples32(int, int*)+0x4c>
c001d85e:	89 c6                	mov    esi,eax
c001d860:	47                   	inc    edi
c001d861:	83 ff 20             	cmp    edi,0x20
c001d864:	75 d4                	jne    c001d83a <SoundCard::getSamples32(int, int*)+0x26>
c001d866:	85 f6                	test   esi,esi
c001d868:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d86f:	75 0f                	jne    c001d880 <SoundCard::getSamples32(int, int*)+0x6c>
c001d871:	85 c0                	test   eax,eax
c001d873:	74 1b                	je     c001d890 <SoundCard::getSamples32(int, int*)+0x7c>
c001d875:	83 ec 0c             	sub    esp,0xc
c001d878:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d87a:	53                   	push   ebx
c001d87b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d87e:	eb 0d                	jmp    c001d88d <SoundCard::getSamples32(int, int*)+0x79>
c001d880:	85 c0                	test   eax,eax
c001d882:	75 0c                	jne    c001d890 <SoundCard::getSamples32(int, int*)+0x7c>
c001d884:	83 ec 0c             	sub    esp,0xc
c001d887:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d889:	53                   	push   ebx
c001d88a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d88d:	83 c4 10             	add    esp,0x10
c001d890:	83 c4 0c             	add    esp,0xc
c001d893:	89 f0                	mov    eax,esi
c001d895:	5b                   	pop    ebx
c001d896:	5e                   	pop    esi
c001d897:	5f                   	pop    edi
c001d898:	5d                   	pop    ebp
c001d899:	c3                   	ret    

c001d89a <SoundCard::addChannel(SoundPort*)>:
c001d89a:	83 ec 0c             	sub    esp,0xc
c001d89d:	31 c0                	xor    eax,eax
c001d89f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d8a3:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d8ab:	74 1b                	je     c001d8c8 <SoundCard::addChannel(SoundPort*)+0x2e>
c001d8ad:	40                   	inc    eax
c001d8ae:	83 f8 20             	cmp    eax,0x20
c001d8b1:	75 f0                	jne    c001d8a3 <SoundCard::addChannel(SoundPort*)+0x9>
c001d8b3:	83 ec 0c             	sub    esp,0xc
c001d8b6:	68 f5 5c 02 c0       	push   0xc0025cf5
c001d8bb:	e8 26 27 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001d8c0:	83 c4 10             	add    esp,0x10
c001d8c3:	83 c8 ff             	or     eax,0xffffffff
c001d8c6:	eb 0b                	jmp    c001d8d3 <SoundCard::addChannel(SoundPort*)+0x39>
c001d8c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d8cc:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d8d3:	83 c4 0c             	add    esp,0xc
c001d8d6:	c3                   	ret    
c001d8d7:	90                   	nop

c001d8d8 <SoundCard::removeChannel(int)>:
c001d8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d8e0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d8eb:	c3                   	ret    

c001d8ec <SoundPort::SoundPort(int, int, int, int)>:
c001d8ec:	83 ec 0c             	sub    esp,0xc
c001d8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8f3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8fe:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d906:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d90a:	89 10                	mov    DWORD PTR [eax],edx
c001d90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d910:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d914:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d91b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d91f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d922:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d927:	75 13                	jne    c001d93c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d92d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d92f:	05 a0 0f 00 00       	add    eax,0xfa0
c001d934:	01 c0                	add    eax,eax
c001d936:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d93a:	66 90                	xchg   ax,ax
c001d93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d940:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d944:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d94b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d956:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d959:	c1 e0 02             	shl    eax,0x2
c001d95c:	83 ec 0c             	sub    esp,0xc
c001d95f:	50                   	push   eax
c001d960:	e8 2a 22 ff ff       	call   c000fb8f <malloc>
c001d965:	83 c4 10             	add    esp,0x10
c001d968:	89 c2                	mov    edx,eax
c001d96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d96e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d971:	90                   	nop
c001d972:	83 c4 0c             	add    esp,0xc
c001d975:	c3                   	ret    
c001d976:	66 90                	xchg   ax,ax

c001d978 <SoundPort::~SoundPort()>:
c001d978:	83 ec 0c             	sub    esp,0xc
c001d97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d97f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d982:	85 c0                	test   eax,eax
c001d984:	74 1e                	je     c001d9a4 <SoundPort::~SoundPort()+0x2c>
c001d986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d98a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d98d:	83 ec 0c             	sub    esp,0xc
c001d990:	50                   	push   eax
c001d991:	e8 09 22 ff ff       	call   c000fb9f <free>
c001d996:	83 c4 10             	add    esp,0x10
c001d999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d99d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d9a4:	90                   	nop
c001d9a5:	83 c4 0c             	add    esp,0xc
c001d9a8:	c3                   	ret    
c001d9a9:	90                   	nop
c001d9aa:	66 90                	xchg   ax,ax

c001d9ac <SoundPort::unpause()>:
c001d9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9b0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d9b4:	c3                   	ret    
c001d9b5:	90                   	nop
c001d9b6:	66 90                	xchg   ax,ax

c001d9b8 <SoundPort::pause()>:
c001d9b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9bc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d9c0:	c3                   	ret    
c001d9c1:	90                   	nop
c001d9c2:	66 90                	xchg   ax,ax

c001d9c4 <SoundPort::getBufferUsed()>:
c001d9c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d9cb:	c3                   	ret    

c001d9cc <SoundPort::getBufferSize()>:
c001d9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9d0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d9d3:	c3                   	ret    

c001d9d4 <SoundPort::buffer8(signed char*, int)>:
c001d9d4:	55                   	push   ebp
c001d9d5:	57                   	push   edi
c001d9d6:	56                   	push   esi
c001d9d7:	53                   	push   ebx
c001d9d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d9dc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d9e0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d9e3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d9e6:	74 70                	je     c001da58 <SoundPort::buffer8(signed char*, int)+0x84>
c001d9e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d9ec:	85 c9                	test   ecx,ecx
c001d9ee:	7e 68                	jle    c001da58 <SoundPort::buffer8(signed char*, int)+0x84>
c001d9f0:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d9f4:	8d 48 01             	lea    ecx,[eax+0x1]
c001d9f7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d9fa:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d9fd:	89 f1                	mov    ecx,esi
c001d9ff:	c1 e1 18             	shl    ecx,0x18
c001da02:	29 f1                	sub    ecx,esi
c001da04:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001da07:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001da0a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001da0d:	74 51                	je     c001da60 <SoundPort::buffer8(signed char*, int)+0x8c>
c001da0f:	31 ff                	xor    edi,edi
c001da11:	eb 25                	jmp    c001da38 <SoundPort::buffer8(signed char*, int)+0x64>
c001da13:	90                   	nop
c001da14:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001da19:	8d 59 01             	lea    ebx,[ecx+0x1]
c001da1c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001da1f:	89 f3                	mov    ebx,esi
c001da21:	c1 e3 18             	shl    ebx,0x18
c001da24:	29 f3                	sub    ebx,esi
c001da26:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001da29:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001da2c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001da2f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001da32:	74 1c                	je     c001da50 <SoundPort::buffer8(signed char*, int)+0x7c>
c001da34:	89 c7                	mov    edi,eax
c001da36:	66 90                	xchg   ax,ax
c001da38:	8d 47 01             	lea    eax,[edi+0x1]
c001da3b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001da3f:	75 d3                	jne    c001da14 <SoundPort::buffer8(signed char*, int)+0x40>
c001da41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da45:	8d 76 00             	lea    esi,[esi+0x0]
c001da48:	5b                   	pop    ebx
c001da49:	5e                   	pop    esi
c001da4a:	5f                   	pop    edi
c001da4b:	5d                   	pop    ebp
c001da4c:	c3                   	ret    
c001da4d:	8d 76 00             	lea    esi,[esi+0x0]
c001da50:	5b                   	pop    ebx
c001da51:	8d 47 02             	lea    eax,[edi+0x2]
c001da54:	5e                   	pop    esi
c001da55:	5f                   	pop    edi
c001da56:	5d                   	pop    ebp
c001da57:	c3                   	ret    
c001da58:	5b                   	pop    ebx
c001da59:	31 c0                	xor    eax,eax
c001da5b:	5e                   	pop    esi
c001da5c:	5f                   	pop    edi
c001da5d:	5d                   	pop    ebp
c001da5e:	c3                   	ret    
c001da5f:	90                   	nop
c001da60:	b8 01 00 00 00       	mov    eax,0x1
c001da65:	eb e1                	jmp    c001da48 <SoundPort::buffer8(signed char*, int)+0x74>
c001da67:	90                   	nop

c001da68 <SoundPort::buffer16(short*, int)>:
c001da68:	55                   	push   ebp
c001da69:	57                   	push   edi
c001da6a:	56                   	push   esi
c001da6b:	53                   	push   ebx
c001da6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da70:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001da74:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001da77:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001da7a:	74 70                	je     c001daec <SoundPort::buffer16(short*, int)+0x84>
c001da7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001da80:	85 c9                	test   ecx,ecx
c001da82:	7e 68                	jle    c001daec <SoundPort::buffer16(short*, int)+0x84>
c001da84:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001da88:	8d 48 01             	lea    ecx,[eax+0x1]
c001da8b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001da8e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001da91:	89 f1                	mov    ecx,esi
c001da93:	c1 e1 10             	shl    ecx,0x10
c001da96:	29 f1                	sub    ecx,esi
c001da98:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001da9b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001da9e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001daa1:	74 51                	je     c001daf4 <SoundPort::buffer16(short*, int)+0x8c>
c001daa3:	31 ff                	xor    edi,edi
c001daa5:	eb 25                	jmp    c001dacc <SoundPort::buffer16(short*, int)+0x64>
c001daa7:	90                   	nop
c001daa8:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001daad:	8d 59 01             	lea    ebx,[ecx+0x1]
c001dab0:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001dab3:	89 f3                	mov    ebx,esi
c001dab5:	c1 e3 10             	shl    ebx,0x10
c001dab8:	29 f3                	sub    ebx,esi
c001daba:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001dabd:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001dac0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dac3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dac6:	74 1c                	je     c001dae4 <SoundPort::buffer16(short*, int)+0x7c>
c001dac8:	89 c7                	mov    edi,eax
c001daca:	66 90                	xchg   ax,ax
c001dacc:	8d 47 01             	lea    eax,[edi+0x1]
c001dacf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001dad3:	75 d3                	jne    c001daa8 <SoundPort::buffer16(short*, int)+0x40>
c001dad5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dad9:	8d 76 00             	lea    esi,[esi+0x0]
c001dadc:	5b                   	pop    ebx
c001dadd:	5e                   	pop    esi
c001dade:	5f                   	pop    edi
c001dadf:	5d                   	pop    ebp
c001dae0:	c3                   	ret    
c001dae1:	8d 76 00             	lea    esi,[esi+0x0]
c001dae4:	5b                   	pop    ebx
c001dae5:	8d 47 02             	lea    eax,[edi+0x2]
c001dae8:	5e                   	pop    esi
c001dae9:	5f                   	pop    edi
c001daea:	5d                   	pop    ebp
c001daeb:	c3                   	ret    
c001daec:	5b                   	pop    ebx
c001daed:	31 c0                	xor    eax,eax
c001daef:	5e                   	pop    esi
c001daf0:	5f                   	pop    edi
c001daf1:	5d                   	pop    ebp
c001daf2:	c3                   	ret    
c001daf3:	90                   	nop
c001daf4:	b8 01 00 00 00       	mov    eax,0x1
c001daf9:	eb e1                	jmp    c001dadc <SoundPort::buffer16(short*, int)+0x74>
c001dafb:	90                   	nop

c001dafc <SoundPort::buffer32(int*, int)>:
c001dafc:	55                   	push   ebp
c001dafd:	57                   	push   edi
c001dafe:	56                   	push   esi
c001daff:	53                   	push   ebx
c001db00:	83 ec 04             	sub    esp,0x4
c001db03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001db0e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001db12:	89 04 24             	mov    DWORD PTR [esp],eax
c001db15:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001db18:	74 5a                	je     c001db74 <SoundPort::buffer32(int*, int)+0x78>
c001db1a:	85 c0                	test   eax,eax
c001db1c:	7e 56                	jle    c001db74 <SoundPort::buffer32(int*, int)+0x78>
c001db1e:	8d 71 01             	lea    esi,[ecx+0x1]
c001db21:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001db24:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001db27:	8b 37                	mov    esi,DWORD PTR [edi]
c001db29:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001db2c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001db2f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001db32:	74 4c                	je     c001db80 <SoundPort::buffer32(int*, int)+0x84>
c001db34:	31 f6                	xor    esi,esi
c001db36:	eb 1c                	jmp    c001db54 <SoundPort::buffer32(int*, int)+0x58>
c001db38:	8d 69 01             	lea    ebp,[ecx+0x1]
c001db3b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001db3e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001db41:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001db44:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001db48:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001db4b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001db4e:	74 18                	je     c001db68 <SoundPort::buffer32(int*, int)+0x6c>
c001db50:	89 de                	mov    esi,ebx
c001db52:	66 90                	xchg   ax,ax
c001db54:	8d 5e 01             	lea    ebx,[esi+0x1]
c001db57:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001db5a:	75 dc                	jne    c001db38 <SoundPort::buffer32(int*, int)+0x3c>
c001db5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001db5f:	90                   	nop
c001db60:	83 c4 04             	add    esp,0x4
c001db63:	5b                   	pop    ebx
c001db64:	5e                   	pop    esi
c001db65:	5f                   	pop    edi
c001db66:	5d                   	pop    ebp
c001db67:	c3                   	ret    
c001db68:	83 c4 04             	add    esp,0x4
c001db6b:	8d 46 02             	lea    eax,[esi+0x2]
c001db6e:	5b                   	pop    ebx
c001db6f:	5e                   	pop    esi
c001db70:	5f                   	pop    edi
c001db71:	5d                   	pop    ebp
c001db72:	c3                   	ret    
c001db73:	90                   	nop
c001db74:	83 c4 04             	add    esp,0x4
c001db77:	31 c0                	xor    eax,eax
c001db79:	5b                   	pop    ebx
c001db7a:	5e                   	pop    esi
c001db7b:	5f                   	pop    edi
c001db7c:	5d                   	pop    ebp
c001db7d:	c3                   	ret    
c001db7e:	66 90                	xchg   ax,ax
c001db80:	b8 01 00 00 00       	mov    eax,0x1
c001db85:	eb d9                	jmp    c001db60 <SoundPort::buffer32(int*, int)+0x64>
c001db87:	90                   	nop

c001db88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001db88:	57                   	push   edi
c001db89:	56                   	push   esi
c001db8a:	53                   	push   ebx
c001db8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db8f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001db93:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001db99:	39 03                	cmp    DWORD PTR [ebx],eax
c001db9b:	74 13                	je     c001dbb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001db9d:	83 ec 0c             	sub    esp,0xc
c001dba0:	68 48 5d 02 c0       	push   0xc0025d48
c001dba5:	e8 3c 24 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dbaa:	83 c4 10             	add    esp,0x10
c001dbad:	8d 76 00             	lea    esi,[esi+0x0]
c001dbb0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001dbb6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001dbb9:	74 11                	je     c001dbcc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001dbbb:	83 ec 0c             	sub    esp,0xc
c001dbbe:	68 87 5d 02 c0       	push   0xc0025d87
c001dbc3:	e8 1e 24 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dbc8:	83 c4 10             	add    esp,0x10
c001dbcb:	90                   	nop
c001dbcc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001dbd2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001dbd5:	74 11                	je     c001dbe8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001dbd7:	83 ec 0c             	sub    esp,0xc
c001dbda:	68 87 5d 02 c0       	push   0xc0025d87
c001dbdf:	e8 02 24 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dbe4:	83 c4 10             	add    esp,0x10
c001dbe7:	90                   	nop
c001dbe8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001dbeb:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001dbef:	7e 07                	jle    c001dbf8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001dbf1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dbf5:	8d 76 00             	lea    esi,[esi+0x0]
c001dbf8:	85 f6                	test   esi,esi
c001dbfa:	7e 2c                	jle    c001dc28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001dbfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dc00:	8d 3c 36             	lea    edi,[esi+esi*1]
c001dc03:	31 c9                	xor    ecx,ecx
c001dc05:	01 d7                	add    edi,edx
c001dc07:	90                   	nop
c001dc08:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001dc0b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001dc0e:	85 c0                	test   eax,eax
c001dc10:	79 06                	jns    c001dc18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001dc12:	05 ff 7f 00 00       	add    eax,0x7fff
c001dc17:	90                   	nop
c001dc18:	c1 f8 0f             	sar    eax,0xf
c001dc1b:	83 c1 04             	add    ecx,0x4
c001dc1e:	66 01 02             	add    WORD PTR [edx],ax
c001dc21:	83 c2 02             	add    edx,0x2
c001dc24:	39 d7                	cmp    edi,edx
c001dc26:	75 e0                	jne    c001dc08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001dc28:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dc2b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dc2e:	83 ec 04             	sub    esp,0x4
c001dc31:	29 f0                	sub    eax,esi
c001dc33:	c1 e0 02             	shl    eax,0x2
c001dc36:	50                   	push   eax
c001dc37:	8d 04 b2             	lea    eax,[edx+esi*4]
c001dc3a:	50                   	push   eax
c001dc3b:	52                   	push   edx
c001dc3c:	e8 8f 27 fe ff       	call   c00003d0 <memmove>
c001dc41:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001dc44:	83 c4 10             	add    esp,0x10
c001dc47:	29 f0                	sub    eax,esi
c001dc49:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001dc4c:	89 f0                	mov    eax,esi
c001dc4e:	5b                   	pop    ebx
c001dc4f:	5e                   	pop    esi
c001dc50:	5f                   	pop    edi
c001dc51:	c3                   	ret    
c001dc52:	66 90                	xchg   ax,ax

c001dc54 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001dc54:	57                   	push   edi
c001dc55:	56                   	push   esi
c001dc56:	53                   	push   ebx
c001dc57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dc5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dc5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dc63:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001dc69:	39 06                	cmp    DWORD PTR [esi],eax
c001dc6b:	74 13                	je     c001dc80 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001dc6d:	83 ec 0c             	sub    esp,0xc
c001dc70:	68 68 5d 02 c0       	push   0xc0025d68
c001dc75:	e8 6c 23 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dc7a:	83 c4 10             	add    esp,0x10
c001dc7d:	8d 76 00             	lea    esi,[esi+0x0]
c001dc80:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001dc86:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001dc89:	74 11                	je     c001dc9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001dc8b:	83 ec 0c             	sub    esp,0xc
c001dc8e:	68 a3 5d 02 c0       	push   0xc0025da3
c001dc93:	e8 4e 23 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dc98:	83 c4 10             	add    esp,0x10
c001dc9b:	90                   	nop
c001dc9c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001dca2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001dca5:	74 11                	je     c001dcb8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001dca7:	83 ec 0c             	sub    esp,0xc
c001dcaa:	68 a3 5d 02 c0       	push   0xc0025da3
c001dcaf:	e8 32 23 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dcb4:	83 c4 10             	add    esp,0x10
c001dcb7:	90                   	nop
c001dcb8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001dcbb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001dcbf:	7e 07                	jle    c001dcc8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001dcc1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dcc5:	8d 76 00             	lea    esi,[esi+0x0]
c001dcc8:	85 ff                	test   edi,edi
c001dcca:	7e 1c                	jle    c001dce8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001dccc:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001dcd3:	31 c0                	xor    eax,eax
c001dcd5:	8d 76 00             	lea    esi,[esi+0x0]
c001dcd8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001dcdb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001dcde:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001dce1:	83 c0 04             	add    eax,0x4
c001dce4:	39 c1                	cmp    ecx,eax
c001dce6:	75 f0                	jne    c001dcd8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001dce8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001dceb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001dcee:	83 ec 04             	sub    esp,0x4
c001dcf1:	29 f8                	sub    eax,edi
c001dcf3:	c1 e0 02             	shl    eax,0x2
c001dcf6:	50                   	push   eax
c001dcf7:	8d 04 ba             	lea    eax,[edx+edi*4]
c001dcfa:	50                   	push   eax
c001dcfb:	52                   	push   edx
c001dcfc:	e8 cf 26 fe ff       	call   c00003d0 <memmove>
c001dd01:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001dd04:	83 c4 10             	add    esp,0x10
c001dd07:	29 f8                	sub    eax,edi
c001dd09:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001dd0c:	89 f8                	mov    eax,edi
c001dd0e:	5b                   	pop    ebx
c001dd0f:	5e                   	pop    esi
c001dd10:	5f                   	pop    edi
c001dd11:	c3                   	ret    

c001dd12 <PCI::open(int, int, void*)>:
c001dd12:	83 ec 18             	sub    esp,0x18
c001dd15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dd1d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd23:	8b 10                	mov    edx,DWORD PTR [eax]
c001dd25:	50                   	push   eax
c001dd26:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001dd29:	31 c0                	xor    eax,eax
c001dd2b:	83 c4 1c             	add    esp,0x1c
c001dd2e:	c3                   	ret    
c001dd2f:	90                   	nop

c001dd30 <PCI::close(int, int, void*)>:
c001dd30:	31 c0                	xor    eax,eax
c001dd32:	c3                   	ret    
c001dd33:	90                   	nop

c001dd34 <PCI::PCI()>:
c001dd34:	83 ec 0c             	sub    esp,0xc
c001dd37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd3b:	83 ec 08             	sub    esp,0x8
c001dd3e:	68 bf 5d 02 c0       	push   0xc0025dbf
c001dd43:	50                   	push   eax
c001dd44:	e8 1b ac fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001dd49:	83 c4 10             	add    esp,0x10
c001dd4c:	ba cc 5e 02 c0       	mov    edx,0xc0025ecc
c001dd51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd55:	89 10                	mov    DWORD PTR [eax],edx
c001dd57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd5b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001dd65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd69:	a3 80 04 03 c0       	mov    ds:0xc0030480,eax
c001dd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd72:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd78:	0f b6 d0             	movzx  edx,al
c001dd7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd7f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001dd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd8a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd90:	0f b6 d0             	movzx  edx,al
c001dd93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd97:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001dd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dda0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dda6:	8d 50 01             	lea    edx,[eax+0x1]
c001dda9:	88 d1                	mov    cl,dl
c001ddab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ddaf:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ddb5:	0f b6 d0             	movzx  edx,al
c001ddb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddbc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ddc0:	83 c9 c0             	or     ecx,0xffffffc0
c001ddc3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ddc7:	90                   	nop
c001ddc8:	83 c4 0c             	add    esp,0xc
c001ddcb:	c3                   	ret    

c001ddcc <PCI::readBAR8(unsigned int, int)>:
c001ddcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ddd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddd4:	f6 c2 01             	test   dl,0x1
c001ddd7:	74 07                	je     c001dde0 <PCI::readBAR8(unsigned int, int)+0x14>
c001ddd9:	83 e2 fc             	and    edx,0xfffffffc
c001dddc:	01 c2                	add    edx,eax
c001ddde:	ec                   	in     al,dx
c001dddf:	c3                   	ret    
c001dde0:	83 e2 f0             	and    edx,0xfffffff0
c001dde3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001dde6:	c3                   	ret    
c001dde7:	90                   	nop

c001dde8 <PCI::readBAR16(unsigned int, int)>:
c001dde8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ddec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddf0:	f6 c2 01             	test   dl,0x1
c001ddf3:	74 08                	je     c001ddfd <PCI::readBAR16(unsigned int, int)+0x15>
c001ddf5:	83 e2 fc             	and    edx,0xfffffffc
c001ddf8:	01 c2                	add    edx,eax
c001ddfa:	66 ed                	in     ax,dx
c001ddfc:	c3                   	ret    
c001ddfd:	83 e2 f0             	and    edx,0xfffffff0
c001de00:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001de04:	c3                   	ret    
c001de05:	90                   	nop

c001de06 <PCI::readBAR32(unsigned int, int)>:
c001de06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de0e:	f6 c2 01             	test   dl,0x1
c001de11:	74 07                	je     c001de1a <PCI::readBAR32(unsigned int, int)+0x14>
c001de13:	83 e2 fc             	and    edx,0xfffffffc
c001de16:	01 c2                	add    edx,eax
c001de18:	ed                   	in     eax,dx
c001de19:	c3                   	ret    
c001de1a:	83 e2 f0             	and    edx,0xfffffff0
c001de1d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001de20:	c3                   	ret    
c001de21:	90                   	nop

c001de22 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001de22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de2e:	f6 c2 01             	test   dl,0x1
c001de31:	74 07                	je     c001de3a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001de33:	83 e2 fc             	and    edx,0xfffffffc
c001de36:	01 ca                	add    edx,ecx
c001de38:	ee                   	out    dx,al
c001de39:	c3                   	ret    
c001de3a:	83 e2 f0             	and    edx,0xfffffff0
c001de3d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001de40:	c3                   	ret    
c001de41:	90                   	nop

c001de42 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001de42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de4a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de4e:	f6 c2 01             	test   dl,0x1
c001de51:	74 08                	je     c001de5b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001de53:	83 e2 fc             	and    edx,0xfffffffc
c001de56:	01 ca                	add    edx,ecx
c001de58:	66 ef                	out    dx,ax
c001de5a:	c3                   	ret    
c001de5b:	83 e2 f0             	and    edx,0xfffffff0
c001de5e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001de62:	c3                   	ret    
c001de63:	90                   	nop

c001de64 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001de64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de70:	f6 c2 01             	test   dl,0x1
c001de73:	74 07                	je     c001de7c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001de75:	83 e2 fc             	and    edx,0xfffffffc
c001de78:	01 ca                	add    edx,ecx
c001de7a:	ef                   	out    dx,eax
c001de7b:	c3                   	ret    
c001de7c:	83 e2 f0             	and    edx,0xfffffff0
c001de7f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001de82:	c3                   	ret    
c001de83:	90                   	nop

c001de84 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001de84:	55                   	push   ebp
c001de85:	57                   	push   edi
c001de86:	56                   	push   esi
c001de87:	53                   	push   ebx
c001de88:	83 ec 0c             	sub    esp,0xc
c001de8b:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001de90:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001de94:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001de98:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001de9c:	83 fe 07             	cmp    esi,0x7
c001de9f:	76 10                	jbe    c001deb1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001dea1:	83 ec 0c             	sub    esp,0xc
c001dea4:	68 c7 5d 02 c0       	push   0xc0025dc7
c001dea9:	e8 38 21 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001deae:	83 c4 10             	add    esp,0x10
c001deb1:	0f b6 db             	movzx  ebx,bl
c001deb4:	83 fb 0f             	cmp    ebx,0xf
c001deb7:	76 10                	jbe    c001dec9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001deb9:	83 ec 0c             	sub    esp,0xc
c001debc:	68 f7 5d 02 c0       	push   0xc0025df7
c001dec1:	e8 20 21 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dec6:	83 c4 10             	add    esp,0x10
c001dec9:	8d 04 36             	lea    eax,[esi+esi*1]
c001decc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ded1:	83 c8 f0             	or     eax,0xfffffff0
c001ded4:	ee                   	out    dx,al
c001ded5:	ba fa 0c 00 00       	mov    edx,0xcfa
c001deda:	89 e8                	mov    eax,ebp
c001dedc:	ee                   	out    dx,al
c001dedd:	83 c4 0c             	add    esp,0xc
c001dee0:	89 d8                	mov    eax,ebx
c001dee2:	89 f9                	mov    ecx,edi
c001dee4:	c1 e0 08             	shl    eax,0x8
c001dee7:	0f b6 d9             	movzx  ebx,cl
c001deea:	83 e3 fc             	and    ebx,0xfffffffc
c001deed:	09 d8                	or     eax,ebx
c001deef:	5b                   	pop    ebx
c001def0:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001def5:	5e                   	pop    esi
c001def6:	5f                   	pop    edi
c001def7:	5d                   	pop    ebp
c001def8:	c3                   	ret    
c001def9:	90                   	nop

c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001defa:	57                   	push   edi
c001defb:	56                   	push   esi
c001defc:	53                   	push   ebx
c001defd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df05:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001df0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001df0f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001df13:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001df17:	83 ff 01             	cmp    edi,0x1
c001df1a:	75 3f                	jne    c001df5b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001df1c:	89 de                	mov    esi,ebx
c001df1e:	0f b6 c0             	movzx  eax,al
c001df21:	81 e6 fc 00 00 00    	and    esi,0xfc
c001df27:	c1 e0 10             	shl    eax,0x10
c001df2a:	0f b6 c9             	movzx  ecx,cl
c001df2d:	09 f0                	or     eax,esi
c001df2f:	c1 e1 08             	shl    ecx,0x8
c001df32:	0f b6 d2             	movzx  edx,dl
c001df35:	09 c8                	or     eax,ecx
c001df37:	c1 e2 0b             	shl    edx,0xb
c001df3a:	09 d0                	or     eax,edx
c001df3c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001df41:	0d 00 00 00 80       	or     eax,0x80000000
c001df46:	ef                   	out    dx,eax
c001df47:	ba fc 0c 00 00       	mov    edx,0xcfc
c001df4c:	ed                   	in     eax,dx
c001df4d:	83 e3 02             	and    ebx,0x2
c001df50:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001df57:	d3 e8                	shr    eax,cl
c001df59:	eb 44                	jmp    c001df9f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001df5b:	83 ff 02             	cmp    edi,0x2
c001df5e:	75 2d                	jne    c001df8d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001df60:	83 ec 0c             	sub    esp,0xc
c001df63:	0f b6 c9             	movzx  ecx,cl
c001df66:	0f b6 d2             	movzx  edx,dl
c001df69:	0f b6 fb             	movzx  edi,bl
c001df6c:	0f b6 c0             	movzx  eax,al
c001df6f:	57                   	push   edi
c001df70:	51                   	push   ecx
c001df71:	52                   	push   edx
c001df72:	50                   	push   eax
c001df73:	56                   	push   esi
c001df74:	e8 0b ff ff ff       	call   c001de84 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df79:	89 c2                	mov    edx,eax
c001df7b:	ed                   	in     eax,dx
c001df7c:	83 e3 02             	and    ebx,0x2
c001df7f:	83 c4 20             	add    esp,0x20
c001df82:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001df89:	d3 e8                	shr    eax,cl
c001df8b:	eb 12                	jmp    c001df9f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001df8d:	83 ec 0c             	sub    esp,0xc
c001df90:	68 27 5e 02 c0       	push   0xc0025e27
c001df95:	e8 4c 20 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001df9a:	83 c4 10             	add    esp,0x10
c001df9d:	31 c0                	xor    eax,eax
c001df9f:	5b                   	pop    ebx
c001dfa0:	5e                   	pop    esi
c001dfa1:	5f                   	pop    edi
c001dfa2:	c3                   	ret    
c001dfa3:	90                   	nop

c001dfa4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001dfa4:	83 ec 18             	sub    esp,0x18
c001dfa7:	6a 00                	push   0x0
c001dfa9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfae:	50                   	push   eax
c001dfaf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfb4:	50                   	push   eax
c001dfb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfba:	50                   	push   eax
c001dfbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfbf:	e8 36 ff ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfc4:	83 c4 2c             	add    esp,0x2c
c001dfc7:	c3                   	ret    

c001dfc8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001dfc8:	83 ec 18             	sub    esp,0x18
c001dfcb:	6a 0e                	push   0xe
c001dfcd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfd2:	50                   	push   eax
c001dfd3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfd8:	50                   	push   eax
c001dfd9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfde:	50                   	push   eax
c001dfdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfe3:	e8 12 ff ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfe8:	83 c4 2c             	add    esp,0x2c
c001dfeb:	0f b6 c0             	movzx  eax,al
c001dfee:	c3                   	ret    
c001dfef:	90                   	nop

c001dff0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001dff0:	55                   	push   ebp
c001dff1:	57                   	push   edi
c001dff2:	56                   	push   esi
c001dff3:	53                   	push   ebx
c001dff4:	83 ec 18             	sub    esp,0x18
c001dff7:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001dffc:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001e001:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001e006:	6a 0a                	push   0xa
c001e008:	56                   	push   esi
c001e009:	55                   	push   ebp
c001e00a:	57                   	push   edi
c001e00b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e00f:	e8 e6 fe ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e014:	83 c4 14             	add    esp,0x14
c001e017:	89 c3                	mov    ebx,eax
c001e019:	6a 0a                	push   0xa
c001e01b:	0f b6 db             	movzx  ebx,bl
c001e01e:	56                   	push   esi
c001e01f:	55                   	push   ebp
c001e020:	57                   	push   edi
c001e021:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e025:	e8 d0 fe ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e02a:	83 c4 2c             	add    esp,0x2c
c001e02d:	25 00 ff 00 00       	and    eax,0xff00
c001e032:	09 d8                	or     eax,ebx
c001e034:	5b                   	pop    ebx
c001e035:	5e                   	pop    esi
c001e036:	5f                   	pop    edi
c001e037:	5d                   	pop    ebp
c001e038:	c3                   	ret    
c001e039:	90                   	nop

c001e03a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001e03a:	83 ec 18             	sub    esp,0x18
c001e03d:	6a 08                	push   0x8
c001e03f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e044:	50                   	push   eax
c001e045:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e04a:	50                   	push   eax
c001e04b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e050:	50                   	push   eax
c001e051:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e055:	e8 a0 fe ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e05a:	83 c4 2c             	add    esp,0x2c
c001e05d:	0f b6 c4             	movzx  eax,ah
c001e060:	c3                   	ret    
c001e061:	90                   	nop

c001e062 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001e062:	83 ec 18             	sub    esp,0x18
c001e065:	6a 08                	push   0x8
c001e067:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e06c:	50                   	push   eax
c001e06d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e072:	50                   	push   eax
c001e073:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e078:	50                   	push   eax
c001e079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e07d:	e8 78 fe ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e082:	83 c4 2c             	add    esp,0x2c
c001e085:	c3                   	ret    

c001e086 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001e086:	83 ec 18             	sub    esp,0x18
c001e089:	6a 3c                	push   0x3c
c001e08b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e090:	50                   	push   eax
c001e091:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e096:	50                   	push   eax
c001e097:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e09c:	50                   	push   eax
c001e09d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0a1:	e8 54 fe ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0a6:	83 c4 2c             	add    esp,0x2c
c001e0a9:	c3                   	ret    

c001e0aa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001e0aa:	83 ec 18             	sub    esp,0x18
c001e0ad:	6a 18                	push   0x18
c001e0af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0b4:	50                   	push   eax
c001e0b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0ba:	50                   	push   eax
c001e0bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0c0:	50                   	push   eax
c001e0c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0c5:	e8 30 fe ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0ca:	83 c4 2c             	add    esp,0x2c
c001e0cd:	0f b6 c4             	movzx  eax,ah
c001e0d0:	c3                   	ret    
c001e0d1:	90                   	nop

c001e0d2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e0d2:	55                   	push   ebp
c001e0d3:	57                   	push   edi
c001e0d4:	56                   	push   esi
c001e0d5:	53                   	push   ebx
c001e0d6:	83 ec 28             	sub    esp,0x28
c001e0d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e0dd:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001e0e2:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001e0e7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001e0ec:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001e0f3:	8d 43 12             	lea    eax,[ebx+0x12]
c001e0f6:	83 c3 10             	add    ebx,0x10
c001e0f9:	0f b6 c0             	movzx  eax,al
c001e0fc:	0f b6 db             	movzx  ebx,bl
c001e0ff:	50                   	push   eax
c001e100:	51                   	push   ecx
c001e101:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001e105:	57                   	push   edi
c001e106:	55                   	push   ebp
c001e107:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e10b:	e8 ea fd ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e110:	83 c4 14             	add    esp,0x14
c001e113:	89 c6                	mov    esi,eax
c001e115:	53                   	push   ebx
c001e116:	c1 e6 10             	shl    esi,0x10
c001e119:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e11d:	51                   	push   ecx
c001e11e:	57                   	push   edi
c001e11f:	55                   	push   ebp
c001e120:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e124:	e8 d1 fd ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e129:	83 c4 3c             	add    esp,0x3c
c001e12c:	0f b7 c0             	movzx  eax,ax
c001e12f:	5b                   	pop    ebx
c001e130:	09 f0                	or     eax,esi
c001e132:	5e                   	pop    esi
c001e133:	5f                   	pop    edi
c001e134:	5d                   	pop    ebp
c001e135:	c3                   	ret    

c001e136 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e136:	55                   	push   ebp
c001e137:	57                   	push   edi
c001e138:	56                   	push   esi
c001e139:	53                   	push   ebx
c001e13a:	83 ec 0c             	sub    esp,0xc
c001e13d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e141:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e145:	89 f5                	mov    ebp,esi
c001e147:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001e14d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e151:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e155:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e159:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e15d:	83 f9 01             	cmp    ecx,0x1
c001e160:	75 5d                	jne    c001e1bf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001e162:	0f b6 c8             	movzx  ecx,al
c001e165:	0f b6 d2             	movzx  edx,dl
c001e168:	c1 e1 10             	shl    ecx,0x10
c001e16b:	c1 e2 0b             	shl    edx,0xb
c001e16e:	89 f0                	mov    eax,esi
c001e170:	25 fc 00 00 00       	and    eax,0xfc
c001e175:	09 c1                	or     ecx,eax
c001e177:	89 e8                	mov    eax,ebp
c001e179:	0f b6 c0             	movzx  eax,al
c001e17c:	c1 e0 08             	shl    eax,0x8
c001e17f:	09 c1                	or     ecx,eax
c001e181:	09 d1                	or     ecx,edx
c001e183:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e188:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e18e:	89 c8                	mov    eax,ecx
c001e190:	ef                   	out    dx,eax
c001e191:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e196:	ed                   	in     eax,dx
c001e197:	0f b7 db             	movzx  ebx,bx
c001e19a:	83 e6 02             	and    esi,0x2
c001e19d:	74 0a                	je     c001e1a9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e19f:	0f b7 d0             	movzx  edx,ax
c001e1a2:	c1 e3 10             	shl    ebx,0x10
c001e1a5:	09 d3                	or     ebx,edx
c001e1a7:	eb 05                	jmp    c001e1ae <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e1a9:	66 31 c0             	xor    ax,ax
c001e1ac:	09 c3                	or     ebx,eax
c001e1ae:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e1b3:	89 c8                	mov    eax,ecx
c001e1b5:	ef                   	out    dx,eax
c001e1b6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e1bb:	89 d8                	mov    eax,ebx
c001e1bd:	eb 41                	jmp    c001e200 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e1bf:	83 f9 02             	cmp    ecx,0x2
c001e1c2:	75 45                	jne    c001e209 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	0f b6 d2             	movzx  edx,dl
c001e1ca:	89 f1                	mov    ecx,esi
c001e1cc:	0f b6 c0             	movzx  eax,al
c001e1cf:	0f b6 f1             	movzx  esi,cl
c001e1d2:	89 e9                	mov    ecx,ebp
c001e1d4:	56                   	push   esi
c001e1d5:	0f b6 c9             	movzx  ecx,cl
c001e1d8:	51                   	push   ecx
c001e1d9:	52                   	push   edx
c001e1da:	50                   	push   eax
c001e1db:	57                   	push   edi
c001e1dc:	e8 a3 fc ff ff       	call   c001de84 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1e1:	89 c2                	mov    edx,eax
c001e1e3:	ed                   	in     eax,dx
c001e1e4:	83 c4 20             	add    esp,0x20
c001e1e7:	0f b7 db             	movzx  ebx,bx
c001e1ea:	f6 c2 02             	test   dl,0x2
c001e1ed:	74 0c                	je     c001e1fb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e1ef:	0f b7 c8             	movzx  ecx,ax
c001e1f2:	89 d8                	mov    eax,ebx
c001e1f4:	c1 e0 10             	shl    eax,0x10
c001e1f7:	09 c8                	or     eax,ecx
c001e1f9:	eb 05                	jmp    c001e200 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e1fb:	66 31 c0             	xor    ax,ax
c001e1fe:	09 d8                	or     eax,ebx
c001e200:	ef                   	out    dx,eax
c001e201:	83 c4 0c             	add    esp,0xc
c001e204:	5b                   	pop    ebx
c001e205:	5e                   	pop    esi
c001e206:	5f                   	pop    edi
c001e207:	5d                   	pop    ebp
c001e208:	c3                   	ret    
c001e209:	c7 44 24 20 27 5e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025e27
c001e211:	83 c4 0c             	add    esp,0xc
c001e214:	5b                   	pop    ebx
c001e215:	5e                   	pop    esi
c001e216:	5f                   	pop    edi
c001e217:	5d                   	pop    ebp
c001e218:	e9 c9 1d ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c001e21d:	90                   	nop

c001e21e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e21e:	55                   	push   ebp
c001e21f:	57                   	push   edi
c001e220:	56                   	push   esi
c001e221:	53                   	push   ebx
c001e222:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e228:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001e22f:	80 3d 8c 04 03 c0 00 	cmp    BYTE PTR ds:0xc003048c,0x0
c001e236:	0f 85 bd 00 00 00    	jne    c001e2f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e23c:	83 ec 0c             	sub    esp,0xc
c001e23f:	68 14 01 00 00       	push   0x114
c001e244:	e8 46 19 ff ff       	call   c000fb8f <malloc>
c001e249:	83 c4 0c             	add    esp,0xc
c001e24c:	89 c3                	mov    ebx,eax
c001e24e:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c001e254:	68 2d 5e 02 c0       	push   0xc0025e2d
c001e259:	50                   	push   eax
c001e25a:	e8 2b 9f fe ff       	call   c000818a <File::File(char const*, Process*)>
c001e25f:	83 c4 10             	add    esp,0x10
c001e262:	85 db                	test   ebx,ebx
c001e264:	0f 84 67 02 00 00    	je     c001e4d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e26a:	56                   	push   esi
c001e26b:	56                   	push   esi
c001e26c:	6a 01                	push   0x1
c001e26e:	53                   	push   ebx
c001e26f:	e8 34 9f fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001e274:	83 c4 10             	add    esp,0x10
c001e277:	85 c0                	test   eax,eax
c001e279:	0f 85 52 02 00 00    	jne    c001e4d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e27f:	52                   	push   edx
c001e280:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e284:	50                   	push   eax
c001e285:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e289:	50                   	push   eax
c001e28a:	53                   	push   ebx
c001e28b:	e8 1a a2 fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001e290:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e294:	40                   	inc    eax
c001e295:	89 04 24             	mov    DWORD PTR [esp],eax
c001e298:	e8 f2 18 ff ff       	call   c000fb8f <malloc>
c001e29d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e2a1:	a3 88 04 03 c0       	mov    ds:0xc0030488,eax
c001e2a6:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e2aa:	59                   	pop    ecx
c001e2ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e2ad:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e2b1:	51                   	push   ecx
c001e2b2:	50                   	push   eax
c001e2b3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e2b7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e2bb:	53                   	push   ebx
c001e2bc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e2bf:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e2c3:	83 c4 20             	add    esp,0x20
c001e2c6:	89 c8                	mov    eax,ecx
c001e2c8:	99                   	cdq    
c001e2c9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e2cd:	0f 85 fe 01 00 00    	jne    c001e4d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e2d3:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e2d7:	0f 85 f4 01 00 00    	jne    c001e4d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e2dd:	83 ec 0c             	sub    esp,0xc
c001e2e0:	53                   	push   ebx
c001e2e1:	e8 20 9f fe ff       	call   c0008206 <File::close()>
c001e2e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e2ea:	c6 05 8c 04 03 c0 01 	mov    BYTE PTR ds:0xc003048c,0x1
c001e2f1:	a3 84 04 03 c0       	mov    ds:0xc0030484,eax
c001e2f6:	83 c4 10             	add    esp,0x10
c001e2f9:	a1 84 04 03 c0       	mov    eax,ds:0xc0030484
c001e2fe:	8b 1d 88 04 03 c0    	mov    ebx,DWORD PTR ds:0xc0030488
c001e304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e308:	31 f6                	xor    esi,esi
c001e30a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e312:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e319:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e31e:	31 c9                	xor    ecx,ecx
c001e320:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e328:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e32d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e335:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e339:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e341:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e345:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e349:	0f 8e 82 01 00 00    	jle    c001e4d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e34f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001e352:	d4 40                	aam    0x40
c001e354:	d5 39                	aad    0x39
c001e356:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e35a:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001e35e:	d4 40                	aam    0x40
c001e360:	d5 39                	aad    0x39
c001e362:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e366:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001e36a:	d4 40                	aam    0x40
c001e36c:	d5 39                	aad    0x39
c001e36e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e372:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001e376:	d4 40                	aam    0x40
c001e378:	d5 39                	aad    0x39
c001e37a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e37e:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001e382:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e386:	3c 56                	cmp    al,0x56
c001e388:	74 43                	je     c001e3cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001e38a:	d4 40                	aam    0x40
c001e38c:	d5 39                	aad    0x39
c001e38e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e391:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001e395:	0f b6 c9             	movzx  ecx,cl
c001e398:	c1 e1 04             	shl    ecx,0x4
c001e39b:	d4 40                	aam    0x40
c001e39d:	d5 39                	aad    0x39
c001e39f:	83 e8 30             	sub    eax,0x30
c001e3a2:	0f b6 c0             	movzx  eax,al
c001e3a5:	09 c1                	or     ecx,eax
c001e3a7:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001e3ab:	c1 e1 04             	shl    ecx,0x4
c001e3ae:	d4 40                	aam    0x40
c001e3b0:	d5 39                	aad    0x39
c001e3b2:	83 e8 30             	sub    eax,0x30
c001e3b5:	0f b6 c0             	movzx  eax,al
c001e3b8:	09 c1                	or     ecx,eax
c001e3ba:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001e3be:	c1 e1 04             	shl    ecx,0x4
c001e3c1:	d4 40                	aam    0x40
c001e3c3:	d5 39                	aad    0x39
c001e3c5:	83 e8 30             	sub    eax,0x30
c001e3c8:	0f b6 c0             	movzx  eax,al
c001e3cb:	09 c1                	or     ecx,eax
c001e3cd:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001e3d1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001e3d5:	3c 58                	cmp    al,0x58
c001e3d7:	74 47                	je     c001e420 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001e3d9:	d4 40                	aam    0x40
c001e3db:	d5 39                	aad    0x39
c001e3dd:	8d 50 d0             	lea    edx,[eax-0x30]
c001e3e0:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001e3e4:	0f b6 d2             	movzx  edx,dl
c001e3e7:	c1 e2 04             	shl    edx,0x4
c001e3ea:	d4 40                	aam    0x40
c001e3ec:	d5 39                	aad    0x39
c001e3ee:	83 e8 30             	sub    eax,0x30
c001e3f1:	0f b6 c0             	movzx  eax,al
c001e3f4:	09 c2                	or     edx,eax
c001e3f6:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001e3fa:	c1 e2 04             	shl    edx,0x4
c001e3fd:	d4 40                	aam    0x40
c001e3ff:	d5 39                	aad    0x39
c001e401:	83 e8 30             	sub    eax,0x30
c001e404:	0f b6 c0             	movzx  eax,al
c001e407:	09 c2                	or     edx,eax
c001e409:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001e40d:	c1 e2 04             	shl    edx,0x4
c001e410:	d4 40                	aam    0x40
c001e412:	d5 39                	aad    0x39
c001e414:	83 e8 30             	sub    eax,0x30
c001e417:	0f b6 c0             	movzx  eax,al
c001e41a:	09 c2                	or     edx,eax
c001e41c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e420:	83 c6 10             	add    esi,0x10
c001e423:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e427:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001e42b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001e42f:	83 fa 0a             	cmp    edx,0xa
c001e432:	74 0b                	je     c001e43f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001e434:	47                   	inc    edi
c001e435:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e439:	75 19                	jne    c001e454 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001e43b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001e43f:	31 c0                	xor    eax,eax
c001e441:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001e446:	0f 94 c0             	sete   al
c001e449:	01 c6                	add    esi,eax
c001e44b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e450:	75 0b                	jne    c001e45d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001e452:	eb 14                	jmp    c001e468 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001e454:	46                   	inc    esi
c001e455:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001e458:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e45b:	eb ca                	jmp    c001e427 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001e45d:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001e462:	0f 85 dd fe ff ff    	jne    c001e345 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e468:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001e46d:	74 10                	je     c001e47f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001e46f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e474:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e479:	0f 85 c6 fe ff ff    	jne    c001e345 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e47f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e483:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e487:	83 e8 30             	sub    eax,0x30
c001e48a:	83 ef 30             	sub    edi,0x30
c001e48d:	c1 e0 04             	shl    eax,0x4
c001e490:	09 f8                	or     eax,edi
c001e492:	0f b6 c0             	movzx  eax,al
c001e495:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e499:	0f 85 a6 fe ff ff    	jne    c001e345 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e49f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4a3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001e4a7:	83 e8 30             	sub    eax,0x30
c001e4aa:	83 ef 30             	sub    edi,0x30
c001e4ad:	c1 e0 04             	shl    eax,0x4
c001e4b0:	09 f8                	or     eax,edi
c001e4b2:	0f b6 c0             	movzx  eax,al
c001e4b5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e4b9:	0f 85 86 fe ff ff    	jne    c001e345 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e4bf:	50                   	push   eax
c001e4c0:	50                   	push   eax
c001e4c1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e4c5:	50                   	push   eax
c001e4c6:	55                   	push   ebp
c001e4c7:	e8 74 21 fe ff       	call   c0000640 <strcpy>
c001e4cc:	83 c4 10             	add    esp,0x10
c001e4cf:	eb 06                	jmp    c001e4d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001e4d1:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001e4d5:	31 ed                	xor    ebp,ebp
c001e4d7:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e4dd:	89 e8                	mov    eax,ebp
c001e4df:	5b                   	pop    ebx
c001e4e0:	5e                   	pop    esi
c001e4e1:	5f                   	pop    edi
c001e4e2:	5d                   	pop    ebp
c001e4e3:	c3                   	ret    

c001e4e4 <PCI::checkBus(unsigned char)>:
c001e4e4:	56                   	push   esi
c001e4e5:	53                   	push   ebx
c001e4e6:	31 db                	xor    ebx,ebx
c001e4e8:	51                   	push   ecx
c001e4e9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e4ee:	52                   	push   edx
c001e4ef:	53                   	push   ebx
c001e4f0:	43                   	inc    ebx
c001e4f1:	56                   	push   esi
c001e4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4f6:	e8 6f 03 00 00       	call   c001e86a <PCI::checkDevice(unsigned char, unsigned char)>
c001e4fb:	83 c4 10             	add    esp,0x10
c001e4fe:	83 fb 20             	cmp    ebx,0x20
c001e501:	75 eb                	jne    c001e4ee <PCI::checkBus(unsigned char)+0xa>
c001e503:	58                   	pop    eax
c001e504:	5b                   	pop    ebx
c001e505:	5e                   	pop    esi
c001e506:	c3                   	ret    
c001e507:	90                   	nop

c001e508 <PCI::foundDevice(PCIDeviceInfo)>:
c001e508:	55                   	push   ebp
c001e509:	57                   	push   edi
c001e50a:	56                   	push   esi
c001e50b:	53                   	push   ebx
c001e50c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e512:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e51a:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001e521:	3d ff ff 00 00       	cmp    eax,0xffff
c001e526:	0f 84 b7 01 00 00    	je     c001e6e3 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e52c:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001e534:	66 81 fb 06 04       	cmp    bx,0x406
c001e539:	75 32                	jne    c001e56d <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e53b:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e543:	50                   	push   eax
c001e544:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e54c:	50                   	push   eax
c001e54d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e555:	50                   	push   eax
c001e556:	55                   	push   ebp
c001e557:	e8 4e fb ff ff       	call   c001e0aa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e55c:	59                   	pop    ecx
c001e55d:	0f b6 c0             	movzx  eax,al
c001e560:	5b                   	pop    ebx
c001e561:	50                   	push   eax
c001e562:	55                   	push   ebp
c001e563:	e8 7c ff ff ff       	call   c001e4e4 <PCI::checkBus(unsigned char)>
c001e568:	e9 16 01 00 00       	jmp    c001e683 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001e56d:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e574:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001e57a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001e57e:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001e585:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001e58d:	85 c0                	test   eax,eax
c001e58f:	74 36                	je     c001e5c7 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001e591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e594:	85 d2                	test   edx,edx
c001e596:	74 2b                	je     c001e5c3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e598:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001e59e:	31 f9                	xor    ecx,edi
c001e5a0:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001e5a6:	75 1b                	jne    c001e5c3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e5a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5ac:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001e5b2:	75 0f                	jne    c001e5c3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e5b4:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e5bb:	39 f2                	cmp    edx,esi
c001e5bd:	0f 84 20 01 00 00    	je     c001e6e3 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e5c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5c5:	eb c6                	jmp    c001e58d <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e5c7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e5cb:	be 60 5e 02 c0       	mov    esi,0xc0025e60
c001e5d0:	b9 07 00 00 00       	mov    ecx,0x7
c001e5d5:	fc                   	cld    
c001e5d6:	31 d2                	xor    edx,edx
c001e5d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e5da:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e5e1:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e5e5:	b9 12 00 00 00       	mov    ecx,0x12
c001e5ea:	83 ec 0c             	sub    esp,0xc
c001e5ed:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e5ef:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e5f7:	b9 0a 00 00 00       	mov    ecx,0xa
c001e5fc:	f7 f1                	div    ecx
c001e5fe:	83 c0 30             	add    eax,0x30
c001e601:	83 c2 30             	add    edx,0x30
c001e604:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e608:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e60c:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e614:	31 d2                	xor    edx,edx
c001e616:	f7 f1                	div    ecx
c001e618:	83 c0 30             	add    eax,0x30
c001e61b:	83 c2 30             	add    edx,0x30
c001e61e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e622:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e626:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e62a:	50                   	push   eax
c001e62b:	e8 f9 ec fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001e630:	83 c4 10             	add    esp,0x10
c001e633:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001e639:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e640:	75 46                	jne    c001e688 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001e642:	83 ec 0c             	sub    esp,0xc
c001e645:	68 64 01 00 00       	push   0x164
c001e64a:	e8 40 15 ff ff       	call   c000fb8f <malloc>
c001e64f:	89 c3                	mov    ebx,eax
c001e651:	89 04 24             	mov    DWORD PTR [esp],eax
c001e654:	e8 3b 11 00 00       	call   c001f794 <SATABus::SATABus()>
c001e659:	58                   	pop    eax
c001e65a:	5a                   	pop    edx
c001e65b:	53                   	push   ebx
c001e65c:	55                   	push   ebp
c001e65d:	e8 f2 b3 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001e662:	83 ec 1c             	sub    esp,0x1c
c001e665:	b9 09 00 00 00       	mov    ecx,0x9
c001e66a:	89 e7                	mov    edi,esp
c001e66c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e66e:	53                   	push   ebx
c001e66f:	e8 26 b3 fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001e674:	83 c4 30             	add    esp,0x30
c001e677:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e679:	6a 00                	push   0x0
c001e67b:	6a 00                	push   0x0
c001e67d:	6a 00                	push   0x0
c001e67f:	53                   	push   ebx
c001e680:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e683:	83 c4 10             	add    esp,0x10
c001e686:	eb 5b                	jmp    c001e6e3 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e688:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001e68e:	75 19                	jne    c001e6a9 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001e690:	83 ec 0c             	sub    esp,0xc
c001e693:	68 70 02 00 00       	push   0x270
c001e698:	e8 f2 14 ff ff       	call   c000fb8f <malloc>
c001e69d:	89 c3                	mov    ebx,eax
c001e69f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e6a2:	e8 93 02 00 00       	call   c001e93a <IDE::IDE()>
c001e6a7:	eb b0                	jmp    c001e659 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001e6a9:	83 ec 0c             	sub    esp,0xc
c001e6ac:	68 58 01 00 00       	push   0x158
c001e6b1:	e8 d9 14 ff ff       	call   c000fb8f <malloc>
c001e6b6:	89 c3                	mov    ebx,eax
c001e6b8:	58                   	pop    eax
c001e6b9:	5a                   	pop    edx
c001e6ba:	68 46 5e 02 c0       	push   0xc0025e46
c001e6bf:	53                   	push   ebx
c001e6c0:	e8 43 b6 fe ff       	call   c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>
c001e6c5:	59                   	pop    ecx
c001e6c6:	5f                   	pop    edi
c001e6c7:	53                   	push   ebx
c001e6c8:	55                   	push   ebp
c001e6c9:	e8 86 b3 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001e6ce:	83 ec 1c             	sub    esp,0x1c
c001e6d1:	b9 09 00 00 00       	mov    ecx,0x9
c001e6d6:	89 e7                	mov    edi,esp
c001e6d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e6da:	53                   	push   ebx
c001e6db:	e8 ba b2 fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001e6e0:	83 c4 30             	add    esp,0x30
c001e6e3:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e6e9:	5b                   	pop    ebx
c001e6ea:	5e                   	pop    esi
c001e6eb:	5f                   	pop    edi
c001e6ec:	5d                   	pop    ebp
c001e6ed:	c3                   	ret    

c001e6ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e6ee:	55                   	push   ebp
c001e6ef:	57                   	push   edi
c001e6f0:	56                   	push   esi
c001e6f1:	53                   	push   ebx
c001e6f2:	83 ec 68             	sub    esp,0x68
c001e6f5:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e6f9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e700:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e704:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e70b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e710:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e714:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e71b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e720:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e724:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e729:	6a 0c                	push   0xc
c001e72b:	57                   	push   edi
c001e72c:	53                   	push   ebx
c001e72d:	56                   	push   esi
c001e72e:	55                   	push   ebp
c001e72f:	e8 c6 f7 ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e734:	83 c4 20             	add    esp,0x20
c001e737:	57                   	push   edi
c001e738:	53                   	push   ebx
c001e739:	56                   	push   esi
c001e73a:	55                   	push   ebp
c001e73b:	e8 b0 f8 ff ff       	call   c001dff0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e740:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e745:	57                   	push   edi
c001e746:	53                   	push   ebx
c001e747:	56                   	push   esi
c001e748:	55                   	push   ebp
c001e749:	e8 38 f9 ff ff       	call   c001e086 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e74e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e752:	83 c4 14             	add    esp,0x14
c001e755:	6a 3c                	push   0x3c
c001e757:	57                   	push   edi
c001e758:	53                   	push   ebx
c001e759:	56                   	push   esi
c001e75a:	55                   	push   ebp
c001e75b:	e8 9a f7 ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e760:	0f b6 c4             	movzx  eax,ah
c001e763:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e767:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e76b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e76f:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c001e774:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001e77a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e780:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e784:	83 c4 20             	add    esp,0x20
c001e787:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e78c:	74 30                	je     c001e7be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e78e:	31 c0                	xor    eax,eax
c001e790:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e794:	7e 28                	jle    c001e7be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e796:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e79e:	39 cb                	cmp    ebx,ecx
c001e7a0:	75 19                	jne    c001e7bb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e7a2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e7aa:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e7ae:	75 0b                	jne    c001e7bb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e7b0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e7b7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e7bb:	40                   	inc    eax
c001e7bc:	eb d2                	jmp    c001e790 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e7be:	31 d2                	xor    edx,edx
c001e7c0:	83 ec 0c             	sub    esp,0xc
c001e7c3:	57                   	push   edi
c001e7c4:	53                   	push   ebx
c001e7c5:	56                   	push   esi
c001e7c6:	52                   	push   edx
c001e7c7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e7cb:	55                   	push   ebp
c001e7cc:	e8 01 f9 ff ff       	call   c001e0d2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e7d1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e7d5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e7d9:	42                   	inc    edx
c001e7da:	83 c4 20             	add    esp,0x20
c001e7dd:	83 fa 06             	cmp    edx,0x6
c001e7e0:	75 de                	jne    c001e7c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e7e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e7e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7ea:	c1 e2 08             	shl    edx,0x8
c001e7ed:	83 ec 0c             	sub    esp,0xc
c001e7f0:	0f b6 c4             	movzx  eax,ah
c001e7f3:	09 d0                	or     eax,edx
c001e7f5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e7fa:	6a 02                	push   0x2
c001e7fc:	57                   	push   edi
c001e7fd:	53                   	push   ebx
c001e7fe:	56                   	push   esi
c001e7ff:	55                   	push   ebp
c001e800:	e8 f5 f6 ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e805:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e80a:	83 c4 20             	add    esp,0x20
c001e80d:	57                   	push   edi
c001e80e:	53                   	push   ebx
c001e80f:	56                   	push   esi
c001e810:	55                   	push   ebp
c001e811:	e8 24 f8 ff ff       	call   c001e03a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e816:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e81a:	57                   	push   edi
c001e81b:	53                   	push   ebx
c001e81c:	56                   	push   esi
c001e81d:	55                   	push   ebp
c001e81e:	e8 81 f7 ff ff       	call   c001dfa4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e823:	b9 09 00 00 00       	mov    ecx,0x9
c001e828:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e82d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e831:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e835:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e839:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e83d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e841:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e845:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e849:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e84d:	83 ec 0c             	sub    esp,0xc
c001e850:	fc                   	cld    
c001e851:	89 e7                	mov    edi,esp
c001e853:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e857:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e859:	55                   	push   ebp
c001e85a:	e8 a9 fc ff ff       	call   c001e508 <PCI::foundDevice(PCIDeviceInfo)>
c001e85f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e865:	5b                   	pop    ebx
c001e866:	5e                   	pop    esi
c001e867:	5f                   	pop    edi
c001e868:	5d                   	pop    ebp
c001e869:	c3                   	ret    

c001e86a <PCI::checkDevice(unsigned char, unsigned char)>:
c001e86a:	55                   	push   ebp
c001e86b:	57                   	push   edi
c001e86c:	56                   	push   esi
c001e86d:	53                   	push   ebx
c001e86e:	83 ec 0c             	sub    esp,0xc
c001e871:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e875:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e87a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e87f:	6a 00                	push   0x0
c001e881:	56                   	push   esi
c001e882:	57                   	push   edi
c001e883:	55                   	push   ebp
c001e884:	e8 1b f7 ff ff       	call   c001dfa4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e889:	6a 00                	push   0x0
c001e88b:	56                   	push   esi
c001e88c:	57                   	push   edi
c001e88d:	55                   	push   ebp
c001e88e:	e8 5b fe ff ff       	call   c001e6ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e893:	83 c4 20             	add    esp,0x20
c001e896:	6a 00                	push   0x0
c001e898:	56                   	push   esi
c001e899:	57                   	push   edi
c001e89a:	55                   	push   ebp
c001e89b:	e8 28 f7 ff ff       	call   c001dfc8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e8a0:	83 c4 10             	add    esp,0x10
c001e8a3:	a8 80                	test   al,0x80
c001e8a5:	74 2d                	je     c001e8d4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e8a7:	bb 01 00 00 00       	mov    ebx,0x1
c001e8ac:	53                   	push   ebx
c001e8ad:	56                   	push   esi
c001e8ae:	57                   	push   edi
c001e8af:	55                   	push   ebp
c001e8b0:	e8 ef f6 ff ff       	call   c001dfa4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e8b5:	83 c4 10             	add    esp,0x10
c001e8b8:	0f b7 c0             	movzx  eax,ax
c001e8bb:	3d ff ff 00 00       	cmp    eax,0xffff
c001e8c0:	74 0c                	je     c001e8ce <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e8c2:	53                   	push   ebx
c001e8c3:	56                   	push   esi
c001e8c4:	57                   	push   edi
c001e8c5:	55                   	push   ebp
c001e8c6:	e8 23 fe ff ff       	call   c001e6ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e8cb:	83 c4 10             	add    esp,0x10
c001e8ce:	43                   	inc    ebx
c001e8cf:	83 fb 08             	cmp    ebx,0x8
c001e8d2:	75 d8                	jne    c001e8ac <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e8d4:	83 c4 0c             	add    esp,0xc
c001e8d7:	5b                   	pop    ebx
c001e8d8:	5e                   	pop    esi
c001e8d9:	5f                   	pop    edi
c001e8da:	5d                   	pop    ebp
c001e8db:	c3                   	ret    

c001e8dc <PCI::detect()>:
c001e8dc:	56                   	push   esi
c001e8dd:	53                   	push   ebx
c001e8de:	53                   	push   ebx
c001e8df:	31 db                	xor    ebx,ebx
c001e8e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e8e5:	6a 00                	push   0x0
c001e8e7:	6a 00                	push   0x0
c001e8e9:	6a 00                	push   0x0
c001e8eb:	56                   	push   esi
c001e8ec:	e8 d7 f6 ff ff       	call   c001dfc8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e8f1:	83 c4 10             	add    esp,0x10
c001e8f4:	a8 80                	test   al,0x80
c001e8f6:	75 21                	jne    c001e919 <PCI::detect()+0x3d>
c001e8f8:	51                   	push   ecx
c001e8f9:	51                   	push   ecx
c001e8fa:	6a 00                	push   0x0
c001e8fc:	56                   	push   esi
c001e8fd:	e8 e2 fb ff ff       	call   c001e4e4 <PCI::checkBus(unsigned char)>
c001e902:	83 c4 10             	add    esp,0x10
c001e905:	eb 2a                	jmp    c001e931 <PCI::detect()+0x55>
c001e907:	52                   	push   edx
c001e908:	52                   	push   edx
c001e909:	53                   	push   ebx
c001e90a:	43                   	inc    ebx
c001e90b:	56                   	push   esi
c001e90c:	e8 d3 fb ff ff       	call   c001e4e4 <PCI::checkBus(unsigned char)>
c001e911:	83 c4 10             	add    esp,0x10
c001e914:	83 fb 08             	cmp    ebx,0x8
c001e917:	74 18                	je     c001e931 <PCI::detect()+0x55>
c001e919:	53                   	push   ebx
c001e91a:	6a 00                	push   0x0
c001e91c:	6a 00                	push   0x0
c001e91e:	56                   	push   esi
c001e91f:	e8 80 f6 ff ff       	call   c001dfa4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e924:	83 c4 10             	add    esp,0x10
c001e927:	0f b7 c0             	movzx  eax,ax
c001e92a:	3d ff ff 00 00       	cmp    eax,0xffff
c001e92f:	74 d6                	je     c001e907 <PCI::detect()+0x2b>
c001e931:	58                   	pop    eax
c001e932:	5b                   	pop    ebx
c001e933:	5e                   	pop    esi
c001e934:	c3                   	ret    
c001e935:	90                   	nop

c001e936 <IDE::close(int, int, void*)>:
c001e936:	83 c8 ff             	or     eax,0xffffffff
c001e939:	c3                   	ret    

c001e93a <IDE::IDE()>:
c001e93a:	83 ec 0c             	sub    esp,0xc
c001e93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e941:	83 ec 08             	sub    esp,0x8
c001e944:	68 f0 5e 02 c0       	push   0xc0025ef0
c001e949:	50                   	push   eax
c001e94a:	e8 5d b4 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001e94f:	83 c4 10             	add    esp,0x10
c001e952:	ba 1c 60 02 c0       	mov    edx,0xc002601c
c001e957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95b:	89 10                	mov    DWORD PTR [eax],edx
c001e95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e961:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e968:	90                   	nop
c001e969:	83 c4 0c             	add    esp,0xc
c001e96c:	c3                   	ret    
c001e96d:	90                   	nop

c001e96e <IDE::prepareInterrupt(unsigned char)>:
c001e96e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e973:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e977:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e97f:	c3                   	ret    

c001e980 <selectDrive(unsigned char, unsigned char)>:
c001e980:	c3                   	ret    
c001e981:	90                   	nop

c001e982 <IDE::getBase(unsigned char)>:
c001e982:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e987:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e98b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e993:	c3                   	ret    

c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e994:	55                   	push   ebp
c001e995:	57                   	push   edi
c001e996:	56                   	push   esi
c001e997:	53                   	push   ebx
c001e998:	83 ec 1c             	sub    esp,0x1c
c001e99b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e99f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e9a3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e9a6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e9aa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e9ae:	80 f9 03             	cmp    cl,0x3
c001e9b1:	77 4f                	ja     c001ea02 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e9b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9b7:	0f b6 fa             	movzx  edi,dl
c001e9ba:	0f b6 db             	movzx  ebx,bl
c001e9bd:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e9c0:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e9c5:	80 ca 80             	or     dl,0x80
c001e9c8:	52                   	push   edx
c001e9c9:	6a 0c                	push   0xc
c001e9cb:	57                   	push   edi
c001e9cc:	56                   	push   esi
c001e9cd:	e8 c2 ff ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9d2:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e9d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e9db:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e9df:	ee                   	out    dx,al
c001e9e0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e9e5:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001e9e9:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e9ed:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e9f1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e9f9:	83 c4 2c             	add    esp,0x2c
c001e9fc:	5b                   	pop    ebx
c001e9fd:	5e                   	pop    esi
c001e9fe:	5f                   	pop    edi
c001e9ff:	5d                   	pop    ebp
c001ea00:	eb 92                	jmp    c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea02:	0f b6 cb             	movzx  ecx,bl
c001ea05:	83 f9 07             	cmp    ecx,0x7
c001ea08:	77 12                	ja     c001ea1c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ea0a:	0f b6 d2             	movzx  edx,dl
c001ea0d:	0f b6 db             	movzx  ebx,bl
c001ea10:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ea18:	01 da                	add    edx,ebx
c001ea1a:	eb 2f                	jmp    c001ea4b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ea1c:	83 f9 0d             	cmp    ecx,0xd
c001ea1f:	77 13                	ja     c001ea34 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ea21:	0f b6 d2             	movzx  edx,dl
c001ea24:	0f b6 db             	movzx  ebx,bl
c001ea27:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ea2e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ea32:	eb 17                	jmp    c001ea4b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ea34:	83 f9 15             	cmp    ecx,0x15
c001ea37:	77 13                	ja     c001ea4c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ea39:	0f b6 d2             	movzx  edx,dl
c001ea3c:	0f b6 db             	movzx  ebx,bl
c001ea3f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ea47:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ea4b:	ee                   	out    dx,al
c001ea4c:	83 c4 1c             	add    esp,0x1c
c001ea4f:	5b                   	pop    ebx
c001ea50:	5e                   	pop    esi
c001ea51:	5f                   	pop    edi
c001ea52:	5d                   	pop    ebp
c001ea53:	c3                   	ret    

c001ea54 <IDE::read(unsigned char, unsigned char)>:
c001ea54:	55                   	push   ebp
c001ea55:	57                   	push   edi
c001ea56:	56                   	push   esi
c001ea57:	53                   	push   ebx
c001ea58:	83 ec 1c             	sub    esp,0x1c
c001ea5b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ea5f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ea63:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ea66:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ea6a:	3c 03                	cmp    al,0x3
c001ea6c:	77 40                	ja     c001eaae <IDE::read(unsigned char, unsigned char)+0x5a>
c001ea6e:	0f b6 f9             	movzx  edi,cl
c001ea71:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ea74:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ea79:	0c 80                	or     al,0x80
c001ea7b:	50                   	push   eax
c001ea7c:	6a 0c                	push   0xc
c001ea7e:	57                   	push   edi
c001ea7f:	56                   	push   esi
c001ea80:	e8 0f ff ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea85:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ea8a:	0f b6 d3             	movzx  edx,bl
c001ea8d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ea91:	ec                   	in     al,dx
c001ea92:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ea96:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ea9b:	52                   	push   edx
c001ea9c:	6a 0c                	push   0xc
c001ea9e:	57                   	push   edi
c001ea9f:	56                   	push   esi
c001eaa0:	e8 ef fe ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eaa5:	83 c4 20             	add    esp,0x20
c001eaa8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001eaac:	eb 4c                	jmp    c001eafa <IDE::read(unsigned char, unsigned char)+0xa6>
c001eaae:	0f b6 d3             	movzx  edx,bl
c001eab1:	83 fa 07             	cmp    edx,0x7
c001eab4:	77 12                	ja     c001eac8 <IDE::read(unsigned char, unsigned char)+0x74>
c001eab6:	0f b6 c9             	movzx  ecx,cl
c001eab9:	0f b6 d3             	movzx  edx,bl
c001eabc:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001eac4:	01 c2                	add    edx,eax
c001eac6:	eb 31                	jmp    c001eaf9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001eac8:	83 fa 0d             	cmp    edx,0xd
c001eacb:	77 13                	ja     c001eae0 <IDE::read(unsigned char, unsigned char)+0x8c>
c001eacd:	0f b6 c9             	movzx  ecx,cl
c001ead0:	0f b6 d3             	movzx  edx,bl
c001ead3:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001eada:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001eade:	eb 19                	jmp    c001eaf9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001eae0:	31 c0                	xor    eax,eax
c001eae2:	83 fa 15             	cmp    edx,0x15
c001eae5:	77 13                	ja     c001eafa <IDE::read(unsigned char, unsigned char)+0xa6>
c001eae7:	0f b6 c9             	movzx  ecx,cl
c001eaea:	0f b6 d3             	movzx  edx,bl
c001eaed:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001eaf5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001eaf9:	ec                   	in     al,dx
c001eafa:	83 c4 1c             	add    esp,0x1c
c001eafd:	5b                   	pop    ebx
c001eafe:	5e                   	pop    esi
c001eaff:	5f                   	pop    edi
c001eb00:	5d                   	pop    ebp
c001eb01:	c3                   	ret    

c001eb02 <IDE::waitInterrupt(unsigned char)>:
c001eb02:	55                   	push   ebp
c001eb03:	57                   	push   edi
c001eb04:	56                   	push   esi
c001eb05:	53                   	push   ebx
c001eb06:	31 db                	xor    ebx,ebx
c001eb08:	83 ec 0c             	sub    esp,0xc
c001eb0b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001eb0f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001eb14:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001eb1c:	89 e8                	mov    eax,ebp
c001eb1e:	84 c0                	test   al,al
c001eb20:	75 31                	jne    c001eb53 <IDE::waitInterrupt(unsigned char)+0x51>
c001eb22:	52                   	push   edx
c001eb23:	6a 0c                	push   0xc
c001eb25:	56                   	push   esi
c001eb26:	57                   	push   edi
c001eb27:	e8 28 ff ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001eb2c:	83 c4 10             	add    esp,0x10
c001eb2f:	a8 01                	test   al,0x1
c001eb31:	75 28                	jne    c001eb5b <IDE::waitInterrupt(unsigned char)+0x59>
c001eb33:	f6 c3 04             	test   bl,0x4
c001eb36:	75 13                	jne    c001eb4b <IDE::waitInterrupt(unsigned char)+0x49>
c001eb38:	83 fb 32             	cmp    ebx,0x32
c001eb3b:	7e 0e                	jle    c001eb4b <IDE::waitInterrupt(unsigned char)+0x49>
c001eb3d:	50                   	push   eax
c001eb3e:	50                   	push   eax
c001eb3f:	6a 00                	push   0x0
c001eb41:	6a 64                	push   0x64
c001eb43:	e8 bc 87 ff ff       	call   c0017304 <milliTenthSleep(unsigned long long)>
c001eb48:	83 c4 10             	add    esp,0x10
c001eb4b:	83 fb 3c             	cmp    ebx,0x3c
c001eb4e:	74 0b                	je     c001eb5b <IDE::waitInterrupt(unsigned char)+0x59>
c001eb50:	43                   	inc    ebx
c001eb51:	eb c1                	jmp    c001eb14 <IDE::waitInterrupt(unsigned char)+0x12>
c001eb53:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001eb5b:	83 c4 0c             	add    esp,0xc
c001eb5e:	89 e8                	mov    eax,ebp
c001eb60:	5b                   	pop    ebx
c001eb61:	5e                   	pop    esi
c001eb62:	5f                   	pop    edi
c001eb63:	5d                   	pop    ebp
c001eb64:	c3                   	ret    

c001eb65 <ideChannel0IRQHandler(regs*, void*)>:
c001eb65:	83 ec 10             	sub    esp,0x10
c001eb68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb6c:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001eb73:	6a 07                	push   0x7
c001eb75:	6a 00                	push   0x0
c001eb77:	50                   	push   eax
c001eb78:	e8 d7 fe ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001eb7d:	83 c4 1c             	add    esp,0x1c
c001eb80:	c3                   	ret    

c001eb81 <ideChannel1IRQHandler(regs*, void*)>:
c001eb81:	83 ec 10             	sub    esp,0x10
c001eb84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb88:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001eb8f:	6a 07                	push   0x7
c001eb91:	6a 01                	push   0x1
c001eb93:	50                   	push   eax
c001eb94:	e8 bb fe ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001eb99:	83 c4 1c             	add    esp,0x1c
c001eb9c:	c3                   	ret    
c001eb9d:	90                   	nop

c001eb9e <IDE::enableIRQs(unsigned char, bool)>:
c001eb9e:	57                   	push   edi
c001eb9f:	b8 02 00 00 00       	mov    eax,0x2
c001eba4:	56                   	push   esi
c001eba5:	53                   	push   ebx
c001eba6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ebaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ebae:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ebb3:	74 02                	je     c001ebb7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ebb5:	31 c0                	xor    eax,eax
c001ebb7:	0f b6 db             	movzx  ebx,bl
c001ebba:	bf 04 00 00 00       	mov    edi,0x4
c001ebbf:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ebc6:	50                   	push   eax
c001ebc7:	6a 0c                	push   0xc
c001ebc9:	53                   	push   ebx
c001ebca:	56                   	push   esi
c001ebcb:	e8 c4 fd ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebd0:	83 c4 10             	add    esp,0x10
c001ebd3:	50                   	push   eax
c001ebd4:	6a 0c                	push   0xc
c001ebd6:	53                   	push   ebx
c001ebd7:	56                   	push   esi
c001ebd8:	e8 77 fe ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001ebdd:	83 c4 10             	add    esp,0x10
c001ebe0:	4f                   	dec    edi
c001ebe1:	75 f0                	jne    c001ebd3 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ebe3:	5b                   	pop    ebx
c001ebe4:	5e                   	pop    esi
c001ebe5:	5f                   	pop    edi
c001ebe6:	c3                   	ret    
c001ebe7:	90                   	nop

c001ebe8 <IDE::open(int, int, void*)>:
c001ebe8:	57                   	push   edi
c001ebe9:	56                   	push   esi
c001ebea:	53                   	push   ebx
c001ebeb:	83 ec 10             	sub    esp,0x10
c001ebee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ebf2:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ebfb:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ec04:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ec0b:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ec12:	0f 85 84 02 00 00    	jne    c001ee9c <IDE::open(int, int, void*)+0x2b4>
c001ec18:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ec1e:	a8 70                	test   al,0x70
c001ec20:	75 44                	jne    c001ec66 <IDE::open(int, int, void*)+0x7e>
c001ec22:	ba 20 84 00 00       	mov    edx,0x8420
c001ec27:	0f a3 c2             	bt     edx,eax
c001ec2a:	73 3a                	jae    c001ec66 <IDE::open(int, int, void*)+0x7e>
c001ec2c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ec32:	83 ec 0c             	sub    esp,0xc
c001ec35:	83 e0 fc             	and    eax,0xfffffffc
c001ec38:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ec3f:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ec45:	83 e0 fc             	and    eax,0xfffffffc
c001ec48:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ec4f:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ec55:	83 e0 fc             	and    eax,0xfffffffc
c001ec58:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ec5f:	68 0d 35 02 c0       	push   0xc002350d
c001ec64:	eb 60                	jmp    c001ecc6 <IDE::open(int, int, void*)+0xde>
c001ec66:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ec70:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ec7a:	be 64 00 00 00       	mov    esi,0x64
c001ec7f:	57                   	push   edi
c001ec80:	57                   	push   edi
c001ec81:	68 08 5f 02 c0       	push   0xc0025f08
c001ec86:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001ec8a:	57                   	push   edi
c001ec8b:	e8 b0 19 fe ff       	call   c0000640 <strcpy>
c001ec90:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001ec97:	31 d2                	xor    edx,edx
c001ec99:	89 c8                	mov    eax,ecx
c001ec9b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ec9e:	f7 f6                	div    esi
c001eca0:	be 0a 00 00 00       	mov    esi,0xa
c001eca5:	83 c0 30             	add    eax,0x30
c001eca8:	31 d2                	xor    edx,edx
c001ecaa:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ecae:	89 c8                	mov    eax,ecx
c001ecb0:	f7 f6                	div    esi
c001ecb2:	89 d1                	mov    ecx,edx
c001ecb4:	31 d2                	xor    edx,edx
c001ecb6:	83 c1 30             	add    ecx,0x30
c001ecb9:	f7 f6                	div    esi
c001ecbb:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001ecbf:	83 c2 30             	add    edx,0x30
c001ecc2:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001ecc6:	e8 5e e6 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001eccb:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ecd0:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ecd7:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ecde:	c1 e1 10             	shl    ecx,0x10
c001ece1:	c1 e0 0b             	shl    eax,0xb
c001ece4:	83 c4 10             	add    esp,0x10
c001ece7:	09 c1                	or     ecx,eax
c001ece9:	89 fa                	mov    edx,edi
c001eceb:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ecf2:	c1 e0 08             	shl    eax,0x8
c001ecf5:	09 c1                	or     ecx,eax
c001ecf7:	89 c8                	mov    eax,ecx
c001ecf9:	0d 08 00 00 80       	or     eax,0x80000008
c001ecfe:	ef                   	out    dx,eax
c001ecff:	be fc 0c 00 00       	mov    esi,0xcfc
c001ed04:	89 f2                	mov    edx,esi
c001ed06:	ed                   	in     eax,dx
c001ed07:	c1 e8 10             	shr    eax,0x10
c001ed0a:	3d ff ff 00 00       	cmp    eax,0xffff
c001ed0f:	0f 84 e5 00 00 00    	je     c001edfa <IDE::open(int, int, void*)+0x212>
c001ed15:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ed1b:	89 fa                	mov    edx,edi
c001ed1d:	89 c8                	mov    eax,ecx
c001ed1f:	ef                   	out    dx,eax
c001ed20:	b0 fe                	mov    al,0xfe
c001ed22:	89 f2                	mov    edx,esi
c001ed24:	ee                   	out    dx,al
c001ed25:	89 c8                	mov    eax,ecx
c001ed27:	89 fa                	mov    edx,edi
c001ed29:	ef                   	out    dx,eax
c001ed2a:	89 f2                	mov    edx,esi
c001ed2c:	ed                   	in     eax,dx
c001ed2d:	3c fe                	cmp    al,0xfe
c001ed2f:	0f 85 85 00 00 00    	jne    c001edba <IDE::open(int, int, void*)+0x1d2>
c001ed35:	83 ec 0c             	sub    esp,0xc
c001ed38:	68 43 35 02 c0       	push   0xc0023543
c001ed3d:	e8 e7 e5 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001ed42:	c7 04 24 0e 5f 02 c0 	mov    DWORD PTR [esp],0xc0025f0e
c001ed49:	e8 2e 82 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ed4e:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ed58:	c7 04 24 28 38 02 c0 	mov    DWORD PTR [esp],0xc0023828
c001ed5f:	e8 c5 e5 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001ed64:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ed6b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ed72:	c1 e1 10             	shl    ecx,0x10
c001ed75:	c1 e0 08             	shl    eax,0x8
c001ed78:	89 fa                	mov    edx,edi
c001ed7a:	09 c1                	or     ecx,eax
c001ed7c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ed83:	c1 e0 0b             	shl    eax,0xb
c001ed86:	09 c1                	or     ecx,eax
c001ed88:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ed8e:	89 c8                	mov    eax,ecx
c001ed90:	ef                   	out    dx,eax
c001ed91:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ed97:	89 f2                	mov    edx,esi
c001ed99:	ee                   	out    dx,al
c001ed9a:	89 c8                	mov    eax,ecx
c001ed9c:	89 fa                	mov    edx,edi
c001ed9e:	ef                   	out    dx,eax
c001ed9f:	89 f2                	mov    edx,esi
c001eda1:	ed                   	in     eax,dx
c001eda2:	0f b6 c0             	movzx  eax,al
c001eda5:	83 c4 10             	add    esp,0x10
c001eda8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001edae:	74 5a                	je     c001ee0a <IDE::open(int, int, void*)+0x222>
c001edb0:	83 ec 0c             	sub    esp,0xc
c001edb3:	68 23 5f 02 c0       	push   0xc0025f23
c001edb8:	eb 48                	jmp    c001ee02 <IDE::open(int, int, void*)+0x21a>
c001edba:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001edc3:	75 2b                	jne    c001edf0 <IDE::open(int, int, void*)+0x208>
c001edc5:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001edcc:	3d 80 00 00 00       	cmp    eax,0x80
c001edd1:	74 07                	je     c001edda <IDE::open(int, int, void*)+0x1f2>
c001edd3:	3d 8a 00 00 00       	cmp    eax,0x8a
c001edd8:	75 16                	jne    c001edf0 <IDE::open(int, int, void*)+0x208>
c001edda:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ede1:	83 ec 0c             	sub    esp,0xc
c001ede4:	68 fe 2f 02 c0       	push   0xc0022ffe
c001ede9:	e8 3b e5 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001edee:	eb 17                	jmp    c001ee07 <IDE::open(int, int, void*)+0x21f>
c001edf0:	83 ec 0c             	sub    esp,0xc
c001edf3:	68 2b 5f 02 c0       	push   0xc0025f2b
c001edf8:	eb 08                	jmp    c001ee02 <IDE::open(int, int, void*)+0x21a>
c001edfa:	83 ec 0c             	sub    esp,0xc
c001edfd:	68 5c 5f 02 c0       	push   0xc0025f5c
c001ee02:	e8 df 11 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001ee07:	83 c4 10             	add    esp,0x10
c001ee0a:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001ee11:	0f 84 bf 00 00 00    	je     c001eed6 <IDE::open(int, int, void*)+0x2ee>
c001ee17:	83 ec 0c             	sub    esp,0xc
c001ee1a:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ee20:	83 e0 fc             	and    eax,0xfffffffc
c001ee23:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ee2a:	83 c0 08             	add    eax,0x8
c001ee2d:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ee34:	68 86 5f 02 c0       	push   0xc0025f86
c001ee39:	e8 3e 81 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ee3e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ee45:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ee4c:	50                   	push   eax
c001ee4d:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ee54:	50                   	push   eax
c001ee55:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ee5c:	50                   	push   eax
c001ee5d:	ff 35 80 04 03 c0    	push   DWORD PTR ds:0xc0030480
c001ee63:	e8 92 f0 ff ff       	call   c001defa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ee68:	83 c4 18             	add    esp,0x18
c001ee6b:	83 c8 07             	or     eax,0x7
c001ee6e:	0f b7 c0             	movzx  eax,ax
c001ee71:	50                   	push   eax
c001ee72:	6a 04                	push   0x4
c001ee74:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ee7b:	50                   	push   eax
c001ee7c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ee83:	50                   	push   eax
c001ee84:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ee8b:	50                   	push   eax
c001ee8c:	ff 35 80 04 03 c0    	push   DWORD PTR ds:0xc0030480
c001ee92:	e8 9f f2 ff ff       	call   c001e136 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001ee97:	83 c4 20             	add    esp,0x20
c001ee9a:	eb 3a                	jmp    c001eed6 <IDE::open(int, int, void*)+0x2ee>
c001ee9c:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001eea2:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001eea9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001eeb0:	05 06 02 00 00       	add    eax,0x206
c001eeb5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eebc:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001eec3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001eeca:	05 06 02 00 00       	add    eax,0x206
c001eecf:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eed6:	83 ec 0c             	sub    esp,0xc
c001eed9:	68 e0 3d 02 c0       	push   0xc0023de0
c001eede:	e8 46 e4 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001eee3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001eee9:	83 c4 10             	add    esp,0x10
c001eeec:	89 c2                	mov    edx,eax
c001eeee:	83 e2 0f             	and    edx,0xf
c001eef1:	83 fa 08             	cmp    edx,0x8
c001eef4:	75 0a                	jne    c001ef00 <IDE::open(int, int, void*)+0x318>
c001eef6:	83 e8 02             	sub    eax,0x2
c001eef9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ef00:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ef06:	89 c2                	mov    edx,eax
c001ef08:	83 e2 0f             	and    edx,0xf
c001ef0b:	83 fa 08             	cmp    edx,0x8
c001ef0e:	75 0a                	jne    c001ef1a <IDE::open(int, int, void*)+0x332>
c001ef10:	83 e8 02             	sub    eax,0x2
c001ef13:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ef1a:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ef21:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ef28:	89 d0                	mov    eax,edx
c001ef2a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ef2d:	8d 7a 01             	lea    edi,[edx+0x1]
c001ef30:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ef34:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ef38:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ef3c:	83 e1 3f             	and    ecx,0x3f
c001ef3f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ef43:	89 f9                	mov    ecx,edi
c001ef45:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ef4c:	0f b6 c9             	movzx  ecx,cl
c001ef4f:	8d 78 02             	lea    edi,[eax+0x2]
c001ef52:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ef55:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ef59:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ef5d:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ef61:	83 e2 3f             	and    edx,0x3f
c001ef64:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ef68:	89 f9                	mov    ecx,edi
c001ef6a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ef70:	0f b6 d1             	movzx  edx,cl
c001ef73:	8d 78 03             	lea    edi,[eax+0x3]
c001ef76:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ef79:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ef7d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ef81:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ef85:	83 e1 3f             	and    ecx,0x3f
c001ef88:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ef8c:	89 fa                	mov    edx,edi
c001ef8e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ef94:	0f b6 ca             	movzx  ecx,dl
c001ef97:	8d 78 04             	lea    edi,[eax+0x4]
c001ef9a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ef9d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001efa1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001efa5:	89 fa                	mov    edx,edi
c001efa7:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001efad:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001efb1:	83 e2 3f             	and    edx,0x3f
c001efb4:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001efb8:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001efbf:	66 85 f6             	test   si,si
c001efc2:	74 24                	je     c001efe8 <IDE::open(int, int, void*)+0x400>
c001efc4:	89 f9                	mov    ecx,edi
c001efc6:	83 c0 05             	add    eax,0x5
c001efc9:	0f b6 d1             	movzx  edx,cl
c001efcc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001efcf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001efd3:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001efd7:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001efdd:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001efe1:	83 e0 3f             	and    eax,0x3f
c001efe4:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001efe8:	83 ec 0c             	sub    esp,0xc
c001efeb:	68 9e 5f 02 c0       	push   0xc0025f9e
c001eff0:	e8 34 e3 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001eff5:	58                   	pop    eax
c001eff6:	5a                   	pop    edx
c001eff7:	6a 00                	push   0x0
c001eff9:	53                   	push   ebx
c001effa:	e8 6f f9 ff ff       	call   c001e96e <IDE::prepareInterrupt(unsigned char)>
c001efff:	59                   	pop    ecx
c001f000:	5e                   	pop    esi
c001f001:	6a 01                	push   0x1
c001f003:	53                   	push   ebx
c001f004:	e8 65 f9 ff ff       	call   c001e96e <IDE::prepareInterrupt(unsigned char)>
c001f009:	c7 04 24 20 58 02 c0 	mov    DWORD PTR [esp],0xc0025820
c001f010:	e8 14 e3 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f015:	83 c4 0c             	add    esp,0xc
c001f018:	6a 00                	push   0x0
c001f01a:	6a 00                	push   0x0
c001f01c:	53                   	push   ebx
c001f01d:	e8 7c fb ff ff       	call   c001eb9e <IDE::enableIRQs(unsigned char, bool)>
c001f022:	83 c4 0c             	add    esp,0xc
c001f025:	6a 00                	push   0x0
c001f027:	6a 01                	push   0x1
c001f029:	53                   	push   ebx
c001f02a:	e8 6f fb ff ff       	call   c001eb9e <IDE::enableIRQs(unsigned char, bool)>
c001f02f:	c7 04 24 a0 5f 02 c0 	mov    DWORD PTR [esp],0xc0025fa0
c001f036:	e8 ee e2 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f03b:	83 c4 10             	add    esp,0x10
c001f03e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f045:	74 3c                	je     c001f083 <IDE::open(int, int, void*)+0x49b>
c001f047:	83 ec 0c             	sub    esp,0xc
c001f04a:	53                   	push   ebx
c001f04b:	6a 01                	push   0x1
c001f04d:	68 65 eb 01 c0       	push   0xc001eb65
c001f052:	6a 0e                	push   0xe
c001f054:	53                   	push   ebx
c001f055:	e8 a6 a9 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f05a:	83 c4 14             	add    esp,0x14
c001f05d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f063:	53                   	push   ebx
c001f064:	6a 01                	push   0x1
c001f066:	68 81 eb 01 c0       	push   0xc001eb81
c001f06b:	6a 0f                	push   0xf
c001f06d:	53                   	push   ebx
c001f06e:	e8 8d a9 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f073:	83 c4 14             	add    esp,0x14
c001f076:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f07c:	68 2e 3a 02 c0       	push   0xc0023a2e
c001f081:	eb 40                	jmp    c001f0c3 <IDE::open(int, int, void*)+0x4db>
c001f083:	83 ec 0c             	sub    esp,0xc
c001f086:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f090:	53                   	push   ebx
c001f091:	6a 00                	push   0x0
c001f093:	68 65 eb 01 c0       	push   0xc001eb65
c001f098:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f09e:	53                   	push   ebx
c001f09f:	e8 5c a9 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f0a4:	83 c4 14             	add    esp,0x14
c001f0a7:	53                   	push   ebx
c001f0a8:	6a 00                	push   0x0
c001f0aa:	68 81 eb 01 c0       	push   0xc001eb81
c001f0af:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f0b5:	53                   	push   ebx
c001f0b6:	e8 45 a9 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f0bb:	83 c4 14             	add    esp,0x14
c001f0be:	68 be 47 02 c0       	push   0xc00247be
c001f0c3:	e8 61 e2 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f0c8:	83 c4 10             	add    esp,0x10
c001f0cb:	83 ec 0c             	sub    esp,0xc
c001f0ce:	68 a2 5f 02 c0       	push   0xc0025fa2
c001f0d3:	e8 51 e2 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f0d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f0da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f0dd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f0e0:	c7 04 24 31 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c31
c001f0e7:	e8 3d e2 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f0ec:	83 c4 0c             	add    esp,0xc
c001f0ef:	6a 07                	push   0x7
c001f0f1:	6a 00                	push   0x0
c001f0f3:	53                   	push   ebx
c001f0f4:	e8 5b f9 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f0f9:	83 c4 0c             	add    esp,0xc
c001f0fc:	6a 07                	push   0x7
c001f0fe:	6a 01                	push   0x1
c001f100:	53                   	push   ebx
c001f101:	e8 4e f9 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f106:	c7 04 24 c8 44 02 c0 	mov    DWORD PTR [esp],0xc00244c8
c001f10d:	e8 17 e2 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f112:	83 c4 0c             	add    esp,0xc
c001f115:	6a 01                	push   0x1
c001f117:	6a 00                	push   0x0
c001f119:	53                   	push   ebx
c001f11a:	e8 7f fa ff ff       	call   c001eb9e <IDE::enableIRQs(unsigned char, bool)>
c001f11f:	83 c4 0c             	add    esp,0xc
c001f122:	6a 01                	push   0x1
c001f124:	6a 01                	push   0x1
c001f126:	53                   	push   ebx
c001f127:	e8 72 fa ff ff       	call   c001eb9e <IDE::enableIRQs(unsigned char, bool)>
c001f12c:	c7 04 24 a5 5f 02 c0 	mov    DWORD PTR [esp],0xc0025fa5
c001f133:	e8 f1 e1 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f138:	83 c4 20             	add    esp,0x20
c001f13b:	31 c0                	xor    eax,eax
c001f13d:	5b                   	pop    ebx
c001f13e:	5e                   	pop    esi
c001f13f:	5f                   	pop    edi
c001f140:	c3                   	ret    
c001f141:	90                   	nop

c001f142 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f142:	55                   	push   ebp
c001f143:	57                   	push   edi
c001f144:	56                   	push   esi
c001f145:	53                   	push   ebx
c001f146:	83 ec 1c             	sub    esp,0x1c
c001f149:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f14d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f151:	8d 42 f8             	lea    eax,[edx-0x8]
c001f154:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f158:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f15c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f160:	3c 03                	cmp    al,0x3
c001f162:	77 5a                	ja     c001f1be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001f164:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f168:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f16c:	0f b6 db             	movzx  ebx,bl
c001f16f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f172:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f177:	0c 80                	or     al,0x80
c001f179:	50                   	push   eax
c001f17a:	6a 0c                	push   0xc
c001f17c:	53                   	push   ebx
c001f17d:	56                   	push   esi
c001f17e:	e8 11 f8 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f183:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f188:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f18c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f190:	0f b6 d2             	movzx  edx,dl
c001f193:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f197:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f199:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f19e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f1a2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f1a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f1aa:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f1b2:	83 c4 2c             	add    esp,0x2c
c001f1b5:	5b                   	pop    ebx
c001f1b6:	5e                   	pop    esi
c001f1b7:	5f                   	pop    edi
c001f1b8:	5d                   	pop    ebp
c001f1b9:	e9 d6 f7 ff ff       	jmp    c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1be:	0f b6 c2             	movzx  eax,dl
c001f1c1:	83 f8 07             	cmp    eax,0x7
c001f1c4:	77 12                	ja     c001f1d8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001f1c6:	0f b6 c2             	movzx  eax,dl
c001f1c9:	0f b6 db             	movzx  ebx,bl
c001f1cc:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001f1d4:	01 c2                	add    edx,eax
c001f1d6:	eb 2f                	jmp    c001f207 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f1d8:	83 f8 0d             	cmp    eax,0xd
c001f1db:	77 13                	ja     c001f1f0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001f1dd:	0f b6 db             	movzx  ebx,bl
c001f1e0:	0f b6 d2             	movzx  edx,dl
c001f1e3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001f1ea:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f1ee:	eb 17                	jmp    c001f207 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f1f0:	83 f8 15             	cmp    eax,0x15
c001f1f3:	77 14                	ja     c001f209 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001f1f5:	0f b6 db             	movzx  ebx,bl
c001f1f8:	0f b6 d2             	movzx  edx,dl
c001f1fb:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001f203:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f207:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f209:	83 c4 1c             	add    esp,0x1c
c001f20c:	5b                   	pop    ebx
c001f20d:	5e                   	pop    esi
c001f20e:	5f                   	pop    edi
c001f20f:	5d                   	pop    ebp
c001f210:	c3                   	ret    
c001f211:	90                   	nop

c001f212 <IDE::detect()>:
c001f212:	55                   	push   ebp
c001f213:	57                   	push   edi
c001f214:	56                   	push   esi
c001f215:	53                   	push   ebx
c001f216:	81 ec 28 02 00 00    	sub    esp,0x228
c001f21c:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f223:	68 a7 5f 02 c0       	push   0xc0025fa7
c001f228:	e8 fc e0 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f22d:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f233:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f237:	83 c4 10             	add    esp,0x10
c001f23a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f23f:	0f 85 2f 04 00 00    	jne    c001f674 <IDE::detect()+0x462>
c001f245:	83 ec 0c             	sub    esp,0xc
c001f248:	31 f6                	xor    esi,esi
c001f24a:	68 aa 5f 02 c0       	push   0xc0025faa
c001f24f:	31 ff                	xor    edi,edi
c001f251:	e8 d3 e0 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f256:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f25d:	83 c4 10             	add    esp,0x10
c001f260:	83 ec 0c             	sub    esp,0xc
c001f263:	68 ad 5f 02 c0       	push   0xc0025fad
c001f268:	e8 bc e0 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f26d:	83 c4 10             	add    esp,0x10
c001f270:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f277:	83 ec 0c             	sub    esp,0xc
c001f27a:	31 ed                	xor    ebp,ebp
c001f27c:	68 b0 5f 02 c0       	push   0xc0025fb0
c001f281:	e8 a3 e0 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f286:	89 f8                	mov    eax,edi
c001f288:	c1 e0 06             	shl    eax,0x6
c001f28b:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f293:	c7 04 24 b3 5f 02 c0 	mov    DWORD PTR [esp],0xc0025fb3
c001f29a:	e8 8a e0 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f29f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f2a3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ab:	c1 e0 04             	shl    eax,0x4
c001f2ae:	83 c8 a0             	or     eax,0xffffffa0
c001f2b1:	0f b6 c0             	movzx  eax,al
c001f2b4:	50                   	push   eax
c001f2b5:	6a 06                	push   0x6
c001f2b7:	56                   	push   esi
c001f2b8:	53                   	push   ebx
c001f2b9:	e8 d6 f6 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2be:	83 c4 1c             	add    esp,0x1c
c001f2c1:	6a 0c                	push   0xc
c001f2c3:	56                   	push   esi
c001f2c4:	53                   	push   ebx
c001f2c5:	e8 8a f7 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f2ca:	83 c4 0c             	add    esp,0xc
c001f2cd:	6a 0c                	push   0xc
c001f2cf:	56                   	push   esi
c001f2d0:	53                   	push   ebx
c001f2d1:	e8 7e f7 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f2d6:	83 c4 0c             	add    esp,0xc
c001f2d9:	6a 0c                	push   0xc
c001f2db:	56                   	push   esi
c001f2dc:	53                   	push   ebx
c001f2dd:	e8 72 f7 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f2e2:	83 c4 0c             	add    esp,0xc
c001f2e5:	6a 0c                	push   0xc
c001f2e7:	56                   	push   esi
c001f2e8:	53                   	push   ebx
c001f2e9:	e8 66 f7 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f2ee:	c7 04 24 b6 5f 02 c0 	mov    DWORD PTR [esp],0xc0025fb6
c001f2f5:	e8 2f e0 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f2fa:	68 ec 00 00 00       	push   0xec
c001f2ff:	6a 07                	push   0x7
c001f301:	56                   	push   esi
c001f302:	53                   	push   ebx
c001f303:	e8 8c f6 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f308:	83 c4 1c             	add    esp,0x1c
c001f30b:	6a 0c                	push   0xc
c001f30d:	56                   	push   esi
c001f30e:	53                   	push   ebx
c001f30f:	e8 40 f7 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f314:	83 c4 0c             	add    esp,0xc
c001f317:	6a 0c                	push   0xc
c001f319:	56                   	push   esi
c001f31a:	53                   	push   ebx
c001f31b:	e8 34 f7 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f320:	83 c4 0c             	add    esp,0xc
c001f323:	6a 0c                	push   0xc
c001f325:	56                   	push   esi
c001f326:	53                   	push   ebx
c001f327:	e8 28 f7 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f32c:	83 c4 0c             	add    esp,0xc
c001f32f:	6a 0c                	push   0xc
c001f331:	56                   	push   esi
c001f332:	53                   	push   ebx
c001f333:	e8 1c f7 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f338:	c7 04 24 b9 5f 02 c0 	mov    DWORD PTR [esp],0xc0025fb9
c001f33f:	e8 e5 df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f344:	83 c4 0c             	add    esp,0xc
c001f347:	6a 0c                	push   0xc
c001f349:	56                   	push   esi
c001f34a:	53                   	push   ebx
c001f34b:	e8 04 f7 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f350:	83 c4 10             	add    esp,0x10
c001f353:	84 c0                	test   al,al
c001f355:	75 1f                	jne    c001f376 <IDE::detect()+0x164>
c001f357:	83 ec 0c             	sub    esp,0xc
c001f35a:	68 bc 5f 02 c0       	push   0xc0025fbc
c001f35f:	e8 c5 df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f364:	e9 e9 02 00 00       	jmp    c001f652 <IDE::detect()+0x440>
c001f369:	a8 80                	test   al,0x80
c001f36b:	74 21                	je     c001f38e <IDE::detect()+0x17c>
c001f36d:	45                   	inc    ebp
c001f36e:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f374:	7f 1e                	jg     c001f394 <IDE::detect()+0x182>
c001f376:	50                   	push   eax
c001f377:	6a 0c                	push   0xc
c001f379:	56                   	push   esi
c001f37a:	53                   	push   ebx
c001f37b:	e8 d4 f6 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f380:	83 c4 10             	add    esp,0x10
c001f383:	a8 01                	test   al,0x1
c001f385:	74 e2                	je     c001f369 <IDE::detect()+0x157>
c001f387:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f38c:	eb 23                	jmp    c001f3b1 <IDE::detect()+0x19f>
c001f38e:	a8 08                	test   al,0x8
c001f390:	74 db                	je     c001f36d <IDE::detect()+0x15b>
c001f392:	eb 18                	jmp    c001f3ac <IDE::detect()+0x19a>
c001f394:	50                   	push   eax
c001f395:	50                   	push   eax
c001f396:	6a 00                	push   0x0
c001f398:	6a 32                	push   0x32
c001f39a:	e8 65 7f ff ff       	call   c0017304 <milliTenthSleep(unsigned long long)>
c001f39f:	83 c4 10             	add    esp,0x10
c001f3a2:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f3a8:	75 cc                	jne    c001f376 <IDE::detect()+0x164>
c001f3aa:	eb db                	jmp    c001f387 <IDE::detect()+0x175>
c001f3ac:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f3b1:	83 ec 0c             	sub    esp,0xc
c001f3b4:	68 bf 5f 02 c0       	push   0xc0025fbf
c001f3b9:	e8 6b df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f3be:	83 c4 10             	add    esp,0x10
c001f3c1:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f3c6:	74 5f                	je     c001f427 <IDE::detect()+0x215>
c001f3c8:	51                   	push   ecx
c001f3c9:	6a 04                	push   0x4
c001f3cb:	56                   	push   esi
c001f3cc:	53                   	push   ebx
c001f3cd:	e8 82 f6 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f3d2:	83 c4 0c             	add    esp,0xc
c001f3d5:	89 c5                	mov    ebp,eax
c001f3d7:	6a 05                	push   0x5
c001f3d9:	56                   	push   esi
c001f3da:	53                   	push   ebx
c001f3db:	e8 74 f6 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f3e0:	83 c4 10             	add    esp,0x10
c001f3e3:	89 e9                	mov    ecx,ebp
c001f3e5:	0f b6 c0             	movzx  eax,al
c001f3e8:	0f b6 e9             	movzx  ebp,cl
c001f3eb:	83 fd 14             	cmp    ebp,0x14
c001f3ee:	75 07                	jne    c001f3f7 <IDE::detect()+0x1e5>
c001f3f0:	3d eb 00 00 00       	cmp    eax,0xeb
c001f3f5:	eb 0e                	jmp    c001f405 <IDE::detect()+0x1f3>
c001f3f7:	3d 96 00 00 00       	cmp    eax,0x96
c001f3fc:	0f 85 53 02 00 00    	jne    c001f655 <IDE::detect()+0x443>
c001f402:	83 fd 69             	cmp    ebp,0x69
c001f405:	0f 85 4a 02 00 00    	jne    c001f655 <IDE::detect()+0x443>
c001f40b:	68 a1 00 00 00       	push   0xa1
c001f410:	6a 07                	push   0x7
c001f412:	56                   	push   esi
c001f413:	53                   	push   ebx
c001f414:	e8 7b f5 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f419:	58                   	pop    eax
c001f41a:	5a                   	pop    edx
c001f41b:	6a 00                	push   0x0
c001f41d:	6a 0a                	push   0xa
c001f41f:	e8 e0 7e ff ff       	call   c0017304 <milliTenthSleep(unsigned long long)>
c001f424:	83 c4 10             	add    esp,0x10
c001f427:	83 ec 0c             	sub    esp,0xc
c001f42a:	89 fd                	mov    ebp,edi
c001f42c:	68 c2 5f 02 c0       	push   0xc0025fc2
c001f431:	c1 e5 06             	shl    ebp,0x6
c001f434:	e8 f0 de fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f439:	01 dd                	add    ebp,ebx
c001f43b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f43f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f446:	52                   	push   edx
c001f447:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f44b:	6a 00                	push   0x0
c001f44d:	56                   	push   esi
c001f44e:	53                   	push   ebx
c001f44f:	e8 ee fc ff ff       	call   c001f142 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f454:	83 c4 14             	add    esp,0x14
c001f457:	68 c6 5f 02 c0       	push   0xc0025fc6
c001f45c:	e8 c8 de fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f461:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f466:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f46d:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f474:	89 f0                	mov    eax,esi
c001f476:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f47c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f480:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f48a:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f491:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f499:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f4a0:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f4a8:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f4ae:	c7 04 24 ca 5f 02 c0 	mov    DWORD PTR [esp],0xc0025fca
c001f4b5:	e8 6f de fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f4ba:	83 c4 10             	add    esp,0x10
c001f4bd:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f4c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f4c8:	74 09                	je     c001f4d3 <IDE::detect()+0x2c1>
c001f4ca:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f4d1:	eb 07                	jmp    c001f4da <IDE::detect()+0x2c8>
c001f4d3:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f4da:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f4de:	89 f8                	mov    eax,edi
c001f4e0:	83 ec 0c             	sub    esp,0xc
c001f4e3:	c1 e0 06             	shl    eax,0x6
c001f4e6:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f4e9:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f4ef:	68 ce 5f 02 c0       	push   0xc0025fce
c001f4f4:	e8 30 de fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f4f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f4fd:	89 e8                	mov    eax,ebp
c001f4ff:	83 c4 10             	add    esp,0x10
c001f502:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f505:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f508:	83 c0 02             	add    eax,0x2
c001f50b:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f511:	83 c2 02             	add    edx,0x2
c001f514:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f517:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f51d:	39 d5                	cmp    ebp,edx
c001f51f:	75 e4                	jne    c001f505 <IDE::detect()+0x2f3>
c001f521:	89 f8                	mov    eax,edi
c001f523:	c1 e0 06             	shl    eax,0x6
c001f526:	01 d8                	add    eax,ebx
c001f528:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f52f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f536:	c1 ea 09             	shr    edx,0x9
c001f539:	83 e2 01             	and    edx,0x1
c001f53c:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f543:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f549:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f54d:	74 0c                	je     c001f55b <IDE::detect()+0x349>
c001f54f:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f558:	0f 95 c2             	setne  dl
c001f55b:	83 ec 0c             	sub    esp,0xc
c001f55e:	89 fd                	mov    ebp,edi
c001f560:	c1 e5 06             	shl    ebp,0x6
c001f563:	01 dd                	add    ebp,ebx
c001f565:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f56b:	68 d2 5f 02 c0       	push   0xc0025fd2
c001f570:	e8 b4 dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f575:	83 c4 10             	add    esp,0x10
c001f578:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f57d:	75 66                	jne    c001f5e5 <IDE::detect()+0x3d3>
c001f57f:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f586:	0f 84 b8 00 00 00    	je     c001f644 <IDE::detect()+0x432>
c001f58c:	83 ec 0c             	sub    esp,0xc
c001f58f:	68 d6 5f 02 c0       	push   0xc0025fd6
c001f594:	e8 90 dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f599:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f5a0:	e8 ea 05 ff ff       	call   c000fb8f <malloc>
c001f5a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5a8:	89 c5                	mov    ebp,eax
c001f5aa:	e8 43 05 00 00       	call   c001faf2 <ATA::ATA()>
c001f5af:	c7 04 24 da 5f 02 c0 	mov    DWORD PTR [esp],0xc0025fda
c001f5b6:	e8 6e dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f5bb:	59                   	pop    ecx
c001f5bc:	58                   	pop    eax
c001f5bd:	55                   	push   ebp
c001f5be:	53                   	push   ebx
c001f5bf:	e8 90 a4 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f5c4:	c7 04 24 df 5f 02 c0 	mov    DWORD PTR [esp],0xc0025fdf
c001f5cb:	e8 59 dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f5d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f5d3:	53                   	push   ebx
c001f5d4:	57                   	push   edi
c001f5d5:	6a 00                	push   0x0
c001f5d7:	55                   	push   ebp
c001f5d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f5db:	83 c4 14             	add    esp,0x14
c001f5de:	68 e4 5f 02 c0       	push   0xc0025fe4
c001f5e3:	eb 57                	jmp    c001f63c <IDE::detect()+0x42a>
c001f5e5:	83 ec 0c             	sub    esp,0xc
c001f5e8:	68 e9 5f 02 c0       	push   0xc0025fe9
c001f5ed:	e8 37 dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f5f2:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f5f9:	e8 91 05 ff ff       	call   c000fb8f <malloc>
c001f5fe:	89 04 24             	mov    DWORD PTR [esp],eax
c001f601:	89 c5                	mov    ebp,eax
c001f603:	e8 98 0c 00 00       	call   c00202a0 <ATAPI::ATAPI()>
c001f608:	c7 04 24 ef 5f 02 c0 	mov    DWORD PTR [esp],0xc0025fef
c001f60f:	e8 15 dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f614:	58                   	pop    eax
c001f615:	5a                   	pop    edx
c001f616:	55                   	push   ebp
c001f617:	53                   	push   ebx
c001f618:	e8 37 a4 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f61d:	c7 04 24 f6 5f 02 c0 	mov    DWORD PTR [esp],0xc0025ff6
c001f624:	e8 00 dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f629:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f62c:	53                   	push   ebx
c001f62d:	57                   	push   edi
c001f62e:	6a 00                	push   0x0
c001f630:	55                   	push   ebp
c001f631:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f634:	83 c4 14             	add    esp,0x14
c001f637:	68 fd 5f 02 c0       	push   0xc0025ffd
c001f63c:	e8 e8 dc fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f641:	83 c4 10             	add    esp,0x10
c001f644:	83 ec 0c             	sub    esp,0xc
c001f647:	47                   	inc    edi
c001f648:	68 04 60 02 c0       	push   0xc0026004
c001f64d:	e8 d7 dc fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f652:	83 c4 10             	add    esp,0x10
c001f655:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f659:	74 0c                	je     c001f667 <IDE::detect()+0x455>
c001f65b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f662:	e9 10 fc ff ff       	jmp    c001f277 <IDE::detect()+0x65>
c001f667:	4e                   	dec    esi
c001f668:	74 0a                	je     c001f674 <IDE::detect()+0x462>
c001f66a:	be 01 00 00 00       	mov    esi,0x1
c001f66f:	e9 ec fb ff ff       	jmp    c001f260 <IDE::detect()+0x4e>
c001f674:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f67a:	5b                   	pop    ebx
c001f67b:	5e                   	pop    esi
c001f67c:	5f                   	pop    edi
c001f67d:	5d                   	pop    ebp
c001f67e:	c3                   	ret    
c001f67f:	90                   	nop

c001f680 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f680:	55                   	push   ebp
c001f681:	57                   	push   edi
c001f682:	56                   	push   esi
c001f683:	53                   	push   ebx
c001f684:	83 ec 1c             	sub    esp,0x1c
c001f687:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f68b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f68f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f693:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f697:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f69b:	88 c3                	mov    bl,al
c001f69d:	25 ff 00 00 00       	and    eax,0xff
c001f6a2:	0f 84 88 00 00 00    	je     c001f730 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f6a8:	83 ec 0c             	sub    esp,0xc
c001f6ab:	89 c7                	mov    edi,eax
c001f6ad:	68 08 60 02 c0       	push   0xc0026008
c001f6b2:	e8 c5 78 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f6b7:	83 c4 10             	add    esp,0x10
c001f6ba:	83 ff 01             	cmp    edi,0x1
c001f6bd:	74 6b                	je     c001f72a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f6bf:	83 ff 02             	cmp    edi,0x2
c001f6c2:	75 58                	jne    c001f71c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f6c4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f6c9:	01 ff                	add    edi,edi
c001f6cb:	50                   	push   eax
c001f6cc:	09 fe                	or     esi,edi
c001f6ce:	6a 01                	push   0x1
c001f6d0:	89 f0                	mov    eax,esi
c001f6d2:	0f b6 f0             	movzx  esi,al
c001f6d5:	c1 e6 06             	shl    esi,0x6
c001f6d8:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f6e0:	50                   	push   eax
c001f6e1:	55                   	push   ebp
c001f6e2:	e8 6d f3 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f6e7:	83 c4 10             	add    esp,0x10
c001f6ea:	a8 01                	test   al,0x1
c001f6ec:	74 02                	je     c001f6f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f6ee:	b3 07                	mov    bl,0x7
c001f6f0:	a8 02                	test   al,0x2
c001f6f2:	74 02                	je     c001f6f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f6f4:	b3 03                	mov    bl,0x3
c001f6f6:	a8 04                	test   al,0x4
c001f6f8:	74 02                	je     c001f6fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f6fa:	b3 14                	mov    bl,0x14
c001f6fc:	a8 08                	test   al,0x8
c001f6fe:	74 02                	je     c001f702 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f700:	b3 03                	mov    bl,0x3
c001f702:	a8 10                	test   al,0x10
c001f704:	74 02                	je     c001f708 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f706:	b3 15                	mov    bl,0x15
c001f708:	a8 20                	test   al,0x20
c001f70a:	74 02                	je     c001f70e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f70c:	b3 03                	mov    bl,0x3
c001f70e:	a8 40                	test   al,0x40
c001f710:	74 02                	je     c001f714 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f712:	b3 16                	mov    bl,0x16
c001f714:	a8 80                	test   al,0x80
c001f716:	74 18                	je     c001f730 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f718:	b3 0d                	mov    bl,0xd
c001f71a:	eb 14                	jmp    c001f730 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f71c:	83 ff 03             	cmp    edi,0x3
c001f71f:	74 0d                	je     c001f72e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f721:	83 ff 04             	cmp    edi,0x4
c001f724:	75 0a                	jne    c001f730 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f726:	b3 08                	mov    bl,0x8
c001f728:	eb 06                	jmp    c001f730 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f72a:	b3 13                	mov    bl,0x13
c001f72c:	eb 02                	jmp    c001f730 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f72e:	b3 17                	mov    bl,0x17
c001f730:	83 c4 1c             	add    esp,0x1c
c001f733:	88 d8                	mov    al,bl
c001f735:	5b                   	pop    ebx
c001f736:	5e                   	pop    esi
c001f737:	5f                   	pop    edi
c001f738:	5d                   	pop    ebp
c001f739:	c3                   	ret    

c001f73a <IDE::polling(unsigned char, unsigned int)>:
c001f73a:	57                   	push   edi
c001f73b:	56                   	push   esi
c001f73c:	53                   	push   ebx
c001f73d:	bb 04 00 00 00       	mov    ebx,0x4
c001f742:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f746:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f74b:	52                   	push   edx
c001f74c:	6a 0c                	push   0xc
c001f74e:	56                   	push   esi
c001f74f:	57                   	push   edi
c001f750:	e8 ff f2 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f755:	83 c4 10             	add    esp,0x10
c001f758:	4b                   	dec    ebx
c001f759:	75 f0                	jne    c001f74b <IDE::polling(unsigned char, unsigned int)+0x11>
c001f75b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f760:	50                   	push   eax
c001f761:	6a 0c                	push   0xc
c001f763:	56                   	push   esi
c001f764:	57                   	push   edi
c001f765:	e8 ea f2 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001f76a:	83 c4 10             	add    esp,0x10
c001f76d:	a8 01                	test   al,0x1
c001f76f:	75 17                	jne    c001f788 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f771:	a8 20                	test   al,0x20
c001f773:	75 0f                	jne    c001f784 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f775:	4b                   	dec    ebx
c001f776:	74 10                	je     c001f788 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f778:	a8 80                	test   al,0x80
c001f77a:	75 e4                	jne    c001f760 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f77c:	a8 08                	test   al,0x8
c001f77e:	74 e0                	je     c001f760 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f780:	31 c0                	xor    eax,eax
c001f782:	eb 06                	jmp    c001f78a <IDE::polling(unsigned char, unsigned int)+0x50>
c001f784:	b0 01                	mov    al,0x1
c001f786:	eb 02                	jmp    c001f78a <IDE::polling(unsigned char, unsigned int)+0x50>
c001f788:	b0 02                	mov    al,0x2
c001f78a:	5b                   	pop    ebx
c001f78b:	5e                   	pop    esi
c001f78c:	5f                   	pop    edi
c001f78d:	c3                   	ret    

c001f78e <SATABus::close(int, int, void*)>:
c001f78e:	31 c0                	xor    eax,eax
c001f790:	c3                   	ret    
c001f791:	90                   	nop

c001f792 <SATABus::detect()>:
c001f792:	c3                   	ret    
c001f793:	90                   	nop

c001f794 <SATABus::SATABus()>:
c001f794:	83 ec 0c             	sub    esp,0xc
c001f797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79b:	83 ec 08             	sub    esp,0x8
c001f79e:	68 40 60 02 c0       	push   0xc0026040
c001f7a3:	50                   	push   eax
c001f7a4:	e8 03 a6 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001f7a9:	83 c4 10             	add    esp,0x10
c001f7ac:	ba 6c 60 02 c0       	mov    edx,0xc002606c
c001f7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b5:	89 10                	mov    DWORD PTR [eax],edx
c001f7b7:	83 ec 0c             	sub    esp,0xc
c001f7ba:	6a 50                	push   0x50
c001f7bc:	e8 f7 0a ff ff       	call   c00102b8 <Phys::allocateContiguousPages(int)>
c001f7c1:	83 c4 10             	add    esp,0x10
c001f7c4:	89 c2                	mov    edx,eax
c001f7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ca:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f7d0:	83 ec 0c             	sub    esp,0xc
c001f7d3:	6a 50                	push   0x50
c001f7d5:	e8 4d 3e ff ff       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c001f7da:	83 c4 10             	add    esp,0x10
c001f7dd:	89 c2                	mov    edx,eax
c001f7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f7e9:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c001f7ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7f2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f7f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7fc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f802:	83 ec 0c             	sub    esp,0xc
c001f805:	6a 03                	push   0x3
c001f807:	6a 50                	push   0x50
c001f809:	51                   	push   ecx
c001f80a:	52                   	push   edx
c001f80b:	50                   	push   eax
c001f80c:	e8 e3 46 ff ff       	call   c0013ef4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f811:	83 c4 20             	add    esp,0x20
c001f814:	90                   	nop
c001f815:	83 c4 0c             	add    esp,0xc
c001f818:	c3                   	ret    
c001f819:	90                   	nop

c001f81a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f81a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f81e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f821:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f824:	09 c2                	or     edx,eax
c001f826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f82a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f830:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f832:	31 c0                	xor    eax,eax
c001f834:	c1 e9 08             	shr    ecx,0x8
c001f837:	83 e1 0f             	and    ecx,0xf
c001f83a:	39 c8                	cmp    eax,ecx
c001f83c:	74 0a                	je     c001f848 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f83e:	f6 c2 01             	test   dl,0x1
c001f841:	74 08                	je     c001f84b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f843:	d1 ea                	shr    edx,1
c001f845:	40                   	inc    eax
c001f846:	eb f2                	jmp    c001f83a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f848:	83 c8 ff             	or     eax,0xffffffff
c001f84b:	c3                   	ret    

c001f84c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f84c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f850:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f853:	89 c2                	mov    edx,eax
c001f855:	c1 ea 08             	shr    edx,0x8
c001f858:	83 e2 0f             	and    edx,0xf
c001f85b:	4a                   	dec    edx
c001f85c:	75 32                	jne    c001f890 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f85e:	83 e0 0f             	and    eax,0xf
c001f861:	83 f8 03             	cmp    eax,0x3
c001f864:	75 2a                	jne    c001f890 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f866:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f869:	b8 02 00 00 00       	mov    eax,0x2
c001f86e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f874:	74 1c                	je     c001f892 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f876:	b8 04 00 00 00       	mov    eax,0x4
c001f87b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f881:	74 0f                	je     c001f892 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f883:	31 c0                	xor    eax,eax
c001f885:	83 fa 03             	cmp    edx,0x3
c001f888:	0f 94 c0             	sete   al
c001f88b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f88f:	c3                   	ret    
c001f890:	31 c0                	xor    eax,eax
c001f892:	c3                   	ret    
c001f893:	90                   	nop

c001f894 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f898:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f89b:	0f ba e2 0f          	bt     edx,0xf
c001f89f:	72 f7                	jb     c001f898 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f8a1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f8a4:	83 ca 10             	or     edx,0x10
c001f8a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f8aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f8ad:	83 ca 01             	or     edx,0x1
c001f8b0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f8b3:	c3                   	ret    

c001f8b4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f8b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8b8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f8bb:	83 e2 fe             	and    edx,0xfffffffe
c001f8be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f8c1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f8c4:	83 e2 ef             	and    edx,0xffffffef
c001f8c7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f8ca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f8cd:	0f ba e2 0e          	bt     edx,0xe
c001f8d1:	72 f7                	jb     c001f8ca <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f8d3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f8d6:	0f ba e2 0f          	bt     edx,0xf
c001f8da:	72 ee                	jb     c001f8ca <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f8dc:	c3                   	ret    
c001f8dd:	90                   	nop

c001f8de <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f8de:	55                   	push   ebp
c001f8df:	57                   	push   edi
c001f8e0:	56                   	push   esi
c001f8e1:	53                   	push   ebx
c001f8e2:	83 ec 1c             	sub    esp,0x1c
c001f8e5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f8ed:	53                   	push   ebx
c001f8ee:	56                   	push   esi
c001f8ef:	e8 c0 ff ff ff       	call   c001f8b4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f8f4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f8f8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f8fe:	83 ec 0c             	sub    esp,0xc
c001f901:	c1 e5 0a             	shl    ebp,0xa
c001f904:	01 e8                	add    eax,ebp
c001f906:	89 03                	mov    DWORD PTR [ebx],eax
c001f908:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f90a:	68 00 04 00 00       	push   0x400
c001f90f:	6a 00                	push   0x0
c001f911:	50                   	push   eax
c001f912:	e8 d9 0b fe ff       	call   c00004f0 <memset>
c001f917:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f91d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001f921:	01 e8                	add    eax,ebp
c001f923:	83 c4 1c             	add    esp,0x1c
c001f926:	89 03                	mov    DWORD PTR [ebx],eax
c001f928:	c1 e2 08             	shl    edx,0x8
c001f92b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f932:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001f938:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f93e:	01 f8                	add    eax,edi
c001f940:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f943:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f946:	68 00 01 00 00       	push   0x100
c001f94b:	6a 00                	push   0x0
c001f94d:	50                   	push   eax
c001f94e:	e8 9d 0b fe ff       	call   c00004f0 <memset>
c001f953:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001f959:	01 fa                	add    edx,edi
c001f95b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f95f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f962:	c1 e7 0d             	shl    edi,0xd
c001f965:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f96c:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f972:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f978:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f97c:	31 ff                	xor    edi,edi
c001f97e:	83 c4 10             	add    esp,0x10
c001f981:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f987:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f98b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f991:	83 c5 20             	add    ebp,0x20
c001f994:	01 f8                	add    eax,edi
c001f996:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f999:	52                   	push   edx
c001f99a:	68 00 01 00 00       	push   0x100
c001f99f:	6a 00                	push   0x0
c001f9a1:	50                   	push   eax
c001f9a2:	e8 49 0b fe ff       	call   c00004f0 <memset>
c001f9a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f9ab:	83 c4 10             	add    esp,0x10
c001f9ae:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f9b4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f9bb:	01 f8                	add    eax,edi
c001f9bd:	81 c7 00 01 00 00    	add    edi,0x100
c001f9c3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f9c6:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f9cc:	75 b3                	jne    c001f981 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001f9ce:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f9d5:	50                   	push   eax
c001f9d6:	50                   	push   eax
c001f9d7:	53                   	push   ebx
c001f9d8:	56                   	push   esi
c001f9d9:	e8 b6 fe ff ff       	call   c001f894 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f9de:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f9e5:	83 c4 2c             	add    esp,0x2c
c001f9e8:	5b                   	pop    ebx
c001f9e9:	5e                   	pop    esi
c001f9ea:	5f                   	pop    edi
c001f9eb:	5d                   	pop    ebp
c001f9ec:	c3                   	ret    
c001f9ed:	90                   	nop

c001f9ee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f9ee:	55                   	push   ebp
c001f9ef:	57                   	push   edi
c001f9f0:	56                   	push   esi
c001f9f1:	53                   	push   ebx
c001f9f2:	31 db                	xor    ebx,ebx
c001f9f4:	83 ec 0c             	sub    esp,0xc
c001f9f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f9fb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f9ff:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001fa02:	f7 c7 01 00 00 00    	test   edi,0x1
c001fa08:	74 7a                	je     c001fa84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fa0a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001fa0e:	89 d8                	mov    eax,ebx
c001fa10:	c1 e0 07             	shl    eax,0x7
c001fa13:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001fa1a:	55                   	push   ebp
c001fa1b:	56                   	push   esi
c001fa1c:	e8 2b fe ff ff       	call   c001f84c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001fa21:	5a                   	pop    edx
c001fa22:	83 f8 01             	cmp    eax,0x1
c001fa25:	59                   	pop    ecx
c001fa26:	75 21                	jne    c001fa49 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001fa28:	50                   	push   eax
c001fa29:	53                   	push   ebx
c001fa2a:	55                   	push   ebp
c001fa2b:	56                   	push   esi
c001fa2c:	e8 ad fe ff ff       	call   c001f8de <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fa31:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001fa38:	e8 52 01 ff ff       	call   c000fb8f <malloc>
c001fa3d:	89 c5                	mov    ebp,eax
c001fa3f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa42:	e8 25 0f 00 00       	call   c002096c <SATA::SATA()>
c001fa47:	eb 24                	jmp    c001fa6d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001fa49:	83 f8 04             	cmp    eax,0x4
c001fa4c:	75 36                	jne    c001fa84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fa4e:	51                   	push   ecx
c001fa4f:	53                   	push   ebx
c001fa50:	55                   	push   ebp
c001fa51:	56                   	push   esi
c001fa52:	e8 87 fe ff ff       	call   c001f8de <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fa57:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fa5e:	e8 2c 01 ff ff       	call   c000fb8f <malloc>
c001fa63:	89 c5                	mov    ebp,eax
c001fa65:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa68:	e8 97 12 00 00       	call   c0020d04 <SATAPI::SATAPI()>
c001fa6d:	58                   	pop    eax
c001fa6e:	5a                   	pop    edx
c001fa6f:	55                   	push   ebp
c001fa70:	56                   	push   esi
c001fa71:	e8 de 9f fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001fa76:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fa79:	56                   	push   esi
c001fa7a:	6a 00                	push   0x0
c001fa7c:	53                   	push   ebx
c001fa7d:	55                   	push   ebp
c001fa7e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001fa81:	83 c4 20             	add    esp,0x20
c001fa84:	d1 ef                	shr    edi,1
c001fa86:	43                   	inc    ebx
c001fa87:	83 fb 20             	cmp    ebx,0x20
c001fa8a:	0f 85 72 ff ff ff    	jne    c001fa02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001fa90:	83 c4 0c             	add    esp,0xc
c001fa93:	5b                   	pop    ebx
c001fa94:	5e                   	pop    esi
c001fa95:	5f                   	pop    edi
c001fa96:	5d                   	pop    ebp
c001fa97:	c3                   	ret    

c001fa98 <SATABus::open(int, int, void*)>:
c001fa98:	53                   	push   ebx
c001fa99:	83 ec 08             	sub    esp,0x8
c001fa9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001faa0:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001faa6:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001faac:	e8 57 73 ff ff       	call   c0016e08 <KeDisablePreemption()>
c001fab1:	52                   	push   edx
c001fab2:	52                   	push   edx
c001fab3:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fab9:	53                   	push   ebx
c001faba:	e8 2f ff ff ff       	call   c001f9ee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fabf:	e8 6c 73 ff ff       	call   c0016e30 <KeRestorePreemption()>
c001fac4:	31 c0                	xor    eax,eax
c001fac6:	83 c4 18             	add    esp,0x18
c001fac9:	5b                   	pop    ebx
c001faca:	c3                   	ret    
c001facb:	90                   	nop

c001facc <ATA::close(int, int, void*)>:
c001facc:	83 ec 0c             	sub    esp,0xc
c001facf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fad9:	85 c0                	test   eax,eax
c001fadb:	74 0c                	je     c001fae9 <ATA::close(int, int, void*)+0x1d>
c001fadd:	83 ec 0c             	sub    esp,0xc
c001fae0:	8b 10                	mov    edx,DWORD PTR [eax]
c001fae2:	50                   	push   eax
c001fae3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fae6:	83 c4 10             	add    esp,0x10
c001fae9:	31 c0                	xor    eax,eax
c001faeb:	83 c4 0c             	add    esp,0xc
c001faee:	c3                   	ret    
c001faef:	90                   	nop

c001faf0 <ATA::powerSaving(PowerSavingLevel)>:
c001faf0:	c3                   	ret    
c001faf1:	90                   	nop

c001faf2 <ATA::ATA()>:
c001faf2:	83 ec 0c             	sub    esp,0xc
c001faf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf9:	83 ec 04             	sub    esp,0x4
c001fafc:	68 00 02 00 00       	push   0x200
c001fb01:	68 ed 61 02 c0       	push   0xc00261ed
c001fb06:	50                   	push   eax
c001fb07:	e8 2a a3 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fb0c:	83 c4 10             	add    esp,0x10
c001fb0f:	ba 54 61 02 c0       	mov    edx,0xc0026154
c001fb14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb18:	89 10                	mov    DWORD PTR [eax],edx
c001fb1a:	90                   	nop
c001fb1b:	83 c4 0c             	add    esp,0xc
c001fb1e:	c3                   	ret    
c001fb1f:	90                   	nop

c001fb20 <ATA::flush(bool)>:
c001fb20:	53                   	push   ebx
c001fb21:	83 ec 08             	sub    esp,0x8
c001fb24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb28:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001fb2d:	83 f8 01             	cmp    eax,0x1
c001fb30:	19 c0                	sbb    eax,eax
c001fb32:	83 e0 fd             	and    eax,0xfffffffd
c001fb35:	05 ea 00 00 00       	add    eax,0xea
c001fb3a:	50                   	push   eax
c001fb3b:	6a 07                	push   0x7
c001fb3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb44:	50                   	push   eax
c001fb45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb4b:	e8 44 ee ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb50:	83 c4 0c             	add    esp,0xc
c001fb53:	6a 00                	push   0x0
c001fb55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb5c:	50                   	push   eax
c001fb5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb63:	e8 d2 fb ff ff       	call   c001f73a <IDE::polling(unsigned char, unsigned int)>
c001fb68:	83 c4 18             	add    esp,0x18
c001fb6b:	5b                   	pop    ebx
c001fb6c:	c3                   	ret    
c001fb6d:	90                   	nop

c001fb6e <ATA::readyForCommand()>:
c001fb6e:	56                   	push   esi
c001fb6f:	53                   	push   ebx
c001fb70:	31 db                	xor    ebx,ebx
c001fb72:	50                   	push   eax
c001fb73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb77:	50                   	push   eax
c001fb78:	6a 0c                	push   0xc
c001fb7a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fb81:	50                   	push   eax
c001fb82:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fb88:	e8 c7 ee ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c001fb8d:	83 c4 10             	add    esp,0x10
c001fb90:	a8 88                	test   al,0x88
c001fb92:	74 20                	je     c001fbb4 <ATA::readyForCommand()+0x46>
c001fb94:	43                   	inc    ebx
c001fb95:	83 fb 63             	cmp    ebx,0x63
c001fb98:	7e dd                	jle    c001fb77 <ATA::readyForCommand()+0x9>
c001fb9a:	51                   	push   ecx
c001fb9b:	51                   	push   ecx
c001fb9c:	6a 00                	push   0x0
c001fb9e:	6a 0a                	push   0xa
c001fba0:	e8 5f 77 ff ff       	call   c0017304 <milliTenthSleep(unsigned long long)>
c001fba5:	83 c4 10             	add    esp,0x10
c001fba8:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fbae:	75 c7                	jne    c001fb77 <ATA::readyForCommand()+0x9>
c001fbb0:	31 c0                	xor    eax,eax
c001fbb2:	eb 02                	jmp    c001fbb6 <ATA::readyForCommand()+0x48>
c001fbb4:	b0 01                	mov    al,0x1
c001fbb6:	5a                   	pop    edx
c001fbb7:	5b                   	pop    ebx
c001fbb8:	5e                   	pop    esi
c001fbb9:	c3                   	ret    

c001fbba <ATA::access(unsigned long long, int, void*, bool)>:
c001fbba:	55                   	push   ebp
c001fbbb:	57                   	push   edi
c001fbbc:	56                   	push   esi
c001fbbd:	53                   	push   ebx
c001fbbe:	83 ec 2c             	sub    esp,0x2c
c001fbc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fbc5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fbc9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fbcd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fbd1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fbd5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fbd9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fbdd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fbe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fbe7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fbed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbf1:	c1 e0 06             	shl    eax,0x6
c001fbf4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fbfc:	74 5d                	je     c001fc5b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001fbfe:	89 fa                	mov    edx,edi
c001fc00:	89 f0                	mov    eax,esi
c001fc02:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fc06:	c1 ea 1c             	shr    edx,0x1c
c001fc09:	89 d1                	mov    ecx,edx
c001fc0b:	09 c1                	or     ecx,eax
c001fc0d:	74 25                	je     c001fc34 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001fc0f:	31 ed                	xor    ebp,ebp
c001fc11:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fc18:	89 fa                	mov    edx,edi
c001fc1a:	89 f0                	mov    eax,esi
c001fc1c:	0f ad d0             	shrd   eax,edx,cl
c001fc1f:	d3 ea                	shr    edx,cl
c001fc21:	f6 c1 20             	test   cl,0x20
c001fc24:	74 02                	je     c001fc28 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001fc26:	89 d0                	mov    eax,edx
c001fc28:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fc2c:	45                   	inc    ebp
c001fc2d:	83 fd 06             	cmp    ebp,0x6
c001fc30:	75 df                	jne    c001fc11 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001fc32:	eb 76                	jmp    c001fcaa <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001fc34:	89 f0                	mov    eax,esi
c001fc36:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fc3b:	89 fa                	mov    edx,edi
c001fc3d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fc44:	0f ac d0 10          	shrd   eax,edx,0x10
c001fc48:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fc4d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fc51:	c1 ee 18             	shr    esi,0x18
c001fc54:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fc59:	eb 56                	jmp    c001fcb1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001fc5b:	6a 00                	push   0x0
c001fc5d:	6a 3f                	push   0x3f
c001fc5f:	57                   	push   edi
c001fc60:	56                   	push   esi
c001fc61:	e8 ae 20 00 00       	call   c0021d14 <__umoddi3>
c001fc66:	83 c4 10             	add    esp,0x10
c001fc69:	40                   	inc    eax
c001fc6a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fc6e:	6a 00                	push   0x0
c001fc70:	68 f0 03 00 00       	push   0x3f0
c001fc75:	57                   	push   edi
c001fc76:	56                   	push   esi
c001fc77:	e8 98 1f 00 00       	call   c0021c14 <__udivdi3>
c001fc7c:	83 c4 10             	add    esp,0x10
c001fc7f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fc84:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fc8b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fc90:	6a 00                	push   0x0
c001fc92:	6a 3f                	push   0x3f
c001fc94:	57                   	push   edi
c001fc95:	56                   	push   esi
c001fc96:	e8 79 1f 00 00       	call   c0021c14 <__udivdi3>
c001fc9b:	83 c4 10             	add    esp,0x10
c001fc9e:	83 e0 0f             	and    eax,0xf
c001fca1:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fca6:	89 c6                	mov    esi,eax
c001fca8:	eb 07                	jmp    c001fcb1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001fcaa:	31 f6                	xor    esi,esi
c001fcac:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001fcb1:	55                   	push   ebp
c001fcb2:	6a 00                	push   0x0
c001fcb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcbb:	50                   	push   eax
c001fcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fcc0:	e8 d9 ee ff ff       	call   c001eb9e <IDE::enableIRQs(unsigned char, bool)>
c001fcc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcc8:	e8 a1 fe ff ff       	call   c001fb6e <ATA::readyForCommand()>
c001fccd:	83 c4 10             	add    esp,0x10
c001fcd0:	84 c0                	test   al,al
c001fcd2:	75 0a                	jne    c001fcde <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001fcd4:	be 01 00 00 00       	mov    esi,0x1
c001fcd9:	e9 c2 02 00 00       	jmp    c001ffa0 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001fcde:	fa                   	cli    
c001fcdf:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c001fce5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001fceb:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001fcf0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fcf6:	75 0a                	jne    c001fd02 <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001fcf8:	c1 e0 04             	shl    eax,0x4
c001fcfb:	09 c6                	or     esi,eax
c001fcfd:	83 ce a0             	or     esi,0xffffffa0
c001fd00:	eb 08                	jmp    c001fd0a <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001fd02:	c1 e0 04             	shl    eax,0x4
c001fd05:	09 c6                	or     esi,eax
c001fd07:	83 ce e0             	or     esi,0xffffffe0
c001fd0a:	89 f0                	mov    eax,esi
c001fd0c:	0f b6 d2             	movzx  edx,dl
c001fd0f:	0f b6 f0             	movzx  esi,al
c001fd12:	56                   	push   esi
c001fd13:	6a 06                	push   0x6
c001fd15:	52                   	push   edx
c001fd16:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd1c:	e8 73 ec ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd21:	83 c4 10             	add    esp,0x10
c001fd24:	6a 00                	push   0x0
c001fd26:	6a 01                	push   0x1
c001fd28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd2f:	50                   	push   eax
c001fd30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd36:	e8 59 ec ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd3b:	83 c4 10             	add    esp,0x10
c001fd3e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001fd43:	83 f8 02             	cmp    eax,0x2
c001fd46:	75 6e                	jne    c001fdb6 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001fd48:	6a 00                	push   0x0
c001fd4a:	6a 08                	push   0x8
c001fd4c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd53:	50                   	push   eax
c001fd54:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd5a:	e8 35 ec ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd5f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fd64:	50                   	push   eax
c001fd65:	6a 09                	push   0x9
c001fd67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd6e:	50                   	push   eax
c001fd6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd75:	e8 1a ec ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd7a:	83 c4 20             	add    esp,0x20
c001fd7d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fd82:	50                   	push   eax
c001fd83:	6a 0a                	push   0xa
c001fd85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd8c:	50                   	push   eax
c001fd8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd93:	e8 fc eb ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd98:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fd9d:	50                   	push   eax
c001fd9e:	6a 0b                	push   0xb
c001fda0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fda7:	50                   	push   eax
c001fda8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdae:	e8 e1 eb ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdb3:	83 c4 20             	add    esp,0x20
c001fdb6:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fdbb:	50                   	push   eax
c001fdbc:	6a 02                	push   0x2
c001fdbe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdc5:	50                   	push   eax
c001fdc6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdcc:	e8 c3 eb ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdd1:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fdd6:	50                   	push   eax
c001fdd7:	6a 03                	push   0x3
c001fdd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fde0:	50                   	push   eax
c001fde1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fde7:	e8 a8 eb ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdec:	83 c4 20             	add    esp,0x20
c001fdef:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fdf4:	50                   	push   eax
c001fdf5:	6a 04                	push   0x4
c001fdf7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdfe:	50                   	push   eax
c001fdff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe05:	e8 8a eb ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe0a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fe0f:	50                   	push   eax
c001fe10:	6a 05                	push   0x5
c001fe12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe19:	50                   	push   eax
c001fe1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe20:	e8 6f eb ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe25:	83 c4 20             	add    esp,0x20
c001fe28:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fe2d:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001fe32:	74 13                	je     c001fe47 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001fe34:	83 f8 02             	cmp    eax,0x2
c001fe37:	74 20                	je     c001fe59 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001fe39:	48                   	dec    eax
c001fe3a:	0f 85 94 fe ff ff    	jne    c001fcd4 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001fe40:	b8 30 00 00 00       	mov    eax,0x30
c001fe45:	eb 1e                	jmp    c001fe65 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001fe47:	83 f8 02             	cmp    eax,0x2
c001fe4a:	74 14                	je     c001fe60 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001fe4c:	48                   	dec    eax
c001fe4d:	b8 20 00 00 00       	mov    eax,0x20
c001fe52:	74 11                	je     c001fe65 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001fe54:	e9 7b fe ff ff       	jmp    c001fcd4 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001fe59:	b8 34 00 00 00       	mov    eax,0x34
c001fe5e:	eb 05                	jmp    c001fe65 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001fe60:	b8 24 00 00 00       	mov    eax,0x24
c001fe65:	50                   	push   eax
c001fe66:	6a 07                	push   0x7
c001fe68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe6f:	50                   	push   eax
c001fe70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe76:	e8 19 eb ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe7b:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001fe82:	83 c4 10             	add    esp,0x10
c001fe85:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c001fe8c:	75 01                	jne    c001fe8f <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001fe8e:	fb                   	sti    
c001fe8f:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001fe93:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001fe98:	85 f6                	test   esi,esi
c001fe9a:	0f 84 dd 00 00 00    	je     c001ff7d <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001fea0:	57                   	push   edi
c001fea1:	6a 01                	push   0x1
c001fea3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001feaa:	50                   	push   eax
c001feab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001feb1:	e8 84 f8 ff ff       	call   c001f73a <IDE::polling(unsigned char, unsigned int)>
c001feb6:	83 c4 10             	add    esp,0x10
c001feb9:	0f b6 c0             	movzx  eax,al
c001febc:	85 c0                	test   eax,eax
c001febe:	74 23                	je     c001fee3 <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001fec0:	50                   	push   eax
c001fec1:	89 c6                	mov    esi,eax
c001fec3:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001feca:	50                   	push   eax
c001fecb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fed2:	50                   	push   eax
c001fed3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fed9:	e8 a2 f7 ff ff       	call   c001f680 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fede:	e9 ba 00 00 00       	jmp    c001ff9d <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001fee3:	85 ed                	test   ebp,ebp
c001fee5:	74 49                	je     c001ff30 <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001fee7:	fa                   	cli    
c001fee8:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c001feee:	31 c9                	xor    ecx,ecx
c001fef0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fef4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fef8:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001fefc:	51                   	push   ecx
c001fefd:	51                   	push   ecx
c001fefe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff05:	50                   	push   eax
c001ff06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff0c:	e8 71 ea ff ff       	call   c001e982 <IDE::getBase(unsigned char)>
c001ff11:	89 c2                	mov    edx,eax
c001ff13:	89 f8                	mov    eax,edi
c001ff15:	66 ef                	out    dx,ax
c001ff17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ff1b:	83 c4 10             	add    esp,0x10
c001ff1e:	41                   	inc    ecx
c001ff1f:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001ff25:	75 c9                	jne    c001fef0 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001ff27:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001ff2e:	eb 35                	jmp    c001ff65 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001ff30:	fa                   	cli    
c001ff31:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c001ff37:	52                   	push   edx
c001ff38:	52                   	push   edx
c001ff39:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff40:	50                   	push   eax
c001ff41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff47:	e8 36 ea ff ff       	call   c001e982 <IDE::getBase(unsigned char)>
c001ff4c:	b9 00 01 00 00       	mov    ecx,0x100
c001ff51:	89 c2                	mov    edx,eax
c001ff53:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ff57:	fc                   	cld    
c001ff58:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ff5b:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001ff62:	83 c4 10             	add    esp,0x10
c001ff65:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c001ff6c:	75 01                	jne    c001ff6f <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001ff6e:	fb                   	sti    
c001ff6f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ff77:	4e                   	dec    esi
c001ff78:	e9 1b ff ff ff       	jmp    c001fe98 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001ff7d:	31 f6                	xor    esi,esi
c001ff7f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ff84:	74 1a                	je     c001ffa0 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001ff86:	50                   	push   eax
c001ff87:	50                   	push   eax
c001ff88:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001ff8d:	83 f8 02             	cmp    eax,0x2
c001ff90:	0f 94 c0             	sete   al
c001ff93:	0f b6 c0             	movzx  eax,al
c001ff96:	50                   	push   eax
c001ff97:	53                   	push   ebx
c001ff98:	e8 83 fb ff ff       	call   c001fb20 <ATA::flush(bool)>
c001ff9d:	83 c4 10             	add    esp,0x10
c001ffa0:	83 c4 2c             	add    esp,0x2c
c001ffa3:	89 f0                	mov    eax,esi
c001ffa5:	5b                   	pop    ebx
c001ffa6:	5e                   	pop    esi
c001ffa7:	5f                   	pop    edi
c001ffa8:	5d                   	pop    ebp
c001ffa9:	c3                   	ret    

c001ffaa <ATA::read(unsigned long long, int, void*)>:
c001ffaa:	57                   	push   edi
c001ffab:	b8 04 00 00 00       	mov    eax,0x4
c001ffb0:	56                   	push   esi
c001ffb1:	53                   	push   ebx
c001ffb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ffb6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ffba:	8d 7a ff             	lea    edi,[edx-0x1]
c001ffbd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ffc1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ffc5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ffcb:	77 25                	ja     c001fff2 <ATA::read(unsigned long long, int, void*)+0x48>
c001ffcd:	b8 06 00 00 00       	mov    eax,0x6
c001ffd2:	85 f6                	test   esi,esi
c001ffd4:	74 1c                	je     c001fff2 <ATA::read(unsigned long long, int, void*)+0x48>
c001ffd6:	50                   	push   eax
c001ffd7:	50                   	push   eax
c001ffd8:	6a 00                	push   0x0
c001ffda:	56                   	push   esi
c001ffdb:	52                   	push   edx
c001ffdc:	53                   	push   ebx
c001ffdd:	51                   	push   ecx
c001ffde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ffe2:	e8 d3 fb ff ff       	call   c001fbba <ATA::access(unsigned long long, int, void*, bool)>
c001ffe7:	83 c4 20             	add    esp,0x20
c001ffea:	85 c0                	test   eax,eax
c001ffec:	0f 95 c0             	setne  al
c001ffef:	0f b6 c0             	movzx  eax,al
c001fff2:	5b                   	pop    ebx
c001fff3:	5e                   	pop    esi
c001fff4:	5f                   	pop    edi
c001fff5:	c3                   	ret    

c001fff6 <ATA::write(unsigned long long, int, void*)>:
c001fff6:	57                   	push   edi
c001fff7:	b8 04 00 00 00       	mov    eax,0x4
c001fffc:	56                   	push   esi
c001fffd:	53                   	push   ebx
c001fffe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020002:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020006:	8d 7a ff             	lea    edi,[edx-0x1]
c0020009:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002000d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020011:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020017:	77 25                	ja     c002003e <ATA::write(unsigned long long, int, void*)+0x48>
c0020019:	b8 06 00 00 00       	mov    eax,0x6
c002001e:	85 f6                	test   esi,esi
c0020020:	74 1c                	je     c002003e <ATA::write(unsigned long long, int, void*)+0x48>
c0020022:	50                   	push   eax
c0020023:	50                   	push   eax
c0020024:	6a 01                	push   0x1
c0020026:	56                   	push   esi
c0020027:	52                   	push   edx
c0020028:	53                   	push   ebx
c0020029:	51                   	push   ecx
c002002a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002002e:	e8 87 fb ff ff       	call   c001fbba <ATA::access(unsigned long long, int, void*, bool)>
c0020033:	83 c4 20             	add    esp,0x20
c0020036:	85 c0                	test   eax,eax
c0020038:	0f 95 c0             	setne  al
c002003b:	0f b6 c0             	movzx  eax,al
c002003e:	5b                   	pop    ebx
c002003f:	5e                   	pop    esi
c0020040:	5f                   	pop    edi
c0020041:	c3                   	ret    

c0020042 <ATA::detectCHS()>:
c0020042:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020046:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002004c:	c1 e0 06             	shl    eax,0x6
c002004f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0020055:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002005f:	c7 44 24 04 90 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026090
c0020067:	e9 7a ff fe ff       	jmp    c000ffe6 <KePanic(char const*)>

c002006c <ATA::open(int, int, void*)>:
c002006c:	53                   	push   ebx
c002006d:	83 ec 08             	sub    esp,0x8
c0020070:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020074:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020078:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002007c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020082:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020088:	c1 e0 06             	shl    eax,0x6
c002008b:	01 d0                	add    eax,edx
c002008d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0020094:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002009a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00200a1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00200ab:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00200b1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00200b8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00200bf:	75 0c                	jne    c00200cd <ATA::open(int, int, void*)+0x61>
c00200c1:	83 ec 0c             	sub    esp,0xc
c00200c4:	53                   	push   ebx
c00200c5:	e8 78 ff ff ff       	call   c0020042 <ATA::detectCHS()>
c00200ca:	83 c4 10             	add    esp,0x10
c00200cd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00200d3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00200d9:	c1 e0 06             	shl    eax,0x6
c00200dc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00200e3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00200ed:	d1 e8                	shr    eax,1
c00200ef:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00200f5:	6a 04                	push   0x4
c00200f7:	6a 0c                	push   0xc
c00200f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020100:	50                   	push   eax
c0020101:	52                   	push   edx
c0020102:	e8 8d e8 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020107:	90                   	nop
c0020108:	90                   	nop
c0020109:	6a 00                	push   0x0
c002010b:	6a 0c                	push   0xc
c002010d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020114:	50                   	push   eax
c0020115:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002011b:	e8 74 e8 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020120:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020126:	83 c4 20             	add    esp,0x20
c0020129:	c1 e0 06             	shl    eax,0x6
c002012c:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c0020132:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c0020139:	0f 84 00 01 00 00    	je     c002023f <ATA::open(int, int, void*)+0x1d3>
c002013f:	83 ec 0c             	sub    esp,0xc
c0020142:	6a 08                	push   0x8
c0020144:	e8 6f 01 ff ff       	call   c00102b8 <Phys::allocateContiguousPages(int)>
c0020149:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002014f:	c7 04 24 a2 60 02 c0 	mov    DWORD PTR [esp],0xc00260a2
c0020156:	e8 21 6e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002015b:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0020162:	e8 c0 34 ff ff       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c0020167:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002016d:	6a 03                	push   0x3
c002016f:	50                   	push   eax
c0020170:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020176:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c002017c:	e8 89 3b ff ff       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0020181:	83 c4 20             	add    esp,0x20
c0020184:	e8 51 00 ff ff       	call   c00101da <Phys::allocatePage()>
c0020189:	83 ec 0c             	sub    esp,0xc
c002018c:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c0020192:	6a 01                	push   0x1
c0020194:	e8 8e 34 ff ff       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c0020199:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c002019f:	6a 03                	push   0x3
c00201a1:	50                   	push   eax
c00201a2:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c00201a8:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c00201ae:	e8 57 3b ff ff       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c00201b3:	83 c4 14             	add    esp,0x14
c00201b6:	68 db 60 02 c0       	push   0xc00260db
c00201bb:	e8 bc 6d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00201c0:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c00201c7:	50                   	push   eax
c00201c8:	6a 12                	push   0x12
c00201ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201d1:	50                   	push   eax
c00201d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201d8:	e8 b7 e7 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201dd:	83 c4 20             	add    esp,0x20
c00201e0:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c00201e6:	0f b6 c4             	movzx  eax,ah
c00201e9:	50                   	push   eax
c00201ea:	6a 13                	push   0x13
c00201ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201f3:	50                   	push   eax
c00201f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201fa:	e8 95 e7 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201ff:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c0020206:	50                   	push   eax
c0020207:	6a 14                	push   0x14
c0020209:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020210:	50                   	push   eax
c0020211:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020217:	e8 78 e7 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002021c:	83 c4 20             	add    esp,0x20
c002021f:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c0020226:	50                   	push   eax
c0020227:	6a 15                	push   0x15
c0020229:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020230:	50                   	push   eax
c0020231:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020237:	e8 58 e7 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002023c:	83 c4 10             	add    esp,0x10
c002023f:	83 ec 0c             	sub    esp,0xc
c0020242:	53                   	push   ebx
c0020243:	e8 56 9c fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020248:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002024b:	e8 ee aa fe ff       	call   c000ad3e <createPartitionsForDisk(PhysicalDisk*)>
c0020250:	31 c0                	xor    eax,eax
c0020252:	83 c4 18             	add    esp,0x18
c0020255:	5b                   	pop    ebx
c0020256:	c3                   	ret    

c0020257 <combineCharAndColour(char, unsigned char)>:
c0020257:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002025c:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c0020262:	c1 e0 08             	shl    eax,0x8
c0020265:	09 d0                	or     eax,edx
c0020267:	c3                   	ret    

c0020268 <combineColours(unsigned char, unsigned char)>:
c0020268:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002026d:	c1 e0 04             	shl    eax,0x4
c0020270:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0020274:	c3                   	ret    
c0020275:	90                   	nop

c0020276 <ATAPI::write(unsigned long long, int, void*)>:
c0020276:	b8 03 00 00 00       	mov    eax,0x3
c002027b:	c3                   	ret    

c002027c <ATAPI::close(int, int, void*)>:
c002027c:	83 ec 0c             	sub    esp,0xc
c002027f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020283:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020289:	85 c0                	test   eax,eax
c002028b:	74 0c                	je     c0020299 <ATAPI::close(int, int, void*)+0x1d>
c002028d:	83 ec 0c             	sub    esp,0xc
c0020290:	8b 10                	mov    edx,DWORD PTR [eax]
c0020292:	50                   	push   eax
c0020293:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020296:	83 c4 10             	add    esp,0x10
c0020299:	31 c0                	xor    eax,eax
c002029b:	83 c4 0c             	add    esp,0xc
c002029e:	c3                   	ret    
c002029f:	90                   	nop

c00202a0 <ATAPI::ATAPI()>:
c00202a0:	83 ec 0c             	sub    esp,0xc
c00202a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a7:	83 ec 04             	sub    esp,0x4
c00202aa:	68 00 08 00 00       	push   0x800
c00202af:	68 8d 62 02 c0       	push   0xc002628d
c00202b4:	50                   	push   eax
c00202b5:	e8 7c 9b fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00202ba:	83 c4 10             	add    esp,0x10
c00202bd:	ba 9c 61 02 c0       	mov    edx,0xc002619c
c00202c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c6:	89 10                	mov    DWORD PTR [eax],edx
c00202c8:	90                   	nop
c00202c9:	83 c4 0c             	add    esp,0xc
c00202cc:	c3                   	ret    
c00202cd:	90                   	nop

c00202ce <ATAPI::readyForCommand()>:
c00202ce:	56                   	push   esi
c00202cf:	53                   	push   ebx
c00202d0:	31 db                	xor    ebx,ebx
c00202d2:	50                   	push   eax
c00202d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00202d7:	50                   	push   eax
c00202d8:	6a 0c                	push   0xc
c00202da:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00202e1:	50                   	push   eax
c00202e2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00202e8:	e8 67 e7 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c00202ed:	83 c4 10             	add    esp,0x10
c00202f0:	a8 88                	test   al,0x88
c00202f2:	74 26                	je     c002031a <ATAPI::readyForCommand()+0x4c>
c00202f4:	43                   	inc    ebx
c00202f5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00202fb:	7e da                	jle    c00202d7 <ATAPI::readyForCommand()+0x9>
c00202fd:	51                   	push   ecx
c00202fe:	51                   	push   ecx
c00202ff:	6a 00                	push   0x0
c0020301:	68 5e 01 00 00       	push   0x15e
c0020306:	e8 f9 6f ff ff       	call   c0017304 <milliTenthSleep(unsigned long long)>
c002030b:	83 c4 10             	add    esp,0x10
c002030e:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0020314:	75 c1                	jne    c00202d7 <ATAPI::readyForCommand()+0x9>
c0020316:	31 c0                	xor    eax,eax
c0020318:	eb 02                	jmp    c002031c <ATAPI::readyForCommand()+0x4e>
c002031a:	b0 01                	mov    al,0x1
c002031c:	5a                   	pop    edx
c002031d:	5b                   	pop    ebx
c002031e:	5e                   	pop    esi
c002031f:	c3                   	ret    

c0020320 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020320:	55                   	push   ebp
c0020321:	57                   	push   edi
c0020322:	56                   	push   esi
c0020323:	53                   	push   ebx
c0020324:	83 ec 20             	sub    esp,0x20
c0020327:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002032b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002032f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020333:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020337:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002033b:	6a 01                	push   0x1
c002033d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020344:	50                   	push   eax
c0020345:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002034b:	e8 4e e8 ff ff       	call   c001eb9e <IDE::enableIRQs(unsigned char, bool)>
c0020350:	5e                   	pop    esi
c0020351:	58                   	pop    eax
c0020352:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020359:	50                   	push   eax
c002035a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020360:	e8 09 e6 ff ff       	call   c001e96e <IDE::prepareInterrupt(unsigned char)>
c0020365:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020368:	e8 61 ff ff ff       	call   c00202ce <ATAPI::readyForCommand()>
c002036d:	83 c4 10             	add    esp,0x10
c0020370:	84 c0                	test   al,al
c0020372:	75 0a                	jne    c002037e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020374:	bb 01 00 00 00       	mov    ebx,0x1
c0020379:	e9 60 02 00 00       	jmp    c00205de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002037e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0020384:	c1 e0 04             	shl    eax,0x4
c0020387:	0f b6 c0             	movzx  eax,al
c002038a:	50                   	push   eax
c002038b:	6a 06                	push   0x6
c002038d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020394:	50                   	push   eax
c0020395:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002039b:	e8 f4 e5 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203a0:	6a 00                	push   0x0
c00203a2:	6a 01                	push   0x1
c00203a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203ab:	50                   	push   eax
c00203ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203b2:	e8 dd e5 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203b7:	83 c4 20             	add    esp,0x20
c00203ba:	0f b6 c3             	movzx  eax,bl
c00203bd:	0f b6 df             	movzx  ebx,bh
c00203c0:	50                   	push   eax
c00203c1:	6a 04                	push   0x4
c00203c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203ca:	50                   	push   eax
c00203cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203d1:	e8 be e5 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203d6:	53                   	push   ebx
c00203d7:	6a 05                	push   0x5
c00203d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203e0:	50                   	push   eax
c00203e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203e7:	e8 a8 e5 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203ec:	83 c4 20             	add    esp,0x20
c00203ef:	68 a0 00 00 00       	push   0xa0
c00203f4:	6a 07                	push   0x7
c00203f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203fd:	50                   	push   eax
c00203fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020404:	e8 8b e5 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020409:	83 c4 0c             	add    esp,0xc
c002040c:	6a 01                	push   0x1
c002040e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020415:	50                   	push   eax
c0020416:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002041c:	e8 19 f3 ff ff       	call   c001f73a <IDE::polling(unsigned char, unsigned int)>
c0020421:	83 c4 10             	add    esp,0x10
c0020424:	0f b6 d8             	movzx  ebx,al
c0020427:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002042d:	85 db                	test   ebx,ebx
c002042f:	74 20                	je     c0020451 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0020431:	53                   	push   ebx
c0020432:	0f b6 c0             	movzx  eax,al
c0020435:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002043c:	52                   	push   edx
c002043d:	50                   	push   eax
c002043e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020444:	e8 37 f2 ff ff       	call   c001f680 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020449:	83 c4 10             	add    esp,0x10
c002044c:	e9 8d 01 00 00       	jmp    c00205de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020451:	0f b6 c0             	movzx  eax,al
c0020454:	53                   	push   ebx
c0020455:	53                   	push   ebx
c0020456:	50                   	push   eax
c0020457:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002045d:	e8 20 e5 ff ff       	call   c001e982 <IDE::getBase(unsigned char)>
c0020462:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020466:	b9 06 00 00 00       	mov    ecx,0x6
c002046b:	89 c2                	mov    edx,eax
c002046d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020470:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020474:	83 c4 10             	add    esp,0x10
c0020477:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002047c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020480:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020486:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002048d:	85 db                	test   ebx,ebx
c002048f:	0f 84 ec 00 00 00    	je     c0020581 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c0020495:	51                   	push   ecx
c0020496:	51                   	push   ecx
c0020497:	52                   	push   edx
c0020498:	50                   	push   eax
c0020499:	e8 64 e6 ff ff       	call   c001eb02 <IDE::waitInterrupt(unsigned char)>
c002049e:	83 c4 10             	add    esp,0x10
c00204a1:	84 c0                	test   al,al
c00204a3:	0f 84 cb fe ff ff    	je     c0020374 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00204a9:	56                   	push   esi
c00204aa:	56                   	push   esi
c00204ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204b2:	50                   	push   eax
c00204b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204b9:	e8 b0 e4 ff ff       	call   c001e96e <IDE::prepareInterrupt(unsigned char)>
c00204be:	83 c4 0c             	add    esp,0xc
c00204c1:	6a 04                	push   0x4
c00204c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204ca:	50                   	push   eax
c00204cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204d1:	e8 7e e5 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c00204d6:	83 c4 0c             	add    esp,0xc
c00204d9:	89 c6                	mov    esi,eax
c00204db:	6a 05                	push   0x5
c00204dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204e4:	50                   	push   eax
c00204e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204eb:	e8 64 e5 ff ff       	call   c001ea54 <IDE::read(unsigned char, unsigned char)>
c00204f0:	89 f1                	mov    ecx,esi
c00204f2:	0f b6 c0             	movzx  eax,al
c00204f5:	0f b6 f1             	movzx  esi,cl
c00204f8:	c1 e0 08             	shl    eax,0x8
c00204fb:	09 c6                	or     esi,eax
c00204fd:	d1 fe                	sar    esi,1
c00204ff:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0020503:	83 c4 10             	add    esp,0x10
c0020506:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002050b:	74 41                	je     c002054e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002050d:	31 c9                	xor    ecx,ecx
c002050f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020515:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002051c:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020520:	75 0a                	jne    c002052c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c0020522:	01 c9                	add    ecx,ecx
c0020524:	01 cd                	add    ebp,ecx
c0020526:	4b                   	dec    ebx
c0020527:	e9 54 ff ff ff       	jmp    c0020480 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002052c:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020531:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020535:	51                   	push   ecx
c0020536:	51                   	push   ecx
c0020537:	52                   	push   edx
c0020538:	50                   	push   eax
c0020539:	e8 44 e4 ff ff       	call   c001e982 <IDE::getBase(unsigned char)>
c002053e:	89 c2                	mov    edx,eax
c0020540:	89 f0                	mov    eax,esi
c0020542:	66 ef                	out    dx,ax
c0020544:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020548:	83 c4 10             	add    esp,0x10
c002054b:	41                   	inc    ecx
c002054c:	eb c1                	jmp    c002050f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002054e:	31 f6                	xor    esi,esi
c0020550:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020556:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002055d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020561:	75 06                	jne    c0020569 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c0020563:	01 f6                	add    esi,esi
c0020565:	01 f5                	add    ebp,esi
c0020567:	eb bd                	jmp    c0020526 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c0020569:	51                   	push   ecx
c002056a:	51                   	push   ecx
c002056b:	52                   	push   edx
c002056c:	50                   	push   eax
c002056d:	e8 10 e4 ff ff       	call   c001e982 <IDE::getBase(unsigned char)>
c0020572:	89 c2                	mov    edx,eax
c0020574:	66 ed                	in     ax,dx
c0020576:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002057b:	83 c4 10             	add    esp,0x10
c002057e:	46                   	inc    esi
c002057f:	eb cf                	jmp    c0020550 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c0020581:	51                   	push   ecx
c0020582:	51                   	push   ecx
c0020583:	52                   	push   edx
c0020584:	50                   	push   eax
c0020585:	e8 78 e5 ff ff       	call   c001eb02 <IDE::waitInterrupt(unsigned char)>
c002058a:	83 c4 10             	add    esp,0x10
c002058d:	84 c0                	test   al,al
c002058f:	0f 84 df fd ff ff    	je     c0020374 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020595:	bb a0 86 01 00       	mov    ebx,0x186a0
c002059a:	52                   	push   edx
c002059b:	52                   	push   edx
c002059c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205a3:	50                   	push   eax
c00205a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205aa:	e8 bf e3 ff ff       	call   c001e96e <IDE::prepareInterrupt(unsigned char)>
c00205af:	83 c4 10             	add    esp,0x10
c00205b2:	50                   	push   eax
c00205b3:	50                   	push   eax
c00205b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205bb:	50                   	push   eax
c00205bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205c2:	e8 bb e3 ff ff       	call   c001e982 <IDE::getBase(unsigned char)>
c00205c7:	8d 50 07             	lea    edx,[eax+0x7]
c00205ca:	ec                   	in     al,dx
c00205cb:	83 c4 10             	add    esp,0x10
c00205ce:	a8 88                	test   al,0x88
c00205d0:	74 0a                	je     c00205dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c00205d2:	4b                   	dec    ebx
c00205d3:	75 dd                	jne    c00205b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c00205d5:	bb 02 00 00 00       	mov    ebx,0x2
c00205da:	eb 02                	jmp    c00205de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c00205dc:	31 db                	xor    ebx,ebx
c00205de:	83 c4 1c             	add    esp,0x1c
c00205e1:	89 d8                	mov    eax,ebx
c00205e3:	5b                   	pop    ebx
c00205e4:	5e                   	pop    esi
c00205e5:	5f                   	pop    edi
c00205e6:	5d                   	pop    ebp
c00205e7:	c3                   	ret    

c00205e8 <ATAPI::diskRemoved()>:
c00205e8:	53                   	push   ebx
c00205e9:	83 ec 14             	sub    esp,0x14
c00205ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00205f0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00205f7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00205fd:	e8 2c a4 fe ff       	call   c000aa2e <LogicalDisk::unmount()>
c0020602:	58                   	pop    eax
c0020603:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020609:	e8 fe ad fe ff       	call   c000b40c <VCache::writeWriteBuffer()>
c002060e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020614:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020618:	83 c4 18             	add    esp,0x18
c002061b:	5b                   	pop    ebx
c002061c:	e9 db ad fe ff       	jmp    c000b3fc <VCache::invalidateReadBuffer()>
c0020621:	90                   	nop

c0020622 <ATAPI::eject()>:
c0020622:	57                   	push   edi
c0020623:	b9 03 00 00 00       	mov    ecx,0x3
c0020628:	53                   	push   ebx
c0020629:	83 ec 14             	sub    esp,0x14
c002062c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020630:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020634:	fc                   	cld    
c0020635:	31 c0                	xor    eax,eax
c0020637:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020639:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002063e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020643:	50                   	push   eax
c0020644:	50                   	push   eax
c0020645:	6a 00                	push   0x0
c0020647:	6a 00                	push   0x0
c0020649:	6a 00                	push   0x0
c002064b:	6a 02                	push   0x2
c002064d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020651:	50                   	push   eax
c0020652:	53                   	push   ebx
c0020653:	e8 c8 fc ff ff       	call   c0020320 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020658:	83 c4 14             	add    esp,0x14
c002065b:	53                   	push   ebx
c002065c:	e8 87 ff ff ff       	call   c00205e8 <ATAPI::diskRemoved()>
c0020661:	83 c4 24             	add    esp,0x24
c0020664:	31 c0                	xor    eax,eax
c0020666:	5b                   	pop    ebx
c0020667:	5f                   	pop    edi
c0020668:	c3                   	ret    
c0020669:	90                   	nop

c002066a <ATAPI::diskInserted()>:
c002066a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002066e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020675:	c3                   	ret    

c0020676 <ATAPI::detectMedia()>:
c0020676:	56                   	push   esi
c0020677:	53                   	push   ebx
c0020678:	83 ec 28             	sub    esp,0x28
c002067b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002067f:	6a 0c                	push   0xc
c0020681:	6a 00                	push   0x0
c0020683:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020687:	56                   	push   esi
c0020688:	e8 63 fe fd ff       	call   c00004f0 <memset>
c002068d:	58                   	pop    eax
c002068e:	5a                   	pop    edx
c002068f:	6a 00                	push   0x0
c0020691:	6a 00                	push   0x0
c0020693:	6a 00                	push   0x0
c0020695:	6a 00                	push   0x0
c0020697:	56                   	push   esi
c0020698:	53                   	push   ebx
c0020699:	e8 82 fc ff ff       	call   c0020320 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002069e:	83 c4 1c             	add    esp,0x1c
c00206a1:	6a 0c                	push   0xc
c00206a3:	6a 00                	push   0x0
c00206a5:	56                   	push   esi
c00206a6:	e8 45 fe fd ff       	call   c00004f0 <memset>
c00206ab:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00206b0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00206b5:	59                   	pop    ecx
c00206b6:	58                   	pop    eax
c00206b7:	6a 01                	push   0x1
c00206b9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00206bd:	50                   	push   eax
c00206be:	6a 00                	push   0x0
c00206c0:	6a 12                	push   0x12
c00206c2:	56                   	push   esi
c00206c3:	53                   	push   ebx
c00206c4:	e8 57 fc ff ff       	call   c0020320 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00206c9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00206cd:	83 c4 20             	add    esp,0x20
c00206d0:	83 e0 7f             	and    eax,0x7f
c00206d3:	83 f8 70             	cmp    eax,0x70
c00206d6:	74 15                	je     c00206ed <ATAPI::detectMedia()+0x77>
c00206d8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00206df:	75 0c                	jne    c00206ed <ATAPI::detectMedia()+0x77>
c00206e1:	83 ec 0c             	sub    esp,0xc
c00206e4:	53                   	push   ebx
c00206e5:	e8 80 ff ff ff       	call   c002066a <ATAPI::diskInserted()>
c00206ea:	83 c4 10             	add    esp,0x10
c00206ed:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00206f1:	83 e0 0f             	and    eax,0xf
c00206f4:	83 f8 02             	cmp    eax,0x2
c00206f7:	75 1b                	jne    c0020714 <ATAPI::detectMedia()+0x9e>
c00206f9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00206fe:	75 2d                	jne    c002072d <ATAPI::detectMedia()+0xb7>
c0020700:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020707:	74 24                	je     c002072d <ATAPI::detectMedia()+0xb7>
c0020709:	83 ec 0c             	sub    esp,0xc
c002070c:	53                   	push   ebx
c002070d:	e8 d6 fe ff ff       	call   c00205e8 <ATAPI::diskRemoved()>
c0020712:	eb 16                	jmp    c002072a <ATAPI::detectMedia()+0xb4>
c0020714:	85 c0                	test   eax,eax
c0020716:	75 15                	jne    c002072d <ATAPI::detectMedia()+0xb7>
c0020718:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002071f:	75 0c                	jne    c002072d <ATAPI::detectMedia()+0xb7>
c0020721:	83 ec 0c             	sub    esp,0xc
c0020724:	53                   	push   ebx
c0020725:	e8 40 ff ff ff       	call   c002066a <ATAPI::diskInserted()>
c002072a:	83 c4 10             	add    esp,0x10
c002072d:	83 c4 24             	add    esp,0x24
c0020730:	5b                   	pop    ebx
c0020731:	5e                   	pop    esi
c0020732:	c3                   	ret    
c0020733:	90                   	nop

c0020734 <ATAPI::open(int, int, void*)>:
c0020734:	56                   	push   esi
c0020735:	53                   	push   ebx
c0020736:	50                   	push   eax
c0020737:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002073b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002073f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020743:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020749:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002074f:	c1 e0 06             	shl    eax,0x6
c0020752:	01 d0                	add    eax,edx
c0020754:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002075b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020761:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020768:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020772:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020778:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002077f:	6a 04                	push   0x4
c0020781:	6a 0c                	push   0xc
c0020783:	51                   	push   ecx
c0020784:	52                   	push   edx
c0020785:	e8 0a e2 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002078a:	90                   	nop
c002078b:	90                   	nop
c002078c:	6a 00                	push   0x0
c002078e:	6a 0c                	push   0xc
c0020790:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020797:	50                   	push   eax
c0020798:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002079e:	e8 f1 e1 ff ff       	call   c001e994 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207a3:	83 c4 14             	add    esp,0x14
c00207a6:	68 78 01 00 00       	push   0x178
c00207ab:	e8 df f3 fe ff       	call   c000fb8f <malloc>
c00207b0:	83 c4 0c             	add    esp,0xc
c00207b3:	89 c6                	mov    esi,eax
c00207b5:	6a 00                	push   0x0
c00207b7:	68 ff ff ff 7f       	push   0x7fffffff
c00207bc:	6a 00                	push   0x0
c00207be:	6a 00                	push   0x0
c00207c0:	53                   	push   ebx
c00207c1:	68 3f 63 02 c0       	push   0xc002633f
c00207c6:	50                   	push   eax
c00207c7:	e8 a0 a0 fe ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00207cc:	83 c4 14             	add    esp,0x14
c00207cf:	56                   	push   esi
c00207d0:	e8 57 a1 fe ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c00207d5:	5a                   	pop    edx
c00207d6:	0f be c0             	movsx  eax,al
c00207d9:	59                   	pop    ecx
c00207da:	50                   	push   eax
c00207db:	68 84 61 02 c0       	push   0xc0026184
c00207e0:	e8 97 67 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00207e5:	58                   	pop    eax
c00207e6:	5a                   	pop    edx
c00207e7:	56                   	push   esi
c00207e8:	53                   	push   ebx
c00207e9:	e8 66 92 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c00207ee:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c00207f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00207f7:	e8 a2 96 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c00207fc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020803:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020806:	e8 6b fe ff ff       	call   c0020676 <ATAPI::detectMedia()>
c002080b:	83 c4 14             	add    esp,0x14
c002080e:	31 c0                	xor    eax,eax
c0020810:	5b                   	pop    ebx
c0020811:	5e                   	pop    esi
c0020812:	c3                   	ret    
c0020813:	90                   	nop

c0020814 <ATAPI::read(unsigned long long, int, void*)>:
c0020814:	55                   	push   ebp
c0020815:	57                   	push   edi
c0020816:	56                   	push   esi
c0020817:	53                   	push   ebx
c0020818:	83 ec 1c             	sub    esp,0x1c
c002081b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002081f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020823:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020827:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002082e:	74 3c                	je     c002086c <ATAPI::read(unsigned long long, int, void*)+0x58>
c0020830:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020834:	b9 03 00 00 00       	mov    ecx,0x3
c0020839:	fc                   	cld    
c002083a:	31 c0                	xor    eax,eax
c002083c:	0f ce                	bswap  esi
c002083e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020840:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020845:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020849:	89 e8                	mov    eax,ebp
c002084b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002084f:	50                   	push   eax
c0020850:	50                   	push   eax
c0020851:	55                   	push   ebp
c0020852:	c1 e5 0b             	shl    ebp,0xb
c0020855:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020859:	6a 00                	push   0x0
c002085b:	55                   	push   ebp
c002085c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020860:	50                   	push   eax
c0020861:	53                   	push   ebx
c0020862:	e8 b9 fa ff ff       	call   c0020320 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020867:	83 c4 20             	add    esp,0x20
c002086a:	eb 1a                	jmp    c0020886 <ATAPI::read(unsigned long long, int, void*)+0x72>
c002086c:	83 ec 0c             	sub    esp,0xc
c002086f:	53                   	push   ebx
c0020870:	e8 01 fe ff ff       	call   c0020676 <ATAPI::detectMedia()>
c0020875:	83 c4 10             	add    esp,0x10
c0020878:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002087f:	75 af                	jne    c0020830 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020881:	b8 02 00 00 00       	mov    eax,0x2
c0020886:	83 c4 1c             	add    esp,0x1c
c0020889:	5b                   	pop    ebx
c002088a:	5e                   	pop    esi
c002088b:	5f                   	pop    edi
c002088c:	5d                   	pop    ebp
c002088d:	c3                   	ret    

c002088e <SATA::close(int, int, void*)>:
c002088e:	83 ec 0c             	sub    esp,0xc
c0020891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020895:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002089b:	85 c0                	test   eax,eax
c002089d:	74 0c                	je     c00208ab <SATA::close(int, int, void*)+0x1d>
c002089f:	83 ec 0c             	sub    esp,0xc
c00208a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00208a4:	50                   	push   eax
c00208a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00208a8:	83 c4 10             	add    esp,0x10
c00208ab:	31 c0                	xor    eax,eax
c00208ad:	83 c4 0c             	add    esp,0xc
c00208b0:	c3                   	ret    
c00208b1:	90                   	nop

c00208b2 <SATA::powerSaving(PowerSavingLevel)>:
c00208b2:	c3                   	ret    
c00208b3:	90                   	nop

c00208b4 <SATA::open(int, int, void*)>:
c00208b4:	56                   	push   esi
c00208b5:	53                   	push   ebx
c00208b6:	83 ec 10             	sub    esp,0x10
c00208b9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00208bd:	68 cc 61 02 c0       	push   0xc00261cc
c00208c2:	e8 b5 66 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00208c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00208cb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00208d5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00208db:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00208e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00208e9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00208f3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00208f9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020900:	e8 d5 f8 fe ff       	call   c00101da <Phys::allocatePage()>
c0020905:	89 c6                	mov    esi,eax
c0020907:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002090d:	81 c6 00 10 00 00    	add    esi,0x1000
c0020913:	e8 c2 f8 fe ff       	call   c00101da <Phys::allocatePage()>
c0020918:	83 c4 10             	add    esp,0x10
c002091b:	39 c6                	cmp    esi,eax
c002091d:	74 10                	je     c002092f <SATA::open(int, int, void*)+0x7b>
c002091f:	83 ec 0c             	sub    esp,0xc
c0020922:	68 d8 61 02 c0       	push   0xc00261d8
c0020927:	e8 ba f6 fe ff       	call   c000ffe6 <KePanic(char const*)>
c002092c:	83 c4 10             	add    esp,0x10
c002092f:	83 ec 0c             	sub    esp,0xc
c0020932:	6a 02                	push   0x2
c0020934:	e8 ee 2c ff ff       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c0020939:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002093f:	6a 03                	push   0x3
c0020941:	50                   	push   eax
c0020942:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020948:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c002094e:	e8 b7 33 ff ff       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0020953:	83 c4 14             	add    esp,0x14
c0020956:	53                   	push   ebx
c0020957:	e8 42 95 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c002095c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002095f:	e8 da a3 fe ff       	call   c000ad3e <createPartitionsForDisk(PhysicalDisk*)>
c0020964:	83 c4 14             	add    esp,0x14
c0020967:	31 c0                	xor    eax,eax
c0020969:	5b                   	pop    ebx
c002096a:	5e                   	pop    esi
c002096b:	c3                   	ret    

c002096c <SATA::SATA()>:
c002096c:	83 ec 0c             	sub    esp,0xc
c002096f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020973:	83 ec 04             	sub    esp,0x4
c0020976:	68 00 02 00 00       	push   0x200
c002097b:	68 ec 61 02 c0       	push   0xc00261ec
c0020980:	50                   	push   eax
c0020981:	e8 b0 94 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020986:	83 c4 10             	add    esp,0x10
c0020989:	ba 5c 62 02 c0       	mov    edx,0xc002625c
c002098e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020992:	89 10                	mov    DWORD PTR [eax],edx
c0020994:	90                   	nop
c0020995:	83 c4 0c             	add    esp,0xc
c0020998:	c3                   	ret    
c0020999:	90                   	nop

c002099a <SATA::access(unsigned long long, int, void*, bool)>:
c002099a:	55                   	push   ebp
c002099b:	57                   	push   edi
c002099c:	56                   	push   esi
c002099d:	53                   	push   ebx
c002099e:	83 ec 2c             	sub    esp,0x2c
c00209a1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00209a5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00209a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209ad:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00209b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00209b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209b9:	fa                   	cli    
c00209ba:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c00209c0:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00209c5:	7e 10                	jle    c00209d7 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c00209c7:	83 ec 0c             	sub    esp,0xc
c00209ca:	68 fc 61 02 c0       	push   0xc00261fc
c00209cf:	e8 12 f6 fe ff       	call   c000ffe6 <KePanic(char const*)>
c00209d4:	83 c4 10             	add    esp,0x10
c00209d7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00209dd:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00209e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00209e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209ed:	89 d0                	mov    eax,edx
c00209ef:	c1 e0 07             	shl    eax,0x7
c00209f2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00209f6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020a00:	51                   	push   ecx
c0020a01:	8d 42 02             	lea    eax,[edx+0x2]
c0020a04:	51                   	push   ecx
c0020a05:	c1 e0 07             	shl    eax,0x7
c0020a08:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020a0c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020a10:	50                   	push   eax
c0020a11:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020a17:	e8 fe ed ff ff       	call   c001f81a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020a1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020a20:	83 c4 10             	add    esp,0x10
c0020a23:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020a28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020a2c:	0f 84 a4 01 00 00    	je     c0020bd6 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0020a32:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020a36:	c1 e0 09             	shl    eax,0x9
c0020a39:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020a3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020a42:	74 0e                	je     c0020a52 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0020a44:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020a4a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020a4e:	89 c1                	mov    ecx,eax
c0020a50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a52:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020a58:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020a5c:	8d 42 02             	lea    eax,[edx+0x2]
c0020a5f:	c1 e0 07             	shl    eax,0x7
c0020a62:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020a66:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a68:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020a6e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020a74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020a78:	c1 e1 05             	shl    ecx,0x5
c0020a7b:	01 c8                	add    eax,ecx
c0020a7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020a81:	83 e1 01             	and    ecx,0x1
c0020a84:	89 ce                	mov    esi,ecx
c0020a86:	8a 08                	mov    cl,BYTE PTR [eax]
c0020a88:	c1 e6 06             	shl    esi,0x6
c0020a8b:	83 e1 bf             	and    ecx,0xffffffbf
c0020a8e:	09 f1                	or     ecx,esi
c0020a90:	88 08                	mov    BYTE PTR [eax],cl
c0020a92:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020a94:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020a9a:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0020aa2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020aa8:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0020aae:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020ab4:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020ab7:	50                   	push   eax
c0020ab8:	68 90 00 00 00       	push   0x90
c0020abd:	6a 00                	push   0x0
c0020abf:	56                   	push   esi
c0020ac0:	e8 2b fa fd ff       	call   c00004f0 <memset>
c0020ac5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020acb:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020ad1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020ad5:	83 c4 10             	add    esp,0x10
c0020ad8:	48                   	dec    eax
c0020ad9:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020ade:	89 c1                	mov    ecx,eax
c0020ae0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020ae6:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020aeb:	09 c8                	or     eax,ecx
c0020aed:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020af3:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020af9:	83 c8 80             	or     eax,0xffffff80
c0020afc:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0020b02:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020b05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020b09:	25 00 7f 00 00       	and    eax,0x7f00
c0020b0e:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020b13:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020b18:	66 89 06             	mov    WORD PTR [esi],ax
c0020b1b:	b0 35                	mov    al,0x35
c0020b1d:	75 02                	jne    c0020b21 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c0020b1f:	b0 25                	mov    al,0x25
c0020b21:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020b24:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0020b28:	89 e8                	mov    eax,ebp
c0020b2a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020b2e:	c1 e8 10             	shr    eax,0x10
c0020b31:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020b34:	89 e8                	mov    eax,ebp
c0020b36:	c1 e8 18             	shr    eax,0x18
c0020b39:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020b3c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020b40:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020b43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020b47:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020b4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020b4e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020b52:	89 d6                	mov    esi,edx
c0020b54:	31 c0                	xor    eax,eax
c0020b56:	c1 e6 07             	shl    esi,0x7
c0020b59:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0020b5d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0020b63:	80 e1 88             	and    cl,0x88
c0020b66:	74 0a                	je     c0020b72 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020b68:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020b6d:	74 0a                	je     c0020b79 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0020b6f:	40                   	inc    eax
c0020b70:	eb eb                	jmp    c0020b5d <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0020b72:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020b77:	75 0a                	jne    c0020b83 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020b79:	83 ec 0c             	sub    esp,0xc
c0020b7c:	68 35 62 02 c0       	push   0xc0026235
c0020b81:	eb 36                	jmp    c0020bb9 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c0020b83:	b8 01 00 00 00       	mov    eax,0x1
c0020b88:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020b8c:	c1 e2 07             	shl    edx,0x7
c0020b8f:	d3 e0                	shl    eax,cl
c0020b91:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0020b95:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020b9b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020ba1:	85 c8                	test   eax,ecx
c0020ba3:	74 25                	je     c0020bca <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0020ba5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020bab:	0f ba e1 1e          	bt     ecx,0x1e
c0020baf:	73 ea                	jae    c0020b9b <SATA::access(unsigned long long, int, void*, bool)+0x201>
c0020bb1:	83 ec 0c             	sub    esp,0xc
c0020bb4:	68 43 62 02 c0       	push   0xc0026243
c0020bb9:	e8 be 63 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020bbe:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0020bc5:	83 c4 10             	add    esp,0x10
c0020bc8:	eb 13                	jmp    c0020bdd <SATA::access(unsigned long long, int, void*, bool)+0x243>
c0020bca:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020bd0:	0f ba e0 1e          	bt     eax,0x1e
c0020bd4:	73 18                	jae    c0020bee <SATA::access(unsigned long long, int, void*, bool)+0x254>
c0020bd6:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0020bdd:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0020be4:	75 01                	jne    c0020be7 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c0020be6:	fb                   	sti    
c0020be7:	b8 01 00 00 00       	mov    eax,0x1
c0020bec:	eb 2c                	jmp    c0020c1a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020bee:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020bf3:	75 10                	jne    c0020c05 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c0020bf5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020bfb:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020bff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020c03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020c05:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0020c0c:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0020c11:	85 c0                	test   eax,eax
c0020c13:	75 03                	jne    c0020c18 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020c15:	fb                   	sti    
c0020c16:	eb 02                	jmp    c0020c1a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020c18:	31 c0                	xor    eax,eax
c0020c1a:	83 c4 2c             	add    esp,0x2c
c0020c1d:	5b                   	pop    ebx
c0020c1e:	5e                   	pop    esi
c0020c1f:	5f                   	pop    edi
c0020c20:	5d                   	pop    ebp
c0020c21:	c3                   	ret    

c0020c22 <SATA::read(unsigned long long, int, void*)>:
c0020c22:	57                   	push   edi
c0020c23:	b8 04 00 00 00       	mov    eax,0x4
c0020c28:	56                   	push   esi
c0020c29:	53                   	push   ebx
c0020c2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020c2e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020c32:	8d 7a ff             	lea    edi,[edx-0x1]
c0020c35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020c39:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020c3d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020c43:	77 25                	ja     c0020c6a <SATA::read(unsigned long long, int, void*)+0x48>
c0020c45:	b8 06 00 00 00       	mov    eax,0x6
c0020c4a:	85 f6                	test   esi,esi
c0020c4c:	74 1c                	je     c0020c6a <SATA::read(unsigned long long, int, void*)+0x48>
c0020c4e:	50                   	push   eax
c0020c4f:	50                   	push   eax
c0020c50:	6a 00                	push   0x0
c0020c52:	56                   	push   esi
c0020c53:	52                   	push   edx
c0020c54:	53                   	push   ebx
c0020c55:	51                   	push   ecx
c0020c56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c5a:	e8 3b fd ff ff       	call   c002099a <SATA::access(unsigned long long, int, void*, bool)>
c0020c5f:	83 c4 20             	add    esp,0x20
c0020c62:	85 c0                	test   eax,eax
c0020c64:	0f 95 c0             	setne  al
c0020c67:	0f b6 c0             	movzx  eax,al
c0020c6a:	5b                   	pop    ebx
c0020c6b:	5e                   	pop    esi
c0020c6c:	5f                   	pop    edi
c0020c6d:	c3                   	ret    

c0020c6e <SATA::write(unsigned long long, int, void*)>:
c0020c6e:	55                   	push   ebp
c0020c6f:	b8 04 00 00 00       	mov    eax,0x4
c0020c74:	57                   	push   edi
c0020c75:	56                   	push   esi
c0020c76:	53                   	push   ebx
c0020c77:	83 ec 0c             	sub    esp,0xc
c0020c7a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020c7e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020c82:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020c85:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020c89:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020c8d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020c93:	77 3d                	ja     c0020cd2 <SATA::write(unsigned long long, int, void*)+0x64>
c0020c95:	b8 06 00 00 00       	mov    eax,0x6
c0020c9a:	85 ed                	test   ebp,ebp
c0020c9c:	74 34                	je     c0020cd2 <SATA::write(unsigned long long, int, void*)+0x64>
c0020c9e:	c1 e3 09             	shl    ebx,0x9
c0020ca1:	01 eb                	add    ebx,ebp
c0020ca3:	89 d6                	mov    esi,edx
c0020ca5:	89 cf                	mov    edi,ecx
c0020ca7:	83 c6 01             	add    esi,0x1
c0020caa:	83 d7 00             	adc    edi,0x0
c0020cad:	50                   	push   eax
c0020cae:	50                   	push   eax
c0020caf:	6a 01                	push   0x1
c0020cb1:	55                   	push   ebp
c0020cb2:	81 c5 00 02 00 00    	add    ebp,0x200
c0020cb8:	6a 01                	push   0x1
c0020cba:	51                   	push   ecx
c0020cbb:	52                   	push   edx
c0020cbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020cc0:	e8 d5 fc ff ff       	call   c002099a <SATA::access(unsigned long long, int, void*, bool)>
c0020cc5:	83 c4 20             	add    esp,0x20
c0020cc8:	89 f2                	mov    edx,esi
c0020cca:	89 f9                	mov    ecx,edi
c0020ccc:	39 dd                	cmp    ebp,ebx
c0020cce:	75 d3                	jne    c0020ca3 <SATA::write(unsigned long long, int, void*)+0x35>
c0020cd0:	31 c0                	xor    eax,eax
c0020cd2:	83 c4 0c             	add    esp,0xc
c0020cd5:	5b                   	pop    ebx
c0020cd6:	5e                   	pop    esi
c0020cd7:	5f                   	pop    edi
c0020cd8:	5d                   	pop    ebp
c0020cd9:	c3                   	ret    

c0020cda <SATAPI::write(unsigned long long, int, void*)>:
c0020cda:	b8 03 00 00 00       	mov    eax,0x3
c0020cdf:	c3                   	ret    

c0020ce0 <SATAPI::close(int, int, void*)>:
c0020ce0:	83 ec 0c             	sub    esp,0xc
c0020ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ce7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020ced:	85 c0                	test   eax,eax
c0020cef:	74 0c                	je     c0020cfd <SATAPI::close(int, int, void*)+0x1d>
c0020cf1:	83 ec 0c             	sub    esp,0xc
c0020cf4:	8b 10                	mov    edx,DWORD PTR [eax]
c0020cf6:	50                   	push   eax
c0020cf7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020cfa:	83 c4 10             	add    esp,0x10
c0020cfd:	31 c0                	xor    eax,eax
c0020cff:	83 c4 0c             	add    esp,0xc
c0020d02:	c3                   	ret    
c0020d03:	90                   	nop

c0020d04 <SATAPI::SATAPI()>:
c0020d04:	83 ec 0c             	sub    esp,0xc
c0020d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d0b:	83 ec 04             	sub    esp,0x4
c0020d0e:	68 00 08 00 00       	push   0x800
c0020d13:	68 8c 62 02 c0       	push   0xc002628c
c0020d18:	50                   	push   eax
c0020d19:	e8 18 91 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020d1e:	83 c4 10             	add    esp,0x10
c0020d21:	ba 80 63 02 c0       	mov    edx,0xc0026380
c0020d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d2a:	89 10                	mov    DWORD PTR [eax],edx
c0020d2c:	90                   	nop
c0020d2d:	83 c4 0c             	add    esp,0xc
c0020d30:	c3                   	ret    
c0020d31:	90                   	nop

c0020d32 <SATAPI::diskRemoved()>:
c0020d32:	c3                   	ret    
c0020d33:	90                   	nop

c0020d34 <SATAPI::diskInserted()>:
c0020d34:	83 ec 18             	sub    esp,0x18
c0020d37:	68 98 62 02 c0       	push   0xc0026298
c0020d3c:	e8 3b 62 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020d41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d45:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020d4c:	83 c4 1c             	add    esp,0x1c
c0020d4f:	c3                   	ret    

c0020d50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020d50:	55                   	push   ebp
c0020d51:	57                   	push   edi
c0020d52:	56                   	push   esi
c0020d53:	53                   	push   ebx
c0020d54:	83 ec 34             	sub    esp,0x34
c0020d57:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020d5b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020d5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0020d63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0020d6b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020d71:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020d77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020d7b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020d81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020d85:	83 c0 02             	add    eax,0x2
c0020d88:	c1 e0 07             	shl    eax,0x7
c0020d8b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020d8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d97:	c1 e0 07             	shl    eax,0x7
c0020d9a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020d9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020da2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020dac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020db0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020db6:	e8 5f ea ff ff       	call   c001f81a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020dbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020dbf:	83 c4 10             	add    esp,0x10
c0020dc2:	b8 01 00 00 00       	mov    eax,0x1
c0020dc7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020dcc:	0f 84 57 02 00 00    	je     c0021029 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0020dd2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ddc:	8b 00                	mov    eax,DWORD PTR [eax]
c0020dde:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020de4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020dea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020dee:	c1 e1 05             	shl    ecx,0x5
c0020df1:	01 c8                	add    eax,ecx
c0020df3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020df5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020dfb:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020e01:	89 08                	mov    DWORD PTR [eax],ecx
c0020e03:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020e09:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020e0f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020e15:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020e18:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020e1b:	50                   	push   eax
c0020e1c:	68 90 00 00 00       	push   0x90
c0020e21:	6a 00                	push   0x0
c0020e23:	53                   	push   ebx
c0020e24:	e8 c7 f6 fd ff       	call   c00004f0 <memset>
c0020e29:	b9 0c 00 00 00       	mov    ecx,0xc
c0020e2e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020e32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e34:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020e3a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020e3e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020e44:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020e48:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020e4c:	48                   	dec    eax
c0020e4d:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020e52:	89 c1                	mov    ecx,eax
c0020e54:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020e5a:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020e5f:	09 c8                	or     eax,ecx
c0020e61:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020e67:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020e6d:	83 c8 80             	or     eax,0xffffff80
c0020e70:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0020e76:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020e79:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020e7d:	25 00 7f 00 00       	and    eax,0x7f00
c0020e82:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020e86:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020e8b:	66 89 03             	mov    WORD PTR [ebx],ax
c0020e8e:	89 d0                	mov    eax,edx
c0020e90:	c1 ea 18             	shr    edx,0x18
c0020e93:	c1 e8 10             	shr    eax,0x10
c0020e96:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020e99:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020e9c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020ea0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020ea3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ea7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020eaa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020eae:	83 c4 10             	add    esp,0x10
c0020eb1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020eb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020eb9:	31 c0                	xor    eax,eax
c0020ebb:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020ec1:	80 e1 88             	and    cl,0x88
c0020ec4:	74 0a                	je     c0020ed0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c0020ec6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020ecb:	74 0a                	je     c0020ed7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c0020ecd:	40                   	inc    eax
c0020ece:	eb eb                	jmp    c0020ebb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0020ed0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020ed5:	75 43                	jne    c0020f1a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0020ed7:	83 ec 0c             	sub    esp,0xc
c0020eda:	68 b0 62 02 c0       	push   0xc00262b0
c0020edf:	e8 98 60 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020ee4:	58                   	pop    eax
c0020ee5:	5a                   	pop    edx
c0020ee6:	68 c5 62 02 c0       	push   0xc00262c5
c0020eeb:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c0020ef1:	e8 06 1b ff ff       	call   c00129fc <VgaText::puts(char const*)>
c0020ef6:	59                   	pop    ecx
c0020ef7:	5b                   	pop    ebx
c0020ef8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020efc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020f02:	e8 ad e9 ff ff       	call   c001f8b4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020f07:	5e                   	pop    esi
c0020f08:	5f                   	pop    edi
c0020f09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020f0d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020f13:	e8 7c e9 ff ff       	call   c001f894 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020f18:	eb 48                	jmp    c0020f62 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c0020f1a:	be 01 00 00 00       	mov    esi,0x1
c0020f1f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020f23:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020f27:	d3 e6                	shl    esi,cl
c0020f29:	c1 e7 07             	shl    edi,0x7
c0020f2c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020f32:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c0020f37:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020f3b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020f41:	85 c6                	test   esi,eax
c0020f43:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020f49:	0f 84 a7 00 00 00    	je     c0020ff6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c0020f4f:	0f ba e0 1e          	bt     eax,0x1e
c0020f53:	73 1a                	jae    c0020f6f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c0020f55:	83 ec 0c             	sub    esp,0xc
c0020f58:	68 d7 62 02 c0       	push   0xc00262d7
c0020f5d:	e8 1a 60 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020f62:	83 c4 10             	add    esp,0x10
c0020f65:	b8 01 00 00 00       	mov    eax,0x1
c0020f6a:	e9 ba 00 00 00       	jmp    c0021029 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0020f6f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c0020f75:	83 f8 0d             	cmp    eax,0xd
c0020f78:	77 0b                	ja     c0020f85 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c0020f7a:	50                   	push   eax
c0020f7b:	50                   	push   eax
c0020f7c:	6a 00                	push   0x0
c0020f7e:	68 c8 00 00 00       	push   0xc8
c0020f83:	eb 2a                	jmp    c0020faf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020f85:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c0020f8b:	83 f8 0d             	cmp    eax,0xd
c0020f8e:	77 0b                	ja     c0020f9b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c0020f90:	51                   	push   ecx
c0020f91:	51                   	push   ecx
c0020f92:	6a 00                	push   0x0
c0020f94:	68 58 02 00 00       	push   0x258
c0020f99:	eb 14                	jmp    c0020faf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020f9b:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c0020fa1:	83 f8 06             	cmp    eax,0x6
c0020fa4:	77 11                	ja     c0020fb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020fa6:	52                   	push   edx
c0020fa7:	52                   	push   edx
c0020fa8:	6a 00                	push   0x0
c0020faa:	68 dc 05 00 00       	push   0x5dc
c0020faf:	e8 50 63 ff ff       	call   c0017304 <milliTenthSleep(unsigned long long)>
c0020fb4:	83 c4 10             	add    esp,0x10
c0020fb7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020fbb:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0020fbe:	75 06                	jne    c0020fc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c0020fc0:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0020fc4:	74 16                	je     c0020fdc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0020fc6:	83 fb 06             	cmp    ebx,0x6
c0020fc9:	77 11                	ja     c0020fdc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0020fcb:	50                   	push   eax
c0020fcc:	50                   	push   eax
c0020fcd:	6a 00                	push   0x0
c0020fcf:	68 c4 09 00 00       	push   0x9c4
c0020fd4:	e8 2b 63 ff ff       	call   c0017304 <milliTenthSleep(unsigned long long)>
c0020fd9:	83 c4 10             	add    esp,0x10
c0020fdc:	43                   	inc    ebx
c0020fdd:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c0020fe3:	0f 85 52 ff ff ff    	jne    c0020f3b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c0020fe9:	83 ec 0c             	sub    esp,0xc
c0020fec:	68 ea 62 02 c0       	push   0xc00262ea
c0020ff1:	e9 67 ff ff ff       	jmp    c0020f5d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0020ff6:	0f ba e0 1e          	bt     eax,0x1e
c0020ffa:	73 0d                	jae    c0021009 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c0020ffc:	83 ec 0c             	sub    esp,0xc
c0020fff:	68 fe 62 02 c0       	push   0xc00262fe
c0021004:	e9 54 ff ff ff       	jmp    c0020f5d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0021009:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002100e:	74 17                	je     c0021027 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0021010:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0021015:	74 10                	je     c0021027 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0021017:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002101d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021021:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021025:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021027:	31 c0                	xor    eax,eax
c0021029:	83 c4 2c             	add    esp,0x2c
c002102c:	5b                   	pop    ebx
c002102d:	5e                   	pop    esi
c002102e:	5f                   	pop    edi
c002102f:	5d                   	pop    ebp
c0021030:	c3                   	ret    
c0021031:	90                   	nop

c0021032 <SATAPI::eject()>:
c0021032:	57                   	push   edi
c0021033:	b9 03 00 00 00       	mov    ecx,0x3
c0021038:	83 ec 18             	sub    esp,0x18
c002103b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002103f:	fc                   	cld    
c0021040:	31 c0                	xor    eax,eax
c0021042:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021044:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021049:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002104e:	50                   	push   eax
c002104f:	6a 00                	push   0x0
c0021051:	6a 00                	push   0x0
c0021053:	6a 00                	push   0x0
c0021055:	6a 00                	push   0x0
c0021057:	6a 02                	push   0x2
c0021059:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002105d:	50                   	push   eax
c002105e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021062:	e8 e9 fc ff ff       	call   c0020d50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021067:	31 c0                	xor    eax,eax
c0021069:	83 c4 38             	add    esp,0x38
c002106c:	5f                   	pop    edi
c002106d:	c3                   	ret    

c002106e <SATAPI::detectMedia()>:
c002106e:	53                   	push   ebx
c002106f:	83 ec 14             	sub    esp,0x14
c0021072:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021076:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002107c:	e8 8b a3 fe ff       	call   c000b40c <VCache::writeWriteBuffer()>
c0021081:	59                   	pop    ecx
c0021082:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021088:	e8 6f a3 fe ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c002108d:	c7 04 24 13 63 02 c0 	mov    DWORD PTR [esp],0xc0026313
c0021094:	e8 e3 5e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021099:	83 c4 10             	add    esp,0x10
c002109c:	31 c0                	xor    eax,eax
c002109e:	8b 14 85 e0 ca 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3520]
c00210a5:	85 d2                	test   edx,edx
c00210a7:	74 0f                	je     c00210b8 <SATAPI::detectMedia()+0x4a>
c00210a9:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c00210af:	75 07                	jne    c00210b8 <SATAPI::detectMedia()+0x4a>
c00210b1:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c00210b8:	40                   	inc    eax
c00210b9:	83 f8 1a             	cmp    eax,0x1a
c00210bc:	75 e0                	jne    c002109e <SATAPI::detectMedia()+0x30>
c00210be:	83 c4 08             	add    esp,0x8
c00210c1:	5b                   	pop    ebx
c00210c2:	c3                   	ret    
c00210c3:	90                   	nop

c00210c4 <SATAPI::open(int, int, void*)>:
c00210c4:	56                   	push   esi
c00210c5:	53                   	push   ebx
c00210c6:	51                   	push   ecx
c00210c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00210cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00210cf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00210d9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00210df:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00210e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210ed:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00210f7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00210fd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0021104:	e8 d1 f0 fe ff       	call   c00101da <Phys::allocatePage()>
c0021109:	89 c6                	mov    esi,eax
c002110b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021111:	81 c6 00 10 00 00    	add    esi,0x1000
c0021117:	e8 be f0 fe ff       	call   c00101da <Phys::allocatePage()>
c002111c:	39 c6                	cmp    esi,eax
c002111e:	74 10                	je     c0021130 <SATAPI::open(int, int, void*)+0x6c>
c0021120:	83 ec 0c             	sub    esp,0xc
c0021123:	68 28 63 02 c0       	push   0xc0026328
c0021128:	e8 b9 ee fe ff       	call   c000ffe6 <KePanic(char const*)>
c002112d:	83 c4 10             	add    esp,0x10
c0021130:	83 ec 0c             	sub    esp,0xc
c0021133:	6a 02                	push   0x2
c0021135:	e8 ed 24 ff ff       	call   c0013627 <Virt::allocateKernelVirtualPages(int)>
c002113a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021140:	6a 03                	push   0x3
c0021142:	50                   	push   eax
c0021143:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021149:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c002114f:	e8 b6 2b ff ff       	call   c0013d0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0021154:	83 c4 14             	add    esp,0x14
c0021157:	68 78 01 00 00       	push   0x178
c002115c:	e8 2e ea fe ff       	call   c000fb8f <malloc>
c0021161:	83 c4 0c             	add    esp,0xc
c0021164:	89 c6                	mov    esi,eax
c0021166:	6a 00                	push   0x0
c0021168:	68 ff ff ff 7f       	push   0x7fffffff
c002116d:	6a 00                	push   0x0
c002116f:	6a 00                	push   0x0
c0021171:	53                   	push   ebx
c0021172:	68 3e 63 02 c0       	push   0xc002633e
c0021177:	50                   	push   eax
c0021178:	e8 ef 96 fe ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002117d:	83 c4 14             	add    esp,0x14
c0021180:	56                   	push   esi
c0021181:	e8 a6 97 fe ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c0021186:	5a                   	pop    edx
c0021187:	0f be c0             	movsx  eax,al
c002118a:	59                   	pop    ecx
c002118b:	50                   	push   eax
c002118c:	68 84 61 02 c0       	push   0xc0026184
c0021191:	e8 e6 5d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021196:	58                   	pop    eax
c0021197:	5a                   	pop    edx
c0021198:	56                   	push   esi
c0021199:	53                   	push   ebx
c002119a:	e8 b5 88 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c002119f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00211a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00211a8:	e8 f1 8c fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c00211ad:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00211b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00211b7:	e8 b2 fe ff ff       	call   c002106e <SATAPI::detectMedia()>
c00211bc:	83 c4 14             	add    esp,0x14
c00211bf:	31 c0                	xor    eax,eax
c00211c1:	5b                   	pop    ebx
c00211c2:	5e                   	pop    esi
c00211c3:	c3                   	ret    

c00211c4 <SATAPI::read(unsigned long long, int, void*)>:
c00211c4:	57                   	push   edi
c00211c5:	56                   	push   esi
c00211c6:	53                   	push   ebx
c00211c7:	83 ec 30             	sub    esp,0x30
c00211ca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00211ce:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00211d2:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00211d6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00211da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00211de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00211e2:	83 fe 04             	cmp    esi,0x4
c00211e5:	7e 10                	jle    c00211f7 <SATAPI::read(unsigned long long, int, void*)+0x33>
c00211e7:	83 ec 0c             	sub    esp,0xc
c00211ea:	68 4c 63 02 c0       	push   0xc002634c
c00211ef:	e8 f2 ed fe ff       	call   c000ffe6 <KePanic(char const*)>
c00211f4:	83 c4 10             	add    esp,0x10
c00211f7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00211fd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0021203:	51                   	push   ecx
c0021204:	50                   	push   eax
c0021205:	83 c0 02             	add    eax,0x2
c0021208:	c1 e0 07             	shl    eax,0x7
c002120b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0021211:	50                   	push   eax
c0021212:	52                   	push   edx
c0021213:	e8 c6 e6 ff ff       	call   c001f8de <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0021218:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002121c:	b9 03 00 00 00       	mov    ecx,0x3
c0021221:	fc                   	cld    
c0021222:	31 c0                	xor    eax,eax
c0021224:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021226:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002122b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0021230:	83 c4 0c             	add    esp,0xc
c0021233:	6a 00                	push   0x0
c0021235:	6a 00                	push   0x0
c0021237:	6a 00                	push   0x0
c0021239:	6a 00                	push   0x0
c002123b:	6a 02                	push   0x2
c002123d:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021241:	50                   	push   eax
c0021242:	53                   	push   ebx
c0021243:	e8 08 fb ff ff       	call   c0020d50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021248:	83 c4 20             	add    esp,0x20
c002124b:	85 c0                	test   eax,eax
c002124d:	75 44                	jne    c0021293 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002124f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021253:	b9 03 00 00 00       	mov    ecx,0x3
c0021258:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002125a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002125e:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0021263:	0f c8                	bswap  eax
c0021265:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0021269:	89 f0                	mov    eax,esi
c002126b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002126f:	50                   	push   eax
c0021270:	56                   	push   esi
c0021271:	c1 e6 0b             	shl    esi,0xb
c0021274:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0021278:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002127c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021280:	56                   	push   esi
c0021281:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021285:	50                   	push   eax
c0021286:	53                   	push   ebx
c0021287:	e8 c4 fa ff ff       	call   c0020d50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002128c:	83 c4 20             	add    esp,0x20
c002128f:	85 c0                	test   eax,eax
c0021291:	74 14                	je     c00212a7 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c0021293:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021297:	83 ec 0c             	sub    esp,0xc
c002129a:	53                   	push   ebx
c002129b:	e8 ce fd ff ff       	call   c002106e <SATAPI::detectMedia()>
c00212a0:	83 c4 10             	add    esp,0x10
c00212a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212a7:	83 c4 30             	add    esp,0x30
c00212aa:	5b                   	pop    ebx
c00212ab:	5e                   	pop    esi
c00212ac:	5f                   	pop    edi
c00212ad:	c3                   	ret    
c00212ae:	66 90                	xchg   ax,ax

c00212b0 <APICTimer::close(int, int, void*)>:
c00212b0:	b8 00 00 00 00       	mov    eax,0x0
c00212b5:	c3                   	ret    
c00212b6:	66 90                	xchg   ax,ax

c00212b8 <apicTimerHandler(regs*, void*)>:
c00212b8:	83 ec 0c             	sub    esp,0xc
c00212bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00212c1:	b8 10 27 00 00       	mov    eax,0x2710
c00212c6:	ba 00 00 00 00       	mov    edx,0x0
c00212cb:	f7 f1                	div    ecx
c00212cd:	83 ec 0c             	sub    esp,0xc
c00212d0:	50                   	push   eax
c00212d1:	e8 52 9e fe ff       	call   c000b128 <timerHandler(unsigned int)>
c00212d6:	83 c4 10             	add    esp,0x10
c00212d9:	90                   	nop
c00212da:	83 c4 0c             	add    esp,0xc
c00212dd:	c3                   	ret    
c00212de:	66 90                	xchg   ax,ax

c00212e0 <APICTimer::open(int, int, void*)>:
c00212e0:	83 ec 0c             	sub    esp,0xc
c00212e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00212e9:	83 c0 24             	add    eax,0x24
c00212ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00212ee:	83 ec 08             	sub    esp,0x8
c00212f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00212f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00212f9:	ff d0                	call   eax
c00212fb:	83 c4 10             	add    esp,0x10
c00212fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021302:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021306:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002130c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021310:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021314:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002131a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002131e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021324:	83 ec 0c             	sub    esp,0xc
c0021327:	51                   	push   ecx
c0021328:	6a 01                	push   0x1
c002132a:	68 b8 12 02 c0       	push   0xc00212b8
c002132f:	52                   	push   edx
c0021330:	50                   	push   eax
c0021331:	e8 ca 86 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021336:	83 c4 20             	add    esp,0x20
c0021339:	89 c2                	mov    edx,eax
c002133b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002133f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021345:	b8 00 00 00 00       	mov    eax,0x0
c002134a:	83 c4 0c             	add    esp,0xc
c002134d:	c3                   	ret    
c002134e:	66 90                	xchg   ax,ax

c0021350 <APICTimer::write(int)>:
c0021350:	83 ec 0c             	sub    esp,0xc
c0021353:	83 ec 0c             	sub    esp,0xc
c0021356:	68 b0 63 02 c0       	push   0xc00263b0
c002135b:	e8 86 ec fe ff       	call   c000ffe6 <KePanic(char const*)>
c0021360:	83 c4 10             	add    esp,0x10
c0021363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021367:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002136b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021371:	90                   	nop
c0021372:	83 c4 0c             	add    esp,0xc
c0021375:	c3                   	ret    
c0021376:	66 90                	xchg   ax,ax

c0021378 <APICTimer::APICTimer()>:
c0021378:	83 ec 0c             	sub    esp,0xc
c002137b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002137f:	83 ec 08             	sub    esp,0x8
c0021382:	68 c0 63 02 c0       	push   0xc00263c0
c0021387:	50                   	push   eax
c0021388:	e8 cf 9c fe ff       	call   c000b05c <Timer::Timer(char const*)>
c002138d:	83 c4 10             	add    esp,0x10
c0021390:	ba d4 63 02 c0       	mov    edx,0xc00263d4
c0021395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021399:	89 10                	mov    DWORD PTR [eax],edx
c002139b:	90                   	nop
c002139c:	83 c4 0c             	add    esp,0xc
c002139f:	c3                   	ret    

c00213a0 <PIT::write(int)>:
c00213a0:	83 ec 10             	sub    esp,0x10
c00213a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00213ab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00213b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00213b5:	a3 98 04 03 c0       	mov    ds:0xc0030498,eax
c00213ba:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00213bf:	89 c2                	mov    edx,eax
c00213c1:	c1 fa 1f             	sar    edx,0x1f
c00213c4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00213c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213cc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00213d3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00213d8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00213dc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00213e1:	ee                   	out    dx,al
c00213e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213e6:	0f b6 c0             	movzx  eax,al
c00213e9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00213f0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00213f4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00213f8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00213fd:	ee                   	out    dx,al
c00213fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021402:	c1 f8 08             	sar    eax,0x8
c0021405:	0f b6 c0             	movzx  eax,al
c0021408:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002140f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021413:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021417:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002141c:	ee                   	out    dx,al
c002141d:	90                   	nop
c002141e:	83 c4 10             	add    esp,0x10
c0021421:	c3                   	ret    
c0021422:	66 90                	xchg   ax,ax

c0021424 <pitHandler(regs*, void*)>:
c0021424:	83 ec 0c             	sub    esp,0xc
c0021427:	8b 0d 98 04 03 c0    	mov    ecx,DWORD PTR ds:0xc0030498
c002142d:	b8 10 27 00 00       	mov    eax,0x2710
c0021432:	89 c2                	mov    edx,eax
c0021434:	c1 fa 1f             	sar    edx,0x1f
c0021437:	f7 f9                	idiv   ecx
c0021439:	83 ec 0c             	sub    esp,0xc
c002143c:	50                   	push   eax
c002143d:	e8 e6 9c fe ff       	call   c000b128 <timerHandler(unsigned int)>
c0021442:	83 c4 10             	add    esp,0x10
c0021445:	90                   	nop
c0021446:	83 c4 0c             	add    esp,0xc
c0021449:	c3                   	ret    
c002144a:	66 90                	xchg   ax,ax

c002144c <PIT::open(int, int, void*)>:
c002144c:	83 ec 0c             	sub    esp,0xc
c002144f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021453:	8b 00                	mov    eax,DWORD PTR [eax]
c0021455:	83 c0 24             	add    eax,0x24
c0021458:	8b 00                	mov    eax,DWORD PTR [eax]
c002145a:	83 ec 08             	sub    esp,0x8
c002145d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021461:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021465:	ff d0                	call   eax
c0021467:	83 c4 10             	add    esp,0x10
c002146a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002146e:	83 ec 0c             	sub    esp,0xc
c0021471:	6a 00                	push   0x0
c0021473:	6a 01                	push   0x1
c0021475:	68 24 14 02 c0       	push   0xc0021424
c002147a:	6a 00                	push   0x0
c002147c:	50                   	push   eax
c002147d:	e8 7e 85 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021482:	83 c4 20             	add    esp,0x20
c0021485:	89 c2                	mov    edx,eax
c0021487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002148b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021491:	b8 00 00 00 00       	mov    eax,0x0
c0021496:	83 c4 0c             	add    esp,0xc
c0021499:	c3                   	ret    
c002149a:	66 90                	xchg   ax,ax

c002149c <PIT::close(int, int, void*)>:
c002149c:	83 ec 0c             	sub    esp,0xc
c002149f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00214ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214b1:	6a 01                	push   0x1
c00214b3:	68 24 14 02 c0       	push   0xc0021424
c00214b8:	6a 00                	push   0x0
c00214ba:	50                   	push   eax
c00214bb:	e8 76 85 fe ff       	call   c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00214c0:	83 c4 10             	add    esp,0x10
c00214c3:	b8 00 00 00 00       	mov    eax,0x0
c00214c8:	83 c4 0c             	add    esp,0xc
c00214cb:	c3                   	ret    

c00214cc <PIT::PIT()>:
c00214cc:	83 ec 0c             	sub    esp,0xc
c00214cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d3:	83 ec 08             	sub    esp,0x8
c00214d6:	68 fc 63 02 c0       	push   0xc00263fc
c00214db:	50                   	push   eax
c00214dc:	e8 7b 9b fe ff       	call   c000b05c <Timer::Timer(char const*)>
c00214e1:	83 c4 10             	add    esp,0x10
c00214e4:	ba 24 64 02 c0       	mov    edx,0xc0026424
c00214e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ed:	89 10                	mov    DWORD PTR [eax],edx
c00214ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00214f9:	0f b6 d0             	movzx  edx,al
c00214fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021500:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002150b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021511:	0f b6 d0             	movzx  edx,al
c0021514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021518:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002151d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021521:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021527:	8d 50 01             	lea    edx,[eax+0x1]
c002152a:	88 d1                	mov    cl,dl
c002152c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021530:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021536:	0f b6 d0             	movzx  edx,al
c0021539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002153d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021541:	83 e1 3f             	and    ecx,0x3f
c0021544:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021548:	90                   	nop
c0021549:	83 c4 0c             	add    esp,0xc
c002154c:	c3                   	ret    
c002154d:	66 90                	xchg   ax,ax
c002154f:	90                   	nop

c0021550 <avxDetect>:
c0021550:	b8 01 00 00 00       	mov    eax,0x1
c0021555:	0f a2                	cpuid  
c0021557:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002155d:	74 15                	je     c0021574 <avxDetect.noAVX>
c002155f:	b8 01 00 00 00       	mov    eax,0x1
c0021564:	0f a2                	cpuid  
c0021566:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002156c:	74 06                	je     c0021574 <avxDetect.noAVX>
c002156e:	b8 01 00 00 00       	mov    eax,0x1
c0021573:	c3                   	ret    

c0021574 <avxDetect.noAVX>:
c0021574:	b8 00 00 00 00       	mov    eax,0x0
c0021579:	c3                   	ret    

c002157a <avxSave>:
c002157a:	53                   	push   ebx
c002157b:	52                   	push   edx
c002157c:	31 c0                	xor    eax,eax
c002157e:	48                   	dec    eax
c002157f:	89 c2                	mov    edx,eax
c0021581:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021585:	0f ae 23             	xsave  [ebx]
c0021588:	5a                   	pop    edx
c0021589:	5b                   	pop    ebx
c002158a:	c3                   	ret    

c002158b <avxLoad>:
c002158b:	53                   	push   ebx
c002158c:	52                   	push   edx
c002158d:	31 c0                	xor    eax,eax
c002158f:	48                   	dec    eax
c0021590:	89 c2                	mov    edx,eax
c0021592:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021596:	0f ae 2b             	xrstor [ebx]
c0021599:	5a                   	pop    edx
c002159a:	5b                   	pop    ebx
c002159b:	c3                   	ret    

c002159c <avxInit>:
c002159c:	e8 17 03 00 00       	call   c00218b8 <sseInit>
c00215a1:	50                   	push   eax
c00215a2:	51                   	push   ecx
c00215a3:	0f 20 e0             	mov    eax,cr4
c00215a6:	0d 00 00 04 00       	or     eax,0x40000
c00215ab:	0f 22 e0             	mov    cr4,eax
c00215ae:	31 c9                	xor    ecx,ecx
c00215b0:	0f 01 d0             	xgetbv 
c00215b3:	0d 07 00 00 00       	or     eax,0x7
c00215b8:	0f 01 d1             	xsetbv 
c00215bb:	59                   	pop    ecx
c00215bc:	58                   	pop    eax
c00215bd:	c3                   	ret    

c00215be <avxClose>:
c00215be:	c3                   	ret    
c00215bf:	90                   	nop

c00215c0 <isr0>:
c00215c0:	fa                   	cli    
c00215c1:	68 00 00 00 00       	push   0x0
c00215c6:	68 00 00 00 00       	push   0x0
c00215cb:	e9 56 01 00 00       	jmp    c0021726 <int_common_stub>

c00215d0 <isr1>:
c00215d0:	fa                   	cli    
c00215d1:	6a 00                	push   0x0
c00215d3:	6a 01                	push   0x1
c00215d5:	e9 4c 01 00 00       	jmp    c0021726 <int_common_stub>

c00215da <isr2>:
c00215da:	fa                   	cli    
c00215db:	6a 00                	push   0x0
c00215dd:	6a 02                	push   0x2
c00215df:	e9 42 01 00 00       	jmp    c0021726 <int_common_stub>

c00215e4 <isr3>:
c00215e4:	fa                   	cli    
c00215e5:	6a 00                	push   0x0
c00215e7:	6a 03                	push   0x3
c00215e9:	e9 38 01 00 00       	jmp    c0021726 <int_common_stub>

c00215ee <isr4>:
c00215ee:	fa                   	cli    
c00215ef:	6a 00                	push   0x0
c00215f1:	6a 04                	push   0x4
c00215f3:	e9 2e 01 00 00       	jmp    c0021726 <int_common_stub>

c00215f8 <isr5>:
c00215f8:	fa                   	cli    
c00215f9:	6a 00                	push   0x0
c00215fb:	6a 05                	push   0x5
c00215fd:	e9 24 01 00 00       	jmp    c0021726 <int_common_stub>

c0021602 <isr6>:
c0021602:	fa                   	cli    
c0021603:	6a 00                	push   0x0
c0021605:	6a 06                	push   0x6
c0021607:	e9 1a 01 00 00       	jmp    c0021726 <int_common_stub>

c002160c <isr7>:
c002160c:	fa                   	cli    
c002160d:	6a 00                	push   0x0
c002160f:	6a 07                	push   0x7
c0021611:	e9 10 01 00 00       	jmp    c0021726 <int_common_stub>

c0021616 <isr8>:
c0021616:	fa                   	cli    
c0021617:	6a 08                	push   0x8
c0021619:	e9 08 01 00 00       	jmp    c0021726 <int_common_stub>

c002161e <isr9>:
c002161e:	fa                   	cli    
c002161f:	6a 00                	push   0x0
c0021621:	6a 09                	push   0x9
c0021623:	e9 fe 00 00 00       	jmp    c0021726 <int_common_stub>

c0021628 <isr10>:
c0021628:	fa                   	cli    
c0021629:	6a 0a                	push   0xa
c002162b:	e9 f6 00 00 00       	jmp    c0021726 <int_common_stub>

c0021630 <isr11>:
c0021630:	fa                   	cli    
c0021631:	6a 0b                	push   0xb
c0021633:	e9 ee 00 00 00       	jmp    c0021726 <int_common_stub>

c0021638 <isr12>:
c0021638:	fa                   	cli    
c0021639:	6a 0c                	push   0xc
c002163b:	e9 e6 00 00 00       	jmp    c0021726 <int_common_stub>

c0021640 <isr13>:
c0021640:	fa                   	cli    
c0021641:	6a 0d                	push   0xd
c0021643:	53                   	push   ebx
c0021644:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021648:	81 fb e5 17 02 c0    	cmp    ebx,0xc00217e5
c002164e:	5b                   	pop    ebx
c002164f:	0f 84 92 01 00 00    	je     c00217e7 <finishSignal2>
c0021655:	e9 cc 00 00 00       	jmp    c0021726 <int_common_stub>

c002165a <isr14>:
c002165a:	fa                   	cli    
c002165b:	6a 0e                	push   0xe
c002165d:	e9 c4 00 00 00       	jmp    c0021726 <int_common_stub>

c0021662 <isr15>:
c0021662:	fa                   	cli    
c0021663:	6a 00                	push   0x0
c0021665:	6a 0f                	push   0xf
c0021667:	e9 ba 00 00 00       	jmp    c0021726 <int_common_stub>

c002166c <isr16>:
c002166c:	fa                   	cli    
c002166d:	6a 00                	push   0x0
c002166f:	6a 10                	push   0x10
c0021671:	e9 b0 00 00 00       	jmp    c0021726 <int_common_stub>

c0021676 <isr17>:
c0021676:	fa                   	cli    
c0021677:	6a 00                	push   0x0
c0021679:	6a 11                	push   0x11
c002167b:	e9 a6 00 00 00       	jmp    c0021726 <int_common_stub>

c0021680 <isr18>:
c0021680:	fa                   	cli    
c0021681:	6a 00                	push   0x0
c0021683:	6a 12                	push   0x12
c0021685:	e9 9c 00 00 00       	jmp    c0021726 <int_common_stub>

c002168a <irq3>:
c002168a:	fa                   	cli    
c002168b:	6a 00                	push   0x0
c002168d:	6a 23                	push   0x23
c002168f:	e9 92 00 00 00       	jmp    c0021726 <int_common_stub>

c0021694 <irq4>:
c0021694:	fa                   	cli    
c0021695:	6a 00                	push   0x0
c0021697:	6a 24                	push   0x24
c0021699:	e9 88 00 00 00       	jmp    c0021726 <int_common_stub>

c002169e <irq5>:
c002169e:	fa                   	cli    
c002169f:	6a 00                	push   0x0
c00216a1:	6a 25                	push   0x25
c00216a3:	e9 7e 00 00 00       	jmp    c0021726 <int_common_stub>

c00216a8 <irq6>:
c00216a8:	fa                   	cli    
c00216a9:	6a 00                	push   0x0
c00216ab:	6a 26                	push   0x26
c00216ad:	e9 74 00 00 00       	jmp    c0021726 <int_common_stub>

c00216b2 <irq7>:
c00216b2:	fa                   	cli    
c00216b3:	6a 00                	push   0x0
c00216b5:	6a 27                	push   0x27
c00216b7:	e9 6a 00 00 00       	jmp    c0021726 <int_common_stub>

c00216bc <irq8>:
c00216bc:	fa                   	cli    
c00216bd:	6a 00                	push   0x0
c00216bf:	6a 28                	push   0x28
c00216c1:	e9 60 00 00 00       	jmp    c0021726 <int_common_stub>

c00216c6 <irq9>:
c00216c6:	fa                   	cli    
c00216c7:	6a 00                	push   0x0
c00216c9:	6a 29                	push   0x29
c00216cb:	e9 56 00 00 00       	jmp    c0021726 <int_common_stub>

c00216d0 <irq10>:
c00216d0:	fa                   	cli    
c00216d1:	6a 00                	push   0x0
c00216d3:	6a 2a                	push   0x2a
c00216d5:	e9 4c 00 00 00       	jmp    c0021726 <int_common_stub>

c00216da <irq11>:
c00216da:	fa                   	cli    
c00216db:	6a 00                	push   0x0
c00216dd:	6a 2b                	push   0x2b
c00216df:	e9 42 00 00 00       	jmp    c0021726 <int_common_stub>

c00216e4 <irq12>:
c00216e4:	fa                   	cli    
c00216e5:	6a 00                	push   0x0
c00216e7:	6a 2c                	push   0x2c
c00216e9:	e9 38 00 00 00       	jmp    c0021726 <int_common_stub>

c00216ee <irq13>:
c00216ee:	fa                   	cli    
c00216ef:	6a 00                	push   0x0
c00216f1:	6a 2d                	push   0x2d
c00216f3:	e9 2e 00 00 00       	jmp    c0021726 <int_common_stub>

c00216f8 <irq14>:
c00216f8:	fa                   	cli    
c00216f9:	6a 00                	push   0x0
c00216fb:	6a 2e                	push   0x2e
c00216fd:	e9 24 00 00 00       	jmp    c0021726 <int_common_stub>

c0021702 <irq15>:
c0021702:	fa                   	cli    
c0021703:	6a 00                	push   0x0
c0021705:	6a 2f                	push   0x2f
c0021707:	e9 1a 00 00 00       	jmp    c0021726 <int_common_stub>

c002170c <irq1>:
c002170c:	fa                   	cli    
c002170d:	6a 00                	push   0x0
c002170f:	6a 21                	push   0x21
c0021711:	eb 13                	jmp    c0021726 <int_common_stub>

c0021713 <irq2>:
c0021713:	fa                   	cli    
c0021714:	6a 00                	push   0x0
c0021716:	6a 22                	push   0x22
c0021718:	eb 0c                	jmp    c0021726 <int_common_stub>

c002171a <isr96>:
c002171a:	6a 00                	push   0x0
c002171c:	6a 60                	push   0x60
c002171e:	fb                   	sti    
c002171f:	eb 05                	jmp    c0021726 <int_common_stub>

c0021721 <irq0>:
c0021721:	fa                   	cli    
c0021722:	6a 00                	push   0x0
c0021724:	6a 20                	push   0x20

c0021726 <int_common_stub>:
c0021726:	60                   	pusha  
c0021727:	1e                   	push   ds
c0021728:	06                   	push   es
c0021729:	0f a0                	push   fs
c002172b:	0f a8                	push   gs
c002172d:	66 b8 10 00          	mov    ax,0x10
c0021731:	66 8e d8             	mov    ds,ax
c0021734:	66 8e c0             	mov    es,ax
c0021737:	66 8e e0             	mov    fs,ax
c002173a:	66 8e e8             	mov    gs,ax
c002173d:	54                   	push   esp
c002173e:	fc                   	cld    
c002173f:	e8 b4 d1 fe ff       	call   c000e8f8 <int_handler>
c0021744:	81 c4 04 00 00 00    	add    esp,0x4
c002174a:	0f a9                	pop    gs
c002174c:	0f a1                	pop    fs
c002174e:	07                   	pop    es
c002174f:	1f                   	pop    ds
c0021750:	e8 06 fd fe ff       	call   c001145b <KiCheckSignalZ>
c0021755:	85 c0                	test   eax,eax
c0021757:	75 08                	jne    c0021761 <doSignals>
c0021759:	61                   	popa   
c002175a:	81 c4 08 00 00 00    	add    esp,0x8
c0021760:	cf                   	iret   

c0021761 <doSignals>:
c0021761:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021766:	61                   	popa   
c0021767:	53                   	push   ebx
c0021768:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002176e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021771:	5b                   	pop    ebx
c0021772:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021777:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002177a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002177d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021780:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021783:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021786:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021789:	81 c4 08 00 00 00    	add    esp,0x8
c002178f:	5e                   	pop    esi
c0021790:	5b                   	pop    ebx
c0021791:	59                   	pop    ecx
c0021792:	5a                   	pop    edx
c0021793:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021796:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021799:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002179c:	52                   	push   edx
c002179d:	51                   	push   ecx
c002179e:	53                   	push   ebx
c002179f:	56                   	push   esi
c00217a0:	81 ec 08 00 00 00    	sub    esp,0x8
c00217a6:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00217a9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00217ac:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c00217af:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00217b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00217b5:	60                   	pusha  
c00217b6:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c00217bc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c00217bf:	89 e3                	mov    ebx,esp
c00217c1:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c00217c4:	52                   	push   edx
c00217c5:	68 e5 17 02 c0       	push   0xc00217e5
c00217ca:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c00217cd:	89 dc                	mov    esp,ebx
c00217cf:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00217d2:	68 23 00 00 00       	push   0x23
c00217d7:	51                   	push   ecx
c00217d8:	68 02 02 00 00       	push   0x202
c00217dd:	68 1b 00 00 00       	push   0x1b
c00217e2:	ff 36                	push   DWORD PTR [esi]
c00217e4:	cf                   	iret   

c00217e5 <finishSignal>:
c00217e5:	cd 0f                	int    0xf

c00217e7 <finishSignal2>:
c00217e7:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c00217ed:	e8 f5 fc fe ff       	call   c00114e7 <KiFinishSignalZ>
c00217f2:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c00217f8:	68 23 00 00 00       	push   0x23
c00217fd:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021800:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021803:	68 1b 00 00 00       	push   0x1b
c0021808:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002180b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002180e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021811:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021814:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021817:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002181a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002181d:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021820:	cf                   	iret   
c0021821:	90                   	nop
c0021822:	90                   	nop
c0021823:	90                   	nop

c0021824 <irq16>:
c0021824:	fa                   	cli    
c0021825:	6a 00                	push   0x0
c0021827:	6a 30                	push   0x30
c0021829:	e9 f8 fe ff ff       	jmp    c0021726 <int_common_stub>

c002182e <irq17>:
c002182e:	fa                   	cli    
c002182f:	6a 00                	push   0x0
c0021831:	6a 31                	push   0x31
c0021833:	e9 ee fe ff ff       	jmp    c0021726 <int_common_stub>

c0021838 <irq18>:
c0021838:	fa                   	cli    
c0021839:	6a 00                	push   0x0
c002183b:	6a 32                	push   0x32
c002183d:	e9 e4 fe ff ff       	jmp    c0021726 <int_common_stub>

c0021842 <irq19>:
c0021842:	fa                   	cli    
c0021843:	6a 00                	push   0x0
c0021845:	6a 33                	push   0x33
c0021847:	e9 da fe ff ff       	jmp    c0021726 <int_common_stub>

c002184c <irq20>:
c002184c:	fa                   	cli    
c002184d:	6a 00                	push   0x0
c002184f:	6a 34                	push   0x34
c0021851:	e9 d0 fe ff ff       	jmp    c0021726 <int_common_stub>

c0021856 <irq21>:
c0021856:	fa                   	cli    
c0021857:	6a 00                	push   0x0
c0021859:	6a 35                	push   0x35
c002185b:	e9 c6 fe ff ff       	jmp    c0021726 <int_common_stub>

c0021860 <irq22>:
c0021860:	fa                   	cli    
c0021861:	6a 00                	push   0x0
c0021863:	6a 36                	push   0x36
c0021865:	e9 bc fe ff ff       	jmp    c0021726 <int_common_stub>

c002186a <irq23>:
c002186a:	fa                   	cli    
c002186b:	6a 00                	push   0x0
c002186d:	6a 37                	push   0x37
c002186f:	e9 b2 fe ff ff       	jmp    c0021726 <int_common_stub>
c0021874:	66 90                	xchg   ax,ax
c0021876:	66 90                	xchg   ax,ax
c0021878:	66 90                	xchg   ax,ax
c002187a:	66 90                	xchg   ax,ax
c002187c:	66 90                	xchg   ax,ax
c002187e:	66 90                	xchg   ax,ax

c0021880 <i386GetRDRAND>:
c0021880:	b9 64 00 00 00       	mov    ecx,0x64

c0021885 <retry>:
c0021885:	0f c7 f0             	rdrand eax
c0021888:	72 05                	jb     c002188f <retry.done>
c002188a:	e2 f9                	loop   c0021885 <retry>

c002188c <retry.fail>:
c002188c:	31 c0                	xor    eax,eax
c002188e:	c3                   	ret    

c002188f <retry.done>:
c002188f:	c3                   	ret    

c0021890 <sseDetect>:
c0021890:	b8 01 00 00 00       	mov    eax,0x1
c0021895:	0f a2                	cpuid  
c0021897:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002189d:	74 06                	je     c00218a5 <sseDetect.noSSE>
c002189f:	b8 01 00 00 00       	mov    eax,0x1
c00218a4:	c3                   	ret    

c00218a5 <sseDetect.noSSE>:
c00218a5:	31 c0                	xor    eax,eax
c00218a7:	c3                   	ret    

c00218a8 <sseSave>:
c00218a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218ac:	0f ae 00             	fxsave [eax]
c00218af:	c3                   	ret    

c00218b0 <sseLoad>:
c00218b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218b4:	0f ae 08             	fxrstor [eax]
c00218b7:	c3                   	ret    

c00218b8 <sseInit>:
c00218b8:	e8 48 00 00 00       	call   c0021905 <x87Init>
c00218bd:	0f 20 e0             	mov    eax,cr4
c00218c0:	66 0d 00 06          	or     ax,0x600
c00218c4:	0f 22 e0             	mov    cr4,eax
c00218c7:	c3                   	ret    

c00218c8 <sseClose>:
c00218c8:	c3                   	ret    
c00218c9:	66 90                	xchg   ax,ax
c00218cb:	66 90                	xchg   ax,ax
c00218cd:	66 90                	xchg   ax,ax
c00218cf:	90                   	nop

c00218d0 <value_37F>:
c00218d0:	7f 03                	jg     c00218d5 <value_37A+0x1>

c00218d2 <value_37E>:
c00218d2:	7e 03                	jle    c00218d7 <x87Detect+0x1>

c00218d4 <value_37A>:
c00218d4:	7a 03                	jp     c00218d9 <x87Detect+0x3>

c00218d6 <x87Detect>:
c00218d6:	53                   	push   ebx
c00218d7:	51                   	push   ecx
c00218d8:	52                   	push   edx
c00218d9:	b8 01 00 00 00       	mov    eax,0x1
c00218de:	0f a2                	cpuid  
c00218e0:	f7 c2 01 00 00 00    	test   edx,0x1
c00218e6:	74 06                	je     c00218ee <x87Detect.nox87>
c00218e8:	b8 01 00 00 00       	mov    eax,0x1
c00218ed:	c3                   	ret    

c00218ee <x87Detect.nox87>:
c00218ee:	b8 00 00 00 00       	mov    eax,0x0
c00218f3:	5a                   	pop    edx
c00218f4:	59                   	pop    ecx
c00218f5:	5b                   	pop    ebx
c00218f6:	c3                   	ret    

c00218f7 <x87Save>:
c00218f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218fb:	dd 30                	fnsave [eax]
c00218fd:	c3                   	ret    

c00218fe <x87Load>:
c00218fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021902:	dd 20                	frstor [eax]
c0021904:	c3                   	ret    

c0021905 <x87Init>:
c0021905:	0f 20 c0             	mov    eax,cr0
c0021908:	66 25 fb ff          	and    ax,0xfffb
c002190c:	66 0d 22 00          	or     ax,0x22
c0021910:	0f 22 c0             	mov    cr0,eax
c0021913:	db e3                	fninit 
c0021915:	0f 06                	clts   
c0021917:	d9 2d d4 18 02 c0    	fldcw  WORD PTR ds:0xc00218d4
c002191d:	c3                   	ret    

c002191e <x87Close>:
c002191e:	c3                   	ret    
c002191f:	90                   	nop

c0021920 <__do_global_ctors_aux>:
c0021920:	a1 d4 28 02 c0       	mov    eax,ds:0xc00228d4
c0021925:	83 f8 ff             	cmp    eax,0xffffffff
c0021928:	74 1a                	je     c0021944 <__do_global_ctors_aux+0x24>
c002192a:	55                   	push   ebp
c002192b:	89 e5                	mov    ebp,esp
c002192d:	53                   	push   ebx
c002192e:	52                   	push   edx
c002192f:	bb d4 28 02 c0       	mov    ebx,0xc00228d4
c0021934:	ff d0                	call   eax
c0021936:	83 eb 04             	sub    ebx,0x4
c0021939:	8b 03                	mov    eax,DWORD PTR [ebx]
c002193b:	83 f8 ff             	cmp    eax,0xffffffff
c002193e:	75 f4                	jne    c0021934 <__do_global_ctors_aux+0x14>
c0021940:	58                   	pop    eax
c0021941:	5b                   	pop    ebx
c0021942:	5d                   	pop    ebp
c0021943:	c3                   	ret    
c0021944:	c3                   	ret    
c0021945:	66 90                	xchg   ax,ax
c0021947:	90                   	nop

c0021948 <__divdi3>:
c0021948:	55                   	push   ebp
c0021949:	57                   	push   edi
c002194a:	56                   	push   esi
c002194b:	53                   	push   ebx
c002194c:	83 ec 1c             	sub    esp,0x1c
c002194f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021953:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021957:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002195a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002195e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021962:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021966:	85 db                	test   ebx,ebx
c0021968:	0f 88 8e 00 00 00    	js     c00219fc <__divdi3+0xb4>
c002196e:	89 dd                	mov    ebp,ebx
c0021970:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021978:	89 d3                	mov    ebx,edx
c002197a:	85 d2                	test   edx,edx
c002197c:	79 0d                	jns    c002198b <__divdi3+0x43>
c002197e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021982:	f7 d8                	neg    eax
c0021984:	83 d2 00             	adc    edx,0x0
c0021987:	f7 da                	neg    edx
c0021989:	89 d3                	mov    ebx,edx
c002198b:	89 c7                	mov    edi,eax
c002198d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021990:	85 db                	test   ebx,ebx
c0021992:	75 48                	jne    c00219dc <__divdi3+0x94>
c0021994:	39 ef                	cmp    edi,ebp
c0021996:	76 24                	jbe    c00219bc <__divdi3+0x74>
c0021998:	89 ea                	mov    edx,ebp
c002199a:	f7 f7                	div    edi
c002199c:	89 c1                	mov    ecx,eax
c002199e:	31 f6                	xor    esi,esi
c00219a0:	89 c8                	mov    eax,ecx
c00219a2:	89 f2                	mov    edx,esi
c00219a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00219a8:	85 c9                	test   ecx,ecx
c00219aa:	74 07                	je     c00219b3 <__divdi3+0x6b>
c00219ac:	f7 d8                	neg    eax
c00219ae:	83 d2 00             	adc    edx,0x0
c00219b1:	f7 da                	neg    edx
c00219b3:	83 c4 1c             	add    esp,0x1c
c00219b6:	5b                   	pop    ebx
c00219b7:	5e                   	pop    esi
c00219b8:	5f                   	pop    edi
c00219b9:	5d                   	pop    ebp
c00219ba:	c3                   	ret    
c00219bb:	90                   	nop
c00219bc:	85 ff                	test   edi,edi
c00219be:	75 0b                	jne    c00219cb <__divdi3+0x83>
c00219c0:	b8 01 00 00 00       	mov    eax,0x1
c00219c5:	31 d2                	xor    edx,edx
c00219c7:	f7 f3                	div    ebx
c00219c9:	89 c7                	mov    edi,eax
c00219cb:	31 d2                	xor    edx,edx
c00219cd:	89 e8                	mov    eax,ebp
c00219cf:	f7 f7                	div    edi
c00219d1:	89 c6                	mov    esi,eax
c00219d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219d6:	f7 f7                	div    edi
c00219d8:	89 c1                	mov    ecx,eax
c00219da:	eb c4                	jmp    c00219a0 <__divdi3+0x58>
c00219dc:	39 eb                	cmp    ebx,ebp
c00219de:	77 3c                	ja     c0021a1c <__divdi3+0xd4>
c00219e0:	0f bd f3             	bsr    esi,ebx
c00219e3:	83 f6 1f             	xor    esi,0x1f
c00219e6:	75 40                	jne    c0021a28 <__divdi3+0xe0>
c00219e8:	39 eb                	cmp    ebx,ebp
c00219ea:	72 09                	jb     c00219f5 <__divdi3+0xad>
c00219ec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00219ef:	0f 87 97 00 00 00    	ja     c0021a8c <__divdi3+0x144>
c00219f5:	b9 01 00 00 00       	mov    ecx,0x1
c00219fa:	eb a4                	jmp    c00219a0 <__divdi3+0x58>
c00219fc:	f7 d9                	neg    ecx
c00219fe:	83 d3 00             	adc    ebx,0x0
c0021a01:	f7 db                	neg    ebx
c0021a03:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021a06:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021a0a:	89 dd                	mov    ebp,ebx
c0021a0c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021a14:	e9 5f ff ff ff       	jmp    c0021978 <__divdi3+0x30>
c0021a19:	8d 76 00             	lea    esi,[esi+0x0]
c0021a1c:	31 f6                	xor    esi,esi
c0021a1e:	31 c9                	xor    ecx,ecx
c0021a20:	e9 7b ff ff ff       	jmp    c00219a0 <__divdi3+0x58>
c0021a25:	8d 76 00             	lea    esi,[esi+0x0]
c0021a28:	b8 20 00 00 00       	mov    eax,0x20
c0021a2d:	29 f0                	sub    eax,esi
c0021a2f:	89 f1                	mov    ecx,esi
c0021a31:	d3 e3                	shl    ebx,cl
c0021a33:	89 fa                	mov    edx,edi
c0021a35:	88 c1                	mov    cl,al
c0021a37:	d3 ea                	shr    edx,cl
c0021a39:	09 da                	or     edx,ebx
c0021a3b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a3f:	89 f1                	mov    ecx,esi
c0021a41:	d3 e7                	shl    edi,cl
c0021a43:	89 eb                	mov    ebx,ebp
c0021a45:	88 c1                	mov    cl,al
c0021a47:	d3 eb                	shr    ebx,cl
c0021a49:	89 f1                	mov    ecx,esi
c0021a4b:	d3 e5                	shl    ebp,cl
c0021a4d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021a50:	88 c1                	mov    cl,al
c0021a52:	d3 ea                	shr    edx,cl
c0021a54:	09 d5                	or     ebp,edx
c0021a56:	89 e8                	mov    eax,ebp
c0021a58:	89 da                	mov    edx,ebx
c0021a5a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0021a5e:	89 d3                	mov    ebx,edx
c0021a60:	89 c5                	mov    ebp,eax
c0021a62:	f7 e7                	mul    edi
c0021a64:	39 d3                	cmp    ebx,edx
c0021a66:	72 18                	jb     c0021a80 <__divdi3+0x138>
c0021a68:	74 0a                	je     c0021a74 <__divdi3+0x12c>
c0021a6a:	89 e9                	mov    ecx,ebp
c0021a6c:	31 f6                	xor    esi,esi
c0021a6e:	e9 2d ff ff ff       	jmp    c00219a0 <__divdi3+0x58>
c0021a73:	90                   	nop
c0021a74:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021a77:	89 f1                	mov    ecx,esi
c0021a79:	d3 e7                	shl    edi,cl
c0021a7b:	39 c7                	cmp    edi,eax
c0021a7d:	73 eb                	jae    c0021a6a <__divdi3+0x122>
c0021a7f:	90                   	nop
c0021a80:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021a83:	31 f6                	xor    esi,esi
c0021a85:	e9 16 ff ff ff       	jmp    c00219a0 <__divdi3+0x58>
c0021a8a:	66 90                	xchg   ax,ax
c0021a8c:	31 c9                	xor    ecx,ecx
c0021a8e:	e9 0d ff ff ff       	jmp    c00219a0 <__divdi3+0x58>
c0021a93:	90                   	nop

c0021a94 <__moddi3>:
c0021a94:	55                   	push   ebp
c0021a95:	57                   	push   edi
c0021a96:	56                   	push   esi
c0021a97:	53                   	push   ebx
c0021a98:	83 ec 2c             	sub    esp,0x2c
c0021a9b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021a9f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021aa3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021aa7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021aab:	85 db                	test   ebx,ebx
c0021aad:	0f 88 85 00 00 00    	js     c0021b38 <__moddi3+0xa4>
c0021ab3:	89 de                	mov    esi,ebx
c0021ab5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021abd:	89 d7                	mov    edi,edx
c0021abf:	85 d2                	test   edx,edx
c0021ac1:	79 09                	jns    c0021acc <__moddi3+0x38>
c0021ac3:	f7 d8                	neg    eax
c0021ac5:	83 d2 00             	adc    edx,0x0
c0021ac8:	f7 da                	neg    edx
c0021aca:	89 d7                	mov    edi,edx
c0021acc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021ad0:	89 cd                	mov    ebp,ecx
c0021ad2:	85 ff                	test   edi,edi
c0021ad4:	75 52                	jne    c0021b28 <__moddi3+0x94>
c0021ad6:	89 c3                	mov    ebx,eax
c0021ad8:	39 f0                	cmp    eax,esi
c0021ada:	76 24                	jbe    c0021b00 <__moddi3+0x6c>
c0021adc:	89 c8                	mov    eax,ecx
c0021ade:	89 f2                	mov    edx,esi
c0021ae0:	f7 f3                	div    ebx
c0021ae2:	89 d6                	mov    esi,edx
c0021ae4:	89 f0                	mov    eax,esi
c0021ae6:	31 d2                	xor    edx,edx
c0021ae8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021aec:	85 c9                	test   ecx,ecx
c0021aee:	74 07                	je     c0021af7 <__moddi3+0x63>
c0021af0:	f7 d8                	neg    eax
c0021af2:	83 d2 00             	adc    edx,0x0
c0021af5:	f7 da                	neg    edx
c0021af7:	83 c4 2c             	add    esp,0x2c
c0021afa:	5b                   	pop    ebx
c0021afb:	5e                   	pop    esi
c0021afc:	5f                   	pop    edi
c0021afd:	5d                   	pop    ebp
c0021afe:	c3                   	ret    
c0021aff:	90                   	nop
c0021b00:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021b04:	85 db                	test   ebx,ebx
c0021b06:	75 0d                	jne    c0021b15 <__moddi3+0x81>
c0021b08:	b8 01 00 00 00       	mov    eax,0x1
c0021b0d:	31 d2                	xor    edx,edx
c0021b0f:	f7 f7                	div    edi
c0021b11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021b15:	89 f0                	mov    eax,esi
c0021b17:	31 d2                	xor    edx,edx
c0021b19:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021b1d:	f7 f7                	div    edi
c0021b1f:	89 e8                	mov    eax,ebp
c0021b21:	f7 f7                	div    edi
c0021b23:	89 d6                	mov    esi,edx
c0021b25:	eb bd                	jmp    c0021ae4 <__moddi3+0x50>
c0021b27:	90                   	nop
c0021b28:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021b2c:	39 f7                	cmp    edi,esi
c0021b2e:	76 20                	jbe    c0021b50 <__moddi3+0xbc>
c0021b30:	89 c8                	mov    eax,ecx
c0021b32:	89 f2                	mov    edx,esi
c0021b34:	eb b2                	jmp    c0021ae8 <__moddi3+0x54>
c0021b36:	66 90                	xchg   ax,ax
c0021b38:	f7 d9                	neg    ecx
c0021b3a:	83 d3 00             	adc    ebx,0x0
c0021b3d:	f7 db                	neg    ebx
c0021b3f:	89 de                	mov    esi,ebx
c0021b41:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021b49:	e9 6f ff ff ff       	jmp    c0021abd <__moddi3+0x29>
c0021b4e:	66 90                	xchg   ax,ax
c0021b50:	0f bd c7             	bsr    eax,edi
c0021b53:	83 f0 1f             	xor    eax,0x1f
c0021b56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021b5a:	75 24                	jne    c0021b80 <__moddi3+0xec>
c0021b5c:	39 f7                	cmp    edi,esi
c0021b5e:	72 06                	jb     c0021b66 <__moddi3+0xd2>
c0021b60:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021b64:	77 0c                	ja     c0021b72 <__moddi3+0xde>
c0021b66:	89 e9                	mov    ecx,ebp
c0021b68:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021b6c:	19 fe                	sbb    esi,edi
c0021b6e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021b72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b76:	89 f2                	mov    edx,esi
c0021b78:	e9 6b ff ff ff       	jmp    c0021ae8 <__moddi3+0x54>
c0021b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0021b80:	b8 20 00 00 00       	mov    eax,0x20
c0021b85:	89 c2                	mov    edx,eax
c0021b87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021b8b:	29 da                	sub    edx,ebx
c0021b8d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021b91:	88 d9                	mov    cl,bl
c0021b93:	d3 e7                	shl    edi,cl
c0021b95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b99:	88 d1                	mov    cl,dl
c0021b9b:	d3 e8                	shr    eax,cl
c0021b9d:	09 c7                	or     edi,eax
c0021b9f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021ba3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021ba7:	89 d8                	mov    eax,ebx
c0021ba9:	88 d9                	mov    cl,bl
c0021bab:	d3 e7                	shl    edi,cl
c0021bad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021bb1:	89 f3                	mov    ebx,esi
c0021bb3:	88 d1                	mov    cl,dl
c0021bb5:	d3 eb                	shr    ebx,cl
c0021bb7:	89 c7                	mov    edi,eax
c0021bb9:	88 c1                	mov    cl,al
c0021bbb:	d3 e6                	shl    esi,cl
c0021bbd:	89 e8                	mov    eax,ebp
c0021bbf:	88 d1                	mov    cl,dl
c0021bc1:	d3 e8                	shr    eax,cl
c0021bc3:	09 f0                	or     eax,esi
c0021bc5:	89 f9                	mov    ecx,edi
c0021bc7:	d3 e5                	shl    ebp,cl
c0021bc9:	89 da                	mov    edx,ebx
c0021bcb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021bcf:	89 d3                	mov    ebx,edx
c0021bd1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021bd5:	89 c6                	mov    esi,eax
c0021bd7:	89 d1                	mov    ecx,edx
c0021bd9:	39 d3                	cmp    ebx,edx
c0021bdb:	72 27                	jb     c0021c04 <__moddi3+0x170>
c0021bdd:	74 21                	je     c0021c00 <__moddi3+0x16c>
c0021bdf:	29 f5                	sub    ebp,esi
c0021be1:	19 cb                	sbb    ebx,ecx
c0021be3:	89 de                	mov    esi,ebx
c0021be5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021be9:	d3 e6                	shl    esi,cl
c0021beb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021bef:	89 f9                	mov    ecx,edi
c0021bf1:	d3 ed                	shr    ebp,cl
c0021bf3:	09 ee                	or     esi,ebp
c0021bf5:	89 f0                	mov    eax,esi
c0021bf7:	d3 eb                	shr    ebx,cl
c0021bf9:	89 da                	mov    edx,ebx
c0021bfb:	e9 e8 fe ff ff       	jmp    c0021ae8 <__moddi3+0x54>
c0021c00:	39 c5                	cmp    ebp,eax
c0021c02:	73 db                	jae    c0021bdf <__moddi3+0x14b>
c0021c04:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021c08:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021c0c:	89 d1                	mov    ecx,edx
c0021c0e:	89 c6                	mov    esi,eax
c0021c10:	eb cd                	jmp    c0021bdf <__moddi3+0x14b>
c0021c12:	66 90                	xchg   ax,ax

c0021c14 <__udivdi3>:
c0021c14:	55                   	push   ebp
c0021c15:	57                   	push   edi
c0021c16:	56                   	push   esi
c0021c17:	53                   	push   ebx
c0021c18:	83 ec 1c             	sub    esp,0x1c
c0021c1b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021c1f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021c23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021c27:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021c2b:	85 d2                	test   edx,edx
c0021c2d:	75 41                	jne    c0021c70 <__udivdi3+0x5c>
c0021c2f:	39 f7                	cmp    edi,esi
c0021c31:	76 15                	jbe    c0021c48 <__udivdi3+0x34>
c0021c33:	89 e8                	mov    eax,ebp
c0021c35:	89 f2                	mov    edx,esi
c0021c37:	f7 f7                	div    edi
c0021c39:	31 db                	xor    ebx,ebx
c0021c3b:	89 da                	mov    edx,ebx
c0021c3d:	83 c4 1c             	add    esp,0x1c
c0021c40:	5b                   	pop    ebx
c0021c41:	5e                   	pop    esi
c0021c42:	5f                   	pop    edi
c0021c43:	5d                   	pop    ebp
c0021c44:	c3                   	ret    
c0021c45:	8d 76 00             	lea    esi,[esi+0x0]
c0021c48:	89 f9                	mov    ecx,edi
c0021c4a:	85 ff                	test   edi,edi
c0021c4c:	75 0b                	jne    c0021c59 <__udivdi3+0x45>
c0021c4e:	b8 01 00 00 00       	mov    eax,0x1
c0021c53:	31 d2                	xor    edx,edx
c0021c55:	f7 f7                	div    edi
c0021c57:	89 c1                	mov    ecx,eax
c0021c59:	31 d2                	xor    edx,edx
c0021c5b:	89 f0                	mov    eax,esi
c0021c5d:	f7 f1                	div    ecx
c0021c5f:	89 c3                	mov    ebx,eax
c0021c61:	89 e8                	mov    eax,ebp
c0021c63:	f7 f1                	div    ecx
c0021c65:	89 da                	mov    edx,ebx
c0021c67:	83 c4 1c             	add    esp,0x1c
c0021c6a:	5b                   	pop    ebx
c0021c6b:	5e                   	pop    esi
c0021c6c:	5f                   	pop    edi
c0021c6d:	5d                   	pop    ebp
c0021c6e:	c3                   	ret    
c0021c6f:	90                   	nop
c0021c70:	39 f2                	cmp    edx,esi
c0021c72:	77 1c                	ja     c0021c90 <__udivdi3+0x7c>
c0021c74:	0f bd da             	bsr    ebx,edx
c0021c77:	83 f3 1f             	xor    ebx,0x1f
c0021c7a:	75 24                	jne    c0021ca0 <__udivdi3+0x8c>
c0021c7c:	39 f2                	cmp    edx,esi
c0021c7e:	72 08                	jb     c0021c88 <__udivdi3+0x74>
c0021c80:	39 ef                	cmp    edi,ebp
c0021c82:	0f 87 84 00 00 00    	ja     c0021d0c <__udivdi3+0xf8>
c0021c88:	b8 01 00 00 00       	mov    eax,0x1
c0021c8d:	eb ac                	jmp    c0021c3b <__udivdi3+0x27>
c0021c8f:	90                   	nop
c0021c90:	31 db                	xor    ebx,ebx
c0021c92:	31 c0                	xor    eax,eax
c0021c94:	89 da                	mov    edx,ebx
c0021c96:	83 c4 1c             	add    esp,0x1c
c0021c99:	5b                   	pop    ebx
c0021c9a:	5e                   	pop    esi
c0021c9b:	5f                   	pop    edi
c0021c9c:	5d                   	pop    ebp
c0021c9d:	c3                   	ret    
c0021c9e:	66 90                	xchg   ax,ax
c0021ca0:	b8 20 00 00 00       	mov    eax,0x20
c0021ca5:	29 d8                	sub    eax,ebx
c0021ca7:	88 d9                	mov    cl,bl
c0021ca9:	d3 e2                	shl    edx,cl
c0021cab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021caf:	89 fa                	mov    edx,edi
c0021cb1:	88 c1                	mov    cl,al
c0021cb3:	d3 ea                	shr    edx,cl
c0021cb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021cb9:	09 d1                	or     ecx,edx
c0021cbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021cbf:	88 d9                	mov    cl,bl
c0021cc1:	d3 e7                	shl    edi,cl
c0021cc3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021cc7:	89 f7                	mov    edi,esi
c0021cc9:	88 c1                	mov    cl,al
c0021ccb:	d3 ef                	shr    edi,cl
c0021ccd:	88 d9                	mov    cl,bl
c0021ccf:	d3 e6                	shl    esi,cl
c0021cd1:	89 ea                	mov    edx,ebp
c0021cd3:	88 c1                	mov    cl,al
c0021cd5:	d3 ea                	shr    edx,cl
c0021cd7:	09 d6                	or     esi,edx
c0021cd9:	89 f0                	mov    eax,esi
c0021cdb:	89 fa                	mov    edx,edi
c0021cdd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021ce1:	89 d7                	mov    edi,edx
c0021ce3:	89 c6                	mov    esi,eax
c0021ce5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021ce9:	39 d7                	cmp    edi,edx
c0021ceb:	72 13                	jb     c0021d00 <__udivdi3+0xec>
c0021ced:	74 09                	je     c0021cf8 <__udivdi3+0xe4>
c0021cef:	89 f0                	mov    eax,esi
c0021cf1:	31 db                	xor    ebx,ebx
c0021cf3:	e9 43 ff ff ff       	jmp    c0021c3b <__udivdi3+0x27>
c0021cf8:	88 d9                	mov    cl,bl
c0021cfa:	d3 e5                	shl    ebp,cl
c0021cfc:	39 c5                	cmp    ebp,eax
c0021cfe:	73 ef                	jae    c0021cef <__udivdi3+0xdb>
c0021d00:	8d 46 ff             	lea    eax,[esi-0x1]
c0021d03:	31 db                	xor    ebx,ebx
c0021d05:	e9 31 ff ff ff       	jmp    c0021c3b <__udivdi3+0x27>
c0021d0a:	66 90                	xchg   ax,ax
c0021d0c:	31 c0                	xor    eax,eax
c0021d0e:	e9 28 ff ff ff       	jmp    c0021c3b <__udivdi3+0x27>
c0021d13:	90                   	nop

c0021d14 <__umoddi3>:
c0021d14:	55                   	push   ebp
c0021d15:	57                   	push   edi
c0021d16:	56                   	push   esi
c0021d17:	53                   	push   ebx
c0021d18:	83 ec 1c             	sub    esp,0x1c
c0021d1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021d1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021d23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021d27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021d2b:	89 da                	mov    edx,ebx
c0021d2d:	85 c0                	test   eax,eax
c0021d2f:	75 37                	jne    c0021d68 <__umoddi3+0x54>
c0021d31:	39 df                	cmp    edi,ebx
c0021d33:	76 13                	jbe    c0021d48 <__umoddi3+0x34>
c0021d35:	89 f0                	mov    eax,esi
c0021d37:	f7 f7                	div    edi
c0021d39:	89 d0                	mov    eax,edx
c0021d3b:	31 d2                	xor    edx,edx
c0021d3d:	83 c4 1c             	add    esp,0x1c
c0021d40:	5b                   	pop    ebx
c0021d41:	5e                   	pop    esi
c0021d42:	5f                   	pop    edi
c0021d43:	5d                   	pop    ebp
c0021d44:	c3                   	ret    
c0021d45:	8d 76 00             	lea    esi,[esi+0x0]
c0021d48:	89 fd                	mov    ebp,edi
c0021d4a:	85 ff                	test   edi,edi
c0021d4c:	75 0b                	jne    c0021d59 <__umoddi3+0x45>
c0021d4e:	b8 01 00 00 00       	mov    eax,0x1
c0021d53:	31 d2                	xor    edx,edx
c0021d55:	f7 f7                	div    edi
c0021d57:	89 c5                	mov    ebp,eax
c0021d59:	89 d8                	mov    eax,ebx
c0021d5b:	31 d2                	xor    edx,edx
c0021d5d:	f7 f5                	div    ebp
c0021d5f:	89 f0                	mov    eax,esi
c0021d61:	f7 f5                	div    ebp
c0021d63:	89 d0                	mov    eax,edx
c0021d65:	eb d4                	jmp    c0021d3b <__umoddi3+0x27>
c0021d67:	90                   	nop
c0021d68:	89 f1                	mov    ecx,esi
c0021d6a:	39 d8                	cmp    eax,ebx
c0021d6c:	76 0a                	jbe    c0021d78 <__umoddi3+0x64>
c0021d6e:	89 f0                	mov    eax,esi
c0021d70:	83 c4 1c             	add    esp,0x1c
c0021d73:	5b                   	pop    ebx
c0021d74:	5e                   	pop    esi
c0021d75:	5f                   	pop    edi
c0021d76:	5d                   	pop    ebp
c0021d77:	c3                   	ret    
c0021d78:	0f bd e8             	bsr    ebp,eax
c0021d7b:	83 f5 1f             	xor    ebp,0x1f
c0021d7e:	75 1c                	jne    c0021d9c <__umoddi3+0x88>
c0021d80:	39 d8                	cmp    eax,ebx
c0021d82:	72 04                	jb     c0021d88 <__umoddi3+0x74>
c0021d84:	39 f7                	cmp    edi,esi
c0021d86:	77 08                	ja     c0021d90 <__umoddi3+0x7c>
c0021d88:	89 da                	mov    edx,ebx
c0021d8a:	29 fe                	sub    esi,edi
c0021d8c:	19 c2                	sbb    edx,eax
c0021d8e:	89 f1                	mov    ecx,esi
c0021d90:	89 c8                	mov    eax,ecx
c0021d92:	83 c4 1c             	add    esp,0x1c
c0021d95:	5b                   	pop    ebx
c0021d96:	5e                   	pop    esi
c0021d97:	5f                   	pop    edi
c0021d98:	5d                   	pop    ebp
c0021d99:	c3                   	ret    
c0021d9a:	66 90                	xchg   ax,ax
c0021d9c:	ba 20 00 00 00       	mov    edx,0x20
c0021da1:	29 ea                	sub    edx,ebp
c0021da3:	89 e9                	mov    ecx,ebp
c0021da5:	d3 e0                	shl    eax,cl
c0021da7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021dab:	89 f8                	mov    eax,edi
c0021dad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021db1:	88 d1                	mov    cl,dl
c0021db3:	d3 e8                	shr    eax,cl
c0021db5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021db9:	09 c1                	or     ecx,eax
c0021dbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021dbf:	89 e9                	mov    ecx,ebp
c0021dc1:	d3 e7                	shl    edi,cl
c0021dc3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021dc7:	89 d8                	mov    eax,ebx
c0021dc9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021dcd:	88 d1                	mov    cl,dl
c0021dcf:	d3 e8                	shr    eax,cl
c0021dd1:	89 c7                	mov    edi,eax
c0021dd3:	89 e9                	mov    ecx,ebp
c0021dd5:	d3 e3                	shl    ebx,cl
c0021dd7:	89 f0                	mov    eax,esi
c0021dd9:	88 d1                	mov    cl,dl
c0021ddb:	d3 e8                	shr    eax,cl
c0021ddd:	09 d8                	or     eax,ebx
c0021ddf:	89 e9                	mov    ecx,ebp
c0021de1:	d3 e6                	shl    esi,cl
c0021de3:	89 f3                	mov    ebx,esi
c0021de5:	89 fa                	mov    edx,edi
c0021de7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021deb:	89 d1                	mov    ecx,edx
c0021ded:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021df1:	89 c6                	mov    esi,eax
c0021df3:	89 d7                	mov    edi,edx
c0021df5:	39 d1                	cmp    ecx,edx
c0021df7:	72 27                	jb     c0021e20 <__umoddi3+0x10c>
c0021df9:	74 21                	je     c0021e1c <__umoddi3+0x108>
c0021dfb:	89 ca                	mov    edx,ecx
c0021dfd:	29 f3                	sub    ebx,esi
c0021dff:	19 fa                	sbb    edx,edi
c0021e01:	89 d0                	mov    eax,edx
c0021e03:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021e07:	d3 e0                	shl    eax,cl
c0021e09:	89 e9                	mov    ecx,ebp
c0021e0b:	d3 eb                	shr    ebx,cl
c0021e0d:	09 d8                	or     eax,ebx
c0021e0f:	d3 ea                	shr    edx,cl
c0021e11:	83 c4 1c             	add    esp,0x1c
c0021e14:	5b                   	pop    ebx
c0021e15:	5e                   	pop    esi
c0021e16:	5f                   	pop    edi
c0021e17:	5d                   	pop    ebp
c0021e18:	c3                   	ret    
c0021e19:	8d 76 00             	lea    esi,[esi+0x0]
c0021e1c:	39 c3                	cmp    ebx,eax
c0021e1e:	73 db                	jae    c0021dfb <__umoddi3+0xe7>
c0021e20:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021e24:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021e28:	89 d7                	mov    edi,edx
c0021e2a:	89 c6                	mov    esi,eax
c0021e2c:	eb cd                	jmp    c0021dfb <__umoddi3+0xe7>

Disassembly of section .init:

c0021e2e <_init>:
c0021e2e:	55                   	push   ebp
c0021e2f:	89 e5                	mov    ebp,esp
c0021e31:	e8 be e2 fd ff       	call   c00000f4 <frame_dummy>
c0021e36:	e8 e5 fa ff ff       	call   c0021920 <__do_global_ctors_aux>
c0021e3b:	5d                   	pop    ebp
c0021e3c:	c3                   	ret    

Disassembly of section .fini:

c0021e3d <_fini>:
c0021e3d:	55                   	push   ebp
c0021e3e:	89 e5                	mov    ebp,esp
c0021e40:	e8 3f e2 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021e45:	5d                   	pop    ebp
c0021e46:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021e48 <DriverlessDevice::~DriverlessDevice()>:
c0021e48:	ba dc 38 02 c0       	mov    edx,0xc00238dc
c0021e4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e51:	89 10                	mov    DWORD PTR [eax],edx
c0021e53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e57:	50                   	push   eax
c0021e58:	e8 f9 7a fe ff       	call   c0009956 <Device::~Device()>
c0021e5d:	83 c4 04             	add    esp,0x4
c0021e60:	90                   	nop
c0021e61:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021e62 <DriverlessDevice::~DriverlessDevice()>:
c0021e62:	83 ec 0c             	sub    esp,0xc
c0021e65:	83 ec 0c             	sub    esp,0xc
c0021e68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e6c:	e8 d7 ff ff ff       	call   c0021e48 <DriverlessDevice::~DriverlessDevice()>
c0021e71:	83 c4 10             	add    esp,0x10
c0021e74:	83 ec 08             	sub    esp,0x8
c0021e77:	68 58 01 00 00       	push   0x158
c0021e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e80:	e8 64 b5 fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0021e85:	83 c4 10             	add    esp,0x10
c0021e88:	83 c4 0c             	add    esp,0xc
c0021e8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021e8c <LinkedList<Device>::addElement(Device*)>:
c0021e8c:	83 ec 0c             	sub    esp,0xc
c0021e8f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021e94:	75 10                	jne    c0021ea6 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021e96:	83 ec 0c             	sub    esp,0xc
c0021e99:	68 70 38 02 c0       	push   0xc0023870
c0021e9e:	e8 43 e1 fe ff       	call   c000ffe6 <KePanic(char const*)>
c0021ea3:	83 c4 10             	add    esp,0x10
c0021ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0021eac:	85 c0                	test   eax,eax
c0021eae:	74 3a                	je     c0021eea <LinkedList<Device>::addElement(Device*)+0x5e>
c0021eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021eb7:	85 c0                	test   eax,eax
c0021eb9:	74 2f                	je     c0021eea <LinkedList<Device>::addElement(Device*)+0x5e>
c0021ebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ebf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ec2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ec6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ed4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021edb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ede:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021ee8:	eb 68                	jmp    c0021f52 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eee:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ef0:	85 c0                	test   eax,eax
c0021ef2:	75 4e                	jne    c0021f42 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021efb:	85 c0                	test   eax,eax
c0021efd:	75 43                	jne    c0021f42 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f07:	89 10                	mov    DWORD PTR [eax],edx
c0021f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f1b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f29:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f2c:	85 c0                	test   eax,eax
c0021f2e:	74 22                	je     c0021f52 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021f30:	83 ec 0c             	sub    esp,0xc
c0021f33:	68 92 38 02 c0       	push   0xc0023892
c0021f38:	e8 a9 e0 fe ff       	call   c000ffe6 <KePanic(char const*)>
c0021f3d:	83 c4 10             	add    esp,0x10
c0021f40:	eb 10                	jmp    c0021f52 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021f42:	83 ec 0c             	sub    esp,0xc
c0021f45:	68 9c 38 02 c0       	push   0xc002389c
c0021f4a:	e8 97 e0 fe ff       	call   c000ffe6 <KePanic(char const*)>
c0021f4f:	83 c4 10             	add    esp,0x10
c0021f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f59:	8d 50 01             	lea    edx,[eax+0x1]
c0021f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f60:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021f63:	90                   	nop
c0021f64:	83 c4 0c             	add    esp,0xc
c0021f67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021f68 <LinkedList<Device>::LinkedList()>:
c0021f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021f7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021f9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fa1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021fa8:	90                   	nop
c0021fa9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021fac <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fb2:	85 c0                	test   eax,eax
c0021fb4:	75 0e                	jne    c0021fc4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fbd:	85 c0                	test   eax,eax
c0021fbf:	75 03                	jne    c0021fc4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021fc1:	b0 01                	mov    al,0x1
c0021fc3:	c3                   	ret    
c0021fc4:	b0 00                	mov    al,0x0
c0021fc6:	90                   	nop
c0021fc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021fc8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021fd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021fd0:	83 ec 0c             	sub    esp,0xc
c0021fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fd9:	85 c0                	test   eax,eax
c0021fdb:	75 17                	jne    c0021ff4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021fdd:	83 ec 0c             	sub    esp,0xc
c0021fe0:	68 0c 3b 02 c0       	push   0xc0023b0c
c0021fe5:	e8 fc df fe ff       	call   c000ffe6 <KePanic(char const*)>
c0021fea:	83 c4 10             	add    esp,0x10
c0021fed:	e9 96 00 00 00       	jmp    c0022088 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021ff2:	66 90                	xchg   ax,ax
c0021ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ffb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021ffe:	85 c0                	test   eax,eax
c0022000:	0f 95 c0             	setne  al
c0022003:	0f b6 c0             	movzx  eax,al
c0022006:	85 c0                	test   eax,eax
c0022008:	74 12                	je     c002201c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002200a:	83 ec 0c             	sub    esp,0xc
c002200d:	68 57 3b 02 c0       	push   0xc0023b57
c0022012:	e8 cf df fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022017:	83 c4 10             	add    esp,0x10
c002201a:	66 90                	xchg   ax,ax
c002201c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022020:	8b 00                	mov    eax,DWORD PTR [eax]
c0022022:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022025:	85 c0                	test   eax,eax
c0022027:	0f 94 c0             	sete   al
c002202a:	0f b6 c0             	movzx  eax,al
c002202d:	85 c0                	test   eax,eax
c002202f:	74 33                	je     c0022064 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0022031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022035:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002203b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002203f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002204a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002204d:	83 f8 01             	cmp    eax,0x1
c0022050:	74 22                	je     c0022074 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022052:	83 ec 0c             	sub    esp,0xc
c0022055:	68 30 3b 02 c0       	push   0xc0023b30
c002205a:	e8 87 df fe ff       	call   c000ffe6 <KePanic(char const*)>
c002205f:	83 c4 10             	add    esp,0x10
c0022062:	eb 10                	jmp    c0022074 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022068:	8b 00                	mov    eax,DWORD PTR [eax]
c002206a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002206d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022071:	89 10                	mov    DWORD PTR [eax],edx
c0022073:	90                   	nop
c0022074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022078:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002207b:	8d 50 ff             	lea    edx,[eax-0x1]
c002207e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022082:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022085:	8d 76 00             	lea    esi,[esi+0x0]
c0022088:	83 c4 0c             	add    esp,0xc
c002208b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002208c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002208c:	83 ec 0c             	sub    esp,0xc
c002208f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022094:	75 12                	jne    c00220a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022096:	83 ec 0c             	sub    esp,0xc
c0022099:	68 70 38 02 c0       	push   0xc0023870
c002209e:	e8 43 df fe ff       	call   c000ffe6 <KePanic(char const*)>
c00220a3:	83 c4 10             	add    esp,0x10
c00220a6:	66 90                	xchg   ax,ax
c00220a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00220ae:	85 c0                	test   eax,eax
c00220b0:	74 36                	je     c00220e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00220b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220b9:	85 c0                	test   eax,eax
c00220bb:	74 2b                	je     c00220e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00220bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00220cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00220d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00220e4:	eb 6a                	jmp    c0022150 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00220e6:	66 90                	xchg   ax,ax
c00220e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00220ee:	85 c0                	test   eax,eax
c00220f0:	75 4e                	jne    c0022140 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00220f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220f9:	85 c0                	test   eax,eax
c00220fb:	75 43                	jne    c0022140 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00220fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022101:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022105:	89 10                	mov    DWORD PTR [eax],edx
c0022107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002210b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002210f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022119:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022124:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022127:	85 c0                	test   eax,eax
c0022129:	74 25                	je     c0022150 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002212b:	83 ec 0c             	sub    esp,0xc
c002212e:	68 92 38 02 c0       	push   0xc0023892
c0022133:	e8 ae de fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022138:	83 c4 10             	add    esp,0x10
c002213b:	eb 13                	jmp    c0022150 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002213d:	8d 76 00             	lea    esi,[esi+0x0]
c0022140:	83 ec 0c             	sub    esp,0xc
c0022143:	68 9c 38 02 c0       	push   0xc002389c
c0022148:	e8 99 de fe ff       	call   c000ffe6 <KePanic(char const*)>
c002214d:	83 c4 10             	add    esp,0x10
c0022150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022154:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022157:	8d 50 01             	lea    edx,[eax+0x1]
c002215a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002215e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022161:	90                   	nop
c0022162:	83 c4 0c             	add    esp,0xc
c0022165:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022168 <ACPI::~ACPI()>:
c0022168:	83 ec 0c             	sub    esp,0xc
c002216b:	ba 8c 3f 02 c0       	mov    edx,0xc0023f8c
c0022170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022174:	89 10                	mov    DWORD PTR [eax],edx
c0022176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217a:	83 ec 0c             	sub    esp,0xc
c002217d:	50                   	push   eax
c002217e:	e8 d3 77 fe ff       	call   c0009956 <Device::~Device()>
c0022183:	83 c4 10             	add    esp,0x10
c0022186:	90                   	nop
c0022187:	83 c4 0c             	add    esp,0xc
c002218a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002218c <ACPI::~ACPI()>:
c002218c:	83 ec 0c             	sub    esp,0xc
c002218f:	83 ec 0c             	sub    esp,0xc
c0022192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022196:	e8 cd ff ff ff       	call   c0022168 <ACPI::~ACPI()>
c002219b:	83 c4 10             	add    esp,0x10
c002219e:	83 ec 08             	sub    esp,0x8
c00221a1:	68 64 12 00 00       	push   0x1264
c00221a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221aa:	e8 3a b2 fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00221af:	83 c4 10             	add    esp,0x10
c00221b2:	83 c4 0c             	add    esp,0xc
c00221b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00221b8 <LinkedList<Device>::~LinkedList()>:
c00221b8:	90                   	nop
c00221b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00221bc <LinkedList<Device>::isEmpty()>:
c00221bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00221c2:	85 c0                	test   eax,eax
c00221c4:	75 0e                	jne    c00221d4 <LinkedList<Device>::isEmpty()+0x18>
c00221c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221cd:	85 c0                	test   eax,eax
c00221cf:	75 03                	jne    c00221d4 <LinkedList<Device>::isEmpty()+0x18>
c00221d1:	b0 01                	mov    al,0x1
c00221d3:	c3                   	ret    
c00221d4:	b0 00                	mov    al,0x0
c00221d6:	90                   	nop
c00221d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00221d8 <LinkedList<Device>::getFirstElement()>:
c00221d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00221de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00221e0 <LinkedList<Device>::removeFirst()>:
c00221e0:	83 ec 0c             	sub    esp,0xc
c00221e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00221e9:	85 c0                	test   eax,eax
c00221eb:	75 17                	jne    c0022204 <LinkedList<Device>::removeFirst()+0x24>
c00221ed:	83 ec 0c             	sub    esp,0xc
c00221f0:	68 0c 3b 02 c0       	push   0xc0023b0c
c00221f5:	e8 ec dd fe ff       	call   c000ffe6 <KePanic(char const*)>
c00221fa:	83 c4 10             	add    esp,0x10
c00221fd:	e9 92 00 00 00       	jmp    c0022294 <LinkedList<Device>::removeFirst()+0xb4>
c0022202:	66 90                	xchg   ax,ax
c0022204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022208:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002220b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022211:	85 c0                	test   eax,eax
c0022213:	74 13                	je     c0022228 <LinkedList<Device>::removeFirst()+0x48>
c0022215:	83 ec 0c             	sub    esp,0xc
c0022218:	68 57 3b 02 c0       	push   0xc0023b57
c002221d:	e8 c4 dd fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022222:	83 c4 10             	add    esp,0x10
c0022225:	8d 76 00             	lea    esi,[esi+0x0]
c0022228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002222c:	8b 00                	mov    eax,DWORD PTR [eax]
c002222e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022234:	85 c0                	test   eax,eax
c0022236:	75 34                	jne    c002226c <LinkedList<Device>::removeFirst()+0x8c>
c0022238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002223c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022246:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002224d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022251:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022254:	83 f8 01             	cmp    eax,0x1
c0022257:	74 27                	je     c0022280 <LinkedList<Device>::removeFirst()+0xa0>
c0022259:	83 ec 0c             	sub    esp,0xc
c002225c:	68 30 3b 02 c0       	push   0xc0023b30
c0022261:	e8 80 dd fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022266:	83 c4 10             	add    esp,0x10
c0022269:	eb 15                	jmp    c0022280 <LinkedList<Device>::removeFirst()+0xa0>
c002226b:	90                   	nop
c002226c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022270:	8b 00                	mov    eax,DWORD PTR [eax]
c0022272:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227c:	89 10                	mov    DWORD PTR [eax],edx
c002227e:	66 90                	xchg   ax,ax
c0022280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022284:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022287:	8d 50 ff             	lea    edx,[eax-0x1]
c002228a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022291:	8d 76 00             	lea    esi,[esi+0x0]
c0022294:	83 c4 0c             	add    esp,0xc
c0022297:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022298 <Computer::~Computer()>:
c0022298:	83 ec 0c             	sub    esp,0xc
c002229b:	ba 28 41 02 c0       	mov    edx,0xc0024128
c00222a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a4:	89 10                	mov    DWORD PTR [eax],edx
c00222a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222aa:	83 ec 0c             	sub    esp,0xc
c00222ad:	50                   	push   eax
c00222ae:	e8 a3 76 fe ff       	call   c0009956 <Device::~Device()>
c00222b3:	83 c4 10             	add    esp,0x10
c00222b6:	90                   	nop
c00222b7:	83 c4 0c             	add    esp,0xc
c00222ba:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00222bc <Computer::~Computer()>:
c00222bc:	83 ec 0c             	sub    esp,0xc
c00222bf:	83 ec 0c             	sub    esp,0xc
c00222c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222c6:	e8 cd ff ff ff       	call   c0022298 <Computer::~Computer()>
c00222cb:	83 c4 10             	add    esp,0x10
c00222ce:	83 ec 08             	sub    esp,0x8
c00222d1:	68 68 01 00 00       	push   0x168
c00222d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222da:	e8 0a b1 fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00222df:	83 c4 10             	add    esp,0x10
c00222e2:	83 c4 0c             	add    esp,0xc
c00222e5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00222e6 <idleCommon()>:
c00222e6:	83 ec 0c             	sub    esp,0xc
c00222e9:	fa                   	cli    
c00222ea:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c00222f0:	e8 1b 4e ff ff       	call   c0017110 <schedule()>
c00222f5:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00222fc:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0022303:	75 01                	jne    c0022306 <idleCommon()+0x20>
c0022305:	fb                   	sti    
c0022306:	83 c4 0c             	add    esp,0xc
c0022309:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002230a <LinkedList<UnixFile>::~LinkedList()>:
c002230a:	90                   	nop
c002230b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002230c <LinkedList<UnixFile>::LinkedList()>:
c002230c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022310:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002231a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022321:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022325:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002232c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022330:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002233a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022345:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002234c:	90                   	nop
c002234d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002234e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002234e:	83 ec 0c             	sub    esp,0xc
c0022351:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022356:	75 10                	jne    c0022368 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022358:	83 ec 0c             	sub    esp,0xc
c002235b:	68 70 38 02 c0       	push   0xc0023870
c0022360:	e8 81 dc fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022365:	83 c4 10             	add    esp,0x10
c0022368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236c:	8b 00                	mov    eax,DWORD PTR [eax]
c002236e:	85 c0                	test   eax,eax
c0022370:	74 34                	je     c00223a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022376:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022379:	85 c0                	test   eax,eax
c002237b:	74 29                	je     c00223a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002237d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022381:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022384:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022388:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002238b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002238f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022393:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002239d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00223a4:	eb 65                	jmp    c002240b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00223a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00223ac:	85 c0                	test   eax,eax
c00223ae:	75 4b                	jne    c00223fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00223b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223b7:	85 c0                	test   eax,eax
c00223b9:	75 40                	jne    c00223fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00223bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00223c3:	89 10                	mov    DWORD PTR [eax],edx
c00223c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00223cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00223d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00223de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00223e5:	85 c0                	test   eax,eax
c00223e7:	74 22                	je     c002240b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00223e9:	83 ec 0c             	sub    esp,0xc
c00223ec:	68 92 38 02 c0       	push   0xc0023892
c00223f1:	e8 f0 db fe ff       	call   c000ffe6 <KePanic(char const*)>
c00223f6:	83 c4 10             	add    esp,0x10
c00223f9:	eb 10                	jmp    c002240b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00223fb:	83 ec 0c             	sub    esp,0xc
c00223fe:	68 9c 38 02 c0       	push   0xc002389c
c0022403:	e8 de db fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022408:	83 c4 10             	add    esp,0x10
c002240b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002240f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022412:	8d 50 01             	lea    edx,[eax+0x1]
c0022415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022419:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002241c:	90                   	nop
c002241d:	83 c4 0c             	add    esp,0xc
c0022420:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022422 <LinkedList<UnixFile>::getFirstElement()>:
c0022422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022426:	8b 00                	mov    eax,DWORD PTR [eax]
c0022428:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002242a <LinkedList<UnixFile>::removeFirst()>:
c002242a:	83 ec 0c             	sub    esp,0xc
c002242d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022431:	8b 00                	mov    eax,DWORD PTR [eax]
c0022433:	85 c0                	test   eax,eax
c0022435:	75 12                	jne    c0022449 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022437:	83 ec 0c             	sub    esp,0xc
c002243a:	68 0c 3b 02 c0       	push   0xc0023b0c
c002243f:	e8 a2 db fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022444:	83 c4 10             	add    esp,0x10
c0022447:	eb 7e                	jmp    c00224c7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002244d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022450:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022453:	85 c0                	test   eax,eax
c0022455:	74 10                	je     c0022467 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022457:	83 ec 0c             	sub    esp,0xc
c002245a:	68 57 3b 02 c0       	push   0xc0023b57
c002245f:	e8 82 db fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022464:	83 c4 10             	add    esp,0x10
c0022467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002246b:	8b 00                	mov    eax,DWORD PTR [eax]
c002246d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022470:	85 c0                	test   eax,eax
c0022472:	75 33                	jne    c00224a7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022478:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002247e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022482:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002248d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022490:	83 f8 01             	cmp    eax,0x1
c0022493:	74 21                	je     c00224b6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022495:	83 ec 0c             	sub    esp,0xc
c0022498:	68 30 3b 02 c0       	push   0xc0023b30
c002249d:	e8 44 db fe ff       	call   c000ffe6 <KePanic(char const*)>
c00224a2:	83 c4 10             	add    esp,0x10
c00224a5:	eb 0f                	jmp    c00224b6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00224a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00224ad:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00224b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b4:	89 10                	mov    DWORD PTR [eax],edx
c00224b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00224bd:	8d 50 ff             	lea    edx,[eax-0x1]
c00224c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224c4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00224c7:	83 c4 0c             	add    esp,0xc
c00224ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00224cc <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00224cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00224d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00224d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00224d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00224d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00224d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00224db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00224dc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00224dc:	90                   	nop
c00224dd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00224e0 <ThreadControlBlock::ThreadControlBlock()>:
c00224e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224e4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00224eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224ef:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00224f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224fa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022501:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022505:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002250c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022510:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0022517:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002251b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002251f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022523:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022527:	90                   	nop
c0022528:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002252c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002252c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022530:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002253a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022545:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002254c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022550:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002255a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022565:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002256c:	90                   	nop
c002256d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002256e <IOAPIC::~IOAPIC()>:
c002256e:	83 ec 0c             	sub    esp,0xc
c0022571:	ba f4 55 02 c0       	mov    edx,0xc00255f4
c0022576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002257a:	89 10                	mov    DWORD PTR [eax],edx
c002257c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022580:	83 ec 0c             	sub    esp,0xc
c0022583:	50                   	push   eax
c0022584:	e8 cd 73 fe ff       	call   c0009956 <Device::~Device()>
c0022589:	83 c4 10             	add    esp,0x10
c002258c:	90                   	nop
c002258d:	83 c4 0c             	add    esp,0xc
c0022590:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022592 <IOAPIC::~IOAPIC()>:
c0022592:	83 ec 0c             	sub    esp,0xc
c0022595:	83 ec 0c             	sub    esp,0xc
c0022598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002259c:	e8 cd ff ff ff       	call   c002256e <IOAPIC::~IOAPIC()>
c00225a1:	83 c4 10             	add    esp,0x10
c00225a4:	83 ec 08             	sub    esp,0x8
c00225a7:	68 68 01 00 00       	push   0x168
c00225ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225b0:	e8 34 ae fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00225b5:	83 c4 10             	add    esp,0x10
c00225b8:	83 c4 0c             	add    esp,0xc
c00225bb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00225bc <CPU::~CPU()>:
c00225bc:	83 ec 0c             	sub    esp,0xc
c00225bf:	ba 68 59 02 c0       	mov    edx,0xc0025968
c00225c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225c8:	89 10                	mov    DWORD PTR [eax],edx
c00225ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ce:	83 ec 0c             	sub    esp,0xc
c00225d1:	50                   	push   eax
c00225d2:	e8 7f 73 fe ff       	call   c0009956 <Device::~Device()>
c00225d7:	83 c4 10             	add    esp,0x10
c00225da:	90                   	nop
c00225db:	83 c4 0c             	add    esp,0xc
c00225de:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00225e0 <CPU::~CPU()>:
c00225e0:	83 ec 0c             	sub    esp,0xc
c00225e3:	83 ec 0c             	sub    esp,0xc
c00225e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225ea:	e8 cd ff ff ff       	call   c00225bc <CPU::~CPU()>
c00225ef:	83 c4 10             	add    esp,0x10
c00225f2:	83 ec 08             	sub    esp,0x8
c00225f5:	68 78 11 00 00       	push   0x1178
c00225fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225fe:	e8 e6 ad fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022603:	83 c4 10             	add    esp,0x10
c0022606:	83 c4 0c             	add    esp,0xc
c0022609:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002260a <PCI::~PCI()>:
c002260a:	83 ec 0c             	sub    esp,0xc
c002260d:	ba cc 5e 02 c0       	mov    edx,0xc0025ecc
c0022612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022616:	89 10                	mov    DWORD PTR [eax],edx
c0022618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002261c:	83 ec 0c             	sub    esp,0xc
c002261f:	50                   	push   eax
c0022620:	e8 77 63 fe ff       	call   c000899c <Bus::~Bus()>
c0022625:	83 c4 10             	add    esp,0x10
c0022628:	90                   	nop
c0022629:	83 c4 0c             	add    esp,0xc
c002262c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002262e <PCI::~PCI()>:
c002262e:	83 ec 0c             	sub    esp,0xc
c0022631:	83 ec 0c             	sub    esp,0xc
c0022634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022638:	e8 cd ff ff ff       	call   c002260a <PCI::~PCI()>
c002263d:	83 c4 10             	add    esp,0x10
c0022640:	83 ec 08             	sub    esp,0x8
c0022643:	68 5c 01 00 00       	push   0x15c
c0022648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002264c:	e8 98 ad fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022651:	83 c4 10             	add    esp,0x10
c0022654:	83 c4 0c             	add    esp,0xc
c0022657:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022658 <IDE::~IDE()>:
c0022658:	83 ec 0c             	sub    esp,0xc
c002265b:	ba 1c 60 02 c0       	mov    edx,0xc002601c
c0022660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022664:	89 10                	mov    DWORD PTR [eax],edx
c0022666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002266a:	83 ec 0c             	sub    esp,0xc
c002266d:	50                   	push   eax
c002266e:	e8 71 77 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0022673:	83 c4 10             	add    esp,0x10
c0022676:	90                   	nop
c0022677:	83 c4 0c             	add    esp,0xc
c002267a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002267c <IDE::~IDE()>:
c002267c:	83 ec 0c             	sub    esp,0xc
c002267f:	83 ec 0c             	sub    esp,0xc
c0022682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022686:	e8 cd ff ff ff       	call   c0022658 <IDE::~IDE()>
c002268b:	83 c4 10             	add    esp,0x10
c002268e:	83 ec 08             	sub    esp,0x8
c0022691:	68 70 02 00 00       	push   0x270
c0022696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002269a:	e8 4a ad fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c002269f:	83 c4 10             	add    esp,0x10
c00226a2:	83 c4 0c             	add    esp,0xc
c00226a5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00226a6 <SATABus::~SATABus()>:
c00226a6:	83 ec 0c             	sub    esp,0xc
c00226a9:	ba 6c 60 02 c0       	mov    edx,0xc002606c
c00226ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226b2:	89 10                	mov    DWORD PTR [eax],edx
c00226b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226b8:	83 ec 0c             	sub    esp,0xc
c00226bb:	50                   	push   eax
c00226bc:	e8 23 77 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c00226c1:	83 c4 10             	add    esp,0x10
c00226c4:	90                   	nop
c00226c5:	83 c4 0c             	add    esp,0xc
c00226c8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00226ca <SATABus::~SATABus()>:
c00226ca:	83 ec 0c             	sub    esp,0xc
c00226cd:	83 ec 0c             	sub    esp,0xc
c00226d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226d4:	e8 cd ff ff ff       	call   c00226a6 <SATABus::~SATABus()>
c00226d9:	83 c4 10             	add    esp,0x10
c00226dc:	83 ec 08             	sub    esp,0x8
c00226df:	68 64 01 00 00       	push   0x164
c00226e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226e8:	e8 fc ac fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00226ed:	83 c4 10             	add    esp,0x10
c00226f0:	83 c4 0c             	add    esp,0xc
c00226f3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00226f4 <ATA::~ATA()>:
c00226f4:	83 ec 0c             	sub    esp,0xc
c00226f7:	ba 54 61 02 c0       	mov    edx,0xc0026154
c00226fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022700:	89 10                	mov    DWORD PTR [eax],edx
c0022702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022706:	83 ec 0c             	sub    esp,0xc
c0022709:	50                   	push   eax
c002270a:	e8 b7 77 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c002270f:	83 c4 10             	add    esp,0x10
c0022712:	90                   	nop
c0022713:	83 c4 0c             	add    esp,0xc
c0022716:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022718 <ATA::~ATA()>:
c0022718:	83 ec 0c             	sub    esp,0xc
c002271b:	83 ec 0c             	sub    esp,0xc
c002271e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022722:	e8 cd ff ff ff       	call   c00226f4 <ATA::~ATA()>
c0022727:	83 c4 10             	add    esp,0x10
c002272a:	83 ec 08             	sub    esp,0x8
c002272d:	68 8c 01 00 00       	push   0x18c
c0022732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022736:	e8 ae ac fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c002273b:	83 c4 10             	add    esp,0x10
c002273e:	83 c4 0c             	add    esp,0xc
c0022741:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022742 <ATAPI::~ATAPI()>:
c0022742:	83 ec 0c             	sub    esp,0xc
c0022745:	ba 9c 61 02 c0       	mov    edx,0xc002619c
c002274a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002274e:	89 10                	mov    DWORD PTR [eax],edx
c0022750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022754:	83 ec 0c             	sub    esp,0xc
c0022757:	50                   	push   eax
c0022758:	e8 69 77 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c002275d:	83 c4 10             	add    esp,0x10
c0022760:	90                   	nop
c0022761:	83 c4 0c             	add    esp,0xc
c0022764:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022766 <ATAPI::~ATAPI()>:
c0022766:	83 ec 0c             	sub    esp,0xc
c0022769:	83 ec 0c             	sub    esp,0xc
c002276c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022770:	e8 cd ff ff ff       	call   c0022742 <ATAPI::~ATAPI()>
c0022775:	83 c4 10             	add    esp,0x10
c0022778:	83 ec 08             	sub    esp,0x8
c002277b:	68 84 01 00 00       	push   0x184
c0022780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022784:	e8 60 ac fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022789:	83 c4 10             	add    esp,0x10
c002278c:	83 c4 0c             	add    esp,0xc
c002278f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022790 <SATA::~SATA()>:
c0022790:	83 ec 0c             	sub    esp,0xc
c0022793:	ba 5c 62 02 c0       	mov    edx,0xc002625c
c0022798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002279c:	89 10                	mov    DWORD PTR [eax],edx
c002279e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227a2:	83 ec 0c             	sub    esp,0xc
c00227a5:	50                   	push   eax
c00227a6:	e8 1b 77 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c00227ab:	83 c4 10             	add    esp,0x10
c00227ae:	90                   	nop
c00227af:	83 c4 0c             	add    esp,0xc
c00227b2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00227b4 <SATA::~SATA()>:
c00227b4:	83 ec 0c             	sub    esp,0xc
c00227b7:	83 ec 0c             	sub    esp,0xc
c00227ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227be:	e8 cd ff ff ff       	call   c0022790 <SATA::~SATA()>
c00227c3:	83 c4 10             	add    esp,0x10
c00227c6:	83 ec 08             	sub    esp,0x8
c00227c9:	68 7c 01 00 00       	push   0x17c
c00227ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227d2:	e8 12 ac fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00227d7:	83 c4 10             	add    esp,0x10
c00227da:	83 c4 0c             	add    esp,0xc
c00227dd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00227de <SATAPI::~SATAPI()>:
c00227de:	83 ec 0c             	sub    esp,0xc
c00227e1:	ba 80 63 02 c0       	mov    edx,0xc0026380
c00227e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227ea:	89 10                	mov    DWORD PTR [eax],edx
c00227ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227f0:	83 ec 0c             	sub    esp,0xc
c00227f3:	50                   	push   eax
c00227f4:	e8 cd 76 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c00227f9:	83 c4 10             	add    esp,0x10
c00227fc:	90                   	nop
c00227fd:	83 c4 0c             	add    esp,0xc
c0022800:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022802 <SATAPI::~SATAPI()>:
c0022802:	83 ec 0c             	sub    esp,0xc
c0022805:	83 ec 0c             	sub    esp,0xc
c0022808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002280c:	e8 cd ff ff ff       	call   c00227de <SATAPI::~SATAPI()>
c0022811:	83 c4 10             	add    esp,0x10
c0022814:	83 ec 08             	sub    esp,0x8
c0022817:	68 84 01 00 00       	push   0x184
c002281c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022820:	e8 c4 ab fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022825:	83 c4 10             	add    esp,0x10
c0022828:	83 c4 0c             	add    esp,0xc
c002282b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002282c <APICTimer::~APICTimer()>:
c002282c:	83 ec 0c             	sub    esp,0xc
c002282f:	ba d4 63 02 c0       	mov    edx,0xc00263d4
c0022834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022838:	89 10                	mov    DWORD PTR [eax],edx
c002283a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002283e:	83 ec 0c             	sub    esp,0xc
c0022841:	50                   	push   eax
c0022842:	e8 4d 88 fe ff       	call   c000b094 <Timer::~Timer()>
c0022847:	83 c4 10             	add    esp,0x10
c002284a:	90                   	nop
c002284b:	83 c4 0c             	add    esp,0xc
c002284e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022850 <APICTimer::~APICTimer()>:
c0022850:	83 ec 0c             	sub    esp,0xc
c0022853:	83 ec 0c             	sub    esp,0xc
c0022856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002285a:	e8 cd ff ff ff       	call   c002282c <APICTimer::~APICTimer()>
c002285f:	83 c4 10             	add    esp,0x10
c0022862:	83 ec 08             	sub    esp,0x8
c0022865:	68 60 01 00 00       	push   0x160
c002286a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002286e:	e8 76 ab fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022873:	83 c4 10             	add    esp,0x10
c0022876:	83 c4 0c             	add    esp,0xc
c0022879:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002287c <PIT::~PIT()>:
c002287c:	83 ec 0c             	sub    esp,0xc
c002287f:	ba 24 64 02 c0       	mov    edx,0xc0026424
c0022884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022888:	89 10                	mov    DWORD PTR [eax],edx
c002288a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002288e:	83 ec 0c             	sub    esp,0xc
c0022891:	50                   	push   eax
c0022892:	e8 fd 87 fe ff       	call   c000b094 <Timer::~Timer()>
c0022897:	83 c4 10             	add    esp,0x10
c002289a:	90                   	nop
c002289b:	83 c4 0c             	add    esp,0xc
c002289e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00228a0 <PIT::~PIT()>:
c00228a0:	83 ec 0c             	sub    esp,0xc
c00228a3:	83 ec 0c             	sub    esp,0xc
c00228a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228aa:	e8 cd ff ff ff       	call   c002287c <PIT::~PIT()>
c00228af:	83 c4 10             	add    esp,0x10
c00228b2:	83 ec 08             	sub    esp,0x8
c00228b5:	68 5c 01 00 00       	push   0x15c
c00228ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228be:	e8 26 ab fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00228c3:	83 c4 10             	add    esp,0x10
c00228c6:	83 c4 0c             	add    esp,0xc
c00228c9:	c3                   	ret    

Disassembly of section userkernel:

c0028000 <KiDefaultSignalHandlerAbort(int)>:
c0028000:	57                   	push   edi
c0028001:	b9 07 00 00 00       	mov    ecx,0x7
c0028006:	56                   	push   esi
c0028007:	be 37 46 02 c0       	mov    esi,0xc0024637
c002800c:	83 ec 24             	sub    esp,0x24
c002800f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0028013:	fc                   	cld    
c0028014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002801a:	50                   	push   eax
c002801b:	6a 00                	push   0x0
c002801d:	6a 38                	push   0x38
c002801f:	6a 01                	push   0x1
c0028021:	e8 2c 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0028026:	83 c4 34             	add    esp,0x34
c0028029:	5e                   	pop    esi
c002802a:	5f                   	pop    edi
c002802b:	c3                   	ret    

c002802c <KiDefaultSignalHandlerTerminate(int)>:
c002802c:	57                   	push   edi
c002802d:	b9 08 00 00 00       	mov    ecx,0x8
c0028032:	56                   	push   esi
c0028033:	be 53 46 02 c0       	mov    esi,0xc0024653
c0028038:	83 ec 24             	sub    esp,0x24
c002803b:	89 e7                	mov    edi,esp
c002803d:	fc                   	cld    
c002803e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028040:	54                   	push   esp
c0028041:	6a 00                	push   0x0
c0028043:	6a 37                	push   0x37
c0028045:	6a 01                	push   0x1
c0028047:	e8 06 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002804c:	83 c4 34             	add    esp,0x34
c002804f:	5e                   	pop    esi
c0028050:	5f                   	pop    edi
c0028051:	c3                   	ret    

c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0028052:	53                   	push   ebx
c0028053:	83 ec 10             	sub    esp,0x10
c0028056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002805a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002805e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0028062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0028066:	cd 60                	int    0x60
c0028068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002806c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028078:	83 c4 10             	add    esp,0x10
c002807b:	5b                   	pop    ebx
c002807c:	c3                   	ret    

Disassembly of section align_previous:

c0029000 <DO_NOT_DELETE()>:
c0029000:	c3                   	ret    
